
BLE_Beacon_HeartRate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f00  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  08008040  08008040  00018040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800854c  0800854c  0001854c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008554  08008554  00018554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008558  08008558  00018558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000004  0800855c  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000015c  200001e0  08008738  000201e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000033c  08008738  0002033c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001124e  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000024e4  00000000  00000000  0003145e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001090  00000000  00000000  00033948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000fa8  00000000  00000000  000349d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0001dba2  00000000  00000000  00035980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001077a  00000000  00000000  00053522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000b50e7  00000000  00000000  00063c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00118d83  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000055c4  00000000  00000000  00118dd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	08008028 	.word	0x08008028

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	08008028 	.word	0x08008028

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b974 	b.w	8000e98 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9d08      	ldr	r5, [sp, #32]
 8000bce:	4604      	mov	r4, r0
 8000bd0:	468e      	mov	lr, r1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d14d      	bne.n	8000c72 <__udivmoddi4+0xaa>
 8000bd6:	428a      	cmp	r2, r1
 8000bd8:	4694      	mov	ip, r2
 8000bda:	d969      	bls.n	8000cb0 <__udivmoddi4+0xe8>
 8000bdc:	fab2 f282 	clz	r2, r2
 8000be0:	b152      	cbz	r2, 8000bf8 <__udivmoddi4+0x30>
 8000be2:	fa01 f302 	lsl.w	r3, r1, r2
 8000be6:	f1c2 0120 	rsb	r1, r2, #32
 8000bea:	fa20 f101 	lsr.w	r1, r0, r1
 8000bee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000bf6:	4094      	lsls	r4, r2
 8000bf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bfc:	0c21      	lsrs	r1, r4, #16
 8000bfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000c02:	fa1f f78c 	uxth.w	r7, ip
 8000c06:	fb08 e316 	mls	r3, r8, r6, lr
 8000c0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c0e:	fb06 f107 	mul.w	r1, r6, r7
 8000c12:	4299      	cmp	r1, r3
 8000c14:	d90a      	bls.n	8000c2c <__udivmoddi4+0x64>
 8000c16:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c1e:	f080 811f 	bcs.w	8000e60 <__udivmoddi4+0x298>
 8000c22:	4299      	cmp	r1, r3
 8000c24:	f240 811c 	bls.w	8000e60 <__udivmoddi4+0x298>
 8000c28:	3e02      	subs	r6, #2
 8000c2a:	4463      	add	r3, ip
 8000c2c:	1a5b      	subs	r3, r3, r1
 8000c2e:	b2a4      	uxth	r4, r4
 8000c30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c34:	fb08 3310 	mls	r3, r8, r0, r3
 8000c38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c3c:	fb00 f707 	mul.w	r7, r0, r7
 8000c40:	42a7      	cmp	r7, r4
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x92>
 8000c44:	eb1c 0404 	adds.w	r4, ip, r4
 8000c48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4c:	f080 810a 	bcs.w	8000e64 <__udivmoddi4+0x29c>
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	f240 8107 	bls.w	8000e64 <__udivmoddi4+0x29c>
 8000c56:	4464      	add	r4, ip
 8000c58:	3802      	subs	r0, #2
 8000c5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c5e:	1be4      	subs	r4, r4, r7
 8000c60:	2600      	movs	r6, #0
 8000c62:	b11d      	cbz	r5, 8000c6c <__udivmoddi4+0xa4>
 8000c64:	40d4      	lsrs	r4, r2
 8000c66:	2300      	movs	r3, #0
 8000c68:	e9c5 4300 	strd	r4, r3, [r5]
 8000c6c:	4631      	mov	r1, r6
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0xc2>
 8000c76:	2d00      	cmp	r5, #0
 8000c78:	f000 80ef 	beq.w	8000e5a <__udivmoddi4+0x292>
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c82:	4630      	mov	r0, r6
 8000c84:	4631      	mov	r1, r6
 8000c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8a:	fab3 f683 	clz	r6, r3
 8000c8e:	2e00      	cmp	r6, #0
 8000c90:	d14a      	bne.n	8000d28 <__udivmoddi4+0x160>
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d302      	bcc.n	8000c9c <__udivmoddi4+0xd4>
 8000c96:	4282      	cmp	r2, r0
 8000c98:	f200 80f9 	bhi.w	8000e8e <__udivmoddi4+0x2c6>
 8000c9c:	1a84      	subs	r4, r0, r2
 8000c9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	469e      	mov	lr, r3
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	d0e0      	beq.n	8000c6c <__udivmoddi4+0xa4>
 8000caa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cae:	e7dd      	b.n	8000c6c <__udivmoddi4+0xa4>
 8000cb0:	b902      	cbnz	r2, 8000cb4 <__udivmoddi4+0xec>
 8000cb2:	deff      	udf	#255	; 0xff
 8000cb4:	fab2 f282 	clz	r2, r2
 8000cb8:	2a00      	cmp	r2, #0
 8000cba:	f040 8092 	bne.w	8000de2 <__udivmoddi4+0x21a>
 8000cbe:	eba1 010c 	sub.w	r1, r1, ip
 8000cc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cc6:	fa1f fe8c 	uxth.w	lr, ip
 8000cca:	2601      	movs	r6, #1
 8000ccc:	0c20      	lsrs	r0, r4, #16
 8000cce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cda:	fb0e f003 	mul.w	r0, lr, r3
 8000cde:	4288      	cmp	r0, r1
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x12c>
 8000ce2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x12a>
 8000cec:	4288      	cmp	r0, r1
 8000cee:	f200 80cb 	bhi.w	8000e88 <__udivmoddi4+0x2c0>
 8000cf2:	4643      	mov	r3, r8
 8000cf4:	1a09      	subs	r1, r1, r0
 8000cf6:	b2a4      	uxth	r4, r4
 8000cf8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000d00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d04:	fb0e fe00 	mul.w	lr, lr, r0
 8000d08:	45a6      	cmp	lr, r4
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x156>
 8000d0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d14:	d202      	bcs.n	8000d1c <__udivmoddi4+0x154>
 8000d16:	45a6      	cmp	lr, r4
 8000d18:	f200 80bb 	bhi.w	8000e92 <__udivmoddi4+0x2ca>
 8000d1c:	4608      	mov	r0, r1
 8000d1e:	eba4 040e 	sub.w	r4, r4, lr
 8000d22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d26:	e79c      	b.n	8000c62 <__udivmoddi4+0x9a>
 8000d28:	f1c6 0720 	rsb	r7, r6, #32
 8000d2c:	40b3      	lsls	r3, r6
 8000d2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d36:	fa20 f407 	lsr.w	r4, r0, r7
 8000d3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d3e:	431c      	orrs	r4, r3
 8000d40:	40f9      	lsrs	r1, r7
 8000d42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d46:	fa00 f306 	lsl.w	r3, r0, r6
 8000d4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d4e:	0c20      	lsrs	r0, r4, #16
 8000d50:	fa1f fe8c 	uxth.w	lr, ip
 8000d54:	fb09 1118 	mls	r1, r9, r8, r1
 8000d58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d60:	4288      	cmp	r0, r1
 8000d62:	fa02 f206 	lsl.w	r2, r2, r6
 8000d66:	d90b      	bls.n	8000d80 <__udivmoddi4+0x1b8>
 8000d68:	eb1c 0101 	adds.w	r1, ip, r1
 8000d6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d70:	f080 8088 	bcs.w	8000e84 <__udivmoddi4+0x2bc>
 8000d74:	4288      	cmp	r0, r1
 8000d76:	f240 8085 	bls.w	8000e84 <__udivmoddi4+0x2bc>
 8000d7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d7e:	4461      	add	r1, ip
 8000d80:	1a09      	subs	r1, r1, r0
 8000d82:	b2a4      	uxth	r4, r4
 8000d84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d88:	fb09 1110 	mls	r1, r9, r0, r1
 8000d8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d94:	458e      	cmp	lr, r1
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x1e2>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da0:	d26c      	bcs.n	8000e7c <__udivmoddi4+0x2b4>
 8000da2:	458e      	cmp	lr, r1
 8000da4:	d96a      	bls.n	8000e7c <__udivmoddi4+0x2b4>
 8000da6:	3802      	subs	r0, #2
 8000da8:	4461      	add	r1, ip
 8000daa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dae:	fba0 9402 	umull	r9, r4, r0, r2
 8000db2:	eba1 010e 	sub.w	r1, r1, lr
 8000db6:	42a1      	cmp	r1, r4
 8000db8:	46c8      	mov	r8, r9
 8000dba:	46a6      	mov	lr, r4
 8000dbc:	d356      	bcc.n	8000e6c <__udivmoddi4+0x2a4>
 8000dbe:	d053      	beq.n	8000e68 <__udivmoddi4+0x2a0>
 8000dc0:	b15d      	cbz	r5, 8000dda <__udivmoddi4+0x212>
 8000dc2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dc6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dca:	fa01 f707 	lsl.w	r7, r1, r7
 8000dce:	fa22 f306 	lsr.w	r3, r2, r6
 8000dd2:	40f1      	lsrs	r1, r6
 8000dd4:	431f      	orrs	r7, r3
 8000dd6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dda:	2600      	movs	r6, #0
 8000ddc:	4631      	mov	r1, r6
 8000dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de2:	f1c2 0320 	rsb	r3, r2, #32
 8000de6:	40d8      	lsrs	r0, r3
 8000de8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dec:	fa21 f303 	lsr.w	r3, r1, r3
 8000df0:	4091      	lsls	r1, r2
 8000df2:	4301      	orrs	r1, r0
 8000df4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df8:	fa1f fe8c 	uxth.w	lr, ip
 8000dfc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e00:	fb07 3610 	mls	r6, r7, r0, r3
 8000e04:	0c0b      	lsrs	r3, r1, #16
 8000e06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	fa04 f402 	lsl.w	r4, r4, r2
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x260>
 8000e16:	eb1c 0303 	adds.w	r3, ip, r3
 8000e1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e1e:	d22f      	bcs.n	8000e80 <__udivmoddi4+0x2b8>
 8000e20:	429e      	cmp	r6, r3
 8000e22:	d92d      	bls.n	8000e80 <__udivmoddi4+0x2b8>
 8000e24:	3802      	subs	r0, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1b9b      	subs	r3, r3, r6
 8000e2a:	b289      	uxth	r1, r1
 8000e2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e30:	fb07 3316 	mls	r3, r7, r6, r3
 8000e34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e38:	fb06 f30e 	mul.w	r3, r6, lr
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x28a>
 8000e40:	eb1c 0101 	adds.w	r1, ip, r1
 8000e44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e48:	d216      	bcs.n	8000e78 <__udivmoddi4+0x2b0>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d914      	bls.n	8000e78 <__udivmoddi4+0x2b0>
 8000e4e:	3e02      	subs	r6, #2
 8000e50:	4461      	add	r1, ip
 8000e52:	1ac9      	subs	r1, r1, r3
 8000e54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e58:	e738      	b.n	8000ccc <__udivmoddi4+0x104>
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e705      	b.n	8000c6c <__udivmoddi4+0xa4>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e3      	b.n	8000c2c <__udivmoddi4+0x64>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6f8      	b.n	8000c5a <__udivmoddi4+0x92>
 8000e68:	454b      	cmp	r3, r9
 8000e6a:	d2a9      	bcs.n	8000dc0 <__udivmoddi4+0x1f8>
 8000e6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7a3      	b.n	8000dc0 <__udivmoddi4+0x1f8>
 8000e78:	4646      	mov	r6, r8
 8000e7a:	e7ea      	b.n	8000e52 <__udivmoddi4+0x28a>
 8000e7c:	4620      	mov	r0, r4
 8000e7e:	e794      	b.n	8000daa <__udivmoddi4+0x1e2>
 8000e80:	4640      	mov	r0, r8
 8000e82:	e7d1      	b.n	8000e28 <__udivmoddi4+0x260>
 8000e84:	46d0      	mov	r8, sl
 8000e86:	e77b      	b.n	8000d80 <__udivmoddi4+0x1b8>
 8000e88:	3b02      	subs	r3, #2
 8000e8a:	4461      	add	r1, ip
 8000e8c:	e732      	b.n	8000cf4 <__udivmoddi4+0x12c>
 8000e8e:	4630      	mov	r0, r6
 8000e90:	e709      	b.n	8000ca6 <__udivmoddi4+0xde>
 8000e92:	4464      	add	r4, ip
 8000e94:	3802      	subs	r0, #2
 8000e96:	e742      	b.n	8000d1e <__udivmoddi4+0x156>

08000e98 <__aeabi_idiv0>:
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop

08000e9c <printRegBin>:
#include "../Inc/Debugger.h"

void printRegBin(uint32_t value)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
	int j= 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
	for (int i = 31; i >= 0; i--)
 8000ea8:	231f      	movs	r3, #31
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	e01a      	b.n	8000ee4 <printRegBin+0x48>
    {
		if (j == 8)
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	2b08      	cmp	r3, #8
 8000eb2:	d104      	bne.n	8000ebe <printRegBin+0x22>
		{
			printf(" ");
 8000eb4:	2020      	movs	r0, #32
 8000eb6:	f004 ff47 	bl	8005d48 <putchar>
		    j = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	617b      	str	r3, [r7, #20]
		}
		uint8_t bitValue = (value >> i) & 1;
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	73fb      	strb	r3, [r7, #15]
        printf("%d", bitValue);
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4809      	ldr	r0, [pc, #36]	; (8000ef8 <printRegBin+0x5c>)
 8000ed4:	f004 ff20 	bl	8005d18 <iprintf>
        j++;
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	3301      	adds	r3, #1
 8000edc:	617b      	str	r3, [r7, #20]
	for (int i = 31; i >= 0; i--)
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	3b01      	subs	r3, #1
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	dae1      	bge.n	8000eae <printRegBin+0x12>
    }

    printf("\r\n");
 8000eea:	4804      	ldr	r0, [pc, #16]	; (8000efc <printRegBin+0x60>)
 8000eec:	f004 ffb0 	bl	8005e50 <puts>
    return;
 8000ef0:	bf00      	nop
}
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	08008040 	.word	0x08008040
 8000efc:	08008044 	.word	0x08008044

08000f00 <MAX30003_get_reg>:
                  uint16_t      	->  SPI GPIO_Pin
                  uint16_t 			->	Register address
   @Return value  uint32_t			-> 	Register value
 */
uint32_t MAX30003_get_reg(SPI_HandleTypeDef spi, GPIO_TypeDef * port, uint16_t pin, uint8_t reg_addr)
{
 8000f00:	b084      	sub	sp, #16
 8000f02:	b580      	push	{r7, lr}
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	f107 0c08 	add.w	ip, r7, #8
 8000f0a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	static uint8_t buf[3];
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
 8000f0e:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8000f12:	2200      	movs	r2, #0
 8000f14:	4619      	mov	r1, r3
 8000f16:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8000f18:	f001 f990 	bl	800223c <HAL_GPIO_WritePin>
	buf[0] = (reg_addr << 1) | MAX30003_REG_READ;
 8000f1c:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	b25b      	sxtb	r3, r3
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	b25b      	sxtb	r3, r3
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <MAX30003_get_reg+0x7c>)
 8000f2e:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&spi, buf, 1, 1);
 8000f30:	2301      	movs	r3, #1
 8000f32:	2201      	movs	r2, #1
 8000f34:	4911      	ldr	r1, [pc, #68]	; (8000f7c <MAX30003_get_reg+0x7c>)
 8000f36:	f107 0008 	add.w	r0, r7, #8
 8000f3a:	f002 fdf2 	bl	8003b22 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&spi, buf, 3, 1);
 8000f3e:	2301      	movs	r3, #1
 8000f40:	2203      	movs	r2, #3
 8000f42:	490e      	ldr	r1, [pc, #56]	; (8000f7c <MAX30003_get_reg+0x7c>)
 8000f44:	f107 0008 	add.w	r0, r7, #8
 8000f48:	f002 ff59 	bl	8003dfe <HAL_SPI_Receive>
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
 8000f4c:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8000f50:	2201      	movs	r2, #1
 8000f52:	4619      	mov	r1, r3
 8000f54:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8000f56:	f001 f971 	bl	800223c <HAL_GPIO_WritePin>

	return ((buf[0]<<16)|(buf[1]<<8)|buf[2]);
 8000f5a:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <MAX30003_get_reg+0x7c>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	041a      	lsls	r2, r3, #16
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <MAX30003_get_reg+0x7c>)
 8000f62:	785b      	ldrb	r3, [r3, #1]
 8000f64:	021b      	lsls	r3, r3, #8
 8000f66:	4313      	orrs	r3, r2
 8000f68:	4a04      	ldr	r2, [pc, #16]	; (8000f7c <MAX30003_get_reg+0x7c>)
 8000f6a:	7892      	ldrb	r2, [r2, #2]
 8000f6c:	4313      	orrs	r3, r2
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	46bd      	mov	sp, r7
 8000f72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f76:	b004      	add	sp, #16
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	200001fc 	.word	0x200001fc

08000f80 <MAX30003_set_reg>:
                  uint8_t       	->  Third data byte
   @Return value  void
 */
void MAX30003_set_reg(SPI_HandleTypeDef spi, GPIO_TypeDef * port, uint16_t pin, uint8_t reg_addr,
		uint8_t first_byte, uint8_t second_byte, uint8_t third_byte)
{
 8000f80:	b084      	sub	sp, #16
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	f107 0c10 	add.w	ip, r7, #16
 8000f8c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t buf[4];
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
 8000f90:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8000f94:	2200      	movs	r2, #0
 8000f96:	4619      	mov	r1, r3
 8000f98:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000f9a:	f001 f94f 	bl	800223c <HAL_GPIO_WritePin>
	buf[0] = (reg_addr << 1) | MAX30003_REG_WRITE;
 8000f9e:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	713b      	strb	r3, [r7, #4]
	buf[1] = first_byte;
 8000fa8:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8000fac:	717b      	strb	r3, [r7, #5]
	buf[2] = second_byte;
 8000fae:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8000fb2:	71bb      	strb	r3, [r7, #6]
	buf[3] = third_byte;
 8000fb4:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8000fb8:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&spi, buf, 4, 1);
 8000fba:	1d39      	adds	r1, r7, #4
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	2204      	movs	r2, #4
 8000fc0:	f107 0010 	add.w	r0, r7, #16
 8000fc4:	f002 fdad 	bl	8003b22 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
 8000fc8:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8000fcc:	2201      	movs	r2, #1
 8000fce:	4619      	mov	r1, r3
 8000fd0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000fd2:	f001 f933 	bl	800223c <HAL_GPIO_WritePin>

	return;
 8000fd6:	bf00      	nop
}
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fe0:	b004      	add	sp, #16
 8000fe2:	4770      	bx	lr

08000fe4 <MAX30003_set_reg_to_zero>:
                  GPIO_TypeDef  	->  SPI GPIO_Port
                  uint16_t      	->  SPI GPIO_Pin
   @Return value  void
 */
void MAX30003_set_reg_to_zero(SPI_HandleTypeDef spi, GPIO_TypeDef * port, uint16_t pin, uint8_t reg_addr)
{
 8000fe4:	b084      	sub	sp, #16
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b09c      	sub	sp, #112	; 0x70
 8000fea:	af1c      	add	r7, sp, #112	; 0x70
 8000fec:	f107 0c08 	add.w	ip, r7, #8
 8000ff0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	MAX30003_set_reg(spi, port, pin, reg_addr, 0x00, 0x00, 0x00);
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	931a      	str	r3, [sp, #104]	; 0x68
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	9319      	str	r3, [sp, #100]	; 0x64
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	9318      	str	r3, [sp, #96]	; 0x60
 8001000:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001004:	9317      	str	r3, [sp, #92]	; 0x5c
 8001006:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800100a:	9316      	str	r3, [sp, #88]	; 0x58
 800100c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800100e:	9315      	str	r3, [sp, #84]	; 0x54
 8001010:	4668      	mov	r0, sp
 8001012:	f107 0318 	add.w	r3, r7, #24
 8001016:	2254      	movs	r2, #84	; 0x54
 8001018:	4619      	mov	r1, r3
 800101a:	f004 f9fd 	bl	8005418 <memcpy>
 800101e:	f107 0308 	add.w	r3, r7, #8
 8001022:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001024:	f7ff ffac 	bl	8000f80 <MAX30003_set_reg>
	return;
 8001028:	bf00      	nop
}
 800102a:	46bd      	mov	sp, r7
 800102c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001030:	b004      	add	sp, #16
 8001032:	4770      	bx	lr

08001034 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800103c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001044:	f023 0218 	bic.w	r2, r3, #24
 8001048:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4313      	orrs	r3, r2
 8001050:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800106c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800106e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4313      	orrs	r3, r2
 8001076:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800107c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4013      	ands	r3, r2
 8001082:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001084:	68fb      	ldr	r3, [r7, #12]
}
 8001086:	bf00      	nop
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
	...

08001094 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800109c:	1d39      	adds	r1, r7, #4
 800109e:	f04f 33ff 	mov.w	r3, #4294967295
 80010a2:	2201      	movs	r2, #1
 80010a4:	4803      	ldr	r0, [pc, #12]	; (80010b4 <__io_putchar+0x20>)
 80010a6:	f003 fc19 	bl	80048dc <HAL_UART_Transmit>
  return ch;
 80010aa:	687b      	ldr	r3, [r7, #4]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000264 	.word	0x20000264

080010b8 <MAX30003_Initialise>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void MAX30003_Initialise(void)
{
 80010b8:	b590      	push	{r4, r7, lr}
 80010ba:	b09d      	sub	sp, #116	; 0x74
 80010bc:	af1c      	add	r7, sp, #112	; 0x70
	  // Software reset
	  MAX30003_set_reg_to_zero(hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin, MAX30003_SW_RST);
 80010be:	4caa      	ldr	r4, [pc, #680]	; (8001368 <MAX30003_Initialise+0x2b0>)
 80010c0:	2308      	movs	r3, #8
 80010c2:	9317      	str	r3, [sp, #92]	; 0x5c
 80010c4:	2310      	movs	r3, #16
 80010c6:	9316      	str	r3, [sp, #88]	; 0x58
 80010c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010cc:	9315      	str	r3, [sp, #84]	; 0x54
 80010ce:	4668      	mov	r0, sp
 80010d0:	f104 0310 	add.w	r3, r4, #16
 80010d4:	2254      	movs	r2, #84	; 0x54
 80010d6:	4619      	mov	r1, r3
 80010d8:	f004 f99e 	bl	8005418 <memcpy>
 80010dc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80010e0:	f7ff ff80 	bl	8000fe4 <MAX30003_set_reg_to_zero>

	  // Configuration - general, calibration, multiplexer, ECG, R-to-R
	  // TODO: Experiment ECG sampling rate, ECG gain, all R-to-R algorithm parameters
	  MAX30003_set_reg(hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin, MAX30003_CNFG_GEN, 	0x08, 0x00, 0x17);
 80010e4:	4ca0      	ldr	r4, [pc, #640]	; (8001368 <MAX30003_Initialise+0x2b0>)
 80010e6:	2317      	movs	r3, #23
 80010e8:	931a      	str	r3, [sp, #104]	; 0x68
 80010ea:	2300      	movs	r3, #0
 80010ec:	9319      	str	r3, [sp, #100]	; 0x64
 80010ee:	2308      	movs	r3, #8
 80010f0:	9318      	str	r3, [sp, #96]	; 0x60
 80010f2:	2310      	movs	r3, #16
 80010f4:	9317      	str	r3, [sp, #92]	; 0x5c
 80010f6:	2310      	movs	r3, #16
 80010f8:	9316      	str	r3, [sp, #88]	; 0x58
 80010fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010fe:	9315      	str	r3, [sp, #84]	; 0x54
 8001100:	4668      	mov	r0, sp
 8001102:	f104 0310 	add.w	r3, r4, #16
 8001106:	2254      	movs	r2, #84	; 0x54
 8001108:	4619      	mov	r1, r3
 800110a:	f004 f985 	bl	8005418 <memcpy>
 800110e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001112:	f7ff ff35 	bl	8000f80 <MAX30003_set_reg>
	  MAX30003_set_reg(hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin, MAX30003_CNFG_CAL, 	0x30, 0x48, 0x00);
 8001116:	4c94      	ldr	r4, [pc, #592]	; (8001368 <MAX30003_Initialise+0x2b0>)
 8001118:	2300      	movs	r3, #0
 800111a:	931a      	str	r3, [sp, #104]	; 0x68
 800111c:	2348      	movs	r3, #72	; 0x48
 800111e:	9319      	str	r3, [sp, #100]	; 0x64
 8001120:	2330      	movs	r3, #48	; 0x30
 8001122:	9318      	str	r3, [sp, #96]	; 0x60
 8001124:	2312      	movs	r3, #18
 8001126:	9317      	str	r3, [sp, #92]	; 0x5c
 8001128:	2310      	movs	r3, #16
 800112a:	9316      	str	r3, [sp, #88]	; 0x58
 800112c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001130:	9315      	str	r3, [sp, #84]	; 0x54
 8001132:	4668      	mov	r0, sp
 8001134:	f104 0310 	add.w	r3, r4, #16
 8001138:	2254      	movs	r2, #84	; 0x54
 800113a:	4619      	mov	r1, r3
 800113c:	f004 f96c 	bl	8005418 <memcpy>
 8001140:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001144:	f7ff ff1c 	bl	8000f80 <MAX30003_set_reg>
	  MAX30003_set_reg(hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin, MAX30003_CNFG_EMUX, 	0x80, 0x00, 0x00);
 8001148:	4c87      	ldr	r4, [pc, #540]	; (8001368 <MAX30003_Initialise+0x2b0>)
 800114a:	2300      	movs	r3, #0
 800114c:	931a      	str	r3, [sp, #104]	; 0x68
 800114e:	2300      	movs	r3, #0
 8001150:	9319      	str	r3, [sp, #100]	; 0x64
 8001152:	2380      	movs	r3, #128	; 0x80
 8001154:	9318      	str	r3, [sp, #96]	; 0x60
 8001156:	2314      	movs	r3, #20
 8001158:	9317      	str	r3, [sp, #92]	; 0x5c
 800115a:	2310      	movs	r3, #16
 800115c:	9316      	str	r3, [sp, #88]	; 0x58
 800115e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001162:	9315      	str	r3, [sp, #84]	; 0x54
 8001164:	4668      	mov	r0, sp
 8001166:	f104 0310 	add.w	r3, r4, #16
 800116a:	2254      	movs	r2, #84	; 0x54
 800116c:	4619      	mov	r1, r3
 800116e:	f004 f953 	bl	8005418 <memcpy>
 8001172:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001176:	f7ff ff03 	bl	8000f80 <MAX30003_set_reg>
	  MAX30003_set_reg(hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin, MAX30003_CNFG_ECG, 	0x82, 0x50, 0x00);
 800117a:	4c7b      	ldr	r4, [pc, #492]	; (8001368 <MAX30003_Initialise+0x2b0>)
 800117c:	2300      	movs	r3, #0
 800117e:	931a      	str	r3, [sp, #104]	; 0x68
 8001180:	2350      	movs	r3, #80	; 0x50
 8001182:	9319      	str	r3, [sp, #100]	; 0x64
 8001184:	2382      	movs	r3, #130	; 0x82
 8001186:	9318      	str	r3, [sp, #96]	; 0x60
 8001188:	2315      	movs	r3, #21
 800118a:	9317      	str	r3, [sp, #92]	; 0x5c
 800118c:	2310      	movs	r3, #16
 800118e:	9316      	str	r3, [sp, #88]	; 0x58
 8001190:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001194:	9315      	str	r3, [sp, #84]	; 0x54
 8001196:	4668      	mov	r0, sp
 8001198:	f104 0310 	add.w	r3, r4, #16
 800119c:	2254      	movs	r2, #84	; 0x54
 800119e:	4619      	mov	r1, r3
 80011a0:	f004 f93a 	bl	8005418 <memcpy>
 80011a4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011a8:	f7ff feea 	bl	8000f80 <MAX30003_set_reg>
	  MAX30003_set_reg(hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin, MAX30003_CNFG_RTOR1, 	0x1F, 0xA3, 0x00);
 80011ac:	4c6e      	ldr	r4, [pc, #440]	; (8001368 <MAX30003_Initialise+0x2b0>)
 80011ae:	2300      	movs	r3, #0
 80011b0:	931a      	str	r3, [sp, #104]	; 0x68
 80011b2:	23a3      	movs	r3, #163	; 0xa3
 80011b4:	9319      	str	r3, [sp, #100]	; 0x64
 80011b6:	231f      	movs	r3, #31
 80011b8:	9318      	str	r3, [sp, #96]	; 0x60
 80011ba:	231d      	movs	r3, #29
 80011bc:	9317      	str	r3, [sp, #92]	; 0x5c
 80011be:	2310      	movs	r3, #16
 80011c0:	9316      	str	r3, [sp, #88]	; 0x58
 80011c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011c6:	9315      	str	r3, [sp, #84]	; 0x54
 80011c8:	4668      	mov	r0, sp
 80011ca:	f104 0310 	add.w	r3, r4, #16
 80011ce:	2254      	movs	r2, #84	; 0x54
 80011d0:	4619      	mov	r1, r3
 80011d2:	f004 f921 	bl	8005418 <memcpy>
 80011d6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011da:	f7ff fed1 	bl	8000f80 <MAX30003_set_reg>
	  MAX30003_set_reg(hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin, MAX30003_CNFG_RTOR2, 	0x20, 0x34, 0x00);
 80011de:	4c62      	ldr	r4, [pc, #392]	; (8001368 <MAX30003_Initialise+0x2b0>)
 80011e0:	2300      	movs	r3, #0
 80011e2:	931a      	str	r3, [sp, #104]	; 0x68
 80011e4:	2334      	movs	r3, #52	; 0x34
 80011e6:	9319      	str	r3, [sp, #100]	; 0x64
 80011e8:	2320      	movs	r3, #32
 80011ea:	9318      	str	r3, [sp, #96]	; 0x60
 80011ec:	231e      	movs	r3, #30
 80011ee:	9317      	str	r3, [sp, #92]	; 0x5c
 80011f0:	2310      	movs	r3, #16
 80011f2:	9316      	str	r3, [sp, #88]	; 0x58
 80011f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011f8:	9315      	str	r3, [sp, #84]	; 0x54
 80011fa:	4668      	mov	r0, sp
 80011fc:	f104 0310 	add.w	r3, r4, #16
 8001200:	2254      	movs	r2, #84	; 0x54
 8001202:	4619      	mov	r1, r3
 8001204:	f004 f908 	bl	8005418 <memcpy>
 8001208:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800120c:	f7ff feb8 	bl	8000f80 <MAX30003_set_reg>

	  // Enable interrupt B (disabled) and 2B (EN_RRINT)
	  MAX30003_set_reg(hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin, MAX30003_EN_INT, 	0x00, 0x00, 0x00);
 8001210:	4c55      	ldr	r4, [pc, #340]	; (8001368 <MAX30003_Initialise+0x2b0>)
 8001212:	2300      	movs	r3, #0
 8001214:	931a      	str	r3, [sp, #104]	; 0x68
 8001216:	2300      	movs	r3, #0
 8001218:	9319      	str	r3, [sp, #100]	; 0x64
 800121a:	2300      	movs	r3, #0
 800121c:	9318      	str	r3, [sp, #96]	; 0x60
 800121e:	2302      	movs	r3, #2
 8001220:	9317      	str	r3, [sp, #92]	; 0x5c
 8001222:	2310      	movs	r3, #16
 8001224:	9316      	str	r3, [sp, #88]	; 0x58
 8001226:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800122a:	9315      	str	r3, [sp, #84]	; 0x54
 800122c:	4668      	mov	r0, sp
 800122e:	f104 0310 	add.w	r3, r4, #16
 8001232:	2254      	movs	r2, #84	; 0x54
 8001234:	4619      	mov	r1, r3
 8001236:	f004 f8ef 	bl	8005418 <memcpy>
 800123a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800123e:	f7ff fe9f 	bl	8000f80 <MAX30003_set_reg>
	  MAX30003_set_reg(hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin, MAX30003_EN_INT2, 0x00, 0x04, 0x03);
 8001242:	4c49      	ldr	r4, [pc, #292]	; (8001368 <MAX30003_Initialise+0x2b0>)
 8001244:	2303      	movs	r3, #3
 8001246:	931a      	str	r3, [sp, #104]	; 0x68
 8001248:	2304      	movs	r3, #4
 800124a:	9319      	str	r3, [sp, #100]	; 0x64
 800124c:	2300      	movs	r3, #0
 800124e:	9318      	str	r3, [sp, #96]	; 0x60
 8001250:	2303      	movs	r3, #3
 8001252:	9317      	str	r3, [sp, #92]	; 0x5c
 8001254:	2310      	movs	r3, #16
 8001256:	9316      	str	r3, [sp, #88]	; 0x58
 8001258:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800125c:	9315      	str	r3, [sp, #84]	; 0x54
 800125e:	4668      	mov	r0, sp
 8001260:	f104 0310 	add.w	r3, r4, #16
 8001264:	2254      	movs	r2, #84	; 0x54
 8001266:	4619      	mov	r1, r3
 8001268:	f004 f8d6 	bl	8005418 <memcpy>
 800126c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001270:	f7ff fe86 	bl	8000f80 <MAX30003_set_reg>

	  // Management mode for interrupt and dynamic
	  MAX30003_set_reg(hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin, MAX30003_MNGR_INT, 0x50, 0x00, 0x24);
 8001274:	4c3c      	ldr	r4, [pc, #240]	; (8001368 <MAX30003_Initialise+0x2b0>)
 8001276:	2324      	movs	r3, #36	; 0x24
 8001278:	931a      	str	r3, [sp, #104]	; 0x68
 800127a:	2300      	movs	r3, #0
 800127c:	9319      	str	r3, [sp, #100]	; 0x64
 800127e:	2350      	movs	r3, #80	; 0x50
 8001280:	9318      	str	r3, [sp, #96]	; 0x60
 8001282:	2304      	movs	r3, #4
 8001284:	9317      	str	r3, [sp, #92]	; 0x5c
 8001286:	2310      	movs	r3, #16
 8001288:	9316      	str	r3, [sp, #88]	; 0x58
 800128a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800128e:	9315      	str	r3, [sp, #84]	; 0x54
 8001290:	4668      	mov	r0, sp
 8001292:	f104 0310 	add.w	r3, r4, #16
 8001296:	2254      	movs	r2, #84	; 0x54
 8001298:	4619      	mov	r1, r3
 800129a:	f004 f8bd 	bl	8005418 <memcpy>
 800129e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80012a2:	f7ff fe6d 	bl	8000f80 <MAX30003_set_reg>
	  MAX30003_set_reg(hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin, MAX30003_MNGR_DYN, 0x3F, 0x00, 0x00);
 80012a6:	4c30      	ldr	r4, [pc, #192]	; (8001368 <MAX30003_Initialise+0x2b0>)
 80012a8:	2300      	movs	r3, #0
 80012aa:	931a      	str	r3, [sp, #104]	; 0x68
 80012ac:	2300      	movs	r3, #0
 80012ae:	9319      	str	r3, [sp, #100]	; 0x64
 80012b0:	233f      	movs	r3, #63	; 0x3f
 80012b2:	9318      	str	r3, [sp, #96]	; 0x60
 80012b4:	2305      	movs	r3, #5
 80012b6:	9317      	str	r3, [sp, #92]	; 0x5c
 80012b8:	2310      	movs	r3, #16
 80012ba:	9316      	str	r3, [sp, #88]	; 0x58
 80012bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012c0:	9315      	str	r3, [sp, #84]	; 0x54
 80012c2:	4668      	mov	r0, sp
 80012c4:	f104 0310 	add.w	r3, r4, #16
 80012c8:	2254      	movs	r2, #84	; 0x54
 80012ca:	4619      	mov	r1, r3
 80012cc:	f004 f8a4 	bl	8005418 <memcpy>
 80012d0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80012d4:	f7ff fe54 	bl	8000f80 <MAX30003_set_reg>

	  // FIFO register reset
	  MAX30003_set_reg_to_zero(hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin, MAX30003_SYNCH);
 80012d8:	4c23      	ldr	r4, [pc, #140]	; (8001368 <MAX30003_Initialise+0x2b0>)
 80012da:	2309      	movs	r3, #9
 80012dc:	9317      	str	r3, [sp, #92]	; 0x5c
 80012de:	2310      	movs	r3, #16
 80012e0:	9316      	str	r3, [sp, #88]	; 0x58
 80012e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012e6:	9315      	str	r3, [sp, #84]	; 0x54
 80012e8:	4668      	mov	r0, sp
 80012ea:	f104 0310 	add.w	r3, r4, #16
 80012ee:	2254      	movs	r2, #84	; 0x54
 80012f0:	4619      	mov	r1, r3
 80012f2:	f004 f891 	bl	8005418 <memcpy>
 80012f6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80012fa:	f7ff fe73 	bl	8000fe4 <MAX30003_set_reg_to_zero>
	  MAX30003_set_reg_to_zero(hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin, MAX30003_FIFO_RST);
 80012fe:	4c1a      	ldr	r4, [pc, #104]	; (8001368 <MAX30003_Initialise+0x2b0>)
 8001300:	230a      	movs	r3, #10
 8001302:	9317      	str	r3, [sp, #92]	; 0x5c
 8001304:	2310      	movs	r3, #16
 8001306:	9316      	str	r3, [sp, #88]	; 0x58
 8001308:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800130c:	9315      	str	r3, [sp, #84]	; 0x54
 800130e:	4668      	mov	r0, sp
 8001310:	f104 0310 	add.w	r3, r4, #16
 8001314:	2254      	movs	r2, #84	; 0x54
 8001316:	4619      	mov	r1, r3
 8001318:	f004 f87e 	bl	8005418 <memcpy>
 800131c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001320:	f7ff fe60 	bl	8000fe4 <MAX30003_set_reg_to_zero>

	MAX30003_init_done = 1;
 8001324:	4b11      	ldr	r3, [pc, #68]	; (800136c <MAX30003_Initialise+0x2b4>)
 8001326:	2201      	movs	r2, #1
 8001328:	701a      	strb	r2, [r3, #0]
	printf("INFO		: ");
 800132a:	4811      	ldr	r0, [pc, #68]	; (8001370 <MAX30003_Initialise+0x2b8>)
 800132c:	f004 fcf4 	bl	8005d18 <iprintf>
	printRegBin(MAX30003_get_reg(hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin, MAX30003_INFO));
 8001330:	4c0d      	ldr	r4, [pc, #52]	; (8001368 <MAX30003_Initialise+0x2b0>)
 8001332:	230f      	movs	r3, #15
 8001334:	9317      	str	r3, [sp, #92]	; 0x5c
 8001336:	2310      	movs	r3, #16
 8001338:	9316      	str	r3, [sp, #88]	; 0x58
 800133a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800133e:	9315      	str	r3, [sp, #84]	; 0x54
 8001340:	4668      	mov	r0, sp
 8001342:	f104 0310 	add.w	r3, r4, #16
 8001346:	2254      	movs	r2, #84	; 0x54
 8001348:	4619      	mov	r1, r3
 800134a:	f004 f865 	bl	8005418 <memcpy>
 800134e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001352:	f7ff fdd5 	bl	8000f00 <MAX30003_get_reg>
 8001356:	4603      	mov	r3, r0
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fd9f 	bl	8000e9c <printRegBin>
	return;
 800135e:	bf00      	nop
}
 8001360:	3704      	adds	r7, #4
 8001362:	46bd      	mov	sp, r7
 8001364:	bd90      	pop	{r4, r7, pc}
 8001366:	bf00      	nop
 8001368:	20000200 	.word	0x20000200
 800136c:	200002f4 	.word	0x200002f4
 8001370:	08008048 	.word	0x08008048

08001374 <MAX30003_getHeartRate>:

void MAX30003_getHeartRate(void)
{
 8001374:	b590      	push	{r4, r7, lr}
 8001376:	b0a1      	sub	sp, #132	; 0x84
 8001378:	af18      	add	r7, sp, #96	; 0x60
	const float RTOR_RESOLUTION = 0.007813;	// R-to-R timing resolution = 7.8125ms
 800137a:	4b49      	ldr	r3, [pc, #292]	; (80014a0 <MAX30003_getHeartRate+0x12c>)
 800137c:	60fb      	str	r3, [r7, #12]

	uint32_t rtorFIFO;
	float rtorFIFO_ = 0;
 800137e:	f04f 0300 	mov.w	r3, #0
 8001382:	60bb      	str	r3, [r7, #8]
	static float rtorFIFO_sample[RTOR_SAMPLE_SIZE] = {0};
	static int rtorFIFO_count = 0;
	float rtorFIFO_sampleSum = 0;
 8001384:	f04f 0300 	mov.w	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]
	uint8_t BPM = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	76fb      	strb	r3, [r7, #27]

	// Get new R-to-R reading & clear interrupt
	rtorFIFO = MAX30003_get_reg(hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin, MAX30003_RTOR_FIFO);
 800138e:	4c45      	ldr	r4, [pc, #276]	; (80014a4 <MAX30003_getHeartRate+0x130>)
 8001390:	2325      	movs	r3, #37	; 0x25
 8001392:	9317      	str	r3, [sp, #92]	; 0x5c
 8001394:	2310      	movs	r3, #16
 8001396:	9316      	str	r3, [sp, #88]	; 0x58
 8001398:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800139c:	9315      	str	r3, [sp, #84]	; 0x54
 800139e:	4668      	mov	r0, sp
 80013a0:	f104 0310 	add.w	r3, r4, #16
 80013a4:	2254      	movs	r2, #84	; 0x54
 80013a6:	4619      	mov	r1, r3
 80013a8:	f004 f836 	bl	8005418 <memcpy>
 80013ac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013b0:	f7ff fda6 	bl	8000f00 <MAX30003_get_reg>
 80013b4:	6078      	str	r0, [r7, #4]
	rtorFIFO = rtorFIFO >> 10;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	0a9b      	lsrs	r3, r3, #10
 80013ba:	607b      	str	r3, [r7, #4]
	rtorFIFO_ = rtorFIFO * RTOR_RESOLUTION;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	ee07 3a90 	vmov	s15, r3
 80013c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013c6:	ed97 7a03 	vldr	s14, [r7, #12]
 80013ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ce:	edc7 7a02 	vstr	s15, [r7, #8]


	// Filter readings
	if(rtorFIFO_ > 0.5 && rtorFIFO_ < 3.5)
 80013d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80013d6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80013da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e2:	dd4f      	ble.n	8001484 <MAX30003_getHeartRate+0x110>
 80013e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80013e8:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 80013ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f4:	d546      	bpl.n	8001484 <MAX30003_getHeartRate+0x110>
	{
		rtorFIFO_count++;
 80013f6:	4b2c      	ldr	r3, [pc, #176]	; (80014a8 <MAX30003_getHeartRate+0x134>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	3301      	adds	r3, #1
 80013fc:	4a2a      	ldr	r2, [pc, #168]	; (80014a8 <MAX30003_getHeartRate+0x134>)
 80013fe:	6013      	str	r3, [r2, #0]

		// Push latest reading & pop oldest reading into/from averaging window
		for(int i = (RTOR_SAMPLE_SIZE - 1); i > 0; i--) rtorFIFO_sample[i] = rtorFIFO_sample[i - 1];
 8001400:	2309      	movs	r3, #9
 8001402:	617b      	str	r3, [r7, #20]
 8001404:	e00d      	b.n	8001422 <MAX30003_getHeartRate+0xae>
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	3b01      	subs	r3, #1
 800140a:	4a28      	ldr	r2, [pc, #160]	; (80014ac <MAX30003_getHeartRate+0x138>)
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4413      	add	r3, r2
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	4926      	ldr	r1, [pc, #152]	; (80014ac <MAX30003_getHeartRate+0x138>)
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	440b      	add	r3, r1
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	3b01      	subs	r3, #1
 8001420:	617b      	str	r3, [r7, #20]
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	2b00      	cmp	r3, #0
 8001426:	dcee      	bgt.n	8001406 <MAX30003_getHeartRate+0x92>
		rtorFIFO_sample[0] = rtorFIFO_;
 8001428:	4a20      	ldr	r2, [pc, #128]	; (80014ac <MAX30003_getHeartRate+0x138>)
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	6013      	str	r3, [r2, #0]

		// Calculate average of a sample of past R-events after averaging window is filled
		if (rtorFIFO_count >= RTOR_SAMPLE_SIZE)
 800142e:	4b1e      	ldr	r3, [pc, #120]	; (80014a8 <MAX30003_getHeartRate+0x134>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2b09      	cmp	r3, #9
 8001434:	dd26      	ble.n	8001484 <MAX30003_getHeartRate+0x110>
		{
			for(int i = 0; i < RTOR_SAMPLE_SIZE; i++) rtorFIFO_sampleSum += rtorFIFO_sample[i];
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	e00e      	b.n	800145a <MAX30003_getHeartRate+0xe6>
 800143c:	4a1b      	ldr	r2, [pc, #108]	; (80014ac <MAX30003_getHeartRate+0x138>)
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	edd3 7a00 	vldr	s15, [r3]
 8001448:	ed97 7a07 	vldr	s14, [r7, #28]
 800144c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001450:	edc7 7a07 	vstr	s15, [r7, #28]
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	3301      	adds	r3, #1
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	2b09      	cmp	r3, #9
 800145e:	dded      	ble.n	800143c <MAX30003_getHeartRate+0xc8>
			BPM = (uint8_t)(RTOR_SAMPLE_SIZE * 60.0 / rtorFIFO_sampleSum);
 8001460:	69f8      	ldr	r0, [r7, #28]
 8001462:	f7ff f849 	bl	80004f8 <__aeabi_f2d>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	f04f 0000 	mov.w	r0, #0
 800146e:	4910      	ldr	r1, [pc, #64]	; (80014b0 <MAX30003_getHeartRate+0x13c>)
 8001470:	f7ff f9c4 	bl	80007fc <__aeabi_ddiv>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	4610      	mov	r0, r2
 800147a:	4619      	mov	r1, r3
 800147c:	f7ff fb6c 	bl	8000b58 <__aeabi_d2uiz>
 8001480:	4603      	mov	r3, r0
 8001482:	76fb      	strb	r3, [r7, #27]
		}
	}
	if(BPM != 0) {
 8001484:	7efb      	ldrb	r3, [r7, #27]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d005      	beq.n	8001496 <MAX30003_getHeartRate+0x122>
		printf("BPM %d\n\r", BPM);
 800148a:	7efb      	ldrb	r3, [r7, #27]
 800148c:	4619      	mov	r1, r3
 800148e:	4809      	ldr	r0, [pc, #36]	; (80014b4 <MAX30003_getHeartRate+0x140>)
 8001490:	f004 fc42 	bl	8005d18 <iprintf>
	}
	return;
 8001494:	bf00      	nop
 8001496:	bf00      	nop
}
 8001498:	3724      	adds	r7, #36	; 0x24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd90      	pop	{r4, r7, pc}
 800149e:	bf00      	nop
 80014a0:	3c000219 	.word	0x3c000219
 80014a4:	20000200 	.word	0x20000200
 80014a8:	200002f8 	.word	0x200002f8
 80014ac:	200002fc 	.word	0x200002fc
 80014b0:	4082c000 	.word	0x4082c000
 80014b4:	08008054 	.word	0x08008054

080014b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014bc:	f000 fbc0 	bl	8001c40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c0:	f000 f81c 	bl	80014fc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80014c4:	f000 f86d 	bl	80015a2 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c8:	f000 f912 	bl	80016f0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80014cc:	f000 f886 	bl	80015dc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80014d0:	f000 f8c2 	bl	8001658 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("starting\n\r");
 80014d4:	4806      	ldr	r0, [pc, #24]	; (80014f0 <main+0x38>)
 80014d6:	f004 fc1f 	bl	8005d18 <iprintf>
  MAX30003_Initialise();
 80014da:	f7ff fded 	bl	80010b8 <MAX30003_Initialise>
  printf("Init completed %d\n\r", MAX30003_init_done);
 80014de:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <main+0x3c>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	4619      	mov	r1, r3
 80014e4:	4804      	ldr	r0, [pc, #16]	; (80014f8 <main+0x40>)
 80014e6:	f004 fc17 	bl	8005d18 <iprintf>
  MAX30003_getHeartRate();
 80014ea:	f7ff ff43 	bl	8001374 <MAX30003_getHeartRate>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014ee:	e7fe      	b.n	80014ee <main+0x36>
 80014f0:	08008060 	.word	0x08008060
 80014f4:	200002f4 	.word	0x200002f4
 80014f8:	0800806c 	.word	0x0800806c

080014fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b098      	sub	sp, #96	; 0x60
 8001500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001502:	f107 031c 	add.w	r3, r7, #28
 8001506:	2244      	movs	r2, #68	; 0x44
 8001508:	2100      	movs	r1, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f003 ff92 	bl	8005434 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001510:	463b      	mov	r3, r7
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
 800151c:	611a      	str	r2, [r3, #16]
 800151e:	615a      	str	r2, [r3, #20]
 8001520:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001522:	f000 febb 	bl	800229c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001526:	2000      	movs	r0, #0
 8001528:	f7ff fd84 	bl	8001034 <LL_RCC_LSE_SetDriveCapability>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800152c:	2307      	movs	r3, #7
 800152e:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001530:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001534:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001536:	2301      	movs	r3, #1
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800153a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800153e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001540:	2340      	movs	r3, #64	; 0x40
 8001542:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001544:	2300      	movs	r3, #0
 8001546:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001548:	f107 031c 	add.w	r3, r7, #28
 800154c:	4618      	mov	r0, r3
 800154e:	f001 fa0d 	bl	800296c <HAL_RCC_OscConfig>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <SystemClock_Config+0x60>
  {
    Error_Handler();
 8001558:	f000 f932 	bl	80017c0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800155c:	236f      	movs	r3, #111	; 0x6f
 800155e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001560:	2302      	movs	r3, #2
 8001562:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001564:	2300      	movs	r3, #0
 8001566:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800156c:	2300      	movs	r3, #0
 800156e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001574:	2300      	movs	r3, #0
 8001576:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001578:	463b      	mov	r3, r7
 800157a:	2101      	movs	r1, #1
 800157c:	4618      	mov	r0, r3
 800157e:	f001 fd2b 	bl	8002fd8 <HAL_RCC_ClockConfig>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001588:	f000 f91a 	bl	80017c0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_LSE, RCC_MCODIV_1);
 800158c:	2200      	movs	r2, #0
 800158e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001592:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001596:	f001 fe5f 	bl	8003258 <HAL_RCC_MCOConfig>
}
 800159a:	bf00      	nop
 800159c:	3760      	adds	r7, #96	; 0x60
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b08c      	sub	sp, #48	; 0x30
 80015a6:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015a8:	463b      	mov	r3, r7
 80015aa:	2230      	movs	r2, #48	; 0x30
 80015ac:	2100      	movs	r1, #0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f003 ff40 	bl	8005434 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80015b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015b8:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80015ba:	2300      	movs	r3, #0
 80015bc:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80015be:	2310      	movs	r3, #16
 80015c0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015c2:	463b      	mov	r3, r7
 80015c4:	4618      	mov	r0, r3
 80015c6:	f002 f913 	bl	80037f0 <HAL_RCCEx_PeriphCLKConfig>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80015d0:	f000 f8f6 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80015d4:	bf00      	nop
 80015d6:	3730      	adds	r7, #48	; 0x30
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015e0:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <MX_SPI1_Init+0x74>)
 80015e2:	4a1c      	ldr	r2, [pc, #112]	; (8001654 <MX_SPI1_Init+0x78>)
 80015e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015e6:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <MX_SPI1_Init+0x74>)
 80015e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015ee:	4b18      	ldr	r3, [pc, #96]	; (8001650 <MX_SPI1_Init+0x74>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015f4:	4b16      	ldr	r3, [pc, #88]	; (8001650 <MX_SPI1_Init+0x74>)
 80015f6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80015fa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015fc:	4b14      	ldr	r3, [pc, #80]	; (8001650 <MX_SPI1_Init+0x74>)
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001602:	4b13      	ldr	r3, [pc, #76]	; (8001650 <MX_SPI1_Init+0x74>)
 8001604:	2200      	movs	r2, #0
 8001606:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <MX_SPI1_Init+0x74>)
 800160a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800160e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001610:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <MX_SPI1_Init+0x74>)
 8001612:	2218      	movs	r2, #24
 8001614:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <MX_SPI1_Init+0x74>)
 8001618:	2200      	movs	r2, #0
 800161a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <MX_SPI1_Init+0x74>)
 800161e:	2200      	movs	r2, #0
 8001620:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <MX_SPI1_Init+0x74>)
 8001624:	2200      	movs	r2, #0
 8001626:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001628:	4b09      	ldr	r3, [pc, #36]	; (8001650 <MX_SPI1_Init+0x74>)
 800162a:	2207      	movs	r2, #7
 800162c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800162e:	4b08      	ldr	r3, [pc, #32]	; (8001650 <MX_SPI1_Init+0x74>)
 8001630:	2200      	movs	r2, #0
 8001632:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <MX_SPI1_Init+0x74>)
 8001636:	2208      	movs	r2, #8
 8001638:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800163a:	4805      	ldr	r0, [pc, #20]	; (8001650 <MX_SPI1_Init+0x74>)
 800163c:	f002 f9ce 	bl	80039dc <HAL_SPI_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001646:	f000 f8bb 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000200 	.word	0x20000200
 8001654:	40013000 	.word	0x40013000

08001658 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800165c:	4b22      	ldr	r3, [pc, #136]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 800165e:	4a23      	ldr	r2, [pc, #140]	; (80016ec <MX_USART1_UART_Init+0x94>)
 8001660:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001662:	4b21      	ldr	r3, [pc, #132]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 8001664:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001668:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800166a:	4b1f      	ldr	r3, [pc, #124]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001670:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001676:	4b1c      	ldr	r3, [pc, #112]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800167c:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 800167e:	220c      	movs	r2, #12
 8001680:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001682:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001688:	4b17      	ldr	r3, [pc, #92]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 800168a:	2200      	movs	r2, #0
 800168c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800168e:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 8001690:	2200      	movs	r2, #0
 8001692:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001694:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 8001696:	2200      	movs	r2, #0
 8001698:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800169a:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 800169c:	2200      	movs	r2, #0
 800169e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016a0:	4811      	ldr	r0, [pc, #68]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 80016a2:	f003 f8cb 	bl	800483c <HAL_UART_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80016ac:	f000 f888 	bl	80017c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016b0:	2100      	movs	r1, #0
 80016b2:	480d      	ldr	r0, [pc, #52]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 80016b4:	f003 fdbc 	bl	8005230 <HAL_UARTEx_SetTxFifoThreshold>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80016be:	f000 f87f 	bl	80017c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016c2:	2100      	movs	r1, #0
 80016c4:	4808      	ldr	r0, [pc, #32]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 80016c6:	f003 fdf1 	bl	80052ac <HAL_UARTEx_SetRxFifoThreshold>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80016d0:	f000 f876 	bl	80017c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80016d4:	4804      	ldr	r0, [pc, #16]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 80016d6:	f003 fd72 	bl	80051be <HAL_UARTEx_DisableFifoMode>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80016e0:	f000 f86e 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000264 	.word	0x20000264
 80016ec:	40013800 	.word	0x40013800

080016f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001704:	2004      	movs	r0, #4
 8001706:	f7ff fcab 	bl	8001060 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800170a:	2001      	movs	r0, #1
 800170c:	f7ff fca8 	bl	8001060 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001710:	2200      	movs	r2, #0
 8001712:	2110      	movs	r1, #16
 8001714:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001718:	f000 fd90 	bl	800223c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800171c:	2308      	movs	r3, #8
 800171e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001720:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001724:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172a:	1d3b      	adds	r3, r7, #4
 800172c:	4619      	mov	r1, r3
 800172e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001732:	f000 fc1b 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001736:	2310      	movs	r3, #16
 8001738:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173a:	2301      	movs	r3, #1
 800173c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001742:	2300      	movs	r3, #0
 8001744:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001746:	1d3b      	adds	r3, r7, #4
 8001748:	4619      	mov	r1, r3
 800174a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800174e:	f000 fc0d 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001752:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001756:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001758:	2302      	movs	r3, #2
 800175a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001760:	2300      	movs	r3, #0
 8001762:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	4619      	mov	r1, r3
 800176c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001770:	f000 fbfc 	bl	8001f6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001774:	2200      	movs	r2, #0
 8001776:	2100      	movs	r1, #0
 8001778:	2009      	movs	r0, #9
 800177a:	f000 fbc2 	bl	8001f02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800177e:	2009      	movs	r0, #9
 8001780:	f000 fbd9 	bl	8001f36 <HAL_NVIC_EnableIRQ>

}
 8001784:	bf00      	nop
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	80fb      	strh	r3, [r7, #6]
	if((GPIO_Pin == GPIO_PIN_3) && (MAX30003_init_done)) {
 8001796:	88fb      	ldrh	r3, [r7, #6]
 8001798:	2b08      	cmp	r3, #8
 800179a:	d108      	bne.n	80017ae <HAL_GPIO_EXTI_Callback+0x22>
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <HAL_GPIO_EXTI_Callback+0x2c>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d004      	beq.n	80017ae <HAL_GPIO_EXTI_Callback+0x22>
		printf("Trigger\n\r");
 80017a4:	4805      	ldr	r0, [pc, #20]	; (80017bc <HAL_GPIO_EXTI_Callback+0x30>)
 80017a6:	f004 fab7 	bl	8005d18 <iprintf>
		MAX30003_getHeartRate();
 80017aa:	f7ff fde3 	bl	8001374 <MAX30003_getHeartRate>

	}
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	200002f4 	.word	0x200002f4
 80017bc:	08008080 	.word	0x08008080

080017c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017c4:	b672      	cpsid	i
}
 80017c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <Error_Handler+0x8>

080017ca <LL_AHB2_GRP1_EnableClock>:
{
 80017ca:	b480      	push	{r7}
 80017cc:	b085      	sub	sp, #20
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80017d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4313      	orrs	r3, r2
 80017e0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80017e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4013      	ands	r3, r2
 80017ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017ee:	68fb      	ldr	r3, [r7, #12]
}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001808:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800180a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4313      	orrs	r3, r2
 8001812:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001818:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4013      	ands	r3, r2
 800181e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001820:	68fb      	ldr	r3, [r7, #12]
}
 8001822:	bf00      	nop
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b088      	sub	sp, #32
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	f107 030c 	add.w	r3, r7, #12
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a17      	ldr	r2, [pc, #92]	; (80018b8 <HAL_SPI_MspInit+0x7c>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d128      	bne.n	80018b0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800185e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001862:	f7ff ffcb 	bl	80017fc <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001866:	2001      	movs	r0, #1
 8001868:	f7ff ffaf 	bl	80017ca <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA5     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 800186c:	2342      	movs	r3, #66	; 0x42
 800186e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001870:	2302      	movs	r3, #2
 8001872:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001878:	2300      	movs	r3, #0
 800187a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800187c:	2305      	movs	r3, #5
 800187e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001880:	f107 030c 	add.w	r3, r7, #12
 8001884:	4619      	mov	r1, r3
 8001886:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800188a:	f000 fb6f 	bl	8001f6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800188e:	2320      	movs	r3, #32
 8001890:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001892:	2302      	movs	r3, #2
 8001894:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189a:	2300      	movs	r3, #0
 800189c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI1;
 800189e:	2304      	movs	r3, #4
 80018a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a2:	f107 030c 	add.w	r3, r7, #12
 80018a6:	4619      	mov	r1, r3
 80018a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ac:	f000 fb5e 	bl	8001f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80018b0:	bf00      	nop
 80018b2:	3720      	adds	r7, #32
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40013000 	.word	0x40013000

080018bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b094      	sub	sp, #80	; 0x50
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018d4:	f107 030c 	add.w	r3, r7, #12
 80018d8:	2230      	movs	r2, #48	; 0x30
 80018da:	2100      	movs	r1, #0
 80018dc:	4618      	mov	r0, r3
 80018de:	f003 fda9 	bl	8005434 <memset>
  if(huart->Instance==USART1)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a17      	ldr	r2, [pc, #92]	; (8001944 <HAL_UART_MspInit+0x88>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d126      	bne.n	800193a <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80018ec:	2301      	movs	r3, #1
 80018ee:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80018f0:	2300      	movs	r3, #0
 80018f2:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018f4:	f107 030c 	add.w	r3, r7, #12
 80018f8:	4618      	mov	r0, r3
 80018fa:	f001 ff79 	bl	80037f0 <HAL_RCCEx_PeriphCLKConfig>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001904:	f7ff ff5c 	bl	80017c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001908:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800190c:	f7ff ff76 	bl	80017fc <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001910:	2001      	movs	r0, #1
 8001912:	f7ff ff5a 	bl	80017ca <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001916:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800191a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	2302      	movs	r3, #2
 800191e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001924:	2300      	movs	r3, #0
 8001926:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001928:	2307      	movs	r3, #7
 800192a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001930:	4619      	mov	r1, r3
 8001932:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001936:	f000 fb19 	bl	8001f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800193a:	bf00      	nop
 800193c:	3750      	adds	r7, #80	; 0x50
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40013800 	.word	0x40013800

08001948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800194c:	e7fe      	b.n	800194c <NMI_Handler+0x4>

0800194e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001952:	e7fe      	b.n	8001952 <HardFault_Handler+0x4>

08001954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001958:	e7fe      	b.n	8001958 <MemManage_Handler+0x4>

0800195a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800195e:	e7fe      	b.n	800195e <BusFault_Handler+0x4>

08001960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001964:	e7fe      	b.n	8001964 <UsageFault_Handler+0x4>

08001966 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001994:	f000 f9ae 	bl	8001cf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}

0800199c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80019a0:	2008      	movs	r0, #8
 80019a2:	f000 fc63 	bl	800226c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}

080019aa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0
	return 1;
 80019ae:	2301      	movs	r3, #1
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <_kill>:

int _kill(int pid, int sig)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019c4:	f003 fcfe 	bl	80053c4 <__errno>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2216      	movs	r2, #22
 80019cc:	601a      	str	r2, [r3, #0]
	return -1;
 80019ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <_exit>:

void _exit (int status)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019e2:	f04f 31ff 	mov.w	r1, #4294967295
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ffe7 	bl	80019ba <_kill>
	while (1) {}		/* Make sure we hang here */
 80019ec:	e7fe      	b.n	80019ec <_exit+0x12>

080019ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b086      	sub	sp, #24
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	60f8      	str	r0, [r7, #12]
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	e00a      	b.n	8001a16 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a00:	f3af 8000 	nop.w
 8001a04:	4601      	mov	r1, r0
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	1c5a      	adds	r2, r3, #1
 8001a0a:	60ba      	str	r2, [r7, #8]
 8001a0c:	b2ca      	uxtb	r2, r1
 8001a0e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	3301      	adds	r3, #1
 8001a14:	617b      	str	r3, [r7, #20]
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	dbf0      	blt.n	8001a00 <_read+0x12>
	}

return len;
 8001a1e:	687b      	ldr	r3, [r7, #4]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	e009      	b.n	8001a4e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	1c5a      	adds	r2, r3, #1
 8001a3e:	60ba      	str	r2, [r7, #8]
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff fb26 	bl	8001094 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	617b      	str	r3, [r7, #20]
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	dbf1      	blt.n	8001a3a <_write+0x12>
	}
	return len;
 8001a56:	687b      	ldr	r3, [r7, #4]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <_close>:

int _close(int file)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	return -1;
 8001a68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a88:	605a      	str	r2, [r3, #4]
	return 0;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <_isatty>:

int _isatty(int file)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	return 1;
 8001aa0:	2301      	movs	r3, #1
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b085      	sub	sp, #20
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
	return 0;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3714      	adds	r7, #20
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ad0:	4a14      	ldr	r2, [pc, #80]	; (8001b24 <_sbrk+0x5c>)
 8001ad2:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <_sbrk+0x60>)
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001adc:	4b13      	ldr	r3, [pc, #76]	; (8001b2c <_sbrk+0x64>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d102      	bne.n	8001aea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ae4:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <_sbrk+0x64>)
 8001ae6:	4a12      	ldr	r2, [pc, #72]	; (8001b30 <_sbrk+0x68>)
 8001ae8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aea:	4b10      	ldr	r3, [pc, #64]	; (8001b2c <_sbrk+0x64>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4413      	add	r3, r2
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d207      	bcs.n	8001b08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001af8:	f003 fc64 	bl	80053c4 <__errno>
 8001afc:	4603      	mov	r3, r0
 8001afe:	220c      	movs	r2, #12
 8001b00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b02:	f04f 33ff 	mov.w	r3, #4294967295
 8001b06:	e009      	b.n	8001b1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b08:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <_sbrk+0x64>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b0e:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <_sbrk+0x64>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4413      	add	r3, r2
 8001b16:	4a05      	ldr	r2, [pc, #20]	; (8001b2c <_sbrk+0x64>)
 8001b18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3718      	adds	r7, #24
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	20003000 	.word	0x20003000
 8001b28:	00000400 	.word	0x00000400
 8001b2c:	20000324 	.word	0x20000324
 8001b30:	20000340 	.word	0x20000340

08001b34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001b38:	4b22      	ldr	r3, [pc, #136]	; (8001bc4 <SystemInit+0x90>)
 8001b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b3e:	4a21      	ldr	r2, [pc, #132]	; (8001bc4 <SystemInit+0x90>)
 8001b40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001b58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b5c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001b60:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b6c:	4b16      	ldr	r3, [pc, #88]	; (8001bc8 <SystemInit+0x94>)
 8001b6e:	4013      	ands	r3, r2
 8001b70:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b7e:	f023 0305 	bic.w	r3, r3, #5
 8001b82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b92:	f023 0301 	bic.w	r3, r3, #1
 8001b96:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b9e:	4a0b      	ldr	r2, [pc, #44]	; (8001bcc <SystemInit+0x98>)
 8001ba0:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bb0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	619a      	str	r2, [r3, #24]
}
 8001bba:	bf00      	nop
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	e000ed00 	.word	0xe000ed00
 8001bc8:	faf6fefb 	.word	0xfaf6fefb
 8001bcc:	22041000 	.word	0x22041000

08001bd0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001bd0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bd4:	3304      	adds	r3, #4

08001bd6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bd8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001bda:	d3f9      	bcc.n	8001bd0 <CopyDataInit>
  bx lr
 8001bdc:	4770      	bx	lr

08001bde <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001bde:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001be0:	3004      	adds	r0, #4

08001be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001be2:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001be4:	d3fb      	bcc.n	8001bde <FillZerobss>
  bx lr
 8001be6:	4770      	bx	lr

08001be8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001be8:	480c      	ldr	r0, [pc, #48]	; (8001c1c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001bea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bec:	f7ff ffa2 	bl	8001b34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001bf0:	480b      	ldr	r0, [pc, #44]	; (8001c20 <LoopForever+0x8>)
 8001bf2:	490c      	ldr	r1, [pc, #48]	; (8001c24 <LoopForever+0xc>)
 8001bf4:	4a0c      	ldr	r2, [pc, #48]	; (8001c28 <LoopForever+0x10>)
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f7ff ffed 	bl	8001bd6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001bfc:	480b      	ldr	r0, [pc, #44]	; (8001c2c <LoopForever+0x14>)
 8001bfe:	490c      	ldr	r1, [pc, #48]	; (8001c30 <LoopForever+0x18>)
 8001c00:	2300      	movs	r3, #0
 8001c02:	f7ff ffee 	bl	8001be2 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001c06:	480b      	ldr	r0, [pc, #44]	; (8001c34 <LoopForever+0x1c>)
 8001c08:	490b      	ldr	r1, [pc, #44]	; (8001c38 <LoopForever+0x20>)
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	f7ff ffe9 	bl	8001be2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001c10:	f003 fbde 	bl	80053d0 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001c14:	f7ff fc50 	bl	80014b8 <main>

08001c18 <LoopForever>:

LoopForever:
  b LoopForever
 8001c18:	e7fe      	b.n	8001c18 <LoopForever>
 8001c1a:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001c1c:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 8001c20:	20000004 	.word	0x20000004
 8001c24:	200001e0 	.word	0x200001e0
 8001c28:	0800855c 	.word	0x0800855c
  INIT_BSS _sbss, _ebss
 8001c2c:	200001e0 	.word	0x200001e0
 8001c30:	2000033c 	.word	0x2000033c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001c34:	20030000 	.word	0x20030000
 8001c38:	20030000 	.word	0x20030000

08001c3c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c3c:	e7fe      	b.n	8001c3c <ADC1_IRQHandler>
	...

08001c40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c46:	2300      	movs	r3, #0
 8001c48:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c4a:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <HAL_Init+0x3c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a0b      	ldr	r2, [pc, #44]	; (8001c7c <HAL_Init+0x3c>)
 8001c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c54:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c56:	2003      	movs	r0, #3
 8001c58:	f000 f948 	bl	8001eec <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c5c:	200f      	movs	r0, #15
 8001c5e:	f000 f80f 	bl	8001c80 <HAL_InitTick>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d002      	beq.n	8001c6e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	71fb      	strb	r3, [r7, #7]
 8001c6c:	e001      	b.n	8001c72 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c6e:	f7ff fdde 	bl	800182e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c72:	79fb      	ldrb	r3, [r7, #7]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	58004000 	.word	0x58004000

08001c80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001c8c:	4b17      	ldr	r3, [pc, #92]	; (8001cec <HAL_InitTick+0x6c>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d024      	beq.n	8001cde <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c94:	f001 fb96 	bl	80033c4 <HAL_RCC_GetHCLKFreq>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	4b14      	ldr	r3, [pc, #80]	; (8001cec <HAL_InitTick+0x6c>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ca4:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cac:	4618      	mov	r0, r3
 8001cae:	f000 f950 	bl	8001f52 <HAL_SYSTICK_Config>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d10f      	bne.n	8001cd8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b0f      	cmp	r3, #15
 8001cbc:	d809      	bhi.n	8001cd2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	6879      	ldr	r1, [r7, #4]
 8001cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc6:	f000 f91c 	bl	8001f02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cca:	4a09      	ldr	r2, [pc, #36]	; (8001cf0 <HAL_InitTick+0x70>)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6013      	str	r3, [r2, #0]
 8001cd0:	e007      	b.n	8001ce2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	73fb      	strb	r3, [r7, #15]
 8001cd6:	e004      	b.n	8001ce2 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	73fb      	strb	r3, [r7, #15]
 8001cdc:	e001      	b.n	8001ce2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	2000000c 	.word	0x2000000c
 8001cf0:	20000008 	.word	0x20000008

08001cf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <HAL_IncTick+0x20>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <HAL_IncTick+0x24>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4413      	add	r3, r2
 8001d04:	4a04      	ldr	r2, [pc, #16]	; (8001d18 <HAL_IncTick+0x24>)
 8001d06:	6013      	str	r3, [r2, #0]
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	2000000c 	.word	0x2000000c
 8001d18:	20000328 	.word	0x20000328

08001d1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d20:	4b03      	ldr	r3, [pc, #12]	; (8001d30 <HAL_GetTick+0x14>)
 8001d22:	681b      	ldr	r3, [r3, #0]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	20000328 	.word	0x20000328

08001d34 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001d38:	4b03      	ldr	r3, [pc, #12]	; (8001d48 <HAL_GetTickPrio+0x14>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	20000008 	.word	0x20000008

08001d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <__NVIC_SetPriorityGrouping+0x44>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d62:	68ba      	ldr	r2, [r7, #8]
 8001d64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d68:	4013      	ands	r3, r2
 8001d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d7e:	4a04      	ldr	r2, [pc, #16]	; (8001d90 <__NVIC_SetPriorityGrouping+0x44>)
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	60d3      	str	r3, [r2, #12]
}
 8001d84:	bf00      	nop
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d98:	4b04      	ldr	r3, [pc, #16]	; (8001dac <__NVIC_GetPriorityGrouping+0x18>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	0a1b      	lsrs	r3, r3, #8
 8001d9e:	f003 0307 	and.w	r3, r3, #7
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	db0b      	blt.n	8001dda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	f003 021f 	and.w	r2, r3, #31
 8001dc8:	4907      	ldr	r1, [pc, #28]	; (8001de8 <__NVIC_EnableIRQ+0x38>)
 8001dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dce:	095b      	lsrs	r3, r3, #5
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	fa00 f202 	lsl.w	r2, r0, r2
 8001dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	e000e100 	.word	0xe000e100

08001dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	6039      	str	r1, [r7, #0]
 8001df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	db0a      	blt.n	8001e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	490c      	ldr	r1, [pc, #48]	; (8001e38 <__NVIC_SetPriority+0x4c>)
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	0112      	lsls	r2, r2, #4
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	440b      	add	r3, r1
 8001e10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e14:	e00a      	b.n	8001e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	4908      	ldr	r1, [pc, #32]	; (8001e3c <__NVIC_SetPriority+0x50>)
 8001e1c:	79fb      	ldrb	r3, [r7, #7]
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	3b04      	subs	r3, #4
 8001e24:	0112      	lsls	r2, r2, #4
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	440b      	add	r3, r1
 8001e2a:	761a      	strb	r2, [r3, #24]
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	e000e100 	.word	0xe000e100
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b089      	sub	sp, #36	; 0x24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f1c3 0307 	rsb	r3, r3, #7
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	bf28      	it	cs
 8001e5e:	2304      	movcs	r3, #4
 8001e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	3304      	adds	r3, #4
 8001e66:	2b06      	cmp	r3, #6
 8001e68:	d902      	bls.n	8001e70 <NVIC_EncodePriority+0x30>
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	3b03      	subs	r3, #3
 8001e6e:	e000      	b.n	8001e72 <NVIC_EncodePriority+0x32>
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e74:	f04f 32ff 	mov.w	r2, #4294967295
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43da      	mvns	r2, r3
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	401a      	ands	r2, r3
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e88:	f04f 31ff 	mov.w	r1, #4294967295
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e92:	43d9      	mvns	r1, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e98:	4313      	orrs	r3, r2
         );
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3724      	adds	r7, #36	; 0x24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
	...

08001ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eb8:	d301      	bcc.n	8001ebe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e00f      	b.n	8001ede <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ebe:	4a0a      	ldr	r2, [pc, #40]	; (8001ee8 <SysTick_Config+0x40>)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ec6:	210f      	movs	r1, #15
 8001ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ecc:	f7ff ff8e 	bl	8001dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ed0:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <SysTick_Config+0x40>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ed6:	4b04      	ldr	r3, [pc, #16]	; (8001ee8 <SysTick_Config+0x40>)
 8001ed8:	2207      	movs	r2, #7
 8001eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	e000e010 	.word	0xe000e010

08001eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff ff29 	bl	8001d4c <__NVIC_SetPriorityGrouping>
}
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b086      	sub	sp, #24
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	4603      	mov	r3, r0
 8001f0a:	60b9      	str	r1, [r7, #8]
 8001f0c:	607a      	str	r2, [r7, #4]
 8001f0e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f10:	f7ff ff40 	bl	8001d94 <__NVIC_GetPriorityGrouping>
 8001f14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	68b9      	ldr	r1, [r7, #8]
 8001f1a:	6978      	ldr	r0, [r7, #20]
 8001f1c:	f7ff ff90 	bl	8001e40 <NVIC_EncodePriority>
 8001f20:	4602      	mov	r2, r0
 8001f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f26:	4611      	mov	r1, r2
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff ff5f 	bl	8001dec <__NVIC_SetPriority>
}
 8001f2e:	bf00      	nop
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff ff33 	bl	8001db0 <__NVIC_EnableIRQ>
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff ffa4 	bl	8001ea8 <SysTick_Config>
 8001f60:	4603      	mov	r3, r0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b087      	sub	sp, #28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f7a:	e146      	b.n	800220a <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	2101      	movs	r1, #1
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	fa01 f303 	lsl.w	r3, r1, r3
 8001f88:	4013      	ands	r3, r2
 8001f8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 8138 	beq.w	8002204 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 0303 	and.w	r3, r3, #3
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d005      	beq.n	8001fac <HAL_GPIO_Init+0x40>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 0303 	and.w	r3, r3, #3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d130      	bne.n	800200e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	68da      	ldr	r2, [r3, #12]
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43db      	mvns	r3, r3
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	091b      	lsrs	r3, r3, #4
 8001ff8:	f003 0201 	and.w	r2, r3, #1
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4313      	orrs	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	2b03      	cmp	r3, #3
 8002018:	d017      	beq.n	800204a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	2203      	movs	r2, #3
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43db      	mvns	r3, r3
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	4013      	ands	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	4313      	orrs	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d123      	bne.n	800209e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	08da      	lsrs	r2, r3, #3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3208      	adds	r2, #8
 800205e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002062:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	220f      	movs	r2, #15
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43db      	mvns	r3, r3
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	4013      	ands	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	691a      	ldr	r2, [r3, #16]
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	4313      	orrs	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	08da      	lsrs	r2, r3, #3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3208      	adds	r2, #8
 8002098:	6939      	ldr	r1, [r7, #16]
 800209a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	2203      	movs	r2, #3
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	4013      	ands	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f003 0203 	and.w	r2, r3, #3
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 8092 	beq.w	8002204 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80020e0:	4a51      	ldr	r2, [pc, #324]	; (8002228 <HAL_GPIO_Init+0x2bc>)
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	089b      	lsrs	r3, r3, #2
 80020e6:	3302      	adds	r3, #2
 80020e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	220f      	movs	r2, #15
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	4013      	ands	r3, r2
 8002102:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800210a:	d013      	beq.n	8002134 <HAL_GPIO_Init+0x1c8>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a47      	ldr	r2, [pc, #284]	; (800222c <HAL_GPIO_Init+0x2c0>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d00d      	beq.n	8002130 <HAL_GPIO_Init+0x1c4>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a46      	ldr	r2, [pc, #280]	; (8002230 <HAL_GPIO_Init+0x2c4>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d007      	beq.n	800212c <HAL_GPIO_Init+0x1c0>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a45      	ldr	r2, [pc, #276]	; (8002234 <HAL_GPIO_Init+0x2c8>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d101      	bne.n	8002128 <HAL_GPIO_Init+0x1bc>
 8002124:	2304      	movs	r3, #4
 8002126:	e006      	b.n	8002136 <HAL_GPIO_Init+0x1ca>
 8002128:	2307      	movs	r3, #7
 800212a:	e004      	b.n	8002136 <HAL_GPIO_Init+0x1ca>
 800212c:	2302      	movs	r3, #2
 800212e:	e002      	b.n	8002136 <HAL_GPIO_Init+0x1ca>
 8002130:	2301      	movs	r3, #1
 8002132:	e000      	b.n	8002136 <HAL_GPIO_Init+0x1ca>
 8002134:	2300      	movs	r3, #0
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	f002 0203 	and.w	r2, r2, #3
 800213c:	0092      	lsls	r2, r2, #2
 800213e:	4093      	lsls	r3, r2
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	4313      	orrs	r3, r2
 8002144:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002146:	4938      	ldr	r1, [pc, #224]	; (8002228 <HAL_GPIO_Init+0x2bc>)
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	089b      	lsrs	r3, r3, #2
 800214c:	3302      	adds	r3, #2
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002154:	4b38      	ldr	r3, [pc, #224]	; (8002238 <HAL_GPIO_Init+0x2cc>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	43db      	mvns	r3, r3
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4013      	ands	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	4313      	orrs	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002178:	4a2f      	ldr	r2, [pc, #188]	; (8002238 <HAL_GPIO_Init+0x2cc>)
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800217e:	4b2e      	ldr	r3, [pc, #184]	; (8002238 <HAL_GPIO_Init+0x2cc>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	43db      	mvns	r3, r3
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	4013      	ands	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4313      	orrs	r3, r2
 80021a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021a2:	4a25      	ldr	r2, [pc, #148]	; (8002238 <HAL_GPIO_Init+0x2cc>)
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80021a8:	4b23      	ldr	r3, [pc, #140]	; (8002238 <HAL_GPIO_Init+0x2cc>)
 80021aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	43db      	mvns	r3, r3
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	4013      	ands	r3, r2
 80021b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021ce:	4a1a      	ldr	r2, [pc, #104]	; (8002238 <HAL_GPIO_Init+0x2cc>)
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80021d6:	4b18      	ldr	r3, [pc, #96]	; (8002238 <HAL_GPIO_Init+0x2cc>)
 80021d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	43db      	mvns	r3, r3
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	4013      	ands	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021fc:	4a0e      	ldr	r2, [pc, #56]	; (8002238 <HAL_GPIO_Init+0x2cc>)
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	3301      	adds	r3, #1
 8002208:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	fa22 f303 	lsr.w	r3, r2, r3
 8002214:	2b00      	cmp	r3, #0
 8002216:	f47f aeb1 	bne.w	8001f7c <HAL_GPIO_Init+0x10>
  }
}
 800221a:	bf00      	nop
 800221c:	bf00      	nop
 800221e:	371c      	adds	r7, #28
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	40010000 	.word	0x40010000
 800222c:	48000400 	.word	0x48000400
 8002230:	48000800 	.word	0x48000800
 8002234:	48001000 	.word	0x48001000
 8002238:	58000800 	.word	0x58000800

0800223c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	460b      	mov	r3, r1
 8002246:	807b      	strh	r3, [r7, #2]
 8002248:	4613      	mov	r3, r2
 800224a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800224c:	787b      	ldrb	r3, [r7, #1]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002252:	887a      	ldrh	r2, [r7, #2]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002258:	e002      	b.n	8002260 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800225a:	887a      	ldrh	r2, [r7, #2]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002276:	4b08      	ldr	r3, [pc, #32]	; (8002298 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002278:	68da      	ldr	r2, [r3, #12]
 800227a:	88fb      	ldrh	r3, [r7, #6]
 800227c:	4013      	ands	r3, r2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d006      	beq.n	8002290 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002282:	4a05      	ldr	r2, [pc, #20]	; (8002298 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002284:	88fb      	ldrh	r3, [r7, #6]
 8002286:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002288:	88fb      	ldrh	r3, [r7, #6]
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff fa7e 	bl	800178c <HAL_GPIO_EXTI_Callback>
  }
}
 8002290:	bf00      	nop
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	58000800 	.word	0x58000800

0800229c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022a0:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a04      	ldr	r2, [pc, #16]	; (80022b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80022a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022aa:	6013      	str	r3, [r2, #0]
}
 80022ac:	bf00      	nop
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	58000400 	.word	0x58000400

080022bc <LL_RCC_HSE_IsEnabledDiv2>:
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80022c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022ce:	d101      	bne.n	80022d4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80022d0:	2301      	movs	r3, #1
 80022d2:	e000      	b.n	80022d6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <LL_RCC_HSE_Enable>:
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80022e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f2:	6013      	str	r3, [r2, #0]
}
 80022f4:	bf00      	nop
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <LL_RCC_HSE_Disable>:
{
 80022fe:	b480      	push	{r7}
 8002300:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800230c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002310:	6013      	str	r3, [r2, #0]
}
 8002312:	bf00      	nop
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <LL_RCC_HSE_IsReady>:
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800232e:	d101      	bne.n	8002334 <LL_RCC_HSE_IsReady+0x18>
 8002330:	2301      	movs	r3, #1
 8002332:	e000      	b.n	8002336 <LL_RCC_HSE_IsReady+0x1a>
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <LL_RCC_HSI_Enable>:
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800234e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002352:	6013      	str	r3, [r2, #0]
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <LL_RCC_HSI_Disable>:
{
 800235e:	b480      	push	{r7}
 8002360:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002362:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800236c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002370:	6013      	str	r3, [r2, #0]
}
 8002372:	bf00      	nop
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <LL_RCC_HSI_IsReady>:
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800238a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800238e:	d101      	bne.n	8002394 <LL_RCC_HSI_IsReady+0x18>
 8002390:	2301      	movs	r3, #1
 8002392:	e000      	b.n	8002396 <LL_RCC_HSI_IsReady+0x1a>
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <LL_RCC_HSI_SetCalibTrimming>:
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80023a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	061b      	lsls	r3, r3, #24
 80023b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023ba:	4313      	orrs	r3, r2
 80023bc:	604b      	str	r3, [r1, #4]
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <LL_RCC_LSE_Enable>:
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80023ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80023e2:	bf00      	nop
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <LL_RCC_LSE_Disable>:
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80023f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023fc:	f023 0301 	bic.w	r3, r3, #1
 8002400:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002404:	bf00      	nop
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <LL_RCC_LSE_EnableBypass>:
{
 800240e:	b480      	push	{r7}
 8002410:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800241e:	f043 0304 	orr.w	r3, r3, #4
 8002422:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002426:	bf00      	nop
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <LL_RCC_LSE_DisableBypass>:
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002440:	f023 0304 	bic.w	r3, r3, #4
 8002444:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002448:	bf00      	nop
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002452:	b480      	push	{r7}
 8002454:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800245a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b02      	cmp	r3, #2
 8002464:	d101      	bne.n	800246a <LL_RCC_LSE_IsReady+0x18>
 8002466:	2301      	movs	r3, #1
 8002468:	e000      	b.n	800246c <LL_RCC_LSE_IsReady+0x1a>
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8002476:	b480      	push	{r7}
 8002478:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800247a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800247e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002482:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002486:	f043 0301 	orr.w	r3, r3, #1
 800248a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800248e:	bf00      	nop
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800249c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024a8:	f023 0301 	bic.w	r3, r3, #1
 80024ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80024b0:	bf00      	nop
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80024ba:	b480      	push	{r7}
 80024bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80024be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d101      	bne.n	80024d2 <LL_RCC_LSI1_IsReady+0x18>
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <LL_RCC_LSI1_IsReady+0x1a>
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80024de:	b480      	push	{r7}
 80024e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80024e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024ee:	f043 0304 	orr.w	r3, r3, #4
 80024f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80024f6:	bf00      	nop
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002508:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800250c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002510:	f023 0304 	bic.w	r3, r3, #4
 8002514:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002518:	bf00      	nop
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8002522:	b480      	push	{r7}
 8002524:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800252a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800252e:	f003 0308 	and.w	r3, r3, #8
 8002532:	2b08      	cmp	r3, #8
 8002534:	d101      	bne.n	800253a <LL_RCC_LSI2_IsReady+0x18>
 8002536:	2301      	movs	r3, #1
 8002538:	e000      	b.n	800253c <LL_RCC_LSI2_IsReady+0x1a>
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800254e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002552:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002556:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	021b      	lsls	r3, r3, #8
 800255e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002582:	f043 0301 	orr.w	r3, r3, #1
 8002586:	6013      	str	r3, [r2, #0]
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002592:	b480      	push	{r7}
 8002594:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025a0:	f023 0301 	bic.w	r3, r3, #1
 80025a4:	6013      	str	r3, [r2, #0]
}
 80025a6:	bf00      	nop
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80025b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d101      	bne.n	80025c6 <LL_RCC_MSI_IsReady+0x16>
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <LL_RCC_MSI_IsReady+0x18>
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80025da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	600b      	str	r3, [r1, #0]
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002600:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800260a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2bb0      	cmp	r3, #176	; 0xb0
 8002610:	d901      	bls.n	8002616 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8002612:	23b0      	movs	r3, #176	; 0xb0
 8002614:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8002616:	687b      	ldr	r3, [r7, #4]
}
 8002618:	4618      	mov	r0, r3
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800262c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	021b      	lsls	r3, r3, #8
 800263a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800263e:	4313      	orrs	r3, r2
 8002640:	604b      	str	r3, [r1, #4]
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002656:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f023 0203 	bic.w	r2, r3, #3
 8002660:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4313      	orrs	r3, r2
 8002668:	608b      	str	r3, [r1, #8]
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002676:	b480      	push	{r7}
 8002678:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800267a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 030c 	and.w	r3, r3, #12
}
 8002684:	4618      	mov	r0, r3
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	608b      	str	r3, [r1, #8]
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b083      	sub	sp, #12
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80026be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80026c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80026ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80026f2:	f023 020f 	bic.w	r2, r3, #15
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	091b      	lsrs	r3, r3, #4
 80026fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026fe:	4313      	orrs	r3, r2
 8002700:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002722:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4313      	orrs	r3, r2
 800272a:	608b      	str	r3, [r1, #8]
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800274a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4313      	orrs	r3, r2
 8002752:	608b      	str	r3, [r1, #8]
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800276e:	4618      	mov	r0, r3
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800277c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002780:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002784:	011b      	lsls	r3, r3, #4
 8002786:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800278a:	4618      	mov	r0, r3
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80027b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <LL_RCC_ConfigMCO>:
  *         @arg @ref LL_RCC_MCO1_DIV_16
  * @note   (*) Value not defined for all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ConfigMCO(uint32_t MCOxSource, uint32_t MCOxPrescaler)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE, MCOxSource | MCOxPrescaler);
 80027ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	430b      	orrs	r3, r1
 80027de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027e2:	4313      	orrs	r3, r2
 80027e4:	608b      	str	r3, [r1, #8]
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80027f2:	b480      	push	{r7}
 80027f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80027f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002800:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002804:	6013      	str	r3, [r2, #0]
}
 8002806:	bf00      	nop
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800281e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002822:	6013      	str	r3, [r2, #0]
}
 8002824:	bf00      	nop
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800282e:	b480      	push	{r7}
 8002830:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002840:	d101      	bne.n	8002846 <LL_RCC_PLL_IsReady+0x18>
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <LL_RCC_PLL_IsReady+0x1a>
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002852:	b480      	push	{r7}
 8002854:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002856:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	0a1b      	lsrs	r3, r3, #8
 800285e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002862:	4618      	mov	r0, r3
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002870:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800287a:	4618      	mov	r0, r3
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002892:	4618      	mov	r0, r3
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80028a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	f003 0303 	and.w	r3, r3, #3
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80028b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c6:	d101      	bne.n	80028cc <LL_RCC_IsActiveFlag_HPRE+0x18>
 80028c8:	2301      	movs	r3, #1
 80028ca:	e000      	b.n	80028ce <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80028dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028e0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80028e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028ec:	d101      	bne.n	80028f2 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80028ee:	2301      	movs	r3, #1
 80028f0:	e000      	b.n	80028f4 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80028fe:	b480      	push	{r7}
 8002900:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002906:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800290a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800290e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002912:	d101      	bne.n	8002918 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002914:	2301      	movs	r3, #1
 8002916:	e000      	b.n	800291a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002932:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002936:	d101      	bne.n	800293c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002938:	2301      	movs	r3, #1
 800293a:	e000      	b.n	800293e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800294c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002956:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800295a:	d101      	bne.n	8002960 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800295c:	2301      	movs	r3, #1
 800295e:	e000      	b.n	8002962 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800296c:	b590      	push	{r4, r7, lr}
 800296e:	b08d      	sub	sp, #52	; 0x34
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e324      	b.n	8002fc8 <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0320 	and.w	r3, r3, #32
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 808d 	beq.w	8002aa6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800298c:	f7ff fe73 	bl	8002676 <LL_RCC_GetSysClkSource>
 8002990:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002992:	f7ff ff83 	bl	800289c <LL_RCC_PLL_GetMainSource>
 8002996:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299a:	2b00      	cmp	r3, #0
 800299c:	d005      	beq.n	80029aa <HAL_RCC_OscConfig+0x3e>
 800299e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a0:	2b0c      	cmp	r3, #12
 80029a2:	d147      	bne.n	8002a34 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80029a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d144      	bne.n	8002a34 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e308      	b.n	8002fc8 <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80029ba:	f7ff fe1e 	bl	80025fa <LL_RCC_MSI_GetRange>
 80029be:	4603      	mov	r3, r0
 80029c0:	429c      	cmp	r4, r3
 80029c2:	d914      	bls.n	80029ee <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	4618      	mov	r0, r3
 80029ca:	f000 fd3b 	bl	8003444 <RCC_SetFlashLatencyFromMSIRange>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e2f7      	b.n	8002fc8 <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff fdf8 	bl	80025d2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff fe1c 	bl	8002624 <LL_RCC_MSI_SetCalibTrimming>
 80029ec:	e013      	b.n	8002a16 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff fded 	bl	80025d2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a1b      	ldr	r3, [r3, #32]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff fe11 	bl	8002624 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 fd1c 	bl	8003444 <RCC_SetFlashLatencyFromMSIRange>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e2d8      	b.n	8002fc8 <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002a16:	f000 fcd5 	bl	80033c4 <HAL_RCC_GetHCLKFreq>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	4aa4      	ldr	r2, [pc, #656]	; (8002cb0 <HAL_RCC_OscConfig+0x344>)
 8002a1e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002a20:	4ba4      	ldr	r3, [pc, #656]	; (8002cb4 <HAL_RCC_OscConfig+0x348>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff f92b 	bl	8001c80 <HAL_InitTick>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d039      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e2c9      	b.n	8002fc8 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	69db      	ldr	r3, [r3, #28]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d01e      	beq.n	8002a7a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a3c:	f7ff fd9a 	bl	8002574 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a40:	f7ff f96c 	bl	8001d1c <HAL_GetTick>
 8002a44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a48:	f7ff f968 	bl	8001d1c <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e2b6      	b.n	8002fc8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002a5a:	f7ff fda9 	bl	80025b0 <LL_RCC_MSI_IsReady>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d0f1      	beq.n	8002a48 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff fdb2 	bl	80025d2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff fdd6 	bl	8002624 <LL_RCC_MSI_SetCalibTrimming>
 8002a78:	e015      	b.n	8002aa6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a7a:	f7ff fd8a 	bl	8002592 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a7e:	f7ff f94d 	bl	8001d1c <HAL_GetTick>
 8002a82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a86:	f7ff f949 	bl	8001d1c <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e297      	b.n	8002fc8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002a98:	f7ff fd8a 	bl	80025b0 <LL_RCC_MSI_IsReady>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1f1      	bne.n	8002a86 <HAL_RCC_OscConfig+0x11a>
 8002aa2:	e000      	b.n	8002aa6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002aa4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d047      	beq.n	8002b42 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ab2:	f7ff fde0 	bl	8002676 <LL_RCC_GetSysClkSource>
 8002ab6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ab8:	f7ff fef0 	bl	800289c <LL_RCC_PLL_GetMainSource>
 8002abc:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002abe:	6a3b      	ldr	r3, [r7, #32]
 8002ac0:	2b08      	cmp	r3, #8
 8002ac2:	d005      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x164>
 8002ac4:	6a3b      	ldr	r3, [r7, #32]
 8002ac6:	2b0c      	cmp	r3, #12
 8002ac8:	d108      	bne.n	8002adc <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	2b03      	cmp	r3, #3
 8002ace:	d105      	bne.n	8002adc <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d134      	bne.n	8002b42 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e275      	b.n	8002fc8 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ae4:	d102      	bne.n	8002aec <HAL_RCC_OscConfig+0x180>
 8002ae6:	f7ff fbfb 	bl	80022e0 <LL_RCC_HSE_Enable>
 8002aea:	e001      	b.n	8002af0 <HAL_RCC_OscConfig+0x184>
 8002aec:	f7ff fc07 	bl	80022fe <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d012      	beq.n	8002b1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af8:	f7ff f910 	bl	8001d1c <HAL_GetTick>
 8002afc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b00:	f7ff f90c 	bl	8001d1c <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b64      	cmp	r3, #100	; 0x64
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e25a      	b.n	8002fc8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002b12:	f7ff fc03 	bl	800231c <LL_RCC_HSE_IsReady>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0f1      	beq.n	8002b00 <HAL_RCC_OscConfig+0x194>
 8002b1c:	e011      	b.n	8002b42 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1e:	f7ff f8fd 	bl	8001d1c <HAL_GetTick>
 8002b22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002b24:	e008      	b.n	8002b38 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b26:	f7ff f8f9 	bl	8001d1c <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b64      	cmp	r3, #100	; 0x64
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e247      	b.n	8002fc8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002b38:	f7ff fbf0 	bl	800231c <LL_RCC_HSE_IsReady>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1f1      	bne.n	8002b26 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d04c      	beq.n	8002be8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b4e:	f7ff fd92 	bl	8002676 <LL_RCC_GetSysClkSource>
 8002b52:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b54:	f7ff fea2 	bl	800289c <LL_RCC_PLL_GetMainSource>
 8002b58:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	d005      	beq.n	8002b6c <HAL_RCC_OscConfig+0x200>
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	2b0c      	cmp	r3, #12
 8002b64:	d10e      	bne.n	8002b84 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d10b      	bne.n	8002b84 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e227      	b.n	8002fc8 <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff fc0f 	bl	80023a0 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002b82:	e031      	b.n	8002be8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d019      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b8c:	f7ff fbd8 	bl	8002340 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b90:	f7ff f8c4 	bl	8001d1c <HAL_GetTick>
 8002b94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b98:	f7ff f8c0 	bl	8001d1c <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e20e      	b.n	8002fc8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002baa:	f7ff fbe7 	bl	800237c <LL_RCC_HSI_IsReady>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0f1      	beq.n	8002b98 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff fbf1 	bl	80023a0 <LL_RCC_HSI_SetCalibTrimming>
 8002bbe:	e013      	b.n	8002be8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bc0:	f7ff fbcd 	bl	800235e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc4:	f7ff f8aa 	bl	8001d1c <HAL_GetTick>
 8002bc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bcc:	f7ff f8a6 	bl	8001d1c <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e1f4      	b.n	8002fc8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002bde:	f7ff fbcd 	bl	800237c <LL_RCC_HSI_IsReady>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1f1      	bne.n	8002bcc <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0308 	and.w	r3, r3, #8
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d106      	bne.n	8002c02 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 80a3 	beq.w	8002d48 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d076      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0310 	and.w	r3, r3, #16
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d046      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002c16:	f7ff fc50 	bl	80024ba <LL_RCC_LSI1_IsReady>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d113      	bne.n	8002c48 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002c20:	f7ff fc29 	bl	8002476 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c24:	f7ff f87a 	bl	8001d1c <HAL_GetTick>
 8002c28:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002c2c:	f7ff f876 	bl	8001d1c <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e1c4      	b.n	8002fc8 <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002c3e:	f7ff fc3c 	bl	80024ba <LL_RCC_LSI1_IsReady>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0f1      	beq.n	8002c2c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002c48:	f7ff fc49 	bl	80024de <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4c:	f7ff f866 	bl	8001d1c <HAL_GetTick>
 8002c50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002c54:	f7ff f862 	bl	8001d1c <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b03      	cmp	r3, #3
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e1b0      	b.n	8002fc8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002c66:	f7ff fc5c 	bl	8002522 <LL_RCC_LSI2_IsReady>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0f1      	beq.n	8002c54 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff fc66 	bl	8002546 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002c7a:	f7ff fc0d 	bl	8002498 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7e:	f7ff f84d 	bl	8001d1c <HAL_GetTick>
 8002c82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002c84:	e008      	b.n	8002c98 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002c86:	f7ff f849 	bl	8001d1c <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e197      	b.n	8002fc8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002c98:	f7ff fc0f 	bl	80024ba <LL_RCC_LSI1_IsReady>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1f1      	bne.n	8002c86 <HAL_RCC_OscConfig+0x31a>
 8002ca2:	e051      	b.n	8002d48 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002ca4:	f7ff fbe7 	bl	8002476 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca8:	f7ff f838 	bl	8001d1c <HAL_GetTick>
 8002cac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002cae:	e00c      	b.n	8002cca <HAL_RCC_OscConfig+0x35e>
 8002cb0:	20000004 	.word	0x20000004
 8002cb4:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002cb8:	f7ff f830 	bl	8001d1c <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e17e      	b.n	8002fc8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002cca:	f7ff fbf6 	bl	80024ba <LL_RCC_LSI1_IsReady>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0f1      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002cd4:	f7ff fc14 	bl	8002500 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002cd8:	e008      	b.n	8002cec <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002cda:	f7ff f81f 	bl	8001d1c <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b03      	cmp	r3, #3
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e16d      	b.n	8002fc8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002cec:	f7ff fc19 	bl	8002522 <LL_RCC_LSI2_IsReady>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1f1      	bne.n	8002cda <HAL_RCC_OscConfig+0x36e>
 8002cf6:	e027      	b.n	8002d48 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002cf8:	f7ff fc02 	bl	8002500 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cfc:	f7ff f80e 	bl	8001d1c <HAL_GetTick>
 8002d00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002d04:	f7ff f80a 	bl	8001d1c <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b03      	cmp	r3, #3
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e158      	b.n	8002fc8 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002d16:	f7ff fc04 	bl	8002522 <LL_RCC_LSI2_IsReady>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1f1      	bne.n	8002d04 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002d20:	f7ff fbba 	bl	8002498 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d24:	f7fe fffa 	bl	8001d1c <HAL_GetTick>
 8002d28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002d2c:	f7fe fff6 	bl	8001d1c <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e144      	b.n	8002fc8 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002d3e:	f7ff fbbc 	bl	80024ba <LL_RCC_LSI1_IsReady>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1f1      	bne.n	8002d2c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0304 	and.w	r3, r3, #4
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d05b      	beq.n	8002e0c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d54:	4b9e      	ldr	r3, [pc, #632]	; (8002fd0 <HAL_RCC_OscConfig+0x664>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d114      	bne.n	8002d8a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002d60:	f7ff fa9c 	bl	800229c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d64:	f7fe ffda 	bl	8001d1c <HAL_GetTick>
 8002d68:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d6c:	f7fe ffd6 	bl	8001d1c <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e124      	b.n	8002fc8 <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d7e:	4b94      	ldr	r3, [pc, #592]	; (8002fd0 <HAL_RCC_OscConfig+0x664>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0f0      	beq.n	8002d6c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d102      	bne.n	8002d98 <HAL_RCC_OscConfig+0x42c>
 8002d92:	f7ff fb1a 	bl	80023ca <LL_RCC_LSE_Enable>
 8002d96:	e00c      	b.n	8002db2 <HAL_RCC_OscConfig+0x446>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	2b05      	cmp	r3, #5
 8002d9e:	d104      	bne.n	8002daa <HAL_RCC_OscConfig+0x43e>
 8002da0:	f7ff fb35 	bl	800240e <LL_RCC_LSE_EnableBypass>
 8002da4:	f7ff fb11 	bl	80023ca <LL_RCC_LSE_Enable>
 8002da8:	e003      	b.n	8002db2 <HAL_RCC_OscConfig+0x446>
 8002daa:	f7ff fb1f 	bl	80023ec <LL_RCC_LSE_Disable>
 8002dae:	f7ff fb3f 	bl	8002430 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d014      	beq.n	8002de4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dba:	f7fe ffaf 	bl	8001d1c <HAL_GetTick>
 8002dbe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002dc0:	e00a      	b.n	8002dd8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dc2:	f7fe ffab 	bl	8001d1c <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e0f7      	b.n	8002fc8 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002dd8:	f7ff fb3b 	bl	8002452 <LL_RCC_LSE_IsReady>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0ef      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x456>
 8002de2:	e013      	b.n	8002e0c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de4:	f7fe ff9a 	bl	8001d1c <HAL_GetTick>
 8002de8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002dea:	e00a      	b.n	8002e02 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dec:	f7fe ff96 	bl	8001d1c <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e0e2      	b.n	8002fc8 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002e02:	f7ff fb26 	bl	8002452 <LL_RCC_LSE_IsReady>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1ef      	bne.n	8002dec <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 80d8 	beq.w	8002fc6 <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e16:	f7ff fc2e 	bl	8002676 <LL_RCC_GetSysClkSource>
 8002e1a:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	f040 80a6 	bne.w	8002f7a <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f003 0203 	and.w	r2, r3, #3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d123      	bne.n	8002e84 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d11c      	bne.n	8002e84 <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	0a1b      	lsrs	r3, r3, #8
 8002e4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d114      	bne.n	8002e84 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d10d      	bne.n	8002e84 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d106      	bne.n	8002e84 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d054      	beq.n	8002f2e <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	2b0c      	cmp	r3, #12
 8002e88:	d04f      	beq.n	8002f2a <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e8a:	f7ff fcc1 	bl	8002810 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e8e:	f7fe ff45 	bl	8001d1c <HAL_GetTick>
 8002e92:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e96:	f7fe ff41 	bl	8001d1c <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e08f      	b.n	8002fc8 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1ef      	bne.n	8002e96 <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eba:	68da      	ldr	r2, [r3, #12]
 8002ebc:	4b45      	ldr	r3, [pc, #276]	; (8002fd4 <HAL_RCC_OscConfig+0x668>)
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ec8:	4311      	orrs	r1, r2
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ece:	0212      	lsls	r2, r2, #8
 8002ed0:	4311      	orrs	r1, r2
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ed6:	4311      	orrs	r1, r2
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002edc:	4311      	orrs	r1, r2
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002eec:	f7ff fc81 	bl	80027f2 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002efa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002efe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f00:	f7fe ff0c 	bl	8001d1c <HAL_GetTick>
 8002f04:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f08:	f7fe ff08 	bl	8001d1c <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e056      	b.n	8002fc8 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0ef      	beq.n	8002f08 <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f28:	e04d      	b.n	8002fc6 <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e04c      	b.n	8002fc8 <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d144      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f3c:	f7ff fc59 	bl	80027f2 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f4e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f50:	f7fe fee4 	bl	8001d1c <HAL_GetTick>
 8002f54:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f58:	f7fe fee0 	bl	8001d1c <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e02e      	b.n	8002fc8 <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d0ef      	beq.n	8002f58 <HAL_RCC_OscConfig+0x5ec>
 8002f78:	e025      	b.n	8002fc6 <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	2b0c      	cmp	r3, #12
 8002f7e:	d020      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f80:	f7ff fc46 	bl	8002810 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f84:	f7fe feca 	bl	8001d1c <HAL_GetTick>
 8002f88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f8c:	f7fe fec6 	bl	8001d1c <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e014      	b.n	8002fc8 <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1ef      	bne.n	8002f8c <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 8002fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fba:	f023 0303 	bic.w	r3, r3, #3
 8002fbe:	60d3      	str	r3, [r2, #12]
 8002fc0:	e001      	b.n	8002fc6 <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e000      	b.n	8002fc8 <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3734      	adds	r7, #52	; 0x34
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd90      	pop	{r4, r7, pc}
 8002fd0:	58000400 	.word	0x58000400
 8002fd4:	11c1808c 	.word	0x11c1808c

08002fd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d101      	bne.n	8002fec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e12d      	b.n	8003248 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fec:	4b98      	ldr	r3, [pc, #608]	; (8003250 <HAL_RCC_ClockConfig+0x278>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d91b      	bls.n	8003032 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ffa:	4b95      	ldr	r3, [pc, #596]	; (8003250 <HAL_RCC_ClockConfig+0x278>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f023 0207 	bic.w	r2, r3, #7
 8003002:	4993      	ldr	r1, [pc, #588]	; (8003250 <HAL_RCC_ClockConfig+0x278>)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	4313      	orrs	r3, r2
 8003008:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800300a:	f7fe fe87 	bl	8001d1c <HAL_GetTick>
 800300e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003010:	e008      	b.n	8003024 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003012:	f7fe fe83 	bl	8001d1c <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e111      	b.n	8003248 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003024:	4b8a      	ldr	r3, [pc, #552]	; (8003250 <HAL_RCC_ClockConfig+0x278>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	429a      	cmp	r2, r3
 8003030:	d1ef      	bne.n	8003012 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d016      	beq.n	800306c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff fb23 	bl	800268e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003048:	f7fe fe68 	bl	8001d1c <HAL_GetTick>
 800304c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800304e:	e008      	b.n	8003062 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003050:	f7fe fe64 	bl	8001d1c <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e0f2      	b.n	8003248 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003062:	f7ff fc27 	bl	80028b4 <LL_RCC_IsActiveFlag_HPRE>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d0f1      	beq.n	8003050 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0320 	and.w	r3, r3, #32
 8003074:	2b00      	cmp	r3, #0
 8003076:	d016      	beq.n	80030a6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff fb1a 	bl	80026b6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003082:	f7fe fe4b 	bl	8001d1c <HAL_GetTick>
 8003086:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003088:	e008      	b.n	800309c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800308a:	f7fe fe47 	bl	8001d1c <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d901      	bls.n	800309c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e0d5      	b.n	8003248 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800309c:	f7ff fc1c 	bl	80028d8 <LL_RCC_IsActiveFlag_C2HPRE>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0f1      	beq.n	800308a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d016      	beq.n	80030e0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7ff fb13 	bl	80026e2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80030bc:	f7fe fe2e 	bl	8001d1c <HAL_GetTick>
 80030c0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80030c4:	f7fe fe2a 	bl	8001d1c <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e0b8      	b.n	8003248 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80030d6:	f7ff fc12 	bl	80028fe <LL_RCC_IsActiveFlag_SHDHPRE>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0f1      	beq.n	80030c4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d016      	beq.n	800311a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff fb0d 	bl	8002710 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80030f6:	f7fe fe11 	bl	8001d1c <HAL_GetTick>
 80030fa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80030fc:	e008      	b.n	8003110 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80030fe:	f7fe fe0d 	bl	8001d1c <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e09b      	b.n	8003248 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003110:	f7ff fc08 	bl	8002924 <LL_RCC_IsActiveFlag_PPRE1>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d0f1      	beq.n	80030fe <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	2b00      	cmp	r3, #0
 8003124:	d017      	beq.n	8003156 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff fb03 	bl	8002738 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003132:	f7fe fdf3 	bl	8001d1c <HAL_GetTick>
 8003136:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003138:	e008      	b.n	800314c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800313a:	f7fe fdef 	bl	8001d1c <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d901      	bls.n	800314c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e07d      	b.n	8003248 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800314c:	f7ff fbfc 	bl	8002948 <LL_RCC_IsActiveFlag_PPRE2>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0f1      	beq.n	800313a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d043      	beq.n	80031ea <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	2b02      	cmp	r3, #2
 8003168:	d106      	bne.n	8003178 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800316a:	f7ff f8d7 	bl	800231c <LL_RCC_HSE_IsReady>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d11e      	bne.n	80031b2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e067      	b.n	8003248 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	2b03      	cmp	r3, #3
 800317e:	d106      	bne.n	800318e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003180:	f7ff fb55 	bl	800282e <LL_RCC_PLL_IsReady>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d113      	bne.n	80031b2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e05c      	b.n	8003248 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d106      	bne.n	80031a4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003196:	f7ff fa0b 	bl	80025b0 <LL_RCC_MSI_IsReady>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d108      	bne.n	80031b2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e051      	b.n	8003248 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80031a4:	f7ff f8ea 	bl	800237c <LL_RCC_HSI_IsReady>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e04a      	b.n	8003248 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff fa49 	bl	800264e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031bc:	f7fe fdae 	bl	8001d1c <HAL_GetTick>
 80031c0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c2:	e00a      	b.n	80031da <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031c4:	f7fe fdaa 	bl	8001d1c <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e036      	b.n	8003248 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031da:	f7ff fa4c 	bl	8002676 <LL_RCC_GetSysClkSource>
 80031de:	4602      	mov	r2, r0
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d1ec      	bne.n	80031c4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031ea:	4b19      	ldr	r3, [pc, #100]	; (8003250 <HAL_RCC_ClockConfig+0x278>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d21b      	bcs.n	8003230 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f8:	4b15      	ldr	r3, [pc, #84]	; (8003250 <HAL_RCC_ClockConfig+0x278>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f023 0207 	bic.w	r2, r3, #7
 8003200:	4913      	ldr	r1, [pc, #76]	; (8003250 <HAL_RCC_ClockConfig+0x278>)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	4313      	orrs	r3, r2
 8003206:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003208:	f7fe fd88 	bl	8001d1c <HAL_GetTick>
 800320c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800320e:	e008      	b.n	8003222 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003210:	f7fe fd84 	bl	8001d1c <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e012      	b.n	8003248 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003222:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <HAL_RCC_ClockConfig+0x278>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	429a      	cmp	r2, r3
 800322e:	d1ef      	bne.n	8003210 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003230:	f000 f8c8 	bl	80033c4 <HAL_RCC_GetHCLKFreq>
 8003234:	4603      	mov	r3, r0
 8003236:	4a07      	ldr	r2, [pc, #28]	; (8003254 <HAL_RCC_ClockConfig+0x27c>)
 8003238:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800323a:	f7fe fd7b 	bl	8001d34 <HAL_GetTickPrio>
 800323e:	4603      	mov	r3, r0
 8003240:	4618      	mov	r0, r3
 8003242:	f7fe fd1d 	bl	8001c80 <HAL_InitTick>
 8003246:	4603      	mov	r3, r0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	58004000 	.word	0x58004000
 8003254:	20000004 	.word	0x20000004

08003258 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b08c      	sub	sp, #48	; 0x30
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8003264:	2302      	movs	r3, #2
 8003266:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003268:	2303      	movs	r3, #3
 800326a:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 800326c:	2300      	movs	r3, #0
 800326e:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003276:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	0c1b      	lsrs	r3, r3, #16
 800327c:	f003 030f 	and.w	r3, r3, #15
 8003280:	f503 1390 	add.w	r3, r3, #1179648	; 0x120000
 8003284:	029b      	lsls	r3, r3, #10
 8003286:	62bb      	str	r3, [r7, #40]	; 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	0c1b      	lsrs	r3, r3, #16
 800328c:	f003 030f 	and.w	r3, r3, #15
 8003290:	627b      	str	r3, [r7, #36]	; 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index));
 8003292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003296:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003298:	2101      	movs	r1, #1
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	fa01 f303 	lsl.w	r3, r1, r3
 80032a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032a4:	4313      	orrs	r3, r2
 80032a6:	64cb      	str	r3, [r1, #76]	; 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	0d1b      	lsrs	r3, r3, #20
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 80032b6:	f107 0310 	add.w	r3, r7, #16
 80032ba:	4619      	mov	r1, r3
 80032bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032be:	f7fe fe55 	bl	8001f6c <HAL_GPIO_Init>

  if (mcoindex == RCC_MCO1_INDEX)
 80032c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d104      	bne.n	80032d2 <HAL_RCC_MCOConfig+0x7a>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    LL_RCC_ConfigMCO(RCC_MCOSource, RCC_MCODiv);
 80032c8:	6879      	ldr	r1, [r7, #4]
 80032ca:	68b8      	ldr	r0, [r7, #8]
 80032cc:	f7ff fa7a 	bl	80027c4 <LL_RCC_ConfigMCO>
    LL_RCC_ConfigMCO(RCC_MCOSource, RCC_MCODiv);
  }
#endif /* RCC_MCO3_SUPPORT */
  else
  {}
}
 80032d0:	e007      	b.n	80032e2 <HAL_RCC_MCOConfig+0x8a>
  else if (mcoindex == RCC_MCO2_INDEX)
 80032d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032d8:	d103      	bne.n	80032e2 <HAL_RCC_MCOConfig+0x8a>
    LL_RCC_ConfigMCO(RCC_MCOSource, RCC_MCODiv);
 80032da:	6879      	ldr	r1, [r7, #4]
 80032dc:	68b8      	ldr	r0, [r7, #8]
 80032de:	f7ff fa71 	bl	80027c4 <LL_RCC_ConfigMCO>
}
 80032e2:	bf00      	nop
 80032e4:	3730      	adds	r7, #48	; 0x30
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
	...

080032ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032ec:	b590      	push	{r4, r7, lr}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032f2:	f7ff f9c0 	bl	8002676 <LL_RCC_GetSysClkSource>
 80032f6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10a      	bne.n	8003314 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80032fe:	f7ff f97c 	bl	80025fa <LL_RCC_MSI_GetRange>
 8003302:	4603      	mov	r3, r0
 8003304:	091b      	lsrs	r3, r3, #4
 8003306:	f003 030f 	and.w	r3, r3, #15
 800330a:	4a2b      	ldr	r2, [pc, #172]	; (80033b8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800330c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003310:	60fb      	str	r3, [r7, #12]
 8003312:	e04b      	b.n	80033ac <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b04      	cmp	r3, #4
 8003318:	d102      	bne.n	8003320 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800331a:	4b28      	ldr	r3, [pc, #160]	; (80033bc <HAL_RCC_GetSysClockFreq+0xd0>)
 800331c:	60fb      	str	r3, [r7, #12]
 800331e:	e045      	b.n	80033ac <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b08      	cmp	r3, #8
 8003324:	d10a      	bne.n	800333c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003326:	f7fe ffc9 	bl	80022bc <LL_RCC_HSE_IsEnabledDiv2>
 800332a:	4603      	mov	r3, r0
 800332c:	2b01      	cmp	r3, #1
 800332e:	d102      	bne.n	8003336 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003330:	4b22      	ldr	r3, [pc, #136]	; (80033bc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003332:	60fb      	str	r3, [r7, #12]
 8003334:	e03a      	b.n	80033ac <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003336:	4b22      	ldr	r3, [pc, #136]	; (80033c0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	e037      	b.n	80033ac <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800333c:	f7ff faae 	bl	800289c <LL_RCC_PLL_GetMainSource>
 8003340:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	2b02      	cmp	r3, #2
 8003346:	d003      	beq.n	8003350 <HAL_RCC_GetSysClockFreq+0x64>
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	2b03      	cmp	r3, #3
 800334c:	d003      	beq.n	8003356 <HAL_RCC_GetSysClockFreq+0x6a>
 800334e:	e00d      	b.n	800336c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003350:	4b1a      	ldr	r3, [pc, #104]	; (80033bc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003352:	60bb      	str	r3, [r7, #8]
        break;
 8003354:	e015      	b.n	8003382 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003356:	f7fe ffb1 	bl	80022bc <LL_RCC_HSE_IsEnabledDiv2>
 800335a:	4603      	mov	r3, r0
 800335c:	2b01      	cmp	r3, #1
 800335e:	d102      	bne.n	8003366 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003360:	4b16      	ldr	r3, [pc, #88]	; (80033bc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003362:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003364:	e00d      	b.n	8003382 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003366:	4b16      	ldr	r3, [pc, #88]	; (80033c0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003368:	60bb      	str	r3, [r7, #8]
        break;
 800336a:	e00a      	b.n	8003382 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800336c:	f7ff f945 	bl	80025fa <LL_RCC_MSI_GetRange>
 8003370:	4603      	mov	r3, r0
 8003372:	091b      	lsrs	r3, r3, #4
 8003374:	f003 030f 	and.w	r3, r3, #15
 8003378:	4a0f      	ldr	r2, [pc, #60]	; (80033b8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800337a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800337e:	60bb      	str	r3, [r7, #8]
        break;
 8003380:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003382:	f7ff fa66 	bl	8002852 <LL_RCC_PLL_GetN>
 8003386:	4602      	mov	r2, r0
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	fb03 f402 	mul.w	r4, r3, r2
 800338e:	f7ff fa79 	bl	8002884 <LL_RCC_PLL_GetDivider>
 8003392:	4603      	mov	r3, r0
 8003394:	091b      	lsrs	r3, r3, #4
 8003396:	3301      	adds	r3, #1
 8003398:	fbb4 f4f3 	udiv	r4, r4, r3
 800339c:	f7ff fa66 	bl	800286c <LL_RCC_PLL_GetR>
 80033a0:	4603      	mov	r3, r0
 80033a2:	0f5b      	lsrs	r3, r3, #29
 80033a4:	3301      	adds	r3, #1
 80033a6:	fbb4 f3f3 	udiv	r3, r4, r3
 80033aa:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80033ac:	68fb      	ldr	r3, [r7, #12]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd90      	pop	{r4, r7, pc}
 80033b6:	bf00      	nop
 80033b8:	0800810c 	.word	0x0800810c
 80033bc:	00f42400 	.word	0x00f42400
 80033c0:	01e84800 	.word	0x01e84800

080033c4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033c4:	b598      	push	{r3, r4, r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80033c8:	f7ff ff90 	bl	80032ec <HAL_RCC_GetSysClockFreq>
 80033cc:	4604      	mov	r4, r0
 80033ce:	f7ff f9c7 	bl	8002760 <LL_RCC_GetAHBPrescaler>
 80033d2:	4603      	mov	r3, r0
 80033d4:	091b      	lsrs	r3, r3, #4
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	4a03      	ldr	r2, [pc, #12]	; (80033e8 <HAL_RCC_GetHCLKFreq+0x24>)
 80033dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033e0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	bd98      	pop	{r3, r4, r7, pc}
 80033e8:	080080ac 	.word	0x080080ac

080033ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033ec:	b598      	push	{r3, r4, r7, lr}
 80033ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80033f0:	f7ff ffe8 	bl	80033c4 <HAL_RCC_GetHCLKFreq>
 80033f4:	4604      	mov	r4, r0
 80033f6:	f7ff f9cd 	bl	8002794 <LL_RCC_GetAPB1Prescaler>
 80033fa:	4603      	mov	r3, r0
 80033fc:	0a1b      	lsrs	r3, r3, #8
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	4a04      	ldr	r2, [pc, #16]	; (8003414 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003408:	f003 031f 	and.w	r3, r3, #31
 800340c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003410:	4618      	mov	r0, r3
 8003412:	bd98      	pop	{r3, r4, r7, pc}
 8003414:	080080ec 	.word	0x080080ec

08003418 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003418:	b598      	push	{r3, r4, r7, lr}
 800341a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800341c:	f7ff ffd2 	bl	80033c4 <HAL_RCC_GetHCLKFreq>
 8003420:	4604      	mov	r4, r0
 8003422:	f7ff f9c3 	bl	80027ac <LL_RCC_GetAPB2Prescaler>
 8003426:	4603      	mov	r3, r0
 8003428:	0adb      	lsrs	r3, r3, #11
 800342a:	f003 0307 	and.w	r3, r3, #7
 800342e:	4a04      	ldr	r2, [pc, #16]	; (8003440 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003434:	f003 031f 	and.w	r3, r3, #31
 8003438:	fa24 f303 	lsr.w	r3, r4, r3
}
 800343c:	4618      	mov	r0, r3
 800343e:	bd98      	pop	{r3, r4, r7, pc}
 8003440:	080080ec 	.word	0x080080ec

08003444 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2bb0      	cmp	r3, #176	; 0xb0
 8003450:	d903      	bls.n	800345a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003452:	4b14      	ldr	r3, [pc, #80]	; (80034a4 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8003454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	e007      	b.n	800346a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	091b      	lsrs	r3, r3, #4
 800345e:	f003 030f 	and.w	r3, r3, #15
 8003462:	4a10      	ldr	r2, [pc, #64]	; (80034a4 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8003464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003468:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800346a:	f7ff f985 	bl	8002778 <LL_RCC_GetAHB4Prescaler>
 800346e:	4603      	mov	r3, r0
 8003470:	091b      	lsrs	r3, r3, #4
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	4a0c      	ldr	r2, [pc, #48]	; (80034a8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003482:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	4a09      	ldr	r2, [pc, #36]	; (80034ac <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003488:	fba2 2303 	umull	r2, r3, r2, r3
 800348c:	0c9b      	lsrs	r3, r3, #18
 800348e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003492:	4618      	mov	r0, r3
 8003494:	f000 f80c 	bl	80034b0 <RCC_SetFlashLatency>
 8003498:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 800349a:	4618      	mov	r0, r3
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	0800810c 	.word	0x0800810c
 80034a8:	080080ac 	.word	0x080080ac
 80034ac:	431bde83 	.word	0x431bde83

080034b0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80034b0:	b590      	push	{r4, r7, lr}
 80034b2:	b08f      	sub	sp, #60	; 0x3c
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80034ba:	4b24      	ldr	r3, [pc, #144]	; (800354c <RCC_SetFlashLatency+0x9c>)
 80034bc:	f107 041c 	add.w	r4, r7, #28
 80034c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80034c6:	4b22      	ldr	r3, [pc, #136]	; (8003550 <RCC_SetFlashLatency+0xa0>)
 80034c8:	f107 040c 	add.w	r4, r7, #12
 80034cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80034d2:	2300      	movs	r3, #0
 80034d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80034d6:	2300      	movs	r3, #0
 80034d8:	633b      	str	r3, [r7, #48]	; 0x30
 80034da:	e013      	b.n	8003504 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80034dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	3338      	adds	r3, #56	; 0x38
 80034e2:	443b      	add	r3, r7
 80034e4:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d807      	bhi.n	80034fe <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 80034ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	3338      	adds	r3, #56	; 0x38
 80034f4:	443b      	add	r3, r7
 80034f6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80034fa:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 80034fc:	e005      	b.n	800350a <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80034fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003500:	3301      	adds	r3, #1
 8003502:	633b      	str	r3, [r7, #48]	; 0x30
 8003504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003506:	2b03      	cmp	r3, #3
 8003508:	d9e8      	bls.n	80034dc <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800350a:	4b12      	ldr	r3, [pc, #72]	; (8003554 <RCC_SetFlashLatency+0xa4>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f023 0207 	bic.w	r2, r3, #7
 8003512:	4910      	ldr	r1, [pc, #64]	; (8003554 <RCC_SetFlashLatency+0xa4>)
 8003514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003516:	4313      	orrs	r3, r2
 8003518:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800351a:	f7fe fbff 	bl	8001d1c <HAL_GetTick>
 800351e:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003520:	e008      	b.n	8003534 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003522:	f7fe fbfb 	bl	8001d1c <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b02      	cmp	r3, #2
 800352e:	d901      	bls.n	8003534 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e007      	b.n	8003544 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003534:	4b07      	ldr	r3, [pc, #28]	; (8003554 <RCC_SetFlashLatency+0xa4>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0307 	and.w	r3, r3, #7
 800353c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800353e:	429a      	cmp	r2, r3
 8003540:	d1ef      	bne.n	8003522 <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	373c      	adds	r7, #60	; 0x3c
 8003548:	46bd      	mov	sp, r7
 800354a:	bd90      	pop	{r4, r7, pc}
 800354c:	0800808c 	.word	0x0800808c
 8003550:	0800809c 	.word	0x0800809c
 8003554:	58004000 	.word	0x58004000

08003558 <LL_RCC_LSE_IsEnabled>:
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800355c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b01      	cmp	r3, #1
 800356a:	d101      	bne.n	8003570 <LL_RCC_LSE_IsEnabled+0x18>
 800356c:	2301      	movs	r3, #1
 800356e:	e000      	b.n	8003572 <LL_RCC_LSE_IsEnabled+0x1a>
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <LL_RCC_LSE_IsReady>:
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b02      	cmp	r3, #2
 800358e:	d101      	bne.n	8003594 <LL_RCC_LSE_IsReady+0x18>
 8003590:	2301      	movs	r3, #1
 8003592:	e000      	b.n	8003596 <LL_RCC_LSE_IsReady+0x1a>
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <LL_RCC_SetRFWKPClockSource>:
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80035a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <LL_RCC_SetSMPSClockSource>:
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80035d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035da:	f023 0203 	bic.w	r2, r3, #3
 80035de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <LL_RCC_SetSMPSPrescaler>:
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80035fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003602:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003606:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4313      	orrs	r3, r2
 800360e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <LL_RCC_SetUSARTClockSource>:
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362c:	f023 0203 	bic.w	r2, r3, #3
 8003630:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4313      	orrs	r3, r2
 8003638:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <LL_RCC_SetLPUARTClockSource>:
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003650:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003658:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800365c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4313      	orrs	r3, r2
 8003664:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <LL_RCC_SetI2CClockSource>:
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800367c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003680:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	091b      	lsrs	r3, r3, #4
 8003688:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800368c:	43db      	mvns	r3, r3
 800368e:	401a      	ands	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003698:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800369c:	4313      	orrs	r3, r2
 800369e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80036a2:	bf00      	nop
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <LL_RCC_SetLPTIMClockSource>:
{
 80036ae:	b480      	push	{r7}
 80036b0:	b083      	sub	sp, #12
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80036b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	0c1b      	lsrs	r3, r3, #16
 80036c2:	041b      	lsls	r3, r3, #16
 80036c4:	43db      	mvns	r3, r3
 80036c6:	401a      	ands	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	041b      	lsls	r3, r3, #16
 80036cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036d0:	4313      	orrs	r3, r2
 80036d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <LL_RCC_SetRNGClockSource>:
{
 80036e2:	b480      	push	{r7}
 80036e4:	b083      	sub	sp, #12
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80036ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80036f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <LL_RCC_SetCLK48ClockSource>:
{
 800370e:	b480      	push	{r7}
 8003710:	b083      	sub	sp, #12
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003716:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800371a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003722:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4313      	orrs	r3, r2
 800372a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800372e:	bf00      	nop
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <LL_RCC_SetADCClockSource>:
{
 800373a:	b480      	push	{r7}
 800373c:	b083      	sub	sp, #12
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003742:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800374e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4313      	orrs	r3, r2
 8003756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800375a:	bf00      	nop
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr

08003766 <LL_RCC_SetRTCClockSource>:
{
 8003766:	b480      	push	{r7}
 8003768:	b083      	sub	sp, #12
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800376e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003776:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800377a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4313      	orrs	r3, r2
 8003782:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <LL_RCC_GetRTCClockSource>:
{
 8003792:	b480      	push	{r7}
 8003794:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003796:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800379a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <LL_RCC_ForceBackupDomainReset>:
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80037b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80037c4:	bf00      	nop
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr

080037ce <LL_RCC_ReleaseBackupDomainReset>:
{
 80037ce:	b480      	push	{r7}
 80037d0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80037d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80037e6:	bf00      	nop
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b088      	sub	sp, #32
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80037f8:	2300      	movs	r3, #0
 80037fa:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80037fc:	2300      	movs	r3, #0
 80037fe:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003808:	2b00      	cmp	r3, #0
 800380a:	d046      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800380c:	f7ff ffc1 	bl	8003792 <LL_RCC_GetRTCClockSource>
 8003810:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	429a      	cmp	r2, r3
 800381a:	d03c      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800381c:	f7fe fd3e 	bl	800229c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d105      	bne.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	4618      	mov	r0, r3
 800382c:	f7ff ff9b 	bl	8003766 <LL_RCC_SetRTCClockSource>
 8003830:	e02e      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800383c:	f7ff ffb6 	bl	80037ac <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003840:	f7ff ffc5 	bl	80037ce <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	4313      	orrs	r3, r2
 8003850:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003852:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800385c:	f7ff fe7c 	bl	8003558 <LL_RCC_LSE_IsEnabled>
 8003860:	4603      	mov	r3, r0
 8003862:	2b01      	cmp	r3, #1
 8003864:	d114      	bne.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003866:	f7fe fa59 	bl	8001d1c <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800386c:	e00b      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800386e:	f7fe fa55 	bl	8001d1c <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	f241 3288 	movw	r2, #5000	; 0x1388
 800387c:	4293      	cmp	r3, r2
 800387e:	d902      	bls.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	77fb      	strb	r3, [r7, #31]
              break;
 8003884:	e004      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003886:	f7ff fe79 	bl	800357c <LL_RCC_LSE_IsReady>
 800388a:	4603      	mov	r3, r0
 800388c:	2b01      	cmp	r3, #1
 800388e:	d1ee      	bne.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003890:	7ffb      	ldrb	r3, [r7, #31]
 8003892:	77bb      	strb	r3, [r7, #30]
 8003894:	e001      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003896:	7ffb      	ldrb	r3, [r7, #31]
 8003898:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d004      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff feb6 	bl	800361c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d004      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff fec1 	bl	8003648 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0310 	and.w	r3, r3, #16
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d004      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7ff fee9 	bl	80036ae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0320 	and.w	r3, r3, #32
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d004      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	695b      	ldr	r3, [r3, #20]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff fede 	bl	80036ae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0304 	and.w	r3, r3, #4
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d004      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	4618      	mov	r0, r3
 8003904:	f7ff feb6 	bl	8003674 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003910:	2b00      	cmp	r3, #0
 8003912:	d02b      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800391c:	d008      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003926:	d003      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d105      	bne.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff fed4 	bl	80036e2 <LL_RCC_SetRNGClockSource>
 800393a:	e00a      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x162>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003944:	60fb      	str	r3, [r7, #12]
 8003946:	2000      	movs	r0, #0
 8003948:	f7ff fecb 	bl	80036e2 <LL_RCC_SetRNGClockSource>
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f7ff fede 	bl	800370e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800395a:	d107      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800395c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003966:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800396a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003974:	2b00      	cmp	r3, #0
 8003976:	d011      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	69db      	ldr	r3, [r3, #28]
 800397c:	4618      	mov	r0, r3
 800397e:	f7ff fedc 	bl	800373a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800398a:	d107      	bne.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800398c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800399a:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d004      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff fdf7 	bl	80035a0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d009      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7ff fe16 	bl	80035f4 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff fdfd 	bl	80035cc <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80039d2:	7fbb      	ldrb	r3, [r7, #30]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3720      	adds	r7, #32
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e095      	b.n	8003b1a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d108      	bne.n	8003a08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039fe:	d009      	beq.n	8003a14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	61da      	str	r2, [r3, #28]
 8003a06:	e005      	b.n	8003a14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d106      	bne.n	8003a34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7fd ff04 	bl	800183c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2202      	movs	r2, #2
 8003a38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a4a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a54:	d902      	bls.n	8003a5c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a56:	2300      	movs	r3, #0
 8003a58:	60fb      	str	r3, [r7, #12]
 8003a5a:	e002      	b.n	8003a62 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a60:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003a6a:	d007      	beq.n	8003a7c <HAL_SPI_Init+0xa0>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a74:	d002      	beq.n	8003a7c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	431a      	orrs	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	69db      	ldr	r3, [r3, #28]
 8003ab0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ab4:	431a      	orrs	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003abe:	ea42 0103 	orr.w	r1, r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	0c1b      	lsrs	r3, r3, #16
 8003ad8:	f003 0204 	and.w	r2, r3, #4
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae0:	f003 0310 	and.w	r3, r3, #16
 8003ae4:	431a      	orrs	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aea:	f003 0308 	and.w	r3, r3, #8
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003af8:	ea42 0103 	orr.w	r1, r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b088      	sub	sp, #32
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	60f8      	str	r0, [r7, #12]
 8003b2a:	60b9      	str	r1, [r7, #8]
 8003b2c:	603b      	str	r3, [r7, #0]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b32:	2300      	movs	r3, #0
 8003b34:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d101      	bne.n	8003b44 <HAL_SPI_Transmit+0x22>
 8003b40:	2302      	movs	r3, #2
 8003b42:	e158      	b.n	8003df6 <HAL_SPI_Transmit+0x2d4>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b4c:	f7fe f8e6 	bl	8001d1c <HAL_GetTick>
 8003b50:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003b52:	88fb      	ldrh	r3, [r7, #6]
 8003b54:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d002      	beq.n	8003b68 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003b62:	2302      	movs	r3, #2
 8003b64:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b66:	e13d      	b.n	8003de4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d002      	beq.n	8003b74 <HAL_SPI_Transmit+0x52>
 8003b6e:	88fb      	ldrh	r3, [r7, #6]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d102      	bne.n	8003b7a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b78:	e134      	b.n	8003de4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2203      	movs	r2, #3
 8003b7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	88fa      	ldrh	r2, [r7, #6]
 8003b92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	88fa      	ldrh	r2, [r7, #6]
 8003b98:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bc4:	d10f      	bne.n	8003be6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bd4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003be4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf0:	2b40      	cmp	r3, #64	; 0x40
 8003bf2:	d007      	beq.n	8003c04 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c0c:	d94b      	bls.n	8003ca6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d002      	beq.n	8003c1c <HAL_SPI_Transmit+0xfa>
 8003c16:	8afb      	ldrh	r3, [r7, #22]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d13e      	bne.n	8003c9a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c20:	881a      	ldrh	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2c:	1c9a      	adds	r2, r3, #2
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c40:	e02b      	b.n	8003c9a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d112      	bne.n	8003c76 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c54:	881a      	ldrh	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c60:	1c9a      	adds	r2, r3, #2
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c74:	e011      	b.n	8003c9a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c76:	f7fe f851 	bl	8001d1c <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d803      	bhi.n	8003c8e <HAL_SPI_Transmit+0x16c>
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c8c:	d102      	bne.n	8003c94 <HAL_SPI_Transmit+0x172>
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d102      	bne.n	8003c9a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c98:	e0a4      	b.n	8003de4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1ce      	bne.n	8003c42 <HAL_SPI_Transmit+0x120>
 8003ca4:	e07c      	b.n	8003da0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d002      	beq.n	8003cb4 <HAL_SPI_Transmit+0x192>
 8003cae:	8afb      	ldrh	r3, [r7, #22]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d170      	bne.n	8003d96 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d912      	bls.n	8003ce4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc2:	881a      	ldrh	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cce:	1c9a      	adds	r2, r3, #2
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	3b02      	subs	r3, #2
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ce2:	e058      	b.n	8003d96 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	330c      	adds	r3, #12
 8003cee:	7812      	ldrb	r2, [r2, #0]
 8003cf0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf6:	1c5a      	adds	r2, r3, #1
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	3b01      	subs	r3, #1
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003d0a:	e044      	b.n	8003d96 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d12b      	bne.n	8003d72 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d912      	bls.n	8003d4a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d28:	881a      	ldrh	r2, [r3, #0]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d34:	1c9a      	adds	r2, r3, #2
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	3b02      	subs	r3, #2
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d48:	e025      	b.n	8003d96 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	330c      	adds	r3, #12
 8003d54:	7812      	ldrb	r2, [r2, #0]
 8003d56:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d70:	e011      	b.n	8003d96 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d72:	f7fd ffd3 	bl	8001d1c <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d803      	bhi.n	8003d8a <HAL_SPI_Transmit+0x268>
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d88:	d102      	bne.n	8003d90 <HAL_SPI_Transmit+0x26e>
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d102      	bne.n	8003d96 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d94:	e026      	b.n	8003de4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1b5      	bne.n	8003d0c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	6839      	ldr	r1, [r7, #0]
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f000 fce3 	bl	8004770 <SPI_EndRxTxTransaction>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d002      	beq.n	8003db6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2220      	movs	r2, #32
 8003db4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10a      	bne.n	8003dd4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	613b      	str	r3, [r7, #16]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	613b      	str	r3, [r7, #16]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	613b      	str	r3, [r7, #16]
 8003dd2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d002      	beq.n	8003de2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	77fb      	strb	r3, [r7, #31]
 8003de0:	e000      	b.n	8003de4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003de2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003df4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3720      	adds	r7, #32
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b088      	sub	sp, #32
 8003e02:	af02      	add	r7, sp, #8
 8003e04:	60f8      	str	r0, [r7, #12]
 8003e06:	60b9      	str	r1, [r7, #8]
 8003e08:	603b      	str	r3, [r7, #0]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e1a:	d112      	bne.n	8003e42 <HAL_SPI_Receive+0x44>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10e      	bne.n	8003e42 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2204      	movs	r2, #4
 8003e28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003e2c:	88fa      	ldrh	r2, [r7, #6]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	4613      	mov	r3, r2
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	68b9      	ldr	r1, [r7, #8]
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f000 f910 	bl	800405e <HAL_SPI_TransmitReceive>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	e109      	b.n	8004056 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d101      	bne.n	8003e50 <HAL_SPI_Receive+0x52>
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	e102      	b.n	8004056 <HAL_SPI_Receive+0x258>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e58:	f7fd ff60 	bl	8001d1c <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d002      	beq.n	8003e70 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e6e:	e0e9      	b.n	8004044 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d002      	beq.n	8003e7c <HAL_SPI_Receive+0x7e>
 8003e76:	88fb      	ldrh	r3, [r7, #6]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d102      	bne.n	8003e82 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e80:	e0e0      	b.n	8004044 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2204      	movs	r2, #4
 8003e86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	88fa      	ldrh	r2, [r7, #6]
 8003e9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	88fa      	ldrh	r2, [r7, #6]
 8003ea2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ecc:	d908      	bls.n	8003ee0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003edc:	605a      	str	r2, [r3, #4]
 8003ede:	e007      	b.n	8003ef0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003eee:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ef8:	d10f      	bne.n	8003f1a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f18:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f24:	2b40      	cmp	r3, #64	; 0x40
 8003f26:	d007      	beq.n	8003f38 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f36:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f40:	d867      	bhi.n	8004012 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003f42:	e030      	b.n	8003fa6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d117      	bne.n	8003f82 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f103 020c 	add.w	r2, r3, #12
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5e:	7812      	ldrb	r2, [r2, #0]
 8003f60:	b2d2      	uxtb	r2, r2
 8003f62:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f68:	1c5a      	adds	r2, r3, #1
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	3b01      	subs	r3, #1
 8003f78:	b29a      	uxth	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003f80:	e011      	b.n	8003fa6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f82:	f7fd fecb 	bl	8001d1c <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d803      	bhi.n	8003f9a <HAL_SPI_Receive+0x19c>
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f98:	d102      	bne.n	8003fa0 <HAL_SPI_Receive+0x1a2>
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d102      	bne.n	8003fa6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003fa4:	e04e      	b.n	8004044 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1c8      	bne.n	8003f44 <HAL_SPI_Receive+0x146>
 8003fb2:	e034      	b.n	800401e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d115      	bne.n	8003fee <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68da      	ldr	r2, [r3, #12]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fcc:	b292      	uxth	r2, r2
 8003fce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd4:	1c9a      	adds	r2, r3, #2
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003fec:	e011      	b.n	8004012 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fee:	f7fd fe95 	bl	8001d1c <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d803      	bhi.n	8004006 <HAL_SPI_Receive+0x208>
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004004:	d102      	bne.n	800400c <HAL_SPI_Receive+0x20e>
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d102      	bne.n	8004012 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004010:	e018      	b.n	8004044 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004018:	b29b      	uxth	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1ca      	bne.n	8003fb4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	6839      	ldr	r1, [r7, #0]
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f000 fb4c 	bl	80046c0 <SPI_EndRxTransaction>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d002      	beq.n	8004034 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2220      	movs	r2, #32
 8004032:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004038:	2b00      	cmp	r3, #0
 800403a:	d002      	beq.n	8004042 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	75fb      	strb	r3, [r7, #23]
 8004040:	e000      	b.n	8004044 <HAL_SPI_Receive+0x246>
  }

error :
 8004042:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004054:	7dfb      	ldrb	r3, [r7, #23]
}
 8004056:	4618      	mov	r0, r3
 8004058:	3718      	adds	r7, #24
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b08a      	sub	sp, #40	; 0x28
 8004062:	af00      	add	r7, sp, #0
 8004064:	60f8      	str	r0, [r7, #12]
 8004066:	60b9      	str	r1, [r7, #8]
 8004068:	607a      	str	r2, [r7, #4]
 800406a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800406c:	2301      	movs	r3, #1
 800406e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004070:	2300      	movs	r3, #0
 8004072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800407c:	2b01      	cmp	r3, #1
 800407e:	d101      	bne.n	8004084 <HAL_SPI_TransmitReceive+0x26>
 8004080:	2302      	movs	r3, #2
 8004082:	e1fb      	b.n	800447c <HAL_SPI_TransmitReceive+0x41e>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800408c:	f7fd fe46 	bl	8001d1c <HAL_GetTick>
 8004090:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004098:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80040a0:	887b      	ldrh	r3, [r7, #2]
 80040a2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80040a4:	887b      	ldrh	r3, [r7, #2]
 80040a6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80040a8:	7efb      	ldrb	r3, [r7, #27]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d00e      	beq.n	80040cc <HAL_SPI_TransmitReceive+0x6e>
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040b4:	d106      	bne.n	80040c4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d102      	bne.n	80040c4 <HAL_SPI_TransmitReceive+0x66>
 80040be:	7efb      	ldrb	r3, [r7, #27]
 80040c0:	2b04      	cmp	r3, #4
 80040c2:	d003      	beq.n	80040cc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80040c4:	2302      	movs	r3, #2
 80040c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80040ca:	e1cd      	b.n	8004468 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d005      	beq.n	80040de <HAL_SPI_TransmitReceive+0x80>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d002      	beq.n	80040de <HAL_SPI_TransmitReceive+0x80>
 80040d8:	887b      	ldrh	r3, [r7, #2]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d103      	bne.n	80040e6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80040e4:	e1c0      	b.n	8004468 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	d003      	beq.n	80040fa <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2205      	movs	r2, #5
 80040f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	887a      	ldrh	r2, [r7, #2]
 800410a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	887a      	ldrh	r2, [r7, #2]
 8004112:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	68ba      	ldr	r2, [r7, #8]
 800411a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	887a      	ldrh	r2, [r7, #2]
 8004120:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	887a      	ldrh	r2, [r7, #2]
 8004126:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800413c:	d802      	bhi.n	8004144 <HAL_SPI_TransmitReceive+0xe6>
 800413e:	8a3b      	ldrh	r3, [r7, #16]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d908      	bls.n	8004156 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004152:	605a      	str	r2, [r3, #4]
 8004154:	e007      	b.n	8004166 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004164:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004170:	2b40      	cmp	r3, #64	; 0x40
 8004172:	d007      	beq.n	8004184 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004182:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800418c:	d97c      	bls.n	8004288 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d002      	beq.n	800419c <HAL_SPI_TransmitReceive+0x13e>
 8004196:	8a7b      	ldrh	r3, [r7, #18]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d169      	bne.n	8004270 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a0:	881a      	ldrh	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ac:	1c9a      	adds	r2, r3, #2
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041c0:	e056      	b.n	8004270 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d11b      	bne.n	8004208 <HAL_SPI_TransmitReceive+0x1aa>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d016      	beq.n	8004208 <HAL_SPI_TransmitReceive+0x1aa>
 80041da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d113      	bne.n	8004208 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e4:	881a      	ldrh	r2, [r3, #0]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f0:	1c9a      	adds	r2, r3, #2
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	3b01      	subs	r3, #1
 80041fe:	b29a      	uxth	r2, r3
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004204:	2300      	movs	r3, #0
 8004206:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b01      	cmp	r3, #1
 8004214:	d11c      	bne.n	8004250 <HAL_SPI_TransmitReceive+0x1f2>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800421c:	b29b      	uxth	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d016      	beq.n	8004250 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68da      	ldr	r2, [r3, #12]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422c:	b292      	uxth	r2, r2
 800422e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004234:	1c9a      	adds	r2, r3, #2
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004240:	b29b      	uxth	r3, r3
 8004242:	3b01      	subs	r3, #1
 8004244:	b29a      	uxth	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800424c:	2301      	movs	r3, #1
 800424e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004250:	f7fd fd64 	bl	8001d1c <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800425c:	429a      	cmp	r2, r3
 800425e:	d807      	bhi.n	8004270 <HAL_SPI_TransmitReceive+0x212>
 8004260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004266:	d003      	beq.n	8004270 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800426e:	e0fb      	b.n	8004468 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004274:	b29b      	uxth	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1a3      	bne.n	80041c2 <HAL_SPI_TransmitReceive+0x164>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004280:	b29b      	uxth	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d19d      	bne.n	80041c2 <HAL_SPI_TransmitReceive+0x164>
 8004286:	e0df      	b.n	8004448 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d003      	beq.n	8004298 <HAL_SPI_TransmitReceive+0x23a>
 8004290:	8a7b      	ldrh	r3, [r7, #18]
 8004292:	2b01      	cmp	r3, #1
 8004294:	f040 80cb 	bne.w	800442e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800429c:	b29b      	uxth	r3, r3
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d912      	bls.n	80042c8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a6:	881a      	ldrh	r2, [r3, #0]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b2:	1c9a      	adds	r2, r3, #2
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042bc:	b29b      	uxth	r3, r3
 80042be:	3b02      	subs	r3, #2
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80042c6:	e0b2      	b.n	800442e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	330c      	adds	r3, #12
 80042d2:	7812      	ldrb	r2, [r2, #0]
 80042d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042da:	1c5a      	adds	r2, r3, #1
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042ee:	e09e      	b.n	800442e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d134      	bne.n	8004368 <HAL_SPI_TransmitReceive+0x30a>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004302:	b29b      	uxth	r3, r3
 8004304:	2b00      	cmp	r3, #0
 8004306:	d02f      	beq.n	8004368 <HAL_SPI_TransmitReceive+0x30a>
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430a:	2b01      	cmp	r3, #1
 800430c:	d12c      	bne.n	8004368 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004312:	b29b      	uxth	r3, r3
 8004314:	2b01      	cmp	r3, #1
 8004316:	d912      	bls.n	800433e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431c:	881a      	ldrh	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004328:	1c9a      	adds	r2, r3, #2
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004332:	b29b      	uxth	r3, r3
 8004334:	3b02      	subs	r3, #2
 8004336:	b29a      	uxth	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800433c:	e012      	b.n	8004364 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	330c      	adds	r3, #12
 8004348:	7812      	ldrb	r2, [r2, #0]
 800434a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004350:	1c5a      	adds	r2, r3, #1
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800435a:	b29b      	uxth	r3, r3
 800435c:	3b01      	subs	r3, #1
 800435e:	b29a      	uxth	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004364:	2300      	movs	r3, #0
 8004366:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b01      	cmp	r3, #1
 8004374:	d148      	bne.n	8004408 <HAL_SPI_TransmitReceive+0x3aa>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800437c:	b29b      	uxth	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d042      	beq.n	8004408 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004388:	b29b      	uxth	r3, r3
 800438a:	2b01      	cmp	r3, #1
 800438c:	d923      	bls.n	80043d6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68da      	ldr	r2, [r3, #12]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004398:	b292      	uxth	r2, r2
 800439a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a0:	1c9a      	adds	r2, r3, #2
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	3b02      	subs	r3, #2
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043be:	b29b      	uxth	r3, r3
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d81f      	bhi.n	8004404 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	685a      	ldr	r2, [r3, #4]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043d2:	605a      	str	r2, [r3, #4]
 80043d4:	e016      	b.n	8004404 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f103 020c 	add.w	r2, r3, #12
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	7812      	ldrb	r2, [r2, #0]
 80043e4:	b2d2      	uxtb	r2, r2
 80043e6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ec:	1c5a      	adds	r2, r3, #1
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	3b01      	subs	r3, #1
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004404:	2301      	movs	r3, #1
 8004406:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004408:	f7fd fc88 	bl	8001d1c <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004414:	429a      	cmp	r2, r3
 8004416:	d803      	bhi.n	8004420 <HAL_SPI_TransmitReceive+0x3c2>
 8004418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441e:	d102      	bne.n	8004426 <HAL_SPI_TransmitReceive+0x3c8>
 8004420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004422:	2b00      	cmp	r3, #0
 8004424:	d103      	bne.n	800442e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800442c:	e01c      	b.n	8004468 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004432:	b29b      	uxth	r3, r3
 8004434:	2b00      	cmp	r3, #0
 8004436:	f47f af5b 	bne.w	80042f0 <HAL_SPI_TransmitReceive+0x292>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004440:	b29b      	uxth	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	f47f af54 	bne.w	80042f0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004448:	69fa      	ldr	r2, [r7, #28]
 800444a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f000 f98f 	bl	8004770 <SPI_EndRxTxTransaction>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d006      	beq.n	8004466 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2220      	movs	r2, #32
 8004462:	661a      	str	r2, [r3, #96]	; 0x60
 8004464:	e000      	b.n	8004468 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004466:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004478:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800447c:	4618      	mov	r0, r3
 800447e:	3728      	adds	r7, #40	; 0x28
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b088      	sub	sp, #32
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	603b      	str	r3, [r7, #0]
 8004490:	4613      	mov	r3, r2
 8004492:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004494:	f7fd fc42 	bl	8001d1c <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449c:	1a9b      	subs	r3, r3, r2
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	4413      	add	r3, r2
 80044a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80044a4:	f7fd fc3a 	bl	8001d1c <HAL_GetTick>
 80044a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80044aa:	4b39      	ldr	r3, [pc, #228]	; (8004590 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	015b      	lsls	r3, r3, #5
 80044b0:	0d1b      	lsrs	r3, r3, #20
 80044b2:	69fa      	ldr	r2, [r7, #28]
 80044b4:	fb02 f303 	mul.w	r3, r2, r3
 80044b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044ba:	e054      	b.n	8004566 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c2:	d050      	beq.n	8004566 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80044c4:	f7fd fc2a 	bl	8001d1c <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	69fa      	ldr	r2, [r7, #28]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d902      	bls.n	80044da <SPI_WaitFlagStateUntilTimeout+0x56>
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d13d      	bne.n	8004556 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80044e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044f2:	d111      	bne.n	8004518 <SPI_WaitFlagStateUntilTimeout+0x94>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044fc:	d004      	beq.n	8004508 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004506:	d107      	bne.n	8004518 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004516:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004520:	d10f      	bne.n	8004542 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004530:	601a      	str	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004540:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e017      	b.n	8004586 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800455c:	2300      	movs	r3, #0
 800455e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	3b01      	subs	r3, #1
 8004564:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689a      	ldr	r2, [r3, #8]
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	4013      	ands	r3, r2
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	429a      	cmp	r2, r3
 8004574:	bf0c      	ite	eq
 8004576:	2301      	moveq	r3, #1
 8004578:	2300      	movne	r3, #0
 800457a:	b2db      	uxtb	r3, r3
 800457c:	461a      	mov	r2, r3
 800457e:	79fb      	ldrb	r3, [r7, #7]
 8004580:	429a      	cmp	r2, r3
 8004582:	d19b      	bne.n	80044bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3720      	adds	r7, #32
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	20000004 	.word	0x20000004

08004594 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b08a      	sub	sp, #40	; 0x28
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
 80045a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80045a2:	2300      	movs	r3, #0
 80045a4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80045a6:	f7fd fbb9 	bl	8001d1c <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ae:	1a9b      	subs	r3, r3, r2
 80045b0:	683a      	ldr	r2, [r7, #0]
 80045b2:	4413      	add	r3, r2
 80045b4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80045b6:	f7fd fbb1 	bl	8001d1c <HAL_GetTick>
 80045ba:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	330c      	adds	r3, #12
 80045c2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80045c4:	4b3d      	ldr	r3, [pc, #244]	; (80046bc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	4613      	mov	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4413      	add	r3, r2
 80045ce:	00da      	lsls	r2, r3, #3
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	0d1b      	lsrs	r3, r3, #20
 80045d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045d6:	fb02 f303 	mul.w	r3, r2, r3
 80045da:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80045dc:	e060      	b.n	80046a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80045e4:	d107      	bne.n	80045f6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d104      	bne.n	80045f6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80045f4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045fc:	d050      	beq.n	80046a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045fe:	f7fd fb8d 	bl	8001d1c <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800460a:	429a      	cmp	r2, r3
 800460c:	d902      	bls.n	8004614 <SPI_WaitFifoStateUntilTimeout+0x80>
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	2b00      	cmp	r3, #0
 8004612:	d13d      	bne.n	8004690 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	685a      	ldr	r2, [r3, #4]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004622:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800462c:	d111      	bne.n	8004652 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004636:	d004      	beq.n	8004642 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004640:	d107      	bne.n	8004652 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004650:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004656:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800465a:	d10f      	bne.n	800467c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800467a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e010      	b.n	80046b2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004696:	2300      	movs	r3, #0
 8004698:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	3b01      	subs	r3, #1
 800469e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689a      	ldr	r2, [r3, #8]
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	4013      	ands	r3, r2
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d196      	bne.n	80045de <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3728      	adds	r7, #40	; 0x28
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	20000004 	.word	0x20000004

080046c0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af02      	add	r7, sp, #8
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046d4:	d111      	bne.n	80046fa <SPI_EndRxTransaction+0x3a>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046de:	d004      	beq.n	80046ea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046e8:	d107      	bne.n	80046fa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046f8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	9300      	str	r3, [sp, #0]
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	2200      	movs	r2, #0
 8004702:	2180      	movs	r1, #128	; 0x80
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f7ff febd 	bl	8004484 <SPI_WaitFlagStateUntilTimeout>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d007      	beq.n	8004720 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004714:	f043 0220 	orr.w	r2, r3, #32
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e023      	b.n	8004768 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004728:	d11d      	bne.n	8004766 <SPI_EndRxTransaction+0xa6>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004732:	d004      	beq.n	800473e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800473c:	d113      	bne.n	8004766 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	2200      	movs	r2, #0
 8004746:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f7ff ff22 	bl	8004594 <SPI_WaitFifoStateUntilTimeout>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d007      	beq.n	8004766 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800475a:	f043 0220 	orr.w	r2, r3, #32
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e000      	b.n	8004768 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af02      	add	r7, sp, #8
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	2200      	movs	r2, #0
 8004784:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f7ff ff03 	bl	8004594 <SPI_WaitFifoStateUntilTimeout>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d007      	beq.n	80047a4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004798:	f043 0220 	orr.w	r2, r3, #32
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e027      	b.n	80047f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	9300      	str	r3, [sp, #0]
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2200      	movs	r2, #0
 80047ac:	2180      	movs	r1, #128	; 0x80
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f7ff fe68 	bl	8004484 <SPI_WaitFlagStateUntilTimeout>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d007      	beq.n	80047ca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047be:	f043 0220 	orr.w	r2, r3, #32
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e014      	b.n	80047f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f7ff fedc 	bl	8004594 <SPI_WaitFifoStateUntilTimeout>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d007      	beq.n	80047f2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047e6:	f043 0220 	orr.w	r2, r3, #32
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e000      	b.n	80047f4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <LL_RCC_GetUSARTClockSource>:
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004808:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4013      	ands	r3, r2
}
 8004810:	4618      	mov	r0, r3
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <LL_RCC_GetLPUARTClockSource>:
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004824:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004828:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4013      	ands	r3, r2
}
 8004830:	4618      	mov	r0, r3
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e042      	b.n	80048d4 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004854:	2b00      	cmp	r3, #0
 8004856:	d106      	bne.n	8004866 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f7fd f82b 	bl	80018bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2224      	movs	r2, #36	; 0x24
 800486a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 0201 	bic.w	r2, r2, #1
 800487c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 f8c2 	bl	8004a08 <UART_SetConfig>
 8004884:	4603      	mov	r3, r0
 8004886:	2b01      	cmp	r3, #1
 8004888:	d101      	bne.n	800488e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e022      	b.n	80048d4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004892:	2b00      	cmp	r3, #0
 8004894:	d002      	beq.n	800489c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 fadc 	bl	8004e54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689a      	ldr	r2, [r3, #8]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f042 0201 	orr.w	r2, r2, #1
 80048ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 fb63 	bl	8004f98 <UART_CheckIdleState>
 80048d2:	4603      	mov	r3, r0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3708      	adds	r7, #8
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b08a      	sub	sp, #40	; 0x28
 80048e0:	af02      	add	r7, sp, #8
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	603b      	str	r3, [r7, #0]
 80048e8:	4613      	mov	r3, r2
 80048ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048f2:	2b20      	cmp	r3, #32
 80048f4:	f040 8083 	bne.w	80049fe <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d002      	beq.n	8004904 <HAL_UART_Transmit+0x28>
 80048fe:	88fb      	ldrh	r3, [r7, #6]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d101      	bne.n	8004908 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e07b      	b.n	8004a00 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800490e:	2b01      	cmp	r3, #1
 8004910:	d101      	bne.n	8004916 <HAL_UART_Transmit+0x3a>
 8004912:	2302      	movs	r3, #2
 8004914:	e074      	b.n	8004a00 <HAL_UART_Transmit+0x124>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2221      	movs	r2, #33	; 0x21
 800492a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800492e:	f7fd f9f5 	bl	8001d1c <HAL_GetTick>
 8004932:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	88fa      	ldrh	r2, [r7, #6]
 8004938:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	88fa      	ldrh	r2, [r7, #6]
 8004940:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800494c:	d108      	bne.n	8004960 <HAL_UART_Transmit+0x84>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d104      	bne.n	8004960 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004956:	2300      	movs	r3, #0
 8004958:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	61bb      	str	r3, [r7, #24]
 800495e:	e003      	b.n	8004968 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004964:	2300      	movs	r3, #0
 8004966:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004970:	e02c      	b.n	80049cc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	2200      	movs	r2, #0
 800497a:	2180      	movs	r1, #128	; 0x80
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f000 fb56 	bl	800502e <UART_WaitOnFlagUntilTimeout>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e039      	b.n	8004a00 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10b      	bne.n	80049aa <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	881b      	ldrh	r3, [r3, #0]
 8004996:	461a      	mov	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049a0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	3302      	adds	r3, #2
 80049a6:	61bb      	str	r3, [r7, #24]
 80049a8:	e007      	b.n	80049ba <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	781a      	ldrb	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	3301      	adds	r3, #1
 80049b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	3b01      	subs	r3, #1
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1cc      	bne.n	8004972 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	9300      	str	r3, [sp, #0]
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	2200      	movs	r2, #0
 80049e0:	2140      	movs	r1, #64	; 0x40
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f000 fb23 	bl	800502e <UART_WaitOnFlagUntilTimeout>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e006      	b.n	8004a00 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2220      	movs	r2, #32
 80049f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80049fa:	2300      	movs	r3, #0
 80049fc:	e000      	b.n	8004a00 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80049fe:	2302      	movs	r3, #2
  }
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3720      	adds	r7, #32
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a0c:	b08c      	sub	sp, #48	; 0x30
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a12:	2300      	movs	r3, #0
 8004a14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	689a      	ldr	r2, [r3, #8]
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	431a      	orrs	r2, r3
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	431a      	orrs	r2, r3
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	69db      	ldr	r3, [r3, #28]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	4baf      	ldr	r3, [pc, #700]	; (8004cf4 <UART_SetConfig+0x2ec>)
 8004a38:	4013      	ands	r3, r2
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	6812      	ldr	r2, [r2, #0]
 8004a3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a40:	430b      	orrs	r3, r1
 8004a42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	68da      	ldr	r2, [r3, #12]
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4aa4      	ldr	r2, [pc, #656]	; (8004cf8 <UART_SetConfig+0x2f0>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d004      	beq.n	8004a74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a70:	4313      	orrs	r3, r2
 8004a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004a7e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	6812      	ldr	r2, [r2, #0]
 8004a86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a88:	430b      	orrs	r3, r1
 8004a8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a92:	f023 010f 	bic.w	r1, r3, #15
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a95      	ldr	r2, [pc, #596]	; (8004cfc <UART_SetConfig+0x2f4>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d125      	bne.n	8004af8 <UART_SetConfig+0xf0>
 8004aac:	2003      	movs	r0, #3
 8004aae:	f7ff fea5 	bl	80047fc <LL_RCC_GetUSARTClockSource>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b03      	cmp	r3, #3
 8004ab6:	d81b      	bhi.n	8004af0 <UART_SetConfig+0xe8>
 8004ab8:	a201      	add	r2, pc, #4	; (adr r2, 8004ac0 <UART_SetConfig+0xb8>)
 8004aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004abe:	bf00      	nop
 8004ac0:	08004ad1 	.word	0x08004ad1
 8004ac4:	08004ae1 	.word	0x08004ae1
 8004ac8:	08004ad9 	.word	0x08004ad9
 8004acc:	08004ae9 	.word	0x08004ae9
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ad6:	e042      	b.n	8004b5e <UART_SetConfig+0x156>
 8004ad8:	2302      	movs	r3, #2
 8004ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ade:	e03e      	b.n	8004b5e <UART_SetConfig+0x156>
 8004ae0:	2304      	movs	r3, #4
 8004ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ae6:	e03a      	b.n	8004b5e <UART_SetConfig+0x156>
 8004ae8:	2308      	movs	r3, #8
 8004aea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aee:	e036      	b.n	8004b5e <UART_SetConfig+0x156>
 8004af0:	2310      	movs	r3, #16
 8004af2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004af6:	e032      	b.n	8004b5e <UART_SetConfig+0x156>
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a7e      	ldr	r2, [pc, #504]	; (8004cf8 <UART_SetConfig+0x2f0>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d12a      	bne.n	8004b58 <UART_SetConfig+0x150>
 8004b02:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004b06:	f7ff fe89 	bl	800481c <LL_RCC_GetLPUARTClockSource>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b10:	d01a      	beq.n	8004b48 <UART_SetConfig+0x140>
 8004b12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b16:	d81b      	bhi.n	8004b50 <UART_SetConfig+0x148>
 8004b18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b1c:	d00c      	beq.n	8004b38 <UART_SetConfig+0x130>
 8004b1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b22:	d815      	bhi.n	8004b50 <UART_SetConfig+0x148>
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d003      	beq.n	8004b30 <UART_SetConfig+0x128>
 8004b28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b2c:	d008      	beq.n	8004b40 <UART_SetConfig+0x138>
 8004b2e:	e00f      	b.n	8004b50 <UART_SetConfig+0x148>
 8004b30:	2300      	movs	r3, #0
 8004b32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b36:	e012      	b.n	8004b5e <UART_SetConfig+0x156>
 8004b38:	2302      	movs	r3, #2
 8004b3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b3e:	e00e      	b.n	8004b5e <UART_SetConfig+0x156>
 8004b40:	2304      	movs	r3, #4
 8004b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b46:	e00a      	b.n	8004b5e <UART_SetConfig+0x156>
 8004b48:	2308      	movs	r3, #8
 8004b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b4e:	e006      	b.n	8004b5e <UART_SetConfig+0x156>
 8004b50:	2310      	movs	r3, #16
 8004b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b56:	e002      	b.n	8004b5e <UART_SetConfig+0x156>
 8004b58:	2310      	movs	r3, #16
 8004b5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a65      	ldr	r2, [pc, #404]	; (8004cf8 <UART_SetConfig+0x2f0>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	f040 8097 	bne.w	8004c98 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b6e:	2b08      	cmp	r3, #8
 8004b70:	d823      	bhi.n	8004bba <UART_SetConfig+0x1b2>
 8004b72:	a201      	add	r2, pc, #4	; (adr r2, 8004b78 <UART_SetConfig+0x170>)
 8004b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b78:	08004b9d 	.word	0x08004b9d
 8004b7c:	08004bbb 	.word	0x08004bbb
 8004b80:	08004ba5 	.word	0x08004ba5
 8004b84:	08004bbb 	.word	0x08004bbb
 8004b88:	08004bab 	.word	0x08004bab
 8004b8c:	08004bbb 	.word	0x08004bbb
 8004b90:	08004bbb 	.word	0x08004bbb
 8004b94:	08004bbb 	.word	0x08004bbb
 8004b98:	08004bb3 	.word	0x08004bb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b9c:	f7fe fc26 	bl	80033ec <HAL_RCC_GetPCLK1Freq>
 8004ba0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ba2:	e010      	b.n	8004bc6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ba4:	4b56      	ldr	r3, [pc, #344]	; (8004d00 <UART_SetConfig+0x2f8>)
 8004ba6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ba8:	e00d      	b.n	8004bc6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004baa:	f7fe fb9f 	bl	80032ec <HAL_RCC_GetSysClockFreq>
 8004bae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bb0:	e009      	b.n	8004bc6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bb6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bb8:	e005      	b.n	8004bc6 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004bc4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f000 812a 	beq.w	8004e22 <UART_SetConfig+0x41a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd2:	4a4c      	ldr	r2, [pc, #304]	; (8004d04 <UART_SetConfig+0x2fc>)
 8004bd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bd8:	461a      	mov	r2, r3
 8004bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004be0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	4613      	mov	r3, r2
 8004be8:	005b      	lsls	r3, r3, #1
 8004bea:	4413      	add	r3, r2
 8004bec:	69ba      	ldr	r2, [r7, #24]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d305      	bcc.n	8004bfe <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d903      	bls.n	8004c06 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004c04:	e10d      	b.n	8004e22 <UART_SetConfig+0x41a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	2200      	movs	r2, #0
 8004c0a:	60bb      	str	r3, [r7, #8]
 8004c0c:	60fa      	str	r2, [r7, #12]
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	4a3c      	ldr	r2, [pc, #240]	; (8004d04 <UART_SetConfig+0x2fc>)
 8004c14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	603b      	str	r3, [r7, #0]
 8004c1e:	607a      	str	r2, [r7, #4]
 8004c20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c28:	f7fb ffb6 	bl	8000b98 <__aeabi_uldivmod>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	4610      	mov	r0, r2
 8004c32:	4619      	mov	r1, r3
 8004c34:	f04f 0200 	mov.w	r2, #0
 8004c38:	f04f 0300 	mov.w	r3, #0
 8004c3c:	020b      	lsls	r3, r1, #8
 8004c3e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004c42:	0202      	lsls	r2, r0, #8
 8004c44:	6979      	ldr	r1, [r7, #20]
 8004c46:	6849      	ldr	r1, [r1, #4]
 8004c48:	0849      	lsrs	r1, r1, #1
 8004c4a:	2000      	movs	r0, #0
 8004c4c:	460c      	mov	r4, r1
 8004c4e:	4605      	mov	r5, r0
 8004c50:	eb12 0804 	adds.w	r8, r2, r4
 8004c54:	eb43 0905 	adc.w	r9, r3, r5
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	469a      	mov	sl, r3
 8004c60:	4693      	mov	fp, r2
 8004c62:	4652      	mov	r2, sl
 8004c64:	465b      	mov	r3, fp
 8004c66:	4640      	mov	r0, r8
 8004c68:	4649      	mov	r1, r9
 8004c6a:	f7fb ff95 	bl	8000b98 <__aeabi_uldivmod>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	460b      	mov	r3, r1
 8004c72:	4613      	mov	r3, r2
 8004c74:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c76:	6a3b      	ldr	r3, [r7, #32]
 8004c78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c7c:	d308      	bcc.n	8004c90 <UART_SetConfig+0x288>
 8004c7e:	6a3b      	ldr	r3, [r7, #32]
 8004c80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c84:	d204      	bcs.n	8004c90 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	6a3a      	ldr	r2, [r7, #32]
 8004c8c:	60da      	str	r2, [r3, #12]
 8004c8e:	e0c8      	b.n	8004e22 <UART_SetConfig+0x41a>
        }
        else
        {
          ret = HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004c96:	e0c4      	b.n	8004e22 <UART_SetConfig+0x41a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	69db      	ldr	r3, [r3, #28]
 8004c9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ca0:	d16d      	bne.n	8004d7e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8004ca2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	2b07      	cmp	r3, #7
 8004caa:	d82d      	bhi.n	8004d08 <UART_SetConfig+0x300>
 8004cac:	a201      	add	r2, pc, #4	; (adr r2, 8004cb4 <UART_SetConfig+0x2ac>)
 8004cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb2:	bf00      	nop
 8004cb4:	08004cd5 	.word	0x08004cd5
 8004cb8:	08004cdd 	.word	0x08004cdd
 8004cbc:	08004d09 	.word	0x08004d09
 8004cc0:	08004ce3 	.word	0x08004ce3
 8004cc4:	08004d09 	.word	0x08004d09
 8004cc8:	08004d09 	.word	0x08004d09
 8004ccc:	08004d09 	.word	0x08004d09
 8004cd0:	08004ceb 	.word	0x08004ceb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cd4:	f7fe fba0 	bl	8003418 <HAL_RCC_GetPCLK2Freq>
 8004cd8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004cda:	e01b      	b.n	8004d14 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cdc:	4b08      	ldr	r3, [pc, #32]	; (8004d00 <UART_SetConfig+0x2f8>)
 8004cde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ce0:	e018      	b.n	8004d14 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ce2:	f7fe fb03 	bl	80032ec <HAL_RCC_GetSysClockFreq>
 8004ce6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ce8:	e014      	b.n	8004d14 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004cf0:	e010      	b.n	8004d14 <UART_SetConfig+0x30c>
 8004cf2:	bf00      	nop
 8004cf4:	cfff69f3 	.word	0xcfff69f3
 8004cf8:	40008000 	.word	0x40008000
 8004cfc:	40013800 	.word	0x40013800
 8004d00:	00f42400 	.word	0x00f42400
 8004d04:	0800814c 	.word	0x0800814c
      default:
        pclk = 0U;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004d12:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f000 8083 	beq.w	8004e22 <UART_SetConfig+0x41a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d20:	4a4a      	ldr	r2, [pc, #296]	; (8004e4c <UART_SetConfig+0x444>)
 8004d22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d26:	461a      	mov	r2, r3
 8004d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d2e:	005a      	lsls	r2, r3, #1
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	085b      	lsrs	r3, r3, #1
 8004d36:	441a      	add	r2, r3
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d40:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d42:	6a3b      	ldr	r3, [r7, #32]
 8004d44:	2b0f      	cmp	r3, #15
 8004d46:	d916      	bls.n	8004d76 <UART_SetConfig+0x36e>
 8004d48:	6a3b      	ldr	r3, [r7, #32]
 8004d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d4e:	d212      	bcs.n	8004d76 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d50:	6a3b      	ldr	r3, [r7, #32]
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	f023 030f 	bic.w	r3, r3, #15
 8004d58:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d5a:	6a3b      	ldr	r3, [r7, #32]
 8004d5c:	085b      	lsrs	r3, r3, #1
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	f003 0307 	and.w	r3, r3, #7
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	8bfb      	ldrh	r3, [r7, #30]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	8bfa      	ldrh	r2, [r7, #30]
 8004d72:	60da      	str	r2, [r3, #12]
 8004d74:	e055      	b.n	8004e22 <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004d7c:	e051      	b.n	8004e22 <UART_SetConfig+0x41a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d82:	3b01      	subs	r3, #1
 8004d84:	2b07      	cmp	r3, #7
 8004d86:	d822      	bhi.n	8004dce <UART_SetConfig+0x3c6>
 8004d88:	a201      	add	r2, pc, #4	; (adr r2, 8004d90 <UART_SetConfig+0x388>)
 8004d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d8e:	bf00      	nop
 8004d90:	08004db1 	.word	0x08004db1
 8004d94:	08004db9 	.word	0x08004db9
 8004d98:	08004dcf 	.word	0x08004dcf
 8004d9c:	08004dbf 	.word	0x08004dbf
 8004da0:	08004dcf 	.word	0x08004dcf
 8004da4:	08004dcf 	.word	0x08004dcf
 8004da8:	08004dcf 	.word	0x08004dcf
 8004dac:	08004dc7 	.word	0x08004dc7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004db0:	f7fe fb32 	bl	8003418 <HAL_RCC_GetPCLK2Freq>
 8004db4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004db6:	e010      	b.n	8004dda <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004db8:	4b25      	ldr	r3, [pc, #148]	; (8004e50 <UART_SetConfig+0x448>)
 8004dba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004dbc:	e00d      	b.n	8004dda <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dbe:	f7fe fa95 	bl	80032ec <HAL_RCC_GetSysClockFreq>
 8004dc2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004dc4:	e009      	b.n	8004dda <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004dcc:	e005      	b.n	8004dda <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004dd8:	bf00      	nop
    }

    if (pclk != 0U)
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d020      	beq.n	8004e22 <UART_SetConfig+0x41a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de4:	4a19      	ldr	r2, [pc, #100]	; (8004e4c <UART_SetConfig+0x444>)
 8004de6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dea:	461a      	mov	r2, r3
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	fbb3 f2f2 	udiv	r2, r3, r2
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	085b      	lsrs	r3, r3, #1
 8004df8:	441a      	add	r2, r3
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e02:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e04:	6a3b      	ldr	r3, [r7, #32]
 8004e06:	2b0f      	cmp	r3, #15
 8004e08:	d908      	bls.n	8004e1c <UART_SetConfig+0x414>
 8004e0a:	6a3b      	ldr	r3, [r7, #32]
 8004e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e10:	d204      	bcs.n	8004e1c <UART_SetConfig+0x414>
      {
        huart->Instance->BRR = usartdiv;
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6a3a      	ldr	r2, [r7, #32]
 8004e18:	60da      	str	r2, [r3, #12]
 8004e1a:	e002      	b.n	8004e22 <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	2200      	movs	r2, #0
 8004e36:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004e3e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3730      	adds	r7, #48	; 0x30
 8004e46:	46bd      	mov	sp, r7
 8004e48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e4c:	0800814c 	.word	0x0800814c
 8004e50:	00f42400 	.word	0x00f42400

08004e54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00a      	beq.n	8004e7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00a      	beq.n	8004ea0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea4:	f003 0304 	and.w	r3, r3, #4
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00a      	beq.n	8004ec2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec6:	f003 0308 	and.w	r3, r3, #8
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00a      	beq.n	8004ee4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	430a      	orrs	r2, r1
 8004ee2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee8:	f003 0310 	and.w	r3, r3, #16
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00a      	beq.n	8004f06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0a:	f003 0320 	and.w	r3, r3, #32
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00a      	beq.n	8004f28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	430a      	orrs	r2, r1
 8004f26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d01a      	beq.n	8004f6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	430a      	orrs	r2, r1
 8004f48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f52:	d10a      	bne.n	8004f6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00a      	beq.n	8004f8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	605a      	str	r2, [r3, #4]
  }
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af02      	add	r7, sp, #8
 8004f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fa8:	f7fc feb8 	bl	8001d1c <HAL_GetTick>
 8004fac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0308 	and.w	r3, r3, #8
 8004fb8:	2b08      	cmp	r3, #8
 8004fba:	d10e      	bne.n	8004fda <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fc0:	9300      	str	r3, [sp, #0]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f82f 	bl	800502e <UART_WaitOnFlagUntilTimeout>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d001      	beq.n	8004fda <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e025      	b.n	8005026 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0304 	and.w	r3, r3, #4
 8004fe4:	2b04      	cmp	r3, #4
 8004fe6:	d10e      	bne.n	8005006 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fe8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 f819 	bl	800502e <UART_WaitOnFlagUntilTimeout>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d001      	beq.n	8005006 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e00f      	b.n	8005026 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2220      	movs	r2, #32
 800500a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2220      	movs	r2, #32
 8005012:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b09c      	sub	sp, #112	; 0x70
 8005032:	af00      	add	r7, sp, #0
 8005034:	60f8      	str	r0, [r7, #12]
 8005036:	60b9      	str	r1, [r7, #8]
 8005038:	603b      	str	r3, [r7, #0]
 800503a:	4613      	mov	r3, r2
 800503c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800503e:	e0a9      	b.n	8005194 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005040:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005046:	f000 80a5 	beq.w	8005194 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800504a:	f7fc fe67 	bl	8001d1c <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005056:	429a      	cmp	r2, r3
 8005058:	d302      	bcc.n	8005060 <UART_WaitOnFlagUntilTimeout+0x32>
 800505a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800505c:	2b00      	cmp	r3, #0
 800505e:	d140      	bne.n	80050e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005068:	e853 3f00 	ldrex	r3, [r3]
 800506c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800506e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005070:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005074:	667b      	str	r3, [r7, #100]	; 0x64
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	461a      	mov	r2, r3
 800507c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800507e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005080:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005082:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005084:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005086:	e841 2300 	strex	r3, r2, [r1]
 800508a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800508c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1e6      	bne.n	8005060 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	3308      	adds	r3, #8
 8005098:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800509c:	e853 3f00 	ldrex	r3, [r3]
 80050a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a4:	f023 0301 	bic.w	r3, r3, #1
 80050a8:	663b      	str	r3, [r7, #96]	; 0x60
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	3308      	adds	r3, #8
 80050b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80050b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80050b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80050b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050ba:	e841 2300 	strex	r3, r2, [r1]
 80050be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80050c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1e5      	bne.n	8005092 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2220      	movs	r2, #32
 80050ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2220      	movs	r2, #32
 80050d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e069      	b.n	80051b6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0304 	and.w	r3, r3, #4
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d051      	beq.n	8005194 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050fe:	d149      	bne.n	8005194 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005108:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005112:	e853 3f00 	ldrex	r3, [r3]
 8005116:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800511e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	461a      	mov	r2, r3
 8005126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005128:	637b      	str	r3, [r7, #52]	; 0x34
 800512a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800512e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005130:	e841 2300 	strex	r3, r2, [r1]
 8005134:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1e6      	bne.n	800510a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	3308      	adds	r3, #8
 8005142:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	e853 3f00 	ldrex	r3, [r3]
 800514a:	613b      	str	r3, [r7, #16]
   return(result);
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	f023 0301 	bic.w	r3, r3, #1
 8005152:	66bb      	str	r3, [r7, #104]	; 0x68
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	3308      	adds	r3, #8
 800515a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800515c:	623a      	str	r2, [r7, #32]
 800515e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005160:	69f9      	ldr	r1, [r7, #28]
 8005162:	6a3a      	ldr	r2, [r7, #32]
 8005164:	e841 2300 	strex	r3, r2, [r1]
 8005168:	61bb      	str	r3, [r7, #24]
   return(result);
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d1e5      	bne.n	800513c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2220      	movs	r2, #32
 8005174:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2220      	movs	r2, #32
 800517c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2220      	movs	r2, #32
 8005184:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e010      	b.n	80051b6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	69da      	ldr	r2, [r3, #28]
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	4013      	ands	r3, r2
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	bf0c      	ite	eq
 80051a4:	2301      	moveq	r3, #1
 80051a6:	2300      	movne	r3, #0
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	461a      	mov	r2, r3
 80051ac:	79fb      	ldrb	r3, [r7, #7]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	f43f af46 	beq.w	8005040 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3770      	adds	r7, #112	; 0x70
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80051be:	b480      	push	{r7}
 80051c0:	b085      	sub	sp, #20
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d101      	bne.n	80051d4 <HAL_UARTEx_DisableFifoMode+0x16>
 80051d0:	2302      	movs	r3, #2
 80051d2:	e027      	b.n	8005224 <HAL_UARTEx_DisableFifoMode+0x66>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2224      	movs	r2, #36	; 0x24
 80051e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f022 0201 	bic.w	r2, r2, #1
 80051fa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005202:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2220      	movs	r2, #32
 8005216:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3714      	adds	r7, #20
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005240:	2b01      	cmp	r3, #1
 8005242:	d101      	bne.n	8005248 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005244:	2302      	movs	r3, #2
 8005246:	e02d      	b.n	80052a4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2224      	movs	r2, #36	; 0x24
 8005254:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f022 0201 	bic.w	r2, r2, #1
 800526e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	683a      	ldr	r2, [r7, #0]
 8005280:	430a      	orrs	r2, r1
 8005282:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f84f 	bl	8005328 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2220      	movs	r2, #32
 8005296:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3710      	adds	r7, #16
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d101      	bne.n	80052c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80052c0:	2302      	movs	r3, #2
 80052c2:	e02d      	b.n	8005320 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2224      	movs	r2, #36	; 0x24
 80052d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f022 0201 	bic.w	r2, r2, #1
 80052ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	430a      	orrs	r2, r1
 80052fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 f811 	bl	8005328 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2220      	movs	r2, #32
 8005312:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005334:	2b00      	cmp	r3, #0
 8005336:	d108      	bne.n	800534a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005348:	e031      	b.n	80053ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800534a:	2308      	movs	r3, #8
 800534c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800534e:	2308      	movs	r3, #8
 8005350:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	0e5b      	lsrs	r3, r3, #25
 800535a:	b2db      	uxtb	r3, r3
 800535c:	f003 0307 	and.w	r3, r3, #7
 8005360:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	0f5b      	lsrs	r3, r3, #29
 800536a:	b2db      	uxtb	r3, r3
 800536c:	f003 0307 	and.w	r3, r3, #7
 8005370:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005372:	7bbb      	ldrb	r3, [r7, #14]
 8005374:	7b3a      	ldrb	r2, [r7, #12]
 8005376:	4911      	ldr	r1, [pc, #68]	; (80053bc <UARTEx_SetNbDataToProcess+0x94>)
 8005378:	5c8a      	ldrb	r2, [r1, r2]
 800537a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800537e:	7b3a      	ldrb	r2, [r7, #12]
 8005380:	490f      	ldr	r1, [pc, #60]	; (80053c0 <UARTEx_SetNbDataToProcess+0x98>)
 8005382:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005384:	fb93 f3f2 	sdiv	r3, r3, r2
 8005388:	b29a      	uxth	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005390:	7bfb      	ldrb	r3, [r7, #15]
 8005392:	7b7a      	ldrb	r2, [r7, #13]
 8005394:	4909      	ldr	r1, [pc, #36]	; (80053bc <UARTEx_SetNbDataToProcess+0x94>)
 8005396:	5c8a      	ldrb	r2, [r1, r2]
 8005398:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800539c:	7b7a      	ldrb	r2, [r7, #13]
 800539e:	4908      	ldr	r1, [pc, #32]	; (80053c0 <UARTEx_SetNbDataToProcess+0x98>)
 80053a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80053a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80053a6:	b29a      	uxth	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80053ae:	bf00      	nop
 80053b0:	3714      	adds	r7, #20
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	08008164 	.word	0x08008164
 80053c0:	0800816c 	.word	0x0800816c

080053c4 <__errno>:
 80053c4:	4b01      	ldr	r3, [pc, #4]	; (80053cc <__errno+0x8>)
 80053c6:	6818      	ldr	r0, [r3, #0]
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	20000010 	.word	0x20000010

080053d0 <__libc_init_array>:
 80053d0:	b570      	push	{r4, r5, r6, lr}
 80053d2:	4d0d      	ldr	r5, [pc, #52]	; (8005408 <__libc_init_array+0x38>)
 80053d4:	4c0d      	ldr	r4, [pc, #52]	; (800540c <__libc_init_array+0x3c>)
 80053d6:	1b64      	subs	r4, r4, r5
 80053d8:	10a4      	asrs	r4, r4, #2
 80053da:	2600      	movs	r6, #0
 80053dc:	42a6      	cmp	r6, r4
 80053de:	d109      	bne.n	80053f4 <__libc_init_array+0x24>
 80053e0:	4d0b      	ldr	r5, [pc, #44]	; (8005410 <__libc_init_array+0x40>)
 80053e2:	4c0c      	ldr	r4, [pc, #48]	; (8005414 <__libc_init_array+0x44>)
 80053e4:	f002 fe20 	bl	8008028 <_init>
 80053e8:	1b64      	subs	r4, r4, r5
 80053ea:	10a4      	asrs	r4, r4, #2
 80053ec:	2600      	movs	r6, #0
 80053ee:	42a6      	cmp	r6, r4
 80053f0:	d105      	bne.n	80053fe <__libc_init_array+0x2e>
 80053f2:	bd70      	pop	{r4, r5, r6, pc}
 80053f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80053f8:	4798      	blx	r3
 80053fa:	3601      	adds	r6, #1
 80053fc:	e7ee      	b.n	80053dc <__libc_init_array+0xc>
 80053fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005402:	4798      	blx	r3
 8005404:	3601      	adds	r6, #1
 8005406:	e7f2      	b.n	80053ee <__libc_init_array+0x1e>
 8005408:	08008554 	.word	0x08008554
 800540c:	08008554 	.word	0x08008554
 8005410:	08008554 	.word	0x08008554
 8005414:	08008558 	.word	0x08008558

08005418 <memcpy>:
 8005418:	440a      	add	r2, r1
 800541a:	4291      	cmp	r1, r2
 800541c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005420:	d100      	bne.n	8005424 <memcpy+0xc>
 8005422:	4770      	bx	lr
 8005424:	b510      	push	{r4, lr}
 8005426:	f811 4b01 	ldrb.w	r4, [r1], #1
 800542a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800542e:	4291      	cmp	r1, r2
 8005430:	d1f9      	bne.n	8005426 <memcpy+0xe>
 8005432:	bd10      	pop	{r4, pc}

08005434 <memset>:
 8005434:	4402      	add	r2, r0
 8005436:	4603      	mov	r3, r0
 8005438:	4293      	cmp	r3, r2
 800543a:	d100      	bne.n	800543e <memset+0xa>
 800543c:	4770      	bx	lr
 800543e:	f803 1b01 	strb.w	r1, [r3], #1
 8005442:	e7f9      	b.n	8005438 <memset+0x4>

08005444 <__cvt>:
 8005444:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005448:	ec55 4b10 	vmov	r4, r5, d0
 800544c:	2d00      	cmp	r5, #0
 800544e:	460e      	mov	r6, r1
 8005450:	4619      	mov	r1, r3
 8005452:	462b      	mov	r3, r5
 8005454:	bfbb      	ittet	lt
 8005456:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800545a:	461d      	movlt	r5, r3
 800545c:	2300      	movge	r3, #0
 800545e:	232d      	movlt	r3, #45	; 0x2d
 8005460:	700b      	strb	r3, [r1, #0]
 8005462:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005464:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005468:	4691      	mov	r9, r2
 800546a:	f023 0820 	bic.w	r8, r3, #32
 800546e:	bfbc      	itt	lt
 8005470:	4622      	movlt	r2, r4
 8005472:	4614      	movlt	r4, r2
 8005474:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005478:	d005      	beq.n	8005486 <__cvt+0x42>
 800547a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800547e:	d100      	bne.n	8005482 <__cvt+0x3e>
 8005480:	3601      	adds	r6, #1
 8005482:	2102      	movs	r1, #2
 8005484:	e000      	b.n	8005488 <__cvt+0x44>
 8005486:	2103      	movs	r1, #3
 8005488:	ab03      	add	r3, sp, #12
 800548a:	9301      	str	r3, [sp, #4]
 800548c:	ab02      	add	r3, sp, #8
 800548e:	9300      	str	r3, [sp, #0]
 8005490:	ec45 4b10 	vmov	d0, r4, r5
 8005494:	4653      	mov	r3, sl
 8005496:	4632      	mov	r2, r6
 8005498:	f000 fe2e 	bl	80060f8 <_dtoa_r>
 800549c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80054a0:	4607      	mov	r7, r0
 80054a2:	d102      	bne.n	80054aa <__cvt+0x66>
 80054a4:	f019 0f01 	tst.w	r9, #1
 80054a8:	d022      	beq.n	80054f0 <__cvt+0xac>
 80054aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80054ae:	eb07 0906 	add.w	r9, r7, r6
 80054b2:	d110      	bne.n	80054d6 <__cvt+0x92>
 80054b4:	783b      	ldrb	r3, [r7, #0]
 80054b6:	2b30      	cmp	r3, #48	; 0x30
 80054b8:	d10a      	bne.n	80054d0 <__cvt+0x8c>
 80054ba:	2200      	movs	r2, #0
 80054bc:	2300      	movs	r3, #0
 80054be:	4620      	mov	r0, r4
 80054c0:	4629      	mov	r1, r5
 80054c2:	f7fb fad9 	bl	8000a78 <__aeabi_dcmpeq>
 80054c6:	b918      	cbnz	r0, 80054d0 <__cvt+0x8c>
 80054c8:	f1c6 0601 	rsb	r6, r6, #1
 80054cc:	f8ca 6000 	str.w	r6, [sl]
 80054d0:	f8da 3000 	ldr.w	r3, [sl]
 80054d4:	4499      	add	r9, r3
 80054d6:	2200      	movs	r2, #0
 80054d8:	2300      	movs	r3, #0
 80054da:	4620      	mov	r0, r4
 80054dc:	4629      	mov	r1, r5
 80054de:	f7fb facb 	bl	8000a78 <__aeabi_dcmpeq>
 80054e2:	b108      	cbz	r0, 80054e8 <__cvt+0xa4>
 80054e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80054e8:	2230      	movs	r2, #48	; 0x30
 80054ea:	9b03      	ldr	r3, [sp, #12]
 80054ec:	454b      	cmp	r3, r9
 80054ee:	d307      	bcc.n	8005500 <__cvt+0xbc>
 80054f0:	9b03      	ldr	r3, [sp, #12]
 80054f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054f4:	1bdb      	subs	r3, r3, r7
 80054f6:	4638      	mov	r0, r7
 80054f8:	6013      	str	r3, [r2, #0]
 80054fa:	b004      	add	sp, #16
 80054fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005500:	1c59      	adds	r1, r3, #1
 8005502:	9103      	str	r1, [sp, #12]
 8005504:	701a      	strb	r2, [r3, #0]
 8005506:	e7f0      	b.n	80054ea <__cvt+0xa6>

08005508 <__exponent>:
 8005508:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800550a:	4603      	mov	r3, r0
 800550c:	2900      	cmp	r1, #0
 800550e:	bfb8      	it	lt
 8005510:	4249      	neglt	r1, r1
 8005512:	f803 2b02 	strb.w	r2, [r3], #2
 8005516:	bfb4      	ite	lt
 8005518:	222d      	movlt	r2, #45	; 0x2d
 800551a:	222b      	movge	r2, #43	; 0x2b
 800551c:	2909      	cmp	r1, #9
 800551e:	7042      	strb	r2, [r0, #1]
 8005520:	dd2a      	ble.n	8005578 <__exponent+0x70>
 8005522:	f10d 0407 	add.w	r4, sp, #7
 8005526:	46a4      	mov	ip, r4
 8005528:	270a      	movs	r7, #10
 800552a:	46a6      	mov	lr, r4
 800552c:	460a      	mov	r2, r1
 800552e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005532:	fb07 1516 	mls	r5, r7, r6, r1
 8005536:	3530      	adds	r5, #48	; 0x30
 8005538:	2a63      	cmp	r2, #99	; 0x63
 800553a:	f104 34ff 	add.w	r4, r4, #4294967295
 800553e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005542:	4631      	mov	r1, r6
 8005544:	dcf1      	bgt.n	800552a <__exponent+0x22>
 8005546:	3130      	adds	r1, #48	; 0x30
 8005548:	f1ae 0502 	sub.w	r5, lr, #2
 800554c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005550:	1c44      	adds	r4, r0, #1
 8005552:	4629      	mov	r1, r5
 8005554:	4561      	cmp	r1, ip
 8005556:	d30a      	bcc.n	800556e <__exponent+0x66>
 8005558:	f10d 0209 	add.w	r2, sp, #9
 800555c:	eba2 020e 	sub.w	r2, r2, lr
 8005560:	4565      	cmp	r5, ip
 8005562:	bf88      	it	hi
 8005564:	2200      	movhi	r2, #0
 8005566:	4413      	add	r3, r2
 8005568:	1a18      	subs	r0, r3, r0
 800556a:	b003      	add	sp, #12
 800556c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800556e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005572:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005576:	e7ed      	b.n	8005554 <__exponent+0x4c>
 8005578:	2330      	movs	r3, #48	; 0x30
 800557a:	3130      	adds	r1, #48	; 0x30
 800557c:	7083      	strb	r3, [r0, #2]
 800557e:	70c1      	strb	r1, [r0, #3]
 8005580:	1d03      	adds	r3, r0, #4
 8005582:	e7f1      	b.n	8005568 <__exponent+0x60>

08005584 <_printf_float>:
 8005584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005588:	ed2d 8b02 	vpush	{d8}
 800558c:	b08d      	sub	sp, #52	; 0x34
 800558e:	460c      	mov	r4, r1
 8005590:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005594:	4616      	mov	r6, r2
 8005596:	461f      	mov	r7, r3
 8005598:	4605      	mov	r5, r0
 800559a:	f001 fd53 	bl	8007044 <_localeconv_r>
 800559e:	f8d0 a000 	ldr.w	sl, [r0]
 80055a2:	4650      	mov	r0, sl
 80055a4:	f7fa fdec 	bl	8000180 <strlen>
 80055a8:	2300      	movs	r3, #0
 80055aa:	930a      	str	r3, [sp, #40]	; 0x28
 80055ac:	6823      	ldr	r3, [r4, #0]
 80055ae:	9305      	str	r3, [sp, #20]
 80055b0:	f8d8 3000 	ldr.w	r3, [r8]
 80055b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80055b8:	3307      	adds	r3, #7
 80055ba:	f023 0307 	bic.w	r3, r3, #7
 80055be:	f103 0208 	add.w	r2, r3, #8
 80055c2:	f8c8 2000 	str.w	r2, [r8]
 80055c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80055ce:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80055d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80055d6:	9307      	str	r3, [sp, #28]
 80055d8:	f8cd 8018 	str.w	r8, [sp, #24]
 80055dc:	ee08 0a10 	vmov	s16, r0
 80055e0:	4b9f      	ldr	r3, [pc, #636]	; (8005860 <_printf_float+0x2dc>)
 80055e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055e6:	f04f 32ff 	mov.w	r2, #4294967295
 80055ea:	f7fb fa77 	bl	8000adc <__aeabi_dcmpun>
 80055ee:	bb88      	cbnz	r0, 8005654 <_printf_float+0xd0>
 80055f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055f4:	4b9a      	ldr	r3, [pc, #616]	; (8005860 <_printf_float+0x2dc>)
 80055f6:	f04f 32ff 	mov.w	r2, #4294967295
 80055fa:	f7fb fa51 	bl	8000aa0 <__aeabi_dcmple>
 80055fe:	bb48      	cbnz	r0, 8005654 <_printf_float+0xd0>
 8005600:	2200      	movs	r2, #0
 8005602:	2300      	movs	r3, #0
 8005604:	4640      	mov	r0, r8
 8005606:	4649      	mov	r1, r9
 8005608:	f7fb fa40 	bl	8000a8c <__aeabi_dcmplt>
 800560c:	b110      	cbz	r0, 8005614 <_printf_float+0x90>
 800560e:	232d      	movs	r3, #45	; 0x2d
 8005610:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005614:	4b93      	ldr	r3, [pc, #588]	; (8005864 <_printf_float+0x2e0>)
 8005616:	4894      	ldr	r0, [pc, #592]	; (8005868 <_printf_float+0x2e4>)
 8005618:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800561c:	bf94      	ite	ls
 800561e:	4698      	movls	r8, r3
 8005620:	4680      	movhi	r8, r0
 8005622:	2303      	movs	r3, #3
 8005624:	6123      	str	r3, [r4, #16]
 8005626:	9b05      	ldr	r3, [sp, #20]
 8005628:	f023 0204 	bic.w	r2, r3, #4
 800562c:	6022      	str	r2, [r4, #0]
 800562e:	f04f 0900 	mov.w	r9, #0
 8005632:	9700      	str	r7, [sp, #0]
 8005634:	4633      	mov	r3, r6
 8005636:	aa0b      	add	r2, sp, #44	; 0x2c
 8005638:	4621      	mov	r1, r4
 800563a:	4628      	mov	r0, r5
 800563c:	f000 f9d8 	bl	80059f0 <_printf_common>
 8005640:	3001      	adds	r0, #1
 8005642:	f040 8090 	bne.w	8005766 <_printf_float+0x1e2>
 8005646:	f04f 30ff 	mov.w	r0, #4294967295
 800564a:	b00d      	add	sp, #52	; 0x34
 800564c:	ecbd 8b02 	vpop	{d8}
 8005650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005654:	4642      	mov	r2, r8
 8005656:	464b      	mov	r3, r9
 8005658:	4640      	mov	r0, r8
 800565a:	4649      	mov	r1, r9
 800565c:	f7fb fa3e 	bl	8000adc <__aeabi_dcmpun>
 8005660:	b140      	cbz	r0, 8005674 <_printf_float+0xf0>
 8005662:	464b      	mov	r3, r9
 8005664:	2b00      	cmp	r3, #0
 8005666:	bfbc      	itt	lt
 8005668:	232d      	movlt	r3, #45	; 0x2d
 800566a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800566e:	487f      	ldr	r0, [pc, #508]	; (800586c <_printf_float+0x2e8>)
 8005670:	4b7f      	ldr	r3, [pc, #508]	; (8005870 <_printf_float+0x2ec>)
 8005672:	e7d1      	b.n	8005618 <_printf_float+0x94>
 8005674:	6863      	ldr	r3, [r4, #4]
 8005676:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800567a:	9206      	str	r2, [sp, #24]
 800567c:	1c5a      	adds	r2, r3, #1
 800567e:	d13f      	bne.n	8005700 <_printf_float+0x17c>
 8005680:	2306      	movs	r3, #6
 8005682:	6063      	str	r3, [r4, #4]
 8005684:	9b05      	ldr	r3, [sp, #20]
 8005686:	6861      	ldr	r1, [r4, #4]
 8005688:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800568c:	2300      	movs	r3, #0
 800568e:	9303      	str	r3, [sp, #12]
 8005690:	ab0a      	add	r3, sp, #40	; 0x28
 8005692:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005696:	ab09      	add	r3, sp, #36	; 0x24
 8005698:	ec49 8b10 	vmov	d0, r8, r9
 800569c:	9300      	str	r3, [sp, #0]
 800569e:	6022      	str	r2, [r4, #0]
 80056a0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80056a4:	4628      	mov	r0, r5
 80056a6:	f7ff fecd 	bl	8005444 <__cvt>
 80056aa:	9b06      	ldr	r3, [sp, #24]
 80056ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056ae:	2b47      	cmp	r3, #71	; 0x47
 80056b0:	4680      	mov	r8, r0
 80056b2:	d108      	bne.n	80056c6 <_printf_float+0x142>
 80056b4:	1cc8      	adds	r0, r1, #3
 80056b6:	db02      	blt.n	80056be <_printf_float+0x13a>
 80056b8:	6863      	ldr	r3, [r4, #4]
 80056ba:	4299      	cmp	r1, r3
 80056bc:	dd41      	ble.n	8005742 <_printf_float+0x1be>
 80056be:	f1ab 0b02 	sub.w	fp, fp, #2
 80056c2:	fa5f fb8b 	uxtb.w	fp, fp
 80056c6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80056ca:	d820      	bhi.n	800570e <_printf_float+0x18a>
 80056cc:	3901      	subs	r1, #1
 80056ce:	465a      	mov	r2, fp
 80056d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80056d4:	9109      	str	r1, [sp, #36]	; 0x24
 80056d6:	f7ff ff17 	bl	8005508 <__exponent>
 80056da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056dc:	1813      	adds	r3, r2, r0
 80056de:	2a01      	cmp	r2, #1
 80056e0:	4681      	mov	r9, r0
 80056e2:	6123      	str	r3, [r4, #16]
 80056e4:	dc02      	bgt.n	80056ec <_printf_float+0x168>
 80056e6:	6822      	ldr	r2, [r4, #0]
 80056e8:	07d2      	lsls	r2, r2, #31
 80056ea:	d501      	bpl.n	80056f0 <_printf_float+0x16c>
 80056ec:	3301      	adds	r3, #1
 80056ee:	6123      	str	r3, [r4, #16]
 80056f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d09c      	beq.n	8005632 <_printf_float+0xae>
 80056f8:	232d      	movs	r3, #45	; 0x2d
 80056fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056fe:	e798      	b.n	8005632 <_printf_float+0xae>
 8005700:	9a06      	ldr	r2, [sp, #24]
 8005702:	2a47      	cmp	r2, #71	; 0x47
 8005704:	d1be      	bne.n	8005684 <_printf_float+0x100>
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1bc      	bne.n	8005684 <_printf_float+0x100>
 800570a:	2301      	movs	r3, #1
 800570c:	e7b9      	b.n	8005682 <_printf_float+0xfe>
 800570e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005712:	d118      	bne.n	8005746 <_printf_float+0x1c2>
 8005714:	2900      	cmp	r1, #0
 8005716:	6863      	ldr	r3, [r4, #4]
 8005718:	dd0b      	ble.n	8005732 <_printf_float+0x1ae>
 800571a:	6121      	str	r1, [r4, #16]
 800571c:	b913      	cbnz	r3, 8005724 <_printf_float+0x1a0>
 800571e:	6822      	ldr	r2, [r4, #0]
 8005720:	07d0      	lsls	r0, r2, #31
 8005722:	d502      	bpl.n	800572a <_printf_float+0x1a6>
 8005724:	3301      	adds	r3, #1
 8005726:	440b      	add	r3, r1
 8005728:	6123      	str	r3, [r4, #16]
 800572a:	65a1      	str	r1, [r4, #88]	; 0x58
 800572c:	f04f 0900 	mov.w	r9, #0
 8005730:	e7de      	b.n	80056f0 <_printf_float+0x16c>
 8005732:	b913      	cbnz	r3, 800573a <_printf_float+0x1b6>
 8005734:	6822      	ldr	r2, [r4, #0]
 8005736:	07d2      	lsls	r2, r2, #31
 8005738:	d501      	bpl.n	800573e <_printf_float+0x1ba>
 800573a:	3302      	adds	r3, #2
 800573c:	e7f4      	b.n	8005728 <_printf_float+0x1a4>
 800573e:	2301      	movs	r3, #1
 8005740:	e7f2      	b.n	8005728 <_printf_float+0x1a4>
 8005742:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005748:	4299      	cmp	r1, r3
 800574a:	db05      	blt.n	8005758 <_printf_float+0x1d4>
 800574c:	6823      	ldr	r3, [r4, #0]
 800574e:	6121      	str	r1, [r4, #16]
 8005750:	07d8      	lsls	r0, r3, #31
 8005752:	d5ea      	bpl.n	800572a <_printf_float+0x1a6>
 8005754:	1c4b      	adds	r3, r1, #1
 8005756:	e7e7      	b.n	8005728 <_printf_float+0x1a4>
 8005758:	2900      	cmp	r1, #0
 800575a:	bfd4      	ite	le
 800575c:	f1c1 0202 	rsble	r2, r1, #2
 8005760:	2201      	movgt	r2, #1
 8005762:	4413      	add	r3, r2
 8005764:	e7e0      	b.n	8005728 <_printf_float+0x1a4>
 8005766:	6823      	ldr	r3, [r4, #0]
 8005768:	055a      	lsls	r2, r3, #21
 800576a:	d407      	bmi.n	800577c <_printf_float+0x1f8>
 800576c:	6923      	ldr	r3, [r4, #16]
 800576e:	4642      	mov	r2, r8
 8005770:	4631      	mov	r1, r6
 8005772:	4628      	mov	r0, r5
 8005774:	47b8      	blx	r7
 8005776:	3001      	adds	r0, #1
 8005778:	d12c      	bne.n	80057d4 <_printf_float+0x250>
 800577a:	e764      	b.n	8005646 <_printf_float+0xc2>
 800577c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005780:	f240 80e0 	bls.w	8005944 <_printf_float+0x3c0>
 8005784:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005788:	2200      	movs	r2, #0
 800578a:	2300      	movs	r3, #0
 800578c:	f7fb f974 	bl	8000a78 <__aeabi_dcmpeq>
 8005790:	2800      	cmp	r0, #0
 8005792:	d034      	beq.n	80057fe <_printf_float+0x27a>
 8005794:	4a37      	ldr	r2, [pc, #220]	; (8005874 <_printf_float+0x2f0>)
 8005796:	2301      	movs	r3, #1
 8005798:	4631      	mov	r1, r6
 800579a:	4628      	mov	r0, r5
 800579c:	47b8      	blx	r7
 800579e:	3001      	adds	r0, #1
 80057a0:	f43f af51 	beq.w	8005646 <_printf_float+0xc2>
 80057a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057a8:	429a      	cmp	r2, r3
 80057aa:	db02      	blt.n	80057b2 <_printf_float+0x22e>
 80057ac:	6823      	ldr	r3, [r4, #0]
 80057ae:	07d8      	lsls	r0, r3, #31
 80057b0:	d510      	bpl.n	80057d4 <_printf_float+0x250>
 80057b2:	ee18 3a10 	vmov	r3, s16
 80057b6:	4652      	mov	r2, sl
 80057b8:	4631      	mov	r1, r6
 80057ba:	4628      	mov	r0, r5
 80057bc:	47b8      	blx	r7
 80057be:	3001      	adds	r0, #1
 80057c0:	f43f af41 	beq.w	8005646 <_printf_float+0xc2>
 80057c4:	f04f 0800 	mov.w	r8, #0
 80057c8:	f104 091a 	add.w	r9, r4, #26
 80057cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057ce:	3b01      	subs	r3, #1
 80057d0:	4543      	cmp	r3, r8
 80057d2:	dc09      	bgt.n	80057e8 <_printf_float+0x264>
 80057d4:	6823      	ldr	r3, [r4, #0]
 80057d6:	079b      	lsls	r3, r3, #30
 80057d8:	f100 8105 	bmi.w	80059e6 <_printf_float+0x462>
 80057dc:	68e0      	ldr	r0, [r4, #12]
 80057de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057e0:	4298      	cmp	r0, r3
 80057e2:	bfb8      	it	lt
 80057e4:	4618      	movlt	r0, r3
 80057e6:	e730      	b.n	800564a <_printf_float+0xc6>
 80057e8:	2301      	movs	r3, #1
 80057ea:	464a      	mov	r2, r9
 80057ec:	4631      	mov	r1, r6
 80057ee:	4628      	mov	r0, r5
 80057f0:	47b8      	blx	r7
 80057f2:	3001      	adds	r0, #1
 80057f4:	f43f af27 	beq.w	8005646 <_printf_float+0xc2>
 80057f8:	f108 0801 	add.w	r8, r8, #1
 80057fc:	e7e6      	b.n	80057cc <_printf_float+0x248>
 80057fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005800:	2b00      	cmp	r3, #0
 8005802:	dc39      	bgt.n	8005878 <_printf_float+0x2f4>
 8005804:	4a1b      	ldr	r2, [pc, #108]	; (8005874 <_printf_float+0x2f0>)
 8005806:	2301      	movs	r3, #1
 8005808:	4631      	mov	r1, r6
 800580a:	4628      	mov	r0, r5
 800580c:	47b8      	blx	r7
 800580e:	3001      	adds	r0, #1
 8005810:	f43f af19 	beq.w	8005646 <_printf_float+0xc2>
 8005814:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005818:	4313      	orrs	r3, r2
 800581a:	d102      	bne.n	8005822 <_printf_float+0x29e>
 800581c:	6823      	ldr	r3, [r4, #0]
 800581e:	07d9      	lsls	r1, r3, #31
 8005820:	d5d8      	bpl.n	80057d4 <_printf_float+0x250>
 8005822:	ee18 3a10 	vmov	r3, s16
 8005826:	4652      	mov	r2, sl
 8005828:	4631      	mov	r1, r6
 800582a:	4628      	mov	r0, r5
 800582c:	47b8      	blx	r7
 800582e:	3001      	adds	r0, #1
 8005830:	f43f af09 	beq.w	8005646 <_printf_float+0xc2>
 8005834:	f04f 0900 	mov.w	r9, #0
 8005838:	f104 0a1a 	add.w	sl, r4, #26
 800583c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800583e:	425b      	negs	r3, r3
 8005840:	454b      	cmp	r3, r9
 8005842:	dc01      	bgt.n	8005848 <_printf_float+0x2c4>
 8005844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005846:	e792      	b.n	800576e <_printf_float+0x1ea>
 8005848:	2301      	movs	r3, #1
 800584a:	4652      	mov	r2, sl
 800584c:	4631      	mov	r1, r6
 800584e:	4628      	mov	r0, r5
 8005850:	47b8      	blx	r7
 8005852:	3001      	adds	r0, #1
 8005854:	f43f aef7 	beq.w	8005646 <_printf_float+0xc2>
 8005858:	f109 0901 	add.w	r9, r9, #1
 800585c:	e7ee      	b.n	800583c <_printf_float+0x2b8>
 800585e:	bf00      	nop
 8005860:	7fefffff 	.word	0x7fefffff
 8005864:	08008178 	.word	0x08008178
 8005868:	0800817c 	.word	0x0800817c
 800586c:	08008184 	.word	0x08008184
 8005870:	08008180 	.word	0x08008180
 8005874:	08008188 	.word	0x08008188
 8005878:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800587a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800587c:	429a      	cmp	r2, r3
 800587e:	bfa8      	it	ge
 8005880:	461a      	movge	r2, r3
 8005882:	2a00      	cmp	r2, #0
 8005884:	4691      	mov	r9, r2
 8005886:	dc37      	bgt.n	80058f8 <_printf_float+0x374>
 8005888:	f04f 0b00 	mov.w	fp, #0
 800588c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005890:	f104 021a 	add.w	r2, r4, #26
 8005894:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005896:	9305      	str	r3, [sp, #20]
 8005898:	eba3 0309 	sub.w	r3, r3, r9
 800589c:	455b      	cmp	r3, fp
 800589e:	dc33      	bgt.n	8005908 <_printf_float+0x384>
 80058a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058a4:	429a      	cmp	r2, r3
 80058a6:	db3b      	blt.n	8005920 <_printf_float+0x39c>
 80058a8:	6823      	ldr	r3, [r4, #0]
 80058aa:	07da      	lsls	r2, r3, #31
 80058ac:	d438      	bmi.n	8005920 <_printf_float+0x39c>
 80058ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058b0:	9a05      	ldr	r2, [sp, #20]
 80058b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058b4:	1a9a      	subs	r2, r3, r2
 80058b6:	eba3 0901 	sub.w	r9, r3, r1
 80058ba:	4591      	cmp	r9, r2
 80058bc:	bfa8      	it	ge
 80058be:	4691      	movge	r9, r2
 80058c0:	f1b9 0f00 	cmp.w	r9, #0
 80058c4:	dc35      	bgt.n	8005932 <_printf_float+0x3ae>
 80058c6:	f04f 0800 	mov.w	r8, #0
 80058ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058ce:	f104 0a1a 	add.w	sl, r4, #26
 80058d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058d6:	1a9b      	subs	r3, r3, r2
 80058d8:	eba3 0309 	sub.w	r3, r3, r9
 80058dc:	4543      	cmp	r3, r8
 80058de:	f77f af79 	ble.w	80057d4 <_printf_float+0x250>
 80058e2:	2301      	movs	r3, #1
 80058e4:	4652      	mov	r2, sl
 80058e6:	4631      	mov	r1, r6
 80058e8:	4628      	mov	r0, r5
 80058ea:	47b8      	blx	r7
 80058ec:	3001      	adds	r0, #1
 80058ee:	f43f aeaa 	beq.w	8005646 <_printf_float+0xc2>
 80058f2:	f108 0801 	add.w	r8, r8, #1
 80058f6:	e7ec      	b.n	80058d2 <_printf_float+0x34e>
 80058f8:	4613      	mov	r3, r2
 80058fa:	4631      	mov	r1, r6
 80058fc:	4642      	mov	r2, r8
 80058fe:	4628      	mov	r0, r5
 8005900:	47b8      	blx	r7
 8005902:	3001      	adds	r0, #1
 8005904:	d1c0      	bne.n	8005888 <_printf_float+0x304>
 8005906:	e69e      	b.n	8005646 <_printf_float+0xc2>
 8005908:	2301      	movs	r3, #1
 800590a:	4631      	mov	r1, r6
 800590c:	4628      	mov	r0, r5
 800590e:	9205      	str	r2, [sp, #20]
 8005910:	47b8      	blx	r7
 8005912:	3001      	adds	r0, #1
 8005914:	f43f ae97 	beq.w	8005646 <_printf_float+0xc2>
 8005918:	9a05      	ldr	r2, [sp, #20]
 800591a:	f10b 0b01 	add.w	fp, fp, #1
 800591e:	e7b9      	b.n	8005894 <_printf_float+0x310>
 8005920:	ee18 3a10 	vmov	r3, s16
 8005924:	4652      	mov	r2, sl
 8005926:	4631      	mov	r1, r6
 8005928:	4628      	mov	r0, r5
 800592a:	47b8      	blx	r7
 800592c:	3001      	adds	r0, #1
 800592e:	d1be      	bne.n	80058ae <_printf_float+0x32a>
 8005930:	e689      	b.n	8005646 <_printf_float+0xc2>
 8005932:	9a05      	ldr	r2, [sp, #20]
 8005934:	464b      	mov	r3, r9
 8005936:	4442      	add	r2, r8
 8005938:	4631      	mov	r1, r6
 800593a:	4628      	mov	r0, r5
 800593c:	47b8      	blx	r7
 800593e:	3001      	adds	r0, #1
 8005940:	d1c1      	bne.n	80058c6 <_printf_float+0x342>
 8005942:	e680      	b.n	8005646 <_printf_float+0xc2>
 8005944:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005946:	2a01      	cmp	r2, #1
 8005948:	dc01      	bgt.n	800594e <_printf_float+0x3ca>
 800594a:	07db      	lsls	r3, r3, #31
 800594c:	d538      	bpl.n	80059c0 <_printf_float+0x43c>
 800594e:	2301      	movs	r3, #1
 8005950:	4642      	mov	r2, r8
 8005952:	4631      	mov	r1, r6
 8005954:	4628      	mov	r0, r5
 8005956:	47b8      	blx	r7
 8005958:	3001      	adds	r0, #1
 800595a:	f43f ae74 	beq.w	8005646 <_printf_float+0xc2>
 800595e:	ee18 3a10 	vmov	r3, s16
 8005962:	4652      	mov	r2, sl
 8005964:	4631      	mov	r1, r6
 8005966:	4628      	mov	r0, r5
 8005968:	47b8      	blx	r7
 800596a:	3001      	adds	r0, #1
 800596c:	f43f ae6b 	beq.w	8005646 <_printf_float+0xc2>
 8005970:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005974:	2200      	movs	r2, #0
 8005976:	2300      	movs	r3, #0
 8005978:	f7fb f87e 	bl	8000a78 <__aeabi_dcmpeq>
 800597c:	b9d8      	cbnz	r0, 80059b6 <_printf_float+0x432>
 800597e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005980:	f108 0201 	add.w	r2, r8, #1
 8005984:	3b01      	subs	r3, #1
 8005986:	4631      	mov	r1, r6
 8005988:	4628      	mov	r0, r5
 800598a:	47b8      	blx	r7
 800598c:	3001      	adds	r0, #1
 800598e:	d10e      	bne.n	80059ae <_printf_float+0x42a>
 8005990:	e659      	b.n	8005646 <_printf_float+0xc2>
 8005992:	2301      	movs	r3, #1
 8005994:	4652      	mov	r2, sl
 8005996:	4631      	mov	r1, r6
 8005998:	4628      	mov	r0, r5
 800599a:	47b8      	blx	r7
 800599c:	3001      	adds	r0, #1
 800599e:	f43f ae52 	beq.w	8005646 <_printf_float+0xc2>
 80059a2:	f108 0801 	add.w	r8, r8, #1
 80059a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059a8:	3b01      	subs	r3, #1
 80059aa:	4543      	cmp	r3, r8
 80059ac:	dcf1      	bgt.n	8005992 <_printf_float+0x40e>
 80059ae:	464b      	mov	r3, r9
 80059b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80059b4:	e6dc      	b.n	8005770 <_printf_float+0x1ec>
 80059b6:	f04f 0800 	mov.w	r8, #0
 80059ba:	f104 0a1a 	add.w	sl, r4, #26
 80059be:	e7f2      	b.n	80059a6 <_printf_float+0x422>
 80059c0:	2301      	movs	r3, #1
 80059c2:	4642      	mov	r2, r8
 80059c4:	e7df      	b.n	8005986 <_printf_float+0x402>
 80059c6:	2301      	movs	r3, #1
 80059c8:	464a      	mov	r2, r9
 80059ca:	4631      	mov	r1, r6
 80059cc:	4628      	mov	r0, r5
 80059ce:	47b8      	blx	r7
 80059d0:	3001      	adds	r0, #1
 80059d2:	f43f ae38 	beq.w	8005646 <_printf_float+0xc2>
 80059d6:	f108 0801 	add.w	r8, r8, #1
 80059da:	68e3      	ldr	r3, [r4, #12]
 80059dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80059de:	1a5b      	subs	r3, r3, r1
 80059e0:	4543      	cmp	r3, r8
 80059e2:	dcf0      	bgt.n	80059c6 <_printf_float+0x442>
 80059e4:	e6fa      	b.n	80057dc <_printf_float+0x258>
 80059e6:	f04f 0800 	mov.w	r8, #0
 80059ea:	f104 0919 	add.w	r9, r4, #25
 80059ee:	e7f4      	b.n	80059da <_printf_float+0x456>

080059f0 <_printf_common>:
 80059f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059f4:	4616      	mov	r6, r2
 80059f6:	4699      	mov	r9, r3
 80059f8:	688a      	ldr	r2, [r1, #8]
 80059fa:	690b      	ldr	r3, [r1, #16]
 80059fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a00:	4293      	cmp	r3, r2
 8005a02:	bfb8      	it	lt
 8005a04:	4613      	movlt	r3, r2
 8005a06:	6033      	str	r3, [r6, #0]
 8005a08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a0c:	4607      	mov	r7, r0
 8005a0e:	460c      	mov	r4, r1
 8005a10:	b10a      	cbz	r2, 8005a16 <_printf_common+0x26>
 8005a12:	3301      	adds	r3, #1
 8005a14:	6033      	str	r3, [r6, #0]
 8005a16:	6823      	ldr	r3, [r4, #0]
 8005a18:	0699      	lsls	r1, r3, #26
 8005a1a:	bf42      	ittt	mi
 8005a1c:	6833      	ldrmi	r3, [r6, #0]
 8005a1e:	3302      	addmi	r3, #2
 8005a20:	6033      	strmi	r3, [r6, #0]
 8005a22:	6825      	ldr	r5, [r4, #0]
 8005a24:	f015 0506 	ands.w	r5, r5, #6
 8005a28:	d106      	bne.n	8005a38 <_printf_common+0x48>
 8005a2a:	f104 0a19 	add.w	sl, r4, #25
 8005a2e:	68e3      	ldr	r3, [r4, #12]
 8005a30:	6832      	ldr	r2, [r6, #0]
 8005a32:	1a9b      	subs	r3, r3, r2
 8005a34:	42ab      	cmp	r3, r5
 8005a36:	dc26      	bgt.n	8005a86 <_printf_common+0x96>
 8005a38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a3c:	1e13      	subs	r3, r2, #0
 8005a3e:	6822      	ldr	r2, [r4, #0]
 8005a40:	bf18      	it	ne
 8005a42:	2301      	movne	r3, #1
 8005a44:	0692      	lsls	r2, r2, #26
 8005a46:	d42b      	bmi.n	8005aa0 <_printf_common+0xb0>
 8005a48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a4c:	4649      	mov	r1, r9
 8005a4e:	4638      	mov	r0, r7
 8005a50:	47c0      	blx	r8
 8005a52:	3001      	adds	r0, #1
 8005a54:	d01e      	beq.n	8005a94 <_printf_common+0xa4>
 8005a56:	6823      	ldr	r3, [r4, #0]
 8005a58:	68e5      	ldr	r5, [r4, #12]
 8005a5a:	6832      	ldr	r2, [r6, #0]
 8005a5c:	f003 0306 	and.w	r3, r3, #6
 8005a60:	2b04      	cmp	r3, #4
 8005a62:	bf08      	it	eq
 8005a64:	1aad      	subeq	r5, r5, r2
 8005a66:	68a3      	ldr	r3, [r4, #8]
 8005a68:	6922      	ldr	r2, [r4, #16]
 8005a6a:	bf0c      	ite	eq
 8005a6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a70:	2500      	movne	r5, #0
 8005a72:	4293      	cmp	r3, r2
 8005a74:	bfc4      	itt	gt
 8005a76:	1a9b      	subgt	r3, r3, r2
 8005a78:	18ed      	addgt	r5, r5, r3
 8005a7a:	2600      	movs	r6, #0
 8005a7c:	341a      	adds	r4, #26
 8005a7e:	42b5      	cmp	r5, r6
 8005a80:	d11a      	bne.n	8005ab8 <_printf_common+0xc8>
 8005a82:	2000      	movs	r0, #0
 8005a84:	e008      	b.n	8005a98 <_printf_common+0xa8>
 8005a86:	2301      	movs	r3, #1
 8005a88:	4652      	mov	r2, sl
 8005a8a:	4649      	mov	r1, r9
 8005a8c:	4638      	mov	r0, r7
 8005a8e:	47c0      	blx	r8
 8005a90:	3001      	adds	r0, #1
 8005a92:	d103      	bne.n	8005a9c <_printf_common+0xac>
 8005a94:	f04f 30ff 	mov.w	r0, #4294967295
 8005a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a9c:	3501      	adds	r5, #1
 8005a9e:	e7c6      	b.n	8005a2e <_printf_common+0x3e>
 8005aa0:	18e1      	adds	r1, r4, r3
 8005aa2:	1c5a      	adds	r2, r3, #1
 8005aa4:	2030      	movs	r0, #48	; 0x30
 8005aa6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005aaa:	4422      	add	r2, r4
 8005aac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ab0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ab4:	3302      	adds	r3, #2
 8005ab6:	e7c7      	b.n	8005a48 <_printf_common+0x58>
 8005ab8:	2301      	movs	r3, #1
 8005aba:	4622      	mov	r2, r4
 8005abc:	4649      	mov	r1, r9
 8005abe:	4638      	mov	r0, r7
 8005ac0:	47c0      	blx	r8
 8005ac2:	3001      	adds	r0, #1
 8005ac4:	d0e6      	beq.n	8005a94 <_printf_common+0xa4>
 8005ac6:	3601      	adds	r6, #1
 8005ac8:	e7d9      	b.n	8005a7e <_printf_common+0x8e>
	...

08005acc <_printf_i>:
 8005acc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ad0:	7e0f      	ldrb	r7, [r1, #24]
 8005ad2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ad4:	2f78      	cmp	r7, #120	; 0x78
 8005ad6:	4691      	mov	r9, r2
 8005ad8:	4680      	mov	r8, r0
 8005ada:	460c      	mov	r4, r1
 8005adc:	469a      	mov	sl, r3
 8005ade:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ae2:	d807      	bhi.n	8005af4 <_printf_i+0x28>
 8005ae4:	2f62      	cmp	r7, #98	; 0x62
 8005ae6:	d80a      	bhi.n	8005afe <_printf_i+0x32>
 8005ae8:	2f00      	cmp	r7, #0
 8005aea:	f000 80d8 	beq.w	8005c9e <_printf_i+0x1d2>
 8005aee:	2f58      	cmp	r7, #88	; 0x58
 8005af0:	f000 80a3 	beq.w	8005c3a <_printf_i+0x16e>
 8005af4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005af8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005afc:	e03a      	b.n	8005b74 <_printf_i+0xa8>
 8005afe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b02:	2b15      	cmp	r3, #21
 8005b04:	d8f6      	bhi.n	8005af4 <_printf_i+0x28>
 8005b06:	a101      	add	r1, pc, #4	; (adr r1, 8005b0c <_printf_i+0x40>)
 8005b08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b0c:	08005b65 	.word	0x08005b65
 8005b10:	08005b79 	.word	0x08005b79
 8005b14:	08005af5 	.word	0x08005af5
 8005b18:	08005af5 	.word	0x08005af5
 8005b1c:	08005af5 	.word	0x08005af5
 8005b20:	08005af5 	.word	0x08005af5
 8005b24:	08005b79 	.word	0x08005b79
 8005b28:	08005af5 	.word	0x08005af5
 8005b2c:	08005af5 	.word	0x08005af5
 8005b30:	08005af5 	.word	0x08005af5
 8005b34:	08005af5 	.word	0x08005af5
 8005b38:	08005c85 	.word	0x08005c85
 8005b3c:	08005ba9 	.word	0x08005ba9
 8005b40:	08005c67 	.word	0x08005c67
 8005b44:	08005af5 	.word	0x08005af5
 8005b48:	08005af5 	.word	0x08005af5
 8005b4c:	08005ca7 	.word	0x08005ca7
 8005b50:	08005af5 	.word	0x08005af5
 8005b54:	08005ba9 	.word	0x08005ba9
 8005b58:	08005af5 	.word	0x08005af5
 8005b5c:	08005af5 	.word	0x08005af5
 8005b60:	08005c6f 	.word	0x08005c6f
 8005b64:	682b      	ldr	r3, [r5, #0]
 8005b66:	1d1a      	adds	r2, r3, #4
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	602a      	str	r2, [r5, #0]
 8005b6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b74:	2301      	movs	r3, #1
 8005b76:	e0a3      	b.n	8005cc0 <_printf_i+0x1f4>
 8005b78:	6820      	ldr	r0, [r4, #0]
 8005b7a:	6829      	ldr	r1, [r5, #0]
 8005b7c:	0606      	lsls	r6, r0, #24
 8005b7e:	f101 0304 	add.w	r3, r1, #4
 8005b82:	d50a      	bpl.n	8005b9a <_printf_i+0xce>
 8005b84:	680e      	ldr	r6, [r1, #0]
 8005b86:	602b      	str	r3, [r5, #0]
 8005b88:	2e00      	cmp	r6, #0
 8005b8a:	da03      	bge.n	8005b94 <_printf_i+0xc8>
 8005b8c:	232d      	movs	r3, #45	; 0x2d
 8005b8e:	4276      	negs	r6, r6
 8005b90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b94:	485e      	ldr	r0, [pc, #376]	; (8005d10 <_printf_i+0x244>)
 8005b96:	230a      	movs	r3, #10
 8005b98:	e019      	b.n	8005bce <_printf_i+0x102>
 8005b9a:	680e      	ldr	r6, [r1, #0]
 8005b9c:	602b      	str	r3, [r5, #0]
 8005b9e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ba2:	bf18      	it	ne
 8005ba4:	b236      	sxthne	r6, r6
 8005ba6:	e7ef      	b.n	8005b88 <_printf_i+0xbc>
 8005ba8:	682b      	ldr	r3, [r5, #0]
 8005baa:	6820      	ldr	r0, [r4, #0]
 8005bac:	1d19      	adds	r1, r3, #4
 8005bae:	6029      	str	r1, [r5, #0]
 8005bb0:	0601      	lsls	r1, r0, #24
 8005bb2:	d501      	bpl.n	8005bb8 <_printf_i+0xec>
 8005bb4:	681e      	ldr	r6, [r3, #0]
 8005bb6:	e002      	b.n	8005bbe <_printf_i+0xf2>
 8005bb8:	0646      	lsls	r6, r0, #25
 8005bba:	d5fb      	bpl.n	8005bb4 <_printf_i+0xe8>
 8005bbc:	881e      	ldrh	r6, [r3, #0]
 8005bbe:	4854      	ldr	r0, [pc, #336]	; (8005d10 <_printf_i+0x244>)
 8005bc0:	2f6f      	cmp	r7, #111	; 0x6f
 8005bc2:	bf0c      	ite	eq
 8005bc4:	2308      	moveq	r3, #8
 8005bc6:	230a      	movne	r3, #10
 8005bc8:	2100      	movs	r1, #0
 8005bca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bce:	6865      	ldr	r5, [r4, #4]
 8005bd0:	60a5      	str	r5, [r4, #8]
 8005bd2:	2d00      	cmp	r5, #0
 8005bd4:	bfa2      	ittt	ge
 8005bd6:	6821      	ldrge	r1, [r4, #0]
 8005bd8:	f021 0104 	bicge.w	r1, r1, #4
 8005bdc:	6021      	strge	r1, [r4, #0]
 8005bde:	b90e      	cbnz	r6, 8005be4 <_printf_i+0x118>
 8005be0:	2d00      	cmp	r5, #0
 8005be2:	d04d      	beq.n	8005c80 <_printf_i+0x1b4>
 8005be4:	4615      	mov	r5, r2
 8005be6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005bea:	fb03 6711 	mls	r7, r3, r1, r6
 8005bee:	5dc7      	ldrb	r7, [r0, r7]
 8005bf0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005bf4:	4637      	mov	r7, r6
 8005bf6:	42bb      	cmp	r3, r7
 8005bf8:	460e      	mov	r6, r1
 8005bfa:	d9f4      	bls.n	8005be6 <_printf_i+0x11a>
 8005bfc:	2b08      	cmp	r3, #8
 8005bfe:	d10b      	bne.n	8005c18 <_printf_i+0x14c>
 8005c00:	6823      	ldr	r3, [r4, #0]
 8005c02:	07de      	lsls	r6, r3, #31
 8005c04:	d508      	bpl.n	8005c18 <_printf_i+0x14c>
 8005c06:	6923      	ldr	r3, [r4, #16]
 8005c08:	6861      	ldr	r1, [r4, #4]
 8005c0a:	4299      	cmp	r1, r3
 8005c0c:	bfde      	ittt	le
 8005c0e:	2330      	movle	r3, #48	; 0x30
 8005c10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c14:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c18:	1b52      	subs	r2, r2, r5
 8005c1a:	6122      	str	r2, [r4, #16]
 8005c1c:	f8cd a000 	str.w	sl, [sp]
 8005c20:	464b      	mov	r3, r9
 8005c22:	aa03      	add	r2, sp, #12
 8005c24:	4621      	mov	r1, r4
 8005c26:	4640      	mov	r0, r8
 8005c28:	f7ff fee2 	bl	80059f0 <_printf_common>
 8005c2c:	3001      	adds	r0, #1
 8005c2e:	d14c      	bne.n	8005cca <_printf_i+0x1fe>
 8005c30:	f04f 30ff 	mov.w	r0, #4294967295
 8005c34:	b004      	add	sp, #16
 8005c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c3a:	4835      	ldr	r0, [pc, #212]	; (8005d10 <_printf_i+0x244>)
 8005c3c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005c40:	6829      	ldr	r1, [r5, #0]
 8005c42:	6823      	ldr	r3, [r4, #0]
 8005c44:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c48:	6029      	str	r1, [r5, #0]
 8005c4a:	061d      	lsls	r5, r3, #24
 8005c4c:	d514      	bpl.n	8005c78 <_printf_i+0x1ac>
 8005c4e:	07df      	lsls	r7, r3, #31
 8005c50:	bf44      	itt	mi
 8005c52:	f043 0320 	orrmi.w	r3, r3, #32
 8005c56:	6023      	strmi	r3, [r4, #0]
 8005c58:	b91e      	cbnz	r6, 8005c62 <_printf_i+0x196>
 8005c5a:	6823      	ldr	r3, [r4, #0]
 8005c5c:	f023 0320 	bic.w	r3, r3, #32
 8005c60:	6023      	str	r3, [r4, #0]
 8005c62:	2310      	movs	r3, #16
 8005c64:	e7b0      	b.n	8005bc8 <_printf_i+0xfc>
 8005c66:	6823      	ldr	r3, [r4, #0]
 8005c68:	f043 0320 	orr.w	r3, r3, #32
 8005c6c:	6023      	str	r3, [r4, #0]
 8005c6e:	2378      	movs	r3, #120	; 0x78
 8005c70:	4828      	ldr	r0, [pc, #160]	; (8005d14 <_printf_i+0x248>)
 8005c72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c76:	e7e3      	b.n	8005c40 <_printf_i+0x174>
 8005c78:	0659      	lsls	r1, r3, #25
 8005c7a:	bf48      	it	mi
 8005c7c:	b2b6      	uxthmi	r6, r6
 8005c7e:	e7e6      	b.n	8005c4e <_printf_i+0x182>
 8005c80:	4615      	mov	r5, r2
 8005c82:	e7bb      	b.n	8005bfc <_printf_i+0x130>
 8005c84:	682b      	ldr	r3, [r5, #0]
 8005c86:	6826      	ldr	r6, [r4, #0]
 8005c88:	6961      	ldr	r1, [r4, #20]
 8005c8a:	1d18      	adds	r0, r3, #4
 8005c8c:	6028      	str	r0, [r5, #0]
 8005c8e:	0635      	lsls	r5, r6, #24
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	d501      	bpl.n	8005c98 <_printf_i+0x1cc>
 8005c94:	6019      	str	r1, [r3, #0]
 8005c96:	e002      	b.n	8005c9e <_printf_i+0x1d2>
 8005c98:	0670      	lsls	r0, r6, #25
 8005c9a:	d5fb      	bpl.n	8005c94 <_printf_i+0x1c8>
 8005c9c:	8019      	strh	r1, [r3, #0]
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	6123      	str	r3, [r4, #16]
 8005ca2:	4615      	mov	r5, r2
 8005ca4:	e7ba      	b.n	8005c1c <_printf_i+0x150>
 8005ca6:	682b      	ldr	r3, [r5, #0]
 8005ca8:	1d1a      	adds	r2, r3, #4
 8005caa:	602a      	str	r2, [r5, #0]
 8005cac:	681d      	ldr	r5, [r3, #0]
 8005cae:	6862      	ldr	r2, [r4, #4]
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	4628      	mov	r0, r5
 8005cb4:	f7fa fa6c 	bl	8000190 <memchr>
 8005cb8:	b108      	cbz	r0, 8005cbe <_printf_i+0x1f2>
 8005cba:	1b40      	subs	r0, r0, r5
 8005cbc:	6060      	str	r0, [r4, #4]
 8005cbe:	6863      	ldr	r3, [r4, #4]
 8005cc0:	6123      	str	r3, [r4, #16]
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cc8:	e7a8      	b.n	8005c1c <_printf_i+0x150>
 8005cca:	6923      	ldr	r3, [r4, #16]
 8005ccc:	462a      	mov	r2, r5
 8005cce:	4649      	mov	r1, r9
 8005cd0:	4640      	mov	r0, r8
 8005cd2:	47d0      	blx	sl
 8005cd4:	3001      	adds	r0, #1
 8005cd6:	d0ab      	beq.n	8005c30 <_printf_i+0x164>
 8005cd8:	6823      	ldr	r3, [r4, #0]
 8005cda:	079b      	lsls	r3, r3, #30
 8005cdc:	d413      	bmi.n	8005d06 <_printf_i+0x23a>
 8005cde:	68e0      	ldr	r0, [r4, #12]
 8005ce0:	9b03      	ldr	r3, [sp, #12]
 8005ce2:	4298      	cmp	r0, r3
 8005ce4:	bfb8      	it	lt
 8005ce6:	4618      	movlt	r0, r3
 8005ce8:	e7a4      	b.n	8005c34 <_printf_i+0x168>
 8005cea:	2301      	movs	r3, #1
 8005cec:	4632      	mov	r2, r6
 8005cee:	4649      	mov	r1, r9
 8005cf0:	4640      	mov	r0, r8
 8005cf2:	47d0      	blx	sl
 8005cf4:	3001      	adds	r0, #1
 8005cf6:	d09b      	beq.n	8005c30 <_printf_i+0x164>
 8005cf8:	3501      	adds	r5, #1
 8005cfa:	68e3      	ldr	r3, [r4, #12]
 8005cfc:	9903      	ldr	r1, [sp, #12]
 8005cfe:	1a5b      	subs	r3, r3, r1
 8005d00:	42ab      	cmp	r3, r5
 8005d02:	dcf2      	bgt.n	8005cea <_printf_i+0x21e>
 8005d04:	e7eb      	b.n	8005cde <_printf_i+0x212>
 8005d06:	2500      	movs	r5, #0
 8005d08:	f104 0619 	add.w	r6, r4, #25
 8005d0c:	e7f5      	b.n	8005cfa <_printf_i+0x22e>
 8005d0e:	bf00      	nop
 8005d10:	0800818a 	.word	0x0800818a
 8005d14:	0800819b 	.word	0x0800819b

08005d18 <iprintf>:
 8005d18:	b40f      	push	{r0, r1, r2, r3}
 8005d1a:	4b0a      	ldr	r3, [pc, #40]	; (8005d44 <iprintf+0x2c>)
 8005d1c:	b513      	push	{r0, r1, r4, lr}
 8005d1e:	681c      	ldr	r4, [r3, #0]
 8005d20:	b124      	cbz	r4, 8005d2c <iprintf+0x14>
 8005d22:	69a3      	ldr	r3, [r4, #24]
 8005d24:	b913      	cbnz	r3, 8005d2c <iprintf+0x14>
 8005d26:	4620      	mov	r0, r4
 8005d28:	f001 f8ee 	bl	8006f08 <__sinit>
 8005d2c:	ab05      	add	r3, sp, #20
 8005d2e:	9a04      	ldr	r2, [sp, #16]
 8005d30:	68a1      	ldr	r1, [r4, #8]
 8005d32:	9301      	str	r3, [sp, #4]
 8005d34:	4620      	mov	r0, r4
 8005d36:	f001 fe9d 	bl	8007a74 <_vfiprintf_r>
 8005d3a:	b002      	add	sp, #8
 8005d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d40:	b004      	add	sp, #16
 8005d42:	4770      	bx	lr
 8005d44:	20000010 	.word	0x20000010

08005d48 <putchar>:
 8005d48:	4b09      	ldr	r3, [pc, #36]	; (8005d70 <putchar+0x28>)
 8005d4a:	b513      	push	{r0, r1, r4, lr}
 8005d4c:	681c      	ldr	r4, [r3, #0]
 8005d4e:	4601      	mov	r1, r0
 8005d50:	b134      	cbz	r4, 8005d60 <putchar+0x18>
 8005d52:	69a3      	ldr	r3, [r4, #24]
 8005d54:	b923      	cbnz	r3, 8005d60 <putchar+0x18>
 8005d56:	9001      	str	r0, [sp, #4]
 8005d58:	4620      	mov	r0, r4
 8005d5a:	f001 f8d5 	bl	8006f08 <__sinit>
 8005d5e:	9901      	ldr	r1, [sp, #4]
 8005d60:	68a2      	ldr	r2, [r4, #8]
 8005d62:	4620      	mov	r0, r4
 8005d64:	b002      	add	sp, #8
 8005d66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d6a:	f001 bfb3 	b.w	8007cd4 <_putc_r>
 8005d6e:	bf00      	nop
 8005d70:	20000010 	.word	0x20000010

08005d74 <_puts_r>:
 8005d74:	b570      	push	{r4, r5, r6, lr}
 8005d76:	460e      	mov	r6, r1
 8005d78:	4605      	mov	r5, r0
 8005d7a:	b118      	cbz	r0, 8005d84 <_puts_r+0x10>
 8005d7c:	6983      	ldr	r3, [r0, #24]
 8005d7e:	b90b      	cbnz	r3, 8005d84 <_puts_r+0x10>
 8005d80:	f001 f8c2 	bl	8006f08 <__sinit>
 8005d84:	69ab      	ldr	r3, [r5, #24]
 8005d86:	68ac      	ldr	r4, [r5, #8]
 8005d88:	b913      	cbnz	r3, 8005d90 <_puts_r+0x1c>
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	f001 f8bc 	bl	8006f08 <__sinit>
 8005d90:	4b2c      	ldr	r3, [pc, #176]	; (8005e44 <_puts_r+0xd0>)
 8005d92:	429c      	cmp	r4, r3
 8005d94:	d120      	bne.n	8005dd8 <_puts_r+0x64>
 8005d96:	686c      	ldr	r4, [r5, #4]
 8005d98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d9a:	07db      	lsls	r3, r3, #31
 8005d9c:	d405      	bmi.n	8005daa <_puts_r+0x36>
 8005d9e:	89a3      	ldrh	r3, [r4, #12]
 8005da0:	0598      	lsls	r0, r3, #22
 8005da2:	d402      	bmi.n	8005daa <_puts_r+0x36>
 8005da4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005da6:	f001 f952 	bl	800704e <__retarget_lock_acquire_recursive>
 8005daa:	89a3      	ldrh	r3, [r4, #12]
 8005dac:	0719      	lsls	r1, r3, #28
 8005dae:	d51d      	bpl.n	8005dec <_puts_r+0x78>
 8005db0:	6923      	ldr	r3, [r4, #16]
 8005db2:	b1db      	cbz	r3, 8005dec <_puts_r+0x78>
 8005db4:	3e01      	subs	r6, #1
 8005db6:	68a3      	ldr	r3, [r4, #8]
 8005db8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	60a3      	str	r3, [r4, #8]
 8005dc0:	bb39      	cbnz	r1, 8005e12 <_puts_r+0x9e>
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	da38      	bge.n	8005e38 <_puts_r+0xc4>
 8005dc6:	4622      	mov	r2, r4
 8005dc8:	210a      	movs	r1, #10
 8005dca:	4628      	mov	r0, r5
 8005dcc:	f000 f848 	bl	8005e60 <__swbuf_r>
 8005dd0:	3001      	adds	r0, #1
 8005dd2:	d011      	beq.n	8005df8 <_puts_r+0x84>
 8005dd4:	250a      	movs	r5, #10
 8005dd6:	e011      	b.n	8005dfc <_puts_r+0x88>
 8005dd8:	4b1b      	ldr	r3, [pc, #108]	; (8005e48 <_puts_r+0xd4>)
 8005dda:	429c      	cmp	r4, r3
 8005ddc:	d101      	bne.n	8005de2 <_puts_r+0x6e>
 8005dde:	68ac      	ldr	r4, [r5, #8]
 8005de0:	e7da      	b.n	8005d98 <_puts_r+0x24>
 8005de2:	4b1a      	ldr	r3, [pc, #104]	; (8005e4c <_puts_r+0xd8>)
 8005de4:	429c      	cmp	r4, r3
 8005de6:	bf08      	it	eq
 8005de8:	68ec      	ldreq	r4, [r5, #12]
 8005dea:	e7d5      	b.n	8005d98 <_puts_r+0x24>
 8005dec:	4621      	mov	r1, r4
 8005dee:	4628      	mov	r0, r5
 8005df0:	f000 f888 	bl	8005f04 <__swsetup_r>
 8005df4:	2800      	cmp	r0, #0
 8005df6:	d0dd      	beq.n	8005db4 <_puts_r+0x40>
 8005df8:	f04f 35ff 	mov.w	r5, #4294967295
 8005dfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005dfe:	07da      	lsls	r2, r3, #31
 8005e00:	d405      	bmi.n	8005e0e <_puts_r+0x9a>
 8005e02:	89a3      	ldrh	r3, [r4, #12]
 8005e04:	059b      	lsls	r3, r3, #22
 8005e06:	d402      	bmi.n	8005e0e <_puts_r+0x9a>
 8005e08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e0a:	f001 f921 	bl	8007050 <__retarget_lock_release_recursive>
 8005e0e:	4628      	mov	r0, r5
 8005e10:	bd70      	pop	{r4, r5, r6, pc}
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	da04      	bge.n	8005e20 <_puts_r+0xac>
 8005e16:	69a2      	ldr	r2, [r4, #24]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	dc06      	bgt.n	8005e2a <_puts_r+0xb6>
 8005e1c:	290a      	cmp	r1, #10
 8005e1e:	d004      	beq.n	8005e2a <_puts_r+0xb6>
 8005e20:	6823      	ldr	r3, [r4, #0]
 8005e22:	1c5a      	adds	r2, r3, #1
 8005e24:	6022      	str	r2, [r4, #0]
 8005e26:	7019      	strb	r1, [r3, #0]
 8005e28:	e7c5      	b.n	8005db6 <_puts_r+0x42>
 8005e2a:	4622      	mov	r2, r4
 8005e2c:	4628      	mov	r0, r5
 8005e2e:	f000 f817 	bl	8005e60 <__swbuf_r>
 8005e32:	3001      	adds	r0, #1
 8005e34:	d1bf      	bne.n	8005db6 <_puts_r+0x42>
 8005e36:	e7df      	b.n	8005df8 <_puts_r+0x84>
 8005e38:	6823      	ldr	r3, [r4, #0]
 8005e3a:	250a      	movs	r5, #10
 8005e3c:	1c5a      	adds	r2, r3, #1
 8005e3e:	6022      	str	r2, [r4, #0]
 8005e40:	701d      	strb	r5, [r3, #0]
 8005e42:	e7db      	b.n	8005dfc <_puts_r+0x88>
 8005e44:	0800825c 	.word	0x0800825c
 8005e48:	0800827c 	.word	0x0800827c
 8005e4c:	0800823c 	.word	0x0800823c

08005e50 <puts>:
 8005e50:	4b02      	ldr	r3, [pc, #8]	; (8005e5c <puts+0xc>)
 8005e52:	4601      	mov	r1, r0
 8005e54:	6818      	ldr	r0, [r3, #0]
 8005e56:	f7ff bf8d 	b.w	8005d74 <_puts_r>
 8005e5a:	bf00      	nop
 8005e5c:	20000010 	.word	0x20000010

08005e60 <__swbuf_r>:
 8005e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e62:	460e      	mov	r6, r1
 8005e64:	4614      	mov	r4, r2
 8005e66:	4605      	mov	r5, r0
 8005e68:	b118      	cbz	r0, 8005e72 <__swbuf_r+0x12>
 8005e6a:	6983      	ldr	r3, [r0, #24]
 8005e6c:	b90b      	cbnz	r3, 8005e72 <__swbuf_r+0x12>
 8005e6e:	f001 f84b 	bl	8006f08 <__sinit>
 8005e72:	4b21      	ldr	r3, [pc, #132]	; (8005ef8 <__swbuf_r+0x98>)
 8005e74:	429c      	cmp	r4, r3
 8005e76:	d12b      	bne.n	8005ed0 <__swbuf_r+0x70>
 8005e78:	686c      	ldr	r4, [r5, #4]
 8005e7a:	69a3      	ldr	r3, [r4, #24]
 8005e7c:	60a3      	str	r3, [r4, #8]
 8005e7e:	89a3      	ldrh	r3, [r4, #12]
 8005e80:	071a      	lsls	r2, r3, #28
 8005e82:	d52f      	bpl.n	8005ee4 <__swbuf_r+0x84>
 8005e84:	6923      	ldr	r3, [r4, #16]
 8005e86:	b36b      	cbz	r3, 8005ee4 <__swbuf_r+0x84>
 8005e88:	6923      	ldr	r3, [r4, #16]
 8005e8a:	6820      	ldr	r0, [r4, #0]
 8005e8c:	1ac0      	subs	r0, r0, r3
 8005e8e:	6963      	ldr	r3, [r4, #20]
 8005e90:	b2f6      	uxtb	r6, r6
 8005e92:	4283      	cmp	r3, r0
 8005e94:	4637      	mov	r7, r6
 8005e96:	dc04      	bgt.n	8005ea2 <__swbuf_r+0x42>
 8005e98:	4621      	mov	r1, r4
 8005e9a:	4628      	mov	r0, r5
 8005e9c:	f000 ffa0 	bl	8006de0 <_fflush_r>
 8005ea0:	bb30      	cbnz	r0, 8005ef0 <__swbuf_r+0x90>
 8005ea2:	68a3      	ldr	r3, [r4, #8]
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	60a3      	str	r3, [r4, #8]
 8005ea8:	6823      	ldr	r3, [r4, #0]
 8005eaa:	1c5a      	adds	r2, r3, #1
 8005eac:	6022      	str	r2, [r4, #0]
 8005eae:	701e      	strb	r6, [r3, #0]
 8005eb0:	6963      	ldr	r3, [r4, #20]
 8005eb2:	3001      	adds	r0, #1
 8005eb4:	4283      	cmp	r3, r0
 8005eb6:	d004      	beq.n	8005ec2 <__swbuf_r+0x62>
 8005eb8:	89a3      	ldrh	r3, [r4, #12]
 8005eba:	07db      	lsls	r3, r3, #31
 8005ebc:	d506      	bpl.n	8005ecc <__swbuf_r+0x6c>
 8005ebe:	2e0a      	cmp	r6, #10
 8005ec0:	d104      	bne.n	8005ecc <__swbuf_r+0x6c>
 8005ec2:	4621      	mov	r1, r4
 8005ec4:	4628      	mov	r0, r5
 8005ec6:	f000 ff8b 	bl	8006de0 <_fflush_r>
 8005eca:	b988      	cbnz	r0, 8005ef0 <__swbuf_r+0x90>
 8005ecc:	4638      	mov	r0, r7
 8005ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ed0:	4b0a      	ldr	r3, [pc, #40]	; (8005efc <__swbuf_r+0x9c>)
 8005ed2:	429c      	cmp	r4, r3
 8005ed4:	d101      	bne.n	8005eda <__swbuf_r+0x7a>
 8005ed6:	68ac      	ldr	r4, [r5, #8]
 8005ed8:	e7cf      	b.n	8005e7a <__swbuf_r+0x1a>
 8005eda:	4b09      	ldr	r3, [pc, #36]	; (8005f00 <__swbuf_r+0xa0>)
 8005edc:	429c      	cmp	r4, r3
 8005ede:	bf08      	it	eq
 8005ee0:	68ec      	ldreq	r4, [r5, #12]
 8005ee2:	e7ca      	b.n	8005e7a <__swbuf_r+0x1a>
 8005ee4:	4621      	mov	r1, r4
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	f000 f80c 	bl	8005f04 <__swsetup_r>
 8005eec:	2800      	cmp	r0, #0
 8005eee:	d0cb      	beq.n	8005e88 <__swbuf_r+0x28>
 8005ef0:	f04f 37ff 	mov.w	r7, #4294967295
 8005ef4:	e7ea      	b.n	8005ecc <__swbuf_r+0x6c>
 8005ef6:	bf00      	nop
 8005ef8:	0800825c 	.word	0x0800825c
 8005efc:	0800827c 	.word	0x0800827c
 8005f00:	0800823c 	.word	0x0800823c

08005f04 <__swsetup_r>:
 8005f04:	4b32      	ldr	r3, [pc, #200]	; (8005fd0 <__swsetup_r+0xcc>)
 8005f06:	b570      	push	{r4, r5, r6, lr}
 8005f08:	681d      	ldr	r5, [r3, #0]
 8005f0a:	4606      	mov	r6, r0
 8005f0c:	460c      	mov	r4, r1
 8005f0e:	b125      	cbz	r5, 8005f1a <__swsetup_r+0x16>
 8005f10:	69ab      	ldr	r3, [r5, #24]
 8005f12:	b913      	cbnz	r3, 8005f1a <__swsetup_r+0x16>
 8005f14:	4628      	mov	r0, r5
 8005f16:	f000 fff7 	bl	8006f08 <__sinit>
 8005f1a:	4b2e      	ldr	r3, [pc, #184]	; (8005fd4 <__swsetup_r+0xd0>)
 8005f1c:	429c      	cmp	r4, r3
 8005f1e:	d10f      	bne.n	8005f40 <__swsetup_r+0x3c>
 8005f20:	686c      	ldr	r4, [r5, #4]
 8005f22:	89a3      	ldrh	r3, [r4, #12]
 8005f24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f28:	0719      	lsls	r1, r3, #28
 8005f2a:	d42c      	bmi.n	8005f86 <__swsetup_r+0x82>
 8005f2c:	06dd      	lsls	r5, r3, #27
 8005f2e:	d411      	bmi.n	8005f54 <__swsetup_r+0x50>
 8005f30:	2309      	movs	r3, #9
 8005f32:	6033      	str	r3, [r6, #0]
 8005f34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f38:	81a3      	strh	r3, [r4, #12]
 8005f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f3e:	e03e      	b.n	8005fbe <__swsetup_r+0xba>
 8005f40:	4b25      	ldr	r3, [pc, #148]	; (8005fd8 <__swsetup_r+0xd4>)
 8005f42:	429c      	cmp	r4, r3
 8005f44:	d101      	bne.n	8005f4a <__swsetup_r+0x46>
 8005f46:	68ac      	ldr	r4, [r5, #8]
 8005f48:	e7eb      	b.n	8005f22 <__swsetup_r+0x1e>
 8005f4a:	4b24      	ldr	r3, [pc, #144]	; (8005fdc <__swsetup_r+0xd8>)
 8005f4c:	429c      	cmp	r4, r3
 8005f4e:	bf08      	it	eq
 8005f50:	68ec      	ldreq	r4, [r5, #12]
 8005f52:	e7e6      	b.n	8005f22 <__swsetup_r+0x1e>
 8005f54:	0758      	lsls	r0, r3, #29
 8005f56:	d512      	bpl.n	8005f7e <__swsetup_r+0x7a>
 8005f58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f5a:	b141      	cbz	r1, 8005f6e <__swsetup_r+0x6a>
 8005f5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f60:	4299      	cmp	r1, r3
 8005f62:	d002      	beq.n	8005f6a <__swsetup_r+0x66>
 8005f64:	4630      	mov	r0, r6
 8005f66:	f001 fc7b 	bl	8007860 <_free_r>
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	6363      	str	r3, [r4, #52]	; 0x34
 8005f6e:	89a3      	ldrh	r3, [r4, #12]
 8005f70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005f74:	81a3      	strh	r3, [r4, #12]
 8005f76:	2300      	movs	r3, #0
 8005f78:	6063      	str	r3, [r4, #4]
 8005f7a:	6923      	ldr	r3, [r4, #16]
 8005f7c:	6023      	str	r3, [r4, #0]
 8005f7e:	89a3      	ldrh	r3, [r4, #12]
 8005f80:	f043 0308 	orr.w	r3, r3, #8
 8005f84:	81a3      	strh	r3, [r4, #12]
 8005f86:	6923      	ldr	r3, [r4, #16]
 8005f88:	b94b      	cbnz	r3, 8005f9e <__swsetup_r+0x9a>
 8005f8a:	89a3      	ldrh	r3, [r4, #12]
 8005f8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f94:	d003      	beq.n	8005f9e <__swsetup_r+0x9a>
 8005f96:	4621      	mov	r1, r4
 8005f98:	4630      	mov	r0, r6
 8005f9a:	f001 f87f 	bl	800709c <__smakebuf_r>
 8005f9e:	89a0      	ldrh	r0, [r4, #12]
 8005fa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005fa4:	f010 0301 	ands.w	r3, r0, #1
 8005fa8:	d00a      	beq.n	8005fc0 <__swsetup_r+0xbc>
 8005faa:	2300      	movs	r3, #0
 8005fac:	60a3      	str	r3, [r4, #8]
 8005fae:	6963      	ldr	r3, [r4, #20]
 8005fb0:	425b      	negs	r3, r3
 8005fb2:	61a3      	str	r3, [r4, #24]
 8005fb4:	6923      	ldr	r3, [r4, #16]
 8005fb6:	b943      	cbnz	r3, 8005fca <__swsetup_r+0xc6>
 8005fb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005fbc:	d1ba      	bne.n	8005f34 <__swsetup_r+0x30>
 8005fbe:	bd70      	pop	{r4, r5, r6, pc}
 8005fc0:	0781      	lsls	r1, r0, #30
 8005fc2:	bf58      	it	pl
 8005fc4:	6963      	ldrpl	r3, [r4, #20]
 8005fc6:	60a3      	str	r3, [r4, #8]
 8005fc8:	e7f4      	b.n	8005fb4 <__swsetup_r+0xb0>
 8005fca:	2000      	movs	r0, #0
 8005fcc:	e7f7      	b.n	8005fbe <__swsetup_r+0xba>
 8005fce:	bf00      	nop
 8005fd0:	20000010 	.word	0x20000010
 8005fd4:	0800825c 	.word	0x0800825c
 8005fd8:	0800827c 	.word	0x0800827c
 8005fdc:	0800823c 	.word	0x0800823c

08005fe0 <quorem>:
 8005fe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe4:	6903      	ldr	r3, [r0, #16]
 8005fe6:	690c      	ldr	r4, [r1, #16]
 8005fe8:	42a3      	cmp	r3, r4
 8005fea:	4607      	mov	r7, r0
 8005fec:	f2c0 8081 	blt.w	80060f2 <quorem+0x112>
 8005ff0:	3c01      	subs	r4, #1
 8005ff2:	f101 0814 	add.w	r8, r1, #20
 8005ff6:	f100 0514 	add.w	r5, r0, #20
 8005ffa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ffe:	9301      	str	r3, [sp, #4]
 8006000:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006004:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006008:	3301      	adds	r3, #1
 800600a:	429a      	cmp	r2, r3
 800600c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006010:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006014:	fbb2 f6f3 	udiv	r6, r2, r3
 8006018:	d331      	bcc.n	800607e <quorem+0x9e>
 800601a:	f04f 0e00 	mov.w	lr, #0
 800601e:	4640      	mov	r0, r8
 8006020:	46ac      	mov	ip, r5
 8006022:	46f2      	mov	sl, lr
 8006024:	f850 2b04 	ldr.w	r2, [r0], #4
 8006028:	b293      	uxth	r3, r2
 800602a:	fb06 e303 	mla	r3, r6, r3, lr
 800602e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006032:	b29b      	uxth	r3, r3
 8006034:	ebaa 0303 	sub.w	r3, sl, r3
 8006038:	f8dc a000 	ldr.w	sl, [ip]
 800603c:	0c12      	lsrs	r2, r2, #16
 800603e:	fa13 f38a 	uxtah	r3, r3, sl
 8006042:	fb06 e202 	mla	r2, r6, r2, lr
 8006046:	9300      	str	r3, [sp, #0]
 8006048:	9b00      	ldr	r3, [sp, #0]
 800604a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800604e:	b292      	uxth	r2, r2
 8006050:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006054:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006058:	f8bd 3000 	ldrh.w	r3, [sp]
 800605c:	4581      	cmp	r9, r0
 800605e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006062:	f84c 3b04 	str.w	r3, [ip], #4
 8006066:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800606a:	d2db      	bcs.n	8006024 <quorem+0x44>
 800606c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006070:	b92b      	cbnz	r3, 800607e <quorem+0x9e>
 8006072:	9b01      	ldr	r3, [sp, #4]
 8006074:	3b04      	subs	r3, #4
 8006076:	429d      	cmp	r5, r3
 8006078:	461a      	mov	r2, r3
 800607a:	d32e      	bcc.n	80060da <quorem+0xfa>
 800607c:	613c      	str	r4, [r7, #16]
 800607e:	4638      	mov	r0, r7
 8006080:	f001 fad6 	bl	8007630 <__mcmp>
 8006084:	2800      	cmp	r0, #0
 8006086:	db24      	blt.n	80060d2 <quorem+0xf2>
 8006088:	3601      	adds	r6, #1
 800608a:	4628      	mov	r0, r5
 800608c:	f04f 0c00 	mov.w	ip, #0
 8006090:	f858 2b04 	ldr.w	r2, [r8], #4
 8006094:	f8d0 e000 	ldr.w	lr, [r0]
 8006098:	b293      	uxth	r3, r2
 800609a:	ebac 0303 	sub.w	r3, ip, r3
 800609e:	0c12      	lsrs	r2, r2, #16
 80060a0:	fa13 f38e 	uxtah	r3, r3, lr
 80060a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80060a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060b2:	45c1      	cmp	r9, r8
 80060b4:	f840 3b04 	str.w	r3, [r0], #4
 80060b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80060bc:	d2e8      	bcs.n	8006090 <quorem+0xb0>
 80060be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060c6:	b922      	cbnz	r2, 80060d2 <quorem+0xf2>
 80060c8:	3b04      	subs	r3, #4
 80060ca:	429d      	cmp	r5, r3
 80060cc:	461a      	mov	r2, r3
 80060ce:	d30a      	bcc.n	80060e6 <quorem+0x106>
 80060d0:	613c      	str	r4, [r7, #16]
 80060d2:	4630      	mov	r0, r6
 80060d4:	b003      	add	sp, #12
 80060d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060da:	6812      	ldr	r2, [r2, #0]
 80060dc:	3b04      	subs	r3, #4
 80060de:	2a00      	cmp	r2, #0
 80060e0:	d1cc      	bne.n	800607c <quorem+0x9c>
 80060e2:	3c01      	subs	r4, #1
 80060e4:	e7c7      	b.n	8006076 <quorem+0x96>
 80060e6:	6812      	ldr	r2, [r2, #0]
 80060e8:	3b04      	subs	r3, #4
 80060ea:	2a00      	cmp	r2, #0
 80060ec:	d1f0      	bne.n	80060d0 <quorem+0xf0>
 80060ee:	3c01      	subs	r4, #1
 80060f0:	e7eb      	b.n	80060ca <quorem+0xea>
 80060f2:	2000      	movs	r0, #0
 80060f4:	e7ee      	b.n	80060d4 <quorem+0xf4>
	...

080060f8 <_dtoa_r>:
 80060f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060fc:	ed2d 8b04 	vpush	{d8-d9}
 8006100:	ec57 6b10 	vmov	r6, r7, d0
 8006104:	b093      	sub	sp, #76	; 0x4c
 8006106:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006108:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800610c:	9106      	str	r1, [sp, #24]
 800610e:	ee10 aa10 	vmov	sl, s0
 8006112:	4604      	mov	r4, r0
 8006114:	9209      	str	r2, [sp, #36]	; 0x24
 8006116:	930c      	str	r3, [sp, #48]	; 0x30
 8006118:	46bb      	mov	fp, r7
 800611a:	b975      	cbnz	r5, 800613a <_dtoa_r+0x42>
 800611c:	2010      	movs	r0, #16
 800611e:	f000 fffd 	bl	800711c <malloc>
 8006122:	4602      	mov	r2, r0
 8006124:	6260      	str	r0, [r4, #36]	; 0x24
 8006126:	b920      	cbnz	r0, 8006132 <_dtoa_r+0x3a>
 8006128:	4ba7      	ldr	r3, [pc, #668]	; (80063c8 <_dtoa_r+0x2d0>)
 800612a:	21ea      	movs	r1, #234	; 0xea
 800612c:	48a7      	ldr	r0, [pc, #668]	; (80063cc <_dtoa_r+0x2d4>)
 800612e:	f001 fe7f 	bl	8007e30 <__assert_func>
 8006132:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006136:	6005      	str	r5, [r0, #0]
 8006138:	60c5      	str	r5, [r0, #12]
 800613a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800613c:	6819      	ldr	r1, [r3, #0]
 800613e:	b151      	cbz	r1, 8006156 <_dtoa_r+0x5e>
 8006140:	685a      	ldr	r2, [r3, #4]
 8006142:	604a      	str	r2, [r1, #4]
 8006144:	2301      	movs	r3, #1
 8006146:	4093      	lsls	r3, r2
 8006148:	608b      	str	r3, [r1, #8]
 800614a:	4620      	mov	r0, r4
 800614c:	f001 f82e 	bl	80071ac <_Bfree>
 8006150:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006152:	2200      	movs	r2, #0
 8006154:	601a      	str	r2, [r3, #0]
 8006156:	1e3b      	subs	r3, r7, #0
 8006158:	bfaa      	itet	ge
 800615a:	2300      	movge	r3, #0
 800615c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006160:	f8c8 3000 	strge.w	r3, [r8]
 8006164:	4b9a      	ldr	r3, [pc, #616]	; (80063d0 <_dtoa_r+0x2d8>)
 8006166:	bfbc      	itt	lt
 8006168:	2201      	movlt	r2, #1
 800616a:	f8c8 2000 	strlt.w	r2, [r8]
 800616e:	ea33 030b 	bics.w	r3, r3, fp
 8006172:	d11b      	bne.n	80061ac <_dtoa_r+0xb4>
 8006174:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006176:	f242 730f 	movw	r3, #9999	; 0x270f
 800617a:	6013      	str	r3, [r2, #0]
 800617c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006180:	4333      	orrs	r3, r6
 8006182:	f000 8592 	beq.w	8006caa <_dtoa_r+0xbb2>
 8006186:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006188:	b963      	cbnz	r3, 80061a4 <_dtoa_r+0xac>
 800618a:	4b92      	ldr	r3, [pc, #584]	; (80063d4 <_dtoa_r+0x2dc>)
 800618c:	e022      	b.n	80061d4 <_dtoa_r+0xdc>
 800618e:	4b92      	ldr	r3, [pc, #584]	; (80063d8 <_dtoa_r+0x2e0>)
 8006190:	9301      	str	r3, [sp, #4]
 8006192:	3308      	adds	r3, #8
 8006194:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006196:	6013      	str	r3, [r2, #0]
 8006198:	9801      	ldr	r0, [sp, #4]
 800619a:	b013      	add	sp, #76	; 0x4c
 800619c:	ecbd 8b04 	vpop	{d8-d9}
 80061a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061a4:	4b8b      	ldr	r3, [pc, #556]	; (80063d4 <_dtoa_r+0x2dc>)
 80061a6:	9301      	str	r3, [sp, #4]
 80061a8:	3303      	adds	r3, #3
 80061aa:	e7f3      	b.n	8006194 <_dtoa_r+0x9c>
 80061ac:	2200      	movs	r2, #0
 80061ae:	2300      	movs	r3, #0
 80061b0:	4650      	mov	r0, sl
 80061b2:	4659      	mov	r1, fp
 80061b4:	f7fa fc60 	bl	8000a78 <__aeabi_dcmpeq>
 80061b8:	ec4b ab19 	vmov	d9, sl, fp
 80061bc:	4680      	mov	r8, r0
 80061be:	b158      	cbz	r0, 80061d8 <_dtoa_r+0xe0>
 80061c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061c2:	2301      	movs	r3, #1
 80061c4:	6013      	str	r3, [r2, #0]
 80061c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f000 856b 	beq.w	8006ca4 <_dtoa_r+0xbac>
 80061ce:	4883      	ldr	r0, [pc, #524]	; (80063dc <_dtoa_r+0x2e4>)
 80061d0:	6018      	str	r0, [r3, #0]
 80061d2:	1e43      	subs	r3, r0, #1
 80061d4:	9301      	str	r3, [sp, #4]
 80061d6:	e7df      	b.n	8006198 <_dtoa_r+0xa0>
 80061d8:	ec4b ab10 	vmov	d0, sl, fp
 80061dc:	aa10      	add	r2, sp, #64	; 0x40
 80061de:	a911      	add	r1, sp, #68	; 0x44
 80061e0:	4620      	mov	r0, r4
 80061e2:	f001 facb 	bl	800777c <__d2b>
 80061e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80061ea:	ee08 0a10 	vmov	s16, r0
 80061ee:	2d00      	cmp	r5, #0
 80061f0:	f000 8084 	beq.w	80062fc <_dtoa_r+0x204>
 80061f4:	ee19 3a90 	vmov	r3, s19
 80061f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006200:	4656      	mov	r6, sl
 8006202:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006206:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800620a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800620e:	4b74      	ldr	r3, [pc, #464]	; (80063e0 <_dtoa_r+0x2e8>)
 8006210:	2200      	movs	r2, #0
 8006212:	4630      	mov	r0, r6
 8006214:	4639      	mov	r1, r7
 8006216:	f7fa f80f 	bl	8000238 <__aeabi_dsub>
 800621a:	a365      	add	r3, pc, #404	; (adr r3, 80063b0 <_dtoa_r+0x2b8>)
 800621c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006220:	f7fa f9c2 	bl	80005a8 <__aeabi_dmul>
 8006224:	a364      	add	r3, pc, #400	; (adr r3, 80063b8 <_dtoa_r+0x2c0>)
 8006226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622a:	f7fa f807 	bl	800023c <__adddf3>
 800622e:	4606      	mov	r6, r0
 8006230:	4628      	mov	r0, r5
 8006232:	460f      	mov	r7, r1
 8006234:	f7fa f94e 	bl	80004d4 <__aeabi_i2d>
 8006238:	a361      	add	r3, pc, #388	; (adr r3, 80063c0 <_dtoa_r+0x2c8>)
 800623a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623e:	f7fa f9b3 	bl	80005a8 <__aeabi_dmul>
 8006242:	4602      	mov	r2, r0
 8006244:	460b      	mov	r3, r1
 8006246:	4630      	mov	r0, r6
 8006248:	4639      	mov	r1, r7
 800624a:	f7f9 fff7 	bl	800023c <__adddf3>
 800624e:	4606      	mov	r6, r0
 8006250:	460f      	mov	r7, r1
 8006252:	f7fa fc59 	bl	8000b08 <__aeabi_d2iz>
 8006256:	2200      	movs	r2, #0
 8006258:	9000      	str	r0, [sp, #0]
 800625a:	2300      	movs	r3, #0
 800625c:	4630      	mov	r0, r6
 800625e:	4639      	mov	r1, r7
 8006260:	f7fa fc14 	bl	8000a8c <__aeabi_dcmplt>
 8006264:	b150      	cbz	r0, 800627c <_dtoa_r+0x184>
 8006266:	9800      	ldr	r0, [sp, #0]
 8006268:	f7fa f934 	bl	80004d4 <__aeabi_i2d>
 800626c:	4632      	mov	r2, r6
 800626e:	463b      	mov	r3, r7
 8006270:	f7fa fc02 	bl	8000a78 <__aeabi_dcmpeq>
 8006274:	b910      	cbnz	r0, 800627c <_dtoa_r+0x184>
 8006276:	9b00      	ldr	r3, [sp, #0]
 8006278:	3b01      	subs	r3, #1
 800627a:	9300      	str	r3, [sp, #0]
 800627c:	9b00      	ldr	r3, [sp, #0]
 800627e:	2b16      	cmp	r3, #22
 8006280:	d85a      	bhi.n	8006338 <_dtoa_r+0x240>
 8006282:	9a00      	ldr	r2, [sp, #0]
 8006284:	4b57      	ldr	r3, [pc, #348]	; (80063e4 <_dtoa_r+0x2ec>)
 8006286:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800628a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628e:	ec51 0b19 	vmov	r0, r1, d9
 8006292:	f7fa fbfb 	bl	8000a8c <__aeabi_dcmplt>
 8006296:	2800      	cmp	r0, #0
 8006298:	d050      	beq.n	800633c <_dtoa_r+0x244>
 800629a:	9b00      	ldr	r3, [sp, #0]
 800629c:	3b01      	subs	r3, #1
 800629e:	9300      	str	r3, [sp, #0]
 80062a0:	2300      	movs	r3, #0
 80062a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80062a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80062a6:	1b5d      	subs	r5, r3, r5
 80062a8:	1e6b      	subs	r3, r5, #1
 80062aa:	9305      	str	r3, [sp, #20]
 80062ac:	bf45      	ittet	mi
 80062ae:	f1c5 0301 	rsbmi	r3, r5, #1
 80062b2:	9304      	strmi	r3, [sp, #16]
 80062b4:	2300      	movpl	r3, #0
 80062b6:	2300      	movmi	r3, #0
 80062b8:	bf4c      	ite	mi
 80062ba:	9305      	strmi	r3, [sp, #20]
 80062bc:	9304      	strpl	r3, [sp, #16]
 80062be:	9b00      	ldr	r3, [sp, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	db3d      	blt.n	8006340 <_dtoa_r+0x248>
 80062c4:	9b05      	ldr	r3, [sp, #20]
 80062c6:	9a00      	ldr	r2, [sp, #0]
 80062c8:	920a      	str	r2, [sp, #40]	; 0x28
 80062ca:	4413      	add	r3, r2
 80062cc:	9305      	str	r3, [sp, #20]
 80062ce:	2300      	movs	r3, #0
 80062d0:	9307      	str	r3, [sp, #28]
 80062d2:	9b06      	ldr	r3, [sp, #24]
 80062d4:	2b09      	cmp	r3, #9
 80062d6:	f200 8089 	bhi.w	80063ec <_dtoa_r+0x2f4>
 80062da:	2b05      	cmp	r3, #5
 80062dc:	bfc4      	itt	gt
 80062de:	3b04      	subgt	r3, #4
 80062e0:	9306      	strgt	r3, [sp, #24]
 80062e2:	9b06      	ldr	r3, [sp, #24]
 80062e4:	f1a3 0302 	sub.w	r3, r3, #2
 80062e8:	bfcc      	ite	gt
 80062ea:	2500      	movgt	r5, #0
 80062ec:	2501      	movle	r5, #1
 80062ee:	2b03      	cmp	r3, #3
 80062f0:	f200 8087 	bhi.w	8006402 <_dtoa_r+0x30a>
 80062f4:	e8df f003 	tbb	[pc, r3]
 80062f8:	59383a2d 	.word	0x59383a2d
 80062fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006300:	441d      	add	r5, r3
 8006302:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006306:	2b20      	cmp	r3, #32
 8006308:	bfc1      	itttt	gt
 800630a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800630e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006312:	fa0b f303 	lslgt.w	r3, fp, r3
 8006316:	fa26 f000 	lsrgt.w	r0, r6, r0
 800631a:	bfda      	itte	le
 800631c:	f1c3 0320 	rsble	r3, r3, #32
 8006320:	fa06 f003 	lslle.w	r0, r6, r3
 8006324:	4318      	orrgt	r0, r3
 8006326:	f7fa f8c5 	bl	80004b4 <__aeabi_ui2d>
 800632a:	2301      	movs	r3, #1
 800632c:	4606      	mov	r6, r0
 800632e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006332:	3d01      	subs	r5, #1
 8006334:	930e      	str	r3, [sp, #56]	; 0x38
 8006336:	e76a      	b.n	800620e <_dtoa_r+0x116>
 8006338:	2301      	movs	r3, #1
 800633a:	e7b2      	b.n	80062a2 <_dtoa_r+0x1aa>
 800633c:	900b      	str	r0, [sp, #44]	; 0x2c
 800633e:	e7b1      	b.n	80062a4 <_dtoa_r+0x1ac>
 8006340:	9b04      	ldr	r3, [sp, #16]
 8006342:	9a00      	ldr	r2, [sp, #0]
 8006344:	1a9b      	subs	r3, r3, r2
 8006346:	9304      	str	r3, [sp, #16]
 8006348:	4253      	negs	r3, r2
 800634a:	9307      	str	r3, [sp, #28]
 800634c:	2300      	movs	r3, #0
 800634e:	930a      	str	r3, [sp, #40]	; 0x28
 8006350:	e7bf      	b.n	80062d2 <_dtoa_r+0x1da>
 8006352:	2300      	movs	r3, #0
 8006354:	9308      	str	r3, [sp, #32]
 8006356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006358:	2b00      	cmp	r3, #0
 800635a:	dc55      	bgt.n	8006408 <_dtoa_r+0x310>
 800635c:	2301      	movs	r3, #1
 800635e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006362:	461a      	mov	r2, r3
 8006364:	9209      	str	r2, [sp, #36]	; 0x24
 8006366:	e00c      	b.n	8006382 <_dtoa_r+0x28a>
 8006368:	2301      	movs	r3, #1
 800636a:	e7f3      	b.n	8006354 <_dtoa_r+0x25c>
 800636c:	2300      	movs	r3, #0
 800636e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006370:	9308      	str	r3, [sp, #32]
 8006372:	9b00      	ldr	r3, [sp, #0]
 8006374:	4413      	add	r3, r2
 8006376:	9302      	str	r3, [sp, #8]
 8006378:	3301      	adds	r3, #1
 800637a:	2b01      	cmp	r3, #1
 800637c:	9303      	str	r3, [sp, #12]
 800637e:	bfb8      	it	lt
 8006380:	2301      	movlt	r3, #1
 8006382:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006384:	2200      	movs	r2, #0
 8006386:	6042      	str	r2, [r0, #4]
 8006388:	2204      	movs	r2, #4
 800638a:	f102 0614 	add.w	r6, r2, #20
 800638e:	429e      	cmp	r6, r3
 8006390:	6841      	ldr	r1, [r0, #4]
 8006392:	d93d      	bls.n	8006410 <_dtoa_r+0x318>
 8006394:	4620      	mov	r0, r4
 8006396:	f000 fec9 	bl	800712c <_Balloc>
 800639a:	9001      	str	r0, [sp, #4]
 800639c:	2800      	cmp	r0, #0
 800639e:	d13b      	bne.n	8006418 <_dtoa_r+0x320>
 80063a0:	4b11      	ldr	r3, [pc, #68]	; (80063e8 <_dtoa_r+0x2f0>)
 80063a2:	4602      	mov	r2, r0
 80063a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80063a8:	e6c0      	b.n	800612c <_dtoa_r+0x34>
 80063aa:	2301      	movs	r3, #1
 80063ac:	e7df      	b.n	800636e <_dtoa_r+0x276>
 80063ae:	bf00      	nop
 80063b0:	636f4361 	.word	0x636f4361
 80063b4:	3fd287a7 	.word	0x3fd287a7
 80063b8:	8b60c8b3 	.word	0x8b60c8b3
 80063bc:	3fc68a28 	.word	0x3fc68a28
 80063c0:	509f79fb 	.word	0x509f79fb
 80063c4:	3fd34413 	.word	0x3fd34413
 80063c8:	080081b9 	.word	0x080081b9
 80063cc:	080081d0 	.word	0x080081d0
 80063d0:	7ff00000 	.word	0x7ff00000
 80063d4:	080081b5 	.word	0x080081b5
 80063d8:	080081ac 	.word	0x080081ac
 80063dc:	08008189 	.word	0x08008189
 80063e0:	3ff80000 	.word	0x3ff80000
 80063e4:	08008320 	.word	0x08008320
 80063e8:	0800822b 	.word	0x0800822b
 80063ec:	2501      	movs	r5, #1
 80063ee:	2300      	movs	r3, #0
 80063f0:	9306      	str	r3, [sp, #24]
 80063f2:	9508      	str	r5, [sp, #32]
 80063f4:	f04f 33ff 	mov.w	r3, #4294967295
 80063f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80063fc:	2200      	movs	r2, #0
 80063fe:	2312      	movs	r3, #18
 8006400:	e7b0      	b.n	8006364 <_dtoa_r+0x26c>
 8006402:	2301      	movs	r3, #1
 8006404:	9308      	str	r3, [sp, #32]
 8006406:	e7f5      	b.n	80063f4 <_dtoa_r+0x2fc>
 8006408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800640a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800640e:	e7b8      	b.n	8006382 <_dtoa_r+0x28a>
 8006410:	3101      	adds	r1, #1
 8006412:	6041      	str	r1, [r0, #4]
 8006414:	0052      	lsls	r2, r2, #1
 8006416:	e7b8      	b.n	800638a <_dtoa_r+0x292>
 8006418:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800641a:	9a01      	ldr	r2, [sp, #4]
 800641c:	601a      	str	r2, [r3, #0]
 800641e:	9b03      	ldr	r3, [sp, #12]
 8006420:	2b0e      	cmp	r3, #14
 8006422:	f200 809d 	bhi.w	8006560 <_dtoa_r+0x468>
 8006426:	2d00      	cmp	r5, #0
 8006428:	f000 809a 	beq.w	8006560 <_dtoa_r+0x468>
 800642c:	9b00      	ldr	r3, [sp, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	dd32      	ble.n	8006498 <_dtoa_r+0x3a0>
 8006432:	4ab7      	ldr	r2, [pc, #732]	; (8006710 <_dtoa_r+0x618>)
 8006434:	f003 030f 	and.w	r3, r3, #15
 8006438:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800643c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006440:	9b00      	ldr	r3, [sp, #0]
 8006442:	05d8      	lsls	r0, r3, #23
 8006444:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006448:	d516      	bpl.n	8006478 <_dtoa_r+0x380>
 800644a:	4bb2      	ldr	r3, [pc, #712]	; (8006714 <_dtoa_r+0x61c>)
 800644c:	ec51 0b19 	vmov	r0, r1, d9
 8006450:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006454:	f7fa f9d2 	bl	80007fc <__aeabi_ddiv>
 8006458:	f007 070f 	and.w	r7, r7, #15
 800645c:	4682      	mov	sl, r0
 800645e:	468b      	mov	fp, r1
 8006460:	2503      	movs	r5, #3
 8006462:	4eac      	ldr	r6, [pc, #688]	; (8006714 <_dtoa_r+0x61c>)
 8006464:	b957      	cbnz	r7, 800647c <_dtoa_r+0x384>
 8006466:	4642      	mov	r2, r8
 8006468:	464b      	mov	r3, r9
 800646a:	4650      	mov	r0, sl
 800646c:	4659      	mov	r1, fp
 800646e:	f7fa f9c5 	bl	80007fc <__aeabi_ddiv>
 8006472:	4682      	mov	sl, r0
 8006474:	468b      	mov	fp, r1
 8006476:	e028      	b.n	80064ca <_dtoa_r+0x3d2>
 8006478:	2502      	movs	r5, #2
 800647a:	e7f2      	b.n	8006462 <_dtoa_r+0x36a>
 800647c:	07f9      	lsls	r1, r7, #31
 800647e:	d508      	bpl.n	8006492 <_dtoa_r+0x39a>
 8006480:	4640      	mov	r0, r8
 8006482:	4649      	mov	r1, r9
 8006484:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006488:	f7fa f88e 	bl	80005a8 <__aeabi_dmul>
 800648c:	3501      	adds	r5, #1
 800648e:	4680      	mov	r8, r0
 8006490:	4689      	mov	r9, r1
 8006492:	107f      	asrs	r7, r7, #1
 8006494:	3608      	adds	r6, #8
 8006496:	e7e5      	b.n	8006464 <_dtoa_r+0x36c>
 8006498:	f000 809b 	beq.w	80065d2 <_dtoa_r+0x4da>
 800649c:	9b00      	ldr	r3, [sp, #0]
 800649e:	4f9d      	ldr	r7, [pc, #628]	; (8006714 <_dtoa_r+0x61c>)
 80064a0:	425e      	negs	r6, r3
 80064a2:	4b9b      	ldr	r3, [pc, #620]	; (8006710 <_dtoa_r+0x618>)
 80064a4:	f006 020f 	and.w	r2, r6, #15
 80064a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b0:	ec51 0b19 	vmov	r0, r1, d9
 80064b4:	f7fa f878 	bl	80005a8 <__aeabi_dmul>
 80064b8:	1136      	asrs	r6, r6, #4
 80064ba:	4682      	mov	sl, r0
 80064bc:	468b      	mov	fp, r1
 80064be:	2300      	movs	r3, #0
 80064c0:	2502      	movs	r5, #2
 80064c2:	2e00      	cmp	r6, #0
 80064c4:	d17a      	bne.n	80065bc <_dtoa_r+0x4c4>
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1d3      	bne.n	8006472 <_dtoa_r+0x37a>
 80064ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f000 8082 	beq.w	80065d6 <_dtoa_r+0x4de>
 80064d2:	4b91      	ldr	r3, [pc, #580]	; (8006718 <_dtoa_r+0x620>)
 80064d4:	2200      	movs	r2, #0
 80064d6:	4650      	mov	r0, sl
 80064d8:	4659      	mov	r1, fp
 80064da:	f7fa fad7 	bl	8000a8c <__aeabi_dcmplt>
 80064de:	2800      	cmp	r0, #0
 80064e0:	d079      	beq.n	80065d6 <_dtoa_r+0x4de>
 80064e2:	9b03      	ldr	r3, [sp, #12]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d076      	beq.n	80065d6 <_dtoa_r+0x4de>
 80064e8:	9b02      	ldr	r3, [sp, #8]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	dd36      	ble.n	800655c <_dtoa_r+0x464>
 80064ee:	9b00      	ldr	r3, [sp, #0]
 80064f0:	4650      	mov	r0, sl
 80064f2:	4659      	mov	r1, fp
 80064f4:	1e5f      	subs	r7, r3, #1
 80064f6:	2200      	movs	r2, #0
 80064f8:	4b88      	ldr	r3, [pc, #544]	; (800671c <_dtoa_r+0x624>)
 80064fa:	f7fa f855 	bl	80005a8 <__aeabi_dmul>
 80064fe:	9e02      	ldr	r6, [sp, #8]
 8006500:	4682      	mov	sl, r0
 8006502:	468b      	mov	fp, r1
 8006504:	3501      	adds	r5, #1
 8006506:	4628      	mov	r0, r5
 8006508:	f7f9 ffe4 	bl	80004d4 <__aeabi_i2d>
 800650c:	4652      	mov	r2, sl
 800650e:	465b      	mov	r3, fp
 8006510:	f7fa f84a 	bl	80005a8 <__aeabi_dmul>
 8006514:	4b82      	ldr	r3, [pc, #520]	; (8006720 <_dtoa_r+0x628>)
 8006516:	2200      	movs	r2, #0
 8006518:	f7f9 fe90 	bl	800023c <__adddf3>
 800651c:	46d0      	mov	r8, sl
 800651e:	46d9      	mov	r9, fp
 8006520:	4682      	mov	sl, r0
 8006522:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006526:	2e00      	cmp	r6, #0
 8006528:	d158      	bne.n	80065dc <_dtoa_r+0x4e4>
 800652a:	4b7e      	ldr	r3, [pc, #504]	; (8006724 <_dtoa_r+0x62c>)
 800652c:	2200      	movs	r2, #0
 800652e:	4640      	mov	r0, r8
 8006530:	4649      	mov	r1, r9
 8006532:	f7f9 fe81 	bl	8000238 <__aeabi_dsub>
 8006536:	4652      	mov	r2, sl
 8006538:	465b      	mov	r3, fp
 800653a:	4680      	mov	r8, r0
 800653c:	4689      	mov	r9, r1
 800653e:	f7fa fac3 	bl	8000ac8 <__aeabi_dcmpgt>
 8006542:	2800      	cmp	r0, #0
 8006544:	f040 8295 	bne.w	8006a72 <_dtoa_r+0x97a>
 8006548:	4652      	mov	r2, sl
 800654a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800654e:	4640      	mov	r0, r8
 8006550:	4649      	mov	r1, r9
 8006552:	f7fa fa9b 	bl	8000a8c <__aeabi_dcmplt>
 8006556:	2800      	cmp	r0, #0
 8006558:	f040 8289 	bne.w	8006a6e <_dtoa_r+0x976>
 800655c:	ec5b ab19 	vmov	sl, fp, d9
 8006560:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006562:	2b00      	cmp	r3, #0
 8006564:	f2c0 8148 	blt.w	80067f8 <_dtoa_r+0x700>
 8006568:	9a00      	ldr	r2, [sp, #0]
 800656a:	2a0e      	cmp	r2, #14
 800656c:	f300 8144 	bgt.w	80067f8 <_dtoa_r+0x700>
 8006570:	4b67      	ldr	r3, [pc, #412]	; (8006710 <_dtoa_r+0x618>)
 8006572:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006576:	e9d3 8900 	ldrd	r8, r9, [r3]
 800657a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800657c:	2b00      	cmp	r3, #0
 800657e:	f280 80d5 	bge.w	800672c <_dtoa_r+0x634>
 8006582:	9b03      	ldr	r3, [sp, #12]
 8006584:	2b00      	cmp	r3, #0
 8006586:	f300 80d1 	bgt.w	800672c <_dtoa_r+0x634>
 800658a:	f040 826f 	bne.w	8006a6c <_dtoa_r+0x974>
 800658e:	4b65      	ldr	r3, [pc, #404]	; (8006724 <_dtoa_r+0x62c>)
 8006590:	2200      	movs	r2, #0
 8006592:	4640      	mov	r0, r8
 8006594:	4649      	mov	r1, r9
 8006596:	f7fa f807 	bl	80005a8 <__aeabi_dmul>
 800659a:	4652      	mov	r2, sl
 800659c:	465b      	mov	r3, fp
 800659e:	f7fa fa89 	bl	8000ab4 <__aeabi_dcmpge>
 80065a2:	9e03      	ldr	r6, [sp, #12]
 80065a4:	4637      	mov	r7, r6
 80065a6:	2800      	cmp	r0, #0
 80065a8:	f040 8245 	bne.w	8006a36 <_dtoa_r+0x93e>
 80065ac:	9d01      	ldr	r5, [sp, #4]
 80065ae:	2331      	movs	r3, #49	; 0x31
 80065b0:	f805 3b01 	strb.w	r3, [r5], #1
 80065b4:	9b00      	ldr	r3, [sp, #0]
 80065b6:	3301      	adds	r3, #1
 80065b8:	9300      	str	r3, [sp, #0]
 80065ba:	e240      	b.n	8006a3e <_dtoa_r+0x946>
 80065bc:	07f2      	lsls	r2, r6, #31
 80065be:	d505      	bpl.n	80065cc <_dtoa_r+0x4d4>
 80065c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065c4:	f7f9 fff0 	bl	80005a8 <__aeabi_dmul>
 80065c8:	3501      	adds	r5, #1
 80065ca:	2301      	movs	r3, #1
 80065cc:	1076      	asrs	r6, r6, #1
 80065ce:	3708      	adds	r7, #8
 80065d0:	e777      	b.n	80064c2 <_dtoa_r+0x3ca>
 80065d2:	2502      	movs	r5, #2
 80065d4:	e779      	b.n	80064ca <_dtoa_r+0x3d2>
 80065d6:	9f00      	ldr	r7, [sp, #0]
 80065d8:	9e03      	ldr	r6, [sp, #12]
 80065da:	e794      	b.n	8006506 <_dtoa_r+0x40e>
 80065dc:	9901      	ldr	r1, [sp, #4]
 80065de:	4b4c      	ldr	r3, [pc, #304]	; (8006710 <_dtoa_r+0x618>)
 80065e0:	4431      	add	r1, r6
 80065e2:	910d      	str	r1, [sp, #52]	; 0x34
 80065e4:	9908      	ldr	r1, [sp, #32]
 80065e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80065ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80065ee:	2900      	cmp	r1, #0
 80065f0:	d043      	beq.n	800667a <_dtoa_r+0x582>
 80065f2:	494d      	ldr	r1, [pc, #308]	; (8006728 <_dtoa_r+0x630>)
 80065f4:	2000      	movs	r0, #0
 80065f6:	f7fa f901 	bl	80007fc <__aeabi_ddiv>
 80065fa:	4652      	mov	r2, sl
 80065fc:	465b      	mov	r3, fp
 80065fe:	f7f9 fe1b 	bl	8000238 <__aeabi_dsub>
 8006602:	9d01      	ldr	r5, [sp, #4]
 8006604:	4682      	mov	sl, r0
 8006606:	468b      	mov	fp, r1
 8006608:	4649      	mov	r1, r9
 800660a:	4640      	mov	r0, r8
 800660c:	f7fa fa7c 	bl	8000b08 <__aeabi_d2iz>
 8006610:	4606      	mov	r6, r0
 8006612:	f7f9 ff5f 	bl	80004d4 <__aeabi_i2d>
 8006616:	4602      	mov	r2, r0
 8006618:	460b      	mov	r3, r1
 800661a:	4640      	mov	r0, r8
 800661c:	4649      	mov	r1, r9
 800661e:	f7f9 fe0b 	bl	8000238 <__aeabi_dsub>
 8006622:	3630      	adds	r6, #48	; 0x30
 8006624:	f805 6b01 	strb.w	r6, [r5], #1
 8006628:	4652      	mov	r2, sl
 800662a:	465b      	mov	r3, fp
 800662c:	4680      	mov	r8, r0
 800662e:	4689      	mov	r9, r1
 8006630:	f7fa fa2c 	bl	8000a8c <__aeabi_dcmplt>
 8006634:	2800      	cmp	r0, #0
 8006636:	d163      	bne.n	8006700 <_dtoa_r+0x608>
 8006638:	4642      	mov	r2, r8
 800663a:	464b      	mov	r3, r9
 800663c:	4936      	ldr	r1, [pc, #216]	; (8006718 <_dtoa_r+0x620>)
 800663e:	2000      	movs	r0, #0
 8006640:	f7f9 fdfa 	bl	8000238 <__aeabi_dsub>
 8006644:	4652      	mov	r2, sl
 8006646:	465b      	mov	r3, fp
 8006648:	f7fa fa20 	bl	8000a8c <__aeabi_dcmplt>
 800664c:	2800      	cmp	r0, #0
 800664e:	f040 80b5 	bne.w	80067bc <_dtoa_r+0x6c4>
 8006652:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006654:	429d      	cmp	r5, r3
 8006656:	d081      	beq.n	800655c <_dtoa_r+0x464>
 8006658:	4b30      	ldr	r3, [pc, #192]	; (800671c <_dtoa_r+0x624>)
 800665a:	2200      	movs	r2, #0
 800665c:	4650      	mov	r0, sl
 800665e:	4659      	mov	r1, fp
 8006660:	f7f9 ffa2 	bl	80005a8 <__aeabi_dmul>
 8006664:	4b2d      	ldr	r3, [pc, #180]	; (800671c <_dtoa_r+0x624>)
 8006666:	4682      	mov	sl, r0
 8006668:	468b      	mov	fp, r1
 800666a:	4640      	mov	r0, r8
 800666c:	4649      	mov	r1, r9
 800666e:	2200      	movs	r2, #0
 8006670:	f7f9 ff9a 	bl	80005a8 <__aeabi_dmul>
 8006674:	4680      	mov	r8, r0
 8006676:	4689      	mov	r9, r1
 8006678:	e7c6      	b.n	8006608 <_dtoa_r+0x510>
 800667a:	4650      	mov	r0, sl
 800667c:	4659      	mov	r1, fp
 800667e:	f7f9 ff93 	bl	80005a8 <__aeabi_dmul>
 8006682:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006684:	9d01      	ldr	r5, [sp, #4]
 8006686:	930f      	str	r3, [sp, #60]	; 0x3c
 8006688:	4682      	mov	sl, r0
 800668a:	468b      	mov	fp, r1
 800668c:	4649      	mov	r1, r9
 800668e:	4640      	mov	r0, r8
 8006690:	f7fa fa3a 	bl	8000b08 <__aeabi_d2iz>
 8006694:	4606      	mov	r6, r0
 8006696:	f7f9 ff1d 	bl	80004d4 <__aeabi_i2d>
 800669a:	3630      	adds	r6, #48	; 0x30
 800669c:	4602      	mov	r2, r0
 800669e:	460b      	mov	r3, r1
 80066a0:	4640      	mov	r0, r8
 80066a2:	4649      	mov	r1, r9
 80066a4:	f7f9 fdc8 	bl	8000238 <__aeabi_dsub>
 80066a8:	f805 6b01 	strb.w	r6, [r5], #1
 80066ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066ae:	429d      	cmp	r5, r3
 80066b0:	4680      	mov	r8, r0
 80066b2:	4689      	mov	r9, r1
 80066b4:	f04f 0200 	mov.w	r2, #0
 80066b8:	d124      	bne.n	8006704 <_dtoa_r+0x60c>
 80066ba:	4b1b      	ldr	r3, [pc, #108]	; (8006728 <_dtoa_r+0x630>)
 80066bc:	4650      	mov	r0, sl
 80066be:	4659      	mov	r1, fp
 80066c0:	f7f9 fdbc 	bl	800023c <__adddf3>
 80066c4:	4602      	mov	r2, r0
 80066c6:	460b      	mov	r3, r1
 80066c8:	4640      	mov	r0, r8
 80066ca:	4649      	mov	r1, r9
 80066cc:	f7fa f9fc 	bl	8000ac8 <__aeabi_dcmpgt>
 80066d0:	2800      	cmp	r0, #0
 80066d2:	d173      	bne.n	80067bc <_dtoa_r+0x6c4>
 80066d4:	4652      	mov	r2, sl
 80066d6:	465b      	mov	r3, fp
 80066d8:	4913      	ldr	r1, [pc, #76]	; (8006728 <_dtoa_r+0x630>)
 80066da:	2000      	movs	r0, #0
 80066dc:	f7f9 fdac 	bl	8000238 <__aeabi_dsub>
 80066e0:	4602      	mov	r2, r0
 80066e2:	460b      	mov	r3, r1
 80066e4:	4640      	mov	r0, r8
 80066e6:	4649      	mov	r1, r9
 80066e8:	f7fa f9d0 	bl	8000a8c <__aeabi_dcmplt>
 80066ec:	2800      	cmp	r0, #0
 80066ee:	f43f af35 	beq.w	800655c <_dtoa_r+0x464>
 80066f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80066f4:	1e6b      	subs	r3, r5, #1
 80066f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80066f8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80066fc:	2b30      	cmp	r3, #48	; 0x30
 80066fe:	d0f8      	beq.n	80066f2 <_dtoa_r+0x5fa>
 8006700:	9700      	str	r7, [sp, #0]
 8006702:	e049      	b.n	8006798 <_dtoa_r+0x6a0>
 8006704:	4b05      	ldr	r3, [pc, #20]	; (800671c <_dtoa_r+0x624>)
 8006706:	f7f9 ff4f 	bl	80005a8 <__aeabi_dmul>
 800670a:	4680      	mov	r8, r0
 800670c:	4689      	mov	r9, r1
 800670e:	e7bd      	b.n	800668c <_dtoa_r+0x594>
 8006710:	08008320 	.word	0x08008320
 8006714:	080082f8 	.word	0x080082f8
 8006718:	3ff00000 	.word	0x3ff00000
 800671c:	40240000 	.word	0x40240000
 8006720:	401c0000 	.word	0x401c0000
 8006724:	40140000 	.word	0x40140000
 8006728:	3fe00000 	.word	0x3fe00000
 800672c:	9d01      	ldr	r5, [sp, #4]
 800672e:	4656      	mov	r6, sl
 8006730:	465f      	mov	r7, fp
 8006732:	4642      	mov	r2, r8
 8006734:	464b      	mov	r3, r9
 8006736:	4630      	mov	r0, r6
 8006738:	4639      	mov	r1, r7
 800673a:	f7fa f85f 	bl	80007fc <__aeabi_ddiv>
 800673e:	f7fa f9e3 	bl	8000b08 <__aeabi_d2iz>
 8006742:	4682      	mov	sl, r0
 8006744:	f7f9 fec6 	bl	80004d4 <__aeabi_i2d>
 8006748:	4642      	mov	r2, r8
 800674a:	464b      	mov	r3, r9
 800674c:	f7f9 ff2c 	bl	80005a8 <__aeabi_dmul>
 8006750:	4602      	mov	r2, r0
 8006752:	460b      	mov	r3, r1
 8006754:	4630      	mov	r0, r6
 8006756:	4639      	mov	r1, r7
 8006758:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800675c:	f7f9 fd6c 	bl	8000238 <__aeabi_dsub>
 8006760:	f805 6b01 	strb.w	r6, [r5], #1
 8006764:	9e01      	ldr	r6, [sp, #4]
 8006766:	9f03      	ldr	r7, [sp, #12]
 8006768:	1bae      	subs	r6, r5, r6
 800676a:	42b7      	cmp	r7, r6
 800676c:	4602      	mov	r2, r0
 800676e:	460b      	mov	r3, r1
 8006770:	d135      	bne.n	80067de <_dtoa_r+0x6e6>
 8006772:	f7f9 fd63 	bl	800023c <__adddf3>
 8006776:	4642      	mov	r2, r8
 8006778:	464b      	mov	r3, r9
 800677a:	4606      	mov	r6, r0
 800677c:	460f      	mov	r7, r1
 800677e:	f7fa f9a3 	bl	8000ac8 <__aeabi_dcmpgt>
 8006782:	b9d0      	cbnz	r0, 80067ba <_dtoa_r+0x6c2>
 8006784:	4642      	mov	r2, r8
 8006786:	464b      	mov	r3, r9
 8006788:	4630      	mov	r0, r6
 800678a:	4639      	mov	r1, r7
 800678c:	f7fa f974 	bl	8000a78 <__aeabi_dcmpeq>
 8006790:	b110      	cbz	r0, 8006798 <_dtoa_r+0x6a0>
 8006792:	f01a 0f01 	tst.w	sl, #1
 8006796:	d110      	bne.n	80067ba <_dtoa_r+0x6c2>
 8006798:	4620      	mov	r0, r4
 800679a:	ee18 1a10 	vmov	r1, s16
 800679e:	f000 fd05 	bl	80071ac <_Bfree>
 80067a2:	2300      	movs	r3, #0
 80067a4:	9800      	ldr	r0, [sp, #0]
 80067a6:	702b      	strb	r3, [r5, #0]
 80067a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067aa:	3001      	adds	r0, #1
 80067ac:	6018      	str	r0, [r3, #0]
 80067ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f43f acf1 	beq.w	8006198 <_dtoa_r+0xa0>
 80067b6:	601d      	str	r5, [r3, #0]
 80067b8:	e4ee      	b.n	8006198 <_dtoa_r+0xa0>
 80067ba:	9f00      	ldr	r7, [sp, #0]
 80067bc:	462b      	mov	r3, r5
 80067be:	461d      	mov	r5, r3
 80067c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067c4:	2a39      	cmp	r2, #57	; 0x39
 80067c6:	d106      	bne.n	80067d6 <_dtoa_r+0x6de>
 80067c8:	9a01      	ldr	r2, [sp, #4]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d1f7      	bne.n	80067be <_dtoa_r+0x6c6>
 80067ce:	9901      	ldr	r1, [sp, #4]
 80067d0:	2230      	movs	r2, #48	; 0x30
 80067d2:	3701      	adds	r7, #1
 80067d4:	700a      	strb	r2, [r1, #0]
 80067d6:	781a      	ldrb	r2, [r3, #0]
 80067d8:	3201      	adds	r2, #1
 80067da:	701a      	strb	r2, [r3, #0]
 80067dc:	e790      	b.n	8006700 <_dtoa_r+0x608>
 80067de:	4ba6      	ldr	r3, [pc, #664]	; (8006a78 <_dtoa_r+0x980>)
 80067e0:	2200      	movs	r2, #0
 80067e2:	f7f9 fee1 	bl	80005a8 <__aeabi_dmul>
 80067e6:	2200      	movs	r2, #0
 80067e8:	2300      	movs	r3, #0
 80067ea:	4606      	mov	r6, r0
 80067ec:	460f      	mov	r7, r1
 80067ee:	f7fa f943 	bl	8000a78 <__aeabi_dcmpeq>
 80067f2:	2800      	cmp	r0, #0
 80067f4:	d09d      	beq.n	8006732 <_dtoa_r+0x63a>
 80067f6:	e7cf      	b.n	8006798 <_dtoa_r+0x6a0>
 80067f8:	9a08      	ldr	r2, [sp, #32]
 80067fa:	2a00      	cmp	r2, #0
 80067fc:	f000 80d7 	beq.w	80069ae <_dtoa_r+0x8b6>
 8006800:	9a06      	ldr	r2, [sp, #24]
 8006802:	2a01      	cmp	r2, #1
 8006804:	f300 80ba 	bgt.w	800697c <_dtoa_r+0x884>
 8006808:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800680a:	2a00      	cmp	r2, #0
 800680c:	f000 80b2 	beq.w	8006974 <_dtoa_r+0x87c>
 8006810:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006814:	9e07      	ldr	r6, [sp, #28]
 8006816:	9d04      	ldr	r5, [sp, #16]
 8006818:	9a04      	ldr	r2, [sp, #16]
 800681a:	441a      	add	r2, r3
 800681c:	9204      	str	r2, [sp, #16]
 800681e:	9a05      	ldr	r2, [sp, #20]
 8006820:	2101      	movs	r1, #1
 8006822:	441a      	add	r2, r3
 8006824:	4620      	mov	r0, r4
 8006826:	9205      	str	r2, [sp, #20]
 8006828:	f000 fd78 	bl	800731c <__i2b>
 800682c:	4607      	mov	r7, r0
 800682e:	2d00      	cmp	r5, #0
 8006830:	dd0c      	ble.n	800684c <_dtoa_r+0x754>
 8006832:	9b05      	ldr	r3, [sp, #20]
 8006834:	2b00      	cmp	r3, #0
 8006836:	dd09      	ble.n	800684c <_dtoa_r+0x754>
 8006838:	42ab      	cmp	r3, r5
 800683a:	9a04      	ldr	r2, [sp, #16]
 800683c:	bfa8      	it	ge
 800683e:	462b      	movge	r3, r5
 8006840:	1ad2      	subs	r2, r2, r3
 8006842:	9204      	str	r2, [sp, #16]
 8006844:	9a05      	ldr	r2, [sp, #20]
 8006846:	1aed      	subs	r5, r5, r3
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	9305      	str	r3, [sp, #20]
 800684c:	9b07      	ldr	r3, [sp, #28]
 800684e:	b31b      	cbz	r3, 8006898 <_dtoa_r+0x7a0>
 8006850:	9b08      	ldr	r3, [sp, #32]
 8006852:	2b00      	cmp	r3, #0
 8006854:	f000 80af 	beq.w	80069b6 <_dtoa_r+0x8be>
 8006858:	2e00      	cmp	r6, #0
 800685a:	dd13      	ble.n	8006884 <_dtoa_r+0x78c>
 800685c:	4639      	mov	r1, r7
 800685e:	4632      	mov	r2, r6
 8006860:	4620      	mov	r0, r4
 8006862:	f000 fe1b 	bl	800749c <__pow5mult>
 8006866:	ee18 2a10 	vmov	r2, s16
 800686a:	4601      	mov	r1, r0
 800686c:	4607      	mov	r7, r0
 800686e:	4620      	mov	r0, r4
 8006870:	f000 fd6a 	bl	8007348 <__multiply>
 8006874:	ee18 1a10 	vmov	r1, s16
 8006878:	4680      	mov	r8, r0
 800687a:	4620      	mov	r0, r4
 800687c:	f000 fc96 	bl	80071ac <_Bfree>
 8006880:	ee08 8a10 	vmov	s16, r8
 8006884:	9b07      	ldr	r3, [sp, #28]
 8006886:	1b9a      	subs	r2, r3, r6
 8006888:	d006      	beq.n	8006898 <_dtoa_r+0x7a0>
 800688a:	ee18 1a10 	vmov	r1, s16
 800688e:	4620      	mov	r0, r4
 8006890:	f000 fe04 	bl	800749c <__pow5mult>
 8006894:	ee08 0a10 	vmov	s16, r0
 8006898:	2101      	movs	r1, #1
 800689a:	4620      	mov	r0, r4
 800689c:	f000 fd3e 	bl	800731c <__i2b>
 80068a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	4606      	mov	r6, r0
 80068a6:	f340 8088 	ble.w	80069ba <_dtoa_r+0x8c2>
 80068aa:	461a      	mov	r2, r3
 80068ac:	4601      	mov	r1, r0
 80068ae:	4620      	mov	r0, r4
 80068b0:	f000 fdf4 	bl	800749c <__pow5mult>
 80068b4:	9b06      	ldr	r3, [sp, #24]
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	4606      	mov	r6, r0
 80068ba:	f340 8081 	ble.w	80069c0 <_dtoa_r+0x8c8>
 80068be:	f04f 0800 	mov.w	r8, #0
 80068c2:	6933      	ldr	r3, [r6, #16]
 80068c4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80068c8:	6918      	ldr	r0, [r3, #16]
 80068ca:	f000 fcd7 	bl	800727c <__hi0bits>
 80068ce:	f1c0 0020 	rsb	r0, r0, #32
 80068d2:	9b05      	ldr	r3, [sp, #20]
 80068d4:	4418      	add	r0, r3
 80068d6:	f010 001f 	ands.w	r0, r0, #31
 80068da:	f000 8092 	beq.w	8006a02 <_dtoa_r+0x90a>
 80068de:	f1c0 0320 	rsb	r3, r0, #32
 80068e2:	2b04      	cmp	r3, #4
 80068e4:	f340 808a 	ble.w	80069fc <_dtoa_r+0x904>
 80068e8:	f1c0 001c 	rsb	r0, r0, #28
 80068ec:	9b04      	ldr	r3, [sp, #16]
 80068ee:	4403      	add	r3, r0
 80068f0:	9304      	str	r3, [sp, #16]
 80068f2:	9b05      	ldr	r3, [sp, #20]
 80068f4:	4403      	add	r3, r0
 80068f6:	4405      	add	r5, r0
 80068f8:	9305      	str	r3, [sp, #20]
 80068fa:	9b04      	ldr	r3, [sp, #16]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	dd07      	ble.n	8006910 <_dtoa_r+0x818>
 8006900:	ee18 1a10 	vmov	r1, s16
 8006904:	461a      	mov	r2, r3
 8006906:	4620      	mov	r0, r4
 8006908:	f000 fe22 	bl	8007550 <__lshift>
 800690c:	ee08 0a10 	vmov	s16, r0
 8006910:	9b05      	ldr	r3, [sp, #20]
 8006912:	2b00      	cmp	r3, #0
 8006914:	dd05      	ble.n	8006922 <_dtoa_r+0x82a>
 8006916:	4631      	mov	r1, r6
 8006918:	461a      	mov	r2, r3
 800691a:	4620      	mov	r0, r4
 800691c:	f000 fe18 	bl	8007550 <__lshift>
 8006920:	4606      	mov	r6, r0
 8006922:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006924:	2b00      	cmp	r3, #0
 8006926:	d06e      	beq.n	8006a06 <_dtoa_r+0x90e>
 8006928:	ee18 0a10 	vmov	r0, s16
 800692c:	4631      	mov	r1, r6
 800692e:	f000 fe7f 	bl	8007630 <__mcmp>
 8006932:	2800      	cmp	r0, #0
 8006934:	da67      	bge.n	8006a06 <_dtoa_r+0x90e>
 8006936:	9b00      	ldr	r3, [sp, #0]
 8006938:	3b01      	subs	r3, #1
 800693a:	ee18 1a10 	vmov	r1, s16
 800693e:	9300      	str	r3, [sp, #0]
 8006940:	220a      	movs	r2, #10
 8006942:	2300      	movs	r3, #0
 8006944:	4620      	mov	r0, r4
 8006946:	f000 fc53 	bl	80071f0 <__multadd>
 800694a:	9b08      	ldr	r3, [sp, #32]
 800694c:	ee08 0a10 	vmov	s16, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	f000 81b1 	beq.w	8006cb8 <_dtoa_r+0xbc0>
 8006956:	2300      	movs	r3, #0
 8006958:	4639      	mov	r1, r7
 800695a:	220a      	movs	r2, #10
 800695c:	4620      	mov	r0, r4
 800695e:	f000 fc47 	bl	80071f0 <__multadd>
 8006962:	9b02      	ldr	r3, [sp, #8]
 8006964:	2b00      	cmp	r3, #0
 8006966:	4607      	mov	r7, r0
 8006968:	f300 808e 	bgt.w	8006a88 <_dtoa_r+0x990>
 800696c:	9b06      	ldr	r3, [sp, #24]
 800696e:	2b02      	cmp	r3, #2
 8006970:	dc51      	bgt.n	8006a16 <_dtoa_r+0x91e>
 8006972:	e089      	b.n	8006a88 <_dtoa_r+0x990>
 8006974:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006976:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800697a:	e74b      	b.n	8006814 <_dtoa_r+0x71c>
 800697c:	9b03      	ldr	r3, [sp, #12]
 800697e:	1e5e      	subs	r6, r3, #1
 8006980:	9b07      	ldr	r3, [sp, #28]
 8006982:	42b3      	cmp	r3, r6
 8006984:	bfbf      	itttt	lt
 8006986:	9b07      	ldrlt	r3, [sp, #28]
 8006988:	9607      	strlt	r6, [sp, #28]
 800698a:	1af2      	sublt	r2, r6, r3
 800698c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800698e:	bfb6      	itet	lt
 8006990:	189b      	addlt	r3, r3, r2
 8006992:	1b9e      	subge	r6, r3, r6
 8006994:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006996:	9b03      	ldr	r3, [sp, #12]
 8006998:	bfb8      	it	lt
 800699a:	2600      	movlt	r6, #0
 800699c:	2b00      	cmp	r3, #0
 800699e:	bfb7      	itett	lt
 80069a0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80069a4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80069a8:	1a9d      	sublt	r5, r3, r2
 80069aa:	2300      	movlt	r3, #0
 80069ac:	e734      	b.n	8006818 <_dtoa_r+0x720>
 80069ae:	9e07      	ldr	r6, [sp, #28]
 80069b0:	9d04      	ldr	r5, [sp, #16]
 80069b2:	9f08      	ldr	r7, [sp, #32]
 80069b4:	e73b      	b.n	800682e <_dtoa_r+0x736>
 80069b6:	9a07      	ldr	r2, [sp, #28]
 80069b8:	e767      	b.n	800688a <_dtoa_r+0x792>
 80069ba:	9b06      	ldr	r3, [sp, #24]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	dc18      	bgt.n	80069f2 <_dtoa_r+0x8fa>
 80069c0:	f1ba 0f00 	cmp.w	sl, #0
 80069c4:	d115      	bne.n	80069f2 <_dtoa_r+0x8fa>
 80069c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80069ca:	b993      	cbnz	r3, 80069f2 <_dtoa_r+0x8fa>
 80069cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80069d0:	0d1b      	lsrs	r3, r3, #20
 80069d2:	051b      	lsls	r3, r3, #20
 80069d4:	b183      	cbz	r3, 80069f8 <_dtoa_r+0x900>
 80069d6:	9b04      	ldr	r3, [sp, #16]
 80069d8:	3301      	adds	r3, #1
 80069da:	9304      	str	r3, [sp, #16]
 80069dc:	9b05      	ldr	r3, [sp, #20]
 80069de:	3301      	adds	r3, #1
 80069e0:	9305      	str	r3, [sp, #20]
 80069e2:	f04f 0801 	mov.w	r8, #1
 80069e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f47f af6a 	bne.w	80068c2 <_dtoa_r+0x7ca>
 80069ee:	2001      	movs	r0, #1
 80069f0:	e76f      	b.n	80068d2 <_dtoa_r+0x7da>
 80069f2:	f04f 0800 	mov.w	r8, #0
 80069f6:	e7f6      	b.n	80069e6 <_dtoa_r+0x8ee>
 80069f8:	4698      	mov	r8, r3
 80069fa:	e7f4      	b.n	80069e6 <_dtoa_r+0x8ee>
 80069fc:	f43f af7d 	beq.w	80068fa <_dtoa_r+0x802>
 8006a00:	4618      	mov	r0, r3
 8006a02:	301c      	adds	r0, #28
 8006a04:	e772      	b.n	80068ec <_dtoa_r+0x7f4>
 8006a06:	9b03      	ldr	r3, [sp, #12]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	dc37      	bgt.n	8006a7c <_dtoa_r+0x984>
 8006a0c:	9b06      	ldr	r3, [sp, #24]
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	dd34      	ble.n	8006a7c <_dtoa_r+0x984>
 8006a12:	9b03      	ldr	r3, [sp, #12]
 8006a14:	9302      	str	r3, [sp, #8]
 8006a16:	9b02      	ldr	r3, [sp, #8]
 8006a18:	b96b      	cbnz	r3, 8006a36 <_dtoa_r+0x93e>
 8006a1a:	4631      	mov	r1, r6
 8006a1c:	2205      	movs	r2, #5
 8006a1e:	4620      	mov	r0, r4
 8006a20:	f000 fbe6 	bl	80071f0 <__multadd>
 8006a24:	4601      	mov	r1, r0
 8006a26:	4606      	mov	r6, r0
 8006a28:	ee18 0a10 	vmov	r0, s16
 8006a2c:	f000 fe00 	bl	8007630 <__mcmp>
 8006a30:	2800      	cmp	r0, #0
 8006a32:	f73f adbb 	bgt.w	80065ac <_dtoa_r+0x4b4>
 8006a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a38:	9d01      	ldr	r5, [sp, #4]
 8006a3a:	43db      	mvns	r3, r3
 8006a3c:	9300      	str	r3, [sp, #0]
 8006a3e:	f04f 0800 	mov.w	r8, #0
 8006a42:	4631      	mov	r1, r6
 8006a44:	4620      	mov	r0, r4
 8006a46:	f000 fbb1 	bl	80071ac <_Bfree>
 8006a4a:	2f00      	cmp	r7, #0
 8006a4c:	f43f aea4 	beq.w	8006798 <_dtoa_r+0x6a0>
 8006a50:	f1b8 0f00 	cmp.w	r8, #0
 8006a54:	d005      	beq.n	8006a62 <_dtoa_r+0x96a>
 8006a56:	45b8      	cmp	r8, r7
 8006a58:	d003      	beq.n	8006a62 <_dtoa_r+0x96a>
 8006a5a:	4641      	mov	r1, r8
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	f000 fba5 	bl	80071ac <_Bfree>
 8006a62:	4639      	mov	r1, r7
 8006a64:	4620      	mov	r0, r4
 8006a66:	f000 fba1 	bl	80071ac <_Bfree>
 8006a6a:	e695      	b.n	8006798 <_dtoa_r+0x6a0>
 8006a6c:	2600      	movs	r6, #0
 8006a6e:	4637      	mov	r7, r6
 8006a70:	e7e1      	b.n	8006a36 <_dtoa_r+0x93e>
 8006a72:	9700      	str	r7, [sp, #0]
 8006a74:	4637      	mov	r7, r6
 8006a76:	e599      	b.n	80065ac <_dtoa_r+0x4b4>
 8006a78:	40240000 	.word	0x40240000
 8006a7c:	9b08      	ldr	r3, [sp, #32]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	f000 80ca 	beq.w	8006c18 <_dtoa_r+0xb20>
 8006a84:	9b03      	ldr	r3, [sp, #12]
 8006a86:	9302      	str	r3, [sp, #8]
 8006a88:	2d00      	cmp	r5, #0
 8006a8a:	dd05      	ble.n	8006a98 <_dtoa_r+0x9a0>
 8006a8c:	4639      	mov	r1, r7
 8006a8e:	462a      	mov	r2, r5
 8006a90:	4620      	mov	r0, r4
 8006a92:	f000 fd5d 	bl	8007550 <__lshift>
 8006a96:	4607      	mov	r7, r0
 8006a98:	f1b8 0f00 	cmp.w	r8, #0
 8006a9c:	d05b      	beq.n	8006b56 <_dtoa_r+0xa5e>
 8006a9e:	6879      	ldr	r1, [r7, #4]
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	f000 fb43 	bl	800712c <_Balloc>
 8006aa6:	4605      	mov	r5, r0
 8006aa8:	b928      	cbnz	r0, 8006ab6 <_dtoa_r+0x9be>
 8006aaa:	4b87      	ldr	r3, [pc, #540]	; (8006cc8 <_dtoa_r+0xbd0>)
 8006aac:	4602      	mov	r2, r0
 8006aae:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006ab2:	f7ff bb3b 	b.w	800612c <_dtoa_r+0x34>
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	3202      	adds	r2, #2
 8006aba:	0092      	lsls	r2, r2, #2
 8006abc:	f107 010c 	add.w	r1, r7, #12
 8006ac0:	300c      	adds	r0, #12
 8006ac2:	f7fe fca9 	bl	8005418 <memcpy>
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	4629      	mov	r1, r5
 8006aca:	4620      	mov	r0, r4
 8006acc:	f000 fd40 	bl	8007550 <__lshift>
 8006ad0:	9b01      	ldr	r3, [sp, #4]
 8006ad2:	f103 0901 	add.w	r9, r3, #1
 8006ad6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006ada:	4413      	add	r3, r2
 8006adc:	9305      	str	r3, [sp, #20]
 8006ade:	f00a 0301 	and.w	r3, sl, #1
 8006ae2:	46b8      	mov	r8, r7
 8006ae4:	9304      	str	r3, [sp, #16]
 8006ae6:	4607      	mov	r7, r0
 8006ae8:	4631      	mov	r1, r6
 8006aea:	ee18 0a10 	vmov	r0, s16
 8006aee:	f7ff fa77 	bl	8005fe0 <quorem>
 8006af2:	4641      	mov	r1, r8
 8006af4:	9002      	str	r0, [sp, #8]
 8006af6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006afa:	ee18 0a10 	vmov	r0, s16
 8006afe:	f000 fd97 	bl	8007630 <__mcmp>
 8006b02:	463a      	mov	r2, r7
 8006b04:	9003      	str	r0, [sp, #12]
 8006b06:	4631      	mov	r1, r6
 8006b08:	4620      	mov	r0, r4
 8006b0a:	f000 fdad 	bl	8007668 <__mdiff>
 8006b0e:	68c2      	ldr	r2, [r0, #12]
 8006b10:	f109 3bff 	add.w	fp, r9, #4294967295
 8006b14:	4605      	mov	r5, r0
 8006b16:	bb02      	cbnz	r2, 8006b5a <_dtoa_r+0xa62>
 8006b18:	4601      	mov	r1, r0
 8006b1a:	ee18 0a10 	vmov	r0, s16
 8006b1e:	f000 fd87 	bl	8007630 <__mcmp>
 8006b22:	4602      	mov	r2, r0
 8006b24:	4629      	mov	r1, r5
 8006b26:	4620      	mov	r0, r4
 8006b28:	9207      	str	r2, [sp, #28]
 8006b2a:	f000 fb3f 	bl	80071ac <_Bfree>
 8006b2e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006b32:	ea43 0102 	orr.w	r1, r3, r2
 8006b36:	9b04      	ldr	r3, [sp, #16]
 8006b38:	430b      	orrs	r3, r1
 8006b3a:	464d      	mov	r5, r9
 8006b3c:	d10f      	bne.n	8006b5e <_dtoa_r+0xa66>
 8006b3e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006b42:	d02a      	beq.n	8006b9a <_dtoa_r+0xaa2>
 8006b44:	9b03      	ldr	r3, [sp, #12]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	dd02      	ble.n	8006b50 <_dtoa_r+0xa58>
 8006b4a:	9b02      	ldr	r3, [sp, #8]
 8006b4c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006b50:	f88b a000 	strb.w	sl, [fp]
 8006b54:	e775      	b.n	8006a42 <_dtoa_r+0x94a>
 8006b56:	4638      	mov	r0, r7
 8006b58:	e7ba      	b.n	8006ad0 <_dtoa_r+0x9d8>
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	e7e2      	b.n	8006b24 <_dtoa_r+0xa2c>
 8006b5e:	9b03      	ldr	r3, [sp, #12]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	db04      	blt.n	8006b6e <_dtoa_r+0xa76>
 8006b64:	9906      	ldr	r1, [sp, #24]
 8006b66:	430b      	orrs	r3, r1
 8006b68:	9904      	ldr	r1, [sp, #16]
 8006b6a:	430b      	orrs	r3, r1
 8006b6c:	d122      	bne.n	8006bb4 <_dtoa_r+0xabc>
 8006b6e:	2a00      	cmp	r2, #0
 8006b70:	ddee      	ble.n	8006b50 <_dtoa_r+0xa58>
 8006b72:	ee18 1a10 	vmov	r1, s16
 8006b76:	2201      	movs	r2, #1
 8006b78:	4620      	mov	r0, r4
 8006b7a:	f000 fce9 	bl	8007550 <__lshift>
 8006b7e:	4631      	mov	r1, r6
 8006b80:	ee08 0a10 	vmov	s16, r0
 8006b84:	f000 fd54 	bl	8007630 <__mcmp>
 8006b88:	2800      	cmp	r0, #0
 8006b8a:	dc03      	bgt.n	8006b94 <_dtoa_r+0xa9c>
 8006b8c:	d1e0      	bne.n	8006b50 <_dtoa_r+0xa58>
 8006b8e:	f01a 0f01 	tst.w	sl, #1
 8006b92:	d0dd      	beq.n	8006b50 <_dtoa_r+0xa58>
 8006b94:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006b98:	d1d7      	bne.n	8006b4a <_dtoa_r+0xa52>
 8006b9a:	2339      	movs	r3, #57	; 0x39
 8006b9c:	f88b 3000 	strb.w	r3, [fp]
 8006ba0:	462b      	mov	r3, r5
 8006ba2:	461d      	mov	r5, r3
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006baa:	2a39      	cmp	r2, #57	; 0x39
 8006bac:	d071      	beq.n	8006c92 <_dtoa_r+0xb9a>
 8006bae:	3201      	adds	r2, #1
 8006bb0:	701a      	strb	r2, [r3, #0]
 8006bb2:	e746      	b.n	8006a42 <_dtoa_r+0x94a>
 8006bb4:	2a00      	cmp	r2, #0
 8006bb6:	dd07      	ble.n	8006bc8 <_dtoa_r+0xad0>
 8006bb8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006bbc:	d0ed      	beq.n	8006b9a <_dtoa_r+0xaa2>
 8006bbe:	f10a 0301 	add.w	r3, sl, #1
 8006bc2:	f88b 3000 	strb.w	r3, [fp]
 8006bc6:	e73c      	b.n	8006a42 <_dtoa_r+0x94a>
 8006bc8:	9b05      	ldr	r3, [sp, #20]
 8006bca:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006bce:	4599      	cmp	r9, r3
 8006bd0:	d047      	beq.n	8006c62 <_dtoa_r+0xb6a>
 8006bd2:	ee18 1a10 	vmov	r1, s16
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	220a      	movs	r2, #10
 8006bda:	4620      	mov	r0, r4
 8006bdc:	f000 fb08 	bl	80071f0 <__multadd>
 8006be0:	45b8      	cmp	r8, r7
 8006be2:	ee08 0a10 	vmov	s16, r0
 8006be6:	f04f 0300 	mov.w	r3, #0
 8006bea:	f04f 020a 	mov.w	r2, #10
 8006bee:	4641      	mov	r1, r8
 8006bf0:	4620      	mov	r0, r4
 8006bf2:	d106      	bne.n	8006c02 <_dtoa_r+0xb0a>
 8006bf4:	f000 fafc 	bl	80071f0 <__multadd>
 8006bf8:	4680      	mov	r8, r0
 8006bfa:	4607      	mov	r7, r0
 8006bfc:	f109 0901 	add.w	r9, r9, #1
 8006c00:	e772      	b.n	8006ae8 <_dtoa_r+0x9f0>
 8006c02:	f000 faf5 	bl	80071f0 <__multadd>
 8006c06:	4639      	mov	r1, r7
 8006c08:	4680      	mov	r8, r0
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	220a      	movs	r2, #10
 8006c0e:	4620      	mov	r0, r4
 8006c10:	f000 faee 	bl	80071f0 <__multadd>
 8006c14:	4607      	mov	r7, r0
 8006c16:	e7f1      	b.n	8006bfc <_dtoa_r+0xb04>
 8006c18:	9b03      	ldr	r3, [sp, #12]
 8006c1a:	9302      	str	r3, [sp, #8]
 8006c1c:	9d01      	ldr	r5, [sp, #4]
 8006c1e:	ee18 0a10 	vmov	r0, s16
 8006c22:	4631      	mov	r1, r6
 8006c24:	f7ff f9dc 	bl	8005fe0 <quorem>
 8006c28:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006c2c:	9b01      	ldr	r3, [sp, #4]
 8006c2e:	f805 ab01 	strb.w	sl, [r5], #1
 8006c32:	1aea      	subs	r2, r5, r3
 8006c34:	9b02      	ldr	r3, [sp, #8]
 8006c36:	4293      	cmp	r3, r2
 8006c38:	dd09      	ble.n	8006c4e <_dtoa_r+0xb56>
 8006c3a:	ee18 1a10 	vmov	r1, s16
 8006c3e:	2300      	movs	r3, #0
 8006c40:	220a      	movs	r2, #10
 8006c42:	4620      	mov	r0, r4
 8006c44:	f000 fad4 	bl	80071f0 <__multadd>
 8006c48:	ee08 0a10 	vmov	s16, r0
 8006c4c:	e7e7      	b.n	8006c1e <_dtoa_r+0xb26>
 8006c4e:	9b02      	ldr	r3, [sp, #8]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	bfc8      	it	gt
 8006c54:	461d      	movgt	r5, r3
 8006c56:	9b01      	ldr	r3, [sp, #4]
 8006c58:	bfd8      	it	le
 8006c5a:	2501      	movle	r5, #1
 8006c5c:	441d      	add	r5, r3
 8006c5e:	f04f 0800 	mov.w	r8, #0
 8006c62:	ee18 1a10 	vmov	r1, s16
 8006c66:	2201      	movs	r2, #1
 8006c68:	4620      	mov	r0, r4
 8006c6a:	f000 fc71 	bl	8007550 <__lshift>
 8006c6e:	4631      	mov	r1, r6
 8006c70:	ee08 0a10 	vmov	s16, r0
 8006c74:	f000 fcdc 	bl	8007630 <__mcmp>
 8006c78:	2800      	cmp	r0, #0
 8006c7a:	dc91      	bgt.n	8006ba0 <_dtoa_r+0xaa8>
 8006c7c:	d102      	bne.n	8006c84 <_dtoa_r+0xb8c>
 8006c7e:	f01a 0f01 	tst.w	sl, #1
 8006c82:	d18d      	bne.n	8006ba0 <_dtoa_r+0xaa8>
 8006c84:	462b      	mov	r3, r5
 8006c86:	461d      	mov	r5, r3
 8006c88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c8c:	2a30      	cmp	r2, #48	; 0x30
 8006c8e:	d0fa      	beq.n	8006c86 <_dtoa_r+0xb8e>
 8006c90:	e6d7      	b.n	8006a42 <_dtoa_r+0x94a>
 8006c92:	9a01      	ldr	r2, [sp, #4]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d184      	bne.n	8006ba2 <_dtoa_r+0xaaa>
 8006c98:	9b00      	ldr	r3, [sp, #0]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	9300      	str	r3, [sp, #0]
 8006c9e:	2331      	movs	r3, #49	; 0x31
 8006ca0:	7013      	strb	r3, [r2, #0]
 8006ca2:	e6ce      	b.n	8006a42 <_dtoa_r+0x94a>
 8006ca4:	4b09      	ldr	r3, [pc, #36]	; (8006ccc <_dtoa_r+0xbd4>)
 8006ca6:	f7ff ba95 	b.w	80061d4 <_dtoa_r+0xdc>
 8006caa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f47f aa6e 	bne.w	800618e <_dtoa_r+0x96>
 8006cb2:	4b07      	ldr	r3, [pc, #28]	; (8006cd0 <_dtoa_r+0xbd8>)
 8006cb4:	f7ff ba8e 	b.w	80061d4 <_dtoa_r+0xdc>
 8006cb8:	9b02      	ldr	r3, [sp, #8]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	dcae      	bgt.n	8006c1c <_dtoa_r+0xb24>
 8006cbe:	9b06      	ldr	r3, [sp, #24]
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	f73f aea8 	bgt.w	8006a16 <_dtoa_r+0x91e>
 8006cc6:	e7a9      	b.n	8006c1c <_dtoa_r+0xb24>
 8006cc8:	0800822b 	.word	0x0800822b
 8006ccc:	08008188 	.word	0x08008188
 8006cd0:	080081ac 	.word	0x080081ac

08006cd4 <__sflush_r>:
 8006cd4:	898a      	ldrh	r2, [r1, #12]
 8006cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cda:	4605      	mov	r5, r0
 8006cdc:	0710      	lsls	r0, r2, #28
 8006cde:	460c      	mov	r4, r1
 8006ce0:	d458      	bmi.n	8006d94 <__sflush_r+0xc0>
 8006ce2:	684b      	ldr	r3, [r1, #4]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	dc05      	bgt.n	8006cf4 <__sflush_r+0x20>
 8006ce8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	dc02      	bgt.n	8006cf4 <__sflush_r+0x20>
 8006cee:	2000      	movs	r0, #0
 8006cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cf6:	2e00      	cmp	r6, #0
 8006cf8:	d0f9      	beq.n	8006cee <__sflush_r+0x1a>
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d00:	682f      	ldr	r7, [r5, #0]
 8006d02:	602b      	str	r3, [r5, #0]
 8006d04:	d032      	beq.n	8006d6c <__sflush_r+0x98>
 8006d06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d08:	89a3      	ldrh	r3, [r4, #12]
 8006d0a:	075a      	lsls	r2, r3, #29
 8006d0c:	d505      	bpl.n	8006d1a <__sflush_r+0x46>
 8006d0e:	6863      	ldr	r3, [r4, #4]
 8006d10:	1ac0      	subs	r0, r0, r3
 8006d12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d14:	b10b      	cbz	r3, 8006d1a <__sflush_r+0x46>
 8006d16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d18:	1ac0      	subs	r0, r0, r3
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d20:	6a21      	ldr	r1, [r4, #32]
 8006d22:	4628      	mov	r0, r5
 8006d24:	47b0      	blx	r6
 8006d26:	1c43      	adds	r3, r0, #1
 8006d28:	89a3      	ldrh	r3, [r4, #12]
 8006d2a:	d106      	bne.n	8006d3a <__sflush_r+0x66>
 8006d2c:	6829      	ldr	r1, [r5, #0]
 8006d2e:	291d      	cmp	r1, #29
 8006d30:	d82c      	bhi.n	8006d8c <__sflush_r+0xb8>
 8006d32:	4a2a      	ldr	r2, [pc, #168]	; (8006ddc <__sflush_r+0x108>)
 8006d34:	40ca      	lsrs	r2, r1
 8006d36:	07d6      	lsls	r6, r2, #31
 8006d38:	d528      	bpl.n	8006d8c <__sflush_r+0xb8>
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	6062      	str	r2, [r4, #4]
 8006d3e:	04d9      	lsls	r1, r3, #19
 8006d40:	6922      	ldr	r2, [r4, #16]
 8006d42:	6022      	str	r2, [r4, #0]
 8006d44:	d504      	bpl.n	8006d50 <__sflush_r+0x7c>
 8006d46:	1c42      	adds	r2, r0, #1
 8006d48:	d101      	bne.n	8006d4e <__sflush_r+0x7a>
 8006d4a:	682b      	ldr	r3, [r5, #0]
 8006d4c:	b903      	cbnz	r3, 8006d50 <__sflush_r+0x7c>
 8006d4e:	6560      	str	r0, [r4, #84]	; 0x54
 8006d50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d52:	602f      	str	r7, [r5, #0]
 8006d54:	2900      	cmp	r1, #0
 8006d56:	d0ca      	beq.n	8006cee <__sflush_r+0x1a>
 8006d58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d5c:	4299      	cmp	r1, r3
 8006d5e:	d002      	beq.n	8006d66 <__sflush_r+0x92>
 8006d60:	4628      	mov	r0, r5
 8006d62:	f000 fd7d 	bl	8007860 <_free_r>
 8006d66:	2000      	movs	r0, #0
 8006d68:	6360      	str	r0, [r4, #52]	; 0x34
 8006d6a:	e7c1      	b.n	8006cf0 <__sflush_r+0x1c>
 8006d6c:	6a21      	ldr	r1, [r4, #32]
 8006d6e:	2301      	movs	r3, #1
 8006d70:	4628      	mov	r0, r5
 8006d72:	47b0      	blx	r6
 8006d74:	1c41      	adds	r1, r0, #1
 8006d76:	d1c7      	bne.n	8006d08 <__sflush_r+0x34>
 8006d78:	682b      	ldr	r3, [r5, #0]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d0c4      	beq.n	8006d08 <__sflush_r+0x34>
 8006d7e:	2b1d      	cmp	r3, #29
 8006d80:	d001      	beq.n	8006d86 <__sflush_r+0xb2>
 8006d82:	2b16      	cmp	r3, #22
 8006d84:	d101      	bne.n	8006d8a <__sflush_r+0xb6>
 8006d86:	602f      	str	r7, [r5, #0]
 8006d88:	e7b1      	b.n	8006cee <__sflush_r+0x1a>
 8006d8a:	89a3      	ldrh	r3, [r4, #12]
 8006d8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d90:	81a3      	strh	r3, [r4, #12]
 8006d92:	e7ad      	b.n	8006cf0 <__sflush_r+0x1c>
 8006d94:	690f      	ldr	r7, [r1, #16]
 8006d96:	2f00      	cmp	r7, #0
 8006d98:	d0a9      	beq.n	8006cee <__sflush_r+0x1a>
 8006d9a:	0793      	lsls	r3, r2, #30
 8006d9c:	680e      	ldr	r6, [r1, #0]
 8006d9e:	bf08      	it	eq
 8006da0:	694b      	ldreq	r3, [r1, #20]
 8006da2:	600f      	str	r7, [r1, #0]
 8006da4:	bf18      	it	ne
 8006da6:	2300      	movne	r3, #0
 8006da8:	eba6 0807 	sub.w	r8, r6, r7
 8006dac:	608b      	str	r3, [r1, #8]
 8006dae:	f1b8 0f00 	cmp.w	r8, #0
 8006db2:	dd9c      	ble.n	8006cee <__sflush_r+0x1a>
 8006db4:	6a21      	ldr	r1, [r4, #32]
 8006db6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006db8:	4643      	mov	r3, r8
 8006dba:	463a      	mov	r2, r7
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	47b0      	blx	r6
 8006dc0:	2800      	cmp	r0, #0
 8006dc2:	dc06      	bgt.n	8006dd2 <__sflush_r+0xfe>
 8006dc4:	89a3      	ldrh	r3, [r4, #12]
 8006dc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dca:	81a3      	strh	r3, [r4, #12]
 8006dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd0:	e78e      	b.n	8006cf0 <__sflush_r+0x1c>
 8006dd2:	4407      	add	r7, r0
 8006dd4:	eba8 0800 	sub.w	r8, r8, r0
 8006dd8:	e7e9      	b.n	8006dae <__sflush_r+0xda>
 8006dda:	bf00      	nop
 8006ddc:	20400001 	.word	0x20400001

08006de0 <_fflush_r>:
 8006de0:	b538      	push	{r3, r4, r5, lr}
 8006de2:	690b      	ldr	r3, [r1, #16]
 8006de4:	4605      	mov	r5, r0
 8006de6:	460c      	mov	r4, r1
 8006de8:	b913      	cbnz	r3, 8006df0 <_fflush_r+0x10>
 8006dea:	2500      	movs	r5, #0
 8006dec:	4628      	mov	r0, r5
 8006dee:	bd38      	pop	{r3, r4, r5, pc}
 8006df0:	b118      	cbz	r0, 8006dfa <_fflush_r+0x1a>
 8006df2:	6983      	ldr	r3, [r0, #24]
 8006df4:	b90b      	cbnz	r3, 8006dfa <_fflush_r+0x1a>
 8006df6:	f000 f887 	bl	8006f08 <__sinit>
 8006dfa:	4b14      	ldr	r3, [pc, #80]	; (8006e4c <_fflush_r+0x6c>)
 8006dfc:	429c      	cmp	r4, r3
 8006dfe:	d11b      	bne.n	8006e38 <_fflush_r+0x58>
 8006e00:	686c      	ldr	r4, [r5, #4]
 8006e02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d0ef      	beq.n	8006dea <_fflush_r+0xa>
 8006e0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e0c:	07d0      	lsls	r0, r2, #31
 8006e0e:	d404      	bmi.n	8006e1a <_fflush_r+0x3a>
 8006e10:	0599      	lsls	r1, r3, #22
 8006e12:	d402      	bmi.n	8006e1a <_fflush_r+0x3a>
 8006e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e16:	f000 f91a 	bl	800704e <__retarget_lock_acquire_recursive>
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	4621      	mov	r1, r4
 8006e1e:	f7ff ff59 	bl	8006cd4 <__sflush_r>
 8006e22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e24:	07da      	lsls	r2, r3, #31
 8006e26:	4605      	mov	r5, r0
 8006e28:	d4e0      	bmi.n	8006dec <_fflush_r+0xc>
 8006e2a:	89a3      	ldrh	r3, [r4, #12]
 8006e2c:	059b      	lsls	r3, r3, #22
 8006e2e:	d4dd      	bmi.n	8006dec <_fflush_r+0xc>
 8006e30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e32:	f000 f90d 	bl	8007050 <__retarget_lock_release_recursive>
 8006e36:	e7d9      	b.n	8006dec <_fflush_r+0xc>
 8006e38:	4b05      	ldr	r3, [pc, #20]	; (8006e50 <_fflush_r+0x70>)
 8006e3a:	429c      	cmp	r4, r3
 8006e3c:	d101      	bne.n	8006e42 <_fflush_r+0x62>
 8006e3e:	68ac      	ldr	r4, [r5, #8]
 8006e40:	e7df      	b.n	8006e02 <_fflush_r+0x22>
 8006e42:	4b04      	ldr	r3, [pc, #16]	; (8006e54 <_fflush_r+0x74>)
 8006e44:	429c      	cmp	r4, r3
 8006e46:	bf08      	it	eq
 8006e48:	68ec      	ldreq	r4, [r5, #12]
 8006e4a:	e7da      	b.n	8006e02 <_fflush_r+0x22>
 8006e4c:	0800825c 	.word	0x0800825c
 8006e50:	0800827c 	.word	0x0800827c
 8006e54:	0800823c 	.word	0x0800823c

08006e58 <std>:
 8006e58:	2300      	movs	r3, #0
 8006e5a:	b510      	push	{r4, lr}
 8006e5c:	4604      	mov	r4, r0
 8006e5e:	e9c0 3300 	strd	r3, r3, [r0]
 8006e62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e66:	6083      	str	r3, [r0, #8]
 8006e68:	8181      	strh	r1, [r0, #12]
 8006e6a:	6643      	str	r3, [r0, #100]	; 0x64
 8006e6c:	81c2      	strh	r2, [r0, #14]
 8006e6e:	6183      	str	r3, [r0, #24]
 8006e70:	4619      	mov	r1, r3
 8006e72:	2208      	movs	r2, #8
 8006e74:	305c      	adds	r0, #92	; 0x5c
 8006e76:	f7fe fadd 	bl	8005434 <memset>
 8006e7a:	4b05      	ldr	r3, [pc, #20]	; (8006e90 <std+0x38>)
 8006e7c:	6263      	str	r3, [r4, #36]	; 0x24
 8006e7e:	4b05      	ldr	r3, [pc, #20]	; (8006e94 <std+0x3c>)
 8006e80:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e82:	4b05      	ldr	r3, [pc, #20]	; (8006e98 <std+0x40>)
 8006e84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e86:	4b05      	ldr	r3, [pc, #20]	; (8006e9c <std+0x44>)
 8006e88:	6224      	str	r4, [r4, #32]
 8006e8a:	6323      	str	r3, [r4, #48]	; 0x30
 8006e8c:	bd10      	pop	{r4, pc}
 8006e8e:	bf00      	nop
 8006e90:	08007d85 	.word	0x08007d85
 8006e94:	08007da7 	.word	0x08007da7
 8006e98:	08007ddf 	.word	0x08007ddf
 8006e9c:	08007e03 	.word	0x08007e03

08006ea0 <_cleanup_r>:
 8006ea0:	4901      	ldr	r1, [pc, #4]	; (8006ea8 <_cleanup_r+0x8>)
 8006ea2:	f000 b8af 	b.w	8007004 <_fwalk_reent>
 8006ea6:	bf00      	nop
 8006ea8:	08006de1 	.word	0x08006de1

08006eac <__sfmoreglue>:
 8006eac:	b570      	push	{r4, r5, r6, lr}
 8006eae:	2268      	movs	r2, #104	; 0x68
 8006eb0:	1e4d      	subs	r5, r1, #1
 8006eb2:	4355      	muls	r5, r2
 8006eb4:	460e      	mov	r6, r1
 8006eb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006eba:	f000 fd3d 	bl	8007938 <_malloc_r>
 8006ebe:	4604      	mov	r4, r0
 8006ec0:	b140      	cbz	r0, 8006ed4 <__sfmoreglue+0x28>
 8006ec2:	2100      	movs	r1, #0
 8006ec4:	e9c0 1600 	strd	r1, r6, [r0]
 8006ec8:	300c      	adds	r0, #12
 8006eca:	60a0      	str	r0, [r4, #8]
 8006ecc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006ed0:	f7fe fab0 	bl	8005434 <memset>
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	bd70      	pop	{r4, r5, r6, pc}

08006ed8 <__sfp_lock_acquire>:
 8006ed8:	4801      	ldr	r0, [pc, #4]	; (8006ee0 <__sfp_lock_acquire+0x8>)
 8006eda:	f000 b8b8 	b.w	800704e <__retarget_lock_acquire_recursive>
 8006ede:	bf00      	nop
 8006ee0:	2000032d 	.word	0x2000032d

08006ee4 <__sfp_lock_release>:
 8006ee4:	4801      	ldr	r0, [pc, #4]	; (8006eec <__sfp_lock_release+0x8>)
 8006ee6:	f000 b8b3 	b.w	8007050 <__retarget_lock_release_recursive>
 8006eea:	bf00      	nop
 8006eec:	2000032d 	.word	0x2000032d

08006ef0 <__sinit_lock_acquire>:
 8006ef0:	4801      	ldr	r0, [pc, #4]	; (8006ef8 <__sinit_lock_acquire+0x8>)
 8006ef2:	f000 b8ac 	b.w	800704e <__retarget_lock_acquire_recursive>
 8006ef6:	bf00      	nop
 8006ef8:	2000032e 	.word	0x2000032e

08006efc <__sinit_lock_release>:
 8006efc:	4801      	ldr	r0, [pc, #4]	; (8006f04 <__sinit_lock_release+0x8>)
 8006efe:	f000 b8a7 	b.w	8007050 <__retarget_lock_release_recursive>
 8006f02:	bf00      	nop
 8006f04:	2000032e 	.word	0x2000032e

08006f08 <__sinit>:
 8006f08:	b510      	push	{r4, lr}
 8006f0a:	4604      	mov	r4, r0
 8006f0c:	f7ff fff0 	bl	8006ef0 <__sinit_lock_acquire>
 8006f10:	69a3      	ldr	r3, [r4, #24]
 8006f12:	b11b      	cbz	r3, 8006f1c <__sinit+0x14>
 8006f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f18:	f7ff bff0 	b.w	8006efc <__sinit_lock_release>
 8006f1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006f20:	6523      	str	r3, [r4, #80]	; 0x50
 8006f22:	4b13      	ldr	r3, [pc, #76]	; (8006f70 <__sinit+0x68>)
 8006f24:	4a13      	ldr	r2, [pc, #76]	; (8006f74 <__sinit+0x6c>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	62a2      	str	r2, [r4, #40]	; 0x28
 8006f2a:	42a3      	cmp	r3, r4
 8006f2c:	bf04      	itt	eq
 8006f2e:	2301      	moveq	r3, #1
 8006f30:	61a3      	streq	r3, [r4, #24]
 8006f32:	4620      	mov	r0, r4
 8006f34:	f000 f820 	bl	8006f78 <__sfp>
 8006f38:	6060      	str	r0, [r4, #4]
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	f000 f81c 	bl	8006f78 <__sfp>
 8006f40:	60a0      	str	r0, [r4, #8]
 8006f42:	4620      	mov	r0, r4
 8006f44:	f000 f818 	bl	8006f78 <__sfp>
 8006f48:	2200      	movs	r2, #0
 8006f4a:	60e0      	str	r0, [r4, #12]
 8006f4c:	2104      	movs	r1, #4
 8006f4e:	6860      	ldr	r0, [r4, #4]
 8006f50:	f7ff ff82 	bl	8006e58 <std>
 8006f54:	68a0      	ldr	r0, [r4, #8]
 8006f56:	2201      	movs	r2, #1
 8006f58:	2109      	movs	r1, #9
 8006f5a:	f7ff ff7d 	bl	8006e58 <std>
 8006f5e:	68e0      	ldr	r0, [r4, #12]
 8006f60:	2202      	movs	r2, #2
 8006f62:	2112      	movs	r1, #18
 8006f64:	f7ff ff78 	bl	8006e58 <std>
 8006f68:	2301      	movs	r3, #1
 8006f6a:	61a3      	str	r3, [r4, #24]
 8006f6c:	e7d2      	b.n	8006f14 <__sinit+0xc>
 8006f6e:	bf00      	nop
 8006f70:	08008174 	.word	0x08008174
 8006f74:	08006ea1 	.word	0x08006ea1

08006f78 <__sfp>:
 8006f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f7a:	4607      	mov	r7, r0
 8006f7c:	f7ff ffac 	bl	8006ed8 <__sfp_lock_acquire>
 8006f80:	4b1e      	ldr	r3, [pc, #120]	; (8006ffc <__sfp+0x84>)
 8006f82:	681e      	ldr	r6, [r3, #0]
 8006f84:	69b3      	ldr	r3, [r6, #24]
 8006f86:	b913      	cbnz	r3, 8006f8e <__sfp+0x16>
 8006f88:	4630      	mov	r0, r6
 8006f8a:	f7ff ffbd 	bl	8006f08 <__sinit>
 8006f8e:	3648      	adds	r6, #72	; 0x48
 8006f90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f94:	3b01      	subs	r3, #1
 8006f96:	d503      	bpl.n	8006fa0 <__sfp+0x28>
 8006f98:	6833      	ldr	r3, [r6, #0]
 8006f9a:	b30b      	cbz	r3, 8006fe0 <__sfp+0x68>
 8006f9c:	6836      	ldr	r6, [r6, #0]
 8006f9e:	e7f7      	b.n	8006f90 <__sfp+0x18>
 8006fa0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006fa4:	b9d5      	cbnz	r5, 8006fdc <__sfp+0x64>
 8006fa6:	4b16      	ldr	r3, [pc, #88]	; (8007000 <__sfp+0x88>)
 8006fa8:	60e3      	str	r3, [r4, #12]
 8006faa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006fae:	6665      	str	r5, [r4, #100]	; 0x64
 8006fb0:	f000 f84c 	bl	800704c <__retarget_lock_init_recursive>
 8006fb4:	f7ff ff96 	bl	8006ee4 <__sfp_lock_release>
 8006fb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006fbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006fc0:	6025      	str	r5, [r4, #0]
 8006fc2:	61a5      	str	r5, [r4, #24]
 8006fc4:	2208      	movs	r2, #8
 8006fc6:	4629      	mov	r1, r5
 8006fc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006fcc:	f7fe fa32 	bl	8005434 <memset>
 8006fd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006fd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006fd8:	4620      	mov	r0, r4
 8006fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fdc:	3468      	adds	r4, #104	; 0x68
 8006fde:	e7d9      	b.n	8006f94 <__sfp+0x1c>
 8006fe0:	2104      	movs	r1, #4
 8006fe2:	4638      	mov	r0, r7
 8006fe4:	f7ff ff62 	bl	8006eac <__sfmoreglue>
 8006fe8:	4604      	mov	r4, r0
 8006fea:	6030      	str	r0, [r6, #0]
 8006fec:	2800      	cmp	r0, #0
 8006fee:	d1d5      	bne.n	8006f9c <__sfp+0x24>
 8006ff0:	f7ff ff78 	bl	8006ee4 <__sfp_lock_release>
 8006ff4:	230c      	movs	r3, #12
 8006ff6:	603b      	str	r3, [r7, #0]
 8006ff8:	e7ee      	b.n	8006fd8 <__sfp+0x60>
 8006ffa:	bf00      	nop
 8006ffc:	08008174 	.word	0x08008174
 8007000:	ffff0001 	.word	0xffff0001

08007004 <_fwalk_reent>:
 8007004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007008:	4606      	mov	r6, r0
 800700a:	4688      	mov	r8, r1
 800700c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007010:	2700      	movs	r7, #0
 8007012:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007016:	f1b9 0901 	subs.w	r9, r9, #1
 800701a:	d505      	bpl.n	8007028 <_fwalk_reent+0x24>
 800701c:	6824      	ldr	r4, [r4, #0]
 800701e:	2c00      	cmp	r4, #0
 8007020:	d1f7      	bne.n	8007012 <_fwalk_reent+0xe>
 8007022:	4638      	mov	r0, r7
 8007024:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007028:	89ab      	ldrh	r3, [r5, #12]
 800702a:	2b01      	cmp	r3, #1
 800702c:	d907      	bls.n	800703e <_fwalk_reent+0x3a>
 800702e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007032:	3301      	adds	r3, #1
 8007034:	d003      	beq.n	800703e <_fwalk_reent+0x3a>
 8007036:	4629      	mov	r1, r5
 8007038:	4630      	mov	r0, r6
 800703a:	47c0      	blx	r8
 800703c:	4307      	orrs	r7, r0
 800703e:	3568      	adds	r5, #104	; 0x68
 8007040:	e7e9      	b.n	8007016 <_fwalk_reent+0x12>
	...

08007044 <_localeconv_r>:
 8007044:	4800      	ldr	r0, [pc, #0]	; (8007048 <_localeconv_r+0x4>)
 8007046:	4770      	bx	lr
 8007048:	20000164 	.word	0x20000164

0800704c <__retarget_lock_init_recursive>:
 800704c:	4770      	bx	lr

0800704e <__retarget_lock_acquire_recursive>:
 800704e:	4770      	bx	lr

08007050 <__retarget_lock_release_recursive>:
 8007050:	4770      	bx	lr

08007052 <__swhatbuf_r>:
 8007052:	b570      	push	{r4, r5, r6, lr}
 8007054:	460e      	mov	r6, r1
 8007056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800705a:	2900      	cmp	r1, #0
 800705c:	b096      	sub	sp, #88	; 0x58
 800705e:	4614      	mov	r4, r2
 8007060:	461d      	mov	r5, r3
 8007062:	da08      	bge.n	8007076 <__swhatbuf_r+0x24>
 8007064:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007068:	2200      	movs	r2, #0
 800706a:	602a      	str	r2, [r5, #0]
 800706c:	061a      	lsls	r2, r3, #24
 800706e:	d410      	bmi.n	8007092 <__swhatbuf_r+0x40>
 8007070:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007074:	e00e      	b.n	8007094 <__swhatbuf_r+0x42>
 8007076:	466a      	mov	r2, sp
 8007078:	f000 ff1a 	bl	8007eb0 <_fstat_r>
 800707c:	2800      	cmp	r0, #0
 800707e:	dbf1      	blt.n	8007064 <__swhatbuf_r+0x12>
 8007080:	9a01      	ldr	r2, [sp, #4]
 8007082:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007086:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800708a:	425a      	negs	r2, r3
 800708c:	415a      	adcs	r2, r3
 800708e:	602a      	str	r2, [r5, #0]
 8007090:	e7ee      	b.n	8007070 <__swhatbuf_r+0x1e>
 8007092:	2340      	movs	r3, #64	; 0x40
 8007094:	2000      	movs	r0, #0
 8007096:	6023      	str	r3, [r4, #0]
 8007098:	b016      	add	sp, #88	; 0x58
 800709a:	bd70      	pop	{r4, r5, r6, pc}

0800709c <__smakebuf_r>:
 800709c:	898b      	ldrh	r3, [r1, #12]
 800709e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80070a0:	079d      	lsls	r5, r3, #30
 80070a2:	4606      	mov	r6, r0
 80070a4:	460c      	mov	r4, r1
 80070a6:	d507      	bpl.n	80070b8 <__smakebuf_r+0x1c>
 80070a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80070ac:	6023      	str	r3, [r4, #0]
 80070ae:	6123      	str	r3, [r4, #16]
 80070b0:	2301      	movs	r3, #1
 80070b2:	6163      	str	r3, [r4, #20]
 80070b4:	b002      	add	sp, #8
 80070b6:	bd70      	pop	{r4, r5, r6, pc}
 80070b8:	ab01      	add	r3, sp, #4
 80070ba:	466a      	mov	r2, sp
 80070bc:	f7ff ffc9 	bl	8007052 <__swhatbuf_r>
 80070c0:	9900      	ldr	r1, [sp, #0]
 80070c2:	4605      	mov	r5, r0
 80070c4:	4630      	mov	r0, r6
 80070c6:	f000 fc37 	bl	8007938 <_malloc_r>
 80070ca:	b948      	cbnz	r0, 80070e0 <__smakebuf_r+0x44>
 80070cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070d0:	059a      	lsls	r2, r3, #22
 80070d2:	d4ef      	bmi.n	80070b4 <__smakebuf_r+0x18>
 80070d4:	f023 0303 	bic.w	r3, r3, #3
 80070d8:	f043 0302 	orr.w	r3, r3, #2
 80070dc:	81a3      	strh	r3, [r4, #12]
 80070de:	e7e3      	b.n	80070a8 <__smakebuf_r+0xc>
 80070e0:	4b0d      	ldr	r3, [pc, #52]	; (8007118 <__smakebuf_r+0x7c>)
 80070e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80070e4:	89a3      	ldrh	r3, [r4, #12]
 80070e6:	6020      	str	r0, [r4, #0]
 80070e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070ec:	81a3      	strh	r3, [r4, #12]
 80070ee:	9b00      	ldr	r3, [sp, #0]
 80070f0:	6163      	str	r3, [r4, #20]
 80070f2:	9b01      	ldr	r3, [sp, #4]
 80070f4:	6120      	str	r0, [r4, #16]
 80070f6:	b15b      	cbz	r3, 8007110 <__smakebuf_r+0x74>
 80070f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070fc:	4630      	mov	r0, r6
 80070fe:	f000 fee9 	bl	8007ed4 <_isatty_r>
 8007102:	b128      	cbz	r0, 8007110 <__smakebuf_r+0x74>
 8007104:	89a3      	ldrh	r3, [r4, #12]
 8007106:	f023 0303 	bic.w	r3, r3, #3
 800710a:	f043 0301 	orr.w	r3, r3, #1
 800710e:	81a3      	strh	r3, [r4, #12]
 8007110:	89a0      	ldrh	r0, [r4, #12]
 8007112:	4305      	orrs	r5, r0
 8007114:	81a5      	strh	r5, [r4, #12]
 8007116:	e7cd      	b.n	80070b4 <__smakebuf_r+0x18>
 8007118:	08006ea1 	.word	0x08006ea1

0800711c <malloc>:
 800711c:	4b02      	ldr	r3, [pc, #8]	; (8007128 <malloc+0xc>)
 800711e:	4601      	mov	r1, r0
 8007120:	6818      	ldr	r0, [r3, #0]
 8007122:	f000 bc09 	b.w	8007938 <_malloc_r>
 8007126:	bf00      	nop
 8007128:	20000010 	.word	0x20000010

0800712c <_Balloc>:
 800712c:	b570      	push	{r4, r5, r6, lr}
 800712e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007130:	4604      	mov	r4, r0
 8007132:	460d      	mov	r5, r1
 8007134:	b976      	cbnz	r6, 8007154 <_Balloc+0x28>
 8007136:	2010      	movs	r0, #16
 8007138:	f7ff fff0 	bl	800711c <malloc>
 800713c:	4602      	mov	r2, r0
 800713e:	6260      	str	r0, [r4, #36]	; 0x24
 8007140:	b920      	cbnz	r0, 800714c <_Balloc+0x20>
 8007142:	4b18      	ldr	r3, [pc, #96]	; (80071a4 <_Balloc+0x78>)
 8007144:	4818      	ldr	r0, [pc, #96]	; (80071a8 <_Balloc+0x7c>)
 8007146:	2166      	movs	r1, #102	; 0x66
 8007148:	f000 fe72 	bl	8007e30 <__assert_func>
 800714c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007150:	6006      	str	r6, [r0, #0]
 8007152:	60c6      	str	r6, [r0, #12]
 8007154:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007156:	68f3      	ldr	r3, [r6, #12]
 8007158:	b183      	cbz	r3, 800717c <_Balloc+0x50>
 800715a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007162:	b9b8      	cbnz	r0, 8007194 <_Balloc+0x68>
 8007164:	2101      	movs	r1, #1
 8007166:	fa01 f605 	lsl.w	r6, r1, r5
 800716a:	1d72      	adds	r2, r6, #5
 800716c:	0092      	lsls	r2, r2, #2
 800716e:	4620      	mov	r0, r4
 8007170:	f000 fb60 	bl	8007834 <_calloc_r>
 8007174:	b160      	cbz	r0, 8007190 <_Balloc+0x64>
 8007176:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800717a:	e00e      	b.n	800719a <_Balloc+0x6e>
 800717c:	2221      	movs	r2, #33	; 0x21
 800717e:	2104      	movs	r1, #4
 8007180:	4620      	mov	r0, r4
 8007182:	f000 fb57 	bl	8007834 <_calloc_r>
 8007186:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007188:	60f0      	str	r0, [r6, #12]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d1e4      	bne.n	800715a <_Balloc+0x2e>
 8007190:	2000      	movs	r0, #0
 8007192:	bd70      	pop	{r4, r5, r6, pc}
 8007194:	6802      	ldr	r2, [r0, #0]
 8007196:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800719a:	2300      	movs	r3, #0
 800719c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80071a0:	e7f7      	b.n	8007192 <_Balloc+0x66>
 80071a2:	bf00      	nop
 80071a4:	080081b9 	.word	0x080081b9
 80071a8:	0800829c 	.word	0x0800829c

080071ac <_Bfree>:
 80071ac:	b570      	push	{r4, r5, r6, lr}
 80071ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80071b0:	4605      	mov	r5, r0
 80071b2:	460c      	mov	r4, r1
 80071b4:	b976      	cbnz	r6, 80071d4 <_Bfree+0x28>
 80071b6:	2010      	movs	r0, #16
 80071b8:	f7ff ffb0 	bl	800711c <malloc>
 80071bc:	4602      	mov	r2, r0
 80071be:	6268      	str	r0, [r5, #36]	; 0x24
 80071c0:	b920      	cbnz	r0, 80071cc <_Bfree+0x20>
 80071c2:	4b09      	ldr	r3, [pc, #36]	; (80071e8 <_Bfree+0x3c>)
 80071c4:	4809      	ldr	r0, [pc, #36]	; (80071ec <_Bfree+0x40>)
 80071c6:	218a      	movs	r1, #138	; 0x8a
 80071c8:	f000 fe32 	bl	8007e30 <__assert_func>
 80071cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071d0:	6006      	str	r6, [r0, #0]
 80071d2:	60c6      	str	r6, [r0, #12]
 80071d4:	b13c      	cbz	r4, 80071e6 <_Bfree+0x3a>
 80071d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80071d8:	6862      	ldr	r2, [r4, #4]
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80071e0:	6021      	str	r1, [r4, #0]
 80071e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80071e6:	bd70      	pop	{r4, r5, r6, pc}
 80071e8:	080081b9 	.word	0x080081b9
 80071ec:	0800829c 	.word	0x0800829c

080071f0 <__multadd>:
 80071f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071f4:	690d      	ldr	r5, [r1, #16]
 80071f6:	4607      	mov	r7, r0
 80071f8:	460c      	mov	r4, r1
 80071fa:	461e      	mov	r6, r3
 80071fc:	f101 0c14 	add.w	ip, r1, #20
 8007200:	2000      	movs	r0, #0
 8007202:	f8dc 3000 	ldr.w	r3, [ip]
 8007206:	b299      	uxth	r1, r3
 8007208:	fb02 6101 	mla	r1, r2, r1, r6
 800720c:	0c1e      	lsrs	r6, r3, #16
 800720e:	0c0b      	lsrs	r3, r1, #16
 8007210:	fb02 3306 	mla	r3, r2, r6, r3
 8007214:	b289      	uxth	r1, r1
 8007216:	3001      	adds	r0, #1
 8007218:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800721c:	4285      	cmp	r5, r0
 800721e:	f84c 1b04 	str.w	r1, [ip], #4
 8007222:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007226:	dcec      	bgt.n	8007202 <__multadd+0x12>
 8007228:	b30e      	cbz	r6, 800726e <__multadd+0x7e>
 800722a:	68a3      	ldr	r3, [r4, #8]
 800722c:	42ab      	cmp	r3, r5
 800722e:	dc19      	bgt.n	8007264 <__multadd+0x74>
 8007230:	6861      	ldr	r1, [r4, #4]
 8007232:	4638      	mov	r0, r7
 8007234:	3101      	adds	r1, #1
 8007236:	f7ff ff79 	bl	800712c <_Balloc>
 800723a:	4680      	mov	r8, r0
 800723c:	b928      	cbnz	r0, 800724a <__multadd+0x5a>
 800723e:	4602      	mov	r2, r0
 8007240:	4b0c      	ldr	r3, [pc, #48]	; (8007274 <__multadd+0x84>)
 8007242:	480d      	ldr	r0, [pc, #52]	; (8007278 <__multadd+0x88>)
 8007244:	21b5      	movs	r1, #181	; 0xb5
 8007246:	f000 fdf3 	bl	8007e30 <__assert_func>
 800724a:	6922      	ldr	r2, [r4, #16]
 800724c:	3202      	adds	r2, #2
 800724e:	f104 010c 	add.w	r1, r4, #12
 8007252:	0092      	lsls	r2, r2, #2
 8007254:	300c      	adds	r0, #12
 8007256:	f7fe f8df 	bl	8005418 <memcpy>
 800725a:	4621      	mov	r1, r4
 800725c:	4638      	mov	r0, r7
 800725e:	f7ff ffa5 	bl	80071ac <_Bfree>
 8007262:	4644      	mov	r4, r8
 8007264:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007268:	3501      	adds	r5, #1
 800726a:	615e      	str	r6, [r3, #20]
 800726c:	6125      	str	r5, [r4, #16]
 800726e:	4620      	mov	r0, r4
 8007270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007274:	0800822b 	.word	0x0800822b
 8007278:	0800829c 	.word	0x0800829c

0800727c <__hi0bits>:
 800727c:	0c03      	lsrs	r3, r0, #16
 800727e:	041b      	lsls	r3, r3, #16
 8007280:	b9d3      	cbnz	r3, 80072b8 <__hi0bits+0x3c>
 8007282:	0400      	lsls	r0, r0, #16
 8007284:	2310      	movs	r3, #16
 8007286:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800728a:	bf04      	itt	eq
 800728c:	0200      	lsleq	r0, r0, #8
 800728e:	3308      	addeq	r3, #8
 8007290:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007294:	bf04      	itt	eq
 8007296:	0100      	lsleq	r0, r0, #4
 8007298:	3304      	addeq	r3, #4
 800729a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800729e:	bf04      	itt	eq
 80072a0:	0080      	lsleq	r0, r0, #2
 80072a2:	3302      	addeq	r3, #2
 80072a4:	2800      	cmp	r0, #0
 80072a6:	db05      	blt.n	80072b4 <__hi0bits+0x38>
 80072a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80072ac:	f103 0301 	add.w	r3, r3, #1
 80072b0:	bf08      	it	eq
 80072b2:	2320      	moveq	r3, #32
 80072b4:	4618      	mov	r0, r3
 80072b6:	4770      	bx	lr
 80072b8:	2300      	movs	r3, #0
 80072ba:	e7e4      	b.n	8007286 <__hi0bits+0xa>

080072bc <__lo0bits>:
 80072bc:	6803      	ldr	r3, [r0, #0]
 80072be:	f013 0207 	ands.w	r2, r3, #7
 80072c2:	4601      	mov	r1, r0
 80072c4:	d00b      	beq.n	80072de <__lo0bits+0x22>
 80072c6:	07da      	lsls	r2, r3, #31
 80072c8:	d423      	bmi.n	8007312 <__lo0bits+0x56>
 80072ca:	0798      	lsls	r0, r3, #30
 80072cc:	bf49      	itett	mi
 80072ce:	085b      	lsrmi	r3, r3, #1
 80072d0:	089b      	lsrpl	r3, r3, #2
 80072d2:	2001      	movmi	r0, #1
 80072d4:	600b      	strmi	r3, [r1, #0]
 80072d6:	bf5c      	itt	pl
 80072d8:	600b      	strpl	r3, [r1, #0]
 80072da:	2002      	movpl	r0, #2
 80072dc:	4770      	bx	lr
 80072de:	b298      	uxth	r0, r3
 80072e0:	b9a8      	cbnz	r0, 800730e <__lo0bits+0x52>
 80072e2:	0c1b      	lsrs	r3, r3, #16
 80072e4:	2010      	movs	r0, #16
 80072e6:	b2da      	uxtb	r2, r3
 80072e8:	b90a      	cbnz	r2, 80072ee <__lo0bits+0x32>
 80072ea:	3008      	adds	r0, #8
 80072ec:	0a1b      	lsrs	r3, r3, #8
 80072ee:	071a      	lsls	r2, r3, #28
 80072f0:	bf04      	itt	eq
 80072f2:	091b      	lsreq	r3, r3, #4
 80072f4:	3004      	addeq	r0, #4
 80072f6:	079a      	lsls	r2, r3, #30
 80072f8:	bf04      	itt	eq
 80072fa:	089b      	lsreq	r3, r3, #2
 80072fc:	3002      	addeq	r0, #2
 80072fe:	07da      	lsls	r2, r3, #31
 8007300:	d403      	bmi.n	800730a <__lo0bits+0x4e>
 8007302:	085b      	lsrs	r3, r3, #1
 8007304:	f100 0001 	add.w	r0, r0, #1
 8007308:	d005      	beq.n	8007316 <__lo0bits+0x5a>
 800730a:	600b      	str	r3, [r1, #0]
 800730c:	4770      	bx	lr
 800730e:	4610      	mov	r0, r2
 8007310:	e7e9      	b.n	80072e6 <__lo0bits+0x2a>
 8007312:	2000      	movs	r0, #0
 8007314:	4770      	bx	lr
 8007316:	2020      	movs	r0, #32
 8007318:	4770      	bx	lr
	...

0800731c <__i2b>:
 800731c:	b510      	push	{r4, lr}
 800731e:	460c      	mov	r4, r1
 8007320:	2101      	movs	r1, #1
 8007322:	f7ff ff03 	bl	800712c <_Balloc>
 8007326:	4602      	mov	r2, r0
 8007328:	b928      	cbnz	r0, 8007336 <__i2b+0x1a>
 800732a:	4b05      	ldr	r3, [pc, #20]	; (8007340 <__i2b+0x24>)
 800732c:	4805      	ldr	r0, [pc, #20]	; (8007344 <__i2b+0x28>)
 800732e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007332:	f000 fd7d 	bl	8007e30 <__assert_func>
 8007336:	2301      	movs	r3, #1
 8007338:	6144      	str	r4, [r0, #20]
 800733a:	6103      	str	r3, [r0, #16]
 800733c:	bd10      	pop	{r4, pc}
 800733e:	bf00      	nop
 8007340:	0800822b 	.word	0x0800822b
 8007344:	0800829c 	.word	0x0800829c

08007348 <__multiply>:
 8007348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800734c:	4691      	mov	r9, r2
 800734e:	690a      	ldr	r2, [r1, #16]
 8007350:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007354:	429a      	cmp	r2, r3
 8007356:	bfb8      	it	lt
 8007358:	460b      	movlt	r3, r1
 800735a:	460c      	mov	r4, r1
 800735c:	bfbc      	itt	lt
 800735e:	464c      	movlt	r4, r9
 8007360:	4699      	movlt	r9, r3
 8007362:	6927      	ldr	r7, [r4, #16]
 8007364:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007368:	68a3      	ldr	r3, [r4, #8]
 800736a:	6861      	ldr	r1, [r4, #4]
 800736c:	eb07 060a 	add.w	r6, r7, sl
 8007370:	42b3      	cmp	r3, r6
 8007372:	b085      	sub	sp, #20
 8007374:	bfb8      	it	lt
 8007376:	3101      	addlt	r1, #1
 8007378:	f7ff fed8 	bl	800712c <_Balloc>
 800737c:	b930      	cbnz	r0, 800738c <__multiply+0x44>
 800737e:	4602      	mov	r2, r0
 8007380:	4b44      	ldr	r3, [pc, #272]	; (8007494 <__multiply+0x14c>)
 8007382:	4845      	ldr	r0, [pc, #276]	; (8007498 <__multiply+0x150>)
 8007384:	f240 115d 	movw	r1, #349	; 0x15d
 8007388:	f000 fd52 	bl	8007e30 <__assert_func>
 800738c:	f100 0514 	add.w	r5, r0, #20
 8007390:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007394:	462b      	mov	r3, r5
 8007396:	2200      	movs	r2, #0
 8007398:	4543      	cmp	r3, r8
 800739a:	d321      	bcc.n	80073e0 <__multiply+0x98>
 800739c:	f104 0314 	add.w	r3, r4, #20
 80073a0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80073a4:	f109 0314 	add.w	r3, r9, #20
 80073a8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80073ac:	9202      	str	r2, [sp, #8]
 80073ae:	1b3a      	subs	r2, r7, r4
 80073b0:	3a15      	subs	r2, #21
 80073b2:	f022 0203 	bic.w	r2, r2, #3
 80073b6:	3204      	adds	r2, #4
 80073b8:	f104 0115 	add.w	r1, r4, #21
 80073bc:	428f      	cmp	r7, r1
 80073be:	bf38      	it	cc
 80073c0:	2204      	movcc	r2, #4
 80073c2:	9201      	str	r2, [sp, #4]
 80073c4:	9a02      	ldr	r2, [sp, #8]
 80073c6:	9303      	str	r3, [sp, #12]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d80c      	bhi.n	80073e6 <__multiply+0x9e>
 80073cc:	2e00      	cmp	r6, #0
 80073ce:	dd03      	ble.n	80073d8 <__multiply+0x90>
 80073d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d05a      	beq.n	800748e <__multiply+0x146>
 80073d8:	6106      	str	r6, [r0, #16]
 80073da:	b005      	add	sp, #20
 80073dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073e0:	f843 2b04 	str.w	r2, [r3], #4
 80073e4:	e7d8      	b.n	8007398 <__multiply+0x50>
 80073e6:	f8b3 a000 	ldrh.w	sl, [r3]
 80073ea:	f1ba 0f00 	cmp.w	sl, #0
 80073ee:	d024      	beq.n	800743a <__multiply+0xf2>
 80073f0:	f104 0e14 	add.w	lr, r4, #20
 80073f4:	46a9      	mov	r9, r5
 80073f6:	f04f 0c00 	mov.w	ip, #0
 80073fa:	f85e 2b04 	ldr.w	r2, [lr], #4
 80073fe:	f8d9 1000 	ldr.w	r1, [r9]
 8007402:	fa1f fb82 	uxth.w	fp, r2
 8007406:	b289      	uxth	r1, r1
 8007408:	fb0a 110b 	mla	r1, sl, fp, r1
 800740c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007410:	f8d9 2000 	ldr.w	r2, [r9]
 8007414:	4461      	add	r1, ip
 8007416:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800741a:	fb0a c20b 	mla	r2, sl, fp, ip
 800741e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007422:	b289      	uxth	r1, r1
 8007424:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007428:	4577      	cmp	r7, lr
 800742a:	f849 1b04 	str.w	r1, [r9], #4
 800742e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007432:	d8e2      	bhi.n	80073fa <__multiply+0xb2>
 8007434:	9a01      	ldr	r2, [sp, #4]
 8007436:	f845 c002 	str.w	ip, [r5, r2]
 800743a:	9a03      	ldr	r2, [sp, #12]
 800743c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007440:	3304      	adds	r3, #4
 8007442:	f1b9 0f00 	cmp.w	r9, #0
 8007446:	d020      	beq.n	800748a <__multiply+0x142>
 8007448:	6829      	ldr	r1, [r5, #0]
 800744a:	f104 0c14 	add.w	ip, r4, #20
 800744e:	46ae      	mov	lr, r5
 8007450:	f04f 0a00 	mov.w	sl, #0
 8007454:	f8bc b000 	ldrh.w	fp, [ip]
 8007458:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800745c:	fb09 220b 	mla	r2, r9, fp, r2
 8007460:	4492      	add	sl, r2
 8007462:	b289      	uxth	r1, r1
 8007464:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007468:	f84e 1b04 	str.w	r1, [lr], #4
 800746c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007470:	f8be 1000 	ldrh.w	r1, [lr]
 8007474:	0c12      	lsrs	r2, r2, #16
 8007476:	fb09 1102 	mla	r1, r9, r2, r1
 800747a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800747e:	4567      	cmp	r7, ip
 8007480:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007484:	d8e6      	bhi.n	8007454 <__multiply+0x10c>
 8007486:	9a01      	ldr	r2, [sp, #4]
 8007488:	50a9      	str	r1, [r5, r2]
 800748a:	3504      	adds	r5, #4
 800748c:	e79a      	b.n	80073c4 <__multiply+0x7c>
 800748e:	3e01      	subs	r6, #1
 8007490:	e79c      	b.n	80073cc <__multiply+0x84>
 8007492:	bf00      	nop
 8007494:	0800822b 	.word	0x0800822b
 8007498:	0800829c 	.word	0x0800829c

0800749c <__pow5mult>:
 800749c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074a0:	4615      	mov	r5, r2
 80074a2:	f012 0203 	ands.w	r2, r2, #3
 80074a6:	4606      	mov	r6, r0
 80074a8:	460f      	mov	r7, r1
 80074aa:	d007      	beq.n	80074bc <__pow5mult+0x20>
 80074ac:	4c25      	ldr	r4, [pc, #148]	; (8007544 <__pow5mult+0xa8>)
 80074ae:	3a01      	subs	r2, #1
 80074b0:	2300      	movs	r3, #0
 80074b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80074b6:	f7ff fe9b 	bl	80071f0 <__multadd>
 80074ba:	4607      	mov	r7, r0
 80074bc:	10ad      	asrs	r5, r5, #2
 80074be:	d03d      	beq.n	800753c <__pow5mult+0xa0>
 80074c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80074c2:	b97c      	cbnz	r4, 80074e4 <__pow5mult+0x48>
 80074c4:	2010      	movs	r0, #16
 80074c6:	f7ff fe29 	bl	800711c <malloc>
 80074ca:	4602      	mov	r2, r0
 80074cc:	6270      	str	r0, [r6, #36]	; 0x24
 80074ce:	b928      	cbnz	r0, 80074dc <__pow5mult+0x40>
 80074d0:	4b1d      	ldr	r3, [pc, #116]	; (8007548 <__pow5mult+0xac>)
 80074d2:	481e      	ldr	r0, [pc, #120]	; (800754c <__pow5mult+0xb0>)
 80074d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80074d8:	f000 fcaa 	bl	8007e30 <__assert_func>
 80074dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80074e0:	6004      	str	r4, [r0, #0]
 80074e2:	60c4      	str	r4, [r0, #12]
 80074e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80074e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80074ec:	b94c      	cbnz	r4, 8007502 <__pow5mult+0x66>
 80074ee:	f240 2171 	movw	r1, #625	; 0x271
 80074f2:	4630      	mov	r0, r6
 80074f4:	f7ff ff12 	bl	800731c <__i2b>
 80074f8:	2300      	movs	r3, #0
 80074fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80074fe:	4604      	mov	r4, r0
 8007500:	6003      	str	r3, [r0, #0]
 8007502:	f04f 0900 	mov.w	r9, #0
 8007506:	07eb      	lsls	r3, r5, #31
 8007508:	d50a      	bpl.n	8007520 <__pow5mult+0x84>
 800750a:	4639      	mov	r1, r7
 800750c:	4622      	mov	r2, r4
 800750e:	4630      	mov	r0, r6
 8007510:	f7ff ff1a 	bl	8007348 <__multiply>
 8007514:	4639      	mov	r1, r7
 8007516:	4680      	mov	r8, r0
 8007518:	4630      	mov	r0, r6
 800751a:	f7ff fe47 	bl	80071ac <_Bfree>
 800751e:	4647      	mov	r7, r8
 8007520:	106d      	asrs	r5, r5, #1
 8007522:	d00b      	beq.n	800753c <__pow5mult+0xa0>
 8007524:	6820      	ldr	r0, [r4, #0]
 8007526:	b938      	cbnz	r0, 8007538 <__pow5mult+0x9c>
 8007528:	4622      	mov	r2, r4
 800752a:	4621      	mov	r1, r4
 800752c:	4630      	mov	r0, r6
 800752e:	f7ff ff0b 	bl	8007348 <__multiply>
 8007532:	6020      	str	r0, [r4, #0]
 8007534:	f8c0 9000 	str.w	r9, [r0]
 8007538:	4604      	mov	r4, r0
 800753a:	e7e4      	b.n	8007506 <__pow5mult+0x6a>
 800753c:	4638      	mov	r0, r7
 800753e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007542:	bf00      	nop
 8007544:	080083e8 	.word	0x080083e8
 8007548:	080081b9 	.word	0x080081b9
 800754c:	0800829c 	.word	0x0800829c

08007550 <__lshift>:
 8007550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007554:	460c      	mov	r4, r1
 8007556:	6849      	ldr	r1, [r1, #4]
 8007558:	6923      	ldr	r3, [r4, #16]
 800755a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800755e:	68a3      	ldr	r3, [r4, #8]
 8007560:	4607      	mov	r7, r0
 8007562:	4691      	mov	r9, r2
 8007564:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007568:	f108 0601 	add.w	r6, r8, #1
 800756c:	42b3      	cmp	r3, r6
 800756e:	db0b      	blt.n	8007588 <__lshift+0x38>
 8007570:	4638      	mov	r0, r7
 8007572:	f7ff fddb 	bl	800712c <_Balloc>
 8007576:	4605      	mov	r5, r0
 8007578:	b948      	cbnz	r0, 800758e <__lshift+0x3e>
 800757a:	4602      	mov	r2, r0
 800757c:	4b2a      	ldr	r3, [pc, #168]	; (8007628 <__lshift+0xd8>)
 800757e:	482b      	ldr	r0, [pc, #172]	; (800762c <__lshift+0xdc>)
 8007580:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007584:	f000 fc54 	bl	8007e30 <__assert_func>
 8007588:	3101      	adds	r1, #1
 800758a:	005b      	lsls	r3, r3, #1
 800758c:	e7ee      	b.n	800756c <__lshift+0x1c>
 800758e:	2300      	movs	r3, #0
 8007590:	f100 0114 	add.w	r1, r0, #20
 8007594:	f100 0210 	add.w	r2, r0, #16
 8007598:	4618      	mov	r0, r3
 800759a:	4553      	cmp	r3, sl
 800759c:	db37      	blt.n	800760e <__lshift+0xbe>
 800759e:	6920      	ldr	r0, [r4, #16]
 80075a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80075a4:	f104 0314 	add.w	r3, r4, #20
 80075a8:	f019 091f 	ands.w	r9, r9, #31
 80075ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80075b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80075b4:	d02f      	beq.n	8007616 <__lshift+0xc6>
 80075b6:	f1c9 0e20 	rsb	lr, r9, #32
 80075ba:	468a      	mov	sl, r1
 80075bc:	f04f 0c00 	mov.w	ip, #0
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	fa02 f209 	lsl.w	r2, r2, r9
 80075c6:	ea42 020c 	orr.w	r2, r2, ip
 80075ca:	f84a 2b04 	str.w	r2, [sl], #4
 80075ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80075d2:	4298      	cmp	r0, r3
 80075d4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80075d8:	d8f2      	bhi.n	80075c0 <__lshift+0x70>
 80075da:	1b03      	subs	r3, r0, r4
 80075dc:	3b15      	subs	r3, #21
 80075de:	f023 0303 	bic.w	r3, r3, #3
 80075e2:	3304      	adds	r3, #4
 80075e4:	f104 0215 	add.w	r2, r4, #21
 80075e8:	4290      	cmp	r0, r2
 80075ea:	bf38      	it	cc
 80075ec:	2304      	movcc	r3, #4
 80075ee:	f841 c003 	str.w	ip, [r1, r3]
 80075f2:	f1bc 0f00 	cmp.w	ip, #0
 80075f6:	d001      	beq.n	80075fc <__lshift+0xac>
 80075f8:	f108 0602 	add.w	r6, r8, #2
 80075fc:	3e01      	subs	r6, #1
 80075fe:	4638      	mov	r0, r7
 8007600:	612e      	str	r6, [r5, #16]
 8007602:	4621      	mov	r1, r4
 8007604:	f7ff fdd2 	bl	80071ac <_Bfree>
 8007608:	4628      	mov	r0, r5
 800760a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800760e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007612:	3301      	adds	r3, #1
 8007614:	e7c1      	b.n	800759a <__lshift+0x4a>
 8007616:	3904      	subs	r1, #4
 8007618:	f853 2b04 	ldr.w	r2, [r3], #4
 800761c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007620:	4298      	cmp	r0, r3
 8007622:	d8f9      	bhi.n	8007618 <__lshift+0xc8>
 8007624:	e7ea      	b.n	80075fc <__lshift+0xac>
 8007626:	bf00      	nop
 8007628:	0800822b 	.word	0x0800822b
 800762c:	0800829c 	.word	0x0800829c

08007630 <__mcmp>:
 8007630:	b530      	push	{r4, r5, lr}
 8007632:	6902      	ldr	r2, [r0, #16]
 8007634:	690c      	ldr	r4, [r1, #16]
 8007636:	1b12      	subs	r2, r2, r4
 8007638:	d10e      	bne.n	8007658 <__mcmp+0x28>
 800763a:	f100 0314 	add.w	r3, r0, #20
 800763e:	3114      	adds	r1, #20
 8007640:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007644:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007648:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800764c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007650:	42a5      	cmp	r5, r4
 8007652:	d003      	beq.n	800765c <__mcmp+0x2c>
 8007654:	d305      	bcc.n	8007662 <__mcmp+0x32>
 8007656:	2201      	movs	r2, #1
 8007658:	4610      	mov	r0, r2
 800765a:	bd30      	pop	{r4, r5, pc}
 800765c:	4283      	cmp	r3, r0
 800765e:	d3f3      	bcc.n	8007648 <__mcmp+0x18>
 8007660:	e7fa      	b.n	8007658 <__mcmp+0x28>
 8007662:	f04f 32ff 	mov.w	r2, #4294967295
 8007666:	e7f7      	b.n	8007658 <__mcmp+0x28>

08007668 <__mdiff>:
 8007668:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800766c:	460c      	mov	r4, r1
 800766e:	4606      	mov	r6, r0
 8007670:	4611      	mov	r1, r2
 8007672:	4620      	mov	r0, r4
 8007674:	4690      	mov	r8, r2
 8007676:	f7ff ffdb 	bl	8007630 <__mcmp>
 800767a:	1e05      	subs	r5, r0, #0
 800767c:	d110      	bne.n	80076a0 <__mdiff+0x38>
 800767e:	4629      	mov	r1, r5
 8007680:	4630      	mov	r0, r6
 8007682:	f7ff fd53 	bl	800712c <_Balloc>
 8007686:	b930      	cbnz	r0, 8007696 <__mdiff+0x2e>
 8007688:	4b3a      	ldr	r3, [pc, #232]	; (8007774 <__mdiff+0x10c>)
 800768a:	4602      	mov	r2, r0
 800768c:	f240 2132 	movw	r1, #562	; 0x232
 8007690:	4839      	ldr	r0, [pc, #228]	; (8007778 <__mdiff+0x110>)
 8007692:	f000 fbcd 	bl	8007e30 <__assert_func>
 8007696:	2301      	movs	r3, #1
 8007698:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800769c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076a0:	bfa4      	itt	ge
 80076a2:	4643      	movge	r3, r8
 80076a4:	46a0      	movge	r8, r4
 80076a6:	4630      	mov	r0, r6
 80076a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80076ac:	bfa6      	itte	ge
 80076ae:	461c      	movge	r4, r3
 80076b0:	2500      	movge	r5, #0
 80076b2:	2501      	movlt	r5, #1
 80076b4:	f7ff fd3a 	bl	800712c <_Balloc>
 80076b8:	b920      	cbnz	r0, 80076c4 <__mdiff+0x5c>
 80076ba:	4b2e      	ldr	r3, [pc, #184]	; (8007774 <__mdiff+0x10c>)
 80076bc:	4602      	mov	r2, r0
 80076be:	f44f 7110 	mov.w	r1, #576	; 0x240
 80076c2:	e7e5      	b.n	8007690 <__mdiff+0x28>
 80076c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80076c8:	6926      	ldr	r6, [r4, #16]
 80076ca:	60c5      	str	r5, [r0, #12]
 80076cc:	f104 0914 	add.w	r9, r4, #20
 80076d0:	f108 0514 	add.w	r5, r8, #20
 80076d4:	f100 0e14 	add.w	lr, r0, #20
 80076d8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80076dc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80076e0:	f108 0210 	add.w	r2, r8, #16
 80076e4:	46f2      	mov	sl, lr
 80076e6:	2100      	movs	r1, #0
 80076e8:	f859 3b04 	ldr.w	r3, [r9], #4
 80076ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80076f0:	fa1f f883 	uxth.w	r8, r3
 80076f4:	fa11 f18b 	uxtah	r1, r1, fp
 80076f8:	0c1b      	lsrs	r3, r3, #16
 80076fa:	eba1 0808 	sub.w	r8, r1, r8
 80076fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007702:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007706:	fa1f f888 	uxth.w	r8, r8
 800770a:	1419      	asrs	r1, r3, #16
 800770c:	454e      	cmp	r6, r9
 800770e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007712:	f84a 3b04 	str.w	r3, [sl], #4
 8007716:	d8e7      	bhi.n	80076e8 <__mdiff+0x80>
 8007718:	1b33      	subs	r3, r6, r4
 800771a:	3b15      	subs	r3, #21
 800771c:	f023 0303 	bic.w	r3, r3, #3
 8007720:	3304      	adds	r3, #4
 8007722:	3415      	adds	r4, #21
 8007724:	42a6      	cmp	r6, r4
 8007726:	bf38      	it	cc
 8007728:	2304      	movcc	r3, #4
 800772a:	441d      	add	r5, r3
 800772c:	4473      	add	r3, lr
 800772e:	469e      	mov	lr, r3
 8007730:	462e      	mov	r6, r5
 8007732:	4566      	cmp	r6, ip
 8007734:	d30e      	bcc.n	8007754 <__mdiff+0xec>
 8007736:	f10c 0203 	add.w	r2, ip, #3
 800773a:	1b52      	subs	r2, r2, r5
 800773c:	f022 0203 	bic.w	r2, r2, #3
 8007740:	3d03      	subs	r5, #3
 8007742:	45ac      	cmp	ip, r5
 8007744:	bf38      	it	cc
 8007746:	2200      	movcc	r2, #0
 8007748:	441a      	add	r2, r3
 800774a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800774e:	b17b      	cbz	r3, 8007770 <__mdiff+0x108>
 8007750:	6107      	str	r7, [r0, #16]
 8007752:	e7a3      	b.n	800769c <__mdiff+0x34>
 8007754:	f856 8b04 	ldr.w	r8, [r6], #4
 8007758:	fa11 f288 	uxtah	r2, r1, r8
 800775c:	1414      	asrs	r4, r2, #16
 800775e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007762:	b292      	uxth	r2, r2
 8007764:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007768:	f84e 2b04 	str.w	r2, [lr], #4
 800776c:	1421      	asrs	r1, r4, #16
 800776e:	e7e0      	b.n	8007732 <__mdiff+0xca>
 8007770:	3f01      	subs	r7, #1
 8007772:	e7ea      	b.n	800774a <__mdiff+0xe2>
 8007774:	0800822b 	.word	0x0800822b
 8007778:	0800829c 	.word	0x0800829c

0800777c <__d2b>:
 800777c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007780:	4689      	mov	r9, r1
 8007782:	2101      	movs	r1, #1
 8007784:	ec57 6b10 	vmov	r6, r7, d0
 8007788:	4690      	mov	r8, r2
 800778a:	f7ff fccf 	bl	800712c <_Balloc>
 800778e:	4604      	mov	r4, r0
 8007790:	b930      	cbnz	r0, 80077a0 <__d2b+0x24>
 8007792:	4602      	mov	r2, r0
 8007794:	4b25      	ldr	r3, [pc, #148]	; (800782c <__d2b+0xb0>)
 8007796:	4826      	ldr	r0, [pc, #152]	; (8007830 <__d2b+0xb4>)
 8007798:	f240 310a 	movw	r1, #778	; 0x30a
 800779c:	f000 fb48 	bl	8007e30 <__assert_func>
 80077a0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80077a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80077a8:	bb35      	cbnz	r5, 80077f8 <__d2b+0x7c>
 80077aa:	2e00      	cmp	r6, #0
 80077ac:	9301      	str	r3, [sp, #4]
 80077ae:	d028      	beq.n	8007802 <__d2b+0x86>
 80077b0:	4668      	mov	r0, sp
 80077b2:	9600      	str	r6, [sp, #0]
 80077b4:	f7ff fd82 	bl	80072bc <__lo0bits>
 80077b8:	9900      	ldr	r1, [sp, #0]
 80077ba:	b300      	cbz	r0, 80077fe <__d2b+0x82>
 80077bc:	9a01      	ldr	r2, [sp, #4]
 80077be:	f1c0 0320 	rsb	r3, r0, #32
 80077c2:	fa02 f303 	lsl.w	r3, r2, r3
 80077c6:	430b      	orrs	r3, r1
 80077c8:	40c2      	lsrs	r2, r0
 80077ca:	6163      	str	r3, [r4, #20]
 80077cc:	9201      	str	r2, [sp, #4]
 80077ce:	9b01      	ldr	r3, [sp, #4]
 80077d0:	61a3      	str	r3, [r4, #24]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	bf14      	ite	ne
 80077d6:	2202      	movne	r2, #2
 80077d8:	2201      	moveq	r2, #1
 80077da:	6122      	str	r2, [r4, #16]
 80077dc:	b1d5      	cbz	r5, 8007814 <__d2b+0x98>
 80077de:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80077e2:	4405      	add	r5, r0
 80077e4:	f8c9 5000 	str.w	r5, [r9]
 80077e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80077ec:	f8c8 0000 	str.w	r0, [r8]
 80077f0:	4620      	mov	r0, r4
 80077f2:	b003      	add	sp, #12
 80077f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077fc:	e7d5      	b.n	80077aa <__d2b+0x2e>
 80077fe:	6161      	str	r1, [r4, #20]
 8007800:	e7e5      	b.n	80077ce <__d2b+0x52>
 8007802:	a801      	add	r0, sp, #4
 8007804:	f7ff fd5a 	bl	80072bc <__lo0bits>
 8007808:	9b01      	ldr	r3, [sp, #4]
 800780a:	6163      	str	r3, [r4, #20]
 800780c:	2201      	movs	r2, #1
 800780e:	6122      	str	r2, [r4, #16]
 8007810:	3020      	adds	r0, #32
 8007812:	e7e3      	b.n	80077dc <__d2b+0x60>
 8007814:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007818:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800781c:	f8c9 0000 	str.w	r0, [r9]
 8007820:	6918      	ldr	r0, [r3, #16]
 8007822:	f7ff fd2b 	bl	800727c <__hi0bits>
 8007826:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800782a:	e7df      	b.n	80077ec <__d2b+0x70>
 800782c:	0800822b 	.word	0x0800822b
 8007830:	0800829c 	.word	0x0800829c

08007834 <_calloc_r>:
 8007834:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007836:	fba1 2402 	umull	r2, r4, r1, r2
 800783a:	b94c      	cbnz	r4, 8007850 <_calloc_r+0x1c>
 800783c:	4611      	mov	r1, r2
 800783e:	9201      	str	r2, [sp, #4]
 8007840:	f000 f87a 	bl	8007938 <_malloc_r>
 8007844:	9a01      	ldr	r2, [sp, #4]
 8007846:	4605      	mov	r5, r0
 8007848:	b930      	cbnz	r0, 8007858 <_calloc_r+0x24>
 800784a:	4628      	mov	r0, r5
 800784c:	b003      	add	sp, #12
 800784e:	bd30      	pop	{r4, r5, pc}
 8007850:	220c      	movs	r2, #12
 8007852:	6002      	str	r2, [r0, #0]
 8007854:	2500      	movs	r5, #0
 8007856:	e7f8      	b.n	800784a <_calloc_r+0x16>
 8007858:	4621      	mov	r1, r4
 800785a:	f7fd fdeb 	bl	8005434 <memset>
 800785e:	e7f4      	b.n	800784a <_calloc_r+0x16>

08007860 <_free_r>:
 8007860:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007862:	2900      	cmp	r1, #0
 8007864:	d044      	beq.n	80078f0 <_free_r+0x90>
 8007866:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800786a:	9001      	str	r0, [sp, #4]
 800786c:	2b00      	cmp	r3, #0
 800786e:	f1a1 0404 	sub.w	r4, r1, #4
 8007872:	bfb8      	it	lt
 8007874:	18e4      	addlt	r4, r4, r3
 8007876:	f000 fb61 	bl	8007f3c <__malloc_lock>
 800787a:	4a1e      	ldr	r2, [pc, #120]	; (80078f4 <_free_r+0x94>)
 800787c:	9801      	ldr	r0, [sp, #4]
 800787e:	6813      	ldr	r3, [r2, #0]
 8007880:	b933      	cbnz	r3, 8007890 <_free_r+0x30>
 8007882:	6063      	str	r3, [r4, #4]
 8007884:	6014      	str	r4, [r2, #0]
 8007886:	b003      	add	sp, #12
 8007888:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800788c:	f000 bb5c 	b.w	8007f48 <__malloc_unlock>
 8007890:	42a3      	cmp	r3, r4
 8007892:	d908      	bls.n	80078a6 <_free_r+0x46>
 8007894:	6825      	ldr	r5, [r4, #0]
 8007896:	1961      	adds	r1, r4, r5
 8007898:	428b      	cmp	r3, r1
 800789a:	bf01      	itttt	eq
 800789c:	6819      	ldreq	r1, [r3, #0]
 800789e:	685b      	ldreq	r3, [r3, #4]
 80078a0:	1949      	addeq	r1, r1, r5
 80078a2:	6021      	streq	r1, [r4, #0]
 80078a4:	e7ed      	b.n	8007882 <_free_r+0x22>
 80078a6:	461a      	mov	r2, r3
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	b10b      	cbz	r3, 80078b0 <_free_r+0x50>
 80078ac:	42a3      	cmp	r3, r4
 80078ae:	d9fa      	bls.n	80078a6 <_free_r+0x46>
 80078b0:	6811      	ldr	r1, [r2, #0]
 80078b2:	1855      	adds	r5, r2, r1
 80078b4:	42a5      	cmp	r5, r4
 80078b6:	d10b      	bne.n	80078d0 <_free_r+0x70>
 80078b8:	6824      	ldr	r4, [r4, #0]
 80078ba:	4421      	add	r1, r4
 80078bc:	1854      	adds	r4, r2, r1
 80078be:	42a3      	cmp	r3, r4
 80078c0:	6011      	str	r1, [r2, #0]
 80078c2:	d1e0      	bne.n	8007886 <_free_r+0x26>
 80078c4:	681c      	ldr	r4, [r3, #0]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	6053      	str	r3, [r2, #4]
 80078ca:	4421      	add	r1, r4
 80078cc:	6011      	str	r1, [r2, #0]
 80078ce:	e7da      	b.n	8007886 <_free_r+0x26>
 80078d0:	d902      	bls.n	80078d8 <_free_r+0x78>
 80078d2:	230c      	movs	r3, #12
 80078d4:	6003      	str	r3, [r0, #0]
 80078d6:	e7d6      	b.n	8007886 <_free_r+0x26>
 80078d8:	6825      	ldr	r5, [r4, #0]
 80078da:	1961      	adds	r1, r4, r5
 80078dc:	428b      	cmp	r3, r1
 80078de:	bf04      	itt	eq
 80078e0:	6819      	ldreq	r1, [r3, #0]
 80078e2:	685b      	ldreq	r3, [r3, #4]
 80078e4:	6063      	str	r3, [r4, #4]
 80078e6:	bf04      	itt	eq
 80078e8:	1949      	addeq	r1, r1, r5
 80078ea:	6021      	streq	r1, [r4, #0]
 80078ec:	6054      	str	r4, [r2, #4]
 80078ee:	e7ca      	b.n	8007886 <_free_r+0x26>
 80078f0:	b003      	add	sp, #12
 80078f2:	bd30      	pop	{r4, r5, pc}
 80078f4:	20000330 	.word	0x20000330

080078f8 <sbrk_aligned>:
 80078f8:	b570      	push	{r4, r5, r6, lr}
 80078fa:	4e0e      	ldr	r6, [pc, #56]	; (8007934 <sbrk_aligned+0x3c>)
 80078fc:	460c      	mov	r4, r1
 80078fe:	6831      	ldr	r1, [r6, #0]
 8007900:	4605      	mov	r5, r0
 8007902:	b911      	cbnz	r1, 800790a <sbrk_aligned+0x12>
 8007904:	f000 fa2e 	bl	8007d64 <_sbrk_r>
 8007908:	6030      	str	r0, [r6, #0]
 800790a:	4621      	mov	r1, r4
 800790c:	4628      	mov	r0, r5
 800790e:	f000 fa29 	bl	8007d64 <_sbrk_r>
 8007912:	1c43      	adds	r3, r0, #1
 8007914:	d00a      	beq.n	800792c <sbrk_aligned+0x34>
 8007916:	1cc4      	adds	r4, r0, #3
 8007918:	f024 0403 	bic.w	r4, r4, #3
 800791c:	42a0      	cmp	r0, r4
 800791e:	d007      	beq.n	8007930 <sbrk_aligned+0x38>
 8007920:	1a21      	subs	r1, r4, r0
 8007922:	4628      	mov	r0, r5
 8007924:	f000 fa1e 	bl	8007d64 <_sbrk_r>
 8007928:	3001      	adds	r0, #1
 800792a:	d101      	bne.n	8007930 <sbrk_aligned+0x38>
 800792c:	f04f 34ff 	mov.w	r4, #4294967295
 8007930:	4620      	mov	r0, r4
 8007932:	bd70      	pop	{r4, r5, r6, pc}
 8007934:	20000334 	.word	0x20000334

08007938 <_malloc_r>:
 8007938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800793c:	1ccd      	adds	r5, r1, #3
 800793e:	f025 0503 	bic.w	r5, r5, #3
 8007942:	3508      	adds	r5, #8
 8007944:	2d0c      	cmp	r5, #12
 8007946:	bf38      	it	cc
 8007948:	250c      	movcc	r5, #12
 800794a:	2d00      	cmp	r5, #0
 800794c:	4607      	mov	r7, r0
 800794e:	db01      	blt.n	8007954 <_malloc_r+0x1c>
 8007950:	42a9      	cmp	r1, r5
 8007952:	d905      	bls.n	8007960 <_malloc_r+0x28>
 8007954:	230c      	movs	r3, #12
 8007956:	603b      	str	r3, [r7, #0]
 8007958:	2600      	movs	r6, #0
 800795a:	4630      	mov	r0, r6
 800795c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007960:	4e2e      	ldr	r6, [pc, #184]	; (8007a1c <_malloc_r+0xe4>)
 8007962:	f000 faeb 	bl	8007f3c <__malloc_lock>
 8007966:	6833      	ldr	r3, [r6, #0]
 8007968:	461c      	mov	r4, r3
 800796a:	bb34      	cbnz	r4, 80079ba <_malloc_r+0x82>
 800796c:	4629      	mov	r1, r5
 800796e:	4638      	mov	r0, r7
 8007970:	f7ff ffc2 	bl	80078f8 <sbrk_aligned>
 8007974:	1c43      	adds	r3, r0, #1
 8007976:	4604      	mov	r4, r0
 8007978:	d14d      	bne.n	8007a16 <_malloc_r+0xde>
 800797a:	6834      	ldr	r4, [r6, #0]
 800797c:	4626      	mov	r6, r4
 800797e:	2e00      	cmp	r6, #0
 8007980:	d140      	bne.n	8007a04 <_malloc_r+0xcc>
 8007982:	6823      	ldr	r3, [r4, #0]
 8007984:	4631      	mov	r1, r6
 8007986:	4638      	mov	r0, r7
 8007988:	eb04 0803 	add.w	r8, r4, r3
 800798c:	f000 f9ea 	bl	8007d64 <_sbrk_r>
 8007990:	4580      	cmp	r8, r0
 8007992:	d13a      	bne.n	8007a0a <_malloc_r+0xd2>
 8007994:	6821      	ldr	r1, [r4, #0]
 8007996:	3503      	adds	r5, #3
 8007998:	1a6d      	subs	r5, r5, r1
 800799a:	f025 0503 	bic.w	r5, r5, #3
 800799e:	3508      	adds	r5, #8
 80079a0:	2d0c      	cmp	r5, #12
 80079a2:	bf38      	it	cc
 80079a4:	250c      	movcc	r5, #12
 80079a6:	4629      	mov	r1, r5
 80079a8:	4638      	mov	r0, r7
 80079aa:	f7ff ffa5 	bl	80078f8 <sbrk_aligned>
 80079ae:	3001      	adds	r0, #1
 80079b0:	d02b      	beq.n	8007a0a <_malloc_r+0xd2>
 80079b2:	6823      	ldr	r3, [r4, #0]
 80079b4:	442b      	add	r3, r5
 80079b6:	6023      	str	r3, [r4, #0]
 80079b8:	e00e      	b.n	80079d8 <_malloc_r+0xa0>
 80079ba:	6822      	ldr	r2, [r4, #0]
 80079bc:	1b52      	subs	r2, r2, r5
 80079be:	d41e      	bmi.n	80079fe <_malloc_r+0xc6>
 80079c0:	2a0b      	cmp	r2, #11
 80079c2:	d916      	bls.n	80079f2 <_malloc_r+0xba>
 80079c4:	1961      	adds	r1, r4, r5
 80079c6:	42a3      	cmp	r3, r4
 80079c8:	6025      	str	r5, [r4, #0]
 80079ca:	bf18      	it	ne
 80079cc:	6059      	strne	r1, [r3, #4]
 80079ce:	6863      	ldr	r3, [r4, #4]
 80079d0:	bf08      	it	eq
 80079d2:	6031      	streq	r1, [r6, #0]
 80079d4:	5162      	str	r2, [r4, r5]
 80079d6:	604b      	str	r3, [r1, #4]
 80079d8:	4638      	mov	r0, r7
 80079da:	f104 060b 	add.w	r6, r4, #11
 80079de:	f000 fab3 	bl	8007f48 <__malloc_unlock>
 80079e2:	f026 0607 	bic.w	r6, r6, #7
 80079e6:	1d23      	adds	r3, r4, #4
 80079e8:	1af2      	subs	r2, r6, r3
 80079ea:	d0b6      	beq.n	800795a <_malloc_r+0x22>
 80079ec:	1b9b      	subs	r3, r3, r6
 80079ee:	50a3      	str	r3, [r4, r2]
 80079f0:	e7b3      	b.n	800795a <_malloc_r+0x22>
 80079f2:	6862      	ldr	r2, [r4, #4]
 80079f4:	42a3      	cmp	r3, r4
 80079f6:	bf0c      	ite	eq
 80079f8:	6032      	streq	r2, [r6, #0]
 80079fa:	605a      	strne	r2, [r3, #4]
 80079fc:	e7ec      	b.n	80079d8 <_malloc_r+0xa0>
 80079fe:	4623      	mov	r3, r4
 8007a00:	6864      	ldr	r4, [r4, #4]
 8007a02:	e7b2      	b.n	800796a <_malloc_r+0x32>
 8007a04:	4634      	mov	r4, r6
 8007a06:	6876      	ldr	r6, [r6, #4]
 8007a08:	e7b9      	b.n	800797e <_malloc_r+0x46>
 8007a0a:	230c      	movs	r3, #12
 8007a0c:	603b      	str	r3, [r7, #0]
 8007a0e:	4638      	mov	r0, r7
 8007a10:	f000 fa9a 	bl	8007f48 <__malloc_unlock>
 8007a14:	e7a1      	b.n	800795a <_malloc_r+0x22>
 8007a16:	6025      	str	r5, [r4, #0]
 8007a18:	e7de      	b.n	80079d8 <_malloc_r+0xa0>
 8007a1a:	bf00      	nop
 8007a1c:	20000330 	.word	0x20000330

08007a20 <__sfputc_r>:
 8007a20:	6893      	ldr	r3, [r2, #8]
 8007a22:	3b01      	subs	r3, #1
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	b410      	push	{r4}
 8007a28:	6093      	str	r3, [r2, #8]
 8007a2a:	da08      	bge.n	8007a3e <__sfputc_r+0x1e>
 8007a2c:	6994      	ldr	r4, [r2, #24]
 8007a2e:	42a3      	cmp	r3, r4
 8007a30:	db01      	blt.n	8007a36 <__sfputc_r+0x16>
 8007a32:	290a      	cmp	r1, #10
 8007a34:	d103      	bne.n	8007a3e <__sfputc_r+0x1e>
 8007a36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a3a:	f7fe ba11 	b.w	8005e60 <__swbuf_r>
 8007a3e:	6813      	ldr	r3, [r2, #0]
 8007a40:	1c58      	adds	r0, r3, #1
 8007a42:	6010      	str	r0, [r2, #0]
 8007a44:	7019      	strb	r1, [r3, #0]
 8007a46:	4608      	mov	r0, r1
 8007a48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a4c:	4770      	bx	lr

08007a4e <__sfputs_r>:
 8007a4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a50:	4606      	mov	r6, r0
 8007a52:	460f      	mov	r7, r1
 8007a54:	4614      	mov	r4, r2
 8007a56:	18d5      	adds	r5, r2, r3
 8007a58:	42ac      	cmp	r4, r5
 8007a5a:	d101      	bne.n	8007a60 <__sfputs_r+0x12>
 8007a5c:	2000      	movs	r0, #0
 8007a5e:	e007      	b.n	8007a70 <__sfputs_r+0x22>
 8007a60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a64:	463a      	mov	r2, r7
 8007a66:	4630      	mov	r0, r6
 8007a68:	f7ff ffda 	bl	8007a20 <__sfputc_r>
 8007a6c:	1c43      	adds	r3, r0, #1
 8007a6e:	d1f3      	bne.n	8007a58 <__sfputs_r+0xa>
 8007a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a74 <_vfiprintf_r>:
 8007a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a78:	460d      	mov	r5, r1
 8007a7a:	b09d      	sub	sp, #116	; 0x74
 8007a7c:	4614      	mov	r4, r2
 8007a7e:	4698      	mov	r8, r3
 8007a80:	4606      	mov	r6, r0
 8007a82:	b118      	cbz	r0, 8007a8c <_vfiprintf_r+0x18>
 8007a84:	6983      	ldr	r3, [r0, #24]
 8007a86:	b90b      	cbnz	r3, 8007a8c <_vfiprintf_r+0x18>
 8007a88:	f7ff fa3e 	bl	8006f08 <__sinit>
 8007a8c:	4b89      	ldr	r3, [pc, #548]	; (8007cb4 <_vfiprintf_r+0x240>)
 8007a8e:	429d      	cmp	r5, r3
 8007a90:	d11b      	bne.n	8007aca <_vfiprintf_r+0x56>
 8007a92:	6875      	ldr	r5, [r6, #4]
 8007a94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a96:	07d9      	lsls	r1, r3, #31
 8007a98:	d405      	bmi.n	8007aa6 <_vfiprintf_r+0x32>
 8007a9a:	89ab      	ldrh	r3, [r5, #12]
 8007a9c:	059a      	lsls	r2, r3, #22
 8007a9e:	d402      	bmi.n	8007aa6 <_vfiprintf_r+0x32>
 8007aa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007aa2:	f7ff fad4 	bl	800704e <__retarget_lock_acquire_recursive>
 8007aa6:	89ab      	ldrh	r3, [r5, #12]
 8007aa8:	071b      	lsls	r3, r3, #28
 8007aaa:	d501      	bpl.n	8007ab0 <_vfiprintf_r+0x3c>
 8007aac:	692b      	ldr	r3, [r5, #16]
 8007aae:	b9eb      	cbnz	r3, 8007aec <_vfiprintf_r+0x78>
 8007ab0:	4629      	mov	r1, r5
 8007ab2:	4630      	mov	r0, r6
 8007ab4:	f7fe fa26 	bl	8005f04 <__swsetup_r>
 8007ab8:	b1c0      	cbz	r0, 8007aec <_vfiprintf_r+0x78>
 8007aba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007abc:	07dc      	lsls	r4, r3, #31
 8007abe:	d50e      	bpl.n	8007ade <_vfiprintf_r+0x6a>
 8007ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ac4:	b01d      	add	sp, #116	; 0x74
 8007ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aca:	4b7b      	ldr	r3, [pc, #492]	; (8007cb8 <_vfiprintf_r+0x244>)
 8007acc:	429d      	cmp	r5, r3
 8007ace:	d101      	bne.n	8007ad4 <_vfiprintf_r+0x60>
 8007ad0:	68b5      	ldr	r5, [r6, #8]
 8007ad2:	e7df      	b.n	8007a94 <_vfiprintf_r+0x20>
 8007ad4:	4b79      	ldr	r3, [pc, #484]	; (8007cbc <_vfiprintf_r+0x248>)
 8007ad6:	429d      	cmp	r5, r3
 8007ad8:	bf08      	it	eq
 8007ada:	68f5      	ldreq	r5, [r6, #12]
 8007adc:	e7da      	b.n	8007a94 <_vfiprintf_r+0x20>
 8007ade:	89ab      	ldrh	r3, [r5, #12]
 8007ae0:	0598      	lsls	r0, r3, #22
 8007ae2:	d4ed      	bmi.n	8007ac0 <_vfiprintf_r+0x4c>
 8007ae4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ae6:	f7ff fab3 	bl	8007050 <__retarget_lock_release_recursive>
 8007aea:	e7e9      	b.n	8007ac0 <_vfiprintf_r+0x4c>
 8007aec:	2300      	movs	r3, #0
 8007aee:	9309      	str	r3, [sp, #36]	; 0x24
 8007af0:	2320      	movs	r3, #32
 8007af2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007af6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007afa:	2330      	movs	r3, #48	; 0x30
 8007afc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007cc0 <_vfiprintf_r+0x24c>
 8007b00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b04:	f04f 0901 	mov.w	r9, #1
 8007b08:	4623      	mov	r3, r4
 8007b0a:	469a      	mov	sl, r3
 8007b0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b10:	b10a      	cbz	r2, 8007b16 <_vfiprintf_r+0xa2>
 8007b12:	2a25      	cmp	r2, #37	; 0x25
 8007b14:	d1f9      	bne.n	8007b0a <_vfiprintf_r+0x96>
 8007b16:	ebba 0b04 	subs.w	fp, sl, r4
 8007b1a:	d00b      	beq.n	8007b34 <_vfiprintf_r+0xc0>
 8007b1c:	465b      	mov	r3, fp
 8007b1e:	4622      	mov	r2, r4
 8007b20:	4629      	mov	r1, r5
 8007b22:	4630      	mov	r0, r6
 8007b24:	f7ff ff93 	bl	8007a4e <__sfputs_r>
 8007b28:	3001      	adds	r0, #1
 8007b2a:	f000 80aa 	beq.w	8007c82 <_vfiprintf_r+0x20e>
 8007b2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b30:	445a      	add	r2, fp
 8007b32:	9209      	str	r2, [sp, #36]	; 0x24
 8007b34:	f89a 3000 	ldrb.w	r3, [sl]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	f000 80a2 	beq.w	8007c82 <_vfiprintf_r+0x20e>
 8007b3e:	2300      	movs	r3, #0
 8007b40:	f04f 32ff 	mov.w	r2, #4294967295
 8007b44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b48:	f10a 0a01 	add.w	sl, sl, #1
 8007b4c:	9304      	str	r3, [sp, #16]
 8007b4e:	9307      	str	r3, [sp, #28]
 8007b50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b54:	931a      	str	r3, [sp, #104]	; 0x68
 8007b56:	4654      	mov	r4, sl
 8007b58:	2205      	movs	r2, #5
 8007b5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b5e:	4858      	ldr	r0, [pc, #352]	; (8007cc0 <_vfiprintf_r+0x24c>)
 8007b60:	f7f8 fb16 	bl	8000190 <memchr>
 8007b64:	9a04      	ldr	r2, [sp, #16]
 8007b66:	b9d8      	cbnz	r0, 8007ba0 <_vfiprintf_r+0x12c>
 8007b68:	06d1      	lsls	r1, r2, #27
 8007b6a:	bf44      	itt	mi
 8007b6c:	2320      	movmi	r3, #32
 8007b6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b72:	0713      	lsls	r3, r2, #28
 8007b74:	bf44      	itt	mi
 8007b76:	232b      	movmi	r3, #43	; 0x2b
 8007b78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b7c:	f89a 3000 	ldrb.w	r3, [sl]
 8007b80:	2b2a      	cmp	r3, #42	; 0x2a
 8007b82:	d015      	beq.n	8007bb0 <_vfiprintf_r+0x13c>
 8007b84:	9a07      	ldr	r2, [sp, #28]
 8007b86:	4654      	mov	r4, sl
 8007b88:	2000      	movs	r0, #0
 8007b8a:	f04f 0c0a 	mov.w	ip, #10
 8007b8e:	4621      	mov	r1, r4
 8007b90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b94:	3b30      	subs	r3, #48	; 0x30
 8007b96:	2b09      	cmp	r3, #9
 8007b98:	d94e      	bls.n	8007c38 <_vfiprintf_r+0x1c4>
 8007b9a:	b1b0      	cbz	r0, 8007bca <_vfiprintf_r+0x156>
 8007b9c:	9207      	str	r2, [sp, #28]
 8007b9e:	e014      	b.n	8007bca <_vfiprintf_r+0x156>
 8007ba0:	eba0 0308 	sub.w	r3, r0, r8
 8007ba4:	fa09 f303 	lsl.w	r3, r9, r3
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	9304      	str	r3, [sp, #16]
 8007bac:	46a2      	mov	sl, r4
 8007bae:	e7d2      	b.n	8007b56 <_vfiprintf_r+0xe2>
 8007bb0:	9b03      	ldr	r3, [sp, #12]
 8007bb2:	1d19      	adds	r1, r3, #4
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	9103      	str	r1, [sp, #12]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	bfbb      	ittet	lt
 8007bbc:	425b      	neglt	r3, r3
 8007bbe:	f042 0202 	orrlt.w	r2, r2, #2
 8007bc2:	9307      	strge	r3, [sp, #28]
 8007bc4:	9307      	strlt	r3, [sp, #28]
 8007bc6:	bfb8      	it	lt
 8007bc8:	9204      	strlt	r2, [sp, #16]
 8007bca:	7823      	ldrb	r3, [r4, #0]
 8007bcc:	2b2e      	cmp	r3, #46	; 0x2e
 8007bce:	d10c      	bne.n	8007bea <_vfiprintf_r+0x176>
 8007bd0:	7863      	ldrb	r3, [r4, #1]
 8007bd2:	2b2a      	cmp	r3, #42	; 0x2a
 8007bd4:	d135      	bne.n	8007c42 <_vfiprintf_r+0x1ce>
 8007bd6:	9b03      	ldr	r3, [sp, #12]
 8007bd8:	1d1a      	adds	r2, r3, #4
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	9203      	str	r2, [sp, #12]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	bfb8      	it	lt
 8007be2:	f04f 33ff 	movlt.w	r3, #4294967295
 8007be6:	3402      	adds	r4, #2
 8007be8:	9305      	str	r3, [sp, #20]
 8007bea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007cd0 <_vfiprintf_r+0x25c>
 8007bee:	7821      	ldrb	r1, [r4, #0]
 8007bf0:	2203      	movs	r2, #3
 8007bf2:	4650      	mov	r0, sl
 8007bf4:	f7f8 facc 	bl	8000190 <memchr>
 8007bf8:	b140      	cbz	r0, 8007c0c <_vfiprintf_r+0x198>
 8007bfa:	2340      	movs	r3, #64	; 0x40
 8007bfc:	eba0 000a 	sub.w	r0, r0, sl
 8007c00:	fa03 f000 	lsl.w	r0, r3, r0
 8007c04:	9b04      	ldr	r3, [sp, #16]
 8007c06:	4303      	orrs	r3, r0
 8007c08:	3401      	adds	r4, #1
 8007c0a:	9304      	str	r3, [sp, #16]
 8007c0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c10:	482c      	ldr	r0, [pc, #176]	; (8007cc4 <_vfiprintf_r+0x250>)
 8007c12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c16:	2206      	movs	r2, #6
 8007c18:	f7f8 faba 	bl	8000190 <memchr>
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	d03f      	beq.n	8007ca0 <_vfiprintf_r+0x22c>
 8007c20:	4b29      	ldr	r3, [pc, #164]	; (8007cc8 <_vfiprintf_r+0x254>)
 8007c22:	bb1b      	cbnz	r3, 8007c6c <_vfiprintf_r+0x1f8>
 8007c24:	9b03      	ldr	r3, [sp, #12]
 8007c26:	3307      	adds	r3, #7
 8007c28:	f023 0307 	bic.w	r3, r3, #7
 8007c2c:	3308      	adds	r3, #8
 8007c2e:	9303      	str	r3, [sp, #12]
 8007c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c32:	443b      	add	r3, r7
 8007c34:	9309      	str	r3, [sp, #36]	; 0x24
 8007c36:	e767      	b.n	8007b08 <_vfiprintf_r+0x94>
 8007c38:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c3c:	460c      	mov	r4, r1
 8007c3e:	2001      	movs	r0, #1
 8007c40:	e7a5      	b.n	8007b8e <_vfiprintf_r+0x11a>
 8007c42:	2300      	movs	r3, #0
 8007c44:	3401      	adds	r4, #1
 8007c46:	9305      	str	r3, [sp, #20]
 8007c48:	4619      	mov	r1, r3
 8007c4a:	f04f 0c0a 	mov.w	ip, #10
 8007c4e:	4620      	mov	r0, r4
 8007c50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c54:	3a30      	subs	r2, #48	; 0x30
 8007c56:	2a09      	cmp	r2, #9
 8007c58:	d903      	bls.n	8007c62 <_vfiprintf_r+0x1ee>
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d0c5      	beq.n	8007bea <_vfiprintf_r+0x176>
 8007c5e:	9105      	str	r1, [sp, #20]
 8007c60:	e7c3      	b.n	8007bea <_vfiprintf_r+0x176>
 8007c62:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c66:	4604      	mov	r4, r0
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e7f0      	b.n	8007c4e <_vfiprintf_r+0x1da>
 8007c6c:	ab03      	add	r3, sp, #12
 8007c6e:	9300      	str	r3, [sp, #0]
 8007c70:	462a      	mov	r2, r5
 8007c72:	4b16      	ldr	r3, [pc, #88]	; (8007ccc <_vfiprintf_r+0x258>)
 8007c74:	a904      	add	r1, sp, #16
 8007c76:	4630      	mov	r0, r6
 8007c78:	f7fd fc84 	bl	8005584 <_printf_float>
 8007c7c:	4607      	mov	r7, r0
 8007c7e:	1c78      	adds	r0, r7, #1
 8007c80:	d1d6      	bne.n	8007c30 <_vfiprintf_r+0x1bc>
 8007c82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c84:	07d9      	lsls	r1, r3, #31
 8007c86:	d405      	bmi.n	8007c94 <_vfiprintf_r+0x220>
 8007c88:	89ab      	ldrh	r3, [r5, #12]
 8007c8a:	059a      	lsls	r2, r3, #22
 8007c8c:	d402      	bmi.n	8007c94 <_vfiprintf_r+0x220>
 8007c8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c90:	f7ff f9de 	bl	8007050 <__retarget_lock_release_recursive>
 8007c94:	89ab      	ldrh	r3, [r5, #12]
 8007c96:	065b      	lsls	r3, r3, #25
 8007c98:	f53f af12 	bmi.w	8007ac0 <_vfiprintf_r+0x4c>
 8007c9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c9e:	e711      	b.n	8007ac4 <_vfiprintf_r+0x50>
 8007ca0:	ab03      	add	r3, sp, #12
 8007ca2:	9300      	str	r3, [sp, #0]
 8007ca4:	462a      	mov	r2, r5
 8007ca6:	4b09      	ldr	r3, [pc, #36]	; (8007ccc <_vfiprintf_r+0x258>)
 8007ca8:	a904      	add	r1, sp, #16
 8007caa:	4630      	mov	r0, r6
 8007cac:	f7fd ff0e 	bl	8005acc <_printf_i>
 8007cb0:	e7e4      	b.n	8007c7c <_vfiprintf_r+0x208>
 8007cb2:	bf00      	nop
 8007cb4:	0800825c 	.word	0x0800825c
 8007cb8:	0800827c 	.word	0x0800827c
 8007cbc:	0800823c 	.word	0x0800823c
 8007cc0:	080083f4 	.word	0x080083f4
 8007cc4:	080083fe 	.word	0x080083fe
 8007cc8:	08005585 	.word	0x08005585
 8007ccc:	08007a4f 	.word	0x08007a4f
 8007cd0:	080083fa 	.word	0x080083fa

08007cd4 <_putc_r>:
 8007cd4:	b570      	push	{r4, r5, r6, lr}
 8007cd6:	460d      	mov	r5, r1
 8007cd8:	4614      	mov	r4, r2
 8007cda:	4606      	mov	r6, r0
 8007cdc:	b118      	cbz	r0, 8007ce6 <_putc_r+0x12>
 8007cde:	6983      	ldr	r3, [r0, #24]
 8007ce0:	b90b      	cbnz	r3, 8007ce6 <_putc_r+0x12>
 8007ce2:	f7ff f911 	bl	8006f08 <__sinit>
 8007ce6:	4b1c      	ldr	r3, [pc, #112]	; (8007d58 <_putc_r+0x84>)
 8007ce8:	429c      	cmp	r4, r3
 8007cea:	d124      	bne.n	8007d36 <_putc_r+0x62>
 8007cec:	6874      	ldr	r4, [r6, #4]
 8007cee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007cf0:	07d8      	lsls	r0, r3, #31
 8007cf2:	d405      	bmi.n	8007d00 <_putc_r+0x2c>
 8007cf4:	89a3      	ldrh	r3, [r4, #12]
 8007cf6:	0599      	lsls	r1, r3, #22
 8007cf8:	d402      	bmi.n	8007d00 <_putc_r+0x2c>
 8007cfa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cfc:	f7ff f9a7 	bl	800704e <__retarget_lock_acquire_recursive>
 8007d00:	68a3      	ldr	r3, [r4, #8]
 8007d02:	3b01      	subs	r3, #1
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	60a3      	str	r3, [r4, #8]
 8007d08:	da05      	bge.n	8007d16 <_putc_r+0x42>
 8007d0a:	69a2      	ldr	r2, [r4, #24]
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	db1c      	blt.n	8007d4a <_putc_r+0x76>
 8007d10:	b2eb      	uxtb	r3, r5
 8007d12:	2b0a      	cmp	r3, #10
 8007d14:	d019      	beq.n	8007d4a <_putc_r+0x76>
 8007d16:	6823      	ldr	r3, [r4, #0]
 8007d18:	1c5a      	adds	r2, r3, #1
 8007d1a:	6022      	str	r2, [r4, #0]
 8007d1c:	701d      	strb	r5, [r3, #0]
 8007d1e:	b2ed      	uxtb	r5, r5
 8007d20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d22:	07da      	lsls	r2, r3, #31
 8007d24:	d405      	bmi.n	8007d32 <_putc_r+0x5e>
 8007d26:	89a3      	ldrh	r3, [r4, #12]
 8007d28:	059b      	lsls	r3, r3, #22
 8007d2a:	d402      	bmi.n	8007d32 <_putc_r+0x5e>
 8007d2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d2e:	f7ff f98f 	bl	8007050 <__retarget_lock_release_recursive>
 8007d32:	4628      	mov	r0, r5
 8007d34:	bd70      	pop	{r4, r5, r6, pc}
 8007d36:	4b09      	ldr	r3, [pc, #36]	; (8007d5c <_putc_r+0x88>)
 8007d38:	429c      	cmp	r4, r3
 8007d3a:	d101      	bne.n	8007d40 <_putc_r+0x6c>
 8007d3c:	68b4      	ldr	r4, [r6, #8]
 8007d3e:	e7d6      	b.n	8007cee <_putc_r+0x1a>
 8007d40:	4b07      	ldr	r3, [pc, #28]	; (8007d60 <_putc_r+0x8c>)
 8007d42:	429c      	cmp	r4, r3
 8007d44:	bf08      	it	eq
 8007d46:	68f4      	ldreq	r4, [r6, #12]
 8007d48:	e7d1      	b.n	8007cee <_putc_r+0x1a>
 8007d4a:	4629      	mov	r1, r5
 8007d4c:	4622      	mov	r2, r4
 8007d4e:	4630      	mov	r0, r6
 8007d50:	f7fe f886 	bl	8005e60 <__swbuf_r>
 8007d54:	4605      	mov	r5, r0
 8007d56:	e7e3      	b.n	8007d20 <_putc_r+0x4c>
 8007d58:	0800825c 	.word	0x0800825c
 8007d5c:	0800827c 	.word	0x0800827c
 8007d60:	0800823c 	.word	0x0800823c

08007d64 <_sbrk_r>:
 8007d64:	b538      	push	{r3, r4, r5, lr}
 8007d66:	4d06      	ldr	r5, [pc, #24]	; (8007d80 <_sbrk_r+0x1c>)
 8007d68:	2300      	movs	r3, #0
 8007d6a:	4604      	mov	r4, r0
 8007d6c:	4608      	mov	r0, r1
 8007d6e:	602b      	str	r3, [r5, #0]
 8007d70:	f7f9 feaa 	bl	8001ac8 <_sbrk>
 8007d74:	1c43      	adds	r3, r0, #1
 8007d76:	d102      	bne.n	8007d7e <_sbrk_r+0x1a>
 8007d78:	682b      	ldr	r3, [r5, #0]
 8007d7a:	b103      	cbz	r3, 8007d7e <_sbrk_r+0x1a>
 8007d7c:	6023      	str	r3, [r4, #0]
 8007d7e:	bd38      	pop	{r3, r4, r5, pc}
 8007d80:	20000338 	.word	0x20000338

08007d84 <__sread>:
 8007d84:	b510      	push	{r4, lr}
 8007d86:	460c      	mov	r4, r1
 8007d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d8c:	f000 f8e2 	bl	8007f54 <_read_r>
 8007d90:	2800      	cmp	r0, #0
 8007d92:	bfab      	itete	ge
 8007d94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007d96:	89a3      	ldrhlt	r3, [r4, #12]
 8007d98:	181b      	addge	r3, r3, r0
 8007d9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007d9e:	bfac      	ite	ge
 8007da0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007da2:	81a3      	strhlt	r3, [r4, #12]
 8007da4:	bd10      	pop	{r4, pc}

08007da6 <__swrite>:
 8007da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007daa:	461f      	mov	r7, r3
 8007dac:	898b      	ldrh	r3, [r1, #12]
 8007dae:	05db      	lsls	r3, r3, #23
 8007db0:	4605      	mov	r5, r0
 8007db2:	460c      	mov	r4, r1
 8007db4:	4616      	mov	r6, r2
 8007db6:	d505      	bpl.n	8007dc4 <__swrite+0x1e>
 8007db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dbc:	2302      	movs	r3, #2
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f000 f898 	bl	8007ef4 <_lseek_r>
 8007dc4:	89a3      	ldrh	r3, [r4, #12]
 8007dc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007dce:	81a3      	strh	r3, [r4, #12]
 8007dd0:	4632      	mov	r2, r6
 8007dd2:	463b      	mov	r3, r7
 8007dd4:	4628      	mov	r0, r5
 8007dd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dda:	f000 b817 	b.w	8007e0c <_write_r>

08007dde <__sseek>:
 8007dde:	b510      	push	{r4, lr}
 8007de0:	460c      	mov	r4, r1
 8007de2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007de6:	f000 f885 	bl	8007ef4 <_lseek_r>
 8007dea:	1c43      	adds	r3, r0, #1
 8007dec:	89a3      	ldrh	r3, [r4, #12]
 8007dee:	bf15      	itete	ne
 8007df0:	6560      	strne	r0, [r4, #84]	; 0x54
 8007df2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007df6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007dfa:	81a3      	strheq	r3, [r4, #12]
 8007dfc:	bf18      	it	ne
 8007dfe:	81a3      	strhne	r3, [r4, #12]
 8007e00:	bd10      	pop	{r4, pc}

08007e02 <__sclose>:
 8007e02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e06:	f000 b831 	b.w	8007e6c <_close_r>
	...

08007e0c <_write_r>:
 8007e0c:	b538      	push	{r3, r4, r5, lr}
 8007e0e:	4d07      	ldr	r5, [pc, #28]	; (8007e2c <_write_r+0x20>)
 8007e10:	4604      	mov	r4, r0
 8007e12:	4608      	mov	r0, r1
 8007e14:	4611      	mov	r1, r2
 8007e16:	2200      	movs	r2, #0
 8007e18:	602a      	str	r2, [r5, #0]
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	f7f9 fe04 	bl	8001a28 <_write>
 8007e20:	1c43      	adds	r3, r0, #1
 8007e22:	d102      	bne.n	8007e2a <_write_r+0x1e>
 8007e24:	682b      	ldr	r3, [r5, #0]
 8007e26:	b103      	cbz	r3, 8007e2a <_write_r+0x1e>
 8007e28:	6023      	str	r3, [r4, #0]
 8007e2a:	bd38      	pop	{r3, r4, r5, pc}
 8007e2c:	20000338 	.word	0x20000338

08007e30 <__assert_func>:
 8007e30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e32:	4614      	mov	r4, r2
 8007e34:	461a      	mov	r2, r3
 8007e36:	4b09      	ldr	r3, [pc, #36]	; (8007e5c <__assert_func+0x2c>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4605      	mov	r5, r0
 8007e3c:	68d8      	ldr	r0, [r3, #12]
 8007e3e:	b14c      	cbz	r4, 8007e54 <__assert_func+0x24>
 8007e40:	4b07      	ldr	r3, [pc, #28]	; (8007e60 <__assert_func+0x30>)
 8007e42:	9100      	str	r1, [sp, #0]
 8007e44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e48:	4906      	ldr	r1, [pc, #24]	; (8007e64 <__assert_func+0x34>)
 8007e4a:	462b      	mov	r3, r5
 8007e4c:	f000 f81e 	bl	8007e8c <fiprintf>
 8007e50:	f000 f89f 	bl	8007f92 <abort>
 8007e54:	4b04      	ldr	r3, [pc, #16]	; (8007e68 <__assert_func+0x38>)
 8007e56:	461c      	mov	r4, r3
 8007e58:	e7f3      	b.n	8007e42 <__assert_func+0x12>
 8007e5a:	bf00      	nop
 8007e5c:	20000010 	.word	0x20000010
 8007e60:	08008405 	.word	0x08008405
 8007e64:	08008412 	.word	0x08008412
 8007e68:	08008440 	.word	0x08008440

08007e6c <_close_r>:
 8007e6c:	b538      	push	{r3, r4, r5, lr}
 8007e6e:	4d06      	ldr	r5, [pc, #24]	; (8007e88 <_close_r+0x1c>)
 8007e70:	2300      	movs	r3, #0
 8007e72:	4604      	mov	r4, r0
 8007e74:	4608      	mov	r0, r1
 8007e76:	602b      	str	r3, [r5, #0]
 8007e78:	f7f9 fdf2 	bl	8001a60 <_close>
 8007e7c:	1c43      	adds	r3, r0, #1
 8007e7e:	d102      	bne.n	8007e86 <_close_r+0x1a>
 8007e80:	682b      	ldr	r3, [r5, #0]
 8007e82:	b103      	cbz	r3, 8007e86 <_close_r+0x1a>
 8007e84:	6023      	str	r3, [r4, #0]
 8007e86:	bd38      	pop	{r3, r4, r5, pc}
 8007e88:	20000338 	.word	0x20000338

08007e8c <fiprintf>:
 8007e8c:	b40e      	push	{r1, r2, r3}
 8007e8e:	b503      	push	{r0, r1, lr}
 8007e90:	4601      	mov	r1, r0
 8007e92:	ab03      	add	r3, sp, #12
 8007e94:	4805      	ldr	r0, [pc, #20]	; (8007eac <fiprintf+0x20>)
 8007e96:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e9a:	6800      	ldr	r0, [r0, #0]
 8007e9c:	9301      	str	r3, [sp, #4]
 8007e9e:	f7ff fde9 	bl	8007a74 <_vfiprintf_r>
 8007ea2:	b002      	add	sp, #8
 8007ea4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ea8:	b003      	add	sp, #12
 8007eaa:	4770      	bx	lr
 8007eac:	20000010 	.word	0x20000010

08007eb0 <_fstat_r>:
 8007eb0:	b538      	push	{r3, r4, r5, lr}
 8007eb2:	4d07      	ldr	r5, [pc, #28]	; (8007ed0 <_fstat_r+0x20>)
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	4604      	mov	r4, r0
 8007eb8:	4608      	mov	r0, r1
 8007eba:	4611      	mov	r1, r2
 8007ebc:	602b      	str	r3, [r5, #0]
 8007ebe:	f7f9 fddb 	bl	8001a78 <_fstat>
 8007ec2:	1c43      	adds	r3, r0, #1
 8007ec4:	d102      	bne.n	8007ecc <_fstat_r+0x1c>
 8007ec6:	682b      	ldr	r3, [r5, #0]
 8007ec8:	b103      	cbz	r3, 8007ecc <_fstat_r+0x1c>
 8007eca:	6023      	str	r3, [r4, #0]
 8007ecc:	bd38      	pop	{r3, r4, r5, pc}
 8007ece:	bf00      	nop
 8007ed0:	20000338 	.word	0x20000338

08007ed4 <_isatty_r>:
 8007ed4:	b538      	push	{r3, r4, r5, lr}
 8007ed6:	4d06      	ldr	r5, [pc, #24]	; (8007ef0 <_isatty_r+0x1c>)
 8007ed8:	2300      	movs	r3, #0
 8007eda:	4604      	mov	r4, r0
 8007edc:	4608      	mov	r0, r1
 8007ede:	602b      	str	r3, [r5, #0]
 8007ee0:	f7f9 fdda 	bl	8001a98 <_isatty>
 8007ee4:	1c43      	adds	r3, r0, #1
 8007ee6:	d102      	bne.n	8007eee <_isatty_r+0x1a>
 8007ee8:	682b      	ldr	r3, [r5, #0]
 8007eea:	b103      	cbz	r3, 8007eee <_isatty_r+0x1a>
 8007eec:	6023      	str	r3, [r4, #0]
 8007eee:	bd38      	pop	{r3, r4, r5, pc}
 8007ef0:	20000338 	.word	0x20000338

08007ef4 <_lseek_r>:
 8007ef4:	b538      	push	{r3, r4, r5, lr}
 8007ef6:	4d07      	ldr	r5, [pc, #28]	; (8007f14 <_lseek_r+0x20>)
 8007ef8:	4604      	mov	r4, r0
 8007efa:	4608      	mov	r0, r1
 8007efc:	4611      	mov	r1, r2
 8007efe:	2200      	movs	r2, #0
 8007f00:	602a      	str	r2, [r5, #0]
 8007f02:	461a      	mov	r2, r3
 8007f04:	f7f9 fdd3 	bl	8001aae <_lseek>
 8007f08:	1c43      	adds	r3, r0, #1
 8007f0a:	d102      	bne.n	8007f12 <_lseek_r+0x1e>
 8007f0c:	682b      	ldr	r3, [r5, #0]
 8007f0e:	b103      	cbz	r3, 8007f12 <_lseek_r+0x1e>
 8007f10:	6023      	str	r3, [r4, #0]
 8007f12:	bd38      	pop	{r3, r4, r5, pc}
 8007f14:	20000338 	.word	0x20000338

08007f18 <__ascii_mbtowc>:
 8007f18:	b082      	sub	sp, #8
 8007f1a:	b901      	cbnz	r1, 8007f1e <__ascii_mbtowc+0x6>
 8007f1c:	a901      	add	r1, sp, #4
 8007f1e:	b142      	cbz	r2, 8007f32 <__ascii_mbtowc+0x1a>
 8007f20:	b14b      	cbz	r3, 8007f36 <__ascii_mbtowc+0x1e>
 8007f22:	7813      	ldrb	r3, [r2, #0]
 8007f24:	600b      	str	r3, [r1, #0]
 8007f26:	7812      	ldrb	r2, [r2, #0]
 8007f28:	1e10      	subs	r0, r2, #0
 8007f2a:	bf18      	it	ne
 8007f2c:	2001      	movne	r0, #1
 8007f2e:	b002      	add	sp, #8
 8007f30:	4770      	bx	lr
 8007f32:	4610      	mov	r0, r2
 8007f34:	e7fb      	b.n	8007f2e <__ascii_mbtowc+0x16>
 8007f36:	f06f 0001 	mvn.w	r0, #1
 8007f3a:	e7f8      	b.n	8007f2e <__ascii_mbtowc+0x16>

08007f3c <__malloc_lock>:
 8007f3c:	4801      	ldr	r0, [pc, #4]	; (8007f44 <__malloc_lock+0x8>)
 8007f3e:	f7ff b886 	b.w	800704e <__retarget_lock_acquire_recursive>
 8007f42:	bf00      	nop
 8007f44:	2000032c 	.word	0x2000032c

08007f48 <__malloc_unlock>:
 8007f48:	4801      	ldr	r0, [pc, #4]	; (8007f50 <__malloc_unlock+0x8>)
 8007f4a:	f7ff b881 	b.w	8007050 <__retarget_lock_release_recursive>
 8007f4e:	bf00      	nop
 8007f50:	2000032c 	.word	0x2000032c

08007f54 <_read_r>:
 8007f54:	b538      	push	{r3, r4, r5, lr}
 8007f56:	4d07      	ldr	r5, [pc, #28]	; (8007f74 <_read_r+0x20>)
 8007f58:	4604      	mov	r4, r0
 8007f5a:	4608      	mov	r0, r1
 8007f5c:	4611      	mov	r1, r2
 8007f5e:	2200      	movs	r2, #0
 8007f60:	602a      	str	r2, [r5, #0]
 8007f62:	461a      	mov	r2, r3
 8007f64:	f7f9 fd43 	bl	80019ee <_read>
 8007f68:	1c43      	adds	r3, r0, #1
 8007f6a:	d102      	bne.n	8007f72 <_read_r+0x1e>
 8007f6c:	682b      	ldr	r3, [r5, #0]
 8007f6e:	b103      	cbz	r3, 8007f72 <_read_r+0x1e>
 8007f70:	6023      	str	r3, [r4, #0]
 8007f72:	bd38      	pop	{r3, r4, r5, pc}
 8007f74:	20000338 	.word	0x20000338

08007f78 <__ascii_wctomb>:
 8007f78:	b149      	cbz	r1, 8007f8e <__ascii_wctomb+0x16>
 8007f7a:	2aff      	cmp	r2, #255	; 0xff
 8007f7c:	bf85      	ittet	hi
 8007f7e:	238a      	movhi	r3, #138	; 0x8a
 8007f80:	6003      	strhi	r3, [r0, #0]
 8007f82:	700a      	strbls	r2, [r1, #0]
 8007f84:	f04f 30ff 	movhi.w	r0, #4294967295
 8007f88:	bf98      	it	ls
 8007f8a:	2001      	movls	r0, #1
 8007f8c:	4770      	bx	lr
 8007f8e:	4608      	mov	r0, r1
 8007f90:	4770      	bx	lr

08007f92 <abort>:
 8007f92:	b508      	push	{r3, lr}
 8007f94:	2006      	movs	r0, #6
 8007f96:	f000 f82b 	bl	8007ff0 <raise>
 8007f9a:	2001      	movs	r0, #1
 8007f9c:	f7f9 fd1d 	bl	80019da <_exit>

08007fa0 <_raise_r>:
 8007fa0:	291f      	cmp	r1, #31
 8007fa2:	b538      	push	{r3, r4, r5, lr}
 8007fa4:	4604      	mov	r4, r0
 8007fa6:	460d      	mov	r5, r1
 8007fa8:	d904      	bls.n	8007fb4 <_raise_r+0x14>
 8007faa:	2316      	movs	r3, #22
 8007fac:	6003      	str	r3, [r0, #0]
 8007fae:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb2:	bd38      	pop	{r3, r4, r5, pc}
 8007fb4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007fb6:	b112      	cbz	r2, 8007fbe <_raise_r+0x1e>
 8007fb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007fbc:	b94b      	cbnz	r3, 8007fd2 <_raise_r+0x32>
 8007fbe:	4620      	mov	r0, r4
 8007fc0:	f000 f830 	bl	8008024 <_getpid_r>
 8007fc4:	462a      	mov	r2, r5
 8007fc6:	4601      	mov	r1, r0
 8007fc8:	4620      	mov	r0, r4
 8007fca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fce:	f000 b817 	b.w	8008000 <_kill_r>
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d00a      	beq.n	8007fec <_raise_r+0x4c>
 8007fd6:	1c59      	adds	r1, r3, #1
 8007fd8:	d103      	bne.n	8007fe2 <_raise_r+0x42>
 8007fda:	2316      	movs	r3, #22
 8007fdc:	6003      	str	r3, [r0, #0]
 8007fde:	2001      	movs	r0, #1
 8007fe0:	e7e7      	b.n	8007fb2 <_raise_r+0x12>
 8007fe2:	2400      	movs	r4, #0
 8007fe4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007fe8:	4628      	mov	r0, r5
 8007fea:	4798      	blx	r3
 8007fec:	2000      	movs	r0, #0
 8007fee:	e7e0      	b.n	8007fb2 <_raise_r+0x12>

08007ff0 <raise>:
 8007ff0:	4b02      	ldr	r3, [pc, #8]	; (8007ffc <raise+0xc>)
 8007ff2:	4601      	mov	r1, r0
 8007ff4:	6818      	ldr	r0, [r3, #0]
 8007ff6:	f7ff bfd3 	b.w	8007fa0 <_raise_r>
 8007ffa:	bf00      	nop
 8007ffc:	20000010 	.word	0x20000010

08008000 <_kill_r>:
 8008000:	b538      	push	{r3, r4, r5, lr}
 8008002:	4d07      	ldr	r5, [pc, #28]	; (8008020 <_kill_r+0x20>)
 8008004:	2300      	movs	r3, #0
 8008006:	4604      	mov	r4, r0
 8008008:	4608      	mov	r0, r1
 800800a:	4611      	mov	r1, r2
 800800c:	602b      	str	r3, [r5, #0]
 800800e:	f7f9 fcd4 	bl	80019ba <_kill>
 8008012:	1c43      	adds	r3, r0, #1
 8008014:	d102      	bne.n	800801c <_kill_r+0x1c>
 8008016:	682b      	ldr	r3, [r5, #0]
 8008018:	b103      	cbz	r3, 800801c <_kill_r+0x1c>
 800801a:	6023      	str	r3, [r4, #0]
 800801c:	bd38      	pop	{r3, r4, r5, pc}
 800801e:	bf00      	nop
 8008020:	20000338 	.word	0x20000338

08008024 <_getpid_r>:
 8008024:	f7f9 bcc1 	b.w	80019aa <_getpid>

08008028 <_init>:
 8008028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800802a:	bf00      	nop
 800802c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800802e:	bc08      	pop	{r3}
 8008030:	469e      	mov	lr, r3
 8008032:	4770      	bx	lr

08008034 <_fini>:
 8008034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008036:	bf00      	nop
 8008038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800803a:	bc08      	pop	{r3}
 800803c:	469e      	mov	lr, r3
 800803e:	4770      	bx	lr
