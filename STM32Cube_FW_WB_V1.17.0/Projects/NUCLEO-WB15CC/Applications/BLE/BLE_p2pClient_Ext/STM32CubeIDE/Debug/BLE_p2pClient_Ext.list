
BLE_p2pClient_Ext.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de60  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001570  0800dfa0  0800dfa0  0001dfa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f510  0800f510  0001f510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f518  0800f518  0001f518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f51c  0800f51c  0001f51c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a4  20000008  0800f520  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 0000003c  200000ac  0800f5c4  000200ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200000e8  0800f600  000200e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001798  200000fc  0800f611  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00001404  20001894  0800f611  00021894  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 13 MB_MEM1       000001bc  20030028  20030028  00030000  2**2
                  ALLOC
 14 MB_MEM2       00000883  200301e4  200301e4  00030000  2**2
                  ALLOC
 15 .comment      00000043  00000000  00000000  00020129  2**0
                  CONTENTS, READONLY
 16 .debug_info   0002dcae  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000687d  00000000  00000000  0004de1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002748  00000000  00000000  00054698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00001dfe  00000000  00000000  00056de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00027f54  00000000  00000000  00058bde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00030e97  00000000  00000000  00080b32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000d6e95  00000000  00000000  000b19c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000acbc  00000000  00000000  00188860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 000000cc  00000000  00000000  0019351c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000fc 	.word	0x200000fc
 800015c:	00000000 	.word	0x00000000
 8000160:	0800df88 	.word	0x0800df88

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000100 	.word	0x20000100
 800017c:	0800df88 	.word	0x0800df88

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_dmul>:
 8000250:	b570      	push	{r4, r5, r6, lr}
 8000252:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000256:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800025a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800025e:	bf1d      	ittte	ne
 8000260:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000264:	ea94 0f0c 	teqne	r4, ip
 8000268:	ea95 0f0c 	teqne	r5, ip
 800026c:	f000 f8de 	bleq	800042c <__aeabi_dmul+0x1dc>
 8000270:	442c      	add	r4, r5
 8000272:	ea81 0603 	eor.w	r6, r1, r3
 8000276:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800027a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800027e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000282:	bf18      	it	ne
 8000284:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000288:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800028c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000290:	d038      	beq.n	8000304 <__aeabi_dmul+0xb4>
 8000292:	fba0 ce02 	umull	ip, lr, r0, r2
 8000296:	f04f 0500 	mov.w	r5, #0
 800029a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800029e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002a6:	f04f 0600 	mov.w	r6, #0
 80002aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ae:	f09c 0f00 	teq	ip, #0
 80002b2:	bf18      	it	ne
 80002b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002c4:	d204      	bcs.n	80002d0 <__aeabi_dmul+0x80>
 80002c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ca:	416d      	adcs	r5, r5
 80002cc:	eb46 0606 	adc.w	r6, r6, r6
 80002d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002e8:	bf88      	it	hi
 80002ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002ee:	d81e      	bhi.n	800032e <__aeabi_dmul+0xde>
 80002f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000308:	ea46 0101 	orr.w	r1, r6, r1
 800030c:	ea40 0002 	orr.w	r0, r0, r2
 8000310:	ea81 0103 	eor.w	r1, r1, r3
 8000314:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000318:	bfc2      	ittt	gt
 800031a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800031e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000322:	bd70      	popgt	{r4, r5, r6, pc}
 8000324:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000328:	f04f 0e00 	mov.w	lr, #0
 800032c:	3c01      	subs	r4, #1
 800032e:	f300 80ab 	bgt.w	8000488 <__aeabi_dmul+0x238>
 8000332:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000336:	bfde      	ittt	le
 8000338:	2000      	movle	r0, #0
 800033a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800033e:	bd70      	pople	{r4, r5, r6, pc}
 8000340:	f1c4 0400 	rsb	r4, r4, #0
 8000344:	3c20      	subs	r4, #32
 8000346:	da35      	bge.n	80003b4 <__aeabi_dmul+0x164>
 8000348:	340c      	adds	r4, #12
 800034a:	dc1b      	bgt.n	8000384 <__aeabi_dmul+0x134>
 800034c:	f104 0414 	add.w	r4, r4, #20
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f305 	lsl.w	r3, r0, r5
 8000358:	fa20 f004 	lsr.w	r0, r0, r4
 800035c:	fa01 f205 	lsl.w	r2, r1, r5
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000368:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800036c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000370:	fa21 f604 	lsr.w	r6, r1, r4
 8000374:	eb42 0106 	adc.w	r1, r2, r6
 8000378:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800037c:	bf08      	it	eq
 800037e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f1c4 040c 	rsb	r4, r4, #12
 8000388:	f1c4 0520 	rsb	r5, r4, #32
 800038c:	fa00 f304 	lsl.w	r3, r0, r4
 8000390:	fa20 f005 	lsr.w	r0, r0, r5
 8000394:	fa01 f204 	lsl.w	r2, r1, r4
 8000398:	ea40 0002 	orr.w	r0, r0, r2
 800039c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a4:	f141 0100 	adc.w	r1, r1, #0
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 0520 	rsb	r5, r4, #32
 80003b8:	fa00 f205 	lsl.w	r2, r0, r5
 80003bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003c0:	fa20 f304 	lsr.w	r3, r0, r4
 80003c4:	fa01 f205 	lsl.w	r2, r1, r5
 80003c8:	ea43 0302 	orr.w	r3, r3, r2
 80003cc:	fa21 f004 	lsr.w	r0, r1, r4
 80003d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d4:	fa21 f204 	lsr.w	r2, r1, r4
 80003d8:	ea20 0002 	bic.w	r0, r0, r2
 80003dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003e4:	bf08      	it	eq
 80003e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ea:	bd70      	pop	{r4, r5, r6, pc}
 80003ec:	f094 0f00 	teq	r4, #0
 80003f0:	d10f      	bne.n	8000412 <__aeabi_dmul+0x1c2>
 80003f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003f6:	0040      	lsls	r0, r0, #1
 80003f8:	eb41 0101 	adc.w	r1, r1, r1
 80003fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000400:	bf08      	it	eq
 8000402:	3c01      	subeq	r4, #1
 8000404:	d0f7      	beq.n	80003f6 <__aeabi_dmul+0x1a6>
 8000406:	ea41 0106 	orr.w	r1, r1, r6
 800040a:	f095 0f00 	teq	r5, #0
 800040e:	bf18      	it	ne
 8000410:	4770      	bxne	lr
 8000412:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000416:	0052      	lsls	r2, r2, #1
 8000418:	eb43 0303 	adc.w	r3, r3, r3
 800041c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3d01      	subeq	r5, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1c6>
 8000426:	ea43 0306 	orr.w	r3, r3, r6
 800042a:	4770      	bx	lr
 800042c:	ea94 0f0c 	teq	r4, ip
 8000430:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000434:	bf18      	it	ne
 8000436:	ea95 0f0c 	teqne	r5, ip
 800043a:	d00c      	beq.n	8000456 <__aeabi_dmul+0x206>
 800043c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000440:	bf18      	it	ne
 8000442:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000446:	d1d1      	bne.n	80003ec <__aeabi_dmul+0x19c>
 8000448:	ea81 0103 	eor.w	r1, r1, r3
 800044c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000450:	f04f 0000 	mov.w	r0, #0
 8000454:	bd70      	pop	{r4, r5, r6, pc}
 8000456:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800045a:	bf06      	itte	eq
 800045c:	4610      	moveq	r0, r2
 800045e:	4619      	moveq	r1, r3
 8000460:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000464:	d019      	beq.n	800049a <__aeabi_dmul+0x24a>
 8000466:	ea94 0f0c 	teq	r4, ip
 800046a:	d102      	bne.n	8000472 <__aeabi_dmul+0x222>
 800046c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000470:	d113      	bne.n	800049a <__aeabi_dmul+0x24a>
 8000472:	ea95 0f0c 	teq	r5, ip
 8000476:	d105      	bne.n	8000484 <__aeabi_dmul+0x234>
 8000478:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800047c:	bf1c      	itt	ne
 800047e:	4610      	movne	r0, r2
 8000480:	4619      	movne	r1, r3
 8000482:	d10a      	bne.n	800049a <__aeabi_dmul+0x24a>
 8000484:	ea81 0103 	eor.w	r1, r1, r3
 8000488:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800048c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd70      	pop	{r4, r5, r6, pc}
 800049a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800049e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004a2:	bd70      	pop	{r4, r5, r6, pc}

080004a4 <__aeabi_drsub>:
 80004a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004a8:	e002      	b.n	80004b0 <__adddf3>
 80004aa:	bf00      	nop

080004ac <__aeabi_dsub>:
 80004ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004b0 <__adddf3>:
 80004b0:	b530      	push	{r4, r5, lr}
 80004b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ba:	ea94 0f05 	teq	r4, r5
 80004be:	bf08      	it	eq
 80004c0:	ea90 0f02 	teqeq	r0, r2
 80004c4:	bf1f      	itttt	ne
 80004c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d6:	f000 80e2 	beq.w	800069e <__adddf3+0x1ee>
 80004da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004e2:	bfb8      	it	lt
 80004e4:	426d      	neglt	r5, r5
 80004e6:	dd0c      	ble.n	8000502 <__adddf3+0x52>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea80 0202 	eor.w	r2, r0, r2
 80004ee:	ea81 0303 	eor.w	r3, r1, r3
 80004f2:	ea82 0000 	eor.w	r0, r2, r0
 80004f6:	ea83 0101 	eor.w	r1, r3, r1
 80004fa:	ea80 0202 	eor.w	r2, r0, r2
 80004fe:	ea81 0303 	eor.w	r3, r1, r3
 8000502:	2d36      	cmp	r5, #54	; 0x36
 8000504:	bf88      	it	hi
 8000506:	bd30      	pophi	{r4, r5, pc}
 8000508:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800050c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000510:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000514:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000518:	d002      	beq.n	8000520 <__adddf3+0x70>
 800051a:	4240      	negs	r0, r0
 800051c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000520:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000524:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000528:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800052c:	d002      	beq.n	8000534 <__adddf3+0x84>
 800052e:	4252      	negs	r2, r2
 8000530:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000534:	ea94 0f05 	teq	r4, r5
 8000538:	f000 80a7 	beq.w	800068a <__adddf3+0x1da>
 800053c:	f1a4 0401 	sub.w	r4, r4, #1
 8000540:	f1d5 0e20 	rsbs	lr, r5, #32
 8000544:	db0d      	blt.n	8000562 <__adddf3+0xb2>
 8000546:	fa02 fc0e 	lsl.w	ip, r2, lr
 800054a:	fa22 f205 	lsr.w	r2, r2, r5
 800054e:	1880      	adds	r0, r0, r2
 8000550:	f141 0100 	adc.w	r1, r1, #0
 8000554:	fa03 f20e 	lsl.w	r2, r3, lr
 8000558:	1880      	adds	r0, r0, r2
 800055a:	fa43 f305 	asr.w	r3, r3, r5
 800055e:	4159      	adcs	r1, r3
 8000560:	e00e      	b.n	8000580 <__adddf3+0xd0>
 8000562:	f1a5 0520 	sub.w	r5, r5, #32
 8000566:	f10e 0e20 	add.w	lr, lr, #32
 800056a:	2a01      	cmp	r2, #1
 800056c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000570:	bf28      	it	cs
 8000572:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000576:	fa43 f305 	asr.w	r3, r3, r5
 800057a:	18c0      	adds	r0, r0, r3
 800057c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	d507      	bpl.n	8000596 <__adddf3+0xe6>
 8000586:	f04f 0e00 	mov.w	lr, #0
 800058a:	f1dc 0c00 	rsbs	ip, ip, #0
 800058e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000592:	eb6e 0101 	sbc.w	r1, lr, r1
 8000596:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800059a:	d31b      	bcc.n	80005d4 <__adddf3+0x124>
 800059c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005a0:	d30c      	bcc.n	80005bc <__adddf3+0x10c>
 80005a2:	0849      	lsrs	r1, r1, #1
 80005a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ac:	f104 0401 	add.w	r4, r4, #1
 80005b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005b8:	f080 809a 	bcs.w	80006f0 <__adddf3+0x240>
 80005bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005c0:	bf08      	it	eq
 80005c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005c6:	f150 0000 	adcs.w	r0, r0, #0
 80005ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ce:	ea41 0105 	orr.w	r1, r1, r5
 80005d2:	bd30      	pop	{r4, r5, pc}
 80005d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005d8:	4140      	adcs	r0, r0
 80005da:	eb41 0101 	adc.w	r1, r1, r1
 80005de:	3c01      	subs	r4, #1
 80005e0:	bf28      	it	cs
 80005e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005e6:	d2e9      	bcs.n	80005bc <__adddf3+0x10c>
 80005e8:	f091 0f00 	teq	r1, #0
 80005ec:	bf04      	itt	eq
 80005ee:	4601      	moveq	r1, r0
 80005f0:	2000      	moveq	r0, #0
 80005f2:	fab1 f381 	clz	r3, r1
 80005f6:	bf08      	it	eq
 80005f8:	3320      	addeq	r3, #32
 80005fa:	f1a3 030b 	sub.w	r3, r3, #11
 80005fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000602:	da0c      	bge.n	800061e <__adddf3+0x16e>
 8000604:	320c      	adds	r2, #12
 8000606:	dd08      	ble.n	800061a <__adddf3+0x16a>
 8000608:	f102 0c14 	add.w	ip, r2, #20
 800060c:	f1c2 020c 	rsb	r2, r2, #12
 8000610:	fa01 f00c 	lsl.w	r0, r1, ip
 8000614:	fa21 f102 	lsr.w	r1, r1, r2
 8000618:	e00c      	b.n	8000634 <__adddf3+0x184>
 800061a:	f102 0214 	add.w	r2, r2, #20
 800061e:	bfd8      	it	le
 8000620:	f1c2 0c20 	rsble	ip, r2, #32
 8000624:	fa01 f102 	lsl.w	r1, r1, r2
 8000628:	fa20 fc0c 	lsr.w	ip, r0, ip
 800062c:	bfdc      	itt	le
 800062e:	ea41 010c 	orrle.w	r1, r1, ip
 8000632:	4090      	lslle	r0, r2
 8000634:	1ae4      	subs	r4, r4, r3
 8000636:	bfa2      	ittt	ge
 8000638:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800063c:	4329      	orrge	r1, r5
 800063e:	bd30      	popge	{r4, r5, pc}
 8000640:	ea6f 0404 	mvn.w	r4, r4
 8000644:	3c1f      	subs	r4, #31
 8000646:	da1c      	bge.n	8000682 <__adddf3+0x1d2>
 8000648:	340c      	adds	r4, #12
 800064a:	dc0e      	bgt.n	800066a <__adddf3+0x1ba>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0220 	rsb	r2, r4, #32
 8000654:	fa20 f004 	lsr.w	r0, r0, r4
 8000658:	fa01 f302 	lsl.w	r3, r1, r2
 800065c:	ea40 0003 	orr.w	r0, r0, r3
 8000660:	fa21 f304 	lsr.w	r3, r1, r4
 8000664:	ea45 0103 	orr.w	r1, r5, r3
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	f1c4 040c 	rsb	r4, r4, #12
 800066e:	f1c4 0220 	rsb	r2, r4, #32
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 f304 	lsl.w	r3, r1, r4
 800067a:	ea40 0003 	orr.w	r0, r0, r3
 800067e:	4629      	mov	r1, r5
 8000680:	bd30      	pop	{r4, r5, pc}
 8000682:	fa21 f004 	lsr.w	r0, r1, r4
 8000686:	4629      	mov	r1, r5
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f094 0f00 	teq	r4, #0
 800068e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000692:	bf06      	itte	eq
 8000694:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000698:	3401      	addeq	r4, #1
 800069a:	3d01      	subne	r5, #1
 800069c:	e74e      	b.n	800053c <__adddf3+0x8c>
 800069e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006a2:	bf18      	it	ne
 80006a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006a8:	d029      	beq.n	80006fe <__adddf3+0x24e>
 80006aa:	ea94 0f05 	teq	r4, r5
 80006ae:	bf08      	it	eq
 80006b0:	ea90 0f02 	teqeq	r0, r2
 80006b4:	d005      	beq.n	80006c2 <__adddf3+0x212>
 80006b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ba:	bf04      	itt	eq
 80006bc:	4619      	moveq	r1, r3
 80006be:	4610      	moveq	r0, r2
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	ea91 0f03 	teq	r1, r3
 80006c6:	bf1e      	ittt	ne
 80006c8:	2100      	movne	r1, #0
 80006ca:	2000      	movne	r0, #0
 80006cc:	bd30      	popne	{r4, r5, pc}
 80006ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006d2:	d105      	bne.n	80006e0 <__adddf3+0x230>
 80006d4:	0040      	lsls	r0, r0, #1
 80006d6:	4149      	adcs	r1, r1
 80006d8:	bf28      	it	cs
 80006da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd30      	pop	{r4, r5, pc}
 80006e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006e4:	bf3c      	itt	cc
 80006e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006ea:	bd30      	popcc	{r4, r5, pc}
 80006ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd30      	pop	{r4, r5, pc}
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf1a      	itte	ne
 8000704:	4619      	movne	r1, r3
 8000706:	4610      	movne	r0, r2
 8000708:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800070c:	bf1c      	itt	ne
 800070e:	460b      	movne	r3, r1
 8000710:	4602      	movne	r2, r0
 8000712:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000716:	bf06      	itte	eq
 8000718:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800071c:	ea91 0f03 	teqeq	r1, r3
 8000720:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000724:	bd30      	pop	{r4, r5, pc}
 8000726:	bf00      	nop

08000728 <__aeabi_ui2d>:
 8000728:	f090 0f00 	teq	r0, #0
 800072c:	bf04      	itt	eq
 800072e:	2100      	moveq	r1, #0
 8000730:	4770      	bxeq	lr
 8000732:	b530      	push	{r4, r5, lr}
 8000734:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000738:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800073c:	f04f 0500 	mov.w	r5, #0
 8000740:	f04f 0100 	mov.w	r1, #0
 8000744:	e750      	b.n	80005e8 <__adddf3+0x138>
 8000746:	bf00      	nop

08000748 <__aeabi_i2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000760:	bf48      	it	mi
 8000762:	4240      	negmi	r0, r0
 8000764:	f04f 0100 	mov.w	r1, #0
 8000768:	e73e      	b.n	80005e8 <__adddf3+0x138>
 800076a:	bf00      	nop

0800076c <__aeabi_f2d>:
 800076c:	0042      	lsls	r2, r0, #1
 800076e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000772:	ea4f 0131 	mov.w	r1, r1, rrx
 8000776:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800077a:	bf1f      	itttt	ne
 800077c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000780:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000784:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000788:	4770      	bxne	lr
 800078a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800078e:	bf08      	it	eq
 8000790:	4770      	bxeq	lr
 8000792:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000796:	bf04      	itt	eq
 8000798:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800079c:	4770      	bxeq	lr
 800079e:	b530      	push	{r4, r5, lr}
 80007a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	e71c      	b.n	80005e8 <__adddf3+0x138>
 80007ae:	bf00      	nop

080007b0 <__aeabi_ul2d>:
 80007b0:	ea50 0201 	orrs.w	r2, r0, r1
 80007b4:	bf08      	it	eq
 80007b6:	4770      	bxeq	lr
 80007b8:	b530      	push	{r4, r5, lr}
 80007ba:	f04f 0500 	mov.w	r5, #0
 80007be:	e00a      	b.n	80007d6 <__aeabi_l2d+0x16>

080007c0 <__aeabi_l2d>:
 80007c0:	ea50 0201 	orrs.w	r2, r0, r1
 80007c4:	bf08      	it	eq
 80007c6:	4770      	bxeq	lr
 80007c8:	b530      	push	{r4, r5, lr}
 80007ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ce:	d502      	bpl.n	80007d6 <__aeabi_l2d+0x16>
 80007d0:	4240      	negs	r0, r0
 80007d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007e2:	f43f aed8 	beq.w	8000596 <__adddf3+0xe6>
 80007e6:	f04f 0203 	mov.w	r2, #3
 80007ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ee:	bf18      	it	ne
 80007f0:	3203      	addne	r2, #3
 80007f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007f6:	bf18      	it	ne
 80007f8:	3203      	addne	r2, #3
 80007fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007fe:	f1c2 0320 	rsb	r3, r2, #32
 8000802:	fa00 fc03 	lsl.w	ip, r0, r3
 8000806:	fa20 f002 	lsr.w	r0, r0, r2
 800080a:	fa01 fe03 	lsl.w	lr, r1, r3
 800080e:	ea40 000e 	orr.w	r0, r0, lr
 8000812:	fa21 f102 	lsr.w	r1, r1, r2
 8000816:	4414      	add	r4, r2
 8000818:	e6bd      	b.n	8000596 <__adddf3+0xe6>
 800081a:	bf00      	nop

0800081c <__aeabi_uldivmod>:
 800081c:	b953      	cbnz	r3, 8000834 <__aeabi_uldivmod+0x18>
 800081e:	b94a      	cbnz	r2, 8000834 <__aeabi_uldivmod+0x18>
 8000820:	2900      	cmp	r1, #0
 8000822:	bf08      	it	eq
 8000824:	2800      	cmpeq	r0, #0
 8000826:	bf1c      	itt	ne
 8000828:	f04f 31ff 	movne.w	r1, #4294967295
 800082c:	f04f 30ff 	movne.w	r0, #4294967295
 8000830:	f000 b970 	b.w	8000b14 <__aeabi_idiv0>
 8000834:	f1ad 0c08 	sub.w	ip, sp, #8
 8000838:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800083c:	f000 f806 	bl	800084c <__udivmoddi4>
 8000840:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000844:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000848:	b004      	add	sp, #16
 800084a:	4770      	bx	lr

0800084c <__udivmoddi4>:
 800084c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000850:	9e08      	ldr	r6, [sp, #32]
 8000852:	460d      	mov	r5, r1
 8000854:	4604      	mov	r4, r0
 8000856:	460f      	mov	r7, r1
 8000858:	2b00      	cmp	r3, #0
 800085a:	d14a      	bne.n	80008f2 <__udivmoddi4+0xa6>
 800085c:	428a      	cmp	r2, r1
 800085e:	4694      	mov	ip, r2
 8000860:	d965      	bls.n	800092e <__udivmoddi4+0xe2>
 8000862:	fab2 f382 	clz	r3, r2
 8000866:	b143      	cbz	r3, 800087a <__udivmoddi4+0x2e>
 8000868:	fa02 fc03 	lsl.w	ip, r2, r3
 800086c:	f1c3 0220 	rsb	r2, r3, #32
 8000870:	409f      	lsls	r7, r3
 8000872:	fa20 f202 	lsr.w	r2, r0, r2
 8000876:	4317      	orrs	r7, r2
 8000878:	409c      	lsls	r4, r3
 800087a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800087e:	fa1f f58c 	uxth.w	r5, ip
 8000882:	fbb7 f1fe 	udiv	r1, r7, lr
 8000886:	0c22      	lsrs	r2, r4, #16
 8000888:	fb0e 7711 	mls	r7, lr, r1, r7
 800088c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000890:	fb01 f005 	mul.w	r0, r1, r5
 8000894:	4290      	cmp	r0, r2
 8000896:	d90a      	bls.n	80008ae <__udivmoddi4+0x62>
 8000898:	eb1c 0202 	adds.w	r2, ip, r2
 800089c:	f101 37ff 	add.w	r7, r1, #4294967295
 80008a0:	f080 811c 	bcs.w	8000adc <__udivmoddi4+0x290>
 80008a4:	4290      	cmp	r0, r2
 80008a6:	f240 8119 	bls.w	8000adc <__udivmoddi4+0x290>
 80008aa:	3902      	subs	r1, #2
 80008ac:	4462      	add	r2, ip
 80008ae:	1a12      	subs	r2, r2, r0
 80008b0:	b2a4      	uxth	r4, r4
 80008b2:	fbb2 f0fe 	udiv	r0, r2, lr
 80008b6:	fb0e 2210 	mls	r2, lr, r0, r2
 80008ba:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008be:	fb00 f505 	mul.w	r5, r0, r5
 80008c2:	42a5      	cmp	r5, r4
 80008c4:	d90a      	bls.n	80008dc <__udivmoddi4+0x90>
 80008c6:	eb1c 0404 	adds.w	r4, ip, r4
 80008ca:	f100 32ff 	add.w	r2, r0, #4294967295
 80008ce:	f080 8107 	bcs.w	8000ae0 <__udivmoddi4+0x294>
 80008d2:	42a5      	cmp	r5, r4
 80008d4:	f240 8104 	bls.w	8000ae0 <__udivmoddi4+0x294>
 80008d8:	4464      	add	r4, ip
 80008da:	3802      	subs	r0, #2
 80008dc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008e0:	1b64      	subs	r4, r4, r5
 80008e2:	2100      	movs	r1, #0
 80008e4:	b11e      	cbz	r6, 80008ee <__udivmoddi4+0xa2>
 80008e6:	40dc      	lsrs	r4, r3
 80008e8:	2300      	movs	r3, #0
 80008ea:	e9c6 4300 	strd	r4, r3, [r6]
 80008ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008f2:	428b      	cmp	r3, r1
 80008f4:	d908      	bls.n	8000908 <__udivmoddi4+0xbc>
 80008f6:	2e00      	cmp	r6, #0
 80008f8:	f000 80ed 	beq.w	8000ad6 <__udivmoddi4+0x28a>
 80008fc:	2100      	movs	r1, #0
 80008fe:	e9c6 0500 	strd	r0, r5, [r6]
 8000902:	4608      	mov	r0, r1
 8000904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000908:	fab3 f183 	clz	r1, r3
 800090c:	2900      	cmp	r1, #0
 800090e:	d149      	bne.n	80009a4 <__udivmoddi4+0x158>
 8000910:	42ab      	cmp	r3, r5
 8000912:	d302      	bcc.n	800091a <__udivmoddi4+0xce>
 8000914:	4282      	cmp	r2, r0
 8000916:	f200 80f8 	bhi.w	8000b0a <__udivmoddi4+0x2be>
 800091a:	1a84      	subs	r4, r0, r2
 800091c:	eb65 0203 	sbc.w	r2, r5, r3
 8000920:	2001      	movs	r0, #1
 8000922:	4617      	mov	r7, r2
 8000924:	2e00      	cmp	r6, #0
 8000926:	d0e2      	beq.n	80008ee <__udivmoddi4+0xa2>
 8000928:	e9c6 4700 	strd	r4, r7, [r6]
 800092c:	e7df      	b.n	80008ee <__udivmoddi4+0xa2>
 800092e:	b902      	cbnz	r2, 8000932 <__udivmoddi4+0xe6>
 8000930:	deff      	udf	#255	; 0xff
 8000932:	fab2 f382 	clz	r3, r2
 8000936:	2b00      	cmp	r3, #0
 8000938:	f040 8090 	bne.w	8000a5c <__udivmoddi4+0x210>
 800093c:	1a8a      	subs	r2, r1, r2
 800093e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000942:	fa1f fe8c 	uxth.w	lr, ip
 8000946:	2101      	movs	r1, #1
 8000948:	fbb2 f5f7 	udiv	r5, r2, r7
 800094c:	fb07 2015 	mls	r0, r7, r5, r2
 8000950:	0c22      	lsrs	r2, r4, #16
 8000952:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000956:	fb0e f005 	mul.w	r0, lr, r5
 800095a:	4290      	cmp	r0, r2
 800095c:	d908      	bls.n	8000970 <__udivmoddi4+0x124>
 800095e:	eb1c 0202 	adds.w	r2, ip, r2
 8000962:	f105 38ff 	add.w	r8, r5, #4294967295
 8000966:	d202      	bcs.n	800096e <__udivmoddi4+0x122>
 8000968:	4290      	cmp	r0, r2
 800096a:	f200 80cb 	bhi.w	8000b04 <__udivmoddi4+0x2b8>
 800096e:	4645      	mov	r5, r8
 8000970:	1a12      	subs	r2, r2, r0
 8000972:	b2a4      	uxth	r4, r4
 8000974:	fbb2 f0f7 	udiv	r0, r2, r7
 8000978:	fb07 2210 	mls	r2, r7, r0, r2
 800097c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000980:	fb0e fe00 	mul.w	lr, lr, r0
 8000984:	45a6      	cmp	lr, r4
 8000986:	d908      	bls.n	800099a <__udivmoddi4+0x14e>
 8000988:	eb1c 0404 	adds.w	r4, ip, r4
 800098c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000990:	d202      	bcs.n	8000998 <__udivmoddi4+0x14c>
 8000992:	45a6      	cmp	lr, r4
 8000994:	f200 80bb 	bhi.w	8000b0e <__udivmoddi4+0x2c2>
 8000998:	4610      	mov	r0, r2
 800099a:	eba4 040e 	sub.w	r4, r4, lr
 800099e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80009a2:	e79f      	b.n	80008e4 <__udivmoddi4+0x98>
 80009a4:	f1c1 0720 	rsb	r7, r1, #32
 80009a8:	408b      	lsls	r3, r1
 80009aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80009ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80009b2:	fa05 f401 	lsl.w	r4, r5, r1
 80009b6:	fa20 f307 	lsr.w	r3, r0, r7
 80009ba:	40fd      	lsrs	r5, r7
 80009bc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009c0:	4323      	orrs	r3, r4
 80009c2:	fbb5 f8f9 	udiv	r8, r5, r9
 80009c6:	fa1f fe8c 	uxth.w	lr, ip
 80009ca:	fb09 5518 	mls	r5, r9, r8, r5
 80009ce:	0c1c      	lsrs	r4, r3, #16
 80009d0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80009d4:	fb08 f50e 	mul.w	r5, r8, lr
 80009d8:	42a5      	cmp	r5, r4
 80009da:	fa02 f201 	lsl.w	r2, r2, r1
 80009de:	fa00 f001 	lsl.w	r0, r0, r1
 80009e2:	d90b      	bls.n	80009fc <__udivmoddi4+0x1b0>
 80009e4:	eb1c 0404 	adds.w	r4, ip, r4
 80009e8:	f108 3aff 	add.w	sl, r8, #4294967295
 80009ec:	f080 8088 	bcs.w	8000b00 <__udivmoddi4+0x2b4>
 80009f0:	42a5      	cmp	r5, r4
 80009f2:	f240 8085 	bls.w	8000b00 <__udivmoddi4+0x2b4>
 80009f6:	f1a8 0802 	sub.w	r8, r8, #2
 80009fa:	4464      	add	r4, ip
 80009fc:	1b64      	subs	r4, r4, r5
 80009fe:	b29d      	uxth	r5, r3
 8000a00:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a04:	fb09 4413 	mls	r4, r9, r3, r4
 8000a08:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a0c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a10:	45a6      	cmp	lr, r4
 8000a12:	d908      	bls.n	8000a26 <__udivmoddi4+0x1da>
 8000a14:	eb1c 0404 	adds.w	r4, ip, r4
 8000a18:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a1c:	d26c      	bcs.n	8000af8 <__udivmoddi4+0x2ac>
 8000a1e:	45a6      	cmp	lr, r4
 8000a20:	d96a      	bls.n	8000af8 <__udivmoddi4+0x2ac>
 8000a22:	3b02      	subs	r3, #2
 8000a24:	4464      	add	r4, ip
 8000a26:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a2a:	fba3 9502 	umull	r9, r5, r3, r2
 8000a2e:	eba4 040e 	sub.w	r4, r4, lr
 8000a32:	42ac      	cmp	r4, r5
 8000a34:	46c8      	mov	r8, r9
 8000a36:	46ae      	mov	lr, r5
 8000a38:	d356      	bcc.n	8000ae8 <__udivmoddi4+0x29c>
 8000a3a:	d053      	beq.n	8000ae4 <__udivmoddi4+0x298>
 8000a3c:	b156      	cbz	r6, 8000a54 <__udivmoddi4+0x208>
 8000a3e:	ebb0 0208 	subs.w	r2, r0, r8
 8000a42:	eb64 040e 	sbc.w	r4, r4, lr
 8000a46:	fa04 f707 	lsl.w	r7, r4, r7
 8000a4a:	40ca      	lsrs	r2, r1
 8000a4c:	40cc      	lsrs	r4, r1
 8000a4e:	4317      	orrs	r7, r2
 8000a50:	e9c6 7400 	strd	r7, r4, [r6]
 8000a54:	4618      	mov	r0, r3
 8000a56:	2100      	movs	r1, #0
 8000a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a5c:	f1c3 0120 	rsb	r1, r3, #32
 8000a60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a64:	fa20 f201 	lsr.w	r2, r0, r1
 8000a68:	fa25 f101 	lsr.w	r1, r5, r1
 8000a6c:	409d      	lsls	r5, r3
 8000a6e:	432a      	orrs	r2, r5
 8000a70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a74:	fa1f fe8c 	uxth.w	lr, ip
 8000a78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a7c:	fb07 1510 	mls	r5, r7, r0, r1
 8000a80:	0c11      	lsrs	r1, r2, #16
 8000a82:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a86:	fb00 f50e 	mul.w	r5, r0, lr
 8000a8a:	428d      	cmp	r5, r1
 8000a8c:	fa04 f403 	lsl.w	r4, r4, r3
 8000a90:	d908      	bls.n	8000aa4 <__udivmoddi4+0x258>
 8000a92:	eb1c 0101 	adds.w	r1, ip, r1
 8000a96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a9a:	d22f      	bcs.n	8000afc <__udivmoddi4+0x2b0>
 8000a9c:	428d      	cmp	r5, r1
 8000a9e:	d92d      	bls.n	8000afc <__udivmoddi4+0x2b0>
 8000aa0:	3802      	subs	r0, #2
 8000aa2:	4461      	add	r1, ip
 8000aa4:	1b49      	subs	r1, r1, r5
 8000aa6:	b292      	uxth	r2, r2
 8000aa8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000aac:	fb07 1115 	mls	r1, r7, r5, r1
 8000ab0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ab4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ab8:	4291      	cmp	r1, r2
 8000aba:	d908      	bls.n	8000ace <__udivmoddi4+0x282>
 8000abc:	eb1c 0202 	adds.w	r2, ip, r2
 8000ac0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ac4:	d216      	bcs.n	8000af4 <__udivmoddi4+0x2a8>
 8000ac6:	4291      	cmp	r1, r2
 8000ac8:	d914      	bls.n	8000af4 <__udivmoddi4+0x2a8>
 8000aca:	3d02      	subs	r5, #2
 8000acc:	4462      	add	r2, ip
 8000ace:	1a52      	subs	r2, r2, r1
 8000ad0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ad4:	e738      	b.n	8000948 <__udivmoddi4+0xfc>
 8000ad6:	4631      	mov	r1, r6
 8000ad8:	4630      	mov	r0, r6
 8000ada:	e708      	b.n	80008ee <__udivmoddi4+0xa2>
 8000adc:	4639      	mov	r1, r7
 8000ade:	e6e6      	b.n	80008ae <__udivmoddi4+0x62>
 8000ae0:	4610      	mov	r0, r2
 8000ae2:	e6fb      	b.n	80008dc <__udivmoddi4+0x90>
 8000ae4:	4548      	cmp	r0, r9
 8000ae6:	d2a9      	bcs.n	8000a3c <__udivmoddi4+0x1f0>
 8000ae8:	ebb9 0802 	subs.w	r8, r9, r2
 8000aec:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000af0:	3b01      	subs	r3, #1
 8000af2:	e7a3      	b.n	8000a3c <__udivmoddi4+0x1f0>
 8000af4:	4645      	mov	r5, r8
 8000af6:	e7ea      	b.n	8000ace <__udivmoddi4+0x282>
 8000af8:	462b      	mov	r3, r5
 8000afa:	e794      	b.n	8000a26 <__udivmoddi4+0x1da>
 8000afc:	4640      	mov	r0, r8
 8000afe:	e7d1      	b.n	8000aa4 <__udivmoddi4+0x258>
 8000b00:	46d0      	mov	r8, sl
 8000b02:	e77b      	b.n	80009fc <__udivmoddi4+0x1b0>
 8000b04:	3d02      	subs	r5, #2
 8000b06:	4462      	add	r2, ip
 8000b08:	e732      	b.n	8000970 <__udivmoddi4+0x124>
 8000b0a:	4608      	mov	r0, r1
 8000b0c:	e70a      	b.n	8000924 <__udivmoddi4+0xd8>
 8000b0e:	4464      	add	r4, ip
 8000b10:	3802      	subs	r0, #2
 8000b12:	e742      	b.n	800099a <__udivmoddi4+0x14e>

08000b14 <__aeabi_idiv0>:
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <LL_EXTI_EnableIT_32_63+0x24>)
 8000b22:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000b26:	4905      	ldr	r1, [pc, #20]	; (8000b3c <LL_EXTI_EnableIT_32_63+0x24>)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	58000800 	.word	0x58000800

08000b40 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4013      	ands	r3, r2
 8000b62:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b64:	68fb      	ldr	r3, [r7, #12]
}
 8000b66:	bf00      	nop
 8000b68:	3714      	adds	r7, #20
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b72:	b480      	push	{r7}
 8000b74:	b085      	sub	sp, #20
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000b7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b7e:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000b82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b92:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
}
 8000b9e:	bf00      	nop
 8000ba0:	3714      	adds	r7, #20
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000bae:	f004 f9a9 	bl	8004f04 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000bb2:	f004 f9ad 	bl	8004f10 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000bb6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000bba:	f7ff ffad 	bl	8000b18 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000bbe:	f00a f8d5 	bl	800ad6c <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8000bc2:	f000 f821 	bl	8000c08 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000bc6:	f000 f8c1 	bl	8000d4c <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000bca:	bf00      	nop
}
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000bd0:	b5b0      	push	{r4, r5, r7, lr}
 8000bd2:	b088      	sub	sp, #32
 8000bd4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <APPD_EnableCPU2+0x34>)
 8000bd8:	1d3c      	adds	r4, r7, #4
 8000bda:	461d      	mov	r5, r3
 8000bdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000be4:	c403      	stmia	r4!, {r0, r1}
 8000be6:	8022      	strh	r2, [r4, #0]
 8000be8:	3402      	adds	r4, #2
 8000bea:	0c13      	lsrs	r3, r2, #16
 8000bec:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000bee:	f00b fd05 	bl	800c5fc <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f00a fb32 	bl	800b25e <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000bfa:	bf00      	nop
}
 8000bfc:	3720      	adds	r7, #32
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bdb0      	pop	{r4, r5, r7, pc}
 8000c02:	bf00      	nop
 8000c04:	0800dfa0 	.word	0x0800dfa0

08000c08 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b088      	sub	sp, #32
 8000c0c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000c28:	2300      	movs	r3, #0
 8000c2a:	77fb      	strb	r3, [r7, #31]
 8000c2c:	e036      	b.n	8000c9c <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000c2e:	7ffb      	ldrb	r3, [r7, #31]
 8000c30:	4a43      	ldr	r2, [pc, #268]	; (8000d40 <APPD_SetCPU2GpioConfig+0x138>)
 8000c32:	00db      	lsls	r3, r3, #3
 8000c34:	4413      	add	r3, r2
 8000c36:	799b      	ldrb	r3, [r3, #6]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d02c      	beq.n	8000c96 <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000c3c:	7ffb      	ldrb	r3, [r7, #31]
 8000c3e:	4a40      	ldr	r2, [pc, #256]	; (8000d40 <APPD_SetCPU2GpioConfig+0x138>)
 8000c40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000c44:	4a3f      	ldr	r2, [pc, #252]	; (8000d44 <APPD_SetCPU2GpioConfig+0x13c>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d01b      	beq.n	8000c82 <APPD_SetCPU2GpioConfig+0x7a>
 8000c4a:	4a3e      	ldr	r2, [pc, #248]	; (8000d44 <APPD_SetCPU2GpioConfig+0x13c>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d821      	bhi.n	8000c94 <APPD_SetCPU2GpioConfig+0x8c>
 8000c50:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c54:	d003      	beq.n	8000c5e <APPD_SetCPU2GpioConfig+0x56>
 8000c56:	4a3c      	ldr	r2, [pc, #240]	; (8000d48 <APPD_SetCPU2GpioConfig+0x140>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d009      	beq.n	8000c70 <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 8000c5c:	e01a      	b.n	8000c94 <APPD_SetCPU2GpioConfig+0x8c>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000c5e:	7ffb      	ldrb	r3, [r7, #31]
 8000c60:	4a37      	ldr	r2, [pc, #220]	; (8000d40 <APPD_SetCPU2GpioConfig+0x138>)
 8000c62:	00db      	lsls	r3, r3, #3
 8000c64:	4413      	add	r3, r2
 8000c66:	889a      	ldrh	r2, [r3, #4]
 8000c68:	8bbb      	ldrh	r3, [r7, #28]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	83bb      	strh	r3, [r7, #28]
          break;
 8000c6e:	e012      	b.n	8000c96 <APPD_SetCPU2GpioConfig+0x8e>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000c70:	7ffb      	ldrb	r3, [r7, #31]
 8000c72:	4a33      	ldr	r2, [pc, #204]	; (8000d40 <APPD_SetCPU2GpioConfig+0x138>)
 8000c74:	00db      	lsls	r3, r3, #3
 8000c76:	4413      	add	r3, r2
 8000c78:	889a      	ldrh	r2, [r3, #4]
 8000c7a:	8b7b      	ldrh	r3, [r7, #26]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	837b      	strh	r3, [r7, #26]
          break;
 8000c80:	e009      	b.n	8000c96 <APPD_SetCPU2GpioConfig+0x8e>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000c82:	7ffb      	ldrb	r3, [r7, #31]
 8000c84:	4a2e      	ldr	r2, [pc, #184]	; (8000d40 <APPD_SetCPU2GpioConfig+0x138>)
 8000c86:	00db      	lsls	r3, r3, #3
 8000c88:	4413      	add	r3, r2
 8000c8a:	889a      	ldrh	r2, [r3, #4]
 8000c8c:	8b3b      	ldrh	r3, [r7, #24]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	833b      	strh	r3, [r7, #24]
          break;
 8000c92:	e000      	b.n	8000c96 <APPD_SetCPU2GpioConfig+0x8e>
          break;
 8000c94:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000c96:	7ffb      	ldrb	r3, [r7, #31]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	77fb      	strb	r3, [r7, #31]
 8000c9c:	7ffb      	ldrb	r3, [r7, #31]
 8000c9e:	2b25      	cmp	r3, #37	; 0x25
 8000ca0:	d9c5      	bls.n	8000c2e <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000caa:	2303      	movs	r3, #3
 8000cac:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000cae:	8bbb      	ldrh	r3, [r7, #28]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d014      	beq.n	8000cde <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 8000cb4:	8bbb      	ldrh	r3, [r7, #28]
 8000cb6:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb8:	2001      	movs	r0, #1
 8000cba:	f7ff ff41 	bl	8000b40 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	f7ff ff57 	bl	8000b72 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ccc:	f004 fe14 	bl	80058f8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000cd0:	8bbb      	ldrh	r3, [r7, #28]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cda:	f004 ff75 	bl	8005bc8 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000cde:	8b7b      	ldrh	r3, [r7, #26]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d012      	beq.n	8000d0a <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000ce4:	8b7b      	ldrh	r3, [r7, #26]
 8000ce6:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce8:	2002      	movs	r0, #2
 8000cea:	f7ff ff29 	bl	8000b40 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000cee:	2002      	movs	r0, #2
 8000cf0:	f7ff ff3f 	bl	8000b72 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4813      	ldr	r0, [pc, #76]	; (8000d48 <APPD_SetCPU2GpioConfig+0x140>)
 8000cfa:	f004 fdfd 	bl	80058f8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000cfe:	8b7b      	ldrh	r3, [r7, #26]
 8000d00:	2200      	movs	r2, #0
 8000d02:	4619      	mov	r1, r3
 8000d04:	4810      	ldr	r0, [pc, #64]	; (8000d48 <APPD_SetCPU2GpioConfig+0x140>)
 8000d06:	f004 ff5f 	bl	8005bc8 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8000d0a:	8b3b      	ldrh	r3, [r7, #24]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d013      	beq.n	8000d38 <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000d10:	8b3b      	ldrh	r3, [r7, #24]
 8000d12:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d14:	2004      	movs	r0, #4
 8000d16:	f7ff ff13 	bl	8000b40 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8000d1a:	2004      	movs	r0, #4
 8000d1c:	f7ff ff29 	bl	8000b72 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000d20:	1d3b      	adds	r3, r7, #4
 8000d22:	4619      	mov	r1, r3
 8000d24:	4807      	ldr	r0, [pc, #28]	; (8000d44 <APPD_SetCPU2GpioConfig+0x13c>)
 8000d26:	f004 fde7 	bl	80058f8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8000d2a:	8b3b      	ldrh	r3, [r7, #24]
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4804      	ldr	r0, [pc, #16]	; (8000d44 <APPD_SetCPU2GpioConfig+0x13c>)
 8000d32:	f004 ff49 	bl	8005bc8 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8000d36:	bf00      	nop
 8000d38:	bf00      	nop
}
 8000d3a:	3720      	adds	r7, #32
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	0800f28c 	.word	0x0800f28c
 8000d44:	48000800 	.word	0x48000800
 8000d48:	48000400 	.word	0x48000400

08000d4c <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000d50:	bf00      	nop
}
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	af00      	add	r7, sp, #0
#endif
  }
  else if (CFG_DEBUG_TRACE_UART == hw_uart1)
  {
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 8000d5e:	f001 fbd9 	bl	8002514 <MX_USART1_UART_Init>
#endif
  }
#endif

/* USER CODE END DbgOutputInit */
  return;
 8000d62:	bf00      	nop
}
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b084      	sub	sp, #16
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	60f8      	str	r0, [r7, #12]
 8000d6e:	460b      	mov	r3, r1
 8000d70:	607a      	str	r2, [r7, #4]
 8000d72:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000d74:	897a      	ldrh	r2, [r7, #10]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	68f9      	ldr	r1, [r7, #12]
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	f001 fa36 	bl	80021ec <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000d80:	bf00      	nop
}
 8000d82:	3710      	adds	r7, #16
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000d90:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <LL_C2_PWR_SetPowerMode+0x28>)
 8000d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d96:	f023 0207 	bic.w	r2, r3, #7
 8000d9a:	4905      	ldr	r1, [pc, #20]	; (8000db0 <LL_C2_PWR_SetPowerMode+0x28>)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	58000400 	.word	0x58000400

08000db4 <LL_EXTI_EnableIT_32_63>:
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <LL_EXTI_EnableIT_32_63+0x24>)
 8000dbe:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000dc2:	4905      	ldr	r1, [pc, #20]	; (8000dd8 <LL_EXTI_EnableIT_32_63+0x24>)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	58000800 	.word	0x58000800

08000ddc <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000de8:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000dea:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000df2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000df6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	021b      	lsls	r3, r3, #8
 8000dfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e02:	4313      	orrs	r3, r2
 8000e04:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	cafecafe 	.word	0xcafecafe

08000e18 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000e2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	608b      	str	r3, [r1, #8]
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000e44:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <LL_DBGMCU_GetDeviceID+0x18>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e0042000 	.word	0xe0042000

08000e5c <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000e60:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <LL_DBGMCU_GetRevisionID+0x18>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	0c1b      	lsrs	r3, r3, #16
 8000e66:	b29b      	uxth	r3, r3
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	e0042000 	.word	0xe0042000

08000e78 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	22ff      	movs	r2, #255	; 0xff
 8000e84:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000e92:	b480      	push	{r7}
 8000e94:	b083      	sub	sp, #12
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	22ca      	movs	r2, #202	; 0xca
 8000e9e:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2253      	movs	r2, #83	; 0x53
 8000ea4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	b083      	sub	sp, #12
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
 8000eba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	f023 0207 	bic.w	r2, r3, #7
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	609a      	str	r2, [r3, #8]
}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000edc:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <MX_APPE_Config+0x18>)
 8000ede:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ee2:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000ee4:	f000 f830 	bl	8000f48 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000ee8:	f000 f835 	bl	8000f56 <Config_HSE>

  return;
 8000eec:	bf00      	nop
}
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	58004000 	.word	0x58004000

08000ef4 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000ef8:	f000 f841 	bl	8000f7e <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000efc:	f000 f85a 	bl	8000fb4 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000f00:	4909      	ldr	r1, [pc, #36]	; (8000f28 <MX_APPE_Init+0x34>)
 8000f02:	2000      	movs	r0, #0
 8000f04:	f000 fee2 	bl	8001ccc <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8000f08:	f7ff fe4f 	bl	8000baa <APPD_Init>

  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	2001      	movs	r0, #1
 8000f10:	f00b fc12 	bl	800c738 <UTIL_LPM_SetOffMode>

  APPE_Led_Init();
 8000f14:	f000 f9b2 	bl	800127c <APPE_Led_Init>

  APPE_Button_Init();
 8000f18:	f000 f9c0 	bl	800129c <APPE_Button_Init>
  
  RxUART_Init();
 8000f1c:	f000 fa2a 	bl	8001374 <RxUART_Init>

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000f20:	f000 f858 	bl	8000fd4 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000f24:	bf00      	nop
}
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000310 	.word	0x20000310

08000f2c <Init_Smps>:

void Init_Smps(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000f30:	bf00      	nop
}
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <Init_Exti>:

void Init_Exti(void)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000f3e:	2050      	movs	r0, #80	; 0x50
 8000f40:	f7ff ff38 	bl	8000db4 <LL_EXTI_EnableIT_32_63>

  return;
 8000f44:	bf00      	nop
}
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000f4c:	bf00      	nop
}
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	f00a f93f 	bl	800b1e0 <OTP_Read>
 8000f62:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d005      	beq.n	8000f76 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	799b      	ldrb	r3, [r3, #6]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff ff34 	bl	8000ddc <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000f74:	bf00      	nop
 8000f76:	bf00      	nop
}
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <System_Init>:

static void System_Init(void)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	af00      	add	r7, sp, #0
  Init_Smps();
 8000f82:	f7ff ffd3 	bl	8000f2c <Init_Smps>

  Init_Exti();
 8000f86:	f7ff ffd8 	bl	8000f3a <Init_Exti>

  Init_Rtc();
 8000f8a:	f000 f803 	bl	8000f94 <Init_Rtc>

  return;
 8000f8e:	bf00      	nop
}
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000f98:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <Init_Rtc+0x1c>)
 8000f9a:	f7ff ff7a 	bl	8000e92 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4803      	ldr	r0, [pc, #12]	; (8000fb0 <Init_Rtc+0x1c>)
 8000fa2:	f7ff ff86 	bl	8000eb2 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000fa6:	4802      	ldr	r0, [pc, #8]	; (8000fb0 <Init_Rtc+0x1c>)
 8000fa8:	f7ff ff66 	bl	8000e78 <LL_RTC_EnableWriteProtection>

  return;
 8000fac:	bf00      	nop
}
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40002800 	.word	0x40002800

08000fb4 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000fb8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000fbc:	f7ff ff2c 	bl	8000e18 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000fc0:	f00b fba8 	bl	800c714 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000fc4:	2004      	movs	r0, #4
 8000fc6:	f7ff fedf 	bl	8000d88 <LL_C2_PWR_SetPowerMode>
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */
  /**
   * Active SRAM retention for standby support
   */
  HAL_PWREx_EnableSRAMRetention();
 8000fca:	f004 fef7 	bl	8005dbc <HAL_PWREx_EnableSRAMRetention>

  return;
 8000fce:	bf00      	nop
}
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b088      	sub	sp, #32
 8000fd8:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000fda:	f00b f959 	bl	800c290 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000fde:	4a11      	ldr	r2, [pc, #68]	; (8001024 <appe_Tl_Init+0x50>)
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fe6:	f00b fcd3 	bl	800c990 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000fea:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <appe_Tl_Init+0x54>)
 8000fec:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000fee:	4b0f      	ldr	r3, [pc, #60]	; (800102c <appe_Tl_Init+0x58>)
 8000ff0:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	480e      	ldr	r0, [pc, #56]	; (8001030 <appe_Tl_Init+0x5c>)
 8000ff8:	f00a fa0c 	bl	800b414 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000ffc:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <appe_Tl_Init+0x60>)
 8000ffe:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001000:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <appe_Tl_Init+0x64>)
 8001002:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001004:	4b0d      	ldr	r3, [pc, #52]	; (800103c <appe_Tl_Init+0x68>)
 8001006:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001008:	f240 533c 	movw	r3, #1340	; 0x53c
 800100c:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 800100e:	f107 0308 	add.w	r3, r7, #8
 8001012:	4618      	mov	r0, r3
 8001014:	f00b fa7e 	bl	800c514 <TL_MM_Init>

  TL_Enable();
 8001018:	f00b f934 	bl	800c284 <TL_Enable>

  return;
 800101c:	bf00      	nop
}
 800101e:	3720      	adds	r7, #32
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	0800b44d 	.word	0x0800b44d
 8001028:	20030734 	.word	0x20030734
 800102c:	08001041 	.word	0x08001041
 8001030:	08001059 	.word	0x08001059
 8001034:	2003094c 	.word	0x2003094c
 8001038:	20030840 	.word	0x20030840
 800103c:	200301f8 	.word	0x200301f8

08001040 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800104a:	bf00      	nop
}
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
	...

08001058 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b088      	sub	sp, #32
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	330b      	adds	r3, #11
 8001066:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	881b      	ldrh	r3, [r3, #0]
 800106c:	b29b      	uxth	r3, r3
 800106e:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8001072:	2b07      	cmp	r3, #7
 8001074:	d860      	bhi.n	8001138 <APPE_SysUserEvtRx+0xe0>
 8001076:	a201      	add	r2, pc, #4	; (adr r2, 800107c <APPE_SysUserEvtRx+0x24>)
 8001078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800107c:	0800109d 	.word	0x0800109d
 8001080:	080010df 	.word	0x080010df
 8001084:	080010ed 	.word	0x080010ed
 8001088:	08001139 	.word	0x08001139
 800108c:	08001109 	.word	0x08001109
 8001090:	08001119 	.word	0x08001119
 8001094:	08001121 	.word	0x08001121
 8001098:	08001131 	.word	0x08001131
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	4618      	mov	r0, r3
 80010a2:	f00a f909 	bl	800b2b8 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 80010a6:	7b3b      	ldrb	r3, [r7, #12]
 80010a8:	4619      	mov	r1, r3
 80010aa:	7b7b      	ldrb	r3, [r7, #13]
 80010ac:	461a      	mov	r2, r3
 80010ae:	7bbb      	ldrb	r3, [r7, #14]
 80010b0:	4824      	ldr	r0, [pc, #144]	; (8001144 <APPE_SysUserEvtRx+0xec>)
 80010b2:	f00b fe71 	bl	800cd98 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 80010b6:	7c3b      	ldrb	r3, [r7, #16]
 80010b8:	4619      	mov	r1, r3
 80010ba:	4823      	ldr	r0, [pc, #140]	; (8001148 <APPE_SysUserEvtRx+0xf0>)
 80010bc:	f00b fe6c 	bl	800cd98 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 80010c0:	7dbb      	ldrb	r3, [r7, #22]
 80010c2:	4619      	mov	r1, r3
 80010c4:	7dfb      	ldrb	r3, [r7, #23]
 80010c6:	461a      	mov	r2, r3
 80010c8:	7e3b      	ldrb	r3, [r7, #24]
 80010ca:	4820      	ldr	r0, [pc, #128]	; (800114c <APPE_SysUserEvtRx+0xf4>)
 80010cc:	f00b fe64 	bl	800cd98 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 80010d0:	481f      	ldr	r0, [pc, #124]	; (8001150 <APPE_SysUserEvtRx+0xf8>)
 80010d2:	f00b fe61 	bl	800cd98 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f000 f870 	bl	80011bc <APPE_SysEvtReadyProcessing>
    break;
 80010dc:	e02d      	b.n	800113a <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 80010de:	481d      	ldr	r0, [pc, #116]	; (8001154 <APPE_SysUserEvtRx+0xfc>)
 80010e0:	f00b fe5a 	bl	800cd98 <iprintf>
    APPE_SysEvtError(pPayload);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f000 f843 	bl	8001170 <APPE_SysEvtError>
    break;
 80010ea:	e026      	b.n	800113a <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 80010ec:	481a      	ldr	r0, [pc, #104]	; (8001158 <APPE_SysUserEvtRx+0x100>)
 80010ee:	f00b fec1 	bl	800ce74 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 80010f6:	6819      	ldr	r1, [r3, #0]
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	461a      	mov	r2, r3
 8001100:	4816      	ldr	r0, [pc, #88]	; (800115c <APPE_SysUserEvtRx+0x104>)
 8001102:	f00b fe49 	bl	800cd98 <iprintf>
    break;
 8001106:	e018      	b.n	800113a <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	3302      	adds	r3, #2
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4619      	mov	r1, r3
 8001110:	4813      	ldr	r0, [pc, #76]	; (8001160 <APPE_SysUserEvtRx+0x108>)
 8001112:	f00b fe41 	bl	800cd98 <iprintf>
    break;
 8001116:	e010      	b.n	800113a <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8001118:	4812      	ldr	r0, [pc, #72]	; (8001164 <APPE_SysUserEvtRx+0x10c>)
 800111a:	f00b fe3d 	bl	800cd98 <iprintf>
    break;
 800111e:	e00c      	b.n	800113a <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	3302      	adds	r3, #2
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4619      	mov	r1, r3
 8001128:	480f      	ldr	r0, [pc, #60]	; (8001168 <APPE_SysUserEvtRx+0x110>)
 800112a:	f00b fe35 	bl	800cd98 <iprintf>
    break;
 800112e:	e004      	b.n	800113a <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 8001130:	480e      	ldr	r0, [pc, #56]	; (800116c <APPE_SysUserEvtRx+0x114>)
 8001132:	f00b fe31 	bl	800cd98 <iprintf>
    break;
 8001136:	e000      	b.n	800113a <APPE_SysUserEvtRx+0xe2>

  default:
    break;
 8001138:	bf00      	nop
  }

  return;
 800113a:	bf00      	nop
}
 800113c:	3720      	adds	r7, #32
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	0800dfbc 	.word	0x0800dfbc
 8001148:	0800dfe0 	.word	0x0800dfe0
 800114c:	0800dffc 	.word	0x0800dffc
 8001150:	0800e014 	.word	0x0800e014
 8001154:	0800e034 	.word	0x0800e034
 8001158:	0800e058 	.word	0x0800e058
 800115c:	0800e0a8 	.word	0x0800e0a8
 8001160:	0800e0d0 	.word	0x0800e0d0
 8001164:	0800e10c 	.word	0x0800e10c
 8001168:	0800e130 	.word	0x0800e130
 800116c:	0800e16c 	.word	0x0800e16c

08001170 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	330b      	adds	r3, #11
 800117e:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	3302      	adds	r3, #2
 8001184:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	4619      	mov	r1, r3
 800118c:	4808      	ldr	r0, [pc, #32]	; (80011b0 <APPE_SysEvtError+0x40>)
 800118e:	f00b fe03 	bl	800cd98 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d103      	bne.n	80011a2 <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 800119a:	4806      	ldr	r0, [pc, #24]	; (80011b4 <APPE_SysEvtError+0x44>)
 800119c:	f00b fe6a 	bl	800ce74 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80011a0:	e003      	b.n	80011aa <APPE_SysEvtError+0x3a>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 80011a2:	4805      	ldr	r0, [pc, #20]	; (80011b8 <APPE_SysEvtError+0x48>)
 80011a4:	f00b fe66 	bl	800ce74 <puts>
  return;
 80011a8:	bf00      	nop
}
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	0800e190 	.word	0x0800e190
 80011b4:	0800e1c0 	.word	0x0800e1c0
 80011b8:	0800e1fc 	.word	0x0800e1fc

080011bc <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	; 0x28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80011c4:	f107 0308 	add.w	r3, r7, #8
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	330b      	adds	r3, #11
 80011e0:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3302      	adds	r3, #2
 80011e6:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d128      	bne.n	8001242 <APPE_SysEvtReadyProcessing+0x86>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 80011f0:	481d      	ldr	r0, [pc, #116]	; (8001268 <APPE_SysEvtReadyProcessing+0xac>)
 80011f2:	f00b fe3f 	bl	800ce74 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80011f6:	f7ff fceb 	bl	8000bd0 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80011fa:	230f      	movs	r3, #15
 80011fc:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80011fe:	237f      	movs	r3, #127	; 0x7f
 8001200:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8001202:	f7ff fe2b 	bl	8000e5c <LL_DBGMCU_GetRevisionID>
 8001206:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8001208:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800120a:	4818      	ldr	r0, [pc, #96]	; (800126c <APPE_SysEvtReadyProcessing+0xb0>)
 800120c:	f00b fdc4 	bl	800cd98 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8001210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001212:	b29b      	uxth	r3, r3
 8001214:	82bb      	strh	r3, [r7, #20]
    
    DeviceID = LL_DBGMCU_GetDeviceID();
 8001216:	f7ff fe13 	bl	8000e40 <LL_DBGMCU_GetDeviceID>
 800121a:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 800121c:	6a39      	ldr	r1, [r7, #32]
 800121e:	4814      	ldr	r0, [pc, #80]	; (8001270 <APPE_SysEvtReadyProcessing+0xb4>)
 8001220:	f00b fdba 	bl	800cd98 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 8001224:	6a3b      	ldr	r3, [r7, #32]
 8001226:	b29b      	uxth	r3, r3
 8001228:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 800122a:	f107 0308 	add.w	r3, r7, #8
 800122e:	4618      	mov	r0, r3
 8001230:	f00a f82c 	bl	800b28c <SHCI_C2_Config>

    APP_BLE_Init();
 8001234:	f001 fc6e 	bl	8002b14 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001238:	2100      	movs	r1, #0
 800123a:	2001      	movs	r0, #1
 800123c:	f00b fa7c 	bl	800c738 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001240:	e00e      	b.n	8001260 <APPE_SysEvtReadyProcessing+0xa4>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d106      	bne.n	8001258 <APPE_SysEvtReadyProcessing+0x9c>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 800124a:	480a      	ldr	r0, [pc, #40]	; (8001274 <APPE_SysEvtReadyProcessing+0xb8>)
 800124c:	f00b fda4 	bl	800cd98 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]
  return;
 8001256:	e003      	b.n	8001260 <APPE_SysEvtReadyProcessing+0xa4>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8001258:	4807      	ldr	r0, [pc, #28]	; (8001278 <APPE_SysEvtReadyProcessing+0xbc>)
 800125a:	f00b fd9d 	bl	800cd98 <iprintf>
  return;
 800125e:	bf00      	nop
}
 8001260:	3728      	adds	r7, #40	; 0x28
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	0800e234 	.word	0x0800e234
 800126c:	0800e250 	.word	0x0800e250
 8001270:	0800e274 	.word	0x0800e274
 8001274:	0800e294 	.word	0x0800e294
 8001278:	0800e2c8 	.word	0x0800e2c8

0800127c <APPE_Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
void APPE_Led_Init( void )
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */

  BSP_LED_Init(LED_BLUE);
 8001280:	2000      	movs	r0, #0
 8001282:	f003 fc33 	bl	8004aec <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8001286:	2001      	movs	r0, #1
 8001288:	f003 fc30 	bl	8004aec <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800128c:	2002      	movs	r0, #2
 800128e:	f003 fc2d 	bl	8004aec <BSP_LED_Init>

  BSP_LED_On(LED_GREEN);
 8001292:	2001      	movs	r0, #1
 8001294:	f003 fc64 	bl	8004b60 <BSP_LED_On>
#endif

  return;
 8001298:	bf00      	nop
}
 800129a:	bd80      	pop	{r7, pc}

0800129c <APPE_Button_Init>:

void APPE_Button_Init( void )
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */

  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 80012a0:	2101      	movs	r1, #1
 80012a2:	2000      	movs	r0, #0
 80012a4:	f003 fc90 	bl	8004bc8 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 80012a8:	2101      	movs	r1, #1
 80012aa:	2001      	movs	r0, #1
 80012ac:	f003 fc8c 	bl	8004bc8 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 80012b0:	2101      	movs	r1, #1
 80012b2:	2002      	movs	r0, #2
 80012b4:	f003 fc88 	bl	8004bc8 <BSP_PB_Init>
#endif

  return;
 80012b8:	bf00      	nop
}
 80012ba:	bd80      	pop	{r7, pc}

080012bc <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295
 80012c4:	f00b fa68 	bl	800c798 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}

080012cc <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80012d0:	bf00      	nop
}
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
 80012e2:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80012e4:	f04f 30ff 	mov.w	r0, #4294967295
 80012e8:	f00b fa56 	bl	800c798 <UTIL_SEQ_Run>

  return;
 80012ec:	bf00      	nop
}
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80012fc:	2100      	movs	r1, #0
 80012fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001302:	f00b fb67 	bl	800c9d4 <UTIL_SEQ_SetTask>
  return;
 8001306:	bf00      	nop
}
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001316:	2002      	movs	r0, #2
 8001318:	f00b fbc8 	bl	800caac <UTIL_SEQ_SetEvt>
  return;
 800131c:	bf00      	nop
}
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800132c:	2002      	movs	r0, #2
 800132e:	f00b fbdd 	bl	800caec <UTIL_SEQ_WaitEvt>
  return;
 8001332:	bf00      	nop
}
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	4603      	mov	r3, r0
 8001342:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8001344:	88fb      	ldrh	r3, [r7, #6]
 8001346:	2b40      	cmp	r3, #64	; 0x40
 8001348:	d00c      	beq.n	8001364 <HAL_GPIO_EXTI_Callback+0x2a>
 800134a:	2b40      	cmp	r3, #64	; 0x40
 800134c:	dc0d      	bgt.n	800136a <HAL_GPIO_EXTI_Callback+0x30>
 800134e:	2b01      	cmp	r3, #1
 8001350:	d002      	beq.n	8001358 <HAL_GPIO_EXTI_Callback+0x1e>
 8001352:	2b10      	cmp	r3, #16
 8001354:	d003      	beq.n	800135e <HAL_GPIO_EXTI_Callback+0x24>
    case BUTTON_SW3_PIN:
      APP_BLE_Key_Button3_Action();
      break;

    default:
      break;
 8001356:	e008      	b.n	800136a <HAL_GPIO_EXTI_Callback+0x30>
      APP_BLE_Key_Button1_Action();
 8001358:	f002 f942 	bl	80035e0 <APP_BLE_Key_Button1_Action>
      break; 
 800135c:	e006      	b.n	800136c <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button2_Action();
 800135e:	f002 f95f 	bl	8003620 <APP_BLE_Key_Button2_Action>
      break; 
 8001362:	e003      	b.n	800136c <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button3_Action();
 8001364:	f002 f970 	bl	8003648 <APP_BLE_Key_Button3_Action>
      break;
 8001368:	e000      	b.n	800136c <HAL_GPIO_EXTI_Callback+0x32>
      break;
 800136a:	bf00      	nop

  }
  return;
 800136c:	bf00      	nop
}
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <RxUART_Init>:

static void RxUART_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 8001378:	4b03      	ldr	r3, [pc, #12]	; (8001388 <RxUART_Init+0x14>)
 800137a:	2201      	movs	r2, #1
 800137c:	4903      	ldr	r1, [pc, #12]	; (800138c <RxUART_Init+0x18>)
 800137e:	2000      	movs	r0, #0
 8001380:	f000 ff10 	bl	80021a4 <HW_UART_Receive_IT>
}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}
 8001388:	08001391 	.word	0x08001391
 800138c:	20000120 	.word	0x20000120

08001390 <RxCpltCallback>:

static void RxCpltCallback(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 8001394:	4b15      	ldr	r3, [pc, #84]	; (80013ec <RxCpltCallback+0x5c>)
 8001396:	881b      	ldrh	r3, [r3, #0]
 8001398:	2bff      	cmp	r3, #255	; 0xff
 800139a:	d81e      	bhi.n	80013da <RxCpltCallback+0x4a>
  {
    if (aRxBuffer[0] == '\r')
 800139c:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <RxCpltCallback+0x60>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b0d      	cmp	r3, #13
 80013a2:	d10f      	bne.n	80013c4 <RxCpltCallback+0x34>
    {
      APP_DBG_MSG("received %s\n", CommandString);
 80013a4:	4913      	ldr	r1, [pc, #76]	; (80013f4 <RxCpltCallback+0x64>)
 80013a6:	4814      	ldr	r0, [pc, #80]	; (80013f8 <RxCpltCallback+0x68>)
 80013a8:	f00b fcf6 	bl	800cd98 <iprintf>

      UartCmdExecute();
 80013ac:	f000 f828 	bl	8001400 <UartCmdExecute>

      /* Clear receive buffer and character counter*/
      indexReceiveChar = 0;
 80013b0:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <RxCpltCallback+0x5c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	801a      	strh	r2, [r3, #0]
      memset(CommandString, 0, C_SIZE_CMD_STRING);
 80013b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013ba:	2100      	movs	r1, #0
 80013bc:	480d      	ldr	r0, [pc, #52]	; (80013f4 <RxCpltCallback+0x64>)
 80013be:	f00b fe6d 	bl	800d09c <memset>
 80013c2:	e00a      	b.n	80013da <RxCpltCallback+0x4a>
    }
    else
    {
      CommandString[indexReceiveChar++] = aRxBuffer[0];
 80013c4:	4b09      	ldr	r3, [pc, #36]	; (80013ec <RxCpltCallback+0x5c>)
 80013c6:	881b      	ldrh	r3, [r3, #0]
 80013c8:	1c5a      	adds	r2, r3, #1
 80013ca:	b291      	uxth	r1, r2
 80013cc:	4a07      	ldr	r2, [pc, #28]	; (80013ec <RxCpltCallback+0x5c>)
 80013ce:	8011      	strh	r1, [r2, #0]
 80013d0:	461a      	mov	r2, r3
 80013d2:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <RxCpltCallback+0x60>)
 80013d4:	7819      	ldrb	r1, [r3, #0]
 80013d6:	4b07      	ldr	r3, [pc, #28]	; (80013f4 <RxCpltCallback+0x64>)
 80013d8:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 80013da:	4b08      	ldr	r3, [pc, #32]	; (80013fc <RxCpltCallback+0x6c>)
 80013dc:	2201      	movs	r2, #1
 80013de:	4904      	ldr	r1, [pc, #16]	; (80013f0 <RxCpltCallback+0x60>)
 80013e0:	2000      	movs	r0, #0
 80013e2:	f000 fedf 	bl	80021a4 <HW_UART_Receive_IT>
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000228 	.word	0x20000228
 80013f0:	20000120 	.word	0x20000120
 80013f4:	20000128 	.word	0x20000128
 80013f8:	0800e2fc 	.word	0x0800e2fc
 80013fc:	08001391 	.word	0x08001391

08001400 <UartCmdExecute>:

static void UartCmdExecute(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* Parse received CommandString */
  if(strcmp((char const*)CommandString, "SW1") == 0)
 8001404:	491c      	ldr	r1, [pc, #112]	; (8001478 <UartCmdExecute+0x78>)
 8001406:	481d      	ldr	r0, [pc, #116]	; (800147c <UartCmdExecute+0x7c>)
 8001408:	f7fe feba 	bl	8000180 <strcmp>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d10a      	bne.n	8001428 <UartCmdExecute+0x28>
  {
    APP_DBG_MSG("SW1 OK\n");
 8001412:	481b      	ldr	r0, [pc, #108]	; (8001480 <UartCmdExecute+0x80>)
 8001414:	f00b fd2e 	bl	800ce74 <puts>
    exti_handle.Line = EXTI_LINE_0;
 8001418:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <UartCmdExecute+0x84>)
 800141a:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 800141e:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 8001420:	4818      	ldr	r0, [pc, #96]	; (8001484 <UartCmdExecute+0x84>)
 8001422:	f004 fa47 	bl	80058b4 <HAL_EXTI_GenerateSWI>
  }
  else
  {
    APP_DBG_MSG("NOT RECOGNIZED COMMAND : %s\n", CommandString);
  }
}
 8001426:	e025      	b.n	8001474 <UartCmdExecute+0x74>
  else if (strcmp((char const*)CommandString, "SW2") == 0)
 8001428:	4917      	ldr	r1, [pc, #92]	; (8001488 <UartCmdExecute+0x88>)
 800142a:	4814      	ldr	r0, [pc, #80]	; (800147c <UartCmdExecute+0x7c>)
 800142c:	f7fe fea8 	bl	8000180 <strcmp>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d109      	bne.n	800144a <UartCmdExecute+0x4a>
    APP_DBG_MSG("SW2 OK\n");
 8001436:	4815      	ldr	r0, [pc, #84]	; (800148c <UartCmdExecute+0x8c>)
 8001438:	f00b fd1c 	bl	800ce74 <puts>
    exti_handle.Line = EXTI_LINE_4;
 800143c:	4b11      	ldr	r3, [pc, #68]	; (8001484 <UartCmdExecute+0x84>)
 800143e:	4a14      	ldr	r2, [pc, #80]	; (8001490 <UartCmdExecute+0x90>)
 8001440:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 8001442:	4810      	ldr	r0, [pc, #64]	; (8001484 <UartCmdExecute+0x84>)
 8001444:	f004 fa36 	bl	80058b4 <HAL_EXTI_GenerateSWI>
}
 8001448:	e014      	b.n	8001474 <UartCmdExecute+0x74>
  else if (strcmp((char const*)CommandString, "SW3") == 0)
 800144a:	4912      	ldr	r1, [pc, #72]	; (8001494 <UartCmdExecute+0x94>)
 800144c:	480b      	ldr	r0, [pc, #44]	; (800147c <UartCmdExecute+0x7c>)
 800144e:	f7fe fe97 	bl	8000180 <strcmp>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d109      	bne.n	800146c <UartCmdExecute+0x6c>
    APP_DBG_MSG("SW3 OK\n");
 8001458:	480f      	ldr	r0, [pc, #60]	; (8001498 <UartCmdExecute+0x98>)
 800145a:	f00b fd0b 	bl	800ce74 <puts>
    exti_handle.Line = EXTI_LINE_6;
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <UartCmdExecute+0x84>)
 8001460:	4a0e      	ldr	r2, [pc, #56]	; (800149c <UartCmdExecute+0x9c>)
 8001462:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 8001464:	4807      	ldr	r0, [pc, #28]	; (8001484 <UartCmdExecute+0x84>)
 8001466:	f004 fa25 	bl	80058b4 <HAL_EXTI_GenerateSWI>
}
 800146a:	e003      	b.n	8001474 <UartCmdExecute+0x74>
    APP_DBG_MSG("NOT RECOGNIZED COMMAND : %s\n", CommandString);
 800146c:	4903      	ldr	r1, [pc, #12]	; (800147c <UartCmdExecute+0x7c>)
 800146e:	480c      	ldr	r0, [pc, #48]	; (80014a0 <UartCmdExecute+0xa0>)
 8001470:	f00b fc92 	bl	800cd98 <iprintf>
}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}
 8001478:	0800e30c 	.word	0x0800e30c
 800147c:	20000128 	.word	0x20000128
 8001480:	0800e310 	.word	0x0800e310
 8001484:	20000118 	.word	0x20000118
 8001488:	0800e318 	.word	0x0800e318
 800148c:	0800e31c 	.word	0x0800e31c
 8001490:	16000004 	.word	0x16000004
 8001494:	0800e324 	.word	0x0800e324
 8001498:	0800e328 	.word	0x0800e328
 800149c:	16000006 	.word	0x16000006
 80014a0:	0800e330 	.word	0x0800e330

080014a4 <LL_EXTI_EnableIT_0_31>:
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <LL_EXTI_EnableIT_0_31+0x24>)
 80014ae:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80014b2:	4905      	ldr	r1, [pc, #20]	; (80014c8 <LL_EXTI_EnableIT_0_31+0x24>)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	58000800 	.word	0x58000800

080014cc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80014d4:	4b05      	ldr	r3, [pc, #20]	; (80014ec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4904      	ldr	r1, [pc, #16]	; (80014ec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4313      	orrs	r3, r2
 80014de:	600b      	str	r3, [r1, #0]

}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	58000800 	.word	0x58000800

080014f0 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80014f6:	4b0d      	ldr	r3, [pc, #52]	; (800152c <ReadRtcSsrValue+0x3c>)
 80014f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80014fe:	4b0b      	ldr	r3, [pc, #44]	; (800152c <ReadRtcSsrValue+0x3c>)
 8001500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001502:	b29b      	uxth	r3, r3
 8001504:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001506:	e005      	b.n	8001514 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800150c:	4b07      	ldr	r3, [pc, #28]	; (800152c <ReadRtcSsrValue+0x3c>)
 800150e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001510:	b29b      	uxth	r3, r3
 8001512:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	429a      	cmp	r2, r3
 800151a:	d1f5      	bne.n	8001508 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 800151c:	683b      	ldr	r3, [r7, #0]
}
 800151e:	4618      	mov	r0, r3
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	40002800 	.word	0x40002800

08001530 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	460a      	mov	r2, r1
 800153a:	71fb      	strb	r3, [r7, #7]
 800153c:	4613      	mov	r3, r2
 800153e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001540:	79ba      	ldrb	r2, [r7, #6]
 8001542:	491d      	ldr	r1, [pc, #116]	; (80015b8 <LinkTimerAfter+0x88>)
 8001544:	4613      	mov	r3, r2
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	4413      	add	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	440b      	add	r3, r1
 800154e:	3315      	adds	r3, #21
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	2b06      	cmp	r3, #6
 8001558:	d009      	beq.n	800156e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800155a:	7bfa      	ldrb	r2, [r7, #15]
 800155c:	4916      	ldr	r1, [pc, #88]	; (80015b8 <LinkTimerAfter+0x88>)
 800155e:	4613      	mov	r3, r2
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	4413      	add	r3, r2
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	440b      	add	r3, r1
 8001568:	3314      	adds	r3, #20
 800156a:	79fa      	ldrb	r2, [r7, #7]
 800156c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800156e:	79fa      	ldrb	r2, [r7, #7]
 8001570:	4911      	ldr	r1, [pc, #68]	; (80015b8 <LinkTimerAfter+0x88>)
 8001572:	4613      	mov	r3, r2
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	4413      	add	r3, r2
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	440b      	add	r3, r1
 800157c:	3315      	adds	r3, #21
 800157e:	7bfa      	ldrb	r2, [r7, #15]
 8001580:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001582:	79fa      	ldrb	r2, [r7, #7]
 8001584:	490c      	ldr	r1, [pc, #48]	; (80015b8 <LinkTimerAfter+0x88>)
 8001586:	4613      	mov	r3, r2
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	4413      	add	r3, r2
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	440b      	add	r3, r1
 8001590:	3314      	adds	r3, #20
 8001592:	79ba      	ldrb	r2, [r7, #6]
 8001594:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001596:	79ba      	ldrb	r2, [r7, #6]
 8001598:	4907      	ldr	r1, [pc, #28]	; (80015b8 <LinkTimerAfter+0x88>)
 800159a:	4613      	mov	r3, r2
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	4413      	add	r3, r2
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	440b      	add	r3, r1
 80015a4:	3315      	adds	r3, #21
 80015a6:	79fa      	ldrb	r2, [r7, #7]
 80015a8:	701a      	strb	r2, [r3, #0]

  return;
 80015aa:	bf00      	nop
}
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	2000022c 	.word	0x2000022c

080015bc <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	460a      	mov	r2, r1
 80015c6:	71fb      	strb	r3, [r7, #7]
 80015c8:	4613      	mov	r3, r2
 80015ca:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80015cc:	4b29      	ldr	r3, [pc, #164]	; (8001674 <LinkTimerBefore+0xb8>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	79ba      	ldrb	r2, [r7, #6]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d032      	beq.n	800163e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80015d8:	79ba      	ldrb	r2, [r7, #6]
 80015da:	4927      	ldr	r1, [pc, #156]	; (8001678 <LinkTimerBefore+0xbc>)
 80015dc:	4613      	mov	r3, r2
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	4413      	add	r3, r2
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	440b      	add	r3, r1
 80015e6:	3314      	adds	r3, #20
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80015ec:	7bfa      	ldrb	r2, [r7, #15]
 80015ee:	4922      	ldr	r1, [pc, #136]	; (8001678 <LinkTimerBefore+0xbc>)
 80015f0:	4613      	mov	r3, r2
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	4413      	add	r3, r2
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	440b      	add	r3, r1
 80015fa:	3315      	adds	r3, #21
 80015fc:	79fa      	ldrb	r2, [r7, #7]
 80015fe:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001600:	79fa      	ldrb	r2, [r7, #7]
 8001602:	491d      	ldr	r1, [pc, #116]	; (8001678 <LinkTimerBefore+0xbc>)
 8001604:	4613      	mov	r3, r2
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	4413      	add	r3, r2
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	440b      	add	r3, r1
 800160e:	3315      	adds	r3, #21
 8001610:	79ba      	ldrb	r2, [r7, #6]
 8001612:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001614:	79fa      	ldrb	r2, [r7, #7]
 8001616:	4918      	ldr	r1, [pc, #96]	; (8001678 <LinkTimerBefore+0xbc>)
 8001618:	4613      	mov	r3, r2
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	4413      	add	r3, r2
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	440b      	add	r3, r1
 8001622:	3314      	adds	r3, #20
 8001624:	7bfa      	ldrb	r2, [r7, #15]
 8001626:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001628:	79ba      	ldrb	r2, [r7, #6]
 800162a:	4913      	ldr	r1, [pc, #76]	; (8001678 <LinkTimerBefore+0xbc>)
 800162c:	4613      	mov	r3, r2
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	4413      	add	r3, r2
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	440b      	add	r3, r1
 8001636:	3314      	adds	r3, #20
 8001638:	79fa      	ldrb	r2, [r7, #7]
 800163a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 800163c:	e014      	b.n	8001668 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800163e:	79fa      	ldrb	r2, [r7, #7]
 8001640:	490d      	ldr	r1, [pc, #52]	; (8001678 <LinkTimerBefore+0xbc>)
 8001642:	4613      	mov	r3, r2
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	4413      	add	r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	440b      	add	r3, r1
 800164c:	3315      	adds	r3, #21
 800164e:	79ba      	ldrb	r2, [r7, #6]
 8001650:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001652:	79ba      	ldrb	r2, [r7, #6]
 8001654:	4908      	ldr	r1, [pc, #32]	; (8001678 <LinkTimerBefore+0xbc>)
 8001656:	4613      	mov	r3, r2
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	4413      	add	r3, r2
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	440b      	add	r3, r1
 8001660:	3314      	adds	r3, #20
 8001662:	79fa      	ldrb	r2, [r7, #7]
 8001664:	701a      	strb	r2, [r3, #0]
  return;
 8001666:	bf00      	nop
}
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	200002bc 	.word	0x200002bc
 8001678:	2000022c 	.word	0x2000022c

0800167c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001686:	4b4e      	ldr	r3, [pc, #312]	; (80017c0 <linkTimer+0x144>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	b2db      	uxtb	r3, r3
 800168c:	2b06      	cmp	r3, #6
 800168e:	d118      	bne.n	80016c2 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001690:	4b4b      	ldr	r3, [pc, #300]	; (80017c0 <linkTimer+0x144>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	b2da      	uxtb	r2, r3
 8001696:	4b4b      	ldr	r3, [pc, #300]	; (80017c4 <linkTimer+0x148>)
 8001698:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800169a:	4a49      	ldr	r2, [pc, #292]	; (80017c0 <linkTimer+0x144>)
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80016a0:	79fa      	ldrb	r2, [r7, #7]
 80016a2:	4949      	ldr	r1, [pc, #292]	; (80017c8 <linkTimer+0x14c>)
 80016a4:	4613      	mov	r3, r2
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	4413      	add	r3, r2
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	440b      	add	r3, r1
 80016ae:	3315      	adds	r3, #21
 80016b0:	2206      	movs	r2, #6
 80016b2:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80016b4:	4b45      	ldr	r3, [pc, #276]	; (80017cc <linkTimer+0x150>)
 80016b6:	f04f 32ff 	mov.w	r2, #4294967295
 80016ba:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	81fb      	strh	r3, [r7, #14]
 80016c0:	e078      	b.n	80017b4 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80016c2:	f000 f909 	bl	80018d8 <ReturnTimeElapsed>
 80016c6:	4603      	mov	r3, r0
 80016c8:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80016ca:	79fa      	ldrb	r2, [r7, #7]
 80016cc:	493e      	ldr	r1, [pc, #248]	; (80017c8 <linkTimer+0x14c>)
 80016ce:	4613      	mov	r3, r2
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	4413      	add	r3, r2
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	440b      	add	r3, r1
 80016d8:	3308      	adds	r3, #8
 80016da:	6819      	ldr	r1, [r3, #0]
 80016dc:	89fb      	ldrh	r3, [r7, #14]
 80016de:	79fa      	ldrb	r2, [r7, #7]
 80016e0:	4419      	add	r1, r3
 80016e2:	4839      	ldr	r0, [pc, #228]	; (80017c8 <linkTimer+0x14c>)
 80016e4:	4613      	mov	r3, r2
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	4413      	add	r3, r2
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	4403      	add	r3, r0
 80016ee:	3308      	adds	r3, #8
 80016f0:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80016f2:	79fa      	ldrb	r2, [r7, #7]
 80016f4:	4934      	ldr	r1, [pc, #208]	; (80017c8 <linkTimer+0x14c>)
 80016f6:	4613      	mov	r3, r2
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	4413      	add	r3, r2
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	440b      	add	r3, r1
 8001700:	3308      	adds	r3, #8
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001706:	4b2e      	ldr	r3, [pc, #184]	; (80017c0 <linkTimer+0x144>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	b2db      	uxtb	r3, r3
 800170c:	4619      	mov	r1, r3
 800170e:	4a2e      	ldr	r2, [pc, #184]	; (80017c8 <linkTimer+0x14c>)
 8001710:	460b      	mov	r3, r1
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	440b      	add	r3, r1
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	4413      	add	r3, r2
 800171a:	3308      	adds	r3, #8
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68ba      	ldr	r2, [r7, #8]
 8001720:	429a      	cmp	r2, r3
 8001722:	d337      	bcc.n	8001794 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001724:	4b26      	ldr	r3, [pc, #152]	; (80017c0 <linkTimer+0x144>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800172a:	7b7a      	ldrb	r2, [r7, #13]
 800172c:	4926      	ldr	r1, [pc, #152]	; (80017c8 <linkTimer+0x14c>)
 800172e:	4613      	mov	r3, r2
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	4413      	add	r3, r2
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	440b      	add	r3, r1
 8001738:	3315      	adds	r3, #21
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800173e:	e013      	b.n	8001768 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001740:	7b7a      	ldrb	r2, [r7, #13]
 8001742:	4921      	ldr	r1, [pc, #132]	; (80017c8 <linkTimer+0x14c>)
 8001744:	4613      	mov	r3, r2
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	4413      	add	r3, r2
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	440b      	add	r3, r1
 800174e:	3315      	adds	r3, #21
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001754:	7b7a      	ldrb	r2, [r7, #13]
 8001756:	491c      	ldr	r1, [pc, #112]	; (80017c8 <linkTimer+0x14c>)
 8001758:	4613      	mov	r3, r2
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	4413      	add	r3, r2
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	440b      	add	r3, r1
 8001762:	3315      	adds	r3, #21
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001768:	7b3b      	ldrb	r3, [r7, #12]
 800176a:	2b06      	cmp	r3, #6
 800176c:	d00b      	beq.n	8001786 <linkTimer+0x10a>
 800176e:	7b3a      	ldrb	r2, [r7, #12]
 8001770:	4915      	ldr	r1, [pc, #84]	; (80017c8 <linkTimer+0x14c>)
 8001772:	4613      	mov	r3, r2
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	4413      	add	r3, r2
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	440b      	add	r3, r1
 800177c:	3308      	adds	r3, #8
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	68ba      	ldr	r2, [r7, #8]
 8001782:	429a      	cmp	r2, r3
 8001784:	d2dc      	bcs.n	8001740 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001786:	7b7a      	ldrb	r2, [r7, #13]
 8001788:	79fb      	ldrb	r3, [r7, #7]
 800178a:	4611      	mov	r1, r2
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fecf 	bl	8001530 <LinkTimerAfter>
 8001792:	e00f      	b.n	80017b4 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001794:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <linkTimer+0x144>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	b2da      	uxtb	r2, r3
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	4611      	mov	r1, r2
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff ff0c 	bl	80015bc <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <linkTimer+0x144>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <linkTimer+0x148>)
 80017ac:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80017ae:	4a04      	ldr	r2, [pc, #16]	; (80017c0 <linkTimer+0x144>)
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80017b4:	89fb      	ldrh	r3, [r7, #14]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	200002bc 	.word	0x200002bc
 80017c4:	200002bd 	.word	0x200002bd
 80017c8:	2000022c 	.word	0x2000022c
 80017cc:	200002c0 	.word	0x200002c0

080017d0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	460a      	mov	r2, r1
 80017da:	71fb      	strb	r3, [r7, #7]
 80017dc:	4613      	mov	r3, r2
 80017de:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80017e0:	4b39      	ldr	r3, [pc, #228]	; (80018c8 <UnlinkTimer+0xf8>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	79fa      	ldrb	r2, [r7, #7]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d111      	bne.n	8001810 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80017ec:	4b36      	ldr	r3, [pc, #216]	; (80018c8 <UnlinkTimer+0xf8>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	4b36      	ldr	r3, [pc, #216]	; (80018cc <UnlinkTimer+0xfc>)
 80017f4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80017f6:	79fa      	ldrb	r2, [r7, #7]
 80017f8:	4935      	ldr	r1, [pc, #212]	; (80018d0 <UnlinkTimer+0x100>)
 80017fa:	4613      	mov	r3, r2
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	4413      	add	r3, r2
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	440b      	add	r3, r1
 8001804:	3315      	adds	r3, #21
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	b2da      	uxtb	r2, r3
 800180a:	4b2f      	ldr	r3, [pc, #188]	; (80018c8 <UnlinkTimer+0xf8>)
 800180c:	701a      	strb	r2, [r3, #0]
 800180e:	e03e      	b.n	800188e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001810:	79fa      	ldrb	r2, [r7, #7]
 8001812:	492f      	ldr	r1, [pc, #188]	; (80018d0 <UnlinkTimer+0x100>)
 8001814:	4613      	mov	r3, r2
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	4413      	add	r3, r2
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	440b      	add	r3, r1
 800181e:	3314      	adds	r3, #20
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001824:	79fa      	ldrb	r2, [r7, #7]
 8001826:	492a      	ldr	r1, [pc, #168]	; (80018d0 <UnlinkTimer+0x100>)
 8001828:	4613      	mov	r3, r2
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	4413      	add	r3, r2
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	440b      	add	r3, r1
 8001832:	3315      	adds	r3, #21
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001838:	79f9      	ldrb	r1, [r7, #7]
 800183a:	7bfa      	ldrb	r2, [r7, #15]
 800183c:	4824      	ldr	r0, [pc, #144]	; (80018d0 <UnlinkTimer+0x100>)
 800183e:	460b      	mov	r3, r1
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	440b      	add	r3, r1
 8001844:	00db      	lsls	r3, r3, #3
 8001846:	4403      	add	r3, r0
 8001848:	3315      	adds	r3, #21
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	b2d8      	uxtb	r0, r3
 800184e:	4920      	ldr	r1, [pc, #128]	; (80018d0 <UnlinkTimer+0x100>)
 8001850:	4613      	mov	r3, r2
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	4413      	add	r3, r2
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	440b      	add	r3, r1
 800185a:	3315      	adds	r3, #21
 800185c:	4602      	mov	r2, r0
 800185e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001860:	7bbb      	ldrb	r3, [r7, #14]
 8001862:	2b06      	cmp	r3, #6
 8001864:	d013      	beq.n	800188e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001866:	79f9      	ldrb	r1, [r7, #7]
 8001868:	7bba      	ldrb	r2, [r7, #14]
 800186a:	4819      	ldr	r0, [pc, #100]	; (80018d0 <UnlinkTimer+0x100>)
 800186c:	460b      	mov	r3, r1
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	440b      	add	r3, r1
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	4403      	add	r3, r0
 8001876:	3314      	adds	r3, #20
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	b2d8      	uxtb	r0, r3
 800187c:	4914      	ldr	r1, [pc, #80]	; (80018d0 <UnlinkTimer+0x100>)
 800187e:	4613      	mov	r3, r2
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	4413      	add	r3, r2
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	440b      	add	r3, r1
 8001888:	3314      	adds	r3, #20
 800188a:	4602      	mov	r2, r0
 800188c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800188e:	79fa      	ldrb	r2, [r7, #7]
 8001890:	490f      	ldr	r1, [pc, #60]	; (80018d0 <UnlinkTimer+0x100>)
 8001892:	4613      	mov	r3, r2
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	4413      	add	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	440b      	add	r3, r1
 800189c:	330c      	adds	r3, #12
 800189e:	2201      	movs	r2, #1
 80018a0:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80018a2:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <UnlinkTimer+0xf8>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b06      	cmp	r3, #6
 80018aa:	d107      	bne.n	80018bc <UnlinkTimer+0xec>
 80018ac:	79bb      	ldrb	r3, [r7, #6]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d104      	bne.n	80018bc <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80018b2:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <UnlinkTimer+0x104>)
 80018b4:	f04f 32ff 	mov.w	r2, #4294967295
 80018b8:	601a      	str	r2, [r3, #0]
  }

  return;
 80018ba:	bf00      	nop
 80018bc:	bf00      	nop
}
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	200002bc 	.word	0x200002bc
 80018cc:	200002bd 	.word	0x200002bd
 80018d0:	2000022c 	.word	0x2000022c
 80018d4:	200002c0 	.word	0x200002c0

080018d8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80018de:	4b1a      	ldr	r3, [pc, #104]	; (8001948 <ReturnTimeElapsed+0x70>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e6:	d026      	beq.n	8001936 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80018e8:	f7ff fe02 	bl	80014f0 <ReadRtcSsrValue>
 80018ec:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80018ee:	4b16      	ldr	r3, [pc, #88]	; (8001948 <ReturnTimeElapsed+0x70>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d805      	bhi.n	8001904 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80018f8:	4b13      	ldr	r3, [pc, #76]	; (8001948 <ReturnTimeElapsed+0x70>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	607b      	str	r3, [r7, #4]
 8001902:	e00a      	b.n	800191a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001904:	4b11      	ldr	r3, [pc, #68]	; (800194c <ReturnTimeElapsed+0x74>)
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	461a      	mov	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001910:	4b0d      	ldr	r3, [pc, #52]	; (8001948 <ReturnTimeElapsed+0x70>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	4413      	add	r3, r2
 8001918:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800191a:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <ReturnTimeElapsed+0x78>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	461a      	mov	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	fb02 f303 	mul.w	r3, r2, r3
 8001926:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001928:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <ReturnTimeElapsed+0x7c>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	461a      	mov	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	40d3      	lsrs	r3, r2
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	e001      	b.n	800193a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	b29b      	uxth	r3, r3
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200002c0 	.word	0x200002c0
 800194c:	200002c8 	.word	0x200002c8
 8001950:	200002c6 	.word	0x200002c6
 8001954:	200002c5 	.word	0x200002c5

08001958 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001962:	88fb      	ldrh	r3, [r7, #6]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d108      	bne.n	800197a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001968:	f7ff fdc2 	bl	80014f0 <ReadRtcSsrValue>
 800196c:	4603      	mov	r3, r0
 800196e:	4a21      	ldr	r2, [pc, #132]	; (80019f4 <RestartWakeupCounter+0x9c>)
 8001970:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001972:	2003      	movs	r0, #3
 8001974:	f003 fc4f 	bl	8005216 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001978:	e039      	b.n	80019ee <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800197a:	88fb      	ldrh	r3, [r7, #6]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d803      	bhi.n	8001988 <RestartWakeupCounter+0x30>
 8001980:	4b1d      	ldr	r3, [pc, #116]	; (80019f8 <RestartWakeupCounter+0xa0>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d002      	beq.n	800198e <RestartWakeupCounter+0x36>
      Value -= 1;
 8001988:	88fb      	ldrh	r3, [r7, #6]
 800198a:	3b01      	subs	r3, #1
 800198c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800198e:	bf00      	nop
 8001990:	4b1a      	ldr	r3, [pc, #104]	; (80019fc <RestartWakeupCounter+0xa4>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	f003 0304 	and.w	r3, r3, #4
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0f8      	beq.n	8001990 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800199e:	4b17      	ldr	r3, [pc, #92]	; (80019fc <RestartWakeupCounter+0xa4>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	4b15      	ldr	r3, [pc, #84]	; (80019fc <RestartWakeupCounter+0xa4>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80019ae:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80019b0:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <RestartWakeupCounter+0xa8>)
 80019b2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80019b6:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80019b8:	2003      	movs	r0, #3
 80019ba:	f003 fc3a 	bl	8005232 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80019be:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <RestartWakeupCounter+0xac>)
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	0c1b      	lsrs	r3, r3, #16
 80019c4:	041b      	lsls	r3, r3, #16
 80019c6:	88fa      	ldrh	r2, [r7, #6]
 80019c8:	490e      	ldr	r1, [pc, #56]	; (8001a04 <RestartWakeupCounter+0xac>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80019ce:	f7ff fd8f 	bl	80014f0 <ReadRtcSsrValue>
 80019d2:	4603      	mov	r3, r0
 80019d4:	4a07      	ldr	r2, [pc, #28]	; (80019f4 <RestartWakeupCounter+0x9c>)
 80019d6:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 80019d8:	4b08      	ldr	r3, [pc, #32]	; (80019fc <RestartWakeupCounter+0xa4>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	689a      	ldr	r2, [r3, #8]
 80019de:	4b07      	ldr	r3, [pc, #28]	; (80019fc <RestartWakeupCounter+0xa4>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80019e6:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80019e8:	f3af 8000 	nop.w
  return ;
 80019ec:	bf00      	nop
}
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	200002c0 	.word	0x200002c0
 80019f8:	200002c5 	.word	0x200002c5
 80019fc:	20000310 	.word	0x20000310
 8001a00:	58000800 	.word	0x58000800
 8001a04:	40002800 	.word	0x40002800

08001a08 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001a0e:	4b45      	ldr	r3, [pc, #276]	; (8001b24 <RescheduleTimerList+0x11c>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a1a:	d107      	bne.n	8001a2c <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001a1c:	bf00      	nop
 8001a1e:	4b42      	ldr	r3, [pc, #264]	; (8001b28 <RescheduleTimerList+0x120>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1f8      	bne.n	8001a1e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001a2c:	4b3e      	ldr	r3, [pc, #248]	; (8001b28 <RescheduleTimerList+0x120>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	689a      	ldr	r2, [r3, #8]
 8001a32:	4b3d      	ldr	r3, [pc, #244]	; (8001b28 <RescheduleTimerList+0x120>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a3a:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001a3c:	4b3b      	ldr	r3, [pc, #236]	; (8001b2c <RescheduleTimerList+0x124>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001a42:	7bfa      	ldrb	r2, [r7, #15]
 8001a44:	493a      	ldr	r1, [pc, #232]	; (8001b30 <RescheduleTimerList+0x128>)
 8001a46:	4613      	mov	r3, r2
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	4413      	add	r3, r2
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	440b      	add	r3, r1
 8001a50:	3308      	adds	r3, #8
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001a56:	f7ff ff3f 	bl	80018d8 <ReturnTimeElapsed>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001a5e:	88fb      	ldrh	r3, [r7, #6]
 8001a60:	68ba      	ldr	r2, [r7, #8]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d205      	bcs.n	8001a72 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001a6a:	4b32      	ldr	r3, [pc, #200]	; (8001b34 <RescheduleTimerList+0x12c>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	701a      	strb	r2, [r3, #0]
 8001a70:	e04d      	b.n	8001b0e <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	4a30      	ldr	r2, [pc, #192]	; (8001b38 <RescheduleTimerList+0x130>)
 8001a76:	8812      	ldrh	r2, [r2, #0]
 8001a78:	b292      	uxth	r2, r2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d906      	bls.n	8001a92 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001a84:	4b2c      	ldr	r3, [pc, #176]	; (8001b38 <RescheduleTimerList+0x130>)
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001a8a:	4b2a      	ldr	r3, [pc, #168]	; (8001b34 <RescheduleTimerList+0x12c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	701a      	strb	r2, [r3, #0]
 8001a90:	e03d      	b.n	8001b0e <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	88fb      	ldrh	r3, [r7, #6]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001a9c:	4b25      	ldr	r3, [pc, #148]	; (8001b34 <RescheduleTimerList+0x12c>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001aa2:	e034      	b.n	8001b0e <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001aa4:	7bfa      	ldrb	r2, [r7, #15]
 8001aa6:	4922      	ldr	r1, [pc, #136]	; (8001b30 <RescheduleTimerList+0x128>)
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	4413      	add	r3, r2
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	440b      	add	r3, r1
 8001ab2:	3308      	adds	r3, #8
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	88fb      	ldrh	r3, [r7, #6]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d20a      	bcs.n	8001ad2 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001abc:	7bfa      	ldrb	r2, [r7, #15]
 8001abe:	491c      	ldr	r1, [pc, #112]	; (8001b30 <RescheduleTimerList+0x128>)
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	4413      	add	r3, r2
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	440b      	add	r3, r1
 8001aca:	3308      	adds	r3, #8
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	e013      	b.n	8001afa <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001ad2:	7bfa      	ldrb	r2, [r7, #15]
 8001ad4:	4916      	ldr	r1, [pc, #88]	; (8001b30 <RescheduleTimerList+0x128>)
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	4413      	add	r3, r2
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	440b      	add	r3, r1
 8001ae0:	3308      	adds	r3, #8
 8001ae2:	6819      	ldr	r1, [r3, #0]
 8001ae4:	88fb      	ldrh	r3, [r7, #6]
 8001ae6:	7bfa      	ldrb	r2, [r7, #15]
 8001ae8:	1ac9      	subs	r1, r1, r3
 8001aea:	4811      	ldr	r0, [pc, #68]	; (8001b30 <RescheduleTimerList+0x128>)
 8001aec:	4613      	mov	r3, r2
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	4413      	add	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	4403      	add	r3, r0
 8001af6:	3308      	adds	r3, #8
 8001af8:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001afa:	7bfa      	ldrb	r2, [r7, #15]
 8001afc:	490c      	ldr	r1, [pc, #48]	; (8001b30 <RescheduleTimerList+0x128>)
 8001afe:	4613      	mov	r3, r2
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	4413      	add	r3, r2
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	440b      	add	r3, r1
 8001b08:	3315      	adds	r3, #21
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001b0e:	7bfb      	ldrb	r3, [r7, #15]
 8001b10:	2b06      	cmp	r3, #6
 8001b12:	d1c7      	bne.n	8001aa4 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001b14:	89bb      	ldrh	r3, [r7, #12]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff ff1e 	bl	8001958 <RestartWakeupCounter>

  return ;
 8001b1c:	bf00      	nop
}
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40002800 	.word	0x40002800
 8001b28:	20000310 	.word	0x20000310
 8001b2c:	200002bc 	.word	0x200002bc
 8001b30:	2000022c 	.word	0x2000022c
 8001b34:	200002c4 	.word	0x200002c4
 8001b38:	200002ca 	.word	0x200002ca

08001b3c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08a      	sub	sp, #40	; 0x28
 8001b40:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b42:	f3ef 8310 	mrs	r3, PRIMASK
 8001b46:	617b      	str	r3, [r7, #20]
  return(result);
 8001b48:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001b4c:	b672      	cpsid	i
}
 8001b4e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001b50:	4b59      	ldr	r3, [pc, #356]	; (8001cb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	22ca      	movs	r2, #202	; 0xca
 8001b56:	625a      	str	r2, [r3, #36]	; 0x24
 8001b58:	4b57      	ldr	r3, [pc, #348]	; (8001cb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2253      	movs	r2, #83	; 0x53
 8001b5e:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001b60:	4b55      	ldr	r3, [pc, #340]	; (8001cb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	4b54      	ldr	r3, [pc, #336]	; (8001cb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b6e:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001b70:	4b52      	ldr	r3, [pc, #328]	; (8001cbc <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001b78:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001b7c:	4950      	ldr	r1, [pc, #320]	; (8001cc0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001b7e:	4613      	mov	r3, r2
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	4413      	add	r3, r2
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	440b      	add	r3, r1
 8001b88:	330c      	adds	r3, #12
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d16e      	bne.n	8001c70 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001b92:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001b96:	494a      	ldr	r1, [pc, #296]	; (8001cc0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001b98:	4613      	mov	r3, r2
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	4413      	add	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	440b      	add	r3, r1
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001ba6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001baa:	4945      	ldr	r1, [pc, #276]	; (8001cc0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001bac:	4613      	mov	r3, r2
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	4413      	add	r3, r2
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	440b      	add	r3, r1
 8001bb6:	3310      	adds	r3, #16
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001bbc:	4b41      	ldr	r3, [pc, #260]	; (8001cc4 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d04c      	beq.n	8001c60 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001bc6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001bca:	493d      	ldr	r1, [pc, #244]	; (8001cc0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001bcc:	4613      	mov	r3, r2
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	4413      	add	r3, r2
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	440b      	add	r3, r1
 8001bd6:	330d      	adds	r3, #13
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d124      	bne.n	8001c2a <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001be0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001be4:	2101      	movs	r1, #1
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff fdf2 	bl	80017d0 <UnlinkTimer>
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	f383 8810 	msr	PRIMASK, r3
}
 8001bf6:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001bf8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001bfc:	4930      	ldr	r1, [pc, #192]	; (8001cc0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001bfe:	4613      	mov	r3, r2
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	4413      	add	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	440b      	add	r3, r1
 8001c08:	3304      	adds	r3, #4
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c10:	4611      	mov	r1, r2
 8001c12:	4618      	mov	r0, r3
 8001c14:	f000 fa32 	bl	800207c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001c18:	4b27      	ldr	r3, [pc, #156]	; (8001cb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	22ca      	movs	r2, #202	; 0xca
 8001c1e:	625a      	str	r2, [r3, #36]	; 0x24
 8001c20:	4b25      	ldr	r3, [pc, #148]	; (8001cb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2253      	movs	r2, #83	; 0x53
 8001c26:	625a      	str	r2, [r3, #36]	; 0x24
 8001c28:	e012      	b.n	8001c50 <HW_TS_RTC_Wakeup_Handler+0x114>
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f383 8810 	msr	PRIMASK, r3
}
 8001c34:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001c36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f000 f99a 	bl	8001f74 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001c40:	4b1d      	ldr	r3, [pc, #116]	; (8001cb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	22ca      	movs	r2, #202	; 0xca
 8001c46:	625a      	str	r2, [r3, #36]	; 0x24
 8001c48:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2253      	movs	r2, #83	; 0x53
 8001c4e:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001c50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c54:	69fa      	ldr	r2, [r7, #28]
 8001c56:	4619      	mov	r1, r3
 8001c58:	69b8      	ldr	r0, [r7, #24]
 8001c5a:	f000 fa95 	bl	8002188 <HW_TS_RTC_Int_AppNot>
 8001c5e:	e022      	b.n	8001ca6 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001c60:	f7ff fed2 	bl	8001a08 <RescheduleTimerList>
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	f383 8810 	msr	PRIMASK, r3
}
 8001c6e:	e01a      	b.n	8001ca6 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001c70:	bf00      	nop
 8001c72:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0f8      	beq.n	8001c72 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001c80:	4b0d      	ldr	r3, [pc, #52]	; (8001cb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	b2da      	uxtb	r2, r3
 8001c88:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001c90:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001c92:	4b0d      	ldr	r3, [pc, #52]	; (8001cc8 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001c94:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f383 8810 	msr	PRIMASK, r3
}
 8001ca4:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001ca6:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	22ff      	movs	r2, #255	; 0xff
 8001cac:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001cae:	bf00      	nop
}
 8001cb0:	3728      	adds	r7, #40	; 0x28
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000310 	.word	0x20000310
 8001cbc:	200002bc 	.word	0x200002bc
 8001cc0:	2000022c 	.word	0x2000022c
 8001cc4:	200002c4 	.word	0x200002c4
 8001cc8:	58000800 	.word	0x58000800

08001ccc <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	6039      	str	r1, [r7, #0]
 8001cd6:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001cd8:	4b5e      	ldr	r3, [pc, #376]	; (8001e54 <HW_TS_Init+0x188>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	22ca      	movs	r2, #202	; 0xca
 8001cde:	625a      	str	r2, [r3, #36]	; 0x24
 8001ce0:	4b5c      	ldr	r3, [pc, #368]	; (8001e54 <HW_TS_Init+0x188>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2253      	movs	r2, #83	; 0x53
 8001ce6:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001ce8:	4b5b      	ldr	r3, [pc, #364]	; (8001e58 <HW_TS_Init+0x18c>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	4a5a      	ldr	r2, [pc, #360]	; (8001e58 <HW_TS_Init+0x18c>)
 8001cee:	f043 0320 	orr.w	r3, r3, #32
 8001cf2:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001cf4:	4b58      	ldr	r3, [pc, #352]	; (8001e58 <HW_TS_Init+0x18c>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	f1c3 0304 	rsb	r3, r3, #4
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	4b55      	ldr	r3, [pc, #340]	; (8001e5c <HW_TS_Init+0x190>)
 8001d08:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001d0a:	4b53      	ldr	r3, [pc, #332]	; (8001e58 <HW_TS_Init+0x18c>)
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001d12:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001d16:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	fa92 f2a2 	rbit	r2, r2
 8001d1e:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d24:	697a      	ldr	r2, [r7, #20]
 8001d26:	2a00      	cmp	r2, #0
 8001d28:	d101      	bne.n	8001d2e <HW_TS_Init+0x62>
  {
    return 32U;
 8001d2a:	2220      	movs	r2, #32
 8001d2c:	e003      	b.n	8001d36 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	fab2 f282 	clz	r2, r2
 8001d34:	b2d2      	uxtb	r2, r2
 8001d36:	40d3      	lsrs	r3, r2
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	4b48      	ldr	r3, [pc, #288]	; (8001e60 <HW_TS_Init+0x194>)
 8001d40:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001d42:	4b45      	ldr	r3, [pc, #276]	; (8001e58 <HW_TS_Init+0x18c>)
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	3301      	adds	r3, #1
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	4b44      	ldr	r3, [pc, #272]	; (8001e64 <HW_TS_Init+0x198>)
 8001d54:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001d56:	4b43      	ldr	r3, [pc, #268]	; (8001e64 <HW_TS_Init+0x198>)
 8001d58:	881b      	ldrh	r3, [r3, #0]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	4a40      	ldr	r2, [pc, #256]	; (8001e60 <HW_TS_Init+0x194>)
 8001d5e:	7812      	ldrb	r2, [r2, #0]
 8001d60:	fb02 f303 	mul.w	r3, r2, r3
 8001d64:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001d68:	4a3c      	ldr	r2, [pc, #240]	; (8001e5c <HW_TS_Init+0x190>)
 8001d6a:	7812      	ldrb	r2, [r2, #0]
 8001d6c:	40d3      	lsrs	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d904      	bls.n	8001d84 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001d7a:	4b3b      	ldr	r3, [pc, #236]	; (8001e68 <HW_TS_Init+0x19c>)
 8001d7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d80:	801a      	strh	r2, [r3, #0]
 8001d82:	e003      	b.n	8001d8c <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	4b37      	ldr	r3, [pc, #220]	; (8001e68 <HW_TS_Init+0x19c>)
 8001d8a:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001d8c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001d90:	f7ff fb9c 	bl	80014cc <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001d94:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001d98:	f7ff fb84 	bl	80014a4 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001d9c:	79fb      	ldrb	r3, [r7, #7]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d13d      	bne.n	8001e1e <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001da2:	4b32      	ldr	r3, [pc, #200]	; (8001e6c <HW_TS_Init+0x1a0>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001da8:	4b31      	ldr	r3, [pc, #196]	; (8001e70 <HW_TS_Init+0x1a4>)
 8001daa:	f04f 32ff 	mov.w	r2, #4294967295
 8001dae:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001db0:	2300      	movs	r3, #0
 8001db2:	77fb      	strb	r3, [r7, #31]
 8001db4:	e00c      	b.n	8001dd0 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001db6:	7ffa      	ldrb	r2, [r7, #31]
 8001db8:	492e      	ldr	r1, [pc, #184]	; (8001e74 <HW_TS_Init+0x1a8>)
 8001dba:	4613      	mov	r3, r2
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	4413      	add	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	440b      	add	r3, r1
 8001dc4:	330c      	adds	r3, #12
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001dca:	7ffb      	ldrb	r3, [r7, #31]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	77fb      	strb	r3, [r7, #31]
 8001dd0:	7ffb      	ldrb	r3, [r7, #31]
 8001dd2:	2b05      	cmp	r3, #5
 8001dd4:	d9ef      	bls.n	8001db6 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001dd6:	4b28      	ldr	r3, [pc, #160]	; (8001e78 <HW_TS_Init+0x1ac>)
 8001dd8:	2206      	movs	r2, #6
 8001dda:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001ddc:	4b1d      	ldr	r3, [pc, #116]	; (8001e54 <HW_TS_Init+0x188>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	4b1c      	ldr	r3, [pc, #112]	; (8001e54 <HW_TS_Init+0x188>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dea:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001dec:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <HW_TS_Init+0x188>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	4b17      	ldr	r3, [pc, #92]	; (8001e54 <HW_TS_Init+0x188>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001dfc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001dfe:	4b1f      	ldr	r3, [pc, #124]	; (8001e7c <HW_TS_Init+0x1b0>)
 8001e00:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001e04:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001e06:	2003      	movs	r0, #3
 8001e08:	f003 fa13 	bl	8005232 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001e0c:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <HW_TS_Init+0x188>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689a      	ldr	r2, [r3, #8]
 8001e12:	4b10      	ldr	r3, [pc, #64]	; (8001e54 <HW_TS_Init+0x188>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	e009      	b.n	8001e32 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001e1e:	4b0d      	ldr	r3, [pc, #52]	; (8001e54 <HW_TS_Init+0x188>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d002      	beq.n	8001e32 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001e2c:	2003      	movs	r0, #3
 8001e2e:	f003 f9f2 	bl	8005216 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001e32:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <HW_TS_Init+0x188>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	22ff      	movs	r2, #255	; 0xff
 8001e38:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2103      	movs	r1, #3
 8001e3e:	2003      	movs	r0, #3
 8001e40:	f003 f9a7 	bl	8005192 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001e44:	2003      	movs	r0, #3
 8001e46:	f003 f9be 	bl	80051c6 <HAL_NVIC_EnableIRQ>

  return;
 8001e4a:	bf00      	nop
}
 8001e4c:	3720      	adds	r7, #32
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000310 	.word	0x20000310
 8001e58:	40002800 	.word	0x40002800
 8001e5c:	200002c5 	.word	0x200002c5
 8001e60:	200002c6 	.word	0x200002c6
 8001e64:	200002c8 	.word	0x200002c8
 8001e68:	200002ca 	.word	0x200002ca
 8001e6c:	200002c4 	.word	0x200002c4
 8001e70:	200002c0 	.word	0x200002c0
 8001e74:	2000022c 	.word	0x2000022c
 8001e78:	200002bc 	.word	0x200002bc
 8001e7c:	58000800 	.word	0x58000800

08001e80 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b08b      	sub	sp, #44	; 0x2c
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	603b      	str	r3, [r7, #0]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e96:	f3ef 8310 	mrs	r3, PRIMASK
 8001e9a:	61fb      	str	r3, [r7, #28]
  return(result);
 8001e9c:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001e9e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea0:	b672      	cpsid	i
}
 8001ea2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001ea4:	e004      	b.n	8001eb0 <HW_TS_Create+0x30>
  {
    loop++;
 8001ea6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001eaa:	3301      	adds	r3, #1
 8001eac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001eb0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001eb4:	2b05      	cmp	r3, #5
 8001eb6:	d80c      	bhi.n	8001ed2 <HW_TS_Create+0x52>
 8001eb8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001ebc:	492c      	ldr	r1, [pc, #176]	; (8001f70 <HW_TS_Create+0xf0>)
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	4413      	add	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	440b      	add	r3, r1
 8001ec8:	330c      	adds	r3, #12
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1e9      	bne.n	8001ea6 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001ed2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ed6:	2b06      	cmp	r3, #6
 8001ed8:	d038      	beq.n	8001f4c <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001eda:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001ede:	4924      	ldr	r1, [pc, #144]	; (8001f70 <HW_TS_Create+0xf0>)
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4413      	add	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	440b      	add	r3, r1
 8001eea:	330c      	adds	r3, #12
 8001eec:	2201      	movs	r2, #1
 8001eee:	701a      	strb	r2, [r3, #0]
 8001ef0:	6a3b      	ldr	r3, [r7, #32]
 8001ef2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	f383 8810 	msr	PRIMASK, r3
}
 8001efa:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001efc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001f00:	491b      	ldr	r1, [pc, #108]	; (8001f70 <HW_TS_Create+0xf0>)
 8001f02:	4613      	mov	r3, r2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	4413      	add	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	440b      	add	r3, r1
 8001f0c:	3310      	adds	r3, #16
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8001f12:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001f16:	4916      	ldr	r1, [pc, #88]	; (8001f70 <HW_TS_Create+0xf0>)
 8001f18:	4613      	mov	r3, r2
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	4413      	add	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	440b      	add	r3, r1
 8001f22:	330d      	adds	r3, #13
 8001f24:	79fa      	ldrb	r2, [r7, #7]
 8001f26:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001f28:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001f2c:	4910      	ldr	r1, [pc, #64]	; (8001f70 <HW_TS_Create+0xf0>)
 8001f2e:	4613      	mov	r3, r2
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	4413      	add	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	440b      	add	r3, r1
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001f42:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8001f44:	2300      	movs	r3, #0
 8001f46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001f4a:	e008      	b.n	8001f5e <HW_TS_Create+0xde>
 8001f4c:	6a3b      	ldr	r3, [r7, #32]
 8001f4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	f383 8810 	msr	PRIMASK, r3
}
 8001f56:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8001f5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	372c      	adds	r7, #44	; 0x2c
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	2000022c 	.word	0x2000022c

08001f74 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f7e:	f3ef 8310 	mrs	r3, PRIMASK
 8001f82:	60fb      	str	r3, [r7, #12]
  return(result);
 8001f84:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001f86:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f88:	b672      	cpsid	i
}
 8001f8a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001f8c:	2003      	movs	r0, #3
 8001f8e:	f003 f928 	bl	80051e2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001f92:	4b34      	ldr	r3, [pc, #208]	; (8002064 <HW_TS_Stop+0xf0>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	22ca      	movs	r2, #202	; 0xca
 8001f98:	625a      	str	r2, [r3, #36]	; 0x24
 8001f9a:	4b32      	ldr	r3, [pc, #200]	; (8002064 <HW_TS_Stop+0xf0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2253      	movs	r2, #83	; 0x53
 8001fa0:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001fa2:	79fa      	ldrb	r2, [r7, #7]
 8001fa4:	4930      	ldr	r1, [pc, #192]	; (8002068 <HW_TS_Stop+0xf4>)
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	4413      	add	r3, r2
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	440b      	add	r3, r1
 8001fb0:	330c      	adds	r3, #12
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d142      	bne.n	8002040 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001fba:	79fb      	ldrb	r3, [r7, #7]
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff fc06 	bl	80017d0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001fc4:	4b29      	ldr	r3, [pc, #164]	; (800206c <HW_TS_Stop+0xf8>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001fca:	7cfb      	ldrb	r3, [r7, #19]
 8001fcc:	2b06      	cmp	r3, #6
 8001fce:	d12f      	bne.n	8002030 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001fd0:	4b27      	ldr	r3, [pc, #156]	; (8002070 <HW_TS_Stop+0xfc>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fdc:	d107      	bne.n	8001fee <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001fde:	bf00      	nop
 8001fe0:	4b20      	ldr	r3, [pc, #128]	; (8002064 <HW_TS_Stop+0xf0>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	f003 0304 	and.w	r3, r3, #4
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f8      	bne.n	8001fe0 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001fee:	4b1d      	ldr	r3, [pc, #116]	; (8002064 <HW_TS_Stop+0xf0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	4b1b      	ldr	r3, [pc, #108]	; (8002064 <HW_TS_Stop+0xf0>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ffc:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001ffe:	bf00      	nop
 8002000:	4b18      	ldr	r3, [pc, #96]	; (8002064 <HW_TS_Stop+0xf0>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	f003 0304 	and.w	r3, r3, #4
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0f8      	beq.n	8002000 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800200e:	4b15      	ldr	r3, [pc, #84]	; (8002064 <HW_TS_Stop+0xf0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	b2da      	uxtb	r2, r3
 8002016:	4b13      	ldr	r3, [pc, #76]	; (8002064 <HW_TS_Stop+0xf0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800201e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002020:	4b14      	ldr	r3, [pc, #80]	; (8002074 <HW_TS_Stop+0x100>)
 8002022:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002026:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002028:	2003      	movs	r0, #3
 800202a:	f003 f902 	bl	8005232 <HAL_NVIC_ClearPendingIRQ>
 800202e:	e007      	b.n	8002040 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002030:	4b11      	ldr	r3, [pc, #68]	; (8002078 <HW_TS_Stop+0x104>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	b2db      	uxtb	r3, r3
 8002036:	7cfa      	ldrb	r2, [r7, #19]
 8002038:	429a      	cmp	r2, r3
 800203a:	d001      	beq.n	8002040 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 800203c:	f7ff fce4 	bl	8001a08 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002040:	4b08      	ldr	r3, [pc, #32]	; (8002064 <HW_TS_Stop+0xf0>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	22ff      	movs	r2, #255	; 0xff
 8002046:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002048:	2003      	movs	r0, #3
 800204a:	f003 f8bc 	bl	80051c6 <HAL_NVIC_EnableIRQ>
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	f383 8810 	msr	PRIMASK, r3
}
 8002058:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800205a:	bf00      	nop
}
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20000310 	.word	0x20000310
 8002068:	2000022c 	.word	0x2000022c
 800206c:	200002bc 	.word	0x200002bc
 8002070:	40002800 	.word	0x40002800
 8002074:	58000800 	.word	0x58000800
 8002078:	200002bd 	.word	0x200002bd

0800207c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	6039      	str	r1, [r7, #0]
 8002086:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002088:	79fa      	ldrb	r2, [r7, #7]
 800208a:	493b      	ldr	r1, [pc, #236]	; (8002178 <HW_TS_Start+0xfc>)
 800208c:	4613      	mov	r3, r2
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	4413      	add	r3, r2
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	440b      	add	r3, r1
 8002096:	330c      	adds	r3, #12
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d103      	bne.n	80020a8 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff ff66 	bl	8001f74 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020a8:	f3ef 8310 	mrs	r3, PRIMASK
 80020ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80020ae:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80020b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80020b2:	b672      	cpsid	i
}
 80020b4:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80020b6:	2003      	movs	r0, #3
 80020b8:	f003 f893 	bl	80051e2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80020bc:	4b2f      	ldr	r3, [pc, #188]	; (800217c <HW_TS_Start+0x100>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	22ca      	movs	r2, #202	; 0xca
 80020c2:	625a      	str	r2, [r3, #36]	; 0x24
 80020c4:	4b2d      	ldr	r3, [pc, #180]	; (800217c <HW_TS_Start+0x100>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2253      	movs	r2, #83	; 0x53
 80020ca:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80020cc:	79fa      	ldrb	r2, [r7, #7]
 80020ce:	492a      	ldr	r1, [pc, #168]	; (8002178 <HW_TS_Start+0xfc>)
 80020d0:	4613      	mov	r3, r2
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	4413      	add	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	440b      	add	r3, r1
 80020da:	330c      	adds	r3, #12
 80020dc:	2202      	movs	r2, #2
 80020de:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80020e0:	79fa      	ldrb	r2, [r7, #7]
 80020e2:	4925      	ldr	r1, [pc, #148]	; (8002178 <HW_TS_Start+0xfc>)
 80020e4:	4613      	mov	r3, r2
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	4413      	add	r3, r2
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	440b      	add	r3, r1
 80020ee:	3308      	adds	r3, #8
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80020f4:	79fa      	ldrb	r2, [r7, #7]
 80020f6:	4920      	ldr	r1, [pc, #128]	; (8002178 <HW_TS_Start+0xfc>)
 80020f8:	4613      	mov	r3, r2
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	4413      	add	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	440b      	add	r3, r1
 8002102:	3304      	adds	r3, #4
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff fab6 	bl	800167c <linkTimer>
 8002110:	4603      	mov	r3, r0
 8002112:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002114:	4b1a      	ldr	r3, [pc, #104]	; (8002180 <HW_TS_Start+0x104>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800211a:	4b1a      	ldr	r3, [pc, #104]	; (8002184 <HW_TS_Start+0x108>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	b2db      	uxtb	r3, r3
 8002120:	7c7a      	ldrb	r2, [r7, #17]
 8002122:	429a      	cmp	r2, r3
 8002124:	d002      	beq.n	800212c <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8002126:	f7ff fc6f 	bl	8001a08 <RescheduleTimerList>
 800212a:	e013      	b.n	8002154 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800212c:	79fa      	ldrb	r2, [r7, #7]
 800212e:	4912      	ldr	r1, [pc, #72]	; (8002178 <HW_TS_Start+0xfc>)
 8002130:	4613      	mov	r3, r2
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	4413      	add	r3, r2
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	440b      	add	r3, r1
 800213a:	3308      	adds	r3, #8
 800213c:	6819      	ldr	r1, [r3, #0]
 800213e:	8a7b      	ldrh	r3, [r7, #18]
 8002140:	79fa      	ldrb	r2, [r7, #7]
 8002142:	1ac9      	subs	r1, r1, r3
 8002144:	480c      	ldr	r0, [pc, #48]	; (8002178 <HW_TS_Start+0xfc>)
 8002146:	4613      	mov	r3, r2
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	4413      	add	r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	4403      	add	r3, r0
 8002150:	3308      	adds	r3, #8
 8002152:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002154:	4b09      	ldr	r3, [pc, #36]	; (800217c <HW_TS_Start+0x100>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	22ff      	movs	r2, #255	; 0xff
 800215a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800215c:	2003      	movs	r0, #3
 800215e:	f003 f832 	bl	80051c6 <HAL_NVIC_EnableIRQ>
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	f383 8810 	msr	PRIMASK, r3
}
 800216c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800216e:	bf00      	nop
}
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	2000022c 	.word	0x2000022c
 800217c:	20000310 	.word	0x20000310
 8002180:	200002bc 	.word	0x200002bc
 8002184:	200002bd 	.word	0x200002bd

08002188 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	460b      	mov	r3, r1
 8002192:	607a      	str	r2, [r7, #4]
 8002194:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4798      	blx	r3

  return;
 800219a:	bf00      	nop
}
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
	...

080021a4 <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	607b      	str	r3, [r7, #4]
 80021ae:	4603      	mov	r3, r0
 80021b0:	73fb      	strb	r3, [r7, #15]
 80021b2:	4613      	mov	r3, r2
 80021b4:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10c      	bne.n	80021d6 <HW_UART_Receive_IT+0x32>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_UART_RX_IT(huart1, USART1);
 80021bc:	4a08      	ldr	r2, [pc, #32]	; (80021e0 <HW_UART_Receive_IT+0x3c>)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	4b08      	ldr	r3, [pc, #32]	; (80021e4 <HW_UART_Receive_IT+0x40>)
 80021c4:	4a08      	ldr	r2, [pc, #32]	; (80021e8 <HW_UART_Receive_IT+0x44>)
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	89bb      	ldrh	r3, [r7, #12]
 80021ca:	461a      	mov	r2, r3
 80021cc:	68b9      	ldr	r1, [r7, #8]
 80021ce:	4805      	ldr	r0, [pc, #20]	; (80021e4 <HW_UART_Receive_IT+0x40>)
 80021d0:	f005 fb8c 	bl	80078ec <HAL_UART_Receive_IT>
            break;
 80021d4:	e000      	b.n	80021d8 <HW_UART_Receive_IT+0x34>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 80021d6:	bf00      	nop
    }

    return;
 80021d8:	bf00      	nop
}
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	200002cc 	.word	0x200002cc
 80021e4:	20000334 	.word	0x20000334
 80021e8:	40013800 	.word	0x40013800

080021ec <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60b9      	str	r1, [r7, #8]
 80021f4:	607b      	str	r3, [r7, #4]
 80021f6:	4603      	mov	r3, r0
 80021f8:	73fb      	strb	r3, [r7, #15]
 80021fa:	4613      	mov	r3, r2
 80021fc:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 80021fe:	2300      	movs	r3, #0
 8002200:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8002202:	2300      	movs	r3, #0
 8002204:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8002206:	7bfb      	ldrb	r3, [r7, #15]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d10e      	bne.n	800222a <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 800220c:	4a17      	ldr	r2, [pc, #92]	; (800226c <HW_UART_Transmit_DMA+0x80>)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8002212:	4b17      	ldr	r3, [pc, #92]	; (8002270 <HW_UART_Transmit_DMA+0x84>)
 8002214:	4a17      	ldr	r2, [pc, #92]	; (8002274 <HW_UART_Transmit_DMA+0x88>)
 8002216:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002218:	89bb      	ldrh	r3, [r7, #12]
 800221a:	461a      	mov	r2, r3
 800221c:	68b9      	ldr	r1, [r7, #8]
 800221e:	4814      	ldr	r0, [pc, #80]	; (8002270 <HW_UART_Transmit_DMA+0x84>)
 8002220:	f005 fbb0 	bl	8007984 <HAL_UART_Transmit_DMA>
 8002224:	4603      	mov	r3, r0
 8002226:	75fb      	strb	r3, [r7, #23]
            break;
 8002228:	e000      	b.n	800222c <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 800222a:	bf00      	nop
    }

    switch (hal_status)
 800222c:	7dfb      	ldrb	r3, [r7, #23]
 800222e:	2b03      	cmp	r3, #3
 8002230:	d816      	bhi.n	8002260 <HW_UART_Transmit_DMA+0x74>
 8002232:	a201      	add	r2, pc, #4	; (adr r2, 8002238 <HW_UART_Transmit_DMA+0x4c>)
 8002234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002238:	08002249 	.word	0x08002249
 800223c:	0800224f 	.word	0x0800224f
 8002240:	08002255 	.word	0x08002255
 8002244:	0800225b 	.word	0x0800225b
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8002248:	2300      	movs	r3, #0
 800224a:	75bb      	strb	r3, [r7, #22]
            break;
 800224c:	e009      	b.n	8002262 <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 800224e:	2301      	movs	r3, #1
 8002250:	75bb      	strb	r3, [r7, #22]
            break;
 8002252:	e006      	b.n	8002262 <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8002254:	2302      	movs	r3, #2
 8002256:	75bb      	strb	r3, [r7, #22]
            break;
 8002258:	e003      	b.n	8002262 <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 800225a:	2303      	movs	r3, #3
 800225c:	75bb      	strb	r3, [r7, #22]
            break;
 800225e:	e000      	b.n	8002262 <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8002260:	bf00      	nop
    }

    return hw_status;
 8002262:	7dbb      	ldrb	r3, [r7, #22]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	200002d0 	.word	0x200002d0
 8002270:	20000334 	.word	0x20000334
 8002274:	40013800 	.word	0x40013800

08002278 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	461a      	mov	r2, r3
 8002286:	4b09      	ldr	r3, [pc, #36]	; (80022ac <HAL_UART_RxCpltCallback+0x34>)
 8002288:	429a      	cmp	r2, r3
 800228a:	d107      	bne.n	800229c <HAL_UART_RxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 800228c:	4b08      	ldr	r3, [pc, #32]	; (80022b0 <HAL_UART_RxCpltCallback+0x38>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d005      	beq.n	80022a0 <HAL_UART_RxCpltCallback+0x28>
            {
                HW_huart1RxCb();
 8002294:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <HAL_UART_RxCpltCallback+0x38>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4798      	blx	r3
            }
            break;
 800229a:	e001      	b.n	80022a0 <HAL_UART_RxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 800229c:	bf00      	nop
 800229e:	e000      	b.n	80022a2 <HAL_UART_RxCpltCallback+0x2a>
            break;
 80022a0:	bf00      	nop
    }

    return;
 80022a2:	bf00      	nop
}
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40013800 	.word	0x40013800
 80022b0:	200002cc 	.word	0x200002cc

080022b4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	461a      	mov	r2, r3
 80022c2:	4b09      	ldr	r3, [pc, #36]	; (80022e8 <HAL_UART_TxCpltCallback+0x34>)
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d107      	bne.n	80022d8 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 80022c8:	4b08      	ldr	r3, [pc, #32]	; (80022ec <HAL_UART_TxCpltCallback+0x38>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d005      	beq.n	80022dc <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 80022d0:	4b06      	ldr	r3, [pc, #24]	; (80022ec <HAL_UART_TxCpltCallback+0x38>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4798      	blx	r3
            }
            break;
 80022d6:	e001      	b.n	80022dc <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 80022d8:	bf00      	nop
 80022da:	e000      	b.n	80022de <HAL_UART_TxCpltCallback+0x2a>
            break;
 80022dc:	bf00      	nop
    }

    return;
 80022de:	bf00      	nop
}
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40013800 	.word	0x40013800
 80022ec:	200002d0 	.word	0x200002d0

080022f0 <LL_RCC_LSE_SetDriveCapability>:
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80022f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002300:	f023 0218 	bic.w	r2, r3, #24
 8002304:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4313      	orrs	r3, r2
 800230c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <LL_AHB1_GRP1_EnableClock>:
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002328:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800232a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4313      	orrs	r3, r2
 8002332:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002338:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4013      	ands	r3, r2
 800233e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002340:	68fb      	ldr	r3, [r7, #12]
}
 8002342:	bf00      	nop
 8002344:	3714      	adds	r7, #20
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <LL_AHB2_GRP1_EnableClock>:
{
 800234e:	b480      	push	{r7}
 8002350:	b085      	sub	sp, #20
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800235a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800235c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4313      	orrs	r3, r2
 8002364:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800236a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4013      	ands	r3, r2
 8002370:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002372:	68fb      	ldr	r3, [r7, #12]
}
 8002374:	bf00      	nop
 8002376:	3714      	adds	r7, #20
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002384:	f002 fd38 	bl	8004df8 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002388:	f7fe fda6 	bl	8000ed8 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800238c:	f000 f811 	bl	80023b2 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002390:	f000 f85b 	bl	800244a <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 8002394:	f000 f87a 	bl	800248c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002398:	f000 f91c 	bl	80025d4 <MX_GPIO_Init>
  MX_DMA_Init();
 800239c:	f000 f908 	bl	80025b0 <MX_DMA_Init>
  MX_RTC_Init();
 80023a0:	f000 f888 	bl	80024b4 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80023a4:	f000 f8b6 	bl	8002514 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80023a8:	f7fe fda4 	bl	8000ef4 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
	{
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80023ac:	f7fe ff86 	bl	80012bc <MX_APPE_Process>
 80023b0:	e7fc      	b.n	80023ac <main+0x2c>

080023b2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b098      	sub	sp, #96	; 0x60
 80023b6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023b8:	f107 031c 	add.w	r3, r7, #28
 80023bc:	2244      	movs	r2, #68	; 0x44
 80023be:	2100      	movs	r1, #0
 80023c0:	4618      	mov	r0, r3
 80023c2:	f00a fe6b 	bl	800d09c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023c6:	463b      	mov	r3, r7
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	605a      	str	r2, [r3, #4]
 80023ce:	609a      	str	r2, [r3, #8]
 80023d0:	60da      	str	r2, [r3, #12]
 80023d2:	611a      	str	r2, [r3, #16]
 80023d4:	615a      	str	r2, [r3, #20]
 80023d6:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80023d8:	f003 fcd0 	bl	8005d7c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80023dc:	2000      	movs	r0, #0
 80023de:	f7ff ff87 	bl	80022f0 <LL_RCC_LSE_SetDriveCapability>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80023e2:	2307      	movs	r3, #7
 80023e4:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80023ec:	2301      	movs	r3, #1
 80023ee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023f6:	2340      	movs	r3, #64	; 0x40
 80023f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80023fa:	2300      	movs	r3, #0
 80023fc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023fe:	f107 031c 	add.w	r3, r7, #28
 8002402:	4618      	mov	r0, r3
 8002404:	f004 f822 	bl	800644c <HAL_RCC_OscConfig>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <SystemClock_Config+0x60>
  {
    Error_Handler();
 800240e:	f000 f8eb 	bl	80025e8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002412:	236f      	movs	r3, #111	; 0x6f
 8002414:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002416:	2302      	movs	r3, #2
 8002418:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800241a:	2300      	movs	r3, #0
 800241c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800241e:	2300      	movs	r3, #0
 8002420:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002422:	2300      	movs	r3, #0
 8002424:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800242a:	2300      	movs	r3, #0
 800242c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800242e:	463b      	mov	r3, r7
 8002430:	2101      	movs	r1, #1
 8002432:	4618      	mov	r0, r3
 8002434:	f004 fb40 	bl	8006ab8 <HAL_RCC_ClockConfig>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800243e:	f000 f8d3 	bl	80025e8 <Error_Handler>
  }
}
 8002442:	bf00      	nop
 8002444:	3760      	adds	r7, #96	; 0x60
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b08c      	sub	sp, #48	; 0x30
 800244e:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002450:	463b      	mov	r3, r7
 8002452:	2230      	movs	r2, #48	; 0x30
 8002454:	2100      	movs	r1, #0
 8002456:	4618      	mov	r0, r3
 8002458:	f00a fe20 	bl	800d09c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800245c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002460:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002462:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002466:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8002468:	2302      	movs	r3, #2
 800246a:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800246c:	2310      	movs	r3, #16
 800246e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002470:	463b      	mov	r3, r7
 8002472:	4618      	mov	r0, r3
 8002474:	f004 fee2 	bl	800723c <HAL_RCCEx_PeriphCLKConfig>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 800247e:	f000 f8b3 	bl	80025e8 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002482:	bf00      	nop
 8002484:	3730      	adds	r7, #48	; 0x30
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
	...

0800248c <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
void MX_IPCC_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002490:	4b06      	ldr	r3, [pc, #24]	; (80024ac <MX_IPCC_Init+0x20>)
 8002492:	4a07      	ldr	r2, [pc, #28]	; (80024b0 <MX_IPCC_Init+0x24>)
 8002494:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002496:	4805      	ldr	r0, [pc, #20]	; (80024ac <MX_IPCC_Init+0x20>)
 8002498:	f003 fbea 	bl	8005c70 <HAL_IPCC_Init>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80024a2:	f000 f8a1 	bl	80025e8 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	200002d4 	.word	0x200002d4
 80024b0:	58000c00 	.word	0x58000c00

080024b4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
void MX_RTC_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80024b8:	4b14      	ldr	r3, [pc, #80]	; (800250c <MX_RTC_Init+0x58>)
 80024ba:	4a15      	ldr	r2, [pc, #84]	; (8002510 <MX_RTC_Init+0x5c>)
 80024bc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80024be:	4b13      	ldr	r3, [pc, #76]	; (800250c <MX_RTC_Init+0x58>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80024c4:	4b11      	ldr	r3, [pc, #68]	; (800250c <MX_RTC_Init+0x58>)
 80024c6:	220f      	movs	r2, #15
 80024c8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80024ca:	4b10      	ldr	r3, [pc, #64]	; (800250c <MX_RTC_Init+0x58>)
 80024cc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80024d0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80024d2:	4b0e      	ldr	r3, [pc, #56]	; (800250c <MX_RTC_Init+0x58>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80024d8:	4b0c      	ldr	r3, [pc, #48]	; (800250c <MX_RTC_Init+0x58>)
 80024da:	2200      	movs	r2, #0
 80024dc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80024de:	4b0b      	ldr	r3, [pc, #44]	; (800250c <MX_RTC_Init+0x58>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80024e4:	4809      	ldr	r0, [pc, #36]	; (800250c <MX_RTC_Init+0x58>)
 80024e6:	f004 ff9f 	bl	8007428 <HAL_RTC_Init>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 80024f0:	f000 f87a 	bl	80025e8 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80024f4:	2200      	movs	r2, #0
 80024f6:	2100      	movs	r1, #0
 80024f8:	4804      	ldr	r0, [pc, #16]	; (800250c <MX_RTC_Init+0x58>)
 80024fa:	f005 f895 	bl	8007628 <HAL_RTCEx_SetWakeUpTimer_IT>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8002504:	f000 f870 	bl	80025e8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002508:	bf00      	nop
 800250a:	bd80      	pop	{r7, pc}
 800250c:	20000310 	.word	0x20000310
 8002510:	40002800 	.word	0x40002800

08002514 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002518:	4b23      	ldr	r3, [pc, #140]	; (80025a8 <MX_USART1_UART_Init+0x94>)
 800251a:	4a24      	ldr	r2, [pc, #144]	; (80025ac <MX_USART1_UART_Init+0x98>)
 800251c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800251e:	4b22      	ldr	r3, [pc, #136]	; (80025a8 <MX_USART1_UART_Init+0x94>)
 8002520:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002524:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002526:	4b20      	ldr	r3, [pc, #128]	; (80025a8 <MX_USART1_UART_Init+0x94>)
 8002528:	2200      	movs	r2, #0
 800252a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800252c:	4b1e      	ldr	r3, [pc, #120]	; (80025a8 <MX_USART1_UART_Init+0x94>)
 800252e:	2200      	movs	r2, #0
 8002530:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002532:	4b1d      	ldr	r3, [pc, #116]	; (80025a8 <MX_USART1_UART_Init+0x94>)
 8002534:	2200      	movs	r2, #0
 8002536:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002538:	4b1b      	ldr	r3, [pc, #108]	; (80025a8 <MX_USART1_UART_Init+0x94>)
 800253a:	220c      	movs	r2, #12
 800253c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800253e:	4b1a      	ldr	r3, [pc, #104]	; (80025a8 <MX_USART1_UART_Init+0x94>)
 8002540:	2200      	movs	r2, #0
 8002542:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002544:	4b18      	ldr	r3, [pc, #96]	; (80025a8 <MX_USART1_UART_Init+0x94>)
 8002546:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800254a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800254c:	4b16      	ldr	r3, [pc, #88]	; (80025a8 <MX_USART1_UART_Init+0x94>)
 800254e:	2200      	movs	r2, #0
 8002550:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002552:	4b15      	ldr	r3, [pc, #84]	; (80025a8 <MX_USART1_UART_Init+0x94>)
 8002554:	2200      	movs	r2, #0
 8002556:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002558:	4b13      	ldr	r3, [pc, #76]	; (80025a8 <MX_USART1_UART_Init+0x94>)
 800255a:	2200      	movs	r2, #0
 800255c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800255e:	4812      	ldr	r0, [pc, #72]	; (80025a8 <MX_USART1_UART_Init+0x94>)
 8002560:	f005 f974 	bl	800784c <HAL_UART_Init>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800256a:	f000 f83d 	bl	80025e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800256e:	2100      	movs	r1, #0
 8002570:	480d      	ldr	r0, [pc, #52]	; (80025a8 <MX_USART1_UART_Init+0x94>)
 8002572:	f007 f9c0 	bl	80098f6 <HAL_UARTEx_SetTxFifoThreshold>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 800257c:	f000 f834 	bl	80025e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002580:	2100      	movs	r1, #0
 8002582:	4809      	ldr	r0, [pc, #36]	; (80025a8 <MX_USART1_UART_Init+0x94>)
 8002584:	f007 f9f5 	bl	8009972 <HAL_UARTEx_SetRxFifoThreshold>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 800258e:	f000 f82b 	bl	80025e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002592:	4805      	ldr	r0, [pc, #20]	; (80025a8 <MX_USART1_UART_Init+0x94>)
 8002594:	f007 f976 	bl	8009884 <HAL_UARTEx_DisableFifoMode>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 800259e:	f000 f823 	bl	80025e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20000334 	.word	0x20000334
 80025ac:	40013800 	.word	0x40013800

080025b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80025b4:	2004      	movs	r0, #4
 80025b6:	f7ff feb1 	bl	800231c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025ba:	2001      	movs	r0, #1
 80025bc:	f7ff feae 	bl	800231c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 80025c0:	2200      	movs	r2, #0
 80025c2:	210f      	movs	r1, #15
 80025c4:	200e      	movs	r0, #14
 80025c6:	f002 fde4 	bl	8005192 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80025ca:	200e      	movs	r0, #14
 80025cc:	f002 fdfb 	bl	80051c6 <HAL_NVIC_EnableIRQ>

}
 80025d0:	bf00      	nop
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025d8:	2004      	movs	r0, #4
 80025da:	f7ff feb8 	bl	800234e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025de:	2001      	movs	r0, #1
 80025e0:	f7ff feb5 	bl	800234e <LL_AHB2_GRP1_EnableClock>

}
 80025e4:	bf00      	nop
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80025fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002606:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800260a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4313      	orrs	r3, r2
 8002612:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002622:	b480      	push	{r7}
 8002624:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002626:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800262a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800262e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002636:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800263a:	bf00      	nop
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <LL_AHB2_GRP1_EnableClock>:
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800264c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002650:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002652:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4313      	orrs	r3, r2
 800265a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800265c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002660:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4013      	ands	r3, r2
 8002666:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002668:	68fb      	ldr	r3, [r7, #12]
}
 800266a:	bf00      	nop
 800266c:	3714      	adds	r7, #20
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <LL_AHB3_GRP1_EnableClock>:
{
 8002676:	b480      	push	{r7}
 8002678:	b085      	sub	sp, #20
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800267e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002682:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002684:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4313      	orrs	r3, r2
 800268c:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800268e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002692:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4013      	ands	r3, r2
 8002698:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800269a:	68fb      	ldr	r3, [r7, #12]
}
 800269c:	bf00      	nop
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <LL_APB1_GRP1_EnableClock>:
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80026b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80026b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4313      	orrs	r3, r2
 80026be:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80026c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4013      	ands	r3, r2
 80026ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80026cc:	68fb      	ldr	r3, [r7, #12]
}
 80026ce:	bf00      	nop
 80026d0:	3714      	adds	r7, #20
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <LL_APB2_GRP1_EnableClock>:
{
 80026da:	b480      	push	{r7}
 80026dc:	b085      	sub	sp, #20
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80026e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80026f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4013      	ands	r3, r2
 80026fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80026fe:	68fb      	ldr	r3, [r7, #12]
}
 8002700:	bf00      	nop
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002710:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002714:	f7ff ffaf 	bl	8002676 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002718:	2200      	movs	r2, #0
 800271a:	2100      	movs	r1, #0
 800271c:	202e      	movs	r0, #46	; 0x2e
 800271e:	f002 fd38 	bl	8005192 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002722:	202e      	movs	r0, #46	; 0x2e
 8002724:	f002 fd4f 	bl	80051c6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002728:	bf00      	nop
 800272a:	bd80      	pop	{r7, pc}

0800272c <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a0d      	ldr	r2, [pc, #52]	; (8002770 <HAL_IPCC_MspInit+0x44>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d113      	bne.n	8002766 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800273e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002742:	f7ff ff98 	bl	8002676 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002746:	2200      	movs	r2, #0
 8002748:	2100      	movs	r1, #0
 800274a:	202c      	movs	r0, #44	; 0x2c
 800274c:	f002 fd21 	bl	8005192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002750:	202c      	movs	r0, #44	; 0x2c
 8002752:	f002 fd38 	bl	80051c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002756:	2200      	movs	r2, #0
 8002758:	2100      	movs	r1, #0
 800275a:	202d      	movs	r0, #45	; 0x2d
 800275c:	f002 fd19 	bl	8005192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002760:	202d      	movs	r0, #45	; 0x2d
 8002762:	f002 fd30 	bl	80051c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002766:	bf00      	nop
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	58000c00 	.word	0x58000c00

08002774 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b08e      	sub	sp, #56	; 0x38
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800277c:	f107 0308 	add.w	r3, r7, #8
 8002780:	2230      	movs	r2, #48	; 0x30
 8002782:	2100      	movs	r1, #0
 8002784:	4618      	mov	r0, r3
 8002786:	f00a fc89 	bl	800d09c <memset>
  if(hrtc->Instance==RTC)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a18      	ldr	r2, [pc, #96]	; (80027f0 <HAL_RTC_MspInit+0x7c>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d128      	bne.n	80027e6 <HAL_RTC_MspInit+0x72>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8002794:	f003 faf2 	bl	8005d7c <HAL_PWR_EnableBkUpAccess>

  /**
  *  Write twice the value to flush the APB-AHB bridge
  *  This bit shall be written in the register before writing the next one
  */
  HAL_PWR_EnableBkUpAccess();
 8002798:	f003 faf0 	bl	8005d7c <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSI as RTC Input */
 800279c:	f44f 7080 	mov.w	r0, #256	; 0x100
 80027a0:	f7ff ff29 	bl	80025f6 <LL_RCC_SetRTCClockSource>
  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80027a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027a8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80027aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027ae:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027b0:	f107 0308 	add.w	r3, r7, #8
 80027b4:	4618      	mov	r0, r3
 80027b6:	f004 fd41 	bl	800723c <HAL_RCCEx_PeriphCLKConfig>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <HAL_RTC_MspInit+0x50>
    {
      Error_Handler();
 80027c0:	f7ff ff12 	bl	80025e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80027c4:	f7ff ff2d 	bl	8002622 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80027c8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80027cc:	f7ff ff6c 	bl	80026a8 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80027d0:	2200      	movs	r2, #0
 80027d2:	2100      	movs	r1, #0
 80027d4:	2003      	movs	r0, #3
 80027d6:	f002 fcdc 	bl	8005192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80027da:	2003      	movs	r0, #3
 80027dc:	f002 fcf3 	bl	80051c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f004 ffdd 	bl	80077a0 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 80027e6:	bf00      	nop
 80027e8:	3738      	adds	r7, #56	; 0x38
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40002800 	.word	0x40002800

080027f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b094      	sub	sp, #80	; 0x50
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	609a      	str	r2, [r3, #8]
 8002808:	60da      	str	r2, [r3, #12]
 800280a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800280c:	f107 030c 	add.w	r3, r7, #12
 8002810:	2230      	movs	r2, #48	; 0x30
 8002812:	2100      	movs	r1, #0
 8002814:	4618      	mov	r0, r3
 8002816:	f00a fc41 	bl	800d09c <memset>
  if(huart->Instance==USART1)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a2f      	ldr	r2, [pc, #188]	; (80028dc <HAL_UART_MspInit+0xe8>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d157      	bne.n	80028d4 <HAL_UART_MspInit+0xe0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002824:	2301      	movs	r3, #1
 8002826:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002828:	2300      	movs	r3, #0
 800282a:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800282c:	f107 030c 	add.w	r3, r7, #12
 8002830:	4618      	mov	r0, r3
 8002832:	f004 fd03 	bl	800723c <HAL_RCCEx_PeriphCLKConfig>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800283c:	f7ff fed4 	bl	80025e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002840:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002844:	f7ff ff49 	bl	80026da <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002848:	2001      	movs	r0, #1
 800284a:	f7ff fefb 	bl	8002644 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800284e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002852:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002854:	2302      	movs	r3, #2
 8002856:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002858:	2301      	movs	r3, #1
 800285a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800285c:	2303      	movs	r3, #3
 800285e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002860:	2307      	movs	r3, #7
 8002862:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002864:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002868:	4619      	mov	r1, r3
 800286a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800286e:	f003 f843 	bl	80058f8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002872:	4b1b      	ldr	r3, [pc, #108]	; (80028e0 <HAL_UART_MspInit+0xec>)
 8002874:	4a1b      	ldr	r2, [pc, #108]	; (80028e4 <HAL_UART_MspInit+0xf0>)
 8002876:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002878:	4b19      	ldr	r3, [pc, #100]	; (80028e0 <HAL_UART_MspInit+0xec>)
 800287a:	220f      	movs	r2, #15
 800287c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800287e:	4b18      	ldr	r3, [pc, #96]	; (80028e0 <HAL_UART_MspInit+0xec>)
 8002880:	2210      	movs	r2, #16
 8002882:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002884:	4b16      	ldr	r3, [pc, #88]	; (80028e0 <HAL_UART_MspInit+0xec>)
 8002886:	2200      	movs	r2, #0
 8002888:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800288a:	4b15      	ldr	r3, [pc, #84]	; (80028e0 <HAL_UART_MspInit+0xec>)
 800288c:	2280      	movs	r2, #128	; 0x80
 800288e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002890:	4b13      	ldr	r3, [pc, #76]	; (80028e0 <HAL_UART_MspInit+0xec>)
 8002892:	2200      	movs	r2, #0
 8002894:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002896:	4b12      	ldr	r3, [pc, #72]	; (80028e0 <HAL_UART_MspInit+0xec>)
 8002898:	2200      	movs	r2, #0
 800289a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800289c:	4b10      	ldr	r3, [pc, #64]	; (80028e0 <HAL_UART_MspInit+0xec>)
 800289e:	2200      	movs	r2, #0
 80028a0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80028a2:	4b0f      	ldr	r3, [pc, #60]	; (80028e0 <HAL_UART_MspInit+0xec>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80028a8:	480d      	ldr	r0, [pc, #52]	; (80028e0 <HAL_UART_MspInit+0xec>)
 80028aa:	f002 fcd1 	bl	8005250 <HAL_DMA_Init>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80028b4:	f7ff fe98 	bl	80025e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a09      	ldr	r2, [pc, #36]	; (80028e0 <HAL_UART_MspInit+0xec>)
 80028bc:	67da      	str	r2, [r3, #124]	; 0x7c
 80028be:	4a08      	ldr	r2, [pc, #32]	; (80028e0 <HAL_UART_MspInit+0xec>)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80028c4:	2200      	movs	r2, #0
 80028c6:	2100      	movs	r1, #0
 80028c8:	2024      	movs	r0, #36	; 0x24
 80028ca:	f002 fc62 	bl	8005192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028ce:	2024      	movs	r0, #36	; 0x24
 80028d0:	f002 fc79 	bl	80051c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80028d4:	bf00      	nop
 80028d6:	3750      	adds	r7, #80	; 0x50
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40013800 	.word	0x40013800
 80028e0:	200003c8 	.word	0x200003c8
 80028e4:	40020044 	.word	0x40020044

080028e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028ec:	e7fe      	b.n	80028ec <NMI_Handler+0x4>

080028ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ee:	b480      	push	{r7}
 80028f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028f2:	e7fe      	b.n	80028f2 <HardFault_Handler+0x4>

080028f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028f8:	e7fe      	b.n	80028f8 <MemManage_Handler+0x4>

080028fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028fa:	b480      	push	{r7}
 80028fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028fe:	e7fe      	b.n	80028fe <BusFault_Handler+0x4>

08002900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002904:	e7fe      	b.n	8002904 <UsageFault_Handler+0x4>

08002906 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002906:	b480      	push	{r7}
 8002908:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800290a:	bf00      	nop
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002918:	bf00      	nop
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002922:	b480      	push	{r7}
 8002924:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002926:	bf00      	nop
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002934:	f002 faba 	bl	8004eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002938:	bf00      	nop
 800293a:	bd80      	pop	{r7, pc}

0800293c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002940:	f7ff f8fc 	bl	8001b3c <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002944:	bf00      	nop
 8002946:	bd80      	pop	{r7, pc}

08002948 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800294c:	4802      	ldr	r0, [pc, #8]	; (8002958 <DMA1_Channel4_IRQHandler+0x10>)
 800294e:	f002 fe44 	bl	80055da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002952:	bf00      	nop
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	200003c8 	.word	0x200003c8

0800295c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002960:	4802      	ldr	r0, [pc, #8]	; (800296c <USART1_IRQHandler+0x10>)
 8002962:	f005 f88f 	bl	8007a84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002966:	bf00      	nop
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	20000334 	.word	0x20000334

08002970 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002974:	f001 ff2c 	bl	80047d0 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002978:	bf00      	nop
 800297a:	bd80      	pop	{r7, pc}

0800297c <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002980:	f001 ff5c 	bl	800483c <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002984:	bf00      	nop
 8002986:	bd80      	pop	{r7, pc}

08002988 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800298c:	f003 f94c 	bl	8005c28 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002990:	bf00      	nop
 8002992:	bd80      	pop	{r7, pc}

08002994 <EXTI0_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 8002998:	2001      	movs	r0, #1
 800299a:	f003 f92d 	bl	8005bf8 <HAL_GPIO_EXTI_IRQHandler>
}
 800299e:	bf00      	nop
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <EXTI4_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW2_EXTI_IRQHandler(void)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 80029a6:	2010      	movs	r0, #16
 80029a8:	f003 f926 	bl	8005bf8 <HAL_GPIO_EXTI_IRQHandler>
}
 80029ac:	bf00      	nop
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <EXTI9_5_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW3_EXTI_IRQHandler(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 80029b4:	2040      	movs	r0, #64	; 0x40
 80029b6:	f003 f91f 	bl	8005bf8 <HAL_GPIO_EXTI_IRQHandler>
}
 80029ba:	bf00      	nop
 80029bc:	bd80      	pop	{r7, pc}

080029be <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b086      	sub	sp, #24
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	60f8      	str	r0, [r7, #12]
 80029c6:	60b9      	str	r1, [r7, #8]
 80029c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ca:	2300      	movs	r3, #0
 80029cc:	617b      	str	r3, [r7, #20]
 80029ce:	e00a      	b.n	80029e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029d0:	f3af 8000 	nop.w
 80029d4:	4601      	mov	r1, r0
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	1c5a      	adds	r2, r3, #1
 80029da:	60ba      	str	r2, [r7, #8]
 80029dc:	b2ca      	uxtb	r2, r1
 80029de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	3301      	adds	r3, #1
 80029e4:	617b      	str	r3, [r7, #20]
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	dbf0      	blt.n	80029d0 <_read+0x12>
  }

  return len;
 80029ee:	687b      	ldr	r3, [r7, #4]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a20:	605a      	str	r2, [r3, #4]
  return 0;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <_isatty>:

int _isatty(int file)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a38:	2301      	movs	r3, #1
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b085      	sub	sp, #20
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	60f8      	str	r0, [r7, #12]
 8002a4e:	60b9      	str	r1, [r7, #8]
 8002a50:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3714      	adds	r7, #20
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a68:	4a14      	ldr	r2, [pc, #80]	; (8002abc <_sbrk+0x5c>)
 8002a6a:	4b15      	ldr	r3, [pc, #84]	; (8002ac0 <_sbrk+0x60>)
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a74:	4b13      	ldr	r3, [pc, #76]	; (8002ac4 <_sbrk+0x64>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d102      	bne.n	8002a82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a7c:	4b11      	ldr	r3, [pc, #68]	; (8002ac4 <_sbrk+0x64>)
 8002a7e:	4a12      	ldr	r2, [pc, #72]	; (8002ac8 <_sbrk+0x68>)
 8002a80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a82:	4b10      	ldr	r3, [pc, #64]	; (8002ac4 <_sbrk+0x64>)
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4413      	add	r3, r2
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d207      	bcs.n	8002aa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a90:	f00a fb52 	bl	800d138 <__errno>
 8002a94:	4603      	mov	r3, r0
 8002a96:	220c      	movs	r2, #12
 8002a98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a9e:	e009      	b.n	8002ab4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002aa0:	4b08      	ldr	r3, [pc, #32]	; (8002ac4 <_sbrk+0x64>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002aa6:	4b07      	ldr	r3, [pc, #28]	; (8002ac4 <_sbrk+0x64>)
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4413      	add	r3, r2
 8002aae:	4a05      	ldr	r2, [pc, #20]	; (8002ac4 <_sbrk+0x64>)
 8002ab0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3718      	adds	r7, #24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	20003000 	.word	0x20003000
 8002ac0:	00001000 	.word	0x00001000
 8002ac4:	20000428 	.word	0x20000428
 8002ac8:	20001898 	.word	0x20001898

08002acc <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8002ad0:	4b03      	ldr	r3, [pc, #12]	; (8002ae0 <LL_FLASH_GetUDN+0x14>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	1fff7580 	.word	0x1fff7580

08002ae4 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8002ae8:	4b03      	ldr	r3, [pc, #12]	; (8002af8 <LL_FLASH_GetDeviceID+0x14>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	b2db      	uxtb	r3, r3
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	1fff7584 	.word	0x1fff7584

08002afc <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8002b00:	4b03      	ldr	r3, [pc, #12]	; (8002b10 <LL_FLASH_GetSTCompanyID+0x14>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	0a1b      	lsrs	r3, r3, #8
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	1fff7584 	.word	0x1fff7584

08002b14 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8002b14:	b5b0      	push	{r4, r5, r7, lr}
 8002b16:	b090      	sub	sp, #64	; 0x40
 8002b18:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8002b1a:	2392      	movs	r3, #146	; 0x92
 8002b1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8002b20:	4b39      	ldr	r3, [pc, #228]	; (8002c08 <APP_BLE_Init+0xf4>)
 8002b22:	1d3c      	adds	r4, r7, #4
 8002b24:	461d      	mov	r5, r3
 8002b26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b32:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002b36:	c403      	stmia	r4!, {r0, r1}
 8002b38:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8002b3a:	f000 fda1 	bl	8003680 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8002b3e:	2101      	movs	r1, #1
 8002b40:	2002      	movs	r0, #2
 8002b42:	f009 fdf9 	bl	800c738 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8002b46:	4a31      	ldr	r2, [pc, #196]	; (8002c0c <APP_BLE_Init+0xf8>)
 8002b48:	2100      	movs	r1, #0
 8002b4a:	2010      	movs	r0, #16
 8002b4c:	f009 ff20 	bl	800c990 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8002b50:	1d3b      	adds	r3, r7, #4
 8002b52:	4618      	mov	r0, r3
 8002b54:	f008 fb6c 	bl	800b230 <SHCI_C2_BLE_Init>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 8002b5e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d008      	beq.n	8002b78 <APP_BLE_Init+0x64>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 8002b66:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4828      	ldr	r0, [pc, #160]	; (8002c10 <APP_BLE_Init+0xfc>)
 8002b6e:	f00a f913 	bl	800cd98 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8002b72:	f7ff fd39 	bl	80025e8 <Error_Handler>
 8002b76:	e002      	b.n	8002b7e <APP_BLE_Init+0x6a>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 8002b78:	4826      	ldr	r0, [pc, #152]	; (8002c14 <APP_BLE_Init+0x100>)
 8002b7a:	f00a f90d 	bl	800cd98 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8002b7e:	f000 fd95 	bl	80036ac <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8002b82:	f009 fabd 	bl	800c100 <SVCCTL_Init>

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_START_SCAN_ID, UTIL_SEQ_RFU, Scan_Request);
 8002b86:	4a24      	ldr	r2, [pc, #144]	; (8002c18 <APP_BLE_Init+0x104>)
 8002b88:	2100      	movs	r1, #0
 8002b8a:	2001      	movs	r0, #1
 8002b8c:	f009 ff00 	bl	800c990 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1<<CFG_TASK_TERMINATE_SCAN_ID, UTIL_SEQ_RFU, Scan_Terminate);
 8002b90:	4a22      	ldr	r2, [pc, #136]	; (8002c1c <APP_BLE_Init+0x108>)
 8002b92:	2100      	movs	r1, #0
 8002b94:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002b98:	f009 fefa 	bl	800c990 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1<<CFG_TASK_CONN_DEV_1_ID, UTIL_SEQ_RFU, Connect_Request);
 8002b9c:	4a20      	ldr	r2, [pc, #128]	; (8002c20 <APP_BLE_Init+0x10c>)
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	2002      	movs	r0, #2
 8002ba2:	f009 fef5 	bl	800c990 <UTIL_SEQ_RegTask>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8002ba6:	4b1f      	ldr	r3, [pc, #124]	; (8002c24 <APP_BLE_Init+0x110>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /*Radio mask Activity*/
#if (OOB_DEMO != 0)
  ret = aci_hal_set_radio_activity_mask(0x0020);
 8002bae:	2020      	movs	r0, #32
 8002bb0:	f007 ff67 	bl	800aa82 <aci_hal_set_radio_activity_mask>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 8002bba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d006      	beq.n	8002bd0 <APP_BLE_Init+0xbc>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 8002bc2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4817      	ldr	r0, [pc, #92]	; (8002c28 <APP_BLE_Init+0x114>)
 8002bca:	f00a f8e5 	bl	800cd98 <iprintf>
 8002bce:	e002      	b.n	8002bd6 <APP_BLE_Init+0xc2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 8002bd0:	4816      	ldr	r0, [pc, #88]	; (8002c2c <APP_BLE_Init+0x118>)
 8002bd2:	f00a f8e1 	bl	800cd98 <iprintf>
  }
  APP_DBG_MSG("\n");
 8002bd6:	200a      	movs	r0, #10
 8002bd8:	f00a f8f0 	bl	800cdbc <putchar>
#endif
  /**
   * Initialize P2P Client Application
   */
  P2PC_APP_Init();
 8002bdc:	f001 f828 	bl	8003c30 <P2PC_APP_Init>
  /* USER CODE BEGIN APP_BLE_Init_3 */

  /* USER CODE END APP_BLE_Init_3 */

#if (OOB_DEMO != 0)
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 8002be0:	4b13      	ldr	r3, [pc, #76]	; (8002c30 <APP_BLE_Init+0x11c>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	4913      	ldr	r1, [pc, #76]	; (8002c34 <APP_BLE_Init+0x120>)
 8002be6:	2000      	movs	r0, #0
 8002be8:	f7ff f94a 	bl	8001e80 <HW_TS_Create>
#endif

  /**
   * Start scanning
   */
  if (scan_running != 0)
 8002bec:	4b12      	ldr	r3, [pc, #72]	; (8002c38 <APP_BLE_Init+0x124>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d004      	beq.n	8002c00 <APP_BLE_Init+0xec>
  {
    UTIL_SEQ_SetTask(1 << CFG_TASK_START_SCAN_ID, CFG_SCH_PRIO_0);
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	2001      	movs	r0, #1
 8002bfa:	f009 feeb 	bl	800c9d4 <UTIL_SEQ_SetTask>
  }
  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */
  return;
 8002bfe:	bf00      	nop
 8002c00:	bf00      	nop
}
 8002c02:	3740      	adds	r7, #64	; 0x40
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bdb0      	pop	{r4, r5, r7, pc}
 8002c08:	0800e42c 	.word	0x0800e42c
 8002c0c:	0800aea1 	.word	0x0800aea1
 8002c10:	0800e350 	.word	0x0800e350
 8002c14:	0800e388 	.word	0x0800e388
 8002c18:	0800399d 	.word	0x0800399d
 8002c1c:	08003a0d 	.word	0x08003a0d
 8002c20:	08003a49 	.word	0x08003a49
 8002c24:	20000440 	.word	0x20000440
 8002c28:	0800e3b0 	.word	0x0800e3b0
 8002c2c:	0800e3f4 	.word	0x0800e3f4
 8002c30:	08003ae1 	.word	0x08003ae1
 8002c34:	200004c1 	.word	0x200004c1
 8002c38:	20000008 	.word	0x20000008

08002c3c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *pckt)
{
 8002c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c3e:	b097      	sub	sp, #92	; 0x5c
 8002c40:	af06      	add	r7, sp, #24
 8002c42:	6078      	str	r0, [r7, #4]
  evt_le_meta_event *meta_evt;
  hci_le_connection_complete_event_rp0 * connection_complete_event;
  evt_blecore_aci *blecore_evt;
  hci_le_extended_advertising_report_event_rp0 * ext_adv_evt;
  
  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3301      	adds	r3, #1
 8002c48:	63bb      	str	r3, [r7, #56]	; 0x38
  hci_disconnection_complete_event_rp0 *cc = (void *) event_pckt->data;
 8002c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c4c:	3302      	adds	r3, #2
 8002c4e:	637b      	str	r3, [r7, #52]	; 0x34
  uint8_t result;
  int k = 0;
 8002c50:	2300      	movs	r3, #0
 8002c52:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint8_t adtype, adlength;
#if (OOB_DEMO != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8002c54:	2392      	movs	r3, #146	; 0x92
 8002c56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
#endif

  switch (event_pckt->evt)
 8002c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2bff      	cmp	r3, #255	; 0xff
 8002c60:	d00a      	beq.n	8002c78 <SVCCTL_App_Notification+0x3c>
 8002c62:	2bff      	cmp	r3, #255	; 0xff
 8002c64:	f300 848b 	bgt.w	800357e <SVCCTL_App_Notification+0x942>
 8002c68:	2b05      	cmp	r3, #5
 8002c6a:	f000 80c8 	beq.w	8002dfe <SVCCTL_App_Notification+0x1c2>
 8002c6e:	2b3e      	cmp	r3, #62	; 0x3e
 8002c70:	f000 80e3 	beq.w	8002e3a <SVCCTL_App_Notification+0x1fe>

    default:
      /* USER CODE BEGIN evt_default */

      /* USER CODE END evt_default */
      break;
 8002c74:	f000 bc83 	b.w	800357e <SVCCTL_App_Notification+0x942>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8002c78:	4b83      	ldr	r3, [pc, #524]	; (8002e88 <SVCCTL_App_Notification+0x24c>)
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	701a      	strb	r2, [r3, #0]
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8002c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c80:	3302      	adds	r3, #2
 8002c82:	62fb      	str	r3, [r7, #44]	; 0x2c
      switch (blecore_evt->ecode)
 8002c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c86:	881b      	ldrh	r3, [r3, #0]
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	f640 0202 	movw	r2, #2050	; 0x802
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d02c      	beq.n	8002cec <SVCCTL_App_Notification+0xb0>
 8002c92:	f640 0202 	movw	r2, #2050	; 0x802
 8002c96:	4293      	cmp	r3, r2
 8002c98:	f300 80ad 	bgt.w	8002df6 <SVCCTL_App_Notification+0x1ba>
 8002c9c:	2b04      	cmp	r3, #4
 8002c9e:	f000 809f 	beq.w	8002de0 <SVCCTL_App_Notification+0x1a4>
 8002ca2:	f240 4207 	movw	r2, #1031	; 0x407
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	f040 80a5 	bne.w	8002df6 <SVCCTL_App_Notification+0x1ba>
          aci_gap_proc_complete_event_rp0 *gap_evt_proc_complete = (void*) blecore_evt->data;
 8002cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cae:	3302      	adds	r3, #2
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
          if (gap_evt_proc_complete->Procedure_Code == GAP_GENERAL_DISCOVERY_PROC
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	f040 809f 	bne.w	8002dfa <SVCCTL_App_Notification+0x1be>
              && gap_evt_proc_complete->Status == 0x00)
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbe:	785b      	ldrb	r3, [r3, #1]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f040 809a 	bne.w	8002dfa <SVCCTL_App_Notification+0x1be>
            BSP_LED_Off(LED_BLUE);
 8002cc6:	2000      	movs	r0, #0
 8002cc8:	f001 ff64 	bl	8004b94 <BSP_LED_Off>
            APP_DBG_MSG("LED BLUE OFF\n");
 8002ccc:	486f      	ldr	r0, [pc, #444]	; (8002e8c <SVCCTL_App_Notification+0x250>)
 8002cce:	f00a f8d1 	bl	800ce74 <puts>
            if (scan_running != 0)
 8002cd2:	4b6f      	ldr	r3, [pc, #444]	; (8002e90 <SVCCTL_App_Notification+0x254>)
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <SVCCTL_App_Notification+0xa8>
              UTIL_SEQ_SetTask(1 << CFG_TASK_START_SCAN_ID, CFG_SCH_PRIO_0);
 8002cdc:	2100      	movs	r1, #0
 8002cde:	2001      	movs	r0, #1
 8002ce0:	f009 fe78 	bl	800c9d4 <UTIL_SEQ_SetTask>
             APP_DBG_MSG("-- GAP GENERAL DISCOVERY PROCEDURE_COMPLETED\n\r");
 8002ce4:	486b      	ldr	r0, [pc, #428]	; (8002e94 <SVCCTL_App_Notification+0x258>)
 8002ce6:	f00a f857 	bl	800cd98 <iprintf>
        break;
 8002cea:	e086      	b.n	8002dfa <SVCCTL_App_Notification+0x1be>
          aci_l2cap_connection_update_req_event_rp0 *pr = (aci_l2cap_connection_update_req_event_rp0 *) blecore_evt->data;
 8002cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cee:	3302      	adds	r3, #2
 8002cf0:	62bb      	str	r3, [r7, #40]	; 0x28
          ret = aci_hal_set_radio_activity_mask(0x0000);
 8002cf2:	2000      	movs	r0, #0
 8002cf4:	f007 fec5 	bl	800aa82 <aci_hal_set_radio_activity_mask>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
          if (ret != BLE_STATUS_SUCCESS)
 8002cfe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d006      	beq.n	8002d14 <SVCCTL_App_Notification+0xd8>
             APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 8002d06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	4862      	ldr	r0, [pc, #392]	; (8002e98 <SVCCTL_App_Notification+0x25c>)
 8002d0e:	f00a f843 	bl	800cd98 <iprintf>
 8002d12:	e002      	b.n	8002d1a <SVCCTL_App_Notification+0xde>
             APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 8002d14:	4861      	ldr	r0, [pc, #388]	; (8002e9c <SVCCTL_App_Notification+0x260>)
 8002d16:	f00a f83f 	bl	800cd98 <iprintf>
          APP_BLE_p2p_Conn_Update_req.Identifier = pr->Identifier;
 8002d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1c:	789a      	ldrb	r2, [r3, #2]
 8002d1e:	4b60      	ldr	r3, [pc, #384]	; (8002ea0 <SVCCTL_App_Notification+0x264>)
 8002d20:	701a      	strb	r2, [r3, #0]
          APP_BLE_p2p_Conn_Update_req.L2CAP_Length = pr->L2CAP_Length;
 8002d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d24:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	4b5d      	ldr	r3, [pc, #372]	; (8002ea0 <SVCCTL_App_Notification+0x264>)
 8002d2c:	805a      	strh	r2, [r3, #2]
          APP_BLE_p2p_Conn_Update_req.Interval_Min = pr->Interval_Min;
 8002d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d30:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	4b5a      	ldr	r3, [pc, #360]	; (8002ea0 <SVCCTL_App_Notification+0x264>)
 8002d38:	809a      	strh	r2, [r3, #4]
          APP_BLE_p2p_Conn_Update_req.Interval_Max = pr->Interval_Max;
 8002d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3c:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	4b57      	ldr	r3, [pc, #348]	; (8002ea0 <SVCCTL_App_Notification+0x264>)
 8002d44:	80da      	strh	r2, [r3, #6]
          APP_BLE_p2p_Conn_Update_req.Slave_Latency = pr->Latency;
 8002d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d48:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	4b54      	ldr	r3, [pc, #336]	; (8002ea0 <SVCCTL_App_Notification+0x264>)
 8002d50:	811a      	strh	r2, [r3, #8]
          APP_BLE_p2p_Conn_Update_req.Timeout_Multiplier = pr->Timeout_Multiplier;
 8002d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d54:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	4b51      	ldr	r3, [pc, #324]	; (8002ea0 <SVCCTL_App_Notification+0x264>)
 8002d5c:	815a      	strh	r2, [r3, #10]
          ret = aci_l2cap_connection_parameter_update_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 8002d5e:	4b51      	ldr	r3, [pc, #324]	; (8002ea4 <SVCCTL_App_Notification+0x268>)
 8002d60:	8ad8      	ldrh	r0, [r3, #22]
 8002d62:	4b4f      	ldr	r3, [pc, #316]	; (8002ea0 <SVCCTL_App_Notification+0x264>)
 8002d64:	8899      	ldrh	r1, [r3, #4]
 8002d66:	4b4e      	ldr	r3, [pc, #312]	; (8002ea0 <SVCCTL_App_Notification+0x264>)
 8002d68:	88dc      	ldrh	r4, [r3, #6]
 8002d6a:	4b4d      	ldr	r3, [pc, #308]	; (8002ea0 <SVCCTL_App_Notification+0x264>)
 8002d6c:	891d      	ldrh	r5, [r3, #8]
 8002d6e:	4b4c      	ldr	r3, [pc, #304]	; (8002ea0 <SVCCTL_App_Notification+0x264>)
 8002d70:	895b      	ldrh	r3, [r3, #10]
 8002d72:	4a4b      	ldr	r2, [pc, #300]	; (8002ea0 <SVCCTL_App_Notification+0x264>)
 8002d74:	7812      	ldrb	r2, [r2, #0]
 8002d76:	2601      	movs	r6, #1
 8002d78:	9604      	str	r6, [sp, #16]
 8002d7a:	9203      	str	r2, [sp, #12]
 8002d7c:	2210      	movs	r2, #16
 8002d7e:	9202      	str	r2, [sp, #8]
 8002d80:	2210      	movs	r2, #16
 8002d82:	9201      	str	r2, [sp, #4]
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	462b      	mov	r3, r5
 8002d88:	4622      	mov	r2, r4
 8002d8a:	f007 fef2 	bl	800ab72 <aci_l2cap_connection_parameter_update_resp>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
          if(ret != BLE_STATUS_SUCCESS)
 8002d94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d009      	beq.n	8002db0 <SVCCTL_App_Notification+0x174>
             APP_DBG_MSG("  Fail   : aci_l2cap_connection_parameter_update_resp command, result: 0x%x \n\r", ret);
 8002d9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002da0:	4619      	mov	r1, r3
 8002da2:	4841      	ldr	r0, [pc, #260]	; (8002ea8 <SVCCTL_App_Notification+0x26c>)
 8002da4:	f009 fff8 	bl	800cd98 <iprintf>
             BSP_LED_On(LED_RED);
 8002da8:	2002      	movs	r0, #2
 8002daa:	f001 fed9 	bl	8004b60 <BSP_LED_On>
 8002dae:	e002      	b.n	8002db6 <SVCCTL_App_Notification+0x17a>
            APP_DBG_MSG("  Success: aci_l2cap_connection_parameter_update_resp command\n\r");
 8002db0:	483e      	ldr	r0, [pc, #248]	; (8002eac <SVCCTL_App_Notification+0x270>)
 8002db2:	f009 fff1 	bl	800cd98 <iprintf>
          ret = aci_hal_set_radio_activity_mask(0x0020);
 8002db6:	2020      	movs	r0, #32
 8002db8:	f007 fe63 	bl	800aa82 <aci_hal_set_radio_activity_mask>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
          if (ret != BLE_STATUS_SUCCESS)
 8002dc2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d006      	beq.n	8002dd8 <SVCCTL_App_Notification+0x19c>
             APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 8002dca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4831      	ldr	r0, [pc, #196]	; (8002e98 <SVCCTL_App_Notification+0x25c>)
 8002dd2:	f009 ffe1 	bl	800cd98 <iprintf>
        break;
 8002dd6:	e011      	b.n	8002dfc <SVCCTL_App_Notification+0x1c0>
            APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 8002dd8:	4830      	ldr	r0, [pc, #192]	; (8002e9c <SVCCTL_App_Notification+0x260>)
 8002dda:	f009 ffdd 	bl	800cd98 <iprintf>
        break;
 8002dde:	e00d      	b.n	8002dfc <SVCCTL_App_Notification+0x1c0>
          BSP_LED_On(LED_GREEN);
 8002de0:	2001      	movs	r0, #1
 8002de2:	f001 febd 	bl	8004b60 <BSP_LED_On>
          HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 8002de6:	4b2f      	ldr	r3, [pc, #188]	; (8002ea4 <SVCCTL_App_Notification+0x268>)
 8002de8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002dec:	210a      	movs	r1, #10
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff f944 	bl	800207c <HW_TS_Start>
        break;
 8002df4:	e002      	b.n	8002dfc <SVCCTL_App_Notification+0x1c0>
          break;
 8002df6:	bf00      	nop
 8002df8:	e3c4      	b.n	8003584 <SVCCTL_App_Notification+0x948>
        break;
 8002dfa:	bf00      	nop
    break;
 8002dfc:	e3c2      	b.n	8003584 <SVCCTL_App_Notification+0x948>
        if (cc->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8002dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e00:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	4b27      	ldr	r3, [pc, #156]	; (8002ea4 <SVCCTL_App_Notification+0x268>)
 8002e08:	8adb      	ldrh	r3, [r3, #22]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	f040 83b9 	bne.w	8003582 <SVCCTL_App_Notification+0x946>
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8002e10:	4b24      	ldr	r3, [pc, #144]	; (8002ea4 <SVCCTL_App_Notification+0x268>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	82da      	strh	r2, [r3, #22]
          BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8002e16:	4b23      	ldr	r3, [pc, #140]	; (8002ea4 <SVCCTL_App_Notification+0x268>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH SERVER \n\r");
 8002e1e:	4824      	ldr	r0, [pc, #144]	; (8002eb0 <SVCCTL_App_Notification+0x274>)
 8002e20:	f009 ffba 	bl	800cd98 <iprintf>
          handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8002e24:	4b18      	ldr	r3, [pc, #96]	; (8002e88 <SVCCTL_App_Notification+0x24c>)
 8002e26:	2201      	movs	r2, #1
 8002e28:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8002e2a:	4b1e      	ldr	r3, [pc, #120]	; (8002ea4 <SVCCTL_App_Notification+0x268>)
 8002e2c:	8ada      	ldrh	r2, [r3, #22]
 8002e2e:	4b16      	ldr	r3, [pc, #88]	; (8002e88 <SVCCTL_App_Notification+0x24c>)
 8002e30:	805a      	strh	r2, [r3, #2]
          P2PC_APP_Notification(&handleNotification);
 8002e32:	4815      	ldr	r0, [pc, #84]	; (8002e88 <SVCCTL_App_Notification+0x24c>)
 8002e34:	f000 ff42 	bl	8003cbc <P2PC_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8002e38:	e3a3      	b.n	8003582 <SVCCTL_App_Notification+0x946>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 8002e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e3c:	3302      	adds	r3, #2
 8002e3e:	623b      	str	r3, [r7, #32]
      switch (meta_evt->subevent)
 8002e40:	6a3b      	ldr	r3, [r7, #32]
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	3b01      	subs	r3, #1
 8002e46:	2b0c      	cmp	r3, #12
 8002e48:	f200 8395 	bhi.w	8003576 <SVCCTL_App_Notification+0x93a>
 8002e4c:	a201      	add	r2, pc, #4	; (adr r2, 8002e54 <SVCCTL_App_Notification+0x218>)
 8002e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e52:	bf00      	nop
 8002e54:	08002eb5 	.word	0x08002eb5
 8002e58:	08003577 	.word	0x08003577
 8002e5c:	08003577 	.word	0x08003577
 8002e60:	08003577 	.word	0x08003577
 8002e64:	08003577 	.word	0x08003577
 8002e68:	08003577 	.word	0x08003577
 8002e6c:	08003577 	.word	0x08003577
 8002e70:	08003577 	.word	0x08003577
 8002e74:	08003577 	.word	0x08003577
 8002e78:	08002fa1 	.word	0x08002fa1
 8002e7c:	08003577 	.word	0x08003577
 8002e80:	08003577 	.word	0x08003577
 8002e84:	0800308d 	.word	0x0800308d
 8002e88:	2000043c 	.word	0x2000043c
 8002e8c:	0800e468 	.word	0x0800e468
 8002e90:	20000008 	.word	0x20000008
 8002e94:	0800e478 	.word	0x0800e478
 8002e98:	0800e3b0 	.word	0x0800e3b0
 8002e9c:	0800e3f4 	.word	0x0800e3f4
 8002ea0:	200004c4 	.word	0x200004c4
 8002ea4:	20000440 	.word	0x20000440
 8002ea8:	0800e4a8 	.word	0x0800e4a8
 8002eac:	0800e4f8 	.word	0x0800e4f8
 8002eb0:	0800e538 	.word	0x0800e538
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 8002eb4:	6a3b      	ldr	r3, [r7, #32]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	60fb      	str	r3, [r7, #12]
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	4ba6      	ldr	r3, [pc, #664]	; (800315c <SVCCTL_App_Notification+0x520>)
 8002ec4:	82da      	strh	r2, [r3, #22]
          BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8002ec6:	4ba5      	ldr	r3, [pc, #660]	; (800315c <SVCCTL_App_Notification+0x520>)
 8002ec8:	2206      	movs	r2, #6
 8002eca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", connection_complete_event->Connection_Handle);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	48a1      	ldr	r0, [pc, #644]	; (8003160 <SVCCTL_App_Notification+0x524>)
 8002eda:	f009 ff5d 	bl	800cd98 <iprintf>
                      connection_complete_event->Peer_Address[5],
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	7a9b      	ldrb	r3, [r3, #10]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8002ee2:	4618      	mov	r0, r3
                      connection_complete_event->Peer_Address[4],
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	7a5b      	ldrb	r3, [r3, #9]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8002ee8:	461c      	mov	r4, r3
                      connection_complete_event->Peer_Address[3],
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	7a1b      	ldrb	r3, [r3, #8]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8002eee:	461d      	mov	r5, r3
                      connection_complete_event->Peer_Address[2],
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	79db      	ldrb	r3, [r3, #7]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8002ef4:	461a      	mov	r2, r3
                      connection_complete_event->Peer_Address[1],
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	799b      	ldrb	r3, [r3, #6]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8002efa:	4619      	mov	r1, r3
                      connection_complete_event->Peer_Address[0]);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	795b      	ldrb	r3, [r3, #5]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8002f00:	9302      	str	r3, [sp, #8]
 8002f02:	9101      	str	r1, [sp, #4]
 8002f04:	9200      	str	r2, [sp, #0]
 8002f06:	462b      	mov	r3, r5
 8002f08:	4622      	mov	r2, r4
 8002f0a:	4601      	mov	r1, r0
 8002f0c:	4895      	ldr	r0, [pc, #596]	; (8003164 <SVCCTL_App_Notification+0x528>)
 8002f0e:	f009 ff43 	bl	800cd98 <iprintf>
                      connection_complete_event->Conn_Interval*1.25,
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8002f18:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7fd fc14 	bl	8000748 <__aeabi_i2d>
 8002f20:	f04f 0200 	mov.w	r2, #0
 8002f24:	4b90      	ldr	r3, [pc, #576]	; (8003168 <SVCCTL_App_Notification+0x52c>)
 8002f26:	f7fd f993 	bl	8000250 <__aeabi_dmul>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	4610      	mov	r0, r2
 8002f30:	4619      	mov	r1, r3
                      connection_complete_event->Conn_Latency,
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8002f38:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8002f3a:	461c      	mov	r4, r3
                      connection_complete_event->Supervision_Timeout*10
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8002f46:	4613      	mov	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	9301      	str	r3, [sp, #4]
 8002f50:	9400      	str	r4, [sp, #0]
 8002f52:	4602      	mov	r2, r0
 8002f54:	460b      	mov	r3, r1
 8002f56:	4885      	ldr	r0, [pc, #532]	; (800316c <SVCCTL_App_Notification+0x530>)
 8002f58:	f009 ff1e 	bl	800cd98 <iprintf>
          APP_DBG_MSG("\r\n\r**  CONNECTION COMPLETE EVENT WITH SERVER \n\r");
 8002f5c:	4884      	ldr	r0, [pc, #528]	; (8003170 <SVCCTL_App_Notification+0x534>)
 8002f5e:	f009 ff1b 	bl	800cd98 <iprintf>
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8002f62:	4b84      	ldr	r3, [pc, #528]	; (8003174 <SVCCTL_App_Notification+0x538>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8002f68:	4b7c      	ldr	r3, [pc, #496]	; (800315c <SVCCTL_App_Notification+0x520>)
 8002f6a:	8ada      	ldrh	r2, [r3, #22]
 8002f6c:	4b81      	ldr	r3, [pc, #516]	; (8003174 <SVCCTL_App_Notification+0x538>)
 8002f6e:	805a      	strh	r2, [r3, #2]
          P2PC_APP_Notification(&handleNotification);
 8002f70:	4880      	ldr	r0, [pc, #512]	; (8003174 <SVCCTL_App_Notification+0x538>)
 8002f72:	f000 fea3 	bl	8003cbc <P2PC_APP_Notification>
          result = aci_gatt_disc_all_primary_services(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8002f76:	4b79      	ldr	r3, [pc, #484]	; (800315c <SVCCTL_App_Notification+0x520>)
 8002f78:	8adb      	ldrh	r3, [r3, #22]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f007 fa00 	bl	800a380 <aci_gatt_disc_all_primary_services>
 8002f80:	4603      	mov	r3, r0
 8002f82:	74fb      	strb	r3, [r7, #19]
          if (result == BLE_STATUS_SUCCESS)
 8002f84:	7cfb      	ldrb	r3, [r7, #19]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d106      	bne.n	8002f98 <SVCCTL_App_Notification+0x35c>
            APP_DBG_MSG("\r\n\r** GATT SERVICES & CHARACTERISTICS DISCOVERY  \n\r");
 8002f8a:	487b      	ldr	r0, [pc, #492]	; (8003178 <SVCCTL_App_Notification+0x53c>)
 8002f8c:	f009 ff04 	bl	800cd98 <iprintf>
            APP_DBG_MSG("* GATT :  Start Searching Primary Services \r\n\r");
 8002f90:	487a      	ldr	r0, [pc, #488]	; (800317c <SVCCTL_App_Notification+0x540>)
 8002f92:	f009 ff01 	bl	800cd98 <iprintf>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8002f96:	e2f1      	b.n	800357c <SVCCTL_App_Notification+0x940>
            APP_DBG_MSG("BLE_CTRL_App_Notification(), All services discovery Failed \r\n\r");
 8002f98:	4879      	ldr	r0, [pc, #484]	; (8003180 <SVCCTL_App_Notification+0x544>)
 8002f9a:	f009 fefd 	bl	800cd98 <iprintf>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8002f9e:	e2ed      	b.n	800357c <SVCCTL_App_Notification+0x940>
          p_enhanced_connection_complete_event = (hci_le_enhanced_connection_complete_event_rp0 *) meta_evt->data;
 8002fa0:	6a3b      	ldr	r3, [r7, #32]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	617b      	str	r3, [r7, #20]
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_enhanced_connection_complete_event->Connection_Handle;
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	4b6b      	ldr	r3, [pc, #428]	; (800315c <SVCCTL_App_Notification+0x520>)
 8002fb0:	82da      	strh	r2, [r3, #22]
          BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8002fb2:	4b6a      	ldr	r3, [pc, #424]	; (800315c <SVCCTL_App_Notification+0x520>)
 8002fb4:	2206      	movs	r2, #6
 8002fb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          APP_DBG_MSG(">>== HCI_LE_ENHANCED_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_enhanced_connection_complete_event->Connection_Handle);
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	486f      	ldr	r0, [pc, #444]	; (8003184 <SVCCTL_App_Notification+0x548>)
 8002fc6:	f009 fee7 	bl	800cd98 <iprintf>
                      p_enhanced_connection_complete_event->Peer_Address[5],
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	7a9b      	ldrb	r3, [r3, #10]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8002fce:	4618      	mov	r0, r3
                      p_enhanced_connection_complete_event->Peer_Address[4],
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	7a5b      	ldrb	r3, [r3, #9]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8002fd4:	461c      	mov	r4, r3
                      p_enhanced_connection_complete_event->Peer_Address[3],
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	7a1b      	ldrb	r3, [r3, #8]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8002fda:	461d      	mov	r5, r3
                      p_enhanced_connection_complete_event->Peer_Address[2],
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	79db      	ldrb	r3, [r3, #7]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8002fe0:	461a      	mov	r2, r3
                      p_enhanced_connection_complete_event->Peer_Address[1],
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	799b      	ldrb	r3, [r3, #6]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8002fe6:	4619      	mov	r1, r3
                      p_enhanced_connection_complete_event->Peer_Address[0]);
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	795b      	ldrb	r3, [r3, #5]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8002fec:	9302      	str	r3, [sp, #8]
 8002fee:	9101      	str	r1, [sp, #4]
 8002ff0:	9200      	str	r2, [sp, #0]
 8002ff2:	462b      	mov	r3, r5
 8002ff4:	4622      	mov	r2, r4
 8002ff6:	4601      	mov	r1, r0
 8002ff8:	485a      	ldr	r0, [pc, #360]	; (8003164 <SVCCTL_App_Notification+0x528>)
 8002ffa:	f009 fecd 	bl	800cd98 <iprintf>
                      p_enhanced_connection_complete_event->Conn_Interval*1.25,
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	f8b3 3017 	ldrh.w	r3, [r3, #23]
 8003004:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8003006:	4618      	mov	r0, r3
 8003008:	f7fd fb9e 	bl	8000748 <__aeabi_i2d>
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	4b55      	ldr	r3, [pc, #340]	; (8003168 <SVCCTL_App_Notification+0x52c>)
 8003012:	f7fd f91d 	bl	8000250 <__aeabi_dmul>
 8003016:	4602      	mov	r2, r0
 8003018:	460b      	mov	r3, r1
 800301a:	4610      	mov	r0, r2
 800301c:	4619      	mov	r1, r3
                      p_enhanced_connection_complete_event->Conn_Latency,
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f8b3 3019 	ldrh.w	r3, [r3, #25]
 8003024:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8003026:	461c      	mov	r4, r3
                      p_enhanced_connection_complete_event->Supervision_Timeout*10
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	f8b3 301b 	ldrh.w	r3, [r3, #27]
 800302e:	b29b      	uxth	r3, r3
 8003030:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8003032:	4613      	mov	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4413      	add	r3, r2
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	9301      	str	r3, [sp, #4]
 800303c:	9400      	str	r4, [sp, #0]
 800303e:	4602      	mov	r2, r0
 8003040:	460b      	mov	r3, r1
 8003042:	484a      	ldr	r0, [pc, #296]	; (800316c <SVCCTL_App_Notification+0x530>)
 8003044:	f009 fea8 	bl	800cd98 <iprintf>
          APP_DBG_MSG("\r\n\r**  ENHANCED CONNECTION COMPLETE EVENT WITH SERVER \n\r");
 8003048:	484f      	ldr	r0, [pc, #316]	; (8003188 <SVCCTL_App_Notification+0x54c>)
 800304a:	f009 fea5 	bl	800cd98 <iprintf>
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800304e:	4b49      	ldr	r3, [pc, #292]	; (8003174 <SVCCTL_App_Notification+0x538>)
 8003050:	2200      	movs	r2, #0
 8003052:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8003054:	4b41      	ldr	r3, [pc, #260]	; (800315c <SVCCTL_App_Notification+0x520>)
 8003056:	8ada      	ldrh	r2, [r3, #22]
 8003058:	4b46      	ldr	r3, [pc, #280]	; (8003174 <SVCCTL_App_Notification+0x538>)
 800305a:	805a      	strh	r2, [r3, #2]
          P2PC_APP_Notification(&handleNotification);
 800305c:	4845      	ldr	r0, [pc, #276]	; (8003174 <SVCCTL_App_Notification+0x538>)
 800305e:	f000 fe2d 	bl	8003cbc <P2PC_APP_Notification>
          result = aci_gatt_disc_all_primary_services(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8003062:	4b3e      	ldr	r3, [pc, #248]	; (800315c <SVCCTL_App_Notification+0x520>)
 8003064:	8adb      	ldrh	r3, [r3, #22]
 8003066:	4618      	mov	r0, r3
 8003068:	f007 f98a 	bl	800a380 <aci_gatt_disc_all_primary_services>
 800306c:	4603      	mov	r3, r0
 800306e:	74fb      	strb	r3, [r7, #19]
          if (result == BLE_STATUS_SUCCESS)
 8003070:	7cfb      	ldrb	r3, [r7, #19]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d106      	bne.n	8003084 <SVCCTL_App_Notification+0x448>
            APP_DBG_MSG("\r\n\r** GATT SERVICES & CHARACTERISTICS DISCOVERY  \n\r");
 8003076:	4840      	ldr	r0, [pc, #256]	; (8003178 <SVCCTL_App_Notification+0x53c>)
 8003078:	f009 fe8e 	bl	800cd98 <iprintf>
            APP_DBG_MSG("* GATT :  Start Searching Primary Services \r\n\r");
 800307c:	483f      	ldr	r0, [pc, #252]	; (800317c <SVCCTL_App_Notification+0x540>)
 800307e:	f009 fe8b 	bl	800cd98 <iprintf>
          break; /* HCI_LE_ENHANCED_CONNECTION_COMPLETE_SUBEVT_CODE */
 8003082:	e27b      	b.n	800357c <SVCCTL_App_Notification+0x940>
            APP_DBG_MSG("BLE_CTRL_App_Notification(), All services discovery Failed \r\n\r");
 8003084:	483e      	ldr	r0, [pc, #248]	; (8003180 <SVCCTL_App_Notification+0x544>)
 8003086:	f009 fe87 	bl	800cd98 <iprintf>
          break; /* HCI_LE_ENHANCED_CONNECTION_COMPLETE_SUBEVT_CODE */
 800308a:	e277      	b.n	800357c <SVCCTL_App_Notification+0x940>
          ext_adv_evt = (hci_le_extended_advertising_report_event_rp0 *) meta_evt->data;
 800308c:	6a3b      	ldr	r3, [r7, #32]
 800308e:	3301      	adds	r3, #1
 8003090:	61fb      	str	r3, [r7, #28]
          if ((disp_filter != 0) && HAL_IS_BIT_SET(ext_adv_evt->Event_Type, 0x0010))
 8003092:	4b3e      	ldr	r3, [pc, #248]	; (800318c <SVCCTL_App_Notification+0x550>)
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b00      	cmp	r3, #0
 800309a:	d008      	beq.n	80030ae <SVCCTL_App_Notification+0x472>
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	f003 0310 	and.w	r3, r3, #16
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f040 8266 	bne.w	800357a <SVCCTL_App_Notification+0x93e>
          l_buff_pos = 0;
 80030ae:	4b38      	ldr	r3, [pc, #224]	; (8003190 <SVCCTL_App_Notification+0x554>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	801a      	strh	r2, [r3, #0]
          memset(&l_buff[l_buff_pos], 0, L_BUFF_SIZE);          
 80030b4:	4b36      	ldr	r3, [pc, #216]	; (8003190 <SVCCTL_App_Notification+0x554>)
 80030b6:	881b      	ldrh	r3, [r3, #0]
 80030b8:	461a      	mov	r2, r3
 80030ba:	4b36      	ldr	r3, [pc, #216]	; (8003194 <SVCCTL_App_Notification+0x558>)
 80030bc:	4413      	add	r3, r2
 80030be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030c2:	2100      	movs	r1, #0
 80030c4:	4618      	mov	r0, r3
 80030c6:	f009 ffe9 	bl	800d09c <memset>
          l_buff_pos += snprintf(&l_buff[l_buff_pos], L_BUFF_SIZE - l_buff_pos, 
 80030ca:	4b31      	ldr	r3, [pc, #196]	; (8003190 <SVCCTL_App_Notification+0x554>)
 80030cc:	881b      	ldrh	r3, [r3, #0]
 80030ce:	461a      	mov	r2, r3
 80030d0:	4b30      	ldr	r3, [pc, #192]	; (8003194 <SVCCTL_App_Notification+0x558>)
 80030d2:	18d0      	adds	r0, r2, r3
 80030d4:	4b2e      	ldr	r3, [pc, #184]	; (8003190 <SVCCTL_App_Notification+0x554>)
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80030dc:	461e      	mov	r6, r3
                                  ,ext_adv_evt->Address[5], ext_adv_evt->Address[4]
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	7a5b      	ldrb	r3, [r3, #9]
          l_buff_pos += snprintf(&l_buff[l_buff_pos], L_BUFF_SIZE - l_buff_pos, 
 80030e2:	469c      	mov	ip, r3
                                  ,ext_adv_evt->Address[5], ext_adv_evt->Address[4]
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	7a1b      	ldrb	r3, [r3, #8]
          l_buff_pos += snprintf(&l_buff[l_buff_pos], L_BUFF_SIZE - l_buff_pos, 
 80030e8:	461a      	mov	r2, r3
                                  ,ext_adv_evt->Address[3] ,ext_adv_evt->Address[2]
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	79db      	ldrb	r3, [r3, #7]
          l_buff_pos += snprintf(&l_buff[l_buff_pos], L_BUFF_SIZE - l_buff_pos, 
 80030ee:	4619      	mov	r1, r3
                                  ,ext_adv_evt->Address[3] ,ext_adv_evt->Address[2]
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	799b      	ldrb	r3, [r3, #6]
          l_buff_pos += snprintf(&l_buff[l_buff_pos], L_BUFF_SIZE - l_buff_pos, 
 80030f4:	461c      	mov	r4, r3
                                  ,ext_adv_evt->Address[1] ,ext_adv_evt->Address[0]);
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	795b      	ldrb	r3, [r3, #5]
          l_buff_pos += snprintf(&l_buff[l_buff_pos], L_BUFF_SIZE - l_buff_pos, 
 80030fa:	461d      	mov	r5, r3
                                  ,ext_adv_evt->Address[1] ,ext_adv_evt->Address[0]);
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	791b      	ldrb	r3, [r3, #4]
          l_buff_pos += snprintf(&l_buff[l_buff_pos], L_BUFF_SIZE - l_buff_pos, 
 8003100:	9304      	str	r3, [sp, #16]
 8003102:	9503      	str	r5, [sp, #12]
 8003104:	9402      	str	r4, [sp, #8]
 8003106:	9101      	str	r1, [sp, #4]
 8003108:	9200      	str	r2, [sp, #0]
 800310a:	4663      	mov	r3, ip
 800310c:	4a22      	ldr	r2, [pc, #136]	; (8003198 <SVCCTL_App_Notification+0x55c>)
 800310e:	4631      	mov	r1, r6
 8003110:	f009 feb8 	bl	800ce84 <sniprintf>
 8003114:	4603      	mov	r3, r0
 8003116:	b29a      	uxth	r2, r3
 8003118:	4b1d      	ldr	r3, [pc, #116]	; (8003190 <SVCCTL_App_Notification+0x554>)
 800311a:	881b      	ldrh	r3, [r3, #0]
 800311c:	4413      	add	r3, r2
 800311e:	b29a      	uxth	r2, r3
 8003120:	4b1b      	ldr	r3, [pc, #108]	; (8003190 <SVCCTL_App_Notification+0x554>)
 8003122:	801a      	strh	r2, [r3, #0]
          if (HAL_IS_BIT_SET(ext_adv_evt->Event_Type, 0x0010))
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800312a:	b29b      	uxth	r3, r3
 800312c:	f003 0310 	and.w	r3, r3, #16
 8003130:	2b00      	cmp	r3, #0
 8003132:	d035      	beq.n	80031a0 <SVCCTL_App_Notification+0x564>
            l_buff_pos += snprintf(&l_buff[l_buff_pos], L_BUFF_SIZE, "LEGACY   |");
 8003134:	4b16      	ldr	r3, [pc, #88]	; (8003190 <SVCCTL_App_Notification+0x554>)
 8003136:	881b      	ldrh	r3, [r3, #0]
 8003138:	461a      	mov	r2, r3
 800313a:	4b16      	ldr	r3, [pc, #88]	; (8003194 <SVCCTL_App_Notification+0x558>)
 800313c:	4413      	add	r3, r2
 800313e:	4a17      	ldr	r2, [pc, #92]	; (800319c <SVCCTL_App_Notification+0x560>)
 8003140:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003144:	4618      	mov	r0, r3
 8003146:	f009 fe9d 	bl	800ce84 <sniprintf>
 800314a:	4603      	mov	r3, r0
 800314c:	b29a      	uxth	r2, r3
 800314e:	4b10      	ldr	r3, [pc, #64]	; (8003190 <SVCCTL_App_Notification+0x554>)
 8003150:	881b      	ldrh	r3, [r3, #0]
 8003152:	4413      	add	r3, r2
 8003154:	b29a      	uxth	r2, r3
 8003156:	4b0e      	ldr	r3, [pc, #56]	; (8003190 <SVCCTL_App_Notification+0x554>)
 8003158:	801a      	strh	r2, [r3, #0]
 800315a:	e034      	b.n	80031c6 <SVCCTL_App_Notification+0x58a>
 800315c:	20000440 	.word	0x20000440
 8003160:	0800e564 	.word	0x0800e564
 8003164:	0800e5ac 	.word	0x0800e5ac
 8003168:	3ff40000 	.word	0x3ff40000
 800316c:	0800e5fc 	.word	0x0800e5fc
 8003170:	0800e668 	.word	0x0800e668
 8003174:	2000043c 	.word	0x2000043c
 8003178:	0800e698 	.word	0x0800e698
 800317c:	0800e6cc 	.word	0x0800e6cc
 8003180:	0800e6fc 	.word	0x0800e6fc
 8003184:	0800e73c 	.word	0x0800e73c
 8003188:	0800e78c 	.word	0x0800e78c
 800318c:	200005d2 	.word	0x200005d2
 8003190:	200005d0 	.word	0x200005d0
 8003194:	200004d0 	.word	0x200004d0
 8003198:	0800e7c8 	.word	0x0800e7c8
 800319c:	0800e7ec 	.word	0x0800e7ec
            l_buff_pos += snprintf(&l_buff[l_buff_pos], L_BUFF_SIZE, "EXTENDED |");
 80031a0:	4b92      	ldr	r3, [pc, #584]	; (80033ec <SVCCTL_App_Notification+0x7b0>)
 80031a2:	881b      	ldrh	r3, [r3, #0]
 80031a4:	461a      	mov	r2, r3
 80031a6:	4b92      	ldr	r3, [pc, #584]	; (80033f0 <SVCCTL_App_Notification+0x7b4>)
 80031a8:	4413      	add	r3, r2
 80031aa:	4a92      	ldr	r2, [pc, #584]	; (80033f4 <SVCCTL_App_Notification+0x7b8>)
 80031ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80031b0:	4618      	mov	r0, r3
 80031b2:	f009 fe67 	bl	800ce84 <sniprintf>
 80031b6:	4603      	mov	r3, r0
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	4b8c      	ldr	r3, [pc, #560]	; (80033ec <SVCCTL_App_Notification+0x7b0>)
 80031bc:	881b      	ldrh	r3, [r3, #0]
 80031be:	4413      	add	r3, r2
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	4b8a      	ldr	r3, [pc, #552]	; (80033ec <SVCCTL_App_Notification+0x7b0>)
 80031c4:	801a      	strh	r2, [r3, #0]
          l_buff_pos += snprintf(&l_buff[l_buff_pos], L_BUFF_SIZE - l_buff_pos, "%4d | ",(int8_t)ext_adv_evt->RSSI );
 80031c6:	4b89      	ldr	r3, [pc, #548]	; (80033ec <SVCCTL_App_Notification+0x7b0>)
 80031c8:	881b      	ldrh	r3, [r3, #0]
 80031ca:	461a      	mov	r2, r3
 80031cc:	4b88      	ldr	r3, [pc, #544]	; (80033f0 <SVCCTL_App_Notification+0x7b4>)
 80031ce:	18d0      	adds	r0, r2, r3
 80031d0:	4b86      	ldr	r3, [pc, #536]	; (80033ec <SVCCTL_App_Notification+0x7b0>)
 80031d2:	881b      	ldrh	r3, [r3, #0]
 80031d4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80031d8:	4619      	mov	r1, r3
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	7b9b      	ldrb	r3, [r3, #14]
 80031de:	b25b      	sxtb	r3, r3
 80031e0:	4a85      	ldr	r2, [pc, #532]	; (80033f8 <SVCCTL_App_Notification+0x7bc>)
 80031e2:	f009 fe4f 	bl	800ce84 <sniprintf>
 80031e6:	4603      	mov	r3, r0
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	4b80      	ldr	r3, [pc, #512]	; (80033ec <SVCCTL_App_Notification+0x7b0>)
 80031ec:	881b      	ldrh	r3, [r3, #0]
 80031ee:	4413      	add	r3, r2
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	4b7e      	ldr	r3, [pc, #504]	; (80033ec <SVCCTL_App_Notification+0x7b0>)
 80031f4:	801a      	strh	r2, [r3, #0]
          if (HAL_IS_BIT_SET(ext_adv_evt->Event_Type, 0x0001))
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	d016      	beq.n	8003234 <SVCCTL_App_Notification+0x5f8>
            l_buff_pos += snprintf(&l_buff[l_buff_pos], L_BUFF_SIZE - l_buff_pos, "CONN |");
 8003206:	4b79      	ldr	r3, [pc, #484]	; (80033ec <SVCCTL_App_Notification+0x7b0>)
 8003208:	881b      	ldrh	r3, [r3, #0]
 800320a:	461a      	mov	r2, r3
 800320c:	4b78      	ldr	r3, [pc, #480]	; (80033f0 <SVCCTL_App_Notification+0x7b4>)
 800320e:	4413      	add	r3, r2
 8003210:	4a76      	ldr	r2, [pc, #472]	; (80033ec <SVCCTL_App_Notification+0x7b0>)
 8003212:	8812      	ldrh	r2, [r2, #0]
 8003214:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8003218:	4611      	mov	r1, r2
 800321a:	4a78      	ldr	r2, [pc, #480]	; (80033fc <SVCCTL_App_Notification+0x7c0>)
 800321c:	4618      	mov	r0, r3
 800321e:	f009 fe31 	bl	800ce84 <sniprintf>
 8003222:	4603      	mov	r3, r0
 8003224:	b29a      	uxth	r2, r3
 8003226:	4b71      	ldr	r3, [pc, #452]	; (80033ec <SVCCTL_App_Notification+0x7b0>)
 8003228:	881b      	ldrh	r3, [r3, #0]
 800322a:	4413      	add	r3, r2
 800322c:	b29a      	uxth	r2, r3
 800322e:	4b6f      	ldr	r3, [pc, #444]	; (80033ec <SVCCTL_App_Notification+0x7b0>)
 8003230:	801a      	strh	r2, [r3, #0]
 8003232:	e015      	b.n	8003260 <SVCCTL_App_Notification+0x624>
            l_buff_pos += snprintf(&l_buff[l_buff_pos], L_BUFF_SIZE - l_buff_pos, "     |");
 8003234:	4b6d      	ldr	r3, [pc, #436]	; (80033ec <SVCCTL_App_Notification+0x7b0>)
 8003236:	881b      	ldrh	r3, [r3, #0]
 8003238:	461a      	mov	r2, r3
 800323a:	4b6d      	ldr	r3, [pc, #436]	; (80033f0 <SVCCTL_App_Notification+0x7b4>)
 800323c:	4413      	add	r3, r2
 800323e:	4a6b      	ldr	r2, [pc, #428]	; (80033ec <SVCCTL_App_Notification+0x7b0>)
 8003240:	8812      	ldrh	r2, [r2, #0]
 8003242:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8003246:	4611      	mov	r1, r2
 8003248:	4a6d      	ldr	r2, [pc, #436]	; (8003400 <SVCCTL_App_Notification+0x7c4>)
 800324a:	4618      	mov	r0, r3
 800324c:	f009 fe1a 	bl	800ce84 <sniprintf>
 8003250:	4603      	mov	r3, r0
 8003252:	b29a      	uxth	r2, r3
 8003254:	4b65      	ldr	r3, [pc, #404]	; (80033ec <SVCCTL_App_Notification+0x7b0>)
 8003256:	881b      	ldrh	r3, [r3, #0]
 8003258:	4413      	add	r3, r2
 800325a:	b29a      	uxth	r2, r3
 800325c:	4b63      	ldr	r3, [pc, #396]	; (80033ec <SVCCTL_App_Notification+0x7b0>)
 800325e:	801a      	strh	r2, [r3, #0]
          if (HAL_IS_BIT_SET(ext_adv_evt->Event_Type, 0x0002))
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003266:	b29b      	uxth	r3, r3
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d035      	beq.n	80032dc <SVCCTL_App_Notification+0x6a0>
            if (HAL_IS_BIT_SET(ext_adv_evt->Event_Type, 0x0008))
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003276:	b29b      	uxth	r3, r3
 8003278:	f003 0308 	and.w	r3, r3, #8
 800327c:	2b00      	cmp	r3, #0
 800327e:	d016      	beq.n	80032ae <SVCCTL_App_Notification+0x672>
              l_buff_pos += snprintf(&l_buff[l_buff_pos], L_BUFF_SIZE - l_buff_pos, "SCAN RSP |");
 8003280:	4b5a      	ldr	r3, [pc, #360]	; (80033ec <SVCCTL_App_Notification+0x7b0>)
 8003282:	881b      	ldrh	r3, [r3, #0]
 8003284:	461a      	mov	r2, r3
 8003286:	4b5a      	ldr	r3, [pc, #360]	; (80033f0 <SVCCTL_App_Notification+0x7b4>)
 8003288:	4413      	add	r3, r2
 800328a:	4a58      	ldr	r2, [pc, #352]	; (80033ec <SVCCTL_App_Notification+0x7b0>)
 800328c:	8812      	ldrh	r2, [r2, #0]
 800328e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8003292:	4611      	mov	r1, r2
 8003294:	4a5b      	ldr	r2, [pc, #364]	; (8003404 <SVCCTL_App_Notification+0x7c8>)
 8003296:	4618      	mov	r0, r3
 8003298:	f009 fdf4 	bl	800ce84 <sniprintf>
 800329c:	4603      	mov	r3, r0
 800329e:	b29a      	uxth	r2, r3
 80032a0:	4b52      	ldr	r3, [pc, #328]	; (80033ec <SVCCTL_App_Notification+0x7b0>)
 80032a2:	881b      	ldrh	r3, [r3, #0]
 80032a4:	4413      	add	r3, r2
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	4b50      	ldr	r3, [pc, #320]	; (80033ec <SVCCTL_App_Notification+0x7b0>)
 80032aa:	801a      	strh	r2, [r3, #0]
 80032ac:	e02c      	b.n	8003308 <SVCCTL_App_Notification+0x6cc>
              l_buff_pos += snprintf(&l_buff[l_buff_pos], L_BUFF_SIZE - l_buff_pos, "SCAN     |");
 80032ae:	4b4f      	ldr	r3, [pc, #316]	; (80033ec <SVCCTL_App_Notification+0x7b0>)
 80032b0:	881b      	ldrh	r3, [r3, #0]
 80032b2:	461a      	mov	r2, r3
 80032b4:	4b4e      	ldr	r3, [pc, #312]	; (80033f0 <SVCCTL_App_Notification+0x7b4>)
 80032b6:	4413      	add	r3, r2
 80032b8:	4a4c      	ldr	r2, [pc, #304]	; (80033ec <SVCCTL_App_Notification+0x7b0>)
 80032ba:	8812      	ldrh	r2, [r2, #0]
 80032bc:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80032c0:	4611      	mov	r1, r2
 80032c2:	4a51      	ldr	r2, [pc, #324]	; (8003408 <SVCCTL_App_Notification+0x7cc>)
 80032c4:	4618      	mov	r0, r3
 80032c6:	f009 fddd 	bl	800ce84 <sniprintf>
 80032ca:	4603      	mov	r3, r0
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	4b47      	ldr	r3, [pc, #284]	; (80033ec <SVCCTL_App_Notification+0x7b0>)
 80032d0:	881b      	ldrh	r3, [r3, #0]
 80032d2:	4413      	add	r3, r2
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	4b45      	ldr	r3, [pc, #276]	; (80033ec <SVCCTL_App_Notification+0x7b0>)
 80032d8:	801a      	strh	r2, [r3, #0]
 80032da:	e015      	b.n	8003308 <SVCCTL_App_Notification+0x6cc>
            l_buff_pos += snprintf(&l_buff[l_buff_pos], L_BUFF_SIZE - l_buff_pos, "         |");
 80032dc:	4b43      	ldr	r3, [pc, #268]	; (80033ec <SVCCTL_App_Notification+0x7b0>)
 80032de:	881b      	ldrh	r3, [r3, #0]
 80032e0:	461a      	mov	r2, r3
 80032e2:	4b43      	ldr	r3, [pc, #268]	; (80033f0 <SVCCTL_App_Notification+0x7b4>)
 80032e4:	4413      	add	r3, r2
 80032e6:	4a41      	ldr	r2, [pc, #260]	; (80033ec <SVCCTL_App_Notification+0x7b0>)
 80032e8:	8812      	ldrh	r2, [r2, #0]
 80032ea:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80032ee:	4611      	mov	r1, r2
 80032f0:	4a46      	ldr	r2, [pc, #280]	; (800340c <SVCCTL_App_Notification+0x7d0>)
 80032f2:	4618      	mov	r0, r3
 80032f4:	f009 fdc6 	bl	800ce84 <sniprintf>
 80032f8:	4603      	mov	r3, r0
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	4b3b      	ldr	r3, [pc, #236]	; (80033ec <SVCCTL_App_Notification+0x7b0>)
 80032fe:	881b      	ldrh	r3, [r3, #0]
 8003300:	4413      	add	r3, r2
 8003302:	b29a      	uxth	r2, r3
 8003304:	4b39      	ldr	r3, [pc, #228]	; (80033ec <SVCCTL_App_Notification+0x7b0>)
 8003306:	801a      	strh	r2, [r3, #0]
          l_buff_pos += snprintf(&l_buff[l_buff_pos], L_BUFF_SIZE - l_buff_pos, "%3d | ",ext_adv_evt->Data_Length );
 8003308:	4b38      	ldr	r3, [pc, #224]	; (80033ec <SVCCTL_App_Notification+0x7b0>)
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	461a      	mov	r2, r3
 800330e:	4b38      	ldr	r3, [pc, #224]	; (80033f0 <SVCCTL_App_Notification+0x7b4>)
 8003310:	18d0      	adds	r0, r2, r3
 8003312:	4b36      	ldr	r3, [pc, #216]	; (80033ec <SVCCTL_App_Notification+0x7b0>)
 8003314:	881b      	ldrh	r3, [r3, #0]
 8003316:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800331a:	4619      	mov	r1, r3
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	7e1b      	ldrb	r3, [r3, #24]
 8003320:	4a3b      	ldr	r2, [pc, #236]	; (8003410 <SVCCTL_App_Notification+0x7d4>)
 8003322:	f009 fdaf 	bl	800ce84 <sniprintf>
 8003326:	4603      	mov	r3, r0
 8003328:	b29a      	uxth	r2, r3
 800332a:	4b30      	ldr	r3, [pc, #192]	; (80033ec <SVCCTL_App_Notification+0x7b0>)
 800332c:	881b      	ldrh	r3, [r3, #0]
 800332e:	4413      	add	r3, r2
 8003330:	b29a      	uxth	r2, r3
 8003332:	4b2e      	ldr	r3, [pc, #184]	; (80033ec <SVCCTL_App_Notification+0x7b0>)
 8003334:	801a      	strh	r2, [r3, #0]
          if (ext_adv_evt->Advertising_SID != 0xFF)
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	7b1b      	ldrb	r3, [r3, #12]
 800333a:	2bff      	cmp	r3, #255	; 0xff
 800333c:	d016      	beq.n	800336c <SVCCTL_App_Notification+0x730>
            l_buff_pos += snprintf(&l_buff[l_buff_pos], L_BUFF_SIZE - l_buff_pos, "%2d | ",ext_adv_evt->Advertising_SID );
 800333e:	4b2b      	ldr	r3, [pc, #172]	; (80033ec <SVCCTL_App_Notification+0x7b0>)
 8003340:	881b      	ldrh	r3, [r3, #0]
 8003342:	461a      	mov	r2, r3
 8003344:	4b2a      	ldr	r3, [pc, #168]	; (80033f0 <SVCCTL_App_Notification+0x7b4>)
 8003346:	18d0      	adds	r0, r2, r3
 8003348:	4b28      	ldr	r3, [pc, #160]	; (80033ec <SVCCTL_App_Notification+0x7b0>)
 800334a:	881b      	ldrh	r3, [r3, #0]
 800334c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8003350:	4619      	mov	r1, r3
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	7b1b      	ldrb	r3, [r3, #12]
 8003356:	4a2f      	ldr	r2, [pc, #188]	; (8003414 <SVCCTL_App_Notification+0x7d8>)
 8003358:	f009 fd94 	bl	800ce84 <sniprintf>
 800335c:	4603      	mov	r3, r0
 800335e:	b29a      	uxth	r2, r3
 8003360:	4b22      	ldr	r3, [pc, #136]	; (80033ec <SVCCTL_App_Notification+0x7b0>)
 8003362:	881b      	ldrh	r3, [r3, #0]
 8003364:	4413      	add	r3, r2
 8003366:	b29a      	uxth	r2, r3
 8003368:	4b20      	ldr	r3, [pc, #128]	; (80033ec <SVCCTL_App_Notification+0x7b0>)
 800336a:	801a      	strh	r2, [r3, #0]
          if (HAL_IS_BIT_SET(ext_adv_evt->Event_Type, 0x0020))
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003372:	b29b      	uxth	r3, r3
 8003374:	f003 0320 	and.w	r3, r3, #32
 8003378:	2b00      	cmp	r3, #0
 800337a:	d016      	beq.n	80033aa <SVCCTL_App_Notification+0x76e>
            l_buff_pos += snprintf(&l_buff[l_buff_pos], L_BUFF_SIZE - l_buff_pos, "more data   | ");
 800337c:	4b1b      	ldr	r3, [pc, #108]	; (80033ec <SVCCTL_App_Notification+0x7b0>)
 800337e:	881b      	ldrh	r3, [r3, #0]
 8003380:	461a      	mov	r2, r3
 8003382:	4b1b      	ldr	r3, [pc, #108]	; (80033f0 <SVCCTL_App_Notification+0x7b4>)
 8003384:	4413      	add	r3, r2
 8003386:	4a19      	ldr	r2, [pc, #100]	; (80033ec <SVCCTL_App_Notification+0x7b0>)
 8003388:	8812      	ldrh	r2, [r2, #0]
 800338a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 800338e:	4611      	mov	r1, r2
 8003390:	4a21      	ldr	r2, [pc, #132]	; (8003418 <SVCCTL_App_Notification+0x7dc>)
 8003392:	4618      	mov	r0, r3
 8003394:	f009 fd76 	bl	800ce84 <sniprintf>
 8003398:	4603      	mov	r3, r0
 800339a:	b29a      	uxth	r2, r3
 800339c:	4b13      	ldr	r3, [pc, #76]	; (80033ec <SVCCTL_App_Notification+0x7b0>)
 800339e:	881b      	ldrh	r3, [r3, #0]
 80033a0:	4413      	add	r3, r2
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	4b11      	ldr	r3, [pc, #68]	; (80033ec <SVCCTL_App_Notification+0x7b0>)
 80033a6:	801a      	strh	r2, [r3, #0]
 80033a8:	e01d      	b.n	80033e6 <SVCCTL_App_Notification+0x7aa>
          else if (HAL_IS_BIT_SET(ext_adv_evt->Event_Type, 0x0040))
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d015      	beq.n	80033e6 <SVCCTL_App_Notification+0x7aa>
            l_buff_pos += snprintf(&l_buff[l_buff_pos], L_BUFF_SIZE - l_buff_pos, "trunc data | ");
 80033ba:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <SVCCTL_App_Notification+0x7b0>)
 80033bc:	881b      	ldrh	r3, [r3, #0]
 80033be:	461a      	mov	r2, r3
 80033c0:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <SVCCTL_App_Notification+0x7b4>)
 80033c2:	4413      	add	r3, r2
 80033c4:	4a09      	ldr	r2, [pc, #36]	; (80033ec <SVCCTL_App_Notification+0x7b0>)
 80033c6:	8812      	ldrh	r2, [r2, #0]
 80033c8:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80033cc:	4611      	mov	r1, r2
 80033ce:	4a13      	ldr	r2, [pc, #76]	; (800341c <SVCCTL_App_Notification+0x7e0>)
 80033d0:	4618      	mov	r0, r3
 80033d2:	f009 fd57 	bl	800ce84 <sniprintf>
 80033d6:	4603      	mov	r3, r0
 80033d8:	b29a      	uxth	r2, r3
 80033da:	4b04      	ldr	r3, [pc, #16]	; (80033ec <SVCCTL_App_Notification+0x7b0>)
 80033dc:	881b      	ldrh	r3, [r3, #0]
 80033de:	4413      	add	r3, r2
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	4b02      	ldr	r3, [pc, #8]	; (80033ec <SVCCTL_App_Notification+0x7b0>)
 80033e4:	801a      	strh	r2, [r3, #0]
          k = 0;
 80033e6:	2300      	movs	r3, #0
 80033e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          while ( k < ext_adv_evt->Data_Length )
 80033ea:	e0a2      	b.n	8003532 <SVCCTL_App_Notification+0x8f6>
 80033ec:	200005d0 	.word	0x200005d0
 80033f0:	200004d0 	.word	0x200004d0
 80033f4:	0800e7f8 	.word	0x0800e7f8
 80033f8:	0800e804 	.word	0x0800e804
 80033fc:	0800e80c 	.word	0x0800e80c
 8003400:	0800e814 	.word	0x0800e814
 8003404:	0800e81c 	.word	0x0800e81c
 8003408:	0800e828 	.word	0x0800e828
 800340c:	0800e834 	.word	0x0800e834
 8003410:	0800e840 	.word	0x0800e840
 8003414:	0800e848 	.word	0x0800e848
 8003418:	0800e850 	.word	0x0800e850
 800341c:	0800e860 	.word	0x0800e860
            adlength = ext_adv_evt->Data[k];
 8003420:	69fa      	ldr	r2, [r7, #28]
 8003422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003424:	4413      	add	r3, r2
 8003426:	3319      	adds	r3, #25
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	76fb      	strb	r3, [r7, #27]
            adtype = ext_adv_evt->Data[k + 1];
 800342c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800342e:	3301      	adds	r3, #1
 8003430:	69fa      	ldr	r2, [r7, #28]
 8003432:	4413      	add	r3, r2
 8003434:	7e5b      	ldrb	r3, [r3, #25]
 8003436:	76bb      	strb	r3, [r7, #26]
            if ( adtype == AD_TYPE_MANUFACTURER_SPECIFIC_DATA )
 8003438:	7ebb      	ldrb	r3, [r7, #26]
 800343a:	2bff      	cmp	r3, #255	; 0xff
 800343c:	d157      	bne.n	80034ee <SVCCTL_App_Notification+0x8b2>
              if ( (adlength >= 7) && (ext_adv_evt->Data[k + 2] == 0x01) )
 800343e:	7efb      	ldrb	r3, [r7, #27]
 8003440:	2b06      	cmp	r3, #6
 8003442:	d971      	bls.n	8003528 <SVCCTL_App_Notification+0x8ec>
 8003444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003446:	3302      	adds	r3, #2
 8003448:	69fa      	ldr	r2, [r7, #28]
 800344a:	4413      	add	r3, r2
 800344c:	7e5b      	ldrb	r3, [r3, #25]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d16a      	bne.n	8003528 <SVCCTL_App_Notification+0x8ec>
                if (ext_adv_evt->Data[k + 3] == CFG_DEV_ID_P2P_SERVER1)
 8003452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003454:	3303      	adds	r3, #3
 8003456:	69fa      	ldr	r2, [r7, #28]
 8003458:	4413      	add	r3, r2
 800345a:	7e5b      	ldrb	r3, [r3, #25]
 800345c:	2b83      	cmp	r3, #131	; 0x83
 800345e:	d163      	bne.n	8003528 <SVCCTL_App_Notification+0x8ec>
                  if ( HAL_IS_BIT_CLR(ext_adv_evt->Event_Type, 0x0010) && 
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003466:	b29b      	uxth	r3, r3
 8003468:	f003 0310 	and.w	r3, r3, #16
 800346c:	2b00      	cmp	r3, #0
 800346e:	d15b      	bne.n	8003528 <SVCCTL_App_Notification+0x8ec>
                        HAL_IS_BIT_SET(ext_adv_evt->Event_Type, 0x0001))
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003476:	b29b      	uxth	r3, r3
 8003478:	f003 0301 	and.w	r3, r3, #1
                  if ( HAL_IS_BIT_CLR(ext_adv_evt->Event_Type, 0x0010) && 
 800347c:	2b00      	cmp	r3, #0
 800347e:	d053      	beq.n	8003528 <SVCCTL_App_Notification+0x8ec>
                    l_buff_pos += snprintf(&l_buff[l_buff_pos], L_BUFF_SIZE - l_buff_pos, "server detected via MAN ID, address recorded to connect. | ");
 8003480:	4b43      	ldr	r3, [pc, #268]	; (8003590 <SVCCTL_App_Notification+0x954>)
 8003482:	881b      	ldrh	r3, [r3, #0]
 8003484:	461a      	mov	r2, r3
 8003486:	4b43      	ldr	r3, [pc, #268]	; (8003594 <SVCCTL_App_Notification+0x958>)
 8003488:	4413      	add	r3, r2
 800348a:	4a41      	ldr	r2, [pc, #260]	; (8003590 <SVCCTL_App_Notification+0x954>)
 800348c:	8812      	ldrh	r2, [r2, #0]
 800348e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8003492:	4611      	mov	r1, r2
 8003494:	4a40      	ldr	r2, [pc, #256]	; (8003598 <SVCCTL_App_Notification+0x95c>)
 8003496:	4618      	mov	r0, r3
 8003498:	f009 fcf4 	bl	800ce84 <sniprintf>
 800349c:	4603      	mov	r3, r0
 800349e:	b29a      	uxth	r2, r3
 80034a0:	4b3b      	ldr	r3, [pc, #236]	; (8003590 <SVCCTL_App_Notification+0x954>)
 80034a2:	881b      	ldrh	r3, [r3, #0]
 80034a4:	4413      	add	r3, r2
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	4b39      	ldr	r3, [pc, #228]	; (8003590 <SVCCTL_App_Notification+0x954>)
 80034aa:	801a      	strh	r2, [r3, #0]
                    BleApplicationContext.DeviceServerFound = 0x01;
 80034ac:	4b3b      	ldr	r3, [pc, #236]	; (800359c <SVCCTL_App_Notification+0x960>)
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
                    ext_adv_server_remote_bd_addr[0] = ext_adv_evt->Address[0];
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	791a      	ldrb	r2, [r3, #4]
 80034b8:	4b39      	ldr	r3, [pc, #228]	; (80035a0 <SVCCTL_App_Notification+0x964>)
 80034ba:	701a      	strb	r2, [r3, #0]
                    ext_adv_server_remote_bd_addr[1] = ext_adv_evt->Address[1];
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	795a      	ldrb	r2, [r3, #5]
 80034c0:	4b37      	ldr	r3, [pc, #220]	; (80035a0 <SVCCTL_App_Notification+0x964>)
 80034c2:	705a      	strb	r2, [r3, #1]
                    ext_adv_server_remote_bd_addr[2] = ext_adv_evt->Address[2];
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	799a      	ldrb	r2, [r3, #6]
 80034c8:	4b35      	ldr	r3, [pc, #212]	; (80035a0 <SVCCTL_App_Notification+0x964>)
 80034ca:	709a      	strb	r2, [r3, #2]
                    ext_adv_server_remote_bd_addr[3] = ext_adv_evt->Address[3];
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	79da      	ldrb	r2, [r3, #7]
 80034d0:	4b33      	ldr	r3, [pc, #204]	; (80035a0 <SVCCTL_App_Notification+0x964>)
 80034d2:	70da      	strb	r2, [r3, #3]
                    ext_adv_server_remote_bd_addr[4] = ext_adv_evt->Address[4];
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	7a1a      	ldrb	r2, [r3, #8]
 80034d8:	4b31      	ldr	r3, [pc, #196]	; (80035a0 <SVCCTL_App_Notification+0x964>)
 80034da:	711a      	strb	r2, [r3, #4]
                    ext_adv_server_remote_bd_addr[5] = ext_adv_evt->Address[5];
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	7a5a      	ldrb	r2, [r3, #9]
 80034e0:	4b2f      	ldr	r3, [pc, #188]	; (80035a0 <SVCCTL_App_Notification+0x964>)
 80034e2:	715a      	strb	r2, [r3, #5]
                    ext_adv_address_type = ext_adv_evt->Address_Type;
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	78da      	ldrb	r2, [r3, #3]
 80034e8:	4b2e      	ldr	r3, [pc, #184]	; (80035a4 <SVCCTL_App_Notification+0x968>)
 80034ea:	701a      	strb	r2, [r3, #0]
 80034ec:	e01c      	b.n	8003528 <SVCCTL_App_Notification+0x8ec>
            else if(adtype == AD_TYPE_COMPLETE_LOCAL_NAME)
 80034ee:	7ebb      	ldrb	r3, [r7, #26]
 80034f0:	2b09      	cmp	r3, #9
 80034f2:	d119      	bne.n	8003528 <SVCCTL_App_Notification+0x8ec>
              memcpy(&l_buff[l_buff_pos], &ext_adv_evt->Data[k + 2], adlength - 1);
 80034f4:	4b26      	ldr	r3, [pc, #152]	; (8003590 <SVCCTL_App_Notification+0x954>)
 80034f6:	881b      	ldrh	r3, [r3, #0]
 80034f8:	461a      	mov	r2, r3
 80034fa:	4b26      	ldr	r3, [pc, #152]	; (8003594 <SVCCTL_App_Notification+0x958>)
 80034fc:	18d0      	adds	r0, r2, r3
 80034fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003500:	3302      	adds	r3, #2
 8003502:	3318      	adds	r3, #24
 8003504:	69fa      	ldr	r2, [r7, #28]
 8003506:	4413      	add	r3, r2
 8003508:	1c59      	adds	r1, r3, #1
 800350a:	7efb      	ldrb	r3, [r7, #27]
 800350c:	3b01      	subs	r3, #1
 800350e:	461a      	mov	r2, r3
 8003510:	f009 fe3f 	bl	800d192 <memcpy>
              l_buff_pos += adlength - 1;
 8003514:	7efb      	ldrb	r3, [r7, #27]
 8003516:	b29a      	uxth	r2, r3
 8003518:	4b1d      	ldr	r3, [pc, #116]	; (8003590 <SVCCTL_App_Notification+0x954>)
 800351a:	881b      	ldrh	r3, [r3, #0]
 800351c:	4413      	add	r3, r2
 800351e:	b29b      	uxth	r3, r3
 8003520:	3b01      	subs	r3, #1
 8003522:	b29a      	uxth	r2, r3
 8003524:	4b1a      	ldr	r3, [pc, #104]	; (8003590 <SVCCTL_App_Notification+0x954>)
 8003526:	801a      	strh	r2, [r3, #0]
            k += adlength + 1;
 8003528:	7efb      	ldrb	r3, [r7, #27]
 800352a:	3301      	adds	r3, #1
 800352c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800352e:	4413      	add	r3, r2
 8003530:	63fb      	str	r3, [r7, #60]	; 0x3c
          while ( k < ext_adv_evt->Data_Length )
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	7e1b      	ldrb	r3, [r3, #24]
 8003536:	461a      	mov	r2, r3
 8003538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800353a:	4293      	cmp	r3, r2
 800353c:	f6ff af70 	blt.w	8003420 <SVCCTL_App_Notification+0x7e4>
          l_buff_pos += snprintf(&l_buff[l_buff_pos], L_BUFF_SIZE - l_buff_pos, "\n");
 8003540:	4b13      	ldr	r3, [pc, #76]	; (8003590 <SVCCTL_App_Notification+0x954>)
 8003542:	881b      	ldrh	r3, [r3, #0]
 8003544:	461a      	mov	r2, r3
 8003546:	4b13      	ldr	r3, [pc, #76]	; (8003594 <SVCCTL_App_Notification+0x958>)
 8003548:	4413      	add	r3, r2
 800354a:	4a11      	ldr	r2, [pc, #68]	; (8003590 <SVCCTL_App_Notification+0x954>)
 800354c:	8812      	ldrh	r2, [r2, #0]
 800354e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8003552:	4611      	mov	r1, r2
 8003554:	4a14      	ldr	r2, [pc, #80]	; (80035a8 <SVCCTL_App_Notification+0x96c>)
 8003556:	4618      	mov	r0, r3
 8003558:	f009 fc94 	bl	800ce84 <sniprintf>
 800355c:	4603      	mov	r3, r0
 800355e:	b29a      	uxth	r2, r3
 8003560:	4b0b      	ldr	r3, [pc, #44]	; (8003590 <SVCCTL_App_Notification+0x954>)
 8003562:	881b      	ldrh	r3, [r3, #0]
 8003564:	4413      	add	r3, r2
 8003566:	b29a      	uxth	r2, r3
 8003568:	4b09      	ldr	r3, [pc, #36]	; (8003590 <SVCCTL_App_Notification+0x954>)
 800356a:	801a      	strh	r2, [r3, #0]
          APP_DBG_MSG("%s",l_buff);
 800356c:	4909      	ldr	r1, [pc, #36]	; (8003594 <SVCCTL_App_Notification+0x958>)
 800356e:	480f      	ldr	r0, [pc, #60]	; (80035ac <SVCCTL_App_Notification+0x970>)
 8003570:	f009 fc12 	bl	800cd98 <iprintf>
          break;
 8003574:	e002      	b.n	800357c <SVCCTL_App_Notification+0x940>
          break;
 8003576:	bf00      	nop
 8003578:	e004      	b.n	8003584 <SVCCTL_App_Notification+0x948>
            break;
 800357a:	bf00      	nop
    break; /* HCI_LE_META_EVT_CODE */
 800357c:	e002      	b.n	8003584 <SVCCTL_App_Notification+0x948>
      break;
 800357e:	bf00      	nop
 8003580:	e000      	b.n	8003584 <SVCCTL_App_Notification+0x948>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8003582:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8003584:	2301      	movs	r3, #1
}
 8003586:	4618      	mov	r0, r3
 8003588:	3744      	adds	r7, #68	; 0x44
 800358a:	46bd      	mov	sp, r7
 800358c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800358e:	bf00      	nop
 8003590:	200005d0 	.word	0x200005d0
 8003594:	200004d0 	.word	0x200004d0
 8003598:	0800e870 	.word	0x0800e870
 800359c:	20000440 	.word	0x20000440
 80035a0:	20000434 	.word	0x20000434
 80035a4:	2000043a 	.word	0x2000043a
 80035a8:	0800e8ac 	.word	0x0800e8ac
 80035ac:	0800e8b0 	.word	0x0800e8b0

080035b0 <APP_BLE_Get_Client_Connection_Status>:

APP_BLE_ConnStatus_t APP_BLE_Get_Client_Connection_Status(uint16_t Connection_Handle)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	4603      	mov	r3, r0
 80035b8:	80fb      	strh	r3, [r7, #6]
  if (BleApplicationContext.BleApplicationContext_legacy.connectionHandle == Connection_Handle)
 80035ba:	4b08      	ldr	r3, [pc, #32]	; (80035dc <APP_BLE_Get_Client_Connection_Status+0x2c>)
 80035bc:	8adb      	ldrh	r3, [r3, #22]
 80035be:	88fa      	ldrh	r2, [r7, #6]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d103      	bne.n	80035cc <APP_BLE_Get_Client_Connection_Status+0x1c>
  {
    return BleApplicationContext.Device_Connection_Status;
 80035c4:	4b05      	ldr	r3, [pc, #20]	; (80035dc <APP_BLE_Get_Client_Connection_Status+0x2c>)
 80035c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80035ca:	e000      	b.n	80035ce <APP_BLE_Get_Client_Connection_Status+0x1e>
  }
  return APP_BLE_IDLE;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	20000440 	.word	0x20000440

080035e0 <APP_BLE_Key_Button1_Action>:
/* USER CODE BEGIN FD */
void APP_BLE_Key_Button1_Action(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
#if OOB_DEMO == 0 
  P2PC_APP_SW1_Button_Action();
#else 
  if (P2P_Client_APP_Get_State () != APP_BLE_CONNECTED_CLIENT)
 80035e4:	f000 feb2 	bl	800434c <P2P_Client_APP_Get_State>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b06      	cmp	r3, #6
 80035ec:	d011      	beq.n	8003612 <APP_BLE_Key_Button1_Action+0x32>
  {
    if (scan_running == 1)
 80035ee:	4b0b      	ldr	r3, [pc, #44]	; (800361c <APP_BLE_Key_Button1_Action+0x3c>)
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d107      	bne.n	8003608 <APP_BLE_Key_Button1_Action+0x28>
    {
      UTIL_SEQ_SetTask(1 << CFG_TASK_TERMINATE_SCAN_ID, CFG_SCH_PRIO_0);
 80035f8:	2100      	movs	r1, #0
 80035fa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80035fe:	f009 f9e9 	bl	800c9d4 <UTIL_SEQ_SetTask>
      scan_running = 0;
 8003602:	4b06      	ldr	r3, [pc, #24]	; (800361c <APP_BLE_Key_Button1_Action+0x3c>)
 8003604:	2200      	movs	r2, #0
 8003606:	701a      	strb	r2, [r3, #0]
    }
    UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_1_ID, CFG_SCH_PRIO_0);
 8003608:	2100      	movs	r1, #0
 800360a:	2002      	movs	r0, #2
 800360c:	f009 f9e2 	bl	800c9d4 <UTIL_SEQ_SetTask>
  else 
  {
    P2PC_APP_SW1_Button_Action();
  }   
#endif
}
 8003610:	e001      	b.n	8003616 <APP_BLE_Key_Button1_Action+0x36>
    P2PC_APP_SW1_Button_Action();
 8003612:	f000 fb85 	bl	8003d20 <P2PC_APP_SW1_Button_Action>
}
 8003616:	bf00      	nop
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	20000008 	.word	0x20000008

08003620 <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  disp_filter = !disp_filter;
 8003624:	4b07      	ldr	r3, [pc, #28]	; (8003644 <APP_BLE_Key_Button2_Action+0x24>)
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	bf0c      	ite	eq
 800362e:	2301      	moveq	r3, #1
 8003630:	2300      	movne	r3, #0
 8003632:	b2db      	uxtb	r3, r3
 8003634:	461a      	mov	r2, r3
 8003636:	4b03      	ldr	r3, [pc, #12]	; (8003644 <APP_BLE_Key_Button2_Action+0x24>)
 8003638:	701a      	strb	r2, [r3, #0]
}
 800363a:	bf00      	nop
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	200005d2 	.word	0x200005d2

08003648 <APP_BLE_Key_Button3_Action>:

void APP_BLE_Key_Button3_Action(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0
  if (scan_running == 0)
 800364c:	4b0b      	ldr	r3, [pc, #44]	; (800367c <APP_BLE_Key_Button3_Action+0x34>)
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d107      	bne.n	8003666 <APP_BLE_Key_Button3_Action+0x1e>
  {
    UTIL_SEQ_SetTask(1 << CFG_TASK_START_SCAN_ID, CFG_SCH_PRIO_0);
 8003656:	2100      	movs	r1, #0
 8003658:	2001      	movs	r0, #1
 800365a:	f009 f9bb 	bl	800c9d4 <UTIL_SEQ_SetTask>
    scan_running = 1;
 800365e:	4b07      	ldr	r3, [pc, #28]	; (800367c <APP_BLE_Key_Button3_Action+0x34>)
 8003660:	2201      	movs	r2, #1
 8003662:	701a      	strb	r2, [r3, #0]
  {
    UTIL_SEQ_SetTask(1 << CFG_TASK_TERMINATE_SCAN_ID, CFG_SCH_PRIO_0);
    scan_running = 0;
  }
  
}
 8003664:	e007      	b.n	8003676 <APP_BLE_Key_Button3_Action+0x2e>
    UTIL_SEQ_SetTask(1 << CFG_TASK_TERMINATE_SCAN_ID, CFG_SCH_PRIO_0);
 8003666:	2100      	movs	r1, #0
 8003668:	f44f 7080 	mov.w	r0, #256	; 0x100
 800366c:	f009 f9b2 	bl	800c9d4 <UTIL_SEQ_SetTask>
    scan_running = 0;
 8003670:	4b02      	ldr	r3, [pc, #8]	; (800367c <APP_BLE_Key_Button3_Action+0x34>)
 8003672:	2200      	movs	r2, #0
 8003674:	701a      	strb	r2, [r3, #0]
}
 8003676:	bf00      	nop
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	20000008 	.word	0x20000008

08003680 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8003686:	4b06      	ldr	r3, [pc, #24]	; (80036a0 <Ble_Tl_Init+0x20>)
 8003688:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800368a:	4b06      	ldr	r3, [pc, #24]	; (80036a4 <Ble_Tl_Init+0x24>)
 800368c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800368e:	463b      	mov	r3, r7
 8003690:	4619      	mov	r1, r3
 8003692:	4805      	ldr	r0, [pc, #20]	; (80036a8 <Ble_Tl_Init+0x28>)
 8003694:	f007 fbe8 	bl	800ae68 <hci_init>

  return;
 8003698:	bf00      	nop
}
 800369a:	3708      	adds	r7, #8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	20030028 	.word	0x20030028
 80036a4:	08003bf5 	.word	0x08003bf5
 80036a8:	08003bbd 	.word	0x08003bbd

080036ac <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 80036ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036ae:	b08d      	sub	sp, #52	; 0x34
 80036b0:	af06      	add	r7, sp, #24
  const uint8_t *p_bd_addr;
#endif  
#if (CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR)
  uint32_t a_srd_bd_addr[2];
#endif
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 80036b2:	2300      	movs	r3, #0
 80036b4:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80036b6:	2392      	movs	r3, #146	; 0x92
 80036b8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 80036ba:	489c      	ldr	r0, [pc, #624]	; (800392c <Ble_Hci_Gap_Gatt_Init+0x280>)
 80036bc:	f009 fbda 	bl	800ce74 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 80036c0:	f007 fa33 	bl	800ab2a <hci_reset>
 80036c4:	4603      	mov	r3, r0
 80036c6:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80036c8:	7dfb      	ldrb	r3, [r7, #23]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d005      	beq.n	80036da <Ble_Hci_Gap_Gatt_Init+0x2e>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 80036ce:	7dfb      	ldrb	r3, [r7, #23]
 80036d0:	4619      	mov	r1, r3
 80036d2:	4897      	ldr	r0, [pc, #604]	; (8003930 <Ble_Hci_Gap_Gatt_Init+0x284>)
 80036d4:	f009 fb60 	bl	800cd98 <iprintf>
 80036d8:	e002      	b.n	80036e0 <Ble_Hci_Gap_Gatt_Init+0x34>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 80036da:	4896      	ldr	r0, [pc, #600]	; (8003934 <Ble_Hci_Gap_Gatt_Init+0x288>)
 80036dc:	f009 fbca 	bl	800ce74 <puts>

  /**
   * Write the BD Address
   */
#if (CFG_BLE_ADDRESS_TYPE == GAP_PUBLIC_ADDR)  
  p_bd_addr = BleGetBdAddress();
 80036e0:	f000 fa06 	bl	8003af0 <BleGetBdAddress>
 80036e4:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	2106      	movs	r1, #6
 80036ea:	2000      	movs	r0, #0
 80036ec:	f007 f8dd 	bl	800a8aa <aci_hal_write_config_data>
 80036f0:	4603      	mov	r3, r0
 80036f2:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80036f4:	7dfb      	ldrb	r3, [r7, #23]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d005      	beq.n	8003706 <Ble_Hci_Gap_Gatt_Init+0x5a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 80036fa:	7dfb      	ldrb	r3, [r7, #23]
 80036fc:	4619      	mov	r1, r3
 80036fe:	488e      	ldr	r0, [pc, #568]	; (8003938 <Ble_Hci_Gap_Gatt_Init+0x28c>)
 8003700:	f009 fb4a 	bl	800cd98 <iprintf>
 8003704:	e021      	b.n	800374a <Ble_Hci_Gap_Gatt_Init+0x9e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 8003706:	488d      	ldr	r0, [pc, #564]	; (800393c <Ble_Hci_Gap_Gatt_Init+0x290>)
 8003708:	f009 fbb4 	bl	800ce74 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	3305      	adds	r3, #5
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	3304      	adds	r3, #4
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	461c      	mov	r4, r3
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	3303      	adds	r3, #3
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	461d      	mov	r5, r3
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	3302      	adds	r3, #2
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	461a      	mov	r2, r3
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	3301      	adds	r3, #1
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	4619      	mov	r1, r3
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	9302      	str	r3, [sp, #8]
 800373a:	9101      	str	r1, [sp, #4]
 800373c:	9200      	str	r2, [sp, #0]
 800373e:	462b      	mov	r3, r5
 8003740:	4622      	mov	r2, r4
 8003742:	4601      	mov	r1, r0
 8003744:	487e      	ldr	r0, [pc, #504]	; (8003940 <Ble_Hci_Gap_Gatt_Init+0x294>)
 8003746:	f009 fb27 	bl	800cd98 <iprintf>
#endif

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800374a:	4a7e      	ldr	r2, [pc, #504]	; (8003944 <Ble_Hci_Gap_Gatt_Init+0x298>)
 800374c:	2110      	movs	r1, #16
 800374e:	2018      	movs	r0, #24
 8003750:	f007 f8ab 	bl	800a8aa <aci_hal_write_config_data>
 8003754:	4603      	mov	r3, r0
 8003756:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003758:	7dfb      	ldrb	r3, [r7, #23]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d005      	beq.n	800376a <Ble_Hci_Gap_Gatt_Init+0xbe>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800375e:	7dfb      	ldrb	r3, [r7, #23]
 8003760:	4619      	mov	r1, r3
 8003762:	4879      	ldr	r0, [pc, #484]	; (8003948 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8003764:	f009 fb18 	bl	800cd98 <iprintf>
 8003768:	e002      	b.n	8003770 <Ble_Hci_Gap_Gatt_Init+0xc4>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800376a:	4878      	ldr	r0, [pc, #480]	; (800394c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800376c:	f009 fb82 	bl	800ce74 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8003770:	4a77      	ldr	r2, [pc, #476]	; (8003950 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8003772:	2110      	movs	r1, #16
 8003774:	2008      	movs	r0, #8
 8003776:	f007 f898 	bl	800a8aa <aci_hal_write_config_data>
 800377a:	4603      	mov	r3, r0
 800377c:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800377e:	7dfb      	ldrb	r3, [r7, #23]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d005      	beq.n	8003790 <Ble_Hci_Gap_Gatt_Init+0xe4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 8003784:	7dfb      	ldrb	r3, [r7, #23]
 8003786:	4619      	mov	r1, r3
 8003788:	4872      	ldr	r0, [pc, #456]	; (8003954 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 800378a:	f009 fb05 	bl	800cd98 <iprintf>
 800378e:	e002      	b.n	8003796 <Ble_Hci_Gap_Gatt_Init+0xea>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 8003790:	4871      	ldr	r0, [pc, #452]	; (8003958 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 8003792:	f009 fb6f 	bl	800ce74 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8003796:	2118      	movs	r1, #24
 8003798:	2001      	movs	r0, #1
 800379a:	f007 f90b 	bl	800a9b4 <aci_hal_set_tx_power_level>
 800379e:	4603      	mov	r3, r0
 80037a0:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80037a2:	7dfb      	ldrb	r3, [r7, #23]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d005      	beq.n	80037b4 <Ble_Hci_Gap_Gatt_Init+0x108>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 80037a8:	7dfb      	ldrb	r3, [r7, #23]
 80037aa:	4619      	mov	r1, r3
 80037ac:	486b      	ldr	r0, [pc, #428]	; (800395c <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 80037ae:	f009 faf3 	bl	800cd98 <iprintf>
 80037b2:	e002      	b.n	80037ba <Ble_Hci_Gap_Gatt_Init+0x10e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 80037b4:	486a      	ldr	r0, [pc, #424]	; (8003960 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 80037b6:	f009 fb5d 	bl	800ce74 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 80037ba:	f006 fd13 	bl	800a1e4 <aci_gatt_init>
 80037be:	4603      	mov	r3, r0
 80037c0:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80037c2:	7dfb      	ldrb	r3, [r7, #23]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d005      	beq.n	80037d4 <Ble_Hci_Gap_Gatt_Init+0x128>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 80037c8:	7dfb      	ldrb	r3, [r7, #23]
 80037ca:	4619      	mov	r1, r3
 80037cc:	4865      	ldr	r0, [pc, #404]	; (8003964 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 80037ce:	f009 fae3 	bl	800cd98 <iprintf>
 80037d2:	e002      	b.n	80037da <Ble_Hci_Gap_Gatt_Init+0x12e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 80037d4:	4864      	ldr	r0, [pc, #400]	; (8003968 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 80037d6:	f009 fb4d 	bl	800ce74 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 80037da:	2300      	movs	r3, #0
 80037dc:	73fb      	strb	r3, [r7, #15]
#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
#endif /* BLE_CFG_PERIPHERAL == 1 */

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
 80037de:	7bfb      	ldrb	r3, [r7, #15]
 80037e0:	f043 0304 	orr.w	r3, r3, #4
 80037e4:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 80037e6:	7bfb      	ldrb	r3, [r7, #15]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d02b      	beq.n	8003844 <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    const char *name = "P2PCLI";
 80037ec:	4b5f      	ldr	r3, [pc, #380]	; (800396c <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 80037ee:	60bb      	str	r3, [r7, #8]

    ret = aci_gap_init(role,
 80037f0:	1dba      	adds	r2, r7, #6
 80037f2:	7bf8      	ldrb	r0, [r7, #15]
 80037f4:	1cbb      	adds	r3, r7, #2
 80037f6:	9301      	str	r3, [sp, #4]
 80037f8:	1d3b      	adds	r3, r7, #4
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	4613      	mov	r3, r2
 80037fe:	2207      	movs	r2, #7
 8003800:	2100      	movs	r1, #0
 8003802:	f006 fa5b 	bl	8009cbc <aci_gap_init>
 8003806:	4603      	mov	r3, r0
 8003808:	75fb      	strb	r3, [r7, #23]
                       APPBLE_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800380a:	7dfb      	ldrb	r3, [r7, #23]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d005      	beq.n	800381c <Ble_Hci_Gap_Gatt_Init+0x170>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 8003810:	7dfb      	ldrb	r3, [r7, #23]
 8003812:	4619      	mov	r1, r3
 8003814:	4856      	ldr	r0, [pc, #344]	; (8003970 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 8003816:	f009 fabf 	bl	800cd98 <iprintf>
 800381a:	e002      	b.n	8003822 <Ble_Hci_Gap_Gatt_Init+0x176>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800381c:	4855      	ldr	r0, [pc, #340]	; (8003974 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800381e:	f009 fb29 	bl	800ce74 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8003822:	88fc      	ldrh	r4, [r7, #6]
 8003824:	88bd      	ldrh	r5, [r7, #4]
 8003826:	68b8      	ldr	r0, [r7, #8]
 8003828:	f7fc fcb4 	bl	8000194 <strlen>
 800382c:	4603      	mov	r3, r0
 800382e:	b2da      	uxtb	r2, r3
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	4613      	mov	r3, r2
 8003836:	2200      	movs	r2, #0
 8003838:	4629      	mov	r1, r5
 800383a:	4620      	mov	r0, r4
 800383c:	f006 fcf7 	bl	800a22e <aci_gatt_update_char_value>
 8003840:	4603      	mov	r3, r0
 8003842:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8003844:	88f8      	ldrh	r0, [r7, #6]
 8003846:	8879      	ldrh	r1, [r7, #2]
 8003848:	463b      	mov	r3, r7
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	2302      	movs	r3, #2
 800384e:	2200      	movs	r2, #0
 8003850:	f006 fced 	bl	800a22e <aci_gatt_update_char_value>
 8003854:	4603      	mov	r3, r0
 8003856:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8003858:	4b47      	ldr	r3, [pc, #284]	; (8003978 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800385a:	2201      	movs	r2, #1
 800385c:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800385e:	4b46      	ldr	r3, [pc, #280]	; (8003978 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	4618      	mov	r0, r3
 8003864:	f006 f912 	bl	8009a8c <aci_gap_set_io_capability>
 8003868:	4603      	mov	r3, r0
 800386a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800386c:	7dfb      	ldrb	r3, [r7, #23]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d005      	beq.n	800387e <Ble_Hci_Gap_Gatt_Init+0x1d2>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 8003872:	7dfb      	ldrb	r3, [r7, #23]
 8003874:	4619      	mov	r1, r3
 8003876:	4841      	ldr	r0, [pc, #260]	; (800397c <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 8003878:	f009 fa8e 	bl	800cd98 <iprintf>
 800387c:	e002      	b.n	8003884 <Ble_Hci_Gap_Gatt_Init+0x1d8>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800387e:	4840      	ldr	r0, [pc, #256]	; (8003980 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 8003880:	f009 faf8 	bl	800ce74 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8003884:	4b3c      	ldr	r3, [pc, #240]	; (8003978 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 8003886:	2201      	movs	r2, #1
 8003888:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800388a:	4b3b      	ldr	r3, [pc, #236]	; (8003978 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800388c:	2208      	movs	r2, #8
 800388e:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8003890:	4b39      	ldr	r3, [pc, #228]	; (8003978 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 8003892:	2210      	movs	r2, #16
 8003894:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8003896:	4b38      	ldr	r3, [pc, #224]	; (8003978 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 8003898:	2201      	movs	r2, #1
 800389a:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800389c:	4b36      	ldr	r3, [pc, #216]	; (8003978 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800389e:	4a39      	ldr	r2, [pc, #228]	; (8003984 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 80038a0:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 80038a2:	4b35      	ldr	r3, [pc, #212]	; (8003978 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 80038a4:	2201      	movs	r2, #1
 80038a6:	709a      	strb	r2, [r3, #2]

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 80038a8:	4b33      	ldr	r3, [pc, #204]	; (8003978 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 80038aa:	789c      	ldrb	r4, [r3, #2]
 80038ac:	4b32      	ldr	r3, [pc, #200]	; (8003978 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 80038ae:	785d      	ldrb	r5, [r3, #1]
 80038b0:	4b31      	ldr	r3, [pc, #196]	; (8003978 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 80038b2:	791b      	ldrb	r3, [r3, #4]
 80038b4:	4a30      	ldr	r2, [pc, #192]	; (8003978 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 80038b6:	7952      	ldrb	r2, [r2, #5]
 80038b8:	492f      	ldr	r1, [pc, #188]	; (8003978 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 80038ba:	78c9      	ldrb	r1, [r1, #3]
 80038bc:	482e      	ldr	r0, [pc, #184]	; (8003978 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 80038be:	6880      	ldr	r0, [r0, #8]
 80038c0:	2600      	movs	r6, #0
 80038c2:	9604      	str	r6, [sp, #16]
 80038c4:	9003      	str	r0, [sp, #12]
 80038c6:	9102      	str	r1, [sp, #8]
 80038c8:	9201      	str	r2, [sp, #4]
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	2300      	movs	r3, #0
 80038ce:	2201      	movs	r2, #1
 80038d0:	4629      	mov	r1, r5
 80038d2:	4620      	mov	r0, r4
 80038d4:	f006 f92e 	bl	8009b34 <aci_gap_set_authentication_requirement>
 80038d8:	4603      	mov	r3, r0
 80038da:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 80038dc:	7dfb      	ldrb	r3, [r7, #23]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d005      	beq.n	80038ee <Ble_Hci_Gap_Gatt_Init+0x242>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 80038e2:	7dfb      	ldrb	r3, [r7, #23]
 80038e4:	4619      	mov	r1, r3
 80038e6:	4828      	ldr	r0, [pc, #160]	; (8003988 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 80038e8:	f009 fa56 	bl	800cd98 <iprintf>
 80038ec:	e002      	b.n	80038f4 <Ble_Hci_Gap_Gatt_Init+0x248>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 80038ee:	4827      	ldr	r0, [pc, #156]	; (800398c <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 80038f0:	f009 fac0 	bl	800ce74 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 80038f4:	4b20      	ldr	r3, [pc, #128]	; (8003978 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 80038f6:	789b      	ldrb	r3, [r3, #2]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00f      	beq.n	800391c <Ble_Hci_Gap_Gatt_Init+0x270>
  {
    ret = aci_gap_configure_whitelist();
 80038fc:	f006 fa8b 	bl	8009e16 <aci_gap_configure_filter_accept_list>
 8003900:	4603      	mov	r3, r0
 8003902:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 8003904:	7dfb      	ldrb	r3, [r7, #23]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d005      	beq.n	8003916 <Ble_Hci_Gap_Gatt_Init+0x26a>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800390a:	7dfb      	ldrb	r3, [r7, #23]
 800390c:	4619      	mov	r1, r3
 800390e:	4820      	ldr	r0, [pc, #128]	; (8003990 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 8003910:	f009 fa42 	bl	800cd98 <iprintf>
 8003914:	e002      	b.n	800391c <Ble_Hci_Gap_Gatt_Init+0x270>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 8003916:	481f      	ldr	r0, [pc, #124]	; (8003994 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 8003918:	f009 faac 	bl	800ce74 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800391c:	481e      	ldr	r0, [pc, #120]	; (8003998 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800391e:	f009 fa3b 	bl	800cd98 <iprintf>
}
 8003922:	bf00      	nop
 8003924:	371c      	adds	r7, #28
 8003926:	46bd      	mov	sp, r7
 8003928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800392a:	bf00      	nop
 800392c:	0800e8b4 	.word	0x0800e8b4
 8003930:	0800e8e0 	.word	0x0800e8e0
 8003934:	0800e910 	.word	0x0800e910
 8003938:	0800e930 	.word	0x0800e930
 800393c:	0800e98c 	.word	0x0800e98c
 8003940:	0800e9d8 	.word	0x0800e9d8
 8003944:	0800f3c4 	.word	0x0800f3c4
 8003948:	0800ea14 	.word	0x0800ea14
 800394c:	0800ea6c 	.word	0x0800ea6c
 8003950:	0800f3d4 	.word	0x0800f3d4
 8003954:	0800eab4 	.word	0x0800eab4
 8003958:	0800eb0c 	.word	0x0800eb0c
 800395c:	0800eb54 	.word	0x0800eb54
 8003960:	0800eb94 	.word	0x0800eb94
 8003964:	0800ebc4 	.word	0x0800ebc4
 8003968:	0800ebf8 	.word	0x0800ebf8
 800396c:	0800ec1c 	.word	0x0800ec1c
 8003970:	0800ec24 	.word	0x0800ec24
 8003974:	0800ec54 	.word	0x0800ec54
 8003978:	20000440 	.word	0x20000440
 800397c:	0800ec74 	.word	0x0800ec74
 8003980:	0800ecb4 	.word	0x0800ecb4
 8003984:	0001b207 	.word	0x0001b207
 8003988:	0800ece4 	.word	0x0800ece4
 800398c:	0800ed30 	.word	0x0800ed30
 8003990:	0800ed6c 	.word	0x0800ed6c
 8003994:	0800edac 	.word	0x0800edac
 8003998:	0800eddc 	.word	0x0800eddc

0800399c <Scan_Request>:

static void Scan_Request(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Scan_Request_1 */

  /* USER CODE END Scan_Request_1 */
  tBleStatus result;
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 80039a2:	4b15      	ldr	r3, [pc, #84]	; (80039f8 <Scan_Request+0x5c>)
 80039a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80039a8:	2b06      	cmp	r3, #6
 80039aa:	d020      	beq.n	80039ee <Scan_Request+0x52>
  {
    /* USER CODE BEGIN APP_BLE_CONNECTED_CLIENT */
    BSP_LED_On(LED_BLUE);
 80039ac:	2000      	movs	r0, #0
 80039ae:	f001 f8d7 	bl	8004b60 <BSP_LED_On>
    APP_DBG_MSG("LED BLUE ON\n");
 80039b2:	4812      	ldr	r0, [pc, #72]	; (80039fc <Scan_Request+0x60>)
 80039b4:	f009 fa5e 	bl	800ce74 <puts>
    APP_DBG_MSG("    BD address    |   Type   |rssi |Conn  | Scan    |data|SID | info\n");
 80039b8:	4811      	ldr	r0, [pc, #68]	; (8003a00 <Scan_Request+0x64>)
 80039ba:	f009 fa5b 	bl	800ce74 <puts>
    /* USER CODE END APP_BLE_CONNECTED_CLIENT */
    result = aci_gap_start_general_discovery_proc(SCAN_P, SCAN_L, CFG_BLE_ADDRESS_TYPE, 1);
 80039be:	2301      	movs	r3, #1
 80039c0:	2200      	movs	r2, #0
 80039c2:	f44f 7148 	mov.w	r1, #800	; 0x320
 80039c6:	f44f 7048 	mov.w	r0, #800	; 0x320
 80039ca:	f006 fa48 	bl	8009e5e <aci_gap_start_general_discovery_proc>
 80039ce:	4603      	mov	r3, r0
 80039d0:	71fb      	strb	r3, [r7, #7]
    if (result == BLE_STATUS_SUCCESS)
 80039d2:	79fb      	ldrb	r3, [r7, #7]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d103      	bne.n	80039e0 <Scan_Request+0x44>
    {
    /* USER CODE BEGIN BLE_SCAN_SUCCESS */

    /* USER CODE END BLE_SCAN_SUCCESS */
      APP_DBG_MSG(" \r\n\r** START GENERAL DISCOVERY (SCAN) **  \r\n\r");
 80039d8:	480a      	ldr	r0, [pc, #40]	; (8003a04 <Scan_Request+0x68>)
 80039da:	f009 f9dd 	bl	800cd98 <iprintf>
    }
  }
  /* USER CODE BEGIN Scan_Request_2 */

  /* USER CODE END Scan_Request_2 */
  return;
 80039de:	e006      	b.n	80039ee <Scan_Request+0x52>
      BSP_LED_On(LED_RED);
 80039e0:	2002      	movs	r0, #2
 80039e2:	f001 f8bd 	bl	8004b60 <BSP_LED_On>
      APP_DBG_MSG("-- BLE_App_Start_Limited_Disc_Req, Failed \r\n\r");
 80039e6:	4808      	ldr	r0, [pc, #32]	; (8003a08 <Scan_Request+0x6c>)
 80039e8:	f009 f9d6 	bl	800cd98 <iprintf>
  return;
 80039ec:	bf00      	nop
 80039ee:	bf00      	nop
}
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	20000440 	.word	0x20000440
 80039fc:	0800ee08 	.word	0x0800ee08
 8003a00:	0800ee14 	.word	0x0800ee14
 8003a04:	0800ee5c 	.word	0x0800ee5c
 8003a08:	0800ee8c 	.word	0x0800ee8c

08003a0c <Scan_Terminate>:

static void Scan_Terminate( void )
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
  tBleStatus result;  
  
  result = aci_gap_terminate_gap_proc(GAP_GENERAL_DISCOVERY_PROC);
 8003a12:	2002      	movs	r0, #2
 8003a14:	f006 fb92 	bl	800a13c <aci_gap_terminate_gap_proc>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	71fb      	strb	r3, [r7, #7]
  if (result == BLE_STATUS_SUCCESS)
 8003a1c:	79fb      	ldrb	r3, [r7, #7]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d103      	bne.n	8003a2a <Scan_Terminate+0x1e>
  {
    APP_DBG_MSG("-- BLE_App_Terminate_Disc_Req, Success\r\n");
 8003a22:	4807      	ldr	r0, [pc, #28]	; (8003a40 <Scan_Terminate+0x34>)
 8003a24:	f009 fa26 	bl	800ce74 <puts>
  else
  {
    BSP_LED_On(LED_RED);
    APP_DBG_MSG("-- BLE_App_Terminate_Disc_Req, Failed\r\n");
  }
  return;
 8003a28:	e006      	b.n	8003a38 <Scan_Terminate+0x2c>
    BSP_LED_On(LED_RED);
 8003a2a:	2002      	movs	r0, #2
 8003a2c:	f001 f898 	bl	8004b60 <BSP_LED_On>
    APP_DBG_MSG("-- BLE_App_Terminate_Disc_Req, Failed\r\n");
 8003a30:	4804      	ldr	r0, [pc, #16]	; (8003a44 <Scan_Terminate+0x38>)
 8003a32:	f009 fa1f 	bl	800ce74 <puts>
  return;
 8003a36:	bf00      	nop
}
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	0800eebc 	.word	0x0800eebc
 8003a44:	0800eee4 	.word	0x0800eee4

08003a48 <Connect_Request>:

static void Connect_Request(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b08a      	sub	sp, #40	; 0x28
 8003a4c:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN Connect_Request_1 */

  /* USER CODE END Connect_Request_1 */
  tBleStatus result;

  APP_DBG_MSG("\r\n\r** CREATE CONNECTION TO SERVER **  \r\n\r");
 8003a4e:	481f      	ldr	r0, [pc, #124]	; (8003acc <Connect_Request+0x84>)
 8003a50:	f009 f9a2 	bl	800cd98 <iprintf>
  
  if (BleApplicationContext.DeviceServerFound == 0)
 8003a54:	4b1e      	ldr	r3, [pc, #120]	; (8003ad0 <Connect_Request+0x88>)
 8003a56:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d103      	bne.n	8003a66 <Connect_Request+0x1e>
  {
    APP_DBG_MSG("No server available\r\n");
 8003a5e:	481d      	ldr	r0, [pc, #116]	; (8003ad4 <Connect_Request+0x8c>)
 8003a60:	f009 fa08 	bl	800ce74 <puts>
    }
  }
  /* USER CODE BEGIN Connect_Request_2 */

  /* USER CODE END Connect_Request_2 */
  return;
 8003a64:	e02e      	b.n	8003ac4 <Connect_Request+0x7c>
    if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 8003a66:	4b1a      	ldr	r3, [pc, #104]	; (8003ad0 <Connect_Request+0x88>)
 8003a68:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003a6c:	2b06      	cmp	r3, #6
 8003a6e:	d029      	beq.n	8003ac4 <Connect_Request+0x7c>
      result = aci_gap_create_connection(SCAN_P,
 8003a70:	4b19      	ldr	r3, [pc, #100]	; (8003ad8 <Connect_Request+0x90>)
 8003a72:	781a      	ldrb	r2, [r3, #0]
 8003a74:	2310      	movs	r3, #16
 8003a76:	9306      	str	r3, [sp, #24]
 8003a78:	2310      	movs	r3, #16
 8003a7a:	9305      	str	r3, [sp, #20]
 8003a7c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003a80:	9304      	str	r3, [sp, #16]
 8003a82:	2300      	movs	r3, #0
 8003a84:	9303      	str	r3, [sp, #12]
 8003a86:	2350      	movs	r3, #80	; 0x50
 8003a88:	9302      	str	r3, [sp, #8]
 8003a8a:	2328      	movs	r3, #40	; 0x28
 8003a8c:	9301      	str	r3, [sp, #4]
 8003a8e:	2300      	movs	r3, #0
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	4b12      	ldr	r3, [pc, #72]	; (8003adc <Connect_Request+0x94>)
 8003a94:	f44f 7148 	mov.w	r1, #800	; 0x320
 8003a98:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003a9c:	f006 fa73 	bl	8009f86 <aci_gap_create_connection>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	71fb      	strb	r3, [r7, #7]
      if (result == BLE_STATUS_SUCCESS)
 8003aa4:	79fb      	ldrb	r3, [r7, #7]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d104      	bne.n	8003ab4 <Connect_Request+0x6c>
        BleApplicationContext.Device_Connection_Status = APP_BLE_LP_CONNECTING;
 8003aaa:	4b09      	ldr	r3, [pc, #36]	; (8003ad0 <Connect_Request+0x88>)
 8003aac:	2204      	movs	r2, #4
 8003aae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return;
 8003ab2:	e007      	b.n	8003ac4 <Connect_Request+0x7c>
        BSP_LED_On(LED_RED);
 8003ab4:	2002      	movs	r0, #2
 8003ab6:	f001 f853 	bl	8004b60 <BSP_LED_On>
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8003aba:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <Connect_Request+0x88>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return;
 8003ac2:	bf00      	nop
 8003ac4:	bf00      	nop
}
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	0800ef0c 	.word	0x0800ef0c
 8003ad0:	20000440 	.word	0x20000440
 8003ad4:	0800ef38 	.word	0x0800ef38
 8003ad8:	2000043a 	.word	0x2000043a
 8003adc:	20000434 	.word	0x20000434

08003ae0 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO()
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Switch_OFF_GPIO */
  BSP_LED_Off(LED_GREEN);
 8003ae4:	2001      	movs	r0, #1
 8003ae6:	f001 f855 	bl	8004b94 <BSP_LED_Off>
  /* USER CODE END Switch_OFF_GPIO */
}
 8003aea:	bf00      	nop
 8003aec:	bd80      	pop	{r7, pc}
	...

08003af0 <BleGetBdAddress>:

#if (CFG_BLE_ADDRESS_TYPE == GAP_PUBLIC_ADDR) 
const uint8_t* BleGetBdAddress(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8003af6:	f7fe ffe9 	bl	8002acc <LL_FLASH_GetUDN>
 8003afa:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b02:	d023      	beq.n	8003b4c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8003b04:	f7fe fffa 	bl	8002afc <LL_FLASH_GetSTCompanyID>
 8003b08:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8003b0a:	f7fe ffeb 	bl	8002ae4 <LL_FLASH_GetDeviceID>
 8003b0e:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	b2da      	uxtb	r2, r3
 8003b14:	4b16      	ldr	r3, [pc, #88]	; (8003b70 <BleGetBdAddress+0x80>)
 8003b16:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	0a1b      	lsrs	r3, r3, #8
 8003b1c:	b2da      	uxtb	r2, r3
 8003b1e:	4b14      	ldr	r3, [pc, #80]	; (8003b70 <BleGetBdAddress+0x80>)
 8003b20:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	b2da      	uxtb	r2, r3
 8003b26:	4b12      	ldr	r3, [pc, #72]	; (8003b70 <BleGetBdAddress+0x80>)
 8003b28:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	b2da      	uxtb	r2, r3
 8003b2e:	4b10      	ldr	r3, [pc, #64]	; (8003b70 <BleGetBdAddress+0x80>)
 8003b30:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	0a1b      	lsrs	r3, r3, #8
 8003b36:	b2da      	uxtb	r2, r3
 8003b38:	4b0d      	ldr	r3, [pc, #52]	; (8003b70 <BleGetBdAddress+0x80>)
 8003b3a:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	0c1b      	lsrs	r3, r3, #16
 8003b40:	b2da      	uxtb	r2, r3
 8003b42:	4b0b      	ldr	r3, [pc, #44]	; (8003b70 <BleGetBdAddress+0x80>)
 8003b44:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8003b46:	4b0a      	ldr	r3, [pc, #40]	; (8003b70 <BleGetBdAddress+0x80>)
 8003b48:	617b      	str	r3, [r7, #20]
 8003b4a:	e00b      	b.n	8003b64 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8003b4c:	2000      	movs	r0, #0
 8003b4e:	f007 fb47 	bl	800b1e0 <OTP_Read>
 8003b52:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d002      	beq.n	8003b60 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	617b      	str	r3, [r7, #20]
 8003b5e:	e001      	b.n	8003b64 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8003b60:	4b04      	ldr	r3, [pc, #16]	; (8003b74 <BleGetBdAddress+0x84>)
 8003b62:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8003b64:	697b      	ldr	r3, [r7, #20]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3718      	adds	r7, #24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	2000042c 	.word	0x2000042c
 8003b74:	0800f3bc 	.word	0x0800f3bc

08003b78 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8003b80:	2100      	movs	r1, #0
 8003b82:	2010      	movs	r0, #16
 8003b84:	f008 ff26 	bl	800c9d4 <UTIL_SEQ_SetTask>
  return;
 8003b88:	bf00      	nop
}
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8003b98:	2001      	movs	r0, #1
 8003b9a:	f008 ff87 	bl	800caac <UTIL_SEQ_SetEvt>
  return;
 8003b9e:	bf00      	nop
}
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b082      	sub	sp, #8
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8003bae:	2001      	movs	r0, #1
 8003bb0:	f008 ff9c 	bl	800caec <UTIL_SEQ_WaitEvt>
  return;
 8003bb4:	bf00      	nop
}
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void * pPayload)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	3308      	adds	r3, #8
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f008 fae8 	bl	800c1a4 <SVCCTL_UserEvtRx>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8003bd8:	7afb      	ldrb	r3, [r7, #11]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2201      	movs	r2, #1
 8003be2:	701a      	strb	r2, [r3, #0]
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8003be4:	e003      	b.n	8003bee <BLE_UserEvtRx+0x32>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	701a      	strb	r2, [r3, #0]
  return;
 8003bec:	bf00      	nop
}
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t status)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 8003bfe:	79fb      	ldrb	r3, [r7, #7]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d002      	beq.n	8003c0a <BLE_StatusNot+0x16>
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d007      	beq.n	8003c18 <BLE_StatusNot+0x24>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
      UTIL_SEQ_ResumeTask(task_id_list);
      break;

    default:
      break;
 8003c08:	e00d      	b.n	8003c26 <BLE_StatusNot+0x32>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8003c0a:	f240 13ff 	movw	r3, #511	; 0x1ff
 8003c0e:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f008 ff0b 	bl	800ca2c <UTIL_SEQ_PauseTask>
      break;
 8003c16:	e006      	b.n	8003c26 <BLE_StatusNot+0x32>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8003c18:	f240 13ff 	movw	r3, #511	; 0x1ff
 8003c1c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f008 ff24 	bl	800ca6c <UTIL_SEQ_ResumeTask>
      break;
 8003c24:	bf00      	nop
  }
  return;
 8003c26:	bf00      	nop
}
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
	...

08003c30 <P2PC_APP_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PC_APP_Init(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
  uint8_t index =0;
 8003c36:	2300      	movs	r3, #0
 8003c38:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN P2PC_APP_Init_1 */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SEARCH_SERVICE_ID, UTIL_SEQ_RFU, Update_Service );
 8003c3a:	4a1a      	ldr	r2, [pc, #104]	; (8003ca4 <P2PC_APP_Init+0x74>)
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	2004      	movs	r0, #4
 8003c40:	f008 fea6 	bl	800c990 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, Button_Trigger_Received );
 8003c44:	4a18      	ldr	r2, [pc, #96]	; (8003ca8 <P2PC_APP_Init+0x78>)
 8003c46:	2100      	movs	r1, #0
 8003c48:	2020      	movs	r0, #32
 8003c4a:	f008 fea1 	bl	800c990 <UTIL_SEQ_RegTask>

  /**
   * Initialize LedButton Service
   */
  P2P_Client_App_Context.Notification_Status=0;
 8003c4e:	4b17      	ldr	r3, [pc, #92]	; (8003cac <P2PC_APP_Init+0x7c>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	701a      	strb	r2, [r3, #0]
  P2P_Client_App_Context.ConnectionHandle =  0x00;
 8003c54:	4b15      	ldr	r3, [pc, #84]	; (8003cac <P2PC_APP_Init+0x7c>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	80da      	strh	r2, [r3, #6]

  P2P_Client_App_Context.LedControl.Device_Led_Selection=0x00;/* device Led */
 8003c5a:	4b14      	ldr	r3, [pc, #80]	; (8003cac <P2PC_APP_Init+0x7c>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	705a      	strb	r2, [r3, #1]
  P2P_Client_App_Context.LedControl.Led1=0x00; /* led OFF */
 8003c60:	4b12      	ldr	r3, [pc, #72]	; (8003cac <P2PC_APP_Init+0x7c>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	709a      	strb	r2, [r3, #2]
  P2P_Client_App_Context.ButtonStatus.Device_Button_Selection=0x01;/* Device1 */
 8003c66:	4b11      	ldr	r3, [pc, #68]	; (8003cac <P2PC_APP_Init+0x7c>)
 8003c68:	2201      	movs	r2, #1
 8003c6a:	70da      	strb	r2, [r3, #3]
  P2P_Client_App_Context.ButtonStatus.Button1=0x00;
 8003c6c:	4b0f      	ldr	r3, [pc, #60]	; (8003cac <P2PC_APP_Init+0x7c>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	711a      	strb	r2, [r3, #4]
/* USER CODE END P2PC_APP_Init_1 */
  for(index = 0; index < BLE_CFG_CLT_MAX_NBR_CB; index++)
 8003c72:	2300      	movs	r3, #0
 8003c74:	71fb      	strb	r3, [r7, #7]
 8003c76:	e008      	b.n	8003c8a <P2PC_APP_Init+0x5a>
  {
    aP2PClientContext[index].state= APP_BLE_IDLE;
 8003c78:	79fb      	ldrb	r3, [r7, #7]
 8003c7a:	4a0d      	ldr	r2, [pc, #52]	; (8003cb0 <P2PC_APP_Init+0x80>)
 8003c7c:	011b      	lsls	r3, r3, #4
 8003c7e:	4413      	add	r3, r2
 8003c80:	2200      	movs	r2, #0
 8003c82:	701a      	strb	r2, [r3, #0]
  for(index = 0; index < BLE_CFG_CLT_MAX_NBR_CB; index++)
 8003c84:	79fb      	ldrb	r3, [r7, #7]
 8003c86:	3301      	adds	r3, #1
 8003c88:	71fb      	strb	r3, [r7, #7]
 8003c8a:	79fb      	ldrb	r3, [r7, #7]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d0f3      	beq.n	8003c78 <P2PC_APP_Init+0x48>
  }

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterCltHandler(Event_Handler);
 8003c90:	4808      	ldr	r0, [pc, #32]	; (8003cb4 <P2PC_APP_Init+0x84>)
 8003c92:	f008 fa6d 	bl	800c170 <SVCCTL_RegisterCltHandler>

#if(CFG_DEBUG_APP_TRACE != 0)
  APP_DBG_MSG("-- P2P CLIENT INITIALIZED \n");
 8003c96:	4808      	ldr	r0, [pc, #32]	; (8003cb8 <P2PC_APP_Init+0x88>)
 8003c98:	f009 f8ec 	bl	800ce74 <puts>
#endif

/* USER CODE BEGIN P2PC_APP_Init_2 */

/* USER CODE END P2PC_APP_Init_2 */
  return;
 8003c9c:	bf00      	nop
}
 8003c9e:	3708      	adds	r7, #8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	08004421 	.word	0x08004421
 8003ca8:	080043d9 	.word	0x080043d9
 8003cac:	200005e4 	.word	0x200005e4
 8003cb0:	200005d4 	.word	0x200005d4
 8003cb4:	08003d31 	.word	0x08003d31
 8003cb8:	0800ef50 	.word	0x0800ef50

08003cbc <P2PC_APP_Notification>:

void P2PC_APP_Notification(P2PC_APP_ConnHandle_Not_evt_t *pNotification)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PC_APP_Notification_1 */

/* USER CODE END P2PC_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d002      	beq.n	8003cd2 <P2PC_APP_Notification+0x16>
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d005      	beq.n	8003cdc <P2PC_APP_Notification+0x20>

    default:
/* USER CODE BEGIN P2P_Evt_Opcode_Default */

/* USER CODE END P2P_Evt_Opcode_Default */
      break;
 8003cd0:	e01e      	b.n	8003d10 <P2PC_APP_Notification+0x54>
    P2P_Client_App_Context.ConnectionHandle = pNotification->ConnectionHandle;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	885a      	ldrh	r2, [r3, #2]
 8003cd6:	4b10      	ldr	r3, [pc, #64]	; (8003d18 <P2PC_APP_Notification+0x5c>)
 8003cd8:	80da      	strh	r2, [r3, #6]
      break;
 8003cda:	e019      	b.n	8003d10 <P2PC_APP_Notification+0x54>
      uint8_t index = 0;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	73fb      	strb	r3, [r7, #15]
      P2P_Client_App_Context.ConnectionHandle =  0x00;
 8003ce0:	4b0d      	ldr	r3, [pc, #52]	; (8003d18 <P2PC_APP_Notification+0x5c>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	80da      	strh	r2, [r3, #6]
      while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003ce6:	e005      	b.n	8003cf4 <P2PC_APP_Notification+0x38>
        aP2PClientContext[index].state = APP_BLE_IDLE;
 8003ce8:	7bfb      	ldrb	r3, [r7, #15]
 8003cea:	4a0c      	ldr	r2, [pc, #48]	; (8003d1c <P2PC_APP_Notification+0x60>)
 8003cec:	011b      	lsls	r3, r3, #4
 8003cee:	4413      	add	r3, r2
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	701a      	strb	r2, [r3, #0]
      while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003cf4:	7bfb      	ldrb	r3, [r7, #15]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d106      	bne.n	8003d08 <P2PC_APP_Notification+0x4c>
                  (aP2PClientContext[index].state != APP_BLE_IDLE))
 8003cfa:	7bfb      	ldrb	r3, [r7, #15]
 8003cfc:	4a07      	ldr	r2, [pc, #28]	; (8003d1c <P2PC_APP_Notification+0x60>)
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	4413      	add	r3, r2
 8003d02:	781b      	ldrb	r3, [r3, #0]
      while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1ef      	bne.n	8003ce8 <P2PC_APP_Notification+0x2c>
      BSP_LED_Off(LED_BLUE); 
 8003d08:	2000      	movs	r0, #0
 8003d0a:	f000 ff43 	bl	8004b94 <BSP_LED_Off>
      break;
 8003d0e:	bf00      	nop
  }
/* USER CODE BEGIN P2PC_APP_Notification_2 */

/* USER CODE END P2PC_APP_Notification_2 */
  return;
 8003d10:	bf00      	nop
}
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	200005e4 	.word	0x200005e4
 8003d1c:	200005d4 	.word	0x200005d4

08003d20 <P2PC_APP_SW1_Button_Action>:
/* USER CODE BEGIN FD */
void P2PC_APP_SW1_Button_Action(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0

  UTIL_SEQ_SetTask(1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 8003d24:	2100      	movs	r1, #0
 8003d26:	2020      	movs	r0, #32
 8003d28:	f008 fe54 	bl	800c9d4 <UTIL_SEQ_SetTask>

}
 8003d2c:	bf00      	nop
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Event_Handler(void *Event)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b094      	sub	sp, #80	; 0x50
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;

  P2P_Client_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	3301      	adds	r3, #1
 8003d42:	643b      	str	r3, [r7, #64]	; 0x40

  switch(event_pckt->evt)
 8003d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	2bff      	cmp	r3, #255	; 0xff
 8003d4a:	f040 82b4 	bne.w	80042b6 <Event_Handler+0x586>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8003d4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d50:	3302      	adds	r3, #2
 8003d52:	63fb      	str	r3, [r7, #60]	; 0x3c
      switch(blecore_evt->ecode)
 8003d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d56:	881b      	ldrh	r3, [r3, #0]
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	f6a3 4304 	subw	r3, r3, #3076	; 0xc04
 8003d5e:	2b0c      	cmp	r3, #12
 8003d60:	f200 829d 	bhi.w	800429e <Event_Handler+0x56e>
 8003d64:	a201      	add	r2, pc, #4	; (adr r2, 8003d6c <Event_Handler+0x3c>)
 8003d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6a:	bf00      	nop
 8003d6c:	080040b1 	.word	0x080040b1
 8003d70:	0800429f 	.word	0x0800429f
 8003d74:	08003f57 	.word	0x08003f57
 8003d78:	0800429f 	.word	0x0800429f
 8003d7c:	0800429f 	.word	0x0800429f
 8003d80:	0800429f 	.word	0x0800429f
 8003d84:	08003da1 	.word	0x08003da1
 8003d88:	0800429f 	.word	0x0800429f
 8003d8c:	0800429f 	.word	0x0800429f
 8003d90:	0800429f 	.word	0x0800429f
 8003d94:	0800429f 	.word	0x0800429f
 8003d98:	080041cd 	.word	0x080041cd
 8003d9c:	08004249 	.word	0x08004249
      {

        case ACI_ATT_READ_BY_GROUP_TYPE_RESP_VSEVT_CODE:
        {
          aci_att_read_by_group_type_resp_event_rp0 *pr = (void*)blecore_evt->data;
 8003da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003da2:	3302      	adds	r3, #2
 8003da4:	633b      	str	r3, [r7, #48]	; 0x30
          uint8_t numServ, i, idx;
          uint16_t uuid, handle;

          uint8_t index;
          handle = pr->Connection_Handle;
 8003da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da8:	781a      	ldrb	r2, [r3, #0]
 8003daa:	785b      	ldrb	r3, [r3, #1]
 8003dac:	021b      	lsls	r3, r3, #8
 8003dae:	4313      	orrs	r3, r2
 8003db0:	85fb      	strh	r3, [r7, #46]	; 0x2e
          index = 0;
 8003db2:	2300      	movs	r3, #0
 8003db4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003db8:	e02e      	b.n	8003e18 <Event_Handler+0xe8>
                  (aP2PClientContext[index].state != APP_BLE_IDLE))
          {
            APP_BLE_ConnStatus_t status;

            status = APP_BLE_Get_Client_Connection_Status(aP2PClientContext[index].connHandle);
 8003dba:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003dbe:	4ab8      	ldr	r2, [pc, #736]	; (80040a0 <Event_Handler+0x370>)
 8003dc0:	011b      	lsls	r3, r3, #4
 8003dc2:	4413      	add	r3, r2
 8003dc4:	3302      	adds	r3, #2
 8003dc6:	881b      	ldrh	r3, [r3, #0]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7ff fbf1 	bl	80035b0 <APP_BLE_Get_Client_Connection_Status>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

            if((aP2PClientContext[index].state == APP_BLE_CONNECTED_CLIENT)&&
 8003dd4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003dd8:	4ab1      	ldr	r2, [pc, #708]	; (80040a0 <Event_Handler+0x370>)
 8003dda:	011b      	lsls	r3, r3, #4
 8003ddc:	4413      	add	r3, r2
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	2b06      	cmp	r3, #6
 8003de2:	d114      	bne.n	8003e0e <Event_Handler+0xde>
 8003de4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d110      	bne.n	8003e0e <Event_Handler+0xde>
                    (status == APP_BLE_IDLE))
            {
              /* Handle deconnected */

              aP2PClientContext[index].state = APP_BLE_IDLE;
 8003dec:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003df0:	4aab      	ldr	r2, [pc, #684]	; (80040a0 <Event_Handler+0x370>)
 8003df2:	011b      	lsls	r3, r3, #4
 8003df4:	4413      	add	r3, r2
 8003df6:	2200      	movs	r2, #0
 8003df8:	701a      	strb	r2, [r3, #0]
              aP2PClientContext[index].connHandle = 0xFFFF;
 8003dfa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003dfe:	4aa8      	ldr	r2, [pc, #672]	; (80040a0 <Event_Handler+0x370>)
 8003e00:	011b      	lsls	r3, r3, #4
 8003e02:	4413      	add	r3, r2
 8003e04:	3302      	adds	r3, #2
 8003e06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e0a:	801a      	strh	r2, [r3, #0]
              break;
 8003e0c:	e010      	b.n	8003e30 <Event_Handler+0x100>
            }
            index++;
 8003e0e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003e12:	3301      	adds	r3, #1
 8003e14:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003e18:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d107      	bne.n	8003e30 <Event_Handler+0x100>
                  (aP2PClientContext[index].state != APP_BLE_IDLE))
 8003e20:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003e24:	4a9e      	ldr	r2, [pc, #632]	; (80040a0 <Event_Handler+0x370>)
 8003e26:	011b      	lsls	r3, r3, #4
 8003e28:	4413      	add	r3, r2
 8003e2a:	781b      	ldrb	r3, [r3, #0]
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1c4      	bne.n	8003dba <Event_Handler+0x8a>
          }

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 8003e30:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f040 8234 	bne.w	80042a2 <Event_Handler+0x572>
          {
            aP2PClientContext[index].connHandle= handle;
 8003e3a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003e3e:	4a98      	ldr	r2, [pc, #608]	; (80040a0 <Event_Handler+0x370>)
 8003e40:	011b      	lsls	r3, r3, #4
 8003e42:	4413      	add	r3, r2
 8003e44:	3302      	adds	r3, #2
 8003e46:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003e48:	801a      	strh	r2, [r3, #0]

            numServ = (pr->Data_Length) / pr->Attribute_Data_Length;
 8003e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4c:	78da      	ldrb	r2, [r3, #3]
 8003e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e50:	789b      	ldrb	r3, [r3, #2]
 8003e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e56:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
             * 2 or 16 bytes data
             * we are interested only if the UUID is 16 bit.
             * So check if the data length is 6
             */
#if (UUID_128BIT_FORMAT==1)
          if (pr->Attribute_Data_Length == 20)
 8003e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5c:	789b      	ldrb	r3, [r3, #2]
 8003e5e:	2b14      	cmp	r3, #20
 8003e60:	f040 821f 	bne.w	80042a2 <Event_Handler+0x572>
          {
            idx = 16;
 8003e64:	2310      	movs	r3, #16
 8003e66:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
#else
          if (pr->Attribute_Data_Length == 6)
          {
            idx = 4;
#endif
              for (i=0; i<numServ; i++)
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8003e70:	e06a      	b.n	8003f48 <Event_Handler+0x218>
              {
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx]);
 8003e72:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003e76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e78:	4413      	add	r3, r2
 8003e7a:	791b      	ldrb	r3, [r3, #4]
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003e82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e84:	440b      	add	r3, r1
 8003e86:	3304      	adds	r3, #4
 8003e88:	3301      	adds	r3, #1
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	021b      	lsls	r3, r3, #8
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	4313      	orrs	r3, r2
 8003e94:	857b      	strh	r3, [r7, #42]	; 0x2a
                if(uuid == P2P_SERVICE_UUID)
 8003e96:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003e98:	f64f 6240 	movw	r2, #65088	; 0xfe40
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d149      	bne.n	8003f34 <Event_Handler+0x204>
                {
#if(CFG_DEBUG_APP_TRACE != 0)
                  APP_DBG_MSG("-- GATT : P2P_SERVICE_UUID FOUND - connection handle 0x%x \n", aP2PClientContext[index].connHandle);
 8003ea0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003ea4:	4a7e      	ldr	r2, [pc, #504]	; (80040a0 <Event_Handler+0x370>)
 8003ea6:	011b      	lsls	r3, r3, #4
 8003ea8:	4413      	add	r3, r2
 8003eaa:	3302      	adds	r3, #2
 8003eac:	881b      	ldrh	r3, [r3, #0]
 8003eae:	4619      	mov	r1, r3
 8003eb0:	487c      	ldr	r0, [pc, #496]	; (80040a4 <Event_Handler+0x374>)
 8003eb2:	f008 ff71 	bl	800cd98 <iprintf>
#endif
#if (UUID_128BIT_FORMAT==1)
                aP2PClientContext[index].P2PServiceHandle = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx-16]);
 8003eb6:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003eba:	3b10      	subs	r3, #16
 8003ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ebe:	4413      	add	r3, r2
 8003ec0:	791b      	ldrb	r3, [r3, #4]
 8003ec2:	b299      	uxth	r1, r3
 8003ec4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003ec8:	3b10      	subs	r3, #16
 8003eca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ecc:	4413      	add	r3, r2
 8003ece:	3304      	adds	r3, #4
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	021b      	lsls	r3, r3, #8
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	b291      	uxth	r1, r2
 8003ee2:	4a6f      	ldr	r2, [pc, #444]	; (80040a0 <Event_Handler+0x370>)
 8003ee4:	011b      	lsls	r3, r3, #4
 8003ee6:	4413      	add	r3, r2
 8003ee8:	3304      	adds	r3, #4
 8003eea:	460a      	mov	r2, r1
 8003eec:	801a      	strh	r2, [r3, #0]
                aP2PClientContext[index].P2PServiceEndHandle = UNPACK_2_BYTE_PARAMETER (&pr->Attribute_Data_List[idx-14]);
 8003eee:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003ef2:	3b0e      	subs	r3, #14
 8003ef4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ef6:	4413      	add	r3, r2
 8003ef8:	791b      	ldrb	r3, [r3, #4]
 8003efa:	b299      	uxth	r1, r3
 8003efc:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003f00:	3b0e      	subs	r3, #14
 8003f02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f04:	4413      	add	r3, r2
 8003f06:	3304      	adds	r3, #4
 8003f08:	3301      	adds	r3, #1
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	021b      	lsls	r3, r3, #8
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003f16:	430a      	orrs	r2, r1
 8003f18:	b291      	uxth	r1, r2
 8003f1a:	4a61      	ldr	r2, [pc, #388]	; (80040a0 <Event_Handler+0x370>)
 8003f1c:	011b      	lsls	r3, r3, #4
 8003f1e:	4413      	add	r3, r2
 8003f20:	3306      	adds	r3, #6
 8003f22:	460a      	mov	r2, r1
 8003f24:	801a      	strh	r2, [r3, #0]
#else
                aP2PClientContext[index].P2PServiceHandle = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx-4]);
                aP2PClientContext[index].P2PServiceEndHandle = UNPACK_2_BYTE_PARAMETER (&pr->Attribute_Data_List[idx-2]);
#endif
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_CHARACS ;
 8003f26:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003f2a:	4a5d      	ldr	r2, [pc, #372]	; (80040a0 <Event_Handler+0x370>)
 8003f2c:	011b      	lsls	r3, r3, #4
 8003f2e:	4413      	add	r3, r2
 8003f30:	2208      	movs	r2, #8
 8003f32:	701a      	strb	r2, [r3, #0]
                }
                idx += 6;
 8003f34:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003f38:	3306      	adds	r3, #6
 8003f3a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
              for (i=0; i<numServ; i++)
 8003f3e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003f42:	3301      	adds	r3, #1
 8003f44:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8003f48:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8003f4c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d38e      	bcc.n	8003e72 <Event_Handler+0x142>
              }
            }
          }
        }
        break;
 8003f54:	e1a5      	b.n	80042a2 <Event_Handler+0x572>

        case ACI_ATT_READ_BY_TYPE_RESP_VSEVT_CODE:
        {

          aci_att_read_by_type_resp_event_rp0 *pr = (void*)blecore_evt->data;
 8003f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f58:	3302      	adds	r3, #2
 8003f5a:	627b      	str	r3, [r7, #36]	; 0x24
           * 2 or 16 bytes data
           */

          uint8_t index;

          index = 0;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003f62:	e004      	b.n	8003f6e <Event_Handler+0x23e>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
            index++;
 8003f64:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003f68:	3301      	adds	r3, #1
 8003f6a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003f6e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10b      	bne.n	8003f8e <Event_Handler+0x25e>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 8003f76:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003f7a:	4a49      	ldr	r2, [pc, #292]	; (80040a0 <Event_Handler+0x370>)
 8003f7c:	011b      	lsls	r3, r3, #4
 8003f7e:	4413      	add	r3, r2
 8003f80:	3302      	adds	r3, #2
 8003f82:	881a      	ldrh	r2, [r3, #0]
 8003f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f86:	881b      	ldrh	r3, [r3, #0]
 8003f88:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d1ea      	bne.n	8003f64 <Event_Handler+0x234>

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 8003f8e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f040 8187 	bne.w	80042a6 <Event_Handler+0x576>
          {

            /* we are interested in only 16 bit UUIDs */
#if (UUID_128BIT_FORMAT==1)
            idx = 17;
 8003f98:	2311      	movs	r3, #17
 8003f9a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
            if (pr->Handle_Value_Pair_Length == 21)
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa0:	789b      	ldrb	r3, [r3, #2]
 8003fa2:	2b15      	cmp	r3, #21
 8003fa4:	f040 817f 	bne.w	80042a6 <Event_Handler+0x576>
#else
              idx = 5;
            if (pr->Handle_Value_Pair_Length == 7)
#endif
            {
              pr->Data_Length -= 1;
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	78db      	ldrb	r3, [r3, #3]
 8003fac:	3b01      	subs	r3, #1
 8003fae:	b2da      	uxtb	r2, r3
 8003fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb2:	70da      	strb	r2, [r3, #3]
              while(pr->Data_Length > 0)
 8003fb4:	e06f      	b.n	8004096 <Event_Handler+0x366>
              {
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx]);
 8003fb6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fbc:	4413      	add	r3, r2
 8003fbe:	791b      	ldrb	r3, [r3, #4]
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003fc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fc8:	440b      	add	r3, r1
 8003fca:	3304      	adds	r3, #4
 8003fcc:	3301      	adds	r3, #1
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	021b      	lsls	r3, r3, #8
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	847b      	strh	r3, [r7, #34]	; 0x22
                /* store the characteristic handle not the attribute handle */
#if (UUID_128BIT_FORMAT==1)
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx-14]);
 8003fda:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003fde:	3b0e      	subs	r3, #14
 8003fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fe2:	4413      	add	r3, r2
 8003fe4:	791b      	ldrb	r3, [r3, #4]
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003fec:	3b0e      	subs	r3, #14
 8003fee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ff0:	440b      	add	r3, r1
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	021b      	lsls	r3, r3, #8
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	4313      	orrs	r3, r2
 8004000:	843b      	strh	r3, [r7, #32]
#else
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx-2]);
#endif
                if(uuid == P2P_WRITE_CHAR_UUID)
 8004002:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004004:	f64f 6241 	movw	r2, #65089	; 0xfe41
 8004008:	4293      	cmp	r3, r2
 800400a:	d11a      	bne.n	8004042 <Event_Handler+0x312>
                {
#if(CFG_DEBUG_APP_TRACE != 0)
                  APP_DBG_MSG("-- GATT : WRITE_UUID FOUND - connection handle 0x%x\n", aP2PClientContext[index].connHandle);
 800400c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004010:	4a23      	ldr	r2, [pc, #140]	; (80040a0 <Event_Handler+0x370>)
 8004012:	011b      	lsls	r3, r3, #4
 8004014:	4413      	add	r3, r2
 8004016:	3302      	adds	r3, #2
 8004018:	881b      	ldrh	r3, [r3, #0]
 800401a:	4619      	mov	r1, r3
 800401c:	4822      	ldr	r0, [pc, #136]	; (80040a8 <Event_Handler+0x378>)
 800401e:	f008 febb 	bl	800cd98 <iprintf>
#endif
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_WRITE_DESC;
 8004022:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004026:	4a1e      	ldr	r2, [pc, #120]	; (80040a0 <Event_Handler+0x370>)
 8004028:	011b      	lsls	r3, r3, #4
 800402a:	4413      	add	r3, r2
 800402c:	2209      	movs	r2, #9
 800402e:	701a      	strb	r2, [r3, #0]
                  aP2PClientContext[index].P2PWriteToServerCharHdle = handle;
 8004030:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004034:	4a1a      	ldr	r2, [pc, #104]	; (80040a0 <Event_Handler+0x370>)
 8004036:	011b      	lsls	r3, r3, #4
 8004038:	4413      	add	r3, r2
 800403a:	3308      	adds	r3, #8
 800403c:	8c3a      	ldrh	r2, [r7, #32]
 800403e:	801a      	strh	r2, [r3, #0]
 8004040:	e01e      	b.n	8004080 <Event_Handler+0x350>
                }

                else if(uuid == P2P_NOTIFY_CHAR_UUID)
 8004042:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004044:	f64f 6242 	movw	r2, #65090	; 0xfe42
 8004048:	4293      	cmp	r3, r2
 800404a:	d119      	bne.n	8004080 <Event_Handler+0x350>
                {
#if(CFG_DEBUG_APP_TRACE != 0)
                  APP_DBG_MSG("-- GATT : NOTIFICATION_CHAR_UUID FOUND  - connection handle 0x%x\n", aP2PClientContext[index].connHandle);
 800404c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004050:	4a13      	ldr	r2, [pc, #76]	; (80040a0 <Event_Handler+0x370>)
 8004052:	011b      	lsls	r3, r3, #4
 8004054:	4413      	add	r3, r2
 8004056:	3302      	adds	r3, #2
 8004058:	881b      	ldrh	r3, [r3, #0]
 800405a:	4619      	mov	r1, r3
 800405c:	4813      	ldr	r0, [pc, #76]	; (80040ac <Event_Handler+0x37c>)
 800405e:	f008 fe9b 	bl	800cd98 <iprintf>
#endif
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC;
 8004062:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004066:	4a0e      	ldr	r2, [pc, #56]	; (80040a0 <Event_Handler+0x370>)
 8004068:	011b      	lsls	r3, r3, #4
 800406a:	4413      	add	r3, r2
 800406c:	220a      	movs	r2, #10
 800406e:	701a      	strb	r2, [r3, #0]
                  aP2PClientContext[index].P2PNotificationCharHdle = handle;
 8004070:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004074:	4a0a      	ldr	r2, [pc, #40]	; (80040a0 <Event_Handler+0x370>)
 8004076:	011b      	lsls	r3, r3, #4
 8004078:	4413      	add	r3, r2
 800407a:	330c      	adds	r3, #12
 800407c:	8c3a      	ldrh	r2, [r7, #32]
 800407e:	801a      	strh	r2, [r3, #0]
                }
#if (UUID_128BIT_FORMAT==1)
                pr->Data_Length -= 21;
 8004080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004082:	78db      	ldrb	r3, [r3, #3]
 8004084:	3b15      	subs	r3, #21
 8004086:	b2da      	uxtb	r2, r3
 8004088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408a:	70da      	strb	r2, [r3, #3]
                idx += 21;
 800408c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8004090:	3315      	adds	r3, #21
 8004092:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
              while(pr->Data_Length > 0)
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	78db      	ldrb	r3, [r3, #3]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d18b      	bne.n	8003fb6 <Event_Handler+0x286>
#endif
              }
            }
          }
        }
        break;
 800409e:	e102      	b.n	80042a6 <Event_Handler+0x576>
 80040a0:	200005d4 	.word	0x200005d4
 80040a4:	0800ef6c 	.word	0x0800ef6c
 80040a8:	0800efa8 	.word	0x0800efa8
 80040ac:	0800efe0 	.word	0x0800efe0

        case ACI_ATT_FIND_INFO_RESP_VSEVT_CODE:
        {
          aci_att_find_info_resp_event_rp0 *pr = (void*)blecore_evt->data;
 80040b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040b2:	3302      	adds	r3, #2
 80040b4:	61fb      	str	r3, [r7, #28]
           * 2 bytes UUID
           */

          uint8_t index;

          index = 0;
 80040b6:	2300      	movs	r3, #0
 80040b8:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 80040bc:	e004      	b.n	80040c8 <Event_Handler+0x398>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))

            index++;
 80040be:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80040c2:	3301      	adds	r3, #1
 80040c4:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 80040c8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10b      	bne.n	80040e8 <Event_Handler+0x3b8>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 80040d0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80040d4:	4a7b      	ldr	r2, [pc, #492]	; (80042c4 <Event_Handler+0x594>)
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	4413      	add	r3, r2
 80040da:	3302      	adds	r3, #2
 80040dc:	881a      	ldrh	r2, [r3, #0]
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	881b      	ldrh	r3, [r3, #0]
 80040e2:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d1ea      	bne.n	80040be <Event_Handler+0x38e>

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 80040e8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f040 80dc 	bne.w	80042aa <Event_Handler+0x57a>
          {

            numDesc = (pr->Event_Data_Length) / 4;
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	78db      	ldrb	r3, [r3, #3]
 80040f6:	089b      	lsrs	r3, r3, #2
 80040f8:	76fb      	strb	r3, [r7, #27]
            /* we are interested only in 16 bit UUIDs */
            idx = 0;
 80040fa:	2300      	movs	r3, #0
 80040fc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            if (pr->Format == UUID_TYPE_16)
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	789b      	ldrb	r3, [r3, #2]
 8004104:	2b01      	cmp	r3, #1
 8004106:	f040 80d0 	bne.w	80042aa <Event_Handler+0x57a>
            {
              for (i=0; i<numDesc; i++)
 800410a:	2300      	movs	r3, #0
 800410c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8004110:	e056      	b.n	80041c0 <Event_Handler+0x490>
              {
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx]);
 8004112:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8004116:	69fa      	ldr	r2, [r7, #28]
 8004118:	4413      	add	r3, r2
 800411a:	791b      	ldrb	r3, [r3, #4]
 800411c:	b29a      	uxth	r2, r3
 800411e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8004122:	69f9      	ldr	r1, [r7, #28]
 8004124:	440b      	add	r3, r1
 8004126:	3304      	adds	r3, #4
 8004128:	3301      	adds	r3, #1
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	b29b      	uxth	r3, r3
 800412e:	021b      	lsls	r3, r3, #8
 8004130:	b29b      	uxth	r3, r3
 8004132:	4313      	orrs	r3, r2
 8004134:	833b      	strh	r3, [r7, #24]
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx+2]);
 8004136:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800413a:	3302      	adds	r3, #2
 800413c:	69fa      	ldr	r2, [r7, #28]
 800413e:	4413      	add	r3, r2
 8004140:	791b      	ldrb	r3, [r3, #4]
 8004142:	b29a      	uxth	r2, r3
 8004144:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8004148:	3302      	adds	r3, #2
 800414a:	69f9      	ldr	r1, [r7, #28]
 800414c:	440b      	add	r3, r1
 800414e:	3304      	adds	r3, #4
 8004150:	3301      	adds	r3, #1
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	b29b      	uxth	r3, r3
 8004156:	021b      	lsls	r3, r3, #8
 8004158:	b29b      	uxth	r3, r3
 800415a:	4313      	orrs	r3, r2
 800415c:	82fb      	strh	r3, [r7, #22]

                if(uuid == CLIENT_CHAR_CONFIG_DESCRIPTOR_UUID)
 800415e:	8afb      	ldrh	r3, [r7, #22]
 8004160:	f642 1202 	movw	r2, #10498	; 0x2902
 8004164:	4293      	cmp	r3, r2
 8004166:	d121      	bne.n	80041ac <Event_Handler+0x47c>
                {
#if(CFG_DEBUG_APP_TRACE != 0)
                  APP_DBG_MSG("-- GATT : CLIENT_CHAR_CONFIG_DESCRIPTOR_UUID- connection handle 0x%x\n", aP2PClientContext[index].connHandle);
 8004168:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800416c:	4a55      	ldr	r2, [pc, #340]	; (80042c4 <Event_Handler+0x594>)
 800416e:	011b      	lsls	r3, r3, #4
 8004170:	4413      	add	r3, r2
 8004172:	3302      	adds	r3, #2
 8004174:	881b      	ldrh	r3, [r3, #0]
 8004176:	4619      	mov	r1, r3
 8004178:	4853      	ldr	r0, [pc, #332]	; (80042c8 <Event_Handler+0x598>)
 800417a:	f008 fe0d 	bl	800cd98 <iprintf>
#endif
                  if( aP2PClientContext[index].state == APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC)
 800417e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004182:	4a50      	ldr	r2, [pc, #320]	; (80042c4 <Event_Handler+0x594>)
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	4413      	add	r3, r2
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	2b0a      	cmp	r3, #10
 800418c:	d10e      	bne.n	80041ac <Event_Handler+0x47c>
                  {

                    aP2PClientContext[index].P2PNotificationDescHandle = handle;
 800418e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004192:	4a4c      	ldr	r2, [pc, #304]	; (80042c4 <Event_Handler+0x594>)
 8004194:	011b      	lsls	r3, r3, #4
 8004196:	4413      	add	r3, r2
 8004198:	330e      	adds	r3, #14
 800419a:	8b3a      	ldrh	r2, [r7, #24]
 800419c:	801a      	strh	r2, [r3, #0]
                    aP2PClientContext[index].state = APP_BLE_ENABLE_NOTIFICATION_DESC;
 800419e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80041a2:	4a48      	ldr	r2, [pc, #288]	; (80042c4 <Event_Handler+0x594>)
 80041a4:	011b      	lsls	r3, r3, #4
 80041a6:	4413      	add	r3, r2
 80041a8:	220b      	movs	r2, #11
 80041aa:	701a      	strb	r2, [r3, #0]

                  }
                }
                idx += 4;
 80041ac:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80041b0:	3304      	adds	r3, #4
 80041b2:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
              for (i=0; i<numDesc; i++)
 80041b6:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80041ba:	3301      	adds	r3, #1
 80041bc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 80041c0:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80041c4:	7efb      	ldrb	r3, [r7, #27]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d3a3      	bcc.n	8004112 <Event_Handler+0x3e2>
              }
            }
          }
        }
        break; /*ACI_ATT_FIND_INFO_RESP_VSEVT_CODE*/
 80041ca:	e06e      	b.n	80042aa <Event_Handler+0x57a>

        case ACI_GATT_NOTIFICATION_VSEVT_CODE:
        {
          aci_gatt_notification_event_rp0 *pr = (void*)blecore_evt->data;
 80041cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041ce:	3302      	adds	r3, #2
 80041d0:	637b      	str	r3, [r7, #52]	; 0x34
          uint8_t index;

          index = 0;
 80041d2:	2300      	movs	r3, #0
 80041d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 80041d8:	e004      	b.n	80041e4 <Event_Handler+0x4b4>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
            index++;
 80041da:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80041de:	3301      	adds	r3, #1
 80041e0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 80041e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10b      	bne.n	8004204 <Event_Handler+0x4d4>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 80041ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80041f0:	4a34      	ldr	r2, [pc, #208]	; (80042c4 <Event_Handler+0x594>)
 80041f2:	011b      	lsls	r3, r3, #4
 80041f4:	4413      	add	r3, r2
 80041f6:	3302      	adds	r3, #2
 80041f8:	881a      	ldrh	r2, [r3, #0]
 80041fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041fc:	881b      	ldrh	r3, [r3, #0]
 80041fe:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8004200:	429a      	cmp	r2, r3
 8004202:	d1ea      	bne.n	80041da <Event_Handler+0x4aa>

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 8004204:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004208:	2b00      	cmp	r3, #0
 800420a:	d150      	bne.n	80042ae <Event_Handler+0x57e>
          {

            if ( (pr->Attribute_Handle == aP2PClientContext[index].P2PNotificationCharHdle) &&
 800420c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800420e:	885b      	ldrh	r3, [r3, #2]
 8004210:	b29a      	uxth	r2, r3
 8004212:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004216:	492b      	ldr	r1, [pc, #172]	; (80042c4 <Event_Handler+0x594>)
 8004218:	011b      	lsls	r3, r3, #4
 800421a:	440b      	add	r3, r1
 800421c:	330c      	adds	r3, #12
 800421e:	881b      	ldrh	r3, [r3, #0]
 8004220:	429a      	cmp	r2, r3
 8004222:	d144      	bne.n	80042ae <Event_Handler+0x57e>
                    (pr->Attribute_Value_Length == (2)) )
 8004224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004226:	791b      	ldrb	r3, [r3, #4]
            if ( (pr->Attribute_Handle == aP2PClientContext[index].P2PNotificationCharHdle) &&
 8004228:	2b02      	cmp	r3, #2
 800422a:	d140      	bne.n	80042ae <Event_Handler+0x57e>
            {

              Notification.P2P_Client_Evt_Opcode = P2P_NOTIFICATION_INFO_RECEIVED_EVT;
 800422c:	2302      	movs	r3, #2
 800422e:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length = pr->Attribute_Value_Length;
 8004230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004232:	791b      	ldrb	r3, [r3, #4]
 8004234:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload = &pr->Attribute_Value[0];
 8004236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004238:	3305      	adds	r3, #5
 800423a:	60fb      	str	r3, [r7, #12]

              Gatt_Notification(&Notification);
 800423c:	f107 0308 	add.w	r3, r7, #8
 8004240:	4618      	mov	r0, r3
 8004242:	f000 f845 	bl	80042d0 <Gatt_Notification>
              /* INFORM APPLICATION BUTTON IS PUSHED BY END DEVICE */

            }
          }
        }
        break;/* end ACI_GATT_NOTIFICATION_VSEVT_CODE */
 8004246:	e032      	b.n	80042ae <Event_Handler+0x57e>

        case ACI_GATT_PROC_COMPLETE_VSEVT_CODE:
        {
          aci_gatt_proc_complete_event_rp0 *pr = (void*)blecore_evt->data;
 8004248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800424a:	3302      	adds	r3, #2
 800424c:	63bb      	str	r3, [r7, #56]	; 0x38
#if(CFG_DEBUG_APP_TRACE != 0)
          APP_DBG_MSG("-- GATT : ACI_GATT_PROC_COMPLETE_VSEVT_CODE \n");
 800424e:	481f      	ldr	r0, [pc, #124]	; (80042cc <Event_Handler+0x59c>)
 8004250:	f008 fe10 	bl	800ce74 <puts>
          APP_DBG_MSG("\n");
 8004254:	200a      	movs	r0, #10
 8004256:	f008 fdb1 	bl	800cdbc <putchar>
#endif

          uint8_t index;

          index = 0;
 800425a:	2300      	movs	r3, #0
 800425c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8004260:	e004      	b.n	800426c <Event_Handler+0x53c>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
            index++;
 8004262:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004266:	3301      	adds	r3, #1
 8004268:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800426c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10b      	bne.n	800428c <Event_Handler+0x55c>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 8004274:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004278:	4a12      	ldr	r2, [pc, #72]	; (80042c4 <Event_Handler+0x594>)
 800427a:	011b      	lsls	r3, r3, #4
 800427c:	4413      	add	r3, r2
 800427e:	3302      	adds	r3, #2
 8004280:	881a      	ldrh	r2, [r3, #0]
 8004282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004284:	881b      	ldrh	r3, [r3, #0]
 8004286:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8004288:	429a      	cmp	r2, r3
 800428a:	d1ea      	bne.n	8004262 <Event_Handler+0x532>

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800428c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10e      	bne.n	80042b2 <Event_Handler+0x582>
          {

            UTIL_SEQ_SetTask( 1<<CFG_TASK_SEARCH_SERVICE_ID, CFG_SCH_PRIO_0);
 8004294:	2100      	movs	r1, #0
 8004296:	2004      	movs	r0, #4
 8004298:	f008 fb9c 	bl	800c9d4 <UTIL_SEQ_SetTask>

          }
        }
        break; /*ACI_GATT_PROC_COMPLETE_VSEVT_CODE*/
 800429c:	e009      	b.n	80042b2 <Event_Handler+0x582>
        default:
          break;
 800429e:	bf00      	nop
 80042a0:	e00a      	b.n	80042b8 <Event_Handler+0x588>
        break;
 80042a2:	bf00      	nop
 80042a4:	e008      	b.n	80042b8 <Event_Handler+0x588>
        break;
 80042a6:	bf00      	nop
 80042a8:	e006      	b.n	80042b8 <Event_Handler+0x588>
        break; /*ACI_ATT_FIND_INFO_RESP_VSEVT_CODE*/
 80042aa:	bf00      	nop
 80042ac:	e004      	b.n	80042b8 <Event_Handler+0x588>
        break;/* end ACI_GATT_NOTIFICATION_VSEVT_CODE */
 80042ae:	bf00      	nop
 80042b0:	e002      	b.n	80042b8 <Event_Handler+0x588>
        break; /*ACI_GATT_PROC_COMPLETE_VSEVT_CODE*/
 80042b2:	bf00      	nop
      }
    }

    break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80042b4:	e000      	b.n	80042b8 <Event_Handler+0x588>

    default:
      break;
 80042b6:	bf00      	nop
  }

  return(return_value);
 80042b8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
}/* end BLE_CTRL_Event_Acknowledged_Status_t */
 80042bc:	4618      	mov	r0, r3
 80042be:	3750      	adds	r7, #80	; 0x50
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	200005d4 	.word	0x200005d4
 80042c8:	0800f024 	.word	0x0800f024
 80042cc:	0800f06c 	.word	0x0800f06c

080042d0 <Gatt_Notification>:

void Gatt_Notification(P2P_Client_App_Notification_evt_t *pNotification)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN Gatt_Notification_1*/

/* USER CODE END Gatt_Notification_1 */
  switch(pNotification->P2P_Client_Evt_Opcode)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d127      	bne.n	8004330 <Gatt_Notification+0x60>
/* USER CODE END P2P_Client_Evt_Opcode */

    case P2P_NOTIFICATION_INFO_RECEIVED_EVT:
/* USER CODE BEGIN P2P_NOTIFICATION_INFO_RECEIVED_EVT */
    {
      P2P_Client_App_Context.LedControl.Device_Led_Selection=pNotification->DataTransfered.pPayload[0];
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	781a      	ldrb	r2, [r3, #0]
 80042e6:	4b15      	ldr	r3, [pc, #84]	; (800433c <Gatt_Notification+0x6c>)
 80042e8:	705a      	strb	r2, [r3, #1]
      switch(P2P_Client_App_Context.LedControl.Device_Led_Selection) {
 80042ea:	4b14      	ldr	r3, [pc, #80]	; (800433c <Gatt_Notification+0x6c>)
 80042ec:	785b      	ldrb	r3, [r3, #1]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d11c      	bne.n	800432c <Gatt_Notification+0x5c>

        case 0x01 : {

          P2P_Client_App_Context.LedControl.Led1=pNotification->DataTransfered.pPayload[1];
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	785a      	ldrb	r2, [r3, #1]
 80042f8:	4b10      	ldr	r3, [pc, #64]	; (800433c <Gatt_Notification+0x6c>)
 80042fa:	709a      	strb	r2, [r3, #2]

          if(P2P_Client_App_Context.LedControl.Led1==0x00){
 80042fc:	4b0f      	ldr	r3, [pc, #60]	; (800433c <Gatt_Notification+0x6c>)
 80042fe:	789b      	ldrb	r3, [r3, #2]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d109      	bne.n	8004318 <Gatt_Notification+0x48>
            BSP_LED_Off(LED_BLUE);
 8004304:	2000      	movs	r0, #0
 8004306:	f000 fc45 	bl	8004b94 <BSP_LED_Off>
            APP_DBG_MSG(" -- P2P APPLICATION CLIENT : NOTIFICATION RECEIVED - LED OFF \n\r");
 800430a:	480d      	ldr	r0, [pc, #52]	; (8004340 <Gatt_Notification+0x70>)
 800430c:	f008 fd44 	bl	800cd98 <iprintf>
            APP_DBG_MSG(" \n\r");
 8004310:	480c      	ldr	r0, [pc, #48]	; (8004344 <Gatt_Notification+0x74>)
 8004312:	f008 fd41 	bl	800cd98 <iprintf>
            APP_DBG_MSG(" -- P2P APPLICATION CLIENT : NOTIFICATION RECEIVED - LED ON\n\r");
            APP_DBG_MSG(" \n\r");
            BSP_LED_On(LED_BLUE);
          }

          break;
 8004316:	e00a      	b.n	800432e <Gatt_Notification+0x5e>
            APP_DBG_MSG(" -- P2P APPLICATION CLIENT : NOTIFICATION RECEIVED - LED ON\n\r");
 8004318:	480b      	ldr	r0, [pc, #44]	; (8004348 <Gatt_Notification+0x78>)
 800431a:	f008 fd3d 	bl	800cd98 <iprintf>
            APP_DBG_MSG(" \n\r");
 800431e:	4809      	ldr	r0, [pc, #36]	; (8004344 <Gatt_Notification+0x74>)
 8004320:	f008 fd3a 	bl	800cd98 <iprintf>
            BSP_LED_On(LED_BLUE);
 8004324:	2000      	movs	r0, #0
 8004326:	f000 fc1b 	bl	8004b60 <BSP_LED_On>
          break;
 800432a:	e000      	b.n	800432e <Gatt_Notification+0x5e>
        }
        default : break;
 800432c:	bf00      	nop
      }

    }
/* USER CODE END P2P_NOTIFICATION_INFO_RECEIVED_EVT */
      break;
 800432e:	e000      	b.n	8004332 <Gatt_Notification+0x62>

    default:
/* USER CODE BEGIN P2P_Client_Evt_Opcode_Default */

/* USER CODE END P2P_Client_Evt_Opcode_Default */
      break;
 8004330:	bf00      	nop
  }
/* USER CODE BEGIN Gatt_Notification_2*/

/* USER CODE END Gatt_Notification_2 */
  return;
 8004332:	bf00      	nop
}
 8004334:	3708      	adds	r7, #8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	200005e4 	.word	0x200005e4
 8004340:	0800f09c 	.word	0x0800f09c
 8004344:	0800f0dc 	.word	0x0800f0dc
 8004348:	0800f0e0 	.word	0x0800f0e0

0800434c <P2P_Client_APP_Get_State>:

uint8_t P2P_Client_APP_Get_State( void ) {
 800434c:	b480      	push	{r7}
 800434e:	af00      	add	r7, sp, #0
  return aP2PClientContext[0].state;
 8004350:	4b03      	ldr	r3, [pc, #12]	; (8004360 <P2P_Client_APP_Get_State+0x14>)
 8004352:	781b      	ldrb	r3, [r3, #0]
}
 8004354:	4618      	mov	r0, r3
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	200005d4 	.word	0x200005d4

08004364 <Write_Char>:
 * @brief  Feature Characteristic update
 * @param  pFeatureValue: The address of the new value to be written
 * @retval None
 */
tBleStatus Write_Char(uint16_t UUID, uint8_t Service_Instance, uint8_t *pPayload)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	4603      	mov	r3, r0
 800436c:	603a      	str	r2, [r7, #0]
 800436e:	80fb      	strh	r3, [r7, #6]
 8004370:	460b      	mov	r3, r1
 8004372:	717b      	strb	r3, [r7, #5]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8004374:	2392      	movs	r3, #146	; 0x92
 8004376:	73fb      	strb	r3, [r7, #15]
  uint8_t index;

  index = 0;
 8004378:	2300      	movs	r3, #0
 800437a:	73bb      	strb	r3, [r7, #14]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800437c:	e01b      	b.n	80043b6 <Write_Char+0x52>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
  {
    switch(UUID)
 800437e:	88fb      	ldrh	r3, [r7, #6]
 8004380:	f64f 6241 	movw	r2, #65089	; 0xfe41
 8004384:	4293      	cmp	r3, r2
 8004386:	d112      	bne.n	80043ae <Write_Char+0x4a>
    {
      case P2P_WRITE_CHAR_UUID: /* SERVER RX -- so CLIENT TX */
        ret = aci_gatt_write_without_resp(aP2PClientContext[index].connHandle,
 8004388:	7bbb      	ldrb	r3, [r7, #14]
 800438a:	4a12      	ldr	r2, [pc, #72]	; (80043d4 <Write_Char+0x70>)
 800438c:	011b      	lsls	r3, r3, #4
 800438e:	4413      	add	r3, r2
 8004390:	3302      	adds	r3, #2
 8004392:	8818      	ldrh	r0, [r3, #0]
 8004394:	7bbb      	ldrb	r3, [r7, #14]
 8004396:	4a0f      	ldr	r2, [pc, #60]	; (80043d4 <Write_Char+0x70>)
 8004398:	011b      	lsls	r3, r3, #4
 800439a:	4413      	add	r3, r2
 800439c:	3308      	adds	r3, #8
 800439e:	8819      	ldrh	r1, [r3, #0]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	2202      	movs	r2, #2
 80043a4:	f006 f9e5 	bl	800a772 <aci_gatt_write_without_resp>
 80043a8:	4603      	mov	r3, r0
 80043aa:	73fb      	strb	r3, [r7, #15]
                                         aP2PClientContext[index].P2PWriteToServerCharHdle,
                                         2, /* charValueLen */
                                         (uint8_t *)  pPayload);
        break;
 80043ac:	e000      	b.n	80043b0 <Write_Char+0x4c>
      default:
        break;
 80043ae:	bf00      	nop
    }
    index++;
 80043b0:	7bbb      	ldrb	r3, [r7, #14]
 80043b2:	3301      	adds	r3, #1
 80043b4:	73bb      	strb	r3, [r7, #14]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 80043b6:	7bbb      	ldrb	r3, [r7, #14]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d106      	bne.n	80043ca <Write_Char+0x66>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
 80043bc:	7bbb      	ldrb	r3, [r7, #14]
 80043be:	4a05      	ldr	r2, [pc, #20]	; (80043d4 <Write_Char+0x70>)
 80043c0:	011b      	lsls	r3, r3, #4
 80043c2:	4413      	add	r3, r2
 80043c4:	781b      	ldrb	r3, [r3, #0]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1d9      	bne.n	800437e <Write_Char+0x1a>
  }

  return ret;
 80043ca:	7bfb      	ldrb	r3, [r7, #15]
}/* end Write_Char() */
 80043cc:	4618      	mov	r0, r3
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	200005d4 	.word	0x200005d4

080043d8 <Button_Trigger_Received>:

void Button_Trigger_Received(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
  APP_DBG_MSG("-- P2P APPLICATION CLIENT  : BUTTON PUSHED - WRITE TO SERVER \n ");
 80043dc:	480c      	ldr	r0, [pc, #48]	; (8004410 <Button_Trigger_Received+0x38>)
 80043de:	f008 fcdb 	bl	800cd98 <iprintf>
  APP_DBG_MSG(" \n\r");
 80043e2:	480c      	ldr	r0, [pc, #48]	; (8004414 <Button_Trigger_Received+0x3c>)
 80043e4:	f008 fcd8 	bl	800cd98 <iprintf>
  if(P2P_Client_App_Context.ButtonStatus.Button1 == 0x00)
 80043e8:	4b0b      	ldr	r3, [pc, #44]	; (8004418 <Button_Trigger_Received+0x40>)
 80043ea:	791b      	ldrb	r3, [r3, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d103      	bne.n	80043f8 <Button_Trigger_Received+0x20>
  {
    P2P_Client_App_Context.ButtonStatus.Button1 = 0x01;
 80043f0:	4b09      	ldr	r3, [pc, #36]	; (8004418 <Button_Trigger_Received+0x40>)
 80043f2:	2201      	movs	r2, #1
 80043f4:	711a      	strb	r2, [r3, #4]
 80043f6:	e002      	b.n	80043fe <Button_Trigger_Received+0x26>
  }else {
    P2P_Client_App_Context.ButtonStatus.Button1 = 0x00;
 80043f8:	4b07      	ldr	r3, [pc, #28]	; (8004418 <Button_Trigger_Received+0x40>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	711a      	strb	r2, [r3, #4]
  }

  Write_Char( P2P_WRITE_CHAR_UUID, 0, (uint8_t *)&P2P_Client_App_Context.ButtonStatus);
 80043fe:	4a07      	ldr	r2, [pc, #28]	; (800441c <Button_Trigger_Received+0x44>)
 8004400:	2100      	movs	r1, #0
 8004402:	f64f 6041 	movw	r0, #65089	; 0xfe41
 8004406:	f7ff ffad 	bl	8004364 <Write_Char>

  return;
 800440a:	bf00      	nop
}
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	0800f120 	.word	0x0800f120
 8004414:	0800f0dc 	.word	0x0800f0dc
 8004418:	200005e4 	.word	0x200005e4
 800441c:	200005e7 	.word	0x200005e7

08004420 <Update_Service>:

void Update_Service()
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
  uint16_t enable = 0x0001;
 8004426:	2301      	movs	r3, #1
 8004428:	80bb      	strh	r3, [r7, #4]
  uint16_t disable = 0x0000;
 800442a:	2300      	movs	r3, #0
 800442c:	807b      	strh	r3, [r7, #2]
  uint8_t index;

  index = 0;
 800442e:	2300      	movs	r3, #0
 8004430:	71fb      	strb	r3, [r7, #7]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8004432:	e0a5      	b.n	8004580 <Update_Service+0x160>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
  {
    switch(aP2PClientContext[index].state)
 8004434:	79fb      	ldrb	r3, [r7, #7]
 8004436:	4a5a      	ldr	r2, [pc, #360]	; (80045a0 <Update_Service+0x180>)
 8004438:	011b      	lsls	r3, r3, #4
 800443a:	4413      	add	r3, r2
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	3b07      	subs	r3, #7
 8004440:	2b05      	cmp	r3, #5
 8004442:	f200 8099 	bhi.w	8004578 <Update_Service+0x158>
 8004446:	a201      	add	r2, pc, #4	; (adr r2, 800444c <Update_Service+0x2c>)
 8004448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444c:	08004465 	.word	0x08004465
 8004450:	0800446d 	.word	0x0800446d
 8004454:	0800449f 	.word	0x0800449f
 8004458:	080044d5 	.word	0x080044d5
 800445c:	0800450b 	.word	0x0800450b
 8004460:	08004545 	.word	0x08004545
    {
      case APP_BLE_DISCOVER_SERVICES:
        APP_DBG_MSG("P2P_DISCOVER_SERVICES\n");
 8004464:	484f      	ldr	r0, [pc, #316]	; (80045a4 <Update_Service+0x184>)
 8004466:	f008 fd05 	bl	800ce74 <puts>
        break;
 800446a:	e086      	b.n	800457a <Update_Service+0x15a>
      case APP_BLE_DISCOVER_CHARACS:
        APP_DBG_MSG("* GATT : Discover P2P Characteristics\n");
 800446c:	484e      	ldr	r0, [pc, #312]	; (80045a8 <Update_Service+0x188>)
 800446e:	f008 fd01 	bl	800ce74 <puts>
        aci_gatt_disc_all_char_of_service(aP2PClientContext[index].connHandle,
 8004472:	79fb      	ldrb	r3, [r7, #7]
 8004474:	4a4a      	ldr	r2, [pc, #296]	; (80045a0 <Update_Service+0x180>)
 8004476:	011b      	lsls	r3, r3, #4
 8004478:	4413      	add	r3, r2
 800447a:	3302      	adds	r3, #2
 800447c:	8818      	ldrh	r0, [r3, #0]
 800447e:	79fb      	ldrb	r3, [r7, #7]
 8004480:	4a47      	ldr	r2, [pc, #284]	; (80045a0 <Update_Service+0x180>)
 8004482:	011b      	lsls	r3, r3, #4
 8004484:	4413      	add	r3, r2
 8004486:	3304      	adds	r3, #4
 8004488:	8819      	ldrh	r1, [r3, #0]
 800448a:	79fb      	ldrb	r3, [r7, #7]
 800448c:	4a44      	ldr	r2, [pc, #272]	; (80045a0 <Update_Service+0x180>)
 800448e:	011b      	lsls	r3, r3, #4
 8004490:	4413      	add	r3, r2
 8004492:	3306      	adds	r3, #6
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	461a      	mov	r2, r3
 8004498:	f005 ffca 	bl	800a430 <aci_gatt_disc_all_char_of_service>
                                          aP2PClientContext[index].P2PServiceHandle,
                                          aP2PClientContext[index].P2PServiceEndHandle);
        break;
 800449c:	e06d      	b.n	800457a <Update_Service+0x15a>
      case APP_BLE_DISCOVER_WRITE_DESC: /* Not Used - No descriptor */
        APP_DBG_MSG("* GATT : Discover Descriptor of TX - Write  Characteristic\n");
 800449e:	4843      	ldr	r0, [pc, #268]	; (80045ac <Update_Service+0x18c>)
 80044a0:	f008 fce8 	bl	800ce74 <puts>
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 80044a4:	79fb      	ldrb	r3, [r7, #7]
 80044a6:	4a3e      	ldr	r2, [pc, #248]	; (80045a0 <Update_Service+0x180>)
 80044a8:	011b      	lsls	r3, r3, #4
 80044aa:	4413      	add	r3, r2
 80044ac:	3302      	adds	r3, #2
 80044ae:	8818      	ldrh	r0, [r3, #0]
 80044b0:	79fb      	ldrb	r3, [r7, #7]
 80044b2:	4a3b      	ldr	r2, [pc, #236]	; (80045a0 <Update_Service+0x180>)
 80044b4:	011b      	lsls	r3, r3, #4
 80044b6:	4413      	add	r3, r2
 80044b8:	3308      	adds	r3, #8
 80044ba:	8819      	ldrh	r1, [r3, #0]
                                    aP2PClientContext[index].P2PWriteToServerCharHdle,
                                    aP2PClientContext[index].P2PWriteToServerCharHdle+2);
 80044bc:	79fb      	ldrb	r3, [r7, #7]
 80044be:	4a38      	ldr	r2, [pc, #224]	; (80045a0 <Update_Service+0x180>)
 80044c0:	011b      	lsls	r3, r3, #4
 80044c2:	4413      	add	r3, r2
 80044c4:	3308      	adds	r3, #8
 80044c6:	881b      	ldrh	r3, [r3, #0]
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 80044c8:	3302      	adds	r3, #2
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	461a      	mov	r2, r3
 80044ce:	f006 f830 	bl	800a532 <aci_gatt_disc_all_char_desc>
        break;
 80044d2:	e052      	b.n	800457a <Update_Service+0x15a>
      case APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC:
        APP_DBG_MSG("* GATT : Discover Descriptor of Rx - Notification  Characteristic\n");
 80044d4:	4836      	ldr	r0, [pc, #216]	; (80045b0 <Update_Service+0x190>)
 80044d6:	f008 fccd 	bl	800ce74 <puts>
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 80044da:	79fb      	ldrb	r3, [r7, #7]
 80044dc:	4a30      	ldr	r2, [pc, #192]	; (80045a0 <Update_Service+0x180>)
 80044de:	011b      	lsls	r3, r3, #4
 80044e0:	4413      	add	r3, r2
 80044e2:	3302      	adds	r3, #2
 80044e4:	8818      	ldrh	r0, [r3, #0]
 80044e6:	79fb      	ldrb	r3, [r7, #7]
 80044e8:	4a2d      	ldr	r2, [pc, #180]	; (80045a0 <Update_Service+0x180>)
 80044ea:	011b      	lsls	r3, r3, #4
 80044ec:	4413      	add	r3, r2
 80044ee:	330c      	adds	r3, #12
 80044f0:	8819      	ldrh	r1, [r3, #0]
                                    aP2PClientContext[index].P2PNotificationCharHdle,
                                    aP2PClientContext[index].P2PNotificationCharHdle+2);
 80044f2:	79fb      	ldrb	r3, [r7, #7]
 80044f4:	4a2a      	ldr	r2, [pc, #168]	; (80045a0 <Update_Service+0x180>)
 80044f6:	011b      	lsls	r3, r3, #4
 80044f8:	4413      	add	r3, r2
 80044fa:	330c      	adds	r3, #12
 80044fc:	881b      	ldrh	r3, [r3, #0]
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 80044fe:	3302      	adds	r3, #2
 8004500:	b29b      	uxth	r3, r3
 8004502:	461a      	mov	r2, r3
 8004504:	f006 f815 	bl	800a532 <aci_gatt_disc_all_char_desc>
        break;
 8004508:	e037      	b.n	800457a <Update_Service+0x15a>
      case APP_BLE_ENABLE_NOTIFICATION_DESC:
        APP_DBG_MSG("* GATT : Enable Server Notification\n");
 800450a:	482a      	ldr	r0, [pc, #168]	; (80045b4 <Update_Service+0x194>)
 800450c:	f008 fcb2 	bl	800ce74 <puts>
        aci_gatt_write_char_desc(aP2PClientContext[index].connHandle,
 8004510:	79fb      	ldrb	r3, [r7, #7]
 8004512:	4a23      	ldr	r2, [pc, #140]	; (80045a0 <Update_Service+0x180>)
 8004514:	011b      	lsls	r3, r3, #4
 8004516:	4413      	add	r3, r2
 8004518:	3302      	adds	r3, #2
 800451a:	8818      	ldrh	r0, [r3, #0]
 800451c:	79fb      	ldrb	r3, [r7, #7]
 800451e:	4a20      	ldr	r2, [pc, #128]	; (80045a0 <Update_Service+0x180>)
 8004520:	011b      	lsls	r3, r3, #4
 8004522:	4413      	add	r3, r2
 8004524:	330e      	adds	r3, #14
 8004526:	8819      	ldrh	r1, [r3, #0]
 8004528:	1d3b      	adds	r3, r7, #4
 800452a:	2202      	movs	r2, #2
 800452c:	f006 f882 	bl	800a634 <aci_gatt_write_char_desc>
                                 aP2PClientContext[index].P2PNotificationDescHandle,
                                 2,
                                 (uint8_t *)&enable);
        aP2PClientContext[index].state = APP_BLE_CONNECTED_CLIENT;
 8004530:	79fb      	ldrb	r3, [r7, #7]
 8004532:	4a1b      	ldr	r2, [pc, #108]	; (80045a0 <Update_Service+0x180>)
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	4413      	add	r3, r2
 8004538:	2206      	movs	r2, #6
 800453a:	701a      	strb	r2, [r3, #0]
        BSP_LED_Off(LED_RED);
 800453c:	2002      	movs	r0, #2
 800453e:	f000 fb29 	bl	8004b94 <BSP_LED_Off>
        break;
 8004542:	e01a      	b.n	800457a <Update_Service+0x15a>
      case APP_BLE_DISABLE_NOTIFICATION_DESC :
        APP_DBG_MSG("* GATT : Disable Server Notification\n");
 8004544:	481c      	ldr	r0, [pc, #112]	; (80045b8 <Update_Service+0x198>)
 8004546:	f008 fc95 	bl	800ce74 <puts>
        aci_gatt_write_char_desc(aP2PClientContext[index].connHandle,
 800454a:	79fb      	ldrb	r3, [r7, #7]
 800454c:	4a14      	ldr	r2, [pc, #80]	; (80045a0 <Update_Service+0x180>)
 800454e:	011b      	lsls	r3, r3, #4
 8004550:	4413      	add	r3, r2
 8004552:	3302      	adds	r3, #2
 8004554:	8818      	ldrh	r0, [r3, #0]
 8004556:	79fb      	ldrb	r3, [r7, #7]
 8004558:	4a11      	ldr	r2, [pc, #68]	; (80045a0 <Update_Service+0x180>)
 800455a:	011b      	lsls	r3, r3, #4
 800455c:	4413      	add	r3, r2
 800455e:	330e      	adds	r3, #14
 8004560:	8819      	ldrh	r1, [r3, #0]
 8004562:	1cbb      	adds	r3, r7, #2
 8004564:	2202      	movs	r2, #2
 8004566:	f006 f865 	bl	800a634 <aci_gatt_write_char_desc>
                                 aP2PClientContext[index].P2PNotificationDescHandle,
                                 2,
                                 (uint8_t *)&disable);
        aP2PClientContext[index].state = APP_BLE_CONNECTED_CLIENT;
 800456a:	79fb      	ldrb	r3, [r7, #7]
 800456c:	4a0c      	ldr	r2, [pc, #48]	; (80045a0 <Update_Service+0x180>)
 800456e:	011b      	lsls	r3, r3, #4
 8004570:	4413      	add	r3, r2
 8004572:	2206      	movs	r2, #6
 8004574:	701a      	strb	r2, [r3, #0]
        break;
 8004576:	e000      	b.n	800457a <Update_Service+0x15a>
      default:
        break;
 8004578:	bf00      	nop
    }
    index++;
 800457a:	79fb      	ldrb	r3, [r7, #7]
 800457c:	3301      	adds	r3, #1
 800457e:	71fb      	strb	r3, [r7, #7]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8004580:	79fb      	ldrb	r3, [r7, #7]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d108      	bne.n	8004598 <Update_Service+0x178>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
 8004586:	79fb      	ldrb	r3, [r7, #7]
 8004588:	4a05      	ldr	r2, [pc, #20]	; (80045a0 <Update_Service+0x180>)
 800458a:	011b      	lsls	r3, r3, #4
 800458c:	4413      	add	r3, r2
 800458e:	781b      	ldrb	r3, [r3, #0]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8004590:	2b00      	cmp	r3, #0
 8004592:	f47f af4f 	bne.w	8004434 <Update_Service+0x14>
  }
  return;
 8004596:	bf00      	nop
 8004598:	bf00      	nop
}
 800459a:	3708      	adds	r7, #8
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	200005d4 	.word	0x200005d4
 80045a4:	0800f160 	.word	0x0800f160
 80045a8:	0800f178 	.word	0x0800f178
 80045ac:	0800f1a0 	.word	0x0800f1a0
 80045b0:	0800f1dc 	.word	0x0800f1dc
 80045b4:	0800f220 	.word	0x0800f220
 80045b8:	0800f244 	.word	0x0800f244

080045bc <LL_PWR_EnableBootC2>:
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80045c0:	4b05      	ldr	r3, [pc, #20]	; (80045d8 <LL_PWR_EnableBootC2+0x1c>)
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	4a04      	ldr	r2, [pc, #16]	; (80045d8 <LL_PWR_EnableBootC2+0x1c>)
 80045c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045ca:	60d3      	str	r3, [r2, #12]
}
 80045cc:	bf00      	nop
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	58000400 	.word	0x58000400

080045dc <LL_C2_EXTI_EnableEvent_32_63>:
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80045e4:	4b06      	ldr	r3, [pc, #24]	; (8004600 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80045e6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80045ea:	4905      	ldr	r1, [pc, #20]	; (8004600 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr
 8004600:	58000800 	.word	0x58000800

08004604 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800460c:	4b05      	ldr	r3, [pc, #20]	; (8004624 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800460e:	6a1a      	ldr	r2, [r3, #32]
 8004610:	4904      	ldr	r1, [pc, #16]	; (8004624 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4313      	orrs	r3, r2
 8004616:	620b      	str	r3, [r1, #32]
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr
 8004624:	58000800 	.word	0x58000800

08004628 <LL_AHB3_GRP1_EnableClock>:
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8004630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004634:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004636:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4313      	orrs	r3, r2
 800463e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8004640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004644:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4013      	ands	r3, r2
 800464a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800464c:	68fb      	ldr	r3, [r7, #12]
}
 800464e:	bf00      	nop
 8004650:	3714      	adds	r7, #20
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800465a:	b480      	push	{r7}
 800465c:	b085      	sub	sp, #20
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8004662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004666:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800466a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4313      	orrs	r3, r2
 8004672:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8004676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800467a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4013      	ands	r3, r2
 8004682:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004684:	68fb      	ldr	r3, [r7, #12]
}
 8004686:	bf00      	nop
 8004688:	3714      	adds	r7, #20
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr

08004692 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8004692:	b480      	push	{r7}
 8004694:	b083      	sub	sp, #12
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	601a      	str	r2, [r3, #0]
}
 80046a6:	bf00      	nop
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b083      	sub	sp, #12
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f043 0201 	orr.w	r2, r3, #1
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	601a      	str	r2, [r3, #0]
}
 80046c6:	bf00      	nop
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr

080046d2 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80046d2:	b480      	push	{r7}
 80046d4:	b083      	sub	sp, #12
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
 80046da:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685a      	ldr	r2, [r3, #4]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	041b      	lsls	r3, r3, #16
 80046e4:	43db      	mvns	r3, r3
 80046e6:	401a      	ands	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	605a      	str	r2, [r3, #4]
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	041b      	lsls	r3, r3, #16
 800470a:	431a      	orrs	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	605a      	str	r2, [r3, #4]
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	43db      	mvns	r3, r3
 800472e:	401a      	ands	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	605a      	str	r2, [r3, #4]
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	609a      	str	r2, [r3, #8]
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	041a      	lsls	r2, r3, #16
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	609a      	str	r2, [r3, #8]
}
 800476e:	bf00      	nop
 8004770:	370c      	adds	r7, #12
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800477a:	b480      	push	{r7}
 800477c:	b083      	sub	sp, #12
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
 8004782:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	68da      	ldr	r2, [r3, #12]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	4013      	ands	r3, r2
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	429a      	cmp	r2, r3
 8004790:	d101      	bne.n	8004796 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8004792:	2301      	movs	r3, #1
 8004794:	e000      	b.n	8004798 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	69da      	ldr	r2, [r3, #28]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	4013      	ands	r3, r2
 80047b6:	683a      	ldr	r2, [r7, #0]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d101      	bne.n	80047c0 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80047bc:	2301      	movs	r3, #1
 80047be:	e000      	b.n	80047c2 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
	...

080047d0 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80047d4:	2102      	movs	r1, #2
 80047d6:	4818      	ldr	r0, [pc, #96]	; (8004838 <HW_IPCC_Rx_Handler+0x68>)
 80047d8:	f7ff ffe4 	bl	80047a4 <LL_C2_IPCC_IsActiveFlag_CHx>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d008      	beq.n	80047f4 <HW_IPCC_Rx_Handler+0x24>
 80047e2:	4b15      	ldr	r3, [pc, #84]	; (8004838 <HW_IPCC_Rx_Handler+0x68>)
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d102      	bne.n	80047f4 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 80047ee:	f000 f8d5 	bl	800499c <HW_IPCC_SYS_EvtHandler>
 80047f2:	e01e      	b.n	8004832 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80047f4:	2101      	movs	r1, #1
 80047f6:	4810      	ldr	r0, [pc, #64]	; (8004838 <HW_IPCC_Rx_Handler+0x68>)
 80047f8:	f7ff ffd4 	bl	80047a4 <LL_C2_IPCC_IsActiveFlag_CHx>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d008      	beq.n	8004814 <HW_IPCC_Rx_Handler+0x44>
 8004802:	4b0d      	ldr	r3, [pc, #52]	; (8004838 <HW_IPCC_Rx_Handler+0x68>)
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d102      	bne.n	8004814 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800480e:	f000 f889 	bl	8004924 <HW_IPCC_BLE_EvtHandler>
 8004812:	e00e      	b.n	8004832 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8004814:	2108      	movs	r1, #8
 8004816:	4808      	ldr	r0, [pc, #32]	; (8004838 <HW_IPCC_Rx_Handler+0x68>)
 8004818:	f7ff ffc4 	bl	80047a4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d008      	beq.n	8004834 <HW_IPCC_Rx_Handler+0x64>
 8004822:	4b05      	ldr	r3, [pc, #20]	; (8004838 <HW_IPCC_Rx_Handler+0x68>)
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f003 0308 	and.w	r3, r3, #8
 800482a:	2b00      	cmp	r3, #0
 800482c:	d102      	bne.n	8004834 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800482e:	f000 f901 	bl	8004a34 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8004832:	bf00      	nop
 8004834:	bf00      	nop
}
 8004836:	bd80      	pop	{r7, pc}
 8004838:	58000c00 	.word	0x58000c00

0800483c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800483c:	b580      	push	{r7, lr}
 800483e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8004840:	2102      	movs	r1, #2
 8004842:	4818      	ldr	r0, [pc, #96]	; (80048a4 <HW_IPCC_Tx_Handler+0x68>)
 8004844:	f7ff ff99 	bl	800477a <LL_C1_IPCC_IsActiveFlag_CHx>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d108      	bne.n	8004860 <HW_IPCC_Tx_Handler+0x24>
 800484e:	4b15      	ldr	r3, [pc, #84]	; (80048a4 <HW_IPCC_Tx_Handler+0x68>)
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d102      	bne.n	8004860 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800485a:	f000 f893 	bl	8004984 <HW_IPCC_SYS_CmdEvtHandler>
 800485e:	e01e      	b.n	800489e <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8004860:	2108      	movs	r1, #8
 8004862:	4810      	ldr	r0, [pc, #64]	; (80048a4 <HW_IPCC_Tx_Handler+0x68>)
 8004864:	f7ff ff89 	bl	800477a <LL_C1_IPCC_IsActiveFlag_CHx>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d108      	bne.n	8004880 <HW_IPCC_Tx_Handler+0x44>
 800486e:	4b0d      	ldr	r3, [pc, #52]	; (80048a4 <HW_IPCC_Tx_Handler+0x68>)
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d102      	bne.n	8004880 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800487a:	f000 f8bd 	bl	80049f8 <HW_IPCC_MM_FreeBufHandler>
 800487e:	e00e      	b.n	800489e <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8004880:	2120      	movs	r1, #32
 8004882:	4808      	ldr	r0, [pc, #32]	; (80048a4 <HW_IPCC_Tx_Handler+0x68>)
 8004884:	f7ff ff79 	bl	800477a <LL_C1_IPCC_IsActiveFlag_CHx>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d108      	bne.n	80048a0 <HW_IPCC_Tx_Handler+0x64>
 800488e:	4b05      	ldr	r3, [pc, #20]	; (80048a4 <HW_IPCC_Tx_Handler+0x68>)
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d102      	bne.n	80048a0 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800489a:	f000 f84f 	bl	800493c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800489e:	bf00      	nop
 80048a0:	bf00      	nop
}
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	58000c00 	.word	0x58000c00

080048a8 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 80048ac:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80048b0:	f7ff fed3 	bl	800465a <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 80048b4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80048b8:	f7ff fea4 	bl	8004604 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80048bc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80048c0:	f7ff fe8c 	bl	80045dc <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80048c4:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80048c6:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80048c8:	f7ff fe78 	bl	80045bc <LL_PWR_EnableBootC2>

  return;
 80048cc:	bf00      	nop
}
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80048d4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80048d8:	f7ff fea6 	bl	8004628 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80048dc:	4806      	ldr	r0, [pc, #24]	; (80048f8 <HW_IPCC_Init+0x28>)
 80048de:	f7ff fee8 	bl	80046b2 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80048e2:	4805      	ldr	r0, [pc, #20]	; (80048f8 <HW_IPCC_Init+0x28>)
 80048e4:	f7ff fed5 	bl	8004692 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80048e8:	202c      	movs	r0, #44	; 0x2c
 80048ea:	f000 fc6c 	bl	80051c6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80048ee:	202d      	movs	r0, #45	; 0x2d
 80048f0:	f000 fc69 	bl	80051c6 <HAL_NVIC_EnableIRQ>

  return;
 80048f4:	bf00      	nop
}
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	58000c00 	.word	0x58000c00

080048fc <HW_IPCC_BLE_Init>:
#endif
/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8004900:	2101      	movs	r1, #1
 8004902:	4802      	ldr	r0, [pc, #8]	; (800490c <HW_IPCC_BLE_Init+0x10>)
 8004904:	f7ff ff0a 	bl	800471c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8004908:	bf00      	nop
}
 800490a:	bd80      	pop	{r7, pc}
 800490c:	58000c00 	.word	0x58000c00

08004910 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8004910:	b580      	push	{r7, lr}
 8004912:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_BLE_CMD_CHANNEL );
 8004914:	2101      	movs	r1, #1
 8004916:	4802      	ldr	r0, [pc, #8]	; (8004920 <HW_IPCC_BLE_SendCmd+0x10>)
 8004918:	f7ff ff20 	bl	800475c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800491c:	bf00      	nop
}
 800491e:	bd80      	pop	{r7, pc}
 8004920:	58000c00 	.word	0x58000c00

08004924 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8004928:	f007 fd3c 	bl	800c3a4 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800492c:	2101      	movs	r1, #1
 800492e:	4802      	ldr	r0, [pc, #8]	; (8004938 <HW_IPCC_BLE_EvtHandler+0x14>)
 8004930:	f7ff ff06 	bl	8004740 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8004934:	bf00      	nop
}
 8004936:	bd80      	pop	{r7, pc}
 8004938:	58000c00 	.word	0x58000c00

0800493c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800493c:	b580      	push	{r7, lr}
 800493e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8004940:	2120      	movs	r1, #32
 8004942:	4803      	ldr	r0, [pc, #12]	; (8004950 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8004944:	f7ff fed8 	bl	80046f8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8004948:	f007 fd5c 	bl	800c404 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800494c:	bf00      	nop
}
 800494e:	bd80      	pop	{r7, pc}
 8004950:	58000c00 	.word	0x58000c00

08004954 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8004954:	b580      	push	{r7, lr}
 8004956:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8004958:	2102      	movs	r1, #2
 800495a:	4802      	ldr	r0, [pc, #8]	; (8004964 <HW_IPCC_SYS_Init+0x10>)
 800495c:	f7ff fede 	bl	800471c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8004960:	bf00      	nop
}
 8004962:	bd80      	pop	{r7, pc}
 8004964:	58000c00 	.word	0x58000c00

08004968 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8004968:	b580      	push	{r7, lr}
 800496a:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800496c:	2102      	movs	r1, #2
 800496e:	4804      	ldr	r0, [pc, #16]	; (8004980 <HW_IPCC_SYS_SendCmd+0x18>)
 8004970:	f7ff fef4 	bl	800475c <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8004974:	2102      	movs	r1, #2
 8004976:	4802      	ldr	r0, [pc, #8]	; (8004980 <HW_IPCC_SYS_SendCmd+0x18>)
 8004978:	f7ff feab 	bl	80046d2 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800497c:	bf00      	nop
}
 800497e:	bd80      	pop	{r7, pc}
 8004980:	58000c00 	.word	0x58000c00

08004984 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8004984:	b580      	push	{r7, lr}
 8004986:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8004988:	2102      	movs	r1, #2
 800498a:	4803      	ldr	r0, [pc, #12]	; (8004998 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800498c:	f7ff feb4 	bl	80046f8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8004990:	f007 fd88 	bl	800c4a4 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8004994:	bf00      	nop
}
 8004996:	bd80      	pop	{r7, pc}
 8004998:	58000c00 	.word	0x58000c00

0800499c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800499c:	b580      	push	{r7, lr}
 800499e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 80049a0:	f007 fd96 	bl	800c4d0 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80049a4:	2102      	movs	r1, #2
 80049a6:	4802      	ldr	r0, [pc, #8]	; (80049b0 <HW_IPCC_SYS_EvtHandler+0x14>)
 80049a8:	f7ff feca 	bl	8004740 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80049ac:	bf00      	nop
}
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	58000c00 	.word	0x58000c00

080049b4 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80049bc:	2108      	movs	r1, #8
 80049be:	480c      	ldr	r0, [pc, #48]	; (80049f0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80049c0:	f7ff fedb 	bl	800477a <LL_C1_IPCC_IsActiveFlag_CHx>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d007      	beq.n	80049da <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 80049ca:	4a0a      	ldr	r2, [pc, #40]	; (80049f4 <HW_IPCC_MM_SendFreeBuf+0x40>)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80049d0:	2108      	movs	r1, #8
 80049d2:	4807      	ldr	r0, [pc, #28]	; (80049f0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80049d4:	f7ff fe7d 	bl	80046d2 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80049d8:	e006      	b.n	80049e8 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4798      	blx	r3
    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80049de:	2108      	movs	r1, #8
 80049e0:	4803      	ldr	r0, [pc, #12]	; (80049f0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80049e2:	f7ff febb 	bl	800475c <LL_C1_IPCC_SetFlag_CHx>
  return;
 80049e6:	bf00      	nop
}
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	58000c00 	.word	0x58000c00
 80049f4:	200005ec 	.word	0x200005ec

080049f8 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80049fc:	2108      	movs	r1, #8
 80049fe:	4806      	ldr	r0, [pc, #24]	; (8004a18 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8004a00:	f7ff fe7a 	bl	80046f8 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8004a04:	4b05      	ldr	r3, [pc, #20]	; (8004a1c <HW_IPCC_MM_FreeBufHandler+0x24>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4798      	blx	r3

  HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8004a0a:	2108      	movs	r1, #8
 8004a0c:	4802      	ldr	r0, [pc, #8]	; (8004a18 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8004a0e:	f7ff fea5 	bl	800475c <LL_C1_IPCC_SetFlag_CHx>

  return;
 8004a12:	bf00      	nop
}
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	58000c00 	.word	0x58000c00
 8004a1c:	200005ec 	.word	0x200005ec

08004a20 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8004a24:	2108      	movs	r1, #8
 8004a26:	4802      	ldr	r0, [pc, #8]	; (8004a30 <HW_IPCC_TRACES_Init+0x10>)
 8004a28:	f7ff fe78 	bl	800471c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8004a2c:	bf00      	nop
}
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	58000c00 	.word	0x58000c00

08004a34 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8004a38:	f007 fdf2 	bl	800c620 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8004a3c:	2108      	movs	r1, #8
 8004a3e:	4802      	ldr	r0, [pc, #8]	; (8004a48 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8004a40:	f7ff fe7e 	bl	8004740 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8004a44:	bf00      	nop
}
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	58000c00 	.word	0x58000c00

08004a4c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8004a4c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a4e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a50:	3304      	adds	r3, #4

08004a52 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a52:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a54:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8004a56:	d3f9      	bcc.n	8004a4c <CopyDataInit>
  bx lr
 8004a58:	4770      	bx	lr

08004a5a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8004a5a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8004a5c:	3004      	adds	r0, #4

08004a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8004a5e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8004a60:	d3fb      	bcc.n	8004a5a <FillZerobss>
  bx lr
 8004a62:	4770      	bx	lr

08004a64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004a64:	480c      	ldr	r0, [pc, #48]	; (8004a98 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8004a66:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004a68:	f000 f954 	bl	8004d14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8004a6c:	480b      	ldr	r0, [pc, #44]	; (8004a9c <LoopForever+0x8>)
 8004a6e:	490c      	ldr	r1, [pc, #48]	; (8004aa0 <LoopForever+0xc>)
 8004a70:	4a0c      	ldr	r2, [pc, #48]	; (8004aa4 <LoopForever+0x10>)
 8004a72:	2300      	movs	r3, #0
 8004a74:	f7ff ffed 	bl	8004a52 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8004a78:	480b      	ldr	r0, [pc, #44]	; (8004aa8 <LoopForever+0x14>)
 8004a7a:	490c      	ldr	r1, [pc, #48]	; (8004aac <LoopForever+0x18>)
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	f7ff ffee 	bl	8004a5e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8004a82:	480b      	ldr	r0, [pc, #44]	; (8004ab0 <LoopForever+0x1c>)
 8004a84:	490b      	ldr	r1, [pc, #44]	; (8004ab4 <LoopForever+0x20>)
 8004a86:	2300      	movs	r3, #0
 8004a88:	f7ff ffe9 	bl	8004a5e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004a8c:	f008 fb5a 	bl	800d144 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8004a90:	f7fd fc76 	bl	8002380 <main>

08004a94 <LoopForever>:

LoopForever:
  b LoopForever
 8004a94:	e7fe      	b.n	8004a94 <LoopForever>
 8004a96:	0000      	.short	0x0000
  ldr   r0, =_estack
 8004a98:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 8004a9c:	20000008 	.word	0x20000008
 8004aa0:	200000ac 	.word	0x200000ac
 8004aa4:	0800f520 	.word	0x0800f520
  INIT_BSS _sbss, _ebss
 8004aa8:	200000fc 	.word	0x200000fc
 8004aac:	20001894 	.word	0x20001894
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8004ab0:	200301e4 	.word	0x200301e4
 8004ab4:	20030a67 	.word	0x20030a67

08004ab8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004ab8:	e7fe      	b.n	8004ab8 <ADC1_IRQHandler>

08004aba <LL_AHB2_GRP1_EnableClock>:
{
 8004aba:	b480      	push	{r7}
 8004abc:	b085      	sub	sp, #20
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ac6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ac8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004ad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ad6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4013      	ands	r3, r2
 8004adc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004ade:	68fb      	ldr	r3, [r7, #12]
}
 8004ae0:	bf00      	nop
 8004ae2:	3714      	adds	r7, #20
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b088      	sub	sp, #32
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	4603      	mov	r3, r0
 8004af4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8004af6:	f107 030c 	add.w	r3, r7, #12
 8004afa:	2200      	movs	r2, #0
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	605a      	str	r2, [r3, #4]
 8004b00:	609a      	str	r2, [r3, #8]
 8004b02:	60da      	str	r2, [r3, #12]
 8004b04:	611a      	str	r2, [r3, #16]

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8004b06:	2002      	movs	r0, #2
 8004b08:	f7ff ffd7 	bl	8004aba <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 8004b0c:	79fb      	ldrb	r3, [r7, #7]
 8004b0e:	4a12      	ldr	r2, [pc, #72]	; (8004b58 <BSP_LED_Init+0x6c>)
 8004b10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b14:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8004b16:	2301      	movs	r3, #1
 8004b18:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8004b1e:	2302      	movs	r3, #2
 8004b20:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8004b22:	79fb      	ldrb	r3, [r7, #7]
 8004b24:	4a0d      	ldr	r2, [pc, #52]	; (8004b5c <BSP_LED_Init+0x70>)
 8004b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b2a:	f107 020c 	add.w	r2, r7, #12
 8004b2e:	4611      	mov	r1, r2
 8004b30:	4618      	mov	r0, r3
 8004b32:	f000 fee1 	bl	80058f8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8004b36:	79fb      	ldrb	r3, [r7, #7]
 8004b38:	4a08      	ldr	r2, [pc, #32]	; (8004b5c <BSP_LED_Init+0x70>)
 8004b3a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004b3e:	79fb      	ldrb	r3, [r7, #7]
 8004b40:	4a05      	ldr	r2, [pc, #20]	; (8004b58 <BSP_LED_Init+0x6c>)
 8004b42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b46:	2200      	movs	r2, #0
 8004b48:	4619      	mov	r1, r3
 8004b4a:	f001 f83d 	bl	8005bc8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3720      	adds	r7, #32
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	0800f3e4 	.word	0x0800f3e4
 8004b5c:	2000000c 	.word	0x2000000c

08004b60 <BSP_LED_On>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	4603      	mov	r3, r0
 8004b68:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8004b6a:	79fb      	ldrb	r3, [r7, #7]
 8004b6c:	4a07      	ldr	r2, [pc, #28]	; (8004b8c <BSP_LED_On+0x2c>)
 8004b6e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004b72:	79fb      	ldrb	r3, [r7, #7]
 8004b74:	4a06      	ldr	r2, [pc, #24]	; (8004b90 <BSP_LED_On+0x30>)
 8004b76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	f001 f823 	bl	8005bc8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3708      	adds	r7, #8
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	2000000c 	.word	0x2000000c
 8004b90:	0800f3e4 	.word	0x0800f3e4

08004b94 <BSP_LED_Off>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8004b9e:	79fb      	ldrb	r3, [r7, #7]
 8004ba0:	4a07      	ldr	r2, [pc, #28]	; (8004bc0 <BSP_LED_Off+0x2c>)
 8004ba2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004ba6:	79fb      	ldrb	r3, [r7, #7]
 8004ba8:	4a06      	ldr	r2, [pc, #24]	; (8004bc4 <BSP_LED_Off+0x30>)
 8004baa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	f001 f809 	bl	8005bc8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3708      	adds	r7, #8
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	2000000c 	.word	0x2000000c
 8004bc4:	0800f3e4 	.word	0x0800f3e4

08004bc8 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b088      	sub	sp, #32
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	4603      	mov	r3, r0
 8004bd0:	460a      	mov	r2, r1
 8004bd2:	71fb      	strb	r3, [r7, #7]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure = {0};
 8004bd8:	f107 030c 	add.w	r3, r7, #12
 8004bdc:	2200      	movs	r2, #0
 8004bde:	601a      	str	r2, [r3, #0]
 8004be0:	605a      	str	r2, [r3, #4]
 8004be2:	609a      	str	r2, [r3, #8]
 8004be4:	60da      	str	r2, [r3, #12]
 8004be6:	611a      	str	r2, [r3, #16]
  static BSP_EXTI_LineCallback button_callback[BUTTONn] = {BUTTON_SW1_EXTI_Callback, BUTTON_SW2_EXTI_Callback, BUTTON_SW3_EXTI_Callback};
  static uint32_t button_interrupt_priority[BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY, BSP_BUTTON_USER_IT_PRIORITY, BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t button_exti_line[BUTTONn] = {BUTTON_SW1_EXTI_LINE, BUTTON_SW2_EXTI_LINE, BUTTON_SW3_EXTI_LINE};

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8004be8:	79fb      	ldrb	r3, [r7, #7]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d103      	bne.n	8004bf6 <BSP_PB_Init+0x2e>
 8004bee:	2001      	movs	r0, #1
 8004bf0:	f7ff ff63 	bl	8004aba <LL_AHB2_GRP1_EnableClock>
 8004bf4:	e00c      	b.n	8004c10 <BSP_PB_Init+0x48>
 8004bf6:	79fb      	ldrb	r3, [r7, #7]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d103      	bne.n	8004c04 <BSP_PB_Init+0x3c>
 8004bfc:	2010      	movs	r0, #16
 8004bfe:	f7ff ff5c 	bl	8004aba <LL_AHB2_GRP1_EnableClock>
 8004c02:	e005      	b.n	8004c10 <BSP_PB_Init+0x48>
 8004c04:	79fb      	ldrb	r3, [r7, #7]
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d102      	bne.n	8004c10 <BSP_PB_Init+0x48>
 8004c0a:	2001      	movs	r0, #1
 8004c0c:	f7ff ff55 	bl	8004aba <LL_AHB2_GRP1_EnableClock>

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8004c10:	79fb      	ldrb	r3, [r7, #7]
 8004c12:	4a29      	ldr	r2, [pc, #164]	; (8004cb8 <BSP_PB_Init+0xf0>)
 8004c14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c18:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8004c1e:	2302      	movs	r3, #2
 8004c20:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8004c22:	79bb      	ldrb	r3, [r7, #6]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10c      	bne.n	8004c42 <BSP_PB_Init+0x7a>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8004c2c:	79fb      	ldrb	r3, [r7, #7]
 8004c2e:	4a23      	ldr	r2, [pc, #140]	; (8004cbc <BSP_PB_Init+0xf4>)
 8004c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c34:	f107 020c 	add.w	r2, r7, #12
 8004c38:	4611      	mov	r1, r2
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 fe5c 	bl	80058f8 <HAL_GPIO_Init>
 8004c40:	e035      	b.n	8004cae <BSP_PB_Init+0xe6>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8004c42:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004c46:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8004c48:	79fb      	ldrb	r3, [r7, #7]
 8004c4a:	4a1c      	ldr	r2, [pc, #112]	; (8004cbc <BSP_PB_Init+0xf4>)
 8004c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c50:	f107 020c 	add.w	r2, r7, #12
 8004c54:	4611      	mov	r1, r2
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 fe4e 	bl	80058f8 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], button_exti_line[Button]);
 8004c5c:	79fb      	ldrb	r3, [r7, #7]
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	4a17      	ldr	r2, [pc, #92]	; (8004cc0 <BSP_PB_Init+0xf8>)
 8004c62:	441a      	add	r2, r3
 8004c64:	79fb      	ldrb	r3, [r7, #7]
 8004c66:	4917      	ldr	r1, [pc, #92]	; (8004cc4 <BSP_PB_Init+0xfc>)
 8004c68:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	4610      	mov	r0, r2
 8004c70:	f000 fe0c 	bl	800588c <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button], HAL_EXTI_COMMON_CB_ID, button_callback[Button]);
 8004c74:	79fb      	ldrb	r3, [r7, #7]
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	4a11      	ldr	r2, [pc, #68]	; (8004cc0 <BSP_PB_Init+0xf8>)
 8004c7a:	1898      	adds	r0, r3, r2
 8004c7c:	79fb      	ldrb	r3, [r7, #7]
 8004c7e:	4a12      	ldr	r2, [pc, #72]	; (8004cc8 <BSP_PB_Init+0x100>)
 8004c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c84:	461a      	mov	r2, r3
 8004c86:	2100      	movs	r1, #0
 8004c88:	f000 fde6 	bl	8005858 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
 8004c8c:	79fb      	ldrb	r3, [r7, #7]
 8004c8e:	4a0f      	ldr	r2, [pc, #60]	; (8004ccc <BSP_PB_Init+0x104>)
 8004c90:	56d0      	ldrsb	r0, [r2, r3]
 8004c92:	79fb      	ldrb	r3, [r7, #7]
 8004c94:	4a0e      	ldr	r2, [pc, #56]	; (8004cd0 <BSP_PB_Init+0x108>)
 8004c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	f000 fa78 	bl	8005192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8004ca2:	79fb      	ldrb	r3, [r7, #7]
 8004ca4:	4a09      	ldr	r2, [pc, #36]	; (8004ccc <BSP_PB_Init+0x104>)
 8004ca6:	56d3      	ldrsb	r3, [r2, r3]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 fa8c 	bl	80051c6 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3720      	adds	r7, #32
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	0800f3ec 	.word	0x0800f3ec
 8004cbc:	20000018 	.word	0x20000018
 8004cc0:	200005f0 	.word	0x200005f0
 8004cc4:	0800f3f8 	.word	0x0800f3f8
 8004cc8:	20000024 	.word	0x20000024
 8004ccc:	0800f3f4 	.word	0x0800f3f4
 8004cd0:	20000030 	.word	0x20000030

08004cd4 <BSP_PB_Callback>:
  *           @arg BUTTON_SW2
  *           @arg BUTTON_SW3
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	4603      	mov	r3, r0
 8004cdc:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8004cde:	bf00      	nop
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <BUTTON_SW1_EXTI_Callback>:
/**
  * @brief  Button SW1 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW1_EXTI_Callback(void)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW1);
 8004cee:	2000      	movs	r0, #0
 8004cf0:	f7ff fff0 	bl	8004cd4 <BSP_PB_Callback>
}
 8004cf4:	bf00      	nop
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <BUTTON_SW2_EXTI_Callback>:
/**
  * @brief  Button SW2 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW2_EXTI_Callback(void)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW2);
 8004cfc:	2001      	movs	r0, #1
 8004cfe:	f7ff ffe9 	bl	8004cd4 <BSP_PB_Callback>
}
 8004d02:	bf00      	nop
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <BUTTON_SW3_EXTI_Callback>:
/**
  * @brief  Button SW3 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW3_EXTI_Callback(void)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW3);
 8004d0a:	2002      	movs	r0, #2
 8004d0c:	f7ff ffe2 	bl	8004cd4 <BSP_PB_Callback>
}
 8004d10:	bf00      	nop
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004d14:	b480      	push	{r7}
 8004d16:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8004d18:	4b24      	ldr	r3, [pc, #144]	; (8004dac <SystemInit+0x98>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8004d1e:	4b23      	ldr	r3, [pc, #140]	; (8004dac <SystemInit+0x98>)
 8004d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d24:	4a21      	ldr	r2, [pc, #132]	; (8004dac <SystemInit+0x98>)
 8004d26:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d2a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d38:	f043 0301 	orr.w	r3, r3, #1
 8004d3c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8004d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d42:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8004d46:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8004d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d52:	4b17      	ldr	r3, [pc, #92]	; (8004db0 <SystemInit+0x9c>)
 8004d54:	4013      	ands	r3, r2
 8004d56:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8004d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d64:	f023 0305 	bic.w	r3, r3, #5
 8004d68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d78:	f023 0301 	bic.w	r3, r3, #1
 8004d7c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8004d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d84:	4a0b      	ldr	r2, [pc, #44]	; (8004db4 <SystemInit+0xa0>)
 8004d86:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004d88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d96:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	619a      	str	r2, [r3, #24]
}
 8004da0:	bf00      	nop
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	e000ed00 	.word	0xe000ed00
 8004db0:	faf6fefb 	.word	0xfaf6fefb
 8004db4:	22041000 	.word	0x22041000

08004db8 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8004db8:	b480      	push	{r7}
 8004dba:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8004dbc:	4b05      	ldr	r3, [pc, #20]	; (8004dd4 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	4a04      	ldr	r2, [pc, #16]	; (8004dd4 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8004dc2:	f043 0301 	orr.w	r3, r3, #1
 8004dc6:	6053      	str	r3, [r2, #4]
}
 8004dc8:	bf00      	nop
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	e0042000 	.word	0xe0042000

08004dd8 <LL_DBGMCU_EnableDBGStopMode>:
{
 8004dd8:	b480      	push	{r7}
 8004dda:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8004ddc:	4b05      	ldr	r3, [pc, #20]	; (8004df4 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	4a04      	ldr	r2, [pc, #16]	; (8004df4 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8004de2:	f043 0302 	orr.w	r3, r3, #2
 8004de6:	6053      	str	r3, [r2, #4]
}
 8004de8:	bf00      	nop
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	e0042000 	.word	0xe0042000

08004df8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e02:	4b0c      	ldr	r3, [pc, #48]	; (8004e34 <HAL_Init+0x3c>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a0b      	ldr	r2, [pc, #44]	; (8004e34 <HAL_Init+0x3c>)
 8004e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e0c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e0e:	2003      	movs	r0, #3
 8004e10:	f000 f9b4 	bl	800517c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004e14:	2000      	movs	r0, #0
 8004e16:	f000 f80f 	bl	8004e38 <HAL_InitTick>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d002      	beq.n	8004e26 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	71fb      	strb	r3, [r7, #7]
 8004e24:	e001      	b.n	8004e2a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004e26:	f7fd fc71 	bl	800270c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004e2a:	79fb      	ldrb	r3, [r7, #7]
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3708      	adds	r7, #8
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	58004000 	.word	0x58004000

08004e38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004e40:	2300      	movs	r3, #0
 8004e42:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8004e44:	4b17      	ldr	r3, [pc, #92]	; (8004ea4 <HAL_InitTick+0x6c>)
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d024      	beq.n	8004e96 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004e4c:	f001 ffe0 	bl	8006e10 <HAL_RCC_GetHCLKFreq>
 8004e50:	4602      	mov	r2, r0
 8004e52:	4b14      	ldr	r3, [pc, #80]	; (8004ea4 <HAL_InitTick+0x6c>)
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	4619      	mov	r1, r3
 8004e58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e5c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e64:	4618      	mov	r0, r3
 8004e66:	f000 f9ca 	bl	80051fe <HAL_SYSTICK_Config>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10f      	bne.n	8004e90 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b0f      	cmp	r3, #15
 8004e74:	d809      	bhi.n	8004e8a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e76:	2200      	movs	r2, #0
 8004e78:	6879      	ldr	r1, [r7, #4]
 8004e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e7e:	f000 f988 	bl	8005192 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004e82:	4a09      	ldr	r2, [pc, #36]	; (8004ea8 <HAL_InitTick+0x70>)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6013      	str	r3, [r2, #0]
 8004e88:	e007      	b.n	8004e9a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	73fb      	strb	r3, [r7, #15]
 8004e8e:	e004      	b.n	8004e9a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	73fb      	strb	r3, [r7, #15]
 8004e94:	e001      	b.n	8004e9a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3710      	adds	r7, #16
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	20000044 	.word	0x20000044
 8004ea8:	20000040 	.word	0x20000040

08004eac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004eac:	b480      	push	{r7}
 8004eae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004eb0:	4b06      	ldr	r3, [pc, #24]	; (8004ecc <HAL_IncTick+0x20>)
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	4b06      	ldr	r3, [pc, #24]	; (8004ed0 <HAL_IncTick+0x24>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4413      	add	r3, r2
 8004ebc:	4a04      	ldr	r2, [pc, #16]	; (8004ed0 <HAL_IncTick+0x24>)
 8004ebe:	6013      	str	r3, [r2, #0]
}
 8004ec0:	bf00      	nop
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	20000044 	.word	0x20000044
 8004ed0:	20000608 	.word	0x20000608

08004ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8004ed8:	4b03      	ldr	r3, [pc, #12]	; (8004ee8 <HAL_GetTick+0x14>)
 8004eda:	681b      	ldr	r3, [r3, #0]
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	20000608 	.word	0x20000608

08004eec <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8004eec:	b480      	push	{r7}
 8004eee:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8004ef0:	4b03      	ldr	r3, [pc, #12]	; (8004f00 <HAL_GetTickPrio+0x14>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	20000040 	.word	0x20000040

08004f04 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8004f08:	f7ff ff56 	bl	8004db8 <LL_DBGMCU_EnableDBGSleepMode>
}
 8004f0c:	bf00      	nop
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8004f14:	f7ff ff60 	bl	8004dd8 <LL_DBGMCU_EnableDBGStopMode>
}
 8004f18:	bf00      	nop
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f003 0307 	and.w	r3, r3, #7
 8004f2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f2c:	4b0c      	ldr	r3, [pc, #48]	; (8004f60 <__NVIC_SetPriorityGrouping+0x44>)
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f38:	4013      	ands	r3, r2
 8004f3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f4e:	4a04      	ldr	r2, [pc, #16]	; (8004f60 <__NVIC_SetPriorityGrouping+0x44>)
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	60d3      	str	r3, [r2, #12]
}
 8004f54:	bf00      	nop
 8004f56:	3714      	adds	r7, #20
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	e000ed00 	.word	0xe000ed00

08004f64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f64:	b480      	push	{r7}
 8004f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f68:	4b04      	ldr	r3, [pc, #16]	; (8004f7c <__NVIC_GetPriorityGrouping+0x18>)
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	0a1b      	lsrs	r3, r3, #8
 8004f6e:	f003 0307 	and.w	r3, r3, #7
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	e000ed00 	.word	0xe000ed00

08004f80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	4603      	mov	r3, r0
 8004f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	db0b      	blt.n	8004faa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f92:	79fb      	ldrb	r3, [r7, #7]
 8004f94:	f003 021f 	and.w	r2, r3, #31
 8004f98:	4907      	ldr	r1, [pc, #28]	; (8004fb8 <__NVIC_EnableIRQ+0x38>)
 8004f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f9e:	095b      	lsrs	r3, r3, #5
 8004fa0:	2001      	movs	r0, #1
 8004fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8004fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004faa:	bf00      	nop
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	e000e100 	.word	0xe000e100

08004fbc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	db12      	blt.n	8004ff4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fce:	79fb      	ldrb	r3, [r7, #7]
 8004fd0:	f003 021f 	and.w	r2, r3, #31
 8004fd4:	490a      	ldr	r1, [pc, #40]	; (8005000 <__NVIC_DisableIRQ+0x44>)
 8004fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fda:	095b      	lsrs	r3, r3, #5
 8004fdc:	2001      	movs	r0, #1
 8004fde:	fa00 f202 	lsl.w	r2, r0, r2
 8004fe2:	3320      	adds	r3, #32
 8004fe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004fe8:	f3bf 8f4f 	dsb	sy
}
 8004fec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004fee:	f3bf 8f6f 	isb	sy
}
 8004ff2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr
 8005000:	e000e100 	.word	0xe000e100

08005004 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	4603      	mov	r3, r0
 800500c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800500e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005012:	2b00      	cmp	r3, #0
 8005014:	db0c      	blt.n	8005030 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005016:	79fb      	ldrb	r3, [r7, #7]
 8005018:	f003 021f 	and.w	r2, r3, #31
 800501c:	4907      	ldr	r1, [pc, #28]	; (800503c <__NVIC_SetPendingIRQ+0x38>)
 800501e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005022:	095b      	lsrs	r3, r3, #5
 8005024:	2001      	movs	r0, #1
 8005026:	fa00 f202 	lsl.w	r2, r0, r2
 800502a:	3340      	adds	r3, #64	; 0x40
 800502c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr
 800503c:	e000e100 	.word	0xe000e100

08005040 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	4603      	mov	r3, r0
 8005048:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800504a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800504e:	2b00      	cmp	r3, #0
 8005050:	db0c      	blt.n	800506c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005052:	79fb      	ldrb	r3, [r7, #7]
 8005054:	f003 021f 	and.w	r2, r3, #31
 8005058:	4907      	ldr	r1, [pc, #28]	; (8005078 <__NVIC_ClearPendingIRQ+0x38>)
 800505a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800505e:	095b      	lsrs	r3, r3, #5
 8005060:	2001      	movs	r0, #1
 8005062:	fa00 f202 	lsl.w	r2, r0, r2
 8005066:	3360      	adds	r3, #96	; 0x60
 8005068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr
 8005078:	e000e100 	.word	0xe000e100

0800507c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	4603      	mov	r3, r0
 8005084:	6039      	str	r1, [r7, #0]
 8005086:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800508c:	2b00      	cmp	r3, #0
 800508e:	db0a      	blt.n	80050a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	b2da      	uxtb	r2, r3
 8005094:	490c      	ldr	r1, [pc, #48]	; (80050c8 <__NVIC_SetPriority+0x4c>)
 8005096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800509a:	0112      	lsls	r2, r2, #4
 800509c:	b2d2      	uxtb	r2, r2
 800509e:	440b      	add	r3, r1
 80050a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050a4:	e00a      	b.n	80050bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	b2da      	uxtb	r2, r3
 80050aa:	4908      	ldr	r1, [pc, #32]	; (80050cc <__NVIC_SetPriority+0x50>)
 80050ac:	79fb      	ldrb	r3, [r7, #7]
 80050ae:	f003 030f 	and.w	r3, r3, #15
 80050b2:	3b04      	subs	r3, #4
 80050b4:	0112      	lsls	r2, r2, #4
 80050b6:	b2d2      	uxtb	r2, r2
 80050b8:	440b      	add	r3, r1
 80050ba:	761a      	strb	r2, [r3, #24]
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	e000e100 	.word	0xe000e100
 80050cc:	e000ed00 	.word	0xe000ed00

080050d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b089      	sub	sp, #36	; 0x24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f003 0307 	and.w	r3, r3, #7
 80050e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	f1c3 0307 	rsb	r3, r3, #7
 80050ea:	2b04      	cmp	r3, #4
 80050ec:	bf28      	it	cs
 80050ee:	2304      	movcs	r3, #4
 80050f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	3304      	adds	r3, #4
 80050f6:	2b06      	cmp	r3, #6
 80050f8:	d902      	bls.n	8005100 <NVIC_EncodePriority+0x30>
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	3b03      	subs	r3, #3
 80050fe:	e000      	b.n	8005102 <NVIC_EncodePriority+0x32>
 8005100:	2300      	movs	r3, #0
 8005102:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005104:	f04f 32ff 	mov.w	r2, #4294967295
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	fa02 f303 	lsl.w	r3, r2, r3
 800510e:	43da      	mvns	r2, r3
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	401a      	ands	r2, r3
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005118:	f04f 31ff 	mov.w	r1, #4294967295
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	fa01 f303 	lsl.w	r3, r1, r3
 8005122:	43d9      	mvns	r1, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005128:	4313      	orrs	r3, r2
         );
}
 800512a:	4618      	mov	r0, r3
 800512c:	3724      	adds	r7, #36	; 0x24
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
	...

08005138 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	3b01      	subs	r3, #1
 8005144:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005148:	d301      	bcc.n	800514e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800514a:	2301      	movs	r3, #1
 800514c:	e00f      	b.n	800516e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800514e:	4a0a      	ldr	r2, [pc, #40]	; (8005178 <SysTick_Config+0x40>)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	3b01      	subs	r3, #1
 8005154:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005156:	210f      	movs	r1, #15
 8005158:	f04f 30ff 	mov.w	r0, #4294967295
 800515c:	f7ff ff8e 	bl	800507c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005160:	4b05      	ldr	r3, [pc, #20]	; (8005178 <SysTick_Config+0x40>)
 8005162:	2200      	movs	r2, #0
 8005164:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005166:	4b04      	ldr	r3, [pc, #16]	; (8005178 <SysTick_Config+0x40>)
 8005168:	2207      	movs	r2, #7
 800516a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3708      	adds	r7, #8
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	e000e010 	.word	0xe000e010

0800517c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f7ff fec9 	bl	8004f1c <__NVIC_SetPriorityGrouping>
}
 800518a:	bf00      	nop
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b086      	sub	sp, #24
 8005196:	af00      	add	r7, sp, #0
 8005198:	4603      	mov	r3, r0
 800519a:	60b9      	str	r1, [r7, #8]
 800519c:	607a      	str	r2, [r7, #4]
 800519e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80051a0:	f7ff fee0 	bl	8004f64 <__NVIC_GetPriorityGrouping>
 80051a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	68b9      	ldr	r1, [r7, #8]
 80051aa:	6978      	ldr	r0, [r7, #20]
 80051ac:	f7ff ff90 	bl	80050d0 <NVIC_EncodePriority>
 80051b0:	4602      	mov	r2, r0
 80051b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051b6:	4611      	mov	r1, r2
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7ff ff5f 	bl	800507c <__NVIC_SetPriority>
}
 80051be:	bf00      	nop
 80051c0:	3718      	adds	r7, #24
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b082      	sub	sp, #8
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	4603      	mov	r3, r0
 80051ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051d4:	4618      	mov	r0, r3
 80051d6:	f7ff fed3 	bl	8004f80 <__NVIC_EnableIRQ>
}
 80051da:	bf00      	nop
 80051dc:	3708      	adds	r7, #8
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b082      	sub	sp, #8
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	4603      	mov	r3, r0
 80051ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80051ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7ff fee3 	bl	8004fbc <__NVIC_DisableIRQ>
}
 80051f6:	bf00      	nop
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}

080051fe <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b082      	sub	sp, #8
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7ff ff96 	bl	8005138 <SysTick_Config>
 800520c:	4603      	mov	r3, r0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3708      	adds	r7, #8
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8005216:	b580      	push	{r7, lr}
 8005218:	b082      	sub	sp, #8
 800521a:	af00      	add	r7, sp, #0
 800521c:	4603      	mov	r3, r0
 800521e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8005220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005224:	4618      	mov	r0, r3
 8005226:	f7ff feed 	bl	8005004 <__NVIC_SetPendingIRQ>
}
 800522a:	bf00      	nop
 800522c:	3708      	adds	r7, #8
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b082      	sub	sp, #8
 8005236:	af00      	add	r7, sp, #0
 8005238:	4603      	mov	r3, r0
 800523a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800523c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005240:	4618      	mov	r0, r3
 8005242:	f7ff fefd 	bl	8005040 <__NVIC_ClearPendingIRQ>
}
 8005246:	bf00      	nop
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
	...

08005250 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e078      	b.n	8005354 <HAL_DMA_Init+0x104>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	461a      	mov	r2, r3
 8005268:	4b3c      	ldr	r3, [pc, #240]	; (800535c <HAL_DMA_Init+0x10c>)
 800526a:	4413      	add	r3, r2
 800526c:	4a3c      	ldr	r2, [pc, #240]	; (8005360 <HAL_DMA_Init+0x110>)
 800526e:	fba2 2303 	umull	r2, r3, r2, r3
 8005272:	091b      	lsrs	r3, r3, #4
 8005274:	009a      	lsls	r2, r3, #2
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a39      	ldr	r2, [pc, #228]	; (8005364 <HAL_DMA_Init+0x114>)
 800527e:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2202      	movs	r2, #2
 8005284:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800529a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80052a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 fa6e 	bl	80057b4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052e0:	d102      	bne.n	80052e8 <HAL_DMA_Init+0x98>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685a      	ldr	r2, [r3, #4]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052f0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80052f4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80052fe:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d010      	beq.n	800532a <HAL_DMA_Init+0xda>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	2b04      	cmp	r3, #4
 800530e:	d80c      	bhi.n	800532a <HAL_DMA_Init+0xda>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 fa7b 	bl	800580c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800531a:	2200      	movs	r2, #0
 800531c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005326:	605a      	str	r2, [r3, #4]
 8005328:	e008      	b.n	800533c <HAL_DMA_Init+0xec>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	bffdfff8 	.word	0xbffdfff8
 8005360:	cccccccd 	.word	0xcccccccd
 8005364:	40020000 	.word	0x40020000

08005368 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
 8005374:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005376:	2300      	movs	r3, #0
 8005378:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005380:	2b01      	cmp	r3, #1
 8005382:	d101      	bne.n	8005388 <HAL_DMA_Start_IT+0x20>
 8005384:	2302      	movs	r3, #2
 8005386:	e066      	b.n	8005456 <HAL_DMA_Start_IT+0xee>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2b01      	cmp	r3, #1
 800539a:	d155      	bne.n	8005448 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2202      	movs	r2, #2
 80053a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f022 0201 	bic.w	r2, r2, #1
 80053b8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	68b9      	ldr	r1, [r7, #8]
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f000 f9b9 	bl	8005738 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d008      	beq.n	80053e0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f042 020e 	orr.w	r2, r2, #14
 80053dc:	601a      	str	r2, [r3, #0]
 80053de:	e00f      	b.n	8005400 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f022 0204 	bic.w	r2, r2, #4
 80053ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f042 020a 	orr.w	r2, r2, #10
 80053fe:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d007      	beq.n	800541e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005418:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800541c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005422:	2b00      	cmp	r3, #0
 8005424:	d007      	beq.n	8005436 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005430:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005434:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f042 0201 	orr.w	r2, r2, #1
 8005444:	601a      	str	r2, [r3, #0]
 8005446:	e005      	b.n	8005454 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005450:	2302      	movs	r3, #2
 8005452:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005454:	7dfb      	ldrb	r3, [r7, #23]
}
 8005456:	4618      	mov	r0, r3
 8005458:	3718      	adds	r7, #24
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800545e:	b480      	push	{r7}
 8005460:	b083      	sub	sp, #12
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d101      	bne.n	8005470 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e04f      	b.n	8005510 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005476:	b2db      	uxtb	r3, r3
 8005478:	2b02      	cmp	r3, #2
 800547a:	d008      	beq.n	800548e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2204      	movs	r2, #4
 8005480:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e040      	b.n	8005510 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f022 020e 	bic.w	r2, r2, #14
 800549c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f022 0201 	bic.w	r2, r2, #1
 80054bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c2:	f003 021c 	and.w	r2, r3, #28
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	2101      	movs	r1, #1
 80054cc:	fa01 f202 	lsl.w	r2, r1, r2
 80054d0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80054da:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00c      	beq.n	80054fe <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054f2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80054fc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2201      	movs	r2, #1
 8005502:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005524:	2300      	movs	r3, #0
 8005526:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b02      	cmp	r3, #2
 8005532:	d005      	beq.n	8005540 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2204      	movs	r2, #4
 8005538:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	73fb      	strb	r3, [r7, #15]
 800553e:	e047      	b.n	80055d0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f022 020e 	bic.w	r2, r2, #14
 800554e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f022 0201 	bic.w	r2, r2, #1
 800555e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800556a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800556e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005574:	f003 021c 	and.w	r2, r3, #28
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557c:	2101      	movs	r1, #1
 800557e:	fa01 f202 	lsl.w	r2, r1, r2
 8005582:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800558c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00c      	beq.n	80055b0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055a4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80055ae:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d003      	beq.n	80055d0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	4798      	blx	r3
    }
  }
  return status;
 80055d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b084      	sub	sp, #16
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f6:	f003 031c 	and.w	r3, r3, #28
 80055fa:	2204      	movs	r2, #4
 80055fc:	409a      	lsls	r2, r3
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	4013      	ands	r3, r2
 8005602:	2b00      	cmp	r3, #0
 8005604:	d026      	beq.n	8005654 <HAL_DMA_IRQHandler+0x7a>
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	f003 0304 	and.w	r3, r3, #4
 800560c:	2b00      	cmp	r3, #0
 800560e:	d021      	beq.n	8005654 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0320 	and.w	r3, r3, #32
 800561a:	2b00      	cmp	r3, #0
 800561c:	d107      	bne.n	800562e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f022 0204 	bic.w	r2, r2, #4
 800562c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005632:	f003 021c 	and.w	r2, r3, #28
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563a:	2104      	movs	r1, #4
 800563c:	fa01 f202 	lsl.w	r2, r1, r2
 8005640:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005646:	2b00      	cmp	r3, #0
 8005648:	d071      	beq.n	800572e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005652:	e06c      	b.n	800572e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005658:	f003 031c 	and.w	r3, r3, #28
 800565c:	2202      	movs	r2, #2
 800565e:	409a      	lsls	r2, r3
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	4013      	ands	r3, r2
 8005664:	2b00      	cmp	r3, #0
 8005666:	d02e      	beq.n	80056c6 <HAL_DMA_IRQHandler+0xec>
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	f003 0302 	and.w	r3, r3, #2
 800566e:	2b00      	cmp	r3, #0
 8005670:	d029      	beq.n	80056c6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0320 	and.w	r3, r3, #32
 800567c:	2b00      	cmp	r3, #0
 800567e:	d10b      	bne.n	8005698 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f022 020a 	bic.w	r2, r2, #10
 800568e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800569c:	f003 021c 	and.w	r2, r3, #28
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a4:	2102      	movs	r1, #2
 80056a6:	fa01 f202 	lsl.w	r2, r1, r2
 80056aa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d038      	beq.n	800572e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80056c4:	e033      	b.n	800572e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ca:	f003 031c 	and.w	r3, r3, #28
 80056ce:	2208      	movs	r2, #8
 80056d0:	409a      	lsls	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	4013      	ands	r3, r2
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d02a      	beq.n	8005730 <HAL_DMA_IRQHandler+0x156>
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	f003 0308 	and.w	r3, r3, #8
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d025      	beq.n	8005730 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f022 020e 	bic.w	r2, r2, #14
 80056f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f8:	f003 021c 	and.w	r2, r3, #28
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005700:	2101      	movs	r1, #1
 8005702:	fa01 f202 	lsl.w	r2, r1, r2
 8005706:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005722:	2b00      	cmp	r3, #0
 8005724:	d004      	beq.n	8005730 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800572e:	bf00      	nop
 8005730:	bf00      	nop
}
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005738:	b480      	push	{r7}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
 8005744:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800574e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005754:	2b00      	cmp	r3, #0
 8005756:	d004      	beq.n	8005762 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005760:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005766:	f003 021c 	and.w	r2, r3, #28
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576e:	2101      	movs	r1, #1
 8005770:	fa01 f202 	lsl.w	r2, r1, r2
 8005774:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	683a      	ldr	r2, [r7, #0]
 800577c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	2b10      	cmp	r3, #16
 8005784:	d108      	bne.n	8005798 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005796:	e007      	b.n	80057a8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68ba      	ldr	r2, [r7, #8]
 800579e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	60da      	str	r2, [r3, #12]
}
 80057a8:	bf00      	nop
 80057aa:	3714      	adds	r7, #20
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057c0:	089b      	lsrs	r3, r3, #2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80057c8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	6493      	str	r3, [r2, #72]	; 0x48
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	3b08      	subs	r3, #8
 80057d8:	4a0a      	ldr	r2, [pc, #40]	; (8005804 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80057da:	fba2 2303 	umull	r2, r3, r2, r3
 80057de:	091b      	lsrs	r3, r3, #4
 80057e0:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a08      	ldr	r2, [pc, #32]	; (8005808 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80057e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f003 031f 	and.w	r3, r3, #31
 80057ee:	2201      	movs	r2, #1
 80057f0:	409a      	lsls	r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80057f6:	bf00      	nop
 80057f8:	3714      	adds	r7, #20
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	cccccccd 	.word	0xcccccccd
 8005808:	40020880 	.word	0x40020880

0800580c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800580c:	b480      	push	{r7}
 800580e:	b085      	sub	sp, #20
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800581c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	4b0b      	ldr	r3, [pc, #44]	; (8005850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005822:	4413      	add	r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	461a      	mov	r2, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a09      	ldr	r2, [pc, #36]	; (8005854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8005830:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	3b01      	subs	r3, #1
 8005836:	f003 0303 	and.w	r3, r3, #3
 800583a:	2201      	movs	r2, #1
 800583c:	409a      	lsls	r2, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005842:	bf00      	nop
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	1000823f 	.word	0x1000823f
 8005854:	40020940 	.word	0x40020940

08005858 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8005858:	b480      	push	{r7}
 800585a:	b087      	sub	sp, #28
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	460b      	mov	r3, r1
 8005862:	607a      	str	r2, [r7, #4]
 8005864:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005866:	2300      	movs	r3, #0
 8005868:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800586a:	7afb      	ldrb	r3, [r7, #11]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d103      	bne.n	8005878 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	605a      	str	r2, [r3, #4]
      break;
 8005876:	e002      	b.n	800587e <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	75fb      	strb	r3, [r7, #23]
      break;
 800587c:	bf00      	nop
  }

  return status;
 800587e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005880:	4618      	mov	r0, r3
 8005882:	371c      	adds	r7, #28
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d101      	bne.n	80058a0 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e003      	b.n	80058a8 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	683a      	ldr	r2, [r7, #0]
 80058a4:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80058a6:	2300      	movs	r3, #0
  }
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b087      	sub	sp, #28
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	0c1b      	lsrs	r3, r3, #16
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 031f 	and.w	r3, r3, #31
 80058d0:	2201      	movs	r2, #1
 80058d2:	fa02 f303 	lsl.w	r3, r2, r3
 80058d6:	613b      	str	r3, [r7, #16]

  regaddr = (&EXTI->SWIER1 + (EXTI_CONFIG_OFFSET * offset));
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	015b      	lsls	r3, r3, #5
 80058dc:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 80058e0:	f603 0308 	addw	r3, r3, #2056	; 0x808
 80058e4:	60fb      	str	r3, [r7, #12]
  *regaddr = maskline;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	601a      	str	r2, [r3, #0]
}
 80058ec:	bf00      	nop
 80058ee:	371c      	adds	r7, #28
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b087      	sub	sp, #28
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005902:	2300      	movs	r3, #0
 8005904:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005906:	e146      	b.n	8005b96 <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	2101      	movs	r1, #1
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	fa01 f303 	lsl.w	r3, r1, r3
 8005914:	4013      	ands	r3, r2
 8005916:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2b00      	cmp	r3, #0
 800591c:	f000 8138 	beq.w	8005b90 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f003 0303 	and.w	r3, r3, #3
 8005928:	2b01      	cmp	r3, #1
 800592a:	d005      	beq.n	8005938 <HAL_GPIO_Init+0x40>
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f003 0303 	and.w	r3, r3, #3
 8005934:	2b02      	cmp	r3, #2
 8005936:	d130      	bne.n	800599a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	005b      	lsls	r3, r3, #1
 8005942:	2203      	movs	r2, #3
 8005944:	fa02 f303 	lsl.w	r3, r2, r3
 8005948:	43db      	mvns	r3, r3
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	4013      	ands	r3, r2
 800594e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	68da      	ldr	r2, [r3, #12]
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	005b      	lsls	r3, r3, #1
 8005958:	fa02 f303 	lsl.w	r3, r2, r3
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	4313      	orrs	r3, r2
 8005960:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	693a      	ldr	r2, [r7, #16]
 8005966:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800596e:	2201      	movs	r2, #1
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	fa02 f303 	lsl.w	r3, r2, r3
 8005976:	43db      	mvns	r3, r3
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	4013      	ands	r3, r2
 800597c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	091b      	lsrs	r3, r3, #4
 8005984:	f003 0201 	and.w	r2, r3, #1
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	fa02 f303 	lsl.w	r3, r2, r3
 800598e:	693a      	ldr	r2, [r7, #16]
 8005990:	4313      	orrs	r3, r2
 8005992:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	693a      	ldr	r2, [r7, #16]
 8005998:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f003 0303 	and.w	r3, r3, #3
 80059a2:	2b03      	cmp	r3, #3
 80059a4:	d017      	beq.n	80059d6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	005b      	lsls	r3, r3, #1
 80059b0:	2203      	movs	r2, #3
 80059b2:	fa02 f303 	lsl.w	r3, r2, r3
 80059b6:	43db      	mvns	r3, r3
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	4013      	ands	r3, r2
 80059bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	689a      	ldr	r2, [r3, #8]
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	005b      	lsls	r3, r3, #1
 80059c6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	693a      	ldr	r2, [r7, #16]
 80059d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f003 0303 	and.w	r3, r3, #3
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d123      	bne.n	8005a2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	08da      	lsrs	r2, r3, #3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	3208      	adds	r2, #8
 80059ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	f003 0307 	and.w	r3, r3, #7
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	220f      	movs	r2, #15
 80059fa:	fa02 f303 	lsl.w	r3, r2, r3
 80059fe:	43db      	mvns	r3, r3
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	4013      	ands	r3, r2
 8005a04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	691a      	ldr	r2, [r3, #16]
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	f003 0307 	and.w	r3, r3, #7
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	fa02 f303 	lsl.w	r3, r2, r3
 8005a16:	693a      	ldr	r2, [r7, #16]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	08da      	lsrs	r2, r3, #3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	3208      	adds	r2, #8
 8005a24:	6939      	ldr	r1, [r7, #16]
 8005a26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	005b      	lsls	r3, r3, #1
 8005a34:	2203      	movs	r2, #3
 8005a36:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3a:	43db      	mvns	r3, r3
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	4013      	ands	r3, r2
 8005a40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	f003 0203 	and.w	r2, r3, #3
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	005b      	lsls	r3, r3, #1
 8005a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a52:	693a      	ldr	r2, [r7, #16]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	f000 8092 	beq.w	8005b90 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005a6c:	4a51      	ldr	r2, [pc, #324]	; (8005bb4 <HAL_GPIO_Init+0x2bc>)
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	089b      	lsrs	r3, r3, #2
 8005a72:	3302      	adds	r3, #2
 8005a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f003 0303 	and.w	r3, r3, #3
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	220f      	movs	r2, #15
 8005a84:	fa02 f303 	lsl.w	r3, r2, r3
 8005a88:	43db      	mvns	r3, r3
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005a96:	d013      	beq.n	8005ac0 <HAL_GPIO_Init+0x1c8>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a47      	ldr	r2, [pc, #284]	; (8005bb8 <HAL_GPIO_Init+0x2c0>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d00d      	beq.n	8005abc <HAL_GPIO_Init+0x1c4>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a46      	ldr	r2, [pc, #280]	; (8005bbc <HAL_GPIO_Init+0x2c4>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d007      	beq.n	8005ab8 <HAL_GPIO_Init+0x1c0>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a45      	ldr	r2, [pc, #276]	; (8005bc0 <HAL_GPIO_Init+0x2c8>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d101      	bne.n	8005ab4 <HAL_GPIO_Init+0x1bc>
 8005ab0:	2304      	movs	r3, #4
 8005ab2:	e006      	b.n	8005ac2 <HAL_GPIO_Init+0x1ca>
 8005ab4:	2307      	movs	r3, #7
 8005ab6:	e004      	b.n	8005ac2 <HAL_GPIO_Init+0x1ca>
 8005ab8:	2302      	movs	r3, #2
 8005aba:	e002      	b.n	8005ac2 <HAL_GPIO_Init+0x1ca>
 8005abc:	2301      	movs	r3, #1
 8005abe:	e000      	b.n	8005ac2 <HAL_GPIO_Init+0x1ca>
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	f002 0203 	and.w	r2, r2, #3
 8005ac8:	0092      	lsls	r2, r2, #2
 8005aca:	4093      	lsls	r3, r2
 8005acc:	693a      	ldr	r2, [r7, #16]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005ad2:	4938      	ldr	r1, [pc, #224]	; (8005bb4 <HAL_GPIO_Init+0x2bc>)
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	089b      	lsrs	r3, r3, #2
 8005ad8:	3302      	adds	r3, #2
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ae0:	4b38      	ldr	r3, [pc, #224]	; (8005bc4 <HAL_GPIO_Init+0x2cc>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	43db      	mvns	r3, r3
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	4013      	ands	r3, r2
 8005aee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d003      	beq.n	8005b04 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005b04:	4a2f      	ldr	r2, [pc, #188]	; (8005bc4 <HAL_GPIO_Init+0x2cc>)
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005b0a:	4b2e      	ldr	r3, [pc, #184]	; (8005bc4 <HAL_GPIO_Init+0x2cc>)
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	43db      	mvns	r3, r3
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	4013      	ands	r3, r2
 8005b18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d003      	beq.n	8005b2e <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8005b26:	693a      	ldr	r2, [r7, #16]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005b2e:	4a25      	ldr	r2, [pc, #148]	; (8005bc4 <HAL_GPIO_Init+0x2cc>)
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005b34:	4b23      	ldr	r3, [pc, #140]	; (8005bc4 <HAL_GPIO_Init+0x2cc>)
 8005b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	43db      	mvns	r3, r3
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	4013      	ands	r3, r2
 8005b44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005b5a:	4a1a      	ldr	r2, [pc, #104]	; (8005bc4 <HAL_GPIO_Init+0x2cc>)
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8005b62:	4b18      	ldr	r3, [pc, #96]	; (8005bc4 <HAL_GPIO_Init+0x2cc>)
 8005b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	43db      	mvns	r3, r3
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	4013      	ands	r3, r2
 8005b72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d003      	beq.n	8005b88 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005b88:	4a0e      	ldr	r2, [pc, #56]	; (8005bc4 <HAL_GPIO_Init+0x2cc>)
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	3301      	adds	r3, #1
 8005b94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f47f aeb1 	bne.w	8005908 <HAL_GPIO_Init+0x10>
  }
}
 8005ba6:	bf00      	nop
 8005ba8:	bf00      	nop
 8005baa:	371c      	adds	r7, #28
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr
 8005bb4:	40010000 	.word	0x40010000
 8005bb8:	48000400 	.word	0x48000400
 8005bbc:	48000800 	.word	0x48000800
 8005bc0:	48001000 	.word	0x48001000
 8005bc4:	58000800 	.word	0x58000800

08005bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	807b      	strh	r3, [r7, #2]
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005bd8:	787b      	ldrb	r3, [r7, #1]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d003      	beq.n	8005be6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005bde:	887a      	ldrh	r2, [r7, #2]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005be4:	e002      	b.n	8005bec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005be6:	887a      	ldrh	r2, [r7, #2]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	4603      	mov	r3, r0
 8005c00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005c02:	4b08      	ldr	r3, [pc, #32]	; (8005c24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c04:	68da      	ldr	r2, [r3, #12]
 8005c06:	88fb      	ldrh	r3, [r7, #6]
 8005c08:	4013      	ands	r3, r2
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d006      	beq.n	8005c1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005c0e:	4a05      	ldr	r2, [pc, #20]	; (8005c24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c10:	88fb      	ldrh	r3, [r7, #6]
 8005c12:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005c14:	88fb      	ldrh	r3, [r7, #6]
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7fb fb8f 	bl	800133a <HAL_GPIO_EXTI_Callback>
  }
}
 8005c1c:	bf00      	nop
 8005c1e:	3708      	adds	r7, #8
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	58000800 	.word	0x58000800

08005c28 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8005c2e:	4b0a      	ldr	r3, [pc, #40]	; (8005c58 <HAL_HSEM_IRQHandler+0x30>)
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8005c34:	4b08      	ldr	r3, [pc, #32]	; (8005c58 <HAL_HSEM_IRQHandler+0x30>)
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	43db      	mvns	r3, r3
 8005c3c:	4906      	ldr	r1, [pc, #24]	; (8005c58 <HAL_HSEM_IRQHandler+0x30>)
 8005c3e:	4013      	ands	r3, r2
 8005c40:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8005c42:	4a05      	ldr	r2, [pc, #20]	; (8005c58 <HAL_HSEM_IRQHandler+0x30>)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 f807 	bl	8005c5c <HAL_HSEM_FreeCallback>
}
 8005c4e:	bf00      	nop
 8005c50:	3708      	adds	r7, #8
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	58001500 	.word	0x58001500

08005c5c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8005c64:	bf00      	nop
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d01e      	beq.n	8005cc0 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8005c82:	4b13      	ldr	r3, [pc, #76]	; (8005cd0 <HAL_IPCC_Init+0x60>)
 8005c84:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d102      	bne.n	8005c98 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f7fc fd4a 	bl	800272c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8005c98:	68b8      	ldr	r0, [r7, #8]
 8005c9a:	f000 f85b 	bl	8005d54 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 f82c 	bl	8005d08 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8005cbe:	e001      	b.n	8005cc4 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8005cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	58000c00 	.word	0x58000c00

08005cd4 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	4613      	mov	r3, r2
 8005ce0:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8005ce2:	bf00      	nop
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b085      	sub	sp, #20
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	60f8      	str	r0, [r7, #12]
 8005cf6:	60b9      	str	r1, [r7, #8]
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8005cfc:	bf00      	nop
 8005cfe:	3714      	adds	r7, #20
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005d10:	2300      	movs	r3, #0
 8005d12:	60fb      	str	r3, [r7, #12]
 8005d14:	e00f      	b.n	8005d36 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	4413      	add	r3, r2
 8005d1e:	4a0b      	ldr	r2, [pc, #44]	; (8005d4c <IPCC_SetDefaultCallbacks+0x44>)
 8005d20:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	3306      	adds	r3, #6
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	4413      	add	r3, r2
 8005d2c:	4a08      	ldr	r2, [pc, #32]	; (8005d50 <IPCC_SetDefaultCallbacks+0x48>)
 8005d2e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	3301      	adds	r3, #1
 8005d34:	60fb      	str	r3, [r7, #12]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2b05      	cmp	r3, #5
 8005d3a:	d9ec      	bls.n	8005d16 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8005d3c:	bf00      	nop
 8005d3e:	bf00      	nop
 8005d40:	3714      	adds	r7, #20
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	08005cd5 	.word	0x08005cd5
 8005d50:	08005cef 	.word	0x08005cef

08005d54 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8005d68:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	223f      	movs	r2, #63	; 0x3f
 8005d6e:	609a      	str	r2, [r3, #8]
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d80:	4b05      	ldr	r3, [pc, #20]	; (8005d98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a04      	ldr	r2, [pc, #16]	; (8005d98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d8a:	6013      	str	r3, [r2, #0]
}
 8005d8c:	bf00      	nop
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	58000400 	.word	0x58000400

08005d9c <LL_PWR_EnableSRAM2Retention>:
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 8005da0:	4b05      	ldr	r3, [pc, #20]	; (8005db8 <LL_PWR_EnableSRAM2Retention+0x1c>)
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	4a04      	ldr	r2, [pc, #16]	; (8005db8 <LL_PWR_EnableSRAM2Retention+0x1c>)
 8005da6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005daa:	6093      	str	r3, [r2, #8]
}
 8005dac:	bf00      	nop
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	58000400 	.word	0x58000400

08005dbc <HAL_PWREx_EnableSRAMRetention>:
  * @note   On devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx retention is extended
  *         to SRAM1, SRAM2a and SRAM2b.
  * @retval None
  */
void HAL_PWREx_EnableSRAMRetention(void)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	af00      	add	r7, sp, #0
  LL_PWR_EnableSRAM2Retention();
 8005dc0:	f7ff ffec 	bl	8005d9c <LL_PWR_EnableSRAM2Retention>
}
 8005dc4:	bf00      	nop
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005dc8:	b480      	push	{r7}
 8005dca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dda:	d101      	bne.n	8005de0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e000      	b.n	8005de2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <LL_RCC_HSE_Enable>:
{
 8005dec:	b480      	push	{r7}
 8005dee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dfe:	6013      	str	r3, [r2, #0]
}
 8005e00:	bf00      	nop
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr

08005e0a <LL_RCC_HSE_Disable>:
{
 8005e0a:	b480      	push	{r7}
 8005e0c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e1c:	6013      	str	r3, [r2, #0]
}
 8005e1e:	bf00      	nop
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <LL_RCC_HSE_IsReady>:
{
 8005e28:	b480      	push	{r7}
 8005e2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e3a:	d101      	bne.n	8005e40 <LL_RCC_HSE_IsReady+0x18>
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e000      	b.n	8005e42 <LL_RCC_HSE_IsReady+0x1a>
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <LL_RCC_HSI_Enable>:
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e5e:	6013      	str	r3, [r2, #0]
}
 8005e60:	bf00      	nop
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr

08005e6a <LL_RCC_HSI_Disable>:
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005e6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e7c:	6013      	str	r3, [r2, #0]
}
 8005e7e:	bf00      	nop
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <LL_RCC_HSI_IsReady>:
{
 8005e88:	b480      	push	{r7}
 8005e8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e9a:	d101      	bne.n	8005ea0 <LL_RCC_HSI_IsReady+0x18>
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e000      	b.n	8005ea2 <LL_RCC_HSI_IsReady+0x1a>
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <LL_RCC_HSI_SetCalibTrimming>:
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	061b      	lsls	r3, r3, #24
 8005ec2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	604b      	str	r3, [r1, #4]
}
 8005eca:	bf00      	nop
 8005ecc:	370c      	adds	r7, #12
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr

08005ed6 <LL_RCC_LSE_Enable>:
{
 8005ed6:	b480      	push	{r7}
 8005ed8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ee2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ee6:	f043 0301 	orr.w	r3, r3, #1
 8005eea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005eee:	bf00      	nop
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <LL_RCC_LSE_Disable>:
{
 8005ef8:	b480      	push	{r7}
 8005efa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f08:	f023 0301 	bic.w	r3, r3, #1
 8005f0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005f10:	bf00      	nop
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <LL_RCC_LSE_EnableBypass>:
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005f1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f2a:	f043 0304 	orr.w	r3, r3, #4
 8005f2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005f32:	bf00      	nop
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <LL_RCC_LSE_DisableBypass>:
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f4c:	f023 0304 	bic.w	r3, r3, #4
 8005f50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005f54:	bf00      	nop
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <LL_RCC_LSE_IsReady>:
{
 8005f5e:	b480      	push	{r7}
 8005f60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f6a:	f003 0302 	and.w	r3, r3, #2
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d101      	bne.n	8005f76 <LL_RCC_LSE_IsReady+0x18>
 8005f72:	2301      	movs	r3, #1
 8005f74:	e000      	b.n	8005f78 <LL_RCC_LSE_IsReady+0x1a>
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr

08005f82 <LL_RCC_LSI1_Enable>:
{
 8005f82:	b480      	push	{r7}
 8005f84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f92:	f043 0301 	orr.w	r3, r3, #1
 8005f96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005f9a:	bf00      	nop
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <LL_RCC_LSI1_Disable>:
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fb4:	f023 0301 	bic.w	r3, r3, #1
 8005fb8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005fbc:	bf00      	nop
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <LL_RCC_LSI1_IsReady>:
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fd2:	f003 0302 	and.w	r3, r3, #2
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d101      	bne.n	8005fde <LL_RCC_LSI1_IsReady+0x18>
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e000      	b.n	8005fe0 <LL_RCC_LSI1_IsReady+0x1a>
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <LL_RCC_LSI2_Enable>:
{
 8005fea:	b480      	push	{r7}
 8005fec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ff6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ffa:	f043 0304 	orr.w	r3, r3, #4
 8005ffe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006002:	bf00      	nop
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <LL_RCC_LSI2_Disable>:
{
 800600c:	b480      	push	{r7}
 800600e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006014:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006018:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800601c:	f023 0304 	bic.w	r3, r3, #4
 8006020:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006024:	bf00      	nop
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr

0800602e <LL_RCC_LSI2_IsReady>:
{
 800602e:	b480      	push	{r7}
 8006030:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8006032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006036:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800603a:	f003 0308 	and.w	r3, r3, #8
 800603e:	2b08      	cmp	r3, #8
 8006040:	d101      	bne.n	8006046 <LL_RCC_LSI2_IsReady+0x18>
 8006042:	2301      	movs	r3, #1
 8006044:	e000      	b.n	8006048 <LL_RCC_LSI2_IsReady+0x1a>
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr

08006052 <LL_RCC_LSI2_SetTrimming>:
{
 8006052:	b480      	push	{r7}
 8006054:	b083      	sub	sp, #12
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800605a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800605e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006062:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	021b      	lsls	r3, r3, #8
 800606a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800606e:	4313      	orrs	r3, r2
 8006070:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006074:	bf00      	nop
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <LL_RCC_MSI_Enable>:
{
 8006080:	b480      	push	{r7}
 8006082:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006084:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800608e:	f043 0301 	orr.w	r3, r3, #1
 8006092:	6013      	str	r3, [r2, #0]
}
 8006094:	bf00      	nop
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <LL_RCC_MSI_Disable>:
{
 800609e:	b480      	push	{r7}
 80060a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80060a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060ac:	f023 0301 	bic.w	r3, r3, #1
 80060b0:	6013      	str	r3, [r2, #0]
}
 80060b2:	bf00      	nop
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <LL_RCC_MSI_IsReady>:
{
 80060bc:	b480      	push	{r7}
 80060be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80060c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 0302 	and.w	r3, r3, #2
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d101      	bne.n	80060d2 <LL_RCC_MSI_IsReady+0x16>
 80060ce:	2301      	movs	r3, #1
 80060d0:	e000      	b.n	80060d4 <LL_RCC_MSI_IsReady+0x18>
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr

080060de <LL_RCC_MSI_SetRange>:
{
 80060de:	b480      	push	{r7}
 80060e0:	b083      	sub	sp, #12
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80060e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	600b      	str	r3, [r1, #0]
}
 80060fa:	bf00      	nop
 80060fc:	370c      	adds	r7, #12
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr

08006106 <LL_RCC_MSI_GetRange>:
{
 8006106:	b480      	push	{r7}
 8006108:	b083      	sub	sp, #12
 800610a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800610c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006116:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2bb0      	cmp	r3, #176	; 0xb0
 800611c:	d901      	bls.n	8006122 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800611e:	23b0      	movs	r3, #176	; 0xb0
 8006120:	607b      	str	r3, [r7, #4]
  return msiRange;
 8006122:	687b      	ldr	r3, [r7, #4]
}
 8006124:	4618      	mov	r0, r3
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <LL_RCC_MSI_SetCalibTrimming>:
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	021b      	lsls	r3, r3, #8
 8006146:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800614a:	4313      	orrs	r3, r2
 800614c:	604b      	str	r3, [r1, #4]
}
 800614e:	bf00      	nop
 8006150:	370c      	adds	r7, #12
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr

0800615a <LL_RCC_SetSysClkSource>:
{
 800615a:	b480      	push	{r7}
 800615c:	b083      	sub	sp, #12
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	f023 0203 	bic.w	r2, r3, #3
 800616c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4313      	orrs	r3, r2
 8006174:	608b      	str	r3, [r1, #8]
}
 8006176:	bf00      	nop
 8006178:	370c      	adds	r7, #12
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr

08006182 <LL_RCC_GetSysClkSource>:
{
 8006182:	b480      	push	{r7}
 8006184:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f003 030c 	and.w	r3, r3, #12
}
 8006190:	4618      	mov	r0, r3
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <LL_RCC_SetAHBPrescaler>:
{
 800619a:	b480      	push	{r7}
 800619c:	b083      	sub	sp, #12
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80061a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	608b      	str	r3, [r1, #8]
}
 80061b6:	bf00      	nop
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr

080061c2 <LL_C2_RCC_SetAHBPrescaler>:
{
 80061c2:	b480      	push	{r7}
 80061c4:	b083      	sub	sp, #12
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80061ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80061d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4313      	orrs	r3, r2
 80061de:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80061e2:	bf00      	nop
 80061e4:	370c      	adds	r7, #12
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr

080061ee <LL_RCC_SetAHB4Prescaler>:
{
 80061ee:	b480      	push	{r7}
 80061f0:	b083      	sub	sp, #12
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80061f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80061fe:	f023 020f 	bic.w	r2, r3, #15
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	091b      	lsrs	r3, r3, #4
 8006206:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800620a:	4313      	orrs	r3, r2
 800620c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <LL_RCC_SetAPB1Prescaler>:
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800622e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4313      	orrs	r3, r2
 8006236:	608b      	str	r3, [r1, #8]
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <LL_RCC_SetAPB2Prescaler>:
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800624c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006256:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4313      	orrs	r3, r2
 800625e:	608b      	str	r3, [r1, #8]
}
 8006260:	bf00      	nop
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <LL_RCC_GetAHBPrescaler>:
{
 800626c:	b480      	push	{r7}
 800626e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800627a:	4618      	mov	r0, r3
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <LL_RCC_GetAHB4Prescaler>:
{
 8006284:	b480      	push	{r7}
 8006286:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800628c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006290:	011b      	lsls	r3, r3, #4
 8006292:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006296:	4618      	mov	r0, r3
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <LL_RCC_GetAPB1Prescaler>:
{
 80062a0:	b480      	push	{r7}
 80062a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80062a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <LL_RCC_GetAPB2Prescaler>:
{
 80062b8:	b480      	push	{r7}
 80062ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80062bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80062d0:	b480      	push	{r7}
 80062d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80062d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062e2:	6013      	str	r3, [r2, #0]
}
 80062e4:	bf00      	nop
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80062ee:	b480      	push	{r7}
 80062f0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80062f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006300:	6013      	str	r3, [r2, #0]
}
 8006302:	bf00      	nop
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800630c:	b480      	push	{r7}
 800630e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800631a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800631e:	d101      	bne.n	8006324 <LL_RCC_PLL_IsReady+0x18>
 8006320:	2301      	movs	r3, #1
 8006322:	e000      	b.n	8006326 <LL_RCC_PLL_IsReady+0x1a>
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006330:	b480      	push	{r7}
 8006332:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	0a1b      	lsrs	r3, r3, #8
 800633c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8006340:	4618      	mov	r0, r3
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr

0800634a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800634a:	b480      	push	{r7}
 800634c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800634e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8006358:	4618      	mov	r0, r3
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006362:	b480      	push	{r7}
 8006364:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8006370:	4618      	mov	r0, r3
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr

0800637a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800637a:	b480      	push	{r7}
 800637c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800637e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	f003 0303 	and.w	r3, r3, #3
}
 8006388:	4618      	mov	r0, r3
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr

08006392 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8006392:	b480      	push	{r7}
 8006394:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063a4:	d101      	bne.n	80063aa <LL_RCC_IsActiveFlag_HPRE+0x18>
 80063a6:	2301      	movs	r3, #1
 80063a8:	e000      	b.n	80063ac <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr

080063b6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80063b6:	b480      	push	{r7}
 80063b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80063ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063be:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80063c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063ca:	d101      	bne.n	80063d0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80063cc:	2301      	movs	r3, #1
 80063ce:	e000      	b.n	80063d2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80063dc:	b480      	push	{r7}
 80063de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80063e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063e4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80063e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063f0:	d101      	bne.n	80063f6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80063f2:	2301      	movs	r3, #1
 80063f4:	e000      	b.n	80063f8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr

08006402 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8006402:	b480      	push	{r7}
 8006404:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006410:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006414:	d101      	bne.n	800641a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006416:	2301      	movs	r3, #1
 8006418:	e000      	b.n	800641c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr

08006426 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8006426:	b480      	push	{r7}
 8006428:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800642a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006434:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006438:	d101      	bne.n	800643e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800643a:	2301      	movs	r3, #1
 800643c:	e000      	b.n	8006440 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800643e:	2300      	movs	r3, #0
}
 8006440:	4618      	mov	r0, r3
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
	...

0800644c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800644c:	b590      	push	{r4, r7, lr}
 800644e:	b08d      	sub	sp, #52	; 0x34
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d101      	bne.n	800645e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e324      	b.n	8006aa8 <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0320 	and.w	r3, r3, #32
 8006466:	2b00      	cmp	r3, #0
 8006468:	f000 808d 	beq.w	8006586 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800646c:	f7ff fe89 	bl	8006182 <LL_RCC_GetSysClkSource>
 8006470:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006472:	f7ff ff82 	bl	800637a <LL_RCC_PLL_GetMainSource>
 8006476:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647a:	2b00      	cmp	r3, #0
 800647c:	d005      	beq.n	800648a <HAL_RCC_OscConfig+0x3e>
 800647e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006480:	2b0c      	cmp	r3, #12
 8006482:	d147      	bne.n	8006514 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8006484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006486:	2b01      	cmp	r3, #1
 8006488:	d144      	bne.n	8006514 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	69db      	ldr	r3, [r3, #28]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d101      	bne.n	8006496 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e308      	b.n	8006aa8 <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800649a:	f7ff fe34 	bl	8006106 <LL_RCC_MSI_GetRange>
 800649e:	4603      	mov	r3, r0
 80064a0:	429c      	cmp	r4, r3
 80064a2:	d914      	bls.n	80064ce <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a8:	4618      	mov	r0, r3
 80064aa:	f000 fcf1 	bl	8006e90 <RCC_SetFlashLatencyFromMSIRange>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d001      	beq.n	80064b8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e2f7      	b.n	8006aa8 <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064bc:	4618      	mov	r0, r3
 80064be:	f7ff fe0e 	bl	80060de <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7ff fe32 	bl	8006130 <LL_RCC_MSI_SetCalibTrimming>
 80064cc:	e013      	b.n	80064f6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7ff fe03 	bl	80060de <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a1b      	ldr	r3, [r3, #32]
 80064dc:	4618      	mov	r0, r3
 80064de:	f7ff fe27 	bl	8006130 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e6:	4618      	mov	r0, r3
 80064e8:	f000 fcd2 	bl	8006e90 <RCC_SetFlashLatencyFromMSIRange>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d001      	beq.n	80064f6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e2d8      	b.n	8006aa8 <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80064f6:	f000 fc8b 	bl	8006e10 <HAL_RCC_GetHCLKFreq>
 80064fa:	4603      	mov	r3, r0
 80064fc:	4aa4      	ldr	r2, [pc, #656]	; (8006790 <HAL_RCC_OscConfig+0x344>)
 80064fe:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006500:	4ba4      	ldr	r3, [pc, #656]	; (8006794 <HAL_RCC_OscConfig+0x348>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4618      	mov	r0, r3
 8006506:	f7fe fc97 	bl	8004e38 <HAL_InitTick>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d039      	beq.n	8006584 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e2c9      	b.n	8006aa8 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	69db      	ldr	r3, [r3, #28]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d01e      	beq.n	800655a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800651c:	f7ff fdb0 	bl	8006080 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006520:	f7fe fcd8 	bl	8004ed4 <HAL_GetTick>
 8006524:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8006526:	e008      	b.n	800653a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006528:	f7fe fcd4 	bl	8004ed4 <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	2b02      	cmp	r3, #2
 8006534:	d901      	bls.n	800653a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e2b6      	b.n	8006aa8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 800653a:	f7ff fdbf 	bl	80060bc <LL_RCC_MSI_IsReady>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d0f1      	beq.n	8006528 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006548:	4618      	mov	r0, r3
 800654a:	f7ff fdc8 	bl	80060de <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	4618      	mov	r0, r3
 8006554:	f7ff fdec 	bl	8006130 <LL_RCC_MSI_SetCalibTrimming>
 8006558:	e015      	b.n	8006586 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800655a:	f7ff fda0 	bl	800609e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800655e:	f7fe fcb9 	bl	8004ed4 <HAL_GetTick>
 8006562:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8006564:	e008      	b.n	8006578 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006566:	f7fe fcb5 	bl	8004ed4 <HAL_GetTick>
 800656a:	4602      	mov	r2, r0
 800656c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656e:	1ad3      	subs	r3, r2, r3
 8006570:	2b02      	cmp	r3, #2
 8006572:	d901      	bls.n	8006578 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006574:	2303      	movs	r3, #3
 8006576:	e297      	b.n	8006aa8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 8006578:	f7ff fda0 	bl	80060bc <LL_RCC_MSI_IsReady>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d1f1      	bne.n	8006566 <HAL_RCC_OscConfig+0x11a>
 8006582:	e000      	b.n	8006586 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006584:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0301 	and.w	r3, r3, #1
 800658e:	2b00      	cmp	r3, #0
 8006590:	d047      	beq.n	8006622 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006592:	f7ff fdf6 	bl	8006182 <LL_RCC_GetSysClkSource>
 8006596:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006598:	f7ff feef 	bl	800637a <LL_RCC_PLL_GetMainSource>
 800659c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800659e:	6a3b      	ldr	r3, [r7, #32]
 80065a0:	2b08      	cmp	r3, #8
 80065a2:	d005      	beq.n	80065b0 <HAL_RCC_OscConfig+0x164>
 80065a4:	6a3b      	ldr	r3, [r7, #32]
 80065a6:	2b0c      	cmp	r3, #12
 80065a8:	d108      	bne.n	80065bc <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	2b03      	cmp	r3, #3
 80065ae:	d105      	bne.n	80065bc <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d134      	bne.n	8006622 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e275      	b.n	8006aa8 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065c4:	d102      	bne.n	80065cc <HAL_RCC_OscConfig+0x180>
 80065c6:	f7ff fc11 	bl	8005dec <LL_RCC_HSE_Enable>
 80065ca:	e001      	b.n	80065d0 <HAL_RCC_OscConfig+0x184>
 80065cc:	f7ff fc1d 	bl	8005e0a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d012      	beq.n	80065fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065d8:	f7fe fc7c 	bl	8004ed4 <HAL_GetTick>
 80065dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80065de:	e008      	b.n	80065f2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065e0:	f7fe fc78 	bl	8004ed4 <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	2b64      	cmp	r3, #100	; 0x64
 80065ec:	d901      	bls.n	80065f2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e25a      	b.n	8006aa8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 80065f2:	f7ff fc19 	bl	8005e28 <LL_RCC_HSE_IsReady>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d0f1      	beq.n	80065e0 <HAL_RCC_OscConfig+0x194>
 80065fc:	e011      	b.n	8006622 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065fe:	f7fe fc69 	bl	8004ed4 <HAL_GetTick>
 8006602:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006604:	e008      	b.n	8006618 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006606:	f7fe fc65 	bl	8004ed4 <HAL_GetTick>
 800660a:	4602      	mov	r2, r0
 800660c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	2b64      	cmp	r3, #100	; 0x64
 8006612:	d901      	bls.n	8006618 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	e247      	b.n	8006aa8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006618:	f7ff fc06 	bl	8005e28 <LL_RCC_HSE_IsReady>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1f1      	bne.n	8006606 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0302 	and.w	r3, r3, #2
 800662a:	2b00      	cmp	r3, #0
 800662c:	d04c      	beq.n	80066c8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800662e:	f7ff fda8 	bl	8006182 <LL_RCC_GetSysClkSource>
 8006632:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006634:	f7ff fea1 	bl	800637a <LL_RCC_PLL_GetMainSource>
 8006638:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	2b04      	cmp	r3, #4
 800663e:	d005      	beq.n	800664c <HAL_RCC_OscConfig+0x200>
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	2b0c      	cmp	r3, #12
 8006644:	d10e      	bne.n	8006664 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	2b02      	cmp	r3, #2
 800664a:	d10b      	bne.n	8006664 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d101      	bne.n	8006658 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e227      	b.n	8006aa8 <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	4618      	mov	r0, r3
 800665e:	f7ff fc25 	bl	8005eac <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006662:	e031      	b.n	80066c8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d019      	beq.n	80066a0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800666c:	f7ff fbee 	bl	8005e4c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006670:	f7fe fc30 	bl	8004ed4 <HAL_GetTick>
 8006674:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8006676:	e008      	b.n	800668a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006678:	f7fe fc2c 	bl	8004ed4 <HAL_GetTick>
 800667c:	4602      	mov	r2, r0
 800667e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	2b02      	cmp	r3, #2
 8006684:	d901      	bls.n	800668a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	e20e      	b.n	8006aa8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 800668a:	f7ff fbfd 	bl	8005e88 <LL_RCC_HSI_IsReady>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d0f1      	beq.n	8006678 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	4618      	mov	r0, r3
 800669a:	f7ff fc07 	bl	8005eac <LL_RCC_HSI_SetCalibTrimming>
 800669e:	e013      	b.n	80066c8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066a0:	f7ff fbe3 	bl	8005e6a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066a4:	f7fe fc16 	bl	8004ed4 <HAL_GetTick>
 80066a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80066aa:	e008      	b.n	80066be <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066ac:	f7fe fc12 	bl	8004ed4 <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d901      	bls.n	80066be <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e1f4      	b.n	8006aa8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 80066be:	f7ff fbe3 	bl	8005e88 <LL_RCC_HSI_IsReady>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1f1      	bne.n	80066ac <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0308 	and.w	r3, r3, #8
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d106      	bne.n	80066e2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f000 80a3 	beq.w	8006828 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d076      	beq.n	80067d8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0310 	and.w	r3, r3, #16
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d046      	beq.n	8006784 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80066f6:	f7ff fc66 	bl	8005fc6 <LL_RCC_LSI1_IsReady>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d113      	bne.n	8006728 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8006700:	f7ff fc3f 	bl	8005f82 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006704:	f7fe fbe6 	bl	8004ed4 <HAL_GetTick>
 8006708:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800670a:	e008      	b.n	800671e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800670c:	f7fe fbe2 	bl	8004ed4 <HAL_GetTick>
 8006710:	4602      	mov	r2, r0
 8006712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	2b02      	cmp	r3, #2
 8006718:	d901      	bls.n	800671e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e1c4      	b.n	8006aa8 <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800671e:	f7ff fc52 	bl	8005fc6 <LL_RCC_LSI1_IsReady>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d0f1      	beq.n	800670c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8006728:	f7ff fc5f 	bl	8005fea <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800672c:	f7fe fbd2 	bl	8004ed4 <HAL_GetTick>
 8006730:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006732:	e008      	b.n	8006746 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006734:	f7fe fbce 	bl	8004ed4 <HAL_GetTick>
 8006738:	4602      	mov	r2, r0
 800673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	2b03      	cmp	r3, #3
 8006740:	d901      	bls.n	8006746 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e1b0      	b.n	8006aa8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006746:	f7ff fc72 	bl	800602e <LL_RCC_LSI2_IsReady>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d0f1      	beq.n	8006734 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	4618      	mov	r0, r3
 8006756:	f7ff fc7c 	bl	8006052 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800675a:	f7ff fc23 	bl	8005fa4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800675e:	f7fe fbb9 	bl	8004ed4 <HAL_GetTick>
 8006762:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006764:	e008      	b.n	8006778 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006766:	f7fe fbb5 	bl	8004ed4 <HAL_GetTick>
 800676a:	4602      	mov	r2, r0
 800676c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	2b02      	cmp	r3, #2
 8006772:	d901      	bls.n	8006778 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8006774:	2303      	movs	r3, #3
 8006776:	e197      	b.n	8006aa8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006778:	f7ff fc25 	bl	8005fc6 <LL_RCC_LSI1_IsReady>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1f1      	bne.n	8006766 <HAL_RCC_OscConfig+0x31a>
 8006782:	e051      	b.n	8006828 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8006784:	f7ff fbfd 	bl	8005f82 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006788:	f7fe fba4 	bl	8004ed4 <HAL_GetTick>
 800678c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800678e:	e00c      	b.n	80067aa <HAL_RCC_OscConfig+0x35e>
 8006790:	2000003c 	.word	0x2000003c
 8006794:	20000040 	.word	0x20000040
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006798:	f7fe fb9c 	bl	8004ed4 <HAL_GetTick>
 800679c:	4602      	mov	r2, r0
 800679e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d901      	bls.n	80067aa <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e17e      	b.n	8006aa8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80067aa:	f7ff fc0c 	bl	8005fc6 <LL_RCC_LSI1_IsReady>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d0f1      	beq.n	8006798 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80067b4:	f7ff fc2a 	bl	800600c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80067b8:	e008      	b.n	80067cc <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80067ba:	f7fe fb8b 	bl	8004ed4 <HAL_GetTick>
 80067be:	4602      	mov	r2, r0
 80067c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c2:	1ad3      	subs	r3, r2, r3
 80067c4:	2b03      	cmp	r3, #3
 80067c6:	d901      	bls.n	80067cc <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80067c8:	2303      	movs	r3, #3
 80067ca:	e16d      	b.n	8006aa8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80067cc:	f7ff fc2f 	bl	800602e <LL_RCC_LSI2_IsReady>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d1f1      	bne.n	80067ba <HAL_RCC_OscConfig+0x36e>
 80067d6:	e027      	b.n	8006828 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80067d8:	f7ff fc18 	bl	800600c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067dc:	f7fe fb7a 	bl	8004ed4 <HAL_GetTick>
 80067e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80067e2:	e008      	b.n	80067f6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80067e4:	f7fe fb76 	bl	8004ed4 <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	2b03      	cmp	r3, #3
 80067f0:	d901      	bls.n	80067f6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e158      	b.n	8006aa8 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80067f6:	f7ff fc1a 	bl	800602e <LL_RCC_LSI2_IsReady>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d1f1      	bne.n	80067e4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8006800:	f7ff fbd0 	bl	8005fa4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006804:	f7fe fb66 	bl	8004ed4 <HAL_GetTick>
 8006808:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800680a:	e008      	b.n	800681e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800680c:	f7fe fb62 	bl	8004ed4 <HAL_GetTick>
 8006810:	4602      	mov	r2, r0
 8006812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	2b02      	cmp	r3, #2
 8006818:	d901      	bls.n	800681e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e144      	b.n	8006aa8 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800681e:	f7ff fbd2 	bl	8005fc6 <LL_RCC_LSI1_IsReady>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1f1      	bne.n	800680c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 0304 	and.w	r3, r3, #4
 8006830:	2b00      	cmp	r3, #0
 8006832:	d05b      	beq.n	80068ec <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006834:	4b9e      	ldr	r3, [pc, #632]	; (8006ab0 <HAL_RCC_OscConfig+0x664>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800683c:	2b00      	cmp	r3, #0
 800683e:	d114      	bne.n	800686a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006840:	f7ff fa9c 	bl	8005d7c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006844:	f7fe fb46 	bl	8004ed4 <HAL_GetTick>
 8006848:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800684a:	e008      	b.n	800685e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800684c:	f7fe fb42 	bl	8004ed4 <HAL_GetTick>
 8006850:	4602      	mov	r2, r0
 8006852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	2b02      	cmp	r3, #2
 8006858:	d901      	bls.n	800685e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e124      	b.n	8006aa8 <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800685e:	4b94      	ldr	r3, [pc, #592]	; (8006ab0 <HAL_RCC_OscConfig+0x664>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006866:	2b00      	cmp	r3, #0
 8006868:	d0f0      	beq.n	800684c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	2b01      	cmp	r3, #1
 8006870:	d102      	bne.n	8006878 <HAL_RCC_OscConfig+0x42c>
 8006872:	f7ff fb30 	bl	8005ed6 <LL_RCC_LSE_Enable>
 8006876:	e00c      	b.n	8006892 <HAL_RCC_OscConfig+0x446>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	2b05      	cmp	r3, #5
 800687e:	d104      	bne.n	800688a <HAL_RCC_OscConfig+0x43e>
 8006880:	f7ff fb4b 	bl	8005f1a <LL_RCC_LSE_EnableBypass>
 8006884:	f7ff fb27 	bl	8005ed6 <LL_RCC_LSE_Enable>
 8006888:	e003      	b.n	8006892 <HAL_RCC_OscConfig+0x446>
 800688a:	f7ff fb35 	bl	8005ef8 <LL_RCC_LSE_Disable>
 800688e:	f7ff fb55 	bl	8005f3c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d014      	beq.n	80068c4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800689a:	f7fe fb1b 	bl	8004ed4 <HAL_GetTick>
 800689e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80068a0:	e00a      	b.n	80068b8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068a2:	f7fe fb17 	bl	8004ed4 <HAL_GetTick>
 80068a6:	4602      	mov	r2, r0
 80068a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d901      	bls.n	80068b8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80068b4:	2303      	movs	r3, #3
 80068b6:	e0f7      	b.n	8006aa8 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 80068b8:	f7ff fb51 	bl	8005f5e <LL_RCC_LSE_IsReady>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d0ef      	beq.n	80068a2 <HAL_RCC_OscConfig+0x456>
 80068c2:	e013      	b.n	80068ec <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068c4:	f7fe fb06 	bl	8004ed4 <HAL_GetTick>
 80068c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80068ca:	e00a      	b.n	80068e2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068cc:	f7fe fb02 	bl	8004ed4 <HAL_GetTick>
 80068d0:	4602      	mov	r2, r0
 80068d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80068da:	4293      	cmp	r3, r2
 80068dc:	d901      	bls.n	80068e2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	e0e2      	b.n	8006aa8 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 80068e2:	f7ff fb3c 	bl	8005f5e <LL_RCC_LSE_IsReady>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d1ef      	bne.n	80068cc <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f000 80d8 	beq.w	8006aa6 <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068f6:	f7ff fc44 	bl	8006182 <LL_RCC_GetSysClkSource>
 80068fa:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80068fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006908:	2b02      	cmp	r3, #2
 800690a:	f040 80a6 	bne.w	8006a5a <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f003 0203 	and.w	r2, r3, #3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006918:	429a      	cmp	r2, r3
 800691a:	d123      	bne.n	8006964 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006926:	429a      	cmp	r2, r3
 8006928:	d11c      	bne.n	8006964 <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	0a1b      	lsrs	r3, r3, #8
 800692e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006936:	429a      	cmp	r2, r3
 8006938:	d114      	bne.n	8006964 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006944:	429a      	cmp	r2, r3
 8006946:	d10d      	bne.n	8006964 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006952:	429a      	cmp	r2, r3
 8006954:	d106      	bne.n	8006964 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006960:	429a      	cmp	r2, r3
 8006962:	d054      	beq.n	8006a0e <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	2b0c      	cmp	r3, #12
 8006968:	d04f      	beq.n	8006a0a <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800696a:	f7ff fcc0 	bl	80062ee <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800696e:	f7fe fab1 	bl	8004ed4 <HAL_GetTick>
 8006972:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006974:	e008      	b.n	8006988 <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006976:	f7fe faad 	bl	8004ed4 <HAL_GetTick>
 800697a:	4602      	mov	r2, r0
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	2b02      	cmp	r3, #2
 8006982:	d901      	bls.n	8006988 <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	e08f      	b.n	8006aa8 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1ef      	bne.n	8006976 <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006996:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800699a:	68da      	ldr	r2, [r3, #12]
 800699c:	4b45      	ldr	r3, [pc, #276]	; (8006ab4 <HAL_RCC_OscConfig+0x668>)
 800699e:	4013      	ands	r3, r2
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80069a8:	4311      	orrs	r1, r2
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80069ae:	0212      	lsls	r2, r2, #8
 80069b0:	4311      	orrs	r1, r2
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80069b6:	4311      	orrs	r1, r2
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80069bc:	4311      	orrs	r1, r2
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80069c2:	430a      	orrs	r2, r1
 80069c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80069c8:	4313      	orrs	r3, r2
 80069ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80069cc:	f7ff fc80 	bl	80062d0 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80069d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80069e0:	f7fe fa78 	bl	8004ed4 <HAL_GetTick>
 80069e4:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069e6:	e008      	b.n	80069fa <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069e8:	f7fe fa74 	bl	8004ed4 <HAL_GetTick>
 80069ec:	4602      	mov	r2, r0
 80069ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d901      	bls.n	80069fa <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	e056      	b.n	8006aa8 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d0ef      	beq.n	80069e8 <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a08:	e04d      	b.n	8006aa6 <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e04c      	b.n	8006aa8 <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d144      	bne.n	8006aa6 <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006a1c:	f7ff fc58 	bl	80062d0 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a2e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006a30:	f7fe fa50 	bl	8004ed4 <HAL_GetTick>
 8006a34:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a36:	e008      	b.n	8006a4a <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a38:	f7fe fa4c 	bl	8004ed4 <HAL_GetTick>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d901      	bls.n	8006a4a <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e02e      	b.n	8006aa8 <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d0ef      	beq.n	8006a38 <HAL_RCC_OscConfig+0x5ec>
 8006a58:	e025      	b.n	8006aa6 <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	2b0c      	cmp	r3, #12
 8006a5e:	d020      	beq.n	8006aa2 <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a60:	f7ff fc45 	bl	80062ee <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a64:	f7fe fa36 	bl	8004ed4 <HAL_GetTick>
 8006a68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a6a:	e008      	b.n	8006a7e <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a6c:	f7fe fa32 	bl	8004ed4 <HAL_GetTick>
 8006a70:	4602      	mov	r2, r0
 8006a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d901      	bls.n	8006a7e <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e014      	b.n	8006aa8 <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1ef      	bne.n	8006a6c <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 8006a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a9a:	f023 0303 	bic.w	r3, r3, #3
 8006a9e:	60d3      	str	r3, [r2, #12]
 8006aa0:	e001      	b.n	8006aa6 <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e000      	b.n	8006aa8 <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3734      	adds	r7, #52	; 0x34
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd90      	pop	{r4, r7, pc}
 8006ab0:	58000400 	.word	0x58000400
 8006ab4:	11c1808c 	.word	0x11c1808c

08006ab8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d101      	bne.n	8006acc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e12d      	b.n	8006d28 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006acc:	4b98      	ldr	r3, [pc, #608]	; (8006d30 <HAL_RCC_ClockConfig+0x278>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0307 	and.w	r3, r3, #7
 8006ad4:	683a      	ldr	r2, [r7, #0]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d91b      	bls.n	8006b12 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ada:	4b95      	ldr	r3, [pc, #596]	; (8006d30 <HAL_RCC_ClockConfig+0x278>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f023 0207 	bic.w	r2, r3, #7
 8006ae2:	4993      	ldr	r1, [pc, #588]	; (8006d30 <HAL_RCC_ClockConfig+0x278>)
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006aea:	f7fe f9f3 	bl	8004ed4 <HAL_GetTick>
 8006aee:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006af0:	e008      	b.n	8006b04 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006af2:	f7fe f9ef 	bl	8004ed4 <HAL_GetTick>
 8006af6:	4602      	mov	r2, r0
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d901      	bls.n	8006b04 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006b00:	2303      	movs	r3, #3
 8006b02:	e111      	b.n	8006d28 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b04:	4b8a      	ldr	r3, [pc, #552]	; (8006d30 <HAL_RCC_ClockConfig+0x278>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 0307 	and.w	r3, r3, #7
 8006b0c:	683a      	ldr	r2, [r7, #0]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d1ef      	bne.n	8006af2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0302 	and.w	r3, r3, #2
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d016      	beq.n	8006b4c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7ff fb39 	bl	800619a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006b28:	f7fe f9d4 	bl	8004ed4 <HAL_GetTick>
 8006b2c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006b2e:	e008      	b.n	8006b42 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006b30:	f7fe f9d0 	bl	8004ed4 <HAL_GetTick>
 8006b34:	4602      	mov	r2, r0
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d901      	bls.n	8006b42 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	e0f2      	b.n	8006d28 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006b42:	f7ff fc26 	bl	8006392 <LL_RCC_IsActiveFlag_HPRE>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d0f1      	beq.n	8006b30 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 0320 	and.w	r3, r3, #32
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d016      	beq.n	8006b86 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	695b      	ldr	r3, [r3, #20]
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7ff fb30 	bl	80061c2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006b62:	f7fe f9b7 	bl	8004ed4 <HAL_GetTick>
 8006b66:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006b68:	e008      	b.n	8006b7c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006b6a:	f7fe f9b3 	bl	8004ed4 <HAL_GetTick>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	1ad3      	subs	r3, r2, r3
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	d901      	bls.n	8006b7c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006b78:	2303      	movs	r3, #3
 8006b7a:	e0d5      	b.n	8006d28 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006b7c:	f7ff fc1b 	bl	80063b6 <LL_RCC_IsActiveFlag_C2HPRE>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d0f1      	beq.n	8006b6a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d016      	beq.n	8006bc0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	699b      	ldr	r3, [r3, #24]
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7ff fb29 	bl	80061ee <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006b9c:	f7fe f99a 	bl	8004ed4 <HAL_GetTick>
 8006ba0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006ba2:	e008      	b.n	8006bb6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006ba4:	f7fe f996 	bl	8004ed4 <HAL_GetTick>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	d901      	bls.n	8006bb6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	e0b8      	b.n	8006d28 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006bb6:	f7ff fc11 	bl	80063dc <LL_RCC_IsActiveFlag_SHDHPRE>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d0f1      	beq.n	8006ba4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0304 	and.w	r3, r3, #4
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d016      	beq.n	8006bfa <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f7ff fb23 	bl	800621c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006bd6:	f7fe f97d 	bl	8004ed4 <HAL_GetTick>
 8006bda:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006bdc:	e008      	b.n	8006bf0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006bde:	f7fe f979 	bl	8004ed4 <HAL_GetTick>
 8006be2:	4602      	mov	r2, r0
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	d901      	bls.n	8006bf0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006bec:	2303      	movs	r3, #3
 8006bee:	e09b      	b.n	8006d28 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006bf0:	f7ff fc07 	bl	8006402 <LL_RCC_IsActiveFlag_PPRE1>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d0f1      	beq.n	8006bde <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 0308 	and.w	r3, r3, #8
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d017      	beq.n	8006c36 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	00db      	lsls	r3, r3, #3
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f7ff fb19 	bl	8006244 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006c12:	f7fe f95f 	bl	8004ed4 <HAL_GetTick>
 8006c16:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006c18:	e008      	b.n	8006c2c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006c1a:	f7fe f95b 	bl	8004ed4 <HAL_GetTick>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	1ad3      	subs	r3, r2, r3
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	d901      	bls.n	8006c2c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e07d      	b.n	8006d28 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006c2c:	f7ff fbfb 	bl	8006426 <LL_RCC_IsActiveFlag_PPRE2>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d0f1      	beq.n	8006c1a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 0301 	and.w	r3, r3, #1
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d043      	beq.n	8006cca <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d106      	bne.n	8006c58 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006c4a:	f7ff f8ed 	bl	8005e28 <LL_RCC_HSE_IsReady>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d11e      	bne.n	8006c92 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	e067      	b.n	8006d28 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	2b03      	cmp	r3, #3
 8006c5e:	d106      	bne.n	8006c6e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006c60:	f7ff fb54 	bl	800630c <LL_RCC_PLL_IsReady>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d113      	bne.n	8006c92 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e05c      	b.n	8006d28 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d106      	bne.n	8006c84 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006c76:	f7ff fa21 	bl	80060bc <LL_RCC_MSI_IsReady>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d108      	bne.n	8006c92 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	e051      	b.n	8006d28 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006c84:	f7ff f900 	bl	8005e88 <LL_RCC_HSI_IsReady>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d101      	bne.n	8006c92 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e04a      	b.n	8006d28 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7ff fa5f 	bl	800615a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c9c:	f7fe f91a 	bl	8004ed4 <HAL_GetTick>
 8006ca0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ca2:	e00a      	b.n	8006cba <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ca4:	f7fe f916 	bl	8004ed4 <HAL_GetTick>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	1ad3      	subs	r3, r2, r3
 8006cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d901      	bls.n	8006cba <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e036      	b.n	8006d28 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cba:	f7ff fa62 	bl	8006182 <LL_RCC_GetSysClkSource>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d1ec      	bne.n	8006ca4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006cca:	4b19      	ldr	r3, [pc, #100]	; (8006d30 <HAL_RCC_ClockConfig+0x278>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 0307 	and.w	r3, r3, #7
 8006cd2:	683a      	ldr	r2, [r7, #0]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d21b      	bcs.n	8006d10 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cd8:	4b15      	ldr	r3, [pc, #84]	; (8006d30 <HAL_RCC_ClockConfig+0x278>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f023 0207 	bic.w	r2, r3, #7
 8006ce0:	4913      	ldr	r1, [pc, #76]	; (8006d30 <HAL_RCC_ClockConfig+0x278>)
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ce8:	f7fe f8f4 	bl	8004ed4 <HAL_GetTick>
 8006cec:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cee:	e008      	b.n	8006d02 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006cf0:	f7fe f8f0 	bl	8004ed4 <HAL_GetTick>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	2b02      	cmp	r3, #2
 8006cfc:	d901      	bls.n	8006d02 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e012      	b.n	8006d28 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d02:	4b0b      	ldr	r3, [pc, #44]	; (8006d30 <HAL_RCC_ClockConfig+0x278>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 0307 	and.w	r3, r3, #7
 8006d0a:	683a      	ldr	r2, [r7, #0]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d1ef      	bne.n	8006cf0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006d10:	f000 f87e 	bl	8006e10 <HAL_RCC_GetHCLKFreq>
 8006d14:	4603      	mov	r3, r0
 8006d16:	4a07      	ldr	r2, [pc, #28]	; (8006d34 <HAL_RCC_ClockConfig+0x27c>)
 8006d18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8006d1a:	f7fe f8e7 	bl	8004eec <HAL_GetTickPrio>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	4618      	mov	r0, r3
 8006d22:	f7fe f889 	bl	8004e38 <HAL_InitTick>
 8006d26:	4603      	mov	r3, r0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	58004000 	.word	0x58004000
 8006d34:	2000003c 	.word	0x2000003c

08006d38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d38:	b590      	push	{r4, r7, lr}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d3e:	f7ff fa20 	bl	8006182 <LL_RCC_GetSysClkSource>
 8006d42:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d10a      	bne.n	8006d60 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006d4a:	f7ff f9dc 	bl	8006106 <LL_RCC_MSI_GetRange>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	091b      	lsrs	r3, r3, #4
 8006d52:	f003 030f 	and.w	r3, r3, #15
 8006d56:	4a2b      	ldr	r2, [pc, #172]	; (8006e04 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d5c:	60fb      	str	r3, [r7, #12]
 8006d5e:	e04b      	b.n	8006df8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2b04      	cmp	r3, #4
 8006d64:	d102      	bne.n	8006d6c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006d66:	4b28      	ldr	r3, [pc, #160]	; (8006e08 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006d68:	60fb      	str	r3, [r7, #12]
 8006d6a:	e045      	b.n	8006df8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2b08      	cmp	r3, #8
 8006d70:	d10a      	bne.n	8006d88 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006d72:	f7ff f829 	bl	8005dc8 <LL_RCC_HSE_IsEnabledDiv2>
 8006d76:	4603      	mov	r3, r0
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d102      	bne.n	8006d82 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006d7c:	4b22      	ldr	r3, [pc, #136]	; (8006e08 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006d7e:	60fb      	str	r3, [r7, #12]
 8006d80:	e03a      	b.n	8006df8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006d82:	4b22      	ldr	r3, [pc, #136]	; (8006e0c <HAL_RCC_GetSysClockFreq+0xd4>)
 8006d84:	60fb      	str	r3, [r7, #12]
 8006d86:	e037      	b.n	8006df8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006d88:	f7ff faf7 	bl	800637a <LL_RCC_PLL_GetMainSource>
 8006d8c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	d003      	beq.n	8006d9c <HAL_RCC_GetSysClockFreq+0x64>
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	2b03      	cmp	r3, #3
 8006d98:	d003      	beq.n	8006da2 <HAL_RCC_GetSysClockFreq+0x6a>
 8006d9a:	e00d      	b.n	8006db8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006d9c:	4b1a      	ldr	r3, [pc, #104]	; (8006e08 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006d9e:	60bb      	str	r3, [r7, #8]
        break;
 8006da0:	e015      	b.n	8006dce <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006da2:	f7ff f811 	bl	8005dc8 <LL_RCC_HSE_IsEnabledDiv2>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d102      	bne.n	8006db2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006dac:	4b16      	ldr	r3, [pc, #88]	; (8006e08 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006dae:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006db0:	e00d      	b.n	8006dce <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8006db2:	4b16      	ldr	r3, [pc, #88]	; (8006e0c <HAL_RCC_GetSysClockFreq+0xd4>)
 8006db4:	60bb      	str	r3, [r7, #8]
        break;
 8006db6:	e00a      	b.n	8006dce <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006db8:	f7ff f9a5 	bl	8006106 <LL_RCC_MSI_GetRange>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	091b      	lsrs	r3, r3, #4
 8006dc0:	f003 030f 	and.w	r3, r3, #15
 8006dc4:	4a0f      	ldr	r2, [pc, #60]	; (8006e04 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dca:	60bb      	str	r3, [r7, #8]
        break;
 8006dcc:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8006dce:	f7ff faaf 	bl	8006330 <LL_RCC_PLL_GetN>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	fb03 f402 	mul.w	r4, r3, r2
 8006dda:	f7ff fac2 	bl	8006362 <LL_RCC_PLL_GetDivider>
 8006dde:	4603      	mov	r3, r0
 8006de0:	091b      	lsrs	r3, r3, #4
 8006de2:	3301      	adds	r3, #1
 8006de4:	fbb4 f4f3 	udiv	r4, r4, r3
 8006de8:	f7ff faaf 	bl	800634a <LL_RCC_PLL_GetR>
 8006dec:	4603      	mov	r3, r0
 8006dee:	0f5b      	lsrs	r3, r3, #29
 8006df0:	3301      	adds	r3, #1
 8006df2:	fbb4 f3f3 	udiv	r3, r4, r3
 8006df6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006df8:	68fb      	ldr	r3, [r7, #12]
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3714      	adds	r7, #20
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd90      	pop	{r4, r7, pc}
 8006e02:	bf00      	nop
 8006e04:	0800f464 	.word	0x0800f464
 8006e08:	00f42400 	.word	0x00f42400
 8006e0c:	01e84800 	.word	0x01e84800

08006e10 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e10:	b598      	push	{r3, r4, r7, lr}
 8006e12:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006e14:	f7ff ff90 	bl	8006d38 <HAL_RCC_GetSysClockFreq>
 8006e18:	4604      	mov	r4, r0
 8006e1a:	f7ff fa27 	bl	800626c <LL_RCC_GetAHBPrescaler>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	091b      	lsrs	r3, r3, #4
 8006e22:	f003 030f 	and.w	r3, r3, #15
 8006e26:	4a03      	ldr	r2, [pc, #12]	; (8006e34 <HAL_RCC_GetHCLKFreq+0x24>)
 8006e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e2c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	bd98      	pop	{r3, r4, r7, pc}
 8006e34:	0800f404 	.word	0x0800f404

08006e38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e38:	b598      	push	{r3, r4, r7, lr}
 8006e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006e3c:	f7ff ffe8 	bl	8006e10 <HAL_RCC_GetHCLKFreq>
 8006e40:	4604      	mov	r4, r0
 8006e42:	f7ff fa2d 	bl	80062a0 <LL_RCC_GetAPB1Prescaler>
 8006e46:	4603      	mov	r3, r0
 8006e48:	0a1b      	lsrs	r3, r3, #8
 8006e4a:	f003 0307 	and.w	r3, r3, #7
 8006e4e:	4a04      	ldr	r2, [pc, #16]	; (8006e60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e54:	f003 031f 	and.w	r3, r3, #31
 8006e58:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	bd98      	pop	{r3, r4, r7, pc}
 8006e60:	0800f444 	.word	0x0800f444

08006e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e64:	b598      	push	{r3, r4, r7, lr}
 8006e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006e68:	f7ff ffd2 	bl	8006e10 <HAL_RCC_GetHCLKFreq>
 8006e6c:	4604      	mov	r4, r0
 8006e6e:	f7ff fa23 	bl	80062b8 <LL_RCC_GetAPB2Prescaler>
 8006e72:	4603      	mov	r3, r0
 8006e74:	0adb      	lsrs	r3, r3, #11
 8006e76:	f003 0307 	and.w	r3, r3, #7
 8006e7a:	4a04      	ldr	r2, [pc, #16]	; (8006e8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e80:	f003 031f 	and.w	r3, r3, #31
 8006e84:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	bd98      	pop	{r3, r4, r7, pc}
 8006e8c:	0800f444 	.word	0x0800f444

08006e90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2bb0      	cmp	r3, #176	; 0xb0
 8006e9c:	d903      	bls.n	8006ea6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8006e9e:	4b14      	ldr	r3, [pc, #80]	; (8006ef0 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8006ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea2:	60fb      	str	r3, [r7, #12]
 8006ea4:	e007      	b.n	8006eb6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	091b      	lsrs	r3, r3, #4
 8006eaa:	f003 030f 	and.w	r3, r3, #15
 8006eae:	4a10      	ldr	r2, [pc, #64]	; (8006ef0 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8006eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006eb4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8006eb6:	f7ff f9e5 	bl	8006284 <LL_RCC_GetAHB4Prescaler>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	091b      	lsrs	r3, r3, #4
 8006ebe:	f003 030f 	and.w	r3, r3, #15
 8006ec2:	4a0c      	ldr	r2, [pc, #48]	; (8006ef4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ece:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	4a09      	ldr	r2, [pc, #36]	; (8006ef8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ed8:	0c9b      	lsrs	r3, r3, #18
 8006eda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f000 f80c 	bl	8006efc <RCC_SetFlashLatency>
 8006ee4:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	0800f464 	.word	0x0800f464
 8006ef4:	0800f404 	.word	0x0800f404
 8006ef8:	431bde83 	.word	0x431bde83

08006efc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006efc:	b590      	push	{r4, r7, lr}
 8006efe:	b08f      	sub	sp, #60	; 0x3c
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8006f06:	4b24      	ldr	r3, [pc, #144]	; (8006f98 <RCC_SetFlashLatency+0x9c>)
 8006f08:	f107 041c 	add.w	r4, r7, #28
 8006f0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006f0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8006f12:	4b22      	ldr	r3, [pc, #136]	; (8006f9c <RCC_SetFlashLatency+0xa0>)
 8006f14:	f107 040c 	add.w	r4, r7, #12
 8006f18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006f1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006f1e:	2300      	movs	r3, #0
 8006f20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006f22:	2300      	movs	r3, #0
 8006f24:	633b      	str	r3, [r7, #48]	; 0x30
 8006f26:	e013      	b.n	8006f50 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	3338      	adds	r3, #56	; 0x38
 8006f2e:	443b      	add	r3, r7
 8006f30:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d807      	bhi.n	8006f4a <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 8006f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	3338      	adds	r3, #56	; 0x38
 8006f40:	443b      	add	r3, r7
 8006f42:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006f46:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8006f48:	e005      	b.n	8006f56 <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	633b      	str	r3, [r7, #48]	; 0x30
 8006f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f52:	2b03      	cmp	r3, #3
 8006f54:	d9e8      	bls.n	8006f28 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8006f56:	4b12      	ldr	r3, [pc, #72]	; (8006fa0 <RCC_SetFlashLatency+0xa4>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f023 0207 	bic.w	r2, r3, #7
 8006f5e:	4910      	ldr	r1, [pc, #64]	; (8006fa0 <RCC_SetFlashLatency+0xa4>)
 8006f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f62:	4313      	orrs	r3, r2
 8006f64:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006f66:	f7fd ffb5 	bl	8004ed4 <HAL_GetTick>
 8006f6a:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006f6c:	e008      	b.n	8006f80 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006f6e:	f7fd ffb1 	bl	8004ed4 <HAL_GetTick>
 8006f72:	4602      	mov	r2, r0
 8006f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f76:	1ad3      	subs	r3, r2, r3
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	d901      	bls.n	8006f80 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	e007      	b.n	8006f90 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006f80:	4b07      	ldr	r3, [pc, #28]	; (8006fa0 <RCC_SetFlashLatency+0xa4>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 0307 	and.w	r3, r3, #7
 8006f88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d1ef      	bne.n	8006f6e <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	373c      	adds	r7, #60	; 0x3c
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd90      	pop	{r4, r7, pc}
 8006f98:	0800f26c 	.word	0x0800f26c
 8006f9c:	0800f27c 	.word	0x0800f27c
 8006fa0:	58004000 	.word	0x58004000

08006fa4 <LL_RCC_LSE_IsEnabled>:
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fb0:	f003 0301 	and.w	r3, r3, #1
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d101      	bne.n	8006fbc <LL_RCC_LSE_IsEnabled+0x18>
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e000      	b.n	8006fbe <LL_RCC_LSE_IsEnabled+0x1a>
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <LL_RCC_LSE_IsReady>:
{
 8006fc8:	b480      	push	{r7}
 8006fca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fd4:	f003 0302 	and.w	r3, r3, #2
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d101      	bne.n	8006fe0 <LL_RCC_LSE_IsReady+0x18>
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e000      	b.n	8006fe2 <LL_RCC_LSE_IsReady+0x1a>
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <LL_RCC_SetRFWKPClockSource>:
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ff8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ffc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007000:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4313      	orrs	r3, r2
 8007008:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800700c:	bf00      	nop
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <LL_RCC_SetSMPSClockSource>:
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8007020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007026:	f023 0203 	bic.w	r2, r3, #3
 800702a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4313      	orrs	r3, r2
 8007032:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007034:	bf00      	nop
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <LL_RCC_SetSMPSPrescaler>:
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8007048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800704c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007052:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4313      	orrs	r3, r2
 800705a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800705c:	bf00      	nop
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <LL_RCC_SetUSARTClockSource>:
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8007070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007078:	f023 0203 	bic.w	r2, r3, #3
 800707c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4313      	orrs	r3, r2
 8007084:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007088:	bf00      	nop
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <LL_RCC_SetLPUARTClockSource>:
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800709c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80070a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80070b4:	bf00      	nop
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <LL_RCC_SetI2CClockSource>:
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80070c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070cc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	091b      	lsrs	r3, r3, #4
 80070d4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80070d8:	43db      	mvns	r3, r3
 80070da:	401a      	ands	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	011b      	lsls	r3, r3, #4
 80070e0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80070e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070e8:	4313      	orrs	r3, r2
 80070ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80070ee:	bf00      	nop
 80070f0:	370c      	adds	r7, #12
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr

080070fa <LL_RCC_SetLPTIMClockSource>:
{
 80070fa:	b480      	push	{r7}
 80070fc:	b083      	sub	sp, #12
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007106:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	0c1b      	lsrs	r3, r3, #16
 800710e:	041b      	lsls	r3, r3, #16
 8007110:	43db      	mvns	r3, r3
 8007112:	401a      	ands	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	041b      	lsls	r3, r3, #16
 8007118:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800711c:	4313      	orrs	r3, r2
 800711e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007122:	bf00      	nop
 8007124:	370c      	adds	r7, #12
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr

0800712e <LL_RCC_SetRNGClockSource>:
{
 800712e:	b480      	push	{r7}
 8007130:	b083      	sub	sp, #12
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8007136:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800713a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800713e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007142:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4313      	orrs	r3, r2
 800714a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800714e:	bf00      	nop
 8007150:	370c      	adds	r7, #12
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr

0800715a <LL_RCC_SetCLK48ClockSource>:
{
 800715a:	b480      	push	{r7}
 800715c:	b083      	sub	sp, #12
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8007162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800716a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800716e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4313      	orrs	r3, r2
 8007176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800717a:	bf00      	nop
 800717c:	370c      	adds	r7, #12
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr

08007186 <LL_RCC_SetADCClockSource>:
{
 8007186:	b480      	push	{r7}
 8007188:	b083      	sub	sp, #12
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800718e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007196:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800719a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80071a6:	bf00      	nop
 80071a8:	370c      	adds	r7, #12
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr

080071b2 <LL_RCC_SetRTCClockSource>:
{
 80071b2:	b480      	push	{r7}
 80071b4:	b083      	sub	sp, #12
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80071ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80071c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80071d2:	bf00      	nop
 80071d4:	370c      	adds	r7, #12
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr

080071de <LL_RCC_GetRTCClockSource>:
{
 80071de:	b480      	push	{r7}
 80071e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80071e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <LL_RCC_ForceBackupDomainReset>:
{
 80071f8:	b480      	push	{r7}
 80071fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80071fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007204:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800720c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007210:	bf00      	nop
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr

0800721a <LL_RCC_ReleaseBackupDomainReset>:
{
 800721a:	b480      	push	{r7}
 800721c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800721e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007226:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800722a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800722e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007232:	bf00      	nop
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b088      	sub	sp, #32
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8007244:	2300      	movs	r3, #0
 8007246:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007248:	2300      	movs	r3, #0
 800724a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007254:	2b00      	cmp	r3, #0
 8007256:	d046      	beq.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8007258:	f7ff ffc1 	bl	80071de <LL_RCC_GetRTCClockSource>
 800725c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	69ba      	ldr	r2, [r7, #24]
 8007264:	429a      	cmp	r2, r3
 8007266:	d03c      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007268:	f7fe fd88 	bl	8005d7c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d105      	bne.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a1b      	ldr	r3, [r3, #32]
 8007276:	4618      	mov	r0, r3
 8007278:	f7ff ff9b 	bl	80071b2 <LL_RCC_SetRTCClockSource>
 800727c:	e02e      	b.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800727e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007286:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8007288:	f7ff ffb6 	bl	80071f8 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800728c:	f7ff ffc5 	bl	800721a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a1b      	ldr	r3, [r3, #32]
 800729a:	4313      	orrs	r3, r2
 800729c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800729e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80072a8:	f7ff fe7c 	bl	8006fa4 <LL_RCC_LSE_IsEnabled>
 80072ac:	4603      	mov	r3, r0
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d114      	bne.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80072b2:	f7fd fe0f 	bl	8004ed4 <HAL_GetTick>
 80072b6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80072b8:	e00b      	b.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072ba:	f7fd fe0b 	bl	8004ed4 <HAL_GetTick>
 80072be:	4602      	mov	r2, r0
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d902      	bls.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 80072cc:	2303      	movs	r3, #3
 80072ce:	77fb      	strb	r3, [r7, #31]
              break;
 80072d0:	e004      	b.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 80072d2:	f7ff fe79 	bl	8006fc8 <LL_RCC_LSE_IsReady>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d1ee      	bne.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80072dc:	7ffb      	ldrb	r3, [r7, #31]
 80072de:	77bb      	strb	r3, [r7, #30]
 80072e0:	e001      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072e2:	7ffb      	ldrb	r3, [r7, #31]
 80072e4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 0301 	and.w	r3, r3, #1
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d004      	beq.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	4618      	mov	r0, r3
 80072f8:	f7ff feb6 	bl	8007068 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 0302 	and.w	r3, r3, #2
 8007304:	2b00      	cmp	r3, #0
 8007306:	d004      	beq.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	4618      	mov	r0, r3
 800730e:	f7ff fec1 	bl	8007094 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 0310 	and.w	r3, r3, #16
 800731a:	2b00      	cmp	r3, #0
 800731c:	d004      	beq.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	4618      	mov	r0, r3
 8007324:	f7ff fee9 	bl	80070fa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0320 	and.w	r3, r3, #32
 8007330:	2b00      	cmp	r3, #0
 8007332:	d004      	beq.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	695b      	ldr	r3, [r3, #20]
 8007338:	4618      	mov	r0, r3
 800733a:	f7ff fede 	bl	80070fa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f003 0304 	and.w	r3, r3, #4
 8007346:	2b00      	cmp	r3, #0
 8007348:	d004      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	4618      	mov	r0, r3
 8007350:	f7ff feb6 	bl	80070c0 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800735c:	2b00      	cmp	r3, #0
 800735e:	d02b      	beq.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	699b      	ldr	r3, [r3, #24]
 8007364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007368:	d008      	beq.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x140>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	699b      	ldr	r3, [r3, #24]
 800736e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007372:	d003      	beq.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x140>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	699b      	ldr	r3, [r3, #24]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d105      	bne.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	4618      	mov	r0, r3
 8007382:	f7ff fed4 	bl	800712e <LL_RCC_SetRNGClockSource>
 8007386:	e00a      	b.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x162>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	699b      	ldr	r3, [r3, #24]
 800738c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007390:	60fb      	str	r3, [r7, #12]
 8007392:	2000      	movs	r0, #0
 8007394:	f7ff fecb 	bl	800712e <LL_RCC_SetRNGClockSource>
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f7ff fede 	bl	800715a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	699b      	ldr	r3, [r3, #24]
 80073a2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80073a6:	d107      	bne.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80073a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073b6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d011      	beq.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	69db      	ldr	r3, [r3, #28]
 80073c8:	4618      	mov	r0, r3
 80073ca:	f7ff fedc 	bl	8007186 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	69db      	ldr	r3, [r3, #28]
 80073d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073d6:	d107      	bne.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80073d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073e6:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d004      	beq.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f8:	4618      	mov	r0, r3
 80073fa:	f7ff fdf7 	bl	8006fec <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007406:	2b00      	cmp	r3, #0
 8007408:	d009      	beq.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800740e:	4618      	mov	r0, r3
 8007410:	f7ff fe16 	bl	8007040 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007418:	4618      	mov	r0, r3
 800741a:	f7ff fdfd 	bl	8007018 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800741e:	7fbb      	ldrb	r3, [r7, #30]
}
 8007420:	4618      	mov	r0, r3
 8007422:	3720      	adds	r7, #32
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d101      	bne.n	800743a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	e09f      	b.n	800757a <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007440:	b2db      	uxtb	r3, r3
 8007442:	2b00      	cmp	r3, #0
 8007444:	d106      	bne.n	8007454 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f7fb f990 	bl	8002774 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2202      	movs	r2, #2
 8007458:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800745c:	4b49      	ldr	r3, [pc, #292]	; (8007584 <HAL_RTC_Init+0x15c>)
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	f003 0310 	and.w	r3, r3, #16
 8007464:	2b10      	cmp	r3, #16
 8007466:	d07e      	beq.n	8007566 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	22ca      	movs	r2, #202	; 0xca
 800746e:	625a      	str	r2, [r3, #36]	; 0x24
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2253      	movs	r2, #83	; 0x53
 8007476:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 f8ab 	bl	80075d4 <RTC_EnterInitMode>
 800747e:	4603      	mov	r3, r0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d00a      	beq.n	800749a <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	22ff      	movs	r2, #255	; 0xff
 800748a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2204      	movs	r2, #4
 8007490:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	73fb      	strb	r3, [r7, #15]
 8007498:	e067      	b.n	800756a <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	6812      	ldr	r2, [r2, #0]
 80074a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80074a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074ac:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	6899      	ldr	r1, [r3, #8]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	685a      	ldr	r2, [r3, #4]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	431a      	orrs	r2, r3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	699b      	ldr	r3, [r3, #24]
 80074c2:	431a      	orrs	r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	430a      	orrs	r2, r1
 80074ca:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	68d2      	ldr	r2, [r2, #12]
 80074d4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	6919      	ldr	r1, [r3, #16]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	041a      	lsls	r2, r3, #16
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	430a      	orrs	r2, r1
 80074e8:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68da      	ldr	r2, [r3, #12]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074f8:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f022 0202 	bic.w	r2, r2, #2
 8007508:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	69da      	ldr	r2, [r3, #28]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	695b      	ldr	r3, [r3, #20]
 8007518:	431a      	orrs	r2, r3
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	430a      	orrs	r2, r1
 8007520:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	f003 0320 	and.w	r3, r3, #32
 800752c:	2b00      	cmp	r3, #0
 800752e:	d113      	bne.n	8007558 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 f829 	bl	8007588 <HAL_RTC_WaitForSynchro>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00d      	beq.n	8007558 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	22ff      	movs	r2, #255	; 0xff
 8007542:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2204      	movs	r2, #4
 8007548:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	e010      	b.n	800757a <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	22ff      	movs	r2, #255	; 0xff
 800755e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8007560:	2300      	movs	r3, #0
 8007562:	73fb      	strb	r3, [r7, #15]
 8007564:	e001      	b.n	800756a <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8007566:	2300      	movs	r3, #0
 8007568:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800756a:	7bfb      	ldrb	r3, [r7, #15]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d103      	bne.n	8007578 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8007578:	7bfb      	ldrb	r3, [r7, #15]
}
 800757a:	4618      	mov	r0, r3
 800757c:	3710      	adds	r7, #16
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	40002800 	.word	0x40002800

08007588 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	68da      	ldr	r2, [r3, #12]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800759e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80075a0:	f7fd fc98 	bl	8004ed4 <HAL_GetTick>
 80075a4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80075a6:	e009      	b.n	80075bc <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80075a8:	f7fd fc94 	bl	8004ed4 <HAL_GetTick>
 80075ac:	4602      	mov	r2, r0
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	1ad3      	subs	r3, r2, r3
 80075b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075b6:	d901      	bls.n	80075bc <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80075b8:	2303      	movs	r3, #3
 80075ba:	e007      	b.n	80075cc <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	f003 0320 	and.w	r3, r3, #32
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d0ee      	beq.n	80075a8 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80075ca:	2300      	movs	r3, #0
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3710      	adds	r7, #16
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d119      	bne.n	800761e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f04f 32ff 	mov.w	r2, #4294967295
 80075f2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80075f4:	f7fd fc6e 	bl	8004ed4 <HAL_GetTick>
 80075f8:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80075fa:	e009      	b.n	8007610 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80075fc:	f7fd fc6a 	bl	8004ed4 <HAL_GetTick>
 8007600:	4602      	mov	r2, r0
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800760a:	d901      	bls.n	8007610 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800760c:	2303      	movs	r3, #3
 800760e:	e007      	b.n	8007620 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800761a:	2b00      	cmp	r3, #0
 800761c:	d0ee      	beq.n	80075fc <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	3710      	adds	r7, #16
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b086      	sub	sp, #24
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f893 3020 	ldrb.w	r3, [r3, #32]
 800763a:	2b01      	cmp	r3, #1
 800763c:	d101      	bne.n	8007642 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800763e:	2302      	movs	r3, #2
 8007640:	e0a8      	b.n	8007794 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2201      	movs	r2, #1
 8007646:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2202      	movs	r2, #2
 800764e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	22ca      	movs	r2, #202	; 0xca
 8007658:	625a      	str	r2, [r3, #36]	; 0x24
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2253      	movs	r2, #83	; 0x53
 8007660:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800766c:	2b00      	cmp	r3, #0
 800766e:	d020      	beq.n	80076b2 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8007670:	f7fd fc30 	bl	8004ed4 <HAL_GetTick>
 8007674:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8007676:	e015      	b.n	80076a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007678:	f7fd fc2c 	bl	8004ed4 <HAL_GetTick>
 800767c:	4602      	mov	r2, r0
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	1ad3      	subs	r3, r2, r3
 8007682:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007686:	d90d      	bls.n	80076a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	22ff      	movs	r2, #255	; 0xff
 800768e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2203      	movs	r2, #3
 8007694:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2200      	movs	r2, #0
 800769c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80076a0:	2303      	movs	r3, #3
 80076a2:	e077      	b.n	8007794 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	f003 0304 	and.w	r3, r3, #4
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d1e2      	bne.n	8007678 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	689a      	ldr	r2, [r3, #8]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076c0:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	b2da      	uxtb	r2, r3
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80076d2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80076d4:	f7fd fbfe 	bl	8004ed4 <HAL_GetTick>
 80076d8:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80076da:	e015      	b.n	8007708 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80076dc:	f7fd fbfa 	bl	8004ed4 <HAL_GetTick>
 80076e0:	4602      	mov	r2, r0
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	1ad3      	subs	r3, r2, r3
 80076e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076ea:	d90d      	bls.n	8007708 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	22ff      	movs	r2, #255	; 0xff
 80076f2:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2203      	movs	r2, #3
 80076f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2200      	movs	r2, #0
 8007700:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8007704:	2303      	movs	r3, #3
 8007706:	e045      	b.n	8007794 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	f003 0304 	and.w	r3, r3, #4
 8007712:	2b00      	cmp	r3, #0
 8007714:	d0e2      	beq.n	80076dc <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	68ba      	ldr	r2, [r7, #8]
 800771c:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	689a      	ldr	r2, [r3, #8]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f022 0207 	bic.w	r2, r2, #7
 800772c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	6899      	ldr	r1, [r3, #8]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	430a      	orrs	r2, r1
 800773c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800773e:	4b17      	ldr	r3, [pc, #92]	; (800779c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007740:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007744:	4a15      	ldr	r2, [pc, #84]	; (800779c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007746:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800774a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800774e:	4b13      	ldr	r3, [pc, #76]	; (800779c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a12      	ldr	r2, [pc, #72]	; (800779c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007754:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007758:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	689a      	ldr	r2, [r3, #8]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007768:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	689a      	ldr	r2, [r3, #8]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007778:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	22ff      	movs	r2, #255	; 0xff
 8007780:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2201      	movs	r2, #1
 8007786:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2200      	movs	r2, #0
 800778e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3718      	adds	r7, #24
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	58000800 	.word	0x58000800

080077a0 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d101      	bne.n	80077b6 <HAL_RTCEx_EnableBypassShadow+0x16>
 80077b2:	2302      	movs	r3, #2
 80077b4:	e024      	b.n	8007800 <HAL_RTCEx_EnableBypassShadow+0x60>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2202      	movs	r2, #2
 80077c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	22ca      	movs	r2, #202	; 0xca
 80077cc:	625a      	str	r2, [r3, #36]	; 0x24
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2253      	movs	r2, #83	; 0x53
 80077d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	689a      	ldr	r2, [r3, #8]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f042 0220 	orr.w	r2, r2, #32
 80077e4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	22ff      	movs	r2, #255	; 0xff
 80077ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2201      	movs	r2, #1
 80077f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <LL_RCC_GetUSARTClockSource>:
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8007814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007818:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4013      	ands	r3, r2
}
 8007820:	4618      	mov	r0, r3
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <LL_RCC_GetLPUARTClockSource>:
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007838:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	4013      	ands	r3, r2
}
 8007840:	4618      	mov	r0, r3
 8007842:	370c      	adds	r7, #12
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d101      	bne.n	800785e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	e042      	b.n	80078e4 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007864:	2b00      	cmp	r3, #0
 8007866:	d106      	bne.n	8007876 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f7fa ffbf 	bl	80027f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2224      	movs	r2, #36	; 0x24
 800787a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f022 0201 	bic.w	r2, r2, #1
 800788c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007892:	2b00      	cmp	r3, #0
 8007894:	d002      	beq.n	800789c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 fe60 	bl	800855c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 fc35 	bl	800810c <UART_SetConfig>
 80078a2:	4603      	mov	r3, r0
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d101      	bne.n	80078ac <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	e01b      	b.n	80078e4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	685a      	ldr	r2, [r3, #4]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80078ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	689a      	ldr	r2, [r3, #8]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80078ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f042 0201 	orr.w	r2, r2, #1
 80078da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 fedf 	bl	80086a0 <UART_CheckIdleState>
 80078e2:	4603      	mov	r3, r0
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3708      	adds	r7, #8
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b08a      	sub	sp, #40	; 0x28
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	4613      	mov	r3, r2
 80078f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007900:	2b20      	cmp	r3, #32
 8007902:	d137      	bne.n	8007974 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d002      	beq.n	8007910 <HAL_UART_Receive_IT+0x24>
 800790a:	88fb      	ldrh	r3, [r7, #6]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d101      	bne.n	8007914 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	e030      	b.n	8007976 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2200      	movs	r2, #0
 8007918:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a18      	ldr	r2, [pc, #96]	; (8007980 <HAL_UART_Receive_IT+0x94>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d01f      	beq.n	8007964 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800792e:	2b00      	cmp	r3, #0
 8007930:	d018      	beq.n	8007964 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	e853 3f00 	ldrex	r3, [r3]
 800793e:	613b      	str	r3, [r7, #16]
   return(result);
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007946:	627b      	str	r3, [r7, #36]	; 0x24
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	461a      	mov	r2, r3
 800794e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007950:	623b      	str	r3, [r7, #32]
 8007952:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007954:	69f9      	ldr	r1, [r7, #28]
 8007956:	6a3a      	ldr	r2, [r7, #32]
 8007958:	e841 2300 	strex	r3, r2, [r1]
 800795c:	61bb      	str	r3, [r7, #24]
   return(result);
 800795e:	69bb      	ldr	r3, [r7, #24]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d1e6      	bne.n	8007932 <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007964:	88fb      	ldrh	r3, [r7, #6]
 8007966:	461a      	mov	r2, r3
 8007968:	68b9      	ldr	r1, [r7, #8]
 800796a:	68f8      	ldr	r0, [r7, #12]
 800796c:	f000 ffaa 	bl	80088c4 <UART_Start_Receive_IT>
 8007970:	4603      	mov	r3, r0
 8007972:	e000      	b.n	8007976 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007974:	2302      	movs	r3, #2
  }
}
 8007976:	4618      	mov	r0, r3
 8007978:	3728      	adds	r7, #40	; 0x28
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	40008000 	.word	0x40008000

08007984 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b08a      	sub	sp, #40	; 0x28
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	4613      	mov	r3, r2
 8007990:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007998:	2b20      	cmp	r3, #32
 800799a:	d167      	bne.n	8007a6c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d002      	beq.n	80079a8 <HAL_UART_Transmit_DMA+0x24>
 80079a2:	88fb      	ldrh	r3, [r7, #6]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d101      	bne.n	80079ac <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	e060      	b.n	8007a6e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	68ba      	ldr	r2, [r7, #8]
 80079b0:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	88fa      	ldrh	r2, [r7, #6]
 80079b6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	88fa      	ldrh	r2, [r7, #6]
 80079be:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2221      	movs	r2, #33	; 0x21
 80079ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d028      	beq.n	8007a2c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079de:	4a26      	ldr	r2, [pc, #152]	; (8007a78 <HAL_UART_Transmit_DMA+0xf4>)
 80079e0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079e6:	4a25      	ldr	r2, [pc, #148]	; (8007a7c <HAL_UART_Transmit_DMA+0xf8>)
 80079e8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079ee:	4a24      	ldr	r2, [pc, #144]	; (8007a80 <HAL_UART_Transmit_DMA+0xfc>)
 80079f0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079f6:	2200      	movs	r2, #0
 80079f8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a02:	4619      	mov	r1, r3
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	3328      	adds	r3, #40	; 0x28
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	88fb      	ldrh	r3, [r7, #6]
 8007a0e:	f7fd fcab 	bl	8005368 <HAL_DMA_Start_IT>
 8007a12:	4603      	mov	r3, r0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d009      	beq.n	8007a2c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2210      	movs	r2, #16
 8007a1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2220      	movs	r2, #32
 8007a24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e020      	b.n	8007a6e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2240      	movs	r2, #64	; 0x40
 8007a32:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	3308      	adds	r3, #8
 8007a3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	e853 3f00 	ldrex	r3, [r3]
 8007a42:	613b      	str	r3, [r7, #16]
   return(result);
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	3308      	adds	r3, #8
 8007a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a54:	623a      	str	r2, [r7, #32]
 8007a56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a58:	69f9      	ldr	r1, [r7, #28]
 8007a5a:	6a3a      	ldr	r2, [r7, #32]
 8007a5c:	e841 2300 	strex	r3, r2, [r1]
 8007a60:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d1e5      	bne.n	8007a34 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	e000      	b.n	8007a6e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007a6c:	2302      	movs	r3, #2
  }
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3728      	adds	r7, #40	; 0x28
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	08008c57 	.word	0x08008c57
 8007a7c:	08008cf1 	.word	0x08008cf1
 8007a80:	08008d0d 	.word	0x08008d0d

08007a84 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b0ba      	sub	sp, #232	; 0xe8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	69db      	ldr	r3, [r3, #28]
 8007a92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007aaa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007aae:	f640 030f 	movw	r3, #2063	; 0x80f
 8007ab2:	4013      	ands	r3, r2
 8007ab4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007ab8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d11b      	bne.n	8007af8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007ac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ac4:	f003 0320 	and.w	r3, r3, #32
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d015      	beq.n	8007af8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007acc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ad0:	f003 0320 	and.w	r3, r3, #32
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d105      	bne.n	8007ae4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007ad8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d009      	beq.n	8007af8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	f000 82e3 	beq.w	80080b4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	4798      	blx	r3
      }
      return;
 8007af6:	e2dd      	b.n	80080b4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007af8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f000 8123 	beq.w	8007d48 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007b02:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007b06:	4b8d      	ldr	r3, [pc, #564]	; (8007d3c <HAL_UART_IRQHandler+0x2b8>)
 8007b08:	4013      	ands	r3, r2
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d106      	bne.n	8007b1c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007b0e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007b12:	4b8b      	ldr	r3, [pc, #556]	; (8007d40 <HAL_UART_IRQHandler+0x2bc>)
 8007b14:	4013      	ands	r3, r2
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	f000 8116 	beq.w	8007d48 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b20:	f003 0301 	and.w	r3, r3, #1
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d011      	beq.n	8007b4c <HAL_UART_IRQHandler+0xc8>
 8007b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00b      	beq.n	8007b4c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b42:	f043 0201 	orr.w	r2, r3, #1
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b50:	f003 0302 	and.w	r3, r3, #2
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d011      	beq.n	8007b7c <HAL_UART_IRQHandler+0xf8>
 8007b58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b5c:	f003 0301 	and.w	r3, r3, #1
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d00b      	beq.n	8007b7c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2202      	movs	r2, #2
 8007b6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b72:	f043 0204 	orr.w	r2, r3, #4
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b80:	f003 0304 	and.w	r3, r3, #4
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d011      	beq.n	8007bac <HAL_UART_IRQHandler+0x128>
 8007b88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b8c:	f003 0301 	and.w	r3, r3, #1
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d00b      	beq.n	8007bac <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2204      	movs	r2, #4
 8007b9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ba2:	f043 0202 	orr.w	r2, r3, #2
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bb0:	f003 0308 	and.w	r3, r3, #8
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d017      	beq.n	8007be8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bbc:	f003 0320 	and.w	r3, r3, #32
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d105      	bne.n	8007bd0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007bc4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007bc8:	4b5c      	ldr	r3, [pc, #368]	; (8007d3c <HAL_UART_IRQHandler+0x2b8>)
 8007bca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00b      	beq.n	8007be8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	2208      	movs	r2, #8
 8007bd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bde:	f043 0208 	orr.w	r2, r3, #8
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d012      	beq.n	8007c1a <HAL_UART_IRQHandler+0x196>
 8007bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bf8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d00c      	beq.n	8007c1a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c10:	f043 0220 	orr.w	r2, r3, #32
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	f000 8249 	beq.w	80080b8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c2a:	f003 0320 	and.w	r3, r3, #32
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d013      	beq.n	8007c5a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c36:	f003 0320 	and.w	r3, r3, #32
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d105      	bne.n	8007c4a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007c3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d007      	beq.n	8007c5a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d003      	beq.n	8007c5a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c6e:	2b40      	cmp	r3, #64	; 0x40
 8007c70:	d005      	beq.n	8007c7e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007c72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c76:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d054      	beq.n	8007d28 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 ff83 	bl	8008b8a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c8e:	2b40      	cmp	r3, #64	; 0x40
 8007c90:	d146      	bne.n	8007d20 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	3308      	adds	r3, #8
 8007c98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ca0:	e853 3f00 	ldrex	r3, [r3]
 8007ca4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007ca8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007cac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	3308      	adds	r3, #8
 8007cba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007cbe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007cc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007cca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007cce:	e841 2300 	strex	r3, r2, [r1]
 8007cd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007cd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d1d9      	bne.n	8007c92 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d017      	beq.n	8007d18 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cee:	4a15      	ldr	r2, [pc, #84]	; (8007d44 <HAL_UART_IRQHandler+0x2c0>)
 8007cf0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f7fd fc0f 	bl	800551c <HAL_DMA_Abort_IT>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d019      	beq.n	8007d38 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007d12:	4610      	mov	r0, r2
 8007d14:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d16:	e00f      	b.n	8007d38 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 f9e1 	bl	80080e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d1e:	e00b      	b.n	8007d38 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 f9dd 	bl	80080e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d26:	e007      	b.n	8007d38 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 f9d9 	bl	80080e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8007d36:	e1bf      	b.n	80080b8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d38:	bf00      	nop
    return;
 8007d3a:	e1bd      	b.n	80080b8 <HAL_UART_IRQHandler+0x634>
 8007d3c:	10000001 	.word	0x10000001
 8007d40:	04000120 	.word	0x04000120
 8007d44:	08008d8d 	.word	0x08008d8d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	f040 8153 	bne.w	8007ff8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d56:	f003 0310 	and.w	r3, r3, #16
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	f000 814c 	beq.w	8007ff8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d64:	f003 0310 	and.w	r3, r3, #16
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	f000 8145 	beq.w	8007ff8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2210      	movs	r2, #16
 8007d74:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d80:	2b40      	cmp	r3, #64	; 0x40
 8007d82:	f040 80bb 	bne.w	8007efc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f000 818f 	beq.w	80080bc <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007da4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007da8:	429a      	cmp	r2, r3
 8007daa:	f080 8187 	bcs.w	80080bc <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007db4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f003 0320 	and.w	r3, r3, #32
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	f040 8087 	bne.w	8007eda <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007dd8:	e853 3f00 	ldrex	r3, [r3]
 8007ddc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007de0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007de4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007de8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	461a      	mov	r2, r3
 8007df2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007df6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007dfa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007e02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007e06:	e841 2300 	strex	r3, r2, [r1]
 8007e0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007e0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d1da      	bne.n	8007dcc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	3308      	adds	r3, #8
 8007e1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e20:	e853 3f00 	ldrex	r3, [r3]
 8007e24:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007e26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e28:	f023 0301 	bic.w	r3, r3, #1
 8007e2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	3308      	adds	r3, #8
 8007e36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007e3a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007e3e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007e42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007e46:	e841 2300 	strex	r3, r2, [r1]
 8007e4a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007e4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d1e1      	bne.n	8007e16 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	3308      	adds	r3, #8
 8007e58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e5c:	e853 3f00 	ldrex	r3, [r3]
 8007e60:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007e62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	3308      	adds	r3, #8
 8007e72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007e76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007e78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007e7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007e7e:	e841 2300 	strex	r3, r2, [r1]
 8007e82:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007e84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d1e3      	bne.n	8007e52 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2220      	movs	r2, #32
 8007e8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ea0:	e853 3f00 	ldrex	r3, [r3]
 8007ea4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007ea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ea8:	f023 0310 	bic.w	r3, r3, #16
 8007eac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007eba:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ebc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ebe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007ec0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ec2:	e841 2300 	strex	r3, r2, [r1]
 8007ec6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007ec8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d1e4      	bne.n	8007e98 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7fd fac2 	bl	800545e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2202      	movs	r2, #2
 8007ede:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	1ad3      	subs	r3, r2, r3
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 f8fd 	bl	80080f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007efa:	e0df      	b.n	80080bc <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	1ad3      	subs	r3, r2, r3
 8007f0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	f000 80d1 	beq.w	80080c0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007f1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	f000 80cc 	beq.w	80080c0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f30:	e853 3f00 	ldrex	r3, [r3]
 8007f34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	461a      	mov	r2, r3
 8007f46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f4a:	647b      	str	r3, [r7, #68]	; 0x44
 8007f4c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f52:	e841 2300 	strex	r3, r2, [r1]
 8007f56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d1e4      	bne.n	8007f28 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	3308      	adds	r3, #8
 8007f64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f68:	e853 3f00 	ldrex	r3, [r3]
 8007f6c:	623b      	str	r3, [r7, #32]
   return(result);
 8007f6e:	6a3b      	ldr	r3, [r7, #32]
 8007f70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f74:	f023 0301 	bic.w	r3, r3, #1
 8007f78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	3308      	adds	r3, #8
 8007f82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007f86:	633a      	str	r2, [r7, #48]	; 0x30
 8007f88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f8e:	e841 2300 	strex	r3, r2, [r1]
 8007f92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1e1      	bne.n	8007f5e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2220      	movs	r2, #32
 8007f9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	e853 3f00 	ldrex	r3, [r3]
 8007fba:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f023 0310 	bic.w	r3, r3, #16
 8007fc2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	461a      	mov	r2, r3
 8007fcc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007fd0:	61fb      	str	r3, [r7, #28]
 8007fd2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd4:	69b9      	ldr	r1, [r7, #24]
 8007fd6:	69fa      	ldr	r2, [r7, #28]
 8007fd8:	e841 2300 	strex	r3, r2, [r1]
 8007fdc:	617b      	str	r3, [r7, #20]
   return(result);
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d1e4      	bne.n	8007fae <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2202      	movs	r2, #2
 8007fe8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007fea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007fee:	4619      	mov	r1, r3
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 f87f 	bl	80080f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ff6:	e063      	b.n	80080c0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ffc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008000:	2b00      	cmp	r3, #0
 8008002:	d00e      	beq.n	8008022 <HAL_UART_IRQHandler+0x59e>
 8008004:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008008:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800800c:	2b00      	cmp	r3, #0
 800800e:	d008      	beq.n	8008022 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008018:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f001 fc14 	bl	8009848 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008020:	e051      	b.n	80080c6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800802a:	2b00      	cmp	r3, #0
 800802c:	d014      	beq.n	8008058 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800802e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008036:	2b00      	cmp	r3, #0
 8008038:	d105      	bne.n	8008046 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800803a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800803e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008042:	2b00      	cmp	r3, #0
 8008044:	d008      	beq.n	8008058 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800804a:	2b00      	cmp	r3, #0
 800804c:	d03a      	beq.n	80080c4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	4798      	blx	r3
    }
    return;
 8008056:	e035      	b.n	80080c4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800805c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008060:	2b00      	cmp	r3, #0
 8008062:	d009      	beq.n	8008078 <HAL_UART_IRQHandler+0x5f4>
 8008064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800806c:	2b00      	cmp	r3, #0
 800806e:	d003      	beq.n	8008078 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fea1 	bl	8008db8 <UART_EndTransmit_IT>
    return;
 8008076:	e026      	b.n	80080c6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800807c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008080:	2b00      	cmp	r3, #0
 8008082:	d009      	beq.n	8008098 <HAL_UART_IRQHandler+0x614>
 8008084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008088:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800808c:	2b00      	cmp	r3, #0
 800808e:	d003      	beq.n	8008098 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f001 fbed 	bl	8009870 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008096:	e016      	b.n	80080c6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800809c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d010      	beq.n	80080c6 <HAL_UART_IRQHandler+0x642>
 80080a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	da0c      	bge.n	80080c6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f001 fbd5 	bl	800985c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80080b2:	e008      	b.n	80080c6 <HAL_UART_IRQHandler+0x642>
      return;
 80080b4:	bf00      	nop
 80080b6:	e006      	b.n	80080c6 <HAL_UART_IRQHandler+0x642>
    return;
 80080b8:	bf00      	nop
 80080ba:	e004      	b.n	80080c6 <HAL_UART_IRQHandler+0x642>
      return;
 80080bc:	bf00      	nop
 80080be:	e002      	b.n	80080c6 <HAL_UART_IRQHandler+0x642>
      return;
 80080c0:	bf00      	nop
 80080c2:	e000      	b.n	80080c6 <HAL_UART_IRQHandler+0x642>
    return;
 80080c4:	bf00      	nop
  }
}
 80080c6:	37e8      	adds	r7, #232	; 0xe8
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80080d4:	bf00      	nop
 80080d6:	370c      	adds	r7, #12
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80080e8:	bf00      	nop
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	460b      	mov	r3, r1
 80080fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008100:	bf00      	nop
 8008102:	370c      	adds	r7, #12
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr

0800810c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800810c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008110:	b08c      	sub	sp, #48	; 0x30
 8008112:	af00      	add	r7, sp, #0
 8008114:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008116:	2300      	movs	r3, #0
 8008118:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	689a      	ldr	r2, [r3, #8]
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	691b      	ldr	r3, [r3, #16]
 8008124:	431a      	orrs	r2, r3
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	695b      	ldr	r3, [r3, #20]
 800812a:	431a      	orrs	r2, r3
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	69db      	ldr	r3, [r3, #28]
 8008130:	4313      	orrs	r3, r2
 8008132:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	4baf      	ldr	r3, [pc, #700]	; (80083f8 <UART_SetConfig+0x2ec>)
 800813c:	4013      	ands	r3, r2
 800813e:	697a      	ldr	r2, [r7, #20]
 8008140:	6812      	ldr	r2, [r2, #0]
 8008142:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008144:	430b      	orrs	r3, r1
 8008146:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	68da      	ldr	r2, [r3, #12]
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	430a      	orrs	r2, r1
 800815c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	699b      	ldr	r3, [r3, #24]
 8008162:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4aa4      	ldr	r2, [pc, #656]	; (80083fc <UART_SetConfig+0x2f0>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d004      	beq.n	8008178 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	6a1b      	ldr	r3, [r3, #32]
 8008172:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008174:	4313      	orrs	r3, r2
 8008176:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	689b      	ldr	r3, [r3, #8]
 800817e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008182:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008186:	697a      	ldr	r2, [r7, #20]
 8008188:	6812      	ldr	r2, [r2, #0]
 800818a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800818c:	430b      	orrs	r3, r1
 800818e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008196:	f023 010f 	bic.w	r1, r3, #15
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	430a      	orrs	r2, r1
 80081a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a95      	ldr	r2, [pc, #596]	; (8008400 <UART_SetConfig+0x2f4>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d125      	bne.n	80081fc <UART_SetConfig+0xf0>
 80081b0:	2003      	movs	r0, #3
 80081b2:	f7ff fb2b 	bl	800780c <LL_RCC_GetUSARTClockSource>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b03      	cmp	r3, #3
 80081ba:	d81b      	bhi.n	80081f4 <UART_SetConfig+0xe8>
 80081bc:	a201      	add	r2, pc, #4	; (adr r2, 80081c4 <UART_SetConfig+0xb8>)
 80081be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c2:	bf00      	nop
 80081c4:	080081d5 	.word	0x080081d5
 80081c8:	080081e5 	.word	0x080081e5
 80081cc:	080081dd 	.word	0x080081dd
 80081d0:	080081ed 	.word	0x080081ed
 80081d4:	2301      	movs	r3, #1
 80081d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081da:	e042      	b.n	8008262 <UART_SetConfig+0x156>
 80081dc:	2302      	movs	r3, #2
 80081de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081e2:	e03e      	b.n	8008262 <UART_SetConfig+0x156>
 80081e4:	2304      	movs	r3, #4
 80081e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081ea:	e03a      	b.n	8008262 <UART_SetConfig+0x156>
 80081ec:	2308      	movs	r3, #8
 80081ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081f2:	e036      	b.n	8008262 <UART_SetConfig+0x156>
 80081f4:	2310      	movs	r3, #16
 80081f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081fa:	e032      	b.n	8008262 <UART_SetConfig+0x156>
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a7e      	ldr	r2, [pc, #504]	; (80083fc <UART_SetConfig+0x2f0>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d12a      	bne.n	800825c <UART_SetConfig+0x150>
 8008206:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800820a:	f7ff fb0f 	bl	800782c <LL_RCC_GetLPUARTClockSource>
 800820e:	4603      	mov	r3, r0
 8008210:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008214:	d01a      	beq.n	800824c <UART_SetConfig+0x140>
 8008216:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800821a:	d81b      	bhi.n	8008254 <UART_SetConfig+0x148>
 800821c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008220:	d00c      	beq.n	800823c <UART_SetConfig+0x130>
 8008222:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008226:	d815      	bhi.n	8008254 <UART_SetConfig+0x148>
 8008228:	2b00      	cmp	r3, #0
 800822a:	d003      	beq.n	8008234 <UART_SetConfig+0x128>
 800822c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008230:	d008      	beq.n	8008244 <UART_SetConfig+0x138>
 8008232:	e00f      	b.n	8008254 <UART_SetConfig+0x148>
 8008234:	2300      	movs	r3, #0
 8008236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800823a:	e012      	b.n	8008262 <UART_SetConfig+0x156>
 800823c:	2302      	movs	r3, #2
 800823e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008242:	e00e      	b.n	8008262 <UART_SetConfig+0x156>
 8008244:	2304      	movs	r3, #4
 8008246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800824a:	e00a      	b.n	8008262 <UART_SetConfig+0x156>
 800824c:	2308      	movs	r3, #8
 800824e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008252:	e006      	b.n	8008262 <UART_SetConfig+0x156>
 8008254:	2310      	movs	r3, #16
 8008256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800825a:	e002      	b.n	8008262 <UART_SetConfig+0x156>
 800825c:	2310      	movs	r3, #16
 800825e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a65      	ldr	r2, [pc, #404]	; (80083fc <UART_SetConfig+0x2f0>)
 8008268:	4293      	cmp	r3, r2
 800826a:	f040 8097 	bne.w	800839c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800826e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008272:	2b08      	cmp	r3, #8
 8008274:	d823      	bhi.n	80082be <UART_SetConfig+0x1b2>
 8008276:	a201      	add	r2, pc, #4	; (adr r2, 800827c <UART_SetConfig+0x170>)
 8008278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800827c:	080082a1 	.word	0x080082a1
 8008280:	080082bf 	.word	0x080082bf
 8008284:	080082a9 	.word	0x080082a9
 8008288:	080082bf 	.word	0x080082bf
 800828c:	080082af 	.word	0x080082af
 8008290:	080082bf 	.word	0x080082bf
 8008294:	080082bf 	.word	0x080082bf
 8008298:	080082bf 	.word	0x080082bf
 800829c:	080082b7 	.word	0x080082b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082a0:	f7fe fdca 	bl	8006e38 <HAL_RCC_GetPCLK1Freq>
 80082a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80082a6:	e010      	b.n	80082ca <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082a8:	4b56      	ldr	r3, [pc, #344]	; (8008404 <UART_SetConfig+0x2f8>)
 80082aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80082ac:	e00d      	b.n	80082ca <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082ae:	f7fe fd43 	bl	8006d38 <HAL_RCC_GetSysClockFreq>
 80082b2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80082b4:	e009      	b.n	80082ca <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80082bc:	e005      	b.n	80082ca <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80082be:	2300      	movs	r3, #0
 80082c0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80082c2:	2301      	movs	r3, #1
 80082c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80082c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80082ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f000 812b 	beq.w	8008528 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d6:	4a4c      	ldr	r2, [pc, #304]	; (8008408 <UART_SetConfig+0x2fc>)
 80082d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082dc:	461a      	mov	r2, r3
 80082de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80082e4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	685a      	ldr	r2, [r3, #4]
 80082ea:	4613      	mov	r3, r2
 80082ec:	005b      	lsls	r3, r3, #1
 80082ee:	4413      	add	r3, r2
 80082f0:	69ba      	ldr	r2, [r7, #24]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d305      	bcc.n	8008302 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80082fc:	69ba      	ldr	r2, [r7, #24]
 80082fe:	429a      	cmp	r2, r3
 8008300:	d903      	bls.n	800830a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008308:	e10e      	b.n	8008528 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800830a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830c:	2200      	movs	r2, #0
 800830e:	60bb      	str	r3, [r7, #8]
 8008310:	60fa      	str	r2, [r7, #12]
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008316:	4a3c      	ldr	r2, [pc, #240]	; (8008408 <UART_SetConfig+0x2fc>)
 8008318:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800831c:	b29b      	uxth	r3, r3
 800831e:	2200      	movs	r2, #0
 8008320:	603b      	str	r3, [r7, #0]
 8008322:	607a      	str	r2, [r7, #4]
 8008324:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008328:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800832c:	f7f8 fa76 	bl	800081c <__aeabi_uldivmod>
 8008330:	4602      	mov	r2, r0
 8008332:	460b      	mov	r3, r1
 8008334:	4610      	mov	r0, r2
 8008336:	4619      	mov	r1, r3
 8008338:	f04f 0200 	mov.w	r2, #0
 800833c:	f04f 0300 	mov.w	r3, #0
 8008340:	020b      	lsls	r3, r1, #8
 8008342:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008346:	0202      	lsls	r2, r0, #8
 8008348:	6979      	ldr	r1, [r7, #20]
 800834a:	6849      	ldr	r1, [r1, #4]
 800834c:	0849      	lsrs	r1, r1, #1
 800834e:	2000      	movs	r0, #0
 8008350:	460c      	mov	r4, r1
 8008352:	4605      	mov	r5, r0
 8008354:	eb12 0804 	adds.w	r8, r2, r4
 8008358:	eb43 0905 	adc.w	r9, r3, r5
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	469a      	mov	sl, r3
 8008364:	4693      	mov	fp, r2
 8008366:	4652      	mov	r2, sl
 8008368:	465b      	mov	r3, fp
 800836a:	4640      	mov	r0, r8
 800836c:	4649      	mov	r1, r9
 800836e:	f7f8 fa55 	bl	800081c <__aeabi_uldivmod>
 8008372:	4602      	mov	r2, r0
 8008374:	460b      	mov	r3, r1
 8008376:	4613      	mov	r3, r2
 8008378:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800837a:	6a3b      	ldr	r3, [r7, #32]
 800837c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008380:	d308      	bcc.n	8008394 <UART_SetConfig+0x288>
 8008382:	6a3b      	ldr	r3, [r7, #32]
 8008384:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008388:	d204      	bcs.n	8008394 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	6a3a      	ldr	r2, [r7, #32]
 8008390:	60da      	str	r2, [r3, #12]
 8008392:	e0c9      	b.n	8008528 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800839a:	e0c5      	b.n	8008528 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	69db      	ldr	r3, [r3, #28]
 80083a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083a4:	d16d      	bne.n	8008482 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80083a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80083aa:	3b01      	subs	r3, #1
 80083ac:	2b07      	cmp	r3, #7
 80083ae:	d82d      	bhi.n	800840c <UART_SetConfig+0x300>
 80083b0:	a201      	add	r2, pc, #4	; (adr r2, 80083b8 <UART_SetConfig+0x2ac>)
 80083b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b6:	bf00      	nop
 80083b8:	080083d9 	.word	0x080083d9
 80083bc:	080083e1 	.word	0x080083e1
 80083c0:	0800840d 	.word	0x0800840d
 80083c4:	080083e7 	.word	0x080083e7
 80083c8:	0800840d 	.word	0x0800840d
 80083cc:	0800840d 	.word	0x0800840d
 80083d0:	0800840d 	.word	0x0800840d
 80083d4:	080083ef 	.word	0x080083ef
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083d8:	f7fe fd44 	bl	8006e64 <HAL_RCC_GetPCLK2Freq>
 80083dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083de:	e01b      	b.n	8008418 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083e0:	4b08      	ldr	r3, [pc, #32]	; (8008404 <UART_SetConfig+0x2f8>)
 80083e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80083e4:	e018      	b.n	8008418 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083e6:	f7fe fca7 	bl	8006d38 <HAL_RCC_GetSysClockFreq>
 80083ea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083ec:	e014      	b.n	8008418 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80083f4:	e010      	b.n	8008418 <UART_SetConfig+0x30c>
 80083f6:	bf00      	nop
 80083f8:	cfff69f3 	.word	0xcfff69f3
 80083fc:	40008000 	.word	0x40008000
 8008400:	40013800 	.word	0x40013800
 8008404:	00f42400 	.word	0x00f42400
 8008408:	0800f4a4 	.word	0x0800f4a4
      default:
        pclk = 0U;
 800840c:	2300      	movs	r3, #0
 800840e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008410:	2301      	movs	r3, #1
 8008412:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008416:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841a:	2b00      	cmp	r3, #0
 800841c:	f000 8084 	beq.w	8008528 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008424:	4a4b      	ldr	r2, [pc, #300]	; (8008554 <UART_SetConfig+0x448>)
 8008426:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800842a:	461a      	mov	r2, r3
 800842c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008432:	005a      	lsls	r2, r3, #1
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	085b      	lsrs	r3, r3, #1
 800843a:	441a      	add	r2, r3
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	fbb2 f3f3 	udiv	r3, r2, r3
 8008444:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008446:	6a3b      	ldr	r3, [r7, #32]
 8008448:	2b0f      	cmp	r3, #15
 800844a:	d916      	bls.n	800847a <UART_SetConfig+0x36e>
 800844c:	6a3b      	ldr	r3, [r7, #32]
 800844e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008452:	d212      	bcs.n	800847a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008454:	6a3b      	ldr	r3, [r7, #32]
 8008456:	b29b      	uxth	r3, r3
 8008458:	f023 030f 	bic.w	r3, r3, #15
 800845c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800845e:	6a3b      	ldr	r3, [r7, #32]
 8008460:	085b      	lsrs	r3, r3, #1
 8008462:	b29b      	uxth	r3, r3
 8008464:	f003 0307 	and.w	r3, r3, #7
 8008468:	b29a      	uxth	r2, r3
 800846a:	8bfb      	ldrh	r3, [r7, #30]
 800846c:	4313      	orrs	r3, r2
 800846e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	8bfa      	ldrh	r2, [r7, #30]
 8008476:	60da      	str	r2, [r3, #12]
 8008478:	e056      	b.n	8008528 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800847a:	2301      	movs	r3, #1
 800847c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008480:	e052      	b.n	8008528 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008482:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008486:	3b01      	subs	r3, #1
 8008488:	2b07      	cmp	r3, #7
 800848a:	d822      	bhi.n	80084d2 <UART_SetConfig+0x3c6>
 800848c:	a201      	add	r2, pc, #4	; (adr r2, 8008494 <UART_SetConfig+0x388>)
 800848e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008492:	bf00      	nop
 8008494:	080084b5 	.word	0x080084b5
 8008498:	080084bd 	.word	0x080084bd
 800849c:	080084d3 	.word	0x080084d3
 80084a0:	080084c3 	.word	0x080084c3
 80084a4:	080084d3 	.word	0x080084d3
 80084a8:	080084d3 	.word	0x080084d3
 80084ac:	080084d3 	.word	0x080084d3
 80084b0:	080084cb 	.word	0x080084cb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084b4:	f7fe fcd6 	bl	8006e64 <HAL_RCC_GetPCLK2Freq>
 80084b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084ba:	e010      	b.n	80084de <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084bc:	4b26      	ldr	r3, [pc, #152]	; (8008558 <UART_SetConfig+0x44c>)
 80084be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80084c0:	e00d      	b.n	80084de <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084c2:	f7fe fc39 	bl	8006d38 <HAL_RCC_GetSysClockFreq>
 80084c6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084c8:	e009      	b.n	80084de <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80084d0:	e005      	b.n	80084de <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80084d2:	2300      	movs	r3, #0
 80084d4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80084dc:	bf00      	nop
    }

    if (pclk != 0U)
 80084de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d021      	beq.n	8008528 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e8:	4a1a      	ldr	r2, [pc, #104]	; (8008554 <UART_SetConfig+0x448>)
 80084ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084ee:	461a      	mov	r2, r3
 80084f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f2:	fbb3 f2f2 	udiv	r2, r3, r2
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	085b      	lsrs	r3, r3, #1
 80084fc:	441a      	add	r2, r3
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	fbb2 f3f3 	udiv	r3, r2, r3
 8008506:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008508:	6a3b      	ldr	r3, [r7, #32]
 800850a:	2b0f      	cmp	r3, #15
 800850c:	d909      	bls.n	8008522 <UART_SetConfig+0x416>
 800850e:	6a3b      	ldr	r3, [r7, #32]
 8008510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008514:	d205      	bcs.n	8008522 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008516:	6a3b      	ldr	r3, [r7, #32]
 8008518:	b29a      	uxth	r2, r3
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	60da      	str	r2, [r3, #12]
 8008520:	e002      	b.n	8008528 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	2201      	movs	r2, #1
 800852c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	2201      	movs	r2, #1
 8008534:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	2200      	movs	r2, #0
 800853c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	2200      	movs	r2, #0
 8008542:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008544:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008548:	4618      	mov	r0, r3
 800854a:	3730      	adds	r7, #48	; 0x30
 800854c:	46bd      	mov	sp, r7
 800854e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008552:	bf00      	nop
 8008554:	0800f4a4 	.word	0x0800f4a4
 8008558:	00f42400 	.word	0x00f42400

0800855c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800855c:	b480      	push	{r7}
 800855e:	b083      	sub	sp, #12
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008568:	f003 0308 	and.w	r3, r3, #8
 800856c:	2b00      	cmp	r3, #0
 800856e:	d00a      	beq.n	8008586 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	430a      	orrs	r2, r1
 8008584:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800858a:	f003 0301 	and.w	r3, r3, #1
 800858e:	2b00      	cmp	r3, #0
 8008590:	d00a      	beq.n	80085a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	430a      	orrs	r2, r1
 80085a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ac:	f003 0302 	and.w	r3, r3, #2
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d00a      	beq.n	80085ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	430a      	orrs	r2, r1
 80085c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ce:	f003 0304 	and.w	r3, r3, #4
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d00a      	beq.n	80085ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	430a      	orrs	r2, r1
 80085ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085f0:	f003 0310 	and.w	r3, r3, #16
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d00a      	beq.n	800860e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	430a      	orrs	r2, r1
 800860c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008612:	f003 0320 	and.w	r3, r3, #32
 8008616:	2b00      	cmp	r3, #0
 8008618:	d00a      	beq.n	8008630 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	430a      	orrs	r2, r1
 800862e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008638:	2b00      	cmp	r3, #0
 800863a:	d01a      	beq.n	8008672 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	430a      	orrs	r2, r1
 8008650:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008656:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800865a:	d10a      	bne.n	8008672 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	430a      	orrs	r2, r1
 8008670:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800867a:	2b00      	cmp	r3, #0
 800867c:	d00a      	beq.n	8008694 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	430a      	orrs	r2, r1
 8008692:	605a      	str	r2, [r3, #4]
  }
}
 8008694:	bf00      	nop
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b098      	sub	sp, #96	; 0x60
 80086a4:	af02      	add	r7, sp, #8
 80086a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80086b0:	f7fc fc10 	bl	8004ed4 <HAL_GetTick>
 80086b4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f003 0308 	and.w	r3, r3, #8
 80086c0:	2b08      	cmp	r3, #8
 80086c2:	d12f      	bne.n	8008724 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80086c8:	9300      	str	r3, [sp, #0]
 80086ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086cc:	2200      	movs	r2, #0
 80086ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 f88e 	bl	80087f4 <UART_WaitOnFlagUntilTimeout>
 80086d8:	4603      	mov	r3, r0
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d022      	beq.n	8008724 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e6:	e853 3f00 	ldrex	r3, [r3]
 80086ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80086ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086f2:	653b      	str	r3, [r7, #80]	; 0x50
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	461a      	mov	r2, r3
 80086fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086fc:	647b      	str	r3, [r7, #68]	; 0x44
 80086fe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008700:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008702:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008704:	e841 2300 	strex	r3, r2, [r1]
 8008708:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800870a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800870c:	2b00      	cmp	r3, #0
 800870e:	d1e6      	bne.n	80086de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2220      	movs	r2, #32
 8008714:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008720:	2303      	movs	r3, #3
 8008722:	e063      	b.n	80087ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f003 0304 	and.w	r3, r3, #4
 800872e:	2b04      	cmp	r3, #4
 8008730:	d149      	bne.n	80087c6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008732:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008736:	9300      	str	r3, [sp, #0]
 8008738:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800873a:	2200      	movs	r2, #0
 800873c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f000 f857 	bl	80087f4 <UART_WaitOnFlagUntilTimeout>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d03c      	beq.n	80087c6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008754:	e853 3f00 	ldrex	r3, [r3]
 8008758:	623b      	str	r3, [r7, #32]
   return(result);
 800875a:	6a3b      	ldr	r3, [r7, #32]
 800875c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008760:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	461a      	mov	r2, r3
 8008768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800876a:	633b      	str	r3, [r7, #48]	; 0x30
 800876c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800876e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008772:	e841 2300 	strex	r3, r2, [r1]
 8008776:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877a:	2b00      	cmp	r3, #0
 800877c:	d1e6      	bne.n	800874c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	3308      	adds	r3, #8
 8008784:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	e853 3f00 	ldrex	r3, [r3]
 800878c:	60fb      	str	r3, [r7, #12]
   return(result);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f023 0301 	bic.w	r3, r3, #1
 8008794:	64bb      	str	r3, [r7, #72]	; 0x48
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	3308      	adds	r3, #8
 800879c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800879e:	61fa      	str	r2, [r7, #28]
 80087a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a2:	69b9      	ldr	r1, [r7, #24]
 80087a4:	69fa      	ldr	r2, [r7, #28]
 80087a6:	e841 2300 	strex	r3, r2, [r1]
 80087aa:	617b      	str	r3, [r7, #20]
   return(result);
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d1e5      	bne.n	800877e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2220      	movs	r2, #32
 80087b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087c2:	2303      	movs	r3, #3
 80087c4:	e012      	b.n	80087ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2220      	movs	r2, #32
 80087ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2220      	movs	r2, #32
 80087d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80087ea:	2300      	movs	r3, #0
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3758      	adds	r7, #88	; 0x58
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	60b9      	str	r1, [r7, #8]
 80087fe:	603b      	str	r3, [r7, #0]
 8008800:	4613      	mov	r3, r2
 8008802:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008804:	e049      	b.n	800889a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008806:	69bb      	ldr	r3, [r7, #24]
 8008808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800880c:	d045      	beq.n	800889a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800880e:	f7fc fb61 	bl	8004ed4 <HAL_GetTick>
 8008812:	4602      	mov	r2, r0
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	1ad3      	subs	r3, r2, r3
 8008818:	69ba      	ldr	r2, [r7, #24]
 800881a:	429a      	cmp	r2, r3
 800881c:	d302      	bcc.n	8008824 <UART_WaitOnFlagUntilTimeout+0x30>
 800881e:	69bb      	ldr	r3, [r7, #24]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d101      	bne.n	8008828 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008824:	2303      	movs	r3, #3
 8008826:	e048      	b.n	80088ba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f003 0304 	and.w	r3, r3, #4
 8008832:	2b00      	cmp	r3, #0
 8008834:	d031      	beq.n	800889a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	69db      	ldr	r3, [r3, #28]
 800883c:	f003 0308 	and.w	r3, r3, #8
 8008840:	2b08      	cmp	r3, #8
 8008842:	d110      	bne.n	8008866 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2208      	movs	r2, #8
 800884a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800884c:	68f8      	ldr	r0, [r7, #12]
 800884e:	f000 f99c 	bl	8008b8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2208      	movs	r2, #8
 8008856:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2200      	movs	r2, #0
 800885e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008862:	2301      	movs	r3, #1
 8008864:	e029      	b.n	80088ba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	69db      	ldr	r3, [r3, #28]
 800886c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008870:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008874:	d111      	bne.n	800889a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800887e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008880:	68f8      	ldr	r0, [r7, #12]
 8008882:	f000 f982 	bl	8008b8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2220      	movs	r2, #32
 800888a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2200      	movs	r2, #0
 8008892:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008896:	2303      	movs	r3, #3
 8008898:	e00f      	b.n	80088ba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	69da      	ldr	r2, [r3, #28]
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	4013      	ands	r3, r2
 80088a4:	68ba      	ldr	r2, [r7, #8]
 80088a6:	429a      	cmp	r2, r3
 80088a8:	bf0c      	ite	eq
 80088aa:	2301      	moveq	r3, #1
 80088ac:	2300      	movne	r3, #0
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	461a      	mov	r2, r3
 80088b2:	79fb      	ldrb	r3, [r7, #7]
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d0a6      	beq.n	8008806 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3710      	adds	r7, #16
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
	...

080088c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b0a3      	sub	sp, #140	; 0x8c
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	4613      	mov	r3, r2
 80088d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	68ba      	ldr	r2, [r7, #8]
 80088d6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	88fa      	ldrh	r2, [r7, #6]
 80088dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	88fa      	ldrh	r2, [r7, #6]
 80088e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2200      	movs	r2, #0
 80088ec:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088f6:	d10e      	bne.n	8008916 <UART_Start_Receive_IT+0x52>
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	691b      	ldr	r3, [r3, #16]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d105      	bne.n	800890c <UART_Start_Receive_IT+0x48>
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008906:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800890a:	e02d      	b.n	8008968 <UART_Start_Receive_IT+0xa4>
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	22ff      	movs	r2, #255	; 0xff
 8008910:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008914:	e028      	b.n	8008968 <UART_Start_Receive_IT+0xa4>
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d10d      	bne.n	800893a <UART_Start_Receive_IT+0x76>
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	691b      	ldr	r3, [r3, #16]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d104      	bne.n	8008930 <UART_Start_Receive_IT+0x6c>
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	22ff      	movs	r2, #255	; 0xff
 800892a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800892e:	e01b      	b.n	8008968 <UART_Start_Receive_IT+0xa4>
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	227f      	movs	r2, #127	; 0x7f
 8008934:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008938:	e016      	b.n	8008968 <UART_Start_Receive_IT+0xa4>
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008942:	d10d      	bne.n	8008960 <UART_Start_Receive_IT+0x9c>
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	691b      	ldr	r3, [r3, #16]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d104      	bne.n	8008956 <UART_Start_Receive_IT+0x92>
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	227f      	movs	r2, #127	; 0x7f
 8008950:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008954:	e008      	b.n	8008968 <UART_Start_Receive_IT+0xa4>
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	223f      	movs	r2, #63	; 0x3f
 800895a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800895e:	e003      	b.n	8008968 <UART_Start_Receive_IT+0xa4>
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2200      	movs	r2, #0
 8008964:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2200      	movs	r2, #0
 800896c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2222      	movs	r2, #34	; 0x22
 8008974:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	3308      	adds	r3, #8
 800897e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008980:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008982:	e853 3f00 	ldrex	r3, [r3]
 8008986:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008988:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800898a:	f043 0301 	orr.w	r3, r3, #1
 800898e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	3308      	adds	r3, #8
 8008998:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800899c:	673a      	str	r2, [r7, #112]	; 0x70
 800899e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80089a2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80089a4:	e841 2300 	strex	r3, r2, [r1]
 80089a8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80089aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d1e3      	bne.n	8008978 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089b8:	d14f      	bne.n	8008a5a <UART_Start_Receive_IT+0x196>
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80089c0:	88fa      	ldrh	r2, [r7, #6]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d349      	bcc.n	8008a5a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	689b      	ldr	r3, [r3, #8]
 80089ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089ce:	d107      	bne.n	80089e0 <UART_Start_Receive_IT+0x11c>
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	691b      	ldr	r3, [r3, #16]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d103      	bne.n	80089e0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	4a47      	ldr	r2, [pc, #284]	; (8008af8 <UART_Start_Receive_IT+0x234>)
 80089dc:	675a      	str	r2, [r3, #116]	; 0x74
 80089de:	e002      	b.n	80089e6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	4a46      	ldr	r2, [pc, #280]	; (8008afc <UART_Start_Receive_IT+0x238>)
 80089e4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	691b      	ldr	r3, [r3, #16]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d01a      	beq.n	8008a24 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089f6:	e853 3f00 	ldrex	r3, [r3]
 80089fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80089fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008a10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a12:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a14:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a16:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008a18:	e841 2300 	strex	r3, r2, [r1]
 8008a1c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008a1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d1e4      	bne.n	80089ee <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	3308      	adds	r3, #8
 8008a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a2e:	e853 3f00 	ldrex	r3, [r3]
 8008a32:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a3a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	3308      	adds	r3, #8
 8008a42:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008a44:	64ba      	str	r2, [r7, #72]	; 0x48
 8008a46:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a48:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008a4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a4c:	e841 2300 	strex	r3, r2, [r1]
 8008a50:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008a52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d1e5      	bne.n	8008a24 <UART_Start_Receive_IT+0x160>
 8008a58:	e046      	b.n	8008ae8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	689b      	ldr	r3, [r3, #8]
 8008a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a62:	d107      	bne.n	8008a74 <UART_Start_Receive_IT+0x1b0>
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	691b      	ldr	r3, [r3, #16]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d103      	bne.n	8008a74 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	4a24      	ldr	r2, [pc, #144]	; (8008b00 <UART_Start_Receive_IT+0x23c>)
 8008a70:	675a      	str	r2, [r3, #116]	; 0x74
 8008a72:	e002      	b.n	8008a7a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	4a23      	ldr	r2, [pc, #140]	; (8008b04 <UART_Start_Receive_IT+0x240>)
 8008a78:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	691b      	ldr	r3, [r3, #16]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d019      	beq.n	8008ab6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8a:	e853 3f00 	ldrex	r3, [r3]
 8008a8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a92:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008a96:	677b      	str	r3, [r7, #116]	; 0x74
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8008aa2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008aa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008aa8:	e841 2300 	strex	r3, r2, [r1]
 8008aac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d1e6      	bne.n	8008a82 <UART_Start_Receive_IT+0x1be>
 8008ab4:	e018      	b.n	8008ae8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	e853 3f00 	ldrex	r3, [r3]
 8008ac2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	f043 0320 	orr.w	r3, r3, #32
 8008aca:	67bb      	str	r3, [r7, #120]	; 0x78
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ad4:	623b      	str	r3, [r7, #32]
 8008ad6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad8:	69f9      	ldr	r1, [r7, #28]
 8008ada:	6a3a      	ldr	r2, [r7, #32]
 8008adc:	e841 2300 	strex	r3, r2, [r1]
 8008ae0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d1e6      	bne.n	8008ab6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008ae8:	2300      	movs	r3, #0
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	378c      	adds	r7, #140	; 0x8c
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop
 8008af8:	080094e1 	.word	0x080094e1
 8008afc:	08009181 	.word	0x08009181
 8008b00:	08008fc9 	.word	0x08008fc9
 8008b04:	08008e11 	.word	0x08008e11

08008b08 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b08f      	sub	sp, #60	; 0x3c
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b16:	6a3b      	ldr	r3, [r7, #32]
 8008b18:	e853 3f00 	ldrex	r3, [r3]
 8008b1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008b24:	637b      	str	r3, [r7, #52]	; 0x34
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b30:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b36:	e841 2300 	strex	r3, r2, [r1]
 8008b3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d1e6      	bne.n	8008b10 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	3308      	adds	r3, #8
 8008b48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	e853 3f00 	ldrex	r3, [r3]
 8008b50:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008b58:	633b      	str	r3, [r7, #48]	; 0x30
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	3308      	adds	r3, #8
 8008b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b62:	61ba      	str	r2, [r7, #24]
 8008b64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b66:	6979      	ldr	r1, [r7, #20]
 8008b68:	69ba      	ldr	r2, [r7, #24]
 8008b6a:	e841 2300 	strex	r3, r2, [r1]
 8008b6e:	613b      	str	r3, [r7, #16]
   return(result);
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d1e5      	bne.n	8008b42 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2220      	movs	r2, #32
 8008b7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8008b7e:	bf00      	nop
 8008b80:	373c      	adds	r7, #60	; 0x3c
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr

08008b8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b8a:	b480      	push	{r7}
 8008b8c:	b095      	sub	sp, #84	; 0x54
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b9a:	e853 3f00 	ldrex	r3, [r3]
 8008b9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	461a      	mov	r2, r3
 8008bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bb0:	643b      	str	r3, [r7, #64]	; 0x40
 8008bb2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008bb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008bb8:	e841 2300 	strex	r3, r2, [r1]
 8008bbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d1e6      	bne.n	8008b92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	3308      	adds	r3, #8
 8008bca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bcc:	6a3b      	ldr	r3, [r7, #32]
 8008bce:	e853 3f00 	ldrex	r3, [r3]
 8008bd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bda:	f023 0301 	bic.w	r3, r3, #1
 8008bde:	64bb      	str	r3, [r7, #72]	; 0x48
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	3308      	adds	r3, #8
 8008be6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008be8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008bea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008bee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bf0:	e841 2300 	strex	r3, r2, [r1]
 8008bf4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d1e3      	bne.n	8008bc4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d118      	bne.n	8008c36 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	e853 3f00 	ldrex	r3, [r3]
 8008c10:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	f023 0310 	bic.w	r3, r3, #16
 8008c18:	647b      	str	r3, [r7, #68]	; 0x44
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	461a      	mov	r2, r3
 8008c20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c22:	61bb      	str	r3, [r7, #24]
 8008c24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c26:	6979      	ldr	r1, [r7, #20]
 8008c28:	69ba      	ldr	r2, [r7, #24]
 8008c2a:	e841 2300 	strex	r3, r2, [r1]
 8008c2e:	613b      	str	r3, [r7, #16]
   return(result);
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d1e6      	bne.n	8008c04 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2220      	movs	r2, #32
 8008c3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2200      	movs	r2, #0
 8008c42:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008c4a:	bf00      	nop
 8008c4c:	3754      	adds	r7, #84	; 0x54
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr

08008c56 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b090      	sub	sp, #64	; 0x40
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c62:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f003 0320 	and.w	r3, r3, #32
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d137      	bne.n	8008ce2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c74:	2200      	movs	r2, #0
 8008c76:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	3308      	adds	r3, #8
 8008c80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c84:	e853 3f00 	ldrex	r3, [r3]
 8008c88:	623b      	str	r3, [r7, #32]
   return(result);
 8008c8a:	6a3b      	ldr	r3, [r7, #32]
 8008c8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c90:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	3308      	adds	r3, #8
 8008c98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c9a:	633a      	str	r2, [r7, #48]	; 0x30
 8008c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ca2:	e841 2300 	strex	r3, r2, [r1]
 8008ca6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d1e5      	bne.n	8008c7a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	e853 3f00 	ldrex	r3, [r3]
 8008cba:	60fb      	str	r3, [r7, #12]
   return(result);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cc2:	637b      	str	r3, [r7, #52]	; 0x34
 8008cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	461a      	mov	r2, r3
 8008cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ccc:	61fb      	str	r3, [r7, #28]
 8008cce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd0:	69b9      	ldr	r1, [r7, #24]
 8008cd2:	69fa      	ldr	r2, [r7, #28]
 8008cd4:	e841 2300 	strex	r3, r2, [r1]
 8008cd8:	617b      	str	r3, [r7, #20]
   return(result);
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d1e6      	bne.n	8008cae <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008ce0:	e002      	b.n	8008ce8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008ce2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008ce4:	f7f9 fae6 	bl	80022b4 <HAL_UART_TxCpltCallback>
}
 8008ce8:	bf00      	nop
 8008cea:	3740      	adds	r7, #64	; 0x40
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cfc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008cfe:	68f8      	ldr	r0, [r7, #12]
 8008d00:	f7ff f9e4 	bl	80080cc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d04:	bf00      	nop
 8008d06:	3710      	adds	r7, #16
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b086      	sub	sp, #24
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d18:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d20:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d28:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	689b      	ldr	r3, [r3, #8]
 8008d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d34:	2b80      	cmp	r3, #128	; 0x80
 8008d36:	d109      	bne.n	8008d4c <UART_DMAError+0x40>
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	2b21      	cmp	r3, #33	; 0x21
 8008d3c:	d106      	bne.n	8008d4c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	2200      	movs	r2, #0
 8008d42:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008d46:	6978      	ldr	r0, [r7, #20]
 8008d48:	f7ff fede 	bl	8008b08 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	689b      	ldr	r3, [r3, #8]
 8008d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d56:	2b40      	cmp	r3, #64	; 0x40
 8008d58:	d109      	bne.n	8008d6e <UART_DMAError+0x62>
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2b22      	cmp	r3, #34	; 0x22
 8008d5e:	d106      	bne.n	8008d6e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	2200      	movs	r2, #0
 8008d64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008d68:	6978      	ldr	r0, [r7, #20]
 8008d6a:	f7ff ff0e 	bl	8008b8a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d74:	f043 0210 	orr.w	r2, r3, #16
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d7e:	6978      	ldr	r0, [r7, #20]
 8008d80:	f7ff f9ae 	bl	80080e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d84:	bf00      	nop
 8008d86:	3718      	adds	r7, #24
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2200      	movs	r2, #0
 8008da6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008daa:	68f8      	ldr	r0, [r7, #12]
 8008dac:	f7ff f998 	bl	80080e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008db0:	bf00      	nop
 8008db2:	3710      	adds	r7, #16
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b088      	sub	sp, #32
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	e853 3f00 	ldrex	r3, [r3]
 8008dcc:	60bb      	str	r3, [r7, #8]
   return(result);
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008dd4:	61fb      	str	r3, [r7, #28]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	461a      	mov	r2, r3
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	61bb      	str	r3, [r7, #24]
 8008de0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de2:	6979      	ldr	r1, [r7, #20]
 8008de4:	69ba      	ldr	r2, [r7, #24]
 8008de6:	e841 2300 	strex	r3, r2, [r1]
 8008dea:	613b      	str	r3, [r7, #16]
   return(result);
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d1e6      	bne.n	8008dc0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2220      	movs	r2, #32
 8008df6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f7f9 fa57 	bl	80022b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e06:	bf00      	nop
 8008e08:	3720      	adds	r7, #32
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
	...

08008e10 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b09c      	sub	sp, #112	; 0x70
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008e1e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e28:	2b22      	cmp	r3, #34	; 0x22
 8008e2a:	f040 80be 	bne.w	8008faa <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e34:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008e38:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008e3c:	b2d9      	uxtb	r1, r3
 8008e3e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008e42:	b2da      	uxtb	r2, r3
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e48:	400a      	ands	r2, r1
 8008e4a:	b2d2      	uxtb	r2, r2
 8008e4c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e52:	1c5a      	adds	r2, r3, #1
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	3b01      	subs	r3, #1
 8008e62:	b29a      	uxth	r2, r3
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	f040 80a1 	bne.w	8008fba <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e80:	e853 3f00 	ldrex	r3, [r3]
 8008e84:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008e86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	461a      	mov	r2, r3
 8008e94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e96:	65bb      	str	r3, [r7, #88]	; 0x58
 8008e98:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e9a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008e9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e9e:	e841 2300 	strex	r3, r2, [r1]
 8008ea2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008ea4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d1e6      	bne.n	8008e78 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	3308      	adds	r3, #8
 8008eb0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eb4:	e853 3f00 	ldrex	r3, [r3]
 8008eb8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ebc:	f023 0301 	bic.w	r3, r3, #1
 8008ec0:	667b      	str	r3, [r7, #100]	; 0x64
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	3308      	adds	r3, #8
 8008ec8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008eca:	647a      	str	r2, [r7, #68]	; 0x44
 8008ecc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ece:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008ed0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ed2:	e841 2300 	strex	r3, r2, [r1]
 8008ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d1e5      	bne.n	8008eaa <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2220      	movs	r2, #32
 8008ee2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a33      	ldr	r2, [pc, #204]	; (8008fc4 <UART_RxISR_8BIT+0x1b4>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d01f      	beq.n	8008f3c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d018      	beq.n	8008f3c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f12:	e853 3f00 	ldrex	r3, [r3]
 8008f16:	623b      	str	r3, [r7, #32]
   return(result);
 8008f18:	6a3b      	ldr	r3, [r7, #32]
 8008f1a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008f1e:	663b      	str	r3, [r7, #96]	; 0x60
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	461a      	mov	r2, r3
 8008f26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f28:	633b      	str	r3, [r7, #48]	; 0x30
 8008f2a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f30:	e841 2300 	strex	r3, r2, [r1]
 8008f34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d1e6      	bne.n	8008f0a <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d12e      	bne.n	8008fa2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2200      	movs	r2, #0
 8008f48:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	e853 3f00 	ldrex	r3, [r3]
 8008f56:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f023 0310 	bic.w	r3, r3, #16
 8008f5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	461a      	mov	r2, r3
 8008f66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f68:	61fb      	str	r3, [r7, #28]
 8008f6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f6c:	69b9      	ldr	r1, [r7, #24]
 8008f6e:	69fa      	ldr	r2, [r7, #28]
 8008f70:	e841 2300 	strex	r3, r2, [r1]
 8008f74:	617b      	str	r3, [r7, #20]
   return(result);
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d1e6      	bne.n	8008f4a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	69db      	ldr	r3, [r3, #28]
 8008f82:	f003 0310 	and.w	r3, r3, #16
 8008f86:	2b10      	cmp	r3, #16
 8008f88:	d103      	bne.n	8008f92 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	2210      	movs	r2, #16
 8008f90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008f98:	4619      	mov	r1, r3
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f7ff f8aa 	bl	80080f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008fa0:	e00b      	b.n	8008fba <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f7f9 f968 	bl	8002278 <HAL_UART_RxCpltCallback>
}
 8008fa8:	e007      	b.n	8008fba <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	699a      	ldr	r2, [r3, #24]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f042 0208 	orr.w	r2, r2, #8
 8008fb8:	619a      	str	r2, [r3, #24]
}
 8008fba:	bf00      	nop
 8008fbc:	3770      	adds	r7, #112	; 0x70
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
 8008fc2:	bf00      	nop
 8008fc4:	40008000 	.word	0x40008000

08008fc8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b09c      	sub	sp, #112	; 0x70
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008fd6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fe0:	2b22      	cmp	r3, #34	; 0x22
 8008fe2:	f040 80be 	bne.w	8009162 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ff4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008ff6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008ffa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008ffe:	4013      	ands	r3, r2
 8009000:	b29a      	uxth	r2, r3
 8009002:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009004:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800900a:	1c9a      	adds	r2, r3, #2
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009016:	b29b      	uxth	r3, r3
 8009018:	3b01      	subs	r3, #1
 800901a:	b29a      	uxth	r2, r3
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009028:	b29b      	uxth	r3, r3
 800902a:	2b00      	cmp	r3, #0
 800902c:	f040 80a1 	bne.w	8009172 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009036:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009038:	e853 3f00 	ldrex	r3, [r3]
 800903c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800903e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009040:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009044:	667b      	str	r3, [r7, #100]	; 0x64
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	461a      	mov	r2, r3
 800904c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800904e:	657b      	str	r3, [r7, #84]	; 0x54
 8009050:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009052:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009054:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009056:	e841 2300 	strex	r3, r2, [r1]
 800905a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800905c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800905e:	2b00      	cmp	r3, #0
 8009060:	d1e6      	bne.n	8009030 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	3308      	adds	r3, #8
 8009068:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800906c:	e853 3f00 	ldrex	r3, [r3]
 8009070:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009074:	f023 0301 	bic.w	r3, r3, #1
 8009078:	663b      	str	r3, [r7, #96]	; 0x60
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	3308      	adds	r3, #8
 8009080:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009082:	643a      	str	r2, [r7, #64]	; 0x40
 8009084:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009086:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009088:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800908a:	e841 2300 	strex	r3, r2, [r1]
 800908e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009092:	2b00      	cmp	r3, #0
 8009094:	d1e5      	bne.n	8009062 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2220      	movs	r2, #32
 800909a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a33      	ldr	r2, [pc, #204]	; (800917c <UART_RxISR_16BIT+0x1b4>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d01f      	beq.n	80090f4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d018      	beq.n	80090f4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c8:	6a3b      	ldr	r3, [r7, #32]
 80090ca:	e853 3f00 	ldrex	r3, [r3]
 80090ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80090d0:	69fb      	ldr	r3, [r7, #28]
 80090d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80090d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	461a      	mov	r2, r3
 80090de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090e2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090e8:	e841 2300 	strex	r3, r2, [r1]
 80090ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d1e6      	bne.n	80090c2 <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d12e      	bne.n	800915a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2200      	movs	r2, #0
 8009100:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	e853 3f00 	ldrex	r3, [r3]
 800910e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	f023 0310 	bic.w	r3, r3, #16
 8009116:	65bb      	str	r3, [r7, #88]	; 0x58
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	461a      	mov	r2, r3
 800911e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009120:	61bb      	str	r3, [r7, #24]
 8009122:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009124:	6979      	ldr	r1, [r7, #20]
 8009126:	69ba      	ldr	r2, [r7, #24]
 8009128:	e841 2300 	strex	r3, r2, [r1]
 800912c:	613b      	str	r3, [r7, #16]
   return(result);
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d1e6      	bne.n	8009102 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	69db      	ldr	r3, [r3, #28]
 800913a:	f003 0310 	and.w	r3, r3, #16
 800913e:	2b10      	cmp	r3, #16
 8009140:	d103      	bne.n	800914a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	2210      	movs	r2, #16
 8009148:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009150:	4619      	mov	r1, r3
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f7fe ffce 	bl	80080f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009158:	e00b      	b.n	8009172 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f7f9 f88c 	bl	8002278 <HAL_UART_RxCpltCallback>
}
 8009160:	e007      	b.n	8009172 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	699a      	ldr	r2, [r3, #24]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f042 0208 	orr.w	r2, r2, #8
 8009170:	619a      	str	r2, [r3, #24]
}
 8009172:	bf00      	nop
 8009174:	3770      	adds	r7, #112	; 0x70
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	40008000 	.word	0x40008000

08009180 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b0ac      	sub	sp, #176	; 0xb0
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800918e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	69db      	ldr	r3, [r3, #28]
 8009198:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	689b      	ldr	r3, [r3, #8]
 80091ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091b6:	2b22      	cmp	r3, #34	; 0x22
 80091b8:	f040 8182 	bne.w	80094c0 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80091c2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80091c6:	e125      	b.n	8009414 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ce:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80091d2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80091d6:	b2d9      	uxtb	r1, r3
 80091d8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80091dc:	b2da      	uxtb	r2, r3
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091e2:	400a      	ands	r2, r1
 80091e4:	b2d2      	uxtb	r2, r2
 80091e6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091ec:	1c5a      	adds	r2, r3, #1
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091f8:	b29b      	uxth	r3, r3
 80091fa:	3b01      	subs	r3, #1
 80091fc:	b29a      	uxth	r2, r3
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	69db      	ldr	r3, [r3, #28]
 800920a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800920e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009212:	f003 0307 	and.w	r3, r3, #7
 8009216:	2b00      	cmp	r3, #0
 8009218:	d053      	beq.n	80092c2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800921a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800921e:	f003 0301 	and.w	r3, r3, #1
 8009222:	2b00      	cmp	r3, #0
 8009224:	d011      	beq.n	800924a <UART_RxISR_8BIT_FIFOEN+0xca>
 8009226:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800922a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800922e:	2b00      	cmp	r3, #0
 8009230:	d00b      	beq.n	800924a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	2201      	movs	r2, #1
 8009238:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009240:	f043 0201 	orr.w	r2, r3, #1
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800924a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800924e:	f003 0302 	and.w	r3, r3, #2
 8009252:	2b00      	cmp	r3, #0
 8009254:	d011      	beq.n	800927a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009256:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800925a:	f003 0301 	and.w	r3, r3, #1
 800925e:	2b00      	cmp	r3, #0
 8009260:	d00b      	beq.n	800927a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	2202      	movs	r2, #2
 8009268:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009270:	f043 0204 	orr.w	r2, r3, #4
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800927a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800927e:	f003 0304 	and.w	r3, r3, #4
 8009282:	2b00      	cmp	r3, #0
 8009284:	d011      	beq.n	80092aa <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009286:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800928a:	f003 0301 	and.w	r3, r3, #1
 800928e:	2b00      	cmp	r3, #0
 8009290:	d00b      	beq.n	80092aa <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	2204      	movs	r2, #4
 8009298:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092a0:	f043 0202 	orr.w	r2, r3, #2
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d006      	beq.n	80092c2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f7fe ff13 	bl	80080e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2200      	movs	r2, #0
 80092be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	f040 80a2 	bne.w	8009414 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80092d8:	e853 3f00 	ldrex	r3, [r3]
 80092dc:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80092de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	461a      	mov	r2, r3
 80092ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80092f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80092f4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80092f8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80092fa:	e841 2300 	strex	r3, r2, [r1]
 80092fe:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8009300:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009302:	2b00      	cmp	r3, #0
 8009304:	d1e4      	bne.n	80092d0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	3308      	adds	r3, #8
 800930c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009310:	e853 3f00 	ldrex	r3, [r3]
 8009314:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009316:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009318:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800931c:	f023 0301 	bic.w	r3, r3, #1
 8009320:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	3308      	adds	r3, #8
 800932a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800932e:	66ba      	str	r2, [r7, #104]	; 0x68
 8009330:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009332:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009334:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009336:	e841 2300 	strex	r3, r2, [r1]
 800933a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800933c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800933e:	2b00      	cmp	r3, #0
 8009340:	d1e1      	bne.n	8009306 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2220      	movs	r2, #32
 8009346:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2200      	movs	r2, #0
 800934e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2200      	movs	r2, #0
 8009354:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4a5f      	ldr	r2, [pc, #380]	; (80094d8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d021      	beq.n	80093a4 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	685b      	ldr	r3, [r3, #4]
 8009366:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800936a:	2b00      	cmp	r3, #0
 800936c:	d01a      	beq.n	80093a4 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009374:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009376:	e853 3f00 	ldrex	r3, [r3]
 800937a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800937c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800937e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009382:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	461a      	mov	r2, r3
 800938c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009390:	657b      	str	r3, [r7, #84]	; 0x54
 8009392:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009394:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009396:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009398:	e841 2300 	strex	r3, r2, [r1]
 800939c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800939e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d1e4      	bne.n	800936e <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d130      	bne.n	800940e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2200      	movs	r2, #0
 80093b0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093ba:	e853 3f00 	ldrex	r3, [r3]
 80093be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80093c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c2:	f023 0310 	bic.w	r3, r3, #16
 80093c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	461a      	mov	r2, r3
 80093d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80093d4:	643b      	str	r3, [r7, #64]	; 0x40
 80093d6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80093da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80093dc:	e841 2300 	strex	r3, r2, [r1]
 80093e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80093e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d1e4      	bne.n	80093b2 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	69db      	ldr	r3, [r3, #28]
 80093ee:	f003 0310 	and.w	r3, r3, #16
 80093f2:	2b10      	cmp	r3, #16
 80093f4:	d103      	bne.n	80093fe <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	2210      	movs	r2, #16
 80093fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009404:	4619      	mov	r1, r3
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f7fe fe74 	bl	80080f4 <HAL_UARTEx_RxEventCallback>
 800940c:	e002      	b.n	8009414 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f7f8 ff32 	bl	8002278 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009414:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8009418:	2b00      	cmp	r3, #0
 800941a:	d006      	beq.n	800942a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800941c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009420:	f003 0320 	and.w	r3, r3, #32
 8009424:	2b00      	cmp	r3, #0
 8009426:	f47f aecf 	bne.w	80091c8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009430:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009434:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009438:	2b00      	cmp	r3, #0
 800943a:	d049      	beq.n	80094d0 <UART_RxISR_8BIT_FIFOEN+0x350>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009442:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8009446:	429a      	cmp	r2, r3
 8009448:	d242      	bcs.n	80094d0 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	3308      	adds	r3, #8
 8009450:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009452:	6a3b      	ldr	r3, [r7, #32]
 8009454:	e853 3f00 	ldrex	r3, [r3]
 8009458:	61fb      	str	r3, [r7, #28]
   return(result);
 800945a:	69fb      	ldr	r3, [r7, #28]
 800945c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009460:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	3308      	adds	r3, #8
 800946a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800946e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009470:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009472:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009474:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009476:	e841 2300 	strex	r3, r2, [r1]
 800947a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800947c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800947e:	2b00      	cmp	r3, #0
 8009480:	d1e3      	bne.n	800944a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	4a15      	ldr	r2, [pc, #84]	; (80094dc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009486:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	e853 3f00 	ldrex	r3, [r3]
 8009494:	60bb      	str	r3, [r7, #8]
   return(result);
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	f043 0320 	orr.w	r3, r3, #32
 800949c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	461a      	mov	r2, r3
 80094a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80094aa:	61bb      	str	r3, [r7, #24]
 80094ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ae:	6979      	ldr	r1, [r7, #20]
 80094b0:	69ba      	ldr	r2, [r7, #24]
 80094b2:	e841 2300 	strex	r3, r2, [r1]
 80094b6:	613b      	str	r3, [r7, #16]
   return(result);
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d1e4      	bne.n	8009488 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80094be:	e007      	b.n	80094d0 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	699a      	ldr	r2, [r3, #24]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f042 0208 	orr.w	r2, r2, #8
 80094ce:	619a      	str	r2, [r3, #24]
}
 80094d0:	bf00      	nop
 80094d2:	37b0      	adds	r7, #176	; 0xb0
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}
 80094d8:	40008000 	.word	0x40008000
 80094dc:	08008e11 	.word	0x08008e11

080094e0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b0ae      	sub	sp, #184	; 0xb8
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80094ee:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	69db      	ldr	r3, [r3, #28]
 80094f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	689b      	ldr	r3, [r3, #8]
 800950c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009516:	2b22      	cmp	r3, #34	; 0x22
 8009518:	f040 8186 	bne.w	8009828 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009522:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009526:	e129      	b.n	800977c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800952e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009536:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800953a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800953e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8009542:	4013      	ands	r3, r2
 8009544:	b29a      	uxth	r2, r3
 8009546:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800954a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009550:	1c9a      	adds	r2, r3, #2
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800955c:	b29b      	uxth	r3, r3
 800955e:	3b01      	subs	r3, #1
 8009560:	b29a      	uxth	r2, r3
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	69db      	ldr	r3, [r3, #28]
 800956e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009572:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009576:	f003 0307 	and.w	r3, r3, #7
 800957a:	2b00      	cmp	r3, #0
 800957c:	d053      	beq.n	8009626 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800957e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009582:	f003 0301 	and.w	r3, r3, #1
 8009586:	2b00      	cmp	r3, #0
 8009588:	d011      	beq.n	80095ae <UART_RxISR_16BIT_FIFOEN+0xce>
 800958a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800958e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009592:	2b00      	cmp	r3, #0
 8009594:	d00b      	beq.n	80095ae <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	2201      	movs	r2, #1
 800959c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095a4:	f043 0201 	orr.w	r2, r3, #1
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80095b2:	f003 0302 	and.w	r3, r3, #2
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d011      	beq.n	80095de <UART_RxISR_16BIT_FIFOEN+0xfe>
 80095ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80095be:	f003 0301 	and.w	r3, r3, #1
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d00b      	beq.n	80095de <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2202      	movs	r2, #2
 80095cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095d4:	f043 0204 	orr.w	r2, r3, #4
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80095e2:	f003 0304 	and.w	r3, r3, #4
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d011      	beq.n	800960e <UART_RxISR_16BIT_FIFOEN+0x12e>
 80095ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80095ee:	f003 0301 	and.w	r3, r3, #1
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d00b      	beq.n	800960e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	2204      	movs	r2, #4
 80095fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009604:	f043 0202 	orr.w	r2, r3, #2
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009614:	2b00      	cmp	r3, #0
 8009616:	d006      	beq.n	8009626 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f7fe fd61 	bl	80080e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2200      	movs	r2, #0
 8009622:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800962c:	b29b      	uxth	r3, r3
 800962e:	2b00      	cmp	r3, #0
 8009630:	f040 80a4 	bne.w	800977c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800963a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800963c:	e853 3f00 	ldrex	r3, [r3]
 8009640:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009642:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009644:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009648:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	461a      	mov	r2, r3
 8009652:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009656:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800965a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800965c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800965e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009662:	e841 2300 	strex	r3, r2, [r1]
 8009666:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009668:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800966a:	2b00      	cmp	r3, #0
 800966c:	d1e2      	bne.n	8009634 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	3308      	adds	r3, #8
 8009674:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009676:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009678:	e853 3f00 	ldrex	r3, [r3]
 800967c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800967e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009680:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009684:	f023 0301 	bic.w	r3, r3, #1
 8009688:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	3308      	adds	r3, #8
 8009692:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009696:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009698:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800969a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800969c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800969e:	e841 2300 	strex	r3, r2, [r1]
 80096a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80096a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d1e1      	bne.n	800966e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2220      	movs	r2, #32
 80096ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2200      	movs	r2, #0
 80096b6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2200      	movs	r2, #0
 80096bc:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a5f      	ldr	r2, [pc, #380]	; (8009840 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d021      	beq.n	800970c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d01a      	beq.n	800970c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096de:	e853 3f00 	ldrex	r3, [r3]
 80096e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80096e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80096ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	461a      	mov	r2, r3
 80096f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80096f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80096fa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80096fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009700:	e841 2300 	strex	r3, r2, [r1]
 8009704:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009708:	2b00      	cmp	r3, #0
 800970a:	d1e4      	bne.n	80096d6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009710:	2b01      	cmp	r3, #1
 8009712:	d130      	bne.n	8009776 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2200      	movs	r2, #0
 8009718:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009722:	e853 3f00 	ldrex	r3, [r3]
 8009726:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800972a:	f023 0310 	bic.w	r3, r3, #16
 800972e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	461a      	mov	r2, r3
 8009738:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800973c:	647b      	str	r3, [r7, #68]	; 0x44
 800973e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009740:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009742:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009744:	e841 2300 	strex	r3, r2, [r1]
 8009748:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800974a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800974c:	2b00      	cmp	r3, #0
 800974e:	d1e4      	bne.n	800971a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	69db      	ldr	r3, [r3, #28]
 8009756:	f003 0310 	and.w	r3, r3, #16
 800975a:	2b10      	cmp	r3, #16
 800975c:	d103      	bne.n	8009766 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	2210      	movs	r2, #16
 8009764:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800976c:	4619      	mov	r1, r3
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f7fe fcc0 	bl	80080f4 <HAL_UARTEx_RxEventCallback>
 8009774:	e002      	b.n	800977c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f7f8 fd7e 	bl	8002278 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800977c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009780:	2b00      	cmp	r3, #0
 8009782:	d006      	beq.n	8009792 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009784:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009788:	f003 0320 	and.w	r3, r3, #32
 800978c:	2b00      	cmp	r3, #0
 800978e:	f47f aecb 	bne.w	8009528 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009798:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800979c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d049      	beq.n	8009838 <UART_RxISR_16BIT_FIFOEN+0x358>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80097aa:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d242      	bcs.n	8009838 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	3308      	adds	r3, #8
 80097b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097bc:	e853 3f00 	ldrex	r3, [r3]
 80097c0:	623b      	str	r3, [r7, #32]
   return(result);
 80097c2:	6a3b      	ldr	r3, [r7, #32]
 80097c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80097c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	3308      	adds	r3, #8
 80097d2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80097d6:	633a      	str	r2, [r7, #48]	; 0x30
 80097d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80097dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097de:	e841 2300 	strex	r3, r2, [r1]
 80097e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80097e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d1e3      	bne.n	80097b2 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4a15      	ldr	r2, [pc, #84]	; (8009844 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80097ee:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	e853 3f00 	ldrex	r3, [r3]
 80097fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f043 0320 	orr.w	r3, r3, #32
 8009804:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	461a      	mov	r2, r3
 800980e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009812:	61fb      	str	r3, [r7, #28]
 8009814:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009816:	69b9      	ldr	r1, [r7, #24]
 8009818:	69fa      	ldr	r2, [r7, #28]
 800981a:	e841 2300 	strex	r3, r2, [r1]
 800981e:	617b      	str	r3, [r7, #20]
   return(result);
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d1e4      	bne.n	80097f0 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009826:	e007      	b.n	8009838 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	699a      	ldr	r2, [r3, #24]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f042 0208 	orr.w	r2, r2, #8
 8009836:	619a      	str	r2, [r3, #24]
}
 8009838:	bf00      	nop
 800983a:	37b8      	adds	r7, #184	; 0xb8
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}
 8009840:	40008000 	.word	0x40008000
 8009844:	08008fc9 	.word	0x08008fc9

08009848 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009848:	b480      	push	{r7}
 800984a:	b083      	sub	sp, #12
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009850:	bf00      	nop
 8009852:	370c      	adds	r7, #12
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr

0800985c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800985c:	b480      	push	{r7}
 800985e:	b083      	sub	sp, #12
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009864:	bf00      	nop
 8009866:	370c      	adds	r7, #12
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009870:	b480      	push	{r7}
 8009872:	b083      	sub	sp, #12
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009878:	bf00      	nop
 800987a:	370c      	adds	r7, #12
 800987c:	46bd      	mov	sp, r7
 800987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009882:	4770      	bx	lr

08009884 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009884:	b480      	push	{r7}
 8009886:	b085      	sub	sp, #20
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009892:	2b01      	cmp	r3, #1
 8009894:	d101      	bne.n	800989a <HAL_UARTEx_DisableFifoMode+0x16>
 8009896:	2302      	movs	r3, #2
 8009898:	e027      	b.n	80098ea <HAL_UARTEx_DisableFifoMode+0x66>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2201      	movs	r2, #1
 800989e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2224      	movs	r2, #36	; 0x24
 80098a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f022 0201 	bic.w	r2, r2, #1
 80098c0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80098c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2200      	movs	r2, #0
 80098ce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	68fa      	ldr	r2, [r7, #12]
 80098d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2220      	movs	r2, #32
 80098dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2200      	movs	r2, #0
 80098e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80098e8:	2300      	movs	r3, #0
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3714      	adds	r7, #20
 80098ee:	46bd      	mov	sp, r7
 80098f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f4:	4770      	bx	lr

080098f6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80098f6:	b580      	push	{r7, lr}
 80098f8:	b084      	sub	sp, #16
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
 80098fe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009906:	2b01      	cmp	r3, #1
 8009908:	d101      	bne.n	800990e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800990a:	2302      	movs	r3, #2
 800990c:	e02d      	b.n	800996a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2201      	movs	r2, #1
 8009912:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2224      	movs	r2, #36	; 0x24
 800991a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f022 0201 	bic.w	r2, r2, #1
 8009934:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	689b      	ldr	r3, [r3, #8]
 800993c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	683a      	ldr	r2, [r7, #0]
 8009946:	430a      	orrs	r2, r1
 8009948:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 f850 	bl	80099f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	68fa      	ldr	r2, [r7, #12]
 8009956:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2220      	movs	r2, #32
 800995c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2200      	movs	r2, #0
 8009964:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009968:	2300      	movs	r3, #0
}
 800996a:	4618      	mov	r0, r3
 800996c:	3710      	adds	r7, #16
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}

08009972 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009972:	b580      	push	{r7, lr}
 8009974:	b084      	sub	sp, #16
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
 800997a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009982:	2b01      	cmp	r3, #1
 8009984:	d101      	bne.n	800998a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009986:	2302      	movs	r3, #2
 8009988:	e02d      	b.n	80099e6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2201      	movs	r2, #1
 800998e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2224      	movs	r2, #36	; 0x24
 8009996:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	681a      	ldr	r2, [r3, #0]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f022 0201 	bic.w	r2, r2, #1
 80099b0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	683a      	ldr	r2, [r7, #0]
 80099c2:	430a      	orrs	r2, r1
 80099c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f000 f812 	bl	80099f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	68fa      	ldr	r2, [r7, #12]
 80099d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2220      	movs	r2, #32
 80099d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2200      	movs	r2, #0
 80099e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80099e4:	2300      	movs	r3, #0
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3710      	adds	r7, #16
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
	...

080099f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b085      	sub	sp, #20
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d108      	bne.n	8009a12 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2201      	movs	r2, #1
 8009a04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009a10:	e031      	b.n	8009a76 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009a12:	2308      	movs	r3, #8
 8009a14:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009a16:	2308      	movs	r3, #8
 8009a18:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	689b      	ldr	r3, [r3, #8]
 8009a20:	0e5b      	lsrs	r3, r3, #25
 8009a22:	b2db      	uxtb	r3, r3
 8009a24:	f003 0307 	and.w	r3, r3, #7
 8009a28:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	689b      	ldr	r3, [r3, #8]
 8009a30:	0f5b      	lsrs	r3, r3, #29
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	f003 0307 	and.w	r3, r3, #7
 8009a38:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a3a:	7bbb      	ldrb	r3, [r7, #14]
 8009a3c:	7b3a      	ldrb	r2, [r7, #12]
 8009a3e:	4911      	ldr	r1, [pc, #68]	; (8009a84 <UARTEx_SetNbDataToProcess+0x94>)
 8009a40:	5c8a      	ldrb	r2, [r1, r2]
 8009a42:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009a46:	7b3a      	ldrb	r2, [r7, #12]
 8009a48:	490f      	ldr	r1, [pc, #60]	; (8009a88 <UARTEx_SetNbDataToProcess+0x98>)
 8009a4a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a4c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a50:	b29a      	uxth	r2, r3
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a58:	7bfb      	ldrb	r3, [r7, #15]
 8009a5a:	7b7a      	ldrb	r2, [r7, #13]
 8009a5c:	4909      	ldr	r1, [pc, #36]	; (8009a84 <UARTEx_SetNbDataToProcess+0x94>)
 8009a5e:	5c8a      	ldrb	r2, [r1, r2]
 8009a60:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009a64:	7b7a      	ldrb	r2, [r7, #13]
 8009a66:	4908      	ldr	r1, [pc, #32]	; (8009a88 <UARTEx_SetNbDataToProcess+0x98>)
 8009a68:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a6e:	b29a      	uxth	r2, r3
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009a76:	bf00      	nop
 8009a78:	3714      	adds	r7, #20
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr
 8009a82:	bf00      	nop
 8009a84:	0800f4bc 	.word	0x0800f4bc
 8009a88:	0800f4c4 	.word	0x0800f4c4

08009a8c <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b0cc      	sub	sp, #304	; 0x130
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	4602      	mov	r2, r0
 8009a94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a98:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009a9c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8009a9e:	f107 0310 	add.w	r3, r7, #16
 8009aa2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009aa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009aaa:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009aae:	2200      	movs	r2, #0
 8009ab0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8009ab8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009abc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009ac0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009ac4:	7812      	ldrb	r2, [r2, #0]
 8009ac6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009ac8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009acc:	3301      	adds	r3, #1
 8009ace:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009ad2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009ad6:	2218      	movs	r2, #24
 8009ad8:	2100      	movs	r1, #0
 8009ada:	4618      	mov	r0, r3
 8009adc:	f001 fb70 	bl	800b1c0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009ae0:	233f      	movs	r3, #63	; 0x3f
 8009ae2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8009ae6:	2385      	movs	r3, #133	; 0x85
 8009ae8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009aec:	f107 0310 	add.w	r3, r7, #16
 8009af0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009af4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009af8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009afc:	f107 030f 	add.w	r3, r7, #15
 8009b00:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009b04:	2301      	movs	r3, #1
 8009b06:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009b0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009b0e:	2100      	movs	r1, #0
 8009b10:	4618      	mov	r0, r3
 8009b12:	f001 fa13 	bl	800af3c <hci_send_req>
 8009b16:	4603      	mov	r3, r0
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	da01      	bge.n	8009b20 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8009b1c:	23ff      	movs	r3, #255	; 0xff
 8009b1e:	e004      	b.n	8009b2a <aci_gap_set_io_capability+0x9e>
  return status;
 8009b20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b24:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009b28:	781b      	ldrb	r3, [r3, #0]
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8009b34:	b5b0      	push	{r4, r5, r7, lr}
 8009b36:	b0cc      	sub	sp, #304	; 0x130
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	4605      	mov	r5, r0
 8009b3c:	460c      	mov	r4, r1
 8009b3e:	4610      	mov	r0, r2
 8009b40:	4619      	mov	r1, r3
 8009b42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b46:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009b4a:	462a      	mov	r2, r5
 8009b4c:	701a      	strb	r2, [r3, #0]
 8009b4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b52:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009b56:	4622      	mov	r2, r4
 8009b58:	701a      	strb	r2, [r3, #0]
 8009b5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b5e:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8009b62:	4602      	mov	r2, r0
 8009b64:	701a      	strb	r2, [r3, #0]
 8009b66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009b6e:	460a      	mov	r2, r1
 8009b70:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8009b72:	f107 0310 	add.w	r3, r7, #16
 8009b76:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009b7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b7e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009b82:	2200      	movs	r2, #0
 8009b84:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009b86:	2300      	movs	r3, #0
 8009b88:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8009b8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b90:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009b94:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009b98:	7812      	ldrb	r2, [r2, #0]
 8009b9a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009b9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ba0:	3301      	adds	r3, #1
 8009ba2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8009ba6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009baa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009bae:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009bb2:	7812      	ldrb	r2, [r2, #0]
 8009bb4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009bb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009bba:	3301      	adds	r3, #1
 8009bbc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8009bc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bc4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009bc8:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8009bcc:	7812      	ldrb	r2, [r2, #0]
 8009bce:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009bd0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009bd4:	3301      	adds	r3, #1
 8009bd6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8009bda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bde:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009be2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009be6:	7812      	ldrb	r2, [r2, #0]
 8009be8:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8009bea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009bee:	3301      	adds	r3, #1
 8009bf0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8009bf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bf8:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8009bfc:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009bfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c02:	3301      	adds	r3, #1
 8009c04:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8009c08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c0c:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8009c10:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009c12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c16:	3301      	adds	r3, #1
 8009c18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8009c1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c20:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8009c24:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8009c26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c2a:	3301      	adds	r3, #1
 8009c2c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8009c30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c34:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8009c38:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8009c3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c40:	3304      	adds	r3, #4
 8009c42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8009c46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c4a:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8009c4e:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8009c50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c54:	3301      	adds	r3, #1
 8009c56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009c5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009c5e:	2218      	movs	r2, #24
 8009c60:	2100      	movs	r1, #0
 8009c62:	4618      	mov	r0, r3
 8009c64:	f001 faac 	bl	800b1c0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009c68:	233f      	movs	r3, #63	; 0x3f
 8009c6a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8009c6e:	2386      	movs	r3, #134	; 0x86
 8009c70:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009c74:	f107 0310 	add.w	r3, r7, #16
 8009c78:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009c7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c80:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009c84:	f107 030f 	add.w	r3, r7, #15
 8009c88:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009c92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009c96:	2100      	movs	r1, #0
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f001 f94f 	bl	800af3c <hci_send_req>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	da01      	bge.n	8009ca8 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8009ca4:	23ff      	movs	r3, #255	; 0xff
 8009ca6:	e004      	b.n	8009cb2 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8009ca8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cac:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009cb0:	781b      	ldrb	r3, [r3, #0]
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bdb0      	pop	{r4, r5, r7, pc}

08009cbc <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8009cbc:	b590      	push	{r4, r7, lr}
 8009cbe:	b0cd      	sub	sp, #308	; 0x134
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	4604      	mov	r4, r0
 8009cc4:	4608      	mov	r0, r1
 8009cc6:	4611      	mov	r1, r2
 8009cc8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009ccc:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8009cd0:	6013      	str	r3, [r2, #0]
 8009cd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cd6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009cda:	4622      	mov	r2, r4
 8009cdc:	701a      	strb	r2, [r3, #0]
 8009cde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ce2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	701a      	strb	r2, [r3, #0]
 8009cea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cee:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8009cf2:	460a      	mov	r2, r1
 8009cf4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8009cf6:	f107 0310 	add.w	r3, r7, #16
 8009cfa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009cfe:	f107 0308 	add.w	r3, r7, #8
 8009d02:	2207      	movs	r2, #7
 8009d04:	2100      	movs	r1, #0
 8009d06:	4618      	mov	r0, r3
 8009d08:	f001 fa5a 	bl	800b1c0 <Osal_MemSet>
  int index_input = 0;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8009d12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d16:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009d1a:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009d1e:	7812      	ldrb	r2, [r2, #0]
 8009d20:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009d22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d26:	3301      	adds	r3, #1
 8009d28:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8009d2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d30:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009d34:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009d38:	7812      	ldrb	r2, [r2, #0]
 8009d3a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009d3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d40:	3301      	adds	r3, #1
 8009d42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8009d46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d4a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009d4e:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8009d52:	7812      	ldrb	r2, [r2, #0]
 8009d54:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009d56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d5a:	3301      	adds	r3, #1
 8009d5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009d60:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009d64:	2218      	movs	r2, #24
 8009d66:	2100      	movs	r1, #0
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f001 fa29 	bl	800b1c0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009d6e:	233f      	movs	r3, #63	; 0x3f
 8009d70:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8009d74:	238a      	movs	r3, #138	; 0x8a
 8009d76:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009d7a:	f107 0310 	add.w	r3, r7, #16
 8009d7e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009d82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d86:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8009d8a:	f107 0308 	add.w	r3, r7, #8
 8009d8e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8009d92:	2307      	movs	r3, #7
 8009d94:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009d98:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009d9c:	2100      	movs	r1, #0
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f001 f8cc 	bl	800af3c <hci_send_req>
 8009da4:	4603      	mov	r3, r0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	da01      	bge.n	8009dae <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8009daa:	23ff      	movs	r3, #255	; 0xff
 8009dac:	e02e      	b.n	8009e0c <aci_gap_init+0x150>
  if ( resp.Status )
 8009dae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009db2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d005      	beq.n	8009dc8 <aci_gap_init+0x10c>
    return resp.Status;
 8009dbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009dc0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	e021      	b.n	8009e0c <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8009dc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009dcc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009dd0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009dd4:	b29a      	uxth	r2, r3
 8009dd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009dda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8009de2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009de6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009dea:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009dee:	b29a      	uxth	r2, r3
 8009df0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009df4:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8009df6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009dfa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009dfe:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8009e02:	b29a      	uxth	r2, r3
 8009e04:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009e08:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009e0a:	2300      	movs	r3, #0
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd90      	pop	{r4, r7, pc}

08009e16 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8009e16:	b580      	push	{r7, lr}
 8009e18:	b088      	sub	sp, #32
 8009e1a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009e20:	f107 0308 	add.w	r3, r7, #8
 8009e24:	2218      	movs	r2, #24
 8009e26:	2100      	movs	r1, #0
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f001 f9c9 	bl	800b1c0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009e2e:	233f      	movs	r3, #63	; 0x3f
 8009e30:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8009e32:	2392      	movs	r3, #146	; 0x92
 8009e34:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009e36:	1dfb      	adds	r3, r7, #7
 8009e38:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009e3e:	f107 0308 	add.w	r3, r7, #8
 8009e42:	2100      	movs	r1, #0
 8009e44:	4618      	mov	r0, r3
 8009e46:	f001 f879 	bl	800af3c <hci_send_req>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	da01      	bge.n	8009e54 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009e50:	23ff      	movs	r3, #255	; 0xff
 8009e52:	e000      	b.n	8009e56 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8009e54:	79fb      	ldrb	r3, [r7, #7]
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3720      	adds	r7, #32
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}

08009e5e <aci_gap_start_general_discovery_proc>:

tBleStatus aci_gap_start_general_discovery_proc( uint16_t LE_Scan_Interval,
                                                 uint16_t LE_Scan_Window,
                                                 uint8_t Own_Address_Type,
                                                 uint8_t Filter_Duplicates )
{
 8009e5e:	b5b0      	push	{r4, r5, r7, lr}
 8009e60:	b0cc      	sub	sp, #304	; 0x130
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	4605      	mov	r5, r0
 8009e66:	460c      	mov	r4, r1
 8009e68:	4610      	mov	r0, r2
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e70:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009e74:	462a      	mov	r2, r5
 8009e76:	801a      	strh	r2, [r3, #0]
 8009e78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009e80:	4622      	mov	r2, r4
 8009e82:	801a      	strh	r2, [r3, #0]
 8009e84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e88:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	701a      	strb	r2, [r3, #0]
 8009e90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e94:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009e98:	460a      	mov	r2, r1
 8009e9a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_start_general_discovery_proc_cp0 *cp0 = (aci_gap_start_general_discovery_proc_cp0*)(cmd_buffer);
 8009e9c:	f107 0310 	add.w	r3, r7, #16
 8009ea0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009ea4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ea8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009eac:	2200      	movs	r2, #0
 8009eae:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Interval = LE_Scan_Interval;
 8009eb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009eba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009ebe:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009ec2:	8812      	ldrh	r2, [r2, #0]
 8009ec4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009ec6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009eca:	3302      	adds	r3, #2
 8009ecc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Window = LE_Scan_Window;
 8009ed0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ed4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009ed8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009edc:	8812      	ldrh	r2, [r2, #0]
 8009ede:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8009ee0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ee4:	3302      	adds	r3, #2
 8009ee6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8009eea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009eee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009ef2:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8009ef6:	7812      	ldrb	r2, [r2, #0]
 8009ef8:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009efa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009efe:	3301      	adds	r3, #1
 8009f00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Filter_Duplicates = Filter_Duplicates;
 8009f04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f08:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009f0c:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8009f10:	7812      	ldrb	r2, [r2, #0]
 8009f12:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009f14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009f18:	3301      	adds	r3, #1
 8009f1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009f1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009f22:	2218      	movs	r2, #24
 8009f24:	2100      	movs	r1, #0
 8009f26:	4618      	mov	r0, r3
 8009f28:	f001 f94a 	bl	800b1c0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009f2c:	233f      	movs	r3, #63	; 0x3f
 8009f2e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x097;
 8009f32:	2397      	movs	r3, #151	; 0x97
 8009f34:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8009f38:	230f      	movs	r3, #15
 8009f3a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8009f3e:	f107 0310 	add.w	r3, r7, #16
 8009f42:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009f46:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009f4a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009f4e:	f107 030f 	add.w	r3, r7, #15
 8009f52:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009f56:	2301      	movs	r3, #1
 8009f58:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009f5c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009f60:	2100      	movs	r1, #0
 8009f62:	4618      	mov	r0, r3
 8009f64:	f000 ffea 	bl	800af3c <hci_send_req>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	da01      	bge.n	8009f72 <aci_gap_start_general_discovery_proc+0x114>
    return BLE_STATUS_TIMEOUT;
 8009f6e:	23ff      	movs	r3, #255	; 0xff
 8009f70:	e004      	b.n	8009f7c <aci_gap_start_general_discovery_proc+0x11e>
  return status;
 8009f72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f76:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009f7a:	781b      	ldrb	r3, [r3, #0]
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bdb0      	pop	{r4, r5, r7, pc}

08009f86 <aci_gap_create_connection>:
                                      uint16_t Conn_Interval_Max,
                                      uint16_t Conn_Latency,
                                      uint16_t Supervision_Timeout,
                                      uint16_t Minimum_CE_Length,
                                      uint16_t Maximum_CE_Length )
{
 8009f86:	b590      	push	{r4, r7, lr}
 8009f88:	b0cf      	sub	sp, #316	; 0x13c
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	4604      	mov	r4, r0
 8009f8e:	4608      	mov	r0, r1
 8009f90:	4611      	mov	r1, r2
 8009f92:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009f96:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8009f9a:	6013      	str	r3, [r2, #0]
 8009f9c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009fa0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009fa4:	4622      	mov	r2, r4
 8009fa6:	801a      	strh	r2, [r3, #0]
 8009fa8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009fac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009fb0:	4602      	mov	r2, r0
 8009fb2:	801a      	strh	r2, [r3, #0]
 8009fb4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009fb8:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8009fbc:	460a      	mov	r2, r1
 8009fbe:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_create_connection_cp0 *cp0 = (aci_gap_create_connection_cp0*)(cmd_buffer);
 8009fc0:	f107 0318 	add.w	r3, r7, #24
 8009fc4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 8009fc8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009fcc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->LE_Scan_Interval = LE_Scan_Interval;
 8009fda:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009fde:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009fe2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009fe6:	8812      	ldrh	r2, [r2, #0]
 8009fe8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009fea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009fee:	3302      	adds	r3, #2
 8009ff0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->LE_Scan_Window = LE_Scan_Window;
 8009ff4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009ff8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009ffc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800a000:	8812      	ldrh	r2, [r2, #0]
 800a002:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800a004:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a008:	3302      	adds	r3, #2
 800a00a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Peer_Address_Type = Peer_Address_Type;
 800a00e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a012:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800a016:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800a01a:	7812      	ldrb	r2, [r2, #0]
 800a01c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800a01e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a022:	3301      	adds	r3, #1
 800a024:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy( (void*)&cp0->Peer_Address, (const void*)Peer_Address, 6 );
 800a028:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a02c:	1d58      	adds	r0, r3, #5
 800a02e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a032:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800a036:	2206      	movs	r2, #6
 800a038:	6819      	ldr	r1, [r3, #0]
 800a03a:	f001 f8b1 	bl	800b1a0 <Osal_MemCpy>
  index_input += 6;
 800a03e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a042:	3306      	adds	r3, #6
 800a044:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Own_Address_Type = Own_Address_Type;
 800a048:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a04c:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800a050:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800a052:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a056:	3301      	adds	r3, #1
 800a058:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 800a05c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a060:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 800a064:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 800a066:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a06a:	3302      	adds	r3, #2
 800a06c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 800a070:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a074:	f8b7 2150 	ldrh.w	r2, [r7, #336]	; 0x150
 800a078:	81da      	strh	r2, [r3, #14]
  index_input += 2;
 800a07a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a07e:	3302      	adds	r3, #2
 800a080:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Latency = Conn_Latency;
 800a084:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a088:	f8b7 2154 	ldrh.w	r2, [r7, #340]	; 0x154
 800a08c:	821a      	strh	r2, [r3, #16]
  index_input += 2;
 800a08e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a092:	3302      	adds	r3, #2
 800a094:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Supervision_Timeout = Supervision_Timeout;
 800a098:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a09c:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 800a0a0:	825a      	strh	r2, [r3, #18]
  index_input += 2;
 800a0a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a0a6:	3302      	adds	r3, #2
 800a0a8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Minimum_CE_Length = Minimum_CE_Length;
 800a0ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a0b0:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800a0b4:	829a      	strh	r2, [r3, #20]
  index_input += 2;
 800a0b6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a0ba:	3302      	adds	r3, #2
 800a0bc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Maximum_CE_Length = Maximum_CE_Length;
 800a0c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a0c4:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800a0c8:	82da      	strh	r2, [r3, #22]
  index_input += 2;
 800a0ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a0ce:	3302      	adds	r3, #2
 800a0d0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a0d4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a0d8:	2218      	movs	r2, #24
 800a0da:	2100      	movs	r1, #0
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f001 f86f 	bl	800b1c0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a0e2:	233f      	movs	r3, #63	; 0x3f
 800a0e4:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x09c;
 800a0e8:	239c      	movs	r3, #156	; 0x9c
 800a0ea:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 800a0ee:	230f      	movs	r3, #15
 800a0f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 800a0f4:	f107 0318 	add.w	r3, r7, #24
 800a0f8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800a0fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a100:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 800a104:	f107 0317 	add.w	r3, r7, #23
 800a108:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 800a10c:	2301      	movs	r3, #1
 800a10e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a112:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a116:	2100      	movs	r1, #0
 800a118:	4618      	mov	r0, r3
 800a11a:	f000 ff0f 	bl	800af3c <hci_send_req>
 800a11e:	4603      	mov	r3, r0
 800a120:	2b00      	cmp	r3, #0
 800a122:	da01      	bge.n	800a128 <aci_gap_create_connection+0x1a2>
    return BLE_STATUS_TIMEOUT;
 800a124:	23ff      	movs	r3, #255	; 0xff
 800a126:	e004      	b.n	800a132 <aci_gap_create_connection+0x1ac>
  return status;
 800a128:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a12c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a130:	781b      	ldrb	r3, [r3, #0]
}
 800a132:	4618      	mov	r0, r3
 800a134:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd90      	pop	{r4, r7, pc}

0800a13c <aci_gap_terminate_gap_proc>:

tBleStatus aci_gap_terminate_gap_proc( uint8_t Procedure_Code )
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b0cc      	sub	sp, #304	; 0x130
 800a140:	af00      	add	r7, sp, #0
 800a142:	4602      	mov	r2, r0
 800a144:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a148:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a14c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_terminate_gap_proc_cp0 *cp0 = (aci_gap_terminate_gap_proc_cp0*)(cmd_buffer);
 800a14e:	f107 0310 	add.w	r3, r7, #16
 800a152:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a156:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a15a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a15e:	2200      	movs	r2, #0
 800a160:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a162:	2300      	movs	r3, #0
 800a164:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Procedure_Code = Procedure_Code;
 800a168:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a16c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a170:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800a174:	7812      	ldrb	r2, [r2, #0]
 800a176:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a178:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a17c:	3301      	adds	r3, #1
 800a17e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a182:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a186:	2218      	movs	r2, #24
 800a188:	2100      	movs	r1, #0
 800a18a:	4618      	mov	r0, r3
 800a18c:	f001 f818 	bl	800b1c0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a190:	233f      	movs	r3, #63	; 0x3f
 800a192:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x09d;
 800a196:	239d      	movs	r3, #157	; 0x9d
 800a198:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a19c:	f107 0310 	add.w	r3, r7, #16
 800a1a0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a1a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a1a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a1ac:	f107 030f 	add.w	r3, r7, #15
 800a1b0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a1ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a1be:	2100      	movs	r1, #0
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f000 febb 	bl	800af3c <hci_send_req>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	da01      	bge.n	800a1d0 <aci_gap_terminate_gap_proc+0x94>
    return BLE_STATUS_TIMEOUT;
 800a1cc:	23ff      	movs	r3, #255	; 0xff
 800a1ce:	e004      	b.n	800a1da <aci_gap_terminate_gap_proc+0x9e>
  return status;
 800a1d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1d4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a1d8:	781b      	ldrb	r3, [r3, #0]
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}

0800a1e4 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b088      	sub	sp, #32
 800a1e8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a1ee:	f107 0308 	add.w	r3, r7, #8
 800a1f2:	2218      	movs	r2, #24
 800a1f4:	2100      	movs	r1, #0
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f000 ffe2 	bl	800b1c0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a1fc:	233f      	movs	r3, #63	; 0x3f
 800a1fe:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800a200:	f240 1301 	movw	r3, #257	; 0x101
 800a204:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a206:	1dfb      	adds	r3, r7, #7
 800a208:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a20a:	2301      	movs	r3, #1
 800a20c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a20e:	f107 0308 	add.w	r3, r7, #8
 800a212:	2100      	movs	r1, #0
 800a214:	4618      	mov	r0, r3
 800a216:	f000 fe91 	bl	800af3c <hci_send_req>
 800a21a:	4603      	mov	r3, r0
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	da01      	bge.n	800a224 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800a220:	23ff      	movs	r3, #255	; 0xff
 800a222:	e000      	b.n	800a226 <aci_gatt_init+0x42>
  return status;
 800a224:	79fb      	ldrb	r3, [r7, #7]
}
 800a226:	4618      	mov	r0, r3
 800a228:	3720      	adds	r7, #32
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}

0800a22e <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800a22e:	b5b0      	push	{r4, r5, r7, lr}
 800a230:	b0cc      	sub	sp, #304	; 0x130
 800a232:	af00      	add	r7, sp, #0
 800a234:	4605      	mov	r5, r0
 800a236:	460c      	mov	r4, r1
 800a238:	4610      	mov	r0, r2
 800a23a:	4619      	mov	r1, r3
 800a23c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a240:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a244:	462a      	mov	r2, r5
 800a246:	801a      	strh	r2, [r3, #0]
 800a248:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a24c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a250:	4622      	mov	r2, r4
 800a252:	801a      	strh	r2, [r3, #0]
 800a254:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a258:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800a25c:	4602      	mov	r2, r0
 800a25e:	701a      	strb	r2, [r3, #0]
 800a260:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a264:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800a268:	460a      	mov	r2, r1
 800a26a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800a26c:	f107 0310 	add.w	r3, r7, #16
 800a270:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a274:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a278:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a27c:	2200      	movs	r2, #0
 800a27e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a280:	2300      	movs	r3, #0
 800a282:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800a286:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a28a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a28e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a292:	8812      	ldrh	r2, [r2, #0]
 800a294:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a296:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a29a:	3302      	adds	r3, #2
 800a29c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800a2a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2a4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a2a8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800a2ac:	8812      	ldrh	r2, [r2, #0]
 800a2ae:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800a2b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a2b4:	3302      	adds	r3, #2
 800a2b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800a2ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2be:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a2c2:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800a2c6:	7812      	ldrb	r2, [r2, #0]
 800a2c8:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800a2ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800a2d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2d8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a2dc:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800a2e0:	7812      	ldrb	r2, [r2, #0]
 800a2e2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800a2e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a2e8:	3301      	adds	r3, #1
 800a2ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800a2ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2f2:	1d98      	adds	r0, r3, #6
 800a2f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2f8:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800a2fc:	781b      	ldrb	r3, [r3, #0]
 800a2fe:	461a      	mov	r2, r3
 800a300:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800a304:	f000 ff4c 	bl	800b1a0 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800a308:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a30c:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800a310:	781b      	ldrb	r3, [r3, #0]
 800a312:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a316:	4413      	add	r3, r2
 800a318:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a31c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a320:	2218      	movs	r2, #24
 800a322:	2100      	movs	r1, #0
 800a324:	4618      	mov	r0, r3
 800a326:	f000 ff4b 	bl	800b1c0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a32a:	233f      	movs	r3, #63	; 0x3f
 800a32c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800a330:	f44f 7383 	mov.w	r3, #262	; 0x106
 800a334:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a338:	f107 0310 	add.w	r3, r7, #16
 800a33c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a340:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a344:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a348:	f107 030f 	add.w	r3, r7, #15
 800a34c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a350:	2301      	movs	r3, #1
 800a352:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a356:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a35a:	2100      	movs	r1, #0
 800a35c:	4618      	mov	r0, r3
 800a35e:	f000 fded 	bl	800af3c <hci_send_req>
 800a362:	4603      	mov	r3, r0
 800a364:	2b00      	cmp	r3, #0
 800a366:	da01      	bge.n	800a36c <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800a368:	23ff      	movs	r3, #255	; 0xff
 800a36a:	e004      	b.n	800a376 <aci_gatt_update_char_value+0x148>
  return status;
 800a36c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a370:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a374:	781b      	ldrb	r3, [r3, #0]
}
 800a376:	4618      	mov	r0, r3
 800a378:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bdb0      	pop	{r4, r5, r7, pc}

0800a380 <aci_gatt_disc_all_primary_services>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_disc_all_primary_services( uint16_t Connection_Handle )
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b0cc      	sub	sp, #304	; 0x130
 800a384:	af00      	add	r7, sp, #0
 800a386:	4602      	mov	r2, r0
 800a388:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a38c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a390:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_primary_services_cp0 *cp0 = (aci_gatt_disc_all_primary_services_cp0*)(cmd_buffer);
 800a392:	f107 0310 	add.w	r3, r7, #16
 800a396:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a39a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a39e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800a3ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3b0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a3b4:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a3b8:	8812      	ldrh	r2, [r2, #0]
 800a3ba:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a3bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a3c0:	3302      	adds	r3, #2
 800a3c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a3c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a3ca:	2218      	movs	r2, #24
 800a3cc:	2100      	movs	r1, #0
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f000 fef6 	bl	800b1c0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a3d4:	233f      	movs	r3, #63	; 0x3f
 800a3d6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x112;
 800a3da:	f44f 7389 	mov.w	r3, #274	; 0x112
 800a3de:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800a3e2:	230f      	movs	r3, #15
 800a3e4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800a3e8:	f107 0310 	add.w	r3, r7, #16
 800a3ec:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a3f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a3f4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a3f8:	f107 030f 	add.w	r3, r7, #15
 800a3fc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a400:	2301      	movs	r3, #1
 800a402:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a406:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a40a:	2100      	movs	r1, #0
 800a40c:	4618      	mov	r0, r3
 800a40e:	f000 fd95 	bl	800af3c <hci_send_req>
 800a412:	4603      	mov	r3, r0
 800a414:	2b00      	cmp	r3, #0
 800a416:	da01      	bge.n	800a41c <aci_gatt_disc_all_primary_services+0x9c>
    return BLE_STATUS_TIMEOUT;
 800a418:	23ff      	movs	r3, #255	; 0xff
 800a41a:	e004      	b.n	800a426 <aci_gatt_disc_all_primary_services+0xa6>
  return status;
 800a41c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a420:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a424:	781b      	ldrb	r3, [r3, #0]
}
 800a426:	4618      	mov	r0, r3
 800a428:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}

0800a430 <aci_gatt_disc_all_char_of_service>:
}

tBleStatus aci_gatt_disc_all_char_of_service( uint16_t Connection_Handle,
                                              uint16_t Start_Handle,
                                              uint16_t End_Handle )
{
 800a430:	b590      	push	{r4, r7, lr}
 800a432:	b0cd      	sub	sp, #308	; 0x134
 800a434:	af00      	add	r7, sp, #0
 800a436:	4604      	mov	r4, r0
 800a438:	4608      	mov	r0, r1
 800a43a:	4611      	mov	r1, r2
 800a43c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a440:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a444:	4622      	mov	r2, r4
 800a446:	801a      	strh	r2, [r3, #0]
 800a448:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a44c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a450:	4602      	mov	r2, r0
 800a452:	801a      	strh	r2, [r3, #0]
 800a454:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a458:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800a45c:	460a      	mov	r2, r1
 800a45e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_of_service_cp0 *cp0 = (aci_gatt_disc_all_char_of_service_cp0*)(cmd_buffer);
 800a460:	f107 0310 	add.w	r3, r7, #16
 800a464:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a468:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a46c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a470:	2200      	movs	r2, #0
 800a472:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a474:	2300      	movs	r3, #0
 800a476:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800a47a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a47e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a482:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a486:	8812      	ldrh	r2, [r2, #0]
 800a488:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a48a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a48e:	3302      	adds	r3, #2
 800a490:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Start_Handle = Start_Handle;
 800a494:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a498:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a49c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800a4a0:	8812      	ldrh	r2, [r2, #0]
 800a4a2:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800a4a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a4a8:	3302      	adds	r3, #2
 800a4aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->End_Handle = End_Handle;
 800a4ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a4b2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a4b6:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800a4ba:	8812      	ldrh	r2, [r2, #0]
 800a4bc:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800a4be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a4c2:	3302      	adds	r3, #2
 800a4c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a4c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a4cc:	2218      	movs	r2, #24
 800a4ce:	2100      	movs	r1, #0
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f000 fe75 	bl	800b1c0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a4d6:	233f      	movs	r3, #63	; 0x3f
 800a4d8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x115;
 800a4dc:	f240 1315 	movw	r3, #277	; 0x115
 800a4e0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800a4e4:	230f      	movs	r3, #15
 800a4e6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800a4ea:	f107 0310 	add.w	r3, r7, #16
 800a4ee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a4f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a4f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a4fa:	f107 030f 	add.w	r3, r7, #15
 800a4fe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a502:	2301      	movs	r3, #1
 800a504:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a508:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a50c:	2100      	movs	r1, #0
 800a50e:	4618      	mov	r0, r3
 800a510:	f000 fd14 	bl	800af3c <hci_send_req>
 800a514:	4603      	mov	r3, r0
 800a516:	2b00      	cmp	r3, #0
 800a518:	da01      	bge.n	800a51e <aci_gatt_disc_all_char_of_service+0xee>
    return BLE_STATUS_TIMEOUT;
 800a51a:	23ff      	movs	r3, #255	; 0xff
 800a51c:	e004      	b.n	800a528 <aci_gatt_disc_all_char_of_service+0xf8>
  return status;
 800a51e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a522:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a526:	781b      	ldrb	r3, [r3, #0]
}
 800a528:	4618      	mov	r0, r3
 800a52a:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd90      	pop	{r4, r7, pc}

0800a532 <aci_gatt_disc_all_char_desc>:
}

tBleStatus aci_gatt_disc_all_char_desc( uint16_t Connection_Handle,
                                        uint16_t Char_Handle,
                                        uint16_t End_Handle )
{
 800a532:	b590      	push	{r4, r7, lr}
 800a534:	b0cd      	sub	sp, #308	; 0x134
 800a536:	af00      	add	r7, sp, #0
 800a538:	4604      	mov	r4, r0
 800a53a:	4608      	mov	r0, r1
 800a53c:	4611      	mov	r1, r2
 800a53e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a542:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a546:	4622      	mov	r2, r4
 800a548:	801a      	strh	r2, [r3, #0]
 800a54a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a54e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a552:	4602      	mov	r2, r0
 800a554:	801a      	strh	r2, [r3, #0]
 800a556:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a55a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800a55e:	460a      	mov	r2, r1
 800a560:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_desc_cp0 *cp0 = (aci_gatt_disc_all_char_desc_cp0*)(cmd_buffer);
 800a562:	f107 0310 	add.w	r3, r7, #16
 800a566:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a56a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a56e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a572:	2200      	movs	r2, #0
 800a574:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a576:	2300      	movs	r3, #0
 800a578:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800a57c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a580:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a584:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a588:	8812      	ldrh	r2, [r2, #0]
 800a58a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a58c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a590:	3302      	adds	r3, #2
 800a592:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800a596:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a59a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a59e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800a5a2:	8812      	ldrh	r2, [r2, #0]
 800a5a4:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800a5a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a5aa:	3302      	adds	r3, #2
 800a5ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->End_Handle = End_Handle;
 800a5b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a5b4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a5b8:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800a5bc:	8812      	ldrh	r2, [r2, #0]
 800a5be:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800a5c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a5c4:	3302      	adds	r3, #2
 800a5c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a5ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a5ce:	2218      	movs	r2, #24
 800a5d0:	2100      	movs	r1, #0
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f000 fdf4 	bl	800b1c0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a5d8:	233f      	movs	r3, #63	; 0x3f
 800a5da:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x117;
 800a5de:	f240 1317 	movw	r3, #279	; 0x117
 800a5e2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800a5e6:	230f      	movs	r3, #15
 800a5e8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800a5ec:	f107 0310 	add.w	r3, r7, #16
 800a5f0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a5f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a5f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a5fc:	f107 030f 	add.w	r3, r7, #15
 800a600:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a604:	2301      	movs	r3, #1
 800a606:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a60a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a60e:	2100      	movs	r1, #0
 800a610:	4618      	mov	r0, r3
 800a612:	f000 fc93 	bl	800af3c <hci_send_req>
 800a616:	4603      	mov	r3, r0
 800a618:	2b00      	cmp	r3, #0
 800a61a:	da01      	bge.n	800a620 <aci_gatt_disc_all_char_desc+0xee>
    return BLE_STATUS_TIMEOUT;
 800a61c:	23ff      	movs	r3, #255	; 0xff
 800a61e:	e004      	b.n	800a62a <aci_gatt_disc_all_char_desc+0xf8>
  return status;
 800a620:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a624:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a628:	781b      	ldrb	r3, [r3, #0]
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800a630:	46bd      	mov	sp, r7
 800a632:	bd90      	pop	{r4, r7, pc}

0800a634 <aci_gatt_write_char_desc>:

tBleStatus aci_gatt_write_char_desc( uint16_t Connection_Handle,
                                     uint16_t Attr_Handle,
                                     uint8_t Attribute_Val_Length,
                                     const uint8_t* Attribute_Val )
{
 800a634:	b590      	push	{r4, r7, lr}
 800a636:	b0cf      	sub	sp, #316	; 0x13c
 800a638:	af00      	add	r7, sp, #0
 800a63a:	4604      	mov	r4, r0
 800a63c:	4608      	mov	r0, r1
 800a63e:	4611      	mov	r1, r2
 800a640:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800a644:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800a648:	6013      	str	r3, [r2, #0]
 800a64a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a64e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a652:	4622      	mov	r2, r4
 800a654:	801a      	strh	r2, [r3, #0]
 800a656:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a65a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a65e:	4602      	mov	r2, r0
 800a660:	801a      	strh	r2, [r3, #0]
 800a662:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a666:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800a66a:	460a      	mov	r2, r1
 800a66c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_char_desc_cp0 *cp0 = (aci_gatt_write_char_desc_cp0*)(cmd_buffer);
 800a66e:	f107 0318 	add.w	r3, r7, #24
 800a672:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 800a676:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a67a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a67e:	2200      	movs	r2, #0
 800a680:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a682:	2300      	movs	r3, #0
 800a684:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 800a688:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a68c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800a690:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a694:	8812      	ldrh	r2, [r2, #0]
 800a696:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a698:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a69c:	3302      	adds	r3, #2
 800a69e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attr_Handle = Attr_Handle;
 800a6a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a6a6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800a6aa:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800a6ae:	8812      	ldrh	r2, [r2, #0]
 800a6b0:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800a6b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a6b6:	3302      	adds	r3, #2
 800a6b8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attribute_Val_Length = Attribute_Val_Length;
 800a6bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a6c0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800a6c4:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800a6c8:	7812      	ldrb	r2, [r2, #0]
 800a6ca:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800a6cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a6d0:	3301      	adds	r3, #1
 800a6d2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy( (void*)&cp0->Attribute_Val, (const void*)Attribute_Val, Attribute_Val_Length );
 800a6d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a6da:	1d58      	adds	r0, r3, #5
 800a6dc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a6e0:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800a6e4:	781a      	ldrb	r2, [r3, #0]
 800a6e6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a6ea:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800a6ee:	6819      	ldr	r1, [r3, #0]
 800a6f0:	f000 fd56 	bl	800b1a0 <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 800a6f4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a6f8:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800a6fc:	781b      	ldrb	r3, [r3, #0]
 800a6fe:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800a702:	4413      	add	r3, r2
 800a704:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a708:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a70c:	2218      	movs	r2, #24
 800a70e:	2100      	movs	r1, #0
 800a710:	4618      	mov	r0, r3
 800a712:	f000 fd55 	bl	800b1c0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a716:	233f      	movs	r3, #63	; 0x3f
 800a718:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x121;
 800a71c:	f240 1321 	movw	r3, #289	; 0x121
 800a720:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 800a724:	230f      	movs	r3, #15
 800a726:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 800a72a:	f107 0318 	add.w	r3, r7, #24
 800a72e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800a732:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a736:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 800a73a:	f107 0317 	add.w	r3, r7, #23
 800a73e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 800a742:	2301      	movs	r3, #1
 800a744:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a748:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a74c:	2100      	movs	r1, #0
 800a74e:	4618      	mov	r0, r3
 800a750:	f000 fbf4 	bl	800af3c <hci_send_req>
 800a754:	4603      	mov	r3, r0
 800a756:	2b00      	cmp	r3, #0
 800a758:	da01      	bge.n	800a75e <aci_gatt_write_char_desc+0x12a>
    return BLE_STATUS_TIMEOUT;
 800a75a:	23ff      	movs	r3, #255	; 0xff
 800a75c:	e004      	b.n	800a768 <aci_gatt_write_char_desc+0x134>
  return status;
 800a75e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a762:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a766:	781b      	ldrb	r3, [r3, #0]
}
 800a768:	4618      	mov	r0, r3
 800a76a:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd90      	pop	{r4, r7, pc}

0800a772 <aci_gatt_write_without_resp>:

tBleStatus aci_gatt_write_without_resp( uint16_t Connection_Handle,
                                        uint16_t Attr_Handle,
                                        uint8_t Attribute_Val_Length,
                                        const uint8_t* Attribute_Val )
{
 800a772:	b590      	push	{r4, r7, lr}
 800a774:	b0cf      	sub	sp, #316	; 0x13c
 800a776:	af00      	add	r7, sp, #0
 800a778:	4604      	mov	r4, r0
 800a77a:	4608      	mov	r0, r1
 800a77c:	4611      	mov	r1, r2
 800a77e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800a782:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800a786:	6013      	str	r3, [r2, #0]
 800a788:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a78c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a790:	4622      	mov	r2, r4
 800a792:	801a      	strh	r2, [r3, #0]
 800a794:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a798:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a79c:	4602      	mov	r2, r0
 800a79e:	801a      	strh	r2, [r3, #0]
 800a7a0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a7a4:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800a7a8:	460a      	mov	r2, r1
 800a7aa:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_without_resp_cp0 *cp0 = (aci_gatt_write_without_resp_cp0*)(cmd_buffer);
 800a7ac:	f107 0318 	add.w	r3, r7, #24
 800a7b0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 800a7b4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a7b8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a7bc:	2200      	movs	r2, #0
 800a7be:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 800a7c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a7ca:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800a7ce:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a7d2:	8812      	ldrh	r2, [r2, #0]
 800a7d4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a7d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a7da:	3302      	adds	r3, #2
 800a7dc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attr_Handle = Attr_Handle;
 800a7e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a7e4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800a7e8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800a7ec:	8812      	ldrh	r2, [r2, #0]
 800a7ee:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800a7f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a7f4:	3302      	adds	r3, #2
 800a7f6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attribute_Val_Length = Attribute_Val_Length;
 800a7fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a7fe:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800a802:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800a806:	7812      	ldrb	r2, [r2, #0]
 800a808:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800a80a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a80e:	3301      	adds	r3, #1
 800a810:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy( (void*)&cp0->Attribute_Val, (const void*)Attribute_Val, Attribute_Val_Length );
 800a814:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a818:	1d58      	adds	r0, r3, #5
 800a81a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a81e:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800a822:	781a      	ldrb	r2, [r3, #0]
 800a824:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a828:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800a82c:	6819      	ldr	r1, [r3, #0]
 800a82e:	f000 fcb7 	bl	800b1a0 <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 800a832:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a836:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800a83a:	781b      	ldrb	r3, [r3, #0]
 800a83c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800a840:	4413      	add	r3, r2
 800a842:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a846:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a84a:	2218      	movs	r2, #24
 800a84c:	2100      	movs	r1, #0
 800a84e:	4618      	mov	r0, r3
 800a850:	f000 fcb6 	bl	800b1c0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a854:	233f      	movs	r3, #63	; 0x3f
 800a856:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x123;
 800a85a:	f240 1323 	movw	r3, #291	; 0x123
 800a85e:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800a862:	f107 0318 	add.w	r3, r7, #24
 800a866:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800a86a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a86e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 800a872:	f107 0317 	add.w	r3, r7, #23
 800a876:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 800a87a:	2301      	movs	r3, #1
 800a87c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a880:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a884:	2100      	movs	r1, #0
 800a886:	4618      	mov	r0, r3
 800a888:	f000 fb58 	bl	800af3c <hci_send_req>
 800a88c:	4603      	mov	r3, r0
 800a88e:	2b00      	cmp	r3, #0
 800a890:	da01      	bge.n	800a896 <aci_gatt_write_without_resp+0x124>
    return BLE_STATUS_TIMEOUT;
 800a892:	23ff      	movs	r3, #255	; 0xff
 800a894:	e004      	b.n	800a8a0 <aci_gatt_write_without_resp+0x12e>
  return status;
 800a896:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a89a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a89e:	781b      	ldrb	r3, [r3, #0]
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd90      	pop	{r4, r7, pc}

0800a8aa <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800a8aa:	b580      	push	{r7, lr}
 800a8ac:	b0cc      	sub	sp, #304	; 0x130
 800a8ae:	af00      	add	r7, sp, #0
 800a8b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a8b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a8b8:	601a      	str	r2, [r3, #0]
 800a8ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a8be:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	701a      	strb	r2, [r3, #0]
 800a8c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a8ca:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a8ce:	460a      	mov	r2, r1
 800a8d0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800a8d2:	f107 0310 	add.w	r3, r7, #16
 800a8d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a8da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a8de:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800a8ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8f0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a8f4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800a8f8:	7812      	ldrb	r2, [r2, #0]
 800a8fa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a8fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a900:	3301      	adds	r3, #1
 800a902:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800a906:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a90a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a90e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a912:	7812      	ldrb	r2, [r2, #0]
 800a914:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a916:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a91a:	3301      	adds	r3, #1
 800a91c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800a920:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a924:	1c98      	adds	r0, r3, #2
 800a926:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a92a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a92e:	781a      	ldrb	r2, [r3, #0]
 800a930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a934:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a938:	6819      	ldr	r1, [r3, #0]
 800a93a:	f000 fc31 	bl	800b1a0 <Osal_MemCpy>
  index_input += Length;
 800a93e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a942:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a94c:	4413      	add	r3, r2
 800a94e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a952:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a956:	2218      	movs	r2, #24
 800a958:	2100      	movs	r1, #0
 800a95a:	4618      	mov	r0, r3
 800a95c:	f000 fc30 	bl	800b1c0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a960:	233f      	movs	r3, #63	; 0x3f
 800a962:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800a966:	230c      	movs	r3, #12
 800a968:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a96c:	f107 0310 	add.w	r3, r7, #16
 800a970:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a974:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a978:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a97c:	f107 030f 	add.w	r3, r7, #15
 800a980:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a984:	2301      	movs	r3, #1
 800a986:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a98a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a98e:	2100      	movs	r1, #0
 800a990:	4618      	mov	r0, r3
 800a992:	f000 fad3 	bl	800af3c <hci_send_req>
 800a996:	4603      	mov	r3, r0
 800a998:	2b00      	cmp	r3, #0
 800a99a:	da01      	bge.n	800a9a0 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800a99c:	23ff      	movs	r3, #255	; 0xff
 800a99e:	e004      	b.n	800a9aa <aci_hal_write_config_data+0x100>
  return status;
 800a9a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9a4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a9a8:	781b      	ldrb	r3, [r3, #0]
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}

0800a9b4 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b0cc      	sub	sp, #304	; 0x130
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9c0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a9c4:	701a      	strb	r2, [r3, #0]
 800a9c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9ca:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a9ce:	460a      	mov	r2, r1
 800a9d0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800a9d2:	f107 0310 	add.w	r3, r7, #16
 800a9d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a9da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9de:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800a9ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a9f0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a9f4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800a9f8:	7812      	ldrb	r2, [r2, #0]
 800a9fa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a9fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aa00:	3301      	adds	r3, #1
 800aa02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800aa06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa0a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800aa0e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800aa12:	7812      	ldrb	r2, [r2, #0]
 800aa14:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800aa16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800aa20:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800aa24:	2218      	movs	r2, #24
 800aa26:	2100      	movs	r1, #0
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f000 fbc9 	bl	800b1c0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800aa2e:	233f      	movs	r3, #63	; 0x3f
 800aa30:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800aa34:	230f      	movs	r3, #15
 800aa36:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800aa3a:	f107 0310 	add.w	r3, r7, #16
 800aa3e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800aa42:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aa46:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800aa4a:	f107 030f 	add.w	r3, r7, #15
 800aa4e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800aa52:	2301      	movs	r3, #1
 800aa54:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800aa58:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800aa5c:	2100      	movs	r1, #0
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f000 fa6c 	bl	800af3c <hci_send_req>
 800aa64:	4603      	mov	r3, r0
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	da01      	bge.n	800aa6e <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800aa6a:	23ff      	movs	r3, #255	; 0xff
 800aa6c:	e004      	b.n	800aa78 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800aa6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa72:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800aa76:	781b      	ldrb	r3, [r3, #0]
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}

0800aa82 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800aa82:	b580      	push	{r7, lr}
 800aa84:	b0cc      	sub	sp, #304	; 0x130
 800aa86:	af00      	add	r7, sp, #0
 800aa88:	4602      	mov	r2, r0
 800aa8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa8e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800aa92:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800aa94:	f107 0310 	add.w	r3, r7, #16
 800aa98:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800aa9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aaa0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800aaae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aab2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800aab6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800aaba:	8812      	ldrh	r2, [r2, #0]
 800aabc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800aabe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aac2:	3302      	adds	r3, #2
 800aac4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800aac8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800aacc:	2218      	movs	r2, #24
 800aace:	2100      	movs	r1, #0
 800aad0:	4618      	mov	r0, r3
 800aad2:	f000 fb75 	bl	800b1c0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800aad6:	233f      	movs	r3, #63	; 0x3f
 800aad8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800aadc:	2318      	movs	r3, #24
 800aade:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800aae2:	f107 0310 	add.w	r3, r7, #16
 800aae6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800aaea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aaee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800aaf2:	f107 030f 	add.w	r3, r7, #15
 800aaf6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800aafa:	2301      	movs	r3, #1
 800aafc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ab00:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ab04:	2100      	movs	r1, #0
 800ab06:	4618      	mov	r0, r3
 800ab08:	f000 fa18 	bl	800af3c <hci_send_req>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	da01      	bge.n	800ab16 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800ab12:	23ff      	movs	r3, #255	; 0xff
 800ab14:	e004      	b.n	800ab20 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800ab16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab1a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ab1e:	781b      	ldrb	r3, [r3, #0]
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}

0800ab2a <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800ab2a:	b580      	push	{r7, lr}
 800ab2c:	b088      	sub	sp, #32
 800ab2e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800ab30:	2300      	movs	r3, #0
 800ab32:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ab34:	f107 0308 	add.w	r3, r7, #8
 800ab38:	2218      	movs	r2, #24
 800ab3a:	2100      	movs	r1, #0
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f000 fb3f 	bl	800b1c0 <Osal_MemSet>
  rq.ogf = 0x03;
 800ab42:	2303      	movs	r3, #3
 800ab44:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800ab46:	2303      	movs	r3, #3
 800ab48:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800ab4a:	1dfb      	adds	r3, r7, #7
 800ab4c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800ab4e:	2301      	movs	r3, #1
 800ab50:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ab52:	f107 0308 	add.w	r3, r7, #8
 800ab56:	2100      	movs	r1, #0
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f000 f9ef 	bl	800af3c <hci_send_req>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	da01      	bge.n	800ab68 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800ab64:	23ff      	movs	r3, #255	; 0xff
 800ab66:	e000      	b.n	800ab6a <hci_reset+0x40>
  return status;
 800ab68:	79fb      	ldrb	r3, [r7, #7]
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3720      	adds	r7, #32
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}

0800ab72 <aci_l2cap_connection_parameter_update_resp>:
                                                       uint16_t Timeout_Multiplier,
                                                       uint16_t Minimum_CE_Length,
                                                       uint16_t Maximum_CE_Length,
                                                       uint8_t Identifier,
                                                       uint8_t Accept )
{
 800ab72:	b5b0      	push	{r4, r5, r7, lr}
 800ab74:	b0cc      	sub	sp, #304	; 0x130
 800ab76:	af00      	add	r7, sp, #0
 800ab78:	4605      	mov	r5, r0
 800ab7a:	460c      	mov	r4, r1
 800ab7c:	4610      	mov	r0, r2
 800ab7e:	4619      	mov	r1, r3
 800ab80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab84:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800ab88:	462a      	mov	r2, r5
 800ab8a:	801a      	strh	r2, [r3, #0]
 800ab8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ab94:	4622      	mov	r2, r4
 800ab96:	801a      	strh	r2, [r3, #0]
 800ab98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab9c:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800aba0:	4602      	mov	r2, r0
 800aba2:	801a      	strh	r2, [r3, #0]
 800aba4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aba8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800abac:	460a      	mov	r2, r1
 800abae:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_resp_cp0 *cp0 = (aci_l2cap_connection_parameter_update_resp_cp0*)(cmd_buffer);
 800abb0:	f107 0310 	add.w	r3, r7, #16
 800abb4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800abb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800abbc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800abc0:	2200      	movs	r2, #0
 800abc2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800abc4:	2300      	movs	r3, #0
 800abc6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800abca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800abce:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800abd2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800abd6:	8812      	ldrh	r2, [r2, #0]
 800abd8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800abda:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800abde:	3302      	adds	r3, #2
 800abe0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 800abe4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800abe8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800abec:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800abf0:	8812      	ldrh	r2, [r2, #0]
 800abf2:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800abf4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800abf8:	3302      	adds	r3, #2
 800abfa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 800abfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac02:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ac06:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800ac0a:	8812      	ldrh	r2, [r2, #0]
 800ac0c:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800ac0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ac12:	3302      	adds	r3, #2
 800ac14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Latency = Latency;
 800ac18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac1c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ac20:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800ac24:	8812      	ldrh	r2, [r2, #0]
 800ac26:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 800ac28:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ac2c:	3302      	adds	r3, #2
 800ac2e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 800ac32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac36:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 800ac3a:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 800ac3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ac40:	3302      	adds	r3, #2
 800ac42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Minimum_CE_Length = Minimum_CE_Length;
 800ac46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac4a:	f8b7 2144 	ldrh.w	r2, [r7, #324]	; 0x144
 800ac4e:	815a      	strh	r2, [r3, #10]
  index_input += 2;
 800ac50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ac54:	3302      	adds	r3, #2
 800ac56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Maximum_CE_Length = Maximum_CE_Length;
 800ac5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac5e:	f8b7 2148 	ldrh.w	r2, [r7, #328]	; 0x148
 800ac62:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 800ac64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ac68:	3302      	adds	r3, #2
 800ac6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identifier = Identifier;
 800ac6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac72:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800ac76:	739a      	strb	r2, [r3, #14]
  index_input += 1;
 800ac78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ac7c:	3301      	adds	r3, #1
 800ac7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Accept = Accept;
 800ac82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac86:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800ac8a:	73da      	strb	r2, [r3, #15]
  index_input += 1;
 800ac8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ac90:	3301      	adds	r3, #1
 800ac92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ac96:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ac9a:	2218      	movs	r2, #24
 800ac9c:	2100      	movs	r1, #0
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f000 fa8e 	bl	800b1c0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800aca4:	233f      	movs	r3, #63	; 0x3f
 800aca6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x182;
 800acaa:	f44f 73c1 	mov.w	r3, #386	; 0x182
 800acae:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800acb2:	f107 0310 	add.w	r3, r7, #16
 800acb6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800acba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800acbe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800acc2:	f107 030f 	add.w	r3, r7, #15
 800acc6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800acca:	2301      	movs	r3, #1
 800accc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800acd0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800acd4:	2100      	movs	r1, #0
 800acd6:	4618      	mov	r0, r3
 800acd8:	f000 f930 	bl	800af3c <hci_send_req>
 800acdc:	4603      	mov	r3, r0
 800acde:	2b00      	cmp	r3, #0
 800ace0:	da01      	bge.n	800ace6 <aci_l2cap_connection_parameter_update_resp+0x174>
    return BLE_STATUS_TIMEOUT;
 800ace2:	23ff      	movs	r3, #255	; 0xff
 800ace4:	e004      	b.n	800acf0 <aci_l2cap_connection_parameter_update_resp+0x17e>
  return status;
 800ace6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800acea:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800acee:	781b      	ldrb	r3, [r3, #0]
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800acfc <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b086      	sub	sp, #24
 800ad00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad02:	f3ef 8310 	mrs	r3, PRIMASK
 800ad06:	60fb      	str	r3, [r7, #12]
  return(result);
 800ad08:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800ad0a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ad0c:	b672      	cpsid	i
}
 800ad0e:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800ad10:	1cbb      	adds	r3, r7, #2
 800ad12:	4619      	mov	r1, r3
 800ad14:	4812      	ldr	r0, [pc, #72]	; (800ad60 <DbgTrace_TxCpltCallback+0x64>)
 800ad16:	f000 ffcc 	bl	800bcb2 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800ad1a:	1cbb      	adds	r3, r7, #2
 800ad1c:	4619      	mov	r1, r3
 800ad1e:	4810      	ldr	r0, [pc, #64]	; (800ad60 <DbgTrace_TxCpltCallback+0x64>)
 800ad20:	f001 f8b8 	bl	800be94 <CircularQueue_Sense>
 800ad24:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d00c      	beq.n	800ad46 <DbgTrace_TxCpltCallback+0x4a>
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	f383 8810 	msr	PRIMASK, r3
}
 800ad36:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800ad38:	887b      	ldrh	r3, [r7, #2]
 800ad3a:	4a0a      	ldr	r2, [pc, #40]	; (800ad64 <DbgTrace_TxCpltCallback+0x68>)
 800ad3c:	4619      	mov	r1, r3
 800ad3e:	6938      	ldr	r0, [r7, #16]
 800ad40:	f7f6 f811 	bl	8000d66 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800ad44:	e008      	b.n	800ad58 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800ad46:	4b08      	ldr	r3, [pc, #32]	; (800ad68 <DbgTrace_TxCpltCallback+0x6c>)
 800ad48:	2201      	movs	r2, #1
 800ad4a:	701a      	strb	r2, [r3, #0]
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f383 8810 	msr	PRIMASK, r3
}
 800ad56:	bf00      	nop
}
 800ad58:	bf00      	nop
 800ad5a:	3718      	adds	r7, #24
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}
 800ad60:	2000060c 	.word	0x2000060c
 800ad64:	0800acfd 	.word	0x0800acfd
 800ad68:	20000045 	.word	0x20000045

0800ad6c <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b082      	sub	sp, #8
 800ad70:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800ad72:	f7f5 fff2 	bl	8000d5a <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800ad76:	2302      	movs	r3, #2
 800ad78:	9300      	str	r3, [sp, #0]
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ad80:	4903      	ldr	r1, [pc, #12]	; (800ad90 <DbgTraceInit+0x24>)
 800ad82:	4804      	ldr	r0, [pc, #16]	; (800ad94 <DbgTraceInit+0x28>)
 800ad84:	f000 fd3c 	bl	800b800 <CircularQueue_Init>
#endif 
#endif
  return;
 800ad88:	bf00      	nop
}
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}
 800ad8e:	bf00      	nop
 800ad90:	2000062c 	.word	0x2000062c
 800ad94:	2000060c 	.word	0x2000060c

0800ad98 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b084      	sub	sp, #16
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	60f8      	str	r0, [r7, #12]
 800ada0:	60b9      	str	r1, [r7, #8]
 800ada2:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800ada4:	687a      	ldr	r2, [r7, #4]
 800ada6:	68b9      	ldr	r1, [r7, #8]
 800ada8:	68f8      	ldr	r0, [r7, #12]
 800adaa:	f000 f805 	bl	800adb8 <DbgTraceWrite>
 800adae:	4603      	mov	r3, r0
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3710      	adds	r7, #16
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}

0800adb8 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b08a      	sub	sp, #40	; 0x28
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	60f8      	str	r0, [r7, #12]
 800adc0:	60b9      	str	r1, [r7, #8]
 800adc2:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800adc4:	2300      	movs	r3, #0
 800adc6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800adc8:	f3ef 8310 	mrs	r3, PRIMASK
 800adcc:	61bb      	str	r3, [r7, #24]
  return(result);
 800adce:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800add0:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800add8:	d102      	bne.n	800ade0 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800adda:	2300      	movs	r3, #0
 800addc:	627b      	str	r3, [r7, #36]	; 0x24
 800adde:	e037      	b.n	800ae50 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	2b01      	cmp	r3, #1
 800ade4:	d006      	beq.n	800adf4 <DbgTraceWrite+0x3c>
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	2b02      	cmp	r3, #2
 800adea:	d003      	beq.n	800adf4 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800adec:	f04f 33ff 	mov.w	r3, #4294967295
 800adf0:	627b      	str	r3, [r7, #36]	; 0x24
 800adf2:	e02d      	b.n	800ae50 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d02a      	beq.n	800ae50 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800adfe:	b672      	cpsid	i
}
 800ae00:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	b29a      	uxth	r2, r3
 800ae06:	2301      	movs	r3, #1
 800ae08:	68b9      	ldr	r1, [r7, #8]
 800ae0a:	4814      	ldr	r0, [pc, #80]	; (800ae5c <DbgTraceWrite+0xa4>)
 800ae0c:	f000 fd2a 	bl	800b864 <CircularQueue_Add>
 800ae10:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800ae12:	69fb      	ldr	r3, [r7, #28]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d015      	beq.n	800ae44 <DbgTraceWrite+0x8c>
 800ae18:	4b11      	ldr	r3, [pc, #68]	; (800ae60 <DbgTraceWrite+0xa8>)
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	b2db      	uxtb	r3, r3
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d010      	beq.n	800ae44 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800ae22:	4b0f      	ldr	r3, [pc, #60]	; (800ae60 <DbgTraceWrite+0xa8>)
 800ae24:	2200      	movs	r2, #0
 800ae26:	701a      	strb	r2, [r3, #0]
 800ae28:	6a3b      	ldr	r3, [r7, #32]
 800ae2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	f383 8810 	msr	PRIMASK, r3
}
 800ae32:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	b29b      	uxth	r3, r3
 800ae38:	4a0a      	ldr	r2, [pc, #40]	; (800ae64 <DbgTraceWrite+0xac>)
 800ae3a:	4619      	mov	r1, r3
 800ae3c:	69f8      	ldr	r0, [r7, #28]
 800ae3e:	f7f5 ff92 	bl	8000d66 <DbgOutputTraces>
 800ae42:	e005      	b.n	800ae50 <DbgTraceWrite+0x98>
 800ae44:	6a3b      	ldr	r3, [r7, #32]
 800ae46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	f383 8810 	msr	PRIMASK, r3
}
 800ae4e:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800ae50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3728      	adds	r7, #40	; 0x28
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}
 800ae5a:	bf00      	nop
 800ae5c:	2000060c 	.word	0x2000060c
 800ae60:	20000045 	.word	0x20000045
 800ae64:	0800acfd 	.word	0x0800acfd

0800ae68 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b082      	sub	sp, #8
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	685b      	ldr	r3, [r3, #4]
 800ae76:	4a08      	ldr	r2, [pc, #32]	; (800ae98 <hci_init+0x30>)
 800ae78:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800ae7a:	4a08      	ldr	r2, [pc, #32]	; (800ae9c <hci_init+0x34>)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800ae80:	4806      	ldr	r0, [pc, #24]	; (800ae9c <hci_init+0x34>)
 800ae82:	f000 f979 	bl	800b178 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f000 f8da 	bl	800b044 <TlInit>

  return;
 800ae90:	bf00      	nop
}
 800ae92:	3708      	adds	r7, #8
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}
 800ae98:	20001654 	.word	0x20001654
 800ae9c:	2000162c 	.word	0x2000162c

0800aea0 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b084      	sub	sp, #16
 800aea4:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800aea6:	4822      	ldr	r0, [pc, #136]	; (800af30 <hci_user_evt_proc+0x90>)
 800aea8:	f000 fbfc 	bl	800b6a4 <LST_is_empty>
 800aeac:	4603      	mov	r3, r0
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d12b      	bne.n	800af0a <hci_user_evt_proc+0x6a>
 800aeb2:	4b20      	ldr	r3, [pc, #128]	; (800af34 <hci_user_evt_proc+0x94>)
 800aeb4:	781b      	ldrb	r3, [r3, #0]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d027      	beq.n	800af0a <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800aeba:	f107 030c 	add.w	r3, r7, #12
 800aebe:	4619      	mov	r1, r3
 800aec0:	481b      	ldr	r0, [pc, #108]	; (800af30 <hci_user_evt_proc+0x90>)
 800aec2:	f000 fc7e 	bl	800b7c2 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800aec6:	4b1c      	ldr	r3, [pc, #112]	; (800af38 <hci_user_evt_proc+0x98>)
 800aec8:	69db      	ldr	r3, [r3, #28]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d00c      	beq.n	800aee8 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800aed2:	2301      	movs	r3, #1
 800aed4:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800aed6:	4b18      	ldr	r3, [pc, #96]	; (800af38 <hci_user_evt_proc+0x98>)
 800aed8:	69db      	ldr	r3, [r3, #28]
 800aeda:	1d3a      	adds	r2, r7, #4
 800aedc:	4610      	mov	r0, r2
 800aede:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800aee0:	793a      	ldrb	r2, [r7, #4]
 800aee2:	4b14      	ldr	r3, [pc, #80]	; (800af34 <hci_user_evt_proc+0x94>)
 800aee4:	701a      	strb	r2, [r3, #0]
 800aee6:	e002      	b.n	800aeee <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800aee8:	4b12      	ldr	r3, [pc, #72]	; (800af34 <hci_user_evt_proc+0x94>)
 800aeea:	2201      	movs	r2, #1
 800aeec:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800aeee:	4b11      	ldr	r3, [pc, #68]	; (800af34 <hci_user_evt_proc+0x94>)
 800aef0:	781b      	ldrb	r3, [r3, #0]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d004      	beq.n	800af00 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	4618      	mov	r0, r3
 800aefa:	f001 fb47 	bl	800c58c <TL_MM_EvtDone>
 800aefe:	e004      	b.n	800af0a <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	4619      	mov	r1, r3
 800af04:	480a      	ldr	r0, [pc, #40]	; (800af30 <hci_user_evt_proc+0x90>)
 800af06:	f000 fbef 	bl	800b6e8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800af0a:	4809      	ldr	r0, [pc, #36]	; (800af30 <hci_user_evt_proc+0x90>)
 800af0c:	f000 fbca 	bl	800b6a4 <LST_is_empty>
 800af10:	4603      	mov	r3, r0
 800af12:	2b00      	cmp	r3, #0
 800af14:	d107      	bne.n	800af26 <hci_user_evt_proc+0x86>
 800af16:	4b07      	ldr	r3, [pc, #28]	; (800af34 <hci_user_evt_proc+0x94>)
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d003      	beq.n	800af26 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800af1e:	4804      	ldr	r0, [pc, #16]	; (800af30 <hci_user_evt_proc+0x90>)
 800af20:	f7f8 fe2a 	bl	8003b78 <hci_notify_asynch_evt>
  }


  return;
 800af24:	bf00      	nop
 800af26:	bf00      	nop
}
 800af28:	3710      	adds	r7, #16
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}
 800af2e:	bf00      	nop
 800af30:	200000b0 	.word	0x200000b0
 800af34:	200000bc 	.word	0x200000bc
 800af38:	2000162c 	.word	0x2000162c

0800af3c <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b088      	sub	sp, #32
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	460b      	mov	r3, r1
 800af46:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800af48:	2000      	movs	r0, #0
 800af4a:	f000 f8d1 	bl	800b0f0 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800af4e:	2300      	movs	r3, #0
 800af50:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	885b      	ldrh	r3, [r3, #2]
 800af56:	b21b      	sxth	r3, r3
 800af58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af5c:	b21a      	sxth	r2, r3
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	881b      	ldrh	r3, [r3, #0]
 800af62:	029b      	lsls	r3, r3, #10
 800af64:	b21b      	sxth	r3, r3
 800af66:	4313      	orrs	r3, r2
 800af68:	b21b      	sxth	r3, r3
 800af6a:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800af6c:	4b33      	ldr	r3, [pc, #204]	; (800b03c <hci_send_req+0x100>)
 800af6e:	2201      	movs	r2, #1
 800af70:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	68db      	ldr	r3, [r3, #12]
 800af76:	b2d9      	uxtb	r1, r3
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	689a      	ldr	r2, [r3, #8]
 800af7c:	8bbb      	ldrh	r3, [r7, #28]
 800af7e:	4618      	mov	r0, r3
 800af80:	f000 f890 	bl	800b0a4 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800af84:	e04e      	b.n	800b024 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800af86:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800af8a:	f7f8 fe0c 	bl	8003ba6 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800af8e:	e043      	b.n	800b018 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800af90:	f107 030c 	add.w	r3, r7, #12
 800af94:	4619      	mov	r1, r3
 800af96:	482a      	ldr	r0, [pc, #168]	; (800b040 <hci_send_req+0x104>)
 800af98:	f000 fc13 	bl	800b7c2 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	7a5b      	ldrb	r3, [r3, #9]
 800afa0:	2b0f      	cmp	r3, #15
 800afa2:	d114      	bne.n	800afce <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	330b      	adds	r3, #11
 800afa8:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	885b      	ldrh	r3, [r3, #2]
 800afae:	b29b      	uxth	r3, r3
 800afb0:	8bba      	ldrh	r2, [r7, #28]
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d104      	bne.n	800afc0 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	691b      	ldr	r3, [r3, #16]
 800afba:	693a      	ldr	r2, [r7, #16]
 800afbc:	7812      	ldrb	r2, [r2, #0]
 800afbe:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	785b      	ldrb	r3, [r3, #1]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d027      	beq.n	800b018 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800afc8:	2301      	movs	r3, #1
 800afca:	77fb      	strb	r3, [r7, #31]
 800afcc:	e024      	b.n	800b018 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	330b      	adds	r3, #11
 800afd2:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800afd4:	69bb      	ldr	r3, [r7, #24]
 800afd6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800afda:	b29b      	uxth	r3, r3
 800afdc:	8bba      	ldrh	r2, [r7, #28]
 800afde:	429a      	cmp	r2, r3
 800afe0:	d114      	bne.n	800b00c <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	7a9b      	ldrb	r3, [r3, #10]
 800afe6:	3b03      	subs	r3, #3
 800afe8:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	695a      	ldr	r2, [r3, #20]
 800afee:	7dfb      	ldrb	r3, [r7, #23]
 800aff0:	429a      	cmp	r2, r3
 800aff2:	bfa8      	it	ge
 800aff4:	461a      	movge	r2, r3
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6918      	ldr	r0, [r3, #16]
 800affe:	69bb      	ldr	r3, [r7, #24]
 800b000:	1cd9      	adds	r1, r3, #3
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	695b      	ldr	r3, [r3, #20]
 800b006:	461a      	mov	r2, r3
 800b008:	f002 f8c3 	bl	800d192 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800b00c:	69bb      	ldr	r3, [r7, #24]
 800b00e:	781b      	ldrb	r3, [r3, #0]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d001      	beq.n	800b018 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800b014:	2301      	movs	r3, #1
 800b016:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800b018:	4809      	ldr	r0, [pc, #36]	; (800b040 <hci_send_req+0x104>)
 800b01a:	f000 fb43 	bl	800b6a4 <LST_is_empty>
 800b01e:	4603      	mov	r3, r0
 800b020:	2b00      	cmp	r3, #0
 800b022:	d0b5      	beq.n	800af90 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800b024:	7ffb      	ldrb	r3, [r7, #31]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d0ad      	beq.n	800af86 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800b02a:	2001      	movs	r0, #1
 800b02c:	f000 f860 	bl	800b0f0 <NotifyCmdStatus>

  return 0;
 800b030:	2300      	movs	r3, #0
}
 800b032:	4618      	mov	r0, r3
 800b034:	3720      	adds	r7, #32
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
 800b03a:	bf00      	nop
 800b03c:	20001658 	.word	0x20001658
 800b040:	2000164c 	.word	0x2000164c

0800b044 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b086      	sub	sp, #24
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800b04c:	480f      	ldr	r0, [pc, #60]	; (800b08c <TlInit+0x48>)
 800b04e:	f000 fb19 	bl	800b684 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800b052:	4a0f      	ldr	r2, [pc, #60]	; (800b090 <TlInit+0x4c>)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800b058:	480e      	ldr	r0, [pc, #56]	; (800b094 <TlInit+0x50>)
 800b05a:	f000 fb13 	bl	800b684 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800b05e:	4b0e      	ldr	r3, [pc, #56]	; (800b098 <TlInit+0x54>)
 800b060:	2201      	movs	r2, #1
 800b062:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800b064:	4b0d      	ldr	r3, [pc, #52]	; (800b09c <TlInit+0x58>)
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d00a      	beq.n	800b082 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800b070:	4b0b      	ldr	r3, [pc, #44]	; (800b0a0 <TlInit+0x5c>)
 800b072:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800b074:	4b09      	ldr	r3, [pc, #36]	; (800b09c <TlInit+0x58>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f107 0208 	add.w	r2, r7, #8
 800b07c:	4610      	mov	r0, r2
 800b07e:	4798      	blx	r3
  }

  return;
 800b080:	bf00      	nop
 800b082:	bf00      	nop
}
 800b084:	3718      	adds	r7, #24
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}
 800b08a:	bf00      	nop
 800b08c:	2000164c 	.word	0x2000164c
 800b090:	200000b8 	.word	0x200000b8
 800b094:	200000b0 	.word	0x200000b0
 800b098:	200000bc 	.word	0x200000bc
 800b09c:	2000162c 	.word	0x2000162c
 800b0a0:	0800b131 	.word	0x0800b131

0800b0a4 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b082      	sub	sp, #8
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	603a      	str	r2, [r7, #0]
 800b0ae:	80fb      	strh	r3, [r7, #6]
 800b0b0:	460b      	mov	r3, r1
 800b0b2:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800b0b4:	4b0c      	ldr	r3, [pc, #48]	; (800b0e8 <SendCmd+0x44>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	88fa      	ldrh	r2, [r7, #6]
 800b0ba:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800b0be:	4b0a      	ldr	r3, [pc, #40]	; (800b0e8 <SendCmd+0x44>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	797a      	ldrb	r2, [r7, #5]
 800b0c4:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800b0c6:	4b08      	ldr	r3, [pc, #32]	; (800b0e8 <SendCmd+0x44>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	330c      	adds	r3, #12
 800b0cc:	797a      	ldrb	r2, [r7, #5]
 800b0ce:	6839      	ldr	r1, [r7, #0]
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f002 f85e 	bl	800d192 <memcpy>

  hciContext.io.Send(0,0);
 800b0d6:	4b05      	ldr	r3, [pc, #20]	; (800b0ec <SendCmd+0x48>)
 800b0d8:	691b      	ldr	r3, [r3, #16]
 800b0da:	2100      	movs	r1, #0
 800b0dc:	2000      	movs	r0, #0
 800b0de:	4798      	blx	r3

  return;
 800b0e0:	bf00      	nop
}
 800b0e2:	3708      	adds	r7, #8
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}
 800b0e8:	200000b8 	.word	0x200000b8
 800b0ec:	2000162c 	.word	0x2000162c

0800b0f0 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b082      	sub	sp, #8
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800b0fa:	79fb      	ldrb	r3, [r7, #7]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d108      	bne.n	800b112 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800b100:	4b0a      	ldr	r3, [pc, #40]	; (800b12c <NotifyCmdStatus+0x3c>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d00d      	beq.n	800b124 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800b108:	4b08      	ldr	r3, [pc, #32]	; (800b12c <NotifyCmdStatus+0x3c>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	2000      	movs	r0, #0
 800b10e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800b110:	e008      	b.n	800b124 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800b112:	4b06      	ldr	r3, [pc, #24]	; (800b12c <NotifyCmdStatus+0x3c>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d004      	beq.n	800b124 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800b11a:	4b04      	ldr	r3, [pc, #16]	; (800b12c <NotifyCmdStatus+0x3c>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	2001      	movs	r0, #1
 800b120:	4798      	blx	r3
  return;
 800b122:	bf00      	nop
 800b124:	bf00      	nop
}
 800b126:	3708      	adds	r7, #8
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}
 800b12c:	20001654 	.word	0x20001654

0800b130 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b082      	sub	sp, #8
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	7a5b      	ldrb	r3, [r3, #9]
 800b13c:	2b0f      	cmp	r3, #15
 800b13e:	d003      	beq.n	800b148 <TlEvtReceived+0x18>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	7a5b      	ldrb	r3, [r3, #9]
 800b144:	2b0e      	cmp	r3, #14
 800b146:	d107      	bne.n	800b158 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800b148:	6879      	ldr	r1, [r7, #4]
 800b14a:	4809      	ldr	r0, [pc, #36]	; (800b170 <TlEvtReceived+0x40>)
 800b14c:	f000 faf2 	bl	800b734 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800b150:	2000      	movs	r0, #0
 800b152:	f7f8 fd1d 	bl	8003b90 <hci_cmd_resp_release>
 800b156:	e006      	b.n	800b166 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800b158:	6879      	ldr	r1, [r7, #4]
 800b15a:	4806      	ldr	r0, [pc, #24]	; (800b174 <TlEvtReceived+0x44>)
 800b15c:	f000 faea 	bl	800b734 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800b160:	4804      	ldr	r0, [pc, #16]	; (800b174 <TlEvtReceived+0x44>)
 800b162:	f7f8 fd09 	bl	8003b78 <hci_notify_asynch_evt>
  }

  return;
 800b166:	bf00      	nop
}
 800b168:	3708      	adds	r7, #8
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}
 800b16e:	bf00      	nop
 800b170:	2000164c 	.word	0x2000164c
 800b174:	200000b0 	.word	0x200000b0

0800b178 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800b178:	b480      	push	{r7}
 800b17a:	b083      	sub	sp, #12
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	4a05      	ldr	r2, [pc, #20]	; (800b198 <hci_register_io_bus+0x20>)
 800b184:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	4a04      	ldr	r2, [pc, #16]	; (800b19c <hci_register_io_bus+0x24>)
 800b18a:	611a      	str	r2, [r3, #16]

  return;
 800b18c:	bf00      	nop
}
 800b18e:	370c      	adds	r7, #12
 800b190:	46bd      	mov	sp, r7
 800b192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b196:	4770      	bx	lr
 800b198:	0800c305 	.word	0x0800c305
 800b19c:	0800c36d 	.word	0x0800c36d

0800b1a0 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b084      	sub	sp, #16
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	60f8      	str	r0, [r7, #12]
 800b1a8:	60b9      	str	r1, [r7, #8]
 800b1aa:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800b1ac:	687a      	ldr	r2, [r7, #4]
 800b1ae:	68b9      	ldr	r1, [r7, #8]
 800b1b0:	68f8      	ldr	r0, [r7, #12]
 800b1b2:	f001 ffee 	bl	800d192 <memcpy>
 800b1b6:	4603      	mov	r3, r0
}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	3710      	adds	r7, #16
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bd80      	pop	{r7, pc}

0800b1c0 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b084      	sub	sp, #16
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	60f8      	str	r0, [r7, #12]
 800b1c8:	60b9      	str	r1, [r7, #8]
 800b1ca:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800b1cc:	687a      	ldr	r2, [r7, #4]
 800b1ce:	68b9      	ldr	r1, [r7, #8]
 800b1d0:	68f8      	ldr	r0, [r7, #12]
 800b1d2:	f001 ff63 	bl	800d09c <memset>
 800b1d6:	4603      	mov	r3, r0
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3710      	adds	r7, #16
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}

0800b1e0 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b085      	sub	sp, #20
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800b1ea:	4b0f      	ldr	r3, [pc, #60]	; (800b228 <OTP_Read+0x48>)
 800b1ec:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800b1ee:	e002      	b.n	800b1f6 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	3b08      	subs	r3, #8
 800b1f4:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	3307      	adds	r3, #7
 800b1fa:	781b      	ldrb	r3, [r3, #0]
 800b1fc:	79fa      	ldrb	r2, [r7, #7]
 800b1fe:	429a      	cmp	r2, r3
 800b200:	d003      	beq.n	800b20a <OTP_Read+0x2a>
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	4a09      	ldr	r2, [pc, #36]	; (800b22c <OTP_Read+0x4c>)
 800b206:	4293      	cmp	r3, r2
 800b208:	d1f2      	bne.n	800b1f0 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	3307      	adds	r3, #7
 800b20e:	781b      	ldrb	r3, [r3, #0]
 800b210:	79fa      	ldrb	r2, [r7, #7]
 800b212:	429a      	cmp	r2, r3
 800b214:	d001      	beq.n	800b21a <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800b216:	2300      	movs	r3, #0
 800b218:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800b21a:	68fb      	ldr	r3, [r7, #12]
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3714      	adds	r7, #20
 800b220:	46bd      	mov	sp, r7
 800b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b226:	4770      	bx	lr
 800b228:	1fff73f8 	.word	0x1fff73f8
 800b22c:	1fff7000 	.word	0x1fff7000

0800b230 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b088      	sub	sp, #32
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800b238:	f107 030c 	add.w	r3, r7, #12
 800b23c:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800b244:	69fb      	ldr	r3, [r7, #28]
 800b246:	212e      	movs	r1, #46	; 0x2e
 800b248:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800b24c:	f000 f94c 	bl	800b4e8 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800b250:	69fb      	ldr	r3, [r7, #28]
 800b252:	330b      	adds	r3, #11
 800b254:	78db      	ldrb	r3, [r3, #3]
}
 800b256:	4618      	mov	r0, r3
 800b258:	3720      	adds	r7, #32
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}

0800b25e <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800b25e:	b580      	push	{r7, lr}
 800b260:	b088      	sub	sp, #32
 800b262:	af00      	add	r7, sp, #0
 800b264:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800b266:	f107 030c 	add.w	r3, r7, #12
 800b26a:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800b272:	69fb      	ldr	r3, [r7, #28]
 800b274:	210f      	movs	r1, #15
 800b276:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800b27a:	f000 f935 	bl	800b4e8 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800b27e:	69fb      	ldr	r3, [r7, #28]
 800b280:	330b      	adds	r3, #11
 800b282:	78db      	ldrb	r3, [r3, #3]
}
 800b284:	4618      	mov	r0, r3
 800b286:	3720      	adds	r7, #32
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}

0800b28c <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b088      	sub	sp, #32
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800b294:	f107 030c 	add.w	r3, r7, #12
 800b298:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800b29a:	69fb      	ldr	r3, [r7, #28]
 800b29c:	687a      	ldr	r2, [r7, #4]
 800b29e:	2110      	movs	r1, #16
 800b2a0:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800b2a4:	f000 f920 	bl	800b4e8 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800b2a8:	69fb      	ldr	r3, [r7, #28]
 800b2aa:	330b      	adds	r3, #11
 800b2ac:	78db      	ldrb	r3, [r3, #3]
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3720      	adds	r7, #32
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
	...

0800b2b8 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b08b      	sub	sp, #44	; 0x2c
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800b2dc:	2300      	movs	r3, #0
 800b2de:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800b2e0:	4b4a      	ldr	r3, [pc, #296]	; (800b40c <SHCI_GetWirelessFwInfo+0x154>)
 800b2e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2e4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b2e8:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	009b      	lsls	r3, r3, #2
 800b2ee:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800b2f2:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	4a44      	ldr	r2, [pc, #272]	; (800b410 <SHCI_GetWirelessFwInfo+0x158>)
 800b300:	4293      	cmp	r3, r2
 800b302:	d10f      	bne.n	800b324 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	695b      	ldr	r3, [r3, #20]
 800b308:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	699b      	ldr	r3, [r3, #24]
 800b30e:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	69db      	ldr	r3, [r3, #28]
 800b314:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	68db      	ldr	r3, [r3, #12]
 800b31a:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	691b      	ldr	r3, [r3, #16]
 800b320:	617b      	str	r3, [r7, #20]
 800b322:	e01a      	b.n	800b35a <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	009b      	lsls	r3, r3, #2
 800b328:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800b32c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800b330:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	691b      	ldr	r3, [r3, #16]
 800b338:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	695b      	ldr	r3, [r3, #20]
 800b340:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	699b      	ldr	r3, [r3, #24]
 800b348:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	685b      	ldr	r3, [r3, #4]
 800b350:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	689b      	ldr	r3, [r3, #8]
 800b358:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800b35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b35c:	0e1b      	lsrs	r3, r3, #24
 800b35e:	b2da      	uxtb	r2, r3
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800b364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b366:	0c1b      	lsrs	r3, r3, #16
 800b368:	b2da      	uxtb	r2, r3
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800b36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b370:	0a1b      	lsrs	r3, r3, #8
 800b372:	b2da      	uxtb	r2, r3
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800b378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b37a:	091b      	lsrs	r3, r3, #4
 800b37c:	b2db      	uxtb	r3, r3
 800b37e:	f003 030f 	and.w	r3, r3, #15
 800b382:	b2da      	uxtb	r2, r3
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800b388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b38a:	b2db      	uxtb	r3, r3
 800b38c:	f003 030f 	and.w	r3, r3, #15
 800b390:	b2da      	uxtb	r2, r3
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800b396:	6a3b      	ldr	r3, [r7, #32]
 800b398:	0e1b      	lsrs	r3, r3, #24
 800b39a:	b2da      	uxtb	r2, r3
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800b3a0:	6a3b      	ldr	r3, [r7, #32]
 800b3a2:	0c1b      	lsrs	r3, r3, #16
 800b3a4:	b2da      	uxtb	r2, r3
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800b3aa:	6a3b      	ldr	r3, [r7, #32]
 800b3ac:	0a1b      	lsrs	r3, r3, #8
 800b3ae:	b2da      	uxtb	r2, r3
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800b3b4:	6a3b      	ldr	r3, [r7, #32]
 800b3b6:	b2da      	uxtb	r2, r3
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800b3bc:	69fb      	ldr	r3, [r7, #28]
 800b3be:	b2da      	uxtb	r2, r3
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800b3c4:	69bb      	ldr	r3, [r7, #24]
 800b3c6:	0e1b      	lsrs	r3, r3, #24
 800b3c8:	b2da      	uxtb	r2, r3
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800b3ce:	69bb      	ldr	r3, [r7, #24]
 800b3d0:	0c1b      	lsrs	r3, r3, #16
 800b3d2:	b2da      	uxtb	r2, r3
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800b3d8:	69bb      	ldr	r3, [r7, #24]
 800b3da:	0a1b      	lsrs	r3, r3, #8
 800b3dc:	b2da      	uxtb	r2, r3
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	0e1b      	lsrs	r3, r3, #24
 800b3e6:	b2da      	uxtb	r2, r3
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	0c1b      	lsrs	r3, r3, #16
 800b3f0:	b2da      	uxtb	r2, r3
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	b2da      	uxtb	r2, r3
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800b3fe:	2300      	movs	r3, #0
}
 800b400:	4618      	mov	r0, r3
 800b402:	372c      	adds	r7, #44	; 0x2c
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr
 800b40c:	58004000 	.word	0x58004000
 800b410:	a94656b9 	.word	0xa94656b9

0800b414 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b082      	sub	sp, #8
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	685b      	ldr	r3, [r3, #4]
 800b422:	4a08      	ldr	r2, [pc, #32]	; (800b444 <shci_init+0x30>)
 800b424:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800b426:	4a08      	ldr	r2, [pc, #32]	; (800b448 <shci_init+0x34>)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800b42c:	4806      	ldr	r0, [pc, #24]	; (800b448 <shci_init+0x34>)
 800b42e:	f000 f915 	bl	800b65c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	4618      	mov	r0, r3
 800b438:	f000 f898 	bl	800b56c <TlInit>

  return;
 800b43c:	bf00      	nop
}
 800b43e:	3708      	adds	r7, #8
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}
 800b444:	2000167c 	.word	0x2000167c
 800b448:	2000165c 	.word	0x2000165c

0800b44c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b084      	sub	sp, #16
 800b450:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800b452:	4822      	ldr	r0, [pc, #136]	; (800b4dc <shci_user_evt_proc+0x90>)
 800b454:	f000 f926 	bl	800b6a4 <LST_is_empty>
 800b458:	4603      	mov	r3, r0
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d12b      	bne.n	800b4b6 <shci_user_evt_proc+0x6a>
 800b45e:	4b20      	ldr	r3, [pc, #128]	; (800b4e0 <shci_user_evt_proc+0x94>)
 800b460:	781b      	ldrb	r3, [r3, #0]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d027      	beq.n	800b4b6 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800b466:	f107 030c 	add.w	r3, r7, #12
 800b46a:	4619      	mov	r1, r3
 800b46c:	481b      	ldr	r0, [pc, #108]	; (800b4dc <shci_user_evt_proc+0x90>)
 800b46e:	f000 f9a8 	bl	800b7c2 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800b472:	4b1c      	ldr	r3, [pc, #112]	; (800b4e4 <shci_user_evt_proc+0x98>)
 800b474:	69db      	ldr	r3, [r3, #28]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d00c      	beq.n	800b494 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800b47e:	2301      	movs	r3, #1
 800b480:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800b482:	4b18      	ldr	r3, [pc, #96]	; (800b4e4 <shci_user_evt_proc+0x98>)
 800b484:	69db      	ldr	r3, [r3, #28]
 800b486:	1d3a      	adds	r2, r7, #4
 800b488:	4610      	mov	r0, r2
 800b48a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800b48c:	793a      	ldrb	r2, [r7, #4]
 800b48e:	4b14      	ldr	r3, [pc, #80]	; (800b4e0 <shci_user_evt_proc+0x94>)
 800b490:	701a      	strb	r2, [r3, #0]
 800b492:	e002      	b.n	800b49a <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800b494:	4b12      	ldr	r3, [pc, #72]	; (800b4e0 <shci_user_evt_proc+0x94>)
 800b496:	2201      	movs	r2, #1
 800b498:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800b49a:	4b11      	ldr	r3, [pc, #68]	; (800b4e0 <shci_user_evt_proc+0x94>)
 800b49c:	781b      	ldrb	r3, [r3, #0]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d004      	beq.n	800b4ac <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f001 f871 	bl	800c58c <TL_MM_EvtDone>
 800b4aa:	e004      	b.n	800b4b6 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	480a      	ldr	r0, [pc, #40]	; (800b4dc <shci_user_evt_proc+0x90>)
 800b4b2:	f000 f919 	bl	800b6e8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800b4b6:	4809      	ldr	r0, [pc, #36]	; (800b4dc <shci_user_evt_proc+0x90>)
 800b4b8:	f000 f8f4 	bl	800b6a4 <LST_is_empty>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d107      	bne.n	800b4d2 <shci_user_evt_proc+0x86>
 800b4c2:	4b07      	ldr	r3, [pc, #28]	; (800b4e0 <shci_user_evt_proc+0x94>)
 800b4c4:	781b      	ldrb	r3, [r3, #0]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d003      	beq.n	800b4d2 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800b4ca:	4804      	ldr	r0, [pc, #16]	; (800b4dc <shci_user_evt_proc+0x90>)
 800b4cc:	f7f5 ff12 	bl	80012f4 <shci_notify_asynch_evt>
  }


  return;
 800b4d0:	bf00      	nop
 800b4d2:	bf00      	nop
}
 800b4d4:	3710      	adds	r7, #16
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}
 800b4da:	bf00      	nop
 800b4dc:	200000e8 	.word	0x200000e8
 800b4e0:	200000f8 	.word	0x200000f8
 800b4e4:	2000165c 	.word	0x2000165c

0800b4e8 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b084      	sub	sp, #16
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	60ba      	str	r2, [r7, #8]
 800b4f0:	607b      	str	r3, [r7, #4]
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	81fb      	strh	r3, [r7, #14]
 800b4f6:	460b      	mov	r3, r1
 800b4f8:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800b4fa:	2000      	movs	r0, #0
 800b4fc:	f000 f868 	bl	800b5d0 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800b500:	4b17      	ldr	r3, [pc, #92]	; (800b560 <shci_send+0x78>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	89fa      	ldrh	r2, [r7, #14]
 800b506:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800b50a:	4b15      	ldr	r3, [pc, #84]	; (800b560 <shci_send+0x78>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	7b7a      	ldrb	r2, [r7, #13]
 800b510:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800b512:	4b13      	ldr	r3, [pc, #76]	; (800b560 <shci_send+0x78>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	330c      	adds	r3, #12
 800b518:	7b7a      	ldrb	r2, [r7, #13]
 800b51a:	68b9      	ldr	r1, [r7, #8]
 800b51c:	4618      	mov	r0, r3
 800b51e:	f001 fe38 	bl	800d192 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800b522:	4b10      	ldr	r3, [pc, #64]	; (800b564 <shci_send+0x7c>)
 800b524:	2201      	movs	r2, #1
 800b526:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800b528:	4b0f      	ldr	r3, [pc, #60]	; (800b568 <shci_send+0x80>)
 800b52a:	691b      	ldr	r3, [r3, #16]
 800b52c:	2100      	movs	r1, #0
 800b52e:	2000      	movs	r0, #0
 800b530:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800b532:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800b536:	f7f5 fef5 	bl	8001324 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f103 0008 	add.w	r0, r3, #8
 800b540:	4b07      	ldr	r3, [pc, #28]	; (800b560 <shci_send+0x78>)
 800b542:	6819      	ldr	r1, [r3, #0]
 800b544:	4b06      	ldr	r3, [pc, #24]	; (800b560 <shci_send+0x78>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	789b      	ldrb	r3, [r3, #2]
 800b54a:	3303      	adds	r3, #3
 800b54c:	461a      	mov	r2, r3
 800b54e:	f001 fe20 	bl	800d192 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800b552:	2001      	movs	r0, #1
 800b554:	f000 f83c 	bl	800b5d0 <Cmd_SetStatus>

  return;
 800b558:	bf00      	nop
}
 800b55a:	3710      	adds	r7, #16
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}
 800b560:	200000f4 	.word	0x200000f4
 800b564:	20001680 	.word	0x20001680
 800b568:	2000165c 	.word	0x2000165c

0800b56c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b086      	sub	sp, #24
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800b574:	4a10      	ldr	r2, [pc, #64]	; (800b5b8 <TlInit+0x4c>)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800b57a:	4810      	ldr	r0, [pc, #64]	; (800b5bc <TlInit+0x50>)
 800b57c:	f000 f882 	bl	800b684 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800b580:	2001      	movs	r0, #1
 800b582:	f000 f825 	bl	800b5d0 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800b586:	4b0e      	ldr	r3, [pc, #56]	; (800b5c0 <TlInit+0x54>)
 800b588:	2201      	movs	r2, #1
 800b58a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800b58c:	4b0d      	ldr	r3, [pc, #52]	; (800b5c4 <TlInit+0x58>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d00c      	beq.n	800b5ae <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800b598:	4b0b      	ldr	r3, [pc, #44]	; (800b5c8 <TlInit+0x5c>)
 800b59a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800b59c:	4b0b      	ldr	r3, [pc, #44]	; (800b5cc <TlInit+0x60>)
 800b59e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800b5a0:	4b08      	ldr	r3, [pc, #32]	; (800b5c4 <TlInit+0x58>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f107 020c 	add.w	r2, r7, #12
 800b5a8:	4610      	mov	r0, r2
 800b5aa:	4798      	blx	r3
  }

  return;
 800b5ac:	bf00      	nop
 800b5ae:	bf00      	nop
}
 800b5b0:	3718      	adds	r7, #24
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	200000f4 	.word	0x200000f4
 800b5bc:	200000e8 	.word	0x200000e8
 800b5c0:	200000f8 	.word	0x200000f8
 800b5c4:	2000165c 	.word	0x2000165c
 800b5c8:	0800b621 	.word	0x0800b621
 800b5cc:	0800b639 	.word	0x0800b639

0800b5d0 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b082      	sub	sp, #8
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800b5da:	79fb      	ldrb	r3, [r7, #7]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d10b      	bne.n	800b5f8 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800b5e0:	4b0d      	ldr	r3, [pc, #52]	; (800b618 <Cmd_SetStatus+0x48>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d003      	beq.n	800b5f0 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800b5e8:	4b0b      	ldr	r3, [pc, #44]	; (800b618 <Cmd_SetStatus+0x48>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	2000      	movs	r0, #0
 800b5ee:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800b5f0:	4b0a      	ldr	r3, [pc, #40]	; (800b61c <Cmd_SetStatus+0x4c>)
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800b5f6:	e00b      	b.n	800b610 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800b5f8:	4b08      	ldr	r3, [pc, #32]	; (800b61c <Cmd_SetStatus+0x4c>)
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800b5fe:	4b06      	ldr	r3, [pc, #24]	; (800b618 <Cmd_SetStatus+0x48>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d004      	beq.n	800b610 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800b606:	4b04      	ldr	r3, [pc, #16]	; (800b618 <Cmd_SetStatus+0x48>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	2001      	movs	r0, #1
 800b60c:	4798      	blx	r3
  return;
 800b60e:	bf00      	nop
 800b610:	bf00      	nop
}
 800b612:	3708      	adds	r7, #8
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}
 800b618:	2000167c 	.word	0x2000167c
 800b61c:	200000f0 	.word	0x200000f0

0800b620 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b082      	sub	sp, #8
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800b628:	2000      	movs	r0, #0
 800b62a:	f7f5 fe70 	bl	800130e <shci_cmd_resp_release>

  return;
 800b62e:	bf00      	nop
}
 800b630:	3708      	adds	r7, #8
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}
	...

0800b638 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b082      	sub	sp, #8
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800b640:	6879      	ldr	r1, [r7, #4]
 800b642:	4805      	ldr	r0, [pc, #20]	; (800b658 <TlUserEvtReceived+0x20>)
 800b644:	f000 f876 	bl	800b734 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800b648:	4803      	ldr	r0, [pc, #12]	; (800b658 <TlUserEvtReceived+0x20>)
 800b64a:	f7f5 fe53 	bl	80012f4 <shci_notify_asynch_evt>

  return;
 800b64e:	bf00      	nop
}
 800b650:	3708      	adds	r7, #8
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}
 800b656:	bf00      	nop
 800b658:	200000e8 	.word	0x200000e8

0800b65c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800b65c:	b480      	push	{r7}
 800b65e:	b083      	sub	sp, #12
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	4a05      	ldr	r2, [pc, #20]	; (800b67c <shci_register_io_bus+0x20>)
 800b668:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	4a04      	ldr	r2, [pc, #16]	; (800b680 <shci_register_io_bus+0x24>)
 800b66e:	611a      	str	r2, [r3, #16]

  return;
 800b670:	bf00      	nop
}
 800b672:	370c      	adds	r7, #12
 800b674:	46bd      	mov	sp, r7
 800b676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67a:	4770      	bx	lr
 800b67c:	0800c419 	.word	0x0800c419
 800b680:	0800c46d 	.word	0x0800c46d

0800b684 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800b684:	b480      	push	{r7}
 800b686:	b083      	sub	sp, #12
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	687a      	ldr	r2, [r7, #4]
 800b690:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	687a      	ldr	r2, [r7, #4]
 800b696:	605a      	str	r2, [r3, #4]
}
 800b698:	bf00      	nop
 800b69a:	370c      	adds	r7, #12
 800b69c:	46bd      	mov	sp, r7
 800b69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a2:	4770      	bx	lr

0800b6a4 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b087      	sub	sp, #28
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b6ac:	f3ef 8310 	mrs	r3, PRIMASK
 800b6b0:	60fb      	str	r3, [r7, #12]
  return(result);
 800b6b2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b6b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b6b6:	b672      	cpsid	i
}
 800b6b8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	687a      	ldr	r2, [r7, #4]
 800b6c0:	429a      	cmp	r2, r3
 800b6c2:	d102      	bne.n	800b6ca <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	75fb      	strb	r3, [r7, #23]
 800b6c8:	e001      	b.n	800b6ce <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	75fb      	strb	r3, [r7, #23]
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	f383 8810 	msr	PRIMASK, r3
}
 800b6d8:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800b6da:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	371c      	adds	r7, #28
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e6:	4770      	bx	lr

0800b6e8 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b087      	sub	sp, #28
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b6f2:	f3ef 8310 	mrs	r3, PRIMASK
 800b6f6:	60fb      	str	r3, [r7, #12]
  return(result);
 800b6f8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b6fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b6fc:	b672      	cpsid	i
}
 800b6fe:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681a      	ldr	r2, [r3, #0]
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	687a      	ldr	r2, [r7, #4]
 800b70c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	683a      	ldr	r2, [r7, #0]
 800b712:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	683a      	ldr	r2, [r7, #0]
 800b71a:	605a      	str	r2, [r3, #4]
 800b71c:	697b      	ldr	r3, [r7, #20]
 800b71e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b720:	693b      	ldr	r3, [r7, #16]
 800b722:	f383 8810 	msr	PRIMASK, r3
}
 800b726:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b728:	bf00      	nop
 800b72a:	371c      	adds	r7, #28
 800b72c:	46bd      	mov	sp, r7
 800b72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b732:	4770      	bx	lr

0800b734 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800b734:	b480      	push	{r7}
 800b736:	b087      	sub	sp, #28
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
 800b73c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b73e:	f3ef 8310 	mrs	r3, PRIMASK
 800b742:	60fb      	str	r3, [r7, #12]
  return(result);
 800b744:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b746:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b748:	b672      	cpsid	i
}
 800b74a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	687a      	ldr	r2, [r7, #4]
 800b750:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	685a      	ldr	r2, [r3, #4]
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	683a      	ldr	r2, [r7, #0]
 800b75e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	685b      	ldr	r3, [r3, #4]
 800b764:	683a      	ldr	r2, [r7, #0]
 800b766:	601a      	str	r2, [r3, #0]
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	f383 8810 	msr	PRIMASK, r3
}
 800b772:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b774:	bf00      	nop
 800b776:	371c      	adds	r7, #28
 800b778:	46bd      	mov	sp, r7
 800b77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77e:	4770      	bx	lr

0800b780 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800b780:	b480      	push	{r7}
 800b782:	b087      	sub	sp, #28
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b788:	f3ef 8310 	mrs	r3, PRIMASK
 800b78c:	60fb      	str	r3, [r7, #12]
  return(result);
 800b78e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b790:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b792:	b672      	cpsid	i
}
 800b794:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	685b      	ldr	r3, [r3, #4]
 800b79a:	687a      	ldr	r2, [r7, #4]
 800b79c:	6812      	ldr	r2, [r2, #0]
 800b79e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	687a      	ldr	r2, [r7, #4]
 800b7a6:	6852      	ldr	r2, [r2, #4]
 800b7a8:	605a      	str	r2, [r3, #4]
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	f383 8810 	msr	PRIMASK, r3
}
 800b7b4:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b7b6:	bf00      	nop
 800b7b8:	371c      	adds	r7, #28
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c0:	4770      	bx	lr

0800b7c2 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800b7c2:	b580      	push	{r7, lr}
 800b7c4:	b086      	sub	sp, #24
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	6078      	str	r0, [r7, #4]
 800b7ca:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b7cc:	f3ef 8310 	mrs	r3, PRIMASK
 800b7d0:	60fb      	str	r3, [r7, #12]
  return(result);
 800b7d2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b7d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b7d6:	b672      	cpsid	i
}
 800b7d8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681a      	ldr	r2, [r3, #0]
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f7ff ffca 	bl	800b780 <LST_remove_node>
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	f383 8810 	msr	PRIMASK, r3
}
 800b7f6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b7f8:	bf00      	nop
 800b7fa:	3718      	adds	r7, #24
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}

0800b800 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800b800:	b480      	push	{r7}
 800b802:	b085      	sub	sp, #20
 800b804:	af00      	add	r7, sp, #0
 800b806:	60f8      	str	r0, [r7, #12]
 800b808:	60b9      	str	r1, [r7, #8]
 800b80a:	607a      	str	r2, [r7, #4]
 800b80c:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	68ba      	ldr	r2, [r7, #8]
 800b812:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	2200      	movs	r2, #0
 800b818:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	2200      	movs	r2, #0
 800b81e:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	2200      	movs	r2, #0
 800b824:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	2200      	movs	r2, #0
 800b82a:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	687a      	ldr	r2, [r7, #4]
 800b830:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	887a      	ldrh	r2, [r7, #2]
 800b836:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	7e3a      	ldrb	r2, [r7, #24]
 800b83c:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800b83e:	7e3b      	ldrb	r3, [r7, #24]
 800b840:	f003 0302 	and.w	r3, r3, #2
 800b844:	2b00      	cmp	r3, #0
 800b846:	d006      	beq.n	800b856 <CircularQueue_Init+0x56>
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	891b      	ldrh	r3, [r3, #8]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d002      	beq.n	800b856 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800b850:	f04f 33ff 	mov.w	r3, #4294967295
 800b854:	e000      	b.n	800b858 <CircularQueue_Init+0x58>
  }
  return 0;
 800b856:	2300      	movs	r3, #0
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3714      	adds	r7, #20
 800b85c:	46bd      	mov	sp, r7
 800b85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b862:	4770      	bx	lr

0800b864 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b08e      	sub	sp, #56	; 0x38
 800b868:	af00      	add	r7, sp, #0
 800b86a:	60f8      	str	r0, [r7, #12]
 800b86c:	60b9      	str	r1, [r7, #8]
 800b86e:	603b      	str	r3, [r7, #0]
 800b870:	4613      	mov	r3, r2
 800b872:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800b874:	2300      	movs	r3, #0
 800b876:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800b878:	2300      	movs	r3, #0
 800b87a:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 800b87c:	2300      	movs	r3, #0
 800b87e:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800b880:	2300      	movs	r3, #0
 800b882:	62bb      	str	r3, [r7, #40]	; 0x28
 800b884:	2300      	movs	r3, #0
 800b886:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800b888:	2300      	movs	r3, #0
 800b88a:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800b88c:	2300      	movs	r3, #0
 800b88e:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	891b      	ldrh	r3, [r3, #8]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d101      	bne.n	800b89c <CircularQueue_Add+0x38>
 800b898:	2302      	movs	r3, #2
 800b89a:	e000      	b.n	800b89e <CircularQueue_Add+0x3a>
 800b89c:	2300      	movs	r3, #0
 800b89e:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	695b      	ldr	r3, [r3, #20]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d02a      	beq.n	800b8fe <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	891b      	ldrh	r3, [r3, #8]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d123      	bne.n	800b8f8 <CircularQueue_Add+0x94>
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681a      	ldr	r2, [r3, #0]
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	691b      	ldr	r3, [r3, #16]
 800b8b8:	4413      	add	r3, r2
 800b8ba:	781b      	ldrb	r3, [r3, #0]
 800b8bc:	b29a      	uxth	r2, r3
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	6819      	ldr	r1, [r3, #0]
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	691b      	ldr	r3, [r3, #16]
 800b8c6:	1c58      	adds	r0, r3, #1
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	685b      	ldr	r3, [r3, #4]
 800b8cc:	4298      	cmp	r0, r3
 800b8ce:	d306      	bcc.n	800b8de <CircularQueue_Add+0x7a>
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	6918      	ldr	r0, [r3, #16]
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	685b      	ldr	r3, [r3, #4]
 800b8d8:	1ac3      	subs	r3, r0, r3
 800b8da:	3301      	adds	r3, #1
 800b8dc:	e002      	b.n	800b8e4 <CircularQueue_Add+0x80>
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	691b      	ldr	r3, [r3, #16]
 800b8e2:	3301      	adds	r3, #1
 800b8e4:	440b      	add	r3, r1
 800b8e6:	781b      	ldrb	r3, [r3, #0]
 800b8e8:	b29b      	uxth	r3, r3
 800b8ea:	021b      	lsls	r3, r3, #8
 800b8ec:	b29b      	uxth	r3, r3
 800b8ee:	4413      	add	r3, r2
 800b8f0:	b29b      	uxth	r3, r3
 800b8f2:	3302      	adds	r3, #2
 800b8f4:	b29b      	uxth	r3, r3
 800b8f6:	e001      	b.n	800b8fc <CircularQueue_Add+0x98>
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	891b      	ldrh	r3, [r3, #8]
 800b8fc:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	891b      	ldrh	r3, [r3, #8]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d002      	beq.n	800b90c <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	891b      	ldrh	r3, [r3, #8]
 800b90a:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	691a      	ldr	r2, [r3, #16]
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	68db      	ldr	r3, [r3, #12]
 800b914:	429a      	cmp	r2, r3
 800b916:	d307      	bcc.n	800b928 <CircularQueue_Add+0xc4>
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	685a      	ldr	r2, [r3, #4]
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	6919      	ldr	r1, [r3, #16]
 800b920:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b922:	440b      	add	r3, r1
 800b924:	1ad3      	subs	r3, r2, r3
 800b926:	e000      	b.n	800b92a <CircularQueue_Add+0xc6>
 800b928:	2300      	movs	r3, #0
 800b92a:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800b92c:	88fa      	ldrh	r2, [r7, #6]
 800b92e:	7ffb      	ldrb	r3, [r7, #31]
 800b930:	4413      	add	r3, r2
 800b932:	461a      	mov	r2, r3
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	fb02 f303 	mul.w	r3, r2, r3
 800b93a:	69ba      	ldr	r2, [r7, #24]
 800b93c:	429a      	cmp	r2, r3
 800b93e:	d80b      	bhi.n	800b958 <CircularQueue_Add+0xf4>
 800b940:	88fa      	ldrh	r2, [r7, #6]
 800b942:	7ffb      	ldrb	r3, [r7, #31]
 800b944:	4413      	add	r3, r2
 800b946:	461a      	mov	r2, r3
 800b948:	69bb      	ldr	r3, [r7, #24]
 800b94a:	fbb3 f1f2 	udiv	r1, r3, r2
 800b94e:	fb01 f202 	mul.w	r2, r1, r2
 800b952:	1a9b      	subs	r3, r3, r2
 800b954:	b2db      	uxtb	r3, r3
 800b956:	e000      	b.n	800b95a <CircularQueue_Add+0xf6>
 800b958:	2300      	movs	r3, #0
 800b95a:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800b95c:	7dfa      	ldrb	r2, [r7, #23]
 800b95e:	7ffb      	ldrb	r3, [r7, #31]
 800b960:	429a      	cmp	r2, r3
 800b962:	bf8c      	ite	hi
 800b964:	2301      	movhi	r3, #1
 800b966:	2300      	movls	r3, #0
 800b968:	b2db      	uxtb	r3, r3
 800b96a:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800b96c:	7fbb      	ldrb	r3, [r7, #30]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d008      	beq.n	800b984 <CircularQueue_Add+0x120>
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	7f1b      	ldrb	r3, [r3, #28]
 800b976:	f003 0301 	and.w	r3, r3, #1
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d002      	beq.n	800b984 <CircularQueue_Add+0x120>
 800b97e:	7dfb      	ldrb	r3, [r7, #23]
 800b980:	b29b      	uxth	r3, r3
 800b982:	e000      	b.n	800b986 <CircularQueue_Add+0x122>
 800b984:	8bbb      	ldrh	r3, [r7, #28]
 800b986:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800b988:	7fbb      	ldrb	r3, [r7, #30]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d008      	beq.n	800b9a0 <CircularQueue_Add+0x13c>
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	7f1b      	ldrb	r3, [r3, #28]
 800b992:	f003 0302 	and.w	r3, r3, #2
 800b996:	2b00      	cmp	r3, #0
 800b998:	d002      	beq.n	800b9a0 <CircularQueue_Add+0x13c>
 800b99a:	7ffb      	ldrb	r3, [r7, #31]
 800b99c:	b29b      	uxth	r3, r3
 800b99e:	e000      	b.n	800b9a2 <CircularQueue_Add+0x13e>
 800b9a0:	8bbb      	ldrh	r3, [r7, #28]
 800b9a2:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800b9a4:	88fb      	ldrh	r3, [r7, #6]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	f000 817e 	beq.w	800bca8 <CircularQueue_Add+0x444>
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	695a      	ldr	r2, [r3, #20]
 800b9b0:	88f9      	ldrh	r1, [r7, #6]
 800b9b2:	7ffb      	ldrb	r3, [r7, #31]
 800b9b4:	440b      	add	r3, r1
 800b9b6:	4619      	mov	r1, r3
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	fb01 f303 	mul.w	r3, r1, r3
 800b9be:	441a      	add	r2, r3
 800b9c0:	8bbb      	ldrh	r3, [r7, #28]
 800b9c2:	441a      	add	r2, r3
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	685b      	ldr	r3, [r3, #4]
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	f200 816d 	bhi.w	800bca8 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b9d2:	e14a      	b.n	800bc6a <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	691a      	ldr	r2, [r3, #16]
 800b9d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b9da:	441a      	add	r2, r3
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	685b      	ldr	r3, [r3, #4]
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	d307      	bcc.n	800b9f4 <CircularQueue_Add+0x190>
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	691a      	ldr	r2, [r3, #16]
 800b9e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b9ea:	441a      	add	r2, r3
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	685b      	ldr	r3, [r3, #4]
 800b9f0:	1ad3      	subs	r3, r2, r3
 800b9f2:	e003      	b.n	800b9fc <CircularQueue_Add+0x198>
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	691a      	ldr	r2, [r3, #16]
 800b9f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b9fa:	4413      	add	r3, r2
 800b9fc:	68fa      	ldr	r2, [r7, #12]
 800b9fe:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	691b      	ldr	r3, [r3, #16]
 800ba04:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	891b      	ldrh	r3, [r3, #8]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d130      	bne.n	800ba70 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	681a      	ldr	r2, [r3, #0]
 800ba12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba14:	1c59      	adds	r1, r3, #1
 800ba16:	6339      	str	r1, [r7, #48]	; 0x30
 800ba18:	4413      	add	r3, r2
 800ba1a:	88fa      	ldrh	r2, [r7, #6]
 800ba1c:	b2d2      	uxtb	r2, r2
 800ba1e:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	685b      	ldr	r3, [r3, #4]
 800ba24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba26:	429a      	cmp	r2, r3
 800ba28:	d304      	bcc.n	800ba34 <CircularQueue_Add+0x1d0>
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	685b      	ldr	r3, [r3, #4]
 800ba2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba30:	1ad3      	subs	r3, r2, r3
 800ba32:	e000      	b.n	800ba36 <CircularQueue_Add+0x1d2>
 800ba34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba36:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800ba38:	88fb      	ldrh	r3, [r7, #6]
 800ba3a:	0a1b      	lsrs	r3, r3, #8
 800ba3c:	b298      	uxth	r0, r3
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681a      	ldr	r2, [r3, #0]
 800ba42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba44:	1c59      	adds	r1, r3, #1
 800ba46:	6339      	str	r1, [r7, #48]	; 0x30
 800ba48:	4413      	add	r3, r2
 800ba4a:	b2c2      	uxtb	r2, r0
 800ba4c:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	685b      	ldr	r3, [r3, #4]
 800ba52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d304      	bcc.n	800ba62 <CircularQueue_Add+0x1fe>
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	685b      	ldr	r3, [r3, #4]
 800ba5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba5e:	1ad3      	subs	r3, r2, r3
 800ba60:	e000      	b.n	800ba64 <CircularQueue_Add+0x200>
 800ba62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba64:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	695b      	ldr	r3, [r3, #20]
 800ba6a:	1c9a      	adds	r2, r3, #2
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800ba70:	88fa      	ldrh	r2, [r7, #6]
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	6859      	ldr	r1, [r3, #4]
 800ba76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba78:	1acb      	subs	r3, r1, r3
 800ba7a:	4293      	cmp	r3, r2
 800ba7c:	bf28      	it	cs
 800ba7e:	4613      	movcs	r3, r2
 800ba80:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800ba82:	88fb      	ldrh	r3, [r7, #6]
 800ba84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d007      	beq.n	800ba9a <CircularQueue_Add+0x236>
 800ba8a:	88fb      	ldrh	r3, [r7, #6]
 800ba8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba8e:	429a      	cmp	r2, r3
 800ba90:	d225      	bcs.n	800bade <CircularQueue_Add+0x27a>
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	7f1b      	ldrb	r3, [r3, #28]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d121      	bne.n	800bade <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	681a      	ldr	r2, [r3, #0]
 800ba9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa0:	18d0      	adds	r0, r2, r3
 800baa2:	88fb      	ldrh	r3, [r7, #6]
 800baa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800baa6:	fb02 f303 	mul.w	r3, r2, r3
 800baaa:	68ba      	ldr	r2, [r7, #8]
 800baac:	4413      	add	r3, r2
 800baae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bab0:	4619      	mov	r1, r3
 800bab2:	f001 fb6e 	bl	800d192 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	695a      	ldr	r2, [r3, #20]
 800baba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800babc:	441a      	add	r2, r3
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800bac2:	2300      	movs	r3, #0
 800bac4:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800bac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bac8:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800baca:	88fa      	ldrh	r2, [r7, #6]
 800bacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bace:	1ad3      	subs	r3, r2, r3
 800bad0:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800bad2:	7ffb      	ldrb	r3, [r7, #31]
 800bad4:	b29a      	uxth	r2, r3
 800bad6:	88fb      	ldrh	r3, [r7, #6]
 800bad8:	4413      	add	r3, r2
 800bada:	86fb      	strh	r3, [r7, #54]	; 0x36
 800badc:	e0a4      	b.n	800bc28 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800bade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	f000 80a1 	beq.w	800bc28 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	7f1b      	ldrb	r3, [r3, #28]
 800baea:	f003 0301 	and.w	r3, r3, #1
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d03a      	beq.n	800bb68 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	891b      	ldrh	r3, [r3, #8]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d10d      	bne.n	800bb16 <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	681a      	ldr	r2, [r3, #0]
 800bafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb00:	3b02      	subs	r3, #2
 800bb02:	4413      	add	r3, r2
 800bb04:	22ff      	movs	r2, #255	; 0xff
 800bb06:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	681a      	ldr	r2, [r3, #0]
 800bb0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb0e:	3b01      	subs	r3, #1
 800bb10:	4413      	add	r3, r2
 800bb12:	22ff      	movs	r2, #255	; 0xff
 800bb14:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	695a      	ldr	r2, [r3, #20]
 800bb1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb1c:	441a      	add	r2, r3
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800bb22:	2300      	movs	r3, #0
 800bb24:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800bb26:	88fb      	ldrh	r3, [r7, #6]
 800bb28:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	891b      	ldrh	r3, [r3, #8]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d16f      	bne.n	800bc16 <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	681a      	ldr	r2, [r3, #0]
 800bb3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb3c:	1c59      	adds	r1, r3, #1
 800bb3e:	6339      	str	r1, [r7, #48]	; 0x30
 800bb40:	4413      	add	r3, r2
 800bb42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb44:	b2d2      	uxtb	r2, r2
 800bb46:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800bb48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb4a:	0a18      	lsrs	r0, r3, #8
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681a      	ldr	r2, [r3, #0]
 800bb50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb52:	1c59      	adds	r1, r3, #1
 800bb54:	6339      	str	r1, [r7, #48]	; 0x30
 800bb56:	4413      	add	r3, r2
 800bb58:	b2c2      	uxtb	r2, r0
 800bb5a:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	695b      	ldr	r3, [r3, #20]
 800bb60:	1c9a      	adds	r2, r3, #2
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	615a      	str	r2, [r3, #20]
 800bb66:	e056      	b.n	800bc16 <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	7f1b      	ldrb	r3, [r3, #28]
 800bb6c:	f003 0302 	and.w	r3, r3, #2
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d050      	beq.n	800bc16 <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	891b      	ldrh	r3, [r3, #8]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d14a      	bne.n	800bc12 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	681a      	ldr	r2, [r3, #0]
 800bb80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb82:	3b02      	subs	r3, #2
 800bb84:	4413      	add	r3, r2
 800bb86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb88:	b2d2      	uxtb	r2, r2
 800bb8a:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800bb8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb8e:	0a19      	lsrs	r1, r3, #8
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681a      	ldr	r2, [r3, #0]
 800bb94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb96:	3b01      	subs	r3, #1
 800bb98:	4413      	add	r3, r2
 800bb9a:	b2ca      	uxtb	r2, r1
 800bb9c:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	681a      	ldr	r2, [r3, #0]
 800bba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba4:	18d0      	adds	r0, r2, r3
 800bba6:	88fb      	ldrh	r3, [r7, #6]
 800bba8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbaa:	fb02 f303 	mul.w	r3, r2, r3
 800bbae:	68ba      	ldr	r2, [r7, #8]
 800bbb0:	4413      	add	r3, r2
 800bbb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bbb4:	4619      	mov	r1, r3
 800bbb6:	f001 faec 	bl	800d192 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	695a      	ldr	r2, [r3, #20]
 800bbbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc0:	441a      	add	r2, r3
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800bbc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc8:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800bbca:	88fa      	ldrh	r2, [r7, #6]
 800bbcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbce:	1ad3      	subs	r3, r2, r3
 800bbd0:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	699b      	ldr	r3, [r3, #24]
 800bbd6:	1c5a      	adds	r2, r3, #1
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800bbdc:	2300      	movs	r3, #0
 800bbde:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	681a      	ldr	r2, [r3, #0]
 800bbe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe6:	1c59      	adds	r1, r3, #1
 800bbe8:	6339      	str	r1, [r7, #48]	; 0x30
 800bbea:	4413      	add	r3, r2
 800bbec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bbee:	b2d2      	uxtb	r2, r2
 800bbf0:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800bbf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf4:	0a18      	lsrs	r0, r3, #8
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	681a      	ldr	r2, [r3, #0]
 800bbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbfc:	1c59      	adds	r1, r3, #1
 800bbfe:	6339      	str	r1, [r7, #48]	; 0x30
 800bc00:	4413      	add	r3, r2
 800bc02:	b2c2      	uxtb	r2, r0
 800bc04:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	695b      	ldr	r3, [r3, #20]
 800bc0a:	1c9a      	adds	r2, r3, #2
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	615a      	str	r2, [r3, #20]
 800bc10:	e001      	b.n	800bc16 <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800bc12:	2300      	movs	r3, #0
 800bc14:	e049      	b.n	800bcaa <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800bc16:	7ffb      	ldrb	r3, [r7, #31]
 800bc18:	b29a      	uxth	r2, r3
 800bc1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc1c:	b29b      	uxth	r3, r3
 800bc1e:	4413      	add	r3, r2
 800bc20:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	2200      	movs	r2, #0
 800bc26:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 800bc28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d015      	beq.n	800bc5a <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	681a      	ldr	r2, [r3, #0]
 800bc32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc34:	18d0      	adds	r0, r2, r3
 800bc36:	88fb      	ldrh	r3, [r7, #6]
 800bc38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc3a:	fb03 f202 	mul.w	r2, r3, r2
 800bc3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc40:	4413      	add	r3, r2
 800bc42:	68ba      	ldr	r2, [r7, #8]
 800bc44:	4413      	add	r3, r2
 800bc46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc48:	4619      	mov	r1, r3
 800bc4a:	f001 faa2 	bl	800d192 <memcpy>
        q->byteCount += NbBytesToCopy;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	695a      	ldr	r2, [r3, #20]
 800bc52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc54:	441a      	add	r2, r3
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	699b      	ldr	r3, [r3, #24]
 800bc5e:	1c5a      	adds	r2, r3, #1
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800bc64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc66:	3301      	adds	r3, #1
 800bc68:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	f4ff aeb0 	bcc.w	800b9d4 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	681a      	ldr	r2, [r3, #0]
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	6919      	ldr	r1, [r3, #16]
 800bc7c:	7ffb      	ldrb	r3, [r7, #31]
 800bc7e:	4419      	add	r1, r3
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	685b      	ldr	r3, [r3, #4]
 800bc84:	4299      	cmp	r1, r3
 800bc86:	d307      	bcc.n	800bc98 <CircularQueue_Add+0x434>
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	6919      	ldr	r1, [r3, #16]
 800bc8c:	7ffb      	ldrb	r3, [r7, #31]
 800bc8e:	4419      	add	r1, r3
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	1acb      	subs	r3, r1, r3
 800bc96:	e003      	b.n	800bca0 <CircularQueue_Add+0x43c>
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	6919      	ldr	r1, [r3, #16]
 800bc9c:	7ffb      	ldrb	r3, [r7, #31]
 800bc9e:	440b      	add	r3, r1
 800bca0:	4413      	add	r3, r2
 800bca2:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800bca4:	6a3b      	ldr	r3, [r7, #32]
 800bca6:	e000      	b.n	800bcaa <CircularQueue_Add+0x446>
    return NULL;
 800bca8:	2300      	movs	r3, #0
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	3738      	adds	r7, #56	; 0x38
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}

0800bcb2 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800bcb2:	b480      	push	{r7}
 800bcb4:	b085      	sub	sp, #20
 800bcb6:	af00      	add	r7, sp, #0
 800bcb8:	6078      	str	r0, [r7, #4]
 800bcba:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	891b      	ldrh	r3, [r3, #8]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d101      	bne.n	800bcd0 <CircularQueue_Remove+0x1e>
 800bccc:	2302      	movs	r3, #2
 800bcce:	e000      	b.n	800bcd2 <CircularQueue_Remove+0x20>
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	695b      	ldr	r3, [r3, #20]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	f000 80cc 	beq.w	800be7a <CircularQueue_Remove+0x1c8>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	891b      	ldrh	r3, [r3, #8]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d121      	bne.n	800bd2e <CircularQueue_Remove+0x7c>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681a      	ldr	r2, [r3, #0]
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	68db      	ldr	r3, [r3, #12]
 800bcf2:	4413      	add	r3, r2
 800bcf4:	781b      	ldrb	r3, [r3, #0]
 800bcf6:	b29a      	uxth	r2, r3
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	6819      	ldr	r1, [r3, #0]
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	68db      	ldr	r3, [r3, #12]
 800bd00:	1c58      	adds	r0, r3, #1
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	685b      	ldr	r3, [r3, #4]
 800bd06:	4298      	cmp	r0, r3
 800bd08:	d306      	bcc.n	800bd18 <CircularQueue_Remove+0x66>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	68d8      	ldr	r0, [r3, #12]
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	685b      	ldr	r3, [r3, #4]
 800bd12:	1ac3      	subs	r3, r0, r3
 800bd14:	3301      	adds	r3, #1
 800bd16:	e002      	b.n	800bd1e <CircularQueue_Remove+0x6c>
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	68db      	ldr	r3, [r3, #12]
 800bd1c:	3301      	adds	r3, #1
 800bd1e:	440b      	add	r3, r1
 800bd20:	781b      	ldrb	r3, [r3, #0]
 800bd22:	b29b      	uxth	r3, r3
 800bd24:	021b      	lsls	r3, r3, #8
 800bd26:	b29b      	uxth	r3, r3
 800bd28:	4413      	add	r3, r2
 800bd2a:	b29b      	uxth	r3, r3
 800bd2c:	e001      	b.n	800bd32 <CircularQueue_Remove+0x80>
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	891b      	ldrh	r3, [r3, #8]
 800bd32:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	7f1b      	ldrb	r3, [r3, #28]
 800bd38:	f003 0301 	and.w	r3, r3, #1
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d057      	beq.n	800bdf0 <CircularQueue_Remove+0x13e>
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	7f1b      	ldrb	r3, [r3, #28]
 800bd44:	f003 0302 	and.w	r3, r3, #2
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d151      	bne.n	800bdf0 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800bd4c:	897b      	ldrh	r3, [r7, #10]
 800bd4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd52:	4293      	cmp	r3, r2
 800bd54:	d103      	bne.n	800bd5e <CircularQueue_Remove+0xac>
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	891b      	ldrh	r3, [r3, #8]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d012      	beq.n	800bd84 <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	68da      	ldr	r2, [r3, #12]
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800bd66:	429a      	cmp	r2, r3
 800bd68:	d942      	bls.n	800bdf0 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	891b      	ldrh	r3, [r3, #8]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d03e      	beq.n	800bdf0 <CircularQueue_Remove+0x13e>
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	685a      	ldr	r2, [r3, #4]
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	68db      	ldr	r3, [r3, #12]
 800bd7a:	1ad3      	subs	r3, r2, r3
 800bd7c:	687a      	ldr	r2, [r7, #4]
 800bd7e:	8912      	ldrh	r2, [r2, #8]
 800bd80:	4293      	cmp	r3, r2
 800bd82:	d235      	bcs.n	800bdf0 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	695a      	ldr	r2, [r3, #20]
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	68d9      	ldr	r1, [r3, #12]
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	685b      	ldr	r3, [r3, #4]
 800bd90:	1acb      	subs	r3, r1, r3
 800bd92:	441a      	add	r2, r3
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	891b      	ldrh	r3, [r3, #8]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d121      	bne.n	800bdea <CircularQueue_Remove+0x138>
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681a      	ldr	r2, [r3, #0]
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	68db      	ldr	r3, [r3, #12]
 800bdae:	4413      	add	r3, r2
 800bdb0:	781b      	ldrb	r3, [r3, #0]
 800bdb2:	b29a      	uxth	r2, r3
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	6819      	ldr	r1, [r3, #0]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	68db      	ldr	r3, [r3, #12]
 800bdbc:	1c58      	adds	r0, r3, #1
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	685b      	ldr	r3, [r3, #4]
 800bdc2:	4298      	cmp	r0, r3
 800bdc4:	d306      	bcc.n	800bdd4 <CircularQueue_Remove+0x122>
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	68d8      	ldr	r0, [r3, #12]
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	685b      	ldr	r3, [r3, #4]
 800bdce:	1ac3      	subs	r3, r0, r3
 800bdd0:	3301      	adds	r3, #1
 800bdd2:	e002      	b.n	800bdda <CircularQueue_Remove+0x128>
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	68db      	ldr	r3, [r3, #12]
 800bdd8:	3301      	adds	r3, #1
 800bdda:	440b      	add	r3, r1
 800bddc:	781b      	ldrb	r3, [r3, #0]
 800bdde:	b29b      	uxth	r3, r3
 800bde0:	021b      	lsls	r3, r3, #8
 800bde2:	b29b      	uxth	r3, r3
 800bde4:	4413      	add	r3, r2
 800bde6:	b29b      	uxth	r3, r3
 800bde8:	e001      	b.n	800bdee <CircularQueue_Remove+0x13c>
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	891b      	ldrh	r3, [r3, #8]
 800bdee:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681a      	ldr	r2, [r3, #0]
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	68d9      	ldr	r1, [r3, #12]
 800bdf8:	7a7b      	ldrb	r3, [r7, #9]
 800bdfa:	4419      	add	r1, r3
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	685b      	ldr	r3, [r3, #4]
 800be00:	4299      	cmp	r1, r3
 800be02:	d307      	bcc.n	800be14 <CircularQueue_Remove+0x162>
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	68d9      	ldr	r1, [r3, #12]
 800be08:	7a7b      	ldrb	r3, [r7, #9]
 800be0a:	4419      	add	r1, r3
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	685b      	ldr	r3, [r3, #4]
 800be10:	1acb      	subs	r3, r1, r3
 800be12:	e003      	b.n	800be1c <CircularQueue_Remove+0x16a>
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	68d9      	ldr	r1, [r3, #12]
 800be18:	7a7b      	ldrb	r3, [r7, #9]
 800be1a:	440b      	add	r3, r1
 800be1c:	4413      	add	r3, r2
 800be1e:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	695b      	ldr	r3, [r3, #20]
 800be24:	8979      	ldrh	r1, [r7, #10]
 800be26:	7a7a      	ldrb	r2, [r7, #9]
 800be28:	440a      	add	r2, r1
 800be2a:	1a9a      	subs	r2, r3, r2
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	695b      	ldr	r3, [r3, #20]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d01b      	beq.n	800be70 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	68da      	ldr	r2, [r3, #12]
 800be3c:	897b      	ldrh	r3, [r7, #10]
 800be3e:	441a      	add	r2, r3
 800be40:	7a7b      	ldrb	r3, [r7, #9]
 800be42:	441a      	add	r2, r3
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	685b      	ldr	r3, [r3, #4]
 800be48:	429a      	cmp	r2, r3
 800be4a:	d309      	bcc.n	800be60 <CircularQueue_Remove+0x1ae>
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	68da      	ldr	r2, [r3, #12]
 800be50:	897b      	ldrh	r3, [r7, #10]
 800be52:	441a      	add	r2, r3
 800be54:	7a7b      	ldrb	r3, [r7, #9]
 800be56:	441a      	add	r2, r3
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	685b      	ldr	r3, [r3, #4]
 800be5c:	1ad3      	subs	r3, r2, r3
 800be5e:	e005      	b.n	800be6c <CircularQueue_Remove+0x1ba>
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	68da      	ldr	r2, [r3, #12]
 800be64:	897b      	ldrh	r3, [r7, #10]
 800be66:	441a      	add	r2, r3
 800be68:	7a7b      	ldrb	r3, [r7, #9]
 800be6a:	4413      	add	r3, r2
 800be6c:	687a      	ldr	r2, [r7, #4]
 800be6e:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	699b      	ldr	r3, [r3, #24]
 800be74:	1e5a      	subs	r2, r3, #1
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d002      	beq.n	800be86 <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	897a      	ldrh	r2, [r7, #10]
 800be84:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800be86:	68fb      	ldr	r3, [r7, #12]
}
 800be88:	4618      	mov	r0, r3
 800be8a:	3714      	adds	r7, #20
 800be8c:	46bd      	mov	sp, r7
 800be8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be92:	4770      	bx	lr

0800be94 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800be94:	b480      	push	{r7}
 800be96:	b087      	sub	sp, #28
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
 800be9c:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800be9e:	2300      	movs	r3, #0
 800bea0:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800bea2:	2300      	movs	r3, #0
 800bea4:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	891b      	ldrh	r3, [r3, #8]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d101      	bne.n	800beb2 <CircularQueue_Sense+0x1e>
 800beae:	2302      	movs	r3, #2
 800beb0:	e000      	b.n	800beb4 <CircularQueue_Sense+0x20>
 800beb2:	2300      	movs	r3, #0
 800beb4:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800beb6:	2300      	movs	r3, #0
 800beb8:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800beba:	2300      	movs	r3, #0
 800bebc:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	695b      	ldr	r3, [r3, #20]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	f000 8090 	beq.w	800bfe8 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	68db      	ldr	r3, [r3, #12]
 800becc:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	891b      	ldrh	r3, [r3, #8]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d121      	bne.n	800bf1a <CircularQueue_Sense+0x86>
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681a      	ldr	r2, [r3, #0]
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	68db      	ldr	r3, [r3, #12]
 800bede:	4413      	add	r3, r2
 800bee0:	781b      	ldrb	r3, [r3, #0]
 800bee2:	b29a      	uxth	r2, r3
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	6819      	ldr	r1, [r3, #0]
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	68db      	ldr	r3, [r3, #12]
 800beec:	1c58      	adds	r0, r3, #1
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	685b      	ldr	r3, [r3, #4]
 800bef2:	4298      	cmp	r0, r3
 800bef4:	d306      	bcc.n	800bf04 <CircularQueue_Sense+0x70>
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	68d8      	ldr	r0, [r3, #12]
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	685b      	ldr	r3, [r3, #4]
 800befe:	1ac3      	subs	r3, r0, r3
 800bf00:	3301      	adds	r3, #1
 800bf02:	e002      	b.n	800bf0a <CircularQueue_Sense+0x76>
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	68db      	ldr	r3, [r3, #12]
 800bf08:	3301      	adds	r3, #1
 800bf0a:	440b      	add	r3, r1
 800bf0c:	781b      	ldrb	r3, [r3, #0]
 800bf0e:	b29b      	uxth	r3, r3
 800bf10:	021b      	lsls	r3, r3, #8
 800bf12:	b29b      	uxth	r3, r3
 800bf14:	4413      	add	r3, r2
 800bf16:	b29b      	uxth	r3, r3
 800bf18:	e001      	b.n	800bf1e <CircularQueue_Sense+0x8a>
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	891b      	ldrh	r3, [r3, #8]
 800bf1e:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	7f1b      	ldrb	r3, [r3, #28]
 800bf24:	f003 0301 	and.w	r3, r3, #1
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d048      	beq.n	800bfbe <CircularQueue_Sense+0x12a>
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	7f1b      	ldrb	r3, [r3, #28]
 800bf30:	f003 0302 	and.w	r3, r3, #2
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d142      	bne.n	800bfbe <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800bf38:	8a7b      	ldrh	r3, [r7, #18]
 800bf3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bf3e:	4293      	cmp	r3, r2
 800bf40:	d103      	bne.n	800bf4a <CircularQueue_Sense+0xb6>
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	891b      	ldrh	r3, [r3, #8]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d012      	beq.n	800bf70 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	68da      	ldr	r2, [r3, #12]
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800bf52:	429a      	cmp	r2, r3
 800bf54:	d933      	bls.n	800bfbe <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	891b      	ldrh	r3, [r3, #8]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d02f      	beq.n	800bfbe <CircularQueue_Sense+0x12a>
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	685a      	ldr	r2, [r3, #4]
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	68db      	ldr	r3, [r3, #12]
 800bf66:	1ad3      	subs	r3, r2, r3
 800bf68:	687a      	ldr	r2, [r7, #4]
 800bf6a:	8912      	ldrh	r2, [r2, #8]
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d226      	bcs.n	800bfbe <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800bf70:	2300      	movs	r3, #0
 800bf72:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	891b      	ldrh	r3, [r3, #8]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d11d      	bne.n	800bfb8 <CircularQueue_Sense+0x124>
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681a      	ldr	r2, [r3, #0]
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	4413      	add	r3, r2
 800bf84:	781b      	ldrb	r3, [r3, #0]
 800bf86:	b29a      	uxth	r2, r3
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6819      	ldr	r1, [r3, #0]
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	1c58      	adds	r0, r3, #1
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	685b      	ldr	r3, [r3, #4]
 800bf94:	4298      	cmp	r0, r3
 800bf96:	d305      	bcc.n	800bfa4 <CircularQueue_Sense+0x110>
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	685b      	ldr	r3, [r3, #4]
 800bf9c:	68f8      	ldr	r0, [r7, #12]
 800bf9e:	1ac3      	subs	r3, r0, r3
 800bfa0:	3301      	adds	r3, #1
 800bfa2:	e001      	b.n	800bfa8 <CircularQueue_Sense+0x114>
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	440b      	add	r3, r1
 800bfaa:	781b      	ldrb	r3, [r3, #0]
 800bfac:	b29b      	uxth	r3, r3
 800bfae:	021b      	lsls	r3, r3, #8
 800bfb0:	b29b      	uxth	r3, r3
 800bfb2:	4413      	add	r3, r2
 800bfb4:	b29b      	uxth	r3, r3
 800bfb6:	e001      	b.n	800bfbc <CircularQueue_Sense+0x128>
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	891b      	ldrh	r3, [r3, #8]
 800bfbc:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681a      	ldr	r2, [r3, #0]
 800bfc2:	7af9      	ldrb	r1, [r7, #11]
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	4419      	add	r1, r3
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	685b      	ldr	r3, [r3, #4]
 800bfcc:	4299      	cmp	r1, r3
 800bfce:	d306      	bcc.n	800bfde <CircularQueue_Sense+0x14a>
 800bfd0:	7af9      	ldrb	r1, [r7, #11]
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	4419      	add	r1, r3
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	685b      	ldr	r3, [r3, #4]
 800bfda:	1acb      	subs	r3, r1, r3
 800bfdc:	e002      	b.n	800bfe4 <CircularQueue_Sense+0x150>
 800bfde:	7af9      	ldrb	r1, [r7, #11]
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	440b      	add	r3, r1
 800bfe4:	4413      	add	r3, r2
 800bfe6:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d002      	beq.n	800bff4 <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	8a7a      	ldrh	r2, [r7, #18]
 800bff2:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800bff4:	697b      	ldr	r3, [r7, #20]
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	371c      	adds	r7, #28
 800bffa:	46bd      	mov	sp, r7
 800bffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c000:	4770      	bx	lr

0800c002 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800c002:	b480      	push	{r7}
 800c004:	af00      	add	r7, sp, #0
  return;
 800c006:	bf00      	nop
}
 800c008:	46bd      	mov	sp, r7
 800c00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00e:	4770      	bx	lr

0800c010 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800c010:	b480      	push	{r7}
 800c012:	af00      	add	r7, sp, #0
  return;
 800c014:	bf00      	nop
}
 800c016:	46bd      	mov	sp, r7
 800c018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01c:	4770      	bx	lr

0800c01e <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800c01e:	b480      	push	{r7}
 800c020:	af00      	add	r7, sp, #0
  return;
 800c022:	bf00      	nop
}
 800c024:	46bd      	mov	sp, r7
 800c026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02a:	4770      	bx	lr

0800c02c <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800c02c:	b480      	push	{r7}
 800c02e:	af00      	add	r7, sp, #0
  return;
 800c030:	bf00      	nop
}
 800c032:	46bd      	mov	sp, r7
 800c034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c038:	4770      	bx	lr

0800c03a <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800c03a:	b480      	push	{r7}
 800c03c:	af00      	add	r7, sp, #0
  return;
 800c03e:	bf00      	nop
}
 800c040:	46bd      	mov	sp, r7
 800c042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c046:	4770      	bx	lr

0800c048 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800c048:	b480      	push	{r7}
 800c04a:	af00      	add	r7, sp, #0
  return;
 800c04c:	bf00      	nop
}
 800c04e:	46bd      	mov	sp, r7
 800c050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c054:	4770      	bx	lr

0800c056 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800c056:	b480      	push	{r7}
 800c058:	af00      	add	r7, sp, #0
  return;
 800c05a:	bf00      	nop
}
 800c05c:	46bd      	mov	sp, r7
 800c05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c062:	4770      	bx	lr

0800c064 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800c064:	b480      	push	{r7}
 800c066:	af00      	add	r7, sp, #0
  return;
 800c068:	bf00      	nop
}
 800c06a:	46bd      	mov	sp, r7
 800c06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c070:	4770      	bx	lr

0800c072 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800c072:	b480      	push	{r7}
 800c074:	af00      	add	r7, sp, #0
  return;
 800c076:	bf00      	nop
}
 800c078:	46bd      	mov	sp, r7
 800c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07e:	4770      	bx	lr

0800c080 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800c080:	b480      	push	{r7}
 800c082:	af00      	add	r7, sp, #0
  return;
 800c084:	bf00      	nop
}
 800c086:	46bd      	mov	sp, r7
 800c088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08c:	4770      	bx	lr

0800c08e <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800c08e:	b480      	push	{r7}
 800c090:	af00      	add	r7, sp, #0
  return;
 800c092:	bf00      	nop
}
 800c094:	46bd      	mov	sp, r7
 800c096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09a:	4770      	bx	lr

0800c09c <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800c09c:	b480      	push	{r7}
 800c09e:	af00      	add	r7, sp, #0
  return;
 800c0a0:	bf00      	nop
}
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a8:	4770      	bx	lr

0800c0aa <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800c0aa:	b480      	push	{r7}
 800c0ac:	af00      	add	r7, sp, #0
  return;
 800c0ae:	bf00      	nop
}
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b6:	4770      	bx	lr

0800c0b8 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	af00      	add	r7, sp, #0
  return;
 800c0bc:	bf00      	nop
}
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c4:	4770      	bx	lr

0800c0c6 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800c0c6:	b480      	push	{r7}
 800c0c8:	af00      	add	r7, sp, #0
  return;
 800c0ca:	bf00      	nop
}
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d2:	4770      	bx	lr

0800c0d4 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800c0d4:	b480      	push	{r7}
 800c0d6:	af00      	add	r7, sp, #0
  return;
 800c0d8:	bf00      	nop
}
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e0:	4770      	bx	lr

0800c0e2 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800c0e2:	b480      	push	{r7}
 800c0e4:	af00      	add	r7, sp, #0
  return;
 800c0e6:	bf00      	nop
}
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ee:	4770      	bx	lr

0800c0f0 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	af00      	add	r7, sp, #0
  return;
 800c0f4:	bf00      	nop
}
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fc:	4770      	bx	lr
	...

0800c100 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800c100:	b580      	push	{r7, lr}
 800c102:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800c104:	4b04      	ldr	r3, [pc, #16]	; (800c118 <SVCCTL_Init+0x18>)
 800c106:	2200      	movs	r2, #0
 800c108:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800c10a:	4b04      	ldr	r3, [pc, #16]	; (800c11c <SVCCTL_Init+0x1c>)
 800c10c:	2200      	movs	r2, #0
 800c10e:	711a      	strb	r2, [r3, #4]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800c110:	f000 f806 	bl	800c120 <SVCCTL_SvcInit>

  return;
 800c114:	bf00      	nop
}
 800c116:	bd80      	pop	{r7, pc}
 800c118:	200000c0 	.word	0x200000c0
 800c11c:	200000e0 	.word	0x200000e0

0800c120 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	af00      	add	r7, sp, #0
  BAS_Init();
 800c124:	f7ff ff6d 	bl	800c002 <BAS_Init>

  BLS_Init();
 800c128:	f7ff ff72 	bl	800c010 <BLS_Init>

  CRS_STM_Init();
 800c12c:	f7ff ff77 	bl	800c01e <CRS_STM_Init>

  DIS_Init();
 800c130:	f7ff ff7c 	bl	800c02c <DIS_Init>

  EDS_STM_Init();
 800c134:	f7ff ff81 	bl	800c03a <EDS_STM_Init>

  HIDS_Init();
 800c138:	f7ff ff86 	bl	800c048 <HIDS_Init>

  HRS_Init();
 800c13c:	f7ff ff8b 	bl	800c056 <HRS_Init>

  HTS_Init();
 800c140:	f7ff ff90 	bl	800c064 <HTS_Init>

  IAS_Init();
 800c144:	f7ff ff95 	bl	800c072 <IAS_Init>

  LLS_Init();
 800c148:	f7ff ff9a 	bl	800c080 <LLS_Init>

  TPS_Init();
 800c14c:	f7ff ff9f 	bl	800c08e <TPS_Init>

  MOTENV_STM_Init();
 800c150:	f7ff ffa4 	bl	800c09c <MOTENV_STM_Init>

  P2PS_STM_Init();
 800c154:	f7ff ffa9 	bl	800c0aa <P2PS_STM_Init>

  ZDD_STM_Init();
 800c158:	f7ff ffae 	bl	800c0b8 <ZDD_STM_Init>

  OTAS_STM_Init();
 800c15c:	f7ff ffb3 	bl	800c0c6 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800c160:	f7ff ffbf 	bl	800c0e2 <BVOPUS_STM_Init>

  MESH_Init();
 800c164:	f7ff ffb6 	bl	800c0d4 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800c168:	f7ff ffc2 	bl	800c0f0 <SVCCTL_InitCustomSvc>
  
  return;
 800c16c:	bf00      	nop
}
 800c16e:	bd80      	pop	{r7, pc}

0800c170 <SVCCTL_RegisterCltHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterCltHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Client_Event_Handler )
{
 800c170:	b480      	push	{r7}
 800c172:	b083      	sub	sp, #12
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
  SVCCTL_CltHandler.SVCCTL_CltHandlerTable[SVCCTL_CltHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Client_Event_Handler;
 800c178:	4b09      	ldr	r3, [pc, #36]	; (800c1a0 <SVCCTL_RegisterCltHandler+0x30>)
 800c17a:	791b      	ldrb	r3, [r3, #4]
 800c17c:	4619      	mov	r1, r3
 800c17e:	4a08      	ldr	r2, [pc, #32]	; (800c1a0 <SVCCTL_RegisterCltHandler+0x30>)
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_CltHandler.NbreOfRegisteredHandler++;
 800c186:	4b06      	ldr	r3, [pc, #24]	; (800c1a0 <SVCCTL_RegisterCltHandler+0x30>)
 800c188:	791b      	ldrb	r3, [r3, #4]
 800c18a:	3301      	adds	r3, #1
 800c18c:	b2da      	uxtb	r2, r3
 800c18e:	4b04      	ldr	r3, [pc, #16]	; (800c1a0 <SVCCTL_RegisterCltHandler+0x30>)
 800c190:	711a      	strb	r2, [r3, #4]
#else
  (void)(pfBLE_SVC_Client_Event_Handler);
#endif

  return;
 800c192:	bf00      	nop
}
 800c194:	370c      	adds	r7, #12
 800c196:	46bd      	mov	sp, r7
 800c198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19c:	4770      	bx	lr
 800c19e:	bf00      	nop
 800c1a0:	200000e0 	.word	0x200000e0

0800c1a4 <SVCCTL_UserEvtRx>:

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b086      	sub	sp, #24
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	3301      	adds	r3, #1
 800c1b0:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800c1b6:	693b      	ldr	r3, [r7, #16]
 800c1b8:	781b      	ldrb	r3, [r3, #0]
 800c1ba:	2bff      	cmp	r3, #255	; 0xff
 800c1bc:	d13f      	bne.n	800c23e <SVCCTL_UserEvtRx+0x9a>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	3302      	adds	r3, #2
 800c1c2:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	881b      	ldrh	r3, [r3, #0]
 800c1c8:	b29b      	uxth	r3, r3
 800c1ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c1ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c1d2:	d132      	bne.n	800c23a <SVCCTL_UserEvtRx+0x96>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	757b      	strb	r3, [r7, #21]
 800c1d8:	e00d      	b.n	800c1f6 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800c1da:	7d7b      	ldrb	r3, [r7, #21]
 800c1dc:	4a27      	ldr	r2, [pc, #156]	; (800c27c <SVCCTL_UserEvtRx+0xd8>)
 800c1de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	4798      	blx	r3
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800c1ea:	7dfb      	ldrb	r3, [r7, #23]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d108      	bne.n	800c202 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800c1f0:	7d7b      	ldrb	r3, [r7, #21]
 800c1f2:	3301      	adds	r3, #1
 800c1f4:	757b      	strb	r3, [r7, #21]
 800c1f6:	4b21      	ldr	r3, [pc, #132]	; (800c27c <SVCCTL_UserEvtRx+0xd8>)
 800c1f8:	7f1b      	ldrb	r3, [r3, #28]
 800c1fa:	7d7a      	ldrb	r2, [r7, #21]
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	d3ec      	bcc.n	800c1da <SVCCTL_UserEvtRx+0x36>
 800c200:	e000      	b.n	800c204 <SVCCTL_UserEvtRx+0x60>
            {
              /**
               *  The event has been managed. The Event processing should be stopped
               */
              break;
 800c202:	bf00      	nop
            }
          }
#endif
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
          /* For Client event handler */
          event_notification_status = SVCCTL_EvtNotAck;
 800c204:	2300      	movs	r3, #0
 800c206:	75fb      	strb	r3, [r7, #23]
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 800c208:	2300      	movs	r3, #0
 800c20a:	757b      	strb	r3, [r7, #21]
 800c20c:	e00d      	b.n	800c22a <SVCCTL_UserEvtRx+0x86>
          {
            event_notification_status = SVCCTL_CltHandler.SVCCTL_CltHandlerTable[index](pckt);
 800c20e:	7d7b      	ldrb	r3, [r7, #21]
 800c210:	4a1b      	ldr	r2, [pc, #108]	; (800c280 <SVCCTL_UserEvtRx+0xdc>)
 800c212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	4798      	blx	r3
 800c21a:	4603      	mov	r3, r0
 800c21c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Client, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Client
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800c21e:	7dfb      	ldrb	r3, [r7, #23]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d108      	bne.n	800c236 <SVCCTL_UserEvtRx+0x92>
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 800c224:	7d7b      	ldrb	r3, [r7, #21]
 800c226:	3301      	adds	r3, #1
 800c228:	757b      	strb	r3, [r7, #21]
 800c22a:	4b15      	ldr	r3, [pc, #84]	; (800c280 <SVCCTL_UserEvtRx+0xdc>)
 800c22c:	791b      	ldrb	r3, [r3, #4]
 800c22e:	7d7a      	ldrb	r2, [r7, #21]
 800c230:	429a      	cmp	r2, r3
 800c232:	d3ec      	bcc.n	800c20e <SVCCTL_UserEvtRx+0x6a>
               */
              break;
            }
          }
#endif
          break;
 800c234:	e002      	b.n	800c23c <SVCCTL_UserEvtRx+0x98>
              break;
 800c236:	bf00      	nop
          break;
 800c238:	e000      	b.n	800c23c <SVCCTL_UserEvtRx+0x98>

        default:
          break;
 800c23a:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800c23c:	e000      	b.n	800c240 <SVCCTL_UserEvtRx+0x9c>

    default:
      break;
 800c23e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800c240:	7dfb      	ldrb	r3, [r7, #23]
 800c242:	2b02      	cmp	r3, #2
 800c244:	d00f      	beq.n	800c266 <SVCCTL_UserEvtRx+0xc2>
 800c246:	2b02      	cmp	r3, #2
 800c248:	dc10      	bgt.n	800c26c <SVCCTL_UserEvtRx+0xc8>
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d002      	beq.n	800c254 <SVCCTL_UserEvtRx+0xb0>
 800c24e:	2b01      	cmp	r3, #1
 800c250:	d006      	beq.n	800c260 <SVCCTL_UserEvtRx+0xbc>
 800c252:	e00b      	b.n	800c26c <SVCCTL_UserEvtRx+0xc8>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	f7f6 fcf1 	bl	8002c3c <SVCCTL_App_Notification>
 800c25a:	4603      	mov	r3, r0
 800c25c:	75bb      	strb	r3, [r7, #22]
      break;
 800c25e:	e008      	b.n	800c272 <SVCCTL_UserEvtRx+0xce>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800c260:	2301      	movs	r3, #1
 800c262:	75bb      	strb	r3, [r7, #22]
      break;
 800c264:	e005      	b.n	800c272 <SVCCTL_UserEvtRx+0xce>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800c266:	2300      	movs	r3, #0
 800c268:	75bb      	strb	r3, [r7, #22]
      break;
 800c26a:	e002      	b.n	800c272 <SVCCTL_UserEvtRx+0xce>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800c26c:	2301      	movs	r3, #1
 800c26e:	75bb      	strb	r3, [r7, #22]
      break;
 800c270:	bf00      	nop
  }

  return (return_status);
 800c272:	7dbb      	ldrb	r3, [r7, #22]
}
 800c274:	4618      	mov	r0, r3
 800c276:	3718      	adds	r7, #24
 800c278:	46bd      	mov	sp, r7
 800c27a:	bd80      	pop	{r7, pc}
 800c27c:	200000c0 	.word	0x200000c0
 800c280:	200000e0 	.word	0x200000e0

0800c284 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800c284:	b580      	push	{r7, lr}
 800c286:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800c288:	f7f8 fb0e 	bl	80048a8 <HW_IPCC_Enable>

  return;
 800c28c:	bf00      	nop
}
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <TL_Init>:


void TL_Init( void )
{
 800c290:	b580      	push	{r7, lr}
 800c292:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800c294:	4b10      	ldr	r3, [pc, #64]	; (800c2d8 <TL_Init+0x48>)
 800c296:	4a11      	ldr	r2, [pc, #68]	; (800c2dc <TL_Init+0x4c>)
 800c298:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800c29a:	4b0f      	ldr	r3, [pc, #60]	; (800c2d8 <TL_Init+0x48>)
 800c29c:	4a10      	ldr	r2, [pc, #64]	; (800c2e0 <TL_Init+0x50>)
 800c29e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800c2a0:	4b0d      	ldr	r3, [pc, #52]	; (800c2d8 <TL_Init+0x48>)
 800c2a2:	4a10      	ldr	r2, [pc, #64]	; (800c2e4 <TL_Init+0x54>)
 800c2a4:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800c2a6:	4b0c      	ldr	r3, [pc, #48]	; (800c2d8 <TL_Init+0x48>)
 800c2a8:	4a0f      	ldr	r2, [pc, #60]	; (800c2e8 <TL_Init+0x58>)
 800c2aa:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800c2ac:	4b0a      	ldr	r3, [pc, #40]	; (800c2d8 <TL_Init+0x48>)
 800c2ae:	4a0f      	ldr	r2, [pc, #60]	; (800c2ec <TL_Init+0x5c>)
 800c2b0:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800c2b2:	4b09      	ldr	r3, [pc, #36]	; (800c2d8 <TL_Init+0x48>)
 800c2b4:	4a0e      	ldr	r2, [pc, #56]	; (800c2f0 <TL_Init+0x60>)
 800c2b6:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800c2b8:	4b07      	ldr	r3, [pc, #28]	; (800c2d8 <TL_Init+0x48>)
 800c2ba:	4a0e      	ldr	r2, [pc, #56]	; (800c2f4 <TL_Init+0x64>)
 800c2bc:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800c2be:	4b06      	ldr	r3, [pc, #24]	; (800c2d8 <TL_Init+0x48>)
 800c2c0:	4a0d      	ldr	r2, [pc, #52]	; (800c2f8 <TL_Init+0x68>)
 800c2c2:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800c2c4:	4b04      	ldr	r3, [pc, #16]	; (800c2d8 <TL_Init+0x48>)
 800c2c6:	4a0d      	ldr	r2, [pc, #52]	; (800c2fc <TL_Init+0x6c>)
 800c2c8:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800c2ca:	4b03      	ldr	r3, [pc, #12]	; (800c2d8 <TL_Init+0x48>)
 800c2cc:	4a0c      	ldr	r2, [pc, #48]	; (800c300 <TL_Init+0x70>)
 800c2ce:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800c2d0:	f7f8 fafe 	bl	80048d0 <HW_IPCC_Init>

  return;
 800c2d4:	bf00      	nop
}
 800c2d6:	bd80      	pop	{r7, pc}
 800c2d8:	20030000 	.word	0x20030000
 800c2dc:	20030134 	.word	0x20030134
 800c2e0:	20030154 	.word	0x20030154
 800c2e4:	20030164 	.word	0x20030164
 800c2e8:	20030174 	.word	0x20030174
 800c2ec:	2003017c 	.word	0x2003017c
 800c2f0:	20030184 	.word	0x20030184
 800c2f4:	2003018c 	.word	0x2003018c
 800c2f8:	200301a8 	.word	0x200301a8
 800c2fc:	200301ac 	.word	0x200301ac
 800c300:	200301b8 	.word	0x200301b8

0800c304 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b084      	sub	sp, #16
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800c310:	4811      	ldr	r0, [pc, #68]	; (800c358 <TL_BLE_Init+0x54>)
 800c312:	f7ff f9b7 	bl	800b684 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800c316:	4b11      	ldr	r3, [pc, #68]	; (800c35c <TL_BLE_Init+0x58>)
 800c318:	685b      	ldr	r3, [r3, #4]
 800c31a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	689a      	ldr	r2, [r3, #8]
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	68da      	ldr	r2, [r3, #12]
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	4a0c      	ldr	r2, [pc, #48]	; (800c360 <TL_BLE_Init+0x5c>)
 800c330:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	4a08      	ldr	r2, [pc, #32]	; (800c358 <TL_BLE_Init+0x54>)
 800c336:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800c338:	f7f8 fae0 	bl	80048fc <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	4a08      	ldr	r2, [pc, #32]	; (800c364 <TL_BLE_Init+0x60>)
 800c342:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	685b      	ldr	r3, [r3, #4]
 800c348:	4a07      	ldr	r2, [pc, #28]	; (800c368 <TL_BLE_Init+0x64>)
 800c34a:	6013      	str	r3, [r2, #0]

  return 0;
 800c34c:	2300      	movs	r3, #0
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3710      	adds	r7, #16
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}
 800c356:	bf00      	nop
 800c358:	200301d4 	.word	0x200301d4
 800c35c:	20030000 	.word	0x20030000
 800c360:	20030a58 	.word	0x20030a58
 800c364:	2000168c 	.word	0x2000168c
 800c368:	20001690 	.word	0x20001690

0800c36c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b082      	sub	sp, #8
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
 800c374:	460b      	mov	r3, r1
 800c376:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800c378:	4b09      	ldr	r3, [pc, #36]	; (800c3a0 <TL_BLE_SendCmd+0x34>)
 800c37a:	685b      	ldr	r3, [r3, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	2201      	movs	r2, #1
 800c380:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800c382:	4b07      	ldr	r3, [pc, #28]	; (800c3a0 <TL_BLE_SendCmd+0x34>)
 800c384:	685b      	ldr	r3, [r3, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	4619      	mov	r1, r3
 800c38a:	2001      	movs	r0, #1
 800c38c:	f000 f96c 	bl	800c668 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800c390:	f7f8 fabe 	bl	8004910 <HW_IPCC_BLE_SendCmd>

  return 0;
 800c394:	2300      	movs	r3, #0
}
 800c396:	4618      	mov	r0, r3
 800c398:	3708      	adds	r7, #8
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}
 800c39e:	bf00      	nop
 800c3a0:	20030000 	.word	0x20030000

0800c3a4 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b082      	sub	sp, #8
 800c3a8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800c3aa:	e01c      	b.n	800c3e6 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800c3ac:	1d3b      	adds	r3, r7, #4
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	4812      	ldr	r0, [pc, #72]	; (800c3fc <HW_IPCC_BLE_RxEvtNot+0x58>)
 800c3b2:	f7ff fa06 	bl	800b7c2 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	7a5b      	ldrb	r3, [r3, #9]
 800c3ba:	2b0f      	cmp	r3, #15
 800c3bc:	d003      	beq.n	800c3c6 <HW_IPCC_BLE_RxEvtNot+0x22>
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	7a5b      	ldrb	r3, [r3, #9]
 800c3c2:	2b0e      	cmp	r3, #14
 800c3c4:	d105      	bne.n	800c3d2 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	4619      	mov	r1, r3
 800c3ca:	2002      	movs	r0, #2
 800c3cc:	f000 f94c 	bl	800c668 <OutputDbgTrace>
 800c3d0:	e004      	b.n	800c3dc <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	4619      	mov	r1, r3
 800c3d6:	2003      	movs	r0, #3
 800c3d8:	f000 f946 	bl	800c668 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800c3dc:	4b08      	ldr	r3, [pc, #32]	; (800c400 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	687a      	ldr	r2, [r7, #4]
 800c3e2:	4610      	mov	r0, r2
 800c3e4:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800c3e6:	4805      	ldr	r0, [pc, #20]	; (800c3fc <HW_IPCC_BLE_RxEvtNot+0x58>)
 800c3e8:	f7ff f95c 	bl	800b6a4 <LST_is_empty>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d0dc      	beq.n	800c3ac <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800c3f2:	bf00      	nop
}
 800c3f4:	3708      	adds	r7, #8
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}
 800c3fa:	bf00      	nop
 800c3fc:	200301d4 	.word	0x200301d4
 800c400:	2000168c 	.word	0x2000168c

0800c404 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800c408:	4b02      	ldr	r3, [pc, #8]	; (800c414 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	4798      	blx	r3

  return;
 800c40e:	bf00      	nop
}
 800c410:	bd80      	pop	{r7, pc}
 800c412:	bf00      	nop
 800c414:	20001690 	.word	0x20001690

0800c418 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b084      	sub	sp, #16
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800c424:	480d      	ldr	r0, [pc, #52]	; (800c45c <TL_SYS_Init+0x44>)
 800c426:	f7ff f92d 	bl	800b684 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800c42a:	4b0d      	ldr	r3, [pc, #52]	; (800c460 <TL_SYS_Init+0x48>)
 800c42c:	68db      	ldr	r3, [r3, #12]
 800c42e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	689a      	ldr	r2, [r3, #8]
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	4a08      	ldr	r2, [pc, #32]	; (800c45c <TL_SYS_Init+0x44>)
 800c43c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800c43e:	f7f8 fa89 	bl	8004954 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	4a07      	ldr	r2, [pc, #28]	; (800c464 <TL_SYS_Init+0x4c>)
 800c448:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	685b      	ldr	r3, [r3, #4]
 800c44e:	4a06      	ldr	r2, [pc, #24]	; (800c468 <TL_SYS_Init+0x50>)
 800c450:	6013      	str	r3, [r2, #0]

  return 0;
 800c452:	2300      	movs	r3, #0
}
 800c454:	4618      	mov	r0, r3
 800c456:	3710      	adds	r7, #16
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}
 800c45c:	200301dc 	.word	0x200301dc
 800c460:	20030000 	.word	0x20030000
 800c464:	20001694 	.word	0x20001694
 800c468:	20001698 	.word	0x20001698

0800c46c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b082      	sub	sp, #8
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
 800c474:	460b      	mov	r3, r1
 800c476:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800c478:	4b09      	ldr	r3, [pc, #36]	; (800c4a0 <TL_SYS_SendCmd+0x34>)
 800c47a:	68db      	ldr	r3, [r3, #12]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	2210      	movs	r2, #16
 800c480:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800c482:	4b07      	ldr	r3, [pc, #28]	; (800c4a0 <TL_SYS_SendCmd+0x34>)
 800c484:	68db      	ldr	r3, [r3, #12]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	4619      	mov	r1, r3
 800c48a:	2004      	movs	r0, #4
 800c48c:	f000 f8ec 	bl	800c668 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800c490:	f7f8 fa6a 	bl	8004968 <HW_IPCC_SYS_SendCmd>

  return 0;
 800c494:	2300      	movs	r3, #0
}
 800c496:	4618      	mov	r0, r3
 800c498:	3708      	adds	r7, #8
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}
 800c49e:	bf00      	nop
 800c4a0:	20030000 	.word	0x20030000

0800c4a4 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800c4a8:	4b07      	ldr	r3, [pc, #28]	; (800c4c8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800c4aa:	68db      	ldr	r3, [r3, #12]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	4619      	mov	r1, r3
 800c4b0:	2005      	movs	r0, #5
 800c4b2:	f000 f8d9 	bl	800c668 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800c4b6:	4b05      	ldr	r3, [pc, #20]	; (800c4cc <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	4a03      	ldr	r2, [pc, #12]	; (800c4c8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800c4bc:	68d2      	ldr	r2, [r2, #12]
 800c4be:	6812      	ldr	r2, [r2, #0]
 800c4c0:	4610      	mov	r0, r2
 800c4c2:	4798      	blx	r3

  return;
 800c4c4:	bf00      	nop
}
 800c4c6:	bd80      	pop	{r7, pc}
 800c4c8:	20030000 	.word	0x20030000
 800c4cc:	20001694 	.word	0x20001694

0800c4d0 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b082      	sub	sp, #8
 800c4d4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c4d6:	e00e      	b.n	800c4f6 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800c4d8:	1d3b      	adds	r3, r7, #4
 800c4da:	4619      	mov	r1, r3
 800c4dc:	480b      	ldr	r0, [pc, #44]	; (800c50c <HW_IPCC_SYS_EvtNot+0x3c>)
 800c4de:	f7ff f970 	bl	800b7c2 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	4619      	mov	r1, r3
 800c4e6:	2006      	movs	r0, #6
 800c4e8:	f000 f8be 	bl	800c668 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800c4ec:	4b08      	ldr	r3, [pc, #32]	; (800c510 <HW_IPCC_SYS_EvtNot+0x40>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	687a      	ldr	r2, [r7, #4]
 800c4f2:	4610      	mov	r0, r2
 800c4f4:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c4f6:	4805      	ldr	r0, [pc, #20]	; (800c50c <HW_IPCC_SYS_EvtNot+0x3c>)
 800c4f8:	f7ff f8d4 	bl	800b6a4 <LST_is_empty>
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d0ea      	beq.n	800c4d8 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800c502:	bf00      	nop
}
 800c504:	3708      	adds	r7, #8
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}
 800c50a:	bf00      	nop
 800c50c:	200301dc 	.word	0x200301dc
 800c510:	20001698 	.word	0x20001698

0800c514 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b082      	sub	sp, #8
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800c51c:	4817      	ldr	r0, [pc, #92]	; (800c57c <TL_MM_Init+0x68>)
 800c51e:	f7ff f8b1 	bl	800b684 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800c522:	4817      	ldr	r0, [pc, #92]	; (800c580 <TL_MM_Init+0x6c>)
 800c524:	f7ff f8ae 	bl	800b684 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800c528:	4b16      	ldr	r3, [pc, #88]	; (800c584 <TL_MM_Init+0x70>)
 800c52a:	691b      	ldr	r3, [r3, #16]
 800c52c:	4a16      	ldr	r2, [pc, #88]	; (800c588 <TL_MM_Init+0x74>)
 800c52e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800c530:	4b15      	ldr	r3, [pc, #84]	; (800c588 <TL_MM_Init+0x74>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	687a      	ldr	r2, [r7, #4]
 800c536:	6892      	ldr	r2, [r2, #8]
 800c538:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800c53a:	4b13      	ldr	r3, [pc, #76]	; (800c588 <TL_MM_Init+0x74>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	687a      	ldr	r2, [r7, #4]
 800c540:	68d2      	ldr	r2, [r2, #12]
 800c542:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800c544:	4b10      	ldr	r3, [pc, #64]	; (800c588 <TL_MM_Init+0x74>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	4a0c      	ldr	r2, [pc, #48]	; (800c57c <TL_MM_Init+0x68>)
 800c54a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800c54c:	4b0e      	ldr	r3, [pc, #56]	; (800c588 <TL_MM_Init+0x74>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	687a      	ldr	r2, [r7, #4]
 800c552:	6812      	ldr	r2, [r2, #0]
 800c554:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800c556:	4b0c      	ldr	r3, [pc, #48]	; (800c588 <TL_MM_Init+0x74>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	687a      	ldr	r2, [r7, #4]
 800c55c:	6852      	ldr	r2, [r2, #4]
 800c55e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800c560:	4b09      	ldr	r3, [pc, #36]	; (800c588 <TL_MM_Init+0x74>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	687a      	ldr	r2, [r7, #4]
 800c566:	6912      	ldr	r2, [r2, #16]
 800c568:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800c56a:	4b07      	ldr	r3, [pc, #28]	; (800c588 <TL_MM_Init+0x74>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	687a      	ldr	r2, [r7, #4]
 800c570:	6952      	ldr	r2, [r2, #20]
 800c572:	619a      	str	r2, [r3, #24]

  return;
 800c574:	bf00      	nop
}
 800c576:	3708      	adds	r7, #8
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}
 800c57c:	200301c4 	.word	0x200301c4
 800c580:	20001684 	.word	0x20001684
 800c584:	20030000 	.word	0x20030000
 800c588:	2000169c 	.word	0x2000169c

0800c58c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b082      	sub	sp, #8
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800c594:	6879      	ldr	r1, [r7, #4]
 800c596:	4807      	ldr	r0, [pc, #28]	; (800c5b4 <TL_MM_EvtDone+0x28>)
 800c598:	f7ff f8cc 	bl	800b734 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800c59c:	6879      	ldr	r1, [r7, #4]
 800c59e:	2000      	movs	r0, #0
 800c5a0:	f000 f862 	bl	800c668 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800c5a4:	4804      	ldr	r0, [pc, #16]	; (800c5b8 <TL_MM_EvtDone+0x2c>)
 800c5a6:	f7f8 fa05 	bl	80049b4 <HW_IPCC_MM_SendFreeBuf>

  return;
 800c5aa:	bf00      	nop
}
 800c5ac:	3708      	adds	r7, #8
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}
 800c5b2:	bf00      	nop
 800c5b4:	20001684 	.word	0x20001684
 800c5b8:	0800c5bd 	.word	0x0800c5bd

0800c5bc <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b082      	sub	sp, #8
 800c5c0:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c5c2:	e00c      	b.n	800c5de <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800c5c4:	1d3b      	adds	r3, r7, #4
 800c5c6:	4619      	mov	r1, r3
 800c5c8:	480a      	ldr	r0, [pc, #40]	; (800c5f4 <SendFreeBuf+0x38>)
 800c5ca:	f7ff f8fa 	bl	800b7c2 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800c5ce:	4b0a      	ldr	r3, [pc, #40]	; (800c5f8 <SendFreeBuf+0x3c>)
 800c5d0:	691b      	ldr	r3, [r3, #16]
 800c5d2:	691b      	ldr	r3, [r3, #16]
 800c5d4:	687a      	ldr	r2, [r7, #4]
 800c5d6:	4611      	mov	r1, r2
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f7ff f8ab 	bl	800b734 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c5de:	4805      	ldr	r0, [pc, #20]	; (800c5f4 <SendFreeBuf+0x38>)
 800c5e0:	f7ff f860 	bl	800b6a4 <LST_is_empty>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d0ec      	beq.n	800c5c4 <SendFreeBuf+0x8>
  }

  return;
 800c5ea:	bf00      	nop
}
 800c5ec:	3708      	adds	r7, #8
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}
 800c5f2:	bf00      	nop
 800c5f4:	20001684 	.word	0x20001684
 800c5f8:	20030000 	.word	0x20030000

0800c5fc <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800c600:	4805      	ldr	r0, [pc, #20]	; (800c618 <TL_TRACES_Init+0x1c>)
 800c602:	f7ff f83f 	bl	800b684 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800c606:	4b05      	ldr	r3, [pc, #20]	; (800c61c <TL_TRACES_Init+0x20>)
 800c608:	695b      	ldr	r3, [r3, #20]
 800c60a:	4a03      	ldr	r2, [pc, #12]	; (800c618 <TL_TRACES_Init+0x1c>)
 800c60c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800c60e:	f7f8 fa07 	bl	8004a20 <HW_IPCC_TRACES_Init>

  return;
 800c612:	bf00      	nop
}
 800c614:	bd80      	pop	{r7, pc}
 800c616:	bf00      	nop
 800c618:	200301cc 	.word	0x200301cc
 800c61c:	20030000 	.word	0x20030000

0800c620 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b082      	sub	sp, #8
 800c624:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c626:	e008      	b.n	800c63a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800c628:	1d3b      	adds	r3, r7, #4
 800c62a:	4619      	mov	r1, r3
 800c62c:	4808      	ldr	r0, [pc, #32]	; (800c650 <HW_IPCC_TRACES_EvtNot+0x30>)
 800c62e:	f7ff f8c8 	bl	800b7c2 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	4618      	mov	r0, r3
 800c636:	f000 f80d 	bl	800c654 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c63a:	4805      	ldr	r0, [pc, #20]	; (800c650 <HW_IPCC_TRACES_EvtNot+0x30>)
 800c63c:	f7ff f832 	bl	800b6a4 <LST_is_empty>
 800c640:	4603      	mov	r3, r0
 800c642:	2b00      	cmp	r3, #0
 800c644:	d0f0      	beq.n	800c628 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800c646:	bf00      	nop
}
 800c648:	3708      	adds	r7, #8
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}
 800c64e:	bf00      	nop
 800c650:	200301cc 	.word	0x200301cc

0800c654 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800c654:	b480      	push	{r7}
 800c656:	b083      	sub	sp, #12
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800c65c:	bf00      	nop
 800c65e:	370c      	adds	r7, #12
 800c660:	46bd      	mov	sp, r7
 800c662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c666:	4770      	bx	lr

0800c668 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800c668:	b480      	push	{r7}
 800c66a:	b085      	sub	sp, #20
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	4603      	mov	r3, r0
 800c670:	6039      	str	r1, [r7, #0]
 800c672:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800c674:	79fb      	ldrb	r3, [r7, #7]
 800c676:	2b06      	cmp	r3, #6
 800c678:	d845      	bhi.n	800c706 <OutputDbgTrace+0x9e>
 800c67a:	a201      	add	r2, pc, #4	; (adr r2, 800c680 <OutputDbgTrace+0x18>)
 800c67c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c680:	0800c69d 	.word	0x0800c69d
 800c684:	0800c6c1 	.word	0x0800c6c1
 800c688:	0800c6c7 	.word	0x0800c6c7
 800c68c:	0800c6db 	.word	0x0800c6db
 800c690:	0800c6e7 	.word	0x0800c6e7
 800c694:	0800c6ed 	.word	0x0800c6ed
 800c698:	0800c6fb 	.word	0x0800c6fb
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	7a5b      	ldrb	r3, [r3, #9]
 800c6a4:	2bff      	cmp	r3, #255	; 0xff
 800c6a6:	d005      	beq.n	800c6b4 <OutputDbgTrace+0x4c>
 800c6a8:	2bff      	cmp	r3, #255	; 0xff
 800c6aa:	dc05      	bgt.n	800c6b8 <OutputDbgTrace+0x50>
 800c6ac:	2b0e      	cmp	r3, #14
 800c6ae:	d005      	beq.n	800c6bc <OutputDbgTrace+0x54>
 800c6b0:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800c6b2:	e001      	b.n	800c6b8 <OutputDbgTrace+0x50>
          break;
 800c6b4:	bf00      	nop
 800c6b6:	e027      	b.n	800c708 <OutputDbgTrace+0xa0>
          break;
 800c6b8:	bf00      	nop
 800c6ba:	e025      	b.n	800c708 <OutputDbgTrace+0xa0>
          break;
 800c6bc:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800c6be:	e023      	b.n	800c708 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800c6c4:	e020      	b.n	800c708 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	7a5b      	ldrb	r3, [r3, #9]
 800c6ce:	2b0e      	cmp	r3, #14
 800c6d0:	d001      	beq.n	800c6d6 <OutputDbgTrace+0x6e>
 800c6d2:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800c6d4:	e000      	b.n	800c6d8 <OutputDbgTrace+0x70>
          break;
 800c6d6:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c6d8:	e016      	b.n	800c708 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	7a5b      	ldrb	r3, [r3, #9]
 800c6e2:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c6e4:	e010      	b.n	800c708 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800c6ea:	e00d      	b.n	800c708 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	7a5b      	ldrb	r3, [r3, #9]
 800c6f4:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800c6f6:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c6f8:	e006      	b.n	800c708 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	7a5b      	ldrb	r3, [r3, #9]
 800c702:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c704:	e000      	b.n	800c708 <OutputDbgTrace+0xa0>

    default:
      break;
 800c706:	bf00      	nop
  }

  return;
 800c708:	bf00      	nop
}
 800c70a:	3714      	adds	r7, #20
 800c70c:	46bd      	mov	sp, r7
 800c70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c712:	4770      	bx	lr

0800c714 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800c714:	b480      	push	{r7}
 800c716:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800c718:	4b05      	ldr	r3, [pc, #20]	; (800c730 <UTIL_LPM_Init+0x1c>)
 800c71a:	2200      	movs	r2, #0
 800c71c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800c71e:	4b05      	ldr	r3, [pc, #20]	; (800c734 <UTIL_LPM_Init+0x20>)
 800c720:	2200      	movs	r2, #0
 800c722:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800c724:	bf00      	nop
 800c726:	46bd      	mov	sp, r7
 800c728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72c:	4770      	bx	lr
 800c72e:	bf00      	nop
 800c730:	200016a0 	.word	0x200016a0
 800c734:	200016a4 	.word	0x200016a4

0800c738 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800c738:	b480      	push	{r7}
 800c73a:	b087      	sub	sp, #28
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
 800c740:	460b      	mov	r3, r1
 800c742:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c744:	f3ef 8310 	mrs	r3, PRIMASK
 800c748:	613b      	str	r3, [r7, #16]
  return(result);
 800c74a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800c74c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c74e:	b672      	cpsid	i
}
 800c750:	bf00      	nop
  
  switch(state)
 800c752:	78fb      	ldrb	r3, [r7, #3]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d008      	beq.n	800c76a <UTIL_LPM_SetOffMode+0x32>
 800c758:	2b01      	cmp	r3, #1
 800c75a:	d10e      	bne.n	800c77a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800c75c:	4b0d      	ldr	r3, [pc, #52]	; (800c794 <UTIL_LPM_SetOffMode+0x5c>)
 800c75e:	681a      	ldr	r2, [r3, #0]
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	4313      	orrs	r3, r2
 800c764:	4a0b      	ldr	r2, [pc, #44]	; (800c794 <UTIL_LPM_SetOffMode+0x5c>)
 800c766:	6013      	str	r3, [r2, #0]
      break;
 800c768:	e008      	b.n	800c77c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	43da      	mvns	r2, r3
 800c76e:	4b09      	ldr	r3, [pc, #36]	; (800c794 <UTIL_LPM_SetOffMode+0x5c>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	4013      	ands	r3, r2
 800c774:	4a07      	ldr	r2, [pc, #28]	; (800c794 <UTIL_LPM_SetOffMode+0x5c>)
 800c776:	6013      	str	r3, [r2, #0]
      break;
 800c778:	e000      	b.n	800c77c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800c77a:	bf00      	nop
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	f383 8810 	msr	PRIMASK, r3
}
 800c786:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800c788:	bf00      	nop
 800c78a:	371c      	adds	r7, #28
 800c78c:	46bd      	mov	sp, r7
 800c78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c792:	4770      	bx	lr
 800c794:	200016a4 	.word	0x200016a4

0800c798 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b090      	sub	sp, #64	; 0x40
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800c7a0:	4b73      	ldr	r3, [pc, #460]	; (800c970 <UTIL_SEQ_Run+0x1d8>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800c7a6:	4b72      	ldr	r3, [pc, #456]	; (800c970 <UTIL_SEQ_Run+0x1d8>)
 800c7a8:	681a      	ldr	r2, [r3, #0]
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	4013      	ands	r3, r2
 800c7ae:	4a70      	ldr	r2, [pc, #448]	; (800c970 <UTIL_SEQ_Run+0x1d8>)
 800c7b0:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800c7b2:	4b70      	ldr	r3, [pc, #448]	; (800c974 <UTIL_SEQ_Run+0x1dc>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800c7b8:	4b6f      	ldr	r3, [pc, #444]	; (800c978 <UTIL_SEQ_Run+0x1e0>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800c7be:	4b6f      	ldr	r3, [pc, #444]	; (800c97c <UTIL_SEQ_Run+0x1e4>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800c7c4:	4b6e      	ldr	r3, [pc, #440]	; (800c980 <UTIL_SEQ_Run+0x1e8>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c7ca:	e08d      	b.n	800c8e8 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800c7d0:	e002      	b.n	800c7d8 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800c7d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7d4:	3301      	adds	r3, #1
 800c7d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800c7d8:	4a6a      	ldr	r2, [pc, #424]	; (800c984 <UTIL_SEQ_Run+0x1ec>)
 800c7da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7dc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e2:	401a      	ands	r2, r3
 800c7e4:	4b62      	ldr	r3, [pc, #392]	; (800c970 <UTIL_SEQ_Run+0x1d8>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	4013      	ands	r3, r2
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d0f1      	beq.n	800c7d2 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800c7ee:	4a65      	ldr	r2, [pc, #404]	; (800c984 <UTIL_SEQ_Run+0x1ec>)
 800c7f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7f2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f8:	401a      	ands	r2, r3
 800c7fa:	4b5d      	ldr	r3, [pc, #372]	; (800c970 <UTIL_SEQ_Run+0x1d8>)
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	4013      	ands	r3, r2
 800c800:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800c802:	4a60      	ldr	r2, [pc, #384]	; (800c984 <UTIL_SEQ_Run+0x1ec>)
 800c804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c806:	00db      	lsls	r3, r3, #3
 800c808:	4413      	add	r3, r2
 800c80a:	685a      	ldr	r2, [r3, #4]
 800c80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c80e:	4013      	ands	r3, r2
 800c810:	2b00      	cmp	r3, #0
 800c812:	d106      	bne.n	800c822 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800c814:	4a5b      	ldr	r2, [pc, #364]	; (800c984 <UTIL_SEQ_Run+0x1ec>)
 800c816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c818:	00db      	lsls	r3, r3, #3
 800c81a:	4413      	add	r3, r2
 800c81c:	f04f 32ff 	mov.w	r2, #4294967295
 800c820:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800c822:	4a58      	ldr	r2, [pc, #352]	; (800c984 <UTIL_SEQ_Run+0x1ec>)
 800c824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c826:	00db      	lsls	r3, r3, #3
 800c828:	4413      	add	r3, r2
 800c82a:	685a      	ldr	r2, [r3, #4]
 800c82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c82e:	4013      	ands	r3, r2
 800c830:	4618      	mov	r0, r3
 800c832:	f000 f9b3 	bl	800cb9c <SEQ_BitPosition>
 800c836:	4603      	mov	r3, r0
 800c838:	461a      	mov	r2, r3
 800c83a:	4b53      	ldr	r3, [pc, #332]	; (800c988 <UTIL_SEQ_Run+0x1f0>)
 800c83c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800c83e:	4a51      	ldr	r2, [pc, #324]	; (800c984 <UTIL_SEQ_Run+0x1ec>)
 800c840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c842:	00db      	lsls	r3, r3, #3
 800c844:	4413      	add	r3, r2
 800c846:	685a      	ldr	r2, [r3, #4]
 800c848:	4b4f      	ldr	r3, [pc, #316]	; (800c988 <UTIL_SEQ_Run+0x1f0>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	2101      	movs	r1, #1
 800c84e:	fa01 f303 	lsl.w	r3, r1, r3
 800c852:	43db      	mvns	r3, r3
 800c854:	401a      	ands	r2, r3
 800c856:	494b      	ldr	r1, [pc, #300]	; (800c984 <UTIL_SEQ_Run+0x1ec>)
 800c858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c85a:	00db      	lsls	r3, r3, #3
 800c85c:	440b      	add	r3, r1
 800c85e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c860:	f3ef 8310 	mrs	r3, PRIMASK
 800c864:	61bb      	str	r3, [r7, #24]
  return(result);
 800c866:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c868:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800c86a:	b672      	cpsid	i
}
 800c86c:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800c86e:	4b46      	ldr	r3, [pc, #280]	; (800c988 <UTIL_SEQ_Run+0x1f0>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	2201      	movs	r2, #1
 800c874:	fa02 f303 	lsl.w	r3, r2, r3
 800c878:	43da      	mvns	r2, r3
 800c87a:	4b3e      	ldr	r3, [pc, #248]	; (800c974 <UTIL_SEQ_Run+0x1dc>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	4013      	ands	r3, r2
 800c880:	4a3c      	ldr	r2, [pc, #240]	; (800c974 <UTIL_SEQ_Run+0x1dc>)
 800c882:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800c884:	2302      	movs	r3, #2
 800c886:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c888:	e013      	b.n	800c8b2 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800c88a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c88c:	3b01      	subs	r3, #1
 800c88e:	4a3d      	ldr	r2, [pc, #244]	; (800c984 <UTIL_SEQ_Run+0x1ec>)
 800c890:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800c894:	4b3c      	ldr	r3, [pc, #240]	; (800c988 <UTIL_SEQ_Run+0x1f0>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	2201      	movs	r2, #1
 800c89a:	fa02 f303 	lsl.w	r3, r2, r3
 800c89e:	43da      	mvns	r2, r3
 800c8a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8a2:	3b01      	subs	r3, #1
 800c8a4:	400a      	ands	r2, r1
 800c8a6:	4937      	ldr	r1, [pc, #220]	; (800c984 <UTIL_SEQ_Run+0x1ec>)
 800c8a8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800c8ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8ae:	3b01      	subs	r3, #1
 800c8b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d1e8      	bne.n	800c88a <UTIL_SEQ_Run+0xf2>
 800c8b8:	6a3b      	ldr	r3, [r7, #32]
 800c8ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	f383 8810 	msr	PRIMASK, r3
}
 800c8c2:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800c8c4:	4b30      	ldr	r3, [pc, #192]	; (800c988 <UTIL_SEQ_Run+0x1f0>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	4a30      	ldr	r2, [pc, #192]	; (800c98c <UTIL_SEQ_Run+0x1f4>)
 800c8ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8ce:	4798      	blx	r3

    local_taskset = TaskSet;
 800c8d0:	4b28      	ldr	r3, [pc, #160]	; (800c974 <UTIL_SEQ_Run+0x1dc>)
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800c8d6:	4b28      	ldr	r3, [pc, #160]	; (800c978 <UTIL_SEQ_Run+0x1e0>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800c8dc:	4b27      	ldr	r3, [pc, #156]	; (800c97c <UTIL_SEQ_Run+0x1e4>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800c8e2:	4b27      	ldr	r3, [pc, #156]	; (800c980 <UTIL_SEQ_Run+0x1e8>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c8e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ec:	401a      	ands	r2, r3
 800c8ee:	4b20      	ldr	r3, [pc, #128]	; (800c970 <UTIL_SEQ_Run+0x1d8>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	4013      	ands	r3, r2
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d005      	beq.n	800c904 <UTIL_SEQ_Run+0x16c>
 800c8f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8fc:	4013      	ands	r3, r2
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	f43f af64 	beq.w	800c7cc <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800c904:	4b20      	ldr	r3, [pc, #128]	; (800c988 <UTIL_SEQ_Run+0x1f0>)
 800c906:	f04f 32ff 	mov.w	r2, #4294967295
 800c90a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800c90c:	f000 f938 	bl	800cb80 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c910:	f3ef 8310 	mrs	r3, PRIMASK
 800c914:	613b      	str	r3, [r7, #16]
  return(result);
 800c916:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800c918:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c91a:	b672      	cpsid	i
}
 800c91c:	bf00      	nop
  local_taskset = TaskSet;
 800c91e:	4b15      	ldr	r3, [pc, #84]	; (800c974 <UTIL_SEQ_Run+0x1dc>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800c924:	4b14      	ldr	r3, [pc, #80]	; (800c978 <UTIL_SEQ_Run+0x1e0>)
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800c92a:	4b14      	ldr	r3, [pc, #80]	; (800c97c <UTIL_SEQ_Run+0x1e4>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800c930:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c934:	401a      	ands	r2, r3
 800c936:	4b0e      	ldr	r3, [pc, #56]	; (800c970 <UTIL_SEQ_Run+0x1d8>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	4013      	ands	r3, r2
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d107      	bne.n	800c950 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800c940:	4b0f      	ldr	r3, [pc, #60]	; (800c980 <UTIL_SEQ_Run+0x1e8>)
 800c942:	681a      	ldr	r2, [r3, #0]
 800c944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c946:	4013      	ands	r3, r2
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d101      	bne.n	800c950 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800c94c:	f7f4 fcbe 	bl	80012cc <UTIL_SEQ_Idle>
 800c950:	69fb      	ldr	r3, [r7, #28]
 800c952:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	f383 8810 	msr	PRIMASK, r3
}
 800c95a:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800c95c:	f000 f917 	bl	800cb8e <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800c960:	4a03      	ldr	r2, [pc, #12]	; (800c970 <UTIL_SEQ_Run+0x1d8>)
 800c962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c964:	6013      	str	r3, [r2, #0]

  return;
 800c966:	bf00      	nop
}
 800c968:	3740      	adds	r7, #64	; 0x40
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}
 800c96e:	bf00      	nop
 800c970:	2000004c 	.word	0x2000004c
 800c974:	200016a8 	.word	0x200016a8
 800c978:	200016ac 	.word	0x200016ac
 800c97c:	20000048 	.word	0x20000048
 800c980:	200016b0 	.word	0x200016b0
 800c984:	20001738 	.word	0x20001738
 800c988:	200016b4 	.word	0x200016b4
 800c98c:	200016b8 	.word	0x200016b8

0800c990 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b088      	sub	sp, #32
 800c994:	af00      	add	r7, sp, #0
 800c996:	60f8      	str	r0, [r7, #12]
 800c998:	60b9      	str	r1, [r7, #8]
 800c99a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c99c:	f3ef 8310 	mrs	r3, PRIMASK
 800c9a0:	617b      	str	r3, [r7, #20]
  return(result);
 800c9a2:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800c9a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c9a6:	b672      	cpsid	i
}
 800c9a8:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800c9aa:	68f8      	ldr	r0, [r7, #12]
 800c9ac:	f000 f8f6 	bl	800cb9c <SEQ_BitPosition>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	4619      	mov	r1, r3
 800c9b4:	4a06      	ldr	r2, [pc, #24]	; (800c9d0 <UTIL_SEQ_RegTask+0x40>)
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c9bc:	69fb      	ldr	r3, [r7, #28]
 800c9be:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9c0:	69bb      	ldr	r3, [r7, #24]
 800c9c2:	f383 8810 	msr	PRIMASK, r3
}
 800c9c6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800c9c8:	bf00      	nop
}
 800c9ca:	3720      	adds	r7, #32
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}
 800c9d0:	200016b8 	.word	0x200016b8

0800c9d4 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800c9d4:	b480      	push	{r7}
 800c9d6:	b087      	sub	sp, #28
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
 800c9dc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c9de:	f3ef 8310 	mrs	r3, PRIMASK
 800c9e2:	60fb      	str	r3, [r7, #12]
  return(result);
 800c9e4:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c9e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c9e8:	b672      	cpsid	i
}
 800c9ea:	bf00      	nop

  TaskSet |= TaskId_bm;
 800c9ec:	4b0d      	ldr	r3, [pc, #52]	; (800ca24 <UTIL_SEQ_SetTask+0x50>)
 800c9ee:	681a      	ldr	r2, [r3, #0]
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	4313      	orrs	r3, r2
 800c9f4:	4a0b      	ldr	r2, [pc, #44]	; (800ca24 <UTIL_SEQ_SetTask+0x50>)
 800c9f6:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800c9f8:	4a0b      	ldr	r2, [pc, #44]	; (800ca28 <UTIL_SEQ_SetTask+0x54>)
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	431a      	orrs	r2, r3
 800ca04:	4908      	ldr	r1, [pc, #32]	; (800ca28 <UTIL_SEQ_SetTask+0x54>)
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca10:	693b      	ldr	r3, [r7, #16]
 800ca12:	f383 8810 	msr	PRIMASK, r3
}
 800ca16:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ca18:	bf00      	nop
}
 800ca1a:	371c      	adds	r7, #28
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca22:	4770      	bx	lr
 800ca24:	200016a8 	.word	0x200016a8
 800ca28:	20001738 	.word	0x20001738

0800ca2c <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	b087      	sub	sp, #28
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca34:	f3ef 8310 	mrs	r3, PRIMASK
 800ca38:	60fb      	str	r3, [r7, #12]
  return(result);
 800ca3a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ca3c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ca3e:	b672      	cpsid	i
}
 800ca40:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	43da      	mvns	r2, r3
 800ca46:	4b08      	ldr	r3, [pc, #32]	; (800ca68 <UTIL_SEQ_PauseTask+0x3c>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	4013      	ands	r3, r2
 800ca4c:	4a06      	ldr	r2, [pc, #24]	; (800ca68 <UTIL_SEQ_PauseTask+0x3c>)
 800ca4e:	6013      	str	r3, [r2, #0]
 800ca50:	697b      	ldr	r3, [r7, #20]
 800ca52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca54:	693b      	ldr	r3, [r7, #16]
 800ca56:	f383 8810 	msr	PRIMASK, r3
}
 800ca5a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ca5c:	bf00      	nop
}
 800ca5e:	371c      	adds	r7, #28
 800ca60:	46bd      	mov	sp, r7
 800ca62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca66:	4770      	bx	lr
 800ca68:	20000048 	.word	0x20000048

0800ca6c <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800ca6c:	b480      	push	{r7}
 800ca6e:	b087      	sub	sp, #28
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca74:	f3ef 8310 	mrs	r3, PRIMASK
 800ca78:	60fb      	str	r3, [r7, #12]
  return(result);
 800ca7a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ca7c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ca7e:	b672      	cpsid	i
}
 800ca80:	bf00      	nop

  TaskMask |= TaskId_bm;
 800ca82:	4b09      	ldr	r3, [pc, #36]	; (800caa8 <UTIL_SEQ_ResumeTask+0x3c>)
 800ca84:	681a      	ldr	r2, [r3, #0]
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	4313      	orrs	r3, r2
 800ca8a:	4a07      	ldr	r2, [pc, #28]	; (800caa8 <UTIL_SEQ_ResumeTask+0x3c>)
 800ca8c:	6013      	str	r3, [r2, #0]
 800ca8e:	697b      	ldr	r3, [r7, #20]
 800ca90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca92:	693b      	ldr	r3, [r7, #16]
 800ca94:	f383 8810 	msr	PRIMASK, r3
}
 800ca98:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ca9a:	bf00      	nop
}
 800ca9c:	371c      	adds	r7, #28
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa4:	4770      	bx	lr
 800caa6:	bf00      	nop
 800caa8:	20000048 	.word	0x20000048

0800caac <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800caac:	b480      	push	{r7}
 800caae:	b087      	sub	sp, #28
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cab4:	f3ef 8310 	mrs	r3, PRIMASK
 800cab8:	60fb      	str	r3, [r7, #12]
  return(result);
 800caba:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800cabc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cabe:	b672      	cpsid	i
}
 800cac0:	bf00      	nop

  EvtSet |= EvtId_bm;
 800cac2:	4b09      	ldr	r3, [pc, #36]	; (800cae8 <UTIL_SEQ_SetEvt+0x3c>)
 800cac4:	681a      	ldr	r2, [r3, #0]
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	4313      	orrs	r3, r2
 800caca:	4a07      	ldr	r2, [pc, #28]	; (800cae8 <UTIL_SEQ_SetEvt+0x3c>)
 800cacc:	6013      	str	r3, [r2, #0]
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cad2:	693b      	ldr	r3, [r7, #16]
 800cad4:	f383 8810 	msr	PRIMASK, r3
}
 800cad8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800cada:	bf00      	nop
}
 800cadc:	371c      	adds	r7, #28
 800cade:	46bd      	mov	sp, r7
 800cae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae4:	4770      	bx	lr
 800cae6:	bf00      	nop
 800cae8:	200016ac 	.word	0x200016ac

0800caec <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b088      	sub	sp, #32
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800caf4:	4b1f      	ldr	r3, [pc, #124]	; (800cb74 <UTIL_SEQ_WaitEvt+0x88>)
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800cafa:	4b1e      	ldr	r3, [pc, #120]	; (800cb74 <UTIL_SEQ_WaitEvt+0x88>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb02:	d102      	bne.n	800cb0a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800cb04:	2300      	movs	r3, #0
 800cb06:	61fb      	str	r3, [r7, #28]
 800cb08:	e005      	b.n	800cb16 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800cb0a:	4b1a      	ldr	r3, [pc, #104]	; (800cb74 <UTIL_SEQ_WaitEvt+0x88>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	2201      	movs	r2, #1
 800cb10:	fa02 f303 	lsl.w	r3, r2, r3
 800cb14:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800cb16:	4b18      	ldr	r3, [pc, #96]	; (800cb78 <UTIL_SEQ_WaitEvt+0x8c>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800cb1c:	4a16      	ldr	r2, [pc, #88]	; (800cb78 <UTIL_SEQ_WaitEvt+0x8c>)
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800cb22:	e003      	b.n	800cb2c <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800cb24:	6879      	ldr	r1, [r7, #4]
 800cb26:	69f8      	ldr	r0, [r7, #28]
 800cb28:	f7f4 fbd7 	bl	80012da <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800cb2c:	4b13      	ldr	r3, [pc, #76]	; (800cb7c <UTIL_SEQ_WaitEvt+0x90>)
 800cb2e:	681a      	ldr	r2, [r3, #0]
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	4013      	ands	r3, r2
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d0f5      	beq.n	800cb24 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800cb38:	4a0e      	ldr	r2, [pc, #56]	; (800cb74 <UTIL_SEQ_WaitEvt+0x88>)
 800cb3a:	69bb      	ldr	r3, [r7, #24]
 800cb3c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb3e:	f3ef 8310 	mrs	r3, PRIMASK
 800cb42:	60bb      	str	r3, [r7, #8]
  return(result);
 800cb44:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800cb46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800cb48:	b672      	cpsid	i
}
 800cb4a:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	43da      	mvns	r2, r3
 800cb50:	4b0a      	ldr	r3, [pc, #40]	; (800cb7c <UTIL_SEQ_WaitEvt+0x90>)
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	4013      	ands	r3, r2
 800cb56:	4a09      	ldr	r2, [pc, #36]	; (800cb7c <UTIL_SEQ_WaitEvt+0x90>)
 800cb58:	6013      	str	r3, [r2, #0]
 800cb5a:	693b      	ldr	r3, [r7, #16]
 800cb5c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	f383 8810 	msr	PRIMASK, r3
}
 800cb64:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800cb66:	4a04      	ldr	r2, [pc, #16]	; (800cb78 <UTIL_SEQ_WaitEvt+0x8c>)
 800cb68:	697b      	ldr	r3, [r7, #20]
 800cb6a:	6013      	str	r3, [r2, #0]
  return;
 800cb6c:	bf00      	nop
}
 800cb6e:	3720      	adds	r7, #32
 800cb70:	46bd      	mov	sp, r7
 800cb72:	bd80      	pop	{r7, pc}
 800cb74:	200016b4 	.word	0x200016b4
 800cb78:	200016b0 	.word	0x200016b0
 800cb7c:	200016ac 	.word	0x200016ac

0800cb80 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800cb80:	b480      	push	{r7}
 800cb82:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800cb84:	bf00      	nop
}
 800cb86:	46bd      	mov	sp, r7
 800cb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8c:	4770      	bx	lr

0800cb8e <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800cb8e:	b480      	push	{r7}
 800cb90:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800cb92:	bf00      	nop
}
 800cb94:	46bd      	mov	sp, r7
 800cb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9a:	4770      	bx	lr

0800cb9c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800cb9c:	b480      	push	{r7}
 800cb9e:	b085      	sub	sp, #20
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800cba4:	2300      	movs	r3, #0
 800cba6:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	0c1b      	lsrs	r3, r3, #16
 800cbb0:	041b      	lsls	r3, r3, #16
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d104      	bne.n	800cbc0 <SEQ_BitPosition+0x24>
 800cbb6:	2310      	movs	r3, #16
 800cbb8:	73fb      	strb	r3, [r7, #15]
 800cbba:	68bb      	ldr	r3, [r7, #8]
 800cbbc:	041b      	lsls	r3, r3, #16
 800cbbe:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d105      	bne.n	800cbd6 <SEQ_BitPosition+0x3a>
 800cbca:	7bfb      	ldrb	r3, [r7, #15]
 800cbcc:	3308      	adds	r3, #8
 800cbce:	73fb      	strb	r3, [r7, #15]
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	021b      	lsls	r3, r3, #8
 800cbd4:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d105      	bne.n	800cbec <SEQ_BitPosition+0x50>
 800cbe0:	7bfb      	ldrb	r3, [r7, #15]
 800cbe2:	3304      	adds	r3, #4
 800cbe4:	73fb      	strb	r3, [r7, #15]
 800cbe6:	68bb      	ldr	r3, [r7, #8]
 800cbe8:	011b      	lsls	r3, r3, #4
 800cbea:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	0f1b      	lsrs	r3, r3, #28
 800cbf0:	4a07      	ldr	r2, [pc, #28]	; (800cc10 <SEQ_BitPosition+0x74>)
 800cbf2:	5cd2      	ldrb	r2, [r2, r3]
 800cbf4:	7bfb      	ldrb	r3, [r7, #15]
 800cbf6:	4413      	add	r3, r2
 800cbf8:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800cbfa:	7bfb      	ldrb	r3, [r7, #15]
 800cbfc:	f1c3 031f 	rsb	r3, r3, #31
 800cc00:	b2db      	uxtb	r3, r3
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	3714      	adds	r7, #20
 800cc06:	46bd      	mov	sp, r7
 800cc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0c:	4770      	bx	lr
 800cc0e:	bf00      	nop
 800cc10:	0800f4cc 	.word	0x0800f4cc

0800cc14 <std>:
 800cc14:	2300      	movs	r3, #0
 800cc16:	b510      	push	{r4, lr}
 800cc18:	4604      	mov	r4, r0
 800cc1a:	e9c0 3300 	strd	r3, r3, [r0]
 800cc1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc22:	6083      	str	r3, [r0, #8]
 800cc24:	8181      	strh	r1, [r0, #12]
 800cc26:	6643      	str	r3, [r0, #100]	; 0x64
 800cc28:	81c2      	strh	r2, [r0, #14]
 800cc2a:	6183      	str	r3, [r0, #24]
 800cc2c:	4619      	mov	r1, r3
 800cc2e:	2208      	movs	r2, #8
 800cc30:	305c      	adds	r0, #92	; 0x5c
 800cc32:	f000 fa33 	bl	800d09c <memset>
 800cc36:	4b0d      	ldr	r3, [pc, #52]	; (800cc6c <std+0x58>)
 800cc38:	6263      	str	r3, [r4, #36]	; 0x24
 800cc3a:	4b0d      	ldr	r3, [pc, #52]	; (800cc70 <std+0x5c>)
 800cc3c:	62a3      	str	r3, [r4, #40]	; 0x28
 800cc3e:	4b0d      	ldr	r3, [pc, #52]	; (800cc74 <std+0x60>)
 800cc40:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cc42:	4b0d      	ldr	r3, [pc, #52]	; (800cc78 <std+0x64>)
 800cc44:	6323      	str	r3, [r4, #48]	; 0x30
 800cc46:	4b0d      	ldr	r3, [pc, #52]	; (800cc7c <std+0x68>)
 800cc48:	6224      	str	r4, [r4, #32]
 800cc4a:	429c      	cmp	r4, r3
 800cc4c:	d006      	beq.n	800cc5c <std+0x48>
 800cc4e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800cc52:	4294      	cmp	r4, r2
 800cc54:	d002      	beq.n	800cc5c <std+0x48>
 800cc56:	33d0      	adds	r3, #208	; 0xd0
 800cc58:	429c      	cmp	r4, r3
 800cc5a:	d105      	bne.n	800cc68 <std+0x54>
 800cc5c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cc60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc64:	f000 ba92 	b.w	800d18c <__retarget_lock_init_recursive>
 800cc68:	bd10      	pop	{r4, pc}
 800cc6a:	bf00      	nop
 800cc6c:	0800ceed 	.word	0x0800ceed
 800cc70:	0800cf0f 	.word	0x0800cf0f
 800cc74:	0800cf47 	.word	0x0800cf47
 800cc78:	0800cf6b 	.word	0x0800cf6b
 800cc7c:	20001748 	.word	0x20001748

0800cc80 <stdio_exit_handler>:
 800cc80:	4a02      	ldr	r2, [pc, #8]	; (800cc8c <stdio_exit_handler+0xc>)
 800cc82:	4903      	ldr	r1, [pc, #12]	; (800cc90 <stdio_exit_handler+0x10>)
 800cc84:	4803      	ldr	r0, [pc, #12]	; (800cc94 <stdio_exit_handler+0x14>)
 800cc86:	f000 b869 	b.w	800cd5c <_fwalk_sglue>
 800cc8a:	bf00      	nop
 800cc8c:	20000050 	.word	0x20000050
 800cc90:	0800dd05 	.word	0x0800dd05
 800cc94:	2000005c 	.word	0x2000005c

0800cc98 <cleanup_stdio>:
 800cc98:	6841      	ldr	r1, [r0, #4]
 800cc9a:	4b0c      	ldr	r3, [pc, #48]	; (800cccc <cleanup_stdio+0x34>)
 800cc9c:	4299      	cmp	r1, r3
 800cc9e:	b510      	push	{r4, lr}
 800cca0:	4604      	mov	r4, r0
 800cca2:	d001      	beq.n	800cca8 <cleanup_stdio+0x10>
 800cca4:	f001 f82e 	bl	800dd04 <_fflush_r>
 800cca8:	68a1      	ldr	r1, [r4, #8]
 800ccaa:	4b09      	ldr	r3, [pc, #36]	; (800ccd0 <cleanup_stdio+0x38>)
 800ccac:	4299      	cmp	r1, r3
 800ccae:	d002      	beq.n	800ccb6 <cleanup_stdio+0x1e>
 800ccb0:	4620      	mov	r0, r4
 800ccb2:	f001 f827 	bl	800dd04 <_fflush_r>
 800ccb6:	68e1      	ldr	r1, [r4, #12]
 800ccb8:	4b06      	ldr	r3, [pc, #24]	; (800ccd4 <cleanup_stdio+0x3c>)
 800ccba:	4299      	cmp	r1, r3
 800ccbc:	d004      	beq.n	800ccc8 <cleanup_stdio+0x30>
 800ccbe:	4620      	mov	r0, r4
 800ccc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccc4:	f001 b81e 	b.w	800dd04 <_fflush_r>
 800ccc8:	bd10      	pop	{r4, pc}
 800ccca:	bf00      	nop
 800cccc:	20001748 	.word	0x20001748
 800ccd0:	200017b0 	.word	0x200017b0
 800ccd4:	20001818 	.word	0x20001818

0800ccd8 <global_stdio_init.part.0>:
 800ccd8:	b510      	push	{r4, lr}
 800ccda:	4b0b      	ldr	r3, [pc, #44]	; (800cd08 <global_stdio_init.part.0+0x30>)
 800ccdc:	4c0b      	ldr	r4, [pc, #44]	; (800cd0c <global_stdio_init.part.0+0x34>)
 800ccde:	4a0c      	ldr	r2, [pc, #48]	; (800cd10 <global_stdio_init.part.0+0x38>)
 800cce0:	601a      	str	r2, [r3, #0]
 800cce2:	4620      	mov	r0, r4
 800cce4:	2200      	movs	r2, #0
 800cce6:	2104      	movs	r1, #4
 800cce8:	f7ff ff94 	bl	800cc14 <std>
 800ccec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ccf0:	2201      	movs	r2, #1
 800ccf2:	2109      	movs	r1, #9
 800ccf4:	f7ff ff8e 	bl	800cc14 <std>
 800ccf8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ccfc:	2202      	movs	r2, #2
 800ccfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd02:	2112      	movs	r1, #18
 800cd04:	f7ff bf86 	b.w	800cc14 <std>
 800cd08:	20001880 	.word	0x20001880
 800cd0c:	20001748 	.word	0x20001748
 800cd10:	0800cc81 	.word	0x0800cc81

0800cd14 <__sfp_lock_acquire>:
 800cd14:	4801      	ldr	r0, [pc, #4]	; (800cd1c <__sfp_lock_acquire+0x8>)
 800cd16:	f000 ba3a 	b.w	800d18e <__retarget_lock_acquire_recursive>
 800cd1a:	bf00      	nop
 800cd1c:	20001889 	.word	0x20001889

0800cd20 <__sfp_lock_release>:
 800cd20:	4801      	ldr	r0, [pc, #4]	; (800cd28 <__sfp_lock_release+0x8>)
 800cd22:	f000 ba35 	b.w	800d190 <__retarget_lock_release_recursive>
 800cd26:	bf00      	nop
 800cd28:	20001889 	.word	0x20001889

0800cd2c <__sinit>:
 800cd2c:	b510      	push	{r4, lr}
 800cd2e:	4604      	mov	r4, r0
 800cd30:	f7ff fff0 	bl	800cd14 <__sfp_lock_acquire>
 800cd34:	6a23      	ldr	r3, [r4, #32]
 800cd36:	b11b      	cbz	r3, 800cd40 <__sinit+0x14>
 800cd38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd3c:	f7ff bff0 	b.w	800cd20 <__sfp_lock_release>
 800cd40:	4b04      	ldr	r3, [pc, #16]	; (800cd54 <__sinit+0x28>)
 800cd42:	6223      	str	r3, [r4, #32]
 800cd44:	4b04      	ldr	r3, [pc, #16]	; (800cd58 <__sinit+0x2c>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d1f5      	bne.n	800cd38 <__sinit+0xc>
 800cd4c:	f7ff ffc4 	bl	800ccd8 <global_stdio_init.part.0>
 800cd50:	e7f2      	b.n	800cd38 <__sinit+0xc>
 800cd52:	bf00      	nop
 800cd54:	0800cc99 	.word	0x0800cc99
 800cd58:	20001880 	.word	0x20001880

0800cd5c <_fwalk_sglue>:
 800cd5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd60:	4607      	mov	r7, r0
 800cd62:	4688      	mov	r8, r1
 800cd64:	4614      	mov	r4, r2
 800cd66:	2600      	movs	r6, #0
 800cd68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cd6c:	f1b9 0901 	subs.w	r9, r9, #1
 800cd70:	d505      	bpl.n	800cd7e <_fwalk_sglue+0x22>
 800cd72:	6824      	ldr	r4, [r4, #0]
 800cd74:	2c00      	cmp	r4, #0
 800cd76:	d1f7      	bne.n	800cd68 <_fwalk_sglue+0xc>
 800cd78:	4630      	mov	r0, r6
 800cd7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd7e:	89ab      	ldrh	r3, [r5, #12]
 800cd80:	2b01      	cmp	r3, #1
 800cd82:	d907      	bls.n	800cd94 <_fwalk_sglue+0x38>
 800cd84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cd88:	3301      	adds	r3, #1
 800cd8a:	d003      	beq.n	800cd94 <_fwalk_sglue+0x38>
 800cd8c:	4629      	mov	r1, r5
 800cd8e:	4638      	mov	r0, r7
 800cd90:	47c0      	blx	r8
 800cd92:	4306      	orrs	r6, r0
 800cd94:	3568      	adds	r5, #104	; 0x68
 800cd96:	e7e9      	b.n	800cd6c <_fwalk_sglue+0x10>

0800cd98 <iprintf>:
 800cd98:	b40f      	push	{r0, r1, r2, r3}
 800cd9a:	b507      	push	{r0, r1, r2, lr}
 800cd9c:	4906      	ldr	r1, [pc, #24]	; (800cdb8 <iprintf+0x20>)
 800cd9e:	ab04      	add	r3, sp, #16
 800cda0:	6808      	ldr	r0, [r1, #0]
 800cda2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cda6:	6881      	ldr	r1, [r0, #8]
 800cda8:	9301      	str	r3, [sp, #4]
 800cdaa:	f000 fc7b 	bl	800d6a4 <_vfiprintf_r>
 800cdae:	b003      	add	sp, #12
 800cdb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cdb4:	b004      	add	sp, #16
 800cdb6:	4770      	bx	lr
 800cdb8:	200000a8 	.word	0x200000a8

0800cdbc <putchar>:
 800cdbc:	4b02      	ldr	r3, [pc, #8]	; (800cdc8 <putchar+0xc>)
 800cdbe:	4601      	mov	r1, r0
 800cdc0:	6818      	ldr	r0, [r3, #0]
 800cdc2:	6882      	ldr	r2, [r0, #8]
 800cdc4:	f001 b828 	b.w	800de18 <_putc_r>
 800cdc8:	200000a8 	.word	0x200000a8

0800cdcc <_puts_r>:
 800cdcc:	6a03      	ldr	r3, [r0, #32]
 800cdce:	b570      	push	{r4, r5, r6, lr}
 800cdd0:	6884      	ldr	r4, [r0, #8]
 800cdd2:	4605      	mov	r5, r0
 800cdd4:	460e      	mov	r6, r1
 800cdd6:	b90b      	cbnz	r3, 800cddc <_puts_r+0x10>
 800cdd8:	f7ff ffa8 	bl	800cd2c <__sinit>
 800cddc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cdde:	07db      	lsls	r3, r3, #31
 800cde0:	d405      	bmi.n	800cdee <_puts_r+0x22>
 800cde2:	89a3      	ldrh	r3, [r4, #12]
 800cde4:	0598      	lsls	r0, r3, #22
 800cde6:	d402      	bmi.n	800cdee <_puts_r+0x22>
 800cde8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdea:	f000 f9d0 	bl	800d18e <__retarget_lock_acquire_recursive>
 800cdee:	89a3      	ldrh	r3, [r4, #12]
 800cdf0:	0719      	lsls	r1, r3, #28
 800cdf2:	d513      	bpl.n	800ce1c <_puts_r+0x50>
 800cdf4:	6923      	ldr	r3, [r4, #16]
 800cdf6:	b18b      	cbz	r3, 800ce1c <_puts_r+0x50>
 800cdf8:	3e01      	subs	r6, #1
 800cdfa:	68a3      	ldr	r3, [r4, #8]
 800cdfc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ce00:	3b01      	subs	r3, #1
 800ce02:	60a3      	str	r3, [r4, #8]
 800ce04:	b9e9      	cbnz	r1, 800ce42 <_puts_r+0x76>
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	da2e      	bge.n	800ce68 <_puts_r+0x9c>
 800ce0a:	4622      	mov	r2, r4
 800ce0c:	210a      	movs	r1, #10
 800ce0e:	4628      	mov	r0, r5
 800ce10:	f000 f8af 	bl	800cf72 <__swbuf_r>
 800ce14:	3001      	adds	r0, #1
 800ce16:	d007      	beq.n	800ce28 <_puts_r+0x5c>
 800ce18:	250a      	movs	r5, #10
 800ce1a:	e007      	b.n	800ce2c <_puts_r+0x60>
 800ce1c:	4621      	mov	r1, r4
 800ce1e:	4628      	mov	r0, r5
 800ce20:	f000 f8e4 	bl	800cfec <__swsetup_r>
 800ce24:	2800      	cmp	r0, #0
 800ce26:	d0e7      	beq.n	800cdf8 <_puts_r+0x2c>
 800ce28:	f04f 35ff 	mov.w	r5, #4294967295
 800ce2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ce2e:	07da      	lsls	r2, r3, #31
 800ce30:	d405      	bmi.n	800ce3e <_puts_r+0x72>
 800ce32:	89a3      	ldrh	r3, [r4, #12]
 800ce34:	059b      	lsls	r3, r3, #22
 800ce36:	d402      	bmi.n	800ce3e <_puts_r+0x72>
 800ce38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce3a:	f000 f9a9 	bl	800d190 <__retarget_lock_release_recursive>
 800ce3e:	4628      	mov	r0, r5
 800ce40:	bd70      	pop	{r4, r5, r6, pc}
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	da04      	bge.n	800ce50 <_puts_r+0x84>
 800ce46:	69a2      	ldr	r2, [r4, #24]
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	dc06      	bgt.n	800ce5a <_puts_r+0x8e>
 800ce4c:	290a      	cmp	r1, #10
 800ce4e:	d004      	beq.n	800ce5a <_puts_r+0x8e>
 800ce50:	6823      	ldr	r3, [r4, #0]
 800ce52:	1c5a      	adds	r2, r3, #1
 800ce54:	6022      	str	r2, [r4, #0]
 800ce56:	7019      	strb	r1, [r3, #0]
 800ce58:	e7cf      	b.n	800cdfa <_puts_r+0x2e>
 800ce5a:	4622      	mov	r2, r4
 800ce5c:	4628      	mov	r0, r5
 800ce5e:	f000 f888 	bl	800cf72 <__swbuf_r>
 800ce62:	3001      	adds	r0, #1
 800ce64:	d1c9      	bne.n	800cdfa <_puts_r+0x2e>
 800ce66:	e7df      	b.n	800ce28 <_puts_r+0x5c>
 800ce68:	6823      	ldr	r3, [r4, #0]
 800ce6a:	250a      	movs	r5, #10
 800ce6c:	1c5a      	adds	r2, r3, #1
 800ce6e:	6022      	str	r2, [r4, #0]
 800ce70:	701d      	strb	r5, [r3, #0]
 800ce72:	e7db      	b.n	800ce2c <_puts_r+0x60>

0800ce74 <puts>:
 800ce74:	4b02      	ldr	r3, [pc, #8]	; (800ce80 <puts+0xc>)
 800ce76:	4601      	mov	r1, r0
 800ce78:	6818      	ldr	r0, [r3, #0]
 800ce7a:	f7ff bfa7 	b.w	800cdcc <_puts_r>
 800ce7e:	bf00      	nop
 800ce80:	200000a8 	.word	0x200000a8

0800ce84 <sniprintf>:
 800ce84:	b40c      	push	{r2, r3}
 800ce86:	b530      	push	{r4, r5, lr}
 800ce88:	4b17      	ldr	r3, [pc, #92]	; (800cee8 <sniprintf+0x64>)
 800ce8a:	1e0c      	subs	r4, r1, #0
 800ce8c:	681d      	ldr	r5, [r3, #0]
 800ce8e:	b09d      	sub	sp, #116	; 0x74
 800ce90:	da08      	bge.n	800cea4 <sniprintf+0x20>
 800ce92:	238b      	movs	r3, #139	; 0x8b
 800ce94:	602b      	str	r3, [r5, #0]
 800ce96:	f04f 30ff 	mov.w	r0, #4294967295
 800ce9a:	b01d      	add	sp, #116	; 0x74
 800ce9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cea0:	b002      	add	sp, #8
 800cea2:	4770      	bx	lr
 800cea4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cea8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ceac:	bf14      	ite	ne
 800ceae:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ceb2:	4623      	moveq	r3, r4
 800ceb4:	9304      	str	r3, [sp, #16]
 800ceb6:	9307      	str	r3, [sp, #28]
 800ceb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cebc:	9002      	str	r0, [sp, #8]
 800cebe:	9006      	str	r0, [sp, #24]
 800cec0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cec4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cec6:	ab21      	add	r3, sp, #132	; 0x84
 800cec8:	a902      	add	r1, sp, #8
 800ceca:	4628      	mov	r0, r5
 800cecc:	9301      	str	r3, [sp, #4]
 800cece:	f000 fac1 	bl	800d454 <_svfiprintf_r>
 800ced2:	1c43      	adds	r3, r0, #1
 800ced4:	bfbc      	itt	lt
 800ced6:	238b      	movlt	r3, #139	; 0x8b
 800ced8:	602b      	strlt	r3, [r5, #0]
 800ceda:	2c00      	cmp	r4, #0
 800cedc:	d0dd      	beq.n	800ce9a <sniprintf+0x16>
 800cede:	9b02      	ldr	r3, [sp, #8]
 800cee0:	2200      	movs	r2, #0
 800cee2:	701a      	strb	r2, [r3, #0]
 800cee4:	e7d9      	b.n	800ce9a <sniprintf+0x16>
 800cee6:	bf00      	nop
 800cee8:	200000a8 	.word	0x200000a8

0800ceec <__sread>:
 800ceec:	b510      	push	{r4, lr}
 800ceee:	460c      	mov	r4, r1
 800cef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cef4:	f000 f8fc 	bl	800d0f0 <_read_r>
 800cef8:	2800      	cmp	r0, #0
 800cefa:	bfab      	itete	ge
 800cefc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cefe:	89a3      	ldrhlt	r3, [r4, #12]
 800cf00:	181b      	addge	r3, r3, r0
 800cf02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cf06:	bfac      	ite	ge
 800cf08:	6563      	strge	r3, [r4, #84]	; 0x54
 800cf0a:	81a3      	strhlt	r3, [r4, #12]
 800cf0c:	bd10      	pop	{r4, pc}

0800cf0e <__swrite>:
 800cf0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf12:	461f      	mov	r7, r3
 800cf14:	898b      	ldrh	r3, [r1, #12]
 800cf16:	05db      	lsls	r3, r3, #23
 800cf18:	4605      	mov	r5, r0
 800cf1a:	460c      	mov	r4, r1
 800cf1c:	4616      	mov	r6, r2
 800cf1e:	d505      	bpl.n	800cf2c <__swrite+0x1e>
 800cf20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf24:	2302      	movs	r3, #2
 800cf26:	2200      	movs	r2, #0
 800cf28:	f000 f8d0 	bl	800d0cc <_lseek_r>
 800cf2c:	89a3      	ldrh	r3, [r4, #12]
 800cf2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cf36:	81a3      	strh	r3, [r4, #12]
 800cf38:	4632      	mov	r2, r6
 800cf3a:	463b      	mov	r3, r7
 800cf3c:	4628      	mov	r0, r5
 800cf3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf42:	f000 b8e7 	b.w	800d114 <_write_r>

0800cf46 <__sseek>:
 800cf46:	b510      	push	{r4, lr}
 800cf48:	460c      	mov	r4, r1
 800cf4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf4e:	f000 f8bd 	bl	800d0cc <_lseek_r>
 800cf52:	1c43      	adds	r3, r0, #1
 800cf54:	89a3      	ldrh	r3, [r4, #12]
 800cf56:	bf15      	itete	ne
 800cf58:	6560      	strne	r0, [r4, #84]	; 0x54
 800cf5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cf5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cf62:	81a3      	strheq	r3, [r4, #12]
 800cf64:	bf18      	it	ne
 800cf66:	81a3      	strhne	r3, [r4, #12]
 800cf68:	bd10      	pop	{r4, pc}

0800cf6a <__sclose>:
 800cf6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf6e:	f000 b89d 	b.w	800d0ac <_close_r>

0800cf72 <__swbuf_r>:
 800cf72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf74:	460e      	mov	r6, r1
 800cf76:	4614      	mov	r4, r2
 800cf78:	4605      	mov	r5, r0
 800cf7a:	b118      	cbz	r0, 800cf84 <__swbuf_r+0x12>
 800cf7c:	6a03      	ldr	r3, [r0, #32]
 800cf7e:	b90b      	cbnz	r3, 800cf84 <__swbuf_r+0x12>
 800cf80:	f7ff fed4 	bl	800cd2c <__sinit>
 800cf84:	69a3      	ldr	r3, [r4, #24]
 800cf86:	60a3      	str	r3, [r4, #8]
 800cf88:	89a3      	ldrh	r3, [r4, #12]
 800cf8a:	071a      	lsls	r2, r3, #28
 800cf8c:	d525      	bpl.n	800cfda <__swbuf_r+0x68>
 800cf8e:	6923      	ldr	r3, [r4, #16]
 800cf90:	b31b      	cbz	r3, 800cfda <__swbuf_r+0x68>
 800cf92:	6823      	ldr	r3, [r4, #0]
 800cf94:	6922      	ldr	r2, [r4, #16]
 800cf96:	1a98      	subs	r0, r3, r2
 800cf98:	6963      	ldr	r3, [r4, #20]
 800cf9a:	b2f6      	uxtb	r6, r6
 800cf9c:	4283      	cmp	r3, r0
 800cf9e:	4637      	mov	r7, r6
 800cfa0:	dc04      	bgt.n	800cfac <__swbuf_r+0x3a>
 800cfa2:	4621      	mov	r1, r4
 800cfa4:	4628      	mov	r0, r5
 800cfa6:	f000 fead 	bl	800dd04 <_fflush_r>
 800cfaa:	b9e0      	cbnz	r0, 800cfe6 <__swbuf_r+0x74>
 800cfac:	68a3      	ldr	r3, [r4, #8]
 800cfae:	3b01      	subs	r3, #1
 800cfb0:	60a3      	str	r3, [r4, #8]
 800cfb2:	6823      	ldr	r3, [r4, #0]
 800cfb4:	1c5a      	adds	r2, r3, #1
 800cfb6:	6022      	str	r2, [r4, #0]
 800cfb8:	701e      	strb	r6, [r3, #0]
 800cfba:	6962      	ldr	r2, [r4, #20]
 800cfbc:	1c43      	adds	r3, r0, #1
 800cfbe:	429a      	cmp	r2, r3
 800cfc0:	d004      	beq.n	800cfcc <__swbuf_r+0x5a>
 800cfc2:	89a3      	ldrh	r3, [r4, #12]
 800cfc4:	07db      	lsls	r3, r3, #31
 800cfc6:	d506      	bpl.n	800cfd6 <__swbuf_r+0x64>
 800cfc8:	2e0a      	cmp	r6, #10
 800cfca:	d104      	bne.n	800cfd6 <__swbuf_r+0x64>
 800cfcc:	4621      	mov	r1, r4
 800cfce:	4628      	mov	r0, r5
 800cfd0:	f000 fe98 	bl	800dd04 <_fflush_r>
 800cfd4:	b938      	cbnz	r0, 800cfe6 <__swbuf_r+0x74>
 800cfd6:	4638      	mov	r0, r7
 800cfd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfda:	4621      	mov	r1, r4
 800cfdc:	4628      	mov	r0, r5
 800cfde:	f000 f805 	bl	800cfec <__swsetup_r>
 800cfe2:	2800      	cmp	r0, #0
 800cfe4:	d0d5      	beq.n	800cf92 <__swbuf_r+0x20>
 800cfe6:	f04f 37ff 	mov.w	r7, #4294967295
 800cfea:	e7f4      	b.n	800cfd6 <__swbuf_r+0x64>

0800cfec <__swsetup_r>:
 800cfec:	b538      	push	{r3, r4, r5, lr}
 800cfee:	4b2a      	ldr	r3, [pc, #168]	; (800d098 <__swsetup_r+0xac>)
 800cff0:	4605      	mov	r5, r0
 800cff2:	6818      	ldr	r0, [r3, #0]
 800cff4:	460c      	mov	r4, r1
 800cff6:	b118      	cbz	r0, 800d000 <__swsetup_r+0x14>
 800cff8:	6a03      	ldr	r3, [r0, #32]
 800cffa:	b90b      	cbnz	r3, 800d000 <__swsetup_r+0x14>
 800cffc:	f7ff fe96 	bl	800cd2c <__sinit>
 800d000:	89a3      	ldrh	r3, [r4, #12]
 800d002:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d006:	0718      	lsls	r0, r3, #28
 800d008:	d422      	bmi.n	800d050 <__swsetup_r+0x64>
 800d00a:	06d9      	lsls	r1, r3, #27
 800d00c:	d407      	bmi.n	800d01e <__swsetup_r+0x32>
 800d00e:	2309      	movs	r3, #9
 800d010:	602b      	str	r3, [r5, #0]
 800d012:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d016:	81a3      	strh	r3, [r4, #12]
 800d018:	f04f 30ff 	mov.w	r0, #4294967295
 800d01c:	e034      	b.n	800d088 <__swsetup_r+0x9c>
 800d01e:	0758      	lsls	r0, r3, #29
 800d020:	d512      	bpl.n	800d048 <__swsetup_r+0x5c>
 800d022:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d024:	b141      	cbz	r1, 800d038 <__swsetup_r+0x4c>
 800d026:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d02a:	4299      	cmp	r1, r3
 800d02c:	d002      	beq.n	800d034 <__swsetup_r+0x48>
 800d02e:	4628      	mov	r0, r5
 800d030:	f000 f8be 	bl	800d1b0 <_free_r>
 800d034:	2300      	movs	r3, #0
 800d036:	6363      	str	r3, [r4, #52]	; 0x34
 800d038:	89a3      	ldrh	r3, [r4, #12]
 800d03a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d03e:	81a3      	strh	r3, [r4, #12]
 800d040:	2300      	movs	r3, #0
 800d042:	6063      	str	r3, [r4, #4]
 800d044:	6923      	ldr	r3, [r4, #16]
 800d046:	6023      	str	r3, [r4, #0]
 800d048:	89a3      	ldrh	r3, [r4, #12]
 800d04a:	f043 0308 	orr.w	r3, r3, #8
 800d04e:	81a3      	strh	r3, [r4, #12]
 800d050:	6923      	ldr	r3, [r4, #16]
 800d052:	b94b      	cbnz	r3, 800d068 <__swsetup_r+0x7c>
 800d054:	89a3      	ldrh	r3, [r4, #12]
 800d056:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d05a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d05e:	d003      	beq.n	800d068 <__swsetup_r+0x7c>
 800d060:	4621      	mov	r1, r4
 800d062:	4628      	mov	r0, r5
 800d064:	f000 fe9c 	bl	800dda0 <__smakebuf_r>
 800d068:	89a0      	ldrh	r0, [r4, #12]
 800d06a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d06e:	f010 0301 	ands.w	r3, r0, #1
 800d072:	d00a      	beq.n	800d08a <__swsetup_r+0x9e>
 800d074:	2300      	movs	r3, #0
 800d076:	60a3      	str	r3, [r4, #8]
 800d078:	6963      	ldr	r3, [r4, #20]
 800d07a:	425b      	negs	r3, r3
 800d07c:	61a3      	str	r3, [r4, #24]
 800d07e:	6923      	ldr	r3, [r4, #16]
 800d080:	b943      	cbnz	r3, 800d094 <__swsetup_r+0xa8>
 800d082:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d086:	d1c4      	bne.n	800d012 <__swsetup_r+0x26>
 800d088:	bd38      	pop	{r3, r4, r5, pc}
 800d08a:	0781      	lsls	r1, r0, #30
 800d08c:	bf58      	it	pl
 800d08e:	6963      	ldrpl	r3, [r4, #20]
 800d090:	60a3      	str	r3, [r4, #8]
 800d092:	e7f4      	b.n	800d07e <__swsetup_r+0x92>
 800d094:	2000      	movs	r0, #0
 800d096:	e7f7      	b.n	800d088 <__swsetup_r+0x9c>
 800d098:	200000a8 	.word	0x200000a8

0800d09c <memset>:
 800d09c:	4402      	add	r2, r0
 800d09e:	4603      	mov	r3, r0
 800d0a0:	4293      	cmp	r3, r2
 800d0a2:	d100      	bne.n	800d0a6 <memset+0xa>
 800d0a4:	4770      	bx	lr
 800d0a6:	f803 1b01 	strb.w	r1, [r3], #1
 800d0aa:	e7f9      	b.n	800d0a0 <memset+0x4>

0800d0ac <_close_r>:
 800d0ac:	b538      	push	{r3, r4, r5, lr}
 800d0ae:	4d06      	ldr	r5, [pc, #24]	; (800d0c8 <_close_r+0x1c>)
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	4604      	mov	r4, r0
 800d0b4:	4608      	mov	r0, r1
 800d0b6:	602b      	str	r3, [r5, #0]
 800d0b8:	f7f5 fc9e 	bl	80029f8 <_close>
 800d0bc:	1c43      	adds	r3, r0, #1
 800d0be:	d102      	bne.n	800d0c6 <_close_r+0x1a>
 800d0c0:	682b      	ldr	r3, [r5, #0]
 800d0c2:	b103      	cbz	r3, 800d0c6 <_close_r+0x1a>
 800d0c4:	6023      	str	r3, [r4, #0]
 800d0c6:	bd38      	pop	{r3, r4, r5, pc}
 800d0c8:	20001884 	.word	0x20001884

0800d0cc <_lseek_r>:
 800d0cc:	b538      	push	{r3, r4, r5, lr}
 800d0ce:	4d07      	ldr	r5, [pc, #28]	; (800d0ec <_lseek_r+0x20>)
 800d0d0:	4604      	mov	r4, r0
 800d0d2:	4608      	mov	r0, r1
 800d0d4:	4611      	mov	r1, r2
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	602a      	str	r2, [r5, #0]
 800d0da:	461a      	mov	r2, r3
 800d0dc:	f7f5 fcb3 	bl	8002a46 <_lseek>
 800d0e0:	1c43      	adds	r3, r0, #1
 800d0e2:	d102      	bne.n	800d0ea <_lseek_r+0x1e>
 800d0e4:	682b      	ldr	r3, [r5, #0]
 800d0e6:	b103      	cbz	r3, 800d0ea <_lseek_r+0x1e>
 800d0e8:	6023      	str	r3, [r4, #0]
 800d0ea:	bd38      	pop	{r3, r4, r5, pc}
 800d0ec:	20001884 	.word	0x20001884

0800d0f0 <_read_r>:
 800d0f0:	b538      	push	{r3, r4, r5, lr}
 800d0f2:	4d07      	ldr	r5, [pc, #28]	; (800d110 <_read_r+0x20>)
 800d0f4:	4604      	mov	r4, r0
 800d0f6:	4608      	mov	r0, r1
 800d0f8:	4611      	mov	r1, r2
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	602a      	str	r2, [r5, #0]
 800d0fe:	461a      	mov	r2, r3
 800d100:	f7f5 fc5d 	bl	80029be <_read>
 800d104:	1c43      	adds	r3, r0, #1
 800d106:	d102      	bne.n	800d10e <_read_r+0x1e>
 800d108:	682b      	ldr	r3, [r5, #0]
 800d10a:	b103      	cbz	r3, 800d10e <_read_r+0x1e>
 800d10c:	6023      	str	r3, [r4, #0]
 800d10e:	bd38      	pop	{r3, r4, r5, pc}
 800d110:	20001884 	.word	0x20001884

0800d114 <_write_r>:
 800d114:	b538      	push	{r3, r4, r5, lr}
 800d116:	4d07      	ldr	r5, [pc, #28]	; (800d134 <_write_r+0x20>)
 800d118:	4604      	mov	r4, r0
 800d11a:	4608      	mov	r0, r1
 800d11c:	4611      	mov	r1, r2
 800d11e:	2200      	movs	r2, #0
 800d120:	602a      	str	r2, [r5, #0]
 800d122:	461a      	mov	r2, r3
 800d124:	f7fd fe38 	bl	800ad98 <_write>
 800d128:	1c43      	adds	r3, r0, #1
 800d12a:	d102      	bne.n	800d132 <_write_r+0x1e>
 800d12c:	682b      	ldr	r3, [r5, #0]
 800d12e:	b103      	cbz	r3, 800d132 <_write_r+0x1e>
 800d130:	6023      	str	r3, [r4, #0]
 800d132:	bd38      	pop	{r3, r4, r5, pc}
 800d134:	20001884 	.word	0x20001884

0800d138 <__errno>:
 800d138:	4b01      	ldr	r3, [pc, #4]	; (800d140 <__errno+0x8>)
 800d13a:	6818      	ldr	r0, [r3, #0]
 800d13c:	4770      	bx	lr
 800d13e:	bf00      	nop
 800d140:	200000a8 	.word	0x200000a8

0800d144 <__libc_init_array>:
 800d144:	b570      	push	{r4, r5, r6, lr}
 800d146:	4d0d      	ldr	r5, [pc, #52]	; (800d17c <__libc_init_array+0x38>)
 800d148:	4c0d      	ldr	r4, [pc, #52]	; (800d180 <__libc_init_array+0x3c>)
 800d14a:	1b64      	subs	r4, r4, r5
 800d14c:	10a4      	asrs	r4, r4, #2
 800d14e:	2600      	movs	r6, #0
 800d150:	42a6      	cmp	r6, r4
 800d152:	d109      	bne.n	800d168 <__libc_init_array+0x24>
 800d154:	4d0b      	ldr	r5, [pc, #44]	; (800d184 <__libc_init_array+0x40>)
 800d156:	4c0c      	ldr	r4, [pc, #48]	; (800d188 <__libc_init_array+0x44>)
 800d158:	f000 ff16 	bl	800df88 <_init>
 800d15c:	1b64      	subs	r4, r4, r5
 800d15e:	10a4      	asrs	r4, r4, #2
 800d160:	2600      	movs	r6, #0
 800d162:	42a6      	cmp	r6, r4
 800d164:	d105      	bne.n	800d172 <__libc_init_array+0x2e>
 800d166:	bd70      	pop	{r4, r5, r6, pc}
 800d168:	f855 3b04 	ldr.w	r3, [r5], #4
 800d16c:	4798      	blx	r3
 800d16e:	3601      	adds	r6, #1
 800d170:	e7ee      	b.n	800d150 <__libc_init_array+0xc>
 800d172:	f855 3b04 	ldr.w	r3, [r5], #4
 800d176:	4798      	blx	r3
 800d178:	3601      	adds	r6, #1
 800d17a:	e7f2      	b.n	800d162 <__libc_init_array+0x1e>
 800d17c:	0800f518 	.word	0x0800f518
 800d180:	0800f518 	.word	0x0800f518
 800d184:	0800f518 	.word	0x0800f518
 800d188:	0800f51c 	.word	0x0800f51c

0800d18c <__retarget_lock_init_recursive>:
 800d18c:	4770      	bx	lr

0800d18e <__retarget_lock_acquire_recursive>:
 800d18e:	4770      	bx	lr

0800d190 <__retarget_lock_release_recursive>:
 800d190:	4770      	bx	lr

0800d192 <memcpy>:
 800d192:	440a      	add	r2, r1
 800d194:	4291      	cmp	r1, r2
 800d196:	f100 33ff 	add.w	r3, r0, #4294967295
 800d19a:	d100      	bne.n	800d19e <memcpy+0xc>
 800d19c:	4770      	bx	lr
 800d19e:	b510      	push	{r4, lr}
 800d1a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d1a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d1a8:	4291      	cmp	r1, r2
 800d1aa:	d1f9      	bne.n	800d1a0 <memcpy+0xe>
 800d1ac:	bd10      	pop	{r4, pc}
	...

0800d1b0 <_free_r>:
 800d1b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d1b2:	2900      	cmp	r1, #0
 800d1b4:	d044      	beq.n	800d240 <_free_r+0x90>
 800d1b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1ba:	9001      	str	r0, [sp, #4]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	f1a1 0404 	sub.w	r4, r1, #4
 800d1c2:	bfb8      	it	lt
 800d1c4:	18e4      	addlt	r4, r4, r3
 800d1c6:	f000 f8df 	bl	800d388 <__malloc_lock>
 800d1ca:	4a1e      	ldr	r2, [pc, #120]	; (800d244 <_free_r+0x94>)
 800d1cc:	9801      	ldr	r0, [sp, #4]
 800d1ce:	6813      	ldr	r3, [r2, #0]
 800d1d0:	b933      	cbnz	r3, 800d1e0 <_free_r+0x30>
 800d1d2:	6063      	str	r3, [r4, #4]
 800d1d4:	6014      	str	r4, [r2, #0]
 800d1d6:	b003      	add	sp, #12
 800d1d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d1dc:	f000 b8da 	b.w	800d394 <__malloc_unlock>
 800d1e0:	42a3      	cmp	r3, r4
 800d1e2:	d908      	bls.n	800d1f6 <_free_r+0x46>
 800d1e4:	6825      	ldr	r5, [r4, #0]
 800d1e6:	1961      	adds	r1, r4, r5
 800d1e8:	428b      	cmp	r3, r1
 800d1ea:	bf01      	itttt	eq
 800d1ec:	6819      	ldreq	r1, [r3, #0]
 800d1ee:	685b      	ldreq	r3, [r3, #4]
 800d1f0:	1949      	addeq	r1, r1, r5
 800d1f2:	6021      	streq	r1, [r4, #0]
 800d1f4:	e7ed      	b.n	800d1d2 <_free_r+0x22>
 800d1f6:	461a      	mov	r2, r3
 800d1f8:	685b      	ldr	r3, [r3, #4]
 800d1fa:	b10b      	cbz	r3, 800d200 <_free_r+0x50>
 800d1fc:	42a3      	cmp	r3, r4
 800d1fe:	d9fa      	bls.n	800d1f6 <_free_r+0x46>
 800d200:	6811      	ldr	r1, [r2, #0]
 800d202:	1855      	adds	r5, r2, r1
 800d204:	42a5      	cmp	r5, r4
 800d206:	d10b      	bne.n	800d220 <_free_r+0x70>
 800d208:	6824      	ldr	r4, [r4, #0]
 800d20a:	4421      	add	r1, r4
 800d20c:	1854      	adds	r4, r2, r1
 800d20e:	42a3      	cmp	r3, r4
 800d210:	6011      	str	r1, [r2, #0]
 800d212:	d1e0      	bne.n	800d1d6 <_free_r+0x26>
 800d214:	681c      	ldr	r4, [r3, #0]
 800d216:	685b      	ldr	r3, [r3, #4]
 800d218:	6053      	str	r3, [r2, #4]
 800d21a:	440c      	add	r4, r1
 800d21c:	6014      	str	r4, [r2, #0]
 800d21e:	e7da      	b.n	800d1d6 <_free_r+0x26>
 800d220:	d902      	bls.n	800d228 <_free_r+0x78>
 800d222:	230c      	movs	r3, #12
 800d224:	6003      	str	r3, [r0, #0]
 800d226:	e7d6      	b.n	800d1d6 <_free_r+0x26>
 800d228:	6825      	ldr	r5, [r4, #0]
 800d22a:	1961      	adds	r1, r4, r5
 800d22c:	428b      	cmp	r3, r1
 800d22e:	bf04      	itt	eq
 800d230:	6819      	ldreq	r1, [r3, #0]
 800d232:	685b      	ldreq	r3, [r3, #4]
 800d234:	6063      	str	r3, [r4, #4]
 800d236:	bf04      	itt	eq
 800d238:	1949      	addeq	r1, r1, r5
 800d23a:	6021      	streq	r1, [r4, #0]
 800d23c:	6054      	str	r4, [r2, #4]
 800d23e:	e7ca      	b.n	800d1d6 <_free_r+0x26>
 800d240:	b003      	add	sp, #12
 800d242:	bd30      	pop	{r4, r5, pc}
 800d244:	2000188c 	.word	0x2000188c

0800d248 <sbrk_aligned>:
 800d248:	b570      	push	{r4, r5, r6, lr}
 800d24a:	4e0e      	ldr	r6, [pc, #56]	; (800d284 <sbrk_aligned+0x3c>)
 800d24c:	460c      	mov	r4, r1
 800d24e:	6831      	ldr	r1, [r6, #0]
 800d250:	4605      	mov	r5, r0
 800d252:	b911      	cbnz	r1, 800d25a <sbrk_aligned+0x12>
 800d254:	f000 fe50 	bl	800def8 <_sbrk_r>
 800d258:	6030      	str	r0, [r6, #0]
 800d25a:	4621      	mov	r1, r4
 800d25c:	4628      	mov	r0, r5
 800d25e:	f000 fe4b 	bl	800def8 <_sbrk_r>
 800d262:	1c43      	adds	r3, r0, #1
 800d264:	d00a      	beq.n	800d27c <sbrk_aligned+0x34>
 800d266:	1cc4      	adds	r4, r0, #3
 800d268:	f024 0403 	bic.w	r4, r4, #3
 800d26c:	42a0      	cmp	r0, r4
 800d26e:	d007      	beq.n	800d280 <sbrk_aligned+0x38>
 800d270:	1a21      	subs	r1, r4, r0
 800d272:	4628      	mov	r0, r5
 800d274:	f000 fe40 	bl	800def8 <_sbrk_r>
 800d278:	3001      	adds	r0, #1
 800d27a:	d101      	bne.n	800d280 <sbrk_aligned+0x38>
 800d27c:	f04f 34ff 	mov.w	r4, #4294967295
 800d280:	4620      	mov	r0, r4
 800d282:	bd70      	pop	{r4, r5, r6, pc}
 800d284:	20001890 	.word	0x20001890

0800d288 <_malloc_r>:
 800d288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d28c:	1ccd      	adds	r5, r1, #3
 800d28e:	f025 0503 	bic.w	r5, r5, #3
 800d292:	3508      	adds	r5, #8
 800d294:	2d0c      	cmp	r5, #12
 800d296:	bf38      	it	cc
 800d298:	250c      	movcc	r5, #12
 800d29a:	2d00      	cmp	r5, #0
 800d29c:	4607      	mov	r7, r0
 800d29e:	db01      	blt.n	800d2a4 <_malloc_r+0x1c>
 800d2a0:	42a9      	cmp	r1, r5
 800d2a2:	d905      	bls.n	800d2b0 <_malloc_r+0x28>
 800d2a4:	230c      	movs	r3, #12
 800d2a6:	603b      	str	r3, [r7, #0]
 800d2a8:	2600      	movs	r6, #0
 800d2aa:	4630      	mov	r0, r6
 800d2ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d384 <_malloc_r+0xfc>
 800d2b4:	f000 f868 	bl	800d388 <__malloc_lock>
 800d2b8:	f8d8 3000 	ldr.w	r3, [r8]
 800d2bc:	461c      	mov	r4, r3
 800d2be:	bb5c      	cbnz	r4, 800d318 <_malloc_r+0x90>
 800d2c0:	4629      	mov	r1, r5
 800d2c2:	4638      	mov	r0, r7
 800d2c4:	f7ff ffc0 	bl	800d248 <sbrk_aligned>
 800d2c8:	1c43      	adds	r3, r0, #1
 800d2ca:	4604      	mov	r4, r0
 800d2cc:	d155      	bne.n	800d37a <_malloc_r+0xf2>
 800d2ce:	f8d8 4000 	ldr.w	r4, [r8]
 800d2d2:	4626      	mov	r6, r4
 800d2d4:	2e00      	cmp	r6, #0
 800d2d6:	d145      	bne.n	800d364 <_malloc_r+0xdc>
 800d2d8:	2c00      	cmp	r4, #0
 800d2da:	d048      	beq.n	800d36e <_malloc_r+0xe6>
 800d2dc:	6823      	ldr	r3, [r4, #0]
 800d2de:	4631      	mov	r1, r6
 800d2e0:	4638      	mov	r0, r7
 800d2e2:	eb04 0903 	add.w	r9, r4, r3
 800d2e6:	f000 fe07 	bl	800def8 <_sbrk_r>
 800d2ea:	4581      	cmp	r9, r0
 800d2ec:	d13f      	bne.n	800d36e <_malloc_r+0xe6>
 800d2ee:	6821      	ldr	r1, [r4, #0]
 800d2f0:	1a6d      	subs	r5, r5, r1
 800d2f2:	4629      	mov	r1, r5
 800d2f4:	4638      	mov	r0, r7
 800d2f6:	f7ff ffa7 	bl	800d248 <sbrk_aligned>
 800d2fa:	3001      	adds	r0, #1
 800d2fc:	d037      	beq.n	800d36e <_malloc_r+0xe6>
 800d2fe:	6823      	ldr	r3, [r4, #0]
 800d300:	442b      	add	r3, r5
 800d302:	6023      	str	r3, [r4, #0]
 800d304:	f8d8 3000 	ldr.w	r3, [r8]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d038      	beq.n	800d37e <_malloc_r+0xf6>
 800d30c:	685a      	ldr	r2, [r3, #4]
 800d30e:	42a2      	cmp	r2, r4
 800d310:	d12b      	bne.n	800d36a <_malloc_r+0xe2>
 800d312:	2200      	movs	r2, #0
 800d314:	605a      	str	r2, [r3, #4]
 800d316:	e00f      	b.n	800d338 <_malloc_r+0xb0>
 800d318:	6822      	ldr	r2, [r4, #0]
 800d31a:	1b52      	subs	r2, r2, r5
 800d31c:	d41f      	bmi.n	800d35e <_malloc_r+0xd6>
 800d31e:	2a0b      	cmp	r2, #11
 800d320:	d917      	bls.n	800d352 <_malloc_r+0xca>
 800d322:	1961      	adds	r1, r4, r5
 800d324:	42a3      	cmp	r3, r4
 800d326:	6025      	str	r5, [r4, #0]
 800d328:	bf18      	it	ne
 800d32a:	6059      	strne	r1, [r3, #4]
 800d32c:	6863      	ldr	r3, [r4, #4]
 800d32e:	bf08      	it	eq
 800d330:	f8c8 1000 	streq.w	r1, [r8]
 800d334:	5162      	str	r2, [r4, r5]
 800d336:	604b      	str	r3, [r1, #4]
 800d338:	4638      	mov	r0, r7
 800d33a:	f104 060b 	add.w	r6, r4, #11
 800d33e:	f000 f829 	bl	800d394 <__malloc_unlock>
 800d342:	f026 0607 	bic.w	r6, r6, #7
 800d346:	1d23      	adds	r3, r4, #4
 800d348:	1af2      	subs	r2, r6, r3
 800d34a:	d0ae      	beq.n	800d2aa <_malloc_r+0x22>
 800d34c:	1b9b      	subs	r3, r3, r6
 800d34e:	50a3      	str	r3, [r4, r2]
 800d350:	e7ab      	b.n	800d2aa <_malloc_r+0x22>
 800d352:	42a3      	cmp	r3, r4
 800d354:	6862      	ldr	r2, [r4, #4]
 800d356:	d1dd      	bne.n	800d314 <_malloc_r+0x8c>
 800d358:	f8c8 2000 	str.w	r2, [r8]
 800d35c:	e7ec      	b.n	800d338 <_malloc_r+0xb0>
 800d35e:	4623      	mov	r3, r4
 800d360:	6864      	ldr	r4, [r4, #4]
 800d362:	e7ac      	b.n	800d2be <_malloc_r+0x36>
 800d364:	4634      	mov	r4, r6
 800d366:	6876      	ldr	r6, [r6, #4]
 800d368:	e7b4      	b.n	800d2d4 <_malloc_r+0x4c>
 800d36a:	4613      	mov	r3, r2
 800d36c:	e7cc      	b.n	800d308 <_malloc_r+0x80>
 800d36e:	230c      	movs	r3, #12
 800d370:	603b      	str	r3, [r7, #0]
 800d372:	4638      	mov	r0, r7
 800d374:	f000 f80e 	bl	800d394 <__malloc_unlock>
 800d378:	e797      	b.n	800d2aa <_malloc_r+0x22>
 800d37a:	6025      	str	r5, [r4, #0]
 800d37c:	e7dc      	b.n	800d338 <_malloc_r+0xb0>
 800d37e:	605b      	str	r3, [r3, #4]
 800d380:	deff      	udf	#255	; 0xff
 800d382:	bf00      	nop
 800d384:	2000188c 	.word	0x2000188c

0800d388 <__malloc_lock>:
 800d388:	4801      	ldr	r0, [pc, #4]	; (800d390 <__malloc_lock+0x8>)
 800d38a:	f7ff bf00 	b.w	800d18e <__retarget_lock_acquire_recursive>
 800d38e:	bf00      	nop
 800d390:	20001888 	.word	0x20001888

0800d394 <__malloc_unlock>:
 800d394:	4801      	ldr	r0, [pc, #4]	; (800d39c <__malloc_unlock+0x8>)
 800d396:	f7ff befb 	b.w	800d190 <__retarget_lock_release_recursive>
 800d39a:	bf00      	nop
 800d39c:	20001888 	.word	0x20001888

0800d3a0 <__ssputs_r>:
 800d3a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3a4:	688e      	ldr	r6, [r1, #8]
 800d3a6:	461f      	mov	r7, r3
 800d3a8:	42be      	cmp	r6, r7
 800d3aa:	680b      	ldr	r3, [r1, #0]
 800d3ac:	4682      	mov	sl, r0
 800d3ae:	460c      	mov	r4, r1
 800d3b0:	4690      	mov	r8, r2
 800d3b2:	d82c      	bhi.n	800d40e <__ssputs_r+0x6e>
 800d3b4:	898a      	ldrh	r2, [r1, #12]
 800d3b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d3ba:	d026      	beq.n	800d40a <__ssputs_r+0x6a>
 800d3bc:	6965      	ldr	r5, [r4, #20]
 800d3be:	6909      	ldr	r1, [r1, #16]
 800d3c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d3c4:	eba3 0901 	sub.w	r9, r3, r1
 800d3c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d3cc:	1c7b      	adds	r3, r7, #1
 800d3ce:	444b      	add	r3, r9
 800d3d0:	106d      	asrs	r5, r5, #1
 800d3d2:	429d      	cmp	r5, r3
 800d3d4:	bf38      	it	cc
 800d3d6:	461d      	movcc	r5, r3
 800d3d8:	0553      	lsls	r3, r2, #21
 800d3da:	d527      	bpl.n	800d42c <__ssputs_r+0x8c>
 800d3dc:	4629      	mov	r1, r5
 800d3de:	f7ff ff53 	bl	800d288 <_malloc_r>
 800d3e2:	4606      	mov	r6, r0
 800d3e4:	b360      	cbz	r0, 800d440 <__ssputs_r+0xa0>
 800d3e6:	6921      	ldr	r1, [r4, #16]
 800d3e8:	464a      	mov	r2, r9
 800d3ea:	f7ff fed2 	bl	800d192 <memcpy>
 800d3ee:	89a3      	ldrh	r3, [r4, #12]
 800d3f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d3f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3f8:	81a3      	strh	r3, [r4, #12]
 800d3fa:	6126      	str	r6, [r4, #16]
 800d3fc:	6165      	str	r5, [r4, #20]
 800d3fe:	444e      	add	r6, r9
 800d400:	eba5 0509 	sub.w	r5, r5, r9
 800d404:	6026      	str	r6, [r4, #0]
 800d406:	60a5      	str	r5, [r4, #8]
 800d408:	463e      	mov	r6, r7
 800d40a:	42be      	cmp	r6, r7
 800d40c:	d900      	bls.n	800d410 <__ssputs_r+0x70>
 800d40e:	463e      	mov	r6, r7
 800d410:	6820      	ldr	r0, [r4, #0]
 800d412:	4632      	mov	r2, r6
 800d414:	4641      	mov	r1, r8
 800d416:	f000 fd33 	bl	800de80 <memmove>
 800d41a:	68a3      	ldr	r3, [r4, #8]
 800d41c:	1b9b      	subs	r3, r3, r6
 800d41e:	60a3      	str	r3, [r4, #8]
 800d420:	6823      	ldr	r3, [r4, #0]
 800d422:	4433      	add	r3, r6
 800d424:	6023      	str	r3, [r4, #0]
 800d426:	2000      	movs	r0, #0
 800d428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d42c:	462a      	mov	r2, r5
 800d42e:	f000 fd73 	bl	800df18 <_realloc_r>
 800d432:	4606      	mov	r6, r0
 800d434:	2800      	cmp	r0, #0
 800d436:	d1e0      	bne.n	800d3fa <__ssputs_r+0x5a>
 800d438:	6921      	ldr	r1, [r4, #16]
 800d43a:	4650      	mov	r0, sl
 800d43c:	f7ff feb8 	bl	800d1b0 <_free_r>
 800d440:	230c      	movs	r3, #12
 800d442:	f8ca 3000 	str.w	r3, [sl]
 800d446:	89a3      	ldrh	r3, [r4, #12]
 800d448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d44c:	81a3      	strh	r3, [r4, #12]
 800d44e:	f04f 30ff 	mov.w	r0, #4294967295
 800d452:	e7e9      	b.n	800d428 <__ssputs_r+0x88>

0800d454 <_svfiprintf_r>:
 800d454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d458:	4698      	mov	r8, r3
 800d45a:	898b      	ldrh	r3, [r1, #12]
 800d45c:	061b      	lsls	r3, r3, #24
 800d45e:	b09d      	sub	sp, #116	; 0x74
 800d460:	4607      	mov	r7, r0
 800d462:	460d      	mov	r5, r1
 800d464:	4614      	mov	r4, r2
 800d466:	d50e      	bpl.n	800d486 <_svfiprintf_r+0x32>
 800d468:	690b      	ldr	r3, [r1, #16]
 800d46a:	b963      	cbnz	r3, 800d486 <_svfiprintf_r+0x32>
 800d46c:	2140      	movs	r1, #64	; 0x40
 800d46e:	f7ff ff0b 	bl	800d288 <_malloc_r>
 800d472:	6028      	str	r0, [r5, #0]
 800d474:	6128      	str	r0, [r5, #16]
 800d476:	b920      	cbnz	r0, 800d482 <_svfiprintf_r+0x2e>
 800d478:	230c      	movs	r3, #12
 800d47a:	603b      	str	r3, [r7, #0]
 800d47c:	f04f 30ff 	mov.w	r0, #4294967295
 800d480:	e0d0      	b.n	800d624 <_svfiprintf_r+0x1d0>
 800d482:	2340      	movs	r3, #64	; 0x40
 800d484:	616b      	str	r3, [r5, #20]
 800d486:	2300      	movs	r3, #0
 800d488:	9309      	str	r3, [sp, #36]	; 0x24
 800d48a:	2320      	movs	r3, #32
 800d48c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d490:	f8cd 800c 	str.w	r8, [sp, #12]
 800d494:	2330      	movs	r3, #48	; 0x30
 800d496:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d63c <_svfiprintf_r+0x1e8>
 800d49a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d49e:	f04f 0901 	mov.w	r9, #1
 800d4a2:	4623      	mov	r3, r4
 800d4a4:	469a      	mov	sl, r3
 800d4a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4aa:	b10a      	cbz	r2, 800d4b0 <_svfiprintf_r+0x5c>
 800d4ac:	2a25      	cmp	r2, #37	; 0x25
 800d4ae:	d1f9      	bne.n	800d4a4 <_svfiprintf_r+0x50>
 800d4b0:	ebba 0b04 	subs.w	fp, sl, r4
 800d4b4:	d00b      	beq.n	800d4ce <_svfiprintf_r+0x7a>
 800d4b6:	465b      	mov	r3, fp
 800d4b8:	4622      	mov	r2, r4
 800d4ba:	4629      	mov	r1, r5
 800d4bc:	4638      	mov	r0, r7
 800d4be:	f7ff ff6f 	bl	800d3a0 <__ssputs_r>
 800d4c2:	3001      	adds	r0, #1
 800d4c4:	f000 80a9 	beq.w	800d61a <_svfiprintf_r+0x1c6>
 800d4c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4ca:	445a      	add	r2, fp
 800d4cc:	9209      	str	r2, [sp, #36]	; 0x24
 800d4ce:	f89a 3000 	ldrb.w	r3, [sl]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	f000 80a1 	beq.w	800d61a <_svfiprintf_r+0x1c6>
 800d4d8:	2300      	movs	r3, #0
 800d4da:	f04f 32ff 	mov.w	r2, #4294967295
 800d4de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4e2:	f10a 0a01 	add.w	sl, sl, #1
 800d4e6:	9304      	str	r3, [sp, #16]
 800d4e8:	9307      	str	r3, [sp, #28]
 800d4ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d4ee:	931a      	str	r3, [sp, #104]	; 0x68
 800d4f0:	4654      	mov	r4, sl
 800d4f2:	2205      	movs	r2, #5
 800d4f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4f8:	4850      	ldr	r0, [pc, #320]	; (800d63c <_svfiprintf_r+0x1e8>)
 800d4fa:	f7f2 fe59 	bl	80001b0 <memchr>
 800d4fe:	9a04      	ldr	r2, [sp, #16]
 800d500:	b9d8      	cbnz	r0, 800d53a <_svfiprintf_r+0xe6>
 800d502:	06d0      	lsls	r0, r2, #27
 800d504:	bf44      	itt	mi
 800d506:	2320      	movmi	r3, #32
 800d508:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d50c:	0711      	lsls	r1, r2, #28
 800d50e:	bf44      	itt	mi
 800d510:	232b      	movmi	r3, #43	; 0x2b
 800d512:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d516:	f89a 3000 	ldrb.w	r3, [sl]
 800d51a:	2b2a      	cmp	r3, #42	; 0x2a
 800d51c:	d015      	beq.n	800d54a <_svfiprintf_r+0xf6>
 800d51e:	9a07      	ldr	r2, [sp, #28]
 800d520:	4654      	mov	r4, sl
 800d522:	2000      	movs	r0, #0
 800d524:	f04f 0c0a 	mov.w	ip, #10
 800d528:	4621      	mov	r1, r4
 800d52a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d52e:	3b30      	subs	r3, #48	; 0x30
 800d530:	2b09      	cmp	r3, #9
 800d532:	d94d      	bls.n	800d5d0 <_svfiprintf_r+0x17c>
 800d534:	b1b0      	cbz	r0, 800d564 <_svfiprintf_r+0x110>
 800d536:	9207      	str	r2, [sp, #28]
 800d538:	e014      	b.n	800d564 <_svfiprintf_r+0x110>
 800d53a:	eba0 0308 	sub.w	r3, r0, r8
 800d53e:	fa09 f303 	lsl.w	r3, r9, r3
 800d542:	4313      	orrs	r3, r2
 800d544:	9304      	str	r3, [sp, #16]
 800d546:	46a2      	mov	sl, r4
 800d548:	e7d2      	b.n	800d4f0 <_svfiprintf_r+0x9c>
 800d54a:	9b03      	ldr	r3, [sp, #12]
 800d54c:	1d19      	adds	r1, r3, #4
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	9103      	str	r1, [sp, #12]
 800d552:	2b00      	cmp	r3, #0
 800d554:	bfbb      	ittet	lt
 800d556:	425b      	neglt	r3, r3
 800d558:	f042 0202 	orrlt.w	r2, r2, #2
 800d55c:	9307      	strge	r3, [sp, #28]
 800d55e:	9307      	strlt	r3, [sp, #28]
 800d560:	bfb8      	it	lt
 800d562:	9204      	strlt	r2, [sp, #16]
 800d564:	7823      	ldrb	r3, [r4, #0]
 800d566:	2b2e      	cmp	r3, #46	; 0x2e
 800d568:	d10c      	bne.n	800d584 <_svfiprintf_r+0x130>
 800d56a:	7863      	ldrb	r3, [r4, #1]
 800d56c:	2b2a      	cmp	r3, #42	; 0x2a
 800d56e:	d134      	bne.n	800d5da <_svfiprintf_r+0x186>
 800d570:	9b03      	ldr	r3, [sp, #12]
 800d572:	1d1a      	adds	r2, r3, #4
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	9203      	str	r2, [sp, #12]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	bfb8      	it	lt
 800d57c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d580:	3402      	adds	r4, #2
 800d582:	9305      	str	r3, [sp, #20]
 800d584:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d64c <_svfiprintf_r+0x1f8>
 800d588:	7821      	ldrb	r1, [r4, #0]
 800d58a:	2203      	movs	r2, #3
 800d58c:	4650      	mov	r0, sl
 800d58e:	f7f2 fe0f 	bl	80001b0 <memchr>
 800d592:	b138      	cbz	r0, 800d5a4 <_svfiprintf_r+0x150>
 800d594:	9b04      	ldr	r3, [sp, #16]
 800d596:	eba0 000a 	sub.w	r0, r0, sl
 800d59a:	2240      	movs	r2, #64	; 0x40
 800d59c:	4082      	lsls	r2, r0
 800d59e:	4313      	orrs	r3, r2
 800d5a0:	3401      	adds	r4, #1
 800d5a2:	9304      	str	r3, [sp, #16]
 800d5a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5a8:	4825      	ldr	r0, [pc, #148]	; (800d640 <_svfiprintf_r+0x1ec>)
 800d5aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d5ae:	2206      	movs	r2, #6
 800d5b0:	f7f2 fdfe 	bl	80001b0 <memchr>
 800d5b4:	2800      	cmp	r0, #0
 800d5b6:	d038      	beq.n	800d62a <_svfiprintf_r+0x1d6>
 800d5b8:	4b22      	ldr	r3, [pc, #136]	; (800d644 <_svfiprintf_r+0x1f0>)
 800d5ba:	bb1b      	cbnz	r3, 800d604 <_svfiprintf_r+0x1b0>
 800d5bc:	9b03      	ldr	r3, [sp, #12]
 800d5be:	3307      	adds	r3, #7
 800d5c0:	f023 0307 	bic.w	r3, r3, #7
 800d5c4:	3308      	adds	r3, #8
 800d5c6:	9303      	str	r3, [sp, #12]
 800d5c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5ca:	4433      	add	r3, r6
 800d5cc:	9309      	str	r3, [sp, #36]	; 0x24
 800d5ce:	e768      	b.n	800d4a2 <_svfiprintf_r+0x4e>
 800d5d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d5d4:	460c      	mov	r4, r1
 800d5d6:	2001      	movs	r0, #1
 800d5d8:	e7a6      	b.n	800d528 <_svfiprintf_r+0xd4>
 800d5da:	2300      	movs	r3, #0
 800d5dc:	3401      	adds	r4, #1
 800d5de:	9305      	str	r3, [sp, #20]
 800d5e0:	4619      	mov	r1, r3
 800d5e2:	f04f 0c0a 	mov.w	ip, #10
 800d5e6:	4620      	mov	r0, r4
 800d5e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5ec:	3a30      	subs	r2, #48	; 0x30
 800d5ee:	2a09      	cmp	r2, #9
 800d5f0:	d903      	bls.n	800d5fa <_svfiprintf_r+0x1a6>
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d0c6      	beq.n	800d584 <_svfiprintf_r+0x130>
 800d5f6:	9105      	str	r1, [sp, #20]
 800d5f8:	e7c4      	b.n	800d584 <_svfiprintf_r+0x130>
 800d5fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5fe:	4604      	mov	r4, r0
 800d600:	2301      	movs	r3, #1
 800d602:	e7f0      	b.n	800d5e6 <_svfiprintf_r+0x192>
 800d604:	ab03      	add	r3, sp, #12
 800d606:	9300      	str	r3, [sp, #0]
 800d608:	462a      	mov	r2, r5
 800d60a:	4b0f      	ldr	r3, [pc, #60]	; (800d648 <_svfiprintf_r+0x1f4>)
 800d60c:	a904      	add	r1, sp, #16
 800d60e:	4638      	mov	r0, r7
 800d610:	f3af 8000 	nop.w
 800d614:	1c42      	adds	r2, r0, #1
 800d616:	4606      	mov	r6, r0
 800d618:	d1d6      	bne.n	800d5c8 <_svfiprintf_r+0x174>
 800d61a:	89ab      	ldrh	r3, [r5, #12]
 800d61c:	065b      	lsls	r3, r3, #25
 800d61e:	f53f af2d 	bmi.w	800d47c <_svfiprintf_r+0x28>
 800d622:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d624:	b01d      	add	sp, #116	; 0x74
 800d626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d62a:	ab03      	add	r3, sp, #12
 800d62c:	9300      	str	r3, [sp, #0]
 800d62e:	462a      	mov	r2, r5
 800d630:	4b05      	ldr	r3, [pc, #20]	; (800d648 <_svfiprintf_r+0x1f4>)
 800d632:	a904      	add	r1, sp, #16
 800d634:	4638      	mov	r0, r7
 800d636:	f000 f9bd 	bl	800d9b4 <_printf_i>
 800d63a:	e7eb      	b.n	800d614 <_svfiprintf_r+0x1c0>
 800d63c:	0800f4dc 	.word	0x0800f4dc
 800d640:	0800f4e6 	.word	0x0800f4e6
 800d644:	00000000 	.word	0x00000000
 800d648:	0800d3a1 	.word	0x0800d3a1
 800d64c:	0800f4e2 	.word	0x0800f4e2

0800d650 <__sfputc_r>:
 800d650:	6893      	ldr	r3, [r2, #8]
 800d652:	3b01      	subs	r3, #1
 800d654:	2b00      	cmp	r3, #0
 800d656:	b410      	push	{r4}
 800d658:	6093      	str	r3, [r2, #8]
 800d65a:	da08      	bge.n	800d66e <__sfputc_r+0x1e>
 800d65c:	6994      	ldr	r4, [r2, #24]
 800d65e:	42a3      	cmp	r3, r4
 800d660:	db01      	blt.n	800d666 <__sfputc_r+0x16>
 800d662:	290a      	cmp	r1, #10
 800d664:	d103      	bne.n	800d66e <__sfputc_r+0x1e>
 800d666:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d66a:	f7ff bc82 	b.w	800cf72 <__swbuf_r>
 800d66e:	6813      	ldr	r3, [r2, #0]
 800d670:	1c58      	adds	r0, r3, #1
 800d672:	6010      	str	r0, [r2, #0]
 800d674:	7019      	strb	r1, [r3, #0]
 800d676:	4608      	mov	r0, r1
 800d678:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d67c:	4770      	bx	lr

0800d67e <__sfputs_r>:
 800d67e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d680:	4606      	mov	r6, r0
 800d682:	460f      	mov	r7, r1
 800d684:	4614      	mov	r4, r2
 800d686:	18d5      	adds	r5, r2, r3
 800d688:	42ac      	cmp	r4, r5
 800d68a:	d101      	bne.n	800d690 <__sfputs_r+0x12>
 800d68c:	2000      	movs	r0, #0
 800d68e:	e007      	b.n	800d6a0 <__sfputs_r+0x22>
 800d690:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d694:	463a      	mov	r2, r7
 800d696:	4630      	mov	r0, r6
 800d698:	f7ff ffda 	bl	800d650 <__sfputc_r>
 800d69c:	1c43      	adds	r3, r0, #1
 800d69e:	d1f3      	bne.n	800d688 <__sfputs_r+0xa>
 800d6a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d6a4 <_vfiprintf_r>:
 800d6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6a8:	460d      	mov	r5, r1
 800d6aa:	b09d      	sub	sp, #116	; 0x74
 800d6ac:	4614      	mov	r4, r2
 800d6ae:	4698      	mov	r8, r3
 800d6b0:	4606      	mov	r6, r0
 800d6b2:	b118      	cbz	r0, 800d6bc <_vfiprintf_r+0x18>
 800d6b4:	6a03      	ldr	r3, [r0, #32]
 800d6b6:	b90b      	cbnz	r3, 800d6bc <_vfiprintf_r+0x18>
 800d6b8:	f7ff fb38 	bl	800cd2c <__sinit>
 800d6bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d6be:	07d9      	lsls	r1, r3, #31
 800d6c0:	d405      	bmi.n	800d6ce <_vfiprintf_r+0x2a>
 800d6c2:	89ab      	ldrh	r3, [r5, #12]
 800d6c4:	059a      	lsls	r2, r3, #22
 800d6c6:	d402      	bmi.n	800d6ce <_vfiprintf_r+0x2a>
 800d6c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d6ca:	f7ff fd60 	bl	800d18e <__retarget_lock_acquire_recursive>
 800d6ce:	89ab      	ldrh	r3, [r5, #12]
 800d6d0:	071b      	lsls	r3, r3, #28
 800d6d2:	d501      	bpl.n	800d6d8 <_vfiprintf_r+0x34>
 800d6d4:	692b      	ldr	r3, [r5, #16]
 800d6d6:	b99b      	cbnz	r3, 800d700 <_vfiprintf_r+0x5c>
 800d6d8:	4629      	mov	r1, r5
 800d6da:	4630      	mov	r0, r6
 800d6dc:	f7ff fc86 	bl	800cfec <__swsetup_r>
 800d6e0:	b170      	cbz	r0, 800d700 <_vfiprintf_r+0x5c>
 800d6e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d6e4:	07dc      	lsls	r4, r3, #31
 800d6e6:	d504      	bpl.n	800d6f2 <_vfiprintf_r+0x4e>
 800d6e8:	f04f 30ff 	mov.w	r0, #4294967295
 800d6ec:	b01d      	add	sp, #116	; 0x74
 800d6ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6f2:	89ab      	ldrh	r3, [r5, #12]
 800d6f4:	0598      	lsls	r0, r3, #22
 800d6f6:	d4f7      	bmi.n	800d6e8 <_vfiprintf_r+0x44>
 800d6f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d6fa:	f7ff fd49 	bl	800d190 <__retarget_lock_release_recursive>
 800d6fe:	e7f3      	b.n	800d6e8 <_vfiprintf_r+0x44>
 800d700:	2300      	movs	r3, #0
 800d702:	9309      	str	r3, [sp, #36]	; 0x24
 800d704:	2320      	movs	r3, #32
 800d706:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d70a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d70e:	2330      	movs	r3, #48	; 0x30
 800d710:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d8c4 <_vfiprintf_r+0x220>
 800d714:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d718:	f04f 0901 	mov.w	r9, #1
 800d71c:	4623      	mov	r3, r4
 800d71e:	469a      	mov	sl, r3
 800d720:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d724:	b10a      	cbz	r2, 800d72a <_vfiprintf_r+0x86>
 800d726:	2a25      	cmp	r2, #37	; 0x25
 800d728:	d1f9      	bne.n	800d71e <_vfiprintf_r+0x7a>
 800d72a:	ebba 0b04 	subs.w	fp, sl, r4
 800d72e:	d00b      	beq.n	800d748 <_vfiprintf_r+0xa4>
 800d730:	465b      	mov	r3, fp
 800d732:	4622      	mov	r2, r4
 800d734:	4629      	mov	r1, r5
 800d736:	4630      	mov	r0, r6
 800d738:	f7ff ffa1 	bl	800d67e <__sfputs_r>
 800d73c:	3001      	adds	r0, #1
 800d73e:	f000 80a9 	beq.w	800d894 <_vfiprintf_r+0x1f0>
 800d742:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d744:	445a      	add	r2, fp
 800d746:	9209      	str	r2, [sp, #36]	; 0x24
 800d748:	f89a 3000 	ldrb.w	r3, [sl]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	f000 80a1 	beq.w	800d894 <_vfiprintf_r+0x1f0>
 800d752:	2300      	movs	r3, #0
 800d754:	f04f 32ff 	mov.w	r2, #4294967295
 800d758:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d75c:	f10a 0a01 	add.w	sl, sl, #1
 800d760:	9304      	str	r3, [sp, #16]
 800d762:	9307      	str	r3, [sp, #28]
 800d764:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d768:	931a      	str	r3, [sp, #104]	; 0x68
 800d76a:	4654      	mov	r4, sl
 800d76c:	2205      	movs	r2, #5
 800d76e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d772:	4854      	ldr	r0, [pc, #336]	; (800d8c4 <_vfiprintf_r+0x220>)
 800d774:	f7f2 fd1c 	bl	80001b0 <memchr>
 800d778:	9a04      	ldr	r2, [sp, #16]
 800d77a:	b9d8      	cbnz	r0, 800d7b4 <_vfiprintf_r+0x110>
 800d77c:	06d1      	lsls	r1, r2, #27
 800d77e:	bf44      	itt	mi
 800d780:	2320      	movmi	r3, #32
 800d782:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d786:	0713      	lsls	r3, r2, #28
 800d788:	bf44      	itt	mi
 800d78a:	232b      	movmi	r3, #43	; 0x2b
 800d78c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d790:	f89a 3000 	ldrb.w	r3, [sl]
 800d794:	2b2a      	cmp	r3, #42	; 0x2a
 800d796:	d015      	beq.n	800d7c4 <_vfiprintf_r+0x120>
 800d798:	9a07      	ldr	r2, [sp, #28]
 800d79a:	4654      	mov	r4, sl
 800d79c:	2000      	movs	r0, #0
 800d79e:	f04f 0c0a 	mov.w	ip, #10
 800d7a2:	4621      	mov	r1, r4
 800d7a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7a8:	3b30      	subs	r3, #48	; 0x30
 800d7aa:	2b09      	cmp	r3, #9
 800d7ac:	d94d      	bls.n	800d84a <_vfiprintf_r+0x1a6>
 800d7ae:	b1b0      	cbz	r0, 800d7de <_vfiprintf_r+0x13a>
 800d7b0:	9207      	str	r2, [sp, #28]
 800d7b2:	e014      	b.n	800d7de <_vfiprintf_r+0x13a>
 800d7b4:	eba0 0308 	sub.w	r3, r0, r8
 800d7b8:	fa09 f303 	lsl.w	r3, r9, r3
 800d7bc:	4313      	orrs	r3, r2
 800d7be:	9304      	str	r3, [sp, #16]
 800d7c0:	46a2      	mov	sl, r4
 800d7c2:	e7d2      	b.n	800d76a <_vfiprintf_r+0xc6>
 800d7c4:	9b03      	ldr	r3, [sp, #12]
 800d7c6:	1d19      	adds	r1, r3, #4
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	9103      	str	r1, [sp, #12]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	bfbb      	ittet	lt
 800d7d0:	425b      	neglt	r3, r3
 800d7d2:	f042 0202 	orrlt.w	r2, r2, #2
 800d7d6:	9307      	strge	r3, [sp, #28]
 800d7d8:	9307      	strlt	r3, [sp, #28]
 800d7da:	bfb8      	it	lt
 800d7dc:	9204      	strlt	r2, [sp, #16]
 800d7de:	7823      	ldrb	r3, [r4, #0]
 800d7e0:	2b2e      	cmp	r3, #46	; 0x2e
 800d7e2:	d10c      	bne.n	800d7fe <_vfiprintf_r+0x15a>
 800d7e4:	7863      	ldrb	r3, [r4, #1]
 800d7e6:	2b2a      	cmp	r3, #42	; 0x2a
 800d7e8:	d134      	bne.n	800d854 <_vfiprintf_r+0x1b0>
 800d7ea:	9b03      	ldr	r3, [sp, #12]
 800d7ec:	1d1a      	adds	r2, r3, #4
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	9203      	str	r2, [sp, #12]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	bfb8      	it	lt
 800d7f6:	f04f 33ff 	movlt.w	r3, #4294967295
 800d7fa:	3402      	adds	r4, #2
 800d7fc:	9305      	str	r3, [sp, #20]
 800d7fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d8d4 <_vfiprintf_r+0x230>
 800d802:	7821      	ldrb	r1, [r4, #0]
 800d804:	2203      	movs	r2, #3
 800d806:	4650      	mov	r0, sl
 800d808:	f7f2 fcd2 	bl	80001b0 <memchr>
 800d80c:	b138      	cbz	r0, 800d81e <_vfiprintf_r+0x17a>
 800d80e:	9b04      	ldr	r3, [sp, #16]
 800d810:	eba0 000a 	sub.w	r0, r0, sl
 800d814:	2240      	movs	r2, #64	; 0x40
 800d816:	4082      	lsls	r2, r0
 800d818:	4313      	orrs	r3, r2
 800d81a:	3401      	adds	r4, #1
 800d81c:	9304      	str	r3, [sp, #16]
 800d81e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d822:	4829      	ldr	r0, [pc, #164]	; (800d8c8 <_vfiprintf_r+0x224>)
 800d824:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d828:	2206      	movs	r2, #6
 800d82a:	f7f2 fcc1 	bl	80001b0 <memchr>
 800d82e:	2800      	cmp	r0, #0
 800d830:	d03f      	beq.n	800d8b2 <_vfiprintf_r+0x20e>
 800d832:	4b26      	ldr	r3, [pc, #152]	; (800d8cc <_vfiprintf_r+0x228>)
 800d834:	bb1b      	cbnz	r3, 800d87e <_vfiprintf_r+0x1da>
 800d836:	9b03      	ldr	r3, [sp, #12]
 800d838:	3307      	adds	r3, #7
 800d83a:	f023 0307 	bic.w	r3, r3, #7
 800d83e:	3308      	adds	r3, #8
 800d840:	9303      	str	r3, [sp, #12]
 800d842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d844:	443b      	add	r3, r7
 800d846:	9309      	str	r3, [sp, #36]	; 0x24
 800d848:	e768      	b.n	800d71c <_vfiprintf_r+0x78>
 800d84a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d84e:	460c      	mov	r4, r1
 800d850:	2001      	movs	r0, #1
 800d852:	e7a6      	b.n	800d7a2 <_vfiprintf_r+0xfe>
 800d854:	2300      	movs	r3, #0
 800d856:	3401      	adds	r4, #1
 800d858:	9305      	str	r3, [sp, #20]
 800d85a:	4619      	mov	r1, r3
 800d85c:	f04f 0c0a 	mov.w	ip, #10
 800d860:	4620      	mov	r0, r4
 800d862:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d866:	3a30      	subs	r2, #48	; 0x30
 800d868:	2a09      	cmp	r2, #9
 800d86a:	d903      	bls.n	800d874 <_vfiprintf_r+0x1d0>
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d0c6      	beq.n	800d7fe <_vfiprintf_r+0x15a>
 800d870:	9105      	str	r1, [sp, #20]
 800d872:	e7c4      	b.n	800d7fe <_vfiprintf_r+0x15a>
 800d874:	fb0c 2101 	mla	r1, ip, r1, r2
 800d878:	4604      	mov	r4, r0
 800d87a:	2301      	movs	r3, #1
 800d87c:	e7f0      	b.n	800d860 <_vfiprintf_r+0x1bc>
 800d87e:	ab03      	add	r3, sp, #12
 800d880:	9300      	str	r3, [sp, #0]
 800d882:	462a      	mov	r2, r5
 800d884:	4b12      	ldr	r3, [pc, #72]	; (800d8d0 <_vfiprintf_r+0x22c>)
 800d886:	a904      	add	r1, sp, #16
 800d888:	4630      	mov	r0, r6
 800d88a:	f3af 8000 	nop.w
 800d88e:	4607      	mov	r7, r0
 800d890:	1c78      	adds	r0, r7, #1
 800d892:	d1d6      	bne.n	800d842 <_vfiprintf_r+0x19e>
 800d894:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d896:	07d9      	lsls	r1, r3, #31
 800d898:	d405      	bmi.n	800d8a6 <_vfiprintf_r+0x202>
 800d89a:	89ab      	ldrh	r3, [r5, #12]
 800d89c:	059a      	lsls	r2, r3, #22
 800d89e:	d402      	bmi.n	800d8a6 <_vfiprintf_r+0x202>
 800d8a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d8a2:	f7ff fc75 	bl	800d190 <__retarget_lock_release_recursive>
 800d8a6:	89ab      	ldrh	r3, [r5, #12]
 800d8a8:	065b      	lsls	r3, r3, #25
 800d8aa:	f53f af1d 	bmi.w	800d6e8 <_vfiprintf_r+0x44>
 800d8ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d8b0:	e71c      	b.n	800d6ec <_vfiprintf_r+0x48>
 800d8b2:	ab03      	add	r3, sp, #12
 800d8b4:	9300      	str	r3, [sp, #0]
 800d8b6:	462a      	mov	r2, r5
 800d8b8:	4b05      	ldr	r3, [pc, #20]	; (800d8d0 <_vfiprintf_r+0x22c>)
 800d8ba:	a904      	add	r1, sp, #16
 800d8bc:	4630      	mov	r0, r6
 800d8be:	f000 f879 	bl	800d9b4 <_printf_i>
 800d8c2:	e7e4      	b.n	800d88e <_vfiprintf_r+0x1ea>
 800d8c4:	0800f4dc 	.word	0x0800f4dc
 800d8c8:	0800f4e6 	.word	0x0800f4e6
 800d8cc:	00000000 	.word	0x00000000
 800d8d0:	0800d67f 	.word	0x0800d67f
 800d8d4:	0800f4e2 	.word	0x0800f4e2

0800d8d8 <_printf_common>:
 800d8d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8dc:	4616      	mov	r6, r2
 800d8de:	4699      	mov	r9, r3
 800d8e0:	688a      	ldr	r2, [r1, #8]
 800d8e2:	690b      	ldr	r3, [r1, #16]
 800d8e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d8e8:	4293      	cmp	r3, r2
 800d8ea:	bfb8      	it	lt
 800d8ec:	4613      	movlt	r3, r2
 800d8ee:	6033      	str	r3, [r6, #0]
 800d8f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d8f4:	4607      	mov	r7, r0
 800d8f6:	460c      	mov	r4, r1
 800d8f8:	b10a      	cbz	r2, 800d8fe <_printf_common+0x26>
 800d8fa:	3301      	adds	r3, #1
 800d8fc:	6033      	str	r3, [r6, #0]
 800d8fe:	6823      	ldr	r3, [r4, #0]
 800d900:	0699      	lsls	r1, r3, #26
 800d902:	bf42      	ittt	mi
 800d904:	6833      	ldrmi	r3, [r6, #0]
 800d906:	3302      	addmi	r3, #2
 800d908:	6033      	strmi	r3, [r6, #0]
 800d90a:	6825      	ldr	r5, [r4, #0]
 800d90c:	f015 0506 	ands.w	r5, r5, #6
 800d910:	d106      	bne.n	800d920 <_printf_common+0x48>
 800d912:	f104 0a19 	add.w	sl, r4, #25
 800d916:	68e3      	ldr	r3, [r4, #12]
 800d918:	6832      	ldr	r2, [r6, #0]
 800d91a:	1a9b      	subs	r3, r3, r2
 800d91c:	42ab      	cmp	r3, r5
 800d91e:	dc26      	bgt.n	800d96e <_printf_common+0x96>
 800d920:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d924:	1e13      	subs	r3, r2, #0
 800d926:	6822      	ldr	r2, [r4, #0]
 800d928:	bf18      	it	ne
 800d92a:	2301      	movne	r3, #1
 800d92c:	0692      	lsls	r2, r2, #26
 800d92e:	d42b      	bmi.n	800d988 <_printf_common+0xb0>
 800d930:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d934:	4649      	mov	r1, r9
 800d936:	4638      	mov	r0, r7
 800d938:	47c0      	blx	r8
 800d93a:	3001      	adds	r0, #1
 800d93c:	d01e      	beq.n	800d97c <_printf_common+0xa4>
 800d93e:	6823      	ldr	r3, [r4, #0]
 800d940:	6922      	ldr	r2, [r4, #16]
 800d942:	f003 0306 	and.w	r3, r3, #6
 800d946:	2b04      	cmp	r3, #4
 800d948:	bf02      	ittt	eq
 800d94a:	68e5      	ldreq	r5, [r4, #12]
 800d94c:	6833      	ldreq	r3, [r6, #0]
 800d94e:	1aed      	subeq	r5, r5, r3
 800d950:	68a3      	ldr	r3, [r4, #8]
 800d952:	bf0c      	ite	eq
 800d954:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d958:	2500      	movne	r5, #0
 800d95a:	4293      	cmp	r3, r2
 800d95c:	bfc4      	itt	gt
 800d95e:	1a9b      	subgt	r3, r3, r2
 800d960:	18ed      	addgt	r5, r5, r3
 800d962:	2600      	movs	r6, #0
 800d964:	341a      	adds	r4, #26
 800d966:	42b5      	cmp	r5, r6
 800d968:	d11a      	bne.n	800d9a0 <_printf_common+0xc8>
 800d96a:	2000      	movs	r0, #0
 800d96c:	e008      	b.n	800d980 <_printf_common+0xa8>
 800d96e:	2301      	movs	r3, #1
 800d970:	4652      	mov	r2, sl
 800d972:	4649      	mov	r1, r9
 800d974:	4638      	mov	r0, r7
 800d976:	47c0      	blx	r8
 800d978:	3001      	adds	r0, #1
 800d97a:	d103      	bne.n	800d984 <_printf_common+0xac>
 800d97c:	f04f 30ff 	mov.w	r0, #4294967295
 800d980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d984:	3501      	adds	r5, #1
 800d986:	e7c6      	b.n	800d916 <_printf_common+0x3e>
 800d988:	18e1      	adds	r1, r4, r3
 800d98a:	1c5a      	adds	r2, r3, #1
 800d98c:	2030      	movs	r0, #48	; 0x30
 800d98e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d992:	4422      	add	r2, r4
 800d994:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d998:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d99c:	3302      	adds	r3, #2
 800d99e:	e7c7      	b.n	800d930 <_printf_common+0x58>
 800d9a0:	2301      	movs	r3, #1
 800d9a2:	4622      	mov	r2, r4
 800d9a4:	4649      	mov	r1, r9
 800d9a6:	4638      	mov	r0, r7
 800d9a8:	47c0      	blx	r8
 800d9aa:	3001      	adds	r0, #1
 800d9ac:	d0e6      	beq.n	800d97c <_printf_common+0xa4>
 800d9ae:	3601      	adds	r6, #1
 800d9b0:	e7d9      	b.n	800d966 <_printf_common+0x8e>
	...

0800d9b4 <_printf_i>:
 800d9b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d9b8:	7e0f      	ldrb	r7, [r1, #24]
 800d9ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d9bc:	2f78      	cmp	r7, #120	; 0x78
 800d9be:	4691      	mov	r9, r2
 800d9c0:	4680      	mov	r8, r0
 800d9c2:	460c      	mov	r4, r1
 800d9c4:	469a      	mov	sl, r3
 800d9c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d9ca:	d807      	bhi.n	800d9dc <_printf_i+0x28>
 800d9cc:	2f62      	cmp	r7, #98	; 0x62
 800d9ce:	d80a      	bhi.n	800d9e6 <_printf_i+0x32>
 800d9d0:	2f00      	cmp	r7, #0
 800d9d2:	f000 80d4 	beq.w	800db7e <_printf_i+0x1ca>
 800d9d6:	2f58      	cmp	r7, #88	; 0x58
 800d9d8:	f000 80c0 	beq.w	800db5c <_printf_i+0x1a8>
 800d9dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d9e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d9e4:	e03a      	b.n	800da5c <_printf_i+0xa8>
 800d9e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d9ea:	2b15      	cmp	r3, #21
 800d9ec:	d8f6      	bhi.n	800d9dc <_printf_i+0x28>
 800d9ee:	a101      	add	r1, pc, #4	; (adr r1, 800d9f4 <_printf_i+0x40>)
 800d9f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d9f4:	0800da4d 	.word	0x0800da4d
 800d9f8:	0800da61 	.word	0x0800da61
 800d9fc:	0800d9dd 	.word	0x0800d9dd
 800da00:	0800d9dd 	.word	0x0800d9dd
 800da04:	0800d9dd 	.word	0x0800d9dd
 800da08:	0800d9dd 	.word	0x0800d9dd
 800da0c:	0800da61 	.word	0x0800da61
 800da10:	0800d9dd 	.word	0x0800d9dd
 800da14:	0800d9dd 	.word	0x0800d9dd
 800da18:	0800d9dd 	.word	0x0800d9dd
 800da1c:	0800d9dd 	.word	0x0800d9dd
 800da20:	0800db65 	.word	0x0800db65
 800da24:	0800da8d 	.word	0x0800da8d
 800da28:	0800db1f 	.word	0x0800db1f
 800da2c:	0800d9dd 	.word	0x0800d9dd
 800da30:	0800d9dd 	.word	0x0800d9dd
 800da34:	0800db87 	.word	0x0800db87
 800da38:	0800d9dd 	.word	0x0800d9dd
 800da3c:	0800da8d 	.word	0x0800da8d
 800da40:	0800d9dd 	.word	0x0800d9dd
 800da44:	0800d9dd 	.word	0x0800d9dd
 800da48:	0800db27 	.word	0x0800db27
 800da4c:	682b      	ldr	r3, [r5, #0]
 800da4e:	1d1a      	adds	r2, r3, #4
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	602a      	str	r2, [r5, #0]
 800da54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800da58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800da5c:	2301      	movs	r3, #1
 800da5e:	e09f      	b.n	800dba0 <_printf_i+0x1ec>
 800da60:	6820      	ldr	r0, [r4, #0]
 800da62:	682b      	ldr	r3, [r5, #0]
 800da64:	0607      	lsls	r7, r0, #24
 800da66:	f103 0104 	add.w	r1, r3, #4
 800da6a:	6029      	str	r1, [r5, #0]
 800da6c:	d501      	bpl.n	800da72 <_printf_i+0xbe>
 800da6e:	681e      	ldr	r6, [r3, #0]
 800da70:	e003      	b.n	800da7a <_printf_i+0xc6>
 800da72:	0646      	lsls	r6, r0, #25
 800da74:	d5fb      	bpl.n	800da6e <_printf_i+0xba>
 800da76:	f9b3 6000 	ldrsh.w	r6, [r3]
 800da7a:	2e00      	cmp	r6, #0
 800da7c:	da03      	bge.n	800da86 <_printf_i+0xd2>
 800da7e:	232d      	movs	r3, #45	; 0x2d
 800da80:	4276      	negs	r6, r6
 800da82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da86:	485a      	ldr	r0, [pc, #360]	; (800dbf0 <_printf_i+0x23c>)
 800da88:	230a      	movs	r3, #10
 800da8a:	e012      	b.n	800dab2 <_printf_i+0xfe>
 800da8c:	682b      	ldr	r3, [r5, #0]
 800da8e:	6820      	ldr	r0, [r4, #0]
 800da90:	1d19      	adds	r1, r3, #4
 800da92:	6029      	str	r1, [r5, #0]
 800da94:	0605      	lsls	r5, r0, #24
 800da96:	d501      	bpl.n	800da9c <_printf_i+0xe8>
 800da98:	681e      	ldr	r6, [r3, #0]
 800da9a:	e002      	b.n	800daa2 <_printf_i+0xee>
 800da9c:	0641      	lsls	r1, r0, #25
 800da9e:	d5fb      	bpl.n	800da98 <_printf_i+0xe4>
 800daa0:	881e      	ldrh	r6, [r3, #0]
 800daa2:	4853      	ldr	r0, [pc, #332]	; (800dbf0 <_printf_i+0x23c>)
 800daa4:	2f6f      	cmp	r7, #111	; 0x6f
 800daa6:	bf0c      	ite	eq
 800daa8:	2308      	moveq	r3, #8
 800daaa:	230a      	movne	r3, #10
 800daac:	2100      	movs	r1, #0
 800daae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dab2:	6865      	ldr	r5, [r4, #4]
 800dab4:	60a5      	str	r5, [r4, #8]
 800dab6:	2d00      	cmp	r5, #0
 800dab8:	bfa2      	ittt	ge
 800daba:	6821      	ldrge	r1, [r4, #0]
 800dabc:	f021 0104 	bicge.w	r1, r1, #4
 800dac0:	6021      	strge	r1, [r4, #0]
 800dac2:	b90e      	cbnz	r6, 800dac8 <_printf_i+0x114>
 800dac4:	2d00      	cmp	r5, #0
 800dac6:	d04b      	beq.n	800db60 <_printf_i+0x1ac>
 800dac8:	4615      	mov	r5, r2
 800daca:	fbb6 f1f3 	udiv	r1, r6, r3
 800dace:	fb03 6711 	mls	r7, r3, r1, r6
 800dad2:	5dc7      	ldrb	r7, [r0, r7]
 800dad4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dad8:	4637      	mov	r7, r6
 800dada:	42bb      	cmp	r3, r7
 800dadc:	460e      	mov	r6, r1
 800dade:	d9f4      	bls.n	800daca <_printf_i+0x116>
 800dae0:	2b08      	cmp	r3, #8
 800dae2:	d10b      	bne.n	800dafc <_printf_i+0x148>
 800dae4:	6823      	ldr	r3, [r4, #0]
 800dae6:	07de      	lsls	r6, r3, #31
 800dae8:	d508      	bpl.n	800dafc <_printf_i+0x148>
 800daea:	6923      	ldr	r3, [r4, #16]
 800daec:	6861      	ldr	r1, [r4, #4]
 800daee:	4299      	cmp	r1, r3
 800daf0:	bfde      	ittt	le
 800daf2:	2330      	movle	r3, #48	; 0x30
 800daf4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800daf8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dafc:	1b52      	subs	r2, r2, r5
 800dafe:	6122      	str	r2, [r4, #16]
 800db00:	f8cd a000 	str.w	sl, [sp]
 800db04:	464b      	mov	r3, r9
 800db06:	aa03      	add	r2, sp, #12
 800db08:	4621      	mov	r1, r4
 800db0a:	4640      	mov	r0, r8
 800db0c:	f7ff fee4 	bl	800d8d8 <_printf_common>
 800db10:	3001      	adds	r0, #1
 800db12:	d14a      	bne.n	800dbaa <_printf_i+0x1f6>
 800db14:	f04f 30ff 	mov.w	r0, #4294967295
 800db18:	b004      	add	sp, #16
 800db1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db1e:	6823      	ldr	r3, [r4, #0]
 800db20:	f043 0320 	orr.w	r3, r3, #32
 800db24:	6023      	str	r3, [r4, #0]
 800db26:	4833      	ldr	r0, [pc, #204]	; (800dbf4 <_printf_i+0x240>)
 800db28:	2778      	movs	r7, #120	; 0x78
 800db2a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800db2e:	6823      	ldr	r3, [r4, #0]
 800db30:	6829      	ldr	r1, [r5, #0]
 800db32:	061f      	lsls	r7, r3, #24
 800db34:	f851 6b04 	ldr.w	r6, [r1], #4
 800db38:	d402      	bmi.n	800db40 <_printf_i+0x18c>
 800db3a:	065f      	lsls	r7, r3, #25
 800db3c:	bf48      	it	mi
 800db3e:	b2b6      	uxthmi	r6, r6
 800db40:	07df      	lsls	r7, r3, #31
 800db42:	bf48      	it	mi
 800db44:	f043 0320 	orrmi.w	r3, r3, #32
 800db48:	6029      	str	r1, [r5, #0]
 800db4a:	bf48      	it	mi
 800db4c:	6023      	strmi	r3, [r4, #0]
 800db4e:	b91e      	cbnz	r6, 800db58 <_printf_i+0x1a4>
 800db50:	6823      	ldr	r3, [r4, #0]
 800db52:	f023 0320 	bic.w	r3, r3, #32
 800db56:	6023      	str	r3, [r4, #0]
 800db58:	2310      	movs	r3, #16
 800db5a:	e7a7      	b.n	800daac <_printf_i+0xf8>
 800db5c:	4824      	ldr	r0, [pc, #144]	; (800dbf0 <_printf_i+0x23c>)
 800db5e:	e7e4      	b.n	800db2a <_printf_i+0x176>
 800db60:	4615      	mov	r5, r2
 800db62:	e7bd      	b.n	800dae0 <_printf_i+0x12c>
 800db64:	682b      	ldr	r3, [r5, #0]
 800db66:	6826      	ldr	r6, [r4, #0]
 800db68:	6961      	ldr	r1, [r4, #20]
 800db6a:	1d18      	adds	r0, r3, #4
 800db6c:	6028      	str	r0, [r5, #0]
 800db6e:	0635      	lsls	r5, r6, #24
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	d501      	bpl.n	800db78 <_printf_i+0x1c4>
 800db74:	6019      	str	r1, [r3, #0]
 800db76:	e002      	b.n	800db7e <_printf_i+0x1ca>
 800db78:	0670      	lsls	r0, r6, #25
 800db7a:	d5fb      	bpl.n	800db74 <_printf_i+0x1c0>
 800db7c:	8019      	strh	r1, [r3, #0]
 800db7e:	2300      	movs	r3, #0
 800db80:	6123      	str	r3, [r4, #16]
 800db82:	4615      	mov	r5, r2
 800db84:	e7bc      	b.n	800db00 <_printf_i+0x14c>
 800db86:	682b      	ldr	r3, [r5, #0]
 800db88:	1d1a      	adds	r2, r3, #4
 800db8a:	602a      	str	r2, [r5, #0]
 800db8c:	681d      	ldr	r5, [r3, #0]
 800db8e:	6862      	ldr	r2, [r4, #4]
 800db90:	2100      	movs	r1, #0
 800db92:	4628      	mov	r0, r5
 800db94:	f7f2 fb0c 	bl	80001b0 <memchr>
 800db98:	b108      	cbz	r0, 800db9e <_printf_i+0x1ea>
 800db9a:	1b40      	subs	r0, r0, r5
 800db9c:	6060      	str	r0, [r4, #4]
 800db9e:	6863      	ldr	r3, [r4, #4]
 800dba0:	6123      	str	r3, [r4, #16]
 800dba2:	2300      	movs	r3, #0
 800dba4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dba8:	e7aa      	b.n	800db00 <_printf_i+0x14c>
 800dbaa:	6923      	ldr	r3, [r4, #16]
 800dbac:	462a      	mov	r2, r5
 800dbae:	4649      	mov	r1, r9
 800dbb0:	4640      	mov	r0, r8
 800dbb2:	47d0      	blx	sl
 800dbb4:	3001      	adds	r0, #1
 800dbb6:	d0ad      	beq.n	800db14 <_printf_i+0x160>
 800dbb8:	6823      	ldr	r3, [r4, #0]
 800dbba:	079b      	lsls	r3, r3, #30
 800dbbc:	d413      	bmi.n	800dbe6 <_printf_i+0x232>
 800dbbe:	68e0      	ldr	r0, [r4, #12]
 800dbc0:	9b03      	ldr	r3, [sp, #12]
 800dbc2:	4298      	cmp	r0, r3
 800dbc4:	bfb8      	it	lt
 800dbc6:	4618      	movlt	r0, r3
 800dbc8:	e7a6      	b.n	800db18 <_printf_i+0x164>
 800dbca:	2301      	movs	r3, #1
 800dbcc:	4632      	mov	r2, r6
 800dbce:	4649      	mov	r1, r9
 800dbd0:	4640      	mov	r0, r8
 800dbd2:	47d0      	blx	sl
 800dbd4:	3001      	adds	r0, #1
 800dbd6:	d09d      	beq.n	800db14 <_printf_i+0x160>
 800dbd8:	3501      	adds	r5, #1
 800dbda:	68e3      	ldr	r3, [r4, #12]
 800dbdc:	9903      	ldr	r1, [sp, #12]
 800dbde:	1a5b      	subs	r3, r3, r1
 800dbe0:	42ab      	cmp	r3, r5
 800dbe2:	dcf2      	bgt.n	800dbca <_printf_i+0x216>
 800dbe4:	e7eb      	b.n	800dbbe <_printf_i+0x20a>
 800dbe6:	2500      	movs	r5, #0
 800dbe8:	f104 0619 	add.w	r6, r4, #25
 800dbec:	e7f5      	b.n	800dbda <_printf_i+0x226>
 800dbee:	bf00      	nop
 800dbf0:	0800f4ed 	.word	0x0800f4ed
 800dbf4:	0800f4fe 	.word	0x0800f4fe

0800dbf8 <__sflush_r>:
 800dbf8:	898a      	ldrh	r2, [r1, #12]
 800dbfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbfe:	4605      	mov	r5, r0
 800dc00:	0710      	lsls	r0, r2, #28
 800dc02:	460c      	mov	r4, r1
 800dc04:	d458      	bmi.n	800dcb8 <__sflush_r+0xc0>
 800dc06:	684b      	ldr	r3, [r1, #4]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	dc05      	bgt.n	800dc18 <__sflush_r+0x20>
 800dc0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	dc02      	bgt.n	800dc18 <__sflush_r+0x20>
 800dc12:	2000      	movs	r0, #0
 800dc14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc1a:	2e00      	cmp	r6, #0
 800dc1c:	d0f9      	beq.n	800dc12 <__sflush_r+0x1a>
 800dc1e:	2300      	movs	r3, #0
 800dc20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dc24:	682f      	ldr	r7, [r5, #0]
 800dc26:	6a21      	ldr	r1, [r4, #32]
 800dc28:	602b      	str	r3, [r5, #0]
 800dc2a:	d032      	beq.n	800dc92 <__sflush_r+0x9a>
 800dc2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dc2e:	89a3      	ldrh	r3, [r4, #12]
 800dc30:	075a      	lsls	r2, r3, #29
 800dc32:	d505      	bpl.n	800dc40 <__sflush_r+0x48>
 800dc34:	6863      	ldr	r3, [r4, #4]
 800dc36:	1ac0      	subs	r0, r0, r3
 800dc38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dc3a:	b10b      	cbz	r3, 800dc40 <__sflush_r+0x48>
 800dc3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dc3e:	1ac0      	subs	r0, r0, r3
 800dc40:	2300      	movs	r3, #0
 800dc42:	4602      	mov	r2, r0
 800dc44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc46:	6a21      	ldr	r1, [r4, #32]
 800dc48:	4628      	mov	r0, r5
 800dc4a:	47b0      	blx	r6
 800dc4c:	1c43      	adds	r3, r0, #1
 800dc4e:	89a3      	ldrh	r3, [r4, #12]
 800dc50:	d106      	bne.n	800dc60 <__sflush_r+0x68>
 800dc52:	6829      	ldr	r1, [r5, #0]
 800dc54:	291d      	cmp	r1, #29
 800dc56:	d82b      	bhi.n	800dcb0 <__sflush_r+0xb8>
 800dc58:	4a29      	ldr	r2, [pc, #164]	; (800dd00 <__sflush_r+0x108>)
 800dc5a:	410a      	asrs	r2, r1
 800dc5c:	07d6      	lsls	r6, r2, #31
 800dc5e:	d427      	bmi.n	800dcb0 <__sflush_r+0xb8>
 800dc60:	2200      	movs	r2, #0
 800dc62:	6062      	str	r2, [r4, #4]
 800dc64:	04d9      	lsls	r1, r3, #19
 800dc66:	6922      	ldr	r2, [r4, #16]
 800dc68:	6022      	str	r2, [r4, #0]
 800dc6a:	d504      	bpl.n	800dc76 <__sflush_r+0x7e>
 800dc6c:	1c42      	adds	r2, r0, #1
 800dc6e:	d101      	bne.n	800dc74 <__sflush_r+0x7c>
 800dc70:	682b      	ldr	r3, [r5, #0]
 800dc72:	b903      	cbnz	r3, 800dc76 <__sflush_r+0x7e>
 800dc74:	6560      	str	r0, [r4, #84]	; 0x54
 800dc76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc78:	602f      	str	r7, [r5, #0]
 800dc7a:	2900      	cmp	r1, #0
 800dc7c:	d0c9      	beq.n	800dc12 <__sflush_r+0x1a>
 800dc7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc82:	4299      	cmp	r1, r3
 800dc84:	d002      	beq.n	800dc8c <__sflush_r+0x94>
 800dc86:	4628      	mov	r0, r5
 800dc88:	f7ff fa92 	bl	800d1b0 <_free_r>
 800dc8c:	2000      	movs	r0, #0
 800dc8e:	6360      	str	r0, [r4, #52]	; 0x34
 800dc90:	e7c0      	b.n	800dc14 <__sflush_r+0x1c>
 800dc92:	2301      	movs	r3, #1
 800dc94:	4628      	mov	r0, r5
 800dc96:	47b0      	blx	r6
 800dc98:	1c41      	adds	r1, r0, #1
 800dc9a:	d1c8      	bne.n	800dc2e <__sflush_r+0x36>
 800dc9c:	682b      	ldr	r3, [r5, #0]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d0c5      	beq.n	800dc2e <__sflush_r+0x36>
 800dca2:	2b1d      	cmp	r3, #29
 800dca4:	d001      	beq.n	800dcaa <__sflush_r+0xb2>
 800dca6:	2b16      	cmp	r3, #22
 800dca8:	d101      	bne.n	800dcae <__sflush_r+0xb6>
 800dcaa:	602f      	str	r7, [r5, #0]
 800dcac:	e7b1      	b.n	800dc12 <__sflush_r+0x1a>
 800dcae:	89a3      	ldrh	r3, [r4, #12]
 800dcb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcb4:	81a3      	strh	r3, [r4, #12]
 800dcb6:	e7ad      	b.n	800dc14 <__sflush_r+0x1c>
 800dcb8:	690f      	ldr	r7, [r1, #16]
 800dcba:	2f00      	cmp	r7, #0
 800dcbc:	d0a9      	beq.n	800dc12 <__sflush_r+0x1a>
 800dcbe:	0793      	lsls	r3, r2, #30
 800dcc0:	680e      	ldr	r6, [r1, #0]
 800dcc2:	bf08      	it	eq
 800dcc4:	694b      	ldreq	r3, [r1, #20]
 800dcc6:	600f      	str	r7, [r1, #0]
 800dcc8:	bf18      	it	ne
 800dcca:	2300      	movne	r3, #0
 800dccc:	eba6 0807 	sub.w	r8, r6, r7
 800dcd0:	608b      	str	r3, [r1, #8]
 800dcd2:	f1b8 0f00 	cmp.w	r8, #0
 800dcd6:	dd9c      	ble.n	800dc12 <__sflush_r+0x1a>
 800dcd8:	6a21      	ldr	r1, [r4, #32]
 800dcda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dcdc:	4643      	mov	r3, r8
 800dcde:	463a      	mov	r2, r7
 800dce0:	4628      	mov	r0, r5
 800dce2:	47b0      	blx	r6
 800dce4:	2800      	cmp	r0, #0
 800dce6:	dc06      	bgt.n	800dcf6 <__sflush_r+0xfe>
 800dce8:	89a3      	ldrh	r3, [r4, #12]
 800dcea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcee:	81a3      	strh	r3, [r4, #12]
 800dcf0:	f04f 30ff 	mov.w	r0, #4294967295
 800dcf4:	e78e      	b.n	800dc14 <__sflush_r+0x1c>
 800dcf6:	4407      	add	r7, r0
 800dcf8:	eba8 0800 	sub.w	r8, r8, r0
 800dcfc:	e7e9      	b.n	800dcd2 <__sflush_r+0xda>
 800dcfe:	bf00      	nop
 800dd00:	dfbffffe 	.word	0xdfbffffe

0800dd04 <_fflush_r>:
 800dd04:	b538      	push	{r3, r4, r5, lr}
 800dd06:	690b      	ldr	r3, [r1, #16]
 800dd08:	4605      	mov	r5, r0
 800dd0a:	460c      	mov	r4, r1
 800dd0c:	b913      	cbnz	r3, 800dd14 <_fflush_r+0x10>
 800dd0e:	2500      	movs	r5, #0
 800dd10:	4628      	mov	r0, r5
 800dd12:	bd38      	pop	{r3, r4, r5, pc}
 800dd14:	b118      	cbz	r0, 800dd1e <_fflush_r+0x1a>
 800dd16:	6a03      	ldr	r3, [r0, #32]
 800dd18:	b90b      	cbnz	r3, 800dd1e <_fflush_r+0x1a>
 800dd1a:	f7ff f807 	bl	800cd2c <__sinit>
 800dd1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d0f3      	beq.n	800dd0e <_fflush_r+0xa>
 800dd26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dd28:	07d0      	lsls	r0, r2, #31
 800dd2a:	d404      	bmi.n	800dd36 <_fflush_r+0x32>
 800dd2c:	0599      	lsls	r1, r3, #22
 800dd2e:	d402      	bmi.n	800dd36 <_fflush_r+0x32>
 800dd30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd32:	f7ff fa2c 	bl	800d18e <__retarget_lock_acquire_recursive>
 800dd36:	4628      	mov	r0, r5
 800dd38:	4621      	mov	r1, r4
 800dd3a:	f7ff ff5d 	bl	800dbf8 <__sflush_r>
 800dd3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dd40:	07da      	lsls	r2, r3, #31
 800dd42:	4605      	mov	r5, r0
 800dd44:	d4e4      	bmi.n	800dd10 <_fflush_r+0xc>
 800dd46:	89a3      	ldrh	r3, [r4, #12]
 800dd48:	059b      	lsls	r3, r3, #22
 800dd4a:	d4e1      	bmi.n	800dd10 <_fflush_r+0xc>
 800dd4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd4e:	f7ff fa1f 	bl	800d190 <__retarget_lock_release_recursive>
 800dd52:	e7dd      	b.n	800dd10 <_fflush_r+0xc>

0800dd54 <__swhatbuf_r>:
 800dd54:	b570      	push	{r4, r5, r6, lr}
 800dd56:	460c      	mov	r4, r1
 800dd58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd5c:	2900      	cmp	r1, #0
 800dd5e:	b096      	sub	sp, #88	; 0x58
 800dd60:	4615      	mov	r5, r2
 800dd62:	461e      	mov	r6, r3
 800dd64:	da0d      	bge.n	800dd82 <__swhatbuf_r+0x2e>
 800dd66:	89a3      	ldrh	r3, [r4, #12]
 800dd68:	f013 0f80 	tst.w	r3, #128	; 0x80
 800dd6c:	f04f 0100 	mov.w	r1, #0
 800dd70:	bf0c      	ite	eq
 800dd72:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800dd76:	2340      	movne	r3, #64	; 0x40
 800dd78:	2000      	movs	r0, #0
 800dd7a:	6031      	str	r1, [r6, #0]
 800dd7c:	602b      	str	r3, [r5, #0]
 800dd7e:	b016      	add	sp, #88	; 0x58
 800dd80:	bd70      	pop	{r4, r5, r6, pc}
 800dd82:	466a      	mov	r2, sp
 800dd84:	f000 f896 	bl	800deb4 <_fstat_r>
 800dd88:	2800      	cmp	r0, #0
 800dd8a:	dbec      	blt.n	800dd66 <__swhatbuf_r+0x12>
 800dd8c:	9901      	ldr	r1, [sp, #4]
 800dd8e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800dd92:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800dd96:	4259      	negs	r1, r3
 800dd98:	4159      	adcs	r1, r3
 800dd9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd9e:	e7eb      	b.n	800dd78 <__swhatbuf_r+0x24>

0800dda0 <__smakebuf_r>:
 800dda0:	898b      	ldrh	r3, [r1, #12]
 800dda2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dda4:	079d      	lsls	r5, r3, #30
 800dda6:	4606      	mov	r6, r0
 800dda8:	460c      	mov	r4, r1
 800ddaa:	d507      	bpl.n	800ddbc <__smakebuf_r+0x1c>
 800ddac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ddb0:	6023      	str	r3, [r4, #0]
 800ddb2:	6123      	str	r3, [r4, #16]
 800ddb4:	2301      	movs	r3, #1
 800ddb6:	6163      	str	r3, [r4, #20]
 800ddb8:	b002      	add	sp, #8
 800ddba:	bd70      	pop	{r4, r5, r6, pc}
 800ddbc:	ab01      	add	r3, sp, #4
 800ddbe:	466a      	mov	r2, sp
 800ddc0:	f7ff ffc8 	bl	800dd54 <__swhatbuf_r>
 800ddc4:	9900      	ldr	r1, [sp, #0]
 800ddc6:	4605      	mov	r5, r0
 800ddc8:	4630      	mov	r0, r6
 800ddca:	f7ff fa5d 	bl	800d288 <_malloc_r>
 800ddce:	b948      	cbnz	r0, 800dde4 <__smakebuf_r+0x44>
 800ddd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddd4:	059a      	lsls	r2, r3, #22
 800ddd6:	d4ef      	bmi.n	800ddb8 <__smakebuf_r+0x18>
 800ddd8:	f023 0303 	bic.w	r3, r3, #3
 800dddc:	f043 0302 	orr.w	r3, r3, #2
 800dde0:	81a3      	strh	r3, [r4, #12]
 800dde2:	e7e3      	b.n	800ddac <__smakebuf_r+0xc>
 800dde4:	89a3      	ldrh	r3, [r4, #12]
 800dde6:	6020      	str	r0, [r4, #0]
 800dde8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ddec:	81a3      	strh	r3, [r4, #12]
 800ddee:	9b00      	ldr	r3, [sp, #0]
 800ddf0:	6163      	str	r3, [r4, #20]
 800ddf2:	9b01      	ldr	r3, [sp, #4]
 800ddf4:	6120      	str	r0, [r4, #16]
 800ddf6:	b15b      	cbz	r3, 800de10 <__smakebuf_r+0x70>
 800ddf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ddfc:	4630      	mov	r0, r6
 800ddfe:	f000 f86b 	bl	800ded8 <_isatty_r>
 800de02:	b128      	cbz	r0, 800de10 <__smakebuf_r+0x70>
 800de04:	89a3      	ldrh	r3, [r4, #12]
 800de06:	f023 0303 	bic.w	r3, r3, #3
 800de0a:	f043 0301 	orr.w	r3, r3, #1
 800de0e:	81a3      	strh	r3, [r4, #12]
 800de10:	89a3      	ldrh	r3, [r4, #12]
 800de12:	431d      	orrs	r5, r3
 800de14:	81a5      	strh	r5, [r4, #12]
 800de16:	e7cf      	b.n	800ddb8 <__smakebuf_r+0x18>

0800de18 <_putc_r>:
 800de18:	b570      	push	{r4, r5, r6, lr}
 800de1a:	460d      	mov	r5, r1
 800de1c:	4614      	mov	r4, r2
 800de1e:	4606      	mov	r6, r0
 800de20:	b118      	cbz	r0, 800de2a <_putc_r+0x12>
 800de22:	6a03      	ldr	r3, [r0, #32]
 800de24:	b90b      	cbnz	r3, 800de2a <_putc_r+0x12>
 800de26:	f7fe ff81 	bl	800cd2c <__sinit>
 800de2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800de2c:	07d8      	lsls	r0, r3, #31
 800de2e:	d405      	bmi.n	800de3c <_putc_r+0x24>
 800de30:	89a3      	ldrh	r3, [r4, #12]
 800de32:	0599      	lsls	r1, r3, #22
 800de34:	d402      	bmi.n	800de3c <_putc_r+0x24>
 800de36:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de38:	f7ff f9a9 	bl	800d18e <__retarget_lock_acquire_recursive>
 800de3c:	68a3      	ldr	r3, [r4, #8]
 800de3e:	3b01      	subs	r3, #1
 800de40:	2b00      	cmp	r3, #0
 800de42:	60a3      	str	r3, [r4, #8]
 800de44:	da05      	bge.n	800de52 <_putc_r+0x3a>
 800de46:	69a2      	ldr	r2, [r4, #24]
 800de48:	4293      	cmp	r3, r2
 800de4a:	db12      	blt.n	800de72 <_putc_r+0x5a>
 800de4c:	b2eb      	uxtb	r3, r5
 800de4e:	2b0a      	cmp	r3, #10
 800de50:	d00f      	beq.n	800de72 <_putc_r+0x5a>
 800de52:	6823      	ldr	r3, [r4, #0]
 800de54:	1c5a      	adds	r2, r3, #1
 800de56:	6022      	str	r2, [r4, #0]
 800de58:	701d      	strb	r5, [r3, #0]
 800de5a:	b2ed      	uxtb	r5, r5
 800de5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800de5e:	07da      	lsls	r2, r3, #31
 800de60:	d405      	bmi.n	800de6e <_putc_r+0x56>
 800de62:	89a3      	ldrh	r3, [r4, #12]
 800de64:	059b      	lsls	r3, r3, #22
 800de66:	d402      	bmi.n	800de6e <_putc_r+0x56>
 800de68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de6a:	f7ff f991 	bl	800d190 <__retarget_lock_release_recursive>
 800de6e:	4628      	mov	r0, r5
 800de70:	bd70      	pop	{r4, r5, r6, pc}
 800de72:	4629      	mov	r1, r5
 800de74:	4622      	mov	r2, r4
 800de76:	4630      	mov	r0, r6
 800de78:	f7ff f87b 	bl	800cf72 <__swbuf_r>
 800de7c:	4605      	mov	r5, r0
 800de7e:	e7ed      	b.n	800de5c <_putc_r+0x44>

0800de80 <memmove>:
 800de80:	4288      	cmp	r0, r1
 800de82:	b510      	push	{r4, lr}
 800de84:	eb01 0402 	add.w	r4, r1, r2
 800de88:	d902      	bls.n	800de90 <memmove+0x10>
 800de8a:	4284      	cmp	r4, r0
 800de8c:	4623      	mov	r3, r4
 800de8e:	d807      	bhi.n	800dea0 <memmove+0x20>
 800de90:	1e43      	subs	r3, r0, #1
 800de92:	42a1      	cmp	r1, r4
 800de94:	d008      	beq.n	800dea8 <memmove+0x28>
 800de96:	f811 2b01 	ldrb.w	r2, [r1], #1
 800de9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800de9e:	e7f8      	b.n	800de92 <memmove+0x12>
 800dea0:	4402      	add	r2, r0
 800dea2:	4601      	mov	r1, r0
 800dea4:	428a      	cmp	r2, r1
 800dea6:	d100      	bne.n	800deaa <memmove+0x2a>
 800dea8:	bd10      	pop	{r4, pc}
 800deaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800deae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800deb2:	e7f7      	b.n	800dea4 <memmove+0x24>

0800deb4 <_fstat_r>:
 800deb4:	b538      	push	{r3, r4, r5, lr}
 800deb6:	4d07      	ldr	r5, [pc, #28]	; (800ded4 <_fstat_r+0x20>)
 800deb8:	2300      	movs	r3, #0
 800deba:	4604      	mov	r4, r0
 800debc:	4608      	mov	r0, r1
 800debe:	4611      	mov	r1, r2
 800dec0:	602b      	str	r3, [r5, #0]
 800dec2:	f7f4 fda5 	bl	8002a10 <_fstat>
 800dec6:	1c43      	adds	r3, r0, #1
 800dec8:	d102      	bne.n	800ded0 <_fstat_r+0x1c>
 800deca:	682b      	ldr	r3, [r5, #0]
 800decc:	b103      	cbz	r3, 800ded0 <_fstat_r+0x1c>
 800dece:	6023      	str	r3, [r4, #0]
 800ded0:	bd38      	pop	{r3, r4, r5, pc}
 800ded2:	bf00      	nop
 800ded4:	20001884 	.word	0x20001884

0800ded8 <_isatty_r>:
 800ded8:	b538      	push	{r3, r4, r5, lr}
 800deda:	4d06      	ldr	r5, [pc, #24]	; (800def4 <_isatty_r+0x1c>)
 800dedc:	2300      	movs	r3, #0
 800dede:	4604      	mov	r4, r0
 800dee0:	4608      	mov	r0, r1
 800dee2:	602b      	str	r3, [r5, #0]
 800dee4:	f7f4 fda4 	bl	8002a30 <_isatty>
 800dee8:	1c43      	adds	r3, r0, #1
 800deea:	d102      	bne.n	800def2 <_isatty_r+0x1a>
 800deec:	682b      	ldr	r3, [r5, #0]
 800deee:	b103      	cbz	r3, 800def2 <_isatty_r+0x1a>
 800def0:	6023      	str	r3, [r4, #0]
 800def2:	bd38      	pop	{r3, r4, r5, pc}
 800def4:	20001884 	.word	0x20001884

0800def8 <_sbrk_r>:
 800def8:	b538      	push	{r3, r4, r5, lr}
 800defa:	4d06      	ldr	r5, [pc, #24]	; (800df14 <_sbrk_r+0x1c>)
 800defc:	2300      	movs	r3, #0
 800defe:	4604      	mov	r4, r0
 800df00:	4608      	mov	r0, r1
 800df02:	602b      	str	r3, [r5, #0]
 800df04:	f7f4 fdac 	bl	8002a60 <_sbrk>
 800df08:	1c43      	adds	r3, r0, #1
 800df0a:	d102      	bne.n	800df12 <_sbrk_r+0x1a>
 800df0c:	682b      	ldr	r3, [r5, #0]
 800df0e:	b103      	cbz	r3, 800df12 <_sbrk_r+0x1a>
 800df10:	6023      	str	r3, [r4, #0]
 800df12:	bd38      	pop	{r3, r4, r5, pc}
 800df14:	20001884 	.word	0x20001884

0800df18 <_realloc_r>:
 800df18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df1c:	4680      	mov	r8, r0
 800df1e:	4614      	mov	r4, r2
 800df20:	460e      	mov	r6, r1
 800df22:	b921      	cbnz	r1, 800df2e <_realloc_r+0x16>
 800df24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df28:	4611      	mov	r1, r2
 800df2a:	f7ff b9ad 	b.w	800d288 <_malloc_r>
 800df2e:	b92a      	cbnz	r2, 800df3c <_realloc_r+0x24>
 800df30:	f7ff f93e 	bl	800d1b0 <_free_r>
 800df34:	4625      	mov	r5, r4
 800df36:	4628      	mov	r0, r5
 800df38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df3c:	f000 f81b 	bl	800df76 <_malloc_usable_size_r>
 800df40:	4284      	cmp	r4, r0
 800df42:	4607      	mov	r7, r0
 800df44:	d802      	bhi.n	800df4c <_realloc_r+0x34>
 800df46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800df4a:	d812      	bhi.n	800df72 <_realloc_r+0x5a>
 800df4c:	4621      	mov	r1, r4
 800df4e:	4640      	mov	r0, r8
 800df50:	f7ff f99a 	bl	800d288 <_malloc_r>
 800df54:	4605      	mov	r5, r0
 800df56:	2800      	cmp	r0, #0
 800df58:	d0ed      	beq.n	800df36 <_realloc_r+0x1e>
 800df5a:	42bc      	cmp	r4, r7
 800df5c:	4622      	mov	r2, r4
 800df5e:	4631      	mov	r1, r6
 800df60:	bf28      	it	cs
 800df62:	463a      	movcs	r2, r7
 800df64:	f7ff f915 	bl	800d192 <memcpy>
 800df68:	4631      	mov	r1, r6
 800df6a:	4640      	mov	r0, r8
 800df6c:	f7ff f920 	bl	800d1b0 <_free_r>
 800df70:	e7e1      	b.n	800df36 <_realloc_r+0x1e>
 800df72:	4635      	mov	r5, r6
 800df74:	e7df      	b.n	800df36 <_realloc_r+0x1e>

0800df76 <_malloc_usable_size_r>:
 800df76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df7a:	1f18      	subs	r0, r3, #4
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	bfbc      	itt	lt
 800df80:	580b      	ldrlt	r3, [r1, r0]
 800df82:	18c0      	addlt	r0, r0, r3
 800df84:	4770      	bx	lr
	...

0800df88 <_init>:
 800df88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df8a:	bf00      	nop
 800df8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df8e:	bc08      	pop	{r3}
 800df90:	469e      	mov	lr, r3
 800df92:	4770      	bx	lr

0800df94 <_fini>:
 800df94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df96:	bf00      	nop
 800df98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df9a:	bc08      	pop	{r3}
 800df9c:	469e      	mov	lr, r3
 800df9e:	4770      	bx	lr
