
BLE_TransparentMode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3f8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000634  0800c538  0800c538  0001c538  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 VERSION       00000008  0800cb6c  0800cb6c  0001cb6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  0800cb74  0800cb74  0001cb74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  0800cb7c  0800cb7c  0001cb7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0800cb80  0800cb80  0001cb80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         0000020c  20000008  0800cb84  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000698  20000214  0800cd90  00020214  2**2
                  ALLOC
  9 ._user_heap_stack 00001404  200008ac  0800cd90  000208ac  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 11 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 12 MB_MEM1       000000b0  20030028  20030028  00030000  2**2
                  ALLOC
 13 MB_MEM2       00000a97  200300d8  200300d8  00030000  2**2
                  ALLOC
 14 .comment      00000043  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001fce7  00000000  00000000  00020287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000053ec  00000000  00000000  0003ff6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001e08  00000000  00000000  00045360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001685  00000000  00000000  00047168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00024a17  00000000  00000000  000487ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000242ee  00000000  00000000  0006d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000c9903  00000000  00000000  000914f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00008924  00000000  00000000  0015adf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 000000ce  00000000  00000000  0016371c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000214 	.word	0x20000214
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c520 	.word	0x0800c520

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000218 	.word	0x20000218
 800017c:	0800c520 	.word	0x0800c520

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr
	...

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	; 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_uldivmod>:
 8000b78:	b953      	cbnz	r3, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7a:	b94a      	cbnz	r2, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	bf08      	it	eq
 8000b80:	2800      	cmpeq	r0, #0
 8000b82:	bf1c      	itt	ne
 8000b84:	f04f 31ff 	movne.w	r1, #4294967295
 8000b88:	f04f 30ff 	movne.w	r0, #4294967295
 8000b8c:	f000 b970 	b.w	8000e70 <__aeabi_idiv0>
 8000b90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b98:	f000 f806 	bl	8000ba8 <__udivmoddi4>
 8000b9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba4:	b004      	add	sp, #16
 8000ba6:	4770      	bx	lr

08000ba8 <__udivmoddi4>:
 8000ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bac:	9e08      	ldr	r6, [sp, #32]
 8000bae:	460d      	mov	r5, r1
 8000bb0:	4604      	mov	r4, r0
 8000bb2:	460f      	mov	r7, r1
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d14a      	bne.n	8000c4e <__udivmoddi4+0xa6>
 8000bb8:	428a      	cmp	r2, r1
 8000bba:	4694      	mov	ip, r2
 8000bbc:	d965      	bls.n	8000c8a <__udivmoddi4+0xe2>
 8000bbe:	fab2 f382 	clz	r3, r2
 8000bc2:	b143      	cbz	r3, 8000bd6 <__udivmoddi4+0x2e>
 8000bc4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bc8:	f1c3 0220 	rsb	r2, r3, #32
 8000bcc:	409f      	lsls	r7, r3
 8000bce:	fa20 f202 	lsr.w	r2, r0, r2
 8000bd2:	4317      	orrs	r7, r2
 8000bd4:	409c      	lsls	r4, r3
 8000bd6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bda:	fa1f f58c 	uxth.w	r5, ip
 8000bde:	fbb7 f1fe 	udiv	r1, r7, lr
 8000be2:	0c22      	lsrs	r2, r4, #16
 8000be4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000be8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bec:	fb01 f005 	mul.w	r0, r1, r5
 8000bf0:	4290      	cmp	r0, r2
 8000bf2:	d90a      	bls.n	8000c0a <__udivmoddi4+0x62>
 8000bf4:	eb1c 0202 	adds.w	r2, ip, r2
 8000bf8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bfc:	f080 811c 	bcs.w	8000e38 <__udivmoddi4+0x290>
 8000c00:	4290      	cmp	r0, r2
 8000c02:	f240 8119 	bls.w	8000e38 <__udivmoddi4+0x290>
 8000c06:	3902      	subs	r1, #2
 8000c08:	4462      	add	r2, ip
 8000c0a:	1a12      	subs	r2, r2, r0
 8000c0c:	b2a4      	uxth	r4, r4
 8000c0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c16:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c1a:	fb00 f505 	mul.w	r5, r0, r5
 8000c1e:	42a5      	cmp	r5, r4
 8000c20:	d90a      	bls.n	8000c38 <__udivmoddi4+0x90>
 8000c22:	eb1c 0404 	adds.w	r4, ip, r4
 8000c26:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c2a:	f080 8107 	bcs.w	8000e3c <__udivmoddi4+0x294>
 8000c2e:	42a5      	cmp	r5, r4
 8000c30:	f240 8104 	bls.w	8000e3c <__udivmoddi4+0x294>
 8000c34:	4464      	add	r4, ip
 8000c36:	3802      	subs	r0, #2
 8000c38:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c3c:	1b64      	subs	r4, r4, r5
 8000c3e:	2100      	movs	r1, #0
 8000c40:	b11e      	cbz	r6, 8000c4a <__udivmoddi4+0xa2>
 8000c42:	40dc      	lsrs	r4, r3
 8000c44:	2300      	movs	r3, #0
 8000c46:	e9c6 4300 	strd	r4, r3, [r6]
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d908      	bls.n	8000c64 <__udivmoddi4+0xbc>
 8000c52:	2e00      	cmp	r6, #0
 8000c54:	f000 80ed 	beq.w	8000e32 <__udivmoddi4+0x28a>
 8000c58:	2100      	movs	r1, #0
 8000c5a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c5e:	4608      	mov	r0, r1
 8000c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c64:	fab3 f183 	clz	r1, r3
 8000c68:	2900      	cmp	r1, #0
 8000c6a:	d149      	bne.n	8000d00 <__udivmoddi4+0x158>
 8000c6c:	42ab      	cmp	r3, r5
 8000c6e:	d302      	bcc.n	8000c76 <__udivmoddi4+0xce>
 8000c70:	4282      	cmp	r2, r0
 8000c72:	f200 80f8 	bhi.w	8000e66 <__udivmoddi4+0x2be>
 8000c76:	1a84      	subs	r4, r0, r2
 8000c78:	eb65 0203 	sbc.w	r2, r5, r3
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	4617      	mov	r7, r2
 8000c80:	2e00      	cmp	r6, #0
 8000c82:	d0e2      	beq.n	8000c4a <__udivmoddi4+0xa2>
 8000c84:	e9c6 4700 	strd	r4, r7, [r6]
 8000c88:	e7df      	b.n	8000c4a <__udivmoddi4+0xa2>
 8000c8a:	b902      	cbnz	r2, 8000c8e <__udivmoddi4+0xe6>
 8000c8c:	deff      	udf	#255	; 0xff
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8090 	bne.w	8000db8 <__udivmoddi4+0x210>
 8000c98:	1a8a      	subs	r2, r1, r2
 8000c9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ca8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cac:	0c22      	lsrs	r2, r4, #16
 8000cae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cb2:	fb0e f005 	mul.w	r0, lr, r5
 8000cb6:	4290      	cmp	r0, r2
 8000cb8:	d908      	bls.n	8000ccc <__udivmoddi4+0x124>
 8000cba:	eb1c 0202 	adds.w	r2, ip, r2
 8000cbe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x122>
 8000cc4:	4290      	cmp	r0, r2
 8000cc6:	f200 80cb 	bhi.w	8000e60 <__udivmoddi4+0x2b8>
 8000cca:	4645      	mov	r5, r8
 8000ccc:	1a12      	subs	r2, r2, r0
 8000cce:	b2a4      	uxth	r4, r4
 8000cd0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cd4:	fb07 2210 	mls	r2, r7, r0, r2
 8000cd8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cdc:	fb0e fe00 	mul.w	lr, lr, r0
 8000ce0:	45a6      	cmp	lr, r4
 8000ce2:	d908      	bls.n	8000cf6 <__udivmoddi4+0x14e>
 8000ce4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x14c>
 8000cee:	45a6      	cmp	lr, r4
 8000cf0:	f200 80bb 	bhi.w	8000e6a <__udivmoddi4+0x2c2>
 8000cf4:	4610      	mov	r0, r2
 8000cf6:	eba4 040e 	sub.w	r4, r4, lr
 8000cfa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cfe:	e79f      	b.n	8000c40 <__udivmoddi4+0x98>
 8000d00:	f1c1 0720 	rsb	r7, r1, #32
 8000d04:	408b      	lsls	r3, r1
 8000d06:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d0a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d0e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d12:	fa20 f307 	lsr.w	r3, r0, r7
 8000d16:	40fd      	lsrs	r5, r7
 8000d18:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d1c:	4323      	orrs	r3, r4
 8000d1e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d22:	fa1f fe8c 	uxth.w	lr, ip
 8000d26:	fb09 5518 	mls	r5, r9, r8, r5
 8000d2a:	0c1c      	lsrs	r4, r3, #16
 8000d2c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d30:	fb08 f50e 	mul.w	r5, r8, lr
 8000d34:	42a5      	cmp	r5, r4
 8000d36:	fa02 f201 	lsl.w	r2, r2, r1
 8000d3a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d3e:	d90b      	bls.n	8000d58 <__udivmoddi4+0x1b0>
 8000d40:	eb1c 0404 	adds.w	r4, ip, r4
 8000d44:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d48:	f080 8088 	bcs.w	8000e5c <__udivmoddi4+0x2b4>
 8000d4c:	42a5      	cmp	r5, r4
 8000d4e:	f240 8085 	bls.w	8000e5c <__udivmoddi4+0x2b4>
 8000d52:	f1a8 0802 	sub.w	r8, r8, #2
 8000d56:	4464      	add	r4, ip
 8000d58:	1b64      	subs	r4, r4, r5
 8000d5a:	b29d      	uxth	r5, r3
 8000d5c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d60:	fb09 4413 	mls	r4, r9, r3, r4
 8000d64:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d68:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	d908      	bls.n	8000d82 <__udivmoddi4+0x1da>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d78:	d26c      	bcs.n	8000e54 <__udivmoddi4+0x2ac>
 8000d7a:	45a6      	cmp	lr, r4
 8000d7c:	d96a      	bls.n	8000e54 <__udivmoddi4+0x2ac>
 8000d7e:	3b02      	subs	r3, #2
 8000d80:	4464      	add	r4, ip
 8000d82:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d86:	fba3 9502 	umull	r9, r5, r3, r2
 8000d8a:	eba4 040e 	sub.w	r4, r4, lr
 8000d8e:	42ac      	cmp	r4, r5
 8000d90:	46c8      	mov	r8, r9
 8000d92:	46ae      	mov	lr, r5
 8000d94:	d356      	bcc.n	8000e44 <__udivmoddi4+0x29c>
 8000d96:	d053      	beq.n	8000e40 <__udivmoddi4+0x298>
 8000d98:	b156      	cbz	r6, 8000db0 <__udivmoddi4+0x208>
 8000d9a:	ebb0 0208 	subs.w	r2, r0, r8
 8000d9e:	eb64 040e 	sbc.w	r4, r4, lr
 8000da2:	fa04 f707 	lsl.w	r7, r4, r7
 8000da6:	40ca      	lsrs	r2, r1
 8000da8:	40cc      	lsrs	r4, r1
 8000daa:	4317      	orrs	r7, r2
 8000dac:	e9c6 7400 	strd	r7, r4, [r6]
 8000db0:	4618      	mov	r0, r3
 8000db2:	2100      	movs	r1, #0
 8000db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db8:	f1c3 0120 	rsb	r1, r3, #32
 8000dbc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dc0:	fa20 f201 	lsr.w	r2, r0, r1
 8000dc4:	fa25 f101 	lsr.w	r1, r5, r1
 8000dc8:	409d      	lsls	r5, r3
 8000dca:	432a      	orrs	r2, r5
 8000dcc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd0:	fa1f fe8c 	uxth.w	lr, ip
 8000dd4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ddc:	0c11      	lsrs	r1, r2, #16
 8000dde:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000de2:	fb00 f50e 	mul.w	r5, r0, lr
 8000de6:	428d      	cmp	r5, r1
 8000de8:	fa04 f403 	lsl.w	r4, r4, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x258>
 8000dee:	eb1c 0101 	adds.w	r1, ip, r1
 8000df2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000df6:	d22f      	bcs.n	8000e58 <__udivmoddi4+0x2b0>
 8000df8:	428d      	cmp	r5, r1
 8000dfa:	d92d      	bls.n	8000e58 <__udivmoddi4+0x2b0>
 8000dfc:	3802      	subs	r0, #2
 8000dfe:	4461      	add	r1, ip
 8000e00:	1b49      	subs	r1, r1, r5
 8000e02:	b292      	uxth	r2, r2
 8000e04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e08:	fb07 1115 	mls	r1, r7, r5, r1
 8000e0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e10:	fb05 f10e 	mul.w	r1, r5, lr
 8000e14:	4291      	cmp	r1, r2
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x282>
 8000e18:	eb1c 0202 	adds.w	r2, ip, r2
 8000e1c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e20:	d216      	bcs.n	8000e50 <__udivmoddi4+0x2a8>
 8000e22:	4291      	cmp	r1, r2
 8000e24:	d914      	bls.n	8000e50 <__udivmoddi4+0x2a8>
 8000e26:	3d02      	subs	r5, #2
 8000e28:	4462      	add	r2, ip
 8000e2a:	1a52      	subs	r2, r2, r1
 8000e2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e30:	e738      	b.n	8000ca4 <__udivmoddi4+0xfc>
 8000e32:	4631      	mov	r1, r6
 8000e34:	4630      	mov	r0, r6
 8000e36:	e708      	b.n	8000c4a <__udivmoddi4+0xa2>
 8000e38:	4639      	mov	r1, r7
 8000e3a:	e6e6      	b.n	8000c0a <__udivmoddi4+0x62>
 8000e3c:	4610      	mov	r0, r2
 8000e3e:	e6fb      	b.n	8000c38 <__udivmoddi4+0x90>
 8000e40:	4548      	cmp	r0, r9
 8000e42:	d2a9      	bcs.n	8000d98 <__udivmoddi4+0x1f0>
 8000e44:	ebb9 0802 	subs.w	r8, r9, r2
 8000e48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	e7a3      	b.n	8000d98 <__udivmoddi4+0x1f0>
 8000e50:	4645      	mov	r5, r8
 8000e52:	e7ea      	b.n	8000e2a <__udivmoddi4+0x282>
 8000e54:	462b      	mov	r3, r5
 8000e56:	e794      	b.n	8000d82 <__udivmoddi4+0x1da>
 8000e58:	4640      	mov	r0, r8
 8000e5a:	e7d1      	b.n	8000e00 <__udivmoddi4+0x258>
 8000e5c:	46d0      	mov	r8, sl
 8000e5e:	e77b      	b.n	8000d58 <__udivmoddi4+0x1b0>
 8000e60:	3d02      	subs	r5, #2
 8000e62:	4462      	add	r2, ip
 8000e64:	e732      	b.n	8000ccc <__udivmoddi4+0x124>
 8000e66:	4608      	mov	r0, r1
 8000e68:	e70a      	b.n	8000c80 <__udivmoddi4+0xd8>
 8000e6a:	4464      	add	r4, ip
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	e742      	b.n	8000cf6 <__udivmoddi4+0x14e>

08000e70 <__aeabi_idiv0>:
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop

08000e74 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4013      	ands	r3, r2
 8000e96:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e98:	68fb      	ldr	r3, [r7, #12]
}
 8000e9a:	bf00      	nop
 8000e9c:	3714      	adds	r7, #20
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <LL_AHB2_GRP1_DisableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	b083      	sub	sp, #12
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8000eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ed8:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000edc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eec:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
}
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);

#else
  GPIO_InitTypeDef gpio_config = {0};
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]

  gpio_config.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_ANALOG;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	60bb      	str	r3, [r7, #8]

  gpio_config.Pin = GPIO_PIN_15 | GPIO_PIN_14 | GPIO_PIN_13;
 8000f20:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000f24:	607b      	str	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f26:	2001      	movs	r0, #1
 8000f28:	f7ff ffa4 	bl	8000e74 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &gpio_config);
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	4619      	mov	r1, r3
 8000f30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f34:	f003 fc98 	bl	8004868 <HAL_GPIO_Init>
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f7ff ffb4 	bl	8000ea6 <LL_AHB2_GRP1_DisableClock>

  gpio_config.Pin = GPIO_PIN_4 | GPIO_PIN_3;
 8000f3e:	2318      	movs	r3, #24
 8000f40:	607b      	str	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f42:	2002      	movs	r0, #2
 8000f44:	f7ff ff96 	bl	8000e74 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOB, &gpio_config);
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4809      	ldr	r0, [pc, #36]	; (8000f74 <APPD_Init+0x70>)
 8000f4e:	f003 fc8b 	bl	8004868 <HAL_GPIO_Init>
  __HAL_RCC_GPIOB_CLK_DISABLE();
 8000f52:	2002      	movs	r0, #2
 8000f54:	f7ff ffa7 	bl	8000ea6 <LL_AHB2_GRP1_DisableClock>

  HAL_DBGMCU_DisableDBGSleepMode();
 8000f58:	f003 f83e 	bl	8003fd8 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8000f5c:	f003 f842 	bl	8003fe4 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8000f60:	f003 f846 	bl	8003ff0 <HAL_DBGMCU_DisableDBGStandbyMode>

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
#endif

  APPD_SetCPU2GpioConfig( );
 8000f64:	f000 f824 	bl	8000fb0 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000f68:	f000 f8c4 	bl	80010f4 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000f6c:	bf00      	nop
}
 8000f6e:	3718      	adds	r7, #24
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	48000400 	.word	0x48000400

08000f78 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000f78:	b5b0      	push	{r4, r5, r7, lr}
 8000f7a:	b088      	sub	sp, #32
 8000f7c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <APPD_EnableCPU2+0x34>)
 8000f80:	1d3c      	adds	r4, r7, #4
 8000f82:	461d      	mov	r5, r3
 8000f84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f88:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f8c:	c403      	stmia	r4!, {r0, r1}
 8000f8e:	8022      	strh	r2, [r4, #0]
 8000f90:	3402      	adds	r4, #2
 8000f92:	0c13      	lsrs	r3, r2, #16
 8000f94:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000f96:	f008 fad3 	bl	8009540 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f008 f83a 	bl	8009016 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000fa2:	bf00      	nop
}
 8000fa4:	3720      	adds	r7, #32
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bdb0      	pop	{r4, r5, r7, pc}
 8000faa:	bf00      	nop
 8000fac:	0800c538 	.word	0x0800c538

08000fb0 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	77fb      	strb	r3, [r7, #31]
 8000fd4:	e036      	b.n	8001044 <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000fd6:	7ffb      	ldrb	r3, [r7, #31]
 8000fd8:	4a43      	ldr	r2, [pc, #268]	; (80010e8 <APPD_SetCPU2GpioConfig+0x138>)
 8000fda:	00db      	lsls	r3, r3, #3
 8000fdc:	4413      	add	r3, r2
 8000fde:	799b      	ldrb	r3, [r3, #6]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d02c      	beq.n	800103e <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000fe4:	7ffb      	ldrb	r3, [r7, #31]
 8000fe6:	4a40      	ldr	r2, [pc, #256]	; (80010e8 <APPD_SetCPU2GpioConfig+0x138>)
 8000fe8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000fec:	4a3f      	ldr	r2, [pc, #252]	; (80010ec <APPD_SetCPU2GpioConfig+0x13c>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d01b      	beq.n	800102a <APPD_SetCPU2GpioConfig+0x7a>
 8000ff2:	4a3e      	ldr	r2, [pc, #248]	; (80010ec <APPD_SetCPU2GpioConfig+0x13c>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d821      	bhi.n	800103c <APPD_SetCPU2GpioConfig+0x8c>
 8000ff8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ffc:	d003      	beq.n	8001006 <APPD_SetCPU2GpioConfig+0x56>
 8000ffe:	4a3c      	ldr	r2, [pc, #240]	; (80010f0 <APPD_SetCPU2GpioConfig+0x140>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d009      	beq.n	8001018 <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 8001004:	e01a      	b.n	800103c <APPD_SetCPU2GpioConfig+0x8c>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8001006:	7ffb      	ldrb	r3, [r7, #31]
 8001008:	4a37      	ldr	r2, [pc, #220]	; (80010e8 <APPD_SetCPU2GpioConfig+0x138>)
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	4413      	add	r3, r2
 800100e:	889a      	ldrh	r2, [r3, #4]
 8001010:	8bbb      	ldrh	r3, [r7, #28]
 8001012:	4313      	orrs	r3, r2
 8001014:	83bb      	strh	r3, [r7, #28]
          break;
 8001016:	e012      	b.n	800103e <APPD_SetCPU2GpioConfig+0x8e>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8001018:	7ffb      	ldrb	r3, [r7, #31]
 800101a:	4a33      	ldr	r2, [pc, #204]	; (80010e8 <APPD_SetCPU2GpioConfig+0x138>)
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	4413      	add	r3, r2
 8001020:	889a      	ldrh	r2, [r3, #4]
 8001022:	8b7b      	ldrh	r3, [r7, #26]
 8001024:	4313      	orrs	r3, r2
 8001026:	837b      	strh	r3, [r7, #26]
          break;
 8001028:	e009      	b.n	800103e <APPD_SetCPU2GpioConfig+0x8e>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 800102a:	7ffb      	ldrb	r3, [r7, #31]
 800102c:	4a2e      	ldr	r2, [pc, #184]	; (80010e8 <APPD_SetCPU2GpioConfig+0x138>)
 800102e:	00db      	lsls	r3, r3, #3
 8001030:	4413      	add	r3, r2
 8001032:	889a      	ldrh	r2, [r3, #4]
 8001034:	8b3b      	ldrh	r3, [r7, #24]
 8001036:	4313      	orrs	r3, r2
 8001038:	833b      	strh	r3, [r7, #24]
          break;
 800103a:	e000      	b.n	800103e <APPD_SetCPU2GpioConfig+0x8e>
          break;
 800103c:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 800103e:	7ffb      	ldrb	r3, [r7, #31]
 8001040:	3301      	adds	r3, #1
 8001042:	77fb      	strb	r3, [r7, #31]
 8001044:	7ffb      	ldrb	r3, [r7, #31]
 8001046:	2b25      	cmp	r3, #37	; 0x25
 8001048:	d9c5      	bls.n	8000fd6 <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 800104e:	2301      	movs	r3, #1
 8001050:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001052:	2303      	movs	r3, #3
 8001054:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8001056:	8bbb      	ldrh	r3, [r7, #28]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d014      	beq.n	8001086 <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 800105c:	8bbb      	ldrh	r3, [r7, #28]
 800105e:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001060:	2001      	movs	r0, #1
 8001062:	f7ff ff07 	bl	8000e74 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8001066:	2001      	movs	r0, #1
 8001068:	f7ff ff30 	bl	8000ecc <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	4619      	mov	r1, r3
 8001070:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001074:	f003 fbf8 	bl	8004868 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8001078:	8bbb      	ldrh	r3, [r7, #28]
 800107a:	2200      	movs	r2, #0
 800107c:	4619      	mov	r1, r3
 800107e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001082:	f003 fd59 	bl	8004b38 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8001086:	8b7b      	ldrh	r3, [r7, #26]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d012      	beq.n	80010b2 <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 800108c:	8b7b      	ldrh	r3, [r7, #26]
 800108e:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001090:	2002      	movs	r0, #2
 8001092:	f7ff feef 	bl	8000e74 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8001096:	2002      	movs	r0, #2
 8001098:	f7ff ff18 	bl	8000ecc <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 800109c:	1d3b      	adds	r3, r7, #4
 800109e:	4619      	mov	r1, r3
 80010a0:	4813      	ldr	r0, [pc, #76]	; (80010f0 <APPD_SetCPU2GpioConfig+0x140>)
 80010a2:	f003 fbe1 	bl	8004868 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 80010a6:	8b7b      	ldrh	r3, [r7, #26]
 80010a8:	2200      	movs	r2, #0
 80010aa:	4619      	mov	r1, r3
 80010ac:	4810      	ldr	r0, [pc, #64]	; (80010f0 <APPD_SetCPU2GpioConfig+0x140>)
 80010ae:	f003 fd43 	bl	8004b38 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 80010b2:	8b3b      	ldrh	r3, [r7, #24]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d013      	beq.n	80010e0 <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 80010b8:	8b3b      	ldrh	r3, [r7, #24]
 80010ba:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010bc:	2004      	movs	r0, #4
 80010be:	f7ff fed9 	bl	8000e74 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 80010c2:	2004      	movs	r0, #4
 80010c4:	f7ff ff02 	bl	8000ecc <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	4619      	mov	r1, r3
 80010cc:	4807      	ldr	r0, [pc, #28]	; (80010ec <APPD_SetCPU2GpioConfig+0x13c>)
 80010ce:	f003 fbcb 	bl	8004868 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 80010d2:	8b3b      	ldrh	r3, [r7, #24]
 80010d4:	2200      	movs	r2, #0
 80010d6:	4619      	mov	r1, r3
 80010d8:	4804      	ldr	r0, [pc, #16]	; (80010ec <APPD_SetCPU2GpioConfig+0x13c>)
 80010da:	f003 fd2d 	bl	8004b38 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 80010de:	bf00      	nop
 80010e0:	bf00      	nop
}
 80010e2:	3720      	adds	r7, #32
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	0800c5bc 	.word	0x0800c5bc
 80010ec:	48000800 	.word	0x48000800
 80010f0:	48000400 	.word	0x48000400

080010f4 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 80010f8:	bf00      	nop
}
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 800110c:	4b07      	ldr	r3, [pc, #28]	; (800112c <LL_C2_PWR_SetPowerMode+0x28>)
 800110e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001112:	f023 0207 	bic.w	r2, r3, #7
 8001116:	4905      	ldr	r1, [pc, #20]	; (800112c <LL_C2_PWR_SetPowerMode+0x28>)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4313      	orrs	r3, r2
 800111c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	58000400 	.word	0x58000400

08001130 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <LL_EXTI_EnableIT_32_63+0x24>)
 800113a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800113e:	4905      	ldr	r1, [pc, #20]	; (8001154 <LL_EXTI_EnableIT_32_63+0x24>)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4313      	orrs	r3, r2
 8001144:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	58000800 	.word	0x58000800

08001158 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001164:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8001166:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800116a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800116e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001172:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	021b      	lsls	r3, r3, #8
 800117a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800117e:	4313      	orrs	r3, r2
 8001180:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	cafecafe 	.word	0xcafecafe

08001194 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800119c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80011a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	608b      	str	r3, [r1, #8]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	22ff      	movs	r2, #255	; 0xff
 80011c8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	22ca      	movs	r2, #202	; 0xca
 80011e2:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2253      	movs	r2, #83	; 0x53
 80011e8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
 80011fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	f023 0207 	bic.w	r2, r3, #7
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	431a      	orrs	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	609a      	str	r2, [r3, #8]
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001220:	4b04      	ldr	r3, [pc, #16]	; (8001234 <MX_APPE_Config+0x18>)
 8001222:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001226:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8001228:	f000 f830 	bl	800128c <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 800122c:	f000 f835 	bl	800129a <Config_HSE>

  return;
 8001230:	bf00      	nop
}
 8001232:	bd80      	pop	{r7, pc}
 8001234:	58004000 	.word	0x58004000

08001238 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 800123c:	f000 f841 	bl	80012c2 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001240:	f000 f85a 	bl	80012f8 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001244:	4909      	ldr	r1, [pc, #36]	; (800126c <MX_APPE_Init+0x34>)
 8001246:	2000      	movs	r0, #0
 8001248:	f000 fdaa 	bl	8001da0 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 800124c:	f7ff fe5a 	bl	8000f04 <APPD_Init>

  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8001250:	2101      	movs	r1, #1
 8001252:	2001      	movs	r0, #1
 8001254:	f008 fa42 	bl	80096dc <UTIL_LPM_SetOffMode>

  APPE_Led_Init();
 8001258:	f000 f8c6 	bl	80013e8 <APPE_Led_Init>

  APPE_Button_Init();
 800125c:	f000 f8d4 	bl	8001408 <APPE_Button_Init>
  
  RxUART_Init();
 8001260:	f000 f90e 	bl	8001480 <RxUART_Init>

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001264:	f000 f858 	bl	8001318 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8001268:	bf00      	nop
}
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000430 	.word	0x20000430

08001270 <Init_Smps>:

void Init_Smps(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8001274:	bf00      	nop
}
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <Init_Exti>:

void Init_Exti(void)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8001282:	2050      	movs	r0, #80	; 0x50
 8001284:	f7ff ff54 	bl	8001130 <LL_EXTI_EnableIT_32_63>

  return;
 8001288:	bf00      	nop
}
 800128a:	bd80      	pop	{r7, pc}

0800128c <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001290:	bf00      	nop
}
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80012a0:	2000      	movs	r0, #0
 80012a2:	f007 fe79 	bl	8008f98 <OTP_Read>
 80012a6:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d005      	beq.n	80012ba <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	799b      	ldrb	r3, [r3, #6]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff ff50 	bl	8001158 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80012b8:	bf00      	nop
 80012ba:	bf00      	nop
}
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <System_Init>:

static void System_Init(void)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	af00      	add	r7, sp, #0
  Init_Smps();
 80012c6:	f7ff ffd3 	bl	8001270 <Init_Smps>

  Init_Exti();
 80012ca:	f7ff ffd8 	bl	800127e <Init_Exti>

  Init_Rtc();
 80012ce:	f000 f803 	bl	80012d8 <Init_Rtc>

  return;
 80012d2:	bf00      	nop
}
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <Init_Rtc>:

static void Init_Rtc(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80012dc:	4805      	ldr	r0, [pc, #20]	; (80012f4 <Init_Rtc+0x1c>)
 80012de:	f7ff ff7a 	bl	80011d6 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80012e2:	2100      	movs	r1, #0
 80012e4:	4803      	ldr	r0, [pc, #12]	; (80012f4 <Init_Rtc+0x1c>)
 80012e6:	f7ff ff86 	bl	80011f6 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80012ea:	4802      	ldr	r0, [pc, #8]	; (80012f4 <Init_Rtc+0x1c>)
 80012ec:	f7ff ff66 	bl	80011bc <LL_RTC_EnableWriteProtection>

  return;
 80012f0:	bf00      	nop
}
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40002800 	.word	0x40002800

080012f8 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80012fc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001300:	f7ff ff48 	bl	8001194 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001304:	f008 f9a8 	bl	8009658 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001308:	2004      	movs	r0, #4
 800130a:	f7ff fefb 	bl	8001104 <LL_C2_PWR_SetPowerMode>
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */
  /**
   * Active SRAM retention for standby support
   */
  HAL_PWREx_EnableSRAMRetention();
 800130e:	f003 fd0d 	bl	8004d2c <HAL_PWREx_EnableSRAMRetention>

  return;
 8001312:	bf00      	nop
}
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	; 0x28
 800131c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  TL_SYS_InitConf_t tl_sys_init_conf;
  /**< Reference table initialization */
  TL_Init();
 800131e:	f007 ff45 	bl	80091ac <TL_Init>

  /**< System channel initialization */
  LST_init_head (&SysEvtQueue);
 8001322:	4813      	ldr	r0, [pc, #76]	; (8001370 <appe_Tl_Init+0x58>)
 8001324:	f007 fea3 	bl	800906e <LST_init_head>
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8001328:	4a12      	ldr	r2, [pc, #72]	; (8001374 <appe_Tl_Init+0x5c>)
 800132a:	2100      	movs	r1, #0
 800132c:	2020      	movs	r0, #32
 800132e:	f008 fb37 	bl	80099a0 <UTIL_SEQ_RegTask>
  tl_sys_init_conf.p_cmdbuffer =  (uint8_t*)&SystemCmdBuffer;
 8001332:	4b11      	ldr	r3, [pc, #68]	; (8001378 <appe_Tl_Init+0x60>)
 8001334:	60fb      	str	r3, [r7, #12]
  tl_sys_init_conf.IoBusCallBackCmdEvt = TM_SysCmdRspCb;
 8001336:	4b11      	ldr	r3, [pc, #68]	; (800137c <appe_Tl_Init+0x64>)
 8001338:	607b      	str	r3, [r7, #4]
  tl_sys_init_conf.IoBusCallBackUserEvt = APPE_SysUserEvtRx;
 800133a:	4b11      	ldr	r3, [pc, #68]	; (8001380 <appe_Tl_Init+0x68>)
 800133c:	60bb      	str	r3, [r7, #8]
  TL_SYS_Init((void*) &tl_sys_init_conf);
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	4618      	mov	r0, r3
 8001342:	f008 f80b 	bl	800935c <TL_SYS_Init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8001346:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <appe_Tl_Init+0x6c>)
 8001348:	613b      	str	r3, [r7, #16]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800134a:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <appe_Tl_Init+0x70>)
 800134c:	617b      	str	r3, [r7, #20]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800134e:	4b0f      	ldr	r3, [pc, #60]	; (800138c <appe_Tl_Init+0x74>)
 8001350:	61bb      	str	r3, [r7, #24]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001352:	f240 533c 	movw	r3, #1340	; 0x53c
 8001356:	61fb      	str	r3, [r7, #28]
  TL_MM_Init(&tl_mm_config);
 8001358:	f107 0310 	add.w	r3, r7, #16
 800135c:	4618      	mov	r0, r3
 800135e:	f008 f87b 	bl	8009458 <TL_MM_Init>

  TL_Enable();
 8001362:	f007 ff1c 	bl	800919e <TL_Enable>

  return;
 8001366:	bf00      	nop
}
 8001368:	3728      	adds	r7, #40	; 0x28
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000238 	.word	0x20000238
 8001374:	080013b5 	.word	0x080013b5
 8001378:	20030628 	.word	0x20030628
 800137c:	08003089 	.word	0x08003089
 8001380:	08001391 	.word	0x08001391
 8001384:	20030840 	.word	0x20030840
 8001388:	20030734 	.word	0x20030734
 800138c:	200300ec 	.word	0x200300ec

08001390 <APPE_SysUserEvtRx>:

static void APPE_SysUserEvtRx(TL_EvtPacket_t * p_evt_rx)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  LST_insert_tail (&SysEvtQueue, (tListNode *)p_evt_rx);
 8001398:	6879      	ldr	r1, [r7, #4]
 800139a:	4805      	ldr	r0, [pc, #20]	; (80013b0 <APPE_SysUserEvtRx+0x20>)
 800139c:	f007 fe99 	bl	80090d2 <LST_insert_tail>

  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80013a0:	2100      	movs	r1, #0
 80013a2:	2020      	movs	r0, #32
 80013a4:	f008 fb1e 	bl	80099e4 <UTIL_SEQ_SetTask>

  return;
 80013a8:	bf00      	nop
}
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000238 	.word	0x20000238

080013b4 <shci_user_evt_proc>:

static void shci_user_evt_proc (void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
  /**
   * Currently, only VS_HCI_C2_Ready() system user event is supported.
   */

  /**< Traces channel initialization */
  APPD_EnableCPU2();
 80013ba:	f7ff fddd 	bl	8000f78 <APPD_EnableCPU2>
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80013be:	2100      	movs	r1, #0
 80013c0:	2001      	movs	r0, #1
 80013c2:	f008 f98b 	bl	80096dc <UTIL_LPM_SetOffMode>

  LST_remove_head(&SysEvtQueue, (tListNode **)&p_evt_rx);
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	4619      	mov	r1, r3
 80013ca:	4806      	ldr	r0, [pc, #24]	; (80013e4 <shci_user_evt_proc+0x30>)
 80013cc:	f007 fec8 	bl	8009160 <LST_remove_head>

  TL_MM_EvtDone(p_evt_rx);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f008 f87c 	bl	80094d0 <TL_MM_EvtDone>

  TM_Init();
 80013d8:	f001 fd86 	bl	8002ee8 <TM_Init>

  return;
 80013dc:	bf00      	nop
}
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000238 	.word	0x20000238

080013e8 <APPE_Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
void APPE_Led_Init( void )
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */

  BSP_LED_Init(LED_BLUE);
 80013ec:	2000      	movs	r0, #0
 80013ee:	f002 fbb7 	bl	8003b60 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 80013f2:	2001      	movs	r0, #1
 80013f4:	f002 fbb4 	bl	8003b60 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80013f8:	2002      	movs	r0, #2
 80013fa:	f002 fbb1 	bl	8003b60 <BSP_LED_Init>

  BSP_LED_On(LED_GREEN);
 80013fe:	2001      	movs	r0, #1
 8001400:	f002 fbe8 	bl	8003bd4 <BSP_LED_On>
#endif

  return;
 8001404:	bf00      	nop
}
 8001406:	bd80      	pop	{r7, pc}

08001408 <APPE_Button_Init>:

void APPE_Button_Init( void )
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */

  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 800140c:	2101      	movs	r1, #1
 800140e:	2000      	movs	r0, #0
 8001410:	f002 fc14 	bl	8003c3c <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8001414:	2101      	movs	r1, #1
 8001416:	2001      	movs	r0, #1
 8001418:	f002 fc10 	bl	8003c3c <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 800141c:	2101      	movs	r1, #1
 800141e:	2002      	movs	r0, #2
 8001420:	f002 fc0c 	bl	8003c3c <BSP_PB_Init>
#endif

  return;
 8001424:	bf00      	nop
}
 8001426:	bd80      	pop	{r7, pc}

08001428 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800142c:	f04f 30ff 	mov.w	r0, #4294967295
 8001430:	f008 f9ba 	bl	80097a8 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}

08001438 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
 800143c:	f008 f97e 	bl	800973c <UTIL_LPM_EnterLowPower>
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001440:	bf00      	nop
}
 8001442:	bd80      	pop	{r7, pc}

08001444 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800144e:	f04f 30ff 	mov.w	r0, #4294967295
 8001452:	f008 f9a9 	bl	80097a8 <UTIL_SEQ_Run>

  return;
 8001456:	bf00      	nop
}
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
 8001464:	4603      	mov	r3, r0
 8001466:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8001468:	88fb      	ldrh	r3, [r7, #6]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d102      	bne.n	8001474 <HAL_GPIO_EXTI_Callback+0x16>
  {
    case BUTTON_SW1_PIN:
      TM_SetLowPowerMode( );
 800146e:	f001 fe2b 	bl	80030c8 <TM_SetLowPowerMode>
      break;
 8001472:	e000      	b.n	8001476 <HAL_GPIO_EXTI_Callback+0x18>

    default:
      break;
 8001474:	bf00      	nop
  }
  return;
 8001476:	bf00      	nop
}
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
	...

08001480 <RxUART_Init>:

static void RxUART_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 8001484:	4b03      	ldr	r3, [pc, #12]	; (8001494 <RxUART_Init+0x14>)
 8001486:	2201      	movs	r2, #1
 8001488:	4903      	ldr	r1, [pc, #12]	; (8001498 <RxUART_Init+0x18>)
 800148a:	2000      	movs	r0, #0
 800148c:	f000 fe7a 	bl	8002184 <HW_UART_Receive_IT>
}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}
 8001494:	0800149d 	.word	0x0800149d
 8001498:	20000240 	.word	0x20000240

0800149c <RxCpltCallback>:

static void RxCpltCallback(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 80014a0:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <RxCpltCallback+0x54>)
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	2bff      	cmp	r3, #255	; 0xff
 80014a6:	d81a      	bhi.n	80014de <RxCpltCallback+0x42>
  {
    if (aRxBuffer[0] == '\r')
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <RxCpltCallback+0x58>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b0d      	cmp	r3, #13
 80014ae:	d10b      	bne.n	80014c8 <RxCpltCallback+0x2c>
    {
      APP_DBG_MSG("received %s\n", CommandString);

      UartCmdExecute();
 80014b0:	f000 f826 	bl	8001500 <UartCmdExecute>

      /* Clear receive buffer and character counter*/
      indexReceiveChar = 0;
 80014b4:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <RxCpltCallback+0x54>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	801a      	strh	r2, [r3, #0]
      memset(CommandString, 0, C_SIZE_CMD_STRING);
 80014ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014be:	2100      	movs	r1, #0
 80014c0:	480d      	ldr	r0, [pc, #52]	; (80014f8 <RxCpltCallback+0x5c>)
 80014c2:	f009 f8da 	bl	800a67a <memset>
 80014c6:	e00a      	b.n	80014de <RxCpltCallback+0x42>
    }
    else
    {
      CommandString[indexReceiveChar++] = aRxBuffer[0];
 80014c8:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <RxCpltCallback+0x54>)
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	1c5a      	adds	r2, r3, #1
 80014ce:	b291      	uxth	r1, r2
 80014d0:	4a07      	ldr	r2, [pc, #28]	; (80014f0 <RxCpltCallback+0x54>)
 80014d2:	8011      	strh	r1, [r2, #0]
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <RxCpltCallback+0x58>)
 80014d8:	7819      	ldrb	r1, [r3, #0]
 80014da:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <RxCpltCallback+0x5c>)
 80014dc:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 80014de:	4b07      	ldr	r3, [pc, #28]	; (80014fc <RxCpltCallback+0x60>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	4904      	ldr	r1, [pc, #16]	; (80014f4 <RxCpltCallback+0x58>)
 80014e4:	2000      	movs	r0, #0
 80014e6:	f000 fe4d 	bl	8002184 <HW_UART_Receive_IT>
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000348 	.word	0x20000348
 80014f4:	20000240 	.word	0x20000240
 80014f8:	20000248 	.word	0x20000248
 80014fc:	0800149d 	.word	0x0800149d

08001500 <UartCmdExecute>:

static void UartCmdExecute(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* Parse received CommandString */
  if(strcmp((char const*)CommandString, "SW1") == 0)
 8001504:	4915      	ldr	r1, [pc, #84]	; (800155c <UartCmdExecute+0x5c>)
 8001506:	4816      	ldr	r0, [pc, #88]	; (8001560 <UartCmdExecute+0x60>)
 8001508:	f7fe fe3a 	bl	8000180 <strcmp>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d107      	bne.n	8001522 <UartCmdExecute+0x22>
  {
    APP_DBG_MSG("SW1 OK\n");
    exti_handle.Line = EXTI_LINE_0;
 8001512:	4b14      	ldr	r3, [pc, #80]	; (8001564 <UartCmdExecute+0x64>)
 8001514:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 8001518:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 800151a:	4812      	ldr	r0, [pc, #72]	; (8001564 <UartCmdExecute+0x64>)
 800151c:	f003 f982 	bl	8004824 <HAL_EXTI_GenerateSWI>
  }
  else
  {
    APP_DBG_MSG("NOT RECOGNIZED COMMAND : %s\n", CommandString);
  }
}
 8001520:	e01a      	b.n	8001558 <UartCmdExecute+0x58>
  else if (strcmp((char const*)CommandString, "SW2") == 0)
 8001522:	4911      	ldr	r1, [pc, #68]	; (8001568 <UartCmdExecute+0x68>)
 8001524:	480e      	ldr	r0, [pc, #56]	; (8001560 <UartCmdExecute+0x60>)
 8001526:	f7fe fe2b 	bl	8000180 <strcmp>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d106      	bne.n	800153e <UartCmdExecute+0x3e>
    exti_handle.Line = EXTI_LINE_4;
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <UartCmdExecute+0x64>)
 8001532:	4a0e      	ldr	r2, [pc, #56]	; (800156c <UartCmdExecute+0x6c>)
 8001534:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 8001536:	480b      	ldr	r0, [pc, #44]	; (8001564 <UartCmdExecute+0x64>)
 8001538:	f003 f974 	bl	8004824 <HAL_EXTI_GenerateSWI>
}
 800153c:	e00c      	b.n	8001558 <UartCmdExecute+0x58>
  else if (strcmp((char const*)CommandString, "SW3") == 0)
 800153e:	490c      	ldr	r1, [pc, #48]	; (8001570 <UartCmdExecute+0x70>)
 8001540:	4807      	ldr	r0, [pc, #28]	; (8001560 <UartCmdExecute+0x60>)
 8001542:	f7fe fe1d 	bl	8000180 <strcmp>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d105      	bne.n	8001558 <UartCmdExecute+0x58>
    exti_handle.Line = EXTI_LINE_6;
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <UartCmdExecute+0x64>)
 800154e:	4a09      	ldr	r2, [pc, #36]	; (8001574 <UartCmdExecute+0x74>)
 8001550:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 8001552:	4804      	ldr	r0, [pc, #16]	; (8001564 <UartCmdExecute+0x64>)
 8001554:	f003 f966 	bl	8004824 <HAL_EXTI_GenerateSWI>
}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}
 800155c:	0800c554 	.word	0x0800c554
 8001560:	20000248 	.word	0x20000248
 8001564:	20000230 	.word	0x20000230
 8001568:	0800c558 	.word	0x0800c558
 800156c:	16000004 	.word	0x16000004
 8001570:	0800c55c 	.word	0x0800c55c
 8001574:	16000006 	.word	0x16000006

08001578 <LL_EXTI_EnableIT_0_31>:
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <LL_EXTI_EnableIT_0_31+0x24>)
 8001582:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001586:	4905      	ldr	r1, [pc, #20]	; (800159c <LL_EXTI_EnableIT_0_31+0x24>)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4313      	orrs	r3, r2
 800158c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	58000800 	.word	0x58000800

080015a0 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80015a8:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4904      	ldr	r1, [pc, #16]	; (80015c0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	600b      	str	r3, [r1, #0]

}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	58000800 	.word	0x58000800

080015c4 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80015ca:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <ReadRtcSsrValue+0x3c>)
 80015cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80015d2:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <ReadRtcSsrValue+0x3c>)
 80015d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80015da:	e005      	b.n	80015e8 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80015e0:	4b07      	ldr	r3, [pc, #28]	; (8001600 <ReadRtcSsrValue+0x3c>)
 80015e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d1f5      	bne.n	80015dc <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80015f0:	683b      	ldr	r3, [r7, #0]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	40002800 	.word	0x40002800

08001604 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	460a      	mov	r2, r1
 800160e:	71fb      	strb	r3, [r7, #7]
 8001610:	4613      	mov	r3, r2
 8001612:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001614:	79ba      	ldrb	r2, [r7, #6]
 8001616:	491d      	ldr	r1, [pc, #116]	; (800168c <LinkTimerAfter+0x88>)
 8001618:	4613      	mov	r3, r2
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	4413      	add	r3, r2
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	440b      	add	r3, r1
 8001622:	3315      	adds	r3, #21
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001628:	7bfb      	ldrb	r3, [r7, #15]
 800162a:	2b06      	cmp	r3, #6
 800162c:	d009      	beq.n	8001642 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800162e:	7bfa      	ldrb	r2, [r7, #15]
 8001630:	4916      	ldr	r1, [pc, #88]	; (800168c <LinkTimerAfter+0x88>)
 8001632:	4613      	mov	r3, r2
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	4413      	add	r3, r2
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	440b      	add	r3, r1
 800163c:	3314      	adds	r3, #20
 800163e:	79fa      	ldrb	r2, [r7, #7]
 8001640:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001642:	79fa      	ldrb	r2, [r7, #7]
 8001644:	4911      	ldr	r1, [pc, #68]	; (800168c <LinkTimerAfter+0x88>)
 8001646:	4613      	mov	r3, r2
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	4413      	add	r3, r2
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	440b      	add	r3, r1
 8001650:	3315      	adds	r3, #21
 8001652:	7bfa      	ldrb	r2, [r7, #15]
 8001654:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001656:	79fa      	ldrb	r2, [r7, #7]
 8001658:	490c      	ldr	r1, [pc, #48]	; (800168c <LinkTimerAfter+0x88>)
 800165a:	4613      	mov	r3, r2
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	4413      	add	r3, r2
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	440b      	add	r3, r1
 8001664:	3314      	adds	r3, #20
 8001666:	79ba      	ldrb	r2, [r7, #6]
 8001668:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800166a:	79ba      	ldrb	r2, [r7, #6]
 800166c:	4907      	ldr	r1, [pc, #28]	; (800168c <LinkTimerAfter+0x88>)
 800166e:	4613      	mov	r3, r2
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	4413      	add	r3, r2
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	440b      	add	r3, r1
 8001678:	3315      	adds	r3, #21
 800167a:	79fa      	ldrb	r2, [r7, #7]
 800167c:	701a      	strb	r2, [r3, #0]

  return;
 800167e:	bf00      	nop
}
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	2000034c 	.word	0x2000034c

08001690 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	460a      	mov	r2, r1
 800169a:	71fb      	strb	r3, [r7, #7]
 800169c:	4613      	mov	r3, r2
 800169e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80016a0:	4b29      	ldr	r3, [pc, #164]	; (8001748 <LinkTimerBefore+0xb8>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	79ba      	ldrb	r2, [r7, #6]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d032      	beq.n	8001712 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80016ac:	79ba      	ldrb	r2, [r7, #6]
 80016ae:	4927      	ldr	r1, [pc, #156]	; (800174c <LinkTimerBefore+0xbc>)
 80016b0:	4613      	mov	r3, r2
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	4413      	add	r3, r2
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	440b      	add	r3, r1
 80016ba:	3314      	adds	r3, #20
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80016c0:	7bfa      	ldrb	r2, [r7, #15]
 80016c2:	4922      	ldr	r1, [pc, #136]	; (800174c <LinkTimerBefore+0xbc>)
 80016c4:	4613      	mov	r3, r2
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	4413      	add	r3, r2
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	440b      	add	r3, r1
 80016ce:	3315      	adds	r3, #21
 80016d0:	79fa      	ldrb	r2, [r7, #7]
 80016d2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80016d4:	79fa      	ldrb	r2, [r7, #7]
 80016d6:	491d      	ldr	r1, [pc, #116]	; (800174c <LinkTimerBefore+0xbc>)
 80016d8:	4613      	mov	r3, r2
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	4413      	add	r3, r2
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	440b      	add	r3, r1
 80016e2:	3315      	adds	r3, #21
 80016e4:	79ba      	ldrb	r2, [r7, #6]
 80016e6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80016e8:	79fa      	ldrb	r2, [r7, #7]
 80016ea:	4918      	ldr	r1, [pc, #96]	; (800174c <LinkTimerBefore+0xbc>)
 80016ec:	4613      	mov	r3, r2
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	4413      	add	r3, r2
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	440b      	add	r3, r1
 80016f6:	3314      	adds	r3, #20
 80016f8:	7bfa      	ldrb	r2, [r7, #15]
 80016fa:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80016fc:	79ba      	ldrb	r2, [r7, #6]
 80016fe:	4913      	ldr	r1, [pc, #76]	; (800174c <LinkTimerBefore+0xbc>)
 8001700:	4613      	mov	r3, r2
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	4413      	add	r3, r2
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	440b      	add	r3, r1
 800170a:	3314      	adds	r3, #20
 800170c:	79fa      	ldrb	r2, [r7, #7]
 800170e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001710:	e014      	b.n	800173c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001712:	79fa      	ldrb	r2, [r7, #7]
 8001714:	490d      	ldr	r1, [pc, #52]	; (800174c <LinkTimerBefore+0xbc>)
 8001716:	4613      	mov	r3, r2
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	4413      	add	r3, r2
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	440b      	add	r3, r1
 8001720:	3315      	adds	r3, #21
 8001722:	79ba      	ldrb	r2, [r7, #6]
 8001724:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001726:	79ba      	ldrb	r2, [r7, #6]
 8001728:	4908      	ldr	r1, [pc, #32]	; (800174c <LinkTimerBefore+0xbc>)
 800172a:	4613      	mov	r3, r2
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	4413      	add	r3, r2
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	440b      	add	r3, r1
 8001734:	3314      	adds	r3, #20
 8001736:	79fa      	ldrb	r2, [r7, #7]
 8001738:	701a      	strb	r2, [r3, #0]
  return;
 800173a:	bf00      	nop
}
 800173c:	3714      	adds	r7, #20
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	200003dc 	.word	0x200003dc
 800174c:	2000034c 	.word	0x2000034c

08001750 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800175a:	4b4e      	ldr	r3, [pc, #312]	; (8001894 <linkTimer+0x144>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b06      	cmp	r3, #6
 8001762:	d118      	bne.n	8001796 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001764:	4b4b      	ldr	r3, [pc, #300]	; (8001894 <linkTimer+0x144>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	b2da      	uxtb	r2, r3
 800176a:	4b4b      	ldr	r3, [pc, #300]	; (8001898 <linkTimer+0x148>)
 800176c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800176e:	4a49      	ldr	r2, [pc, #292]	; (8001894 <linkTimer+0x144>)
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001774:	79fa      	ldrb	r2, [r7, #7]
 8001776:	4949      	ldr	r1, [pc, #292]	; (800189c <linkTimer+0x14c>)
 8001778:	4613      	mov	r3, r2
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	4413      	add	r3, r2
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	440b      	add	r3, r1
 8001782:	3315      	adds	r3, #21
 8001784:	2206      	movs	r2, #6
 8001786:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001788:	4b45      	ldr	r3, [pc, #276]	; (80018a0 <linkTimer+0x150>)
 800178a:	f04f 32ff 	mov.w	r2, #4294967295
 800178e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	81fb      	strh	r3, [r7, #14]
 8001794:	e078      	b.n	8001888 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001796:	f000 f909 	bl	80019ac <ReturnTimeElapsed>
 800179a:	4603      	mov	r3, r0
 800179c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800179e:	79fa      	ldrb	r2, [r7, #7]
 80017a0:	493e      	ldr	r1, [pc, #248]	; (800189c <linkTimer+0x14c>)
 80017a2:	4613      	mov	r3, r2
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	4413      	add	r3, r2
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	440b      	add	r3, r1
 80017ac:	3308      	adds	r3, #8
 80017ae:	6819      	ldr	r1, [r3, #0]
 80017b0:	89fb      	ldrh	r3, [r7, #14]
 80017b2:	79fa      	ldrb	r2, [r7, #7]
 80017b4:	4419      	add	r1, r3
 80017b6:	4839      	ldr	r0, [pc, #228]	; (800189c <linkTimer+0x14c>)
 80017b8:	4613      	mov	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	4413      	add	r3, r2
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	4403      	add	r3, r0
 80017c2:	3308      	adds	r3, #8
 80017c4:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80017c6:	79fa      	ldrb	r2, [r7, #7]
 80017c8:	4934      	ldr	r1, [pc, #208]	; (800189c <linkTimer+0x14c>)
 80017ca:	4613      	mov	r3, r2
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	4413      	add	r3, r2
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	440b      	add	r3, r1
 80017d4:	3308      	adds	r3, #8
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80017da:	4b2e      	ldr	r3, [pc, #184]	; (8001894 <linkTimer+0x144>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	4619      	mov	r1, r3
 80017e2:	4a2e      	ldr	r2, [pc, #184]	; (800189c <linkTimer+0x14c>)
 80017e4:	460b      	mov	r3, r1
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	440b      	add	r3, r1
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	4413      	add	r3, r2
 80017ee:	3308      	adds	r3, #8
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68ba      	ldr	r2, [r7, #8]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d337      	bcc.n	8001868 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80017f8:	4b26      	ldr	r3, [pc, #152]	; (8001894 <linkTimer+0x144>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80017fe:	7b7a      	ldrb	r2, [r7, #13]
 8001800:	4926      	ldr	r1, [pc, #152]	; (800189c <linkTimer+0x14c>)
 8001802:	4613      	mov	r3, r2
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	4413      	add	r3, r2
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	440b      	add	r3, r1
 800180c:	3315      	adds	r3, #21
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001812:	e013      	b.n	800183c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001814:	7b7a      	ldrb	r2, [r7, #13]
 8001816:	4921      	ldr	r1, [pc, #132]	; (800189c <linkTimer+0x14c>)
 8001818:	4613      	mov	r3, r2
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	4413      	add	r3, r2
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	440b      	add	r3, r1
 8001822:	3315      	adds	r3, #21
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001828:	7b7a      	ldrb	r2, [r7, #13]
 800182a:	491c      	ldr	r1, [pc, #112]	; (800189c <linkTimer+0x14c>)
 800182c:	4613      	mov	r3, r2
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	4413      	add	r3, r2
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	440b      	add	r3, r1
 8001836:	3315      	adds	r3, #21
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800183c:	7b3b      	ldrb	r3, [r7, #12]
 800183e:	2b06      	cmp	r3, #6
 8001840:	d00b      	beq.n	800185a <linkTimer+0x10a>
 8001842:	7b3a      	ldrb	r2, [r7, #12]
 8001844:	4915      	ldr	r1, [pc, #84]	; (800189c <linkTimer+0x14c>)
 8001846:	4613      	mov	r3, r2
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	4413      	add	r3, r2
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	440b      	add	r3, r1
 8001850:	3308      	adds	r3, #8
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	68ba      	ldr	r2, [r7, #8]
 8001856:	429a      	cmp	r2, r3
 8001858:	d2dc      	bcs.n	8001814 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800185a:	7b7a      	ldrb	r2, [r7, #13]
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	4611      	mov	r1, r2
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fecf 	bl	8001604 <LinkTimerAfter>
 8001866:	e00f      	b.n	8001888 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001868:	4b0a      	ldr	r3, [pc, #40]	; (8001894 <linkTimer+0x144>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	b2da      	uxtb	r2, r3
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	4611      	mov	r1, r2
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff ff0c 	bl	8001690 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <linkTimer+0x144>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	b2da      	uxtb	r2, r3
 800187e:	4b06      	ldr	r3, [pc, #24]	; (8001898 <linkTimer+0x148>)
 8001880:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001882:	4a04      	ldr	r2, [pc, #16]	; (8001894 <linkTimer+0x144>)
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001888:	89fb      	ldrh	r3, [r7, #14]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	200003dc 	.word	0x200003dc
 8001898:	200003dd 	.word	0x200003dd
 800189c:	2000034c 	.word	0x2000034c
 80018a0:	200003e0 	.word	0x200003e0

080018a4 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	460a      	mov	r2, r1
 80018ae:	71fb      	strb	r3, [r7, #7]
 80018b0:	4613      	mov	r3, r2
 80018b2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80018b4:	4b39      	ldr	r3, [pc, #228]	; (800199c <UnlinkTimer+0xf8>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	79fa      	ldrb	r2, [r7, #7]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d111      	bne.n	80018e4 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80018c0:	4b36      	ldr	r3, [pc, #216]	; (800199c <UnlinkTimer+0xf8>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	4b36      	ldr	r3, [pc, #216]	; (80019a0 <UnlinkTimer+0xfc>)
 80018c8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80018ca:	79fa      	ldrb	r2, [r7, #7]
 80018cc:	4935      	ldr	r1, [pc, #212]	; (80019a4 <UnlinkTimer+0x100>)
 80018ce:	4613      	mov	r3, r2
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	4413      	add	r3, r2
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	440b      	add	r3, r1
 80018d8:	3315      	adds	r3, #21
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	4b2f      	ldr	r3, [pc, #188]	; (800199c <UnlinkTimer+0xf8>)
 80018e0:	701a      	strb	r2, [r3, #0]
 80018e2:	e03e      	b.n	8001962 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80018e4:	79fa      	ldrb	r2, [r7, #7]
 80018e6:	492f      	ldr	r1, [pc, #188]	; (80019a4 <UnlinkTimer+0x100>)
 80018e8:	4613      	mov	r3, r2
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	4413      	add	r3, r2
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	440b      	add	r3, r1
 80018f2:	3314      	adds	r3, #20
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80018f8:	79fa      	ldrb	r2, [r7, #7]
 80018fa:	492a      	ldr	r1, [pc, #168]	; (80019a4 <UnlinkTimer+0x100>)
 80018fc:	4613      	mov	r3, r2
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	4413      	add	r3, r2
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	440b      	add	r3, r1
 8001906:	3315      	adds	r3, #21
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 800190c:	79f9      	ldrb	r1, [r7, #7]
 800190e:	7bfa      	ldrb	r2, [r7, #15]
 8001910:	4824      	ldr	r0, [pc, #144]	; (80019a4 <UnlinkTimer+0x100>)
 8001912:	460b      	mov	r3, r1
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	440b      	add	r3, r1
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	4403      	add	r3, r0
 800191c:	3315      	adds	r3, #21
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	b2d8      	uxtb	r0, r3
 8001922:	4920      	ldr	r1, [pc, #128]	; (80019a4 <UnlinkTimer+0x100>)
 8001924:	4613      	mov	r3, r2
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	4413      	add	r3, r2
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	440b      	add	r3, r1
 800192e:	3315      	adds	r3, #21
 8001930:	4602      	mov	r2, r0
 8001932:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001934:	7bbb      	ldrb	r3, [r7, #14]
 8001936:	2b06      	cmp	r3, #6
 8001938:	d013      	beq.n	8001962 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800193a:	79f9      	ldrb	r1, [r7, #7]
 800193c:	7bba      	ldrb	r2, [r7, #14]
 800193e:	4819      	ldr	r0, [pc, #100]	; (80019a4 <UnlinkTimer+0x100>)
 8001940:	460b      	mov	r3, r1
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	440b      	add	r3, r1
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	4403      	add	r3, r0
 800194a:	3314      	adds	r3, #20
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	b2d8      	uxtb	r0, r3
 8001950:	4914      	ldr	r1, [pc, #80]	; (80019a4 <UnlinkTimer+0x100>)
 8001952:	4613      	mov	r3, r2
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	4413      	add	r3, r2
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	440b      	add	r3, r1
 800195c:	3314      	adds	r3, #20
 800195e:	4602      	mov	r2, r0
 8001960:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001962:	79fa      	ldrb	r2, [r7, #7]
 8001964:	490f      	ldr	r1, [pc, #60]	; (80019a4 <UnlinkTimer+0x100>)
 8001966:	4613      	mov	r3, r2
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	4413      	add	r3, r2
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	440b      	add	r3, r1
 8001970:	330c      	adds	r3, #12
 8001972:	2201      	movs	r2, #1
 8001974:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001976:	4b09      	ldr	r3, [pc, #36]	; (800199c <UnlinkTimer+0xf8>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	b2db      	uxtb	r3, r3
 800197c:	2b06      	cmp	r3, #6
 800197e:	d107      	bne.n	8001990 <UnlinkTimer+0xec>
 8001980:	79bb      	ldrb	r3, [r7, #6]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d104      	bne.n	8001990 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001986:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <UnlinkTimer+0x104>)
 8001988:	f04f 32ff 	mov.w	r2, #4294967295
 800198c:	601a      	str	r2, [r3, #0]
  }

  return;
 800198e:	bf00      	nop
 8001990:	bf00      	nop
}
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	200003dc 	.word	0x200003dc
 80019a0:	200003dd 	.word	0x200003dd
 80019a4:	2000034c 	.word	0x2000034c
 80019a8:	200003e0 	.word	0x200003e0

080019ac <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80019b2:	4b1a      	ldr	r3, [pc, #104]	; (8001a1c <ReturnTimeElapsed+0x70>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ba:	d026      	beq.n	8001a0a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80019bc:	f7ff fe02 	bl	80015c4 <ReadRtcSsrValue>
 80019c0:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80019c2:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <ReturnTimeElapsed+0x70>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d805      	bhi.n	80019d8 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80019cc:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <ReturnTimeElapsed+0x70>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	e00a      	b.n	80019ee <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80019d8:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <ReturnTimeElapsed+0x74>)
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	461a      	mov	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80019e4:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <ReturnTimeElapsed+0x70>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	4413      	add	r3, r2
 80019ec:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80019ee:	4b0d      	ldr	r3, [pc, #52]	; (8001a24 <ReturnTimeElapsed+0x78>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	461a      	mov	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	fb02 f303 	mul.w	r3, r2, r3
 80019fa:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80019fc:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <ReturnTimeElapsed+0x7c>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	461a      	mov	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	40d3      	lsrs	r3, r2
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	e001      	b.n	8001a0e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	b29b      	uxth	r3, r3
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200003e0 	.word	0x200003e0
 8001a20:	200003e8 	.word	0x200003e8
 8001a24:	200003e6 	.word	0x200003e6
 8001a28:	200003e5 	.word	0x200003e5

08001a2c <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001a36:	88fb      	ldrh	r3, [r7, #6]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d108      	bne.n	8001a4e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001a3c:	f7ff fdc2 	bl	80015c4 <ReadRtcSsrValue>
 8001a40:	4603      	mov	r3, r0
 8001a42:	4a21      	ldr	r2, [pc, #132]	; (8001ac8 <RestartWakeupCounter+0x9c>)
 8001a44:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001a46:	2003      	movs	r0, #3
 8001a48:	f002 fc55 	bl	80042f6 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001a4c:	e039      	b.n	8001ac2 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001a4e:	88fb      	ldrh	r3, [r7, #6]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d803      	bhi.n	8001a5c <RestartWakeupCounter+0x30>
 8001a54:	4b1d      	ldr	r3, [pc, #116]	; (8001acc <RestartWakeupCounter+0xa0>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d002      	beq.n	8001a62 <RestartWakeupCounter+0x36>
      Value -= 1;
 8001a5c:	88fb      	ldrh	r3, [r7, #6]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001a62:	bf00      	nop
 8001a64:	4b1a      	ldr	r3, [pc, #104]	; (8001ad0 <RestartWakeupCounter+0xa4>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	f003 0304 	and.w	r3, r3, #4
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0f8      	beq.n	8001a64 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001a72:	4b17      	ldr	r3, [pc, #92]	; (8001ad0 <RestartWakeupCounter+0xa4>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <RestartWakeupCounter+0xa4>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001a82:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001a84:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <RestartWakeupCounter+0xa8>)
 8001a86:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001a8a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001a8c:	2003      	movs	r0, #3
 8001a8e:	f002 fc40 	bl	8004312 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001a92:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <RestartWakeupCounter+0xac>)
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	0c1b      	lsrs	r3, r3, #16
 8001a98:	041b      	lsls	r3, r3, #16
 8001a9a:	88fa      	ldrh	r2, [r7, #6]
 8001a9c:	490e      	ldr	r1, [pc, #56]	; (8001ad8 <RestartWakeupCounter+0xac>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001aa2:	f7ff fd8f 	bl	80015c4 <ReadRtcSsrValue>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	4a07      	ldr	r2, [pc, #28]	; (8001ac8 <RestartWakeupCounter+0x9c>)
 8001aaa:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001aac:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <RestartWakeupCounter+0xa4>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	689a      	ldr	r2, [r3, #8]
 8001ab2:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <RestartWakeupCounter+0xa4>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001aba:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001abc:	f3af 8000 	nop.w
  return ;
 8001ac0:	bf00      	nop
}
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	200003e0 	.word	0x200003e0
 8001acc:	200003e5 	.word	0x200003e5
 8001ad0:	20000430 	.word	0x20000430
 8001ad4:	58000800 	.word	0x58000800
 8001ad8:	40002800 	.word	0x40002800

08001adc <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001ae2:	4b45      	ldr	r3, [pc, #276]	; (8001bf8 <RescheduleTimerList+0x11c>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aee:	d107      	bne.n	8001b00 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001af0:	bf00      	nop
 8001af2:	4b42      	ldr	r3, [pc, #264]	; (8001bfc <RescheduleTimerList+0x120>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1f8      	bne.n	8001af2 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001b00:	4b3e      	ldr	r3, [pc, #248]	; (8001bfc <RescheduleTimerList+0x120>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	689a      	ldr	r2, [r3, #8]
 8001b06:	4b3d      	ldr	r3, [pc, #244]	; (8001bfc <RescheduleTimerList+0x120>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b0e:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001b10:	4b3b      	ldr	r3, [pc, #236]	; (8001c00 <RescheduleTimerList+0x124>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001b16:	7bfa      	ldrb	r2, [r7, #15]
 8001b18:	493a      	ldr	r1, [pc, #232]	; (8001c04 <RescheduleTimerList+0x128>)
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	4413      	add	r3, r2
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	440b      	add	r3, r1
 8001b24:	3308      	adds	r3, #8
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001b2a:	f7ff ff3f 	bl	80019ac <ReturnTimeElapsed>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001b32:	88fb      	ldrh	r3, [r7, #6]
 8001b34:	68ba      	ldr	r2, [r7, #8]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d205      	bcs.n	8001b46 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001b3e:	4b32      	ldr	r3, [pc, #200]	; (8001c08 <RescheduleTimerList+0x12c>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	701a      	strb	r2, [r3, #0]
 8001b44:	e04d      	b.n	8001be2 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001b46:	88fb      	ldrh	r3, [r7, #6]
 8001b48:	4a30      	ldr	r2, [pc, #192]	; (8001c0c <RescheduleTimerList+0x130>)
 8001b4a:	8812      	ldrh	r2, [r2, #0]
 8001b4c:	b292      	uxth	r2, r2
 8001b4e:	4413      	add	r3, r2
 8001b50:	461a      	mov	r2, r3
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d906      	bls.n	8001b66 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001b58:	4b2c      	ldr	r3, [pc, #176]	; (8001c0c <RescheduleTimerList+0x130>)
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001b5e:	4b2a      	ldr	r3, [pc, #168]	; (8001c08 <RescheduleTimerList+0x12c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	701a      	strb	r2, [r3, #0]
 8001b64:	e03d      	b.n	8001be2 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	88fb      	ldrh	r3, [r7, #6]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001b70:	4b25      	ldr	r3, [pc, #148]	; (8001c08 <RescheduleTimerList+0x12c>)
 8001b72:	2201      	movs	r2, #1
 8001b74:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001b76:	e034      	b.n	8001be2 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001b78:	7bfa      	ldrb	r2, [r7, #15]
 8001b7a:	4922      	ldr	r1, [pc, #136]	; (8001c04 <RescheduleTimerList+0x128>)
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	4413      	add	r3, r2
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	440b      	add	r3, r1
 8001b86:	3308      	adds	r3, #8
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	88fb      	ldrh	r3, [r7, #6]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d20a      	bcs.n	8001ba6 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001b90:	7bfa      	ldrb	r2, [r7, #15]
 8001b92:	491c      	ldr	r1, [pc, #112]	; (8001c04 <RescheduleTimerList+0x128>)
 8001b94:	4613      	mov	r3, r2
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	4413      	add	r3, r2
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	440b      	add	r3, r1
 8001b9e:	3308      	adds	r3, #8
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	e013      	b.n	8001bce <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001ba6:	7bfa      	ldrb	r2, [r7, #15]
 8001ba8:	4916      	ldr	r1, [pc, #88]	; (8001c04 <RescheduleTimerList+0x128>)
 8001baa:	4613      	mov	r3, r2
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	4413      	add	r3, r2
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	440b      	add	r3, r1
 8001bb4:	3308      	adds	r3, #8
 8001bb6:	6819      	ldr	r1, [r3, #0]
 8001bb8:	88fb      	ldrh	r3, [r7, #6]
 8001bba:	7bfa      	ldrb	r2, [r7, #15]
 8001bbc:	1ac9      	subs	r1, r1, r3
 8001bbe:	4811      	ldr	r0, [pc, #68]	; (8001c04 <RescheduleTimerList+0x128>)
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	4413      	add	r3, r2
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	4403      	add	r3, r0
 8001bca:	3308      	adds	r3, #8
 8001bcc:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001bce:	7bfa      	ldrb	r2, [r7, #15]
 8001bd0:	490c      	ldr	r1, [pc, #48]	; (8001c04 <RescheduleTimerList+0x128>)
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	4413      	add	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	440b      	add	r3, r1
 8001bdc:	3315      	adds	r3, #21
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001be2:	7bfb      	ldrb	r3, [r7, #15]
 8001be4:	2b06      	cmp	r3, #6
 8001be6:	d1c7      	bne.n	8001b78 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001be8:	89bb      	ldrh	r3, [r7, #12]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff ff1e 	bl	8001a2c <RestartWakeupCounter>

  return ;
 8001bf0:	bf00      	nop
}
 8001bf2:	3710      	adds	r7, #16
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40002800 	.word	0x40002800
 8001bfc:	20000430 	.word	0x20000430
 8001c00:	200003dc 	.word	0x200003dc
 8001c04:	2000034c 	.word	0x2000034c
 8001c08:	200003e4 	.word	0x200003e4
 8001c0c:	200003ea 	.word	0x200003ea

08001c10 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08a      	sub	sp, #40	; 0x28
 8001c14:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c16:	f3ef 8310 	mrs	r3, PRIMASK
 8001c1a:	617b      	str	r3, [r7, #20]
  return(result);
 8001c1c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001c20:	b672      	cpsid	i
}
 8001c22:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001c24:	4b59      	ldr	r3, [pc, #356]	; (8001d8c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	22ca      	movs	r2, #202	; 0xca
 8001c2a:	625a      	str	r2, [r3, #36]	; 0x24
 8001c2c:	4b57      	ldr	r3, [pc, #348]	; (8001d8c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2253      	movs	r2, #83	; 0x53
 8001c32:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001c34:	4b55      	ldr	r3, [pc, #340]	; (8001d8c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	689a      	ldr	r2, [r3, #8]
 8001c3a:	4b54      	ldr	r3, [pc, #336]	; (8001d8c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c42:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001c44:	4b52      	ldr	r3, [pc, #328]	; (8001d90 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001c4c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001c50:	4950      	ldr	r1, [pc, #320]	; (8001d94 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001c52:	4613      	mov	r3, r2
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	4413      	add	r3, r2
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	440b      	add	r3, r1
 8001c5c:	330c      	adds	r3, #12
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d16e      	bne.n	8001d44 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001c66:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001c6a:	494a      	ldr	r1, [pc, #296]	; (8001d94 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	4413      	add	r3, r2
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	440b      	add	r3, r1
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001c7a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001c7e:	4945      	ldr	r1, [pc, #276]	; (8001d94 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001c80:	4613      	mov	r3, r2
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	4413      	add	r3, r2
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	440b      	add	r3, r1
 8001c8a:	3310      	adds	r3, #16
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001c90:	4b41      	ldr	r3, [pc, #260]	; (8001d98 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d04c      	beq.n	8001d34 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001c9a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001c9e:	493d      	ldr	r1, [pc, #244]	; (8001d94 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	4413      	add	r3, r2
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	440b      	add	r3, r1
 8001caa:	330d      	adds	r3, #13
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d124      	bne.n	8001cfe <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001cb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001cb8:	2101      	movs	r1, #1
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff fdf2 	bl	80018a4 <UnlinkTimer>
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	f383 8810 	msr	PRIMASK, r3
}
 8001cca:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001ccc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001cd0:	4930      	ldr	r1, [pc, #192]	; (8001d94 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	4413      	add	r3, r2
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	440b      	add	r3, r1
 8001cdc:	3304      	adds	r3, #4
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ce4:	4611      	mov	r1, r2
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 f9b8 	bl	800205c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001cec:	4b27      	ldr	r3, [pc, #156]	; (8001d8c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	22ca      	movs	r2, #202	; 0xca
 8001cf2:	625a      	str	r2, [r3, #36]	; 0x24
 8001cf4:	4b25      	ldr	r3, [pc, #148]	; (8001d8c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2253      	movs	r2, #83	; 0x53
 8001cfa:	625a      	str	r2, [r3, #36]	; 0x24
 8001cfc:	e012      	b.n	8001d24 <HW_TS_RTC_Wakeup_Handler+0x114>
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f383 8810 	msr	PRIMASK, r3
}
 8001d08:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001d0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f000 f920 	bl	8001f54 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001d14:	4b1d      	ldr	r3, [pc, #116]	; (8001d8c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	22ca      	movs	r2, #202	; 0xca
 8001d1a:	625a      	str	r2, [r3, #36]	; 0x24
 8001d1c:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2253      	movs	r2, #83	; 0x53
 8001d22:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001d24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d28:	69fa      	ldr	r2, [r7, #28]
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	69b8      	ldr	r0, [r7, #24]
 8001d2e:	f000 fa1b 	bl	8002168 <HW_TS_RTC_Int_AppNot>
 8001d32:	e022      	b.n	8001d7a <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001d34:	f7ff fed2 	bl	8001adc <RescheduleTimerList>
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	f383 8810 	msr	PRIMASK, r3
}
 8001d42:	e01a      	b.n	8001d7a <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001d44:	bf00      	nop
 8001d46:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0f8      	beq.n	8001d46 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001d54:	4b0d      	ldr	r3, [pc, #52]	; (8001d8c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001d64:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001d66:	4b0d      	ldr	r3, [pc, #52]	; (8001d9c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001d68:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f383 8810 	msr	PRIMASK, r3
}
 8001d78:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001d7a:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	22ff      	movs	r2, #255	; 0xff
 8001d80:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001d82:	bf00      	nop
}
 8001d84:	3728      	adds	r7, #40	; 0x28
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000430 	.word	0x20000430
 8001d90:	200003dc 	.word	0x200003dc
 8001d94:	2000034c 	.word	0x2000034c
 8001d98:	200003e4 	.word	0x200003e4
 8001d9c:	58000800 	.word	0x58000800

08001da0 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b088      	sub	sp, #32
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	6039      	str	r1, [r7, #0]
 8001daa:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001dac:	4b5e      	ldr	r3, [pc, #376]	; (8001f28 <HW_TS_Init+0x188>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	22ca      	movs	r2, #202	; 0xca
 8001db2:	625a      	str	r2, [r3, #36]	; 0x24
 8001db4:	4b5c      	ldr	r3, [pc, #368]	; (8001f28 <HW_TS_Init+0x188>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2253      	movs	r2, #83	; 0x53
 8001dba:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001dbc:	4b5b      	ldr	r3, [pc, #364]	; (8001f2c <HW_TS_Init+0x18c>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	4a5a      	ldr	r2, [pc, #360]	; (8001f2c <HW_TS_Init+0x18c>)
 8001dc2:	f043 0320 	orr.w	r3, r3, #32
 8001dc6:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001dc8:	4b58      	ldr	r3, [pc, #352]	; (8001f2c <HW_TS_Init+0x18c>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	f1c3 0304 	rsb	r3, r3, #4
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	4b55      	ldr	r3, [pc, #340]	; (8001f30 <HW_TS_Init+0x190>)
 8001ddc:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001dde:	4b53      	ldr	r3, [pc, #332]	; (8001f2c <HW_TS_Init+0x18c>)
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001de6:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001dea:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	fa92 f2a2 	rbit	r2, r2
 8001df2:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001df8:	697a      	ldr	r2, [r7, #20]
 8001dfa:	2a00      	cmp	r2, #0
 8001dfc:	d101      	bne.n	8001e02 <HW_TS_Init+0x62>
  {
    return 32U;
 8001dfe:	2220      	movs	r2, #32
 8001e00:	e003      	b.n	8001e0a <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	fab2 f282 	clz	r2, r2
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	40d3      	lsrs	r3, r2
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	3301      	adds	r3, #1
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	4b48      	ldr	r3, [pc, #288]	; (8001f34 <HW_TS_Init+0x194>)
 8001e14:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001e16:	4b45      	ldr	r3, [pc, #276]	; (8001f2c <HW_TS_Init+0x18c>)
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	3301      	adds	r3, #1
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	4b44      	ldr	r3, [pc, #272]	; (8001f38 <HW_TS_Init+0x198>)
 8001e28:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001e2a:	4b43      	ldr	r3, [pc, #268]	; (8001f38 <HW_TS_Init+0x198>)
 8001e2c:	881b      	ldrh	r3, [r3, #0]
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	4a40      	ldr	r2, [pc, #256]	; (8001f34 <HW_TS_Init+0x194>)
 8001e32:	7812      	ldrb	r2, [r2, #0]
 8001e34:	fb02 f303 	mul.w	r3, r2, r3
 8001e38:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e3c:	4a3c      	ldr	r2, [pc, #240]	; (8001f30 <HW_TS_Init+0x190>)
 8001e3e:	7812      	ldrb	r2, [r2, #0]
 8001e40:	40d3      	lsrs	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d904      	bls.n	8001e58 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001e4e:	4b3b      	ldr	r3, [pc, #236]	; (8001f3c <HW_TS_Init+0x19c>)
 8001e50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e54:	801a      	strh	r2, [r3, #0]
 8001e56:	e003      	b.n	8001e60 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	4b37      	ldr	r3, [pc, #220]	; (8001f3c <HW_TS_Init+0x19c>)
 8001e5e:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001e60:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001e64:	f7ff fb9c 	bl	80015a0 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001e68:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001e6c:	f7ff fb84 	bl	8001578 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001e70:	79fb      	ldrb	r3, [r7, #7]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d13d      	bne.n	8001ef2 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001e76:	4b32      	ldr	r3, [pc, #200]	; (8001f40 <HW_TS_Init+0x1a0>)
 8001e78:	2201      	movs	r2, #1
 8001e7a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001e7c:	4b31      	ldr	r3, [pc, #196]	; (8001f44 <HW_TS_Init+0x1a4>)
 8001e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8001e82:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001e84:	2300      	movs	r3, #0
 8001e86:	77fb      	strb	r3, [r7, #31]
 8001e88:	e00c      	b.n	8001ea4 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001e8a:	7ffa      	ldrb	r2, [r7, #31]
 8001e8c:	492e      	ldr	r1, [pc, #184]	; (8001f48 <HW_TS_Init+0x1a8>)
 8001e8e:	4613      	mov	r3, r2
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	4413      	add	r3, r2
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	440b      	add	r3, r1
 8001e98:	330c      	adds	r3, #12
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001e9e:	7ffb      	ldrb	r3, [r7, #31]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	77fb      	strb	r3, [r7, #31]
 8001ea4:	7ffb      	ldrb	r3, [r7, #31]
 8001ea6:	2b05      	cmp	r3, #5
 8001ea8:	d9ef      	bls.n	8001e8a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001eaa:	4b28      	ldr	r3, [pc, #160]	; (8001f4c <HW_TS_Init+0x1ac>)
 8001eac:	2206      	movs	r2, #6
 8001eae:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001eb0:	4b1d      	ldr	r3, [pc, #116]	; (8001f28 <HW_TS_Init+0x188>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689a      	ldr	r2, [r3, #8]
 8001eb6:	4b1c      	ldr	r3, [pc, #112]	; (8001f28 <HW_TS_Init+0x188>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ebe:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001ec0:	4b19      	ldr	r3, [pc, #100]	; (8001f28 <HW_TS_Init+0x188>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	4b17      	ldr	r3, [pc, #92]	; (8001f28 <HW_TS_Init+0x188>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001ed0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001ed2:	4b1f      	ldr	r3, [pc, #124]	; (8001f50 <HW_TS_Init+0x1b0>)
 8001ed4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001ed8:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001eda:	2003      	movs	r0, #3
 8001edc:	f002 fa19 	bl	8004312 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001ee0:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <HW_TS_Init+0x188>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689a      	ldr	r2, [r3, #8]
 8001ee6:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <HW_TS_Init+0x188>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	e009      	b.n	8001f06 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001ef2:	4b0d      	ldr	r3, [pc, #52]	; (8001f28 <HW_TS_Init+0x188>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d002      	beq.n	8001f06 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001f00:	2003      	movs	r0, #3
 8001f02:	f002 f9f8 	bl	80042f6 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001f06:	4b08      	ldr	r3, [pc, #32]	; (8001f28 <HW_TS_Init+0x188>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	22ff      	movs	r2, #255	; 0xff
 8001f0c:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2103      	movs	r1, #3
 8001f12:	2003      	movs	r0, #3
 8001f14:	f002 f9ad 	bl	8004272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001f18:	2003      	movs	r0, #3
 8001f1a:	f002 f9c4 	bl	80042a6 <HAL_NVIC_EnableIRQ>

  return;
 8001f1e:	bf00      	nop
}
 8001f20:	3720      	adds	r7, #32
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	20000430 	.word	0x20000430
 8001f2c:	40002800 	.word	0x40002800
 8001f30:	200003e5 	.word	0x200003e5
 8001f34:	200003e6 	.word	0x200003e6
 8001f38:	200003e8 	.word	0x200003e8
 8001f3c:	200003ea 	.word	0x200003ea
 8001f40:	200003e4 	.word	0x200003e4
 8001f44:	200003e0 	.word	0x200003e0
 8001f48:	2000034c 	.word	0x2000034c
 8001f4c:	200003dc 	.word	0x200003dc
 8001f50:	58000800 	.word	0x58000800

08001f54 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f5e:	f3ef 8310 	mrs	r3, PRIMASK
 8001f62:	60fb      	str	r3, [r7, #12]
  return(result);
 8001f64:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001f66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f68:	b672      	cpsid	i
}
 8001f6a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001f6c:	2003      	movs	r0, #3
 8001f6e:	f002 f9a8 	bl	80042c2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001f72:	4b34      	ldr	r3, [pc, #208]	; (8002044 <HW_TS_Stop+0xf0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	22ca      	movs	r2, #202	; 0xca
 8001f78:	625a      	str	r2, [r3, #36]	; 0x24
 8001f7a:	4b32      	ldr	r3, [pc, #200]	; (8002044 <HW_TS_Stop+0xf0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2253      	movs	r2, #83	; 0x53
 8001f80:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001f82:	79fa      	ldrb	r2, [r7, #7]
 8001f84:	4930      	ldr	r1, [pc, #192]	; (8002048 <HW_TS_Stop+0xf4>)
 8001f86:	4613      	mov	r3, r2
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	4413      	add	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	440b      	add	r3, r1
 8001f90:	330c      	adds	r3, #12
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d142      	bne.n	8002020 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff fc80 	bl	80018a4 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001fa4:	4b29      	ldr	r3, [pc, #164]	; (800204c <HW_TS_Stop+0xf8>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001faa:	7cfb      	ldrb	r3, [r7, #19]
 8001fac:	2b06      	cmp	r3, #6
 8001fae:	d12f      	bne.n	8002010 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001fb0:	4b27      	ldr	r3, [pc, #156]	; (8002050 <HW_TS_Stop+0xfc>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fbc:	d107      	bne.n	8001fce <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001fbe:	bf00      	nop
 8001fc0:	4b20      	ldr	r3, [pc, #128]	; (8002044 <HW_TS_Stop+0xf0>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	f003 0304 	and.w	r3, r3, #4
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1f8      	bne.n	8001fc0 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001fce:	4b1d      	ldr	r3, [pc, #116]	; (8002044 <HW_TS_Stop+0xf0>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	4b1b      	ldr	r3, [pc, #108]	; (8002044 <HW_TS_Stop+0xf0>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fdc:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001fde:	bf00      	nop
 8001fe0:	4b18      	ldr	r3, [pc, #96]	; (8002044 <HW_TS_Stop+0xf0>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	f003 0304 	and.w	r3, r3, #4
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0f8      	beq.n	8001fe0 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001fee:	4b15      	ldr	r3, [pc, #84]	; (8002044 <HW_TS_Stop+0xf0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	4b13      	ldr	r3, [pc, #76]	; (8002044 <HW_TS_Stop+0xf0>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001ffe:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002000:	4b14      	ldr	r3, [pc, #80]	; (8002054 <HW_TS_Stop+0x100>)
 8002002:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002006:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002008:	2003      	movs	r0, #3
 800200a:	f002 f982 	bl	8004312 <HAL_NVIC_ClearPendingIRQ>
 800200e:	e007      	b.n	8002020 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002010:	4b11      	ldr	r3, [pc, #68]	; (8002058 <HW_TS_Stop+0x104>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	b2db      	uxtb	r3, r3
 8002016:	7cfa      	ldrb	r2, [r7, #19]
 8002018:	429a      	cmp	r2, r3
 800201a:	d001      	beq.n	8002020 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 800201c:	f7ff fd5e 	bl	8001adc <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002020:	4b08      	ldr	r3, [pc, #32]	; (8002044 <HW_TS_Stop+0xf0>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	22ff      	movs	r2, #255	; 0xff
 8002026:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002028:	2003      	movs	r0, #3
 800202a:	f002 f93c 	bl	80042a6 <HAL_NVIC_EnableIRQ>
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	f383 8810 	msr	PRIMASK, r3
}
 8002038:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800203a:	bf00      	nop
}
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000430 	.word	0x20000430
 8002048:	2000034c 	.word	0x2000034c
 800204c:	200003dc 	.word	0x200003dc
 8002050:	40002800 	.word	0x40002800
 8002054:	58000800 	.word	0x58000800
 8002058:	200003dd 	.word	0x200003dd

0800205c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	6039      	str	r1, [r7, #0]
 8002066:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002068:	79fa      	ldrb	r2, [r7, #7]
 800206a:	493b      	ldr	r1, [pc, #236]	; (8002158 <HW_TS_Start+0xfc>)
 800206c:	4613      	mov	r3, r2
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	4413      	add	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	440b      	add	r3, r1
 8002076:	330c      	adds	r3, #12
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d103      	bne.n	8002088 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002080:	79fb      	ldrb	r3, [r7, #7]
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff ff66 	bl	8001f54 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002088:	f3ef 8310 	mrs	r3, PRIMASK
 800208c:	60fb      	str	r3, [r7, #12]
  return(result);
 800208e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002090:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002092:	b672      	cpsid	i
}
 8002094:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002096:	2003      	movs	r0, #3
 8002098:	f002 f913 	bl	80042c2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800209c:	4b2f      	ldr	r3, [pc, #188]	; (800215c <HW_TS_Start+0x100>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	22ca      	movs	r2, #202	; 0xca
 80020a2:	625a      	str	r2, [r3, #36]	; 0x24
 80020a4:	4b2d      	ldr	r3, [pc, #180]	; (800215c <HW_TS_Start+0x100>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2253      	movs	r2, #83	; 0x53
 80020aa:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80020ac:	79fa      	ldrb	r2, [r7, #7]
 80020ae:	492a      	ldr	r1, [pc, #168]	; (8002158 <HW_TS_Start+0xfc>)
 80020b0:	4613      	mov	r3, r2
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	4413      	add	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	440b      	add	r3, r1
 80020ba:	330c      	adds	r3, #12
 80020bc:	2202      	movs	r2, #2
 80020be:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80020c0:	79fa      	ldrb	r2, [r7, #7]
 80020c2:	4925      	ldr	r1, [pc, #148]	; (8002158 <HW_TS_Start+0xfc>)
 80020c4:	4613      	mov	r3, r2
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	4413      	add	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	440b      	add	r3, r1
 80020ce:	3308      	adds	r3, #8
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80020d4:	79fa      	ldrb	r2, [r7, #7]
 80020d6:	4920      	ldr	r1, [pc, #128]	; (8002158 <HW_TS_Start+0xfc>)
 80020d8:	4613      	mov	r3, r2
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	4413      	add	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	440b      	add	r3, r1
 80020e2:	3304      	adds	r3, #4
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff fb30 	bl	8001750 <linkTimer>
 80020f0:	4603      	mov	r3, r0
 80020f2:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80020f4:	4b1a      	ldr	r3, [pc, #104]	; (8002160 <HW_TS_Start+0x104>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80020fa:	4b1a      	ldr	r3, [pc, #104]	; (8002164 <HW_TS_Start+0x108>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	7c7a      	ldrb	r2, [r7, #17]
 8002102:	429a      	cmp	r2, r3
 8002104:	d002      	beq.n	800210c <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8002106:	f7ff fce9 	bl	8001adc <RescheduleTimerList>
 800210a:	e013      	b.n	8002134 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800210c:	79fa      	ldrb	r2, [r7, #7]
 800210e:	4912      	ldr	r1, [pc, #72]	; (8002158 <HW_TS_Start+0xfc>)
 8002110:	4613      	mov	r3, r2
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	4413      	add	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	440b      	add	r3, r1
 800211a:	3308      	adds	r3, #8
 800211c:	6819      	ldr	r1, [r3, #0]
 800211e:	8a7b      	ldrh	r3, [r7, #18]
 8002120:	79fa      	ldrb	r2, [r7, #7]
 8002122:	1ac9      	subs	r1, r1, r3
 8002124:	480c      	ldr	r0, [pc, #48]	; (8002158 <HW_TS_Start+0xfc>)
 8002126:	4613      	mov	r3, r2
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	4413      	add	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	4403      	add	r3, r0
 8002130:	3308      	adds	r3, #8
 8002132:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002134:	4b09      	ldr	r3, [pc, #36]	; (800215c <HW_TS_Start+0x100>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	22ff      	movs	r2, #255	; 0xff
 800213a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800213c:	2003      	movs	r0, #3
 800213e:	f002 f8b2 	bl	80042a6 <HAL_NVIC_EnableIRQ>
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	f383 8810 	msr	PRIMASK, r3
}
 800214c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800214e:	bf00      	nop
}
 8002150:	3718      	adds	r7, #24
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	2000034c 	.word	0x2000034c
 800215c:	20000430 	.word	0x20000430
 8002160:	200003dc 	.word	0x200003dc
 8002164:	200003dd 	.word	0x200003dd

08002168 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	460b      	mov	r3, r1
 8002172:	607a      	str	r2, [r7, #4]
 8002174:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4798      	blx	r3

  return;
 800217a:	bf00      	nop
}
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
	...

08002184 <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	60b9      	str	r1, [r7, #8]
 800218c:	607b      	str	r3, [r7, #4]
 800218e:	4603      	mov	r3, r0
 8002190:	73fb      	strb	r3, [r7, #15]
 8002192:	4613      	mov	r3, r2
 8002194:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 8002196:	7bfb      	ldrb	r3, [r7, #15]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d10c      	bne.n	80021b6 <HW_UART_Receive_IT+0x32>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_UART_RX_IT(huart1, USART1);
 800219c:	4a08      	ldr	r2, [pc, #32]	; (80021c0 <HW_UART_Receive_IT+0x3c>)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <HW_UART_Receive_IT+0x40>)
 80021a4:	4a08      	ldr	r2, [pc, #32]	; (80021c8 <HW_UART_Receive_IT+0x44>)
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	89bb      	ldrh	r3, [r7, #12]
 80021aa:	461a      	mov	r2, r3
 80021ac:	68b9      	ldr	r1, [r7, #8]
 80021ae:	4805      	ldr	r0, [pc, #20]	; (80021c4 <HW_UART_Receive_IT+0x40>)
 80021b0:	f004 fbe8 	bl	8006984 <HAL_UART_Receive_IT>
            break;
 80021b4:	e000      	b.n	80021b8 <HW_UART_Receive_IT+0x34>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 80021b6:	bf00      	nop
    }

    return;
 80021b8:	bf00      	nop
}
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	200003ec 	.word	0x200003ec
 80021c4:	20000454 	.word	0x20000454
 80021c8:	40013800 	.word	0x40013800

080021cc <HW_UART_Transmit_IT>:

void HW_UART_Transmit_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size,  void (*cb)(void))
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60b9      	str	r1, [r7, #8]
 80021d4:	607b      	str	r3, [r7, #4]
 80021d6:	4603      	mov	r3, r0
 80021d8:	73fb      	strb	r3, [r7, #15]
 80021da:	4613      	mov	r3, r2
 80021dc:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 80021de:	7bfb      	ldrb	r3, [r7, #15]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d10c      	bne.n	80021fe <HW_UART_Transmit_IT+0x32>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_UART_TX_IT(huart1, USART1);
 80021e4:	4a08      	ldr	r2, [pc, #32]	; (8002208 <HW_UART_Transmit_IT+0x3c>)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	4b08      	ldr	r3, [pc, #32]	; (800220c <HW_UART_Transmit_IT+0x40>)
 80021ec:	4a08      	ldr	r2, [pc, #32]	; (8002210 <HW_UART_Transmit_IT+0x44>)
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	89bb      	ldrh	r3, [r7, #12]
 80021f2:	461a      	mov	r2, r3
 80021f4:	68b9      	ldr	r1, [r7, #8]
 80021f6:	4805      	ldr	r0, [pc, #20]	; (800220c <HW_UART_Transmit_IT+0x40>)
 80021f8:	f004 fb30 	bl	800685c <HAL_UART_Transmit_IT>
            break;
 80021fc:	e000      	b.n	8002200 <HW_UART_Transmit_IT+0x34>
            HW_UART_TX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 80021fe:	bf00      	nop
    }

    return;
 8002200:	bf00      	nop
}
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	200003f0 	.word	0x200003f0
 800220c:	20000454 	.word	0x20000454
 8002210:	40013800 	.word	0x40013800

08002214 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	461a      	mov	r2, r3
 8002222:	4b09      	ldr	r3, [pc, #36]	; (8002248 <HAL_UART_RxCpltCallback+0x34>)
 8002224:	429a      	cmp	r2, r3
 8002226:	d107      	bne.n	8002238 <HAL_UART_RxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 8002228:	4b08      	ldr	r3, [pc, #32]	; (800224c <HAL_UART_RxCpltCallback+0x38>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d005      	beq.n	800223c <HAL_UART_RxCpltCallback+0x28>
            {
                HW_huart1RxCb();
 8002230:	4b06      	ldr	r3, [pc, #24]	; (800224c <HAL_UART_RxCpltCallback+0x38>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4798      	blx	r3
            }
            break;
 8002236:	e001      	b.n	800223c <HAL_UART_RxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8002238:	bf00      	nop
 800223a:	e000      	b.n	800223e <HAL_UART_RxCpltCallback+0x2a>
            break;
 800223c:	bf00      	nop
    }

    return;
 800223e:	bf00      	nop
}
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40013800 	.word	0x40013800
 800224c:	200003ec 	.word	0x200003ec

08002250 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	461a      	mov	r2, r3
 800225e:	4b09      	ldr	r3, [pc, #36]	; (8002284 <HAL_UART_TxCpltCallback+0x34>)
 8002260:	429a      	cmp	r2, r3
 8002262:	d107      	bne.n	8002274 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8002264:	4b08      	ldr	r3, [pc, #32]	; (8002288 <HAL_UART_TxCpltCallback+0x38>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d005      	beq.n	8002278 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 800226c:	4b06      	ldr	r3, [pc, #24]	; (8002288 <HAL_UART_TxCpltCallback+0x38>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4798      	blx	r3
            }
            break;
 8002272:	e001      	b.n	8002278 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8002274:	bf00      	nop
 8002276:	e000      	b.n	800227a <HAL_UART_TxCpltCallback+0x2a>
            break;
 8002278:	bf00      	nop
    }

    return;
 800227a:	bf00      	nop
}
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40013800 	.word	0x40013800
 8002288:	200003f0 	.word	0x200003f0

0800228c <LL_RCC_LSE_SetDriveCapability>:
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002294:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800229c:	f023 0218 	bic.w	r2, r3, #24
 80022a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <LL_AHB1_GRP1_EnableClock>:
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80022c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80022c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80022d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4013      	ands	r3, r2
 80022da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022dc:	68fb      	ldr	r3, [r7, #12]
}
 80022de:	bf00      	nop
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <LL_AHB2_GRP1_EnableClock>:
{
 80022ea:	b480      	push	{r7}
 80022ec:	b085      	sub	sp, #20
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80022f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4313      	orrs	r3, r2
 8002300:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002306:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4013      	ands	r3, r2
 800230c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800230e:	68fb      	ldr	r3, [r7, #12]
}
 8002310:	bf00      	nop
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002320:	f001 fdb4 	bl	8003e8c <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002324:	f7fe ff7a 	bl	800121c <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002328:	f000 f811 	bl	800234e <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800232c:	f000 f85b 	bl	80023e6 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8002330:	f000 f87a 	bl	8002428 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002334:	f000 f91c 	bl	8002570 <MX_GPIO_Init>
  MX_DMA_Init();
 8002338:	f000 f908 	bl	800254c <MX_DMA_Init>
  MX_RTC_Init();
 800233c:	f000 f888 	bl	8002450 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8002340:	f000 f8b6 	bl	80024b0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002344:	f7fe ff78 	bl	8001238 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
	{
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8002348:	f7ff f86e 	bl	8001428 <MX_APPE_Process>
 800234c:	e7fc      	b.n	8002348 <main+0x2c>

0800234e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b098      	sub	sp, #96	; 0x60
 8002352:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002354:	f107 031c 	add.w	r3, r7, #28
 8002358:	2244      	movs	r2, #68	; 0x44
 800235a:	2100      	movs	r1, #0
 800235c:	4618      	mov	r0, r3
 800235e:	f008 f98c 	bl	800a67a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002362:	463b      	mov	r3, r7
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	609a      	str	r2, [r3, #8]
 800236c:	60da      	str	r2, [r3, #12]
 800236e:	611a      	str	r2, [r3, #16]
 8002370:	615a      	str	r2, [r3, #20]
 8002372:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002374:	f002 fcba 	bl	8004cec <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002378:	2000      	movs	r0, #0
 800237a:	f7ff ff87 	bl	800228c <LL_RCC_LSE_SetDriveCapability>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800237e:	2307      	movs	r3, #7
 8002380:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002382:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002386:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002388:	2301      	movs	r3, #1
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800238c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002390:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002392:	2340      	movs	r3, #64	; 0x40
 8002394:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002396:	2300      	movs	r3, #0
 8002398:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800239a:	f107 031c 	add.w	r3, r7, #28
 800239e:	4618      	mov	r0, r3
 80023a0:	f003 f80c 	bl	80053bc <HAL_RCC_OscConfig>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <SystemClock_Config+0x60>
  {
    Error_Handler();
 80023aa:	f000 f8eb 	bl	8002584 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80023ae:	236f      	movs	r3, #111	; 0x6f
 80023b0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80023b2:	2302      	movs	r3, #2
 80023b4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023b6:	2300      	movs	r3, #0
 80023b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023ba:	2300      	movs	r3, #0
 80023bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023be:	2300      	movs	r3, #0
 80023c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80023c6:	2300      	movs	r3, #0
 80023c8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80023ca:	463b      	mov	r3, r7
 80023cc:	2101      	movs	r1, #1
 80023ce:	4618      	mov	r0, r3
 80023d0:	f003 fb2a 	bl	8005a28 <HAL_RCC_ClockConfig>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <SystemClock_Config+0x90>
  {
    Error_Handler();
 80023da:	f000 f8d3 	bl	8002584 <Error_Handler>
  }
}
 80023de:	bf00      	nop
 80023e0:	3760      	adds	r7, #96	; 0x60
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b08c      	sub	sp, #48	; 0x30
 80023ea:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023ec:	463b      	mov	r3, r7
 80023ee:	2230      	movs	r2, #48	; 0x30
 80023f0:	2100      	movs	r1, #0
 80023f2:	4618      	mov	r0, r3
 80023f4:	f008 f941 	bl	800a67a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80023f8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80023fc:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80023fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002402:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8002404:	2302      	movs	r3, #2
 8002406:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002408:	2310      	movs	r3, #16
 800240a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800240c:	463b      	mov	r3, r7
 800240e:	4618      	mov	r0, r3
 8002410:	f003 fecc 	bl	80061ac <HAL_RCCEx_PeriphCLKConfig>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 800241a:	f000 f8b3 	bl	8002584 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800241e:	bf00      	nop
 8002420:	3730      	adds	r7, #48	; 0x30
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
	...

08002428 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
void MX_IPCC_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 800242c:	4b06      	ldr	r3, [pc, #24]	; (8002448 <MX_IPCC_Init+0x20>)
 800242e:	4a07      	ldr	r2, [pc, #28]	; (800244c <MX_IPCC_Init+0x24>)
 8002430:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002432:	4805      	ldr	r0, [pc, #20]	; (8002448 <MX_IPCC_Init+0x20>)
 8002434:	f002 fbd4 	bl	8004be0 <HAL_IPCC_Init>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 800243e:	f000 f8a1 	bl	8002584 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	200003f4 	.word	0x200003f4
 800244c:	58000c00 	.word	0x58000c00

08002450 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
void MX_RTC_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002454:	4b14      	ldr	r3, [pc, #80]	; (80024a8 <MX_RTC_Init+0x58>)
 8002456:	4a15      	ldr	r2, [pc, #84]	; (80024ac <MX_RTC_Init+0x5c>)
 8002458:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800245a:	4b13      	ldr	r3, [pc, #76]	; (80024a8 <MX_RTC_Init+0x58>)
 800245c:	2200      	movs	r2, #0
 800245e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002460:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <MX_RTC_Init+0x58>)
 8002462:	220f      	movs	r2, #15
 8002464:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002466:	4b10      	ldr	r3, [pc, #64]	; (80024a8 <MX_RTC_Init+0x58>)
 8002468:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800246c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800246e:	4b0e      	ldr	r3, [pc, #56]	; (80024a8 <MX_RTC_Init+0x58>)
 8002470:	2200      	movs	r2, #0
 8002472:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002474:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <MX_RTC_Init+0x58>)
 8002476:	2200      	movs	r2, #0
 8002478:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800247a:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <MX_RTC_Init+0x58>)
 800247c:	2200      	movs	r2, #0
 800247e:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002480:	4809      	ldr	r0, [pc, #36]	; (80024a8 <MX_RTC_Init+0x58>)
 8002482:	f003 ff89 	bl	8006398 <HAL_RTC_Init>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 800248c:	f000 f87a 	bl	8002584 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002490:	2200      	movs	r2, #0
 8002492:	2100      	movs	r1, #0
 8002494:	4804      	ldr	r0, [pc, #16]	; (80024a8 <MX_RTC_Init+0x58>)
 8002496:	f004 f87f 	bl	8006598 <HAL_RTCEx_SetWakeUpTimer_IT>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 80024a0:	f000 f870 	bl	8002584 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80024a4:	bf00      	nop
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	20000430 	.word	0x20000430
 80024ac:	40002800 	.word	0x40002800

080024b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024b4:	4b23      	ldr	r3, [pc, #140]	; (8002544 <MX_USART1_UART_Init+0x94>)
 80024b6:	4a24      	ldr	r2, [pc, #144]	; (8002548 <MX_USART1_UART_Init+0x98>)
 80024b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80024ba:	4b22      	ldr	r3, [pc, #136]	; (8002544 <MX_USART1_UART_Init+0x94>)
 80024bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024c2:	4b20      	ldr	r3, [pc, #128]	; (8002544 <MX_USART1_UART_Init+0x94>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024c8:	4b1e      	ldr	r3, [pc, #120]	; (8002544 <MX_USART1_UART_Init+0x94>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024ce:	4b1d      	ldr	r3, [pc, #116]	; (8002544 <MX_USART1_UART_Init+0x94>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024d4:	4b1b      	ldr	r3, [pc, #108]	; (8002544 <MX_USART1_UART_Init+0x94>)
 80024d6:	220c      	movs	r2, #12
 80024d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024da:	4b1a      	ldr	r3, [pc, #104]	; (8002544 <MX_USART1_UART_Init+0x94>)
 80024dc:	2200      	movs	r2, #0
 80024de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 80024e0:	4b18      	ldr	r3, [pc, #96]	; (8002544 <MX_USART1_UART_Init+0x94>)
 80024e2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80024e6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024e8:	4b16      	ldr	r3, [pc, #88]	; (8002544 <MX_USART1_UART_Init+0x94>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024ee:	4b15      	ldr	r3, [pc, #84]	; (8002544 <MX_USART1_UART_Init+0x94>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024f4:	4b13      	ldr	r3, [pc, #76]	; (8002544 <MX_USART1_UART_Init+0x94>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024fa:	4812      	ldr	r0, [pc, #72]	; (8002544 <MX_USART1_UART_Init+0x94>)
 80024fc:	f004 f95e 	bl	80067bc <HAL_UART_Init>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002506:	f000 f83d 	bl	8002584 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800250a:	2100      	movs	r1, #0
 800250c:	480d      	ldr	r0, [pc, #52]	; (8002544 <MX_USART1_UART_Init+0x94>)
 800250e:	f006 fa7a 	bl	8008a06 <HAL_UARTEx_SetTxFifoThreshold>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002518:	f000 f834 	bl	8002584 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800251c:	2100      	movs	r1, #0
 800251e:	4809      	ldr	r0, [pc, #36]	; (8002544 <MX_USART1_UART_Init+0x94>)
 8002520:	f006 faaf 	bl	8008a82 <HAL_UARTEx_SetRxFifoThreshold>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 800252a:	f000 f82b 	bl	8002584 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800252e:	4805      	ldr	r0, [pc, #20]	; (8002544 <MX_USART1_UART_Init+0x94>)
 8002530:	f006 fa30 	bl	8008994 <HAL_UARTEx_DisableFifoMode>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 800253a:	f000 f823 	bl	8002584 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20000454 	.word	0x20000454
 8002548:	40013800 	.word	0x40013800

0800254c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002550:	2004      	movs	r0, #4
 8002552:	f7ff feb1 	bl	80022b8 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002556:	2001      	movs	r0, #1
 8002558:	f7ff feae 	bl	80022b8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 800255c:	2200      	movs	r2, #0
 800255e:	210f      	movs	r1, #15
 8002560:	200e      	movs	r0, #14
 8002562:	f001 fe86 	bl	8004272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002566:	200e      	movs	r0, #14
 8002568:	f001 fe9d 	bl	80042a6 <HAL_NVIC_EnableIRQ>

}
 800256c:	bf00      	nop
 800256e:	bd80      	pop	{r7, pc}

08002570 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002574:	2004      	movs	r0, #4
 8002576:	f7ff feb8 	bl	80022ea <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800257a:	2001      	movs	r0, #1
 800257c:	f7ff feb5 	bl	80022ea <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002580:	bf00      	nop
 8002582:	bd80      	pop	{r7, pc}

08002584 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
	...

08002594 <LL_PWR_SetPowerMode>:
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 800259c:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <LL_PWR_SetPowerMode+0x24>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f023 0207 	bic.w	r2, r3, #7
 80025a4:	4904      	ldr	r1, [pc, #16]	; (80025b8 <LL_PWR_SetPowerMode+0x24>)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	600b      	str	r3, [r1, #0]
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	58000400 	.word	0x58000400

080025bc <LL_PWR_ClearFlag_WU>:
  * @brief  Clear Wake-up Flags
  * @rmtoll SCR          CWUF          LL_PWR_ClearFlag_WU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF);
 80025c0:	4b03      	ldr	r3, [pc, #12]	; (80025d0 <LL_PWR_ClearFlag_WU+0x14>)
 80025c2:	2209      	movs	r2, #9
 80025c4:	619a      	str	r2, [r3, #24]
}
 80025c6:	bf00      	nop
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	58000400 	.word	0x58000400

080025d4 <LL_PWR_IsActiveFlag_C2SB>:
  * @brief  System standby flag for CPU2
  * @rmtoll EXTSCR       C2SBF         LL_PWR_IsActiveFlag_C2SB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2SB(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2SBF) == (PWR_EXTSCR_C2SBF)) ? 1UL : 0UL);
 80025d8:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <LL_PWR_IsActiveFlag_C2SB+0x24>)
 80025da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025e6:	d101      	bne.n	80025ec <LL_PWR_IsActiveFlag_C2SB+0x18>
 80025e8:	2301      	movs	r3, #1
 80025ea:	e000      	b.n	80025ee <LL_PWR_IsActiveFlag_C2SB+0x1a>
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	58000400 	.word	0x58000400

080025fc <LL_PWR_IsActiveFlag_C2DS>:
  * @brief  Get deepsleep mode for CPU2
  * @rmtoll EXTSCR       C2DS          LL_PWR_IsActiveFlag_C2DS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2DS(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2DS) == (PWR_EXTSCR_C2DS)) ? 1UL : 0UL);
 8002600:	4b07      	ldr	r3, [pc, #28]	; (8002620 <LL_PWR_IsActiveFlag_C2DS+0x24>)
 8002602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002606:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800260a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800260e:	d101      	bne.n	8002614 <LL_PWR_IsActiveFlag_C2DS+0x18>
 8002610:	2301      	movs	r3, #1
 8002612:	e000      	b.n	8002616 <LL_PWR_IsActiveFlag_C2DS+0x1a>
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	58000400 	.word	0x58000400

08002624 <LL_RCC_HSE_Enable>:
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002628:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002632:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002636:	6013      	str	r3, [r2, #0]
}
 8002638:	bf00      	nop
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <LL_RCC_HSE_IsReady>:
{
 8002642:	b480      	push	{r7}
 8002644:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002650:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002654:	d101      	bne.n	800265a <LL_RCC_HSE_IsReady+0x18>
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <LL_RCC_HSE_IsReady+0x1a>
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <LL_RCC_HSI_Enable>:
{
 8002666:	b480      	push	{r7}
 8002668:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800266a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002678:	6013      	str	r3, [r2, #0]
}
 800267a:	bf00      	nop
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <LL_RCC_HSI_IsReady>:
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002696:	d101      	bne.n	800269c <LL_RCC_HSI_IsReady+0x18>
 8002698:	2301      	movs	r3, #1
 800269a:	e000      	b.n	800269e <LL_RCC_HSI_IsReady+0x1a>
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <LL_RCC_SetSysClkSource>:
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80026b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f023 0203 	bic.w	r2, r3, #3
 80026ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	608b      	str	r3, [r1, #8]
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <LL_RCC_GetSysClkSource>:
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80026d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 030c 	and.w	r3, r3, #12
}
 80026de:	4618      	mov	r0, r3
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <LL_RCC_SetSMPSClockSource>:
  *          clock source when a supported SMPS Step Down converter clock
  *          MSIRANGE is set (LL_RCC_MSIRANGE_8 to LL_RCC_MSIRANGE_11)
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSMPSClockSource(uint32_t SMPSSource)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80026f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f6:	f023 0203 	bic.w	r2, r3, #3
 80026fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4313      	orrs	r3, r2
 8002702:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <LL_RCC_ClearResetFlags>:
  * @brief  Set RMVF bit to clear the reset flags.
  * @rmtoll CSR          RMVF          LL_RCC_ClearResetFlags
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ClearResetFlags(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8002714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002718:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800271c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002720:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002724:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002728:	bf00      	nop
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
	...

08002734 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002738:	4b05      	ldr	r3, [pc, #20]	; (8002750 <LL_LPM_EnableSleep+0x1c>)
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	4a04      	ldr	r2, [pc, #16]	; (8002750 <LL_LPM_EnableSleep+0x1c>)
 800273e:	f023 0304 	bic.w	r3, r3, #4
 8002742:	6113      	str	r3, [r2, #16]
}
 8002744:	bf00      	nop
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002758:	4b05      	ldr	r3, [pc, #20]	; (8002770 <LL_LPM_EnableDeepSleep+0x1c>)
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	4a04      	ldr	r2, [pc, #16]	; (8002770 <LL_LPM_EnableDeepSleep+0x1c>)
 800275e:	f043 0304 	orr.w	r3, r3, #4
 8002762:	6113      	str	r3, [r2, #16]
}
 8002764:	bf00      	nop
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	3220      	adds	r2, #32
 8002784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002788:	4a05      	ldr	r2, [pc, #20]	; (80027a0 <LL_HSEM_1StepLock+0x2c>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d001      	beq.n	8002792 <LL_HSEM_1StepLock+0x1e>
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <LL_HSEM_1StepLock+0x20>
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	80000400 	.word	0x80000400

080027a4 <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	68ba      	ldr	r2, [r7, #8]
 80027ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80027be:	bf00      	nop
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr

080027ca <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode(void)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	af00      	add	r7, sp, #0
/* USER CODE END PWR_EnterOffMode_1 */
  /**
   * The systick should be disabled for the same reason than when the device enters stop mode because
   * at this time, the device may enter either OffMode or StopMode.
   */
  HAL_SuspendTick();
 80027ce:	f001 fbe3 	bl	8003f98 <HAL_SuspendTick>
  __HAL_RCC_CLEAR_RESET_FLAGS();
 80027d2:	f7ff ff9d 	bl	8002710 <LL_RCC_ClearResetFlags>

  EnterLowPower();
 80027d6:	f000 f835 	bl	8002844 <EnterLowPower>
   * in critical section. If an interrupt occurs while in that critical section before that point,
   * the flag is set and will be cleared here but the system will not enter Off Mode
   * because an interrupt is pending in the NVIC. The ISR will be executed when moving out
   * of this critical section
   */
  LL_PWR_ClearFlag_WU();
 80027da:	f7ff feef 	bl	80025bc <LL_PWR_ClearFlag_WU>

  LL_PWR_SetPowerMode(LL_PWR_MODE_STANDBY);
 80027de:	2003      	movs	r0, #3
 80027e0:	f7ff fed8 	bl	8002594 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 80027e4:	f7ff ffb6 	bl	8002754 <LL_LPM_EnableDeepSleep>
#endif

/* USER CODE BEGIN PWR_EnterOffMode_2 */

/* USER CODE END PWR_EnterOffMode_2 */
  return;
 80027e8:	bf00      	nop
}
 80027ea:	bd80      	pop	{r7, pc}

080027ec <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  }
#endif
/* USER CODE BEGIN PWR_ExitOffMode_2 */

/* USER CODE END PWR_ExitOffMode_2 */
  return;
 80027f0:	bf00      	nop
}
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode(void)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	af00      	add	r7, sp, #0
   *
   * When in production, the HAL_DBGMCU_EnableDBGStopMode() is not called so that the device can reach best power consumption
   * However, the systick should be disabled anyway to avoid the case when it is about to expire at the same time the device enters
   * stop mode (this will abort the Stop Mode entry).
   */
  HAL_SuspendTick();
 80027fe:	f001 fbcb 	bl	8003f98 <HAL_SuspendTick>

  /**
   * This function is called from CRITICAL SECTION
   */
  EnterLowPower();
 8002802:	f000 f81f 	bl	8002844 <EnterLowPower>

  /************************************************************************************
   * ENTER STOP MODE
   ***********************************************************************************/
  LL_PWR_SetPowerMode(LL_PWR_MODE_STOP1);
 8002806:	2001      	movs	r0, #1
 8002808:	f7ff fec4 	bl	8002594 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 800280c:	f7ff ffa2 	bl	8002754 <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 8002810:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterStopMode_2 */

/* USER CODE END PWR_EnterStopMode_2 */
  return;
 8002812:	bf00      	nop
}
 8002814:	bd80      	pop	{r7, pc}

08002816 <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode(void)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	af00      	add	r7, sp, #0

/* USER CODE END PWR_ExitStopMode_1 */
  /**
   * This function is called from CRITICAL SECTION
   */
  ExitLowPower();
 800281a:	f000 f84f 	bl	80028bc <ExitLowPower>

  HAL_ResumeTick();
 800281e:	f001 fbcb 	bl	8003fb8 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitStopMode_2 */

/* USER CODE END PWR_ExitStopMode_2 */
  return;
 8002822:	bf00      	nop
}
 8002824:	bd80      	pop	{r7, pc}

08002826 <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode(void)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode_1 */

/* USER CODE END PWR_EnterSleepMode_1 */

  HAL_SuspendTick();
 800282a:	f001 fbb5 	bl	8003f98 <HAL_SuspendTick>

  /************************************************************************************
   * ENTER SLEEP MODE
   ***********************************************************************************/
  LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 800282e:	f7ff ff81 	bl	8002734 <LL_LPM_EnableSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 8002832:	bf30      	wfi
/* USER CODE BEGIN PWR_EnterSleepMode_2 */

/* USER CODE END PWR_EnterSleepMode_2 */
  return;
 8002834:	bf00      	nop
}
 8002836:	bd80      	pop	{r7, pc}

08002838 <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode_1 */

/* USER CODE END PWR_ExitSleepMode_1 */
  HAL_ResumeTick();
 800283c:	f001 fbbc 	bl	8003fb8 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitSleepMode_2 */

/* USER CODE END PWR_ExitSleepMode_2 */
  return;
 8002840:	bf00      	nop
}
 8002842:	bd80      	pop	{r7, pc}

08002844 <EnterLowPower>:
  * @brief Setup the system to enter either stop or off mode
  * @param none
  * @retval none
  */
static void EnterLowPower(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /**
   * This function is called from CRITICAL SECTION
   */

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8002848:	bf00      	nop
 800284a:	2103      	movs	r1, #3
 800284c:	4819      	ldr	r0, [pc, #100]	; (80028b4 <EnterLowPower+0x70>)
 800284e:	f7ff ff91 	bl	8002774 <LL_HSEM_1StepLock>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1f8      	bne.n	800284a <EnterLowPower+0x6>

  if (! LL_HSEM_1StepLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID))
 8002858:	2104      	movs	r1, #4
 800285a:	4816      	ldr	r0, [pc, #88]	; (80028b4 <EnterLowPower+0x70>)
 800285c:	f7ff ff8a 	bl	8002774 <LL_HSEM_1StepLock>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d117      	bne.n	8002896 <EnterLowPower+0x52>
  {
    if(LL_PWR_IsActiveFlag_C2DS() || LL_PWR_IsActiveFlag_C2SB())
 8002866:	f7ff fec9 	bl	80025fc <LL_PWR_IsActiveFlag_C2DS>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d104      	bne.n	800287a <EnterLowPower+0x36>
 8002870:	f7ff feb0 	bl	80025d4 <LL_PWR_IsActiveFlag_C2SB>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d015      	beq.n	80028a6 <EnterLowPower+0x62>
    {
      /* Release ENTRY_STOP_MODE semaphore */
      LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 800287a:	2200      	movs	r2, #0
 800287c:	2104      	movs	r1, #4
 800287e:	480d      	ldr	r0, [pc, #52]	; (80028b4 <EnterLowPower+0x70>)
 8002880:	f7ff ff90 	bl	80027a4 <LL_HSEM_ReleaseLock>

      Switch_On_HSI();
 8002884:	f000 f852 	bl	800292c <Switch_On_HSI>
      __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8002888:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <EnterLowPower+0x74>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a0a      	ldr	r2, [pc, #40]	; (80028b8 <EnterLowPower+0x74>)
 800288e:	f023 0307 	bic.w	r3, r3, #7
 8002892:	6013      	str	r3, [r2, #0]
 8002894:	e007      	b.n	80028a6 <EnterLowPower+0x62>
    }
  }
  else
  {
    Switch_On_HSI();
 8002896:	f000 f849 	bl	800292c <Switch_On_HSI>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 800289a:	4b07      	ldr	r3, [pc, #28]	; (80028b8 <EnterLowPower+0x74>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a06      	ldr	r2, [pc, #24]	; (80028b8 <EnterLowPower+0x74>)
 80028a0:	f023 0307 	bic.w	r3, r3, #7
 80028a4:	6013      	str	r3, [r2, #0]
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 80028a6:	2200      	movs	r2, #0
 80028a8:	2103      	movs	r1, #3
 80028aa:	4802      	ldr	r0, [pc, #8]	; (80028b4 <EnterLowPower+0x70>)
 80028ac:	f7ff ff7a 	bl	80027a4 <LL_HSEM_ReleaseLock>

  return;
 80028b0:	bf00      	nop
}
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	58001400 	.word	0x58001400
 80028b8:	58004000 	.word	0x58004000

080028bc <ExitLowPower>:
  * @brief Restore the system to exit stop mode
  * @param none
  * @retval none
  */
static void ExitLowPower(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* Release ENTRY_STOP_MODE semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 80028c0:	2200      	movs	r2, #0
 80028c2:	2104      	movs	r1, #4
 80028c4:	4817      	ldr	r0, [pc, #92]	; (8002924 <ExitLowPower+0x68>)
 80028c6:	f7ff ff6d 	bl	80027a4 <LL_HSEM_ReleaseLock>

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 80028ca:	bf00      	nop
 80028cc:	2103      	movs	r1, #3
 80028ce:	4815      	ldr	r0, [pc, #84]	; (8002924 <ExitLowPower+0x68>)
 80028d0:	f7ff ff50 	bl	8002774 <LL_HSEM_1StepLock>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f8      	bne.n	80028cc <ExitLowPower+0x10>

  if(LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80028da:	f7ff fef9 	bl	80026d0 <LL_RCC_GetSysClkSource>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b04      	cmp	r3, #4
 80028e2:	d118      	bne.n	8002916 <ExitLowPower+0x5a>
  {
/* Restore the clock configuration of the application in this user section */
/* USER CODE BEGIN ExitLowPower_1 */
    LL_RCC_HSE_Enable( );
 80028e4:	f7ff fe9e 	bl	8002624 <LL_RCC_HSE_Enable>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 80028e8:	4b0f      	ldr	r3, [pc, #60]	; (8002928 <ExitLowPower+0x6c>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f023 0307 	bic.w	r3, r3, #7
 80028f0:	4a0d      	ldr	r2, [pc, #52]	; (8002928 <ExitLowPower+0x6c>)
 80028f2:	f043 0301 	orr.w	r3, r3, #1
 80028f6:	6013      	str	r3, [r2, #0]
    while(!LL_RCC_HSE_IsReady( ));
 80028f8:	bf00      	nop
 80028fa:	f7ff fea2 	bl	8002642 <LL_RCC_HSE_IsReady>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0fa      	beq.n	80028fa <ExitLowPower+0x3e>
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 8002904:	2002      	movs	r0, #2
 8002906:	f7ff fecf 	bl	80026a8 <LL_RCC_SetSysClkSource>
    while (LL_RCC_GetSysClkSource( ) != LL_RCC_SYS_CLKSOURCE_STATUS_HSE);
 800290a:	bf00      	nop
 800290c:	f7ff fee0 	bl	80026d0 <LL_RCC_GetSysClkSource>
 8002910:	4603      	mov	r3, r0
 8002912:	2b08      	cmp	r3, #8
 8002914:	d1fa      	bne.n	800290c <ExitLowPower+0x50>

  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
#endif

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8002916:	2200      	movs	r2, #0
 8002918:	2103      	movs	r1, #3
 800291a:	4802      	ldr	r0, [pc, #8]	; (8002924 <ExitLowPower+0x68>)
 800291c:	f7ff ff42 	bl	80027a4 <LL_HSEM_ReleaseLock>

  return;
 8002920:	bf00      	nop
}
 8002922:	bd80      	pop	{r7, pc}
 8002924:	58001400 	.word	0x58001400
 8002928:	58004000 	.word	0x58004000

0800292c <Switch_On_HSI>:
  * @brief Switch the system clock on HSI
  * @param none
  * @retval none
  */
static void Switch_On_HSI(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  LL_RCC_HSI_Enable();
 8002930:	f7ff fe99 	bl	8002666 <LL_RCC_HSI_Enable>
  while(!LL_RCC_HSI_IsReady());
 8002934:	bf00      	nop
 8002936:	f7ff fea5 	bl	8002684 <LL_RCC_HSI_IsReady>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0fa      	beq.n	8002936 <Switch_On_HSI+0xa>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8002940:	2001      	movs	r0, #1
 8002942:	f7ff feb1 	bl	80026a8 <LL_RCC_SetSysClkSource>
  LL_RCC_SetSMPSClockSource(LL_RCC_SMPS_CLKSOURCE_HSI);
 8002946:	2000      	movs	r0, #0
 8002948:	f7ff fece 	bl	80026e8 <LL_RCC_SetSMPSClockSource>
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 800294c:	bf00      	nop
 800294e:	f7ff febf 	bl	80026d0 <LL_RCC_GetSysClkSource>
 8002952:	4603      	mov	r3, r0
 8002954:	2b04      	cmp	r3, #4
 8002956:	d1fa      	bne.n	800294e <Switch_On_HSI+0x22>
  return;
 8002958:	bf00      	nop
}
 800295a:	bd80      	pop	{r7, pc}

0800295c <LL_RCC_SetRTCClockSource>:
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800296c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002970:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4313      	orrs	r3, r2
 8002978:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <LL_RCC_EnableRTC>:
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800298c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002994:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002998:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800299c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80029a0:	bf00      	nop
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <LL_AHB2_GRP1_EnableClock>:
{
 80029aa:	b480      	push	{r7}
 80029ac:	b085      	sub	sp, #20
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80029b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4313      	orrs	r3, r2
 80029c0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80029c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4013      	ands	r3, r2
 80029cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029ce:	68fb      	ldr	r3, [r7, #12]
}
 80029d0:	bf00      	nop
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <LL_AHB3_GRP1_EnableClock>:
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80029e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80029f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4013      	ands	r3, r2
 80029fe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a00:	68fb      	ldr	r3, [r7, #12]
}
 8002a02:	bf00      	nop
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <LL_APB1_GRP1_EnableClock>:
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b085      	sub	sp, #20
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a1a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a2a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a32:	68fb      	ldr	r3, [r7, #12]
}
 8002a34:	bf00      	nop
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <LL_APB2_GRP1_EnableClock>:
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a4c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a5c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4013      	ands	r3, r2
 8002a62:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a64:	68fb      	ldr	r3, [r7, #12]
}
 8002a66:	bf00      	nop
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002a76:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002a7a:	f7ff ffaf 	bl	80029dc <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002a7e:	2200      	movs	r2, #0
 8002a80:	2100      	movs	r1, #0
 8002a82:	202e      	movs	r0, #46	; 0x2e
 8002a84:	f001 fbf5 	bl	8004272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002a88:	202e      	movs	r0, #46	; 0x2e
 8002a8a:	f001 fc0c 	bl	80042a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a8e:	bf00      	nop
 8002a90:	bd80      	pop	{r7, pc}
	...

08002a94 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a0d      	ldr	r2, [pc, #52]	; (8002ad8 <HAL_IPCC_MspInit+0x44>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d113      	bne.n	8002ace <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002aa6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002aaa:	f7ff ff97 	bl	80029dc <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002aae:	2200      	movs	r2, #0
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	202c      	movs	r0, #44	; 0x2c
 8002ab4:	f001 fbdd 	bl	8004272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002ab8:	202c      	movs	r0, #44	; 0x2c
 8002aba:	f001 fbf4 	bl	80042a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002abe:	2200      	movs	r2, #0
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	202d      	movs	r0, #45	; 0x2d
 8002ac4:	f001 fbd5 	bl	8004272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002ac8:	202d      	movs	r0, #45	; 0x2d
 8002aca:	f001 fbec 	bl	80042a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002ace:	bf00      	nop
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	58000c00 	.word	0x58000c00

08002adc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08e      	sub	sp, #56	; 0x38
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ae4:	f107 0308 	add.w	r3, r7, #8
 8002ae8:	2230      	movs	r2, #48	; 0x30
 8002aea:	2100      	movs	r1, #0
 8002aec:	4618      	mov	r0, r3
 8002aee:	f007 fdc4 	bl	800a67a <memset>
  if(hrtc->Instance==RTC)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a18      	ldr	r2, [pc, #96]	; (8002b58 <HAL_RTC_MspInit+0x7c>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d128      	bne.n	8002b4e <HAL_RTC_MspInit+0x72>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8002afc:	f002 f8f6 	bl	8004cec <HAL_PWR_EnableBkUpAccess>

  /**
  *  Write twice the value to flush the APB-AHB bridge
  *  This bit shall be written in the register before writing the next one
  */
  HAL_PWR_EnableBkUpAccess();
 8002b00:	f002 f8f4 	bl	8004cec <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSI as RTC Input */
 8002b04:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002b08:	f7ff ff28 	bl	800295c <LL_RCC_SetRTCClockSource>
  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002b0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b10:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002b12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b16:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b18:	f107 0308 	add.w	r3, r7, #8
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f003 fb45 	bl	80061ac <HAL_RCCEx_PeriphCLKConfig>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <HAL_RTC_MspInit+0x50>
    {
      Error_Handler();
 8002b28:	f7ff fd2c 	bl	8002584 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002b2c:	f7ff ff2c 	bl	8002988 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002b30:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002b34:	f7ff ff6b 	bl	8002a0e <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002b38:	2200      	movs	r2, #0
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	2003      	movs	r0, #3
 8002b3e:	f001 fb98 	bl	8004272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002b42:	2003      	movs	r0, #3
 8002b44:	f001 fbaf 	bl	80042a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f003 fde1 	bl	8006710 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002b4e:	bf00      	nop
 8002b50:	3738      	adds	r7, #56	; 0x38
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40002800 	.word	0x40002800

08002b5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b094      	sub	sp, #80	; 0x50
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	605a      	str	r2, [r3, #4]
 8002b6e:	609a      	str	r2, [r3, #8]
 8002b70:	60da      	str	r2, [r3, #12]
 8002b72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b74:	f107 030c 	add.w	r3, r7, #12
 8002b78:	2230      	movs	r2, #48	; 0x30
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f007 fd7c 	bl	800a67a <memset>
  if(huart->Instance==USART1)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a2f      	ldr	r2, [pc, #188]	; (8002c44 <HAL_UART_MspInit+0xe8>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d157      	bne.n	8002c3c <HAL_UART_MspInit+0xe0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002b90:	2300      	movs	r3, #0
 8002b92:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b94:	f107 030c 	add.w	r3, r7, #12
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f003 fb07 	bl	80061ac <HAL_RCCEx_PeriphCLKConfig>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002ba4:	f7ff fcee 	bl	8002584 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ba8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002bac:	f7ff ff48 	bl	8002a40 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb0:	2001      	movs	r0, #1
 8002bb2:	f7ff fefa 	bl	80029aa <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002bb6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002bba:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002bc8:	2307      	movs	r3, #7
 8002bca:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bcc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bd6:	f001 fe47 	bl	8004868 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002bda:	4b1b      	ldr	r3, [pc, #108]	; (8002c48 <HAL_UART_MspInit+0xec>)
 8002bdc:	4a1b      	ldr	r2, [pc, #108]	; (8002c4c <HAL_UART_MspInit+0xf0>)
 8002bde:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002be0:	4b19      	ldr	r3, [pc, #100]	; (8002c48 <HAL_UART_MspInit+0xec>)
 8002be2:	220f      	movs	r2, #15
 8002be4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002be6:	4b18      	ldr	r3, [pc, #96]	; (8002c48 <HAL_UART_MspInit+0xec>)
 8002be8:	2210      	movs	r2, #16
 8002bea:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bec:	4b16      	ldr	r3, [pc, #88]	; (8002c48 <HAL_UART_MspInit+0xec>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002bf2:	4b15      	ldr	r3, [pc, #84]	; (8002c48 <HAL_UART_MspInit+0xec>)
 8002bf4:	2280      	movs	r2, #128	; 0x80
 8002bf6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bf8:	4b13      	ldr	r3, [pc, #76]	; (8002c48 <HAL_UART_MspInit+0xec>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bfe:	4b12      	ldr	r3, [pc, #72]	; (8002c48 <HAL_UART_MspInit+0xec>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002c04:	4b10      	ldr	r3, [pc, #64]	; (8002c48 <HAL_UART_MspInit+0xec>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c0a:	4b0f      	ldr	r3, [pc, #60]	; (8002c48 <HAL_UART_MspInit+0xec>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002c10:	480d      	ldr	r0, [pc, #52]	; (8002c48 <HAL_UART_MspInit+0xec>)
 8002c12:	f001 fb8d 	bl	8004330 <HAL_DMA_Init>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8002c1c:	f7ff fcb2 	bl	8002584 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a09      	ldr	r2, [pc, #36]	; (8002c48 <HAL_UART_MspInit+0xec>)
 8002c24:	67da      	str	r2, [r3, #124]	; 0x7c
 8002c26:	4a08      	ldr	r2, [pc, #32]	; (8002c48 <HAL_UART_MspInit+0xec>)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	2100      	movs	r1, #0
 8002c30:	2024      	movs	r0, #36	; 0x24
 8002c32:	f001 fb1e 	bl	8004272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c36:	2024      	movs	r0, #36	; 0x24
 8002c38:	f001 fb35 	bl	80042a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002c3c:	bf00      	nop
 8002c3e:	3750      	adds	r7, #80	; 0x50
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40013800 	.word	0x40013800
 8002c48:	200004e8 	.word	0x200004e8
 8002c4c:	40020044 	.word	0x40020044

08002c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c54:	e7fe      	b.n	8002c54 <NMI_Handler+0x4>

08002c56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c56:	b480      	push	{r7}
 8002c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c5a:	e7fe      	b.n	8002c5a <HardFault_Handler+0x4>

08002c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c60:	e7fe      	b.n	8002c60 <MemManage_Handler+0x4>

08002c62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c62:	b480      	push	{r7}
 8002c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c66:	e7fe      	b.n	8002c66 <BusFault_Handler+0x4>

08002c68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c6c:	e7fe      	b.n	8002c6c <UsageFault_Handler+0x4>

08002c6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c72:	bf00      	nop
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c80:	bf00      	nop
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c9c:	f001 f950 	bl	8003f40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ca0:	bf00      	nop
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002ca8:	f7fe ffb2 	bl	8001c10 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002cac:	bf00      	nop
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002cb4:	4802      	ldr	r0, [pc, #8]	; (8002cc0 <DMA1_Channel4_IRQHandler+0x10>)
 8002cb6:	f001 fc85 	bl	80045c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	200004e8 	.word	0x200004e8

08002cc4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002cc8:	4802      	ldr	r0, [pc, #8]	; (8002cd4 <USART1_IRQHandler+0x10>)
 8002cca:	f003 fea7 	bl	8006a1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002cce:	bf00      	nop
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	20000454 	.word	0x20000454

08002cd8 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002cdc:	f000 fda4 	bl	8003828 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002ce0:	bf00      	nop
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002ce8:	f000 fdd4 	bl	8003894 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002cec:	bf00      	nop
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002cf4:	f001 ff50 	bl	8004b98 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002cf8:	bf00      	nop
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <EXTI0_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 8002d00:	2001      	movs	r0, #1
 8002d02:	f001 ff31 	bl	8004b68 <HAL_GPIO_EXTI_IRQHandler>
}
 8002d06:	bf00      	nop
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <EXTI4_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW2_EXTI_IRQHandler(void)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 8002d0e:	2010      	movs	r0, #16
 8002d10:	f001 ff2a 	bl	8004b68 <HAL_GPIO_EXTI_IRQHandler>
}
 8002d14:	bf00      	nop
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <EXTI9_5_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW3_EXTI_IRQHandler(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 8002d1c:	2040      	movs	r0, #64	; 0x40
 8002d1e:	f001 ff23 	bl	8004b68 <HAL_GPIO_EXTI_IRQHandler>
}
 8002d22:	bf00      	nop
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d26:	b480      	push	{r7}
 8002d28:	af00      	add	r7, sp, #0
  return 1;
 8002d2a:	2301      	movs	r3, #1
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <_kill>:

int _kill(int pid, int sig)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b082      	sub	sp, #8
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
 8002d3e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d40:	f007 fcee 	bl	800a720 <__errno>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2216      	movs	r2, #22
 8002d48:	601a      	str	r2, [r3, #0]
  return -1;
 8002d4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <_exit>:

void _exit (int status)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b082      	sub	sp, #8
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d5e:	f04f 31ff 	mov.w	r1, #4294967295
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7ff ffe7 	bl	8002d36 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d68:	e7fe      	b.n	8002d68 <_exit+0x12>

08002d6a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b086      	sub	sp, #24
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	60f8      	str	r0, [r7, #12]
 8002d72:	60b9      	str	r1, [r7, #8]
 8002d74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d76:	2300      	movs	r3, #0
 8002d78:	617b      	str	r3, [r7, #20]
 8002d7a:	e00a      	b.n	8002d92 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d7c:	f3af 8000 	nop.w
 8002d80:	4601      	mov	r1, r0
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	1c5a      	adds	r2, r3, #1
 8002d86:	60ba      	str	r2, [r7, #8]
 8002d88:	b2ca      	uxtb	r2, r1
 8002d8a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	617b      	str	r3, [r7, #20]
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	dbf0      	blt.n	8002d7c <_read+0x12>
  }

  return len;
 8002d9a:	687b      	ldr	r3, [r7, #4]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3718      	adds	r7, #24
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002db0:	2300      	movs	r3, #0
 8002db2:	617b      	str	r3, [r7, #20]
 8002db4:	e009      	b.n	8002dca <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	1c5a      	adds	r2, r3, #1
 8002dba:	60ba      	str	r2, [r7, #8]
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	617b      	str	r3, [r7, #20]
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	dbf1      	blt.n	8002db6 <_write+0x12>
  }
  return len;
 8002dd2:	687b      	ldr	r3, [r7, #4]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3718      	adds	r7, #24
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <_close>:

int _close(int file)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002de4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e04:	605a      	str	r2, [r3, #4]
  return 0;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <_isatty>:

int _isatty(int file)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e1c:	2301      	movs	r3, #1
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b085      	sub	sp, #20
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	60f8      	str	r0, [r7, #12]
 8002e32:	60b9      	str	r1, [r7, #8]
 8002e34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3714      	adds	r7, #20
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e4c:	4a14      	ldr	r2, [pc, #80]	; (8002ea0 <_sbrk+0x5c>)
 8002e4e:	4b15      	ldr	r3, [pc, #84]	; (8002ea4 <_sbrk+0x60>)
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e58:	4b13      	ldr	r3, [pc, #76]	; (8002ea8 <_sbrk+0x64>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d102      	bne.n	8002e66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e60:	4b11      	ldr	r3, [pc, #68]	; (8002ea8 <_sbrk+0x64>)
 8002e62:	4a12      	ldr	r2, [pc, #72]	; (8002eac <_sbrk+0x68>)
 8002e64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e66:	4b10      	ldr	r3, [pc, #64]	; (8002ea8 <_sbrk+0x64>)
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d207      	bcs.n	8002e84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e74:	f007 fc54 	bl	800a720 <__errno>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	220c      	movs	r2, #12
 8002e7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e82:	e009      	b.n	8002e98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e84:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <_sbrk+0x64>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e8a:	4b07      	ldr	r3, [pc, #28]	; (8002ea8 <_sbrk+0x64>)
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4413      	add	r3, r2
 8002e92:	4a05      	ldr	r2, [pc, #20]	; (8002ea8 <_sbrk+0x64>)
 8002e94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e96:	68fb      	ldr	r3, [r7, #12]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3718      	adds	r7, #24
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	20003000 	.word	0x20003000
 8002ea4:	00001000 	.word	0x00001000
 8002ea8:	20000548 	.word	0x20000548
 8002eac:	200008b0 	.word	0x200008b0

08002eb0 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8002eb4:	4b04      	ldr	r3, [pc, #16]	; (8002ec8 <LL_DBGMCU_GetDeviceID+0x18>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	e0042000 	.word	0xe0042000

08002ecc <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8002ed0:	4b04      	ldr	r3, [pc, #16]	; (8002ee4 <LL_DBGMCU_GetRevisionID+0x18>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	0c1b      	lsrs	r3, r3, #16
 8002ed6:	b29b      	uxth	r3, r3
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	e0042000 	.word	0xe0042000

08002ee8 <TM_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void TM_Init(void)
{
 8002ee8:	b5b0      	push	{r4, r5, r7, lr}
 8002eea:	b09c      	sub	sp, #112	; 0x70
 8002eec:	af00      	add	r7, sp, #0
  /* USER CODE END TM_Init_1 */
  TL_BLE_InitConf_t tl_ble_init_conf;
  uint32_t ipccdba;
  SHCI_CmdStatus_t status;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8002eee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	605a      	str	r2, [r3, #4]
 8002ef8:	609a      	str	r2, [r3, #8]
 8002efa:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8002efc:	2300      	movs	r3, #0
 8002efe:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t DeviceID=0;
 8002f00:	2300      	movs	r3, #0
 8002f02:	66bb      	str	r3, [r7, #104]	; 0x68

  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8002f04:	4b4b      	ldr	r3, [pc, #300]	; (8003034 <TM_Init+0x14c>)
 8002f06:	1d3c      	adds	r4, r7, #4
 8002f08:	461d      	mov	r5, r3
 8002f0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f16:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002f1a:	c403      	stmia	r4!, {r0, r1}
 8002f1c:	8022      	strh	r2, [r4, #0]
     CFG_BLE_CORE_VERSION,
     CFG_BLE_OPTIONS_EXT
    }
  };

  ipccdba = READ_BIT(FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA);
 8002f1e:	4b46      	ldr	r3, [pc, #280]	; (8003038 <TM_Init+0x150>)
 8002f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f22:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002f26:	667b      	str	r3, [r7, #100]	; 0x64
  p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8002f28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8002f30:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8002f34:	461a      	mov	r2, r3
 8002f36:	4b41      	ldr	r3, [pc, #260]	; (800303c <TM_Init+0x154>)
 8002f38:	601a      	str	r2, [r3, #0]

  tl_ble_init_conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8002f3a:	4b41      	ldr	r3, [pc, #260]	; (8003040 <TM_Init+0x158>)
 8002f3c:	65bb      	str	r3, [r7, #88]	; 0x58
  tl_ble_init_conf.p_AclDataBuffer = HciAclDataBuffer;
 8002f3e:	4b41      	ldr	r3, [pc, #260]	; (8003044 <TM_Init+0x15c>)
 8002f40:	65fb      	str	r3, [r7, #92]	; 0x5c
  tl_ble_init_conf.IoBusEvtCallBack = TM_BleEvtRx;
 8002f42:	4b41      	ldr	r3, [pc, #260]	; (8003048 <TM_Init+0x160>)
 8002f44:	653b      	str	r3, [r7, #80]	; 0x50
  tl_ble_init_conf.IoBusAclDataTxAck = TM_AclDataAck;
 8002f46:	4b41      	ldr	r3, [pc, #260]	; (800304c <TM_Init+0x164>)
 8002f48:	657b      	str	r3, [r7, #84]	; 0x54
  TL_BLE_Init((void*) &tl_ble_init_conf);
 8002f4a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f006 f966 	bl	8009220 <TL_BLE_Init>

  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8002f54:	2101      	movs	r1, #1
 8002f56:	2002      	movs	r0, #2
 8002f58:	f006 fbc0 	bl	80096dc <UTIL_LPM_SetOffMode>
  UTIL_LPM_SetStopMode(1<<CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	2002      	movs	r0, #2
 8002f60:	f006 fb8c 	bl	800967c <UTIL_LPM_SetStopMode>
  LowPowerModeStatus = LOW_POWER_MODE_DISABLE;
 8002f64:	4b3a      	ldr	r3, [pc, #232]	; (8003050 <TM_Init+0x168>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	701a      	strb	r2, [r3, #0]

  SysLocalCmdStatus = 0;
 8002f6a:	4b3a      	ldr	r3, [pc, #232]	; (8003054 <TM_Init+0x16c>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	701a      	strb	r2, [r3, #0]

  config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8002f70:	230f      	movs	r3, #15
 8002f72:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

  RevisionID = LL_DBGMCU_GetRevisionID();
 8002f76:	f7ff ffa9 	bl	8002ecc <LL_DBGMCU_GetRevisionID>
 8002f7a:	66f8      	str	r0, [r7, #108]	; 0x6c
  APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
  config_param.RevisionID = RevisionID;
 8002f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

  DeviceID = LL_DBGMCU_GetDeviceID();
 8002f84:	f7ff ff94 	bl	8002eb0 <LL_DBGMCU_GetDeviceID>
 8002f88:	66b8      	str	r0, [r7, #104]	; 0x68
  APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
  config_param.DeviceID = DeviceID;
 8002f8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

  status = SHCI_C2_Config(&config_param);
 8002f92:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002f96:	4618      	mov	r0, r3
 8002f98:	f006 f854 	bl	8009044 <SHCI_C2_Config>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
  if (status != SHCI_Success)
 8002fa2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <TM_Init+0xc6>
  {
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8002faa:	f7ff faeb 	bl	8002584 <Error_Handler>
  }

  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8002fae:	1d3b      	adds	r3, r7, #4
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f006 f819 	bl	8008fe8 <SHCI_C2_BLE_Init>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
  if (status != SHCI_Success)
 8002fbc:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <TM_Init+0xe0>
  {
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8002fc4:	f7ff fade 	bl	8002584 <Error_Handler>
  }

  UTIL_SEQ_RegTask(1<< CFG_TASK_SYS_LOCAL_CMD_ID, UTIL_SEQ_RFU, TM_SysLocalCmd);
 8002fc8:	4a23      	ldr	r2, [pc, #140]	; (8003058 <TM_Init+0x170>)
 8002fca:	2100      	movs	r1, #0
 8002fcc:	2008      	movs	r0, #8
 8002fce:	f006 fce7 	bl	80099a0 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1<< CFG_TASK_BLE_HCI_CMD_ID, UTIL_SEQ_RFU, (void (*)(void)) TL_BLE_SendCmd);
 8002fd2:	4a22      	ldr	r2, [pc, #136]	; (800305c <TM_Init+0x174>)
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	2001      	movs	r0, #1
 8002fd8:	f006 fce2 	bl	80099a0 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1<< CFG_TASK_TX_TO_HOST_ID, UTIL_SEQ_RFU, TM_TxToHost);
 8002fdc:	4a20      	ldr	r2, [pc, #128]	; (8003060 <TM_Init+0x178>)
 8002fde:	2100      	movs	r1, #0
 8002fe0:	2010      	movs	r0, #16
 8002fe2:	f006 fcdd 	bl	80099a0 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYS_HCI_CMD_ID, UTIL_SEQ_RFU, (void (*)(void)) TL_SYS_SendCmd);
 8002fe6:	4a1f      	ldr	r2, [pc, #124]	; (8003064 <TM_Init+0x17c>)
 8002fe8:	2100      	movs	r1, #0
 8002fea:	2002      	movs	r0, #2
 8002fec:	f006 fcd8 	bl	80099a0 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1<< CFG_TASK_HCI_ACL_DATA_ID, UTIL_SEQ_RFU, (void (*)(void)) TL_BLE_SendAclData);
 8002ff0:	4a1d      	ldr	r2, [pc, #116]	; (8003068 <TM_Init+0x180>)
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	2004      	movs	r0, #4
 8002ff6:	f006 fcd3 	bl	80099a0 <UTIL_SEQ_RegTask>

  HostTxStatus = TX_DONE;
 8002ffa:	4b1c      	ldr	r3, [pc, #112]	; (800306c <TM_Init+0x184>)
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	701a      	strb	r2, [r3, #0]
  pTxToHostPacket = 0;
 8003000:	4b1b      	ldr	r3, [pc, #108]	; (8003070 <TM_Init+0x188>)
 8003002:	2200      	movs	r2, #0
 8003004:	601a      	str	r2, [r3, #0]

  LST_init_head (&HostTxQueue);
 8003006:	481b      	ldr	r0, [pc, #108]	; (8003074 <TM_Init+0x18c>)
 8003008:	f006 f831 	bl	800906e <LST_init_head>

  MX_USART1_UART_Init();
 800300c:	f7ff fa50 	bl	80024b0 <MX_USART1_UART_Init>

  pHostRx = RxHostData;
 8003010:	4b19      	ldr	r3, [pc, #100]	; (8003078 <TM_Init+0x190>)
 8003012:	4a1a      	ldr	r2, [pc, #104]	; (800307c <TM_Init+0x194>)
 8003014:	601a      	str	r2, [r3, #0]
  HciReceiveStatus = WAITING_TYPE;
 8003016:	4b1a      	ldr	r3, [pc, #104]	; (8003080 <TM_Init+0x198>)
 8003018:	2200      	movs	r2, #0
 800301a:	701a      	strb	r2, [r3, #0]

  HW_UART_Receive_IT(CFG_UART_GUI, pHostRx, 1, RxCpltCallback);
 800301c:	4b16      	ldr	r3, [pc, #88]	; (8003078 <TM_Init+0x190>)
 800301e:	6819      	ldr	r1, [r3, #0]
 8003020:	4b18      	ldr	r3, [pc, #96]	; (8003084 <TM_Init+0x19c>)
 8003022:	2201      	movs	r2, #1
 8003024:	2000      	movs	r0, #0
 8003026:	f7ff f8ad 	bl	8002184 <HW_UART_Receive_IT>

/* USER CODE BEGIN TM_Init_2 */

/* USER CODE END TM_Init_2 */
  return;
 800302a:	bf00      	nop
}
 800302c:	3770      	adds	r7, #112	; 0x70
 800302e:	46bd      	mov	sp, r7
 8003030:	bdb0      	pop	{r4, r5, r7, pc}
 8003032:	bf00      	nop
 8003034:	0800c560 	.word	0x0800c560
 8003038:	58004000 	.word	0x58004000
 800303c:	20000674 	.word	0x20000674
 8003040:	2003094c 	.word	0x2003094c
 8003044:	20030a58 	.word	0x20030a58
 8003048:	08003559 	.word	0x08003559
 800304c:	0800357d 	.word	0x0800357d
 8003050:	20000679 	.word	0x20000679
 8003054:	20000678 	.word	0x20000678
 8003058:	080031bd 	.word	0x080031bd
 800305c:	08009289 	.word	0x08009289
 8003060:	08003109 	.word	0x08003109
 8003064:	080093b1 	.word	0x080093b1
 8003068:	08009321 	.word	0x08009321
 800306c:	20000670 	.word	0x20000670
 8003070:	2000066c 	.word	0x2000066c
 8003074:	20000664 	.word	0x20000664
 8003078:	20000660 	.word	0x20000660
 800307c:	2000054c 	.word	0x2000054c
 8003080:	20000551 	.word	0x20000551
 8003084:	08003251 	.word	0x08003251

08003088 <TM_SysCmdRspCb>:

void TM_SysCmdRspCb (TL_EvtPacket_t *p_cmd_resp)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN TM_SysCmdRspCb_1 */

/* USER CODE END TM_SysCmdRspCb_1 */
  if(SysLocalCmdStatus != 0)
 8003090:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <TM_SysCmdRspCb+0x38>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d006      	beq.n	80030a6 <TM_SysCmdRspCb+0x1e>
  {
    SysLocalCmdStatus = 0;
 8003098:	4b09      	ldr	r3, [pc, #36]	; (80030c0 <TM_SysCmdRspCb+0x38>)
 800309a:	2200      	movs	r2, #0
 800309c:	701a      	strb	r2, [r3, #0]
    UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800309e:	2001      	movs	r0, #1
 80030a0:	f006 fccc 	bl	8009a3c <UTIL_SEQ_SetEvt>
  }

/* USER CODE BEGIN TM_SysCmdRspCb_2 */

/* USER CODE END TM_SysCmdRspCb_2 */
  return;
 80030a4:	e008      	b.n	80030b8 <TM_SysCmdRspCb+0x30>
    LST_insert_tail (&HostTxQueue, (tListNode *)p_cmd_resp);
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	4806      	ldr	r0, [pc, #24]	; (80030c4 <TM_SysCmdRspCb+0x3c>)
 80030aa:	f006 f812 	bl	80090d2 <LST_insert_tail>
    UTIL_SEQ_SetTask(1<<CFG_TASK_TX_TO_HOST_ID,CFG_SCH_PRIO_0);
 80030ae:	2100      	movs	r1, #0
 80030b0:	2010      	movs	r0, #16
 80030b2:	f006 fc97 	bl	80099e4 <UTIL_SEQ_SetTask>
  return;
 80030b6:	bf00      	nop
}
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	20000678 	.word	0x20000678
 80030c4:	20000664 	.word	0x20000664

080030c8 <TM_SetLowPowerMode>:

/* USER CODE BEGIN FD */
void TM_SetLowPowerMode(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  if(LowPowerModeStatus == LOW_POWER_MODE_DISABLE)
 80030cc:	4b0d      	ldr	r3, [pc, #52]	; (8003104 <TM_SetLowPowerMode+0x3c>)
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10a      	bne.n	80030ea <TM_SetLowPowerMode+0x22>
  {
    BSP_LED_Off(LED_GREEN);
 80030d4:	2001      	movs	r0, #1
 80030d6:	f000 fd97 	bl	8003c08 <BSP_LED_Off>
    LowPowerModeStatus = LOW_POWER_MODE_ENABLE;
 80030da:	4b0a      	ldr	r3, [pc, #40]	; (8003104 <TM_SetLowPowerMode+0x3c>)
 80030dc:	2201      	movs	r2, #1
 80030de:	701a      	strb	r2, [r3, #0]
    UTIL_LPM_SetStopMode(1<<CFG_LPM_APP_BLE, UTIL_LPM_ENABLE);
 80030e0:	2100      	movs	r1, #0
 80030e2:	2002      	movs	r0, #2
 80030e4:	f006 faca 	bl	800967c <UTIL_LPM_SetStopMode>
  {
    BSP_LED_On(LED_GREEN);
    LowPowerModeStatus = LOW_POWER_MODE_DISABLE;
    UTIL_LPM_SetStopMode(1<<CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
  }
  return;
 80030e8:	e00a      	b.n	8003100 <TM_SetLowPowerMode+0x38>
    BSP_LED_On(LED_GREEN);
 80030ea:	2001      	movs	r0, #1
 80030ec:	f000 fd72 	bl	8003bd4 <BSP_LED_On>
    LowPowerModeStatus = LOW_POWER_MODE_DISABLE;
 80030f0:	4b04      	ldr	r3, [pc, #16]	; (8003104 <TM_SetLowPowerMode+0x3c>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	701a      	strb	r2, [r3, #0]
    UTIL_LPM_SetStopMode(1<<CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80030f6:	2101      	movs	r1, #1
 80030f8:	2002      	movs	r0, #2
 80030fa:	f006 fabf 	bl	800967c <UTIL_LPM_SetStopMode>
  return;
 80030fe:	bf00      	nop
}
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20000679 	.word	0x20000679

08003108 <TM_TxToHost>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void TM_TxToHost(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800310e:	f3ef 8310 	mrs	r3, PRIMASK
 8003112:	60bb      	str	r3, [r7, #8]
  return(result);
 8003114:	68bb      	ldr	r3, [r7, #8]
  BACKUP_PRIMASK();
 8003116:	60fb      	str	r3, [r7, #12]

  if(HostTxStatus == TX_DONE)
 8003118:	4b23      	ldr	r3, [pc, #140]	; (80031a8 <TM_TxToHost+0xa0>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d13f      	bne.n	80031a0 <TM_TxToHost+0x98>
  {
    HostTxStatus = TX_ONGOING;
 8003120:	4b21      	ldr	r3, [pc, #132]	; (80031a8 <TM_TxToHost+0xa0>)
 8003122:	2200      	movs	r2, #0
 8003124:	701a      	strb	r2, [r3, #0]

    LST_remove_head(&HostTxQueue, (tListNode **)&pTxToHostPacket);
 8003126:	4921      	ldr	r1, [pc, #132]	; (80031ac <TM_TxToHost+0xa4>)
 8003128:	4821      	ldr	r0, [pc, #132]	; (80031b0 <TM_TxToHost+0xa8>)
 800312a:	f006 f819 	bl	8009160 <LST_remove_head>

    if(LowPowerModeStatus == LOW_POWER_MODE_DISABLE)
 800312e:	4b21      	ldr	r3, [pc, #132]	; (80031b4 <TM_TxToHost+0xac>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d131      	bne.n	800319a <TM_TxToHost+0x92>
    {
      if(pTxToHostPacket->evtserial.type == TL_ACL_DATA_PKT_TYPE)
 8003136:	4b1d      	ldr	r3, [pc, #116]	; (80031ac <TM_TxToHost+0xa4>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	7a1b      	ldrb	r3, [r3, #8]
 800313c:	2b02      	cmp	r3, #2
 800313e:	d116      	bne.n	800316e <TM_TxToHost+0x66>
  __ASM volatile ("cpsid i" : : : "memory");
 8003140:	b672      	cpsid	i
}
 8003142:	bf00      	nop
        /**
         * The uart interrupt shall be disable when the HAL is called to send data
         * This is because in the Rx uart handler, the HAL is called to receive new data
         */
        DISABLE_IRQ();
        HW_UART_Transmit_IT(CFG_UART_GUI, (uint8_t *)&((TL_AclDataPacket_t *)pTxToHostPacket)->AclDataSerial, ((TL_AclDataPacket_t *)pTxToHostPacket)->AclDataSerial.length + 5, HostTxCb);
 8003144:	4b19      	ldr	r3, [pc, #100]	; (80031ac <TM_TxToHost+0xa4>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f103 0108 	add.w	r1, r3, #8
 800314c:	4b17      	ldr	r3, [pc, #92]	; (80031ac <TM_TxToHost+0xa4>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8003154:	b29b      	uxth	r3, r3
 8003156:	3305      	adds	r3, #5
 8003158:	b29a      	uxth	r2, r3
 800315a:	4b17      	ldr	r3, [pc, #92]	; (80031b8 <TM_TxToHost+0xb0>)
 800315c:	2000      	movs	r0, #0
 800315e:	f7ff f835 	bl	80021cc <HW_UART_Transmit_IT>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f383 8810 	msr	PRIMASK, r3
}
 800316c:	e017      	b.n	800319e <TM_TxToHost+0x96>
  __ASM volatile ("cpsid i" : : : "memory");
 800316e:	b672      	cpsid	i
}
 8003170:	bf00      	nop
        /**
         * The uart interrupt shall be disable when the HAL is called to send data
         * This is because in the Rx uart handler, the HAL is called to receive new data
         */
        DISABLE_IRQ();
        HW_UART_Transmit_IT(CFG_UART_GUI, (uint8_t *)&pTxToHostPacket->evtserial, pTxToHostPacket->evtserial.evt.plen + TL_EVT_HDR_SIZE, HostTxCb);
 8003172:	4b0e      	ldr	r3, [pc, #56]	; (80031ac <TM_TxToHost+0xa4>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f103 0108 	add.w	r1, r3, #8
 800317a:	4b0c      	ldr	r3, [pc, #48]	; (80031ac <TM_TxToHost+0xa4>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	7a9b      	ldrb	r3, [r3, #10]
 8003180:	b29b      	uxth	r3, r3
 8003182:	3303      	adds	r3, #3
 8003184:	b29a      	uxth	r2, r3
 8003186:	4b0c      	ldr	r3, [pc, #48]	; (80031b8 <TM_TxToHost+0xb0>)
 8003188:	2000      	movs	r0, #0
 800318a:	f7ff f81f 	bl	80021cc <HW_UART_Transmit_IT>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	f383 8810 	msr	PRIMASK, r3
}
 8003198:	e001      	b.n	800319e <TM_TxToHost+0x96>
        RESTORE_PRIMASK();
      }
    }
    else
    {
      HostTxCb();
 800319a:	f000 f9a9 	bl	80034f0 <HostTxCb>
    }
  }

  return;
 800319e:	bf00      	nop
 80031a0:	bf00      	nop
}
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	20000670 	.word	0x20000670
 80031ac:	2000066c 	.word	0x2000066c
 80031b0:	20000664 	.word	0x20000664
 80031b4:	20000679 	.word	0x20000679
 80031b8:	080034f1 	.word	0x080034f1

080031bc <TM_SysLocalCmd>:

static void TM_SysLocalCmd (void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  switch(SysLocalCmd.cmdserial.cmd.cmdcode)
 80031c0:	4b20      	ldr	r3, [pc, #128]	; (8003244 <TM_SysLocalCmd+0x88>)
 80031c2:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	f64f 5262 	movw	r2, #64866	; 0xfd62
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d014      	beq.n	80031fa <TM_SysLocalCmd+0x3e>
 80031d0:	f64f 5262 	movw	r2, #64866	; 0xfd62
 80031d4:	4293      	cmp	r3, r2
 80031d6:	dc14      	bgt.n	8003202 <TM_SysLocalCmd+0x46>
 80031d8:	f64f 5260 	movw	r2, #64864	; 0xfd60
 80031dc:	4293      	cmp	r3, r2
 80031de:	d004      	beq.n	80031ea <TM_SysLocalCmd+0x2e>
 80031e0:	f64f 5261 	movw	r2, #64865	; 0xfd61
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d004      	beq.n	80031f2 <TM_SysLocalCmd+0x36>
 80031e8:	e00b      	b.n	8003202 <TM_SysLocalCmd+0x46>
  {
    case LHCI_OPCODE_C1_WRITE_REG:
      LHCI_C1_Write_Register(&SysLocalCmd);
 80031ea:	4816      	ldr	r0, [pc, #88]	; (8003244 <TM_SysLocalCmd+0x88>)
 80031ec:	f005 fd48 	bl	8008c80 <LHCI_C1_Write_Register>
      break;
 80031f0:	e01e      	b.n	8003230 <TM_SysLocalCmd+0x74>

    case LHCI_OPCODE_C1_READ_REG:
      LHCI_C1_Read_Register(&SysLocalCmd);
 80031f2:	4814      	ldr	r0, [pc, #80]	; (8003244 <TM_SysLocalCmd+0x88>)
 80031f4:	f005 fde0 	bl	8008db8 <LHCI_C1_Read_Register>
      break;
 80031f8:	e01a      	b.n	8003230 <TM_SysLocalCmd+0x74>

    case LHCI_OPCODE_C1_DEVICE_INF:
      LHCI_C1_Read_Device_Information(&SysLocalCmd);
 80031fa:	4812      	ldr	r0, [pc, #72]	; (8003244 <TM_SysLocalCmd+0x88>)
 80031fc:	f005 fe26 	bl	8008e4c <LHCI_C1_Read_Device_Information>
      break;
 8003200:	e016      	b.n	8003230 <TM_SysLocalCmd+0x74>

    default:
      ((TL_CcEvt_t*)(((TL_EvtPacket_t*)&SysLocalCmd)->evtserial.evt.payload))->cmdcode = SysLocalCmd.cmdserial.cmd.cmdcode;
 8003202:	4b11      	ldr	r3, [pc, #68]	; (8003248 <TM_SysLocalCmd+0x8c>)
 8003204:	4a0f      	ldr	r2, [pc, #60]	; (8003244 <TM_SysLocalCmd+0x88>)
 8003206:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 800320a:	b292      	uxth	r2, r2
 800320c:	f8a3 2001 	strh.w	r2, [r3, #1]
      ((TL_CcEvt_t*)(((TL_EvtPacket_t*)&SysLocalCmd)->evtserial.evt.payload))->payload[0] = 0x01;
 8003210:	4b0d      	ldr	r3, [pc, #52]	; (8003248 <TM_SysLocalCmd+0x8c>)
 8003212:	2201      	movs	r2, #1
 8003214:	70da      	strb	r2, [r3, #3]
      ((TL_CcEvt_t*)(((TL_EvtPacket_t*)&SysLocalCmd)->evtserial.evt.payload))->numcmd = 1;
 8003216:	4b0c      	ldr	r3, [pc, #48]	; (8003248 <TM_SysLocalCmd+0x8c>)
 8003218:	2201      	movs	r2, #1
 800321a:	701a      	strb	r2, [r3, #0]
      ((TL_EvtPacket_t*)&SysLocalCmd)->evtserial.type = TL_LOCRSP_PKT_TYPE;
 800321c:	4b09      	ldr	r3, [pc, #36]	; (8003244 <TM_SysLocalCmd+0x88>)
 800321e:	2221      	movs	r2, #33	; 0x21
 8003220:	721a      	strb	r2, [r3, #8]
      ((TL_EvtPacket_t*)&SysLocalCmd)->evtserial.evt.evtcode = TL_BLEEVT_CC_OPCODE;
 8003222:	4b08      	ldr	r3, [pc, #32]	; (8003244 <TM_SysLocalCmd+0x88>)
 8003224:	220e      	movs	r2, #14
 8003226:	725a      	strb	r2, [r3, #9]
      ((TL_EvtPacket_t*)&SysLocalCmd)->evtserial.evt.plen = TL_EVT_CS_PAYLOAD_SIZE;
 8003228:	4b06      	ldr	r3, [pc, #24]	; (8003244 <TM_SysLocalCmd+0x88>)
 800322a:	2204      	movs	r2, #4
 800322c:	729a      	strb	r2, [r3, #10]

      break;
 800322e:	bf00      	nop
  }

  LST_insert_tail (&HostTxQueue, (tListNode *)&SysLocalCmd);
 8003230:	4904      	ldr	r1, [pc, #16]	; (8003244 <TM_SysLocalCmd+0x88>)
 8003232:	4806      	ldr	r0, [pc, #24]	; (800324c <TM_SysLocalCmd+0x90>)
 8003234:	f005 ff4d 	bl	80090d2 <LST_insert_tail>
  UTIL_SEQ_SetTask(1<<CFG_TASK_TX_TO_HOST_ID,CFG_SCH_PRIO_0);
 8003238:	2100      	movs	r1, #0
 800323a:	2010      	movs	r0, #16
 800323c:	f006 fbd2 	bl	80099e4 <UTIL_SEQ_SetTask>

  return;
 8003240:	bf00      	nop
}
 8003242:	bd80      	pop	{r7, pc}
 8003244:	20000554 	.word	0x20000554
 8003248:	2000055f 	.word	0x2000055f
 800324c:	20000664 	.word	0x20000664

08003250 <RxCpltCallback>:

static void RxCpltCallback (void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
  uint16_t nb_bytes_to_receive=0;
 8003256:	2300      	movs	r3, #0
 8003258:	80fb      	strh	r3, [r7, #6]
  uint16_t buffer_index=0;
 800325a:	2300      	movs	r3, #0
 800325c:	80bb      	strh	r3, [r7, #4]
  uint8_t packet_indicator;

  switch (HciReceiveStatus)
 800325e:	4b9e      	ldr	r3, [pc, #632]	; (80034d8 <RxCpltCallback+0x288>)
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2b02      	cmp	r3, #2
 8003264:	f000 80fd 	beq.w	8003462 <RxCpltCallback+0x212>
 8003268:	2b02      	cmp	r3, #2
 800326a:	f300 8126 	bgt.w	80034ba <RxCpltCallback+0x26a>
 800326e:	2b00      	cmp	r3, #0
 8003270:	d002      	beq.n	8003278 <RxCpltCallback+0x28>
 8003272:	2b01      	cmp	r3, #1
 8003274:	d062      	beq.n	800333c <RxCpltCallback+0xec>
      pHostRx = RxHostData;

      break;

    default:
      break;
 8003276:	e120      	b.n	80034ba <RxCpltCallback+0x26a>
      packet_indicator = pHostRx[0];
 8003278:	4b98      	ldr	r3, [pc, #608]	; (80034dc <RxCpltCallback+0x28c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	70fb      	strb	r3, [r7, #3]
      switch(packet_indicator)
 8003280:	78fb      	ldrb	r3, [r7, #3]
 8003282:	3b01      	subs	r3, #1
 8003284:	2b1f      	cmp	r3, #31
 8003286:	d853      	bhi.n	8003330 <RxCpltCallback+0xe0>
 8003288:	a201      	add	r2, pc, #4	; (adr r2, 8003290 <RxCpltCallback+0x40>)
 800328a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328e:	bf00      	nop
 8003290:	08003311 	.word	0x08003311
 8003294:	08003321 	.word	0x08003321
 8003298:	08003331 	.word	0x08003331
 800329c:	08003331 	.word	0x08003331
 80032a0:	08003331 	.word	0x08003331
 80032a4:	08003331 	.word	0x08003331
 80032a8:	08003331 	.word	0x08003331
 80032ac:	08003331 	.word	0x08003331
 80032b0:	08003331 	.word	0x08003331
 80032b4:	08003331 	.word	0x08003331
 80032b8:	08003331 	.word	0x08003331
 80032bc:	08003331 	.word	0x08003331
 80032c0:	08003331 	.word	0x08003331
 80032c4:	08003331 	.word	0x08003331
 80032c8:	08003331 	.word	0x08003331
 80032cc:	08003311 	.word	0x08003311
 80032d0:	08003331 	.word	0x08003331
 80032d4:	08003331 	.word	0x08003331
 80032d8:	08003331 	.word	0x08003331
 80032dc:	08003331 	.word	0x08003331
 80032e0:	08003331 	.word	0x08003331
 80032e4:	08003331 	.word	0x08003331
 80032e8:	08003331 	.word	0x08003331
 80032ec:	08003331 	.word	0x08003331
 80032f0:	08003331 	.word	0x08003331
 80032f4:	08003331 	.word	0x08003331
 80032f8:	08003331 	.word	0x08003331
 80032fc:	08003331 	.word	0x08003331
 8003300:	08003331 	.word	0x08003331
 8003304:	08003331 	.word	0x08003331
 8003308:	08003331 	.word	0x08003331
 800330c:	08003311 	.word	0x08003311
          HciReceiveStatus = WAITING_LENGTH;
 8003310:	4b71      	ldr	r3, [pc, #452]	; (80034d8 <RxCpltCallback+0x288>)
 8003312:	2201      	movs	r2, #1
 8003314:	701a      	strb	r2, [r3, #0]
          nb_bytes_to_receive = 3;
 8003316:	2303      	movs	r3, #3
 8003318:	80fb      	strh	r3, [r7, #6]
          buffer_index = 1;
 800331a:	2301      	movs	r3, #1
 800331c:	80bb      	strh	r3, [r7, #4]
          break;
 800331e:	e00c      	b.n	800333a <RxCpltCallback+0xea>
          HciReceiveStatus = WAITING_LENGTH;
 8003320:	4b6d      	ldr	r3, [pc, #436]	; (80034d8 <RxCpltCallback+0x288>)
 8003322:	2201      	movs	r2, #1
 8003324:	701a      	strb	r2, [r3, #0]
          nb_bytes_to_receive = 4;
 8003326:	2304      	movs	r3, #4
 8003328:	80fb      	strh	r3, [r7, #6]
          buffer_index = 1;
 800332a:	2301      	movs	r3, #1
 800332c:	80bb      	strh	r3, [r7, #4]
          break;
 800332e:	e004      	b.n	800333a <RxCpltCallback+0xea>
          nb_bytes_to_receive = 1;
 8003330:	2301      	movs	r3, #1
 8003332:	80fb      	strh	r3, [r7, #6]
          buffer_index = 0;
 8003334:	2300      	movs	r3, #0
 8003336:	80bb      	strh	r3, [r7, #4]
          break;
 8003338:	bf00      	nop
      break;
 800333a:	e0bf      	b.n	80034bc <RxCpltCallback+0x26c>
      packet_indicator = pHostRx[0];
 800333c:	4b67      	ldr	r3, [pc, #412]	; (80034dc <RxCpltCallback+0x28c>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	70fb      	strb	r3, [r7, #3]
      switch(packet_indicator)
 8003344:	78fb      	ldrb	r3, [r7, #3]
 8003346:	2b20      	cmp	r3, #32
 8003348:	d019      	beq.n	800337e <RxCpltCallback+0x12e>
 800334a:	2b20      	cmp	r3, #32
 800334c:	dc46      	bgt.n	80033dc <RxCpltCallback+0x18c>
 800334e:	2b02      	cmp	r3, #2
 8003350:	d025      	beq.n	800339e <RxCpltCallback+0x14e>
 8003352:	2b10      	cmp	r3, #16
 8003354:	d142      	bne.n	80033dc <RxCpltCallback+0x18c>
          nb_bytes_to_receive = pHostRx[3];
 8003356:	4b61      	ldr	r3, [pc, #388]	; (80034dc <RxCpltCallback+0x28c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	3303      	adds	r3, #3
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	80fb      	strh	r3, [r7, #6]
          pHostRx = (uint8_t*)&(((TL_CmdPacket_t*)(p_RefTable->p_sys_table->pcmd_buffer))->cmdserial);
 8003360:	4b5f      	ldr	r3, [pc, #380]	; (80034e0 <RxCpltCallback+0x290>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	3308      	adds	r3, #8
 800336a:	4a5c      	ldr	r2, [pc, #368]	; (80034dc <RxCpltCallback+0x28c>)
 800336c:	6013      	str	r3, [r2, #0]
          memcpy(pHostRx, RxHostData, 4);
 800336e:	4b5b      	ldr	r3, [pc, #364]	; (80034dc <RxCpltCallback+0x28c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a5c      	ldr	r2, [pc, #368]	; (80034e4 <RxCpltCallback+0x294>)
 8003374:	6812      	ldr	r2, [r2, #0]
 8003376:	601a      	str	r2, [r3, #0]
          buffer_index = 4;
 8003378:	2304      	movs	r3, #4
 800337a:	80bb      	strh	r3, [r7, #4]
          break;
 800337c:	e042      	b.n	8003404 <RxCpltCallback+0x1b4>
          nb_bytes_to_receive = pHostRx[3];
 800337e:	4b57      	ldr	r3, [pc, #348]	; (80034dc <RxCpltCallback+0x28c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	3303      	adds	r3, #3
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	80fb      	strh	r3, [r7, #6]
          pHostRx = (uint8_t*)&SysLocalCmd.cmdserial;
 8003388:	4b54      	ldr	r3, [pc, #336]	; (80034dc <RxCpltCallback+0x28c>)
 800338a:	4a57      	ldr	r2, [pc, #348]	; (80034e8 <RxCpltCallback+0x298>)
 800338c:	601a      	str	r2, [r3, #0]
          memcpy(pHostRx, RxHostData, 4);
 800338e:	4b53      	ldr	r3, [pc, #332]	; (80034dc <RxCpltCallback+0x28c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a54      	ldr	r2, [pc, #336]	; (80034e4 <RxCpltCallback+0x294>)
 8003394:	6812      	ldr	r2, [r2, #0]
 8003396:	601a      	str	r2, [r3, #0]
          buffer_index = 4;
 8003398:	2304      	movs	r3, #4
 800339a:	80bb      	strh	r3, [r7, #4]
          break;
 800339c:	e032      	b.n	8003404 <RxCpltCallback+0x1b4>
          nb_bytes_to_receive = pHostRx[3] + (pHostRx[4] << 8);
 800339e:	4b4f      	ldr	r3, [pc, #316]	; (80034dc <RxCpltCallback+0x28c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	3303      	adds	r3, #3
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	4b4c      	ldr	r3, [pc, #304]	; (80034dc <RxCpltCallback+0x28c>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	3304      	adds	r3, #4
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	021b      	lsls	r3, r3, #8
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	4413      	add	r3, r2
 80033b8:	80fb      	strh	r3, [r7, #6]
          pHostRx = (uint8_t*)&(((TL_AclDataPacket_t*)(p_RefTable->p_ble_table->phci_acl_data_buffer))->AclDataSerial);
 80033ba:	4b49      	ldr	r3, [pc, #292]	; (80034e0 <RxCpltCallback+0x290>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	3308      	adds	r3, #8
 80033c4:	4a45      	ldr	r2, [pc, #276]	; (80034dc <RxCpltCallback+0x28c>)
 80033c6:	6013      	str	r3, [r2, #0]
          memcpy(pHostRx, RxHostData, 5);
 80033c8:	4b44      	ldr	r3, [pc, #272]	; (80034dc <RxCpltCallback+0x28c>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a45      	ldr	r2, [pc, #276]	; (80034e4 <RxCpltCallback+0x294>)
 80033ce:	6810      	ldr	r0, [r2, #0]
 80033d0:	6018      	str	r0, [r3, #0]
 80033d2:	7912      	ldrb	r2, [r2, #4]
 80033d4:	711a      	strb	r2, [r3, #4]
          buffer_index = 5;
 80033d6:	2305      	movs	r3, #5
 80033d8:	80bb      	strh	r3, [r7, #4]
          break;
 80033da:	e013      	b.n	8003404 <RxCpltCallback+0x1b4>
          nb_bytes_to_receive = pHostRx[3];
 80033dc:	4b3f      	ldr	r3, [pc, #252]	; (80034dc <RxCpltCallback+0x28c>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	3303      	adds	r3, #3
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	80fb      	strh	r3, [r7, #6]
          pHostRx = (uint8_t*)&(((TL_CmdPacket_t*)(p_RefTable->p_ble_table->pcmd_buffer))->cmdserial);
 80033e6:	4b3e      	ldr	r3, [pc, #248]	; (80034e0 <RxCpltCallback+0x290>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	3308      	adds	r3, #8
 80033f0:	4a3a      	ldr	r2, [pc, #232]	; (80034dc <RxCpltCallback+0x28c>)
 80033f2:	6013      	str	r3, [r2, #0]
          memcpy(pHostRx, RxHostData, 4);
 80033f4:	4b39      	ldr	r3, [pc, #228]	; (80034dc <RxCpltCallback+0x28c>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a3a      	ldr	r2, [pc, #232]	; (80034e4 <RxCpltCallback+0x294>)
 80033fa:	6812      	ldr	r2, [r2, #0]
 80033fc:	601a      	str	r2, [r3, #0]
          buffer_index = 4;
 80033fe:	2304      	movs	r3, #4
 8003400:	80bb      	strh	r3, [r7, #4]
          break;
 8003402:	bf00      	nop
      if(nb_bytes_to_receive)
 8003404:	88fb      	ldrh	r3, [r7, #6]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <RxCpltCallback+0x1c2>
        HciReceiveStatus = WAITING_PAYLOAD;
 800340a:	4b33      	ldr	r3, [pc, #204]	; (80034d8 <RxCpltCallback+0x288>)
 800340c:	2202      	movs	r2, #2
 800340e:	701a      	strb	r2, [r3, #0]
      break;
 8003410:	e054      	b.n	80034bc <RxCpltCallback+0x26c>
        switch (packet_indicator)
 8003412:	78fb      	ldrb	r3, [r7, #3]
 8003414:	2b20      	cmp	r3, #32
 8003416:	d00a      	beq.n	800342e <RxCpltCallback+0x1de>
 8003418:	2b20      	cmp	r3, #32
 800341a:	dc12      	bgt.n	8003442 <RxCpltCallback+0x1f2>
 800341c:	2b02      	cmp	r3, #2
 800341e:	d00b      	beq.n	8003438 <RxCpltCallback+0x1e8>
 8003420:	2b10      	cmp	r3, #16
 8003422:	d10e      	bne.n	8003442 <RxCpltCallback+0x1f2>
            UTIL_SEQ_SetTask(1<<CFG_TASK_SYS_HCI_CMD_ID,CFG_SCH_PRIO_0);
 8003424:	2100      	movs	r1, #0
 8003426:	2002      	movs	r0, #2
 8003428:	f006 fadc 	bl	80099e4 <UTIL_SEQ_SetTask>
            break;
 800342c:	e00e      	b.n	800344c <RxCpltCallback+0x1fc>
            UTIL_SEQ_SetTask(1<<CFG_TASK_SYS_LOCAL_CMD_ID,CFG_SCH_PRIO_0);
 800342e:	2100      	movs	r1, #0
 8003430:	2008      	movs	r0, #8
 8003432:	f006 fad7 	bl	80099e4 <UTIL_SEQ_SetTask>
            break;
 8003436:	e009      	b.n	800344c <RxCpltCallback+0x1fc>
            UTIL_SEQ_SetTask(1<<CFG_TASK_HCI_ACL_DATA_ID,CFG_SCH_PRIO_0);
 8003438:	2100      	movs	r1, #0
 800343a:	2004      	movs	r0, #4
 800343c:	f006 fad2 	bl	80099e4 <UTIL_SEQ_SetTask>
            break;
 8003440:	e004      	b.n	800344c <RxCpltCallback+0x1fc>
            UTIL_SEQ_SetTask(1<<CFG_TASK_BLE_HCI_CMD_ID,CFG_SCH_PRIO_0);
 8003442:	2100      	movs	r1, #0
 8003444:	2001      	movs	r0, #1
 8003446:	f006 facd 	bl	80099e4 <UTIL_SEQ_SetTask>
            break;
 800344a:	bf00      	nop
        HciReceiveStatus = WAITING_TYPE;
 800344c:	4b22      	ldr	r3, [pc, #136]	; (80034d8 <RxCpltCallback+0x288>)
 800344e:	2200      	movs	r2, #0
 8003450:	701a      	strb	r2, [r3, #0]
        nb_bytes_to_receive = 1;
 8003452:	2301      	movs	r3, #1
 8003454:	80fb      	strh	r3, [r7, #6]
        buffer_index = 0;
 8003456:	2300      	movs	r3, #0
 8003458:	80bb      	strh	r3, [r7, #4]
        pHostRx = RxHostData;
 800345a:	4b20      	ldr	r3, [pc, #128]	; (80034dc <RxCpltCallback+0x28c>)
 800345c:	4a21      	ldr	r2, [pc, #132]	; (80034e4 <RxCpltCallback+0x294>)
 800345e:	601a      	str	r2, [r3, #0]
      break;
 8003460:	e02c      	b.n	80034bc <RxCpltCallback+0x26c>
      packet_indicator = pHostRx[0];
 8003462:	4b1e      	ldr	r3, [pc, #120]	; (80034dc <RxCpltCallback+0x28c>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	70fb      	strb	r3, [r7, #3]
      switch (packet_indicator)
 800346a:	78fb      	ldrb	r3, [r7, #3]
 800346c:	2b20      	cmp	r3, #32
 800346e:	d00a      	beq.n	8003486 <RxCpltCallback+0x236>
 8003470:	2b20      	cmp	r3, #32
 8003472:	dc12      	bgt.n	800349a <RxCpltCallback+0x24a>
 8003474:	2b02      	cmp	r3, #2
 8003476:	d00b      	beq.n	8003490 <RxCpltCallback+0x240>
 8003478:	2b10      	cmp	r3, #16
 800347a:	d10e      	bne.n	800349a <RxCpltCallback+0x24a>
          UTIL_SEQ_SetTask(1<<CFG_TASK_SYS_HCI_CMD_ID,CFG_SCH_PRIO_0);
 800347c:	2100      	movs	r1, #0
 800347e:	2002      	movs	r0, #2
 8003480:	f006 fab0 	bl	80099e4 <UTIL_SEQ_SetTask>
          break;
 8003484:	e00e      	b.n	80034a4 <RxCpltCallback+0x254>
          UTIL_SEQ_SetTask(1<<CFG_TASK_SYS_LOCAL_CMD_ID,CFG_SCH_PRIO_0);
 8003486:	2100      	movs	r1, #0
 8003488:	2008      	movs	r0, #8
 800348a:	f006 faab 	bl	80099e4 <UTIL_SEQ_SetTask>
          break;
 800348e:	e009      	b.n	80034a4 <RxCpltCallback+0x254>
          UTIL_SEQ_SetTask(1<<CFG_TASK_HCI_ACL_DATA_ID,CFG_SCH_PRIO_0);
 8003490:	2100      	movs	r1, #0
 8003492:	2004      	movs	r0, #4
 8003494:	f006 faa6 	bl	80099e4 <UTIL_SEQ_SetTask>
          break;
 8003498:	e004      	b.n	80034a4 <RxCpltCallback+0x254>
          UTIL_SEQ_SetTask(1<<CFG_TASK_BLE_HCI_CMD_ID,CFG_SCH_PRIO_0);
 800349a:	2100      	movs	r1, #0
 800349c:	2001      	movs	r0, #1
 800349e:	f006 faa1 	bl	80099e4 <UTIL_SEQ_SetTask>
          break;
 80034a2:	bf00      	nop
      HciReceiveStatus = WAITING_TYPE;
 80034a4:	4b0c      	ldr	r3, [pc, #48]	; (80034d8 <RxCpltCallback+0x288>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	701a      	strb	r2, [r3, #0]
      nb_bytes_to_receive = 1;
 80034aa:	2301      	movs	r3, #1
 80034ac:	80fb      	strh	r3, [r7, #6]
      buffer_index = 0;
 80034ae:	2300      	movs	r3, #0
 80034b0:	80bb      	strh	r3, [r7, #4]
      pHostRx = RxHostData;
 80034b2:	4b0a      	ldr	r3, [pc, #40]	; (80034dc <RxCpltCallback+0x28c>)
 80034b4:	4a0b      	ldr	r2, [pc, #44]	; (80034e4 <RxCpltCallback+0x294>)
 80034b6:	601a      	str	r2, [r3, #0]
      break;
 80034b8:	e000      	b.n	80034bc <RxCpltCallback+0x26c>
      break;
 80034ba:	bf00      	nop
  }

  HW_UART_Receive_IT(CFG_UART_GUI, &pHostRx[buffer_index], nb_bytes_to_receive, RxCpltCallback);
 80034bc:	4b07      	ldr	r3, [pc, #28]	; (80034dc <RxCpltCallback+0x28c>)
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	88bb      	ldrh	r3, [r7, #4]
 80034c2:	18d1      	adds	r1, r2, r3
 80034c4:	88fa      	ldrh	r2, [r7, #6]
 80034c6:	4b09      	ldr	r3, [pc, #36]	; (80034ec <RxCpltCallback+0x29c>)
 80034c8:	2000      	movs	r0, #0
 80034ca:	f7fe fe5b 	bl	8002184 <HW_UART_Receive_IT>

  return;
 80034ce:	bf00      	nop
}
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	20000551 	.word	0x20000551
 80034dc:	20000660 	.word	0x20000660
 80034e0:	20000674 	.word	0x20000674
 80034e4:	2000054c 	.word	0x2000054c
 80034e8:	2000055c 	.word	0x2000055c
 80034ec:	08003251 	.word	0x08003251

080034f0 <HostTxCb>:

static void HostTxCb(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  HostTxStatus = TX_DONE;
 80034f4:	4b14      	ldr	r3, [pc, #80]	; (8003548 <HostTxCb+0x58>)
 80034f6:	2201      	movs	r2, #1
 80034f8:	701a      	strb	r2, [r3, #0]

  if((pTxToHostPacket >= (TL_EvtPacket_t *)(p_RefTable->p_mem_manager_table->blepool)) && (pTxToHostPacket < ((TL_EvtPacket_t *)((p_RefTable->p_mem_manager_table->blepool) + p_RefTable->p_mem_manager_table->blepoolsize))))
 80034fa:	4b14      	ldr	r3, [pc, #80]	; (800354c <HostTxCb+0x5c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	689a      	ldr	r2, [r3, #8]
 8003502:	4b13      	ldr	r3, [pc, #76]	; (8003550 <HostTxCb+0x60>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	429a      	cmp	r2, r3
 8003508:	d811      	bhi.n	800352e <HostTxCb+0x3e>
 800350a:	4b10      	ldr	r3, [pc, #64]	; (800354c <HostTxCb+0x5c>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	689a      	ldr	r2, [r3, #8]
 8003512:	4b0e      	ldr	r3, [pc, #56]	; (800354c <HostTxCb+0x5c>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	441a      	add	r2, r3
 800351c:	4b0c      	ldr	r3, [pc, #48]	; (8003550 <HostTxCb+0x60>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	429a      	cmp	r2, r3
 8003522:	d904      	bls.n	800352e <HostTxCb+0x3e>
  {
    TL_MM_EvtDone(pTxToHostPacket);
 8003524:	4b0a      	ldr	r3, [pc, #40]	; (8003550 <HostTxCb+0x60>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4618      	mov	r0, r3
 800352a:	f005 ffd1 	bl	80094d0 <TL_MM_EvtDone>
  }

  if (LST_is_empty(&HostTxQueue) == FALSE)
 800352e:	4809      	ldr	r0, [pc, #36]	; (8003554 <HostTxCb+0x64>)
 8003530:	f005 fdad 	bl	800908e <LST_is_empty>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d104      	bne.n	8003544 <HostTxCb+0x54>
  {
    UTIL_SEQ_SetTask(1<<CFG_TASK_TX_TO_HOST_ID,CFG_SCH_PRIO_0);
 800353a:	2100      	movs	r1, #0
 800353c:	2010      	movs	r0, #16
 800353e:	f006 fa51 	bl	80099e4 <UTIL_SEQ_SetTask>
  }

  return;
 8003542:	bf00      	nop
 8003544:	bf00      	nop
}
 8003546:	bd80      	pop	{r7, pc}
 8003548:	20000670 	.word	0x20000670
 800354c:	20000674 	.word	0x20000674
 8003550:	2000066c 	.word	0x2000066c
 8003554:	20000664 	.word	0x20000664

08003558 <TM_BleEvtRx>:

static void TM_BleEvtRx(TL_EvtPacket_t *phcievt)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&HostTxQueue, (tListNode *)phcievt);
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	4805      	ldr	r0, [pc, #20]	; (8003578 <TM_BleEvtRx+0x20>)
 8003564:	f005 fdb5 	bl	80090d2 <LST_insert_tail>

  UTIL_SEQ_SetTask(1<<CFG_TASK_TX_TO_HOST_ID,CFG_SCH_PRIO_0);
 8003568:	2100      	movs	r1, #0
 800356a:	2010      	movs	r0, #16
 800356c:	f006 fa3a 	bl	80099e4 <UTIL_SEQ_SetTask>

  return;
 8003570:	bf00      	nop
}
 8003572:	3708      	adds	r7, #8
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	20000664 	.word	0x20000664

0800357c <TM_AclDataAck>:

static void TM_AclDataAck(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TM_AclDataAck*/

  /* USER CODE END TM_AclDataAck*/

  return;
 8003580:	bf00      	nop
}
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
	...

0800358c <shci_send>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void shci_send(uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t *p_cmd_payload, TL_EvtPacket_t *p_rsp_status)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b088      	sub	sp, #32
 8003590:	af00      	add	r7, sp, #0
 8003592:	60ba      	str	r2, [r7, #8]
 8003594:	607b      	str	r3, [r7, #4]
 8003596:	4603      	mov	r3, r0
 8003598:	81fb      	strh	r3, [r7, #14]
 800359a:	460b      	mov	r3, r1
 800359c:	737b      	strb	r3, [r7, #13]
  TL_CmdPacket_t *p_cmd_buffer;
  MB_RefTable_t *p_ref_table;
  uint32_t ipccdba;

  ipccdba = READ_BIT(FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA);
 800359e:	4b1b      	ldr	r3, [pc, #108]	; (800360c <shci_send+0x80>)
 80035a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80035a6:	61fb      	str	r3, [r7, #28]
  p_ref_table = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80035b0:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80035b4:	61bb      	str	r3, [r7, #24]

  SysLocalCmdStatus = 1;
 80035b6:	4b16      	ldr	r3, [pc, #88]	; (8003610 <shci_send+0x84>)
 80035b8:	2201      	movs	r2, #1
 80035ba:	701a      	strb	r2, [r3, #0]

  p_cmd_buffer = (TL_CmdPacket_t *)(p_ref_table->p_sys_table->pcmd_buffer);
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	617b      	str	r3, [r7, #20]

  p_cmd_buffer->cmdserial.cmd.cmdcode = cmd_code;
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	89fa      	ldrh	r2, [r7, #14]
 80035c8:	f8a3 2009 	strh.w	r2, [r3, #9]
  p_cmd_buffer->cmdserial.cmd.plen = len_cmd_payload;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	7b7a      	ldrb	r2, [r7, #13]
 80035d0:	72da      	strb	r2, [r3, #11]

  memcpy(p_cmd_buffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload);
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	330c      	adds	r3, #12
 80035d6:	7b7a      	ldrb	r2, [r7, #13]
 80035d8:	68b9      	ldr	r1, [r7, #8]
 80035da:	4618      	mov	r0, r3
 80035dc:	f007 f8cd 	bl	800a77a <memcpy>

  TL_SYS_SendCmd(0, 0);
 80035e0:	2100      	movs	r1, #0
 80035e2:	2000      	movs	r0, #0
 80035e4:	f005 fee4 	bl	80093b0 <TL_SYS_SendCmd>

  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80035e8:	2001      	movs	r0, #1
 80035ea:	f006 fa47 	bl	8009a7c <UTIL_SEQ_WaitEvt>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy(&(p_rsp_status->evtserial), p_cmd_buffer, ((TL_EvtSerial_t*)p_cmd_buffer)->evt.plen + TL_EVT_HDR_SIZE);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f103 0008 	add.w	r0, r3, #8
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	789b      	ldrb	r3, [r3, #2]
 80035f8:	3303      	adds	r3, #3
 80035fa:	461a      	mov	r2, r3
 80035fc:	6979      	ldr	r1, [r7, #20]
 80035fe:	f007 f8bc 	bl	800a77a <memcpy>

  return;
 8003602:	bf00      	nop
}
 8003604:	3720      	adds	r7, #32
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	58004000 	.word	0x58004000
 8003610:	20000678 	.word	0x20000678

08003614 <LL_PWR_EnableBootC2>:
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8003618:	4b05      	ldr	r3, [pc, #20]	; (8003630 <LL_PWR_EnableBootC2+0x1c>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	4a04      	ldr	r2, [pc, #16]	; (8003630 <LL_PWR_EnableBootC2+0x1c>)
 800361e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003622:	60d3      	str	r3, [r2, #12]
}
 8003624:	bf00      	nop
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	58000400 	.word	0x58000400

08003634 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800363c:	4b06      	ldr	r3, [pc, #24]	; (8003658 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800363e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8003642:	4905      	ldr	r1, [pc, #20]	; (8003658 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4313      	orrs	r3, r2
 8003648:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr
 8003658:	58000800 	.word	0x58000800

0800365c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8003664:	4b05      	ldr	r3, [pc, #20]	; (800367c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003666:	6a1a      	ldr	r2, [r3, #32]
 8003668:	4904      	ldr	r1, [pc, #16]	; (800367c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4313      	orrs	r3, r2
 800366e:	620b      	str	r3, [r1, #32]
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	58000800 	.word	0x58000800

08003680 <LL_AHB3_GRP1_EnableClock>:
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800368c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800368e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4313      	orrs	r3, r2
 8003696:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003698:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800369c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4013      	ands	r3, r2
 80036a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80036a4:	68fb      	ldr	r3, [r7, #12]
}
 80036a6:	bf00      	nop
 80036a8:	3714      	adds	r7, #20
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b085      	sub	sp, #20
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80036ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036be:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80036c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80036ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036d2:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4013      	ands	r3, r2
 80036da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80036dc:	68fb      	ldr	r3, [r7, #12]
}
 80036de:	bf00      	nop
 80036e0:	3714      	adds	r7, #20
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr

080036ea <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 80036ea:	b480      	push	{r7}
 80036ec:	b083      	sub	sp, #12
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	601a      	str	r2, [r3, #0]
}
 80036fe:	bf00      	nop
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr

0800370a <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f043 0201 	orr.w	r2, r3, #1
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	601a      	str	r2, [r3, #0]
}
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800372a:	b480      	push	{r7}
 800372c:	b083      	sub	sp, #12
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
 8003732:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	041b      	lsls	r3, r3, #16
 800373c:	43db      	mvns	r3, r3
 800373e:	401a      	ands	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	605a      	str	r2, [r3, #4]
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	041b      	lsls	r3, r3, #16
 8003762:	431a      	orrs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	605a      	str	r2, [r3, #4]
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	43db      	mvns	r3, r3
 8003786:	401a      	ands	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	605a      	str	r2, [r3, #4]
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	609a      	str	r2, [r3, #8]
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	041a      	lsls	r2, r3, #16
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	609a      	str	r2, [r3, #8]
}
 80037c6:	bf00      	nop
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80037d2:	b480      	push	{r7}
 80037d4:	b083      	sub	sp, #12
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
 80037da:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68da      	ldr	r2, [r3, #12]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	4013      	ands	r3, r2
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d101      	bne.n	80037ee <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80037ea:	2301      	movs	r3, #1
 80037ec:	e000      	b.n	80037f0 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69da      	ldr	r2, [r3, #28]
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	4013      	ands	r3, r2
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	429a      	cmp	r2, r3
 8003812:	d101      	bne.n	8003818 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8003814:	2301      	movs	r3, #1
 8003816:	e000      	b.n	800381a <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
	...

08003828 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800382c:	2102      	movs	r1, #2
 800382e:	4818      	ldr	r0, [pc, #96]	; (8003890 <HW_IPCC_Rx_Handler+0x68>)
 8003830:	f7ff ffe4 	bl	80037fc <LL_C2_IPCC_IsActiveFlag_CHx>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d008      	beq.n	800384c <HW_IPCC_Rx_Handler+0x24>
 800383a:	4b15      	ldr	r3, [pc, #84]	; (8003890 <HW_IPCC_Rx_Handler+0x68>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d102      	bne.n	800384c <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8003846:	f000 f8e3 	bl	8003a10 <HW_IPCC_SYS_EvtHandler>
 800384a:	e01e      	b.n	800388a <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800384c:	2101      	movs	r1, #1
 800384e:	4810      	ldr	r0, [pc, #64]	; (8003890 <HW_IPCC_Rx_Handler+0x68>)
 8003850:	f7ff ffd4 	bl	80037fc <LL_C2_IPCC_IsActiveFlag_CHx>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d008      	beq.n	800386c <HW_IPCC_Rx_Handler+0x44>
 800385a:	4b0d      	ldr	r3, [pc, #52]	; (8003890 <HW_IPCC_Rx_Handler+0x68>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d102      	bne.n	800386c <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8003866:	f000 f889 	bl	800397c <HW_IPCC_BLE_EvtHandler>
 800386a:	e00e      	b.n	800388a <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800386c:	2108      	movs	r1, #8
 800386e:	4808      	ldr	r0, [pc, #32]	; (8003890 <HW_IPCC_Rx_Handler+0x68>)
 8003870:	f7ff ffc4 	bl	80037fc <LL_C2_IPCC_IsActiveFlag_CHx>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d008      	beq.n	800388c <HW_IPCC_Rx_Handler+0x64>
 800387a:	4b05      	ldr	r3, [pc, #20]	; (8003890 <HW_IPCC_Rx_Handler+0x68>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f003 0308 	and.w	r3, r3, #8
 8003882:	2b00      	cmp	r3, #0
 8003884:	d102      	bne.n	800388c <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8003886:	f000 f90f 	bl	8003aa8 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800388a:	bf00      	nop
 800388c:	bf00      	nop
}
 800388e:	bd80      	pop	{r7, pc}
 8003890:	58000c00 	.word	0x58000c00

08003894 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8003898:	2102      	movs	r1, #2
 800389a:	4818      	ldr	r0, [pc, #96]	; (80038fc <HW_IPCC_Tx_Handler+0x68>)
 800389c:	f7ff ff99 	bl	80037d2 <LL_C1_IPCC_IsActiveFlag_CHx>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d108      	bne.n	80038b8 <HW_IPCC_Tx_Handler+0x24>
 80038a6:	4b15      	ldr	r3, [pc, #84]	; (80038fc <HW_IPCC_Tx_Handler+0x68>)
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d102      	bne.n	80038b8 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80038b2:	f000 f8a1 	bl	80039f8 <HW_IPCC_SYS_CmdEvtHandler>
 80038b6:	e01e      	b.n	80038f6 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80038b8:	2108      	movs	r1, #8
 80038ba:	4810      	ldr	r0, [pc, #64]	; (80038fc <HW_IPCC_Tx_Handler+0x68>)
 80038bc:	f7ff ff89 	bl	80037d2 <LL_C1_IPCC_IsActiveFlag_CHx>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d108      	bne.n	80038d8 <HW_IPCC_Tx_Handler+0x44>
 80038c6:	4b0d      	ldr	r3, [pc, #52]	; (80038fc <HW_IPCC_Tx_Handler+0x68>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d102      	bne.n	80038d8 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 80038d2:	f000 f8cb 	bl	8003a6c <HW_IPCC_MM_FreeBufHandler>
 80038d6:	e00e      	b.n	80038f6 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80038d8:	2120      	movs	r1, #32
 80038da:	4808      	ldr	r0, [pc, #32]	; (80038fc <HW_IPCC_Tx_Handler+0x68>)
 80038dc:	f7ff ff79 	bl	80037d2 <LL_C1_IPCC_IsActiveFlag_CHx>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d108      	bne.n	80038f8 <HW_IPCC_Tx_Handler+0x64>
 80038e6:	4b05      	ldr	r3, [pc, #20]	; (80038fc <HW_IPCC_Tx_Handler+0x68>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d102      	bne.n	80038f8 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80038f2:	f000 f85d 	bl	80039b0 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80038f6:	bf00      	nop
 80038f8:	bf00      	nop
}
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	58000c00 	.word	0x58000c00

08003900 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8003904:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003908:	f7ff fed3 	bl	80036b2 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800390c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003910:	f7ff fea4 	bl	800365c <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8003914:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003918:	f7ff fe8c 	bl	8003634 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800391c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800391e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8003920:	f7ff fe78 	bl	8003614 <LL_PWR_EnableBootC2>

  return;
 8003924:	bf00      	nop
}
 8003926:	bd80      	pop	{r7, pc}

08003928 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800392c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003930:	f7ff fea6 	bl	8003680 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8003934:	4806      	ldr	r0, [pc, #24]	; (8003950 <HW_IPCC_Init+0x28>)
 8003936:	f7ff fee8 	bl	800370a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800393a:	4805      	ldr	r0, [pc, #20]	; (8003950 <HW_IPCC_Init+0x28>)
 800393c:	f7ff fed5 	bl	80036ea <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8003940:	202c      	movs	r0, #44	; 0x2c
 8003942:	f000 fcb0 	bl	80042a6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8003946:	202d      	movs	r0, #45	; 0x2d
 8003948:	f000 fcad 	bl	80042a6 <HAL_NVIC_EnableIRQ>

  return;
 800394c:	bf00      	nop
}
 800394e:	bd80      	pop	{r7, pc}
 8003950:	58000c00 	.word	0x58000c00

08003954 <HW_IPCC_BLE_Init>:
#endif
/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8003958:	2101      	movs	r1, #1
 800395a:	4802      	ldr	r0, [pc, #8]	; (8003964 <HW_IPCC_BLE_Init+0x10>)
 800395c:	f7ff ff0a 	bl	8003774 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8003960:	bf00      	nop
}
 8003962:	bd80      	pop	{r7, pc}
 8003964:	58000c00 	.word	0x58000c00

08003968 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_BLE_CMD_CHANNEL );
 800396c:	2101      	movs	r1, #1
 800396e:	4802      	ldr	r0, [pc, #8]	; (8003978 <HW_IPCC_BLE_SendCmd+0x10>)
 8003970:	f7ff ff20 	bl	80037b4 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8003974:	bf00      	nop
}
 8003976:	bd80      	pop	{r7, pc}
 8003978:	58000c00 	.word	0x58000c00

0800397c <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8003980:	f005 fc9e 	bl	80092c0 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8003984:	2101      	movs	r1, #1
 8003986:	4802      	ldr	r0, [pc, #8]	; (8003990 <HW_IPCC_BLE_EvtHandler+0x14>)
 8003988:	f7ff ff06 	bl	8003798 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800398c:	bf00      	nop
}
 800398e:	bd80      	pop	{r7, pc}
 8003990:	58000c00 	.word	0x58000c00

08003994 <HW_IPCC_BLE_SendAclData>:

void HW_IPCC_BLE_SendAclData( void )
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8003998:	2120      	movs	r1, #32
 800399a:	4804      	ldr	r0, [pc, #16]	; (80039ac <HW_IPCC_BLE_SendAclData+0x18>)
 800399c:	f7ff ff0a 	bl	80037b4 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80039a0:	2120      	movs	r1, #32
 80039a2:	4802      	ldr	r0, [pc, #8]	; (80039ac <HW_IPCC_BLE_SendAclData+0x18>)
 80039a4:	f7ff fec1 	bl	800372a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80039a8:	bf00      	nop
}
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	58000c00 	.word	0x58000c00

080039b0 <HW_IPCC_BLE_AclDataEvtHandler>:

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80039b4:	2120      	movs	r1, #32
 80039b6:	4803      	ldr	r0, [pc, #12]	; (80039c4 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80039b8:	f7ff feca 	bl	8003750 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80039bc:	f005 fcc4 	bl	8009348 <HW_IPCC_BLE_AclDataAckNot>

  return;
 80039c0:	bf00      	nop
}
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	58000c00 	.word	0x58000c00

080039c8 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80039cc:	2102      	movs	r1, #2
 80039ce:	4802      	ldr	r0, [pc, #8]	; (80039d8 <HW_IPCC_SYS_Init+0x10>)
 80039d0:	f7ff fed0 	bl	8003774 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80039d4:	bf00      	nop
}
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	58000c00 	.word	0x58000c00

080039dc <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80039e0:	2102      	movs	r1, #2
 80039e2:	4804      	ldr	r0, [pc, #16]	; (80039f4 <HW_IPCC_SYS_SendCmd+0x18>)
 80039e4:	f7ff fee6 	bl	80037b4 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80039e8:	2102      	movs	r1, #2
 80039ea:	4802      	ldr	r0, [pc, #8]	; (80039f4 <HW_IPCC_SYS_SendCmd+0x18>)
 80039ec:	f7ff fe9d 	bl	800372a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80039f0:	bf00      	nop
}
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	58000c00 	.word	0x58000c00

080039f8 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80039fc:	2102      	movs	r1, #2
 80039fe:	4803      	ldr	r0, [pc, #12]	; (8003a0c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8003a00:	f7ff fea6 	bl	8003750 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8003a04:	f005 fcf0 	bl	80093e8 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8003a08:	bf00      	nop
}
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	58000c00 	.word	0x58000c00

08003a10 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8003a14:	f005 fcfe 	bl	8009414 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8003a18:	2102      	movs	r1, #2
 8003a1a:	4802      	ldr	r0, [pc, #8]	; (8003a24 <HW_IPCC_SYS_EvtHandler+0x14>)
 8003a1c:	f7ff febc 	bl	8003798 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8003a20:	bf00      	nop
}
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	58000c00 	.word	0x58000c00

08003a28 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8003a30:	2108      	movs	r1, #8
 8003a32:	480c      	ldr	r0, [pc, #48]	; (8003a64 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8003a34:	f7ff fecd 	bl	80037d2 <LL_C1_IPCC_IsActiveFlag_CHx>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d007      	beq.n	8003a4e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8003a3e:	4a0a      	ldr	r2, [pc, #40]	; (8003a68 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8003a44:	2108      	movs	r1, #8
 8003a46:	4807      	ldr	r0, [pc, #28]	; (8003a64 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8003a48:	f7ff fe6f 	bl	800372a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8003a4c:	e006      	b.n	8003a5c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4798      	blx	r3
    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8003a52:	2108      	movs	r1, #8
 8003a54:	4803      	ldr	r0, [pc, #12]	; (8003a64 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8003a56:	f7ff fead 	bl	80037b4 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8003a5a:	bf00      	nop
}
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	58000c00 	.word	0x58000c00
 8003a68:	2000067c 	.word	0x2000067c

08003a6c <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8003a70:	2108      	movs	r1, #8
 8003a72:	4806      	ldr	r0, [pc, #24]	; (8003a8c <HW_IPCC_MM_FreeBufHandler+0x20>)
 8003a74:	f7ff fe6c 	bl	8003750 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8003a78:	4b05      	ldr	r3, [pc, #20]	; (8003a90 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4798      	blx	r3

  HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8003a7e:	2108      	movs	r1, #8
 8003a80:	4802      	ldr	r0, [pc, #8]	; (8003a8c <HW_IPCC_MM_FreeBufHandler+0x20>)
 8003a82:	f7ff fe97 	bl	80037b4 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8003a86:	bf00      	nop
}
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	58000c00 	.word	0x58000c00
 8003a90:	2000067c 	.word	0x2000067c

08003a94 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8003a98:	2108      	movs	r1, #8
 8003a9a:	4802      	ldr	r0, [pc, #8]	; (8003aa4 <HW_IPCC_TRACES_Init+0x10>)
 8003a9c:	f7ff fe6a 	bl	8003774 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8003aa0:	bf00      	nop
}
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	58000c00 	.word	0x58000c00

08003aa8 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8003aac:	f005 fd5a 	bl	8009564 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8003ab0:	2108      	movs	r1, #8
 8003ab2:	4802      	ldr	r0, [pc, #8]	; (8003abc <HW_IPCC_TRACES_EvtHandler+0x14>)
 8003ab4:	f7ff fe70 	bl	8003798 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8003ab8:	bf00      	nop
}
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	58000c00 	.word	0x58000c00

08003ac0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8003ac0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ac2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ac4:	3304      	adds	r3, #4

08003ac6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ac6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ac8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003aca:	d3f9      	bcc.n	8003ac0 <CopyDataInit>
  bx lr
 8003acc:	4770      	bx	lr

08003ace <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8003ace:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003ad0:	3004      	adds	r0, #4

08003ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8003ad2:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003ad4:	d3fb      	bcc.n	8003ace <FillZerobss>
  bx lr
 8003ad6:	4770      	bx	lr

08003ad8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003ad8:	480c      	ldr	r0, [pc, #48]	; (8003b0c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8003ada:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003adc:	f000 f954 	bl	8003d88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003ae0:	480b      	ldr	r0, [pc, #44]	; (8003b10 <LoopForever+0x8>)
 8003ae2:	490c      	ldr	r1, [pc, #48]	; (8003b14 <LoopForever+0xc>)
 8003ae4:	4a0c      	ldr	r2, [pc, #48]	; (8003b18 <LoopForever+0x10>)
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	f7ff ffed 	bl	8003ac6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003aec:	480b      	ldr	r0, [pc, #44]	; (8003b1c <LoopForever+0x14>)
 8003aee:	490c      	ldr	r1, [pc, #48]	; (8003b20 <LoopForever+0x18>)
 8003af0:	2300      	movs	r3, #0
 8003af2:	f7ff ffee 	bl	8003ad2 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8003af6:	480b      	ldr	r0, [pc, #44]	; (8003b24 <LoopForever+0x1c>)
 8003af8:	490b      	ldr	r1, [pc, #44]	; (8003b28 <LoopForever+0x20>)
 8003afa:	2300      	movs	r3, #0
 8003afc:	f7ff ffe9 	bl	8003ad2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003b00:	f006 fe14 	bl	800a72c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8003b04:	f7fe fc0a 	bl	800231c <main>

08003b08 <LoopForever>:

LoopForever:
  b LoopForever
 8003b08:	e7fe      	b.n	8003b08 <LoopForever>
 8003b0a:	0000      	.short	0x0000
  ldr   r0, =_estack
 8003b0c:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 8003b10:	20000008 	.word	0x20000008
 8003b14:	20000214 	.word	0x20000214
 8003b18:	0800cb84 	.word	0x0800cb84
  INIT_BSS _sbss, _ebss
 8003b1c:	20000214 	.word	0x20000214
 8003b20:	200008ac 	.word	0x200008ac
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8003b24:	200300d8 	.word	0x200300d8
 8003b28:	20030b6f 	.word	0x20030b6f

08003b2c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003b2c:	e7fe      	b.n	8003b2c <ADC1_IRQHandler>

08003b2e <LL_AHB2_GRP1_EnableClock>:
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b085      	sub	sp, #20
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003b52:	68fb      	ldr	r3, [r7, #12]
}
 8003b54:	bf00      	nop
 8003b56:	3714      	adds	r7, #20
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b088      	sub	sp, #32
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	4603      	mov	r3, r0
 8003b68:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8003b6a:	f107 030c 	add.w	r3, r7, #12
 8003b6e:	2200      	movs	r2, #0
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	605a      	str	r2, [r3, #4]
 8003b74:	609a      	str	r2, [r3, #8]
 8003b76:	60da      	str	r2, [r3, #12]
 8003b78:	611a      	str	r2, [r3, #16]

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8003b7a:	2002      	movs	r0, #2
 8003b7c:	f7ff ffd7 	bl	8003b2e <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 8003b80:	79fb      	ldrb	r3, [r7, #7]
 8003b82:	4a12      	ldr	r2, [pc, #72]	; (8003bcc <BSP_LED_Init+0x6c>)
 8003b84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b88:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b92:	2302      	movs	r3, #2
 8003b94:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8003b96:	79fb      	ldrb	r3, [r7, #7]
 8003b98:	4a0d      	ldr	r2, [pc, #52]	; (8003bd0 <BSP_LED_Init+0x70>)
 8003b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b9e:	f107 020c 	add.w	r2, r7, #12
 8003ba2:	4611      	mov	r1, r2
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f000 fe5f 	bl	8004868 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8003baa:	79fb      	ldrb	r3, [r7, #7]
 8003bac:	4a08      	ldr	r2, [pc, #32]	; (8003bd0 <BSP_LED_Init+0x70>)
 8003bae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003bb2:	79fb      	ldrb	r3, [r7, #7]
 8003bb4:	4a05      	ldr	r2, [pc, #20]	; (8003bcc <BSP_LED_Init+0x6c>)
 8003bb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	f000 ffbb 	bl	8004b38 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3720      	adds	r7, #32
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	0800c704 	.word	0x0800c704
 8003bd0:	20000008 	.word	0x20000008

08003bd4 <BSP_LED_On>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	4603      	mov	r3, r0
 8003bdc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8003bde:	79fb      	ldrb	r3, [r7, #7]
 8003be0:	4a07      	ldr	r2, [pc, #28]	; (8003c00 <BSP_LED_On+0x2c>)
 8003be2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003be6:	79fb      	ldrb	r3, [r7, #7]
 8003be8:	4a06      	ldr	r2, [pc, #24]	; (8003c04 <BSP_LED_On+0x30>)
 8003bea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	f000 ffa1 	bl	8004b38 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	20000008 	.word	0x20000008
 8003c04:	0800c704 	.word	0x0800c704

08003c08 <BSP_LED_Off>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	4603      	mov	r3, r0
 8003c10:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8003c12:	79fb      	ldrb	r3, [r7, #7]
 8003c14:	4a07      	ldr	r2, [pc, #28]	; (8003c34 <BSP_LED_Off+0x2c>)
 8003c16:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003c1a:	79fb      	ldrb	r3, [r7, #7]
 8003c1c:	4a06      	ldr	r2, [pc, #24]	; (8003c38 <BSP_LED_Off+0x30>)
 8003c1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c22:	2200      	movs	r2, #0
 8003c24:	4619      	mov	r1, r3
 8003c26:	f000 ff87 	bl	8004b38 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3708      	adds	r7, #8
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	20000008 	.word	0x20000008
 8003c38:	0800c704 	.word	0x0800c704

08003c3c <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b088      	sub	sp, #32
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	4603      	mov	r3, r0
 8003c44:	460a      	mov	r2, r1
 8003c46:	71fb      	strb	r3, [r7, #7]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure = {0};
 8003c4c:	f107 030c 	add.w	r3, r7, #12
 8003c50:	2200      	movs	r2, #0
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	605a      	str	r2, [r3, #4]
 8003c56:	609a      	str	r2, [r3, #8]
 8003c58:	60da      	str	r2, [r3, #12]
 8003c5a:	611a      	str	r2, [r3, #16]
  static BSP_EXTI_LineCallback button_callback[BUTTONn] = {BUTTON_SW1_EXTI_Callback, BUTTON_SW2_EXTI_Callback, BUTTON_SW3_EXTI_Callback};
  static uint32_t button_interrupt_priority[BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY, BSP_BUTTON_USER_IT_PRIORITY, BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t button_exti_line[BUTTONn] = {BUTTON_SW1_EXTI_LINE, BUTTON_SW2_EXTI_LINE, BUTTON_SW3_EXTI_LINE};

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8003c5c:	79fb      	ldrb	r3, [r7, #7]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d103      	bne.n	8003c6a <BSP_PB_Init+0x2e>
 8003c62:	2001      	movs	r0, #1
 8003c64:	f7ff ff63 	bl	8003b2e <LL_AHB2_GRP1_EnableClock>
 8003c68:	e00c      	b.n	8003c84 <BSP_PB_Init+0x48>
 8003c6a:	79fb      	ldrb	r3, [r7, #7]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d103      	bne.n	8003c78 <BSP_PB_Init+0x3c>
 8003c70:	2010      	movs	r0, #16
 8003c72:	f7ff ff5c 	bl	8003b2e <LL_AHB2_GRP1_EnableClock>
 8003c76:	e005      	b.n	8003c84 <BSP_PB_Init+0x48>
 8003c78:	79fb      	ldrb	r3, [r7, #7]
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d102      	bne.n	8003c84 <BSP_PB_Init+0x48>
 8003c7e:	2001      	movs	r0, #1
 8003c80:	f7ff ff55 	bl	8003b2e <LL_AHB2_GRP1_EnableClock>

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8003c84:	79fb      	ldrb	r3, [r7, #7]
 8003c86:	4a29      	ldr	r2, [pc, #164]	; (8003d2c <BSP_PB_Init+0xf0>)
 8003c88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c8c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c92:	2302      	movs	r3, #2
 8003c94:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8003c96:	79bb      	ldrb	r3, [r7, #6]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10c      	bne.n	8003cb6 <BSP_PB_Init+0x7a>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8003ca0:	79fb      	ldrb	r3, [r7, #7]
 8003ca2:	4a23      	ldr	r2, [pc, #140]	; (8003d30 <BSP_PB_Init+0xf4>)
 8003ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ca8:	f107 020c 	add.w	r2, r7, #12
 8003cac:	4611      	mov	r1, r2
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 fdda 	bl	8004868 <HAL_GPIO_Init>
 8003cb4:	e035      	b.n	8003d22 <BSP_PB_Init+0xe6>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8003cb6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003cba:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8003cbc:	79fb      	ldrb	r3, [r7, #7]
 8003cbe:	4a1c      	ldr	r2, [pc, #112]	; (8003d30 <BSP_PB_Init+0xf4>)
 8003cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cc4:	f107 020c 	add.w	r2, r7, #12
 8003cc8:	4611      	mov	r1, r2
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 fdcc 	bl	8004868 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], button_exti_line[Button]);
 8003cd0:	79fb      	ldrb	r3, [r7, #7]
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	4a17      	ldr	r2, [pc, #92]	; (8003d34 <BSP_PB_Init+0xf8>)
 8003cd6:	441a      	add	r2, r3
 8003cd8:	79fb      	ldrb	r3, [r7, #7]
 8003cda:	4917      	ldr	r1, [pc, #92]	; (8003d38 <BSP_PB_Init+0xfc>)
 8003cdc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	4610      	mov	r0, r2
 8003ce4:	f000 fd8a 	bl	80047fc <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button], HAL_EXTI_COMMON_CB_ID, button_callback[Button]);
 8003ce8:	79fb      	ldrb	r3, [r7, #7]
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	4a11      	ldr	r2, [pc, #68]	; (8003d34 <BSP_PB_Init+0xf8>)
 8003cee:	1898      	adds	r0, r3, r2
 8003cf0:	79fb      	ldrb	r3, [r7, #7]
 8003cf2:	4a12      	ldr	r2, [pc, #72]	; (8003d3c <BSP_PB_Init+0x100>)
 8003cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	f000 fd64 	bl	80047c8 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
 8003d00:	79fb      	ldrb	r3, [r7, #7]
 8003d02:	4a0f      	ldr	r2, [pc, #60]	; (8003d40 <BSP_PB_Init+0x104>)
 8003d04:	56d0      	ldrsb	r0, [r2, r3]
 8003d06:	79fb      	ldrb	r3, [r7, #7]
 8003d08:	4a0e      	ldr	r2, [pc, #56]	; (8003d44 <BSP_PB_Init+0x108>)
 8003d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	4619      	mov	r1, r3
 8003d12:	f000 faae 	bl	8004272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8003d16:	79fb      	ldrb	r3, [r7, #7]
 8003d18:	4a09      	ldr	r2, [pc, #36]	; (8003d40 <BSP_PB_Init+0x104>)
 8003d1a:	56d3      	ldrsb	r3, [r2, r3]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 fac2 	bl	80042a6 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3720      	adds	r7, #32
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	0800c70c 	.word	0x0800c70c
 8003d30:	20000014 	.word	0x20000014
 8003d34:	20000680 	.word	0x20000680
 8003d38:	0800c718 	.word	0x0800c718
 8003d3c:	20000020 	.word	0x20000020
 8003d40:	0800c714 	.word	0x0800c714
 8003d44:	2000002c 	.word	0x2000002c

08003d48 <BSP_PB_Callback>:
  *           @arg BUTTON_SW2
  *           @arg BUTTON_SW3
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	4603      	mov	r3, r0
 8003d50:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <BUTTON_SW1_EXTI_Callback>:
/**
  * @brief  Button SW1 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW1_EXTI_Callback(void)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW1);
 8003d62:	2000      	movs	r0, #0
 8003d64:	f7ff fff0 	bl	8003d48 <BSP_PB_Callback>
}
 8003d68:	bf00      	nop
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <BUTTON_SW2_EXTI_Callback>:
/**
  * @brief  Button SW2 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW2_EXTI_Callback(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW2);
 8003d70:	2001      	movs	r0, #1
 8003d72:	f7ff ffe9 	bl	8003d48 <BSP_PB_Callback>
}
 8003d76:	bf00      	nop
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <BUTTON_SW3_EXTI_Callback>:
/**
  * @brief  Button SW3 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW3_EXTI_Callback(void)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW3);
 8003d7e:	2002      	movs	r0, #2
 8003d80:	f7ff ffe2 	bl	8003d48 <BSP_PB_Callback>
}
 8003d84:	bf00      	nop
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8003d8c:	4b24      	ldr	r3, [pc, #144]	; (8003e20 <SystemInit+0x98>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8003d92:	4b23      	ldr	r3, [pc, #140]	; (8003e20 <SystemInit+0x98>)
 8003d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d98:	4a21      	ldr	r2, [pc, #132]	; (8003e20 <SystemInit+0x98>)
 8003d9a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d9e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003da2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dac:	f043 0301 	orr.w	r3, r3, #1
 8003db0:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003db6:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003dba:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dc6:	4b17      	ldr	r3, [pc, #92]	; (8003e24 <SystemInit+0x9c>)
 8003dc8:	4013      	ands	r3, r2
 8003dca:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dd8:	f023 0305 	bic.w	r3, r3, #5
 8003ddc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003de4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003de8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dec:	f023 0301 	bic.w	r3, r3, #1
 8003df0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8003df4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003df8:	4a0b      	ldr	r2, [pc, #44]	; (8003e28 <SystemInit+0xa0>)
 8003dfa:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e10:	2200      	movs	r2, #0
 8003e12:	619a      	str	r2, [r3, #24]
}
 8003e14:	bf00      	nop
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	e000ed00 	.word	0xe000ed00
 8003e24:	faf6fefb 	.word	0xfaf6fefb
 8003e28:	22041000 	.word	0x22041000

08003e2c <LL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_DisableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGSleepMode(void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003e30:	4b05      	ldr	r3, [pc, #20]	; (8003e48 <LL_DBGMCU_DisableDBGSleepMode+0x1c>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	4a04      	ldr	r2, [pc, #16]	; (8003e48 <LL_DBGMCU_DisableDBGSleepMode+0x1c>)
 8003e36:	f023 0301 	bic.w	r3, r3, #1
 8003e3a:	6053      	str	r3, [r2, #4]
}
 8003e3c:	bf00      	nop
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	e0042000 	.word	0xe0042000

08003e4c <LL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_DisableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStopMode(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003e50:	4b05      	ldr	r3, [pc, #20]	; (8003e68 <LL_DBGMCU_DisableDBGStopMode+0x1c>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	4a04      	ldr	r2, [pc, #16]	; (8003e68 <LL_DBGMCU_DisableDBGStopMode+0x1c>)
 8003e56:	f023 0302 	bic.w	r3, r3, #2
 8003e5a:	6053      	str	r3, [r2, #4]
}
 8003e5c:	bf00      	nop
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	e0042000 	.word	0xe0042000

08003e6c <LL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disable the Debug Module during STANDBY mode
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_DisableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStandbyMode(void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003e70:	4b05      	ldr	r3, [pc, #20]	; (8003e88 <LL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	4a04      	ldr	r2, [pc, #16]	; (8003e88 <LL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 8003e76:	f023 0304 	bic.w	r3, r3, #4
 8003e7a:	6053      	str	r3, [r2, #4]
}
 8003e7c:	bf00      	nop
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	e0042000 	.word	0xe0042000

08003e8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003e92:	2300      	movs	r3, #0
 8003e94:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e96:	4b0c      	ldr	r3, [pc, #48]	; (8003ec8 <HAL_Init+0x3c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a0b      	ldr	r2, [pc, #44]	; (8003ec8 <HAL_Init+0x3c>)
 8003e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ea0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ea2:	2003      	movs	r0, #3
 8003ea4:	f000 f9da 	bl	800425c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ea8:	2000      	movs	r0, #0
 8003eaa:	f000 f80f 	bl	8003ecc <HAL_InitTick>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d002      	beq.n	8003eba <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	71fb      	strb	r3, [r7, #7]
 8003eb8:	e001      	b.n	8003ebe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003eba:	f7fe fdda 	bl	8002a72 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003ebe:	79fb      	ldrb	r3, [r7, #7]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	58004000 	.word	0x58004000

08003ecc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003ed8:	4b17      	ldr	r3, [pc, #92]	; (8003f38 <HAL_InitTick+0x6c>)
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d024      	beq.n	8003f2a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003ee0:	f001 ff4e 	bl	8005d80 <HAL_RCC_GetHCLKFreq>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	4b14      	ldr	r3, [pc, #80]	; (8003f38 <HAL_InitTick+0x6c>)
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	4619      	mov	r1, r3
 8003eec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ef0:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 f9f0 	bl	80042de <HAL_SYSTICK_Config>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10f      	bne.n	8003f24 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b0f      	cmp	r3, #15
 8003f08:	d809      	bhi.n	8003f1e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	6879      	ldr	r1, [r7, #4]
 8003f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f12:	f000 f9ae 	bl	8004272 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003f16:	4a09      	ldr	r2, [pc, #36]	; (8003f3c <HAL_InitTick+0x70>)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6013      	str	r3, [r2, #0]
 8003f1c:	e007      	b.n	8003f2e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	73fb      	strb	r3, [r7, #15]
 8003f22:	e004      	b.n	8003f2e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	73fb      	strb	r3, [r7, #15]
 8003f28:	e001      	b.n	8003f2e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	20000040 	.word	0x20000040
 8003f3c:	2000003c 	.word	0x2000003c

08003f40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003f44:	4b06      	ldr	r3, [pc, #24]	; (8003f60 <HAL_IncTick+0x20>)
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	461a      	mov	r2, r3
 8003f4a:	4b06      	ldr	r3, [pc, #24]	; (8003f64 <HAL_IncTick+0x24>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4413      	add	r3, r2
 8003f50:	4a04      	ldr	r2, [pc, #16]	; (8003f64 <HAL_IncTick+0x24>)
 8003f52:	6013      	str	r3, [r2, #0]
}
 8003f54:	bf00      	nop
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	20000040 	.word	0x20000040
 8003f64:	20000698 	.word	0x20000698

08003f68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8003f6c:	4b03      	ldr	r3, [pc, #12]	; (8003f7c <HAL_GetTick+0x14>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	20000698 	.word	0x20000698

08003f80 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003f84:	4b03      	ldr	r3, [pc, #12]	; (8003f94 <HAL_GetTickPrio+0x14>)
 8003f86:	681b      	ldr	r3, [r3, #0]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	2000003c 	.word	0x2000003c

08003f98 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003f9c:	4b05      	ldr	r3, [pc, #20]	; (8003fb4 <HAL_SuspendTick+0x1c>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a04      	ldr	r2, [pc, #16]	; (8003fb4 <HAL_SuspendTick+0x1c>)
 8003fa2:	f023 0302 	bic.w	r3, r3, #2
 8003fa6:	6013      	str	r3, [r2, #0]
}
 8003fa8:	bf00      	nop
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	e000e010 	.word	0xe000e010

08003fb8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003fbc:	4b05      	ldr	r3, [pc, #20]	; (8003fd4 <HAL_ResumeTick+0x1c>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a04      	ldr	r2, [pc, #16]	; (8003fd4 <HAL_ResumeTick+0x1c>)
 8003fc2:	f043 0302 	orr.w	r3, r3, #2
 8003fc6:	6013      	str	r3, [r2, #0]
}
 8003fc8:	bf00      	nop
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	e000e010 	.word	0xe000e010

08003fd8 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8003fdc:	f7ff ff26 	bl	8003e2c <LL_DBGMCU_DisableDBGSleepMode>
}
 8003fe0:	bf00      	nop
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8003fe8:	f7ff ff30 	bl	8003e4c <LL_DBGMCU_DisableDBGStopMode>
}
 8003fec:	bf00      	nop
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8003ff4:	f7ff ff3a 	bl	8003e6c <LL_DBGMCU_DisableDBGStandbyMode>
}
 8003ff8:	bf00      	nop
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f003 0307 	and.w	r3, r3, #7
 800400a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800400c:	4b0c      	ldr	r3, [pc, #48]	; (8004040 <__NVIC_SetPriorityGrouping+0x44>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004018:	4013      	ands	r3, r2
 800401a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004024:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800402c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800402e:	4a04      	ldr	r2, [pc, #16]	; (8004040 <__NVIC_SetPriorityGrouping+0x44>)
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	60d3      	str	r3, [r2, #12]
}
 8004034:	bf00      	nop
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	e000ed00 	.word	0xe000ed00

08004044 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004048:	4b04      	ldr	r3, [pc, #16]	; (800405c <__NVIC_GetPriorityGrouping+0x18>)
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	0a1b      	lsrs	r3, r3, #8
 800404e:	f003 0307 	and.w	r3, r3, #7
}
 8004052:	4618      	mov	r0, r3
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr
 800405c:	e000ed00 	.word	0xe000ed00

08004060 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	4603      	mov	r3, r0
 8004068:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800406a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406e:	2b00      	cmp	r3, #0
 8004070:	db0b      	blt.n	800408a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004072:	79fb      	ldrb	r3, [r7, #7]
 8004074:	f003 021f 	and.w	r2, r3, #31
 8004078:	4907      	ldr	r1, [pc, #28]	; (8004098 <__NVIC_EnableIRQ+0x38>)
 800407a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407e:	095b      	lsrs	r3, r3, #5
 8004080:	2001      	movs	r0, #1
 8004082:	fa00 f202 	lsl.w	r2, r0, r2
 8004086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800408a:	bf00      	nop
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	e000e100 	.word	0xe000e100

0800409c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	4603      	mov	r3, r0
 80040a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	db12      	blt.n	80040d4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040ae:	79fb      	ldrb	r3, [r7, #7]
 80040b0:	f003 021f 	and.w	r2, r3, #31
 80040b4:	490a      	ldr	r1, [pc, #40]	; (80040e0 <__NVIC_DisableIRQ+0x44>)
 80040b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ba:	095b      	lsrs	r3, r3, #5
 80040bc:	2001      	movs	r0, #1
 80040be:	fa00 f202 	lsl.w	r2, r0, r2
 80040c2:	3320      	adds	r3, #32
 80040c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80040c8:	f3bf 8f4f 	dsb	sy
}
 80040cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80040ce:	f3bf 8f6f 	isb	sy
}
 80040d2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	e000e100 	.word	0xe000e100

080040e4 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	4603      	mov	r3, r0
 80040ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	db0c      	blt.n	8004110 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040f6:	79fb      	ldrb	r3, [r7, #7]
 80040f8:	f003 021f 	and.w	r2, r3, #31
 80040fc:	4907      	ldr	r1, [pc, #28]	; (800411c <__NVIC_SetPendingIRQ+0x38>)
 80040fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004102:	095b      	lsrs	r3, r3, #5
 8004104:	2001      	movs	r0, #1
 8004106:	fa00 f202 	lsl.w	r2, r0, r2
 800410a:	3340      	adds	r3, #64	; 0x40
 800410c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	e000e100 	.word	0xe000e100

08004120 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	4603      	mov	r3, r0
 8004128:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800412a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800412e:	2b00      	cmp	r3, #0
 8004130:	db0c      	blt.n	800414c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004132:	79fb      	ldrb	r3, [r7, #7]
 8004134:	f003 021f 	and.w	r2, r3, #31
 8004138:	4907      	ldr	r1, [pc, #28]	; (8004158 <__NVIC_ClearPendingIRQ+0x38>)
 800413a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800413e:	095b      	lsrs	r3, r3, #5
 8004140:	2001      	movs	r0, #1
 8004142:	fa00 f202 	lsl.w	r2, r0, r2
 8004146:	3360      	adds	r3, #96	; 0x60
 8004148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr
 8004158:	e000e100 	.word	0xe000e100

0800415c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	4603      	mov	r3, r0
 8004164:	6039      	str	r1, [r7, #0]
 8004166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800416c:	2b00      	cmp	r3, #0
 800416e:	db0a      	blt.n	8004186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	b2da      	uxtb	r2, r3
 8004174:	490c      	ldr	r1, [pc, #48]	; (80041a8 <__NVIC_SetPriority+0x4c>)
 8004176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800417a:	0112      	lsls	r2, r2, #4
 800417c:	b2d2      	uxtb	r2, r2
 800417e:	440b      	add	r3, r1
 8004180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004184:	e00a      	b.n	800419c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	b2da      	uxtb	r2, r3
 800418a:	4908      	ldr	r1, [pc, #32]	; (80041ac <__NVIC_SetPriority+0x50>)
 800418c:	79fb      	ldrb	r3, [r7, #7]
 800418e:	f003 030f 	and.w	r3, r3, #15
 8004192:	3b04      	subs	r3, #4
 8004194:	0112      	lsls	r2, r2, #4
 8004196:	b2d2      	uxtb	r2, r2
 8004198:	440b      	add	r3, r1
 800419a:	761a      	strb	r2, [r3, #24]
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	e000e100 	.word	0xe000e100
 80041ac:	e000ed00 	.word	0xe000ed00

080041b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b089      	sub	sp, #36	; 0x24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f003 0307 	and.w	r3, r3, #7
 80041c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	f1c3 0307 	rsb	r3, r3, #7
 80041ca:	2b04      	cmp	r3, #4
 80041cc:	bf28      	it	cs
 80041ce:	2304      	movcs	r3, #4
 80041d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	3304      	adds	r3, #4
 80041d6:	2b06      	cmp	r3, #6
 80041d8:	d902      	bls.n	80041e0 <NVIC_EncodePriority+0x30>
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	3b03      	subs	r3, #3
 80041de:	e000      	b.n	80041e2 <NVIC_EncodePriority+0x32>
 80041e0:	2300      	movs	r3, #0
 80041e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041e4:	f04f 32ff 	mov.w	r2, #4294967295
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	fa02 f303 	lsl.w	r3, r2, r3
 80041ee:	43da      	mvns	r2, r3
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	401a      	ands	r2, r3
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041f8:	f04f 31ff 	mov.w	r1, #4294967295
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004202:	43d9      	mvns	r1, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004208:	4313      	orrs	r3, r2
         );
}
 800420a:	4618      	mov	r0, r3
 800420c:	3724      	adds	r7, #36	; 0x24
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
	...

08004218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	3b01      	subs	r3, #1
 8004224:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004228:	d301      	bcc.n	800422e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800422a:	2301      	movs	r3, #1
 800422c:	e00f      	b.n	800424e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800422e:	4a0a      	ldr	r2, [pc, #40]	; (8004258 <SysTick_Config+0x40>)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	3b01      	subs	r3, #1
 8004234:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004236:	210f      	movs	r1, #15
 8004238:	f04f 30ff 	mov.w	r0, #4294967295
 800423c:	f7ff ff8e 	bl	800415c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004240:	4b05      	ldr	r3, [pc, #20]	; (8004258 <SysTick_Config+0x40>)
 8004242:	2200      	movs	r2, #0
 8004244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004246:	4b04      	ldr	r3, [pc, #16]	; (8004258 <SysTick_Config+0x40>)
 8004248:	2207      	movs	r2, #7
 800424a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3708      	adds	r7, #8
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	e000e010 	.word	0xe000e010

0800425c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f7ff fec9 	bl	8003ffc <__NVIC_SetPriorityGrouping>
}
 800426a:	bf00      	nop
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b086      	sub	sp, #24
 8004276:	af00      	add	r7, sp, #0
 8004278:	4603      	mov	r3, r0
 800427a:	60b9      	str	r1, [r7, #8]
 800427c:	607a      	str	r2, [r7, #4]
 800427e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004280:	f7ff fee0 	bl	8004044 <__NVIC_GetPriorityGrouping>
 8004284:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	68b9      	ldr	r1, [r7, #8]
 800428a:	6978      	ldr	r0, [r7, #20]
 800428c:	f7ff ff90 	bl	80041b0 <NVIC_EncodePriority>
 8004290:	4602      	mov	r2, r0
 8004292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004296:	4611      	mov	r1, r2
 8004298:	4618      	mov	r0, r3
 800429a:	f7ff ff5f 	bl	800415c <__NVIC_SetPriority>
}
 800429e:	bf00      	nop
 80042a0:	3718      	adds	r7, #24
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b082      	sub	sp, #8
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	4603      	mov	r3, r0
 80042ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7ff fed3 	bl	8004060 <__NVIC_EnableIRQ>
}
 80042ba:	bf00      	nop
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b082      	sub	sp, #8
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	4603      	mov	r3, r0
 80042ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80042cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7ff fee3 	bl	800409c <__NVIC_DisableIRQ>
}
 80042d6:	bf00      	nop
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b082      	sub	sp, #8
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7ff ff96 	bl	8004218 <SysTick_Config>
 80042ec:	4603      	mov	r3, r0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b082      	sub	sp, #8
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	4603      	mov	r3, r0
 80042fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8004300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004304:	4618      	mov	r0, r3
 8004306:	f7ff feed 	bl	80040e4 <__NVIC_SetPendingIRQ>
}
 800430a:	bf00      	nop
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004312:	b580      	push	{r7, lr}
 8004314:	b082      	sub	sp, #8
 8004316:	af00      	add	r7, sp, #0
 8004318:	4603      	mov	r3, r0
 800431a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800431c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004320:	4618      	mov	r0, r3
 8004322:	f7ff fefd 	bl	8004120 <__NVIC_ClearPendingIRQ>
}
 8004326:	bf00      	nop
 8004328:	3708      	adds	r7, #8
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
	...

08004330 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e078      	b.n	8004434 <HAL_DMA_Init+0x104>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	461a      	mov	r2, r3
 8004348:	4b3c      	ldr	r3, [pc, #240]	; (800443c <HAL_DMA_Init+0x10c>)
 800434a:	4413      	add	r3, r2
 800434c:	4a3c      	ldr	r2, [pc, #240]	; (8004440 <HAL_DMA_Init+0x110>)
 800434e:	fba2 2303 	umull	r2, r3, r2, r3
 8004352:	091b      	lsrs	r3, r3, #4
 8004354:	009a      	lsls	r2, r3, #2
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a39      	ldr	r2, [pc, #228]	; (8004444 <HAL_DMA_Init+0x114>)
 800435e:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2202      	movs	r2, #2
 8004364:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800437a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004384:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004390:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800439c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f9b6 	bl	8004724 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043c0:	d102      	bne.n	80043c8 <HAL_DMA_Init+0x98>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043d0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80043d4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80043de:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d010      	beq.n	800440a <HAL_DMA_Init+0xda>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	2b04      	cmp	r3, #4
 80043ee:	d80c      	bhi.n	800440a <HAL_DMA_Init+0xda>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 f9c3 	bl	800477c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043fa:	2200      	movs	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004406:	605a      	str	r2, [r3, #4]
 8004408:	e008      	b.n	800441c <HAL_DMA_Init+0xec>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	bffdfff8 	.word	0xbffdfff8
 8004440:	cccccccd 	.word	0xcccccccd
 8004444:	40020000 	.word	0x40020000

08004448 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e04f      	b.n	80044fa <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d008      	beq.n	8004478 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2204      	movs	r2, #4
 800446a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e040      	b.n	80044fa <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 020e 	bic.w	r2, r2, #14
 8004486:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004492:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004496:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 0201 	bic.w	r2, r2, #1
 80044a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ac:	f003 021c 	and.w	r2, r3, #28
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b4:	2101      	movs	r1, #1
 80044b6:	fa01 f202 	lsl.w	r2, r1, r2
 80044ba:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80044c4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00c      	beq.n	80044e8 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044dc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80044e6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b084      	sub	sp, #16
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800450e:	2300      	movs	r3, #0
 8004510:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b02      	cmp	r3, #2
 800451c:	d005      	beq.n	800452a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2204      	movs	r2, #4
 8004522:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	73fb      	strb	r3, [r7, #15]
 8004528:	e047      	b.n	80045ba <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 020e 	bic.w	r2, r2, #14
 8004538:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 0201 	bic.w	r2, r2, #1
 8004548:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004554:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004558:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800455e:	f003 021c 	and.w	r2, r3, #28
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004566:	2101      	movs	r1, #1
 8004568:	fa01 f202 	lsl.w	r2, r1, r2
 800456c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004576:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00c      	beq.n	800459a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800458e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004598:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	4798      	blx	r3
    }
  }
  return status;
 80045ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e0:	f003 031c 	and.w	r3, r3, #28
 80045e4:	2204      	movs	r2, #4
 80045e6:	409a      	lsls	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	4013      	ands	r3, r2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d026      	beq.n	800463e <HAL_DMA_IRQHandler+0x7a>
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	f003 0304 	and.w	r3, r3, #4
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d021      	beq.n	800463e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0320 	and.w	r3, r3, #32
 8004604:	2b00      	cmp	r3, #0
 8004606:	d107      	bne.n	8004618 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0204 	bic.w	r2, r2, #4
 8004616:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800461c:	f003 021c 	and.w	r2, r3, #28
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004624:	2104      	movs	r1, #4
 8004626:	fa01 f202 	lsl.w	r2, r1, r2
 800462a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004630:	2b00      	cmp	r3, #0
 8004632:	d071      	beq.n	8004718 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800463c:	e06c      	b.n	8004718 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004642:	f003 031c 	and.w	r3, r3, #28
 8004646:	2202      	movs	r2, #2
 8004648:	409a      	lsls	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4013      	ands	r3, r2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d02e      	beq.n	80046b0 <HAL_DMA_IRQHandler+0xec>
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d029      	beq.n	80046b0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0320 	and.w	r3, r3, #32
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10b      	bne.n	8004682 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 020a 	bic.w	r2, r2, #10
 8004678:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004686:	f003 021c 	and.w	r2, r3, #28
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	2102      	movs	r1, #2
 8004690:	fa01 f202 	lsl.w	r2, r1, r2
 8004694:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d038      	beq.n	8004718 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80046ae:	e033      	b.n	8004718 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b4:	f003 031c 	and.w	r3, r3, #28
 80046b8:	2208      	movs	r2, #8
 80046ba:	409a      	lsls	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	4013      	ands	r3, r2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d02a      	beq.n	800471a <HAL_DMA_IRQHandler+0x156>
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	f003 0308 	and.w	r3, r3, #8
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d025      	beq.n	800471a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 020e 	bic.w	r2, r2, #14
 80046dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e2:	f003 021c 	and.w	r2, r3, #28
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	2101      	movs	r1, #1
 80046ec:	fa01 f202 	lsl.w	r2, r1, r2
 80046f0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800470c:	2b00      	cmp	r3, #0
 800470e:	d004      	beq.n	800471a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004718:	bf00      	nop
 800471a:	bf00      	nop
}
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
	...

08004724 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004730:	089b      	lsrs	r3, r3, #2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004738:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	6493      	str	r3, [r2, #72]	; 0x48
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	b2db      	uxtb	r3, r3
 8004746:	3b08      	subs	r3, #8
 8004748:	4a0a      	ldr	r2, [pc, #40]	; (8004774 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800474a:	fba2 2303 	umull	r2, r3, r2, r3
 800474e:	091b      	lsrs	r3, r3, #4
 8004750:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a08      	ldr	r2, [pc, #32]	; (8004778 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8004756:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f003 031f 	and.w	r3, r3, #31
 800475e:	2201      	movs	r2, #1
 8004760:	409a      	lsls	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004766:	bf00      	nop
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	cccccccd 	.word	0xcccccccd
 8004778:	40020880 	.word	0x40020880

0800477c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800478c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	4b0b      	ldr	r3, [pc, #44]	; (80047c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004792:	4413      	add	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	461a      	mov	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a09      	ldr	r2, [pc, #36]	; (80047c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80047a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	3b01      	subs	r3, #1
 80047a6:	f003 0303 	and.w	r3, r3, #3
 80047aa:	2201      	movs	r2, #1
 80047ac:	409a      	lsls	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80047b2:	bf00      	nop
 80047b4:	3714      	adds	r7, #20
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	1000823f 	.word	0x1000823f
 80047c4:	40020940 	.word	0x40020940

080047c8 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 80047c8:	b480      	push	{r7}
 80047ca:	b087      	sub	sp, #28
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	460b      	mov	r3, r1
 80047d2:	607a      	str	r2, [r7, #4]
 80047d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80047d6:	2300      	movs	r3, #0
 80047d8:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80047da:	7afb      	ldrb	r3, [r7, #11]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d103      	bne.n	80047e8 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	605a      	str	r2, [r3, #4]
      break;
 80047e6:	e002      	b.n	80047ee <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	75fb      	strb	r3, [r7, #23]
      break;
 80047ec:	bf00      	nop
  }

  return status;
 80047ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	371c      	adds	r7, #28
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e003      	b.n	8004818 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	683a      	ldr	r2, [r7, #0]
 8004814:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004816:	2300      	movs	r3, #0
  }
}
 8004818:	4618      	mov	r0, r3
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 8004824:	b480      	push	{r7}
 8004826:	b087      	sub	sp, #28
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	0c1b      	lsrs	r3, r3, #16
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 031f 	and.w	r3, r3, #31
 8004840:	2201      	movs	r2, #1
 8004842:	fa02 f303 	lsl.w	r3, r2, r3
 8004846:	613b      	str	r3, [r7, #16]

  regaddr = (&EXTI->SWIER1 + (EXTI_CONFIG_OFFSET * offset));
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	015b      	lsls	r3, r3, #5
 800484c:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8004850:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8004854:	60fb      	str	r3, [r7, #12]
  *regaddr = maskline;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	601a      	str	r2, [r3, #0]
}
 800485c:	bf00      	nop
 800485e:	371c      	adds	r7, #28
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004868:	b480      	push	{r7}
 800486a:	b087      	sub	sp, #28
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004872:	2300      	movs	r3, #0
 8004874:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004876:	e146      	b.n	8004b06 <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	2101      	movs	r1, #1
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	fa01 f303 	lsl.w	r3, r1, r3
 8004884:	4013      	ands	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2b00      	cmp	r3, #0
 800488c:	f000 8138 	beq.w	8004b00 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f003 0303 	and.w	r3, r3, #3
 8004898:	2b01      	cmp	r3, #1
 800489a:	d005      	beq.n	80048a8 <HAL_GPIO_Init+0x40>
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f003 0303 	and.w	r3, r3, #3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d130      	bne.n	800490a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	2203      	movs	r2, #3
 80048b4:	fa02 f303 	lsl.w	r3, r2, r3
 80048b8:	43db      	mvns	r3, r3
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	4013      	ands	r3, r2
 80048be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	68da      	ldr	r2, [r3, #12]
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	005b      	lsls	r3, r3, #1
 80048c8:	fa02 f303 	lsl.w	r3, r2, r3
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80048de:	2201      	movs	r2, #1
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	fa02 f303 	lsl.w	r3, r2, r3
 80048e6:	43db      	mvns	r3, r3
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	4013      	ands	r3, r2
 80048ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	091b      	lsrs	r3, r3, #4
 80048f4:	f003 0201 	and.w	r2, r3, #1
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	fa02 f303 	lsl.w	r3, r2, r3
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	4313      	orrs	r3, r2
 8004902:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f003 0303 	and.w	r3, r3, #3
 8004912:	2b03      	cmp	r3, #3
 8004914:	d017      	beq.n	8004946 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	2203      	movs	r2, #3
 8004922:	fa02 f303 	lsl.w	r3, r2, r3
 8004926:	43db      	mvns	r3, r3
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	4013      	ands	r3, r2
 800492c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	689a      	ldr	r2, [r3, #8]
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	fa02 f303 	lsl.w	r3, r2, r3
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	4313      	orrs	r3, r2
 800493e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f003 0303 	and.w	r3, r3, #3
 800494e:	2b02      	cmp	r3, #2
 8004950:	d123      	bne.n	800499a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	08da      	lsrs	r2, r3, #3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	3208      	adds	r2, #8
 800495a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800495e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	f003 0307 	and.w	r3, r3, #7
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	220f      	movs	r2, #15
 800496a:	fa02 f303 	lsl.w	r3, r2, r3
 800496e:	43db      	mvns	r3, r3
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	4013      	ands	r3, r2
 8004974:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	691a      	ldr	r2, [r3, #16]
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f003 0307 	and.w	r3, r3, #7
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	fa02 f303 	lsl.w	r3, r2, r3
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	4313      	orrs	r3, r2
 800498a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	08da      	lsrs	r2, r3, #3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	3208      	adds	r2, #8
 8004994:	6939      	ldr	r1, [r7, #16]
 8004996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	005b      	lsls	r3, r3, #1
 80049a4:	2203      	movs	r2, #3
 80049a6:	fa02 f303 	lsl.w	r3, r2, r3
 80049aa:	43db      	mvns	r3, r3
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	4013      	ands	r3, r2
 80049b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f003 0203 	and.w	r2, r3, #3
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	005b      	lsls	r3, r3, #1
 80049be:	fa02 f303 	lsl.w	r3, r2, r3
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f000 8092 	beq.w	8004b00 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80049dc:	4a51      	ldr	r2, [pc, #324]	; (8004b24 <HAL_GPIO_Init+0x2bc>)
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	089b      	lsrs	r3, r3, #2
 80049e2:	3302      	adds	r3, #2
 80049e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f003 0303 	and.w	r3, r3, #3
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	220f      	movs	r2, #15
 80049f4:	fa02 f303 	lsl.w	r3, r2, r3
 80049f8:	43db      	mvns	r3, r3
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	4013      	ands	r3, r2
 80049fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004a06:	d013      	beq.n	8004a30 <HAL_GPIO_Init+0x1c8>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a47      	ldr	r2, [pc, #284]	; (8004b28 <HAL_GPIO_Init+0x2c0>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d00d      	beq.n	8004a2c <HAL_GPIO_Init+0x1c4>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a46      	ldr	r2, [pc, #280]	; (8004b2c <HAL_GPIO_Init+0x2c4>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d007      	beq.n	8004a28 <HAL_GPIO_Init+0x1c0>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a45      	ldr	r2, [pc, #276]	; (8004b30 <HAL_GPIO_Init+0x2c8>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d101      	bne.n	8004a24 <HAL_GPIO_Init+0x1bc>
 8004a20:	2304      	movs	r3, #4
 8004a22:	e006      	b.n	8004a32 <HAL_GPIO_Init+0x1ca>
 8004a24:	2307      	movs	r3, #7
 8004a26:	e004      	b.n	8004a32 <HAL_GPIO_Init+0x1ca>
 8004a28:	2302      	movs	r3, #2
 8004a2a:	e002      	b.n	8004a32 <HAL_GPIO_Init+0x1ca>
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e000      	b.n	8004a32 <HAL_GPIO_Init+0x1ca>
 8004a30:	2300      	movs	r3, #0
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	f002 0203 	and.w	r2, r2, #3
 8004a38:	0092      	lsls	r2, r2, #2
 8004a3a:	4093      	lsls	r3, r2
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004a42:	4938      	ldr	r1, [pc, #224]	; (8004b24 <HAL_GPIO_Init+0x2bc>)
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	089b      	lsrs	r3, r3, #2
 8004a48:	3302      	adds	r3, #2
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a50:	4b38      	ldr	r3, [pc, #224]	; (8004b34 <HAL_GPIO_Init+0x2cc>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	43db      	mvns	r3, r3
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d003      	beq.n	8004a74 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a74:	4a2f      	ldr	r2, [pc, #188]	; (8004b34 <HAL_GPIO_Init+0x2cc>)
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004a7a:	4b2e      	ldr	r3, [pc, #184]	; (8004b34 <HAL_GPIO_Init+0x2cc>)
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	43db      	mvns	r3, r3
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	4013      	ands	r3, r2
 8004a88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d003      	beq.n	8004a9e <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a9e:	4a25      	ldr	r2, [pc, #148]	; (8004b34 <HAL_GPIO_Init+0x2cc>)
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004aa4:	4b23      	ldr	r3, [pc, #140]	; (8004b34 <HAL_GPIO_Init+0x2cc>)
 8004aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	43db      	mvns	r3, r3
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004aca:	4a1a      	ldr	r2, [pc, #104]	; (8004b34 <HAL_GPIO_Init+0x2cc>)
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004ad2:	4b18      	ldr	r3, [pc, #96]	; (8004b34 <HAL_GPIO_Init+0x2cc>)
 8004ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	43db      	mvns	r3, r3
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d003      	beq.n	8004af8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004af8:	4a0e      	ldr	r2, [pc, #56]	; (8004b34 <HAL_GPIO_Init+0x2cc>)
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	3301      	adds	r3, #1
 8004b04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f47f aeb1 	bne.w	8004878 <HAL_GPIO_Init+0x10>
  }
}
 8004b16:	bf00      	nop
 8004b18:	bf00      	nop
 8004b1a:	371c      	adds	r7, #28
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr
 8004b24:	40010000 	.word	0x40010000
 8004b28:	48000400 	.word	0x48000400
 8004b2c:	48000800 	.word	0x48000800
 8004b30:	48001000 	.word	0x48001000
 8004b34:	58000800 	.word	0x58000800

08004b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	460b      	mov	r3, r1
 8004b42:	807b      	strh	r3, [r7, #2]
 8004b44:	4613      	mov	r3, r2
 8004b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b48:	787b      	ldrb	r3, [r7, #1]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d003      	beq.n	8004b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b4e:	887a      	ldrh	r2, [r7, #2]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b54:	e002      	b.n	8004b5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b56:	887a      	ldrh	r2, [r7, #2]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	4603      	mov	r3, r0
 8004b70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004b72:	4b08      	ldr	r3, [pc, #32]	; (8004b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b74:	68da      	ldr	r2, [r3, #12]
 8004b76:	88fb      	ldrh	r3, [r7, #6]
 8004b78:	4013      	ands	r3, r2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d006      	beq.n	8004b8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b7e:	4a05      	ldr	r2, [pc, #20]	; (8004b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b80:	88fb      	ldrh	r3, [r7, #6]
 8004b82:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b84:	88fb      	ldrh	r3, [r7, #6]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7fc fc69 	bl	800145e <HAL_GPIO_EXTI_Callback>
  }
}
 8004b8c:	bf00      	nop
 8004b8e:	3708      	adds	r7, #8
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	58000800 	.word	0x58000800

08004b98 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004b9e:	4b0a      	ldr	r3, [pc, #40]	; (8004bc8 <HAL_HSEM_IRQHandler+0x30>)
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004ba4:	4b08      	ldr	r3, [pc, #32]	; (8004bc8 <HAL_HSEM_IRQHandler+0x30>)
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	43db      	mvns	r3, r3
 8004bac:	4906      	ldr	r1, [pc, #24]	; (8004bc8 <HAL_HSEM_IRQHandler+0x30>)
 8004bae:	4013      	ands	r3, r2
 8004bb0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004bb2:	4a05      	ldr	r2, [pc, #20]	; (8004bc8 <HAL_HSEM_IRQHandler+0x30>)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 f807 	bl	8004bcc <HAL_HSEM_FreeCallback>
}
 8004bbe:	bf00      	nop
 8004bc0:	3708      	adds	r7, #8
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	58001500 	.word	0x58001500

08004bcc <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004be8:	2300      	movs	r3, #0
 8004bea:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d01e      	beq.n	8004c30 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8004bf2:	4b13      	ldr	r3, [pc, #76]	; (8004c40 <HAL_IPCC_Init+0x60>)
 8004bf4:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d102      	bne.n	8004c08 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7fd ff46 	bl	8002a94 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8004c08:	68b8      	ldr	r0, [r7, #8]
 8004c0a:	f000 f85b 	bl	8004cc4 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 f82c 	bl	8004c78 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004c2e:	e001      	b.n	8004c34 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	58000c00 	.word	0x58000c00

08004c44 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8004c52:	bf00      	nop
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004c5e:	b480      	push	{r7}
 8004c60:	b085      	sub	sp, #20
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	60f8      	str	r0, [r7, #12]
 8004c66:	60b9      	str	r1, [r7, #8]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8004c6c:	bf00      	nop
 8004c6e:	3714      	adds	r7, #20
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004c80:	2300      	movs	r3, #0
 8004c82:	60fb      	str	r3, [r7, #12]
 8004c84:	e00f      	b.n	8004ca6 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4413      	add	r3, r2
 8004c8e:	4a0b      	ldr	r2, [pc, #44]	; (8004cbc <IPCC_SetDefaultCallbacks+0x44>)
 8004c90:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	3306      	adds	r3, #6
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4413      	add	r3, r2
 8004c9c:	4a08      	ldr	r2, [pc, #32]	; (8004cc0 <IPCC_SetDefaultCallbacks+0x48>)
 8004c9e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	60fb      	str	r3, [r7, #12]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2b05      	cmp	r3, #5
 8004caa:	d9ec      	bls.n	8004c86 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8004cac:	bf00      	nop
 8004cae:	bf00      	nop
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	08004c45 	.word	0x08004c45
 8004cc0:	08004c5f 	.word	0x08004c5f

08004cc4 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8004cd8:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	223f      	movs	r2, #63	; 0x3f
 8004cde:	609a      	str	r2, [r3, #8]
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004cec:	b480      	push	{r7}
 8004cee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cf0:	4b05      	ldr	r3, [pc, #20]	; (8004d08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a04      	ldr	r2, [pc, #16]	; (8004d08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cfa:	6013      	str	r3, [r2, #0]
}
 8004cfc:	bf00      	nop
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	58000400 	.word	0x58000400

08004d0c <LL_PWR_EnableSRAM2Retention>:
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 8004d10:	4b05      	ldr	r3, [pc, #20]	; (8004d28 <LL_PWR_EnableSRAM2Retention+0x1c>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	4a04      	ldr	r2, [pc, #16]	; (8004d28 <LL_PWR_EnableSRAM2Retention+0x1c>)
 8004d16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d1a:	6093      	str	r3, [r2, #8]
}
 8004d1c:	bf00      	nop
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	58000400 	.word	0x58000400

08004d2c <HAL_PWREx_EnableSRAMRetention>:
  * @note   On devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx retention is extended
  *         to SRAM1, SRAM2a and SRAM2b.
  * @retval None
  */
void HAL_PWREx_EnableSRAMRetention(void)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	af00      	add	r7, sp, #0
  LL_PWR_EnableSRAM2Retention();
 8004d30:	f7ff ffec 	bl	8004d0c <LL_PWR_EnableSRAM2Retention>
}
 8004d34:	bf00      	nop
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004d38:	b480      	push	{r7}
 8004d3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d4a:	d101      	bne.n	8004d50 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e000      	b.n	8004d52 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <LL_RCC_HSE_Enable>:
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d6e:	6013      	str	r3, [r2, #0]
}
 8004d70:	bf00      	nop
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <LL_RCC_HSE_Disable>:
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d8c:	6013      	str	r3, [r2, #0]
}
 8004d8e:	bf00      	nop
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <LL_RCC_HSE_IsReady>:
{
 8004d98:	b480      	push	{r7}
 8004d9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004daa:	d101      	bne.n	8004db0 <LL_RCC_HSE_IsReady+0x18>
 8004dac:	2301      	movs	r3, #1
 8004dae:	e000      	b.n	8004db2 <LL_RCC_HSE_IsReady+0x1a>
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <LL_RCC_HSI_Enable>:
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dce:	6013      	str	r3, [r2, #0]
}
 8004dd0:	bf00      	nop
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr

08004dda <LL_RCC_HSI_Disable>:
{
 8004dda:	b480      	push	{r7}
 8004ddc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004de8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dec:	6013      	str	r3, [r2, #0]
}
 8004dee:	bf00      	nop
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <LL_RCC_HSI_IsReady>:
{
 8004df8:	b480      	push	{r7}
 8004dfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e0a:	d101      	bne.n	8004e10 <LL_RCC_HSI_IsReady+0x18>
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e000      	b.n	8004e12 <LL_RCC_HSI_IsReady+0x1a>
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <LL_RCC_HSI_SetCalibTrimming>:
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	061b      	lsls	r3, r3, #24
 8004e32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e36:	4313      	orrs	r3, r2
 8004e38:	604b      	str	r3, [r1, #4]
}
 8004e3a:	bf00      	nop
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <LL_RCC_LSE_Enable>:
{
 8004e46:	b480      	push	{r7}
 8004e48:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e56:	f043 0301 	orr.w	r3, r3, #1
 8004e5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004e5e:	bf00      	nop
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <LL_RCC_LSE_Disable>:
{
 8004e68:	b480      	push	{r7}
 8004e6a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e78:	f023 0301 	bic.w	r3, r3, #1
 8004e7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004e80:	bf00      	nop
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <LL_RCC_LSE_EnableBypass>:
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e9a:	f043 0304 	orr.w	r3, r3, #4
 8004e9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004ea2:	bf00      	nop
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <LL_RCC_LSE_DisableBypass>:
{
 8004eac:	b480      	push	{r7}
 8004eae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ebc:	f023 0304 	bic.w	r3, r3, #4
 8004ec0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004ec4:	bf00      	nop
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr

08004ece <LL_RCC_LSE_IsReady>:
{
 8004ece:	b480      	push	{r7}
 8004ed0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004ed2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d101      	bne.n	8004ee6 <LL_RCC_LSE_IsReady+0x18>
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e000      	b.n	8004ee8 <LL_RCC_LSE_IsReady+0x1a>
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr

08004ef2 <LL_RCC_LSI1_Enable>:
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004ef6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004efe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f02:	f043 0301 	orr.w	r3, r3, #1
 8004f06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004f0a:	bf00      	nop
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <LL_RCC_LSI1_Disable>:
{
 8004f14:	b480      	push	{r7}
 8004f16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f24:	f023 0301 	bic.w	r3, r3, #1
 8004f28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004f2c:	bf00      	nop
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <LL_RCC_LSI1_IsReady>:
{
 8004f36:	b480      	push	{r7}
 8004f38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004f3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d101      	bne.n	8004f4e <LL_RCC_LSI1_IsReady+0x18>
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e000      	b.n	8004f50 <LL_RCC_LSI1_IsReady+0x1a>
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <LL_RCC_LSI2_Enable>:
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f6a:	f043 0304 	orr.w	r3, r3, #4
 8004f6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004f72:	bf00      	nop
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <LL_RCC_LSI2_Disable>:
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f8c:	f023 0304 	bic.w	r3, r3, #4
 8004f90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004f94:	bf00      	nop
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <LL_RCC_LSI2_IsReady>:
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004faa:	f003 0308 	and.w	r3, r3, #8
 8004fae:	2b08      	cmp	r3, #8
 8004fb0:	d101      	bne.n	8004fb6 <LL_RCC_LSI2_IsReady+0x18>
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e000      	b.n	8004fb8 <LL_RCC_LSI2_IsReady+0x1a>
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <LL_RCC_LSI2_SetTrimming>:
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b083      	sub	sp, #12
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fd2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	021b      	lsls	r3, r3, #8
 8004fda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <LL_RCC_MSI_Enable>:
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ffe:	f043 0301 	orr.w	r3, r3, #1
 8005002:	6013      	str	r3, [r2, #0]
}
 8005004:	bf00      	nop
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <LL_RCC_MSI_Disable>:
{
 800500e:	b480      	push	{r7}
 8005010:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800501c:	f023 0301 	bic.w	r3, r3, #1
 8005020:	6013      	str	r3, [r2, #0]
}
 8005022:	bf00      	nop
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <LL_RCC_MSI_IsReady>:
{
 800502c:	b480      	push	{r7}
 800502e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b02      	cmp	r3, #2
 800503c:	d101      	bne.n	8005042 <LL_RCC_MSI_IsReady+0x16>
 800503e:	2301      	movs	r3, #1
 8005040:	e000      	b.n	8005044 <LL_RCC_MSI_IsReady+0x18>
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr

0800504e <LL_RCC_MSI_SetRange>:
{
 800504e:	b480      	push	{r7}
 8005050:	b083      	sub	sp, #12
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005056:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005060:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4313      	orrs	r3, r2
 8005068:	600b      	str	r3, [r1, #0]
}
 800506a:	bf00      	nop
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr

08005076 <LL_RCC_MSI_GetRange>:
{
 8005076:	b480      	push	{r7}
 8005078:	b083      	sub	sp, #12
 800507a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800507c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005086:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2bb0      	cmp	r3, #176	; 0xb0
 800508c:	d901      	bls.n	8005092 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800508e:	23b0      	movs	r3, #176	; 0xb0
 8005090:	607b      	str	r3, [r7, #4]
  return msiRange;
 8005092:	687b      	ldr	r3, [r7, #4]
}
 8005094:	4618      	mov	r0, r3
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <LL_RCC_MSI_SetCalibTrimming>:
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80050a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	021b      	lsls	r3, r3, #8
 80050b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050ba:	4313      	orrs	r3, r2
 80050bc:	604b      	str	r3, [r1, #4]
}
 80050be:	bf00      	nop
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr

080050ca <LL_RCC_SetSysClkSource>:
{
 80050ca:	b480      	push	{r7}
 80050cc:	b083      	sub	sp, #12
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80050d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	f023 0203 	bic.w	r2, r3, #3
 80050dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	608b      	str	r3, [r1, #8]
}
 80050e6:	bf00      	nop
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <LL_RCC_GetSysClkSource>:
{
 80050f2:	b480      	push	{r7}
 80050f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80050f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f003 030c 	and.w	r3, r3, #12
}
 8005100:	4618      	mov	r0, r3
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <LL_RCC_SetAHBPrescaler>:
{
 800510a:	b480      	push	{r7}
 800510c:	b083      	sub	sp, #12
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800511c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4313      	orrs	r3, r2
 8005124:	608b      	str	r3, [r1, #8]
}
 8005126:	bf00      	nop
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <LL_C2_RCC_SetAHBPrescaler>:
{
 8005132:	b480      	push	{r7}
 8005134:	b083      	sub	sp, #12
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800513a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800513e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005142:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005146:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4313      	orrs	r3, r2
 800514e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005152:	bf00      	nop
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <LL_RCC_SetAHB4Prescaler>:
{
 800515e:	b480      	push	{r7}
 8005160:	b083      	sub	sp, #12
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800516a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800516e:	f023 020f 	bic.w	r2, r3, #15
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	091b      	lsrs	r3, r3, #4
 8005176:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800517a:	4313      	orrs	r3, r2
 800517c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <LL_RCC_SetAPB1Prescaler>:
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800519e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	608b      	str	r3, [r1, #8]
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <LL_RCC_SetAPB2Prescaler>:
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80051bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80051c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	608b      	str	r3, [r1, #8]
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <LL_RCC_GetAHBPrescaler>:
{
 80051dc:	b480      	push	{r7}
 80051de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80051e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <LL_RCC_GetAHB4Prescaler>:
{
 80051f4:	b480      	push	{r7}
 80051f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80051f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051fc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005200:	011b      	lsls	r3, r3, #4
 8005202:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005206:	4618      	mov	r0, r3
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <LL_RCC_GetAPB1Prescaler>:
{
 8005210:	b480      	push	{r7}
 8005212:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800521e:	4618      	mov	r0, r3
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <LL_RCC_GetAPB2Prescaler>:
{
 8005228:	b480      	push	{r7}
 800522a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800522c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005236:	4618      	mov	r0, r3
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <LL_RCC_PLL_Enable>:
{
 8005240:	b480      	push	{r7}
 8005242:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800524e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005252:	6013      	str	r3, [r2, #0]
}
 8005254:	bf00      	nop
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <LL_RCC_PLL_Disable>:
{
 800525e:	b480      	push	{r7}
 8005260:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800526c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005270:	6013      	str	r3, [r2, #0]
}
 8005272:	bf00      	nop
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <LL_RCC_PLL_IsReady>:
{
 800527c:	b480      	push	{r7}
 800527e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800528a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800528e:	d101      	bne.n	8005294 <LL_RCC_PLL_IsReady+0x18>
 8005290:	2301      	movs	r3, #1
 8005292:	e000      	b.n	8005296 <LL_RCC_PLL_IsReady+0x1a>
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <LL_RCC_PLL_GetN>:
{
 80052a0:	b480      	push	{r7}
 80052a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80052a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	0a1b      	lsrs	r3, r3, #8
 80052ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr

080052ba <LL_RCC_PLL_GetR>:
{
 80052ba:	b480      	push	{r7}
 80052bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80052be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <LL_RCC_PLL_GetDivider>:
{
 80052d2:	b480      	push	{r7}
 80052d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80052d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <LL_RCC_PLL_GetMainSource>:
{
 80052ea:	b480      	push	{r7}
 80052ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80052ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	f003 0303 	and.w	r3, r3, #3
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <LL_RCC_IsActiveFlag_HPRE>:
{
 8005302:	b480      	push	{r7}
 8005304:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005314:	d101      	bne.n	800531a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005316:	2301      	movs	r3, #1
 8005318:	e000      	b.n	800531c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8005326:	b480      	push	{r7}
 8005328:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800532a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800532e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005336:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800533a:	d101      	bne.n	8005340 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800533c:	2301      	movs	r3, #1
 800533e:	e000      	b.n	8005342 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800534c:	b480      	push	{r7}
 800534e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005354:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800535c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005360:	d101      	bne.n	8005366 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005362:	2301      	movs	r3, #1
 8005364:	e000      	b.n	8005368 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr

08005372 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8005372:	b480      	push	{r7}
 8005374:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005380:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005384:	d101      	bne.n	800538a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005386:	2301      	movs	r3, #1
 8005388:	e000      	b.n	800538c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8005396:	b480      	push	{r7}
 8005398:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800539a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80053a8:	d101      	bne.n	80053ae <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80053aa:	2301      	movs	r3, #1
 80053ac:	e000      	b.n	80053b0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
	...

080053bc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053bc:	b590      	push	{r4, r7, lr}
 80053be:	b08d      	sub	sp, #52	; 0x34
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d101      	bne.n	80053ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e324      	b.n	8005a18 <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0320 	and.w	r3, r3, #32
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f000 808d 	beq.w	80054f6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053dc:	f7ff fe89 	bl	80050f2 <LL_RCC_GetSysClkSource>
 80053e0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053e2:	f7ff ff82 	bl	80052ea <LL_RCC_PLL_GetMainSource>
 80053e6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80053e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d005      	beq.n	80053fa <HAL_RCC_OscConfig+0x3e>
 80053ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f0:	2b0c      	cmp	r3, #12
 80053f2:	d147      	bne.n	8005484 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80053f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d144      	bne.n	8005484 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	69db      	ldr	r3, [r3, #28]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d101      	bne.n	8005406 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e308      	b.n	8005a18 <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800540a:	f7ff fe34 	bl	8005076 <LL_RCC_MSI_GetRange>
 800540e:	4603      	mov	r3, r0
 8005410:	429c      	cmp	r4, r3
 8005412:	d914      	bls.n	800543e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005418:	4618      	mov	r0, r3
 800541a:	f000 fcf1 	bl	8005e00 <RCC_SetFlashLatencyFromMSIRange>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d001      	beq.n	8005428 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e2f7      	b.n	8005a18 <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542c:	4618      	mov	r0, r3
 800542e:	f7ff fe0e 	bl	800504e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	4618      	mov	r0, r3
 8005438:	f7ff fe32 	bl	80050a0 <LL_RCC_MSI_SetCalibTrimming>
 800543c:	e013      	b.n	8005466 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005442:	4618      	mov	r0, r3
 8005444:	f7ff fe03 	bl	800504e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a1b      	ldr	r3, [r3, #32]
 800544c:	4618      	mov	r0, r3
 800544e:	f7ff fe27 	bl	80050a0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005456:	4618      	mov	r0, r3
 8005458:	f000 fcd2 	bl	8005e00 <RCC_SetFlashLatencyFromMSIRange>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e2d8      	b.n	8005a18 <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005466:	f000 fc8b 	bl	8005d80 <HAL_RCC_GetHCLKFreq>
 800546a:	4603      	mov	r3, r0
 800546c:	4aa4      	ldr	r2, [pc, #656]	; (8005700 <HAL_RCC_OscConfig+0x344>)
 800546e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005470:	4ba4      	ldr	r3, [pc, #656]	; (8005704 <HAL_RCC_OscConfig+0x348>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4618      	mov	r0, r3
 8005476:	f7fe fd29 	bl	8003ecc <HAL_InitTick>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d039      	beq.n	80054f4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e2c9      	b.n	8005a18 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	69db      	ldr	r3, [r3, #28]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d01e      	beq.n	80054ca <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800548c:	f7ff fdb0 	bl	8004ff0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005490:	f7fe fd6a 	bl	8003f68 <HAL_GetTick>
 8005494:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005496:	e008      	b.n	80054aa <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005498:	f7fe fd66 	bl	8003f68 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d901      	bls.n	80054aa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e2b6      	b.n	8005a18 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 80054aa:	f7ff fdbf 	bl	800502c <LL_RCC_MSI_IsReady>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d0f1      	beq.n	8005498 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7ff fdc8 	bl	800504e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7ff fdec 	bl	80050a0 <LL_RCC_MSI_SetCalibTrimming>
 80054c8:	e015      	b.n	80054f6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80054ca:	f7ff fda0 	bl	800500e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80054ce:	f7fe fd4b 	bl	8003f68 <HAL_GetTick>
 80054d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80054d4:	e008      	b.n	80054e8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80054d6:	f7fe fd47 	bl	8003f68 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d901      	bls.n	80054e8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e297      	b.n	8005a18 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 80054e8:	f7ff fda0 	bl	800502c <LL_RCC_MSI_IsReady>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1f1      	bne.n	80054d6 <HAL_RCC_OscConfig+0x11a>
 80054f2:	e000      	b.n	80054f6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80054f4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d047      	beq.n	8005592 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005502:	f7ff fdf6 	bl	80050f2 <LL_RCC_GetSysClkSource>
 8005506:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005508:	f7ff feef 	bl	80052ea <LL_RCC_PLL_GetMainSource>
 800550c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800550e:	6a3b      	ldr	r3, [r7, #32]
 8005510:	2b08      	cmp	r3, #8
 8005512:	d005      	beq.n	8005520 <HAL_RCC_OscConfig+0x164>
 8005514:	6a3b      	ldr	r3, [r7, #32]
 8005516:	2b0c      	cmp	r3, #12
 8005518:	d108      	bne.n	800552c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	2b03      	cmp	r3, #3
 800551e:	d105      	bne.n	800552c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d134      	bne.n	8005592 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e275      	b.n	8005a18 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005534:	d102      	bne.n	800553c <HAL_RCC_OscConfig+0x180>
 8005536:	f7ff fc11 	bl	8004d5c <LL_RCC_HSE_Enable>
 800553a:	e001      	b.n	8005540 <HAL_RCC_OscConfig+0x184>
 800553c:	f7ff fc1d 	bl	8004d7a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d012      	beq.n	800556e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005548:	f7fe fd0e 	bl	8003f68 <HAL_GetTick>
 800554c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800554e:	e008      	b.n	8005562 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005550:	f7fe fd0a 	bl	8003f68 <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	2b64      	cmp	r3, #100	; 0x64
 800555c:	d901      	bls.n	8005562 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e25a      	b.n	8005a18 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005562:	f7ff fc19 	bl	8004d98 <LL_RCC_HSE_IsReady>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d0f1      	beq.n	8005550 <HAL_RCC_OscConfig+0x194>
 800556c:	e011      	b.n	8005592 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800556e:	f7fe fcfb 	bl	8003f68 <HAL_GetTick>
 8005572:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005574:	e008      	b.n	8005588 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005576:	f7fe fcf7 	bl	8003f68 <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	2b64      	cmp	r3, #100	; 0x64
 8005582:	d901      	bls.n	8005588 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e247      	b.n	8005a18 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005588:	f7ff fc06 	bl	8004d98 <LL_RCC_HSE_IsReady>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1f1      	bne.n	8005576 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	2b00      	cmp	r3, #0
 800559c:	d04c      	beq.n	8005638 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800559e:	f7ff fda8 	bl	80050f2 <LL_RCC_GetSysClkSource>
 80055a2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055a4:	f7ff fea1 	bl	80052ea <LL_RCC_PLL_GetMainSource>
 80055a8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	2b04      	cmp	r3, #4
 80055ae:	d005      	beq.n	80055bc <HAL_RCC_OscConfig+0x200>
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	2b0c      	cmp	r3, #12
 80055b4:	d10e      	bne.n	80055d4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d10b      	bne.n	80055d4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d101      	bne.n	80055c8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e227      	b.n	8005a18 <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7ff fc25 	bl	8004e1c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80055d2:	e031      	b.n	8005638 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d019      	beq.n	8005610 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055dc:	f7ff fbee 	bl	8004dbc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e0:	f7fe fcc2 	bl	8003f68 <HAL_GetTick>
 80055e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80055e6:	e008      	b.n	80055fa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055e8:	f7fe fcbe 	bl	8003f68 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d901      	bls.n	80055fa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e20e      	b.n	8005a18 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 80055fa:	f7ff fbfd 	bl	8004df8 <LL_RCC_HSI_IsReady>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d0f1      	beq.n	80055e8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	4618      	mov	r0, r3
 800560a:	f7ff fc07 	bl	8004e1c <LL_RCC_HSI_SetCalibTrimming>
 800560e:	e013      	b.n	8005638 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005610:	f7ff fbe3 	bl	8004dda <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005614:	f7fe fca8 	bl	8003f68 <HAL_GetTick>
 8005618:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800561a:	e008      	b.n	800562e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800561c:	f7fe fca4 	bl	8003f68 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	2b02      	cmp	r3, #2
 8005628:	d901      	bls.n	800562e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e1f4      	b.n	8005a18 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 800562e:	f7ff fbe3 	bl	8004df8 <LL_RCC_HSI_IsReady>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1f1      	bne.n	800561c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0308 	and.w	r3, r3, #8
 8005640:	2b00      	cmp	r3, #0
 8005642:	d106      	bne.n	8005652 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800564c:	2b00      	cmp	r3, #0
 800564e:	f000 80a3 	beq.w	8005798 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d076      	beq.n	8005748 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0310 	and.w	r3, r3, #16
 8005662:	2b00      	cmp	r3, #0
 8005664:	d046      	beq.n	80056f4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005666:	f7ff fc66 	bl	8004f36 <LL_RCC_LSI1_IsReady>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d113      	bne.n	8005698 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005670:	f7ff fc3f 	bl	8004ef2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005674:	f7fe fc78 	bl	8003f68 <HAL_GetTick>
 8005678:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800567a:	e008      	b.n	800568e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800567c:	f7fe fc74 	bl	8003f68 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	2b02      	cmp	r3, #2
 8005688:	d901      	bls.n	800568e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e1c4      	b.n	8005a18 <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800568e:	f7ff fc52 	bl	8004f36 <LL_RCC_LSI1_IsReady>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d0f1      	beq.n	800567c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005698:	f7ff fc5f 	bl	8004f5a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800569c:	f7fe fc64 	bl	8003f68 <HAL_GetTick>
 80056a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80056a2:	e008      	b.n	80056b6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80056a4:	f7fe fc60 	bl	8003f68 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	2b03      	cmp	r3, #3
 80056b0:	d901      	bls.n	80056b6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e1b0      	b.n	8005a18 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80056b6:	f7ff fc72 	bl	8004f9e <LL_RCC_LSI2_IsReady>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d0f1      	beq.n	80056a4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7ff fc7c 	bl	8004fc2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80056ca:	f7ff fc23 	bl	8004f14 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ce:	f7fe fc4b 	bl	8003f68 <HAL_GetTick>
 80056d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80056d4:	e008      	b.n	80056e8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80056d6:	f7fe fc47 	bl	8003f68 <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d901      	bls.n	80056e8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e197      	b.n	8005a18 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80056e8:	f7ff fc25 	bl	8004f36 <LL_RCC_LSI1_IsReady>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1f1      	bne.n	80056d6 <HAL_RCC_OscConfig+0x31a>
 80056f2:	e051      	b.n	8005798 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80056f4:	f7ff fbfd 	bl	8004ef2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f8:	f7fe fc36 	bl	8003f68 <HAL_GetTick>
 80056fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80056fe:	e00c      	b.n	800571a <HAL_RCC_OscConfig+0x35e>
 8005700:	20000038 	.word	0x20000038
 8005704:	2000003c 	.word	0x2000003c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005708:	f7fe fc2e 	bl	8003f68 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	2b02      	cmp	r3, #2
 8005714:	d901      	bls.n	800571a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e17e      	b.n	8005a18 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800571a:	f7ff fc0c 	bl	8004f36 <LL_RCC_LSI1_IsReady>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d0f1      	beq.n	8005708 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005724:	f7ff fc2a 	bl	8004f7c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005728:	e008      	b.n	800573c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800572a:	f7fe fc1d 	bl	8003f68 <HAL_GetTick>
 800572e:	4602      	mov	r2, r0
 8005730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	2b03      	cmp	r3, #3
 8005736:	d901      	bls.n	800573c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e16d      	b.n	8005a18 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800573c:	f7ff fc2f 	bl	8004f9e <LL_RCC_LSI2_IsReady>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1f1      	bne.n	800572a <HAL_RCC_OscConfig+0x36e>
 8005746:	e027      	b.n	8005798 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005748:	f7ff fc18 	bl	8004f7c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800574c:	f7fe fc0c 	bl	8003f68 <HAL_GetTick>
 8005750:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005752:	e008      	b.n	8005766 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005754:	f7fe fc08 	bl	8003f68 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	2b03      	cmp	r3, #3
 8005760:	d901      	bls.n	8005766 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e158      	b.n	8005a18 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005766:	f7ff fc1a 	bl	8004f9e <LL_RCC_LSI2_IsReady>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1f1      	bne.n	8005754 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005770:	f7ff fbd0 	bl	8004f14 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005774:	f7fe fbf8 	bl	8003f68 <HAL_GetTick>
 8005778:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800577a:	e008      	b.n	800578e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800577c:	f7fe fbf4 	bl	8003f68 <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	2b02      	cmp	r3, #2
 8005788:	d901      	bls.n	800578e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e144      	b.n	8005a18 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800578e:	f7ff fbd2 	bl	8004f36 <LL_RCC_LSI1_IsReady>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1f1      	bne.n	800577c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0304 	and.w	r3, r3, #4
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d05b      	beq.n	800585c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057a4:	4b9e      	ldr	r3, [pc, #632]	; (8005a20 <HAL_RCC_OscConfig+0x664>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d114      	bne.n	80057da <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80057b0:	f7ff fa9c 	bl	8004cec <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057b4:	f7fe fbd8 	bl	8003f68 <HAL_GetTick>
 80057b8:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057ba:	e008      	b.n	80057ce <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057bc:	f7fe fbd4 	bl	8003f68 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d901      	bls.n	80057ce <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e124      	b.n	8005a18 <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057ce:	4b94      	ldr	r3, [pc, #592]	; (8005a20 <HAL_RCC_OscConfig+0x664>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d0f0      	beq.n	80057bc <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d102      	bne.n	80057e8 <HAL_RCC_OscConfig+0x42c>
 80057e2:	f7ff fb30 	bl	8004e46 <LL_RCC_LSE_Enable>
 80057e6:	e00c      	b.n	8005802 <HAL_RCC_OscConfig+0x446>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	2b05      	cmp	r3, #5
 80057ee:	d104      	bne.n	80057fa <HAL_RCC_OscConfig+0x43e>
 80057f0:	f7ff fb4b 	bl	8004e8a <LL_RCC_LSE_EnableBypass>
 80057f4:	f7ff fb27 	bl	8004e46 <LL_RCC_LSE_Enable>
 80057f8:	e003      	b.n	8005802 <HAL_RCC_OscConfig+0x446>
 80057fa:	f7ff fb35 	bl	8004e68 <LL_RCC_LSE_Disable>
 80057fe:	f7ff fb55 	bl	8004eac <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d014      	beq.n	8005834 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800580a:	f7fe fbad 	bl	8003f68 <HAL_GetTick>
 800580e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005810:	e00a      	b.n	8005828 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005812:	f7fe fba9 	bl	8003f68 <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005820:	4293      	cmp	r3, r2
 8005822:	d901      	bls.n	8005828 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e0f7      	b.n	8005a18 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005828:	f7ff fb51 	bl	8004ece <LL_RCC_LSE_IsReady>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d0ef      	beq.n	8005812 <HAL_RCC_OscConfig+0x456>
 8005832:	e013      	b.n	800585c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005834:	f7fe fb98 	bl	8003f68 <HAL_GetTick>
 8005838:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800583a:	e00a      	b.n	8005852 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800583c:	f7fe fb94 	bl	8003f68 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	f241 3288 	movw	r2, #5000	; 0x1388
 800584a:	4293      	cmp	r3, r2
 800584c:	d901      	bls.n	8005852 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e0e2      	b.n	8005a18 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005852:	f7ff fb3c 	bl	8004ece <LL_RCC_LSE_IsReady>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1ef      	bne.n	800583c <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005860:	2b00      	cmp	r3, #0
 8005862:	f000 80d8 	beq.w	8005a16 <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005866:	f7ff fc44 	bl	80050f2 <LL_RCC_GetSysClkSource>
 800586a:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800586c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005878:	2b02      	cmp	r3, #2
 800587a:	f040 80a6 	bne.w	80059ca <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f003 0203 	and.w	r2, r3, #3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005888:	429a      	cmp	r2, r3
 800588a:	d123      	bne.n	80058d4 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005896:	429a      	cmp	r2, r3
 8005898:	d11c      	bne.n	80058d4 <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	0a1b      	lsrs	r3, r3, #8
 800589e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d114      	bne.n	80058d4 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d10d      	bne.n	80058d4 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d106      	bne.n	80058d4 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d054      	beq.n	800597e <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	2b0c      	cmp	r3, #12
 80058d8:	d04f      	beq.n	800597a <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80058da:	f7ff fcc0 	bl	800525e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80058de:	f7fe fb43 	bl	8003f68 <HAL_GetTick>
 80058e2:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058e4:	e008      	b.n	80058f8 <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058e6:	f7fe fb3f 	bl	8003f68 <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d901      	bls.n	80058f8 <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e08f      	b.n	8005a18 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1ef      	bne.n	80058e6 <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800590a:	68da      	ldr	r2, [r3, #12]
 800590c:	4b45      	ldr	r3, [pc, #276]	; (8005a24 <HAL_RCC_OscConfig+0x668>)
 800590e:	4013      	ands	r3, r2
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005918:	4311      	orrs	r1, r2
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800591e:	0212      	lsls	r2, r2, #8
 8005920:	4311      	orrs	r1, r2
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005926:	4311      	orrs	r1, r2
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800592c:	4311      	orrs	r1, r2
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005932:	430a      	orrs	r2, r1
 8005934:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005938:	4313      	orrs	r3, r2
 800593a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800593c:	f7ff fc80 	bl	8005240 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005940:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800594a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800594e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005950:	f7fe fb0a 	bl	8003f68 <HAL_GetTick>
 8005954:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005956:	e008      	b.n	800596a <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005958:	f7fe fb06 	bl	8003f68 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	2b02      	cmp	r3, #2
 8005964:	d901      	bls.n	800596a <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e056      	b.n	8005a18 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800596a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d0ef      	beq.n	8005958 <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005978:	e04d      	b.n	8005a16 <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e04c      	b.n	8005a18 <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800597e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d144      	bne.n	8005a16 <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800598c:	f7ff fc58 	bl	8005240 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800599a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800599e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80059a0:	f7fe fae2 	bl	8003f68 <HAL_GetTick>
 80059a4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059a6:	e008      	b.n	80059ba <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059a8:	f7fe fade 	bl	8003f68 <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d901      	bls.n	80059ba <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e02e      	b.n	8005a18 <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d0ef      	beq.n	80059a8 <HAL_RCC_OscConfig+0x5ec>
 80059c8:	e025      	b.n	8005a16 <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	2b0c      	cmp	r3, #12
 80059ce:	d020      	beq.n	8005a12 <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059d0:	f7ff fc45 	bl	800525e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d4:	f7fe fac8 	bl	8003f68 <HAL_GetTick>
 80059d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059da:	e008      	b.n	80059ee <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059dc:	f7fe fac4 	bl	8003f68 <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d901      	bls.n	80059ee <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e014      	b.n	8005a18 <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1ef      	bne.n	80059dc <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 80059fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a0a:	f023 0303 	bic.w	r3, r3, #3
 8005a0e:	60d3      	str	r3, [r2, #12]
 8005a10:	e001      	b.n	8005a16 <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e000      	b.n	8005a18 <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3734      	adds	r7, #52	; 0x34
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd90      	pop	{r4, r7, pc}
 8005a20:	58000400 	.word	0x58000400
 8005a24:	11c1808c 	.word	0x11c1808c

08005a28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d101      	bne.n	8005a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e12d      	b.n	8005c98 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a3c:	4b98      	ldr	r3, [pc, #608]	; (8005ca0 <HAL_RCC_ClockConfig+0x278>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0307 	and.w	r3, r3, #7
 8005a44:	683a      	ldr	r2, [r7, #0]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d91b      	bls.n	8005a82 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a4a:	4b95      	ldr	r3, [pc, #596]	; (8005ca0 <HAL_RCC_ClockConfig+0x278>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f023 0207 	bic.w	r2, r3, #7
 8005a52:	4993      	ldr	r1, [pc, #588]	; (8005ca0 <HAL_RCC_ClockConfig+0x278>)
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a5a:	f7fe fa85 	bl	8003f68 <HAL_GetTick>
 8005a5e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a60:	e008      	b.n	8005a74 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005a62:	f7fe fa81 	bl	8003f68 <HAL_GetTick>
 8005a66:	4602      	mov	r2, r0
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d901      	bls.n	8005a74 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	e111      	b.n	8005c98 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a74:	4b8a      	ldr	r3, [pc, #552]	; (8005ca0 <HAL_RCC_ClockConfig+0x278>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0307 	and.w	r3, r3, #7
 8005a7c:	683a      	ldr	r2, [r7, #0]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d1ef      	bne.n	8005a62 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d016      	beq.n	8005abc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7ff fb39 	bl	800510a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005a98:	f7fe fa66 	bl	8003f68 <HAL_GetTick>
 8005a9c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005a9e:	e008      	b.n	8005ab2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005aa0:	f7fe fa62 	bl	8003f68 <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d901      	bls.n	8005ab2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e0f2      	b.n	8005c98 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005ab2:	f7ff fc26 	bl	8005302 <LL_RCC_IsActiveFlag_HPRE>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d0f1      	beq.n	8005aa0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0320 	and.w	r3, r3, #32
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d016      	beq.n	8005af6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	695b      	ldr	r3, [r3, #20]
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7ff fb30 	bl	8005132 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005ad2:	f7fe fa49 	bl	8003f68 <HAL_GetTick>
 8005ad6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005ad8:	e008      	b.n	8005aec <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005ada:	f7fe fa45 	bl	8003f68 <HAL_GetTick>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d901      	bls.n	8005aec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e0d5      	b.n	8005c98 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005aec:	f7ff fc1b 	bl	8005326 <LL_RCC_IsActiveFlag_C2HPRE>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d0f1      	beq.n	8005ada <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d016      	beq.n	8005b30 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	4618      	mov	r0, r3
 8005b08:	f7ff fb29 	bl	800515e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005b0c:	f7fe fa2c 	bl	8003f68 <HAL_GetTick>
 8005b10:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005b12:	e008      	b.n	8005b26 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005b14:	f7fe fa28 	bl	8003f68 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d901      	bls.n	8005b26 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e0b8      	b.n	8005c98 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005b26:	f7ff fc11 	bl	800534c <LL_RCC_IsActiveFlag_SHDHPRE>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d0f1      	beq.n	8005b14 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0304 	and.w	r3, r3, #4
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d016      	beq.n	8005b6a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7ff fb23 	bl	800518c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005b46:	f7fe fa0f 	bl	8003f68 <HAL_GetTick>
 8005b4a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005b4c:	e008      	b.n	8005b60 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005b4e:	f7fe fa0b 	bl	8003f68 <HAL_GetTick>
 8005b52:	4602      	mov	r2, r0
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d901      	bls.n	8005b60 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e09b      	b.n	8005c98 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005b60:	f7ff fc07 	bl	8005372 <LL_RCC_IsActiveFlag_PPRE1>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d0f1      	beq.n	8005b4e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0308 	and.w	r3, r3, #8
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d017      	beq.n	8005ba6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	00db      	lsls	r3, r3, #3
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7ff fb19 	bl	80051b4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005b82:	f7fe f9f1 	bl	8003f68 <HAL_GetTick>
 8005b86:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005b88:	e008      	b.n	8005b9c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005b8a:	f7fe f9ed 	bl	8003f68 <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d901      	bls.n	8005b9c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e07d      	b.n	8005c98 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005b9c:	f7ff fbfb 	bl	8005396 <LL_RCC_IsActiveFlag_PPRE2>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d0f1      	beq.n	8005b8a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d043      	beq.n	8005c3a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d106      	bne.n	8005bc8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005bba:	f7ff f8ed 	bl	8004d98 <LL_RCC_HSE_IsReady>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d11e      	bne.n	8005c02 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e067      	b.n	8005c98 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	2b03      	cmp	r3, #3
 8005bce:	d106      	bne.n	8005bde <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005bd0:	f7ff fb54 	bl	800527c <LL_RCC_PLL_IsReady>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d113      	bne.n	8005c02 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e05c      	b.n	8005c98 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d106      	bne.n	8005bf4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005be6:	f7ff fa21 	bl	800502c <LL_RCC_MSI_IsReady>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d108      	bne.n	8005c02 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e051      	b.n	8005c98 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005bf4:	f7ff f900 	bl	8004df8 <LL_RCC_HSI_IsReady>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d101      	bne.n	8005c02 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e04a      	b.n	8005c98 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7ff fa5f 	bl	80050ca <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c0c:	f7fe f9ac 	bl	8003f68 <HAL_GetTick>
 8005c10:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c12:	e00a      	b.n	8005c2a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c14:	f7fe f9a8 	bl	8003f68 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d901      	bls.n	8005c2a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e036      	b.n	8005c98 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c2a:	f7ff fa62 	bl	80050f2 <LL_RCC_GetSysClkSource>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d1ec      	bne.n	8005c14 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c3a:	4b19      	ldr	r3, [pc, #100]	; (8005ca0 <HAL_RCC_ClockConfig+0x278>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0307 	and.w	r3, r3, #7
 8005c42:	683a      	ldr	r2, [r7, #0]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d21b      	bcs.n	8005c80 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c48:	4b15      	ldr	r3, [pc, #84]	; (8005ca0 <HAL_RCC_ClockConfig+0x278>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f023 0207 	bic.w	r2, r3, #7
 8005c50:	4913      	ldr	r1, [pc, #76]	; (8005ca0 <HAL_RCC_ClockConfig+0x278>)
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c58:	f7fe f986 	bl	8003f68 <HAL_GetTick>
 8005c5c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c5e:	e008      	b.n	8005c72 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005c60:	f7fe f982 	bl	8003f68 <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d901      	bls.n	8005c72 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e012      	b.n	8005c98 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c72:	4b0b      	ldr	r3, [pc, #44]	; (8005ca0 <HAL_RCC_ClockConfig+0x278>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 0307 	and.w	r3, r3, #7
 8005c7a:	683a      	ldr	r2, [r7, #0]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d1ef      	bne.n	8005c60 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005c80:	f000 f87e 	bl	8005d80 <HAL_RCC_GetHCLKFreq>
 8005c84:	4603      	mov	r3, r0
 8005c86:	4a07      	ldr	r2, [pc, #28]	; (8005ca4 <HAL_RCC_ClockConfig+0x27c>)
 8005c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005c8a:	f7fe f979 	bl	8003f80 <HAL_GetTickPrio>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7fe f91b 	bl	8003ecc <HAL_InitTick>
 8005c96:	4603      	mov	r3, r0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3710      	adds	r7, #16
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	58004000 	.word	0x58004000
 8005ca4:	20000038 	.word	0x20000038

08005ca8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ca8:	b590      	push	{r4, r7, lr}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cae:	f7ff fa20 	bl	80050f2 <LL_RCC_GetSysClkSource>
 8005cb2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d10a      	bne.n	8005cd0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005cba:	f7ff f9dc 	bl	8005076 <LL_RCC_MSI_GetRange>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	091b      	lsrs	r3, r3, #4
 8005cc2:	f003 030f 	and.w	r3, r3, #15
 8005cc6:	4a2b      	ldr	r2, [pc, #172]	; (8005d74 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ccc:	60fb      	str	r3, [r7, #12]
 8005cce:	e04b      	b.n	8005d68 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b04      	cmp	r3, #4
 8005cd4:	d102      	bne.n	8005cdc <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005cd6:	4b28      	ldr	r3, [pc, #160]	; (8005d78 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005cd8:	60fb      	str	r3, [r7, #12]
 8005cda:	e045      	b.n	8005d68 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b08      	cmp	r3, #8
 8005ce0:	d10a      	bne.n	8005cf8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005ce2:	f7ff f829 	bl	8004d38 <LL_RCC_HSE_IsEnabledDiv2>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d102      	bne.n	8005cf2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005cec:	4b22      	ldr	r3, [pc, #136]	; (8005d78 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005cee:	60fb      	str	r3, [r7, #12]
 8005cf0:	e03a      	b.n	8005d68 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005cf2:	4b22      	ldr	r3, [pc, #136]	; (8005d7c <HAL_RCC_GetSysClockFreq+0xd4>)
 8005cf4:	60fb      	str	r3, [r7, #12]
 8005cf6:	e037      	b.n	8005d68 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005cf8:	f7ff faf7 	bl	80052ea <LL_RCC_PLL_GetMainSource>
 8005cfc:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d003      	beq.n	8005d0c <HAL_RCC_GetSysClockFreq+0x64>
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	2b03      	cmp	r3, #3
 8005d08:	d003      	beq.n	8005d12 <HAL_RCC_GetSysClockFreq+0x6a>
 8005d0a:	e00d      	b.n	8005d28 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005d0c:	4b1a      	ldr	r3, [pc, #104]	; (8005d78 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005d0e:	60bb      	str	r3, [r7, #8]
        break;
 8005d10:	e015      	b.n	8005d3e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005d12:	f7ff f811 	bl	8004d38 <LL_RCC_HSE_IsEnabledDiv2>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d102      	bne.n	8005d22 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005d1c:	4b16      	ldr	r3, [pc, #88]	; (8005d78 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005d1e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005d20:	e00d      	b.n	8005d3e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005d22:	4b16      	ldr	r3, [pc, #88]	; (8005d7c <HAL_RCC_GetSysClockFreq+0xd4>)
 8005d24:	60bb      	str	r3, [r7, #8]
        break;
 8005d26:	e00a      	b.n	8005d3e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005d28:	f7ff f9a5 	bl	8005076 <LL_RCC_MSI_GetRange>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	091b      	lsrs	r3, r3, #4
 8005d30:	f003 030f 	and.w	r3, r3, #15
 8005d34:	4a0f      	ldr	r2, [pc, #60]	; (8005d74 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d3a:	60bb      	str	r3, [r7, #8]
        break;
 8005d3c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005d3e:	f7ff faaf 	bl	80052a0 <LL_RCC_PLL_GetN>
 8005d42:	4602      	mov	r2, r0
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	fb03 f402 	mul.w	r4, r3, r2
 8005d4a:	f7ff fac2 	bl	80052d2 <LL_RCC_PLL_GetDivider>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	091b      	lsrs	r3, r3, #4
 8005d52:	3301      	adds	r3, #1
 8005d54:	fbb4 f4f3 	udiv	r4, r4, r3
 8005d58:	f7ff faaf 	bl	80052ba <LL_RCC_PLL_GetR>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	0f5b      	lsrs	r3, r3, #29
 8005d60:	3301      	adds	r3, #1
 8005d62:	fbb4 f3f3 	udiv	r3, r4, r3
 8005d66:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005d68:	68fb      	ldr	r3, [r7, #12]
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3714      	adds	r7, #20
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd90      	pop	{r4, r7, pc}
 8005d72:	bf00      	nop
 8005d74:	0800c784 	.word	0x0800c784
 8005d78:	00f42400 	.word	0x00f42400
 8005d7c:	01e84800 	.word	0x01e84800

08005d80 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d80:	b598      	push	{r3, r4, r7, lr}
 8005d82:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005d84:	f7ff ff90 	bl	8005ca8 <HAL_RCC_GetSysClockFreq>
 8005d88:	4604      	mov	r4, r0
 8005d8a:	f7ff fa27 	bl	80051dc <LL_RCC_GetAHBPrescaler>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	091b      	lsrs	r3, r3, #4
 8005d92:	f003 030f 	and.w	r3, r3, #15
 8005d96:	4a03      	ldr	r2, [pc, #12]	; (8005da4 <HAL_RCC_GetHCLKFreq+0x24>)
 8005d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d9c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	bd98      	pop	{r3, r4, r7, pc}
 8005da4:	0800c724 	.word	0x0800c724

08005da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005da8:	b598      	push	{r3, r4, r7, lr}
 8005daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005dac:	f7ff ffe8 	bl	8005d80 <HAL_RCC_GetHCLKFreq>
 8005db0:	4604      	mov	r4, r0
 8005db2:	f7ff fa2d 	bl	8005210 <LL_RCC_GetAPB1Prescaler>
 8005db6:	4603      	mov	r3, r0
 8005db8:	0a1b      	lsrs	r3, r3, #8
 8005dba:	f003 0307 	and.w	r3, r3, #7
 8005dbe:	4a04      	ldr	r2, [pc, #16]	; (8005dd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dc4:	f003 031f 	and.w	r3, r3, #31
 8005dc8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	bd98      	pop	{r3, r4, r7, pc}
 8005dd0:	0800c764 	.word	0x0800c764

08005dd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005dd4:	b598      	push	{r3, r4, r7, lr}
 8005dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005dd8:	f7ff ffd2 	bl	8005d80 <HAL_RCC_GetHCLKFreq>
 8005ddc:	4604      	mov	r4, r0
 8005dde:	f7ff fa23 	bl	8005228 <LL_RCC_GetAPB2Prescaler>
 8005de2:	4603      	mov	r3, r0
 8005de4:	0adb      	lsrs	r3, r3, #11
 8005de6:	f003 0307 	and.w	r3, r3, #7
 8005dea:	4a04      	ldr	r2, [pc, #16]	; (8005dfc <HAL_RCC_GetPCLK2Freq+0x28>)
 8005dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005df0:	f003 031f 	and.w	r3, r3, #31
 8005df4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	bd98      	pop	{r3, r4, r7, pc}
 8005dfc:	0800c764 	.word	0x0800c764

08005e00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2bb0      	cmp	r3, #176	; 0xb0
 8005e0c:	d903      	bls.n	8005e16 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005e0e:	4b14      	ldr	r3, [pc, #80]	; (8005e60 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8005e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e12:	60fb      	str	r3, [r7, #12]
 8005e14:	e007      	b.n	8005e26 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	091b      	lsrs	r3, r3, #4
 8005e1a:	f003 030f 	and.w	r3, r3, #15
 8005e1e:	4a10      	ldr	r2, [pc, #64]	; (8005e60 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8005e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e24:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005e26:	f7ff f9e5 	bl	80051f4 <LL_RCC_GetAHB4Prescaler>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	091b      	lsrs	r3, r3, #4
 8005e2e:	f003 030f 	and.w	r3, r3, #15
 8005e32:	4a0c      	ldr	r2, [pc, #48]	; (8005e64 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e3e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	4a09      	ldr	r2, [pc, #36]	; (8005e68 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005e44:	fba2 2303 	umull	r2, r3, r2, r3
 8005e48:	0c9b      	lsrs	r3, r3, #18
 8005e4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 f80c 	bl	8005e6c <RCC_SetFlashLatency>
 8005e54:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	0800c784 	.word	0x0800c784
 8005e64:	0800c724 	.word	0x0800c724
 8005e68:	431bde83 	.word	0x431bde83

08005e6c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005e6c:	b590      	push	{r4, r7, lr}
 8005e6e:	b08f      	sub	sp, #60	; 0x3c
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005e76:	4b24      	ldr	r3, [pc, #144]	; (8005f08 <RCC_SetFlashLatency+0x9c>)
 8005e78:	f107 041c 	add.w	r4, r7, #28
 8005e7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005e7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005e82:	4b22      	ldr	r3, [pc, #136]	; (8005f0c <RCC_SetFlashLatency+0xa0>)
 8005e84:	f107 040c 	add.w	r4, r7, #12
 8005e88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005e8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005e8e:	2300      	movs	r3, #0
 8005e90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005e92:	2300      	movs	r3, #0
 8005e94:	633b      	str	r3, [r7, #48]	; 0x30
 8005e96:	e013      	b.n	8005ec0 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	3338      	adds	r3, #56	; 0x38
 8005e9e:	443b      	add	r3, r7
 8005ea0:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d807      	bhi.n	8005eba <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 8005eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	3338      	adds	r3, #56	; 0x38
 8005eb0:	443b      	add	r3, r7
 8005eb2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005eb6:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8005eb8:	e005      	b.n	8005ec6 <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	633b      	str	r3, [r7, #48]	; 0x30
 8005ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec2:	2b03      	cmp	r3, #3
 8005ec4:	d9e8      	bls.n	8005e98 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005ec6:	4b12      	ldr	r3, [pc, #72]	; (8005f10 <RCC_SetFlashLatency+0xa4>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f023 0207 	bic.w	r2, r3, #7
 8005ece:	4910      	ldr	r1, [pc, #64]	; (8005f10 <RCC_SetFlashLatency+0xa4>)
 8005ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005ed6:	f7fe f847 	bl	8003f68 <HAL_GetTick>
 8005eda:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005edc:	e008      	b.n	8005ef0 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005ede:	f7fe f843 	bl	8003f68 <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d901      	bls.n	8005ef0 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e007      	b.n	8005f00 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005ef0:	4b07      	ldr	r3, [pc, #28]	; (8005f10 <RCC_SetFlashLatency+0xa4>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0307 	and.w	r3, r3, #7
 8005ef8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d1ef      	bne.n	8005ede <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	373c      	adds	r7, #60	; 0x3c
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd90      	pop	{r4, r7, pc}
 8005f08:	0800c59c 	.word	0x0800c59c
 8005f0c:	0800c5ac 	.word	0x0800c5ac
 8005f10:	58004000 	.word	0x58004000

08005f14 <LL_RCC_LSE_IsEnabled>:
{
 8005f14:	b480      	push	{r7}
 8005f16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f20:	f003 0301 	and.w	r3, r3, #1
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d101      	bne.n	8005f2c <LL_RCC_LSE_IsEnabled+0x18>
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e000      	b.n	8005f2e <LL_RCC_LSE_IsEnabled+0x1a>
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <LL_RCC_LSE_IsReady>:
{
 8005f38:	b480      	push	{r7}
 8005f3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f44:	f003 0302 	and.w	r3, r3, #2
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d101      	bne.n	8005f50 <LL_RCC_LSE_IsReady+0x18>
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e000      	b.n	8005f52 <LL_RCC_LSE_IsReady+0x1a>
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <LL_RCC_SetRFWKPClockSource>:
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005f70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <LL_RCC_SetSMPSClockSource>:
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f96:	f023 0203 	bic.w	r2, r3, #3
 8005f9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <LL_RCC_SetSMPSPrescaler>:
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005fc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005fcc:	bf00      	nop
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <LL_RCC_SetUSARTClockSource>:
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fe8:	f023 0203 	bic.w	r2, r3, #3
 8005fec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005ff8:	bf00      	nop
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <LL_RCC_SetLPUARTClockSource>:
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800600c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006014:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006018:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4313      	orrs	r3, r2
 8006020:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <LL_RCC_SetI2CClockSource>:
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800603c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	091b      	lsrs	r3, r3, #4
 8006044:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006048:	43db      	mvns	r3, r3
 800604a:	401a      	ands	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	011b      	lsls	r3, r3, #4
 8006050:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006054:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006058:	4313      	orrs	r3, r2
 800605a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800605e:	bf00      	nop
 8006060:	370c      	adds	r7, #12
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr

0800606a <LL_RCC_SetLPTIMClockSource>:
{
 800606a:	b480      	push	{r7}
 800606c:	b083      	sub	sp, #12
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006076:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	0c1b      	lsrs	r3, r3, #16
 800607e:	041b      	lsls	r3, r3, #16
 8006080:	43db      	mvns	r3, r3
 8006082:	401a      	ands	r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	041b      	lsls	r3, r3, #16
 8006088:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800608c:	4313      	orrs	r3, r2
 800608e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006092:	bf00      	nop
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <LL_RCC_SetRNGClockSource>:
{
 800609e:	b480      	push	{r7}
 80060a0:	b083      	sub	sp, #12
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80060a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ae:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80060b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80060be:	bf00      	nop
 80060c0:	370c      	adds	r7, #12
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <LL_RCC_SetCLK48ClockSource>:
{
 80060ca:	b480      	push	{r7}
 80060cc:	b083      	sub	sp, #12
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80060d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80060de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80060ea:	bf00      	nop
 80060ec:	370c      	adds	r7, #12
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr

080060f6 <LL_RCC_SetADCClockSource>:
{
 80060f6:	b480      	push	{r7}
 80060f8:	b083      	sub	sp, #12
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80060fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006106:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800610a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4313      	orrs	r3, r2
 8006112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006116:	bf00      	nop
 8006118:	370c      	adds	r7, #12
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr

08006122 <LL_RCC_SetRTCClockSource>:
{
 8006122:	b480      	push	{r7}
 8006124:	b083      	sub	sp, #12
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800612a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800612e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006132:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006136:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4313      	orrs	r3, r2
 800613e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006142:	bf00      	nop
 8006144:	370c      	adds	r7, #12
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr

0800614e <LL_RCC_GetRTCClockSource>:
{
 800614e:	b480      	push	{r7}
 8006150:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006152:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800615a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800615e:	4618      	mov	r0, r3
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <LL_RCC_ForceBackupDomainReset>:
{
 8006168:	b480      	push	{r7}
 800616a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800616c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006174:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800617c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006180:	bf00      	nop
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr

0800618a <LL_RCC_ReleaseBackupDomainReset>:
{
 800618a:	b480      	push	{r7}
 800618c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800618e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006196:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800619a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800619e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80061a2:	bf00      	nop
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b088      	sub	sp, #32
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80061b4:	2300      	movs	r3, #0
 80061b6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80061b8:	2300      	movs	r3, #0
 80061ba:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d046      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80061c8:	f7ff ffc1 	bl	800614e <LL_RCC_GetRTCClockSource>
 80061cc:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	69ba      	ldr	r2, [r7, #24]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d03c      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80061d8:	f7fe fd88 	bl	8004cec <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d105      	bne.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a1b      	ldr	r3, [r3, #32]
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7ff ff9b 	bl	8006122 <LL_RCC_SetRTCClockSource>
 80061ec:	e02e      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80061ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061f6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80061f8:	f7ff ffb6 	bl	8006168 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80061fc:	f7ff ffc5 	bl	800618a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	4313      	orrs	r3, r2
 800620c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800620e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006218:	f7ff fe7c 	bl	8005f14 <LL_RCC_LSE_IsEnabled>
 800621c:	4603      	mov	r3, r0
 800621e:	2b01      	cmp	r3, #1
 8006220:	d114      	bne.n	800624c <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006222:	f7fd fea1 	bl	8003f68 <HAL_GetTick>
 8006226:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006228:	e00b      	b.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800622a:	f7fd fe9d 	bl	8003f68 <HAL_GetTick>
 800622e:	4602      	mov	r2, r0
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	f241 3288 	movw	r2, #5000	; 0x1388
 8006238:	4293      	cmp	r3, r2
 800623a:	d902      	bls.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	77fb      	strb	r3, [r7, #31]
              break;
 8006240:	e004      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 8006242:	f7ff fe79 	bl	8005f38 <LL_RCC_LSE_IsReady>
 8006246:	4603      	mov	r3, r0
 8006248:	2b01      	cmp	r3, #1
 800624a:	d1ee      	bne.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800624c:	7ffb      	ldrb	r3, [r7, #31]
 800624e:	77bb      	strb	r3, [r7, #30]
 8006250:	e001      	b.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006252:	7ffb      	ldrb	r3, [r7, #31]
 8006254:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	2b00      	cmp	r3, #0
 8006260:	d004      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	4618      	mov	r0, r3
 8006268:	f7ff feb6 	bl	8005fd8 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0302 	and.w	r3, r3, #2
 8006274:	2b00      	cmp	r3, #0
 8006276:	d004      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	4618      	mov	r0, r3
 800627e:	f7ff fec1 	bl	8006004 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 0310 	and.w	r3, r3, #16
 800628a:	2b00      	cmp	r3, #0
 800628c:	d004      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	4618      	mov	r0, r3
 8006294:	f7ff fee9 	bl	800606a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0320 	and.w	r3, r3, #32
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d004      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	695b      	ldr	r3, [r3, #20]
 80062a8:	4618      	mov	r0, r3
 80062aa:	f7ff fede 	bl	800606a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0304 	and.w	r3, r3, #4
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d004      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	4618      	mov	r0, r3
 80062c0:	f7ff feb6 	bl	8006030 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d02b      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	699b      	ldr	r3, [r3, #24]
 80062d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062d8:	d008      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x140>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062e2:	d003      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x140>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d105      	bne.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	699b      	ldr	r3, [r3, #24]
 80062f0:	4618      	mov	r0, r3
 80062f2:	f7ff fed4 	bl	800609e <LL_RCC_SetRNGClockSource>
 80062f6:	e00a      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x162>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006300:	60fb      	str	r3, [r7, #12]
 8006302:	2000      	movs	r0, #0
 8006304:	f7ff fecb 	bl	800609e <LL_RCC_SetRNGClockSource>
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f7ff fede 	bl	80060ca <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006316:	d107      	bne.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006322:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006326:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006330:	2b00      	cmp	r3, #0
 8006332:	d011      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	69db      	ldr	r3, [r3, #28]
 8006338:	4618      	mov	r0, r3
 800633a:	f7ff fedc 	bl	80060f6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	69db      	ldr	r3, [r3, #28]
 8006342:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006346:	d107      	bne.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006348:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006356:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d004      	beq.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006368:	4618      	mov	r0, r3
 800636a:	f7ff fdf7 	bl	8005f5c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006376:	2b00      	cmp	r3, #0
 8006378:	d009      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637e:	4618      	mov	r0, r3
 8006380:	f7ff fe16 	bl	8005fb0 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006388:	4618      	mov	r0, r3
 800638a:	f7ff fdfd 	bl	8005f88 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800638e:	7fbb      	ldrb	r3, [r7, #30]
}
 8006390:	4618      	mov	r0, r3
 8006392:	3720      	adds	r7, #32
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d101      	bne.n	80063aa <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e09f      	b.n	80064ea <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d106      	bne.n	80063c4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f7fc fb8c 	bl	8002adc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2202      	movs	r2, #2
 80063c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80063cc:	4b49      	ldr	r3, [pc, #292]	; (80064f4 <HAL_RTC_Init+0x15c>)
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	f003 0310 	and.w	r3, r3, #16
 80063d4:	2b10      	cmp	r3, #16
 80063d6:	d07e      	beq.n	80064d6 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	22ca      	movs	r2, #202	; 0xca
 80063de:	625a      	str	r2, [r3, #36]	; 0x24
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2253      	movs	r2, #83	; 0x53
 80063e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 f8ab 	bl	8006544 <RTC_EnterInitMode>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00a      	beq.n	800640a <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	22ff      	movs	r2, #255	; 0xff
 80063fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2204      	movs	r2, #4
 8006400:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	73fb      	strb	r3, [r7, #15]
 8006408:	e067      	b.n	80064da <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	6812      	ldr	r2, [r2, #0]
 8006414:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006418:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800641c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	6899      	ldr	r1, [r3, #8]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	685a      	ldr	r2, [r3, #4]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	431a      	orrs	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	431a      	orrs	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	430a      	orrs	r2, r1
 800643a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	68d2      	ldr	r2, [r2, #12]
 8006444:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	6919      	ldr	r1, [r3, #16]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	041a      	lsls	r2, r3, #16
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	430a      	orrs	r2, r1
 8006458:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68da      	ldr	r2, [r3, #12]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006468:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f022 0202 	bic.w	r2, r2, #2
 8006478:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	69da      	ldr	r2, [r3, #28]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	695b      	ldr	r3, [r3, #20]
 8006488:	431a      	orrs	r2, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	430a      	orrs	r2, r1
 8006490:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	f003 0320 	and.w	r3, r3, #32
 800649c:	2b00      	cmp	r3, #0
 800649e:	d113      	bne.n	80064c8 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 f829 	bl	80064f8 <HAL_RTC_WaitForSynchro>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00d      	beq.n	80064c8 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	22ff      	movs	r2, #255	; 0xff
 80064b2:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2204      	movs	r2, #4
 80064b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e010      	b.n	80064ea <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	22ff      	movs	r2, #255	; 0xff
 80064ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 80064d0:	2300      	movs	r3, #0
 80064d2:	73fb      	strb	r3, [r7, #15]
 80064d4:	e001      	b.n	80064da <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80064d6:	2300      	movs	r3, #0
 80064d8:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80064da:	7bfb      	ldrb	r3, [r7, #15]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d103      	bne.n	80064e8 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 80064e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	40002800 	.word	0x40002800

080064f8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68da      	ldr	r2, [r3, #12]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800650e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006510:	f7fd fd2a 	bl	8003f68 <HAL_GetTick>
 8006514:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006516:	e009      	b.n	800652c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006518:	f7fd fd26 	bl	8003f68 <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006526:	d901      	bls.n	800652c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	e007      	b.n	800653c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	f003 0320 	and.w	r3, r3, #32
 8006536:	2b00      	cmp	r3, #0
 8006538:	d0ee      	beq.n	8006518 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006556:	2b00      	cmp	r3, #0
 8006558:	d119      	bne.n	800658e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f04f 32ff 	mov.w	r2, #4294967295
 8006562:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006564:	f7fd fd00 	bl	8003f68 <HAL_GetTick>
 8006568:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800656a:	e009      	b.n	8006580 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800656c:	f7fd fcfc 	bl	8003f68 <HAL_GetTick>
 8006570:	4602      	mov	r2, r0
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800657a:	d901      	bls.n	8006580 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800657c:	2303      	movs	r3, #3
 800657e:	e007      	b.n	8006590 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800658a:	2b00      	cmp	r3, #0
 800658c:	d0ee      	beq.n	800656c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	3710      	adds	r7, #16
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d101      	bne.n	80065b2 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80065ae:	2302      	movs	r3, #2
 80065b0:	e0a8      	b.n	8006704 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2202      	movs	r2, #2
 80065be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	22ca      	movs	r2, #202	; 0xca
 80065c8:	625a      	str	r2, [r3, #36]	; 0x24
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2253      	movs	r2, #83	; 0x53
 80065d0:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d020      	beq.n	8006622 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80065e0:	f7fd fcc2 	bl	8003f68 <HAL_GetTick>
 80065e4:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80065e6:	e015      	b.n	8006614 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80065e8:	f7fd fcbe 	bl	8003f68 <HAL_GetTick>
 80065ec:	4602      	mov	r2, r0
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065f6:	d90d      	bls.n	8006614 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	22ff      	movs	r2, #255	; 0xff
 80065fe:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2203      	movs	r2, #3
 8006604:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006610:	2303      	movs	r3, #3
 8006612:	e077      	b.n	8006704 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	f003 0304 	and.w	r3, r3, #4
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1e2      	bne.n	80065e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	689a      	ldr	r2, [r3, #8]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006630:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	b2da      	uxtb	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8006642:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006644:	f7fd fc90 	bl	8003f68 <HAL_GetTick>
 8006648:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800664a:	e015      	b.n	8006678 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800664c:	f7fd fc8c 	bl	8003f68 <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800665a:	d90d      	bls.n	8006678 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	22ff      	movs	r2, #255	; 0xff
 8006662:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2203      	movs	r2, #3
 8006668:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2200      	movs	r2, #0
 8006670:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8006674:	2303      	movs	r3, #3
 8006676:	e045      	b.n	8006704 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	f003 0304 	and.w	r3, r3, #4
 8006682:	2b00      	cmp	r3, #0
 8006684:	d0e2      	beq.n	800664c <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68ba      	ldr	r2, [r7, #8]
 800668c:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	689a      	ldr	r2, [r3, #8]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f022 0207 	bic.w	r2, r2, #7
 800669c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	6899      	ldr	r1, [r3, #8]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	430a      	orrs	r2, r1
 80066ac:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80066ae:	4b17      	ldr	r3, [pc, #92]	; (800670c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80066b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066b4:	4a15      	ldr	r2, [pc, #84]	; (800670c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80066b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066ba:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80066be:	4b13      	ldr	r3, [pc, #76]	; (800670c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a12      	ldr	r2, [pc, #72]	; (800670c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80066c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066c8:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	689a      	ldr	r2, [r3, #8]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066d8:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	689a      	ldr	r2, [r3, #8]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80066e8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	22ff      	movs	r2, #255	; 0xff
 80066f0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3718      	adds	r7, #24
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	58000800 	.word	0x58000800

08006710 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800671e:	2b01      	cmp	r3, #1
 8006720:	d101      	bne.n	8006726 <HAL_RTCEx_EnableBypassShadow+0x16>
 8006722:	2302      	movs	r3, #2
 8006724:	e024      	b.n	8006770 <HAL_RTCEx_EnableBypassShadow+0x60>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2201      	movs	r2, #1
 800672a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2202      	movs	r2, #2
 8006732:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	22ca      	movs	r2, #202	; 0xca
 800673c:	625a      	str	r2, [r3, #36]	; 0x24
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2253      	movs	r2, #83	; 0x53
 8006744:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	689a      	ldr	r2, [r3, #8]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f042 0220 	orr.w	r2, r2, #32
 8006754:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	22ff      	movs	r2, #255	; 0xff
 800675c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2201      	movs	r2, #1
 8006762:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <LL_RCC_GetUSARTClockSource>:
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8006784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006788:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4013      	ands	r3, r2
}
 8006790:	4618      	mov	r0, r3
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <LL_RCC_GetLPUARTClockSource>:
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80067a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4013      	ands	r3, r2
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d101      	bne.n	80067ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e042      	b.n	8006854 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d106      	bne.n	80067e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f7fc f9bb 	bl	8002b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2224      	movs	r2, #36	; 0x24
 80067ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f022 0201 	bic.w	r2, r2, #1
 80067fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006802:	2b00      	cmp	r3, #0
 8006804:	d002      	beq.n	800680c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 fe6a 	bl	80074e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 fc3f 	bl	8007090 <UART_SetConfig>
 8006812:	4603      	mov	r3, r0
 8006814:	2b01      	cmp	r3, #1
 8006816:	d101      	bne.n	800681c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e01b      	b.n	8006854 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	685a      	ldr	r2, [r3, #4]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800682a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	689a      	ldr	r2, [r3, #8]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800683a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f042 0201 	orr.w	r2, r2, #1
 800684a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 fee9 	bl	8007624 <UART_CheckIdleState>
 8006852:	4603      	mov	r3, r0
}
 8006854:	4618      	mov	r0, r3
 8006856:	3708      	adds	r7, #8
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800685c:	b480      	push	{r7}
 800685e:	b091      	sub	sp, #68	; 0x44
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	4613      	mov	r3, r2
 8006868:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006870:	2b20      	cmp	r3, #32
 8006872:	d178      	bne.n	8006966 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d002      	beq.n	8006880 <HAL_UART_Transmit_IT+0x24>
 800687a:	88fb      	ldrh	r3, [r7, #6]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d101      	bne.n	8006884 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	e071      	b.n	8006968 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	88fa      	ldrh	r2, [r7, #6]
 800688e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	88fa      	ldrh	r2, [r7, #6]
 8006896:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2221      	movs	r2, #33	; 0x21
 80068ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068b8:	d12a      	bne.n	8006910 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068c2:	d107      	bne.n	80068d4 <HAL_UART_Transmit_IT+0x78>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d103      	bne.n	80068d4 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	4a29      	ldr	r2, [pc, #164]	; (8006974 <HAL_UART_Transmit_IT+0x118>)
 80068d0:	679a      	str	r2, [r3, #120]	; 0x78
 80068d2:	e002      	b.n	80068da <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	4a28      	ldr	r2, [pc, #160]	; (8006978 <HAL_UART_Transmit_IT+0x11c>)
 80068d8:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	3308      	adds	r3, #8
 80068e0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e4:	e853 3f00 	ldrex	r3, [r3]
 80068e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80068f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	3308      	adds	r3, #8
 80068f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068fa:	637a      	str	r2, [r7, #52]	; 0x34
 80068fc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006900:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006902:	e841 2300 	strex	r3, r2, [r1]
 8006906:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1e5      	bne.n	80068da <HAL_UART_Transmit_IT+0x7e>
 800690e:	e028      	b.n	8006962 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006918:	d107      	bne.n	800692a <HAL_UART_Transmit_IT+0xce>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d103      	bne.n	800692a <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	4a15      	ldr	r2, [pc, #84]	; (800697c <HAL_UART_Transmit_IT+0x120>)
 8006926:	679a      	str	r2, [r3, #120]	; 0x78
 8006928:	e002      	b.n	8006930 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	4a14      	ldr	r2, [pc, #80]	; (8006980 <HAL_UART_Transmit_IT+0x124>)
 800692e:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	e853 3f00 	ldrex	r3, [r3]
 800693c:	613b      	str	r3, [r7, #16]
   return(result);
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006944:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	461a      	mov	r2, r3
 800694c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800694e:	623b      	str	r3, [r7, #32]
 8006950:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006952:	69f9      	ldr	r1, [r7, #28]
 8006954:	6a3a      	ldr	r2, [r7, #32]
 8006956:	e841 2300 	strex	r3, r2, [r1]
 800695a:	61bb      	str	r3, [r7, #24]
   return(result);
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1e6      	bne.n	8006930 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8006962:	2300      	movs	r3, #0
 8006964:	e000      	b.n	8006968 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006966:	2302      	movs	r3, #2
  }
}
 8006968:	4618      	mov	r0, r3
 800696a:	3744      	adds	r7, #68	; 0x44
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr
 8006974:	08007ddf 	.word	0x08007ddf
 8006978:	08007cff 	.word	0x08007cff
 800697c:	08007c3d 	.word	0x08007c3d
 8006980:	08007b85 	.word	0x08007b85

08006984 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b08a      	sub	sp, #40	; 0x28
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	4613      	mov	r3, r2
 8006990:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006998:	2b20      	cmp	r3, #32
 800699a:	d137      	bne.n	8006a0c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d002      	beq.n	80069a8 <HAL_UART_Receive_IT+0x24>
 80069a2:	88fb      	ldrh	r3, [r7, #6]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d101      	bne.n	80069ac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e030      	b.n	8006a0e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a18      	ldr	r2, [pc, #96]	; (8006a18 <HAL_UART_Receive_IT+0x94>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d01f      	beq.n	80069fc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d018      	beq.n	80069fc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	e853 3f00 	ldrex	r3, [r3]
 80069d6:	613b      	str	r3, [r7, #16]
   return(result);
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80069de:	627b      	str	r3, [r7, #36]	; 0x24
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	461a      	mov	r2, r3
 80069e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e8:	623b      	str	r3, [r7, #32]
 80069ea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ec:	69f9      	ldr	r1, [r7, #28]
 80069ee:	6a3a      	ldr	r2, [r7, #32]
 80069f0:	e841 2300 	strex	r3, r2, [r1]
 80069f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1e6      	bne.n	80069ca <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 80069fc:	88fb      	ldrh	r3, [r7, #6]
 80069fe:	461a      	mov	r2, r3
 8006a00:	68b9      	ldr	r1, [r7, #8]
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f000 ff20 	bl	8007848 <UART_Start_Receive_IT>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	e000      	b.n	8006a0e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006a0c:	2302      	movs	r3, #2
  }
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3728      	adds	r7, #40	; 0x28
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	40008000 	.word	0x40008000

08006a1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b0ba      	sub	sp, #232	; 0xe8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	69db      	ldr	r3, [r3, #28]
 8006a2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006a42:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006a46:	f640 030f 	movw	r3, #2063	; 0x80f
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006a50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d11b      	bne.n	8006a90 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a5c:	f003 0320 	and.w	r3, r3, #32
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d015      	beq.n	8006a90 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a68:	f003 0320 	and.w	r3, r3, #32
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d105      	bne.n	8006a7c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006a70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d009      	beq.n	8006a90 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f000 82e3 	beq.w	800704c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	4798      	blx	r3
      }
      return;
 8006a8e:	e2dd      	b.n	800704c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006a90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f000 8123 	beq.w	8006ce0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006a9a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006a9e:	4b8d      	ldr	r3, [pc, #564]	; (8006cd4 <HAL_UART_IRQHandler+0x2b8>)
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d106      	bne.n	8006ab4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006aa6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006aaa:	4b8b      	ldr	r3, [pc, #556]	; (8006cd8 <HAL_UART_IRQHandler+0x2bc>)
 8006aac:	4013      	ands	r3, r2
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f000 8116 	beq.w	8006ce0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ab8:	f003 0301 	and.w	r3, r3, #1
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d011      	beq.n	8006ae4 <HAL_UART_IRQHandler+0xc8>
 8006ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d00b      	beq.n	8006ae4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ada:	f043 0201 	orr.w	r2, r3, #1
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ae8:	f003 0302 	and.w	r3, r3, #2
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d011      	beq.n	8006b14 <HAL_UART_IRQHandler+0xf8>
 8006af0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006af4:	f003 0301 	and.w	r3, r3, #1
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00b      	beq.n	8006b14 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2202      	movs	r2, #2
 8006b02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b0a:	f043 0204 	orr.w	r2, r3, #4
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b18:	f003 0304 	and.w	r3, r3, #4
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d011      	beq.n	8006b44 <HAL_UART_IRQHandler+0x128>
 8006b20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b24:	f003 0301 	and.w	r3, r3, #1
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00b      	beq.n	8006b44 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2204      	movs	r2, #4
 8006b32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b3a:	f043 0202 	orr.w	r2, r3, #2
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b48:	f003 0308 	and.w	r3, r3, #8
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d017      	beq.n	8006b80 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b54:	f003 0320 	and.w	r3, r3, #32
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d105      	bne.n	8006b68 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006b5c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006b60:	4b5c      	ldr	r3, [pc, #368]	; (8006cd4 <HAL_UART_IRQHandler+0x2b8>)
 8006b62:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00b      	beq.n	8006b80 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2208      	movs	r2, #8
 8006b6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b76:	f043 0208 	orr.w	r2, r3, #8
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d012      	beq.n	8006bb2 <HAL_UART_IRQHandler+0x196>
 8006b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d00c      	beq.n	8006bb2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ba0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ba8:	f043 0220 	orr.w	r2, r3, #32
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f000 8249 	beq.w	8007050 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bc2:	f003 0320 	and.w	r3, r3, #32
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d013      	beq.n	8006bf2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006bca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bce:	f003 0320 	and.w	r3, r3, #32
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d105      	bne.n	8006be2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006bd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d007      	beq.n	8006bf2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d003      	beq.n	8006bf2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bf8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c06:	2b40      	cmp	r3, #64	; 0x40
 8006c08:	d005      	beq.n	8006c16 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006c0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c0e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d054      	beq.n	8006cc0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 ff38 	bl	8007a8c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c26:	2b40      	cmp	r3, #64	; 0x40
 8006c28:	d146      	bne.n	8006cb8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	3308      	adds	r3, #8
 8006c30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c38:	e853 3f00 	ldrex	r3, [r3]
 8006c3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006c40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	3308      	adds	r3, #8
 8006c52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006c56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006c5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006c62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006c66:	e841 2300 	strex	r3, r2, [r1]
 8006c6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006c6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1d9      	bne.n	8006c2a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d017      	beq.n	8006cb0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c86:	4a15      	ldr	r2, [pc, #84]	; (8006cdc <HAL_UART_IRQHandler+0x2c0>)
 8006c88:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7fd fc38 	bl	8004506 <HAL_DMA_Abort_IT>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d019      	beq.n	8006cd0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006caa:	4610      	mov	r0, r2
 8006cac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cae:	e00f      	b.n	8006cd0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 f9d7 	bl	8007064 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cb6:	e00b      	b.n	8006cd0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 f9d3 	bl	8007064 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cbe:	e007      	b.n	8006cd0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 f9cf 	bl	8007064 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006cce:	e1bf      	b.n	8007050 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cd0:	bf00      	nop
    return;
 8006cd2:	e1bd      	b.n	8007050 <HAL_UART_IRQHandler+0x634>
 8006cd4:	10000001 	.word	0x10000001
 8006cd8:	04000120 	.word	0x04000120
 8006cdc:	08007b59 	.word	0x08007b59

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	f040 8153 	bne.w	8006f90 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cee:	f003 0310 	and.w	r3, r3, #16
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f000 814c 	beq.w	8006f90 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cfc:	f003 0310 	and.w	r3, r3, #16
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f000 8145 	beq.w	8006f90 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2210      	movs	r2, #16
 8006d0c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d18:	2b40      	cmp	r3, #64	; 0x40
 8006d1a:	f040 80bb 	bne.w	8006e94 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	f000 818f 	beq.w	8007054 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d3c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d40:	429a      	cmp	r2, r3
 8006d42:	f080 8187 	bcs.w	8007054 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0320 	and.w	r3, r3, #32
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f040 8087 	bne.w	8006e72 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d70:	e853 3f00 	ldrex	r3, [r3]
 8006d74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006d78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	461a      	mov	r2, r3
 8006d8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006d92:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d96:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006d9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006d9e:	e841 2300 	strex	r3, r2, [r1]
 8006da2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006da6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d1da      	bne.n	8006d64 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	3308      	adds	r3, #8
 8006db4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006db8:	e853 3f00 	ldrex	r3, [r3]
 8006dbc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006dbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006dc0:	f023 0301 	bic.w	r3, r3, #1
 8006dc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	3308      	adds	r3, #8
 8006dce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006dd2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006dd6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006dda:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006dde:	e841 2300 	strex	r3, r2, [r1]
 8006de2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006de4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d1e1      	bne.n	8006dae <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	3308      	adds	r3, #8
 8006df0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006df4:	e853 3f00 	ldrex	r3, [r3]
 8006df8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006dfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	3308      	adds	r3, #8
 8006e0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006e0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006e10:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e12:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006e14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006e16:	e841 2300 	strex	r3, r2, [r1]
 8006e1a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006e1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1e3      	bne.n	8006dea <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2220      	movs	r2, #32
 8006e26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e38:	e853 3f00 	ldrex	r3, [r3]
 8006e3c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e40:	f023 0310 	bic.w	r3, r3, #16
 8006e44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e52:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e54:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e5a:	e841 2300 	strex	r3, r2, [r1]
 8006e5e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1e4      	bne.n	8006e30 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f7fd faeb 	bl	8004448 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2202      	movs	r2, #2
 8006e76:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	1ad3      	subs	r3, r2, r3
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 f8f3 	bl	8007078 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e92:	e0df      	b.n	8007054 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f000 80d1 	beq.w	8007058 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006eb6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	f000 80cc 	beq.w	8007058 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec8:	e853 3f00 	ldrex	r3, [r3]
 8006ecc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ed0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ed4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	461a      	mov	r2, r3
 8006ede:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ee2:	647b      	str	r3, [r7, #68]	; 0x44
 8006ee4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ee8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006eea:	e841 2300 	strex	r3, r2, [r1]
 8006eee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d1e4      	bne.n	8006ec0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	3308      	adds	r3, #8
 8006efc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f00:	e853 3f00 	ldrex	r3, [r3]
 8006f04:	623b      	str	r3, [r7, #32]
   return(result);
 8006f06:	6a3b      	ldr	r3, [r7, #32]
 8006f08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f0c:	f023 0301 	bic.w	r3, r3, #1
 8006f10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	3308      	adds	r3, #8
 8006f1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006f1e:	633a      	str	r2, [r7, #48]	; 0x30
 8006f20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f26:	e841 2300 	strex	r3, r2, [r1]
 8006f2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d1e1      	bne.n	8006ef6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2220      	movs	r2, #32
 8006f36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	e853 3f00 	ldrex	r3, [r3]
 8006f52:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f023 0310 	bic.w	r3, r3, #16
 8006f5a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	461a      	mov	r2, r3
 8006f64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006f68:	61fb      	str	r3, [r7, #28]
 8006f6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6c:	69b9      	ldr	r1, [r7, #24]
 8006f6e:	69fa      	ldr	r2, [r7, #28]
 8006f70:	e841 2300 	strex	r3, r2, [r1]
 8006f74:	617b      	str	r3, [r7, #20]
   return(result);
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d1e4      	bne.n	8006f46 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2202      	movs	r2, #2
 8006f80:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f86:	4619      	mov	r1, r3
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 f875 	bl	8007078 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f8e:	e063      	b.n	8007058 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d00e      	beq.n	8006fba <HAL_UART_IRQHandler+0x59e>
 8006f9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fa0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d008      	beq.n	8006fba <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006fb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f001 fcd0 	bl	8008958 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006fb8:	e051      	b.n	800705e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d014      	beq.n	8006ff0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006fc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d105      	bne.n	8006fde <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006fd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d008      	beq.n	8006ff0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d03a      	beq.n	800705c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	4798      	blx	r3
    }
    return;
 8006fee:	e035      	b.n	800705c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d009      	beq.n	8007010 <HAL_UART_IRQHandler+0x5f4>
 8006ffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007004:	2b00      	cmp	r3, #0
 8007006:	d003      	beq.n	8007010 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 ff5d 	bl	8007ec8 <UART_EndTransmit_IT>
    return;
 800700e:	e026      	b.n	800705e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007014:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007018:	2b00      	cmp	r3, #0
 800701a:	d009      	beq.n	8007030 <HAL_UART_IRQHandler+0x614>
 800701c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007020:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007024:	2b00      	cmp	r3, #0
 8007026:	d003      	beq.n	8007030 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f001 fca9 	bl	8008980 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800702e:	e016      	b.n	800705e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007034:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007038:	2b00      	cmp	r3, #0
 800703a:	d010      	beq.n	800705e <HAL_UART_IRQHandler+0x642>
 800703c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007040:	2b00      	cmp	r3, #0
 8007042:	da0c      	bge.n	800705e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f001 fc91 	bl	800896c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800704a:	e008      	b.n	800705e <HAL_UART_IRQHandler+0x642>
      return;
 800704c:	bf00      	nop
 800704e:	e006      	b.n	800705e <HAL_UART_IRQHandler+0x642>
    return;
 8007050:	bf00      	nop
 8007052:	e004      	b.n	800705e <HAL_UART_IRQHandler+0x642>
      return;
 8007054:	bf00      	nop
 8007056:	e002      	b.n	800705e <HAL_UART_IRQHandler+0x642>
      return;
 8007058:	bf00      	nop
 800705a:	e000      	b.n	800705e <HAL_UART_IRQHandler+0x642>
    return;
 800705c:	bf00      	nop
  }
}
 800705e:	37e8      	adds	r7, #232	; 0xe8
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800706c:	bf00      	nop
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	460b      	mov	r3, r1
 8007082:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007084:	bf00      	nop
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007094:	b08c      	sub	sp, #48	; 0x30
 8007096:	af00      	add	r7, sp, #0
 8007098:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800709a:	2300      	movs	r3, #0
 800709c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	689a      	ldr	r2, [r3, #8]
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	691b      	ldr	r3, [r3, #16]
 80070a8:	431a      	orrs	r2, r3
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	695b      	ldr	r3, [r3, #20]
 80070ae:	431a      	orrs	r2, r3
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	69db      	ldr	r3, [r3, #28]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	4baf      	ldr	r3, [pc, #700]	; (800737c <UART_SetConfig+0x2ec>)
 80070c0:	4013      	ands	r3, r2
 80070c2:	697a      	ldr	r2, [r7, #20]
 80070c4:	6812      	ldr	r2, [r2, #0]
 80070c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070c8:	430b      	orrs	r3, r1
 80070ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	68da      	ldr	r2, [r3, #12]
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	430a      	orrs	r2, r1
 80070e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	699b      	ldr	r3, [r3, #24]
 80070e6:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4aa4      	ldr	r2, [pc, #656]	; (8007380 <UART_SetConfig+0x2f0>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d004      	beq.n	80070fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	6a1b      	ldr	r3, [r3, #32]
 80070f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070f8:	4313      	orrs	r3, r2
 80070fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007106:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800710a:	697a      	ldr	r2, [r7, #20]
 800710c:	6812      	ldr	r2, [r2, #0]
 800710e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007110:	430b      	orrs	r3, r1
 8007112:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711a:	f023 010f 	bic.w	r1, r3, #15
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	430a      	orrs	r2, r1
 8007128:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a95      	ldr	r2, [pc, #596]	; (8007384 <UART_SetConfig+0x2f4>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d125      	bne.n	8007180 <UART_SetConfig+0xf0>
 8007134:	2003      	movs	r0, #3
 8007136:	f7ff fb21 	bl	800677c <LL_RCC_GetUSARTClockSource>
 800713a:	4603      	mov	r3, r0
 800713c:	2b03      	cmp	r3, #3
 800713e:	d81b      	bhi.n	8007178 <UART_SetConfig+0xe8>
 8007140:	a201      	add	r2, pc, #4	; (adr r2, 8007148 <UART_SetConfig+0xb8>)
 8007142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007146:	bf00      	nop
 8007148:	08007159 	.word	0x08007159
 800714c:	08007169 	.word	0x08007169
 8007150:	08007161 	.word	0x08007161
 8007154:	08007171 	.word	0x08007171
 8007158:	2301      	movs	r3, #1
 800715a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800715e:	e042      	b.n	80071e6 <UART_SetConfig+0x156>
 8007160:	2302      	movs	r3, #2
 8007162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007166:	e03e      	b.n	80071e6 <UART_SetConfig+0x156>
 8007168:	2304      	movs	r3, #4
 800716a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800716e:	e03a      	b.n	80071e6 <UART_SetConfig+0x156>
 8007170:	2308      	movs	r3, #8
 8007172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007176:	e036      	b.n	80071e6 <UART_SetConfig+0x156>
 8007178:	2310      	movs	r3, #16
 800717a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800717e:	e032      	b.n	80071e6 <UART_SetConfig+0x156>
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a7e      	ldr	r2, [pc, #504]	; (8007380 <UART_SetConfig+0x2f0>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d12a      	bne.n	80071e0 <UART_SetConfig+0x150>
 800718a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800718e:	f7ff fb05 	bl	800679c <LL_RCC_GetLPUARTClockSource>
 8007192:	4603      	mov	r3, r0
 8007194:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007198:	d01a      	beq.n	80071d0 <UART_SetConfig+0x140>
 800719a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800719e:	d81b      	bhi.n	80071d8 <UART_SetConfig+0x148>
 80071a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071a4:	d00c      	beq.n	80071c0 <UART_SetConfig+0x130>
 80071a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071aa:	d815      	bhi.n	80071d8 <UART_SetConfig+0x148>
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d003      	beq.n	80071b8 <UART_SetConfig+0x128>
 80071b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071b4:	d008      	beq.n	80071c8 <UART_SetConfig+0x138>
 80071b6:	e00f      	b.n	80071d8 <UART_SetConfig+0x148>
 80071b8:	2300      	movs	r3, #0
 80071ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071be:	e012      	b.n	80071e6 <UART_SetConfig+0x156>
 80071c0:	2302      	movs	r3, #2
 80071c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071c6:	e00e      	b.n	80071e6 <UART_SetConfig+0x156>
 80071c8:	2304      	movs	r3, #4
 80071ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071ce:	e00a      	b.n	80071e6 <UART_SetConfig+0x156>
 80071d0:	2308      	movs	r3, #8
 80071d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071d6:	e006      	b.n	80071e6 <UART_SetConfig+0x156>
 80071d8:	2310      	movs	r3, #16
 80071da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071de:	e002      	b.n	80071e6 <UART_SetConfig+0x156>
 80071e0:	2310      	movs	r3, #16
 80071e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a65      	ldr	r2, [pc, #404]	; (8007380 <UART_SetConfig+0x2f0>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	f040 8097 	bne.w	8007320 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80071f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80071f6:	2b08      	cmp	r3, #8
 80071f8:	d823      	bhi.n	8007242 <UART_SetConfig+0x1b2>
 80071fa:	a201      	add	r2, pc, #4	; (adr r2, 8007200 <UART_SetConfig+0x170>)
 80071fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007200:	08007225 	.word	0x08007225
 8007204:	08007243 	.word	0x08007243
 8007208:	0800722d 	.word	0x0800722d
 800720c:	08007243 	.word	0x08007243
 8007210:	08007233 	.word	0x08007233
 8007214:	08007243 	.word	0x08007243
 8007218:	08007243 	.word	0x08007243
 800721c:	08007243 	.word	0x08007243
 8007220:	0800723b 	.word	0x0800723b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007224:	f7fe fdc0 	bl	8005da8 <HAL_RCC_GetPCLK1Freq>
 8007228:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800722a:	e010      	b.n	800724e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800722c:	4b56      	ldr	r3, [pc, #344]	; (8007388 <UART_SetConfig+0x2f8>)
 800722e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007230:	e00d      	b.n	800724e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007232:	f7fe fd39 	bl	8005ca8 <HAL_RCC_GetSysClockFreq>
 8007236:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007238:	e009      	b.n	800724e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800723a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800723e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007240:	e005      	b.n	800724e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8007242:	2300      	movs	r3, #0
 8007244:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800724c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800724e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007250:	2b00      	cmp	r3, #0
 8007252:	f000 812b 	beq.w	80074ac <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725a:	4a4c      	ldr	r2, [pc, #304]	; (800738c <UART_SetConfig+0x2fc>)
 800725c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007260:	461a      	mov	r2, r3
 8007262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007264:	fbb3 f3f2 	udiv	r3, r3, r2
 8007268:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	685a      	ldr	r2, [r3, #4]
 800726e:	4613      	mov	r3, r2
 8007270:	005b      	lsls	r3, r3, #1
 8007272:	4413      	add	r3, r2
 8007274:	69ba      	ldr	r2, [r7, #24]
 8007276:	429a      	cmp	r2, r3
 8007278:	d305      	bcc.n	8007286 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007280:	69ba      	ldr	r2, [r7, #24]
 8007282:	429a      	cmp	r2, r3
 8007284:	d903      	bls.n	800728e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800728c:	e10e      	b.n	80074ac <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800728e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007290:	2200      	movs	r2, #0
 8007292:	60bb      	str	r3, [r7, #8]
 8007294:	60fa      	str	r2, [r7, #12]
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729a:	4a3c      	ldr	r2, [pc, #240]	; (800738c <UART_SetConfig+0x2fc>)
 800729c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	2200      	movs	r2, #0
 80072a4:	603b      	str	r3, [r7, #0]
 80072a6:	607a      	str	r2, [r7, #4]
 80072a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80072b0:	f7f9 fc62 	bl	8000b78 <__aeabi_uldivmod>
 80072b4:	4602      	mov	r2, r0
 80072b6:	460b      	mov	r3, r1
 80072b8:	4610      	mov	r0, r2
 80072ba:	4619      	mov	r1, r3
 80072bc:	f04f 0200 	mov.w	r2, #0
 80072c0:	f04f 0300 	mov.w	r3, #0
 80072c4:	020b      	lsls	r3, r1, #8
 80072c6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80072ca:	0202      	lsls	r2, r0, #8
 80072cc:	6979      	ldr	r1, [r7, #20]
 80072ce:	6849      	ldr	r1, [r1, #4]
 80072d0:	0849      	lsrs	r1, r1, #1
 80072d2:	2000      	movs	r0, #0
 80072d4:	460c      	mov	r4, r1
 80072d6:	4605      	mov	r5, r0
 80072d8:	eb12 0804 	adds.w	r8, r2, r4
 80072dc:	eb43 0905 	adc.w	r9, r3, r5
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	469a      	mov	sl, r3
 80072e8:	4693      	mov	fp, r2
 80072ea:	4652      	mov	r2, sl
 80072ec:	465b      	mov	r3, fp
 80072ee:	4640      	mov	r0, r8
 80072f0:	4649      	mov	r1, r9
 80072f2:	f7f9 fc41 	bl	8000b78 <__aeabi_uldivmod>
 80072f6:	4602      	mov	r2, r0
 80072f8:	460b      	mov	r3, r1
 80072fa:	4613      	mov	r3, r2
 80072fc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80072fe:	6a3b      	ldr	r3, [r7, #32]
 8007300:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007304:	d308      	bcc.n	8007318 <UART_SetConfig+0x288>
 8007306:	6a3b      	ldr	r3, [r7, #32]
 8007308:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800730c:	d204      	bcs.n	8007318 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	6a3a      	ldr	r2, [r7, #32]
 8007314:	60da      	str	r2, [r3, #12]
 8007316:	e0c9      	b.n	80074ac <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800731e:	e0c5      	b.n	80074ac <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	69db      	ldr	r3, [r3, #28]
 8007324:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007328:	d16d      	bne.n	8007406 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800732a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800732e:	3b01      	subs	r3, #1
 8007330:	2b07      	cmp	r3, #7
 8007332:	d82d      	bhi.n	8007390 <UART_SetConfig+0x300>
 8007334:	a201      	add	r2, pc, #4	; (adr r2, 800733c <UART_SetConfig+0x2ac>)
 8007336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800733a:	bf00      	nop
 800733c:	0800735d 	.word	0x0800735d
 8007340:	08007365 	.word	0x08007365
 8007344:	08007391 	.word	0x08007391
 8007348:	0800736b 	.word	0x0800736b
 800734c:	08007391 	.word	0x08007391
 8007350:	08007391 	.word	0x08007391
 8007354:	08007391 	.word	0x08007391
 8007358:	08007373 	.word	0x08007373
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800735c:	f7fe fd3a 	bl	8005dd4 <HAL_RCC_GetPCLK2Freq>
 8007360:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007362:	e01b      	b.n	800739c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007364:	4b08      	ldr	r3, [pc, #32]	; (8007388 <UART_SetConfig+0x2f8>)
 8007366:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007368:	e018      	b.n	800739c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800736a:	f7fe fc9d 	bl	8005ca8 <HAL_RCC_GetSysClockFreq>
 800736e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007370:	e014      	b.n	800739c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007372:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007376:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007378:	e010      	b.n	800739c <UART_SetConfig+0x30c>
 800737a:	bf00      	nop
 800737c:	cfff69f3 	.word	0xcfff69f3
 8007380:	40008000 	.word	0x40008000
 8007384:	40013800 	.word	0x40013800
 8007388:	00f42400 	.word	0x00f42400
 800738c:	0800c7c4 	.word	0x0800c7c4
      default:
        pclk = 0U;
 8007390:	2300      	movs	r3, #0
 8007392:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800739a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800739c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739e:	2b00      	cmp	r3, #0
 80073a0:	f000 8084 	beq.w	80074ac <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a8:	4a4b      	ldr	r2, [pc, #300]	; (80074d8 <UART_SetConfig+0x448>)
 80073aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073ae:	461a      	mov	r2, r3
 80073b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80073b6:	005a      	lsls	r2, r3, #1
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	085b      	lsrs	r3, r3, #1
 80073be:	441a      	add	r2, r3
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073c8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073ca:	6a3b      	ldr	r3, [r7, #32]
 80073cc:	2b0f      	cmp	r3, #15
 80073ce:	d916      	bls.n	80073fe <UART_SetConfig+0x36e>
 80073d0:	6a3b      	ldr	r3, [r7, #32]
 80073d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073d6:	d212      	bcs.n	80073fe <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073d8:	6a3b      	ldr	r3, [r7, #32]
 80073da:	b29b      	uxth	r3, r3
 80073dc:	f023 030f 	bic.w	r3, r3, #15
 80073e0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073e2:	6a3b      	ldr	r3, [r7, #32]
 80073e4:	085b      	lsrs	r3, r3, #1
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	f003 0307 	and.w	r3, r3, #7
 80073ec:	b29a      	uxth	r2, r3
 80073ee:	8bfb      	ldrh	r3, [r7, #30]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	8bfa      	ldrh	r2, [r7, #30]
 80073fa:	60da      	str	r2, [r3, #12]
 80073fc:	e056      	b.n	80074ac <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007404:	e052      	b.n	80074ac <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007406:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800740a:	3b01      	subs	r3, #1
 800740c:	2b07      	cmp	r3, #7
 800740e:	d822      	bhi.n	8007456 <UART_SetConfig+0x3c6>
 8007410:	a201      	add	r2, pc, #4	; (adr r2, 8007418 <UART_SetConfig+0x388>)
 8007412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007416:	bf00      	nop
 8007418:	08007439 	.word	0x08007439
 800741c:	08007441 	.word	0x08007441
 8007420:	08007457 	.word	0x08007457
 8007424:	08007447 	.word	0x08007447
 8007428:	08007457 	.word	0x08007457
 800742c:	08007457 	.word	0x08007457
 8007430:	08007457 	.word	0x08007457
 8007434:	0800744f 	.word	0x0800744f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007438:	f7fe fccc 	bl	8005dd4 <HAL_RCC_GetPCLK2Freq>
 800743c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800743e:	e010      	b.n	8007462 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007440:	4b26      	ldr	r3, [pc, #152]	; (80074dc <UART_SetConfig+0x44c>)
 8007442:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007444:	e00d      	b.n	8007462 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007446:	f7fe fc2f 	bl	8005ca8 <HAL_RCC_GetSysClockFreq>
 800744a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800744c:	e009      	b.n	8007462 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800744e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007452:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007454:	e005      	b.n	8007462 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8007456:	2300      	movs	r3, #0
 8007458:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007460:	bf00      	nop
    }

    if (pclk != 0U)
 8007462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007464:	2b00      	cmp	r3, #0
 8007466:	d021      	beq.n	80074ac <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746c:	4a1a      	ldr	r2, [pc, #104]	; (80074d8 <UART_SetConfig+0x448>)
 800746e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007472:	461a      	mov	r2, r3
 8007474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007476:	fbb3 f2f2 	udiv	r2, r3, r2
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	085b      	lsrs	r3, r3, #1
 8007480:	441a      	add	r2, r3
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	fbb2 f3f3 	udiv	r3, r2, r3
 800748a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800748c:	6a3b      	ldr	r3, [r7, #32]
 800748e:	2b0f      	cmp	r3, #15
 8007490:	d909      	bls.n	80074a6 <UART_SetConfig+0x416>
 8007492:	6a3b      	ldr	r3, [r7, #32]
 8007494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007498:	d205      	bcs.n	80074a6 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800749a:	6a3b      	ldr	r3, [r7, #32]
 800749c:	b29a      	uxth	r2, r3
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	60da      	str	r2, [r3, #12]
 80074a4:	e002      	b.n	80074ac <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	2201      	movs	r2, #1
 80074b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	2200      	movs	r2, #0
 80074c0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	2200      	movs	r2, #0
 80074c6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80074c8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3730      	adds	r7, #48	; 0x30
 80074d0:	46bd      	mov	sp, r7
 80074d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074d6:	bf00      	nop
 80074d8:	0800c7c4 	.word	0x0800c7c4
 80074dc:	00f42400 	.word	0x00f42400

080074e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ec:	f003 0308 	and.w	r3, r3, #8
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d00a      	beq.n	800750a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	430a      	orrs	r2, r1
 8007508:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800750e:	f003 0301 	and.w	r3, r3, #1
 8007512:	2b00      	cmp	r3, #0
 8007514:	d00a      	beq.n	800752c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	430a      	orrs	r2, r1
 800752a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007530:	f003 0302 	and.w	r3, r3, #2
 8007534:	2b00      	cmp	r3, #0
 8007536:	d00a      	beq.n	800754e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	430a      	orrs	r2, r1
 800754c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007552:	f003 0304 	and.w	r3, r3, #4
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00a      	beq.n	8007570 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	430a      	orrs	r2, r1
 800756e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007574:	f003 0310 	and.w	r3, r3, #16
 8007578:	2b00      	cmp	r3, #0
 800757a:	d00a      	beq.n	8007592 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	430a      	orrs	r2, r1
 8007590:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007596:	f003 0320 	and.w	r3, r3, #32
 800759a:	2b00      	cmp	r3, #0
 800759c:	d00a      	beq.n	80075b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	430a      	orrs	r2, r1
 80075b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d01a      	beq.n	80075f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	430a      	orrs	r2, r1
 80075d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075de:	d10a      	bne.n	80075f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	430a      	orrs	r2, r1
 80075f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00a      	beq.n	8007618 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	430a      	orrs	r2, r1
 8007616:	605a      	str	r2, [r3, #4]
  }
}
 8007618:	bf00      	nop
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b098      	sub	sp, #96	; 0x60
 8007628:	af02      	add	r7, sp, #8
 800762a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007634:	f7fc fc98 	bl	8003f68 <HAL_GetTick>
 8007638:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 0308 	and.w	r3, r3, #8
 8007644:	2b08      	cmp	r3, #8
 8007646:	d12f      	bne.n	80076a8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007648:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800764c:	9300      	str	r3, [sp, #0]
 800764e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007650:	2200      	movs	r2, #0
 8007652:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 f88e 	bl	8007778 <UART_WaitOnFlagUntilTimeout>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d022      	beq.n	80076a8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800766a:	e853 3f00 	ldrex	r3, [r3]
 800766e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007672:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007676:	653b      	str	r3, [r7, #80]	; 0x50
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	461a      	mov	r2, r3
 800767e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007680:	647b      	str	r3, [r7, #68]	; 0x44
 8007682:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007684:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007686:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007688:	e841 2300 	strex	r3, r2, [r1]
 800768c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800768e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007690:	2b00      	cmp	r3, #0
 8007692:	d1e6      	bne.n	8007662 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2220      	movs	r2, #32
 8007698:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076a4:	2303      	movs	r3, #3
 80076a6:	e063      	b.n	8007770 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 0304 	and.w	r3, r3, #4
 80076b2:	2b04      	cmp	r3, #4
 80076b4:	d149      	bne.n	800774a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80076ba:	9300      	str	r3, [sp, #0]
 80076bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076be:	2200      	movs	r2, #0
 80076c0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 f857 	bl	8007778 <UART_WaitOnFlagUntilTimeout>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d03c      	beq.n	800774a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d8:	e853 3f00 	ldrex	r3, [r3]
 80076dc:	623b      	str	r3, [r7, #32]
   return(result);
 80076de:	6a3b      	ldr	r3, [r7, #32]
 80076e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	461a      	mov	r2, r3
 80076ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076ee:	633b      	str	r3, [r7, #48]	; 0x30
 80076f0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076f6:	e841 2300 	strex	r3, r2, [r1]
 80076fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d1e6      	bne.n	80076d0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	3308      	adds	r3, #8
 8007708:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	e853 3f00 	ldrex	r3, [r3]
 8007710:	60fb      	str	r3, [r7, #12]
   return(result);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f023 0301 	bic.w	r3, r3, #1
 8007718:	64bb      	str	r3, [r7, #72]	; 0x48
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	3308      	adds	r3, #8
 8007720:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007722:	61fa      	str	r2, [r7, #28]
 8007724:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007726:	69b9      	ldr	r1, [r7, #24]
 8007728:	69fa      	ldr	r2, [r7, #28]
 800772a:	e841 2300 	strex	r3, r2, [r1]
 800772e:	617b      	str	r3, [r7, #20]
   return(result);
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1e5      	bne.n	8007702 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2220      	movs	r2, #32
 800773a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007746:	2303      	movs	r3, #3
 8007748:	e012      	b.n	8007770 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2220      	movs	r2, #32
 800774e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2220      	movs	r2, #32
 8007756:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800776e:	2300      	movs	r3, #0
}
 8007770:	4618      	mov	r0, r3
 8007772:	3758      	adds	r7, #88	; 0x58
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	603b      	str	r3, [r7, #0]
 8007784:	4613      	mov	r3, r2
 8007786:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007788:	e049      	b.n	800781e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007790:	d045      	beq.n	800781e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007792:	f7fc fbe9 	bl	8003f68 <HAL_GetTick>
 8007796:	4602      	mov	r2, r0
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	1ad3      	subs	r3, r2, r3
 800779c:	69ba      	ldr	r2, [r7, #24]
 800779e:	429a      	cmp	r2, r3
 80077a0:	d302      	bcc.n	80077a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80077a2:	69bb      	ldr	r3, [r7, #24]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d101      	bne.n	80077ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80077a8:	2303      	movs	r3, #3
 80077aa:	e048      	b.n	800783e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f003 0304 	and.w	r3, r3, #4
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d031      	beq.n	800781e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	69db      	ldr	r3, [r3, #28]
 80077c0:	f003 0308 	and.w	r3, r3, #8
 80077c4:	2b08      	cmp	r3, #8
 80077c6:	d110      	bne.n	80077ea <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	2208      	movs	r2, #8
 80077ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f000 f95b 	bl	8007a8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2208      	movs	r2, #8
 80077da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e029      	b.n	800783e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	69db      	ldr	r3, [r3, #28]
 80077f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077f8:	d111      	bne.n	800781e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007802:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007804:	68f8      	ldr	r0, [r7, #12]
 8007806:	f000 f941 	bl	8007a8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2220      	movs	r2, #32
 800780e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2200      	movs	r2, #0
 8007816:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800781a:	2303      	movs	r3, #3
 800781c:	e00f      	b.n	800783e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	69da      	ldr	r2, [r3, #28]
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	4013      	ands	r3, r2
 8007828:	68ba      	ldr	r2, [r7, #8]
 800782a:	429a      	cmp	r2, r3
 800782c:	bf0c      	ite	eq
 800782e:	2301      	moveq	r3, #1
 8007830:	2300      	movne	r3, #0
 8007832:	b2db      	uxtb	r3, r3
 8007834:	461a      	mov	r2, r3
 8007836:	79fb      	ldrb	r3, [r7, #7]
 8007838:	429a      	cmp	r2, r3
 800783a:	d0a6      	beq.n	800778a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3710      	adds	r7, #16
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
	...

08007848 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007848:	b480      	push	{r7}
 800784a:	b0a3      	sub	sp, #140	; 0x8c
 800784c:	af00      	add	r7, sp, #0
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	60b9      	str	r1, [r7, #8]
 8007852:	4613      	mov	r3, r2
 8007854:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	68ba      	ldr	r2, [r7, #8]
 800785a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	88fa      	ldrh	r2, [r7, #6]
 8007860:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	88fa      	ldrh	r2, [r7, #6]
 8007868:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800787a:	d10e      	bne.n	800789a <UART_Start_Receive_IT+0x52>
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	691b      	ldr	r3, [r3, #16]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d105      	bne.n	8007890 <UART_Start_Receive_IT+0x48>
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f240 12ff 	movw	r2, #511	; 0x1ff
 800788a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800788e:	e02d      	b.n	80078ec <UART_Start_Receive_IT+0xa4>
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	22ff      	movs	r2, #255	; 0xff
 8007894:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007898:	e028      	b.n	80078ec <UART_Start_Receive_IT+0xa4>
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d10d      	bne.n	80078be <UART_Start_Receive_IT+0x76>
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d104      	bne.n	80078b4 <UART_Start_Receive_IT+0x6c>
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	22ff      	movs	r2, #255	; 0xff
 80078ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80078b2:	e01b      	b.n	80078ec <UART_Start_Receive_IT+0xa4>
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	227f      	movs	r2, #127	; 0x7f
 80078b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80078bc:	e016      	b.n	80078ec <UART_Start_Receive_IT+0xa4>
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078c6:	d10d      	bne.n	80078e4 <UART_Start_Receive_IT+0x9c>
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	691b      	ldr	r3, [r3, #16]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d104      	bne.n	80078da <UART_Start_Receive_IT+0x92>
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	227f      	movs	r2, #127	; 0x7f
 80078d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80078d8:	e008      	b.n	80078ec <UART_Start_Receive_IT+0xa4>
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	223f      	movs	r2, #63	; 0x3f
 80078de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80078e2:	e003      	b.n	80078ec <UART_Start_Receive_IT+0xa4>
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2222      	movs	r2, #34	; 0x22
 80078f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	3308      	adds	r3, #8
 8007902:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007904:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007906:	e853 3f00 	ldrex	r3, [r3]
 800790a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800790c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800790e:	f043 0301 	orr.w	r3, r3, #1
 8007912:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	3308      	adds	r3, #8
 800791c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007920:	673a      	str	r2, [r7, #112]	; 0x70
 8007922:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007924:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007926:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007928:	e841 2300 	strex	r3, r2, [r1]
 800792c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800792e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007930:	2b00      	cmp	r3, #0
 8007932:	d1e3      	bne.n	80078fc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007938:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800793c:	d14f      	bne.n	80079de <UART_Start_Receive_IT+0x196>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007944:	88fa      	ldrh	r2, [r7, #6]
 8007946:	429a      	cmp	r2, r3
 8007948:	d349      	bcc.n	80079de <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007952:	d107      	bne.n	8007964 <UART_Start_Receive_IT+0x11c>
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	691b      	ldr	r3, [r3, #16]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d103      	bne.n	8007964 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	4a47      	ldr	r2, [pc, #284]	; (8007a7c <UART_Start_Receive_IT+0x234>)
 8007960:	675a      	str	r2, [r3, #116]	; 0x74
 8007962:	e002      	b.n	800796a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	4a46      	ldr	r2, [pc, #280]	; (8007a80 <UART_Start_Receive_IT+0x238>)
 8007968:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d01a      	beq.n	80079a8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007978:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800797a:	e853 3f00 	ldrex	r3, [r3]
 800797e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007986:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	461a      	mov	r2, r3
 8007990:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007994:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007996:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007998:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800799a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800799c:	e841 2300 	strex	r3, r2, [r1]
 80079a0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80079a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d1e4      	bne.n	8007972 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	3308      	adds	r3, #8
 80079ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079b2:	e853 3f00 	ldrex	r3, [r3]
 80079b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	3308      	adds	r3, #8
 80079c6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80079c8:	64ba      	str	r2, [r7, #72]	; 0x48
 80079ca:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80079ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079d0:	e841 2300 	strex	r3, r2, [r1]
 80079d4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80079d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d1e5      	bne.n	80079a8 <UART_Start_Receive_IT+0x160>
 80079dc:	e046      	b.n	8007a6c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079e6:	d107      	bne.n	80079f8 <UART_Start_Receive_IT+0x1b0>
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	691b      	ldr	r3, [r3, #16]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d103      	bne.n	80079f8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	4a24      	ldr	r2, [pc, #144]	; (8007a84 <UART_Start_Receive_IT+0x23c>)
 80079f4:	675a      	str	r2, [r3, #116]	; 0x74
 80079f6:	e002      	b.n	80079fe <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	4a23      	ldr	r2, [pc, #140]	; (8007a88 <UART_Start_Receive_IT+0x240>)
 80079fc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d019      	beq.n	8007a3a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0e:	e853 3f00 	ldrex	r3, [r3]
 8007a12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a16:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007a1a:	677b      	str	r3, [r7, #116]	; 0x74
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	461a      	mov	r2, r3
 8007a22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a24:	637b      	str	r3, [r7, #52]	; 0x34
 8007a26:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a2c:	e841 2300 	strex	r3, r2, [r1]
 8007a30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d1e6      	bne.n	8007a06 <UART_Start_Receive_IT+0x1be>
 8007a38:	e018      	b.n	8007a6c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	e853 3f00 	ldrex	r3, [r3]
 8007a46:	613b      	str	r3, [r7, #16]
   return(result);
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	f043 0320 	orr.w	r3, r3, #32
 8007a4e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	461a      	mov	r2, r3
 8007a56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a58:	623b      	str	r3, [r7, #32]
 8007a5a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a5c:	69f9      	ldr	r1, [r7, #28]
 8007a5e:	6a3a      	ldr	r2, [r7, #32]
 8007a60:	e841 2300 	strex	r3, r2, [r1]
 8007a64:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d1e6      	bne.n	8007a3a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	378c      	adds	r7, #140	; 0x8c
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop
 8007a7c:	080085f1 	.word	0x080085f1
 8007a80:	08008291 	.word	0x08008291
 8007a84:	080080d9 	.word	0x080080d9
 8007a88:	08007f21 	.word	0x08007f21

08007a8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b095      	sub	sp, #84	; 0x54
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a9c:	e853 3f00 	ldrex	r3, [r3]
 8007aa0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007aa8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	461a      	mov	r2, r3
 8007ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ab2:	643b      	str	r3, [r7, #64]	; 0x40
 8007ab4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ab8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007aba:	e841 2300 	strex	r3, r2, [r1]
 8007abe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1e6      	bne.n	8007a94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	3308      	adds	r3, #8
 8007acc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ace:	6a3b      	ldr	r3, [r7, #32]
 8007ad0:	e853 3f00 	ldrex	r3, [r3]
 8007ad4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007adc:	f023 0301 	bic.w	r3, r3, #1
 8007ae0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	3308      	adds	r3, #8
 8007ae8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007aea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007aec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007af0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007af2:	e841 2300 	strex	r3, r2, [r1]
 8007af6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d1e3      	bne.n	8007ac6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d118      	bne.n	8007b38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	e853 3f00 	ldrex	r3, [r3]
 8007b12:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	f023 0310 	bic.w	r3, r3, #16
 8007b1a:	647b      	str	r3, [r7, #68]	; 0x44
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	461a      	mov	r2, r3
 8007b22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b24:	61bb      	str	r3, [r7, #24]
 8007b26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b28:	6979      	ldr	r1, [r7, #20]
 8007b2a:	69ba      	ldr	r2, [r7, #24]
 8007b2c:	e841 2300 	strex	r3, r2, [r1]
 8007b30:	613b      	str	r3, [r7, #16]
   return(result);
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d1e6      	bne.n	8007b06 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2220      	movs	r2, #32
 8007b3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007b4c:	bf00      	nop
 8007b4e:	3754      	adds	r7, #84	; 0x54
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f7ff fa74 	bl	8007064 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b7c:	bf00      	nop
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b08f      	sub	sp, #60	; 0x3c
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b92:	2b21      	cmp	r3, #33	; 0x21
 8007b94:	d14c      	bne.n	8007c30 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d132      	bne.n	8007c08 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba8:	6a3b      	ldr	r3, [r7, #32]
 8007baa:	e853 3f00 	ldrex	r3, [r3]
 8007bae:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bb6:	637b      	str	r3, [r7, #52]	; 0x34
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bc2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bc8:	e841 2300 	strex	r3, r2, [r1]
 8007bcc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d1e6      	bne.n	8007ba2 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	e853 3f00 	ldrex	r3, [r3]
 8007be0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007be8:	633b      	str	r3, [r7, #48]	; 0x30
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	461a      	mov	r2, r3
 8007bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf2:	61bb      	str	r3, [r7, #24]
 8007bf4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf6:	6979      	ldr	r1, [r7, #20]
 8007bf8:	69ba      	ldr	r2, [r7, #24]
 8007bfa:	e841 2300 	strex	r3, r2, [r1]
 8007bfe:	613b      	str	r3, [r7, #16]
   return(result);
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d1e6      	bne.n	8007bd4 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007c06:	e013      	b.n	8007c30 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c0c:	781a      	ldrb	r2, [r3, #0]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c18:	1c5a      	adds	r2, r3, #1
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	3b01      	subs	r3, #1
 8007c28:	b29a      	uxth	r2, r3
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8007c30:	bf00      	nop
 8007c32:	373c      	adds	r7, #60	; 0x3c
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b091      	sub	sp, #68	; 0x44
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c4a:	2b21      	cmp	r3, #33	; 0x21
 8007c4c:	d151      	bne.n	8007cf2 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d132      	bne.n	8007cc0 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c62:	e853 3f00 	ldrex	r3, [r3]
 8007c66:	623b      	str	r3, [r7, #32]
   return(result);
 8007c68:	6a3b      	ldr	r3, [r7, #32]
 8007c6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	461a      	mov	r2, r3
 8007c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c78:	633b      	str	r3, [r7, #48]	; 0x30
 8007c7a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c80:	e841 2300 	strex	r3, r2, [r1]
 8007c84:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d1e6      	bne.n	8007c5a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	e853 3f00 	ldrex	r3, [r3]
 8007c98:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ca0:	637b      	str	r3, [r7, #52]	; 0x34
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007caa:	61fb      	str	r3, [r7, #28]
 8007cac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cae:	69b9      	ldr	r1, [r7, #24]
 8007cb0:	69fa      	ldr	r2, [r7, #28]
 8007cb2:	e841 2300 	strex	r3, r2, [r1]
 8007cb6:	617b      	str	r3, [r7, #20]
   return(result);
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d1e6      	bne.n	8007c8c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007cbe:	e018      	b.n	8007cf2 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cc8:	881b      	ldrh	r3, [r3, #0]
 8007cca:	461a      	mov	r2, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007cd4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cda:	1c9a      	adds	r2, r3, #2
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8007cf2:	bf00      	nop
 8007cf4:	3744      	adds	r7, #68	; 0x44
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr

08007cfe <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007cfe:	b480      	push	{r7}
 8007d00:	b091      	sub	sp, #68	; 0x44
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d0c:	2b21      	cmp	r3, #33	; 0x21
 8007d0e:	d160      	bne.n	8007dd2 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007d16:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007d18:	e057      	b.n	8007dca <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d133      	bne.n	8007d8e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	3308      	adds	r3, #8
 8007d2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d30:	e853 3f00 	ldrex	r3, [r3]
 8007d34:	623b      	str	r3, [r7, #32]
   return(result);
 8007d36:	6a3b      	ldr	r3, [r7, #32]
 8007d38:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007d3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	3308      	adds	r3, #8
 8007d44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d46:	633a      	str	r2, [r7, #48]	; 0x30
 8007d48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d4e:	e841 2300 	strex	r3, r2, [r1]
 8007d52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d1e5      	bne.n	8007d26 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	e853 3f00 	ldrex	r3, [r3]
 8007d66:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d6e:	637b      	str	r3, [r7, #52]	; 0x34
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	461a      	mov	r2, r3
 8007d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d78:	61fb      	str	r3, [r7, #28]
 8007d7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7c:	69b9      	ldr	r1, [r7, #24]
 8007d7e:	69fa      	ldr	r2, [r7, #28]
 8007d80:	e841 2300 	strex	r3, r2, [r1]
 8007d84:	617b      	str	r3, [r7, #20]
   return(result);
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d1e6      	bne.n	8007d5a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8007d8c:	e021      	b.n	8007dd2 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	69db      	ldr	r3, [r3, #28]
 8007d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d013      	beq.n	8007dc4 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007da0:	781a      	ldrb	r2, [r3, #0]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dac:	1c5a      	adds	r2, r3, #1
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	3b01      	subs	r3, #1
 8007dbc:	b29a      	uxth	r2, r3
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007dc4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007dca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d1a4      	bne.n	8007d1a <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8007dd0:	e7ff      	b.n	8007dd2 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8007dd2:	bf00      	nop
 8007dd4:	3744      	adds	r7, #68	; 0x44
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr

08007dde <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007dde:	b480      	push	{r7}
 8007de0:	b091      	sub	sp, #68	; 0x44
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dec:	2b21      	cmp	r3, #33	; 0x21
 8007dee:	d165      	bne.n	8007ebc <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007df6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007df8:	e05c      	b.n	8007eb4 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d133      	bne.n	8007e6e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	3308      	adds	r3, #8
 8007e0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0e:	6a3b      	ldr	r3, [r7, #32]
 8007e10:	e853 3f00 	ldrex	r3, [r3]
 8007e14:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e16:	69fb      	ldr	r3, [r7, #28]
 8007e18:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007e1c:	637b      	str	r3, [r7, #52]	; 0x34
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	3308      	adds	r3, #8
 8007e24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e28:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e2e:	e841 2300 	strex	r3, r2, [r1]
 8007e32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d1e5      	bne.n	8007e06 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	e853 3f00 	ldrex	r3, [r3]
 8007e46:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e4e:	633b      	str	r3, [r7, #48]	; 0x30
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	461a      	mov	r2, r3
 8007e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e58:	61bb      	str	r3, [r7, #24]
 8007e5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5c:	6979      	ldr	r1, [r7, #20]
 8007e5e:	69ba      	ldr	r2, [r7, #24]
 8007e60:	e841 2300 	strex	r3, r2, [r1]
 8007e64:	613b      	str	r3, [r7, #16]
   return(result);
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d1e6      	bne.n	8007e3a <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8007e6c:	e026      	b.n	8007ebc <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	69db      	ldr	r3, [r3, #28]
 8007e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d018      	beq.n	8007eae <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e80:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e84:	881b      	ldrh	r3, [r3, #0]
 8007e86:	461a      	mov	r2, r3
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e90:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e96:	1c9a      	adds	r2, r3, #2
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	b29a      	uxth	r2, r3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007eae:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007eb0:	3b01      	subs	r3, #1
 8007eb2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007eb4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d19f      	bne.n	8007dfa <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8007eba:	e7ff      	b.n	8007ebc <UART_TxISR_16BIT_FIFOEN+0xde>
 8007ebc:	bf00      	nop
 8007ebe:	3744      	adds	r7, #68	; 0x44
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b088      	sub	sp, #32
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	e853 3f00 	ldrex	r3, [r3]
 8007edc:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ee4:	61fb      	str	r3, [r7, #28]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	461a      	mov	r2, r3
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	61bb      	str	r3, [r7, #24]
 8007ef0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef2:	6979      	ldr	r1, [r7, #20]
 8007ef4:	69ba      	ldr	r2, [r7, #24]
 8007ef6:	e841 2300 	strex	r3, r2, [r1]
 8007efa:	613b      	str	r3, [r7, #16]
   return(result);
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1e6      	bne.n	8007ed0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2220      	movs	r2, #32
 8007f06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f7fa f99d 	bl	8002250 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f16:	bf00      	nop
 8007f18:	3720      	adds	r7, #32
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
	...

08007f20 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b09c      	sub	sp, #112	; 0x70
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007f2e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f38:	2b22      	cmp	r3, #34	; 0x22
 8007f3a:	f040 80be 	bne.w	80080ba <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f44:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007f48:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007f4c:	b2d9      	uxtb	r1, r3
 8007f4e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007f52:	b2da      	uxtb	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f58:	400a      	ands	r2, r1
 8007f5a:	b2d2      	uxtb	r2, r2
 8007f5c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f62:	1c5a      	adds	r2, r3, #1
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	3b01      	subs	r3, #1
 8007f72:	b29a      	uxth	r2, r3
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	f040 80a1 	bne.w	80080ca <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f90:	e853 3f00 	ldrex	r3, [r3]
 8007f94:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007f96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007fa6:	65bb      	str	r3, [r7, #88]	; 0x58
 8007fa8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007faa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007fac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007fae:	e841 2300 	strex	r3, r2, [r1]
 8007fb2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007fb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d1e6      	bne.n	8007f88 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	3308      	adds	r3, #8
 8007fc0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc4:	e853 3f00 	ldrex	r3, [r3]
 8007fc8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fcc:	f023 0301 	bic.w	r3, r3, #1
 8007fd0:	667b      	str	r3, [r7, #100]	; 0x64
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	3308      	adds	r3, #8
 8007fd8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007fda:	647a      	str	r2, [r7, #68]	; 0x44
 8007fdc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fde:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007fe0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007fe2:	e841 2300 	strex	r3, r2, [r1]
 8007fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d1e5      	bne.n	8007fba <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2220      	movs	r2, #32
 8007ff2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a33      	ldr	r2, [pc, #204]	; (80080d4 <UART_RxISR_8BIT+0x1b4>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d01f      	beq.n	800804c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008016:	2b00      	cmp	r3, #0
 8008018:	d018      	beq.n	800804c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008022:	e853 3f00 	ldrex	r3, [r3]
 8008026:	623b      	str	r3, [r7, #32]
   return(result);
 8008028:	6a3b      	ldr	r3, [r7, #32]
 800802a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800802e:	663b      	str	r3, [r7, #96]	; 0x60
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	461a      	mov	r2, r3
 8008036:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008038:	633b      	str	r3, [r7, #48]	; 0x30
 800803a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800803e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008040:	e841 2300 	strex	r3, r2, [r1]
 8008044:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008048:	2b00      	cmp	r3, #0
 800804a:	d1e6      	bne.n	800801a <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008050:	2b01      	cmp	r3, #1
 8008052:	d12e      	bne.n	80080b2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	e853 3f00 	ldrex	r3, [r3]
 8008066:	60fb      	str	r3, [r7, #12]
   return(result);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f023 0310 	bic.w	r3, r3, #16
 800806e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	461a      	mov	r2, r3
 8008076:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008078:	61fb      	str	r3, [r7, #28]
 800807a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807c:	69b9      	ldr	r1, [r7, #24]
 800807e:	69fa      	ldr	r2, [r7, #28]
 8008080:	e841 2300 	strex	r3, r2, [r1]
 8008084:	617b      	str	r3, [r7, #20]
   return(result);
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1e6      	bne.n	800805a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	69db      	ldr	r3, [r3, #28]
 8008092:	f003 0310 	and.w	r3, r3, #16
 8008096:	2b10      	cmp	r3, #16
 8008098:	d103      	bne.n	80080a2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2210      	movs	r2, #16
 80080a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80080a8:	4619      	mov	r1, r3
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f7fe ffe4 	bl	8007078 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80080b0:	e00b      	b.n	80080ca <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f7fa f8ae 	bl	8002214 <HAL_UART_RxCpltCallback>
}
 80080b8:	e007      	b.n	80080ca <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	699a      	ldr	r2, [r3, #24]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f042 0208 	orr.w	r2, r2, #8
 80080c8:	619a      	str	r2, [r3, #24]
}
 80080ca:	bf00      	nop
 80080cc:	3770      	adds	r7, #112	; 0x70
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	40008000 	.word	0x40008000

080080d8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b09c      	sub	sp, #112	; 0x70
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80080e6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080f0:	2b22      	cmp	r3, #34	; 0x22
 80080f2:	f040 80be 	bne.w	8008272 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008104:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008106:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800810a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800810e:	4013      	ands	r3, r2
 8008110:	b29a      	uxth	r2, r3
 8008112:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008114:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800811a:	1c9a      	adds	r2, r3, #2
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008126:	b29b      	uxth	r3, r3
 8008128:	3b01      	subs	r3, #1
 800812a:	b29a      	uxth	r2, r3
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008138:	b29b      	uxth	r3, r3
 800813a:	2b00      	cmp	r3, #0
 800813c:	f040 80a1 	bne.w	8008282 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008146:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008148:	e853 3f00 	ldrex	r3, [r3]
 800814c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800814e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008150:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008154:	667b      	str	r3, [r7, #100]	; 0x64
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	461a      	mov	r2, r3
 800815c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800815e:	657b      	str	r3, [r7, #84]	; 0x54
 8008160:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008162:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008164:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008166:	e841 2300 	strex	r3, r2, [r1]
 800816a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800816c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800816e:	2b00      	cmp	r3, #0
 8008170:	d1e6      	bne.n	8008140 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	3308      	adds	r3, #8
 8008178:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800817a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800817c:	e853 3f00 	ldrex	r3, [r3]
 8008180:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008184:	f023 0301 	bic.w	r3, r3, #1
 8008188:	663b      	str	r3, [r7, #96]	; 0x60
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	3308      	adds	r3, #8
 8008190:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008192:	643a      	str	r2, [r7, #64]	; 0x40
 8008194:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008196:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008198:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800819a:	e841 2300 	strex	r3, r2, [r1]
 800819e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80081a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d1e5      	bne.n	8008172 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2220      	movs	r2, #32
 80081aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a33      	ldr	r2, [pc, #204]	; (800828c <UART_RxISR_16BIT+0x1b4>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d01f      	beq.n	8008204 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d018      	beq.n	8008204 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d8:	6a3b      	ldr	r3, [r7, #32]
 80081da:	e853 3f00 	ldrex	r3, [r3]
 80081de:	61fb      	str	r3, [r7, #28]
   return(result);
 80081e0:	69fb      	ldr	r3, [r7, #28]
 80081e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80081e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	461a      	mov	r2, r3
 80081ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081f2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081f8:	e841 2300 	strex	r3, r2, [r1]
 80081fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008200:	2b00      	cmp	r3, #0
 8008202:	d1e6      	bne.n	80081d2 <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008208:	2b01      	cmp	r3, #1
 800820a:	d12e      	bne.n	800826a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	e853 3f00 	ldrex	r3, [r3]
 800821e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	f023 0310 	bic.w	r3, r3, #16
 8008226:	65bb      	str	r3, [r7, #88]	; 0x58
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	461a      	mov	r2, r3
 800822e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008230:	61bb      	str	r3, [r7, #24]
 8008232:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008234:	6979      	ldr	r1, [r7, #20]
 8008236:	69ba      	ldr	r2, [r7, #24]
 8008238:	e841 2300 	strex	r3, r2, [r1]
 800823c:	613b      	str	r3, [r7, #16]
   return(result);
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d1e6      	bne.n	8008212 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	69db      	ldr	r3, [r3, #28]
 800824a:	f003 0310 	and.w	r3, r3, #16
 800824e:	2b10      	cmp	r3, #16
 8008250:	d103      	bne.n	800825a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	2210      	movs	r2, #16
 8008258:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008260:	4619      	mov	r1, r3
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f7fe ff08 	bl	8007078 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008268:	e00b      	b.n	8008282 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f7f9 ffd2 	bl	8002214 <HAL_UART_RxCpltCallback>
}
 8008270:	e007      	b.n	8008282 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	699a      	ldr	r2, [r3, #24]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f042 0208 	orr.w	r2, r2, #8
 8008280:	619a      	str	r2, [r3, #24]
}
 8008282:	bf00      	nop
 8008284:	3770      	adds	r7, #112	; 0x70
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	40008000 	.word	0x40008000

08008290 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b0ac      	sub	sp, #176	; 0xb0
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800829e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	69db      	ldr	r3, [r3, #28]
 80082a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082c6:	2b22      	cmp	r3, #34	; 0x22
 80082c8:	f040 8182 	bne.w	80085d0 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80082d2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80082d6:	e125      	b.n	8008524 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082de:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80082e2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80082e6:	b2d9      	uxtb	r1, r3
 80082e8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80082ec:	b2da      	uxtb	r2, r3
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082f2:	400a      	ands	r2, r1
 80082f4:	b2d2      	uxtb	r2, r2
 80082f6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082fc:	1c5a      	adds	r2, r3, #1
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008308:	b29b      	uxth	r3, r3
 800830a:	3b01      	subs	r3, #1
 800830c:	b29a      	uxth	r2, r3
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	69db      	ldr	r3, [r3, #28]
 800831a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800831e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008322:	f003 0307 	and.w	r3, r3, #7
 8008326:	2b00      	cmp	r3, #0
 8008328:	d053      	beq.n	80083d2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800832a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800832e:	f003 0301 	and.w	r3, r3, #1
 8008332:	2b00      	cmp	r3, #0
 8008334:	d011      	beq.n	800835a <UART_RxISR_8BIT_FIFOEN+0xca>
 8008336:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800833a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00b      	beq.n	800835a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	2201      	movs	r2, #1
 8008348:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008350:	f043 0201 	orr.w	r2, r3, #1
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800835a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800835e:	f003 0302 	and.w	r3, r3, #2
 8008362:	2b00      	cmp	r3, #0
 8008364:	d011      	beq.n	800838a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008366:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800836a:	f003 0301 	and.w	r3, r3, #1
 800836e:	2b00      	cmp	r3, #0
 8008370:	d00b      	beq.n	800838a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	2202      	movs	r2, #2
 8008378:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008380:	f043 0204 	orr.w	r2, r3, #4
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800838a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800838e:	f003 0304 	and.w	r3, r3, #4
 8008392:	2b00      	cmp	r3, #0
 8008394:	d011      	beq.n	80083ba <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008396:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800839a:	f003 0301 	and.w	r3, r3, #1
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d00b      	beq.n	80083ba <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	2204      	movs	r2, #4
 80083a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083b0:	f043 0202 	orr.w	r2, r3, #2
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d006      	beq.n	80083d2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f7fe fe4d 	bl	8007064 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80083d8:	b29b      	uxth	r3, r3
 80083da:	2b00      	cmp	r3, #0
 80083dc:	f040 80a2 	bne.w	8008524 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80083e8:	e853 3f00 	ldrex	r3, [r3]
 80083ec:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80083ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	461a      	mov	r2, r3
 80083fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008402:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008404:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008406:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008408:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800840a:	e841 2300 	strex	r3, r2, [r1]
 800840e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8008410:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008412:	2b00      	cmp	r3, #0
 8008414:	d1e4      	bne.n	80083e0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	3308      	adds	r3, #8
 800841c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800841e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008420:	e853 3f00 	ldrex	r3, [r3]
 8008424:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008426:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008428:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800842c:	f023 0301 	bic.w	r3, r3, #1
 8008430:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	3308      	adds	r3, #8
 800843a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800843e:	66ba      	str	r2, [r7, #104]	; 0x68
 8008440:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008442:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008444:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008446:	e841 2300 	strex	r3, r2, [r1]
 800844a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800844c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800844e:	2b00      	cmp	r3, #0
 8008450:	d1e1      	bne.n	8008416 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2220      	movs	r2, #32
 8008456:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a5f      	ldr	r2, [pc, #380]	; (80085e8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d021      	beq.n	80084b4 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800847a:	2b00      	cmp	r3, #0
 800847c:	d01a      	beq.n	80084b4 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008486:	e853 3f00 	ldrex	r3, [r3]
 800848a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800848c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800848e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008492:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	461a      	mov	r2, r3
 800849c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80084a0:	657b      	str	r3, [r7, #84]	; 0x54
 80084a2:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80084a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80084a8:	e841 2300 	strex	r3, r2, [r1]
 80084ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80084ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d1e4      	bne.n	800847e <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d130      	bne.n	800851e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ca:	e853 3f00 	ldrex	r3, [r3]
 80084ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80084d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d2:	f023 0310 	bic.w	r3, r3, #16
 80084d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	461a      	mov	r2, r3
 80084e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80084e4:	643b      	str	r3, [r7, #64]	; 0x40
 80084e6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80084ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80084ec:	e841 2300 	strex	r3, r2, [r1]
 80084f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80084f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d1e4      	bne.n	80084c2 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	69db      	ldr	r3, [r3, #28]
 80084fe:	f003 0310 	and.w	r3, r3, #16
 8008502:	2b10      	cmp	r3, #16
 8008504:	d103      	bne.n	800850e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	2210      	movs	r2, #16
 800850c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008514:	4619      	mov	r1, r3
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f7fe fdae 	bl	8007078 <HAL_UARTEx_RxEventCallback>
 800851c:	e002      	b.n	8008524 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f7f9 fe78 	bl	8002214 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008524:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8008528:	2b00      	cmp	r3, #0
 800852a:	d006      	beq.n	800853a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800852c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008530:	f003 0320 	and.w	r3, r3, #32
 8008534:	2b00      	cmp	r3, #0
 8008536:	f47f aecf 	bne.w	80082d8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008540:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008544:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008548:	2b00      	cmp	r3, #0
 800854a:	d049      	beq.n	80085e0 <UART_RxISR_8BIT_FIFOEN+0x350>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008552:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8008556:	429a      	cmp	r2, r3
 8008558:	d242      	bcs.n	80085e0 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	3308      	adds	r3, #8
 8008560:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008562:	6a3b      	ldr	r3, [r7, #32]
 8008564:	e853 3f00 	ldrex	r3, [r3]
 8008568:	61fb      	str	r3, [r7, #28]
   return(result);
 800856a:	69fb      	ldr	r3, [r7, #28]
 800856c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008570:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	3308      	adds	r3, #8
 800857a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800857e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008580:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008582:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008584:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008586:	e841 2300 	strex	r3, r2, [r1]
 800858a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800858c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858e:	2b00      	cmp	r3, #0
 8008590:	d1e3      	bne.n	800855a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a15      	ldr	r2, [pc, #84]	; (80085ec <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008596:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	e853 3f00 	ldrex	r3, [r3]
 80085a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	f043 0320 	orr.w	r3, r3, #32
 80085ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	461a      	mov	r2, r3
 80085b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80085ba:	61bb      	str	r3, [r7, #24]
 80085bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085be:	6979      	ldr	r1, [r7, #20]
 80085c0:	69ba      	ldr	r2, [r7, #24]
 80085c2:	e841 2300 	strex	r3, r2, [r1]
 80085c6:	613b      	str	r3, [r7, #16]
   return(result);
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d1e4      	bne.n	8008598 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80085ce:	e007      	b.n	80085e0 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	699a      	ldr	r2, [r3, #24]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f042 0208 	orr.w	r2, r2, #8
 80085de:	619a      	str	r2, [r3, #24]
}
 80085e0:	bf00      	nop
 80085e2:	37b0      	adds	r7, #176	; 0xb0
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}
 80085e8:	40008000 	.word	0x40008000
 80085ec:	08007f21 	.word	0x08007f21

080085f0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b0ae      	sub	sp, #184	; 0xb8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80085fe:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	69db      	ldr	r3, [r3, #28]
 8008608:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008626:	2b22      	cmp	r3, #34	; 0x22
 8008628:	f040 8186 	bne.w	8008938 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008632:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008636:	e129      	b.n	800888c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800863e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008646:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800864a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800864e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008652:	4013      	ands	r3, r2
 8008654:	b29a      	uxth	r2, r3
 8008656:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800865a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008660:	1c9a      	adds	r2, r3, #2
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800866c:	b29b      	uxth	r3, r3
 800866e:	3b01      	subs	r3, #1
 8008670:	b29a      	uxth	r2, r3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	69db      	ldr	r3, [r3, #28]
 800867e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008682:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008686:	f003 0307 	and.w	r3, r3, #7
 800868a:	2b00      	cmp	r3, #0
 800868c:	d053      	beq.n	8008736 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800868e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008692:	f003 0301 	and.w	r3, r3, #1
 8008696:	2b00      	cmp	r3, #0
 8008698:	d011      	beq.n	80086be <UART_RxISR_16BIT_FIFOEN+0xce>
 800869a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800869e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d00b      	beq.n	80086be <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	2201      	movs	r2, #1
 80086ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086b4:	f043 0201 	orr.w	r2, r3, #1
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80086be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80086c2:	f003 0302 	and.w	r3, r3, #2
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d011      	beq.n	80086ee <UART_RxISR_16BIT_FIFOEN+0xfe>
 80086ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80086ce:	f003 0301 	and.w	r3, r3, #1
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d00b      	beq.n	80086ee <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	2202      	movs	r2, #2
 80086dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086e4:	f043 0204 	orr.w	r2, r3, #4
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80086ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80086f2:	f003 0304 	and.w	r3, r3, #4
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d011      	beq.n	800871e <UART_RxISR_16BIT_FIFOEN+0x12e>
 80086fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80086fe:	f003 0301 	and.w	r3, r3, #1
 8008702:	2b00      	cmp	r3, #0
 8008704:	d00b      	beq.n	800871e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	2204      	movs	r2, #4
 800870c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008714:	f043 0202 	orr.w	r2, r3, #2
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008724:	2b00      	cmp	r3, #0
 8008726:	d006      	beq.n	8008736 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f7fe fc9b 	bl	8007064 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800873c:	b29b      	uxth	r3, r3
 800873e:	2b00      	cmp	r3, #0
 8008740:	f040 80a4 	bne.w	800888c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800874a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800874c:	e853 3f00 	ldrex	r3, [r3]
 8008750:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008752:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008754:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008758:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	461a      	mov	r2, r3
 8008762:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008766:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800876a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800876c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800876e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008772:	e841 2300 	strex	r3, r2, [r1]
 8008776:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008778:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800877a:	2b00      	cmp	r3, #0
 800877c:	d1e2      	bne.n	8008744 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	3308      	adds	r3, #8
 8008784:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008786:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008788:	e853 3f00 	ldrex	r3, [r3]
 800878c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800878e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008790:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008794:	f023 0301 	bic.w	r3, r3, #1
 8008798:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	3308      	adds	r3, #8
 80087a2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80087a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80087a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80087ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80087ae:	e841 2300 	strex	r3, r2, [r1]
 80087b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80087b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d1e1      	bne.n	800877e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2220      	movs	r2, #32
 80087be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2200      	movs	r2, #0
 80087c6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a5f      	ldr	r2, [pc, #380]	; (8008950 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d021      	beq.n	800881c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d01a      	beq.n	800881c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087ee:	e853 3f00 	ldrex	r3, [r3]
 80087f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80087f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80087fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	461a      	mov	r2, r3
 8008804:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008808:	65bb      	str	r3, [r7, #88]	; 0x58
 800880a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800880c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800880e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008810:	e841 2300 	strex	r3, r2, [r1]
 8008814:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008818:	2b00      	cmp	r3, #0
 800881a:	d1e4      	bne.n	80087e6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008820:	2b01      	cmp	r3, #1
 8008822:	d130      	bne.n	8008886 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2200      	movs	r2, #0
 8008828:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008832:	e853 3f00 	ldrex	r3, [r3]
 8008836:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800883a:	f023 0310 	bic.w	r3, r3, #16
 800883e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	461a      	mov	r2, r3
 8008848:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800884c:	647b      	str	r3, [r7, #68]	; 0x44
 800884e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008850:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008852:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008854:	e841 2300 	strex	r3, r2, [r1]
 8008858:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800885a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800885c:	2b00      	cmp	r3, #0
 800885e:	d1e4      	bne.n	800882a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	69db      	ldr	r3, [r3, #28]
 8008866:	f003 0310 	and.w	r3, r3, #16
 800886a:	2b10      	cmp	r3, #16
 800886c:	d103      	bne.n	8008876 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	2210      	movs	r2, #16
 8008874:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800887c:	4619      	mov	r1, r3
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f7fe fbfa 	bl	8007078 <HAL_UARTEx_RxEventCallback>
 8008884:	e002      	b.n	800888c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f7f9 fcc4 	bl	8002214 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800888c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8008890:	2b00      	cmp	r3, #0
 8008892:	d006      	beq.n	80088a2 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8008894:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008898:	f003 0320 	and.w	r3, r3, #32
 800889c:	2b00      	cmp	r3, #0
 800889e:	f47f aecb 	bne.w	8008638 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088a8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80088ac:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d049      	beq.n	8008948 <UART_RxISR_16BIT_FIFOEN+0x358>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80088ba:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80088be:	429a      	cmp	r2, r3
 80088c0:	d242      	bcs.n	8008948 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	3308      	adds	r3, #8
 80088c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088cc:	e853 3f00 	ldrex	r3, [r3]
 80088d0:	623b      	str	r3, [r7, #32]
   return(result);
 80088d2:	6a3b      	ldr	r3, [r7, #32]
 80088d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	3308      	adds	r3, #8
 80088e2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80088e6:	633a      	str	r2, [r7, #48]	; 0x30
 80088e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088ee:	e841 2300 	strex	r3, r2, [r1]
 80088f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80088f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d1e3      	bne.n	80088c2 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4a15      	ldr	r2, [pc, #84]	; (8008954 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80088fe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	e853 3f00 	ldrex	r3, [r3]
 800890c:	60fb      	str	r3, [r7, #12]
   return(result);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f043 0320 	orr.w	r3, r3, #32
 8008914:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	461a      	mov	r2, r3
 800891e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008922:	61fb      	str	r3, [r7, #28]
 8008924:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008926:	69b9      	ldr	r1, [r7, #24]
 8008928:	69fa      	ldr	r2, [r7, #28]
 800892a:	e841 2300 	strex	r3, r2, [r1]
 800892e:	617b      	str	r3, [r7, #20]
   return(result);
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d1e4      	bne.n	8008900 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008936:	e007      	b.n	8008948 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	699a      	ldr	r2, [r3, #24]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f042 0208 	orr.w	r2, r2, #8
 8008946:	619a      	str	r2, [r3, #24]
}
 8008948:	bf00      	nop
 800894a:	37b8      	adds	r7, #184	; 0xb8
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}
 8008950:	40008000 	.word	0x40008000
 8008954:	080080d9 	.word	0x080080d9

08008958 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008958:	b480      	push	{r7}
 800895a:	b083      	sub	sp, #12
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008960:	bf00      	nop
 8008962:	370c      	adds	r7, #12
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr

0800896c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800896c:	b480      	push	{r7}
 800896e:	b083      	sub	sp, #12
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008974:	bf00      	nop
 8008976:	370c      	adds	r7, #12
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr

08008980 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008980:	b480      	push	{r7}
 8008982:	b083      	sub	sp, #12
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008988:	bf00      	nop
 800898a:	370c      	adds	r7, #12
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr

08008994 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008994:	b480      	push	{r7}
 8008996:	b085      	sub	sp, #20
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d101      	bne.n	80089aa <HAL_UARTEx_DisableFifoMode+0x16>
 80089a6:	2302      	movs	r3, #2
 80089a8:	e027      	b.n	80089fa <HAL_UARTEx_DisableFifoMode+0x66>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2201      	movs	r2, #1
 80089ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2224      	movs	r2, #36	; 0x24
 80089b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f022 0201 	bic.w	r2, r2, #1
 80089d0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80089d8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2200      	movs	r2, #0
 80089de:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	68fa      	ldr	r2, [r7, #12]
 80089e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2220      	movs	r2, #32
 80089ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2200      	movs	r2, #0
 80089f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80089f8:	2300      	movs	r3, #0
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3714      	adds	r7, #20
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr

08008a06 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a06:	b580      	push	{r7, lr}
 8008a08:	b084      	sub	sp, #16
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	6078      	str	r0, [r7, #4]
 8008a0e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d101      	bne.n	8008a1e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008a1a:	2302      	movs	r3, #2
 8008a1c:	e02d      	b.n	8008a7a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2201      	movs	r2, #1
 8008a22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2224      	movs	r2, #36	; 0x24
 8008a2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f022 0201 	bic.w	r2, r2, #1
 8008a44:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	689b      	ldr	r3, [r3, #8]
 8008a4c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	683a      	ldr	r2, [r7, #0]
 8008a56:	430a      	orrs	r2, r1
 8008a58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 f850 	bl	8008b00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	68fa      	ldr	r2, [r7, #12]
 8008a66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2220      	movs	r2, #32
 8008a6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2200      	movs	r2, #0
 8008a74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008a78:	2300      	movs	r3, #0
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b084      	sub	sp, #16
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
 8008a8a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d101      	bne.n	8008a9a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008a96:	2302      	movs	r3, #2
 8008a98:	e02d      	b.n	8008af6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2224      	movs	r2, #36	; 0x24
 8008aa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f022 0201 	bic.w	r2, r2, #1
 8008ac0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	683a      	ldr	r2, [r7, #0]
 8008ad2:	430a      	orrs	r2, r1
 8008ad4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 f812 	bl	8008b00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	68fa      	ldr	r2, [r7, #12]
 8008ae2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2220      	movs	r2, #32
 8008ae8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3710      	adds	r7, #16
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
	...

08008b00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b085      	sub	sp, #20
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d108      	bne.n	8008b22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2201      	movs	r2, #1
 8008b14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008b20:	e031      	b.n	8008b86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008b22:	2308      	movs	r3, #8
 8008b24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008b26:	2308      	movs	r3, #8
 8008b28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	0e5b      	lsrs	r3, r3, #25
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	f003 0307 	and.w	r3, r3, #7
 8008b38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	0f5b      	lsrs	r3, r3, #29
 8008b42:	b2db      	uxtb	r3, r3
 8008b44:	f003 0307 	and.w	r3, r3, #7
 8008b48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b4a:	7bbb      	ldrb	r3, [r7, #14]
 8008b4c:	7b3a      	ldrb	r2, [r7, #12]
 8008b4e:	4911      	ldr	r1, [pc, #68]	; (8008b94 <UARTEx_SetNbDataToProcess+0x94>)
 8008b50:	5c8a      	ldrb	r2, [r1, r2]
 8008b52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008b56:	7b3a      	ldrb	r2, [r7, #12]
 8008b58:	490f      	ldr	r1, [pc, #60]	; (8008b98 <UARTEx_SetNbDataToProcess+0x98>)
 8008b5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b60:	b29a      	uxth	r2, r3
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b68:	7bfb      	ldrb	r3, [r7, #15]
 8008b6a:	7b7a      	ldrb	r2, [r7, #13]
 8008b6c:	4909      	ldr	r1, [pc, #36]	; (8008b94 <UARTEx_SetNbDataToProcess+0x94>)
 8008b6e:	5c8a      	ldrb	r2, [r1, r2]
 8008b70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008b74:	7b7a      	ldrb	r2, [r7, #13]
 8008b76:	4908      	ldr	r1, [pc, #32]	; (8008b98 <UARTEx_SetNbDataToProcess+0x98>)
 8008b78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b7e:	b29a      	uxth	r2, r3
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008b86:	bf00      	nop
 8008b88:	3714      	adds	r7, #20
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr
 8008b92:	bf00      	nop
 8008b94:	0800c7dc 	.word	0x0800c7dc
 8008b98:	0800c7e4 	.word	0x0800c7e4

08008b9c <LL_DBGMCU_GetDeviceID>:
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8008ba0:	4b04      	ldr	r3, [pc, #16]	; (8008bb4 <LL_DBGMCU_GetDeviceID+0x18>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr
 8008bb2:	bf00      	nop
 8008bb4:	e0042000 	.word	0xe0042000

08008bb8 <LL_DBGMCU_GetRevisionID>:
{
 8008bb8:	b480      	push	{r7}
 8008bba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8008bbc:	4b04      	ldr	r3, [pc, #16]	; (8008bd0 <LL_DBGMCU_GetRevisionID+0x18>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	0c1b      	lsrs	r3, r3, #16
 8008bc2:	b29b      	uxth	r3, r3
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr
 8008bce:	bf00      	nop
 8008bd0:	e0042000 	.word	0xe0042000

08008bd4 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8008bd8:	4b03      	ldr	r3, [pc, #12]	; (8008be8 <LL_FLASH_GetUDN+0x14>)
 8008bda:	681b      	ldr	r3, [r3, #0]
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr
 8008be6:	bf00      	nop
 8008be8:	1fff7580 	.word	0x1fff7580

08008bec <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8008bec:	b480      	push	{r7}
 8008bee:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8008bf0:	4b03      	ldr	r3, [pc, #12]	; (8008c00 <LL_FLASH_GetDeviceID+0x14>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	b2db      	uxtb	r3, r3
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr
 8008c00:	1fff7584 	.word	0x1fff7584

08008c04 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8008c04:	b480      	push	{r7}
 8008c06:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8008c08:	4b03      	ldr	r3, [pc, #12]	; (8008c18 <LL_FLASH_GetSTCompanyID+0x14>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	0a1b      	lsrs	r3, r3, #8
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr
 8008c18:	1fff7584 	.word	0x1fff7584

08008c1c <LL_GetUID_Word0>:
/**
  * @brief  Get Word0 of the unique device identifier (UID based on 96 bits)
  * @retval UID[31:0]: X and Y coordinates on the wafer expressed in BCD format
  */
__STATIC_INLINE uint32_t LL_GetUID_Word0(void)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID_BASE_ADDRESS)));
 8008c20:	4b03      	ldr	r3, [pc, #12]	; (8008c30 <LL_GetUID_Word0+0x14>)
 8008c22:	681b      	ldr	r3, [r3, #0]
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr
 8008c2e:	bf00      	nop
 8008c30:	1fff7590 	.word	0x1fff7590

08008c34 <LL_GetUID_Word1>:
/**
  * @brief  Get Word1 of the unique device identifier (UID based on 96 bits)
  * @retval UID[63:32]: Wafer number (UID[39:32]) & LOT_NUM[23:0] (UID[63:40])
  */
__STATIC_INLINE uint32_t LL_GetUID_Word1(void)
{
 8008c34:	b480      	push	{r7}
 8008c36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE_ADDRESS + 4U))));
 8008c38:	4b03      	ldr	r3, [pc, #12]	; (8008c48 <LL_GetUID_Word1+0x14>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr
 8008c46:	bf00      	nop
 8008c48:	1fff7594 	.word	0x1fff7594

08008c4c <LL_GetUID_Word2>:
/**
  * @brief  Get Word2 of the unique device identifier (UID based on 96 bits)
  * @retval UID[95:64]: Lot number (ASCII encoded) - LOT_NUM[55:24]
  */
__STATIC_INLINE uint32_t LL_GetUID_Word2(void)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE_ADDRESS + 8U))));
 8008c50:	4b03      	ldr	r3, [pc, #12]	; (8008c60 <LL_GetUID_Word2+0x14>)
 8008c52:	681b      	ldr	r3, [r3, #0]
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr
 8008c5e:	bf00      	nop
 8008c60:	1fff7598 	.word	0x1fff7598

08008c64 <LL_GetPackageType>:
  *         @arg @ref LL_UTILS_PACKAGETYPE_QFN68
  *         @arg @ref LL_UTILS_PACKAGETYPE_QFN48
  *
  */
__STATIC_INLINE uint32_t LL_GetPackageType(void)
{
 8008c64:	b480      	push	{r7}
 8008c66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)PACKAGE_BASE_ADDRESS)) & 0x1FU);
 8008c68:	4b04      	ldr	r3, [pc, #16]	; (8008c7c <LL_GetPackageType+0x18>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f003 031f 	and.w	r3, r3, #31
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr
 8008c7a:	bf00      	nop
 8008c7c:	1fff7500 	.word	0x1fff7500

08008c80 <LHCI_C1_Write_Register>:
extern uint32_t FW_Version;

/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/
void LHCI_C1_Write_Register( TL_CmdPacket_t *pcmd )
{
 8008c80:	b480      	push	{r7}
 8008c82:	b089      	sub	sp, #36	; 0x24
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c88:	f3ef 8310 	mrs	r3, PRIMASK
 8008c8c:	617b      	str	r3, [r7, #20]
  return(result);
 8008c8e:	697b      	ldr	r3, [r7, #20]
  LHCI_C1_Write_Register_cmd_t * p_param;
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK(); /**< backup PRIMASK bit */
 8008c90:	61fb      	str	r3, [r7, #28]

  p_param = (LHCI_C1_Write_Register_cmd_t *) pcmd->cmdserial.cmd.payload;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	330c      	adds	r3, #12
 8008c96:	61bb      	str	r3, [r7, #24]

  switch (p_param->busw)
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d002      	beq.n	8008ca6 <LHCI_C1_Write_Register+0x26>
 8008ca0:	2b02      	cmp	r3, #2
 8008ca2:	d025      	beq.n	8008cf0 <LHCI_C1_Write_Register+0x70>
 8008ca4:	e049      	b.n	8008d3a <LHCI_C1_Write_Register+0xba>
  __ASM volatile ("cpsid i" : : : "memory");
 8008ca6:	b672      	cpsid	i
}
 8008ca8:	bf00      	nop
  {
  case LHCI_8bits:
    __disable_irq();

    *(uint8_t *) (p_param->add) = ((*(uint8_t *) (p_param->add)) & (~(p_param->mask)))
 8008caa:	69bb      	ldr	r3, [r7, #24]
 8008cac:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8008cb0:	781a      	ldrb	r2, [r3, #0]
 8008cb2:	69bb      	ldr	r3, [r7, #24]
 8008cb4:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	43db      	mvns	r3, r3
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	4013      	ands	r3, r2
 8008cc0:	b2da      	uxtb	r2, r3
        		      | (p_param->val & p_param->mask);
 8008cc2:	69bb      	ldr	r3, [r7, #24]
 8008cc4:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8008cc8:	b2d9      	uxtb	r1, r3
 8008cca:	69bb      	ldr	r3, [r7, #24]
 8008ccc:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	400b      	ands	r3, r1
 8008cd4:	b2db      	uxtb	r3, r3
    *(uint8_t *) (p_param->add) = ((*(uint8_t *) (p_param->add)) & (~(p_param->mask)))
 8008cd6:	69b9      	ldr	r1, [r7, #24]
 8008cd8:	f8d1 1005 	ldr.w	r1, [r1, #5]
        		      | (p_param->val & p_param->mask);
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	b2db      	uxtb	r3, r3
    *(uint8_t *) (p_param->add) = ((*(uint8_t *) (p_param->add)) & (~(p_param->mask)))
 8008ce0:	700b      	strb	r3, [r1, #0]
 8008ce2:	69fb      	ldr	r3, [r7, #28]
 8008ce4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	f383 8810 	msr	PRIMASK, r3
}
 8008cec:	bf00      	nop

    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
    break;
 8008cee:	e042      	b.n	8008d76 <LHCI_C1_Write_Register+0xf6>
  __ASM volatile ("cpsid i" : : : "memory");
 8008cf0:	b672      	cpsid	i
}
 8008cf2:	bf00      	nop

  case LHCI_16bits:
    __disable_irq();

    *(uint16_t *) (p_param->add) = ((*(uint16_t *) (p_param->add)) & (~(p_param->mask)))
 8008cf4:	69bb      	ldr	r3, [r7, #24]
 8008cf6:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8008cfa:	881a      	ldrh	r2, [r3, #0]
 8008cfc:	69bb      	ldr	r3, [r7, #24]
 8008cfe:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	43db      	mvns	r3, r3
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	4013      	ands	r3, r2
 8008d0a:	b29a      	uxth	r2, r3
        		      | (p_param->val & p_param->mask);
 8008d0c:	69bb      	ldr	r3, [r7, #24]
 8008d0e:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8008d12:	b299      	uxth	r1, r3
 8008d14:	69bb      	ldr	r3, [r7, #24]
 8008d16:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	400b      	ands	r3, r1
 8008d1e:	b29b      	uxth	r3, r3
    *(uint16_t *) (p_param->add) = ((*(uint16_t *) (p_param->add)) & (~(p_param->mask)))
 8008d20:	69b9      	ldr	r1, [r7, #24]
 8008d22:	f8d1 1005 	ldr.w	r1, [r1, #5]
        		      | (p_param->val & p_param->mask);
 8008d26:	4313      	orrs	r3, r2
 8008d28:	b29b      	uxth	r3, r3
    *(uint16_t *) (p_param->add) = ((*(uint16_t *) (p_param->add)) & (~(p_param->mask)))
 8008d2a:	800b      	strh	r3, [r1, #0]
 8008d2c:	69fb      	ldr	r3, [r7, #28]
 8008d2e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f383 8810 	msr	PRIMASK, r3
}
 8008d36:	bf00      	nop

    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
    break;
 8008d38:	e01d      	b.n	8008d76 <LHCI_C1_Write_Register+0xf6>
  __ASM volatile ("cpsid i" : : : "memory");
 8008d3a:	b672      	cpsid	i
}
 8008d3c:	bf00      	nop

  default: /**< case SHCI_32BITS */
    __disable_irq();

    *(uint32_t *) (p_param->add) = ((*(uint32_t *) (p_param->add)) & (~(p_param->mask)))
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8008d44:	681a      	ldr	r2, [r3, #0]
 8008d46:	69bb      	ldr	r3, [r7, #24]
 8008d48:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8008d4c:	43db      	mvns	r3, r3
 8008d4e:	401a      	ands	r2, r3
        		      | (p_param->val & p_param->mask);
 8008d50:	69bb      	ldr	r3, [r7, #24]
 8008d52:	f8d3 1009 	ldr.w	r1, [r3, #9]
 8008d56:	69bb      	ldr	r3, [r7, #24]
 8008d58:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8008d5c:	400b      	ands	r3, r1
    *(uint32_t *) (p_param->add) = ((*(uint32_t *) (p_param->add)) & (~(p_param->mask)))
 8008d5e:	69b9      	ldr	r1, [r7, #24]
 8008d60:	f8d1 1005 	ldr.w	r1, [r1, #5]
        		      | (p_param->val & p_param->mask);
 8008d64:	4313      	orrs	r3, r2
    *(uint32_t *) (p_param->add) = ((*(uint32_t *) (p_param->add)) & (~(p_param->mask)))
 8008d66:	600b      	str	r3, [r1, #0]
 8008d68:	69fb      	ldr	r3, [r7, #28]
 8008d6a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	f383 8810 	msr	PRIMASK, r3
}
 8008d72:	bf00      	nop

    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
    break;
 8008d74:	bf00      	nop
  }

  ((TL_EvtPacket_t*) pcmd)->evtserial.type = TL_LOCRSP_PKT_TYPE;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2221      	movs	r2, #33	; 0x21
 8008d7a:	721a      	strb	r2, [r3, #8]
  ((TL_EvtPacket_t*) pcmd)->evtserial.evt.evtcode = TL_BLEEVT_CC_OPCODE;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	220e      	movs	r2, #14
 8008d80:	725a      	strb	r2, [r3, #9]
  ((TL_EvtPacket_t*) pcmd)->evtserial.evt.plen = TL_EVT_CS_PAYLOAD_SIZE;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2204      	movs	r2, #4
 8008d86:	729a      	strb	r2, [r3, #10]
  ;
  ((TL_CcEvt_t *) (((TL_EvtPacket_t*) pcmd)->evtserial.evt.payload))->cmdcode = LHCI_OPCODE_C1_WRITE_REG;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	330b      	adds	r3, #11
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8008d92:	705a      	strb	r2, [r3, #1]
 8008d94:	2200      	movs	r2, #0
 8008d96:	f062 0202 	orn	r2, r2, #2
 8008d9a:	709a      	strb	r2, [r3, #2]
  ((TL_CcEvt_t *) (((TL_EvtPacket_t*) pcmd)->evtserial.evt.payload))->payload[0]= 0x00;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	330b      	adds	r3, #11
 8008da0:	2200      	movs	r2, #0
 8008da2:	70da      	strb	r2, [r3, #3]
  ((TL_CcEvt_t *) (((TL_EvtPacket_t*) pcmd)->evtserial.evt.payload))->numcmd = 1;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	330b      	adds	r3, #11
 8008da8:	2201      	movs	r2, #1
 8008daa:	701a      	strb	r2, [r3, #0]

  return;
 8008dac:	bf00      	nop
}
 8008dae:	3724      	adds	r7, #36	; 0x24
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr

08008db8 <LHCI_C1_Read_Register>:

void LHCI_C1_Read_Register( TL_CmdPacket_t *pcmd )
{
 8008db8:	b480      	push	{r7}
 8008dba:	b087      	sub	sp, #28
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  LHCI_C1_Read_Register_cmd_t * p_param;
  uint32_t rsp_val;
  uint8_t busw;

  p_param = (LHCI_C1_Read_Register_cmd_t *) pcmd->cmdserial.cmd.payload;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	330c      	adds	r3, #12
 8008dc4:	617b      	str	r3, [r7, #20]
  busw = p_param->busw;
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	74fb      	strb	r3, [r7, #19]

  switch (busw)
 8008dcc:	7cfb      	ldrb	r3, [r7, #19]
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d002      	beq.n	8008dd8 <LHCI_C1_Read_Register+0x20>
 8008dd2:	2b02      	cmp	r3, #2
 8008dd4:	d006      	beq.n	8008de4 <LHCI_C1_Read_Register+0x2c>
 8008dd6:	e00b      	b.n	8008df0 <LHCI_C1_Read_Register+0x38>
  {
  case LHCI_8bits:
    rsp_val = *(uint8_t *) (p_param->add);
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8008dde:	781b      	ldrb	r3, [r3, #0]
 8008de0:	60fb      	str	r3, [r7, #12]
    break;
 8008de2:	e00b      	b.n	8008dfc <LHCI_C1_Read_Register+0x44>

  case LHCI_16bits:
    rsp_val = *(uint16_t *) (p_param->add);
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8008dea:	881b      	ldrh	r3, [r3, #0]
 8008dec:	60fb      	str	r3, [r7, #12]
    break;
 8008dee:	e005      	b.n	8008dfc <LHCI_C1_Read_Register+0x44>

  default: /**< case SHCI_32BITS */
    rsp_val = *(uint32_t *) (p_param->add);
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	60fb      	str	r3, [r7, #12]
    break;
 8008dfa:	bf00      	nop
  }

  ((TL_EvtPacket_t*) pcmd)->evtserial.type = TL_LOCRSP_PKT_TYPE;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2221      	movs	r2, #33	; 0x21
 8008e00:	721a      	strb	r2, [r3, #8]
  ((TL_EvtPacket_t*) pcmd)->evtserial.evt.evtcode = TL_BLEEVT_CC_OPCODE;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	220e      	movs	r2, #14
 8008e06:	725a      	strb	r2, [r3, #9]
  ((TL_EvtPacket_t*) pcmd)->evtserial.evt.plen = TL_EVT_HDR_SIZE + sizeof(LHCI_C1_Read_Register_ccrp_t);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2208      	movs	r2, #8
 8008e0c:	729a      	strb	r2, [r3, #10]
  ((TL_CcEvt_t *) (((TL_EvtPacket_t*) pcmd)->evtserial.evt.payload))->cmdcode = LHCI_OPCODE_C1_READ_REG;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	330b      	adds	r3, #11
 8008e12:	2200      	movs	r2, #0
 8008e14:	f042 0261 	orr.w	r2, r2, #97	; 0x61
 8008e18:	705a      	strb	r2, [r3, #1]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f062 0202 	orn	r2, r2, #2
 8008e20:	709a      	strb	r2, [r3, #2]
  ((TL_CcEvt_t *) (((TL_EvtPacket_t*) pcmd)->evtserial.evt.payload))->numcmd = 1;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	330b      	adds	r3, #11
 8008e26:	2201      	movs	r2, #1
 8008e28:	701a      	strb	r2, [r3, #0]
  ((LHCI_C1_Read_Register_ccrp_t *) (((TL_CcEvt_t *) (((TL_EvtPacket_t*) pcmd)->evtserial.evt.payload))->payload))->status =
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	330b      	adds	r3, #11
 8008e2e:	3303      	adds	r3, #3
 8008e30:	2200      	movs	r2, #0
 8008e32:	701a      	strb	r2, [r3, #0]
      0x00;

  memcpy(
      (void*)&(((LHCI_C1_Read_Register_ccrp_t *) (((TL_CcEvt_t *) (((TL_EvtPacket_t*) pcmd)->evtserial.evt.payload))->payload))->val),
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	330b      	adds	r3, #11
 8008e38:	3303      	adds	r3, #3
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	68fa      	ldr	r2, [r7, #12]
  memcpy(
 8008e3e:	601a      	str	r2, [r3, #0]
      &rsp_val,
      4);

  return;
 8008e40:	bf00      	nop
}
 8008e42:	371c      	adds	r7, #28
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr

08008e4c <LHCI_C1_Read_Device_Information>:

void LHCI_C1_Read_Device_Information( TL_CmdPacket_t *pcmd )
{
 8008e4c:	b590      	push	{r4, r7, lr}
 8008e4e:	b085      	sub	sp, #20
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba;
  MB_RefTable_t * p_ref_table;

  ipccdba = READ_BIT(FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA);
 8008e54:	4b4e      	ldr	r3, [pc, #312]	; (8008f90 <LHCI_C1_Read_Device_Information+0x144>)
 8008e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e58:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008e5c:	60fb      	str	r3, [r7, #12]
  p_ref_table = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8008e66:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8008e6a:	60bb      	str	r3, [r7, #8]

  ((TL_EvtPacket_t*) pcmd)->evtserial.type = TL_LOCRSP_PKT_TYPE;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2221      	movs	r2, #33	; 0x21
 8008e70:	721a      	strb	r2, [r3, #8]
  ((TL_EvtPacket_t*) pcmd)->evtserial.evt.evtcode = TL_BLEEVT_CC_OPCODE;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	220e      	movs	r2, #14
 8008e76:	725a      	strb	r2, [r3, #9]
  ((TL_EvtPacket_t*) pcmd)->evtserial.evt.plen = TL_EVT_HDR_SIZE + sizeof(LHCI_C1_Device_Information_ccrp_t);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2242      	movs	r2, #66	; 0x42
 8008e7c:	729a      	strb	r2, [r3, #10]
  ((TL_CcEvt_t *) (((TL_EvtPacket_t*) pcmd)->evtserial.evt.payload))->cmdcode = LHCI_OPCODE_C1_DEVICE_INF;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	330b      	adds	r3, #11
 8008e82:	2200      	movs	r2, #0
 8008e84:	f042 0262 	orr.w	r2, r2, #98	; 0x62
 8008e88:	705a      	strb	r2, [r3, #1]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	f062 0202 	orn	r2, r2, #2
 8008e90:	709a      	strb	r2, [r3, #2]
  ((TL_CcEvt_t *) (((TL_EvtPacket_t*) pcmd)->evtserial.evt.payload))->numcmd = 1;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	330b      	adds	r3, #11
 8008e96:	2201      	movs	r2, #1
 8008e98:	701a      	strb	r2, [r3, #0]


  /**
   * status
   */
  ((LHCI_C1_Device_Information_ccrp_t *) (((TL_CcEvt_t *) (((TL_EvtPacket_t*) pcmd)->evtserial.evt.payload))->payload))->status =
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	330b      	adds	r3, #11
 8008e9e:	3303      	adds	r3, #3
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	701a      	strb	r2, [r3, #0]

  /**
   * revision id
   */
  ((LHCI_C1_Device_Information_ccrp_t *) (((TL_CcEvt_t *) (((TL_EvtPacket_t*) pcmd)->evtserial.evt.payload))->payload))->rev_id =
      (uint16_t)LL_DBGMCU_GetRevisionID();
 8008ea4:	f7ff fe88 	bl	8008bb8 <LL_DBGMCU_GetRevisionID>
 8008ea8:	4602      	mov	r2, r0
  ((LHCI_C1_Device_Information_ccrp_t *) (((TL_CcEvt_t *) (((TL_EvtPacket_t*) pcmd)->evtserial.evt.payload))->payload))->rev_id =
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	330b      	adds	r3, #11
 8008eae:	3303      	adds	r3, #3
      (uint16_t)LL_DBGMCU_GetRevisionID();
 8008eb0:	b292      	uxth	r2, r2
  ((LHCI_C1_Device_Information_ccrp_t *) (((TL_CcEvt_t *) (((TL_EvtPacket_t*) pcmd)->evtserial.evt.payload))->payload))->rev_id =
 8008eb2:	f8a3 2001 	strh.w	r2, [r3, #1]

  /**
   * device code id
   */
  ((LHCI_C1_Device_Information_ccrp_t *) (((TL_CcEvt_t *) (((TL_EvtPacket_t*) pcmd)->evtserial.evt.payload))->payload))->dev_code_id =
      (uint16_t)LL_DBGMCU_GetDeviceID();
 8008eb6:	f7ff fe71 	bl	8008b9c <LL_DBGMCU_GetDeviceID>
 8008eba:	4602      	mov	r2, r0
  ((LHCI_C1_Device_Information_ccrp_t *) (((TL_CcEvt_t *) (((TL_EvtPacket_t*) pcmd)->evtserial.evt.payload))->payload))->dev_code_id =
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	330b      	adds	r3, #11
 8008ec0:	3303      	adds	r3, #3
      (uint16_t)LL_DBGMCU_GetDeviceID();
 8008ec2:	b292      	uxth	r2, r2
  ((LHCI_C1_Device_Information_ccrp_t *) (((TL_CcEvt_t *) (((TL_EvtPacket_t*) pcmd)->evtserial.evt.payload))->payload))->dev_code_id =
 8008ec4:	f8a3 2003 	strh.w	r2, [r3, #3]

  /**
   * package type
   */
  ((LHCI_C1_Device_Information_ccrp_t *) (((TL_CcEvt_t *) (((TL_EvtPacket_t*) pcmd)->evtserial.evt.payload))->payload))->package_type =
      (uint8_t)LL_GetPackageType();
 8008ec8:	f7ff fecc 	bl	8008c64 <LL_GetPackageType>
 8008ecc:	4602      	mov	r2, r0
  ((LHCI_C1_Device_Information_ccrp_t *) (((TL_CcEvt_t *) (((TL_EvtPacket_t*) pcmd)->evtserial.evt.payload))->payload))->package_type =
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	330b      	adds	r3, #11
 8008ed2:	3303      	adds	r3, #3
      (uint8_t)LL_GetPackageType();
 8008ed4:	b2d2      	uxtb	r2, r2
  ((LHCI_C1_Device_Information_ccrp_t *) (((TL_CcEvt_t *) (((TL_EvtPacket_t*) pcmd)->evtserial.evt.payload))->payload))->package_type =
 8008ed6:	715a      	strb	r2, [r3, #5]

  /**
   * device type id
   */
  ((LHCI_C1_Device_Information_ccrp_t *) (((TL_CcEvt_t *) (((TL_EvtPacket_t*) pcmd)->evtserial.evt.payload))->payload))->device_type_id =
      (uint8_t)LL_FLASH_GetDeviceID();
 8008ed8:	f7ff fe88 	bl	8008bec <LL_FLASH_GetDeviceID>
 8008edc:	4602      	mov	r2, r0
  ((LHCI_C1_Device_Information_ccrp_t *) (((TL_CcEvt_t *) (((TL_EvtPacket_t*) pcmd)->evtserial.evt.payload))->payload))->device_type_id =
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	330b      	adds	r3, #11
 8008ee2:	3303      	adds	r3, #3
      (uint8_t)LL_FLASH_GetDeviceID();
 8008ee4:	b2d2      	uxtb	r2, r2
  ((LHCI_C1_Device_Information_ccrp_t *) (((TL_CcEvt_t *) (((TL_EvtPacket_t*) pcmd)->evtserial.evt.payload))->payload))->device_type_id =
 8008ee6:	719a      	strb	r2, [r3, #6]

  /**
   * st company id
   */
  ((LHCI_C1_Device_Information_ccrp_t *) (((TL_CcEvt_t *) (((TL_EvtPacket_t*) pcmd)->evtserial.evt.payload))->payload))->st_company_id =
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	330b      	adds	r3, #11
 8008eec:	1cdc      	adds	r4, r3, #3
      LL_FLASH_GetSTCompanyID();
 8008eee:	f7ff fe89 	bl	8008c04 <LL_FLASH_GetSTCompanyID>
 8008ef2:	4603      	mov	r3, r0
  ((LHCI_C1_Device_Information_ccrp_t *) (((TL_CcEvt_t *) (((TL_EvtPacket_t*) pcmd)->evtserial.evt.payload))->payload))->st_company_id =
 8008ef4:	f8c4 3007 	str.w	r3, [r4, #7]

  /**
   * UID64
   */
  ((LHCI_C1_Device_Information_ccrp_t *) (((TL_CcEvt_t *) (((TL_EvtPacket_t*) pcmd)->evtserial.evt.payload))->payload))->uid64 =
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	330b      	adds	r3, #11
 8008efc:	1cdc      	adds	r4, r3, #3
      LL_FLASH_GetUDN();
 8008efe:	f7ff fe69 	bl	8008bd4 <LL_FLASH_GetUDN>
 8008f02:	4603      	mov	r3, r0
  ((LHCI_C1_Device_Information_ccrp_t *) (((TL_CcEvt_t *) (((TL_EvtPacket_t*) pcmd)->evtserial.evt.payload))->payload))->uid64 =
 8008f04:	f8c4 300b 	str.w	r3, [r4, #11]

  /**
   * UID96_0
   */
  ((LHCI_C1_Device_Information_ccrp_t *) (((TL_CcEvt_t *) (((TL_EvtPacket_t*) pcmd)->evtserial.evt.payload))->payload))->uid96_0 =
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	330b      	adds	r3, #11
 8008f0c:	1cdc      	adds	r4, r3, #3
      LL_GetUID_Word0();
 8008f0e:	f7ff fe85 	bl	8008c1c <LL_GetUID_Word0>
 8008f12:	4603      	mov	r3, r0
  ((LHCI_C1_Device_Information_ccrp_t *) (((TL_CcEvt_t *) (((TL_EvtPacket_t*) pcmd)->evtserial.evt.payload))->payload))->uid96_0 =
 8008f14:	f8c4 300f 	str.w	r3, [r4, #15]

  /**
   * UID96_1
   */
  ((LHCI_C1_Device_Information_ccrp_t *) (((TL_CcEvt_t *) (((TL_EvtPacket_t*) pcmd)->evtserial.evt.payload))->payload))->uid96_1 =
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	330b      	adds	r3, #11
 8008f1c:	1cdc      	adds	r4, r3, #3
      LL_GetUID_Word1();
 8008f1e:	f7ff fe89 	bl	8008c34 <LL_GetUID_Word1>
 8008f22:	4603      	mov	r3, r0
  ((LHCI_C1_Device_Information_ccrp_t *) (((TL_CcEvt_t *) (((TL_EvtPacket_t*) pcmd)->evtserial.evt.payload))->payload))->uid96_1 =
 8008f24:	f8c4 3013 	str.w	r3, [r4, #19]

  /**
   * UID96_2
   */
  ((LHCI_C1_Device_Information_ccrp_t *) (((TL_CcEvt_t *) (((TL_EvtPacket_t*) pcmd)->evtserial.evt.payload))->payload))->uid96_2 =
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	330b      	adds	r3, #11
 8008f2c:	1cdc      	adds	r4, r3, #3
      LL_GetUID_Word2();
 8008f2e:	f7ff fe8d 	bl	8008c4c <LL_GetUID_Word2>
 8008f32:	4603      	mov	r3, r0
  ((LHCI_C1_Device_Information_ccrp_t *) (((TL_CcEvt_t *) (((TL_EvtPacket_t*) pcmd)->evtserial.evt.payload))->payload))->uid96_2 =
 8008f34:	f8c4 3017 	str.w	r3, [r4, #23]

  /**
   * SafeBootInf
   */
  memcpy(
      &(((LHCI_C1_Device_Information_ccrp_t *) (((TL_CcEvt_t *) (((TL_EvtPacket_t*) pcmd)->evtserial.evt.payload))->payload))->SafeBootInf),
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	330b      	adds	r3, #11
 8008f3c:	3303      	adds	r3, #3
 8008f3e:	331b      	adds	r3, #27
      &(p_ref_table->p_device_info_table->SafeBootInfoTable),
 8008f40:	68ba      	ldr	r2, [r7, #8]
 8008f42:	6812      	ldr	r2, [r2, #0]
 8008f44:	6812      	ldr	r2, [r2, #0]
  memcpy(
 8008f46:	601a      	str	r2, [r3, #0]

  /**
   * FusInf
   */
  memcpy(
      &(((LHCI_C1_Device_Information_ccrp_t *) (((TL_CcEvt_t *) (((TL_EvtPacket_t*) pcmd)->evtserial.evt.payload))->payload))->FusInf),
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	330b      	adds	r3, #11
 8008f4c:	3303      	adds	r3, #3
 8008f4e:	f103 001f 	add.w	r0, r3, #31
      &(p_ref_table->p_device_info_table->FusInfoTable),
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	3304      	adds	r3, #4
  memcpy(
 8008f58:	220c      	movs	r2, #12
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	f001 fc0d 	bl	800a77a <memcpy>

  /**
   * WirelessFwInf
   */
  memcpy(
      &(((LHCI_C1_Device_Information_ccrp_t *) (((TL_CcEvt_t *) (((TL_EvtPacket_t*) pcmd)->evtserial.evt.payload))->payload))->WirelessFwInf),
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	330b      	adds	r3, #11
 8008f64:	3303      	adds	r3, #3
 8008f66:	f103 002b 	add.w	r0, r3, #43	; 0x2b
      &(p_ref_table->p_device_info_table->WirelessFwInfoTable),
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	3310      	adds	r3, #16
  memcpy(
 8008f70:	2210      	movs	r2, #16
 8008f72:	4619      	mov	r1, r3
 8008f74:	f001 fc01 	bl	800a77a <memcpy>
      sizeof(MB_WirelessFwInfoTable_t));

  /**
   * AppFwInf
   */
  (((LHCI_C1_Device_Information_ccrp_t *) (((TL_CcEvt_t *) (((TL_EvtPacket_t*) pcmd)->evtserial.evt.payload))->payload))->AppFwInf) =
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	330b      	adds	r3, #11
 8008f7c:	3303      	adds	r3, #3
 8008f7e:	4a05      	ldr	r2, [pc, #20]	; (8008f94 <LHCI_C1_Read_Device_Information+0x148>)
 8008f80:	6812      	ldr	r2, [r2, #0]
 8008f82:	f8c3 203b 	str.w	r2, [r3, #59]	; 0x3b
      FW_Version;

  return;
 8008f86:	bf00      	nop
}
 8008f88:	3714      	adds	r7, #20
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd90      	pop	{r4, r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	58004000 	.word	0x58004000
 8008f94:	0800cb6c 	.word	0x0800cb6c

08008f98 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b085      	sub	sp, #20
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8008fa2:	4b0f      	ldr	r3, [pc, #60]	; (8008fe0 <OTP_Read+0x48>)
 8008fa4:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008fa6:	e002      	b.n	8008fae <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	3b08      	subs	r3, #8
 8008fac:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	3307      	adds	r3, #7
 8008fb2:	781b      	ldrb	r3, [r3, #0]
 8008fb4:	79fa      	ldrb	r2, [r7, #7]
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d003      	beq.n	8008fc2 <OTP_Read+0x2a>
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	4a09      	ldr	r2, [pc, #36]	; (8008fe4 <OTP_Read+0x4c>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d1f2      	bne.n	8008fa8 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	3307      	adds	r3, #7
 8008fc6:	781b      	ldrb	r3, [r3, #0]
 8008fc8:	79fa      	ldrb	r2, [r7, #7]
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d001      	beq.n	8008fd2 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3714      	adds	r7, #20
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr
 8008fe0:	1fff73f8 	.word	0x1fff73f8
 8008fe4:	1fff7000 	.word	0x1fff7000

08008fe8 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b088      	sub	sp, #32
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008ff0:	f107 030c 	add.w	r3, r7, #12
 8008ff4:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8008ffc:	69fb      	ldr	r3, [r7, #28]
 8008ffe:	212e      	movs	r1, #46	; 0x2e
 8009000:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8009004:	f7fa fac2 	bl	800358c <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	330b      	adds	r3, #11
 800900c:	78db      	ldrb	r3, [r3, #3]
}
 800900e:	4618      	mov	r0, r3
 8009010:	3720      	adds	r7, #32
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b088      	sub	sp, #32
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800901e:	f107 030c 	add.w	r3, r7, #12
 8009022:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	210f      	movs	r1, #15
 800902e:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8009032:	f7fa faab 	bl	800358c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009036:	69fb      	ldr	r3, [r7, #28]
 8009038:	330b      	adds	r3, #11
 800903a:	78db      	ldrb	r3, [r3, #3]
}
 800903c:	4618      	mov	r0, r3
 800903e:	3720      	adds	r7, #32
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b088      	sub	sp, #32
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800904c:	f107 030c 	add.w	r3, r7, #12
 8009050:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	2110      	movs	r1, #16
 8009058:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800905c:	f7fa fa96 	bl	800358c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009060:	69fb      	ldr	r3, [r7, #28]
 8009062:	330b      	adds	r3, #11
 8009064:	78db      	ldrb	r3, [r3, #3]
}
 8009066:	4618      	mov	r0, r3
 8009068:	3720      	adds	r7, #32
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800906e:	b480      	push	{r7}
 8009070:	b083      	sub	sp, #12
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	687a      	ldr	r2, [r7, #4]
 800907a:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	605a      	str	r2, [r3, #4]
}
 8009082:	bf00      	nop
 8009084:	370c      	adds	r7, #12
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr

0800908e <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800908e:	b480      	push	{r7}
 8009090:	b087      	sub	sp, #28
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009096:	f3ef 8310 	mrs	r3, PRIMASK
 800909a:	60fb      	str	r3, [r7, #12]
  return(result);
 800909c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800909e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80090a0:	b672      	cpsid	i
}
 80090a2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d102      	bne.n	80090b4 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 80090ae:	2301      	movs	r3, #1
 80090b0:	75fb      	strb	r3, [r7, #23]
 80090b2:	e001      	b.n	80090b8 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 80090b4:	2300      	movs	r3, #0
 80090b6:	75fb      	strb	r3, [r7, #23]
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	f383 8810 	msr	PRIMASK, r3
}
 80090c2:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 80090c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	371c      	adds	r7, #28
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr

080090d2 <LST_insert_tail>:
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80090d2:	b480      	push	{r7}
 80090d4:	b087      	sub	sp, #28
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
 80090da:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090dc:	f3ef 8310 	mrs	r3, PRIMASK
 80090e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80090e2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80090e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80090e6:	b672      	cpsid	i
}
 80090e8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	687a      	ldr	r2, [r7, #4]
 80090ee:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	685a      	ldr	r2, [r3, #4]
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	683a      	ldr	r2, [r7, #0]
 80090fc:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	683a      	ldr	r2, [r7, #0]
 8009104:	601a      	str	r2, [r3, #0]
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	f383 8810 	msr	PRIMASK, r3
}
 8009110:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009112:	bf00      	nop
 8009114:	371c      	adds	r7, #28
 8009116:	46bd      	mov	sp, r7
 8009118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911c:	4770      	bx	lr

0800911e <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800911e:	b480      	push	{r7}
 8009120:	b087      	sub	sp, #28
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009126:	f3ef 8310 	mrs	r3, PRIMASK
 800912a:	60fb      	str	r3, [r7, #12]
  return(result);
 800912c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800912e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009130:	b672      	cpsid	i
}
 8009132:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	6812      	ldr	r2, [r2, #0]
 800913c:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	6852      	ldr	r2, [r2, #4]
 8009146:	605a      	str	r2, [r3, #4]
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	f383 8810 	msr	PRIMASK, r3
}
 8009152:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009154:	bf00      	nop
 8009156:	371c      	adds	r7, #28
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr

08009160 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b086      	sub	sp, #24
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800916a:	f3ef 8310 	mrs	r3, PRIMASK
 800916e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009170:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009172:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009174:	b672      	cpsid	i
}
 8009176:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4618      	mov	r0, r3
 8009186:	f7ff ffca 	bl	800911e <LST_remove_node>
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	f383 8810 	msr	PRIMASK, r3
}
 8009194:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009196:	bf00      	nop
 8009198:	3718      	adds	r7, #24
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}

0800919e <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800919e:	b580      	push	{r7, lr}
 80091a0:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80091a2:	f7fa fbad 	bl	8003900 <HW_IPCC_Enable>

  return;
 80091a6:	bf00      	nop
}
 80091a8:	bd80      	pop	{r7, pc}
	...

080091ac <TL_Init>:


void TL_Init( void )
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80091b0:	4b10      	ldr	r3, [pc, #64]	; (80091f4 <TL_Init+0x48>)
 80091b2:	4a11      	ldr	r2, [pc, #68]	; (80091f8 <TL_Init+0x4c>)
 80091b4:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80091b6:	4b0f      	ldr	r3, [pc, #60]	; (80091f4 <TL_Init+0x48>)
 80091b8:	4a10      	ldr	r2, [pc, #64]	; (80091fc <TL_Init+0x50>)
 80091ba:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80091bc:	4b0d      	ldr	r3, [pc, #52]	; (80091f4 <TL_Init+0x48>)
 80091be:	4a10      	ldr	r2, [pc, #64]	; (8009200 <TL_Init+0x54>)
 80091c0:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80091c2:	4b0c      	ldr	r3, [pc, #48]	; (80091f4 <TL_Init+0x48>)
 80091c4:	4a0f      	ldr	r2, [pc, #60]	; (8009204 <TL_Init+0x58>)
 80091c6:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 80091c8:	4b0a      	ldr	r3, [pc, #40]	; (80091f4 <TL_Init+0x48>)
 80091ca:	4a0f      	ldr	r2, [pc, #60]	; (8009208 <TL_Init+0x5c>)
 80091cc:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80091ce:	4b09      	ldr	r3, [pc, #36]	; (80091f4 <TL_Init+0x48>)
 80091d0:	4a0e      	ldr	r2, [pc, #56]	; (800920c <TL_Init+0x60>)
 80091d2:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80091d4:	4b07      	ldr	r3, [pc, #28]	; (80091f4 <TL_Init+0x48>)
 80091d6:	4a0e      	ldr	r2, [pc, #56]	; (8009210 <TL_Init+0x64>)
 80091d8:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80091da:	4b06      	ldr	r3, [pc, #24]	; (80091f4 <TL_Init+0x48>)
 80091dc:	4a0d      	ldr	r2, [pc, #52]	; (8009214 <TL_Init+0x68>)
 80091de:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80091e0:	4b04      	ldr	r3, [pc, #16]	; (80091f4 <TL_Init+0x48>)
 80091e2:	4a0d      	ldr	r2, [pc, #52]	; (8009218 <TL_Init+0x6c>)
 80091e4:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80091e6:	4b03      	ldr	r3, [pc, #12]	; (80091f4 <TL_Init+0x48>)
 80091e8:	4a0c      	ldr	r2, [pc, #48]	; (800921c <TL_Init+0x70>)
 80091ea:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 80091ec:	f7fa fb9c 	bl	8003928 <HW_IPCC_Init>

  return;
 80091f0:	bf00      	nop
}
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	20030000 	.word	0x20030000
 80091f8:	20030028 	.word	0x20030028
 80091fc:	20030048 	.word	0x20030048
 8009200:	20030058 	.word	0x20030058
 8009204:	20030068 	.word	0x20030068
 8009208:	20030070 	.word	0x20030070
 800920c:	20030078 	.word	0x20030078
 8009210:	20030080 	.word	0x20030080
 8009214:	2003009c 	.word	0x2003009c
 8009218:	200300a0 	.word	0x200300a0
 800921c:	200300ac 	.word	0x200300ac

08009220 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800922c:	4811      	ldr	r0, [pc, #68]	; (8009274 <TL_BLE_Init+0x54>)
 800922e:	f7ff ff1e 	bl	800906e <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8009232:	4b11      	ldr	r3, [pc, #68]	; (8009278 <TL_BLE_Init+0x58>)
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	689a      	ldr	r2, [r3, #8]
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	68da      	ldr	r2, [r3, #12]
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	4a0c      	ldr	r2, [pc, #48]	; (800927c <TL_BLE_Init+0x5c>)
 800924c:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	4a08      	ldr	r2, [pc, #32]	; (8009274 <TL_BLE_Init+0x54>)
 8009252:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8009254:	f7fa fb7e 	bl	8003954 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a08      	ldr	r2, [pc, #32]	; (8009280 <TL_BLE_Init+0x60>)
 800925e:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	4a07      	ldr	r2, [pc, #28]	; (8009284 <TL_BLE_Init+0x64>)
 8009266:	6013      	str	r3, [r2, #0]

  return 0;
 8009268:	2300      	movs	r3, #0
}
 800926a:	4618      	mov	r0, r3
 800926c:	3710      	adds	r7, #16
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	200300c8 	.word	0x200300c8
 8009278:	20030000 	.word	0x20030000
 800927c:	20030b60 	.word	0x20030b60
 8009280:	200006a4 	.word	0x200006a4
 8009284:	200006a8 	.word	0x200006a8

08009288 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	460b      	mov	r3, r1
 8009292:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8009294:	4b09      	ldr	r3, [pc, #36]	; (80092bc <TL_BLE_SendCmd+0x34>)
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	2201      	movs	r2, #1
 800929c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800929e:	4b07      	ldr	r3, [pc, #28]	; (80092bc <TL_BLE_SendCmd+0x34>)
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4619      	mov	r1, r3
 80092a6:	2001      	movs	r0, #1
 80092a8:	f000 f980 	bl	80095ac <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 80092ac:	f7fa fb5c 	bl	8003968 <HW_IPCC_BLE_SendCmd>

  return 0;
 80092b0:	2300      	movs	r3, #0
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3708      	adds	r7, #8
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
 80092ba:	bf00      	nop
 80092bc:	20030000 	.word	0x20030000

080092c0 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80092c6:	e01c      	b.n	8009302 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80092c8:	1d3b      	adds	r3, r7, #4
 80092ca:	4619      	mov	r1, r3
 80092cc:	4812      	ldr	r0, [pc, #72]	; (8009318 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80092ce:	f7ff ff47 	bl	8009160 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	7a5b      	ldrb	r3, [r3, #9]
 80092d6:	2b0f      	cmp	r3, #15
 80092d8:	d003      	beq.n	80092e2 <HW_IPCC_BLE_RxEvtNot+0x22>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	7a5b      	ldrb	r3, [r3, #9]
 80092de:	2b0e      	cmp	r3, #14
 80092e0:	d105      	bne.n	80092ee <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	4619      	mov	r1, r3
 80092e6:	2002      	movs	r0, #2
 80092e8:	f000 f960 	bl	80095ac <OutputDbgTrace>
 80092ec:	e004      	b.n	80092f8 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	4619      	mov	r1, r3
 80092f2:	2003      	movs	r0, #3
 80092f4:	f000 f95a 	bl	80095ac <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 80092f8:	4b08      	ldr	r3, [pc, #32]	; (800931c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	4610      	mov	r0, r2
 8009300:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8009302:	4805      	ldr	r0, [pc, #20]	; (8009318 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8009304:	f7ff fec3 	bl	800908e <LST_is_empty>
 8009308:	4603      	mov	r3, r0
 800930a:	2b00      	cmp	r3, #0
 800930c:	d0dc      	beq.n	80092c8 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800930e:	bf00      	nop
}
 8009310:	3708      	adds	r7, #8
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	200300c8 	.word	0x200300c8
 800931c:	200006a4 	.word	0x200006a4

08009320 <TL_BLE_SendAclData>:

int32_t TL_BLE_SendAclData( uint8_t* buffer, uint16_t size )
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	460b      	mov	r3, r1
 800932a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_AclDataPacket_t *)(TL_RefTable.p_ble_table->phci_acl_data_buffer))->AclDataSerial.type = TL_ACL_DATA_PKT_TYPE;
 800932c:	4b05      	ldr	r3, [pc, #20]	; (8009344 <TL_BLE_SendAclData+0x24>)
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	68db      	ldr	r3, [r3, #12]
 8009332:	2202      	movs	r2, #2
 8009334:	721a      	strb	r2, [r3, #8]

  HW_IPCC_BLE_SendAclData();
 8009336:	f7fa fb2d 	bl	8003994 <HW_IPCC_BLE_SendAclData>

  return 0;
 800933a:	2300      	movs	r3, #0
}
 800933c:	4618      	mov	r0, r3
 800933e:	3708      	adds	r7, #8
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}
 8009344:	20030000 	.word	0x20030000

08009348 <HW_IPCC_BLE_AclDataAckNot>:

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800934c:	4b02      	ldr	r3, [pc, #8]	; (8009358 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4798      	blx	r3

  return;
 8009352:	bf00      	nop
}
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	200006a8 	.word	0x200006a8

0800935c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8009368:	480d      	ldr	r0, [pc, #52]	; (80093a0 <TL_SYS_Init+0x44>)
 800936a:	f7ff fe80 	bl	800906e <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800936e:	4b0d      	ldr	r3, [pc, #52]	; (80093a4 <TL_SYS_Init+0x48>)
 8009370:	68db      	ldr	r3, [r3, #12]
 8009372:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	689a      	ldr	r2, [r3, #8]
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	4a08      	ldr	r2, [pc, #32]	; (80093a0 <TL_SYS_Init+0x44>)
 8009380:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8009382:	f7fa fb21 	bl	80039c8 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a07      	ldr	r2, [pc, #28]	; (80093a8 <TL_SYS_Init+0x4c>)
 800938c:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	4a06      	ldr	r2, [pc, #24]	; (80093ac <TL_SYS_Init+0x50>)
 8009394:	6013      	str	r3, [r2, #0]

  return 0;
 8009396:	2300      	movs	r3, #0
}
 8009398:	4618      	mov	r0, r3
 800939a:	3710      	adds	r7, #16
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}
 80093a0:	200300d0 	.word	0x200300d0
 80093a4:	20030000 	.word	0x20030000
 80093a8:	200006ac 	.word	0x200006ac
 80093ac:	200006b0 	.word	0x200006b0

080093b0 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b082      	sub	sp, #8
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	460b      	mov	r3, r1
 80093ba:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80093bc:	4b09      	ldr	r3, [pc, #36]	; (80093e4 <TL_SYS_SendCmd+0x34>)
 80093be:	68db      	ldr	r3, [r3, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	2210      	movs	r2, #16
 80093c4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 80093c6:	4b07      	ldr	r3, [pc, #28]	; (80093e4 <TL_SYS_SendCmd+0x34>)
 80093c8:	68db      	ldr	r3, [r3, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4619      	mov	r1, r3
 80093ce:	2004      	movs	r0, #4
 80093d0:	f000 f8ec 	bl	80095ac <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 80093d4:	f7fa fb02 	bl	80039dc <HW_IPCC_SYS_SendCmd>

  return 0;
 80093d8:	2300      	movs	r3, #0
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3708      	adds	r7, #8
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}
 80093e2:	bf00      	nop
 80093e4:	20030000 	.word	0x20030000

080093e8 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80093ec:	4b07      	ldr	r3, [pc, #28]	; (800940c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80093ee:	68db      	ldr	r3, [r3, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4619      	mov	r1, r3
 80093f4:	2005      	movs	r0, #5
 80093f6:	f000 f8d9 	bl	80095ac <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80093fa:	4b05      	ldr	r3, [pc, #20]	; (8009410 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4a03      	ldr	r2, [pc, #12]	; (800940c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009400:	68d2      	ldr	r2, [r2, #12]
 8009402:	6812      	ldr	r2, [r2, #0]
 8009404:	4610      	mov	r0, r2
 8009406:	4798      	blx	r3

  return;
 8009408:	bf00      	nop
}
 800940a:	bd80      	pop	{r7, pc}
 800940c:	20030000 	.word	0x20030000
 8009410:	200006ac 	.word	0x200006ac

08009414 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800941a:	e00e      	b.n	800943a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800941c:	1d3b      	adds	r3, r7, #4
 800941e:	4619      	mov	r1, r3
 8009420:	480b      	ldr	r0, [pc, #44]	; (8009450 <HW_IPCC_SYS_EvtNot+0x3c>)
 8009422:	f7ff fe9d 	bl	8009160 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	4619      	mov	r1, r3
 800942a:	2006      	movs	r0, #6
 800942c:	f000 f8be 	bl	80095ac <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8009430:	4b08      	ldr	r3, [pc, #32]	; (8009454 <HW_IPCC_SYS_EvtNot+0x40>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	687a      	ldr	r2, [r7, #4]
 8009436:	4610      	mov	r0, r2
 8009438:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800943a:	4805      	ldr	r0, [pc, #20]	; (8009450 <HW_IPCC_SYS_EvtNot+0x3c>)
 800943c:	f7ff fe27 	bl	800908e <LST_is_empty>
 8009440:	4603      	mov	r3, r0
 8009442:	2b00      	cmp	r3, #0
 8009444:	d0ea      	beq.n	800941c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8009446:	bf00      	nop
}
 8009448:	3708      	adds	r7, #8
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}
 800944e:	bf00      	nop
 8009450:	200300d0 	.word	0x200300d0
 8009454:	200006b0 	.word	0x200006b0

08009458 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b082      	sub	sp, #8
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8009460:	4817      	ldr	r0, [pc, #92]	; (80094c0 <TL_MM_Init+0x68>)
 8009462:	f7ff fe04 	bl	800906e <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8009466:	4817      	ldr	r0, [pc, #92]	; (80094c4 <TL_MM_Init+0x6c>)
 8009468:	f7ff fe01 	bl	800906e <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800946c:	4b16      	ldr	r3, [pc, #88]	; (80094c8 <TL_MM_Init+0x70>)
 800946e:	691b      	ldr	r3, [r3, #16]
 8009470:	4a16      	ldr	r2, [pc, #88]	; (80094cc <TL_MM_Init+0x74>)
 8009472:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8009474:	4b15      	ldr	r3, [pc, #84]	; (80094cc <TL_MM_Init+0x74>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	687a      	ldr	r2, [r7, #4]
 800947a:	6892      	ldr	r2, [r2, #8]
 800947c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800947e:	4b13      	ldr	r3, [pc, #76]	; (80094cc <TL_MM_Init+0x74>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	687a      	ldr	r2, [r7, #4]
 8009484:	68d2      	ldr	r2, [r2, #12]
 8009486:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8009488:	4b10      	ldr	r3, [pc, #64]	; (80094cc <TL_MM_Init+0x74>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a0c      	ldr	r2, [pc, #48]	; (80094c0 <TL_MM_Init+0x68>)
 800948e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8009490:	4b0e      	ldr	r3, [pc, #56]	; (80094cc <TL_MM_Init+0x74>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	687a      	ldr	r2, [r7, #4]
 8009496:	6812      	ldr	r2, [r2, #0]
 8009498:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800949a:	4b0c      	ldr	r3, [pc, #48]	; (80094cc <TL_MM_Init+0x74>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	687a      	ldr	r2, [r7, #4]
 80094a0:	6852      	ldr	r2, [r2, #4]
 80094a2:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80094a4:	4b09      	ldr	r3, [pc, #36]	; (80094cc <TL_MM_Init+0x74>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	6912      	ldr	r2, [r2, #16]
 80094ac:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80094ae:	4b07      	ldr	r3, [pc, #28]	; (80094cc <TL_MM_Init+0x74>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	6952      	ldr	r2, [r2, #20]
 80094b6:	619a      	str	r2, [r3, #24]

  return;
 80094b8:	bf00      	nop
}
 80094ba:	3708      	adds	r7, #8
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}
 80094c0:	200300b8 	.word	0x200300b8
 80094c4:	2000069c 	.word	0x2000069c
 80094c8:	20030000 	.word	0x20030000
 80094cc:	200006b4 	.word	0x200006b4

080094d0 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b082      	sub	sp, #8
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80094d8:	6879      	ldr	r1, [r7, #4]
 80094da:	4807      	ldr	r0, [pc, #28]	; (80094f8 <TL_MM_EvtDone+0x28>)
 80094dc:	f7ff fdf9 	bl	80090d2 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80094e0:	6879      	ldr	r1, [r7, #4]
 80094e2:	2000      	movs	r0, #0
 80094e4:	f000 f862 	bl	80095ac <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80094e8:	4804      	ldr	r0, [pc, #16]	; (80094fc <TL_MM_EvtDone+0x2c>)
 80094ea:	f7fa fa9d 	bl	8003a28 <HW_IPCC_MM_SendFreeBuf>

  return;
 80094ee:	bf00      	nop
}
 80094f0:	3708      	adds	r7, #8
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop
 80094f8:	2000069c 	.word	0x2000069c
 80094fc:	08009501 	.word	0x08009501

08009500 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b082      	sub	sp, #8
 8009504:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009506:	e00c      	b.n	8009522 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8009508:	1d3b      	adds	r3, r7, #4
 800950a:	4619      	mov	r1, r3
 800950c:	480a      	ldr	r0, [pc, #40]	; (8009538 <SendFreeBuf+0x38>)
 800950e:	f7ff fe27 	bl	8009160 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8009512:	4b0a      	ldr	r3, [pc, #40]	; (800953c <SendFreeBuf+0x3c>)
 8009514:	691b      	ldr	r3, [r3, #16]
 8009516:	691b      	ldr	r3, [r3, #16]
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	4611      	mov	r1, r2
 800951c:	4618      	mov	r0, r3
 800951e:	f7ff fdd8 	bl	80090d2 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009522:	4805      	ldr	r0, [pc, #20]	; (8009538 <SendFreeBuf+0x38>)
 8009524:	f7ff fdb3 	bl	800908e <LST_is_empty>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	d0ec      	beq.n	8009508 <SendFreeBuf+0x8>
  }

  return;
 800952e:	bf00      	nop
}
 8009530:	3708      	adds	r7, #8
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	2000069c 	.word	0x2000069c
 800953c:	20030000 	.word	0x20030000

08009540 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8009540:	b580      	push	{r7, lr}
 8009542:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8009544:	4805      	ldr	r0, [pc, #20]	; (800955c <TL_TRACES_Init+0x1c>)
 8009546:	f7ff fd92 	bl	800906e <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800954a:	4b05      	ldr	r3, [pc, #20]	; (8009560 <TL_TRACES_Init+0x20>)
 800954c:	695b      	ldr	r3, [r3, #20]
 800954e:	4a03      	ldr	r2, [pc, #12]	; (800955c <TL_TRACES_Init+0x1c>)
 8009550:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8009552:	f7fa fa9f 	bl	8003a94 <HW_IPCC_TRACES_Init>

  return;
 8009556:	bf00      	nop
}
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	200300c0 	.word	0x200300c0
 8009560:	20030000 	.word	0x20030000

08009564 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b082      	sub	sp, #8
 8009568:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800956a:	e008      	b.n	800957e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800956c:	1d3b      	adds	r3, r7, #4
 800956e:	4619      	mov	r1, r3
 8009570:	4808      	ldr	r0, [pc, #32]	; (8009594 <HW_IPCC_TRACES_EvtNot+0x30>)
 8009572:	f7ff fdf5 	bl	8009160 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	4618      	mov	r0, r3
 800957a:	f000 f80d 	bl	8009598 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800957e:	4805      	ldr	r0, [pc, #20]	; (8009594 <HW_IPCC_TRACES_EvtNot+0x30>)
 8009580:	f7ff fd85 	bl	800908e <LST_is_empty>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d0f0      	beq.n	800956c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800958a:	bf00      	nop
}
 800958c:	3708      	adds	r7, #8
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
 8009592:	bf00      	nop
 8009594:	200300c0 	.word	0x200300c0

08009598 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8009598:	b480      	push	{r7}
 800959a:	b083      	sub	sp, #12
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 80095a0:	bf00      	nop
 80095a2:	370c      	adds	r7, #12
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr

080095ac <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b085      	sub	sp, #20
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	4603      	mov	r3, r0
 80095b4:	6039      	str	r1, [r7, #0]
 80095b6:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 80095b8:	79fb      	ldrb	r3, [r7, #7]
 80095ba:	2b06      	cmp	r3, #6
 80095bc:	d845      	bhi.n	800964a <OutputDbgTrace+0x9e>
 80095be:	a201      	add	r2, pc, #4	; (adr r2, 80095c4 <OutputDbgTrace+0x18>)
 80095c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095c4:	080095e1 	.word	0x080095e1
 80095c8:	08009605 	.word	0x08009605
 80095cc:	0800960b 	.word	0x0800960b
 80095d0:	0800961f 	.word	0x0800961f
 80095d4:	0800962b 	.word	0x0800962b
 80095d8:	08009631 	.word	0x08009631
 80095dc:	0800963f 	.word	0x0800963f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	7a5b      	ldrb	r3, [r3, #9]
 80095e8:	2bff      	cmp	r3, #255	; 0xff
 80095ea:	d005      	beq.n	80095f8 <OutputDbgTrace+0x4c>
 80095ec:	2bff      	cmp	r3, #255	; 0xff
 80095ee:	dc05      	bgt.n	80095fc <OutputDbgTrace+0x50>
 80095f0:	2b0e      	cmp	r3, #14
 80095f2:	d005      	beq.n	8009600 <OutputDbgTrace+0x54>
 80095f4:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 80095f6:	e001      	b.n	80095fc <OutputDbgTrace+0x50>
          break;
 80095f8:	bf00      	nop
 80095fa:	e027      	b.n	800964c <OutputDbgTrace+0xa0>
          break;
 80095fc:	bf00      	nop
 80095fe:	e025      	b.n	800964c <OutputDbgTrace+0xa0>
          break;
 8009600:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8009602:	e023      	b.n	800964c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8009608:	e020      	b.n	800964c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	7a5b      	ldrb	r3, [r3, #9]
 8009612:	2b0e      	cmp	r3, #14
 8009614:	d001      	beq.n	800961a <OutputDbgTrace+0x6e>
 8009616:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8009618:	e000      	b.n	800961c <OutputDbgTrace+0x70>
          break;
 800961a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800961c:	e016      	b.n	800964c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	7a5b      	ldrb	r3, [r3, #9]
 8009626:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009628:	e010      	b.n	800964c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800962e:	e00d      	b.n	800964c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	7a5b      	ldrb	r3, [r3, #9]
 8009638:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800963a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800963c:	e006      	b.n	800964c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	7a5b      	ldrb	r3, [r3, #9]
 8009646:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009648:	e000      	b.n	800964c <OutputDbgTrace+0xa0>

    default:
      break;
 800964a:	bf00      	nop
  }

  return;
 800964c:	bf00      	nop
}
 800964e:	3714      	adds	r7, #20
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr

08009658 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8009658:	b480      	push	{r7}
 800965a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800965c:	4b05      	ldr	r3, [pc, #20]	; (8009674 <UTIL_LPM_Init+0x1c>)
 800965e:	2200      	movs	r2, #0
 8009660:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8009662:	4b05      	ldr	r3, [pc, #20]	; (8009678 <UTIL_LPM_Init+0x20>)
 8009664:	2200      	movs	r2, #0
 8009666:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8009668:	bf00      	nop
 800966a:	46bd      	mov	sp, r7
 800966c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009670:	4770      	bx	lr
 8009672:	bf00      	nop
 8009674:	200006b8 	.word	0x200006b8
 8009678:	200006bc 	.word	0x200006bc

0800967c <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800967c:	b480      	push	{r7}
 800967e:	b087      	sub	sp, #28
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	460b      	mov	r3, r1
 8009686:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009688:	f3ef 8310 	mrs	r3, PRIMASK
 800968c:	613b      	str	r3, [r7, #16]
  return(result);
 800968e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8009690:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009692:	b672      	cpsid	i
}
 8009694:	bf00      	nop
  
  switch( state )
 8009696:	78fb      	ldrb	r3, [r7, #3]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d008      	beq.n	80096ae <UTIL_LPM_SetStopMode+0x32>
 800969c:	2b01      	cmp	r3, #1
 800969e:	d10e      	bne.n	80096be <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 80096a0:	4b0d      	ldr	r3, [pc, #52]	; (80096d8 <UTIL_LPM_SetStopMode+0x5c>)
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	4313      	orrs	r3, r2
 80096a8:	4a0b      	ldr	r2, [pc, #44]	; (80096d8 <UTIL_LPM_SetStopMode+0x5c>)
 80096aa:	6013      	str	r3, [r2, #0]
      break;
 80096ac:	e008      	b.n	80096c0 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	43da      	mvns	r2, r3
 80096b2:	4b09      	ldr	r3, [pc, #36]	; (80096d8 <UTIL_LPM_SetStopMode+0x5c>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4013      	ands	r3, r2
 80096b8:	4a07      	ldr	r2, [pc, #28]	; (80096d8 <UTIL_LPM_SetStopMode+0x5c>)
 80096ba:	6013      	str	r3, [r2, #0]
      break;
 80096bc:	e000      	b.n	80096c0 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 80096be:	bf00      	nop
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f383 8810 	msr	PRIMASK, r3
}
 80096ca:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80096cc:	bf00      	nop
 80096ce:	371c      	adds	r7, #28
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr
 80096d8:	200006b8 	.word	0x200006b8

080096dc <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80096dc:	b480      	push	{r7}
 80096de:	b087      	sub	sp, #28
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	460b      	mov	r3, r1
 80096e6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096e8:	f3ef 8310 	mrs	r3, PRIMASK
 80096ec:	613b      	str	r3, [r7, #16]
  return(result);
 80096ee:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80096f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80096f2:	b672      	cpsid	i
}
 80096f4:	bf00      	nop
  
  switch(state)
 80096f6:	78fb      	ldrb	r3, [r7, #3]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d008      	beq.n	800970e <UTIL_LPM_SetOffMode+0x32>
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d10e      	bne.n	800971e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8009700:	4b0d      	ldr	r3, [pc, #52]	; (8009738 <UTIL_LPM_SetOffMode+0x5c>)
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	4313      	orrs	r3, r2
 8009708:	4a0b      	ldr	r2, [pc, #44]	; (8009738 <UTIL_LPM_SetOffMode+0x5c>)
 800970a:	6013      	str	r3, [r2, #0]
      break;
 800970c:	e008      	b.n	8009720 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	43da      	mvns	r2, r3
 8009712:	4b09      	ldr	r3, [pc, #36]	; (8009738 <UTIL_LPM_SetOffMode+0x5c>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4013      	ands	r3, r2
 8009718:	4a07      	ldr	r2, [pc, #28]	; (8009738 <UTIL_LPM_SetOffMode+0x5c>)
 800971a:	6013      	str	r3, [r2, #0]
      break;
 800971c:	e000      	b.n	8009720 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800971e:	bf00      	nop
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f383 8810 	msr	PRIMASK, r3
}
 800972a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800972c:	bf00      	nop
 800972e:	371c      	adds	r7, #28
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr
 8009738:	200006bc 	.word	0x200006bc

0800973c <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009742:	f3ef 8310 	mrs	r3, PRIMASK
 8009746:	60bb      	str	r3, [r7, #8]
  return(result);
 8009748:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 800974a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800974c:	b672      	cpsid	i
}
 800974e:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8009750:	4b12      	ldr	r3, [pc, #72]	; (800979c <UTIL_LPM_EnterLowPower+0x60>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d006      	beq.n	8009766 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8009758:	4b11      	ldr	r3, [pc, #68]	; (80097a0 <UTIL_LPM_EnterLowPower+0x64>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800975e:	4b10      	ldr	r3, [pc, #64]	; (80097a0 <UTIL_LPM_EnterLowPower+0x64>)
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	4798      	blx	r3
 8009764:	e010      	b.n	8009788 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8009766:	4b0f      	ldr	r3, [pc, #60]	; (80097a4 <UTIL_LPM_EnterLowPower+0x68>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d006      	beq.n	800977c <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 800976e:	4b0c      	ldr	r3, [pc, #48]	; (80097a0 <UTIL_LPM_EnterLowPower+0x64>)
 8009770:	689b      	ldr	r3, [r3, #8]
 8009772:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8009774:	4b0a      	ldr	r3, [pc, #40]	; (80097a0 <UTIL_LPM_EnterLowPower+0x64>)
 8009776:	68db      	ldr	r3, [r3, #12]
 8009778:	4798      	blx	r3
 800977a:	e005      	b.n	8009788 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 800977c:	4b08      	ldr	r3, [pc, #32]	; (80097a0 <UTIL_LPM_EnterLowPower+0x64>)
 800977e:	691b      	ldr	r3, [r3, #16]
 8009780:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8009782:	4b07      	ldr	r3, [pc, #28]	; (80097a0 <UTIL_LPM_EnterLowPower+0x64>)
 8009784:	695b      	ldr	r3, [r3, #20]
 8009786:	4798      	blx	r3
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f383 8810 	msr	PRIMASK, r3
}
 8009792:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8009794:	bf00      	nop
 8009796:	3710      	adds	r7, #16
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}
 800979c:	200006b8 	.word	0x200006b8
 80097a0:	0800c6ec 	.word	0x0800c6ec
 80097a4:	200006bc 	.word	0x200006bc

080097a8 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b090      	sub	sp, #64	; 0x40
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80097b0:	4b73      	ldr	r3, [pc, #460]	; (8009980 <UTIL_SEQ_Run+0x1d8>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 80097b6:	4b72      	ldr	r3, [pc, #456]	; (8009980 <UTIL_SEQ_Run+0x1d8>)
 80097b8:	681a      	ldr	r2, [r3, #0]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	4013      	ands	r3, r2
 80097be:	4a70      	ldr	r2, [pc, #448]	; (8009980 <UTIL_SEQ_Run+0x1d8>)
 80097c0:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 80097c2:	4b70      	ldr	r3, [pc, #448]	; (8009984 <UTIL_SEQ_Run+0x1dc>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 80097c8:	4b6f      	ldr	r3, [pc, #444]	; (8009988 <UTIL_SEQ_Run+0x1e0>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 80097ce:	4b6f      	ldr	r3, [pc, #444]	; (800998c <UTIL_SEQ_Run+0x1e4>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 80097d4:	4b6e      	ldr	r3, [pc, #440]	; (8009990 <UTIL_SEQ_Run+0x1e8>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80097da:	e08d      	b.n	80098f8 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 80097dc:	2300      	movs	r3, #0
 80097de:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80097e0:	e002      	b.n	80097e8 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 80097e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097e4:	3301      	adds	r3, #1
 80097e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80097e8:	4a6a      	ldr	r2, [pc, #424]	; (8009994 <UTIL_SEQ_Run+0x1ec>)
 80097ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097ec:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80097f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f2:	401a      	ands	r2, r3
 80097f4:	4b62      	ldr	r3, [pc, #392]	; (8009980 <UTIL_SEQ_Run+0x1d8>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4013      	ands	r3, r2
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d0f1      	beq.n	80097e2 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 80097fe:	4a65      	ldr	r2, [pc, #404]	; (8009994 <UTIL_SEQ_Run+0x1ec>)
 8009800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009802:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009808:	401a      	ands	r2, r3
 800980a:	4b5d      	ldr	r3, [pc, #372]	; (8009980 <UTIL_SEQ_Run+0x1d8>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4013      	ands	r3, r2
 8009810:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8009812:	4a60      	ldr	r2, [pc, #384]	; (8009994 <UTIL_SEQ_Run+0x1ec>)
 8009814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009816:	00db      	lsls	r3, r3, #3
 8009818:	4413      	add	r3, r2
 800981a:	685a      	ldr	r2, [r3, #4]
 800981c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981e:	4013      	ands	r3, r2
 8009820:	2b00      	cmp	r3, #0
 8009822:	d106      	bne.n	8009832 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8009824:	4a5b      	ldr	r2, [pc, #364]	; (8009994 <UTIL_SEQ_Run+0x1ec>)
 8009826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009828:	00db      	lsls	r3, r3, #3
 800982a:	4413      	add	r3, r2
 800982c:	f04f 32ff 	mov.w	r2, #4294967295
 8009830:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8009832:	4a58      	ldr	r2, [pc, #352]	; (8009994 <UTIL_SEQ_Run+0x1ec>)
 8009834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009836:	00db      	lsls	r3, r3, #3
 8009838:	4413      	add	r3, r2
 800983a:	685a      	ldr	r2, [r3, #4]
 800983c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983e:	4013      	ands	r3, r2
 8009840:	4618      	mov	r0, r3
 8009842:	f000 f973 	bl	8009b2c <SEQ_BitPosition>
 8009846:	4603      	mov	r3, r0
 8009848:	461a      	mov	r2, r3
 800984a:	4b53      	ldr	r3, [pc, #332]	; (8009998 <UTIL_SEQ_Run+0x1f0>)
 800984c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800984e:	4a51      	ldr	r2, [pc, #324]	; (8009994 <UTIL_SEQ_Run+0x1ec>)
 8009850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009852:	00db      	lsls	r3, r3, #3
 8009854:	4413      	add	r3, r2
 8009856:	685a      	ldr	r2, [r3, #4]
 8009858:	4b4f      	ldr	r3, [pc, #316]	; (8009998 <UTIL_SEQ_Run+0x1f0>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	2101      	movs	r1, #1
 800985e:	fa01 f303 	lsl.w	r3, r1, r3
 8009862:	43db      	mvns	r3, r3
 8009864:	401a      	ands	r2, r3
 8009866:	494b      	ldr	r1, [pc, #300]	; (8009994 <UTIL_SEQ_Run+0x1ec>)
 8009868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800986a:	00db      	lsls	r3, r3, #3
 800986c:	440b      	add	r3, r1
 800986e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009870:	f3ef 8310 	mrs	r3, PRIMASK
 8009874:	61bb      	str	r3, [r7, #24]
  return(result);
 8009876:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009878:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800987a:	b672      	cpsid	i
}
 800987c:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800987e:	4b46      	ldr	r3, [pc, #280]	; (8009998 <UTIL_SEQ_Run+0x1f0>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	2201      	movs	r2, #1
 8009884:	fa02 f303 	lsl.w	r3, r2, r3
 8009888:	43da      	mvns	r2, r3
 800988a:	4b3e      	ldr	r3, [pc, #248]	; (8009984 <UTIL_SEQ_Run+0x1dc>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4013      	ands	r3, r2
 8009890:	4a3c      	ldr	r2, [pc, #240]	; (8009984 <UTIL_SEQ_Run+0x1dc>)
 8009892:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8009894:	2302      	movs	r3, #2
 8009896:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009898:	e013      	b.n	80098c2 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800989a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800989c:	3b01      	subs	r3, #1
 800989e:	4a3d      	ldr	r2, [pc, #244]	; (8009994 <UTIL_SEQ_Run+0x1ec>)
 80098a0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80098a4:	4b3c      	ldr	r3, [pc, #240]	; (8009998 <UTIL_SEQ_Run+0x1f0>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	2201      	movs	r2, #1
 80098aa:	fa02 f303 	lsl.w	r3, r2, r3
 80098ae:	43da      	mvns	r2, r3
 80098b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098b2:	3b01      	subs	r3, #1
 80098b4:	400a      	ands	r2, r1
 80098b6:	4937      	ldr	r1, [pc, #220]	; (8009994 <UTIL_SEQ_Run+0x1ec>)
 80098b8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80098bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098be:	3b01      	subs	r3, #1
 80098c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d1e8      	bne.n	800989a <UTIL_SEQ_Run+0xf2>
 80098c8:	6a3b      	ldr	r3, [r7, #32]
 80098ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	f383 8810 	msr	PRIMASK, r3
}
 80098d2:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80098d4:	4b30      	ldr	r3, [pc, #192]	; (8009998 <UTIL_SEQ_Run+0x1f0>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a30      	ldr	r2, [pc, #192]	; (800999c <UTIL_SEQ_Run+0x1f4>)
 80098da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098de:	4798      	blx	r3

    local_taskset = TaskSet;
 80098e0:	4b28      	ldr	r3, [pc, #160]	; (8009984 <UTIL_SEQ_Run+0x1dc>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 80098e6:	4b28      	ldr	r3, [pc, #160]	; (8009988 <UTIL_SEQ_Run+0x1e0>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 80098ec:	4b27      	ldr	r3, [pc, #156]	; (800998c <UTIL_SEQ_Run+0x1e4>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 80098f2:	4b27      	ldr	r3, [pc, #156]	; (8009990 <UTIL_SEQ_Run+0x1e8>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80098f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80098fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098fc:	401a      	ands	r2, r3
 80098fe:	4b20      	ldr	r3, [pc, #128]	; (8009980 <UTIL_SEQ_Run+0x1d8>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4013      	ands	r3, r2
 8009904:	2b00      	cmp	r3, #0
 8009906:	d005      	beq.n	8009914 <UTIL_SEQ_Run+0x16c>
 8009908:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800990a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800990c:	4013      	ands	r3, r2
 800990e:	2b00      	cmp	r3, #0
 8009910:	f43f af64 	beq.w	80097dc <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8009914:	4b20      	ldr	r3, [pc, #128]	; (8009998 <UTIL_SEQ_Run+0x1f0>)
 8009916:	f04f 32ff 	mov.w	r2, #4294967295
 800991a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800991c:	f000 f8f8 	bl	8009b10 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009920:	f3ef 8310 	mrs	r3, PRIMASK
 8009924:	613b      	str	r3, [r7, #16]
  return(result);
 8009926:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8009928:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800992a:	b672      	cpsid	i
}
 800992c:	bf00      	nop
  local_taskset = TaskSet;
 800992e:	4b15      	ldr	r3, [pc, #84]	; (8009984 <UTIL_SEQ_Run+0x1dc>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8009934:	4b14      	ldr	r3, [pc, #80]	; (8009988 <UTIL_SEQ_Run+0x1e0>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800993a:	4b14      	ldr	r3, [pc, #80]	; (800998c <UTIL_SEQ_Run+0x1e4>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8009940:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009944:	401a      	ands	r2, r3
 8009946:	4b0e      	ldr	r3, [pc, #56]	; (8009980 <UTIL_SEQ_Run+0x1d8>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	4013      	ands	r3, r2
 800994c:	2b00      	cmp	r3, #0
 800994e:	d107      	bne.n	8009960 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8009950:	4b0f      	ldr	r3, [pc, #60]	; (8009990 <UTIL_SEQ_Run+0x1e8>)
 8009952:	681a      	ldr	r2, [r3, #0]
 8009954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009956:	4013      	ands	r3, r2
 8009958:	2b00      	cmp	r3, #0
 800995a:	d101      	bne.n	8009960 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800995c:	f7f7 fd6c 	bl	8001438 <UTIL_SEQ_Idle>
 8009960:	69fb      	ldr	r3, [r7, #28]
 8009962:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f383 8810 	msr	PRIMASK, r3
}
 800996a:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800996c:	f000 f8d7 	bl	8009b1e <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8009970:	4a03      	ldr	r2, [pc, #12]	; (8009980 <UTIL_SEQ_Run+0x1d8>)
 8009972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009974:	6013      	str	r3, [r2, #0]

  return;
 8009976:	bf00      	nop
}
 8009978:	3740      	adds	r7, #64	; 0x40
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop
 8009980:	20000048 	.word	0x20000048
 8009984:	200006c0 	.word	0x200006c0
 8009988:	200006c4 	.word	0x200006c4
 800998c:	20000044 	.word	0x20000044
 8009990:	200006c8 	.word	0x200006c8
 8009994:	20000750 	.word	0x20000750
 8009998:	200006cc 	.word	0x200006cc
 800999c:	200006d0 	.word	0x200006d0

080099a0 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b088      	sub	sp, #32
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	60f8      	str	r0, [r7, #12]
 80099a8:	60b9      	str	r1, [r7, #8]
 80099aa:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099ac:	f3ef 8310 	mrs	r3, PRIMASK
 80099b0:	617b      	str	r3, [r7, #20]
  return(result);
 80099b2:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80099b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80099b6:	b672      	cpsid	i
}
 80099b8:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80099ba:	68f8      	ldr	r0, [r7, #12]
 80099bc:	f000 f8b6 	bl	8009b2c <SEQ_BitPosition>
 80099c0:	4603      	mov	r3, r0
 80099c2:	4619      	mov	r1, r3
 80099c4:	4a06      	ldr	r2, [pc, #24]	; (80099e0 <UTIL_SEQ_RegTask+0x40>)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80099cc:	69fb      	ldr	r3, [r7, #28]
 80099ce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099d0:	69bb      	ldr	r3, [r7, #24]
 80099d2:	f383 8810 	msr	PRIMASK, r3
}
 80099d6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 80099d8:	bf00      	nop
}
 80099da:	3720      	adds	r7, #32
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}
 80099e0:	200006d0 	.word	0x200006d0

080099e4 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80099e4:	b480      	push	{r7}
 80099e6:	b087      	sub	sp, #28
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099ee:	f3ef 8310 	mrs	r3, PRIMASK
 80099f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80099f4:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80099f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80099f8:	b672      	cpsid	i
}
 80099fa:	bf00      	nop

  TaskSet |= TaskId_bm;
 80099fc:	4b0d      	ldr	r3, [pc, #52]	; (8009a34 <UTIL_SEQ_SetTask+0x50>)
 80099fe:	681a      	ldr	r2, [r3, #0]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	4313      	orrs	r3, r2
 8009a04:	4a0b      	ldr	r2, [pc, #44]	; (8009a34 <UTIL_SEQ_SetTask+0x50>)
 8009a06:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8009a08:	4a0b      	ldr	r2, [pc, #44]	; (8009a38 <UTIL_SEQ_SetTask+0x54>)
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	431a      	orrs	r2, r3
 8009a14:	4908      	ldr	r1, [pc, #32]	; (8009a38 <UTIL_SEQ_SetTask+0x54>)
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	f383 8810 	msr	PRIMASK, r3
}
 8009a26:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009a28:	bf00      	nop
}
 8009a2a:	371c      	adds	r7, #28
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr
 8009a34:	200006c0 	.word	0x200006c0
 8009a38:	20000750 	.word	0x20000750

08009a3c <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b087      	sub	sp, #28
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a44:	f3ef 8310 	mrs	r3, PRIMASK
 8009a48:	60fb      	str	r3, [r7, #12]
  return(result);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009a4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009a4e:	b672      	cpsid	i
}
 8009a50:	bf00      	nop

  EvtSet |= EvtId_bm;
 8009a52:	4b09      	ldr	r3, [pc, #36]	; (8009a78 <UTIL_SEQ_SetEvt+0x3c>)
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	4a07      	ldr	r2, [pc, #28]	; (8009a78 <UTIL_SEQ_SetEvt+0x3c>)
 8009a5c:	6013      	str	r3, [r2, #0]
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	f383 8810 	msr	PRIMASK, r3
}
 8009a68:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009a6a:	bf00      	nop
}
 8009a6c:	371c      	adds	r7, #28
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a74:	4770      	bx	lr
 8009a76:	bf00      	nop
 8009a78:	200006c4 	.word	0x200006c4

08009a7c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b088      	sub	sp, #32
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8009a84:	4b1f      	ldr	r3, [pc, #124]	; (8009b04 <UTIL_SEQ_WaitEvt+0x88>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8009a8a:	4b1e      	ldr	r3, [pc, #120]	; (8009b04 <UTIL_SEQ_WaitEvt+0x88>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a92:	d102      	bne.n	8009a9a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8009a94:	2300      	movs	r3, #0
 8009a96:	61fb      	str	r3, [r7, #28]
 8009a98:	e005      	b.n	8009aa6 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8009a9a:	4b1a      	ldr	r3, [pc, #104]	; (8009b04 <UTIL_SEQ_WaitEvt+0x88>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8009aa4:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8009aa6:	4b18      	ldr	r3, [pc, #96]	; (8009b08 <UTIL_SEQ_WaitEvt+0x8c>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8009aac:	4a16      	ldr	r2, [pc, #88]	; (8009b08 <UTIL_SEQ_WaitEvt+0x8c>)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8009ab2:	e003      	b.n	8009abc <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8009ab4:	6879      	ldr	r1, [r7, #4]
 8009ab6:	69f8      	ldr	r0, [r7, #28]
 8009ab8:	f7f7 fcc4 	bl	8001444 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8009abc:	4b13      	ldr	r3, [pc, #76]	; (8009b0c <UTIL_SEQ_WaitEvt+0x90>)
 8009abe:	681a      	ldr	r2, [r3, #0]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	4013      	ands	r3, r2
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d0f5      	beq.n	8009ab4 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8009ac8:	4a0e      	ldr	r2, [pc, #56]	; (8009b04 <UTIL_SEQ_WaitEvt+0x88>)
 8009aca:	69bb      	ldr	r3, [r7, #24]
 8009acc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ace:	f3ef 8310 	mrs	r3, PRIMASK
 8009ad2:	60bb      	str	r3, [r7, #8]
  return(result);
 8009ad4:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009ad6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009ad8:	b672      	cpsid	i
}
 8009ada:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	43da      	mvns	r2, r3
 8009ae0:	4b0a      	ldr	r3, [pc, #40]	; (8009b0c <UTIL_SEQ_WaitEvt+0x90>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4013      	ands	r3, r2
 8009ae6:	4a09      	ldr	r2, [pc, #36]	; (8009b0c <UTIL_SEQ_WaitEvt+0x90>)
 8009ae8:	6013      	str	r3, [r2, #0]
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	f383 8810 	msr	PRIMASK, r3
}
 8009af4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8009af6:	4a04      	ldr	r2, [pc, #16]	; (8009b08 <UTIL_SEQ_WaitEvt+0x8c>)
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	6013      	str	r3, [r2, #0]
  return;
 8009afc:	bf00      	nop
}
 8009afe:	3720      	adds	r7, #32
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}
 8009b04:	200006cc 	.word	0x200006cc
 8009b08:	200006c8 	.word	0x200006c8
 8009b0c:	200006c4 	.word	0x200006c4

08009b10 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8009b10:	b480      	push	{r7}
 8009b12:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8009b14:	bf00      	nop
}
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr

08009b1e <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8009b1e:	b480      	push	{r7}
 8009b20:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8009b22:	bf00      	nop
}
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr

08009b2c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b085      	sub	sp, #20
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8009b34:	2300      	movs	r3, #0
 8009b36:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	0c1b      	lsrs	r3, r3, #16
 8009b40:	041b      	lsls	r3, r3, #16
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d104      	bne.n	8009b50 <SEQ_BitPosition+0x24>
 8009b46:	2310      	movs	r3, #16
 8009b48:	73fb      	strb	r3, [r7, #15]
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	041b      	lsls	r3, r3, #16
 8009b4e:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d105      	bne.n	8009b66 <SEQ_BitPosition+0x3a>
 8009b5a:	7bfb      	ldrb	r3, [r7, #15]
 8009b5c:	3308      	adds	r3, #8
 8009b5e:	73fb      	strb	r3, [r7, #15]
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	021b      	lsls	r3, r3, #8
 8009b64:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d105      	bne.n	8009b7c <SEQ_BitPosition+0x50>
 8009b70:	7bfb      	ldrb	r3, [r7, #15]
 8009b72:	3304      	adds	r3, #4
 8009b74:	73fb      	strb	r3, [r7, #15]
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	011b      	lsls	r3, r3, #4
 8009b7a:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	0f1b      	lsrs	r3, r3, #28
 8009b80:	4a07      	ldr	r2, [pc, #28]	; (8009ba0 <SEQ_BitPosition+0x74>)
 8009b82:	5cd2      	ldrb	r2, [r2, r3]
 8009b84:	7bfb      	ldrb	r3, [r7, #15]
 8009b86:	4413      	add	r3, r2
 8009b88:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8009b8a:	7bfb      	ldrb	r3, [r7, #15]
 8009b8c:	f1c3 031f 	rsb	r3, r3, #31
 8009b90:	b2db      	uxtb	r3, r3
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3714      	adds	r7, #20
 8009b96:	46bd      	mov	sp, r7
 8009b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9c:	4770      	bx	lr
 8009b9e:	bf00      	nop
 8009ba0:	0800c7ec 	.word	0x0800c7ec

08009ba4 <__cvt>:
 8009ba4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ba8:	ec55 4b10 	vmov	r4, r5, d0
 8009bac:	2d00      	cmp	r5, #0
 8009bae:	460e      	mov	r6, r1
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	462b      	mov	r3, r5
 8009bb4:	bfbb      	ittet	lt
 8009bb6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009bba:	461d      	movlt	r5, r3
 8009bbc:	2300      	movge	r3, #0
 8009bbe:	232d      	movlt	r3, #45	; 0x2d
 8009bc0:	700b      	strb	r3, [r1, #0]
 8009bc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bc4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009bc8:	4691      	mov	r9, r2
 8009bca:	f023 0820 	bic.w	r8, r3, #32
 8009bce:	bfbc      	itt	lt
 8009bd0:	4622      	movlt	r2, r4
 8009bd2:	4614      	movlt	r4, r2
 8009bd4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009bd8:	d005      	beq.n	8009be6 <__cvt+0x42>
 8009bda:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009bde:	d100      	bne.n	8009be2 <__cvt+0x3e>
 8009be0:	3601      	adds	r6, #1
 8009be2:	2102      	movs	r1, #2
 8009be4:	e000      	b.n	8009be8 <__cvt+0x44>
 8009be6:	2103      	movs	r1, #3
 8009be8:	ab03      	add	r3, sp, #12
 8009bea:	9301      	str	r3, [sp, #4]
 8009bec:	ab02      	add	r3, sp, #8
 8009bee:	9300      	str	r3, [sp, #0]
 8009bf0:	ec45 4b10 	vmov	d0, r4, r5
 8009bf4:	4653      	mov	r3, sl
 8009bf6:	4632      	mov	r2, r6
 8009bf8:	f000 fe56 	bl	800a8a8 <_dtoa_r>
 8009bfc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009c00:	4607      	mov	r7, r0
 8009c02:	d102      	bne.n	8009c0a <__cvt+0x66>
 8009c04:	f019 0f01 	tst.w	r9, #1
 8009c08:	d022      	beq.n	8009c50 <__cvt+0xac>
 8009c0a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009c0e:	eb07 0906 	add.w	r9, r7, r6
 8009c12:	d110      	bne.n	8009c36 <__cvt+0x92>
 8009c14:	783b      	ldrb	r3, [r7, #0]
 8009c16:	2b30      	cmp	r3, #48	; 0x30
 8009c18:	d10a      	bne.n	8009c30 <__cvt+0x8c>
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	4620      	mov	r0, r4
 8009c20:	4629      	mov	r1, r5
 8009c22:	f7f6 ff39 	bl	8000a98 <__aeabi_dcmpeq>
 8009c26:	b918      	cbnz	r0, 8009c30 <__cvt+0x8c>
 8009c28:	f1c6 0601 	rsb	r6, r6, #1
 8009c2c:	f8ca 6000 	str.w	r6, [sl]
 8009c30:	f8da 3000 	ldr.w	r3, [sl]
 8009c34:	4499      	add	r9, r3
 8009c36:	2200      	movs	r2, #0
 8009c38:	2300      	movs	r3, #0
 8009c3a:	4620      	mov	r0, r4
 8009c3c:	4629      	mov	r1, r5
 8009c3e:	f7f6 ff2b 	bl	8000a98 <__aeabi_dcmpeq>
 8009c42:	b108      	cbz	r0, 8009c48 <__cvt+0xa4>
 8009c44:	f8cd 900c 	str.w	r9, [sp, #12]
 8009c48:	2230      	movs	r2, #48	; 0x30
 8009c4a:	9b03      	ldr	r3, [sp, #12]
 8009c4c:	454b      	cmp	r3, r9
 8009c4e:	d307      	bcc.n	8009c60 <__cvt+0xbc>
 8009c50:	9b03      	ldr	r3, [sp, #12]
 8009c52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c54:	1bdb      	subs	r3, r3, r7
 8009c56:	4638      	mov	r0, r7
 8009c58:	6013      	str	r3, [r2, #0]
 8009c5a:	b004      	add	sp, #16
 8009c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c60:	1c59      	adds	r1, r3, #1
 8009c62:	9103      	str	r1, [sp, #12]
 8009c64:	701a      	strb	r2, [r3, #0]
 8009c66:	e7f0      	b.n	8009c4a <__cvt+0xa6>

08009c68 <__exponent>:
 8009c68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	2900      	cmp	r1, #0
 8009c6e:	bfb8      	it	lt
 8009c70:	4249      	neglt	r1, r1
 8009c72:	f803 2b02 	strb.w	r2, [r3], #2
 8009c76:	bfb4      	ite	lt
 8009c78:	222d      	movlt	r2, #45	; 0x2d
 8009c7a:	222b      	movge	r2, #43	; 0x2b
 8009c7c:	2909      	cmp	r1, #9
 8009c7e:	7042      	strb	r2, [r0, #1]
 8009c80:	dd2a      	ble.n	8009cd8 <__exponent+0x70>
 8009c82:	f10d 0207 	add.w	r2, sp, #7
 8009c86:	4617      	mov	r7, r2
 8009c88:	260a      	movs	r6, #10
 8009c8a:	4694      	mov	ip, r2
 8009c8c:	fb91 f5f6 	sdiv	r5, r1, r6
 8009c90:	fb06 1415 	mls	r4, r6, r5, r1
 8009c94:	3430      	adds	r4, #48	; 0x30
 8009c96:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009c9a:	460c      	mov	r4, r1
 8009c9c:	2c63      	cmp	r4, #99	; 0x63
 8009c9e:	f102 32ff 	add.w	r2, r2, #4294967295
 8009ca2:	4629      	mov	r1, r5
 8009ca4:	dcf1      	bgt.n	8009c8a <__exponent+0x22>
 8009ca6:	3130      	adds	r1, #48	; 0x30
 8009ca8:	f1ac 0402 	sub.w	r4, ip, #2
 8009cac:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009cb0:	1c41      	adds	r1, r0, #1
 8009cb2:	4622      	mov	r2, r4
 8009cb4:	42ba      	cmp	r2, r7
 8009cb6:	d30a      	bcc.n	8009cce <__exponent+0x66>
 8009cb8:	f10d 0209 	add.w	r2, sp, #9
 8009cbc:	eba2 020c 	sub.w	r2, r2, ip
 8009cc0:	42bc      	cmp	r4, r7
 8009cc2:	bf88      	it	hi
 8009cc4:	2200      	movhi	r2, #0
 8009cc6:	4413      	add	r3, r2
 8009cc8:	1a18      	subs	r0, r3, r0
 8009cca:	b003      	add	sp, #12
 8009ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cce:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009cd2:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009cd6:	e7ed      	b.n	8009cb4 <__exponent+0x4c>
 8009cd8:	2330      	movs	r3, #48	; 0x30
 8009cda:	3130      	adds	r1, #48	; 0x30
 8009cdc:	7083      	strb	r3, [r0, #2]
 8009cde:	70c1      	strb	r1, [r0, #3]
 8009ce0:	1d03      	adds	r3, r0, #4
 8009ce2:	e7f1      	b.n	8009cc8 <__exponent+0x60>

08009ce4 <_printf_float>:
 8009ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce8:	ed2d 8b02 	vpush	{d8}
 8009cec:	b08d      	sub	sp, #52	; 0x34
 8009cee:	460c      	mov	r4, r1
 8009cf0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009cf4:	4616      	mov	r6, r2
 8009cf6:	461f      	mov	r7, r3
 8009cf8:	4605      	mov	r5, r0
 8009cfa:	f000 fcc7 	bl	800a68c <_localeconv_r>
 8009cfe:	f8d0 a000 	ldr.w	sl, [r0]
 8009d02:	4650      	mov	r0, sl
 8009d04:	f7f6 fa9c 	bl	8000240 <strlen>
 8009d08:	2300      	movs	r3, #0
 8009d0a:	930a      	str	r3, [sp, #40]	; 0x28
 8009d0c:	6823      	ldr	r3, [r4, #0]
 8009d0e:	9305      	str	r3, [sp, #20]
 8009d10:	f8d8 3000 	ldr.w	r3, [r8]
 8009d14:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009d18:	3307      	adds	r3, #7
 8009d1a:	f023 0307 	bic.w	r3, r3, #7
 8009d1e:	f103 0208 	add.w	r2, r3, #8
 8009d22:	f8c8 2000 	str.w	r2, [r8]
 8009d26:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009d2a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009d2e:	9307      	str	r3, [sp, #28]
 8009d30:	f8cd 8018 	str.w	r8, [sp, #24]
 8009d34:	ee08 0a10 	vmov	s16, r0
 8009d38:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009d3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d40:	4b9e      	ldr	r3, [pc, #632]	; (8009fbc <_printf_float+0x2d8>)
 8009d42:	f04f 32ff 	mov.w	r2, #4294967295
 8009d46:	f7f6 fed9 	bl	8000afc <__aeabi_dcmpun>
 8009d4a:	bb88      	cbnz	r0, 8009db0 <_printf_float+0xcc>
 8009d4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d50:	4b9a      	ldr	r3, [pc, #616]	; (8009fbc <_printf_float+0x2d8>)
 8009d52:	f04f 32ff 	mov.w	r2, #4294967295
 8009d56:	f7f6 feb3 	bl	8000ac0 <__aeabi_dcmple>
 8009d5a:	bb48      	cbnz	r0, 8009db0 <_printf_float+0xcc>
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	2300      	movs	r3, #0
 8009d60:	4640      	mov	r0, r8
 8009d62:	4649      	mov	r1, r9
 8009d64:	f7f6 fea2 	bl	8000aac <__aeabi_dcmplt>
 8009d68:	b110      	cbz	r0, 8009d70 <_printf_float+0x8c>
 8009d6a:	232d      	movs	r3, #45	; 0x2d
 8009d6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d70:	4a93      	ldr	r2, [pc, #588]	; (8009fc0 <_printf_float+0x2dc>)
 8009d72:	4b94      	ldr	r3, [pc, #592]	; (8009fc4 <_printf_float+0x2e0>)
 8009d74:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009d78:	bf94      	ite	ls
 8009d7a:	4690      	movls	r8, r2
 8009d7c:	4698      	movhi	r8, r3
 8009d7e:	2303      	movs	r3, #3
 8009d80:	6123      	str	r3, [r4, #16]
 8009d82:	9b05      	ldr	r3, [sp, #20]
 8009d84:	f023 0304 	bic.w	r3, r3, #4
 8009d88:	6023      	str	r3, [r4, #0]
 8009d8a:	f04f 0900 	mov.w	r9, #0
 8009d8e:	9700      	str	r7, [sp, #0]
 8009d90:	4633      	mov	r3, r6
 8009d92:	aa0b      	add	r2, sp, #44	; 0x2c
 8009d94:	4621      	mov	r1, r4
 8009d96:	4628      	mov	r0, r5
 8009d98:	f000 f9da 	bl	800a150 <_printf_common>
 8009d9c:	3001      	adds	r0, #1
 8009d9e:	f040 8090 	bne.w	8009ec2 <_printf_float+0x1de>
 8009da2:	f04f 30ff 	mov.w	r0, #4294967295
 8009da6:	b00d      	add	sp, #52	; 0x34
 8009da8:	ecbd 8b02 	vpop	{d8}
 8009dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009db0:	4642      	mov	r2, r8
 8009db2:	464b      	mov	r3, r9
 8009db4:	4640      	mov	r0, r8
 8009db6:	4649      	mov	r1, r9
 8009db8:	f7f6 fea0 	bl	8000afc <__aeabi_dcmpun>
 8009dbc:	b140      	cbz	r0, 8009dd0 <_printf_float+0xec>
 8009dbe:	464b      	mov	r3, r9
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	bfbc      	itt	lt
 8009dc4:	232d      	movlt	r3, #45	; 0x2d
 8009dc6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009dca:	4a7f      	ldr	r2, [pc, #508]	; (8009fc8 <_printf_float+0x2e4>)
 8009dcc:	4b7f      	ldr	r3, [pc, #508]	; (8009fcc <_printf_float+0x2e8>)
 8009dce:	e7d1      	b.n	8009d74 <_printf_float+0x90>
 8009dd0:	6863      	ldr	r3, [r4, #4]
 8009dd2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009dd6:	9206      	str	r2, [sp, #24]
 8009dd8:	1c5a      	adds	r2, r3, #1
 8009dda:	d13f      	bne.n	8009e5c <_printf_float+0x178>
 8009ddc:	2306      	movs	r3, #6
 8009dde:	6063      	str	r3, [r4, #4]
 8009de0:	9b05      	ldr	r3, [sp, #20]
 8009de2:	6861      	ldr	r1, [r4, #4]
 8009de4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009de8:	2300      	movs	r3, #0
 8009dea:	9303      	str	r3, [sp, #12]
 8009dec:	ab0a      	add	r3, sp, #40	; 0x28
 8009dee:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009df2:	ab09      	add	r3, sp, #36	; 0x24
 8009df4:	ec49 8b10 	vmov	d0, r8, r9
 8009df8:	9300      	str	r3, [sp, #0]
 8009dfa:	6022      	str	r2, [r4, #0]
 8009dfc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009e00:	4628      	mov	r0, r5
 8009e02:	f7ff fecf 	bl	8009ba4 <__cvt>
 8009e06:	9b06      	ldr	r3, [sp, #24]
 8009e08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e0a:	2b47      	cmp	r3, #71	; 0x47
 8009e0c:	4680      	mov	r8, r0
 8009e0e:	d108      	bne.n	8009e22 <_printf_float+0x13e>
 8009e10:	1cc8      	adds	r0, r1, #3
 8009e12:	db02      	blt.n	8009e1a <_printf_float+0x136>
 8009e14:	6863      	ldr	r3, [r4, #4]
 8009e16:	4299      	cmp	r1, r3
 8009e18:	dd41      	ble.n	8009e9e <_printf_float+0x1ba>
 8009e1a:	f1ab 0302 	sub.w	r3, fp, #2
 8009e1e:	fa5f fb83 	uxtb.w	fp, r3
 8009e22:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009e26:	d820      	bhi.n	8009e6a <_printf_float+0x186>
 8009e28:	3901      	subs	r1, #1
 8009e2a:	465a      	mov	r2, fp
 8009e2c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009e30:	9109      	str	r1, [sp, #36]	; 0x24
 8009e32:	f7ff ff19 	bl	8009c68 <__exponent>
 8009e36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e38:	1813      	adds	r3, r2, r0
 8009e3a:	2a01      	cmp	r2, #1
 8009e3c:	4681      	mov	r9, r0
 8009e3e:	6123      	str	r3, [r4, #16]
 8009e40:	dc02      	bgt.n	8009e48 <_printf_float+0x164>
 8009e42:	6822      	ldr	r2, [r4, #0]
 8009e44:	07d2      	lsls	r2, r2, #31
 8009e46:	d501      	bpl.n	8009e4c <_printf_float+0x168>
 8009e48:	3301      	adds	r3, #1
 8009e4a:	6123      	str	r3, [r4, #16]
 8009e4c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d09c      	beq.n	8009d8e <_printf_float+0xaa>
 8009e54:	232d      	movs	r3, #45	; 0x2d
 8009e56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e5a:	e798      	b.n	8009d8e <_printf_float+0xaa>
 8009e5c:	9a06      	ldr	r2, [sp, #24]
 8009e5e:	2a47      	cmp	r2, #71	; 0x47
 8009e60:	d1be      	bne.n	8009de0 <_printf_float+0xfc>
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d1bc      	bne.n	8009de0 <_printf_float+0xfc>
 8009e66:	2301      	movs	r3, #1
 8009e68:	e7b9      	b.n	8009dde <_printf_float+0xfa>
 8009e6a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009e6e:	d118      	bne.n	8009ea2 <_printf_float+0x1be>
 8009e70:	2900      	cmp	r1, #0
 8009e72:	6863      	ldr	r3, [r4, #4]
 8009e74:	dd0b      	ble.n	8009e8e <_printf_float+0x1aa>
 8009e76:	6121      	str	r1, [r4, #16]
 8009e78:	b913      	cbnz	r3, 8009e80 <_printf_float+0x19c>
 8009e7a:	6822      	ldr	r2, [r4, #0]
 8009e7c:	07d0      	lsls	r0, r2, #31
 8009e7e:	d502      	bpl.n	8009e86 <_printf_float+0x1a2>
 8009e80:	3301      	adds	r3, #1
 8009e82:	440b      	add	r3, r1
 8009e84:	6123      	str	r3, [r4, #16]
 8009e86:	65a1      	str	r1, [r4, #88]	; 0x58
 8009e88:	f04f 0900 	mov.w	r9, #0
 8009e8c:	e7de      	b.n	8009e4c <_printf_float+0x168>
 8009e8e:	b913      	cbnz	r3, 8009e96 <_printf_float+0x1b2>
 8009e90:	6822      	ldr	r2, [r4, #0]
 8009e92:	07d2      	lsls	r2, r2, #31
 8009e94:	d501      	bpl.n	8009e9a <_printf_float+0x1b6>
 8009e96:	3302      	adds	r3, #2
 8009e98:	e7f4      	b.n	8009e84 <_printf_float+0x1a0>
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	e7f2      	b.n	8009e84 <_printf_float+0x1a0>
 8009e9e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009ea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ea4:	4299      	cmp	r1, r3
 8009ea6:	db05      	blt.n	8009eb4 <_printf_float+0x1d0>
 8009ea8:	6823      	ldr	r3, [r4, #0]
 8009eaa:	6121      	str	r1, [r4, #16]
 8009eac:	07d8      	lsls	r0, r3, #31
 8009eae:	d5ea      	bpl.n	8009e86 <_printf_float+0x1a2>
 8009eb0:	1c4b      	adds	r3, r1, #1
 8009eb2:	e7e7      	b.n	8009e84 <_printf_float+0x1a0>
 8009eb4:	2900      	cmp	r1, #0
 8009eb6:	bfd4      	ite	le
 8009eb8:	f1c1 0202 	rsble	r2, r1, #2
 8009ebc:	2201      	movgt	r2, #1
 8009ebe:	4413      	add	r3, r2
 8009ec0:	e7e0      	b.n	8009e84 <_printf_float+0x1a0>
 8009ec2:	6823      	ldr	r3, [r4, #0]
 8009ec4:	055a      	lsls	r2, r3, #21
 8009ec6:	d407      	bmi.n	8009ed8 <_printf_float+0x1f4>
 8009ec8:	6923      	ldr	r3, [r4, #16]
 8009eca:	4642      	mov	r2, r8
 8009ecc:	4631      	mov	r1, r6
 8009ece:	4628      	mov	r0, r5
 8009ed0:	47b8      	blx	r7
 8009ed2:	3001      	adds	r0, #1
 8009ed4:	d12c      	bne.n	8009f30 <_printf_float+0x24c>
 8009ed6:	e764      	b.n	8009da2 <_printf_float+0xbe>
 8009ed8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009edc:	f240 80e0 	bls.w	800a0a0 <_printf_float+0x3bc>
 8009ee0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	f7f6 fdd6 	bl	8000a98 <__aeabi_dcmpeq>
 8009eec:	2800      	cmp	r0, #0
 8009eee:	d034      	beq.n	8009f5a <_printf_float+0x276>
 8009ef0:	4a37      	ldr	r2, [pc, #220]	; (8009fd0 <_printf_float+0x2ec>)
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	4631      	mov	r1, r6
 8009ef6:	4628      	mov	r0, r5
 8009ef8:	47b8      	blx	r7
 8009efa:	3001      	adds	r0, #1
 8009efc:	f43f af51 	beq.w	8009da2 <_printf_float+0xbe>
 8009f00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f04:	429a      	cmp	r2, r3
 8009f06:	db02      	blt.n	8009f0e <_printf_float+0x22a>
 8009f08:	6823      	ldr	r3, [r4, #0]
 8009f0a:	07d8      	lsls	r0, r3, #31
 8009f0c:	d510      	bpl.n	8009f30 <_printf_float+0x24c>
 8009f0e:	ee18 3a10 	vmov	r3, s16
 8009f12:	4652      	mov	r2, sl
 8009f14:	4631      	mov	r1, r6
 8009f16:	4628      	mov	r0, r5
 8009f18:	47b8      	blx	r7
 8009f1a:	3001      	adds	r0, #1
 8009f1c:	f43f af41 	beq.w	8009da2 <_printf_float+0xbe>
 8009f20:	f04f 0800 	mov.w	r8, #0
 8009f24:	f104 091a 	add.w	r9, r4, #26
 8009f28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f2a:	3b01      	subs	r3, #1
 8009f2c:	4543      	cmp	r3, r8
 8009f2e:	dc09      	bgt.n	8009f44 <_printf_float+0x260>
 8009f30:	6823      	ldr	r3, [r4, #0]
 8009f32:	079b      	lsls	r3, r3, #30
 8009f34:	f100 8107 	bmi.w	800a146 <_printf_float+0x462>
 8009f38:	68e0      	ldr	r0, [r4, #12]
 8009f3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f3c:	4298      	cmp	r0, r3
 8009f3e:	bfb8      	it	lt
 8009f40:	4618      	movlt	r0, r3
 8009f42:	e730      	b.n	8009da6 <_printf_float+0xc2>
 8009f44:	2301      	movs	r3, #1
 8009f46:	464a      	mov	r2, r9
 8009f48:	4631      	mov	r1, r6
 8009f4a:	4628      	mov	r0, r5
 8009f4c:	47b8      	blx	r7
 8009f4e:	3001      	adds	r0, #1
 8009f50:	f43f af27 	beq.w	8009da2 <_printf_float+0xbe>
 8009f54:	f108 0801 	add.w	r8, r8, #1
 8009f58:	e7e6      	b.n	8009f28 <_printf_float+0x244>
 8009f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	dc39      	bgt.n	8009fd4 <_printf_float+0x2f0>
 8009f60:	4a1b      	ldr	r2, [pc, #108]	; (8009fd0 <_printf_float+0x2ec>)
 8009f62:	2301      	movs	r3, #1
 8009f64:	4631      	mov	r1, r6
 8009f66:	4628      	mov	r0, r5
 8009f68:	47b8      	blx	r7
 8009f6a:	3001      	adds	r0, #1
 8009f6c:	f43f af19 	beq.w	8009da2 <_printf_float+0xbe>
 8009f70:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009f74:	4313      	orrs	r3, r2
 8009f76:	d102      	bne.n	8009f7e <_printf_float+0x29a>
 8009f78:	6823      	ldr	r3, [r4, #0]
 8009f7a:	07d9      	lsls	r1, r3, #31
 8009f7c:	d5d8      	bpl.n	8009f30 <_printf_float+0x24c>
 8009f7e:	ee18 3a10 	vmov	r3, s16
 8009f82:	4652      	mov	r2, sl
 8009f84:	4631      	mov	r1, r6
 8009f86:	4628      	mov	r0, r5
 8009f88:	47b8      	blx	r7
 8009f8a:	3001      	adds	r0, #1
 8009f8c:	f43f af09 	beq.w	8009da2 <_printf_float+0xbe>
 8009f90:	f04f 0900 	mov.w	r9, #0
 8009f94:	f104 0a1a 	add.w	sl, r4, #26
 8009f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f9a:	425b      	negs	r3, r3
 8009f9c:	454b      	cmp	r3, r9
 8009f9e:	dc01      	bgt.n	8009fa4 <_printf_float+0x2c0>
 8009fa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fa2:	e792      	b.n	8009eca <_printf_float+0x1e6>
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	4652      	mov	r2, sl
 8009fa8:	4631      	mov	r1, r6
 8009faa:	4628      	mov	r0, r5
 8009fac:	47b8      	blx	r7
 8009fae:	3001      	adds	r0, #1
 8009fb0:	f43f aef7 	beq.w	8009da2 <_printf_float+0xbe>
 8009fb4:	f109 0901 	add.w	r9, r9, #1
 8009fb8:	e7ee      	b.n	8009f98 <_printf_float+0x2b4>
 8009fba:	bf00      	nop
 8009fbc:	7fefffff 	.word	0x7fefffff
 8009fc0:	0800c7fc 	.word	0x0800c7fc
 8009fc4:	0800c800 	.word	0x0800c800
 8009fc8:	0800c804 	.word	0x0800c804
 8009fcc:	0800c808 	.word	0x0800c808
 8009fd0:	0800c80c 	.word	0x0800c80c
 8009fd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009fd6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	bfa8      	it	ge
 8009fdc:	461a      	movge	r2, r3
 8009fde:	2a00      	cmp	r2, #0
 8009fe0:	4691      	mov	r9, r2
 8009fe2:	dc37      	bgt.n	800a054 <_printf_float+0x370>
 8009fe4:	f04f 0b00 	mov.w	fp, #0
 8009fe8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009fec:	f104 021a 	add.w	r2, r4, #26
 8009ff0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ff2:	9305      	str	r3, [sp, #20]
 8009ff4:	eba3 0309 	sub.w	r3, r3, r9
 8009ff8:	455b      	cmp	r3, fp
 8009ffa:	dc33      	bgt.n	800a064 <_printf_float+0x380>
 8009ffc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a000:	429a      	cmp	r2, r3
 800a002:	db3b      	blt.n	800a07c <_printf_float+0x398>
 800a004:	6823      	ldr	r3, [r4, #0]
 800a006:	07da      	lsls	r2, r3, #31
 800a008:	d438      	bmi.n	800a07c <_printf_float+0x398>
 800a00a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a00e:	eba2 0903 	sub.w	r9, r2, r3
 800a012:	9b05      	ldr	r3, [sp, #20]
 800a014:	1ad2      	subs	r2, r2, r3
 800a016:	4591      	cmp	r9, r2
 800a018:	bfa8      	it	ge
 800a01a:	4691      	movge	r9, r2
 800a01c:	f1b9 0f00 	cmp.w	r9, #0
 800a020:	dc35      	bgt.n	800a08e <_printf_float+0x3aa>
 800a022:	f04f 0800 	mov.w	r8, #0
 800a026:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a02a:	f104 0a1a 	add.w	sl, r4, #26
 800a02e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a032:	1a9b      	subs	r3, r3, r2
 800a034:	eba3 0309 	sub.w	r3, r3, r9
 800a038:	4543      	cmp	r3, r8
 800a03a:	f77f af79 	ble.w	8009f30 <_printf_float+0x24c>
 800a03e:	2301      	movs	r3, #1
 800a040:	4652      	mov	r2, sl
 800a042:	4631      	mov	r1, r6
 800a044:	4628      	mov	r0, r5
 800a046:	47b8      	blx	r7
 800a048:	3001      	adds	r0, #1
 800a04a:	f43f aeaa 	beq.w	8009da2 <_printf_float+0xbe>
 800a04e:	f108 0801 	add.w	r8, r8, #1
 800a052:	e7ec      	b.n	800a02e <_printf_float+0x34a>
 800a054:	4613      	mov	r3, r2
 800a056:	4631      	mov	r1, r6
 800a058:	4642      	mov	r2, r8
 800a05a:	4628      	mov	r0, r5
 800a05c:	47b8      	blx	r7
 800a05e:	3001      	adds	r0, #1
 800a060:	d1c0      	bne.n	8009fe4 <_printf_float+0x300>
 800a062:	e69e      	b.n	8009da2 <_printf_float+0xbe>
 800a064:	2301      	movs	r3, #1
 800a066:	4631      	mov	r1, r6
 800a068:	4628      	mov	r0, r5
 800a06a:	9205      	str	r2, [sp, #20]
 800a06c:	47b8      	blx	r7
 800a06e:	3001      	adds	r0, #1
 800a070:	f43f ae97 	beq.w	8009da2 <_printf_float+0xbe>
 800a074:	9a05      	ldr	r2, [sp, #20]
 800a076:	f10b 0b01 	add.w	fp, fp, #1
 800a07a:	e7b9      	b.n	8009ff0 <_printf_float+0x30c>
 800a07c:	ee18 3a10 	vmov	r3, s16
 800a080:	4652      	mov	r2, sl
 800a082:	4631      	mov	r1, r6
 800a084:	4628      	mov	r0, r5
 800a086:	47b8      	blx	r7
 800a088:	3001      	adds	r0, #1
 800a08a:	d1be      	bne.n	800a00a <_printf_float+0x326>
 800a08c:	e689      	b.n	8009da2 <_printf_float+0xbe>
 800a08e:	9a05      	ldr	r2, [sp, #20]
 800a090:	464b      	mov	r3, r9
 800a092:	4442      	add	r2, r8
 800a094:	4631      	mov	r1, r6
 800a096:	4628      	mov	r0, r5
 800a098:	47b8      	blx	r7
 800a09a:	3001      	adds	r0, #1
 800a09c:	d1c1      	bne.n	800a022 <_printf_float+0x33e>
 800a09e:	e680      	b.n	8009da2 <_printf_float+0xbe>
 800a0a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0a2:	2a01      	cmp	r2, #1
 800a0a4:	dc01      	bgt.n	800a0aa <_printf_float+0x3c6>
 800a0a6:	07db      	lsls	r3, r3, #31
 800a0a8:	d53a      	bpl.n	800a120 <_printf_float+0x43c>
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	4642      	mov	r2, r8
 800a0ae:	4631      	mov	r1, r6
 800a0b0:	4628      	mov	r0, r5
 800a0b2:	47b8      	blx	r7
 800a0b4:	3001      	adds	r0, #1
 800a0b6:	f43f ae74 	beq.w	8009da2 <_printf_float+0xbe>
 800a0ba:	ee18 3a10 	vmov	r3, s16
 800a0be:	4652      	mov	r2, sl
 800a0c0:	4631      	mov	r1, r6
 800a0c2:	4628      	mov	r0, r5
 800a0c4:	47b8      	blx	r7
 800a0c6:	3001      	adds	r0, #1
 800a0c8:	f43f ae6b 	beq.w	8009da2 <_printf_float+0xbe>
 800a0cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a0d8:	f7f6 fcde 	bl	8000a98 <__aeabi_dcmpeq>
 800a0dc:	b9d8      	cbnz	r0, 800a116 <_printf_float+0x432>
 800a0de:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a0e2:	f108 0201 	add.w	r2, r8, #1
 800a0e6:	4631      	mov	r1, r6
 800a0e8:	4628      	mov	r0, r5
 800a0ea:	47b8      	blx	r7
 800a0ec:	3001      	adds	r0, #1
 800a0ee:	d10e      	bne.n	800a10e <_printf_float+0x42a>
 800a0f0:	e657      	b.n	8009da2 <_printf_float+0xbe>
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	4652      	mov	r2, sl
 800a0f6:	4631      	mov	r1, r6
 800a0f8:	4628      	mov	r0, r5
 800a0fa:	47b8      	blx	r7
 800a0fc:	3001      	adds	r0, #1
 800a0fe:	f43f ae50 	beq.w	8009da2 <_printf_float+0xbe>
 800a102:	f108 0801 	add.w	r8, r8, #1
 800a106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a108:	3b01      	subs	r3, #1
 800a10a:	4543      	cmp	r3, r8
 800a10c:	dcf1      	bgt.n	800a0f2 <_printf_float+0x40e>
 800a10e:	464b      	mov	r3, r9
 800a110:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a114:	e6da      	b.n	8009ecc <_printf_float+0x1e8>
 800a116:	f04f 0800 	mov.w	r8, #0
 800a11a:	f104 0a1a 	add.w	sl, r4, #26
 800a11e:	e7f2      	b.n	800a106 <_printf_float+0x422>
 800a120:	2301      	movs	r3, #1
 800a122:	4642      	mov	r2, r8
 800a124:	e7df      	b.n	800a0e6 <_printf_float+0x402>
 800a126:	2301      	movs	r3, #1
 800a128:	464a      	mov	r2, r9
 800a12a:	4631      	mov	r1, r6
 800a12c:	4628      	mov	r0, r5
 800a12e:	47b8      	blx	r7
 800a130:	3001      	adds	r0, #1
 800a132:	f43f ae36 	beq.w	8009da2 <_printf_float+0xbe>
 800a136:	f108 0801 	add.w	r8, r8, #1
 800a13a:	68e3      	ldr	r3, [r4, #12]
 800a13c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a13e:	1a5b      	subs	r3, r3, r1
 800a140:	4543      	cmp	r3, r8
 800a142:	dcf0      	bgt.n	800a126 <_printf_float+0x442>
 800a144:	e6f8      	b.n	8009f38 <_printf_float+0x254>
 800a146:	f04f 0800 	mov.w	r8, #0
 800a14a:	f104 0919 	add.w	r9, r4, #25
 800a14e:	e7f4      	b.n	800a13a <_printf_float+0x456>

0800a150 <_printf_common>:
 800a150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a154:	4616      	mov	r6, r2
 800a156:	4699      	mov	r9, r3
 800a158:	688a      	ldr	r2, [r1, #8]
 800a15a:	690b      	ldr	r3, [r1, #16]
 800a15c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a160:	4293      	cmp	r3, r2
 800a162:	bfb8      	it	lt
 800a164:	4613      	movlt	r3, r2
 800a166:	6033      	str	r3, [r6, #0]
 800a168:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a16c:	4607      	mov	r7, r0
 800a16e:	460c      	mov	r4, r1
 800a170:	b10a      	cbz	r2, 800a176 <_printf_common+0x26>
 800a172:	3301      	adds	r3, #1
 800a174:	6033      	str	r3, [r6, #0]
 800a176:	6823      	ldr	r3, [r4, #0]
 800a178:	0699      	lsls	r1, r3, #26
 800a17a:	bf42      	ittt	mi
 800a17c:	6833      	ldrmi	r3, [r6, #0]
 800a17e:	3302      	addmi	r3, #2
 800a180:	6033      	strmi	r3, [r6, #0]
 800a182:	6825      	ldr	r5, [r4, #0]
 800a184:	f015 0506 	ands.w	r5, r5, #6
 800a188:	d106      	bne.n	800a198 <_printf_common+0x48>
 800a18a:	f104 0a19 	add.w	sl, r4, #25
 800a18e:	68e3      	ldr	r3, [r4, #12]
 800a190:	6832      	ldr	r2, [r6, #0]
 800a192:	1a9b      	subs	r3, r3, r2
 800a194:	42ab      	cmp	r3, r5
 800a196:	dc26      	bgt.n	800a1e6 <_printf_common+0x96>
 800a198:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a19c:	1e13      	subs	r3, r2, #0
 800a19e:	6822      	ldr	r2, [r4, #0]
 800a1a0:	bf18      	it	ne
 800a1a2:	2301      	movne	r3, #1
 800a1a4:	0692      	lsls	r2, r2, #26
 800a1a6:	d42b      	bmi.n	800a200 <_printf_common+0xb0>
 800a1a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a1ac:	4649      	mov	r1, r9
 800a1ae:	4638      	mov	r0, r7
 800a1b0:	47c0      	blx	r8
 800a1b2:	3001      	adds	r0, #1
 800a1b4:	d01e      	beq.n	800a1f4 <_printf_common+0xa4>
 800a1b6:	6823      	ldr	r3, [r4, #0]
 800a1b8:	6922      	ldr	r2, [r4, #16]
 800a1ba:	f003 0306 	and.w	r3, r3, #6
 800a1be:	2b04      	cmp	r3, #4
 800a1c0:	bf02      	ittt	eq
 800a1c2:	68e5      	ldreq	r5, [r4, #12]
 800a1c4:	6833      	ldreq	r3, [r6, #0]
 800a1c6:	1aed      	subeq	r5, r5, r3
 800a1c8:	68a3      	ldr	r3, [r4, #8]
 800a1ca:	bf0c      	ite	eq
 800a1cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1d0:	2500      	movne	r5, #0
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	bfc4      	itt	gt
 800a1d6:	1a9b      	subgt	r3, r3, r2
 800a1d8:	18ed      	addgt	r5, r5, r3
 800a1da:	2600      	movs	r6, #0
 800a1dc:	341a      	adds	r4, #26
 800a1de:	42b5      	cmp	r5, r6
 800a1e0:	d11a      	bne.n	800a218 <_printf_common+0xc8>
 800a1e2:	2000      	movs	r0, #0
 800a1e4:	e008      	b.n	800a1f8 <_printf_common+0xa8>
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	4652      	mov	r2, sl
 800a1ea:	4649      	mov	r1, r9
 800a1ec:	4638      	mov	r0, r7
 800a1ee:	47c0      	blx	r8
 800a1f0:	3001      	adds	r0, #1
 800a1f2:	d103      	bne.n	800a1fc <_printf_common+0xac>
 800a1f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1fc:	3501      	adds	r5, #1
 800a1fe:	e7c6      	b.n	800a18e <_printf_common+0x3e>
 800a200:	18e1      	adds	r1, r4, r3
 800a202:	1c5a      	adds	r2, r3, #1
 800a204:	2030      	movs	r0, #48	; 0x30
 800a206:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a20a:	4422      	add	r2, r4
 800a20c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a210:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a214:	3302      	adds	r3, #2
 800a216:	e7c7      	b.n	800a1a8 <_printf_common+0x58>
 800a218:	2301      	movs	r3, #1
 800a21a:	4622      	mov	r2, r4
 800a21c:	4649      	mov	r1, r9
 800a21e:	4638      	mov	r0, r7
 800a220:	47c0      	blx	r8
 800a222:	3001      	adds	r0, #1
 800a224:	d0e6      	beq.n	800a1f4 <_printf_common+0xa4>
 800a226:	3601      	adds	r6, #1
 800a228:	e7d9      	b.n	800a1de <_printf_common+0x8e>
	...

0800a22c <_printf_i>:
 800a22c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a230:	7e0f      	ldrb	r7, [r1, #24]
 800a232:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a234:	2f78      	cmp	r7, #120	; 0x78
 800a236:	4691      	mov	r9, r2
 800a238:	4680      	mov	r8, r0
 800a23a:	460c      	mov	r4, r1
 800a23c:	469a      	mov	sl, r3
 800a23e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a242:	d807      	bhi.n	800a254 <_printf_i+0x28>
 800a244:	2f62      	cmp	r7, #98	; 0x62
 800a246:	d80a      	bhi.n	800a25e <_printf_i+0x32>
 800a248:	2f00      	cmp	r7, #0
 800a24a:	f000 80d4 	beq.w	800a3f6 <_printf_i+0x1ca>
 800a24e:	2f58      	cmp	r7, #88	; 0x58
 800a250:	f000 80c0 	beq.w	800a3d4 <_printf_i+0x1a8>
 800a254:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a258:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a25c:	e03a      	b.n	800a2d4 <_printf_i+0xa8>
 800a25e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a262:	2b15      	cmp	r3, #21
 800a264:	d8f6      	bhi.n	800a254 <_printf_i+0x28>
 800a266:	a101      	add	r1, pc, #4	; (adr r1, 800a26c <_printf_i+0x40>)
 800a268:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a26c:	0800a2c5 	.word	0x0800a2c5
 800a270:	0800a2d9 	.word	0x0800a2d9
 800a274:	0800a255 	.word	0x0800a255
 800a278:	0800a255 	.word	0x0800a255
 800a27c:	0800a255 	.word	0x0800a255
 800a280:	0800a255 	.word	0x0800a255
 800a284:	0800a2d9 	.word	0x0800a2d9
 800a288:	0800a255 	.word	0x0800a255
 800a28c:	0800a255 	.word	0x0800a255
 800a290:	0800a255 	.word	0x0800a255
 800a294:	0800a255 	.word	0x0800a255
 800a298:	0800a3dd 	.word	0x0800a3dd
 800a29c:	0800a305 	.word	0x0800a305
 800a2a0:	0800a397 	.word	0x0800a397
 800a2a4:	0800a255 	.word	0x0800a255
 800a2a8:	0800a255 	.word	0x0800a255
 800a2ac:	0800a3ff 	.word	0x0800a3ff
 800a2b0:	0800a255 	.word	0x0800a255
 800a2b4:	0800a305 	.word	0x0800a305
 800a2b8:	0800a255 	.word	0x0800a255
 800a2bc:	0800a255 	.word	0x0800a255
 800a2c0:	0800a39f 	.word	0x0800a39f
 800a2c4:	682b      	ldr	r3, [r5, #0]
 800a2c6:	1d1a      	adds	r2, r3, #4
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	602a      	str	r2, [r5, #0]
 800a2cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	e09f      	b.n	800a418 <_printf_i+0x1ec>
 800a2d8:	6820      	ldr	r0, [r4, #0]
 800a2da:	682b      	ldr	r3, [r5, #0]
 800a2dc:	0607      	lsls	r7, r0, #24
 800a2de:	f103 0104 	add.w	r1, r3, #4
 800a2e2:	6029      	str	r1, [r5, #0]
 800a2e4:	d501      	bpl.n	800a2ea <_printf_i+0xbe>
 800a2e6:	681e      	ldr	r6, [r3, #0]
 800a2e8:	e003      	b.n	800a2f2 <_printf_i+0xc6>
 800a2ea:	0646      	lsls	r6, r0, #25
 800a2ec:	d5fb      	bpl.n	800a2e6 <_printf_i+0xba>
 800a2ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a2f2:	2e00      	cmp	r6, #0
 800a2f4:	da03      	bge.n	800a2fe <_printf_i+0xd2>
 800a2f6:	232d      	movs	r3, #45	; 0x2d
 800a2f8:	4276      	negs	r6, r6
 800a2fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2fe:	485a      	ldr	r0, [pc, #360]	; (800a468 <_printf_i+0x23c>)
 800a300:	230a      	movs	r3, #10
 800a302:	e012      	b.n	800a32a <_printf_i+0xfe>
 800a304:	682b      	ldr	r3, [r5, #0]
 800a306:	6820      	ldr	r0, [r4, #0]
 800a308:	1d19      	adds	r1, r3, #4
 800a30a:	6029      	str	r1, [r5, #0]
 800a30c:	0605      	lsls	r5, r0, #24
 800a30e:	d501      	bpl.n	800a314 <_printf_i+0xe8>
 800a310:	681e      	ldr	r6, [r3, #0]
 800a312:	e002      	b.n	800a31a <_printf_i+0xee>
 800a314:	0641      	lsls	r1, r0, #25
 800a316:	d5fb      	bpl.n	800a310 <_printf_i+0xe4>
 800a318:	881e      	ldrh	r6, [r3, #0]
 800a31a:	4853      	ldr	r0, [pc, #332]	; (800a468 <_printf_i+0x23c>)
 800a31c:	2f6f      	cmp	r7, #111	; 0x6f
 800a31e:	bf0c      	ite	eq
 800a320:	2308      	moveq	r3, #8
 800a322:	230a      	movne	r3, #10
 800a324:	2100      	movs	r1, #0
 800a326:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a32a:	6865      	ldr	r5, [r4, #4]
 800a32c:	60a5      	str	r5, [r4, #8]
 800a32e:	2d00      	cmp	r5, #0
 800a330:	bfa2      	ittt	ge
 800a332:	6821      	ldrge	r1, [r4, #0]
 800a334:	f021 0104 	bicge.w	r1, r1, #4
 800a338:	6021      	strge	r1, [r4, #0]
 800a33a:	b90e      	cbnz	r6, 800a340 <_printf_i+0x114>
 800a33c:	2d00      	cmp	r5, #0
 800a33e:	d04b      	beq.n	800a3d8 <_printf_i+0x1ac>
 800a340:	4615      	mov	r5, r2
 800a342:	fbb6 f1f3 	udiv	r1, r6, r3
 800a346:	fb03 6711 	mls	r7, r3, r1, r6
 800a34a:	5dc7      	ldrb	r7, [r0, r7]
 800a34c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a350:	4637      	mov	r7, r6
 800a352:	42bb      	cmp	r3, r7
 800a354:	460e      	mov	r6, r1
 800a356:	d9f4      	bls.n	800a342 <_printf_i+0x116>
 800a358:	2b08      	cmp	r3, #8
 800a35a:	d10b      	bne.n	800a374 <_printf_i+0x148>
 800a35c:	6823      	ldr	r3, [r4, #0]
 800a35e:	07de      	lsls	r6, r3, #31
 800a360:	d508      	bpl.n	800a374 <_printf_i+0x148>
 800a362:	6923      	ldr	r3, [r4, #16]
 800a364:	6861      	ldr	r1, [r4, #4]
 800a366:	4299      	cmp	r1, r3
 800a368:	bfde      	ittt	le
 800a36a:	2330      	movle	r3, #48	; 0x30
 800a36c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a370:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a374:	1b52      	subs	r2, r2, r5
 800a376:	6122      	str	r2, [r4, #16]
 800a378:	f8cd a000 	str.w	sl, [sp]
 800a37c:	464b      	mov	r3, r9
 800a37e:	aa03      	add	r2, sp, #12
 800a380:	4621      	mov	r1, r4
 800a382:	4640      	mov	r0, r8
 800a384:	f7ff fee4 	bl	800a150 <_printf_common>
 800a388:	3001      	adds	r0, #1
 800a38a:	d14a      	bne.n	800a422 <_printf_i+0x1f6>
 800a38c:	f04f 30ff 	mov.w	r0, #4294967295
 800a390:	b004      	add	sp, #16
 800a392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a396:	6823      	ldr	r3, [r4, #0]
 800a398:	f043 0320 	orr.w	r3, r3, #32
 800a39c:	6023      	str	r3, [r4, #0]
 800a39e:	4833      	ldr	r0, [pc, #204]	; (800a46c <_printf_i+0x240>)
 800a3a0:	2778      	movs	r7, #120	; 0x78
 800a3a2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a3a6:	6823      	ldr	r3, [r4, #0]
 800a3a8:	6829      	ldr	r1, [r5, #0]
 800a3aa:	061f      	lsls	r7, r3, #24
 800a3ac:	f851 6b04 	ldr.w	r6, [r1], #4
 800a3b0:	d402      	bmi.n	800a3b8 <_printf_i+0x18c>
 800a3b2:	065f      	lsls	r7, r3, #25
 800a3b4:	bf48      	it	mi
 800a3b6:	b2b6      	uxthmi	r6, r6
 800a3b8:	07df      	lsls	r7, r3, #31
 800a3ba:	bf48      	it	mi
 800a3bc:	f043 0320 	orrmi.w	r3, r3, #32
 800a3c0:	6029      	str	r1, [r5, #0]
 800a3c2:	bf48      	it	mi
 800a3c4:	6023      	strmi	r3, [r4, #0]
 800a3c6:	b91e      	cbnz	r6, 800a3d0 <_printf_i+0x1a4>
 800a3c8:	6823      	ldr	r3, [r4, #0]
 800a3ca:	f023 0320 	bic.w	r3, r3, #32
 800a3ce:	6023      	str	r3, [r4, #0]
 800a3d0:	2310      	movs	r3, #16
 800a3d2:	e7a7      	b.n	800a324 <_printf_i+0xf8>
 800a3d4:	4824      	ldr	r0, [pc, #144]	; (800a468 <_printf_i+0x23c>)
 800a3d6:	e7e4      	b.n	800a3a2 <_printf_i+0x176>
 800a3d8:	4615      	mov	r5, r2
 800a3da:	e7bd      	b.n	800a358 <_printf_i+0x12c>
 800a3dc:	682b      	ldr	r3, [r5, #0]
 800a3de:	6826      	ldr	r6, [r4, #0]
 800a3e0:	6961      	ldr	r1, [r4, #20]
 800a3e2:	1d18      	adds	r0, r3, #4
 800a3e4:	6028      	str	r0, [r5, #0]
 800a3e6:	0635      	lsls	r5, r6, #24
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	d501      	bpl.n	800a3f0 <_printf_i+0x1c4>
 800a3ec:	6019      	str	r1, [r3, #0]
 800a3ee:	e002      	b.n	800a3f6 <_printf_i+0x1ca>
 800a3f0:	0670      	lsls	r0, r6, #25
 800a3f2:	d5fb      	bpl.n	800a3ec <_printf_i+0x1c0>
 800a3f4:	8019      	strh	r1, [r3, #0]
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	6123      	str	r3, [r4, #16]
 800a3fa:	4615      	mov	r5, r2
 800a3fc:	e7bc      	b.n	800a378 <_printf_i+0x14c>
 800a3fe:	682b      	ldr	r3, [r5, #0]
 800a400:	1d1a      	adds	r2, r3, #4
 800a402:	602a      	str	r2, [r5, #0]
 800a404:	681d      	ldr	r5, [r3, #0]
 800a406:	6862      	ldr	r2, [r4, #4]
 800a408:	2100      	movs	r1, #0
 800a40a:	4628      	mov	r0, r5
 800a40c:	f7f5 fec8 	bl	80001a0 <memchr>
 800a410:	b108      	cbz	r0, 800a416 <_printf_i+0x1ea>
 800a412:	1b40      	subs	r0, r0, r5
 800a414:	6060      	str	r0, [r4, #4]
 800a416:	6863      	ldr	r3, [r4, #4]
 800a418:	6123      	str	r3, [r4, #16]
 800a41a:	2300      	movs	r3, #0
 800a41c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a420:	e7aa      	b.n	800a378 <_printf_i+0x14c>
 800a422:	6923      	ldr	r3, [r4, #16]
 800a424:	462a      	mov	r2, r5
 800a426:	4649      	mov	r1, r9
 800a428:	4640      	mov	r0, r8
 800a42a:	47d0      	blx	sl
 800a42c:	3001      	adds	r0, #1
 800a42e:	d0ad      	beq.n	800a38c <_printf_i+0x160>
 800a430:	6823      	ldr	r3, [r4, #0]
 800a432:	079b      	lsls	r3, r3, #30
 800a434:	d413      	bmi.n	800a45e <_printf_i+0x232>
 800a436:	68e0      	ldr	r0, [r4, #12]
 800a438:	9b03      	ldr	r3, [sp, #12]
 800a43a:	4298      	cmp	r0, r3
 800a43c:	bfb8      	it	lt
 800a43e:	4618      	movlt	r0, r3
 800a440:	e7a6      	b.n	800a390 <_printf_i+0x164>
 800a442:	2301      	movs	r3, #1
 800a444:	4632      	mov	r2, r6
 800a446:	4649      	mov	r1, r9
 800a448:	4640      	mov	r0, r8
 800a44a:	47d0      	blx	sl
 800a44c:	3001      	adds	r0, #1
 800a44e:	d09d      	beq.n	800a38c <_printf_i+0x160>
 800a450:	3501      	adds	r5, #1
 800a452:	68e3      	ldr	r3, [r4, #12]
 800a454:	9903      	ldr	r1, [sp, #12]
 800a456:	1a5b      	subs	r3, r3, r1
 800a458:	42ab      	cmp	r3, r5
 800a45a:	dcf2      	bgt.n	800a442 <_printf_i+0x216>
 800a45c:	e7eb      	b.n	800a436 <_printf_i+0x20a>
 800a45e:	2500      	movs	r5, #0
 800a460:	f104 0619 	add.w	r6, r4, #25
 800a464:	e7f5      	b.n	800a452 <_printf_i+0x226>
 800a466:	bf00      	nop
 800a468:	0800c80e 	.word	0x0800c80e
 800a46c:	0800c81f 	.word	0x0800c81f

0800a470 <std>:
 800a470:	2300      	movs	r3, #0
 800a472:	b510      	push	{r4, lr}
 800a474:	4604      	mov	r4, r0
 800a476:	e9c0 3300 	strd	r3, r3, [r0]
 800a47a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a47e:	6083      	str	r3, [r0, #8]
 800a480:	8181      	strh	r1, [r0, #12]
 800a482:	6643      	str	r3, [r0, #100]	; 0x64
 800a484:	81c2      	strh	r2, [r0, #14]
 800a486:	6183      	str	r3, [r0, #24]
 800a488:	4619      	mov	r1, r3
 800a48a:	2208      	movs	r2, #8
 800a48c:	305c      	adds	r0, #92	; 0x5c
 800a48e:	f000 f8f4 	bl	800a67a <memset>
 800a492:	4b0d      	ldr	r3, [pc, #52]	; (800a4c8 <std+0x58>)
 800a494:	6263      	str	r3, [r4, #36]	; 0x24
 800a496:	4b0d      	ldr	r3, [pc, #52]	; (800a4cc <std+0x5c>)
 800a498:	62a3      	str	r3, [r4, #40]	; 0x28
 800a49a:	4b0d      	ldr	r3, [pc, #52]	; (800a4d0 <std+0x60>)
 800a49c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a49e:	4b0d      	ldr	r3, [pc, #52]	; (800a4d4 <std+0x64>)
 800a4a0:	6323      	str	r3, [r4, #48]	; 0x30
 800a4a2:	4b0d      	ldr	r3, [pc, #52]	; (800a4d8 <std+0x68>)
 800a4a4:	6224      	str	r4, [r4, #32]
 800a4a6:	429c      	cmp	r4, r3
 800a4a8:	d006      	beq.n	800a4b8 <std+0x48>
 800a4aa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a4ae:	4294      	cmp	r4, r2
 800a4b0:	d002      	beq.n	800a4b8 <std+0x48>
 800a4b2:	33d0      	adds	r3, #208	; 0xd0
 800a4b4:	429c      	cmp	r4, r3
 800a4b6:	d105      	bne.n	800a4c4 <std+0x54>
 800a4b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a4bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4c0:	f000 b958 	b.w	800a774 <__retarget_lock_init_recursive>
 800a4c4:	bd10      	pop	{r4, pc}
 800a4c6:	bf00      	nop
 800a4c8:	0800a5f5 	.word	0x0800a5f5
 800a4cc:	0800a617 	.word	0x0800a617
 800a4d0:	0800a64f 	.word	0x0800a64f
 800a4d4:	0800a673 	.word	0x0800a673
 800a4d8:	20000760 	.word	0x20000760

0800a4dc <stdio_exit_handler>:
 800a4dc:	4a02      	ldr	r2, [pc, #8]	; (800a4e8 <stdio_exit_handler+0xc>)
 800a4de:	4903      	ldr	r1, [pc, #12]	; (800a4ec <stdio_exit_handler+0x10>)
 800a4e0:	4803      	ldr	r0, [pc, #12]	; (800a4f0 <stdio_exit_handler+0x14>)
 800a4e2:	f000 b869 	b.w	800a5b8 <_fwalk_sglue>
 800a4e6:	bf00      	nop
 800a4e8:	2000004c 	.word	0x2000004c
 800a4ec:	0800c119 	.word	0x0800c119
 800a4f0:	20000058 	.word	0x20000058

0800a4f4 <cleanup_stdio>:
 800a4f4:	6841      	ldr	r1, [r0, #4]
 800a4f6:	4b0c      	ldr	r3, [pc, #48]	; (800a528 <cleanup_stdio+0x34>)
 800a4f8:	4299      	cmp	r1, r3
 800a4fa:	b510      	push	{r4, lr}
 800a4fc:	4604      	mov	r4, r0
 800a4fe:	d001      	beq.n	800a504 <cleanup_stdio+0x10>
 800a500:	f001 fe0a 	bl	800c118 <_fflush_r>
 800a504:	68a1      	ldr	r1, [r4, #8]
 800a506:	4b09      	ldr	r3, [pc, #36]	; (800a52c <cleanup_stdio+0x38>)
 800a508:	4299      	cmp	r1, r3
 800a50a:	d002      	beq.n	800a512 <cleanup_stdio+0x1e>
 800a50c:	4620      	mov	r0, r4
 800a50e:	f001 fe03 	bl	800c118 <_fflush_r>
 800a512:	68e1      	ldr	r1, [r4, #12]
 800a514:	4b06      	ldr	r3, [pc, #24]	; (800a530 <cleanup_stdio+0x3c>)
 800a516:	4299      	cmp	r1, r3
 800a518:	d004      	beq.n	800a524 <cleanup_stdio+0x30>
 800a51a:	4620      	mov	r0, r4
 800a51c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a520:	f001 bdfa 	b.w	800c118 <_fflush_r>
 800a524:	bd10      	pop	{r4, pc}
 800a526:	bf00      	nop
 800a528:	20000760 	.word	0x20000760
 800a52c:	200007c8 	.word	0x200007c8
 800a530:	20000830 	.word	0x20000830

0800a534 <global_stdio_init.part.0>:
 800a534:	b510      	push	{r4, lr}
 800a536:	4b0b      	ldr	r3, [pc, #44]	; (800a564 <global_stdio_init.part.0+0x30>)
 800a538:	4c0b      	ldr	r4, [pc, #44]	; (800a568 <global_stdio_init.part.0+0x34>)
 800a53a:	4a0c      	ldr	r2, [pc, #48]	; (800a56c <global_stdio_init.part.0+0x38>)
 800a53c:	601a      	str	r2, [r3, #0]
 800a53e:	4620      	mov	r0, r4
 800a540:	2200      	movs	r2, #0
 800a542:	2104      	movs	r1, #4
 800a544:	f7ff ff94 	bl	800a470 <std>
 800a548:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a54c:	2201      	movs	r2, #1
 800a54e:	2109      	movs	r1, #9
 800a550:	f7ff ff8e 	bl	800a470 <std>
 800a554:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a558:	2202      	movs	r2, #2
 800a55a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a55e:	2112      	movs	r1, #18
 800a560:	f7ff bf86 	b.w	800a470 <std>
 800a564:	20000898 	.word	0x20000898
 800a568:	20000760 	.word	0x20000760
 800a56c:	0800a4dd 	.word	0x0800a4dd

0800a570 <__sfp_lock_acquire>:
 800a570:	4801      	ldr	r0, [pc, #4]	; (800a578 <__sfp_lock_acquire+0x8>)
 800a572:	f000 b900 	b.w	800a776 <__retarget_lock_acquire_recursive>
 800a576:	bf00      	nop
 800a578:	200008a1 	.word	0x200008a1

0800a57c <__sfp_lock_release>:
 800a57c:	4801      	ldr	r0, [pc, #4]	; (800a584 <__sfp_lock_release+0x8>)
 800a57e:	f000 b8fb 	b.w	800a778 <__retarget_lock_release_recursive>
 800a582:	bf00      	nop
 800a584:	200008a1 	.word	0x200008a1

0800a588 <__sinit>:
 800a588:	b510      	push	{r4, lr}
 800a58a:	4604      	mov	r4, r0
 800a58c:	f7ff fff0 	bl	800a570 <__sfp_lock_acquire>
 800a590:	6a23      	ldr	r3, [r4, #32]
 800a592:	b11b      	cbz	r3, 800a59c <__sinit+0x14>
 800a594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a598:	f7ff bff0 	b.w	800a57c <__sfp_lock_release>
 800a59c:	4b04      	ldr	r3, [pc, #16]	; (800a5b0 <__sinit+0x28>)
 800a59e:	6223      	str	r3, [r4, #32]
 800a5a0:	4b04      	ldr	r3, [pc, #16]	; (800a5b4 <__sinit+0x2c>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d1f5      	bne.n	800a594 <__sinit+0xc>
 800a5a8:	f7ff ffc4 	bl	800a534 <global_stdio_init.part.0>
 800a5ac:	e7f2      	b.n	800a594 <__sinit+0xc>
 800a5ae:	bf00      	nop
 800a5b0:	0800a4f5 	.word	0x0800a4f5
 800a5b4:	20000898 	.word	0x20000898

0800a5b8 <_fwalk_sglue>:
 800a5b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5bc:	4607      	mov	r7, r0
 800a5be:	4688      	mov	r8, r1
 800a5c0:	4614      	mov	r4, r2
 800a5c2:	2600      	movs	r6, #0
 800a5c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a5c8:	f1b9 0901 	subs.w	r9, r9, #1
 800a5cc:	d505      	bpl.n	800a5da <_fwalk_sglue+0x22>
 800a5ce:	6824      	ldr	r4, [r4, #0]
 800a5d0:	2c00      	cmp	r4, #0
 800a5d2:	d1f7      	bne.n	800a5c4 <_fwalk_sglue+0xc>
 800a5d4:	4630      	mov	r0, r6
 800a5d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5da:	89ab      	ldrh	r3, [r5, #12]
 800a5dc:	2b01      	cmp	r3, #1
 800a5de:	d907      	bls.n	800a5f0 <_fwalk_sglue+0x38>
 800a5e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a5e4:	3301      	adds	r3, #1
 800a5e6:	d003      	beq.n	800a5f0 <_fwalk_sglue+0x38>
 800a5e8:	4629      	mov	r1, r5
 800a5ea:	4638      	mov	r0, r7
 800a5ec:	47c0      	blx	r8
 800a5ee:	4306      	orrs	r6, r0
 800a5f0:	3568      	adds	r5, #104	; 0x68
 800a5f2:	e7e9      	b.n	800a5c8 <_fwalk_sglue+0x10>

0800a5f4 <__sread>:
 800a5f4:	b510      	push	{r4, lr}
 800a5f6:	460c      	mov	r4, r1
 800a5f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5fc:	f000 f86c 	bl	800a6d8 <_read_r>
 800a600:	2800      	cmp	r0, #0
 800a602:	bfab      	itete	ge
 800a604:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a606:	89a3      	ldrhlt	r3, [r4, #12]
 800a608:	181b      	addge	r3, r3, r0
 800a60a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a60e:	bfac      	ite	ge
 800a610:	6563      	strge	r3, [r4, #84]	; 0x54
 800a612:	81a3      	strhlt	r3, [r4, #12]
 800a614:	bd10      	pop	{r4, pc}

0800a616 <__swrite>:
 800a616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a61a:	461f      	mov	r7, r3
 800a61c:	898b      	ldrh	r3, [r1, #12]
 800a61e:	05db      	lsls	r3, r3, #23
 800a620:	4605      	mov	r5, r0
 800a622:	460c      	mov	r4, r1
 800a624:	4616      	mov	r6, r2
 800a626:	d505      	bpl.n	800a634 <__swrite+0x1e>
 800a628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a62c:	2302      	movs	r3, #2
 800a62e:	2200      	movs	r2, #0
 800a630:	f000 f840 	bl	800a6b4 <_lseek_r>
 800a634:	89a3      	ldrh	r3, [r4, #12]
 800a636:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a63a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a63e:	81a3      	strh	r3, [r4, #12]
 800a640:	4632      	mov	r2, r6
 800a642:	463b      	mov	r3, r7
 800a644:	4628      	mov	r0, r5
 800a646:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a64a:	f000 b857 	b.w	800a6fc <_write_r>

0800a64e <__sseek>:
 800a64e:	b510      	push	{r4, lr}
 800a650:	460c      	mov	r4, r1
 800a652:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a656:	f000 f82d 	bl	800a6b4 <_lseek_r>
 800a65a:	1c43      	adds	r3, r0, #1
 800a65c:	89a3      	ldrh	r3, [r4, #12]
 800a65e:	bf15      	itete	ne
 800a660:	6560      	strne	r0, [r4, #84]	; 0x54
 800a662:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a666:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a66a:	81a3      	strheq	r3, [r4, #12]
 800a66c:	bf18      	it	ne
 800a66e:	81a3      	strhne	r3, [r4, #12]
 800a670:	bd10      	pop	{r4, pc}

0800a672 <__sclose>:
 800a672:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a676:	f000 b80d 	b.w	800a694 <_close_r>

0800a67a <memset>:
 800a67a:	4402      	add	r2, r0
 800a67c:	4603      	mov	r3, r0
 800a67e:	4293      	cmp	r3, r2
 800a680:	d100      	bne.n	800a684 <memset+0xa>
 800a682:	4770      	bx	lr
 800a684:	f803 1b01 	strb.w	r1, [r3], #1
 800a688:	e7f9      	b.n	800a67e <memset+0x4>
	...

0800a68c <_localeconv_r>:
 800a68c:	4800      	ldr	r0, [pc, #0]	; (800a690 <_localeconv_r+0x4>)
 800a68e:	4770      	bx	lr
 800a690:	20000198 	.word	0x20000198

0800a694 <_close_r>:
 800a694:	b538      	push	{r3, r4, r5, lr}
 800a696:	4d06      	ldr	r5, [pc, #24]	; (800a6b0 <_close_r+0x1c>)
 800a698:	2300      	movs	r3, #0
 800a69a:	4604      	mov	r4, r0
 800a69c:	4608      	mov	r0, r1
 800a69e:	602b      	str	r3, [r5, #0]
 800a6a0:	f7f8 fb9c 	bl	8002ddc <_close>
 800a6a4:	1c43      	adds	r3, r0, #1
 800a6a6:	d102      	bne.n	800a6ae <_close_r+0x1a>
 800a6a8:	682b      	ldr	r3, [r5, #0]
 800a6aa:	b103      	cbz	r3, 800a6ae <_close_r+0x1a>
 800a6ac:	6023      	str	r3, [r4, #0]
 800a6ae:	bd38      	pop	{r3, r4, r5, pc}
 800a6b0:	2000089c 	.word	0x2000089c

0800a6b4 <_lseek_r>:
 800a6b4:	b538      	push	{r3, r4, r5, lr}
 800a6b6:	4d07      	ldr	r5, [pc, #28]	; (800a6d4 <_lseek_r+0x20>)
 800a6b8:	4604      	mov	r4, r0
 800a6ba:	4608      	mov	r0, r1
 800a6bc:	4611      	mov	r1, r2
 800a6be:	2200      	movs	r2, #0
 800a6c0:	602a      	str	r2, [r5, #0]
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	f7f8 fbb1 	bl	8002e2a <_lseek>
 800a6c8:	1c43      	adds	r3, r0, #1
 800a6ca:	d102      	bne.n	800a6d2 <_lseek_r+0x1e>
 800a6cc:	682b      	ldr	r3, [r5, #0]
 800a6ce:	b103      	cbz	r3, 800a6d2 <_lseek_r+0x1e>
 800a6d0:	6023      	str	r3, [r4, #0]
 800a6d2:	bd38      	pop	{r3, r4, r5, pc}
 800a6d4:	2000089c 	.word	0x2000089c

0800a6d8 <_read_r>:
 800a6d8:	b538      	push	{r3, r4, r5, lr}
 800a6da:	4d07      	ldr	r5, [pc, #28]	; (800a6f8 <_read_r+0x20>)
 800a6dc:	4604      	mov	r4, r0
 800a6de:	4608      	mov	r0, r1
 800a6e0:	4611      	mov	r1, r2
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	602a      	str	r2, [r5, #0]
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	f7f8 fb3f 	bl	8002d6a <_read>
 800a6ec:	1c43      	adds	r3, r0, #1
 800a6ee:	d102      	bne.n	800a6f6 <_read_r+0x1e>
 800a6f0:	682b      	ldr	r3, [r5, #0]
 800a6f2:	b103      	cbz	r3, 800a6f6 <_read_r+0x1e>
 800a6f4:	6023      	str	r3, [r4, #0]
 800a6f6:	bd38      	pop	{r3, r4, r5, pc}
 800a6f8:	2000089c 	.word	0x2000089c

0800a6fc <_write_r>:
 800a6fc:	b538      	push	{r3, r4, r5, lr}
 800a6fe:	4d07      	ldr	r5, [pc, #28]	; (800a71c <_write_r+0x20>)
 800a700:	4604      	mov	r4, r0
 800a702:	4608      	mov	r0, r1
 800a704:	4611      	mov	r1, r2
 800a706:	2200      	movs	r2, #0
 800a708:	602a      	str	r2, [r5, #0]
 800a70a:	461a      	mov	r2, r3
 800a70c:	f7f8 fb4a 	bl	8002da4 <_write>
 800a710:	1c43      	adds	r3, r0, #1
 800a712:	d102      	bne.n	800a71a <_write_r+0x1e>
 800a714:	682b      	ldr	r3, [r5, #0]
 800a716:	b103      	cbz	r3, 800a71a <_write_r+0x1e>
 800a718:	6023      	str	r3, [r4, #0]
 800a71a:	bd38      	pop	{r3, r4, r5, pc}
 800a71c:	2000089c 	.word	0x2000089c

0800a720 <__errno>:
 800a720:	4b01      	ldr	r3, [pc, #4]	; (800a728 <__errno+0x8>)
 800a722:	6818      	ldr	r0, [r3, #0]
 800a724:	4770      	bx	lr
 800a726:	bf00      	nop
 800a728:	200000a4 	.word	0x200000a4

0800a72c <__libc_init_array>:
 800a72c:	b570      	push	{r4, r5, r6, lr}
 800a72e:	4d0d      	ldr	r5, [pc, #52]	; (800a764 <__libc_init_array+0x38>)
 800a730:	4c0d      	ldr	r4, [pc, #52]	; (800a768 <__libc_init_array+0x3c>)
 800a732:	1b64      	subs	r4, r4, r5
 800a734:	10a4      	asrs	r4, r4, #2
 800a736:	2600      	movs	r6, #0
 800a738:	42a6      	cmp	r6, r4
 800a73a:	d109      	bne.n	800a750 <__libc_init_array+0x24>
 800a73c:	4d0b      	ldr	r5, [pc, #44]	; (800a76c <__libc_init_array+0x40>)
 800a73e:	4c0c      	ldr	r4, [pc, #48]	; (800a770 <__libc_init_array+0x44>)
 800a740:	f001 feee 	bl	800c520 <_init>
 800a744:	1b64      	subs	r4, r4, r5
 800a746:	10a4      	asrs	r4, r4, #2
 800a748:	2600      	movs	r6, #0
 800a74a:	42a6      	cmp	r6, r4
 800a74c:	d105      	bne.n	800a75a <__libc_init_array+0x2e>
 800a74e:	bd70      	pop	{r4, r5, r6, pc}
 800a750:	f855 3b04 	ldr.w	r3, [r5], #4
 800a754:	4798      	blx	r3
 800a756:	3601      	adds	r6, #1
 800a758:	e7ee      	b.n	800a738 <__libc_init_array+0xc>
 800a75a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a75e:	4798      	blx	r3
 800a760:	3601      	adds	r6, #1
 800a762:	e7f2      	b.n	800a74a <__libc_init_array+0x1e>
 800a764:	0800cb7c 	.word	0x0800cb7c
 800a768:	0800cb7c 	.word	0x0800cb7c
 800a76c:	0800cb7c 	.word	0x0800cb7c
 800a770:	0800cb80 	.word	0x0800cb80

0800a774 <__retarget_lock_init_recursive>:
 800a774:	4770      	bx	lr

0800a776 <__retarget_lock_acquire_recursive>:
 800a776:	4770      	bx	lr

0800a778 <__retarget_lock_release_recursive>:
 800a778:	4770      	bx	lr

0800a77a <memcpy>:
 800a77a:	440a      	add	r2, r1
 800a77c:	4291      	cmp	r1, r2
 800a77e:	f100 33ff 	add.w	r3, r0, #4294967295
 800a782:	d100      	bne.n	800a786 <memcpy+0xc>
 800a784:	4770      	bx	lr
 800a786:	b510      	push	{r4, lr}
 800a788:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a78c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a790:	4291      	cmp	r1, r2
 800a792:	d1f9      	bne.n	800a788 <memcpy+0xe>
 800a794:	bd10      	pop	{r4, pc}

0800a796 <quorem>:
 800a796:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a79a:	6903      	ldr	r3, [r0, #16]
 800a79c:	690c      	ldr	r4, [r1, #16]
 800a79e:	42a3      	cmp	r3, r4
 800a7a0:	4607      	mov	r7, r0
 800a7a2:	db7e      	blt.n	800a8a2 <quorem+0x10c>
 800a7a4:	3c01      	subs	r4, #1
 800a7a6:	f101 0814 	add.w	r8, r1, #20
 800a7aa:	f100 0514 	add.w	r5, r0, #20
 800a7ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a7b2:	9301      	str	r3, [sp, #4]
 800a7b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a7b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a7bc:	3301      	adds	r3, #1
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a7c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a7c8:	fbb2 f6f3 	udiv	r6, r2, r3
 800a7cc:	d331      	bcc.n	800a832 <quorem+0x9c>
 800a7ce:	f04f 0e00 	mov.w	lr, #0
 800a7d2:	4640      	mov	r0, r8
 800a7d4:	46ac      	mov	ip, r5
 800a7d6:	46f2      	mov	sl, lr
 800a7d8:	f850 2b04 	ldr.w	r2, [r0], #4
 800a7dc:	b293      	uxth	r3, r2
 800a7de:	fb06 e303 	mla	r3, r6, r3, lr
 800a7e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a7e6:	0c1a      	lsrs	r2, r3, #16
 800a7e8:	b29b      	uxth	r3, r3
 800a7ea:	ebaa 0303 	sub.w	r3, sl, r3
 800a7ee:	f8dc a000 	ldr.w	sl, [ip]
 800a7f2:	fa13 f38a 	uxtah	r3, r3, sl
 800a7f6:	fb06 220e 	mla	r2, r6, lr, r2
 800a7fa:	9300      	str	r3, [sp, #0]
 800a7fc:	9b00      	ldr	r3, [sp, #0]
 800a7fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a802:	b292      	uxth	r2, r2
 800a804:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a808:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a80c:	f8bd 3000 	ldrh.w	r3, [sp]
 800a810:	4581      	cmp	r9, r0
 800a812:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a816:	f84c 3b04 	str.w	r3, [ip], #4
 800a81a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a81e:	d2db      	bcs.n	800a7d8 <quorem+0x42>
 800a820:	f855 300b 	ldr.w	r3, [r5, fp]
 800a824:	b92b      	cbnz	r3, 800a832 <quorem+0x9c>
 800a826:	9b01      	ldr	r3, [sp, #4]
 800a828:	3b04      	subs	r3, #4
 800a82a:	429d      	cmp	r5, r3
 800a82c:	461a      	mov	r2, r3
 800a82e:	d32c      	bcc.n	800a88a <quorem+0xf4>
 800a830:	613c      	str	r4, [r7, #16]
 800a832:	4638      	mov	r0, r7
 800a834:	f001 f9a6 	bl	800bb84 <__mcmp>
 800a838:	2800      	cmp	r0, #0
 800a83a:	db22      	blt.n	800a882 <quorem+0xec>
 800a83c:	3601      	adds	r6, #1
 800a83e:	4629      	mov	r1, r5
 800a840:	2000      	movs	r0, #0
 800a842:	f858 2b04 	ldr.w	r2, [r8], #4
 800a846:	f8d1 c000 	ldr.w	ip, [r1]
 800a84a:	b293      	uxth	r3, r2
 800a84c:	1ac3      	subs	r3, r0, r3
 800a84e:	0c12      	lsrs	r2, r2, #16
 800a850:	fa13 f38c 	uxtah	r3, r3, ip
 800a854:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a858:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a85c:	b29b      	uxth	r3, r3
 800a85e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a862:	45c1      	cmp	r9, r8
 800a864:	f841 3b04 	str.w	r3, [r1], #4
 800a868:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a86c:	d2e9      	bcs.n	800a842 <quorem+0xac>
 800a86e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a872:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a876:	b922      	cbnz	r2, 800a882 <quorem+0xec>
 800a878:	3b04      	subs	r3, #4
 800a87a:	429d      	cmp	r5, r3
 800a87c:	461a      	mov	r2, r3
 800a87e:	d30a      	bcc.n	800a896 <quorem+0x100>
 800a880:	613c      	str	r4, [r7, #16]
 800a882:	4630      	mov	r0, r6
 800a884:	b003      	add	sp, #12
 800a886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a88a:	6812      	ldr	r2, [r2, #0]
 800a88c:	3b04      	subs	r3, #4
 800a88e:	2a00      	cmp	r2, #0
 800a890:	d1ce      	bne.n	800a830 <quorem+0x9a>
 800a892:	3c01      	subs	r4, #1
 800a894:	e7c9      	b.n	800a82a <quorem+0x94>
 800a896:	6812      	ldr	r2, [r2, #0]
 800a898:	3b04      	subs	r3, #4
 800a89a:	2a00      	cmp	r2, #0
 800a89c:	d1f0      	bne.n	800a880 <quorem+0xea>
 800a89e:	3c01      	subs	r4, #1
 800a8a0:	e7eb      	b.n	800a87a <quorem+0xe4>
 800a8a2:	2000      	movs	r0, #0
 800a8a4:	e7ee      	b.n	800a884 <quorem+0xee>
	...

0800a8a8 <_dtoa_r>:
 800a8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ac:	ed2d 8b04 	vpush	{d8-d9}
 800a8b0:	69c5      	ldr	r5, [r0, #28]
 800a8b2:	b093      	sub	sp, #76	; 0x4c
 800a8b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a8b8:	ec57 6b10 	vmov	r6, r7, d0
 800a8bc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a8c0:	9107      	str	r1, [sp, #28]
 800a8c2:	4604      	mov	r4, r0
 800a8c4:	920a      	str	r2, [sp, #40]	; 0x28
 800a8c6:	930d      	str	r3, [sp, #52]	; 0x34
 800a8c8:	b975      	cbnz	r5, 800a8e8 <_dtoa_r+0x40>
 800a8ca:	2010      	movs	r0, #16
 800a8cc:	f000 fe2a 	bl	800b524 <malloc>
 800a8d0:	4602      	mov	r2, r0
 800a8d2:	61e0      	str	r0, [r4, #28]
 800a8d4:	b920      	cbnz	r0, 800a8e0 <_dtoa_r+0x38>
 800a8d6:	4bae      	ldr	r3, [pc, #696]	; (800ab90 <_dtoa_r+0x2e8>)
 800a8d8:	21ef      	movs	r1, #239	; 0xef
 800a8da:	48ae      	ldr	r0, [pc, #696]	; (800ab94 <_dtoa_r+0x2ec>)
 800a8dc:	f001 fcea 	bl	800c2b4 <__assert_func>
 800a8e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a8e4:	6005      	str	r5, [r0, #0]
 800a8e6:	60c5      	str	r5, [r0, #12]
 800a8e8:	69e3      	ldr	r3, [r4, #28]
 800a8ea:	6819      	ldr	r1, [r3, #0]
 800a8ec:	b151      	cbz	r1, 800a904 <_dtoa_r+0x5c>
 800a8ee:	685a      	ldr	r2, [r3, #4]
 800a8f0:	604a      	str	r2, [r1, #4]
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	4093      	lsls	r3, r2
 800a8f6:	608b      	str	r3, [r1, #8]
 800a8f8:	4620      	mov	r0, r4
 800a8fa:	f000 ff07 	bl	800b70c <_Bfree>
 800a8fe:	69e3      	ldr	r3, [r4, #28]
 800a900:	2200      	movs	r2, #0
 800a902:	601a      	str	r2, [r3, #0]
 800a904:	1e3b      	subs	r3, r7, #0
 800a906:	bfbb      	ittet	lt
 800a908:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a90c:	9303      	strlt	r3, [sp, #12]
 800a90e:	2300      	movge	r3, #0
 800a910:	2201      	movlt	r2, #1
 800a912:	bfac      	ite	ge
 800a914:	f8c8 3000 	strge.w	r3, [r8]
 800a918:	f8c8 2000 	strlt.w	r2, [r8]
 800a91c:	4b9e      	ldr	r3, [pc, #632]	; (800ab98 <_dtoa_r+0x2f0>)
 800a91e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a922:	ea33 0308 	bics.w	r3, r3, r8
 800a926:	d11b      	bne.n	800a960 <_dtoa_r+0xb8>
 800a928:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a92a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a92e:	6013      	str	r3, [r2, #0]
 800a930:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a934:	4333      	orrs	r3, r6
 800a936:	f000 8593 	beq.w	800b460 <_dtoa_r+0xbb8>
 800a93a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a93c:	b963      	cbnz	r3, 800a958 <_dtoa_r+0xb0>
 800a93e:	4b97      	ldr	r3, [pc, #604]	; (800ab9c <_dtoa_r+0x2f4>)
 800a940:	e027      	b.n	800a992 <_dtoa_r+0xea>
 800a942:	4b97      	ldr	r3, [pc, #604]	; (800aba0 <_dtoa_r+0x2f8>)
 800a944:	9300      	str	r3, [sp, #0]
 800a946:	3308      	adds	r3, #8
 800a948:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a94a:	6013      	str	r3, [r2, #0]
 800a94c:	9800      	ldr	r0, [sp, #0]
 800a94e:	b013      	add	sp, #76	; 0x4c
 800a950:	ecbd 8b04 	vpop	{d8-d9}
 800a954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a958:	4b90      	ldr	r3, [pc, #576]	; (800ab9c <_dtoa_r+0x2f4>)
 800a95a:	9300      	str	r3, [sp, #0]
 800a95c:	3303      	adds	r3, #3
 800a95e:	e7f3      	b.n	800a948 <_dtoa_r+0xa0>
 800a960:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a964:	2200      	movs	r2, #0
 800a966:	ec51 0b17 	vmov	r0, r1, d7
 800a96a:	eeb0 8a47 	vmov.f32	s16, s14
 800a96e:	eef0 8a67 	vmov.f32	s17, s15
 800a972:	2300      	movs	r3, #0
 800a974:	f7f6 f890 	bl	8000a98 <__aeabi_dcmpeq>
 800a978:	4681      	mov	r9, r0
 800a97a:	b160      	cbz	r0, 800a996 <_dtoa_r+0xee>
 800a97c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a97e:	2301      	movs	r3, #1
 800a980:	6013      	str	r3, [r2, #0]
 800a982:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a984:	2b00      	cmp	r3, #0
 800a986:	f000 8568 	beq.w	800b45a <_dtoa_r+0xbb2>
 800a98a:	4b86      	ldr	r3, [pc, #536]	; (800aba4 <_dtoa_r+0x2fc>)
 800a98c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a98e:	6013      	str	r3, [r2, #0]
 800a990:	3b01      	subs	r3, #1
 800a992:	9300      	str	r3, [sp, #0]
 800a994:	e7da      	b.n	800a94c <_dtoa_r+0xa4>
 800a996:	aa10      	add	r2, sp, #64	; 0x40
 800a998:	a911      	add	r1, sp, #68	; 0x44
 800a99a:	4620      	mov	r0, r4
 800a99c:	eeb0 0a48 	vmov.f32	s0, s16
 800a9a0:	eef0 0a68 	vmov.f32	s1, s17
 800a9a4:	f001 f994 	bl	800bcd0 <__d2b>
 800a9a8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a9ac:	4682      	mov	sl, r0
 800a9ae:	2d00      	cmp	r5, #0
 800a9b0:	d07f      	beq.n	800aab2 <_dtoa_r+0x20a>
 800a9b2:	ee18 3a90 	vmov	r3, s17
 800a9b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9ba:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a9be:	ec51 0b18 	vmov	r0, r1, d8
 800a9c2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a9c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a9ca:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	4b75      	ldr	r3, [pc, #468]	; (800aba8 <_dtoa_r+0x300>)
 800a9d4:	f7f5 fc40 	bl	8000258 <__aeabi_dsub>
 800a9d8:	a367      	add	r3, pc, #412	; (adr r3, 800ab78 <_dtoa_r+0x2d0>)
 800a9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9de:	f7f5 fdf3 	bl	80005c8 <__aeabi_dmul>
 800a9e2:	a367      	add	r3, pc, #412	; (adr r3, 800ab80 <_dtoa_r+0x2d8>)
 800a9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e8:	f7f5 fc38 	bl	800025c <__adddf3>
 800a9ec:	4606      	mov	r6, r0
 800a9ee:	4628      	mov	r0, r5
 800a9f0:	460f      	mov	r7, r1
 800a9f2:	f7f5 fd7f 	bl	80004f4 <__aeabi_i2d>
 800a9f6:	a364      	add	r3, pc, #400	; (adr r3, 800ab88 <_dtoa_r+0x2e0>)
 800a9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9fc:	f7f5 fde4 	bl	80005c8 <__aeabi_dmul>
 800aa00:	4602      	mov	r2, r0
 800aa02:	460b      	mov	r3, r1
 800aa04:	4630      	mov	r0, r6
 800aa06:	4639      	mov	r1, r7
 800aa08:	f7f5 fc28 	bl	800025c <__adddf3>
 800aa0c:	4606      	mov	r6, r0
 800aa0e:	460f      	mov	r7, r1
 800aa10:	f7f6 f88a 	bl	8000b28 <__aeabi_d2iz>
 800aa14:	2200      	movs	r2, #0
 800aa16:	4683      	mov	fp, r0
 800aa18:	2300      	movs	r3, #0
 800aa1a:	4630      	mov	r0, r6
 800aa1c:	4639      	mov	r1, r7
 800aa1e:	f7f6 f845 	bl	8000aac <__aeabi_dcmplt>
 800aa22:	b148      	cbz	r0, 800aa38 <_dtoa_r+0x190>
 800aa24:	4658      	mov	r0, fp
 800aa26:	f7f5 fd65 	bl	80004f4 <__aeabi_i2d>
 800aa2a:	4632      	mov	r2, r6
 800aa2c:	463b      	mov	r3, r7
 800aa2e:	f7f6 f833 	bl	8000a98 <__aeabi_dcmpeq>
 800aa32:	b908      	cbnz	r0, 800aa38 <_dtoa_r+0x190>
 800aa34:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aa38:	f1bb 0f16 	cmp.w	fp, #22
 800aa3c:	d857      	bhi.n	800aaee <_dtoa_r+0x246>
 800aa3e:	4b5b      	ldr	r3, [pc, #364]	; (800abac <_dtoa_r+0x304>)
 800aa40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800aa44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa48:	ec51 0b18 	vmov	r0, r1, d8
 800aa4c:	f7f6 f82e 	bl	8000aac <__aeabi_dcmplt>
 800aa50:	2800      	cmp	r0, #0
 800aa52:	d04e      	beq.n	800aaf2 <_dtoa_r+0x24a>
 800aa54:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aa58:	2300      	movs	r3, #0
 800aa5a:	930c      	str	r3, [sp, #48]	; 0x30
 800aa5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa5e:	1b5b      	subs	r3, r3, r5
 800aa60:	1e5a      	subs	r2, r3, #1
 800aa62:	bf45      	ittet	mi
 800aa64:	f1c3 0301 	rsbmi	r3, r3, #1
 800aa68:	9305      	strmi	r3, [sp, #20]
 800aa6a:	2300      	movpl	r3, #0
 800aa6c:	2300      	movmi	r3, #0
 800aa6e:	9206      	str	r2, [sp, #24]
 800aa70:	bf54      	ite	pl
 800aa72:	9305      	strpl	r3, [sp, #20]
 800aa74:	9306      	strmi	r3, [sp, #24]
 800aa76:	f1bb 0f00 	cmp.w	fp, #0
 800aa7a:	db3c      	blt.n	800aaf6 <_dtoa_r+0x24e>
 800aa7c:	9b06      	ldr	r3, [sp, #24]
 800aa7e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800aa82:	445b      	add	r3, fp
 800aa84:	9306      	str	r3, [sp, #24]
 800aa86:	2300      	movs	r3, #0
 800aa88:	9308      	str	r3, [sp, #32]
 800aa8a:	9b07      	ldr	r3, [sp, #28]
 800aa8c:	2b09      	cmp	r3, #9
 800aa8e:	d868      	bhi.n	800ab62 <_dtoa_r+0x2ba>
 800aa90:	2b05      	cmp	r3, #5
 800aa92:	bfc4      	itt	gt
 800aa94:	3b04      	subgt	r3, #4
 800aa96:	9307      	strgt	r3, [sp, #28]
 800aa98:	9b07      	ldr	r3, [sp, #28]
 800aa9a:	f1a3 0302 	sub.w	r3, r3, #2
 800aa9e:	bfcc      	ite	gt
 800aaa0:	2500      	movgt	r5, #0
 800aaa2:	2501      	movle	r5, #1
 800aaa4:	2b03      	cmp	r3, #3
 800aaa6:	f200 8085 	bhi.w	800abb4 <_dtoa_r+0x30c>
 800aaaa:	e8df f003 	tbb	[pc, r3]
 800aaae:	3b2e      	.short	0x3b2e
 800aab0:	5839      	.short	0x5839
 800aab2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800aab6:	441d      	add	r5, r3
 800aab8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800aabc:	2b20      	cmp	r3, #32
 800aabe:	bfc1      	itttt	gt
 800aac0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800aac4:	fa08 f803 	lslgt.w	r8, r8, r3
 800aac8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800aacc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800aad0:	bfd6      	itet	le
 800aad2:	f1c3 0320 	rsble	r3, r3, #32
 800aad6:	ea48 0003 	orrgt.w	r0, r8, r3
 800aada:	fa06 f003 	lslle.w	r0, r6, r3
 800aade:	f7f5 fcf9 	bl	80004d4 <__aeabi_ui2d>
 800aae2:	2201      	movs	r2, #1
 800aae4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800aae8:	3d01      	subs	r5, #1
 800aaea:	920e      	str	r2, [sp, #56]	; 0x38
 800aaec:	e76f      	b.n	800a9ce <_dtoa_r+0x126>
 800aaee:	2301      	movs	r3, #1
 800aaf0:	e7b3      	b.n	800aa5a <_dtoa_r+0x1b2>
 800aaf2:	900c      	str	r0, [sp, #48]	; 0x30
 800aaf4:	e7b2      	b.n	800aa5c <_dtoa_r+0x1b4>
 800aaf6:	9b05      	ldr	r3, [sp, #20]
 800aaf8:	eba3 030b 	sub.w	r3, r3, fp
 800aafc:	9305      	str	r3, [sp, #20]
 800aafe:	f1cb 0300 	rsb	r3, fp, #0
 800ab02:	9308      	str	r3, [sp, #32]
 800ab04:	2300      	movs	r3, #0
 800ab06:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab08:	e7bf      	b.n	800aa8a <_dtoa_r+0x1e2>
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	9309      	str	r3, [sp, #36]	; 0x24
 800ab0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	dc52      	bgt.n	800abba <_dtoa_r+0x312>
 800ab14:	2301      	movs	r3, #1
 800ab16:	9301      	str	r3, [sp, #4]
 800ab18:	9304      	str	r3, [sp, #16]
 800ab1a:	461a      	mov	r2, r3
 800ab1c:	920a      	str	r2, [sp, #40]	; 0x28
 800ab1e:	e00b      	b.n	800ab38 <_dtoa_r+0x290>
 800ab20:	2301      	movs	r3, #1
 800ab22:	e7f3      	b.n	800ab0c <_dtoa_r+0x264>
 800ab24:	2300      	movs	r3, #0
 800ab26:	9309      	str	r3, [sp, #36]	; 0x24
 800ab28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab2a:	445b      	add	r3, fp
 800ab2c:	9301      	str	r3, [sp, #4]
 800ab2e:	3301      	adds	r3, #1
 800ab30:	2b01      	cmp	r3, #1
 800ab32:	9304      	str	r3, [sp, #16]
 800ab34:	bfb8      	it	lt
 800ab36:	2301      	movlt	r3, #1
 800ab38:	69e0      	ldr	r0, [r4, #28]
 800ab3a:	2100      	movs	r1, #0
 800ab3c:	2204      	movs	r2, #4
 800ab3e:	f102 0614 	add.w	r6, r2, #20
 800ab42:	429e      	cmp	r6, r3
 800ab44:	d93d      	bls.n	800abc2 <_dtoa_r+0x31a>
 800ab46:	6041      	str	r1, [r0, #4]
 800ab48:	4620      	mov	r0, r4
 800ab4a:	f000 fd9f 	bl	800b68c <_Balloc>
 800ab4e:	9000      	str	r0, [sp, #0]
 800ab50:	2800      	cmp	r0, #0
 800ab52:	d139      	bne.n	800abc8 <_dtoa_r+0x320>
 800ab54:	4b16      	ldr	r3, [pc, #88]	; (800abb0 <_dtoa_r+0x308>)
 800ab56:	4602      	mov	r2, r0
 800ab58:	f240 11af 	movw	r1, #431	; 0x1af
 800ab5c:	e6bd      	b.n	800a8da <_dtoa_r+0x32>
 800ab5e:	2301      	movs	r3, #1
 800ab60:	e7e1      	b.n	800ab26 <_dtoa_r+0x27e>
 800ab62:	2501      	movs	r5, #1
 800ab64:	2300      	movs	r3, #0
 800ab66:	9307      	str	r3, [sp, #28]
 800ab68:	9509      	str	r5, [sp, #36]	; 0x24
 800ab6a:	f04f 33ff 	mov.w	r3, #4294967295
 800ab6e:	9301      	str	r3, [sp, #4]
 800ab70:	9304      	str	r3, [sp, #16]
 800ab72:	2200      	movs	r2, #0
 800ab74:	2312      	movs	r3, #18
 800ab76:	e7d1      	b.n	800ab1c <_dtoa_r+0x274>
 800ab78:	636f4361 	.word	0x636f4361
 800ab7c:	3fd287a7 	.word	0x3fd287a7
 800ab80:	8b60c8b3 	.word	0x8b60c8b3
 800ab84:	3fc68a28 	.word	0x3fc68a28
 800ab88:	509f79fb 	.word	0x509f79fb
 800ab8c:	3fd34413 	.word	0x3fd34413
 800ab90:	0800c83d 	.word	0x0800c83d
 800ab94:	0800c854 	.word	0x0800c854
 800ab98:	7ff00000 	.word	0x7ff00000
 800ab9c:	0800c839 	.word	0x0800c839
 800aba0:	0800c830 	.word	0x0800c830
 800aba4:	0800c80d 	.word	0x0800c80d
 800aba8:	3ff80000 	.word	0x3ff80000
 800abac:	0800c940 	.word	0x0800c940
 800abb0:	0800c8ac 	.word	0x0800c8ac
 800abb4:	2301      	movs	r3, #1
 800abb6:	9309      	str	r3, [sp, #36]	; 0x24
 800abb8:	e7d7      	b.n	800ab6a <_dtoa_r+0x2c2>
 800abba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abbc:	9301      	str	r3, [sp, #4]
 800abbe:	9304      	str	r3, [sp, #16]
 800abc0:	e7ba      	b.n	800ab38 <_dtoa_r+0x290>
 800abc2:	3101      	adds	r1, #1
 800abc4:	0052      	lsls	r2, r2, #1
 800abc6:	e7ba      	b.n	800ab3e <_dtoa_r+0x296>
 800abc8:	69e3      	ldr	r3, [r4, #28]
 800abca:	9a00      	ldr	r2, [sp, #0]
 800abcc:	601a      	str	r2, [r3, #0]
 800abce:	9b04      	ldr	r3, [sp, #16]
 800abd0:	2b0e      	cmp	r3, #14
 800abd2:	f200 80a8 	bhi.w	800ad26 <_dtoa_r+0x47e>
 800abd6:	2d00      	cmp	r5, #0
 800abd8:	f000 80a5 	beq.w	800ad26 <_dtoa_r+0x47e>
 800abdc:	f1bb 0f00 	cmp.w	fp, #0
 800abe0:	dd38      	ble.n	800ac54 <_dtoa_r+0x3ac>
 800abe2:	4bc0      	ldr	r3, [pc, #768]	; (800aee4 <_dtoa_r+0x63c>)
 800abe4:	f00b 020f 	and.w	r2, fp, #15
 800abe8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800abf0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800abf4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800abf8:	d019      	beq.n	800ac2e <_dtoa_r+0x386>
 800abfa:	4bbb      	ldr	r3, [pc, #748]	; (800aee8 <_dtoa_r+0x640>)
 800abfc:	ec51 0b18 	vmov	r0, r1, d8
 800ac00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ac04:	f7f5 fe0a 	bl	800081c <__aeabi_ddiv>
 800ac08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac0c:	f008 080f 	and.w	r8, r8, #15
 800ac10:	2503      	movs	r5, #3
 800ac12:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800aee8 <_dtoa_r+0x640>
 800ac16:	f1b8 0f00 	cmp.w	r8, #0
 800ac1a:	d10a      	bne.n	800ac32 <_dtoa_r+0x38a>
 800ac1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac20:	4632      	mov	r2, r6
 800ac22:	463b      	mov	r3, r7
 800ac24:	f7f5 fdfa 	bl	800081c <__aeabi_ddiv>
 800ac28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac2c:	e02b      	b.n	800ac86 <_dtoa_r+0x3de>
 800ac2e:	2502      	movs	r5, #2
 800ac30:	e7ef      	b.n	800ac12 <_dtoa_r+0x36a>
 800ac32:	f018 0f01 	tst.w	r8, #1
 800ac36:	d008      	beq.n	800ac4a <_dtoa_r+0x3a2>
 800ac38:	4630      	mov	r0, r6
 800ac3a:	4639      	mov	r1, r7
 800ac3c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ac40:	f7f5 fcc2 	bl	80005c8 <__aeabi_dmul>
 800ac44:	3501      	adds	r5, #1
 800ac46:	4606      	mov	r6, r0
 800ac48:	460f      	mov	r7, r1
 800ac4a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ac4e:	f109 0908 	add.w	r9, r9, #8
 800ac52:	e7e0      	b.n	800ac16 <_dtoa_r+0x36e>
 800ac54:	f000 809f 	beq.w	800ad96 <_dtoa_r+0x4ee>
 800ac58:	f1cb 0600 	rsb	r6, fp, #0
 800ac5c:	4ba1      	ldr	r3, [pc, #644]	; (800aee4 <_dtoa_r+0x63c>)
 800ac5e:	4fa2      	ldr	r7, [pc, #648]	; (800aee8 <_dtoa_r+0x640>)
 800ac60:	f006 020f 	and.w	r2, r6, #15
 800ac64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6c:	ec51 0b18 	vmov	r0, r1, d8
 800ac70:	f7f5 fcaa 	bl	80005c8 <__aeabi_dmul>
 800ac74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac78:	1136      	asrs	r6, r6, #4
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	2502      	movs	r5, #2
 800ac7e:	2e00      	cmp	r6, #0
 800ac80:	d17e      	bne.n	800ad80 <_dtoa_r+0x4d8>
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d1d0      	bne.n	800ac28 <_dtoa_r+0x380>
 800ac86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac88:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	f000 8084 	beq.w	800ad9a <_dtoa_r+0x4f2>
 800ac92:	4b96      	ldr	r3, [pc, #600]	; (800aeec <_dtoa_r+0x644>)
 800ac94:	2200      	movs	r2, #0
 800ac96:	4640      	mov	r0, r8
 800ac98:	4649      	mov	r1, r9
 800ac9a:	f7f5 ff07 	bl	8000aac <__aeabi_dcmplt>
 800ac9e:	2800      	cmp	r0, #0
 800aca0:	d07b      	beq.n	800ad9a <_dtoa_r+0x4f2>
 800aca2:	9b04      	ldr	r3, [sp, #16]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d078      	beq.n	800ad9a <_dtoa_r+0x4f2>
 800aca8:	9b01      	ldr	r3, [sp, #4]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	dd39      	ble.n	800ad22 <_dtoa_r+0x47a>
 800acae:	4b90      	ldr	r3, [pc, #576]	; (800aef0 <_dtoa_r+0x648>)
 800acb0:	2200      	movs	r2, #0
 800acb2:	4640      	mov	r0, r8
 800acb4:	4649      	mov	r1, r9
 800acb6:	f7f5 fc87 	bl	80005c8 <__aeabi_dmul>
 800acba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acbe:	9e01      	ldr	r6, [sp, #4]
 800acc0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800acc4:	3501      	adds	r5, #1
 800acc6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800acca:	4628      	mov	r0, r5
 800accc:	f7f5 fc12 	bl	80004f4 <__aeabi_i2d>
 800acd0:	4642      	mov	r2, r8
 800acd2:	464b      	mov	r3, r9
 800acd4:	f7f5 fc78 	bl	80005c8 <__aeabi_dmul>
 800acd8:	4b86      	ldr	r3, [pc, #536]	; (800aef4 <_dtoa_r+0x64c>)
 800acda:	2200      	movs	r2, #0
 800acdc:	f7f5 fabe 	bl	800025c <__adddf3>
 800ace0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ace4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ace8:	9303      	str	r3, [sp, #12]
 800acea:	2e00      	cmp	r6, #0
 800acec:	d158      	bne.n	800ada0 <_dtoa_r+0x4f8>
 800acee:	4b82      	ldr	r3, [pc, #520]	; (800aef8 <_dtoa_r+0x650>)
 800acf0:	2200      	movs	r2, #0
 800acf2:	4640      	mov	r0, r8
 800acf4:	4649      	mov	r1, r9
 800acf6:	f7f5 faaf 	bl	8000258 <__aeabi_dsub>
 800acfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800acfe:	4680      	mov	r8, r0
 800ad00:	4689      	mov	r9, r1
 800ad02:	f7f5 fef1 	bl	8000ae8 <__aeabi_dcmpgt>
 800ad06:	2800      	cmp	r0, #0
 800ad08:	f040 8296 	bne.w	800b238 <_dtoa_r+0x990>
 800ad0c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ad10:	4640      	mov	r0, r8
 800ad12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad16:	4649      	mov	r1, r9
 800ad18:	f7f5 fec8 	bl	8000aac <__aeabi_dcmplt>
 800ad1c:	2800      	cmp	r0, #0
 800ad1e:	f040 8289 	bne.w	800b234 <_dtoa_r+0x98c>
 800ad22:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ad26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	f2c0 814e 	blt.w	800afca <_dtoa_r+0x722>
 800ad2e:	f1bb 0f0e 	cmp.w	fp, #14
 800ad32:	f300 814a 	bgt.w	800afca <_dtoa_r+0x722>
 800ad36:	4b6b      	ldr	r3, [pc, #428]	; (800aee4 <_dtoa_r+0x63c>)
 800ad38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ad3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ad40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	f280 80dc 	bge.w	800af00 <_dtoa_r+0x658>
 800ad48:	9b04      	ldr	r3, [sp, #16]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	f300 80d8 	bgt.w	800af00 <_dtoa_r+0x658>
 800ad50:	f040 826f 	bne.w	800b232 <_dtoa_r+0x98a>
 800ad54:	4b68      	ldr	r3, [pc, #416]	; (800aef8 <_dtoa_r+0x650>)
 800ad56:	2200      	movs	r2, #0
 800ad58:	4640      	mov	r0, r8
 800ad5a:	4649      	mov	r1, r9
 800ad5c:	f7f5 fc34 	bl	80005c8 <__aeabi_dmul>
 800ad60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad64:	f7f5 feb6 	bl	8000ad4 <__aeabi_dcmpge>
 800ad68:	9e04      	ldr	r6, [sp, #16]
 800ad6a:	4637      	mov	r7, r6
 800ad6c:	2800      	cmp	r0, #0
 800ad6e:	f040 8245 	bne.w	800b1fc <_dtoa_r+0x954>
 800ad72:	9d00      	ldr	r5, [sp, #0]
 800ad74:	2331      	movs	r3, #49	; 0x31
 800ad76:	f805 3b01 	strb.w	r3, [r5], #1
 800ad7a:	f10b 0b01 	add.w	fp, fp, #1
 800ad7e:	e241      	b.n	800b204 <_dtoa_r+0x95c>
 800ad80:	07f2      	lsls	r2, r6, #31
 800ad82:	d505      	bpl.n	800ad90 <_dtoa_r+0x4e8>
 800ad84:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad88:	f7f5 fc1e 	bl	80005c8 <__aeabi_dmul>
 800ad8c:	3501      	adds	r5, #1
 800ad8e:	2301      	movs	r3, #1
 800ad90:	1076      	asrs	r6, r6, #1
 800ad92:	3708      	adds	r7, #8
 800ad94:	e773      	b.n	800ac7e <_dtoa_r+0x3d6>
 800ad96:	2502      	movs	r5, #2
 800ad98:	e775      	b.n	800ac86 <_dtoa_r+0x3de>
 800ad9a:	9e04      	ldr	r6, [sp, #16]
 800ad9c:	465f      	mov	r7, fp
 800ad9e:	e792      	b.n	800acc6 <_dtoa_r+0x41e>
 800ada0:	9900      	ldr	r1, [sp, #0]
 800ada2:	4b50      	ldr	r3, [pc, #320]	; (800aee4 <_dtoa_r+0x63c>)
 800ada4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ada8:	4431      	add	r1, r6
 800adaa:	9102      	str	r1, [sp, #8]
 800adac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800adae:	eeb0 9a47 	vmov.f32	s18, s14
 800adb2:	eef0 9a67 	vmov.f32	s19, s15
 800adb6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800adba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800adbe:	2900      	cmp	r1, #0
 800adc0:	d044      	beq.n	800ae4c <_dtoa_r+0x5a4>
 800adc2:	494e      	ldr	r1, [pc, #312]	; (800aefc <_dtoa_r+0x654>)
 800adc4:	2000      	movs	r0, #0
 800adc6:	f7f5 fd29 	bl	800081c <__aeabi_ddiv>
 800adca:	ec53 2b19 	vmov	r2, r3, d9
 800adce:	f7f5 fa43 	bl	8000258 <__aeabi_dsub>
 800add2:	9d00      	ldr	r5, [sp, #0]
 800add4:	ec41 0b19 	vmov	d9, r0, r1
 800add8:	4649      	mov	r1, r9
 800adda:	4640      	mov	r0, r8
 800addc:	f7f5 fea4 	bl	8000b28 <__aeabi_d2iz>
 800ade0:	4606      	mov	r6, r0
 800ade2:	f7f5 fb87 	bl	80004f4 <__aeabi_i2d>
 800ade6:	4602      	mov	r2, r0
 800ade8:	460b      	mov	r3, r1
 800adea:	4640      	mov	r0, r8
 800adec:	4649      	mov	r1, r9
 800adee:	f7f5 fa33 	bl	8000258 <__aeabi_dsub>
 800adf2:	3630      	adds	r6, #48	; 0x30
 800adf4:	f805 6b01 	strb.w	r6, [r5], #1
 800adf8:	ec53 2b19 	vmov	r2, r3, d9
 800adfc:	4680      	mov	r8, r0
 800adfe:	4689      	mov	r9, r1
 800ae00:	f7f5 fe54 	bl	8000aac <__aeabi_dcmplt>
 800ae04:	2800      	cmp	r0, #0
 800ae06:	d164      	bne.n	800aed2 <_dtoa_r+0x62a>
 800ae08:	4642      	mov	r2, r8
 800ae0a:	464b      	mov	r3, r9
 800ae0c:	4937      	ldr	r1, [pc, #220]	; (800aeec <_dtoa_r+0x644>)
 800ae0e:	2000      	movs	r0, #0
 800ae10:	f7f5 fa22 	bl	8000258 <__aeabi_dsub>
 800ae14:	ec53 2b19 	vmov	r2, r3, d9
 800ae18:	f7f5 fe48 	bl	8000aac <__aeabi_dcmplt>
 800ae1c:	2800      	cmp	r0, #0
 800ae1e:	f040 80b6 	bne.w	800af8e <_dtoa_r+0x6e6>
 800ae22:	9b02      	ldr	r3, [sp, #8]
 800ae24:	429d      	cmp	r5, r3
 800ae26:	f43f af7c 	beq.w	800ad22 <_dtoa_r+0x47a>
 800ae2a:	4b31      	ldr	r3, [pc, #196]	; (800aef0 <_dtoa_r+0x648>)
 800ae2c:	ec51 0b19 	vmov	r0, r1, d9
 800ae30:	2200      	movs	r2, #0
 800ae32:	f7f5 fbc9 	bl	80005c8 <__aeabi_dmul>
 800ae36:	4b2e      	ldr	r3, [pc, #184]	; (800aef0 <_dtoa_r+0x648>)
 800ae38:	ec41 0b19 	vmov	d9, r0, r1
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	4640      	mov	r0, r8
 800ae40:	4649      	mov	r1, r9
 800ae42:	f7f5 fbc1 	bl	80005c8 <__aeabi_dmul>
 800ae46:	4680      	mov	r8, r0
 800ae48:	4689      	mov	r9, r1
 800ae4a:	e7c5      	b.n	800add8 <_dtoa_r+0x530>
 800ae4c:	ec51 0b17 	vmov	r0, r1, d7
 800ae50:	f7f5 fbba 	bl	80005c8 <__aeabi_dmul>
 800ae54:	9b02      	ldr	r3, [sp, #8]
 800ae56:	9d00      	ldr	r5, [sp, #0]
 800ae58:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae5a:	ec41 0b19 	vmov	d9, r0, r1
 800ae5e:	4649      	mov	r1, r9
 800ae60:	4640      	mov	r0, r8
 800ae62:	f7f5 fe61 	bl	8000b28 <__aeabi_d2iz>
 800ae66:	4606      	mov	r6, r0
 800ae68:	f7f5 fb44 	bl	80004f4 <__aeabi_i2d>
 800ae6c:	3630      	adds	r6, #48	; 0x30
 800ae6e:	4602      	mov	r2, r0
 800ae70:	460b      	mov	r3, r1
 800ae72:	4640      	mov	r0, r8
 800ae74:	4649      	mov	r1, r9
 800ae76:	f7f5 f9ef 	bl	8000258 <__aeabi_dsub>
 800ae7a:	f805 6b01 	strb.w	r6, [r5], #1
 800ae7e:	9b02      	ldr	r3, [sp, #8]
 800ae80:	429d      	cmp	r5, r3
 800ae82:	4680      	mov	r8, r0
 800ae84:	4689      	mov	r9, r1
 800ae86:	f04f 0200 	mov.w	r2, #0
 800ae8a:	d124      	bne.n	800aed6 <_dtoa_r+0x62e>
 800ae8c:	4b1b      	ldr	r3, [pc, #108]	; (800aefc <_dtoa_r+0x654>)
 800ae8e:	ec51 0b19 	vmov	r0, r1, d9
 800ae92:	f7f5 f9e3 	bl	800025c <__adddf3>
 800ae96:	4602      	mov	r2, r0
 800ae98:	460b      	mov	r3, r1
 800ae9a:	4640      	mov	r0, r8
 800ae9c:	4649      	mov	r1, r9
 800ae9e:	f7f5 fe23 	bl	8000ae8 <__aeabi_dcmpgt>
 800aea2:	2800      	cmp	r0, #0
 800aea4:	d173      	bne.n	800af8e <_dtoa_r+0x6e6>
 800aea6:	ec53 2b19 	vmov	r2, r3, d9
 800aeaa:	4914      	ldr	r1, [pc, #80]	; (800aefc <_dtoa_r+0x654>)
 800aeac:	2000      	movs	r0, #0
 800aeae:	f7f5 f9d3 	bl	8000258 <__aeabi_dsub>
 800aeb2:	4602      	mov	r2, r0
 800aeb4:	460b      	mov	r3, r1
 800aeb6:	4640      	mov	r0, r8
 800aeb8:	4649      	mov	r1, r9
 800aeba:	f7f5 fdf7 	bl	8000aac <__aeabi_dcmplt>
 800aebe:	2800      	cmp	r0, #0
 800aec0:	f43f af2f 	beq.w	800ad22 <_dtoa_r+0x47a>
 800aec4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800aec6:	1e6b      	subs	r3, r5, #1
 800aec8:	930f      	str	r3, [sp, #60]	; 0x3c
 800aeca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aece:	2b30      	cmp	r3, #48	; 0x30
 800aed0:	d0f8      	beq.n	800aec4 <_dtoa_r+0x61c>
 800aed2:	46bb      	mov	fp, r7
 800aed4:	e04a      	b.n	800af6c <_dtoa_r+0x6c4>
 800aed6:	4b06      	ldr	r3, [pc, #24]	; (800aef0 <_dtoa_r+0x648>)
 800aed8:	f7f5 fb76 	bl	80005c8 <__aeabi_dmul>
 800aedc:	4680      	mov	r8, r0
 800aede:	4689      	mov	r9, r1
 800aee0:	e7bd      	b.n	800ae5e <_dtoa_r+0x5b6>
 800aee2:	bf00      	nop
 800aee4:	0800c940 	.word	0x0800c940
 800aee8:	0800c918 	.word	0x0800c918
 800aeec:	3ff00000 	.word	0x3ff00000
 800aef0:	40240000 	.word	0x40240000
 800aef4:	401c0000 	.word	0x401c0000
 800aef8:	40140000 	.word	0x40140000
 800aefc:	3fe00000 	.word	0x3fe00000
 800af00:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800af04:	9d00      	ldr	r5, [sp, #0]
 800af06:	4642      	mov	r2, r8
 800af08:	464b      	mov	r3, r9
 800af0a:	4630      	mov	r0, r6
 800af0c:	4639      	mov	r1, r7
 800af0e:	f7f5 fc85 	bl	800081c <__aeabi_ddiv>
 800af12:	f7f5 fe09 	bl	8000b28 <__aeabi_d2iz>
 800af16:	9001      	str	r0, [sp, #4]
 800af18:	f7f5 faec 	bl	80004f4 <__aeabi_i2d>
 800af1c:	4642      	mov	r2, r8
 800af1e:	464b      	mov	r3, r9
 800af20:	f7f5 fb52 	bl	80005c8 <__aeabi_dmul>
 800af24:	4602      	mov	r2, r0
 800af26:	460b      	mov	r3, r1
 800af28:	4630      	mov	r0, r6
 800af2a:	4639      	mov	r1, r7
 800af2c:	f7f5 f994 	bl	8000258 <__aeabi_dsub>
 800af30:	9e01      	ldr	r6, [sp, #4]
 800af32:	9f04      	ldr	r7, [sp, #16]
 800af34:	3630      	adds	r6, #48	; 0x30
 800af36:	f805 6b01 	strb.w	r6, [r5], #1
 800af3a:	9e00      	ldr	r6, [sp, #0]
 800af3c:	1bae      	subs	r6, r5, r6
 800af3e:	42b7      	cmp	r7, r6
 800af40:	4602      	mov	r2, r0
 800af42:	460b      	mov	r3, r1
 800af44:	d134      	bne.n	800afb0 <_dtoa_r+0x708>
 800af46:	f7f5 f989 	bl	800025c <__adddf3>
 800af4a:	4642      	mov	r2, r8
 800af4c:	464b      	mov	r3, r9
 800af4e:	4606      	mov	r6, r0
 800af50:	460f      	mov	r7, r1
 800af52:	f7f5 fdc9 	bl	8000ae8 <__aeabi_dcmpgt>
 800af56:	b9c8      	cbnz	r0, 800af8c <_dtoa_r+0x6e4>
 800af58:	4642      	mov	r2, r8
 800af5a:	464b      	mov	r3, r9
 800af5c:	4630      	mov	r0, r6
 800af5e:	4639      	mov	r1, r7
 800af60:	f7f5 fd9a 	bl	8000a98 <__aeabi_dcmpeq>
 800af64:	b110      	cbz	r0, 800af6c <_dtoa_r+0x6c4>
 800af66:	9b01      	ldr	r3, [sp, #4]
 800af68:	07db      	lsls	r3, r3, #31
 800af6a:	d40f      	bmi.n	800af8c <_dtoa_r+0x6e4>
 800af6c:	4651      	mov	r1, sl
 800af6e:	4620      	mov	r0, r4
 800af70:	f000 fbcc 	bl	800b70c <_Bfree>
 800af74:	2300      	movs	r3, #0
 800af76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af78:	702b      	strb	r3, [r5, #0]
 800af7a:	f10b 0301 	add.w	r3, fp, #1
 800af7e:	6013      	str	r3, [r2, #0]
 800af80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af82:	2b00      	cmp	r3, #0
 800af84:	f43f ace2 	beq.w	800a94c <_dtoa_r+0xa4>
 800af88:	601d      	str	r5, [r3, #0]
 800af8a:	e4df      	b.n	800a94c <_dtoa_r+0xa4>
 800af8c:	465f      	mov	r7, fp
 800af8e:	462b      	mov	r3, r5
 800af90:	461d      	mov	r5, r3
 800af92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af96:	2a39      	cmp	r2, #57	; 0x39
 800af98:	d106      	bne.n	800afa8 <_dtoa_r+0x700>
 800af9a:	9a00      	ldr	r2, [sp, #0]
 800af9c:	429a      	cmp	r2, r3
 800af9e:	d1f7      	bne.n	800af90 <_dtoa_r+0x6e8>
 800afa0:	9900      	ldr	r1, [sp, #0]
 800afa2:	2230      	movs	r2, #48	; 0x30
 800afa4:	3701      	adds	r7, #1
 800afa6:	700a      	strb	r2, [r1, #0]
 800afa8:	781a      	ldrb	r2, [r3, #0]
 800afaa:	3201      	adds	r2, #1
 800afac:	701a      	strb	r2, [r3, #0]
 800afae:	e790      	b.n	800aed2 <_dtoa_r+0x62a>
 800afb0:	4ba3      	ldr	r3, [pc, #652]	; (800b240 <_dtoa_r+0x998>)
 800afb2:	2200      	movs	r2, #0
 800afb4:	f7f5 fb08 	bl	80005c8 <__aeabi_dmul>
 800afb8:	2200      	movs	r2, #0
 800afba:	2300      	movs	r3, #0
 800afbc:	4606      	mov	r6, r0
 800afbe:	460f      	mov	r7, r1
 800afc0:	f7f5 fd6a 	bl	8000a98 <__aeabi_dcmpeq>
 800afc4:	2800      	cmp	r0, #0
 800afc6:	d09e      	beq.n	800af06 <_dtoa_r+0x65e>
 800afc8:	e7d0      	b.n	800af6c <_dtoa_r+0x6c4>
 800afca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afcc:	2a00      	cmp	r2, #0
 800afce:	f000 80ca 	beq.w	800b166 <_dtoa_r+0x8be>
 800afd2:	9a07      	ldr	r2, [sp, #28]
 800afd4:	2a01      	cmp	r2, #1
 800afd6:	f300 80ad 	bgt.w	800b134 <_dtoa_r+0x88c>
 800afda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800afdc:	2a00      	cmp	r2, #0
 800afde:	f000 80a5 	beq.w	800b12c <_dtoa_r+0x884>
 800afe2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800afe6:	9e08      	ldr	r6, [sp, #32]
 800afe8:	9d05      	ldr	r5, [sp, #20]
 800afea:	9a05      	ldr	r2, [sp, #20]
 800afec:	441a      	add	r2, r3
 800afee:	9205      	str	r2, [sp, #20]
 800aff0:	9a06      	ldr	r2, [sp, #24]
 800aff2:	2101      	movs	r1, #1
 800aff4:	441a      	add	r2, r3
 800aff6:	4620      	mov	r0, r4
 800aff8:	9206      	str	r2, [sp, #24]
 800affa:	f000 fc3d 	bl	800b878 <__i2b>
 800affe:	4607      	mov	r7, r0
 800b000:	b165      	cbz	r5, 800b01c <_dtoa_r+0x774>
 800b002:	9b06      	ldr	r3, [sp, #24]
 800b004:	2b00      	cmp	r3, #0
 800b006:	dd09      	ble.n	800b01c <_dtoa_r+0x774>
 800b008:	42ab      	cmp	r3, r5
 800b00a:	9a05      	ldr	r2, [sp, #20]
 800b00c:	bfa8      	it	ge
 800b00e:	462b      	movge	r3, r5
 800b010:	1ad2      	subs	r2, r2, r3
 800b012:	9205      	str	r2, [sp, #20]
 800b014:	9a06      	ldr	r2, [sp, #24]
 800b016:	1aed      	subs	r5, r5, r3
 800b018:	1ad3      	subs	r3, r2, r3
 800b01a:	9306      	str	r3, [sp, #24]
 800b01c:	9b08      	ldr	r3, [sp, #32]
 800b01e:	b1f3      	cbz	r3, 800b05e <_dtoa_r+0x7b6>
 800b020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b022:	2b00      	cmp	r3, #0
 800b024:	f000 80a3 	beq.w	800b16e <_dtoa_r+0x8c6>
 800b028:	2e00      	cmp	r6, #0
 800b02a:	dd10      	ble.n	800b04e <_dtoa_r+0x7a6>
 800b02c:	4639      	mov	r1, r7
 800b02e:	4632      	mov	r2, r6
 800b030:	4620      	mov	r0, r4
 800b032:	f000 fce1 	bl	800b9f8 <__pow5mult>
 800b036:	4652      	mov	r2, sl
 800b038:	4601      	mov	r1, r0
 800b03a:	4607      	mov	r7, r0
 800b03c:	4620      	mov	r0, r4
 800b03e:	f000 fc31 	bl	800b8a4 <__multiply>
 800b042:	4651      	mov	r1, sl
 800b044:	4680      	mov	r8, r0
 800b046:	4620      	mov	r0, r4
 800b048:	f000 fb60 	bl	800b70c <_Bfree>
 800b04c:	46c2      	mov	sl, r8
 800b04e:	9b08      	ldr	r3, [sp, #32]
 800b050:	1b9a      	subs	r2, r3, r6
 800b052:	d004      	beq.n	800b05e <_dtoa_r+0x7b6>
 800b054:	4651      	mov	r1, sl
 800b056:	4620      	mov	r0, r4
 800b058:	f000 fcce 	bl	800b9f8 <__pow5mult>
 800b05c:	4682      	mov	sl, r0
 800b05e:	2101      	movs	r1, #1
 800b060:	4620      	mov	r0, r4
 800b062:	f000 fc09 	bl	800b878 <__i2b>
 800b066:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b068:	2b00      	cmp	r3, #0
 800b06a:	4606      	mov	r6, r0
 800b06c:	f340 8081 	ble.w	800b172 <_dtoa_r+0x8ca>
 800b070:	461a      	mov	r2, r3
 800b072:	4601      	mov	r1, r0
 800b074:	4620      	mov	r0, r4
 800b076:	f000 fcbf 	bl	800b9f8 <__pow5mult>
 800b07a:	9b07      	ldr	r3, [sp, #28]
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	4606      	mov	r6, r0
 800b080:	dd7a      	ble.n	800b178 <_dtoa_r+0x8d0>
 800b082:	f04f 0800 	mov.w	r8, #0
 800b086:	6933      	ldr	r3, [r6, #16]
 800b088:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b08c:	6918      	ldr	r0, [r3, #16]
 800b08e:	f000 fba5 	bl	800b7dc <__hi0bits>
 800b092:	f1c0 0020 	rsb	r0, r0, #32
 800b096:	9b06      	ldr	r3, [sp, #24]
 800b098:	4418      	add	r0, r3
 800b09a:	f010 001f 	ands.w	r0, r0, #31
 800b09e:	f000 8094 	beq.w	800b1ca <_dtoa_r+0x922>
 800b0a2:	f1c0 0320 	rsb	r3, r0, #32
 800b0a6:	2b04      	cmp	r3, #4
 800b0a8:	f340 8085 	ble.w	800b1b6 <_dtoa_r+0x90e>
 800b0ac:	9b05      	ldr	r3, [sp, #20]
 800b0ae:	f1c0 001c 	rsb	r0, r0, #28
 800b0b2:	4403      	add	r3, r0
 800b0b4:	9305      	str	r3, [sp, #20]
 800b0b6:	9b06      	ldr	r3, [sp, #24]
 800b0b8:	4403      	add	r3, r0
 800b0ba:	4405      	add	r5, r0
 800b0bc:	9306      	str	r3, [sp, #24]
 800b0be:	9b05      	ldr	r3, [sp, #20]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	dd05      	ble.n	800b0d0 <_dtoa_r+0x828>
 800b0c4:	4651      	mov	r1, sl
 800b0c6:	461a      	mov	r2, r3
 800b0c8:	4620      	mov	r0, r4
 800b0ca:	f000 fcef 	bl	800baac <__lshift>
 800b0ce:	4682      	mov	sl, r0
 800b0d0:	9b06      	ldr	r3, [sp, #24]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	dd05      	ble.n	800b0e2 <_dtoa_r+0x83a>
 800b0d6:	4631      	mov	r1, r6
 800b0d8:	461a      	mov	r2, r3
 800b0da:	4620      	mov	r0, r4
 800b0dc:	f000 fce6 	bl	800baac <__lshift>
 800b0e0:	4606      	mov	r6, r0
 800b0e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d072      	beq.n	800b1ce <_dtoa_r+0x926>
 800b0e8:	4631      	mov	r1, r6
 800b0ea:	4650      	mov	r0, sl
 800b0ec:	f000 fd4a 	bl	800bb84 <__mcmp>
 800b0f0:	2800      	cmp	r0, #0
 800b0f2:	da6c      	bge.n	800b1ce <_dtoa_r+0x926>
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	4651      	mov	r1, sl
 800b0f8:	220a      	movs	r2, #10
 800b0fa:	4620      	mov	r0, r4
 800b0fc:	f000 fb28 	bl	800b750 <__multadd>
 800b100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b102:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b106:	4682      	mov	sl, r0
 800b108:	2b00      	cmp	r3, #0
 800b10a:	f000 81b0 	beq.w	800b46e <_dtoa_r+0xbc6>
 800b10e:	2300      	movs	r3, #0
 800b110:	4639      	mov	r1, r7
 800b112:	220a      	movs	r2, #10
 800b114:	4620      	mov	r0, r4
 800b116:	f000 fb1b 	bl	800b750 <__multadd>
 800b11a:	9b01      	ldr	r3, [sp, #4]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	4607      	mov	r7, r0
 800b120:	f300 8096 	bgt.w	800b250 <_dtoa_r+0x9a8>
 800b124:	9b07      	ldr	r3, [sp, #28]
 800b126:	2b02      	cmp	r3, #2
 800b128:	dc59      	bgt.n	800b1de <_dtoa_r+0x936>
 800b12a:	e091      	b.n	800b250 <_dtoa_r+0x9a8>
 800b12c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b12e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b132:	e758      	b.n	800afe6 <_dtoa_r+0x73e>
 800b134:	9b04      	ldr	r3, [sp, #16]
 800b136:	1e5e      	subs	r6, r3, #1
 800b138:	9b08      	ldr	r3, [sp, #32]
 800b13a:	42b3      	cmp	r3, r6
 800b13c:	bfbf      	itttt	lt
 800b13e:	9b08      	ldrlt	r3, [sp, #32]
 800b140:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b142:	9608      	strlt	r6, [sp, #32]
 800b144:	1af3      	sublt	r3, r6, r3
 800b146:	bfb4      	ite	lt
 800b148:	18d2      	addlt	r2, r2, r3
 800b14a:	1b9e      	subge	r6, r3, r6
 800b14c:	9b04      	ldr	r3, [sp, #16]
 800b14e:	bfbc      	itt	lt
 800b150:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b152:	2600      	movlt	r6, #0
 800b154:	2b00      	cmp	r3, #0
 800b156:	bfb7      	itett	lt
 800b158:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b15c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b160:	1a9d      	sublt	r5, r3, r2
 800b162:	2300      	movlt	r3, #0
 800b164:	e741      	b.n	800afea <_dtoa_r+0x742>
 800b166:	9e08      	ldr	r6, [sp, #32]
 800b168:	9d05      	ldr	r5, [sp, #20]
 800b16a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b16c:	e748      	b.n	800b000 <_dtoa_r+0x758>
 800b16e:	9a08      	ldr	r2, [sp, #32]
 800b170:	e770      	b.n	800b054 <_dtoa_r+0x7ac>
 800b172:	9b07      	ldr	r3, [sp, #28]
 800b174:	2b01      	cmp	r3, #1
 800b176:	dc19      	bgt.n	800b1ac <_dtoa_r+0x904>
 800b178:	9b02      	ldr	r3, [sp, #8]
 800b17a:	b9bb      	cbnz	r3, 800b1ac <_dtoa_r+0x904>
 800b17c:	9b03      	ldr	r3, [sp, #12]
 800b17e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b182:	b99b      	cbnz	r3, 800b1ac <_dtoa_r+0x904>
 800b184:	9b03      	ldr	r3, [sp, #12]
 800b186:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b18a:	0d1b      	lsrs	r3, r3, #20
 800b18c:	051b      	lsls	r3, r3, #20
 800b18e:	b183      	cbz	r3, 800b1b2 <_dtoa_r+0x90a>
 800b190:	9b05      	ldr	r3, [sp, #20]
 800b192:	3301      	adds	r3, #1
 800b194:	9305      	str	r3, [sp, #20]
 800b196:	9b06      	ldr	r3, [sp, #24]
 800b198:	3301      	adds	r3, #1
 800b19a:	9306      	str	r3, [sp, #24]
 800b19c:	f04f 0801 	mov.w	r8, #1
 800b1a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	f47f af6f 	bne.w	800b086 <_dtoa_r+0x7de>
 800b1a8:	2001      	movs	r0, #1
 800b1aa:	e774      	b.n	800b096 <_dtoa_r+0x7ee>
 800b1ac:	f04f 0800 	mov.w	r8, #0
 800b1b0:	e7f6      	b.n	800b1a0 <_dtoa_r+0x8f8>
 800b1b2:	4698      	mov	r8, r3
 800b1b4:	e7f4      	b.n	800b1a0 <_dtoa_r+0x8f8>
 800b1b6:	d082      	beq.n	800b0be <_dtoa_r+0x816>
 800b1b8:	9a05      	ldr	r2, [sp, #20]
 800b1ba:	331c      	adds	r3, #28
 800b1bc:	441a      	add	r2, r3
 800b1be:	9205      	str	r2, [sp, #20]
 800b1c0:	9a06      	ldr	r2, [sp, #24]
 800b1c2:	441a      	add	r2, r3
 800b1c4:	441d      	add	r5, r3
 800b1c6:	9206      	str	r2, [sp, #24]
 800b1c8:	e779      	b.n	800b0be <_dtoa_r+0x816>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	e7f4      	b.n	800b1b8 <_dtoa_r+0x910>
 800b1ce:	9b04      	ldr	r3, [sp, #16]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	dc37      	bgt.n	800b244 <_dtoa_r+0x99c>
 800b1d4:	9b07      	ldr	r3, [sp, #28]
 800b1d6:	2b02      	cmp	r3, #2
 800b1d8:	dd34      	ble.n	800b244 <_dtoa_r+0x99c>
 800b1da:	9b04      	ldr	r3, [sp, #16]
 800b1dc:	9301      	str	r3, [sp, #4]
 800b1de:	9b01      	ldr	r3, [sp, #4]
 800b1e0:	b963      	cbnz	r3, 800b1fc <_dtoa_r+0x954>
 800b1e2:	4631      	mov	r1, r6
 800b1e4:	2205      	movs	r2, #5
 800b1e6:	4620      	mov	r0, r4
 800b1e8:	f000 fab2 	bl	800b750 <__multadd>
 800b1ec:	4601      	mov	r1, r0
 800b1ee:	4606      	mov	r6, r0
 800b1f0:	4650      	mov	r0, sl
 800b1f2:	f000 fcc7 	bl	800bb84 <__mcmp>
 800b1f6:	2800      	cmp	r0, #0
 800b1f8:	f73f adbb 	bgt.w	800ad72 <_dtoa_r+0x4ca>
 800b1fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1fe:	9d00      	ldr	r5, [sp, #0]
 800b200:	ea6f 0b03 	mvn.w	fp, r3
 800b204:	f04f 0800 	mov.w	r8, #0
 800b208:	4631      	mov	r1, r6
 800b20a:	4620      	mov	r0, r4
 800b20c:	f000 fa7e 	bl	800b70c <_Bfree>
 800b210:	2f00      	cmp	r7, #0
 800b212:	f43f aeab 	beq.w	800af6c <_dtoa_r+0x6c4>
 800b216:	f1b8 0f00 	cmp.w	r8, #0
 800b21a:	d005      	beq.n	800b228 <_dtoa_r+0x980>
 800b21c:	45b8      	cmp	r8, r7
 800b21e:	d003      	beq.n	800b228 <_dtoa_r+0x980>
 800b220:	4641      	mov	r1, r8
 800b222:	4620      	mov	r0, r4
 800b224:	f000 fa72 	bl	800b70c <_Bfree>
 800b228:	4639      	mov	r1, r7
 800b22a:	4620      	mov	r0, r4
 800b22c:	f000 fa6e 	bl	800b70c <_Bfree>
 800b230:	e69c      	b.n	800af6c <_dtoa_r+0x6c4>
 800b232:	2600      	movs	r6, #0
 800b234:	4637      	mov	r7, r6
 800b236:	e7e1      	b.n	800b1fc <_dtoa_r+0x954>
 800b238:	46bb      	mov	fp, r7
 800b23a:	4637      	mov	r7, r6
 800b23c:	e599      	b.n	800ad72 <_dtoa_r+0x4ca>
 800b23e:	bf00      	nop
 800b240:	40240000 	.word	0x40240000
 800b244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b246:	2b00      	cmp	r3, #0
 800b248:	f000 80c8 	beq.w	800b3dc <_dtoa_r+0xb34>
 800b24c:	9b04      	ldr	r3, [sp, #16]
 800b24e:	9301      	str	r3, [sp, #4]
 800b250:	2d00      	cmp	r5, #0
 800b252:	dd05      	ble.n	800b260 <_dtoa_r+0x9b8>
 800b254:	4639      	mov	r1, r7
 800b256:	462a      	mov	r2, r5
 800b258:	4620      	mov	r0, r4
 800b25a:	f000 fc27 	bl	800baac <__lshift>
 800b25e:	4607      	mov	r7, r0
 800b260:	f1b8 0f00 	cmp.w	r8, #0
 800b264:	d05b      	beq.n	800b31e <_dtoa_r+0xa76>
 800b266:	6879      	ldr	r1, [r7, #4]
 800b268:	4620      	mov	r0, r4
 800b26a:	f000 fa0f 	bl	800b68c <_Balloc>
 800b26e:	4605      	mov	r5, r0
 800b270:	b928      	cbnz	r0, 800b27e <_dtoa_r+0x9d6>
 800b272:	4b83      	ldr	r3, [pc, #524]	; (800b480 <_dtoa_r+0xbd8>)
 800b274:	4602      	mov	r2, r0
 800b276:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b27a:	f7ff bb2e 	b.w	800a8da <_dtoa_r+0x32>
 800b27e:	693a      	ldr	r2, [r7, #16]
 800b280:	3202      	adds	r2, #2
 800b282:	0092      	lsls	r2, r2, #2
 800b284:	f107 010c 	add.w	r1, r7, #12
 800b288:	300c      	adds	r0, #12
 800b28a:	f7ff fa76 	bl	800a77a <memcpy>
 800b28e:	2201      	movs	r2, #1
 800b290:	4629      	mov	r1, r5
 800b292:	4620      	mov	r0, r4
 800b294:	f000 fc0a 	bl	800baac <__lshift>
 800b298:	9b00      	ldr	r3, [sp, #0]
 800b29a:	3301      	adds	r3, #1
 800b29c:	9304      	str	r3, [sp, #16]
 800b29e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2a2:	4413      	add	r3, r2
 800b2a4:	9308      	str	r3, [sp, #32]
 800b2a6:	9b02      	ldr	r3, [sp, #8]
 800b2a8:	f003 0301 	and.w	r3, r3, #1
 800b2ac:	46b8      	mov	r8, r7
 800b2ae:	9306      	str	r3, [sp, #24]
 800b2b0:	4607      	mov	r7, r0
 800b2b2:	9b04      	ldr	r3, [sp, #16]
 800b2b4:	4631      	mov	r1, r6
 800b2b6:	3b01      	subs	r3, #1
 800b2b8:	4650      	mov	r0, sl
 800b2ba:	9301      	str	r3, [sp, #4]
 800b2bc:	f7ff fa6b 	bl	800a796 <quorem>
 800b2c0:	4641      	mov	r1, r8
 800b2c2:	9002      	str	r0, [sp, #8]
 800b2c4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b2c8:	4650      	mov	r0, sl
 800b2ca:	f000 fc5b 	bl	800bb84 <__mcmp>
 800b2ce:	463a      	mov	r2, r7
 800b2d0:	9005      	str	r0, [sp, #20]
 800b2d2:	4631      	mov	r1, r6
 800b2d4:	4620      	mov	r0, r4
 800b2d6:	f000 fc71 	bl	800bbbc <__mdiff>
 800b2da:	68c2      	ldr	r2, [r0, #12]
 800b2dc:	4605      	mov	r5, r0
 800b2de:	bb02      	cbnz	r2, 800b322 <_dtoa_r+0xa7a>
 800b2e0:	4601      	mov	r1, r0
 800b2e2:	4650      	mov	r0, sl
 800b2e4:	f000 fc4e 	bl	800bb84 <__mcmp>
 800b2e8:	4602      	mov	r2, r0
 800b2ea:	4629      	mov	r1, r5
 800b2ec:	4620      	mov	r0, r4
 800b2ee:	9209      	str	r2, [sp, #36]	; 0x24
 800b2f0:	f000 fa0c 	bl	800b70c <_Bfree>
 800b2f4:	9b07      	ldr	r3, [sp, #28]
 800b2f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2f8:	9d04      	ldr	r5, [sp, #16]
 800b2fa:	ea43 0102 	orr.w	r1, r3, r2
 800b2fe:	9b06      	ldr	r3, [sp, #24]
 800b300:	4319      	orrs	r1, r3
 800b302:	d110      	bne.n	800b326 <_dtoa_r+0xa7e>
 800b304:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b308:	d029      	beq.n	800b35e <_dtoa_r+0xab6>
 800b30a:	9b05      	ldr	r3, [sp, #20]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	dd02      	ble.n	800b316 <_dtoa_r+0xa6e>
 800b310:	9b02      	ldr	r3, [sp, #8]
 800b312:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b316:	9b01      	ldr	r3, [sp, #4]
 800b318:	f883 9000 	strb.w	r9, [r3]
 800b31c:	e774      	b.n	800b208 <_dtoa_r+0x960>
 800b31e:	4638      	mov	r0, r7
 800b320:	e7ba      	b.n	800b298 <_dtoa_r+0x9f0>
 800b322:	2201      	movs	r2, #1
 800b324:	e7e1      	b.n	800b2ea <_dtoa_r+0xa42>
 800b326:	9b05      	ldr	r3, [sp, #20]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	db04      	blt.n	800b336 <_dtoa_r+0xa8e>
 800b32c:	9907      	ldr	r1, [sp, #28]
 800b32e:	430b      	orrs	r3, r1
 800b330:	9906      	ldr	r1, [sp, #24]
 800b332:	430b      	orrs	r3, r1
 800b334:	d120      	bne.n	800b378 <_dtoa_r+0xad0>
 800b336:	2a00      	cmp	r2, #0
 800b338:	dded      	ble.n	800b316 <_dtoa_r+0xa6e>
 800b33a:	4651      	mov	r1, sl
 800b33c:	2201      	movs	r2, #1
 800b33e:	4620      	mov	r0, r4
 800b340:	f000 fbb4 	bl	800baac <__lshift>
 800b344:	4631      	mov	r1, r6
 800b346:	4682      	mov	sl, r0
 800b348:	f000 fc1c 	bl	800bb84 <__mcmp>
 800b34c:	2800      	cmp	r0, #0
 800b34e:	dc03      	bgt.n	800b358 <_dtoa_r+0xab0>
 800b350:	d1e1      	bne.n	800b316 <_dtoa_r+0xa6e>
 800b352:	f019 0f01 	tst.w	r9, #1
 800b356:	d0de      	beq.n	800b316 <_dtoa_r+0xa6e>
 800b358:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b35c:	d1d8      	bne.n	800b310 <_dtoa_r+0xa68>
 800b35e:	9a01      	ldr	r2, [sp, #4]
 800b360:	2339      	movs	r3, #57	; 0x39
 800b362:	7013      	strb	r3, [r2, #0]
 800b364:	462b      	mov	r3, r5
 800b366:	461d      	mov	r5, r3
 800b368:	3b01      	subs	r3, #1
 800b36a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b36e:	2a39      	cmp	r2, #57	; 0x39
 800b370:	d06c      	beq.n	800b44c <_dtoa_r+0xba4>
 800b372:	3201      	adds	r2, #1
 800b374:	701a      	strb	r2, [r3, #0]
 800b376:	e747      	b.n	800b208 <_dtoa_r+0x960>
 800b378:	2a00      	cmp	r2, #0
 800b37a:	dd07      	ble.n	800b38c <_dtoa_r+0xae4>
 800b37c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b380:	d0ed      	beq.n	800b35e <_dtoa_r+0xab6>
 800b382:	9a01      	ldr	r2, [sp, #4]
 800b384:	f109 0301 	add.w	r3, r9, #1
 800b388:	7013      	strb	r3, [r2, #0]
 800b38a:	e73d      	b.n	800b208 <_dtoa_r+0x960>
 800b38c:	9b04      	ldr	r3, [sp, #16]
 800b38e:	9a08      	ldr	r2, [sp, #32]
 800b390:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b394:	4293      	cmp	r3, r2
 800b396:	d043      	beq.n	800b420 <_dtoa_r+0xb78>
 800b398:	4651      	mov	r1, sl
 800b39a:	2300      	movs	r3, #0
 800b39c:	220a      	movs	r2, #10
 800b39e:	4620      	mov	r0, r4
 800b3a0:	f000 f9d6 	bl	800b750 <__multadd>
 800b3a4:	45b8      	cmp	r8, r7
 800b3a6:	4682      	mov	sl, r0
 800b3a8:	f04f 0300 	mov.w	r3, #0
 800b3ac:	f04f 020a 	mov.w	r2, #10
 800b3b0:	4641      	mov	r1, r8
 800b3b2:	4620      	mov	r0, r4
 800b3b4:	d107      	bne.n	800b3c6 <_dtoa_r+0xb1e>
 800b3b6:	f000 f9cb 	bl	800b750 <__multadd>
 800b3ba:	4680      	mov	r8, r0
 800b3bc:	4607      	mov	r7, r0
 800b3be:	9b04      	ldr	r3, [sp, #16]
 800b3c0:	3301      	adds	r3, #1
 800b3c2:	9304      	str	r3, [sp, #16]
 800b3c4:	e775      	b.n	800b2b2 <_dtoa_r+0xa0a>
 800b3c6:	f000 f9c3 	bl	800b750 <__multadd>
 800b3ca:	4639      	mov	r1, r7
 800b3cc:	4680      	mov	r8, r0
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	220a      	movs	r2, #10
 800b3d2:	4620      	mov	r0, r4
 800b3d4:	f000 f9bc 	bl	800b750 <__multadd>
 800b3d8:	4607      	mov	r7, r0
 800b3da:	e7f0      	b.n	800b3be <_dtoa_r+0xb16>
 800b3dc:	9b04      	ldr	r3, [sp, #16]
 800b3de:	9301      	str	r3, [sp, #4]
 800b3e0:	9d00      	ldr	r5, [sp, #0]
 800b3e2:	4631      	mov	r1, r6
 800b3e4:	4650      	mov	r0, sl
 800b3e6:	f7ff f9d6 	bl	800a796 <quorem>
 800b3ea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b3ee:	9b00      	ldr	r3, [sp, #0]
 800b3f0:	f805 9b01 	strb.w	r9, [r5], #1
 800b3f4:	1aea      	subs	r2, r5, r3
 800b3f6:	9b01      	ldr	r3, [sp, #4]
 800b3f8:	4293      	cmp	r3, r2
 800b3fa:	dd07      	ble.n	800b40c <_dtoa_r+0xb64>
 800b3fc:	4651      	mov	r1, sl
 800b3fe:	2300      	movs	r3, #0
 800b400:	220a      	movs	r2, #10
 800b402:	4620      	mov	r0, r4
 800b404:	f000 f9a4 	bl	800b750 <__multadd>
 800b408:	4682      	mov	sl, r0
 800b40a:	e7ea      	b.n	800b3e2 <_dtoa_r+0xb3a>
 800b40c:	9b01      	ldr	r3, [sp, #4]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	bfc8      	it	gt
 800b412:	461d      	movgt	r5, r3
 800b414:	9b00      	ldr	r3, [sp, #0]
 800b416:	bfd8      	it	le
 800b418:	2501      	movle	r5, #1
 800b41a:	441d      	add	r5, r3
 800b41c:	f04f 0800 	mov.w	r8, #0
 800b420:	4651      	mov	r1, sl
 800b422:	2201      	movs	r2, #1
 800b424:	4620      	mov	r0, r4
 800b426:	f000 fb41 	bl	800baac <__lshift>
 800b42a:	4631      	mov	r1, r6
 800b42c:	4682      	mov	sl, r0
 800b42e:	f000 fba9 	bl	800bb84 <__mcmp>
 800b432:	2800      	cmp	r0, #0
 800b434:	dc96      	bgt.n	800b364 <_dtoa_r+0xabc>
 800b436:	d102      	bne.n	800b43e <_dtoa_r+0xb96>
 800b438:	f019 0f01 	tst.w	r9, #1
 800b43c:	d192      	bne.n	800b364 <_dtoa_r+0xabc>
 800b43e:	462b      	mov	r3, r5
 800b440:	461d      	mov	r5, r3
 800b442:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b446:	2a30      	cmp	r2, #48	; 0x30
 800b448:	d0fa      	beq.n	800b440 <_dtoa_r+0xb98>
 800b44a:	e6dd      	b.n	800b208 <_dtoa_r+0x960>
 800b44c:	9a00      	ldr	r2, [sp, #0]
 800b44e:	429a      	cmp	r2, r3
 800b450:	d189      	bne.n	800b366 <_dtoa_r+0xabe>
 800b452:	f10b 0b01 	add.w	fp, fp, #1
 800b456:	2331      	movs	r3, #49	; 0x31
 800b458:	e796      	b.n	800b388 <_dtoa_r+0xae0>
 800b45a:	4b0a      	ldr	r3, [pc, #40]	; (800b484 <_dtoa_r+0xbdc>)
 800b45c:	f7ff ba99 	b.w	800a992 <_dtoa_r+0xea>
 800b460:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b462:	2b00      	cmp	r3, #0
 800b464:	f47f aa6d 	bne.w	800a942 <_dtoa_r+0x9a>
 800b468:	4b07      	ldr	r3, [pc, #28]	; (800b488 <_dtoa_r+0xbe0>)
 800b46a:	f7ff ba92 	b.w	800a992 <_dtoa_r+0xea>
 800b46e:	9b01      	ldr	r3, [sp, #4]
 800b470:	2b00      	cmp	r3, #0
 800b472:	dcb5      	bgt.n	800b3e0 <_dtoa_r+0xb38>
 800b474:	9b07      	ldr	r3, [sp, #28]
 800b476:	2b02      	cmp	r3, #2
 800b478:	f73f aeb1 	bgt.w	800b1de <_dtoa_r+0x936>
 800b47c:	e7b0      	b.n	800b3e0 <_dtoa_r+0xb38>
 800b47e:	bf00      	nop
 800b480:	0800c8ac 	.word	0x0800c8ac
 800b484:	0800c80c 	.word	0x0800c80c
 800b488:	0800c830 	.word	0x0800c830

0800b48c <_free_r>:
 800b48c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b48e:	2900      	cmp	r1, #0
 800b490:	d044      	beq.n	800b51c <_free_r+0x90>
 800b492:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b496:	9001      	str	r0, [sp, #4]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	f1a1 0404 	sub.w	r4, r1, #4
 800b49e:	bfb8      	it	lt
 800b4a0:	18e4      	addlt	r4, r4, r3
 800b4a2:	f000 f8e7 	bl	800b674 <__malloc_lock>
 800b4a6:	4a1e      	ldr	r2, [pc, #120]	; (800b520 <_free_r+0x94>)
 800b4a8:	9801      	ldr	r0, [sp, #4]
 800b4aa:	6813      	ldr	r3, [r2, #0]
 800b4ac:	b933      	cbnz	r3, 800b4bc <_free_r+0x30>
 800b4ae:	6063      	str	r3, [r4, #4]
 800b4b0:	6014      	str	r4, [r2, #0]
 800b4b2:	b003      	add	sp, #12
 800b4b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b4b8:	f000 b8e2 	b.w	800b680 <__malloc_unlock>
 800b4bc:	42a3      	cmp	r3, r4
 800b4be:	d908      	bls.n	800b4d2 <_free_r+0x46>
 800b4c0:	6825      	ldr	r5, [r4, #0]
 800b4c2:	1961      	adds	r1, r4, r5
 800b4c4:	428b      	cmp	r3, r1
 800b4c6:	bf01      	itttt	eq
 800b4c8:	6819      	ldreq	r1, [r3, #0]
 800b4ca:	685b      	ldreq	r3, [r3, #4]
 800b4cc:	1949      	addeq	r1, r1, r5
 800b4ce:	6021      	streq	r1, [r4, #0]
 800b4d0:	e7ed      	b.n	800b4ae <_free_r+0x22>
 800b4d2:	461a      	mov	r2, r3
 800b4d4:	685b      	ldr	r3, [r3, #4]
 800b4d6:	b10b      	cbz	r3, 800b4dc <_free_r+0x50>
 800b4d8:	42a3      	cmp	r3, r4
 800b4da:	d9fa      	bls.n	800b4d2 <_free_r+0x46>
 800b4dc:	6811      	ldr	r1, [r2, #0]
 800b4de:	1855      	adds	r5, r2, r1
 800b4e0:	42a5      	cmp	r5, r4
 800b4e2:	d10b      	bne.n	800b4fc <_free_r+0x70>
 800b4e4:	6824      	ldr	r4, [r4, #0]
 800b4e6:	4421      	add	r1, r4
 800b4e8:	1854      	adds	r4, r2, r1
 800b4ea:	42a3      	cmp	r3, r4
 800b4ec:	6011      	str	r1, [r2, #0]
 800b4ee:	d1e0      	bne.n	800b4b2 <_free_r+0x26>
 800b4f0:	681c      	ldr	r4, [r3, #0]
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	6053      	str	r3, [r2, #4]
 800b4f6:	440c      	add	r4, r1
 800b4f8:	6014      	str	r4, [r2, #0]
 800b4fa:	e7da      	b.n	800b4b2 <_free_r+0x26>
 800b4fc:	d902      	bls.n	800b504 <_free_r+0x78>
 800b4fe:	230c      	movs	r3, #12
 800b500:	6003      	str	r3, [r0, #0]
 800b502:	e7d6      	b.n	800b4b2 <_free_r+0x26>
 800b504:	6825      	ldr	r5, [r4, #0]
 800b506:	1961      	adds	r1, r4, r5
 800b508:	428b      	cmp	r3, r1
 800b50a:	bf04      	itt	eq
 800b50c:	6819      	ldreq	r1, [r3, #0]
 800b50e:	685b      	ldreq	r3, [r3, #4]
 800b510:	6063      	str	r3, [r4, #4]
 800b512:	bf04      	itt	eq
 800b514:	1949      	addeq	r1, r1, r5
 800b516:	6021      	streq	r1, [r4, #0]
 800b518:	6054      	str	r4, [r2, #4]
 800b51a:	e7ca      	b.n	800b4b2 <_free_r+0x26>
 800b51c:	b003      	add	sp, #12
 800b51e:	bd30      	pop	{r4, r5, pc}
 800b520:	200008a4 	.word	0x200008a4

0800b524 <malloc>:
 800b524:	4b02      	ldr	r3, [pc, #8]	; (800b530 <malloc+0xc>)
 800b526:	4601      	mov	r1, r0
 800b528:	6818      	ldr	r0, [r3, #0]
 800b52a:	f000 b823 	b.w	800b574 <_malloc_r>
 800b52e:	bf00      	nop
 800b530:	200000a4 	.word	0x200000a4

0800b534 <sbrk_aligned>:
 800b534:	b570      	push	{r4, r5, r6, lr}
 800b536:	4e0e      	ldr	r6, [pc, #56]	; (800b570 <sbrk_aligned+0x3c>)
 800b538:	460c      	mov	r4, r1
 800b53a:	6831      	ldr	r1, [r6, #0]
 800b53c:	4605      	mov	r5, r0
 800b53e:	b911      	cbnz	r1, 800b546 <sbrk_aligned+0x12>
 800b540:	f000 fea8 	bl	800c294 <_sbrk_r>
 800b544:	6030      	str	r0, [r6, #0]
 800b546:	4621      	mov	r1, r4
 800b548:	4628      	mov	r0, r5
 800b54a:	f000 fea3 	bl	800c294 <_sbrk_r>
 800b54e:	1c43      	adds	r3, r0, #1
 800b550:	d00a      	beq.n	800b568 <sbrk_aligned+0x34>
 800b552:	1cc4      	adds	r4, r0, #3
 800b554:	f024 0403 	bic.w	r4, r4, #3
 800b558:	42a0      	cmp	r0, r4
 800b55a:	d007      	beq.n	800b56c <sbrk_aligned+0x38>
 800b55c:	1a21      	subs	r1, r4, r0
 800b55e:	4628      	mov	r0, r5
 800b560:	f000 fe98 	bl	800c294 <_sbrk_r>
 800b564:	3001      	adds	r0, #1
 800b566:	d101      	bne.n	800b56c <sbrk_aligned+0x38>
 800b568:	f04f 34ff 	mov.w	r4, #4294967295
 800b56c:	4620      	mov	r0, r4
 800b56e:	bd70      	pop	{r4, r5, r6, pc}
 800b570:	200008a8 	.word	0x200008a8

0800b574 <_malloc_r>:
 800b574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b578:	1ccd      	adds	r5, r1, #3
 800b57a:	f025 0503 	bic.w	r5, r5, #3
 800b57e:	3508      	adds	r5, #8
 800b580:	2d0c      	cmp	r5, #12
 800b582:	bf38      	it	cc
 800b584:	250c      	movcc	r5, #12
 800b586:	2d00      	cmp	r5, #0
 800b588:	4607      	mov	r7, r0
 800b58a:	db01      	blt.n	800b590 <_malloc_r+0x1c>
 800b58c:	42a9      	cmp	r1, r5
 800b58e:	d905      	bls.n	800b59c <_malloc_r+0x28>
 800b590:	230c      	movs	r3, #12
 800b592:	603b      	str	r3, [r7, #0]
 800b594:	2600      	movs	r6, #0
 800b596:	4630      	mov	r0, r6
 800b598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b59c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b670 <_malloc_r+0xfc>
 800b5a0:	f000 f868 	bl	800b674 <__malloc_lock>
 800b5a4:	f8d8 3000 	ldr.w	r3, [r8]
 800b5a8:	461c      	mov	r4, r3
 800b5aa:	bb5c      	cbnz	r4, 800b604 <_malloc_r+0x90>
 800b5ac:	4629      	mov	r1, r5
 800b5ae:	4638      	mov	r0, r7
 800b5b0:	f7ff ffc0 	bl	800b534 <sbrk_aligned>
 800b5b4:	1c43      	adds	r3, r0, #1
 800b5b6:	4604      	mov	r4, r0
 800b5b8:	d155      	bne.n	800b666 <_malloc_r+0xf2>
 800b5ba:	f8d8 4000 	ldr.w	r4, [r8]
 800b5be:	4626      	mov	r6, r4
 800b5c0:	2e00      	cmp	r6, #0
 800b5c2:	d145      	bne.n	800b650 <_malloc_r+0xdc>
 800b5c4:	2c00      	cmp	r4, #0
 800b5c6:	d048      	beq.n	800b65a <_malloc_r+0xe6>
 800b5c8:	6823      	ldr	r3, [r4, #0]
 800b5ca:	4631      	mov	r1, r6
 800b5cc:	4638      	mov	r0, r7
 800b5ce:	eb04 0903 	add.w	r9, r4, r3
 800b5d2:	f000 fe5f 	bl	800c294 <_sbrk_r>
 800b5d6:	4581      	cmp	r9, r0
 800b5d8:	d13f      	bne.n	800b65a <_malloc_r+0xe6>
 800b5da:	6821      	ldr	r1, [r4, #0]
 800b5dc:	1a6d      	subs	r5, r5, r1
 800b5de:	4629      	mov	r1, r5
 800b5e0:	4638      	mov	r0, r7
 800b5e2:	f7ff ffa7 	bl	800b534 <sbrk_aligned>
 800b5e6:	3001      	adds	r0, #1
 800b5e8:	d037      	beq.n	800b65a <_malloc_r+0xe6>
 800b5ea:	6823      	ldr	r3, [r4, #0]
 800b5ec:	442b      	add	r3, r5
 800b5ee:	6023      	str	r3, [r4, #0]
 800b5f0:	f8d8 3000 	ldr.w	r3, [r8]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d038      	beq.n	800b66a <_malloc_r+0xf6>
 800b5f8:	685a      	ldr	r2, [r3, #4]
 800b5fa:	42a2      	cmp	r2, r4
 800b5fc:	d12b      	bne.n	800b656 <_malloc_r+0xe2>
 800b5fe:	2200      	movs	r2, #0
 800b600:	605a      	str	r2, [r3, #4]
 800b602:	e00f      	b.n	800b624 <_malloc_r+0xb0>
 800b604:	6822      	ldr	r2, [r4, #0]
 800b606:	1b52      	subs	r2, r2, r5
 800b608:	d41f      	bmi.n	800b64a <_malloc_r+0xd6>
 800b60a:	2a0b      	cmp	r2, #11
 800b60c:	d917      	bls.n	800b63e <_malloc_r+0xca>
 800b60e:	1961      	adds	r1, r4, r5
 800b610:	42a3      	cmp	r3, r4
 800b612:	6025      	str	r5, [r4, #0]
 800b614:	bf18      	it	ne
 800b616:	6059      	strne	r1, [r3, #4]
 800b618:	6863      	ldr	r3, [r4, #4]
 800b61a:	bf08      	it	eq
 800b61c:	f8c8 1000 	streq.w	r1, [r8]
 800b620:	5162      	str	r2, [r4, r5]
 800b622:	604b      	str	r3, [r1, #4]
 800b624:	4638      	mov	r0, r7
 800b626:	f104 060b 	add.w	r6, r4, #11
 800b62a:	f000 f829 	bl	800b680 <__malloc_unlock>
 800b62e:	f026 0607 	bic.w	r6, r6, #7
 800b632:	1d23      	adds	r3, r4, #4
 800b634:	1af2      	subs	r2, r6, r3
 800b636:	d0ae      	beq.n	800b596 <_malloc_r+0x22>
 800b638:	1b9b      	subs	r3, r3, r6
 800b63a:	50a3      	str	r3, [r4, r2]
 800b63c:	e7ab      	b.n	800b596 <_malloc_r+0x22>
 800b63e:	42a3      	cmp	r3, r4
 800b640:	6862      	ldr	r2, [r4, #4]
 800b642:	d1dd      	bne.n	800b600 <_malloc_r+0x8c>
 800b644:	f8c8 2000 	str.w	r2, [r8]
 800b648:	e7ec      	b.n	800b624 <_malloc_r+0xb0>
 800b64a:	4623      	mov	r3, r4
 800b64c:	6864      	ldr	r4, [r4, #4]
 800b64e:	e7ac      	b.n	800b5aa <_malloc_r+0x36>
 800b650:	4634      	mov	r4, r6
 800b652:	6876      	ldr	r6, [r6, #4]
 800b654:	e7b4      	b.n	800b5c0 <_malloc_r+0x4c>
 800b656:	4613      	mov	r3, r2
 800b658:	e7cc      	b.n	800b5f4 <_malloc_r+0x80>
 800b65a:	230c      	movs	r3, #12
 800b65c:	603b      	str	r3, [r7, #0]
 800b65e:	4638      	mov	r0, r7
 800b660:	f000 f80e 	bl	800b680 <__malloc_unlock>
 800b664:	e797      	b.n	800b596 <_malloc_r+0x22>
 800b666:	6025      	str	r5, [r4, #0]
 800b668:	e7dc      	b.n	800b624 <_malloc_r+0xb0>
 800b66a:	605b      	str	r3, [r3, #4]
 800b66c:	deff      	udf	#255	; 0xff
 800b66e:	bf00      	nop
 800b670:	200008a4 	.word	0x200008a4

0800b674 <__malloc_lock>:
 800b674:	4801      	ldr	r0, [pc, #4]	; (800b67c <__malloc_lock+0x8>)
 800b676:	f7ff b87e 	b.w	800a776 <__retarget_lock_acquire_recursive>
 800b67a:	bf00      	nop
 800b67c:	200008a0 	.word	0x200008a0

0800b680 <__malloc_unlock>:
 800b680:	4801      	ldr	r0, [pc, #4]	; (800b688 <__malloc_unlock+0x8>)
 800b682:	f7ff b879 	b.w	800a778 <__retarget_lock_release_recursive>
 800b686:	bf00      	nop
 800b688:	200008a0 	.word	0x200008a0

0800b68c <_Balloc>:
 800b68c:	b570      	push	{r4, r5, r6, lr}
 800b68e:	69c6      	ldr	r6, [r0, #28]
 800b690:	4604      	mov	r4, r0
 800b692:	460d      	mov	r5, r1
 800b694:	b976      	cbnz	r6, 800b6b4 <_Balloc+0x28>
 800b696:	2010      	movs	r0, #16
 800b698:	f7ff ff44 	bl	800b524 <malloc>
 800b69c:	4602      	mov	r2, r0
 800b69e:	61e0      	str	r0, [r4, #28]
 800b6a0:	b920      	cbnz	r0, 800b6ac <_Balloc+0x20>
 800b6a2:	4b18      	ldr	r3, [pc, #96]	; (800b704 <_Balloc+0x78>)
 800b6a4:	4818      	ldr	r0, [pc, #96]	; (800b708 <_Balloc+0x7c>)
 800b6a6:	216b      	movs	r1, #107	; 0x6b
 800b6a8:	f000 fe04 	bl	800c2b4 <__assert_func>
 800b6ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b6b0:	6006      	str	r6, [r0, #0]
 800b6b2:	60c6      	str	r6, [r0, #12]
 800b6b4:	69e6      	ldr	r6, [r4, #28]
 800b6b6:	68f3      	ldr	r3, [r6, #12]
 800b6b8:	b183      	cbz	r3, 800b6dc <_Balloc+0x50>
 800b6ba:	69e3      	ldr	r3, [r4, #28]
 800b6bc:	68db      	ldr	r3, [r3, #12]
 800b6be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b6c2:	b9b8      	cbnz	r0, 800b6f4 <_Balloc+0x68>
 800b6c4:	2101      	movs	r1, #1
 800b6c6:	fa01 f605 	lsl.w	r6, r1, r5
 800b6ca:	1d72      	adds	r2, r6, #5
 800b6cc:	0092      	lsls	r2, r2, #2
 800b6ce:	4620      	mov	r0, r4
 800b6d0:	f000 fe0e 	bl	800c2f0 <_calloc_r>
 800b6d4:	b160      	cbz	r0, 800b6f0 <_Balloc+0x64>
 800b6d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b6da:	e00e      	b.n	800b6fa <_Balloc+0x6e>
 800b6dc:	2221      	movs	r2, #33	; 0x21
 800b6de:	2104      	movs	r1, #4
 800b6e0:	4620      	mov	r0, r4
 800b6e2:	f000 fe05 	bl	800c2f0 <_calloc_r>
 800b6e6:	69e3      	ldr	r3, [r4, #28]
 800b6e8:	60f0      	str	r0, [r6, #12]
 800b6ea:	68db      	ldr	r3, [r3, #12]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d1e4      	bne.n	800b6ba <_Balloc+0x2e>
 800b6f0:	2000      	movs	r0, #0
 800b6f2:	bd70      	pop	{r4, r5, r6, pc}
 800b6f4:	6802      	ldr	r2, [r0, #0]
 800b6f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b700:	e7f7      	b.n	800b6f2 <_Balloc+0x66>
 800b702:	bf00      	nop
 800b704:	0800c83d 	.word	0x0800c83d
 800b708:	0800c8bd 	.word	0x0800c8bd

0800b70c <_Bfree>:
 800b70c:	b570      	push	{r4, r5, r6, lr}
 800b70e:	69c6      	ldr	r6, [r0, #28]
 800b710:	4605      	mov	r5, r0
 800b712:	460c      	mov	r4, r1
 800b714:	b976      	cbnz	r6, 800b734 <_Bfree+0x28>
 800b716:	2010      	movs	r0, #16
 800b718:	f7ff ff04 	bl	800b524 <malloc>
 800b71c:	4602      	mov	r2, r0
 800b71e:	61e8      	str	r0, [r5, #28]
 800b720:	b920      	cbnz	r0, 800b72c <_Bfree+0x20>
 800b722:	4b09      	ldr	r3, [pc, #36]	; (800b748 <_Bfree+0x3c>)
 800b724:	4809      	ldr	r0, [pc, #36]	; (800b74c <_Bfree+0x40>)
 800b726:	218f      	movs	r1, #143	; 0x8f
 800b728:	f000 fdc4 	bl	800c2b4 <__assert_func>
 800b72c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b730:	6006      	str	r6, [r0, #0]
 800b732:	60c6      	str	r6, [r0, #12]
 800b734:	b13c      	cbz	r4, 800b746 <_Bfree+0x3a>
 800b736:	69eb      	ldr	r3, [r5, #28]
 800b738:	6862      	ldr	r2, [r4, #4]
 800b73a:	68db      	ldr	r3, [r3, #12]
 800b73c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b740:	6021      	str	r1, [r4, #0]
 800b742:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b746:	bd70      	pop	{r4, r5, r6, pc}
 800b748:	0800c83d 	.word	0x0800c83d
 800b74c:	0800c8bd 	.word	0x0800c8bd

0800b750 <__multadd>:
 800b750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b754:	690d      	ldr	r5, [r1, #16]
 800b756:	4607      	mov	r7, r0
 800b758:	460c      	mov	r4, r1
 800b75a:	461e      	mov	r6, r3
 800b75c:	f101 0c14 	add.w	ip, r1, #20
 800b760:	2000      	movs	r0, #0
 800b762:	f8dc 3000 	ldr.w	r3, [ip]
 800b766:	b299      	uxth	r1, r3
 800b768:	fb02 6101 	mla	r1, r2, r1, r6
 800b76c:	0c1e      	lsrs	r6, r3, #16
 800b76e:	0c0b      	lsrs	r3, r1, #16
 800b770:	fb02 3306 	mla	r3, r2, r6, r3
 800b774:	b289      	uxth	r1, r1
 800b776:	3001      	adds	r0, #1
 800b778:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b77c:	4285      	cmp	r5, r0
 800b77e:	f84c 1b04 	str.w	r1, [ip], #4
 800b782:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b786:	dcec      	bgt.n	800b762 <__multadd+0x12>
 800b788:	b30e      	cbz	r6, 800b7ce <__multadd+0x7e>
 800b78a:	68a3      	ldr	r3, [r4, #8]
 800b78c:	42ab      	cmp	r3, r5
 800b78e:	dc19      	bgt.n	800b7c4 <__multadd+0x74>
 800b790:	6861      	ldr	r1, [r4, #4]
 800b792:	4638      	mov	r0, r7
 800b794:	3101      	adds	r1, #1
 800b796:	f7ff ff79 	bl	800b68c <_Balloc>
 800b79a:	4680      	mov	r8, r0
 800b79c:	b928      	cbnz	r0, 800b7aa <__multadd+0x5a>
 800b79e:	4602      	mov	r2, r0
 800b7a0:	4b0c      	ldr	r3, [pc, #48]	; (800b7d4 <__multadd+0x84>)
 800b7a2:	480d      	ldr	r0, [pc, #52]	; (800b7d8 <__multadd+0x88>)
 800b7a4:	21ba      	movs	r1, #186	; 0xba
 800b7a6:	f000 fd85 	bl	800c2b4 <__assert_func>
 800b7aa:	6922      	ldr	r2, [r4, #16]
 800b7ac:	3202      	adds	r2, #2
 800b7ae:	f104 010c 	add.w	r1, r4, #12
 800b7b2:	0092      	lsls	r2, r2, #2
 800b7b4:	300c      	adds	r0, #12
 800b7b6:	f7fe ffe0 	bl	800a77a <memcpy>
 800b7ba:	4621      	mov	r1, r4
 800b7bc:	4638      	mov	r0, r7
 800b7be:	f7ff ffa5 	bl	800b70c <_Bfree>
 800b7c2:	4644      	mov	r4, r8
 800b7c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b7c8:	3501      	adds	r5, #1
 800b7ca:	615e      	str	r6, [r3, #20]
 800b7cc:	6125      	str	r5, [r4, #16]
 800b7ce:	4620      	mov	r0, r4
 800b7d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7d4:	0800c8ac 	.word	0x0800c8ac
 800b7d8:	0800c8bd 	.word	0x0800c8bd

0800b7dc <__hi0bits>:
 800b7dc:	0c03      	lsrs	r3, r0, #16
 800b7de:	041b      	lsls	r3, r3, #16
 800b7e0:	b9d3      	cbnz	r3, 800b818 <__hi0bits+0x3c>
 800b7e2:	0400      	lsls	r0, r0, #16
 800b7e4:	2310      	movs	r3, #16
 800b7e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b7ea:	bf04      	itt	eq
 800b7ec:	0200      	lsleq	r0, r0, #8
 800b7ee:	3308      	addeq	r3, #8
 800b7f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b7f4:	bf04      	itt	eq
 800b7f6:	0100      	lsleq	r0, r0, #4
 800b7f8:	3304      	addeq	r3, #4
 800b7fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b7fe:	bf04      	itt	eq
 800b800:	0080      	lsleq	r0, r0, #2
 800b802:	3302      	addeq	r3, #2
 800b804:	2800      	cmp	r0, #0
 800b806:	db05      	blt.n	800b814 <__hi0bits+0x38>
 800b808:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b80c:	f103 0301 	add.w	r3, r3, #1
 800b810:	bf08      	it	eq
 800b812:	2320      	moveq	r3, #32
 800b814:	4618      	mov	r0, r3
 800b816:	4770      	bx	lr
 800b818:	2300      	movs	r3, #0
 800b81a:	e7e4      	b.n	800b7e6 <__hi0bits+0xa>

0800b81c <__lo0bits>:
 800b81c:	6803      	ldr	r3, [r0, #0]
 800b81e:	f013 0207 	ands.w	r2, r3, #7
 800b822:	d00c      	beq.n	800b83e <__lo0bits+0x22>
 800b824:	07d9      	lsls	r1, r3, #31
 800b826:	d422      	bmi.n	800b86e <__lo0bits+0x52>
 800b828:	079a      	lsls	r2, r3, #30
 800b82a:	bf49      	itett	mi
 800b82c:	085b      	lsrmi	r3, r3, #1
 800b82e:	089b      	lsrpl	r3, r3, #2
 800b830:	6003      	strmi	r3, [r0, #0]
 800b832:	2201      	movmi	r2, #1
 800b834:	bf5c      	itt	pl
 800b836:	6003      	strpl	r3, [r0, #0]
 800b838:	2202      	movpl	r2, #2
 800b83a:	4610      	mov	r0, r2
 800b83c:	4770      	bx	lr
 800b83e:	b299      	uxth	r1, r3
 800b840:	b909      	cbnz	r1, 800b846 <__lo0bits+0x2a>
 800b842:	0c1b      	lsrs	r3, r3, #16
 800b844:	2210      	movs	r2, #16
 800b846:	b2d9      	uxtb	r1, r3
 800b848:	b909      	cbnz	r1, 800b84e <__lo0bits+0x32>
 800b84a:	3208      	adds	r2, #8
 800b84c:	0a1b      	lsrs	r3, r3, #8
 800b84e:	0719      	lsls	r1, r3, #28
 800b850:	bf04      	itt	eq
 800b852:	091b      	lsreq	r3, r3, #4
 800b854:	3204      	addeq	r2, #4
 800b856:	0799      	lsls	r1, r3, #30
 800b858:	bf04      	itt	eq
 800b85a:	089b      	lsreq	r3, r3, #2
 800b85c:	3202      	addeq	r2, #2
 800b85e:	07d9      	lsls	r1, r3, #31
 800b860:	d403      	bmi.n	800b86a <__lo0bits+0x4e>
 800b862:	085b      	lsrs	r3, r3, #1
 800b864:	f102 0201 	add.w	r2, r2, #1
 800b868:	d003      	beq.n	800b872 <__lo0bits+0x56>
 800b86a:	6003      	str	r3, [r0, #0]
 800b86c:	e7e5      	b.n	800b83a <__lo0bits+0x1e>
 800b86e:	2200      	movs	r2, #0
 800b870:	e7e3      	b.n	800b83a <__lo0bits+0x1e>
 800b872:	2220      	movs	r2, #32
 800b874:	e7e1      	b.n	800b83a <__lo0bits+0x1e>
	...

0800b878 <__i2b>:
 800b878:	b510      	push	{r4, lr}
 800b87a:	460c      	mov	r4, r1
 800b87c:	2101      	movs	r1, #1
 800b87e:	f7ff ff05 	bl	800b68c <_Balloc>
 800b882:	4602      	mov	r2, r0
 800b884:	b928      	cbnz	r0, 800b892 <__i2b+0x1a>
 800b886:	4b05      	ldr	r3, [pc, #20]	; (800b89c <__i2b+0x24>)
 800b888:	4805      	ldr	r0, [pc, #20]	; (800b8a0 <__i2b+0x28>)
 800b88a:	f240 1145 	movw	r1, #325	; 0x145
 800b88e:	f000 fd11 	bl	800c2b4 <__assert_func>
 800b892:	2301      	movs	r3, #1
 800b894:	6144      	str	r4, [r0, #20]
 800b896:	6103      	str	r3, [r0, #16]
 800b898:	bd10      	pop	{r4, pc}
 800b89a:	bf00      	nop
 800b89c:	0800c8ac 	.word	0x0800c8ac
 800b8a0:	0800c8bd 	.word	0x0800c8bd

0800b8a4 <__multiply>:
 800b8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8a8:	4691      	mov	r9, r2
 800b8aa:	690a      	ldr	r2, [r1, #16]
 800b8ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b8b0:	429a      	cmp	r2, r3
 800b8b2:	bfb8      	it	lt
 800b8b4:	460b      	movlt	r3, r1
 800b8b6:	460c      	mov	r4, r1
 800b8b8:	bfbc      	itt	lt
 800b8ba:	464c      	movlt	r4, r9
 800b8bc:	4699      	movlt	r9, r3
 800b8be:	6927      	ldr	r7, [r4, #16]
 800b8c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b8c4:	68a3      	ldr	r3, [r4, #8]
 800b8c6:	6861      	ldr	r1, [r4, #4]
 800b8c8:	eb07 060a 	add.w	r6, r7, sl
 800b8cc:	42b3      	cmp	r3, r6
 800b8ce:	b085      	sub	sp, #20
 800b8d0:	bfb8      	it	lt
 800b8d2:	3101      	addlt	r1, #1
 800b8d4:	f7ff feda 	bl	800b68c <_Balloc>
 800b8d8:	b930      	cbnz	r0, 800b8e8 <__multiply+0x44>
 800b8da:	4602      	mov	r2, r0
 800b8dc:	4b44      	ldr	r3, [pc, #272]	; (800b9f0 <__multiply+0x14c>)
 800b8de:	4845      	ldr	r0, [pc, #276]	; (800b9f4 <__multiply+0x150>)
 800b8e0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b8e4:	f000 fce6 	bl	800c2b4 <__assert_func>
 800b8e8:	f100 0514 	add.w	r5, r0, #20
 800b8ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b8f0:	462b      	mov	r3, r5
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	4543      	cmp	r3, r8
 800b8f6:	d321      	bcc.n	800b93c <__multiply+0x98>
 800b8f8:	f104 0314 	add.w	r3, r4, #20
 800b8fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b900:	f109 0314 	add.w	r3, r9, #20
 800b904:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b908:	9202      	str	r2, [sp, #8]
 800b90a:	1b3a      	subs	r2, r7, r4
 800b90c:	3a15      	subs	r2, #21
 800b90e:	f022 0203 	bic.w	r2, r2, #3
 800b912:	3204      	adds	r2, #4
 800b914:	f104 0115 	add.w	r1, r4, #21
 800b918:	428f      	cmp	r7, r1
 800b91a:	bf38      	it	cc
 800b91c:	2204      	movcc	r2, #4
 800b91e:	9201      	str	r2, [sp, #4]
 800b920:	9a02      	ldr	r2, [sp, #8]
 800b922:	9303      	str	r3, [sp, #12]
 800b924:	429a      	cmp	r2, r3
 800b926:	d80c      	bhi.n	800b942 <__multiply+0x9e>
 800b928:	2e00      	cmp	r6, #0
 800b92a:	dd03      	ble.n	800b934 <__multiply+0x90>
 800b92c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b930:	2b00      	cmp	r3, #0
 800b932:	d05b      	beq.n	800b9ec <__multiply+0x148>
 800b934:	6106      	str	r6, [r0, #16]
 800b936:	b005      	add	sp, #20
 800b938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b93c:	f843 2b04 	str.w	r2, [r3], #4
 800b940:	e7d8      	b.n	800b8f4 <__multiply+0x50>
 800b942:	f8b3 a000 	ldrh.w	sl, [r3]
 800b946:	f1ba 0f00 	cmp.w	sl, #0
 800b94a:	d024      	beq.n	800b996 <__multiply+0xf2>
 800b94c:	f104 0e14 	add.w	lr, r4, #20
 800b950:	46a9      	mov	r9, r5
 800b952:	f04f 0c00 	mov.w	ip, #0
 800b956:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b95a:	f8d9 1000 	ldr.w	r1, [r9]
 800b95e:	fa1f fb82 	uxth.w	fp, r2
 800b962:	b289      	uxth	r1, r1
 800b964:	fb0a 110b 	mla	r1, sl, fp, r1
 800b968:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b96c:	f8d9 2000 	ldr.w	r2, [r9]
 800b970:	4461      	add	r1, ip
 800b972:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b976:	fb0a c20b 	mla	r2, sl, fp, ip
 800b97a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b97e:	b289      	uxth	r1, r1
 800b980:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b984:	4577      	cmp	r7, lr
 800b986:	f849 1b04 	str.w	r1, [r9], #4
 800b98a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b98e:	d8e2      	bhi.n	800b956 <__multiply+0xb2>
 800b990:	9a01      	ldr	r2, [sp, #4]
 800b992:	f845 c002 	str.w	ip, [r5, r2]
 800b996:	9a03      	ldr	r2, [sp, #12]
 800b998:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b99c:	3304      	adds	r3, #4
 800b99e:	f1b9 0f00 	cmp.w	r9, #0
 800b9a2:	d021      	beq.n	800b9e8 <__multiply+0x144>
 800b9a4:	6829      	ldr	r1, [r5, #0]
 800b9a6:	f104 0c14 	add.w	ip, r4, #20
 800b9aa:	46ae      	mov	lr, r5
 800b9ac:	f04f 0a00 	mov.w	sl, #0
 800b9b0:	f8bc b000 	ldrh.w	fp, [ip]
 800b9b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b9b8:	fb09 220b 	mla	r2, r9, fp, r2
 800b9bc:	4452      	add	r2, sl
 800b9be:	b289      	uxth	r1, r1
 800b9c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b9c4:	f84e 1b04 	str.w	r1, [lr], #4
 800b9c8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b9cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b9d0:	f8be 1000 	ldrh.w	r1, [lr]
 800b9d4:	fb09 110a 	mla	r1, r9, sl, r1
 800b9d8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b9dc:	4567      	cmp	r7, ip
 800b9de:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b9e2:	d8e5      	bhi.n	800b9b0 <__multiply+0x10c>
 800b9e4:	9a01      	ldr	r2, [sp, #4]
 800b9e6:	50a9      	str	r1, [r5, r2]
 800b9e8:	3504      	adds	r5, #4
 800b9ea:	e799      	b.n	800b920 <__multiply+0x7c>
 800b9ec:	3e01      	subs	r6, #1
 800b9ee:	e79b      	b.n	800b928 <__multiply+0x84>
 800b9f0:	0800c8ac 	.word	0x0800c8ac
 800b9f4:	0800c8bd 	.word	0x0800c8bd

0800b9f8 <__pow5mult>:
 800b9f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9fc:	4615      	mov	r5, r2
 800b9fe:	f012 0203 	ands.w	r2, r2, #3
 800ba02:	4606      	mov	r6, r0
 800ba04:	460f      	mov	r7, r1
 800ba06:	d007      	beq.n	800ba18 <__pow5mult+0x20>
 800ba08:	4c25      	ldr	r4, [pc, #148]	; (800baa0 <__pow5mult+0xa8>)
 800ba0a:	3a01      	subs	r2, #1
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ba12:	f7ff fe9d 	bl	800b750 <__multadd>
 800ba16:	4607      	mov	r7, r0
 800ba18:	10ad      	asrs	r5, r5, #2
 800ba1a:	d03d      	beq.n	800ba98 <__pow5mult+0xa0>
 800ba1c:	69f4      	ldr	r4, [r6, #28]
 800ba1e:	b97c      	cbnz	r4, 800ba40 <__pow5mult+0x48>
 800ba20:	2010      	movs	r0, #16
 800ba22:	f7ff fd7f 	bl	800b524 <malloc>
 800ba26:	4602      	mov	r2, r0
 800ba28:	61f0      	str	r0, [r6, #28]
 800ba2a:	b928      	cbnz	r0, 800ba38 <__pow5mult+0x40>
 800ba2c:	4b1d      	ldr	r3, [pc, #116]	; (800baa4 <__pow5mult+0xac>)
 800ba2e:	481e      	ldr	r0, [pc, #120]	; (800baa8 <__pow5mult+0xb0>)
 800ba30:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ba34:	f000 fc3e 	bl	800c2b4 <__assert_func>
 800ba38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ba3c:	6004      	str	r4, [r0, #0]
 800ba3e:	60c4      	str	r4, [r0, #12]
 800ba40:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ba44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ba48:	b94c      	cbnz	r4, 800ba5e <__pow5mult+0x66>
 800ba4a:	f240 2171 	movw	r1, #625	; 0x271
 800ba4e:	4630      	mov	r0, r6
 800ba50:	f7ff ff12 	bl	800b878 <__i2b>
 800ba54:	2300      	movs	r3, #0
 800ba56:	f8c8 0008 	str.w	r0, [r8, #8]
 800ba5a:	4604      	mov	r4, r0
 800ba5c:	6003      	str	r3, [r0, #0]
 800ba5e:	f04f 0900 	mov.w	r9, #0
 800ba62:	07eb      	lsls	r3, r5, #31
 800ba64:	d50a      	bpl.n	800ba7c <__pow5mult+0x84>
 800ba66:	4639      	mov	r1, r7
 800ba68:	4622      	mov	r2, r4
 800ba6a:	4630      	mov	r0, r6
 800ba6c:	f7ff ff1a 	bl	800b8a4 <__multiply>
 800ba70:	4639      	mov	r1, r7
 800ba72:	4680      	mov	r8, r0
 800ba74:	4630      	mov	r0, r6
 800ba76:	f7ff fe49 	bl	800b70c <_Bfree>
 800ba7a:	4647      	mov	r7, r8
 800ba7c:	106d      	asrs	r5, r5, #1
 800ba7e:	d00b      	beq.n	800ba98 <__pow5mult+0xa0>
 800ba80:	6820      	ldr	r0, [r4, #0]
 800ba82:	b938      	cbnz	r0, 800ba94 <__pow5mult+0x9c>
 800ba84:	4622      	mov	r2, r4
 800ba86:	4621      	mov	r1, r4
 800ba88:	4630      	mov	r0, r6
 800ba8a:	f7ff ff0b 	bl	800b8a4 <__multiply>
 800ba8e:	6020      	str	r0, [r4, #0]
 800ba90:	f8c0 9000 	str.w	r9, [r0]
 800ba94:	4604      	mov	r4, r0
 800ba96:	e7e4      	b.n	800ba62 <__pow5mult+0x6a>
 800ba98:	4638      	mov	r0, r7
 800ba9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba9e:	bf00      	nop
 800baa0:	0800ca08 	.word	0x0800ca08
 800baa4:	0800c83d 	.word	0x0800c83d
 800baa8:	0800c8bd 	.word	0x0800c8bd

0800baac <__lshift>:
 800baac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bab0:	460c      	mov	r4, r1
 800bab2:	6849      	ldr	r1, [r1, #4]
 800bab4:	6923      	ldr	r3, [r4, #16]
 800bab6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800baba:	68a3      	ldr	r3, [r4, #8]
 800babc:	4607      	mov	r7, r0
 800babe:	4691      	mov	r9, r2
 800bac0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bac4:	f108 0601 	add.w	r6, r8, #1
 800bac8:	42b3      	cmp	r3, r6
 800baca:	db0b      	blt.n	800bae4 <__lshift+0x38>
 800bacc:	4638      	mov	r0, r7
 800bace:	f7ff fddd 	bl	800b68c <_Balloc>
 800bad2:	4605      	mov	r5, r0
 800bad4:	b948      	cbnz	r0, 800baea <__lshift+0x3e>
 800bad6:	4602      	mov	r2, r0
 800bad8:	4b28      	ldr	r3, [pc, #160]	; (800bb7c <__lshift+0xd0>)
 800bada:	4829      	ldr	r0, [pc, #164]	; (800bb80 <__lshift+0xd4>)
 800badc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800bae0:	f000 fbe8 	bl	800c2b4 <__assert_func>
 800bae4:	3101      	adds	r1, #1
 800bae6:	005b      	lsls	r3, r3, #1
 800bae8:	e7ee      	b.n	800bac8 <__lshift+0x1c>
 800baea:	2300      	movs	r3, #0
 800baec:	f100 0114 	add.w	r1, r0, #20
 800baf0:	f100 0210 	add.w	r2, r0, #16
 800baf4:	4618      	mov	r0, r3
 800baf6:	4553      	cmp	r3, sl
 800baf8:	db33      	blt.n	800bb62 <__lshift+0xb6>
 800bafa:	6920      	ldr	r0, [r4, #16]
 800bafc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bb00:	f104 0314 	add.w	r3, r4, #20
 800bb04:	f019 091f 	ands.w	r9, r9, #31
 800bb08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bb0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bb10:	d02b      	beq.n	800bb6a <__lshift+0xbe>
 800bb12:	f1c9 0e20 	rsb	lr, r9, #32
 800bb16:	468a      	mov	sl, r1
 800bb18:	2200      	movs	r2, #0
 800bb1a:	6818      	ldr	r0, [r3, #0]
 800bb1c:	fa00 f009 	lsl.w	r0, r0, r9
 800bb20:	4310      	orrs	r0, r2
 800bb22:	f84a 0b04 	str.w	r0, [sl], #4
 800bb26:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb2a:	459c      	cmp	ip, r3
 800bb2c:	fa22 f20e 	lsr.w	r2, r2, lr
 800bb30:	d8f3      	bhi.n	800bb1a <__lshift+0x6e>
 800bb32:	ebac 0304 	sub.w	r3, ip, r4
 800bb36:	3b15      	subs	r3, #21
 800bb38:	f023 0303 	bic.w	r3, r3, #3
 800bb3c:	3304      	adds	r3, #4
 800bb3e:	f104 0015 	add.w	r0, r4, #21
 800bb42:	4584      	cmp	ip, r0
 800bb44:	bf38      	it	cc
 800bb46:	2304      	movcc	r3, #4
 800bb48:	50ca      	str	r2, [r1, r3]
 800bb4a:	b10a      	cbz	r2, 800bb50 <__lshift+0xa4>
 800bb4c:	f108 0602 	add.w	r6, r8, #2
 800bb50:	3e01      	subs	r6, #1
 800bb52:	4638      	mov	r0, r7
 800bb54:	612e      	str	r6, [r5, #16]
 800bb56:	4621      	mov	r1, r4
 800bb58:	f7ff fdd8 	bl	800b70c <_Bfree>
 800bb5c:	4628      	mov	r0, r5
 800bb5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb62:	f842 0f04 	str.w	r0, [r2, #4]!
 800bb66:	3301      	adds	r3, #1
 800bb68:	e7c5      	b.n	800baf6 <__lshift+0x4a>
 800bb6a:	3904      	subs	r1, #4
 800bb6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb70:	f841 2f04 	str.w	r2, [r1, #4]!
 800bb74:	459c      	cmp	ip, r3
 800bb76:	d8f9      	bhi.n	800bb6c <__lshift+0xc0>
 800bb78:	e7ea      	b.n	800bb50 <__lshift+0xa4>
 800bb7a:	bf00      	nop
 800bb7c:	0800c8ac 	.word	0x0800c8ac
 800bb80:	0800c8bd 	.word	0x0800c8bd

0800bb84 <__mcmp>:
 800bb84:	b530      	push	{r4, r5, lr}
 800bb86:	6902      	ldr	r2, [r0, #16]
 800bb88:	690c      	ldr	r4, [r1, #16]
 800bb8a:	1b12      	subs	r2, r2, r4
 800bb8c:	d10e      	bne.n	800bbac <__mcmp+0x28>
 800bb8e:	f100 0314 	add.w	r3, r0, #20
 800bb92:	3114      	adds	r1, #20
 800bb94:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bb98:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bb9c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bba0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bba4:	42a5      	cmp	r5, r4
 800bba6:	d003      	beq.n	800bbb0 <__mcmp+0x2c>
 800bba8:	d305      	bcc.n	800bbb6 <__mcmp+0x32>
 800bbaa:	2201      	movs	r2, #1
 800bbac:	4610      	mov	r0, r2
 800bbae:	bd30      	pop	{r4, r5, pc}
 800bbb0:	4283      	cmp	r3, r0
 800bbb2:	d3f3      	bcc.n	800bb9c <__mcmp+0x18>
 800bbb4:	e7fa      	b.n	800bbac <__mcmp+0x28>
 800bbb6:	f04f 32ff 	mov.w	r2, #4294967295
 800bbba:	e7f7      	b.n	800bbac <__mcmp+0x28>

0800bbbc <__mdiff>:
 800bbbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbc0:	460c      	mov	r4, r1
 800bbc2:	4606      	mov	r6, r0
 800bbc4:	4611      	mov	r1, r2
 800bbc6:	4620      	mov	r0, r4
 800bbc8:	4690      	mov	r8, r2
 800bbca:	f7ff ffdb 	bl	800bb84 <__mcmp>
 800bbce:	1e05      	subs	r5, r0, #0
 800bbd0:	d110      	bne.n	800bbf4 <__mdiff+0x38>
 800bbd2:	4629      	mov	r1, r5
 800bbd4:	4630      	mov	r0, r6
 800bbd6:	f7ff fd59 	bl	800b68c <_Balloc>
 800bbda:	b930      	cbnz	r0, 800bbea <__mdiff+0x2e>
 800bbdc:	4b3a      	ldr	r3, [pc, #232]	; (800bcc8 <__mdiff+0x10c>)
 800bbde:	4602      	mov	r2, r0
 800bbe0:	f240 2137 	movw	r1, #567	; 0x237
 800bbe4:	4839      	ldr	r0, [pc, #228]	; (800bccc <__mdiff+0x110>)
 800bbe6:	f000 fb65 	bl	800c2b4 <__assert_func>
 800bbea:	2301      	movs	r3, #1
 800bbec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bbf0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbf4:	bfa4      	itt	ge
 800bbf6:	4643      	movge	r3, r8
 800bbf8:	46a0      	movge	r8, r4
 800bbfa:	4630      	mov	r0, r6
 800bbfc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bc00:	bfa6      	itte	ge
 800bc02:	461c      	movge	r4, r3
 800bc04:	2500      	movge	r5, #0
 800bc06:	2501      	movlt	r5, #1
 800bc08:	f7ff fd40 	bl	800b68c <_Balloc>
 800bc0c:	b920      	cbnz	r0, 800bc18 <__mdiff+0x5c>
 800bc0e:	4b2e      	ldr	r3, [pc, #184]	; (800bcc8 <__mdiff+0x10c>)
 800bc10:	4602      	mov	r2, r0
 800bc12:	f240 2145 	movw	r1, #581	; 0x245
 800bc16:	e7e5      	b.n	800bbe4 <__mdiff+0x28>
 800bc18:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bc1c:	6926      	ldr	r6, [r4, #16]
 800bc1e:	60c5      	str	r5, [r0, #12]
 800bc20:	f104 0914 	add.w	r9, r4, #20
 800bc24:	f108 0514 	add.w	r5, r8, #20
 800bc28:	f100 0e14 	add.w	lr, r0, #20
 800bc2c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bc30:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bc34:	f108 0210 	add.w	r2, r8, #16
 800bc38:	46f2      	mov	sl, lr
 800bc3a:	2100      	movs	r1, #0
 800bc3c:	f859 3b04 	ldr.w	r3, [r9], #4
 800bc40:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bc44:	fa11 f88b 	uxtah	r8, r1, fp
 800bc48:	b299      	uxth	r1, r3
 800bc4a:	0c1b      	lsrs	r3, r3, #16
 800bc4c:	eba8 0801 	sub.w	r8, r8, r1
 800bc50:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bc54:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bc58:	fa1f f888 	uxth.w	r8, r8
 800bc5c:	1419      	asrs	r1, r3, #16
 800bc5e:	454e      	cmp	r6, r9
 800bc60:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bc64:	f84a 3b04 	str.w	r3, [sl], #4
 800bc68:	d8e8      	bhi.n	800bc3c <__mdiff+0x80>
 800bc6a:	1b33      	subs	r3, r6, r4
 800bc6c:	3b15      	subs	r3, #21
 800bc6e:	f023 0303 	bic.w	r3, r3, #3
 800bc72:	3304      	adds	r3, #4
 800bc74:	3415      	adds	r4, #21
 800bc76:	42a6      	cmp	r6, r4
 800bc78:	bf38      	it	cc
 800bc7a:	2304      	movcc	r3, #4
 800bc7c:	441d      	add	r5, r3
 800bc7e:	4473      	add	r3, lr
 800bc80:	469e      	mov	lr, r3
 800bc82:	462e      	mov	r6, r5
 800bc84:	4566      	cmp	r6, ip
 800bc86:	d30e      	bcc.n	800bca6 <__mdiff+0xea>
 800bc88:	f10c 0203 	add.w	r2, ip, #3
 800bc8c:	1b52      	subs	r2, r2, r5
 800bc8e:	f022 0203 	bic.w	r2, r2, #3
 800bc92:	3d03      	subs	r5, #3
 800bc94:	45ac      	cmp	ip, r5
 800bc96:	bf38      	it	cc
 800bc98:	2200      	movcc	r2, #0
 800bc9a:	4413      	add	r3, r2
 800bc9c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bca0:	b17a      	cbz	r2, 800bcc2 <__mdiff+0x106>
 800bca2:	6107      	str	r7, [r0, #16]
 800bca4:	e7a4      	b.n	800bbf0 <__mdiff+0x34>
 800bca6:	f856 8b04 	ldr.w	r8, [r6], #4
 800bcaa:	fa11 f288 	uxtah	r2, r1, r8
 800bcae:	1414      	asrs	r4, r2, #16
 800bcb0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bcb4:	b292      	uxth	r2, r2
 800bcb6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bcba:	f84e 2b04 	str.w	r2, [lr], #4
 800bcbe:	1421      	asrs	r1, r4, #16
 800bcc0:	e7e0      	b.n	800bc84 <__mdiff+0xc8>
 800bcc2:	3f01      	subs	r7, #1
 800bcc4:	e7ea      	b.n	800bc9c <__mdiff+0xe0>
 800bcc6:	bf00      	nop
 800bcc8:	0800c8ac 	.word	0x0800c8ac
 800bccc:	0800c8bd 	.word	0x0800c8bd

0800bcd0 <__d2b>:
 800bcd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bcd4:	460f      	mov	r7, r1
 800bcd6:	2101      	movs	r1, #1
 800bcd8:	ec59 8b10 	vmov	r8, r9, d0
 800bcdc:	4616      	mov	r6, r2
 800bcde:	f7ff fcd5 	bl	800b68c <_Balloc>
 800bce2:	4604      	mov	r4, r0
 800bce4:	b930      	cbnz	r0, 800bcf4 <__d2b+0x24>
 800bce6:	4602      	mov	r2, r0
 800bce8:	4b24      	ldr	r3, [pc, #144]	; (800bd7c <__d2b+0xac>)
 800bcea:	4825      	ldr	r0, [pc, #148]	; (800bd80 <__d2b+0xb0>)
 800bcec:	f240 310f 	movw	r1, #783	; 0x30f
 800bcf0:	f000 fae0 	bl	800c2b4 <__assert_func>
 800bcf4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bcf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bcfc:	bb2d      	cbnz	r5, 800bd4a <__d2b+0x7a>
 800bcfe:	9301      	str	r3, [sp, #4]
 800bd00:	f1b8 0300 	subs.w	r3, r8, #0
 800bd04:	d026      	beq.n	800bd54 <__d2b+0x84>
 800bd06:	4668      	mov	r0, sp
 800bd08:	9300      	str	r3, [sp, #0]
 800bd0a:	f7ff fd87 	bl	800b81c <__lo0bits>
 800bd0e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bd12:	b1e8      	cbz	r0, 800bd50 <__d2b+0x80>
 800bd14:	f1c0 0320 	rsb	r3, r0, #32
 800bd18:	fa02 f303 	lsl.w	r3, r2, r3
 800bd1c:	430b      	orrs	r3, r1
 800bd1e:	40c2      	lsrs	r2, r0
 800bd20:	6163      	str	r3, [r4, #20]
 800bd22:	9201      	str	r2, [sp, #4]
 800bd24:	9b01      	ldr	r3, [sp, #4]
 800bd26:	61a3      	str	r3, [r4, #24]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	bf14      	ite	ne
 800bd2c:	2202      	movne	r2, #2
 800bd2e:	2201      	moveq	r2, #1
 800bd30:	6122      	str	r2, [r4, #16]
 800bd32:	b1bd      	cbz	r5, 800bd64 <__d2b+0x94>
 800bd34:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bd38:	4405      	add	r5, r0
 800bd3a:	603d      	str	r5, [r7, #0]
 800bd3c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bd40:	6030      	str	r0, [r6, #0]
 800bd42:	4620      	mov	r0, r4
 800bd44:	b003      	add	sp, #12
 800bd46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd4e:	e7d6      	b.n	800bcfe <__d2b+0x2e>
 800bd50:	6161      	str	r1, [r4, #20]
 800bd52:	e7e7      	b.n	800bd24 <__d2b+0x54>
 800bd54:	a801      	add	r0, sp, #4
 800bd56:	f7ff fd61 	bl	800b81c <__lo0bits>
 800bd5a:	9b01      	ldr	r3, [sp, #4]
 800bd5c:	6163      	str	r3, [r4, #20]
 800bd5e:	3020      	adds	r0, #32
 800bd60:	2201      	movs	r2, #1
 800bd62:	e7e5      	b.n	800bd30 <__d2b+0x60>
 800bd64:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bd68:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bd6c:	6038      	str	r0, [r7, #0]
 800bd6e:	6918      	ldr	r0, [r3, #16]
 800bd70:	f7ff fd34 	bl	800b7dc <__hi0bits>
 800bd74:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bd78:	e7e2      	b.n	800bd40 <__d2b+0x70>
 800bd7a:	bf00      	nop
 800bd7c:	0800c8ac 	.word	0x0800c8ac
 800bd80:	0800c8bd 	.word	0x0800c8bd

0800bd84 <__sfputc_r>:
 800bd84:	6893      	ldr	r3, [r2, #8]
 800bd86:	3b01      	subs	r3, #1
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	b410      	push	{r4}
 800bd8c:	6093      	str	r3, [r2, #8]
 800bd8e:	da08      	bge.n	800bda2 <__sfputc_r+0x1e>
 800bd90:	6994      	ldr	r4, [r2, #24]
 800bd92:	42a3      	cmp	r3, r4
 800bd94:	db01      	blt.n	800bd9a <__sfputc_r+0x16>
 800bd96:	290a      	cmp	r1, #10
 800bd98:	d103      	bne.n	800bda2 <__sfputc_r+0x1e>
 800bd9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd9e:	f000 b9e3 	b.w	800c168 <__swbuf_r>
 800bda2:	6813      	ldr	r3, [r2, #0]
 800bda4:	1c58      	adds	r0, r3, #1
 800bda6:	6010      	str	r0, [r2, #0]
 800bda8:	7019      	strb	r1, [r3, #0]
 800bdaa:	4608      	mov	r0, r1
 800bdac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bdb0:	4770      	bx	lr

0800bdb2 <__sfputs_r>:
 800bdb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdb4:	4606      	mov	r6, r0
 800bdb6:	460f      	mov	r7, r1
 800bdb8:	4614      	mov	r4, r2
 800bdba:	18d5      	adds	r5, r2, r3
 800bdbc:	42ac      	cmp	r4, r5
 800bdbe:	d101      	bne.n	800bdc4 <__sfputs_r+0x12>
 800bdc0:	2000      	movs	r0, #0
 800bdc2:	e007      	b.n	800bdd4 <__sfputs_r+0x22>
 800bdc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdc8:	463a      	mov	r2, r7
 800bdca:	4630      	mov	r0, r6
 800bdcc:	f7ff ffda 	bl	800bd84 <__sfputc_r>
 800bdd0:	1c43      	adds	r3, r0, #1
 800bdd2:	d1f3      	bne.n	800bdbc <__sfputs_r+0xa>
 800bdd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bdd8 <_vfiprintf_r>:
 800bdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bddc:	460d      	mov	r5, r1
 800bdde:	b09d      	sub	sp, #116	; 0x74
 800bde0:	4614      	mov	r4, r2
 800bde2:	4698      	mov	r8, r3
 800bde4:	4606      	mov	r6, r0
 800bde6:	b118      	cbz	r0, 800bdf0 <_vfiprintf_r+0x18>
 800bde8:	6a03      	ldr	r3, [r0, #32]
 800bdea:	b90b      	cbnz	r3, 800bdf0 <_vfiprintf_r+0x18>
 800bdec:	f7fe fbcc 	bl	800a588 <__sinit>
 800bdf0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bdf2:	07d9      	lsls	r1, r3, #31
 800bdf4:	d405      	bmi.n	800be02 <_vfiprintf_r+0x2a>
 800bdf6:	89ab      	ldrh	r3, [r5, #12]
 800bdf8:	059a      	lsls	r2, r3, #22
 800bdfa:	d402      	bmi.n	800be02 <_vfiprintf_r+0x2a>
 800bdfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bdfe:	f7fe fcba 	bl	800a776 <__retarget_lock_acquire_recursive>
 800be02:	89ab      	ldrh	r3, [r5, #12]
 800be04:	071b      	lsls	r3, r3, #28
 800be06:	d501      	bpl.n	800be0c <_vfiprintf_r+0x34>
 800be08:	692b      	ldr	r3, [r5, #16]
 800be0a:	b99b      	cbnz	r3, 800be34 <_vfiprintf_r+0x5c>
 800be0c:	4629      	mov	r1, r5
 800be0e:	4630      	mov	r0, r6
 800be10:	f000 f9e8 	bl	800c1e4 <__swsetup_r>
 800be14:	b170      	cbz	r0, 800be34 <_vfiprintf_r+0x5c>
 800be16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be18:	07dc      	lsls	r4, r3, #31
 800be1a:	d504      	bpl.n	800be26 <_vfiprintf_r+0x4e>
 800be1c:	f04f 30ff 	mov.w	r0, #4294967295
 800be20:	b01d      	add	sp, #116	; 0x74
 800be22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be26:	89ab      	ldrh	r3, [r5, #12]
 800be28:	0598      	lsls	r0, r3, #22
 800be2a:	d4f7      	bmi.n	800be1c <_vfiprintf_r+0x44>
 800be2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be2e:	f7fe fca3 	bl	800a778 <__retarget_lock_release_recursive>
 800be32:	e7f3      	b.n	800be1c <_vfiprintf_r+0x44>
 800be34:	2300      	movs	r3, #0
 800be36:	9309      	str	r3, [sp, #36]	; 0x24
 800be38:	2320      	movs	r3, #32
 800be3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be3e:	f8cd 800c 	str.w	r8, [sp, #12]
 800be42:	2330      	movs	r3, #48	; 0x30
 800be44:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bff8 <_vfiprintf_r+0x220>
 800be48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be4c:	f04f 0901 	mov.w	r9, #1
 800be50:	4623      	mov	r3, r4
 800be52:	469a      	mov	sl, r3
 800be54:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be58:	b10a      	cbz	r2, 800be5e <_vfiprintf_r+0x86>
 800be5a:	2a25      	cmp	r2, #37	; 0x25
 800be5c:	d1f9      	bne.n	800be52 <_vfiprintf_r+0x7a>
 800be5e:	ebba 0b04 	subs.w	fp, sl, r4
 800be62:	d00b      	beq.n	800be7c <_vfiprintf_r+0xa4>
 800be64:	465b      	mov	r3, fp
 800be66:	4622      	mov	r2, r4
 800be68:	4629      	mov	r1, r5
 800be6a:	4630      	mov	r0, r6
 800be6c:	f7ff ffa1 	bl	800bdb2 <__sfputs_r>
 800be70:	3001      	adds	r0, #1
 800be72:	f000 80a9 	beq.w	800bfc8 <_vfiprintf_r+0x1f0>
 800be76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be78:	445a      	add	r2, fp
 800be7a:	9209      	str	r2, [sp, #36]	; 0x24
 800be7c:	f89a 3000 	ldrb.w	r3, [sl]
 800be80:	2b00      	cmp	r3, #0
 800be82:	f000 80a1 	beq.w	800bfc8 <_vfiprintf_r+0x1f0>
 800be86:	2300      	movs	r3, #0
 800be88:	f04f 32ff 	mov.w	r2, #4294967295
 800be8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be90:	f10a 0a01 	add.w	sl, sl, #1
 800be94:	9304      	str	r3, [sp, #16]
 800be96:	9307      	str	r3, [sp, #28]
 800be98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be9c:	931a      	str	r3, [sp, #104]	; 0x68
 800be9e:	4654      	mov	r4, sl
 800bea0:	2205      	movs	r2, #5
 800bea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bea6:	4854      	ldr	r0, [pc, #336]	; (800bff8 <_vfiprintf_r+0x220>)
 800bea8:	f7f4 f97a 	bl	80001a0 <memchr>
 800beac:	9a04      	ldr	r2, [sp, #16]
 800beae:	b9d8      	cbnz	r0, 800bee8 <_vfiprintf_r+0x110>
 800beb0:	06d1      	lsls	r1, r2, #27
 800beb2:	bf44      	itt	mi
 800beb4:	2320      	movmi	r3, #32
 800beb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800beba:	0713      	lsls	r3, r2, #28
 800bebc:	bf44      	itt	mi
 800bebe:	232b      	movmi	r3, #43	; 0x2b
 800bec0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bec4:	f89a 3000 	ldrb.w	r3, [sl]
 800bec8:	2b2a      	cmp	r3, #42	; 0x2a
 800beca:	d015      	beq.n	800bef8 <_vfiprintf_r+0x120>
 800becc:	9a07      	ldr	r2, [sp, #28]
 800bece:	4654      	mov	r4, sl
 800bed0:	2000      	movs	r0, #0
 800bed2:	f04f 0c0a 	mov.w	ip, #10
 800bed6:	4621      	mov	r1, r4
 800bed8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bedc:	3b30      	subs	r3, #48	; 0x30
 800bede:	2b09      	cmp	r3, #9
 800bee0:	d94d      	bls.n	800bf7e <_vfiprintf_r+0x1a6>
 800bee2:	b1b0      	cbz	r0, 800bf12 <_vfiprintf_r+0x13a>
 800bee4:	9207      	str	r2, [sp, #28]
 800bee6:	e014      	b.n	800bf12 <_vfiprintf_r+0x13a>
 800bee8:	eba0 0308 	sub.w	r3, r0, r8
 800beec:	fa09 f303 	lsl.w	r3, r9, r3
 800bef0:	4313      	orrs	r3, r2
 800bef2:	9304      	str	r3, [sp, #16]
 800bef4:	46a2      	mov	sl, r4
 800bef6:	e7d2      	b.n	800be9e <_vfiprintf_r+0xc6>
 800bef8:	9b03      	ldr	r3, [sp, #12]
 800befa:	1d19      	adds	r1, r3, #4
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	9103      	str	r1, [sp, #12]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	bfbb      	ittet	lt
 800bf04:	425b      	neglt	r3, r3
 800bf06:	f042 0202 	orrlt.w	r2, r2, #2
 800bf0a:	9307      	strge	r3, [sp, #28]
 800bf0c:	9307      	strlt	r3, [sp, #28]
 800bf0e:	bfb8      	it	lt
 800bf10:	9204      	strlt	r2, [sp, #16]
 800bf12:	7823      	ldrb	r3, [r4, #0]
 800bf14:	2b2e      	cmp	r3, #46	; 0x2e
 800bf16:	d10c      	bne.n	800bf32 <_vfiprintf_r+0x15a>
 800bf18:	7863      	ldrb	r3, [r4, #1]
 800bf1a:	2b2a      	cmp	r3, #42	; 0x2a
 800bf1c:	d134      	bne.n	800bf88 <_vfiprintf_r+0x1b0>
 800bf1e:	9b03      	ldr	r3, [sp, #12]
 800bf20:	1d1a      	adds	r2, r3, #4
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	9203      	str	r2, [sp, #12]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	bfb8      	it	lt
 800bf2a:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf2e:	3402      	adds	r4, #2
 800bf30:	9305      	str	r3, [sp, #20]
 800bf32:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c008 <_vfiprintf_r+0x230>
 800bf36:	7821      	ldrb	r1, [r4, #0]
 800bf38:	2203      	movs	r2, #3
 800bf3a:	4650      	mov	r0, sl
 800bf3c:	f7f4 f930 	bl	80001a0 <memchr>
 800bf40:	b138      	cbz	r0, 800bf52 <_vfiprintf_r+0x17a>
 800bf42:	9b04      	ldr	r3, [sp, #16]
 800bf44:	eba0 000a 	sub.w	r0, r0, sl
 800bf48:	2240      	movs	r2, #64	; 0x40
 800bf4a:	4082      	lsls	r2, r0
 800bf4c:	4313      	orrs	r3, r2
 800bf4e:	3401      	adds	r4, #1
 800bf50:	9304      	str	r3, [sp, #16]
 800bf52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf56:	4829      	ldr	r0, [pc, #164]	; (800bffc <_vfiprintf_r+0x224>)
 800bf58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf5c:	2206      	movs	r2, #6
 800bf5e:	f7f4 f91f 	bl	80001a0 <memchr>
 800bf62:	2800      	cmp	r0, #0
 800bf64:	d03f      	beq.n	800bfe6 <_vfiprintf_r+0x20e>
 800bf66:	4b26      	ldr	r3, [pc, #152]	; (800c000 <_vfiprintf_r+0x228>)
 800bf68:	bb1b      	cbnz	r3, 800bfb2 <_vfiprintf_r+0x1da>
 800bf6a:	9b03      	ldr	r3, [sp, #12]
 800bf6c:	3307      	adds	r3, #7
 800bf6e:	f023 0307 	bic.w	r3, r3, #7
 800bf72:	3308      	adds	r3, #8
 800bf74:	9303      	str	r3, [sp, #12]
 800bf76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf78:	443b      	add	r3, r7
 800bf7a:	9309      	str	r3, [sp, #36]	; 0x24
 800bf7c:	e768      	b.n	800be50 <_vfiprintf_r+0x78>
 800bf7e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf82:	460c      	mov	r4, r1
 800bf84:	2001      	movs	r0, #1
 800bf86:	e7a6      	b.n	800bed6 <_vfiprintf_r+0xfe>
 800bf88:	2300      	movs	r3, #0
 800bf8a:	3401      	adds	r4, #1
 800bf8c:	9305      	str	r3, [sp, #20]
 800bf8e:	4619      	mov	r1, r3
 800bf90:	f04f 0c0a 	mov.w	ip, #10
 800bf94:	4620      	mov	r0, r4
 800bf96:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf9a:	3a30      	subs	r2, #48	; 0x30
 800bf9c:	2a09      	cmp	r2, #9
 800bf9e:	d903      	bls.n	800bfa8 <_vfiprintf_r+0x1d0>
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d0c6      	beq.n	800bf32 <_vfiprintf_r+0x15a>
 800bfa4:	9105      	str	r1, [sp, #20]
 800bfa6:	e7c4      	b.n	800bf32 <_vfiprintf_r+0x15a>
 800bfa8:	fb0c 2101 	mla	r1, ip, r1, r2
 800bfac:	4604      	mov	r4, r0
 800bfae:	2301      	movs	r3, #1
 800bfb0:	e7f0      	b.n	800bf94 <_vfiprintf_r+0x1bc>
 800bfb2:	ab03      	add	r3, sp, #12
 800bfb4:	9300      	str	r3, [sp, #0]
 800bfb6:	462a      	mov	r2, r5
 800bfb8:	4b12      	ldr	r3, [pc, #72]	; (800c004 <_vfiprintf_r+0x22c>)
 800bfba:	a904      	add	r1, sp, #16
 800bfbc:	4630      	mov	r0, r6
 800bfbe:	f7fd fe91 	bl	8009ce4 <_printf_float>
 800bfc2:	4607      	mov	r7, r0
 800bfc4:	1c78      	adds	r0, r7, #1
 800bfc6:	d1d6      	bne.n	800bf76 <_vfiprintf_r+0x19e>
 800bfc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bfca:	07d9      	lsls	r1, r3, #31
 800bfcc:	d405      	bmi.n	800bfda <_vfiprintf_r+0x202>
 800bfce:	89ab      	ldrh	r3, [r5, #12]
 800bfd0:	059a      	lsls	r2, r3, #22
 800bfd2:	d402      	bmi.n	800bfda <_vfiprintf_r+0x202>
 800bfd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bfd6:	f7fe fbcf 	bl	800a778 <__retarget_lock_release_recursive>
 800bfda:	89ab      	ldrh	r3, [r5, #12]
 800bfdc:	065b      	lsls	r3, r3, #25
 800bfde:	f53f af1d 	bmi.w	800be1c <_vfiprintf_r+0x44>
 800bfe2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bfe4:	e71c      	b.n	800be20 <_vfiprintf_r+0x48>
 800bfe6:	ab03      	add	r3, sp, #12
 800bfe8:	9300      	str	r3, [sp, #0]
 800bfea:	462a      	mov	r2, r5
 800bfec:	4b05      	ldr	r3, [pc, #20]	; (800c004 <_vfiprintf_r+0x22c>)
 800bfee:	a904      	add	r1, sp, #16
 800bff0:	4630      	mov	r0, r6
 800bff2:	f7fe f91b 	bl	800a22c <_printf_i>
 800bff6:	e7e4      	b.n	800bfc2 <_vfiprintf_r+0x1ea>
 800bff8:	0800ca14 	.word	0x0800ca14
 800bffc:	0800ca1e 	.word	0x0800ca1e
 800c000:	08009ce5 	.word	0x08009ce5
 800c004:	0800bdb3 	.word	0x0800bdb3
 800c008:	0800ca1a 	.word	0x0800ca1a

0800c00c <__sflush_r>:
 800c00c:	898a      	ldrh	r2, [r1, #12]
 800c00e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c012:	4605      	mov	r5, r0
 800c014:	0710      	lsls	r0, r2, #28
 800c016:	460c      	mov	r4, r1
 800c018:	d458      	bmi.n	800c0cc <__sflush_r+0xc0>
 800c01a:	684b      	ldr	r3, [r1, #4]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	dc05      	bgt.n	800c02c <__sflush_r+0x20>
 800c020:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c022:	2b00      	cmp	r3, #0
 800c024:	dc02      	bgt.n	800c02c <__sflush_r+0x20>
 800c026:	2000      	movs	r0, #0
 800c028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c02c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c02e:	2e00      	cmp	r6, #0
 800c030:	d0f9      	beq.n	800c026 <__sflush_r+0x1a>
 800c032:	2300      	movs	r3, #0
 800c034:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c038:	682f      	ldr	r7, [r5, #0]
 800c03a:	6a21      	ldr	r1, [r4, #32]
 800c03c:	602b      	str	r3, [r5, #0]
 800c03e:	d032      	beq.n	800c0a6 <__sflush_r+0x9a>
 800c040:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c042:	89a3      	ldrh	r3, [r4, #12]
 800c044:	075a      	lsls	r2, r3, #29
 800c046:	d505      	bpl.n	800c054 <__sflush_r+0x48>
 800c048:	6863      	ldr	r3, [r4, #4]
 800c04a:	1ac0      	subs	r0, r0, r3
 800c04c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c04e:	b10b      	cbz	r3, 800c054 <__sflush_r+0x48>
 800c050:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c052:	1ac0      	subs	r0, r0, r3
 800c054:	2300      	movs	r3, #0
 800c056:	4602      	mov	r2, r0
 800c058:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c05a:	6a21      	ldr	r1, [r4, #32]
 800c05c:	4628      	mov	r0, r5
 800c05e:	47b0      	blx	r6
 800c060:	1c43      	adds	r3, r0, #1
 800c062:	89a3      	ldrh	r3, [r4, #12]
 800c064:	d106      	bne.n	800c074 <__sflush_r+0x68>
 800c066:	6829      	ldr	r1, [r5, #0]
 800c068:	291d      	cmp	r1, #29
 800c06a:	d82b      	bhi.n	800c0c4 <__sflush_r+0xb8>
 800c06c:	4a29      	ldr	r2, [pc, #164]	; (800c114 <__sflush_r+0x108>)
 800c06e:	410a      	asrs	r2, r1
 800c070:	07d6      	lsls	r6, r2, #31
 800c072:	d427      	bmi.n	800c0c4 <__sflush_r+0xb8>
 800c074:	2200      	movs	r2, #0
 800c076:	6062      	str	r2, [r4, #4]
 800c078:	04d9      	lsls	r1, r3, #19
 800c07a:	6922      	ldr	r2, [r4, #16]
 800c07c:	6022      	str	r2, [r4, #0]
 800c07e:	d504      	bpl.n	800c08a <__sflush_r+0x7e>
 800c080:	1c42      	adds	r2, r0, #1
 800c082:	d101      	bne.n	800c088 <__sflush_r+0x7c>
 800c084:	682b      	ldr	r3, [r5, #0]
 800c086:	b903      	cbnz	r3, 800c08a <__sflush_r+0x7e>
 800c088:	6560      	str	r0, [r4, #84]	; 0x54
 800c08a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c08c:	602f      	str	r7, [r5, #0]
 800c08e:	2900      	cmp	r1, #0
 800c090:	d0c9      	beq.n	800c026 <__sflush_r+0x1a>
 800c092:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c096:	4299      	cmp	r1, r3
 800c098:	d002      	beq.n	800c0a0 <__sflush_r+0x94>
 800c09a:	4628      	mov	r0, r5
 800c09c:	f7ff f9f6 	bl	800b48c <_free_r>
 800c0a0:	2000      	movs	r0, #0
 800c0a2:	6360      	str	r0, [r4, #52]	; 0x34
 800c0a4:	e7c0      	b.n	800c028 <__sflush_r+0x1c>
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	4628      	mov	r0, r5
 800c0aa:	47b0      	blx	r6
 800c0ac:	1c41      	adds	r1, r0, #1
 800c0ae:	d1c8      	bne.n	800c042 <__sflush_r+0x36>
 800c0b0:	682b      	ldr	r3, [r5, #0]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d0c5      	beq.n	800c042 <__sflush_r+0x36>
 800c0b6:	2b1d      	cmp	r3, #29
 800c0b8:	d001      	beq.n	800c0be <__sflush_r+0xb2>
 800c0ba:	2b16      	cmp	r3, #22
 800c0bc:	d101      	bne.n	800c0c2 <__sflush_r+0xb6>
 800c0be:	602f      	str	r7, [r5, #0]
 800c0c0:	e7b1      	b.n	800c026 <__sflush_r+0x1a>
 800c0c2:	89a3      	ldrh	r3, [r4, #12]
 800c0c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0c8:	81a3      	strh	r3, [r4, #12]
 800c0ca:	e7ad      	b.n	800c028 <__sflush_r+0x1c>
 800c0cc:	690f      	ldr	r7, [r1, #16]
 800c0ce:	2f00      	cmp	r7, #0
 800c0d0:	d0a9      	beq.n	800c026 <__sflush_r+0x1a>
 800c0d2:	0793      	lsls	r3, r2, #30
 800c0d4:	680e      	ldr	r6, [r1, #0]
 800c0d6:	bf08      	it	eq
 800c0d8:	694b      	ldreq	r3, [r1, #20]
 800c0da:	600f      	str	r7, [r1, #0]
 800c0dc:	bf18      	it	ne
 800c0de:	2300      	movne	r3, #0
 800c0e0:	eba6 0807 	sub.w	r8, r6, r7
 800c0e4:	608b      	str	r3, [r1, #8]
 800c0e6:	f1b8 0f00 	cmp.w	r8, #0
 800c0ea:	dd9c      	ble.n	800c026 <__sflush_r+0x1a>
 800c0ec:	6a21      	ldr	r1, [r4, #32]
 800c0ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c0f0:	4643      	mov	r3, r8
 800c0f2:	463a      	mov	r2, r7
 800c0f4:	4628      	mov	r0, r5
 800c0f6:	47b0      	blx	r6
 800c0f8:	2800      	cmp	r0, #0
 800c0fa:	dc06      	bgt.n	800c10a <__sflush_r+0xfe>
 800c0fc:	89a3      	ldrh	r3, [r4, #12]
 800c0fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c102:	81a3      	strh	r3, [r4, #12]
 800c104:	f04f 30ff 	mov.w	r0, #4294967295
 800c108:	e78e      	b.n	800c028 <__sflush_r+0x1c>
 800c10a:	4407      	add	r7, r0
 800c10c:	eba8 0800 	sub.w	r8, r8, r0
 800c110:	e7e9      	b.n	800c0e6 <__sflush_r+0xda>
 800c112:	bf00      	nop
 800c114:	dfbffffe 	.word	0xdfbffffe

0800c118 <_fflush_r>:
 800c118:	b538      	push	{r3, r4, r5, lr}
 800c11a:	690b      	ldr	r3, [r1, #16]
 800c11c:	4605      	mov	r5, r0
 800c11e:	460c      	mov	r4, r1
 800c120:	b913      	cbnz	r3, 800c128 <_fflush_r+0x10>
 800c122:	2500      	movs	r5, #0
 800c124:	4628      	mov	r0, r5
 800c126:	bd38      	pop	{r3, r4, r5, pc}
 800c128:	b118      	cbz	r0, 800c132 <_fflush_r+0x1a>
 800c12a:	6a03      	ldr	r3, [r0, #32]
 800c12c:	b90b      	cbnz	r3, 800c132 <_fflush_r+0x1a>
 800c12e:	f7fe fa2b 	bl	800a588 <__sinit>
 800c132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d0f3      	beq.n	800c122 <_fflush_r+0xa>
 800c13a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c13c:	07d0      	lsls	r0, r2, #31
 800c13e:	d404      	bmi.n	800c14a <_fflush_r+0x32>
 800c140:	0599      	lsls	r1, r3, #22
 800c142:	d402      	bmi.n	800c14a <_fflush_r+0x32>
 800c144:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c146:	f7fe fb16 	bl	800a776 <__retarget_lock_acquire_recursive>
 800c14a:	4628      	mov	r0, r5
 800c14c:	4621      	mov	r1, r4
 800c14e:	f7ff ff5d 	bl	800c00c <__sflush_r>
 800c152:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c154:	07da      	lsls	r2, r3, #31
 800c156:	4605      	mov	r5, r0
 800c158:	d4e4      	bmi.n	800c124 <_fflush_r+0xc>
 800c15a:	89a3      	ldrh	r3, [r4, #12]
 800c15c:	059b      	lsls	r3, r3, #22
 800c15e:	d4e1      	bmi.n	800c124 <_fflush_r+0xc>
 800c160:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c162:	f7fe fb09 	bl	800a778 <__retarget_lock_release_recursive>
 800c166:	e7dd      	b.n	800c124 <_fflush_r+0xc>

0800c168 <__swbuf_r>:
 800c168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c16a:	460e      	mov	r6, r1
 800c16c:	4614      	mov	r4, r2
 800c16e:	4605      	mov	r5, r0
 800c170:	b118      	cbz	r0, 800c17a <__swbuf_r+0x12>
 800c172:	6a03      	ldr	r3, [r0, #32]
 800c174:	b90b      	cbnz	r3, 800c17a <__swbuf_r+0x12>
 800c176:	f7fe fa07 	bl	800a588 <__sinit>
 800c17a:	69a3      	ldr	r3, [r4, #24]
 800c17c:	60a3      	str	r3, [r4, #8]
 800c17e:	89a3      	ldrh	r3, [r4, #12]
 800c180:	071a      	lsls	r2, r3, #28
 800c182:	d525      	bpl.n	800c1d0 <__swbuf_r+0x68>
 800c184:	6923      	ldr	r3, [r4, #16]
 800c186:	b31b      	cbz	r3, 800c1d0 <__swbuf_r+0x68>
 800c188:	6823      	ldr	r3, [r4, #0]
 800c18a:	6922      	ldr	r2, [r4, #16]
 800c18c:	1a98      	subs	r0, r3, r2
 800c18e:	6963      	ldr	r3, [r4, #20]
 800c190:	b2f6      	uxtb	r6, r6
 800c192:	4283      	cmp	r3, r0
 800c194:	4637      	mov	r7, r6
 800c196:	dc04      	bgt.n	800c1a2 <__swbuf_r+0x3a>
 800c198:	4621      	mov	r1, r4
 800c19a:	4628      	mov	r0, r5
 800c19c:	f7ff ffbc 	bl	800c118 <_fflush_r>
 800c1a0:	b9e0      	cbnz	r0, 800c1dc <__swbuf_r+0x74>
 800c1a2:	68a3      	ldr	r3, [r4, #8]
 800c1a4:	3b01      	subs	r3, #1
 800c1a6:	60a3      	str	r3, [r4, #8]
 800c1a8:	6823      	ldr	r3, [r4, #0]
 800c1aa:	1c5a      	adds	r2, r3, #1
 800c1ac:	6022      	str	r2, [r4, #0]
 800c1ae:	701e      	strb	r6, [r3, #0]
 800c1b0:	6962      	ldr	r2, [r4, #20]
 800c1b2:	1c43      	adds	r3, r0, #1
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	d004      	beq.n	800c1c2 <__swbuf_r+0x5a>
 800c1b8:	89a3      	ldrh	r3, [r4, #12]
 800c1ba:	07db      	lsls	r3, r3, #31
 800c1bc:	d506      	bpl.n	800c1cc <__swbuf_r+0x64>
 800c1be:	2e0a      	cmp	r6, #10
 800c1c0:	d104      	bne.n	800c1cc <__swbuf_r+0x64>
 800c1c2:	4621      	mov	r1, r4
 800c1c4:	4628      	mov	r0, r5
 800c1c6:	f7ff ffa7 	bl	800c118 <_fflush_r>
 800c1ca:	b938      	cbnz	r0, 800c1dc <__swbuf_r+0x74>
 800c1cc:	4638      	mov	r0, r7
 800c1ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1d0:	4621      	mov	r1, r4
 800c1d2:	4628      	mov	r0, r5
 800c1d4:	f000 f806 	bl	800c1e4 <__swsetup_r>
 800c1d8:	2800      	cmp	r0, #0
 800c1da:	d0d5      	beq.n	800c188 <__swbuf_r+0x20>
 800c1dc:	f04f 37ff 	mov.w	r7, #4294967295
 800c1e0:	e7f4      	b.n	800c1cc <__swbuf_r+0x64>
	...

0800c1e4 <__swsetup_r>:
 800c1e4:	b538      	push	{r3, r4, r5, lr}
 800c1e6:	4b2a      	ldr	r3, [pc, #168]	; (800c290 <__swsetup_r+0xac>)
 800c1e8:	4605      	mov	r5, r0
 800c1ea:	6818      	ldr	r0, [r3, #0]
 800c1ec:	460c      	mov	r4, r1
 800c1ee:	b118      	cbz	r0, 800c1f8 <__swsetup_r+0x14>
 800c1f0:	6a03      	ldr	r3, [r0, #32]
 800c1f2:	b90b      	cbnz	r3, 800c1f8 <__swsetup_r+0x14>
 800c1f4:	f7fe f9c8 	bl	800a588 <__sinit>
 800c1f8:	89a3      	ldrh	r3, [r4, #12]
 800c1fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c1fe:	0718      	lsls	r0, r3, #28
 800c200:	d422      	bmi.n	800c248 <__swsetup_r+0x64>
 800c202:	06d9      	lsls	r1, r3, #27
 800c204:	d407      	bmi.n	800c216 <__swsetup_r+0x32>
 800c206:	2309      	movs	r3, #9
 800c208:	602b      	str	r3, [r5, #0]
 800c20a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c20e:	81a3      	strh	r3, [r4, #12]
 800c210:	f04f 30ff 	mov.w	r0, #4294967295
 800c214:	e034      	b.n	800c280 <__swsetup_r+0x9c>
 800c216:	0758      	lsls	r0, r3, #29
 800c218:	d512      	bpl.n	800c240 <__swsetup_r+0x5c>
 800c21a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c21c:	b141      	cbz	r1, 800c230 <__swsetup_r+0x4c>
 800c21e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c222:	4299      	cmp	r1, r3
 800c224:	d002      	beq.n	800c22c <__swsetup_r+0x48>
 800c226:	4628      	mov	r0, r5
 800c228:	f7ff f930 	bl	800b48c <_free_r>
 800c22c:	2300      	movs	r3, #0
 800c22e:	6363      	str	r3, [r4, #52]	; 0x34
 800c230:	89a3      	ldrh	r3, [r4, #12]
 800c232:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c236:	81a3      	strh	r3, [r4, #12]
 800c238:	2300      	movs	r3, #0
 800c23a:	6063      	str	r3, [r4, #4]
 800c23c:	6923      	ldr	r3, [r4, #16]
 800c23e:	6023      	str	r3, [r4, #0]
 800c240:	89a3      	ldrh	r3, [r4, #12]
 800c242:	f043 0308 	orr.w	r3, r3, #8
 800c246:	81a3      	strh	r3, [r4, #12]
 800c248:	6923      	ldr	r3, [r4, #16]
 800c24a:	b94b      	cbnz	r3, 800c260 <__swsetup_r+0x7c>
 800c24c:	89a3      	ldrh	r3, [r4, #12]
 800c24e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c252:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c256:	d003      	beq.n	800c260 <__swsetup_r+0x7c>
 800c258:	4621      	mov	r1, r4
 800c25a:	4628      	mov	r0, r5
 800c25c:	f000 f8b6 	bl	800c3cc <__smakebuf_r>
 800c260:	89a0      	ldrh	r0, [r4, #12]
 800c262:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c266:	f010 0301 	ands.w	r3, r0, #1
 800c26a:	d00a      	beq.n	800c282 <__swsetup_r+0x9e>
 800c26c:	2300      	movs	r3, #0
 800c26e:	60a3      	str	r3, [r4, #8]
 800c270:	6963      	ldr	r3, [r4, #20]
 800c272:	425b      	negs	r3, r3
 800c274:	61a3      	str	r3, [r4, #24]
 800c276:	6923      	ldr	r3, [r4, #16]
 800c278:	b943      	cbnz	r3, 800c28c <__swsetup_r+0xa8>
 800c27a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c27e:	d1c4      	bne.n	800c20a <__swsetup_r+0x26>
 800c280:	bd38      	pop	{r3, r4, r5, pc}
 800c282:	0781      	lsls	r1, r0, #30
 800c284:	bf58      	it	pl
 800c286:	6963      	ldrpl	r3, [r4, #20]
 800c288:	60a3      	str	r3, [r4, #8]
 800c28a:	e7f4      	b.n	800c276 <__swsetup_r+0x92>
 800c28c:	2000      	movs	r0, #0
 800c28e:	e7f7      	b.n	800c280 <__swsetup_r+0x9c>
 800c290:	200000a4 	.word	0x200000a4

0800c294 <_sbrk_r>:
 800c294:	b538      	push	{r3, r4, r5, lr}
 800c296:	4d06      	ldr	r5, [pc, #24]	; (800c2b0 <_sbrk_r+0x1c>)
 800c298:	2300      	movs	r3, #0
 800c29a:	4604      	mov	r4, r0
 800c29c:	4608      	mov	r0, r1
 800c29e:	602b      	str	r3, [r5, #0]
 800c2a0:	f7f6 fdd0 	bl	8002e44 <_sbrk>
 800c2a4:	1c43      	adds	r3, r0, #1
 800c2a6:	d102      	bne.n	800c2ae <_sbrk_r+0x1a>
 800c2a8:	682b      	ldr	r3, [r5, #0]
 800c2aa:	b103      	cbz	r3, 800c2ae <_sbrk_r+0x1a>
 800c2ac:	6023      	str	r3, [r4, #0]
 800c2ae:	bd38      	pop	{r3, r4, r5, pc}
 800c2b0:	2000089c 	.word	0x2000089c

0800c2b4 <__assert_func>:
 800c2b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c2b6:	4614      	mov	r4, r2
 800c2b8:	461a      	mov	r2, r3
 800c2ba:	4b09      	ldr	r3, [pc, #36]	; (800c2e0 <__assert_func+0x2c>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	4605      	mov	r5, r0
 800c2c0:	68d8      	ldr	r0, [r3, #12]
 800c2c2:	b14c      	cbz	r4, 800c2d8 <__assert_func+0x24>
 800c2c4:	4b07      	ldr	r3, [pc, #28]	; (800c2e4 <__assert_func+0x30>)
 800c2c6:	9100      	str	r1, [sp, #0]
 800c2c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c2cc:	4906      	ldr	r1, [pc, #24]	; (800c2e8 <__assert_func+0x34>)
 800c2ce:	462b      	mov	r3, r5
 800c2d0:	f000 f844 	bl	800c35c <fiprintf>
 800c2d4:	f000 f8d8 	bl	800c488 <abort>
 800c2d8:	4b04      	ldr	r3, [pc, #16]	; (800c2ec <__assert_func+0x38>)
 800c2da:	461c      	mov	r4, r3
 800c2dc:	e7f3      	b.n	800c2c6 <__assert_func+0x12>
 800c2de:	bf00      	nop
 800c2e0:	200000a4 	.word	0x200000a4
 800c2e4:	0800ca2f 	.word	0x0800ca2f
 800c2e8:	0800ca3c 	.word	0x0800ca3c
 800c2ec:	0800ca6a 	.word	0x0800ca6a

0800c2f0 <_calloc_r>:
 800c2f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c2f2:	fba1 2402 	umull	r2, r4, r1, r2
 800c2f6:	b94c      	cbnz	r4, 800c30c <_calloc_r+0x1c>
 800c2f8:	4611      	mov	r1, r2
 800c2fa:	9201      	str	r2, [sp, #4]
 800c2fc:	f7ff f93a 	bl	800b574 <_malloc_r>
 800c300:	9a01      	ldr	r2, [sp, #4]
 800c302:	4605      	mov	r5, r0
 800c304:	b930      	cbnz	r0, 800c314 <_calloc_r+0x24>
 800c306:	4628      	mov	r0, r5
 800c308:	b003      	add	sp, #12
 800c30a:	bd30      	pop	{r4, r5, pc}
 800c30c:	220c      	movs	r2, #12
 800c30e:	6002      	str	r2, [r0, #0]
 800c310:	2500      	movs	r5, #0
 800c312:	e7f8      	b.n	800c306 <_calloc_r+0x16>
 800c314:	4621      	mov	r1, r4
 800c316:	f7fe f9b0 	bl	800a67a <memset>
 800c31a:	e7f4      	b.n	800c306 <_calloc_r+0x16>

0800c31c <__ascii_mbtowc>:
 800c31c:	b082      	sub	sp, #8
 800c31e:	b901      	cbnz	r1, 800c322 <__ascii_mbtowc+0x6>
 800c320:	a901      	add	r1, sp, #4
 800c322:	b142      	cbz	r2, 800c336 <__ascii_mbtowc+0x1a>
 800c324:	b14b      	cbz	r3, 800c33a <__ascii_mbtowc+0x1e>
 800c326:	7813      	ldrb	r3, [r2, #0]
 800c328:	600b      	str	r3, [r1, #0]
 800c32a:	7812      	ldrb	r2, [r2, #0]
 800c32c:	1e10      	subs	r0, r2, #0
 800c32e:	bf18      	it	ne
 800c330:	2001      	movne	r0, #1
 800c332:	b002      	add	sp, #8
 800c334:	4770      	bx	lr
 800c336:	4610      	mov	r0, r2
 800c338:	e7fb      	b.n	800c332 <__ascii_mbtowc+0x16>
 800c33a:	f06f 0001 	mvn.w	r0, #1
 800c33e:	e7f8      	b.n	800c332 <__ascii_mbtowc+0x16>

0800c340 <__ascii_wctomb>:
 800c340:	b149      	cbz	r1, 800c356 <__ascii_wctomb+0x16>
 800c342:	2aff      	cmp	r2, #255	; 0xff
 800c344:	bf85      	ittet	hi
 800c346:	238a      	movhi	r3, #138	; 0x8a
 800c348:	6003      	strhi	r3, [r0, #0]
 800c34a:	700a      	strbls	r2, [r1, #0]
 800c34c:	f04f 30ff 	movhi.w	r0, #4294967295
 800c350:	bf98      	it	ls
 800c352:	2001      	movls	r0, #1
 800c354:	4770      	bx	lr
 800c356:	4608      	mov	r0, r1
 800c358:	4770      	bx	lr
	...

0800c35c <fiprintf>:
 800c35c:	b40e      	push	{r1, r2, r3}
 800c35e:	b503      	push	{r0, r1, lr}
 800c360:	4601      	mov	r1, r0
 800c362:	ab03      	add	r3, sp, #12
 800c364:	4805      	ldr	r0, [pc, #20]	; (800c37c <fiprintf+0x20>)
 800c366:	f853 2b04 	ldr.w	r2, [r3], #4
 800c36a:	6800      	ldr	r0, [r0, #0]
 800c36c:	9301      	str	r3, [sp, #4]
 800c36e:	f7ff fd33 	bl	800bdd8 <_vfiprintf_r>
 800c372:	b002      	add	sp, #8
 800c374:	f85d eb04 	ldr.w	lr, [sp], #4
 800c378:	b003      	add	sp, #12
 800c37a:	4770      	bx	lr
 800c37c:	200000a4 	.word	0x200000a4

0800c380 <__swhatbuf_r>:
 800c380:	b570      	push	{r4, r5, r6, lr}
 800c382:	460c      	mov	r4, r1
 800c384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c388:	2900      	cmp	r1, #0
 800c38a:	b096      	sub	sp, #88	; 0x58
 800c38c:	4615      	mov	r5, r2
 800c38e:	461e      	mov	r6, r3
 800c390:	da0d      	bge.n	800c3ae <__swhatbuf_r+0x2e>
 800c392:	89a3      	ldrh	r3, [r4, #12]
 800c394:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c398:	f04f 0100 	mov.w	r1, #0
 800c39c:	bf0c      	ite	eq
 800c39e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c3a2:	2340      	movne	r3, #64	; 0x40
 800c3a4:	2000      	movs	r0, #0
 800c3a6:	6031      	str	r1, [r6, #0]
 800c3a8:	602b      	str	r3, [r5, #0]
 800c3aa:	b016      	add	sp, #88	; 0x58
 800c3ac:	bd70      	pop	{r4, r5, r6, pc}
 800c3ae:	466a      	mov	r2, sp
 800c3b0:	f000 f848 	bl	800c444 <_fstat_r>
 800c3b4:	2800      	cmp	r0, #0
 800c3b6:	dbec      	blt.n	800c392 <__swhatbuf_r+0x12>
 800c3b8:	9901      	ldr	r1, [sp, #4]
 800c3ba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c3be:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c3c2:	4259      	negs	r1, r3
 800c3c4:	4159      	adcs	r1, r3
 800c3c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3ca:	e7eb      	b.n	800c3a4 <__swhatbuf_r+0x24>

0800c3cc <__smakebuf_r>:
 800c3cc:	898b      	ldrh	r3, [r1, #12]
 800c3ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c3d0:	079d      	lsls	r5, r3, #30
 800c3d2:	4606      	mov	r6, r0
 800c3d4:	460c      	mov	r4, r1
 800c3d6:	d507      	bpl.n	800c3e8 <__smakebuf_r+0x1c>
 800c3d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c3dc:	6023      	str	r3, [r4, #0]
 800c3de:	6123      	str	r3, [r4, #16]
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	6163      	str	r3, [r4, #20]
 800c3e4:	b002      	add	sp, #8
 800c3e6:	bd70      	pop	{r4, r5, r6, pc}
 800c3e8:	ab01      	add	r3, sp, #4
 800c3ea:	466a      	mov	r2, sp
 800c3ec:	f7ff ffc8 	bl	800c380 <__swhatbuf_r>
 800c3f0:	9900      	ldr	r1, [sp, #0]
 800c3f2:	4605      	mov	r5, r0
 800c3f4:	4630      	mov	r0, r6
 800c3f6:	f7ff f8bd 	bl	800b574 <_malloc_r>
 800c3fa:	b948      	cbnz	r0, 800c410 <__smakebuf_r+0x44>
 800c3fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c400:	059a      	lsls	r2, r3, #22
 800c402:	d4ef      	bmi.n	800c3e4 <__smakebuf_r+0x18>
 800c404:	f023 0303 	bic.w	r3, r3, #3
 800c408:	f043 0302 	orr.w	r3, r3, #2
 800c40c:	81a3      	strh	r3, [r4, #12]
 800c40e:	e7e3      	b.n	800c3d8 <__smakebuf_r+0xc>
 800c410:	89a3      	ldrh	r3, [r4, #12]
 800c412:	6020      	str	r0, [r4, #0]
 800c414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c418:	81a3      	strh	r3, [r4, #12]
 800c41a:	9b00      	ldr	r3, [sp, #0]
 800c41c:	6163      	str	r3, [r4, #20]
 800c41e:	9b01      	ldr	r3, [sp, #4]
 800c420:	6120      	str	r0, [r4, #16]
 800c422:	b15b      	cbz	r3, 800c43c <__smakebuf_r+0x70>
 800c424:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c428:	4630      	mov	r0, r6
 800c42a:	f000 f81d 	bl	800c468 <_isatty_r>
 800c42e:	b128      	cbz	r0, 800c43c <__smakebuf_r+0x70>
 800c430:	89a3      	ldrh	r3, [r4, #12]
 800c432:	f023 0303 	bic.w	r3, r3, #3
 800c436:	f043 0301 	orr.w	r3, r3, #1
 800c43a:	81a3      	strh	r3, [r4, #12]
 800c43c:	89a3      	ldrh	r3, [r4, #12]
 800c43e:	431d      	orrs	r5, r3
 800c440:	81a5      	strh	r5, [r4, #12]
 800c442:	e7cf      	b.n	800c3e4 <__smakebuf_r+0x18>

0800c444 <_fstat_r>:
 800c444:	b538      	push	{r3, r4, r5, lr}
 800c446:	4d07      	ldr	r5, [pc, #28]	; (800c464 <_fstat_r+0x20>)
 800c448:	2300      	movs	r3, #0
 800c44a:	4604      	mov	r4, r0
 800c44c:	4608      	mov	r0, r1
 800c44e:	4611      	mov	r1, r2
 800c450:	602b      	str	r3, [r5, #0]
 800c452:	f7f6 fccf 	bl	8002df4 <_fstat>
 800c456:	1c43      	adds	r3, r0, #1
 800c458:	d102      	bne.n	800c460 <_fstat_r+0x1c>
 800c45a:	682b      	ldr	r3, [r5, #0]
 800c45c:	b103      	cbz	r3, 800c460 <_fstat_r+0x1c>
 800c45e:	6023      	str	r3, [r4, #0]
 800c460:	bd38      	pop	{r3, r4, r5, pc}
 800c462:	bf00      	nop
 800c464:	2000089c 	.word	0x2000089c

0800c468 <_isatty_r>:
 800c468:	b538      	push	{r3, r4, r5, lr}
 800c46a:	4d06      	ldr	r5, [pc, #24]	; (800c484 <_isatty_r+0x1c>)
 800c46c:	2300      	movs	r3, #0
 800c46e:	4604      	mov	r4, r0
 800c470:	4608      	mov	r0, r1
 800c472:	602b      	str	r3, [r5, #0]
 800c474:	f7f6 fcce 	bl	8002e14 <_isatty>
 800c478:	1c43      	adds	r3, r0, #1
 800c47a:	d102      	bne.n	800c482 <_isatty_r+0x1a>
 800c47c:	682b      	ldr	r3, [r5, #0]
 800c47e:	b103      	cbz	r3, 800c482 <_isatty_r+0x1a>
 800c480:	6023      	str	r3, [r4, #0]
 800c482:	bd38      	pop	{r3, r4, r5, pc}
 800c484:	2000089c 	.word	0x2000089c

0800c488 <abort>:
 800c488:	b508      	push	{r3, lr}
 800c48a:	2006      	movs	r0, #6
 800c48c:	f000 f82c 	bl	800c4e8 <raise>
 800c490:	2001      	movs	r0, #1
 800c492:	f7f6 fc60 	bl	8002d56 <_exit>

0800c496 <_raise_r>:
 800c496:	291f      	cmp	r1, #31
 800c498:	b538      	push	{r3, r4, r5, lr}
 800c49a:	4604      	mov	r4, r0
 800c49c:	460d      	mov	r5, r1
 800c49e:	d904      	bls.n	800c4aa <_raise_r+0x14>
 800c4a0:	2316      	movs	r3, #22
 800c4a2:	6003      	str	r3, [r0, #0]
 800c4a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c4a8:	bd38      	pop	{r3, r4, r5, pc}
 800c4aa:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c4ac:	b112      	cbz	r2, 800c4b4 <_raise_r+0x1e>
 800c4ae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c4b2:	b94b      	cbnz	r3, 800c4c8 <_raise_r+0x32>
 800c4b4:	4620      	mov	r0, r4
 800c4b6:	f000 f831 	bl	800c51c <_getpid_r>
 800c4ba:	462a      	mov	r2, r5
 800c4bc:	4601      	mov	r1, r0
 800c4be:	4620      	mov	r0, r4
 800c4c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4c4:	f000 b818 	b.w	800c4f8 <_kill_r>
 800c4c8:	2b01      	cmp	r3, #1
 800c4ca:	d00a      	beq.n	800c4e2 <_raise_r+0x4c>
 800c4cc:	1c59      	adds	r1, r3, #1
 800c4ce:	d103      	bne.n	800c4d8 <_raise_r+0x42>
 800c4d0:	2316      	movs	r3, #22
 800c4d2:	6003      	str	r3, [r0, #0]
 800c4d4:	2001      	movs	r0, #1
 800c4d6:	e7e7      	b.n	800c4a8 <_raise_r+0x12>
 800c4d8:	2400      	movs	r4, #0
 800c4da:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c4de:	4628      	mov	r0, r5
 800c4e0:	4798      	blx	r3
 800c4e2:	2000      	movs	r0, #0
 800c4e4:	e7e0      	b.n	800c4a8 <_raise_r+0x12>
	...

0800c4e8 <raise>:
 800c4e8:	4b02      	ldr	r3, [pc, #8]	; (800c4f4 <raise+0xc>)
 800c4ea:	4601      	mov	r1, r0
 800c4ec:	6818      	ldr	r0, [r3, #0]
 800c4ee:	f7ff bfd2 	b.w	800c496 <_raise_r>
 800c4f2:	bf00      	nop
 800c4f4:	200000a4 	.word	0x200000a4

0800c4f8 <_kill_r>:
 800c4f8:	b538      	push	{r3, r4, r5, lr}
 800c4fa:	4d07      	ldr	r5, [pc, #28]	; (800c518 <_kill_r+0x20>)
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	4604      	mov	r4, r0
 800c500:	4608      	mov	r0, r1
 800c502:	4611      	mov	r1, r2
 800c504:	602b      	str	r3, [r5, #0]
 800c506:	f7f6 fc16 	bl	8002d36 <_kill>
 800c50a:	1c43      	adds	r3, r0, #1
 800c50c:	d102      	bne.n	800c514 <_kill_r+0x1c>
 800c50e:	682b      	ldr	r3, [r5, #0]
 800c510:	b103      	cbz	r3, 800c514 <_kill_r+0x1c>
 800c512:	6023      	str	r3, [r4, #0]
 800c514:	bd38      	pop	{r3, r4, r5, pc}
 800c516:	bf00      	nop
 800c518:	2000089c 	.word	0x2000089c

0800c51c <_getpid_r>:
 800c51c:	f7f6 bc03 	b.w	8002d26 <_getpid>

0800c520 <_init>:
 800c520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c522:	bf00      	nop
 800c524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c526:	bc08      	pop	{r3}
 800c528:	469e      	mov	lr, r3
 800c52a:	4770      	bx	lr

0800c52c <_fini>:
 800c52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c52e:	bf00      	nop
 800c530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c532:	bc08      	pop	{r3}
 800c534:	469e      	mov	lr, r3
 800c536:	4770      	bx	lr
