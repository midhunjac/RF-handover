
BLE_p2pServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f424  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a8c  0800f568  0800f568  0001f568  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010ff4  08010ff4  00020ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010ffc  08010ffc  00020ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08011000  08011000  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000224  20000008  08011004  00030008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000025  2000022c  08011228  0003022c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000254  0801124d  00030254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000168c  20000268  0801125e  00030268  2**2
                  ALLOC
 10 ._user_heap_stack 00001404  200018f4  0801125e  000318f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030265  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 13 MB_MEM1       000001bc  20030028  20030028  00040000  2**2
                  ALLOC
 14 MB_MEM2       00000883  200301e4  200301e4  00040000  2**2
                  ALLOC
 15 .comment      00000043  00000000  00000000  00030295  2**0
                  CONTENTS, READONLY
 16 .debug_info   0002e0b1  00000000  00000000  000302d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00006bc3  00000000  00000000  0005e389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002820  00000000  00000000  00064f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00001ea5  00000000  00000000  00067770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00028a6a  00000000  00000000  00069615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00032904  00000000  00000000  0009207f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000d7ba9  00000000  00000000  000c4983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000b630  00000000  00000000  0019c52c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 000000c8  00000000  00000000  001a7b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000268 	.word	0x20000268
 800015c:	00000000 	.word	0x00000000
 8000160:	0800f54c 	.word	0x0800f54c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000026c 	.word	0x2000026c
 800017c:	0800f54c 	.word	0x0800f54c

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr
	...

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	; 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_uldivmod>:
 8000b78:	b953      	cbnz	r3, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7a:	b94a      	cbnz	r2, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	bf08      	it	eq
 8000b80:	2800      	cmpeq	r0, #0
 8000b82:	bf1c      	itt	ne
 8000b84:	f04f 31ff 	movne.w	r1, #4294967295
 8000b88:	f04f 30ff 	movne.w	r0, #4294967295
 8000b8c:	f000 b970 	b.w	8000e70 <__aeabi_idiv0>
 8000b90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b98:	f000 f806 	bl	8000ba8 <__udivmoddi4>
 8000b9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba4:	b004      	add	sp, #16
 8000ba6:	4770      	bx	lr

08000ba8 <__udivmoddi4>:
 8000ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bac:	9e08      	ldr	r6, [sp, #32]
 8000bae:	460d      	mov	r5, r1
 8000bb0:	4604      	mov	r4, r0
 8000bb2:	460f      	mov	r7, r1
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d14a      	bne.n	8000c4e <__udivmoddi4+0xa6>
 8000bb8:	428a      	cmp	r2, r1
 8000bba:	4694      	mov	ip, r2
 8000bbc:	d965      	bls.n	8000c8a <__udivmoddi4+0xe2>
 8000bbe:	fab2 f382 	clz	r3, r2
 8000bc2:	b143      	cbz	r3, 8000bd6 <__udivmoddi4+0x2e>
 8000bc4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bc8:	f1c3 0220 	rsb	r2, r3, #32
 8000bcc:	409f      	lsls	r7, r3
 8000bce:	fa20 f202 	lsr.w	r2, r0, r2
 8000bd2:	4317      	orrs	r7, r2
 8000bd4:	409c      	lsls	r4, r3
 8000bd6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bda:	fa1f f58c 	uxth.w	r5, ip
 8000bde:	fbb7 f1fe 	udiv	r1, r7, lr
 8000be2:	0c22      	lsrs	r2, r4, #16
 8000be4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000be8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bec:	fb01 f005 	mul.w	r0, r1, r5
 8000bf0:	4290      	cmp	r0, r2
 8000bf2:	d90a      	bls.n	8000c0a <__udivmoddi4+0x62>
 8000bf4:	eb1c 0202 	adds.w	r2, ip, r2
 8000bf8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bfc:	f080 811c 	bcs.w	8000e38 <__udivmoddi4+0x290>
 8000c00:	4290      	cmp	r0, r2
 8000c02:	f240 8119 	bls.w	8000e38 <__udivmoddi4+0x290>
 8000c06:	3902      	subs	r1, #2
 8000c08:	4462      	add	r2, ip
 8000c0a:	1a12      	subs	r2, r2, r0
 8000c0c:	b2a4      	uxth	r4, r4
 8000c0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c16:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c1a:	fb00 f505 	mul.w	r5, r0, r5
 8000c1e:	42a5      	cmp	r5, r4
 8000c20:	d90a      	bls.n	8000c38 <__udivmoddi4+0x90>
 8000c22:	eb1c 0404 	adds.w	r4, ip, r4
 8000c26:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c2a:	f080 8107 	bcs.w	8000e3c <__udivmoddi4+0x294>
 8000c2e:	42a5      	cmp	r5, r4
 8000c30:	f240 8104 	bls.w	8000e3c <__udivmoddi4+0x294>
 8000c34:	4464      	add	r4, ip
 8000c36:	3802      	subs	r0, #2
 8000c38:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c3c:	1b64      	subs	r4, r4, r5
 8000c3e:	2100      	movs	r1, #0
 8000c40:	b11e      	cbz	r6, 8000c4a <__udivmoddi4+0xa2>
 8000c42:	40dc      	lsrs	r4, r3
 8000c44:	2300      	movs	r3, #0
 8000c46:	e9c6 4300 	strd	r4, r3, [r6]
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d908      	bls.n	8000c64 <__udivmoddi4+0xbc>
 8000c52:	2e00      	cmp	r6, #0
 8000c54:	f000 80ed 	beq.w	8000e32 <__udivmoddi4+0x28a>
 8000c58:	2100      	movs	r1, #0
 8000c5a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c5e:	4608      	mov	r0, r1
 8000c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c64:	fab3 f183 	clz	r1, r3
 8000c68:	2900      	cmp	r1, #0
 8000c6a:	d149      	bne.n	8000d00 <__udivmoddi4+0x158>
 8000c6c:	42ab      	cmp	r3, r5
 8000c6e:	d302      	bcc.n	8000c76 <__udivmoddi4+0xce>
 8000c70:	4282      	cmp	r2, r0
 8000c72:	f200 80f8 	bhi.w	8000e66 <__udivmoddi4+0x2be>
 8000c76:	1a84      	subs	r4, r0, r2
 8000c78:	eb65 0203 	sbc.w	r2, r5, r3
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	4617      	mov	r7, r2
 8000c80:	2e00      	cmp	r6, #0
 8000c82:	d0e2      	beq.n	8000c4a <__udivmoddi4+0xa2>
 8000c84:	e9c6 4700 	strd	r4, r7, [r6]
 8000c88:	e7df      	b.n	8000c4a <__udivmoddi4+0xa2>
 8000c8a:	b902      	cbnz	r2, 8000c8e <__udivmoddi4+0xe6>
 8000c8c:	deff      	udf	#255	; 0xff
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8090 	bne.w	8000db8 <__udivmoddi4+0x210>
 8000c98:	1a8a      	subs	r2, r1, r2
 8000c9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ca8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cac:	0c22      	lsrs	r2, r4, #16
 8000cae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cb2:	fb0e f005 	mul.w	r0, lr, r5
 8000cb6:	4290      	cmp	r0, r2
 8000cb8:	d908      	bls.n	8000ccc <__udivmoddi4+0x124>
 8000cba:	eb1c 0202 	adds.w	r2, ip, r2
 8000cbe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x122>
 8000cc4:	4290      	cmp	r0, r2
 8000cc6:	f200 80cb 	bhi.w	8000e60 <__udivmoddi4+0x2b8>
 8000cca:	4645      	mov	r5, r8
 8000ccc:	1a12      	subs	r2, r2, r0
 8000cce:	b2a4      	uxth	r4, r4
 8000cd0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cd4:	fb07 2210 	mls	r2, r7, r0, r2
 8000cd8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cdc:	fb0e fe00 	mul.w	lr, lr, r0
 8000ce0:	45a6      	cmp	lr, r4
 8000ce2:	d908      	bls.n	8000cf6 <__udivmoddi4+0x14e>
 8000ce4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x14c>
 8000cee:	45a6      	cmp	lr, r4
 8000cf0:	f200 80bb 	bhi.w	8000e6a <__udivmoddi4+0x2c2>
 8000cf4:	4610      	mov	r0, r2
 8000cf6:	eba4 040e 	sub.w	r4, r4, lr
 8000cfa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cfe:	e79f      	b.n	8000c40 <__udivmoddi4+0x98>
 8000d00:	f1c1 0720 	rsb	r7, r1, #32
 8000d04:	408b      	lsls	r3, r1
 8000d06:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d0a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d0e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d12:	fa20 f307 	lsr.w	r3, r0, r7
 8000d16:	40fd      	lsrs	r5, r7
 8000d18:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d1c:	4323      	orrs	r3, r4
 8000d1e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d22:	fa1f fe8c 	uxth.w	lr, ip
 8000d26:	fb09 5518 	mls	r5, r9, r8, r5
 8000d2a:	0c1c      	lsrs	r4, r3, #16
 8000d2c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d30:	fb08 f50e 	mul.w	r5, r8, lr
 8000d34:	42a5      	cmp	r5, r4
 8000d36:	fa02 f201 	lsl.w	r2, r2, r1
 8000d3a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d3e:	d90b      	bls.n	8000d58 <__udivmoddi4+0x1b0>
 8000d40:	eb1c 0404 	adds.w	r4, ip, r4
 8000d44:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d48:	f080 8088 	bcs.w	8000e5c <__udivmoddi4+0x2b4>
 8000d4c:	42a5      	cmp	r5, r4
 8000d4e:	f240 8085 	bls.w	8000e5c <__udivmoddi4+0x2b4>
 8000d52:	f1a8 0802 	sub.w	r8, r8, #2
 8000d56:	4464      	add	r4, ip
 8000d58:	1b64      	subs	r4, r4, r5
 8000d5a:	b29d      	uxth	r5, r3
 8000d5c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d60:	fb09 4413 	mls	r4, r9, r3, r4
 8000d64:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d68:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	d908      	bls.n	8000d82 <__udivmoddi4+0x1da>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d78:	d26c      	bcs.n	8000e54 <__udivmoddi4+0x2ac>
 8000d7a:	45a6      	cmp	lr, r4
 8000d7c:	d96a      	bls.n	8000e54 <__udivmoddi4+0x2ac>
 8000d7e:	3b02      	subs	r3, #2
 8000d80:	4464      	add	r4, ip
 8000d82:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d86:	fba3 9502 	umull	r9, r5, r3, r2
 8000d8a:	eba4 040e 	sub.w	r4, r4, lr
 8000d8e:	42ac      	cmp	r4, r5
 8000d90:	46c8      	mov	r8, r9
 8000d92:	46ae      	mov	lr, r5
 8000d94:	d356      	bcc.n	8000e44 <__udivmoddi4+0x29c>
 8000d96:	d053      	beq.n	8000e40 <__udivmoddi4+0x298>
 8000d98:	b156      	cbz	r6, 8000db0 <__udivmoddi4+0x208>
 8000d9a:	ebb0 0208 	subs.w	r2, r0, r8
 8000d9e:	eb64 040e 	sbc.w	r4, r4, lr
 8000da2:	fa04 f707 	lsl.w	r7, r4, r7
 8000da6:	40ca      	lsrs	r2, r1
 8000da8:	40cc      	lsrs	r4, r1
 8000daa:	4317      	orrs	r7, r2
 8000dac:	e9c6 7400 	strd	r7, r4, [r6]
 8000db0:	4618      	mov	r0, r3
 8000db2:	2100      	movs	r1, #0
 8000db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db8:	f1c3 0120 	rsb	r1, r3, #32
 8000dbc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dc0:	fa20 f201 	lsr.w	r2, r0, r1
 8000dc4:	fa25 f101 	lsr.w	r1, r5, r1
 8000dc8:	409d      	lsls	r5, r3
 8000dca:	432a      	orrs	r2, r5
 8000dcc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd0:	fa1f fe8c 	uxth.w	lr, ip
 8000dd4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ddc:	0c11      	lsrs	r1, r2, #16
 8000dde:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000de2:	fb00 f50e 	mul.w	r5, r0, lr
 8000de6:	428d      	cmp	r5, r1
 8000de8:	fa04 f403 	lsl.w	r4, r4, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x258>
 8000dee:	eb1c 0101 	adds.w	r1, ip, r1
 8000df2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000df6:	d22f      	bcs.n	8000e58 <__udivmoddi4+0x2b0>
 8000df8:	428d      	cmp	r5, r1
 8000dfa:	d92d      	bls.n	8000e58 <__udivmoddi4+0x2b0>
 8000dfc:	3802      	subs	r0, #2
 8000dfe:	4461      	add	r1, ip
 8000e00:	1b49      	subs	r1, r1, r5
 8000e02:	b292      	uxth	r2, r2
 8000e04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e08:	fb07 1115 	mls	r1, r7, r5, r1
 8000e0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e10:	fb05 f10e 	mul.w	r1, r5, lr
 8000e14:	4291      	cmp	r1, r2
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x282>
 8000e18:	eb1c 0202 	adds.w	r2, ip, r2
 8000e1c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e20:	d216      	bcs.n	8000e50 <__udivmoddi4+0x2a8>
 8000e22:	4291      	cmp	r1, r2
 8000e24:	d914      	bls.n	8000e50 <__udivmoddi4+0x2a8>
 8000e26:	3d02      	subs	r5, #2
 8000e28:	4462      	add	r2, ip
 8000e2a:	1a52      	subs	r2, r2, r1
 8000e2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e30:	e738      	b.n	8000ca4 <__udivmoddi4+0xfc>
 8000e32:	4631      	mov	r1, r6
 8000e34:	4630      	mov	r0, r6
 8000e36:	e708      	b.n	8000c4a <__udivmoddi4+0xa2>
 8000e38:	4639      	mov	r1, r7
 8000e3a:	e6e6      	b.n	8000c0a <__udivmoddi4+0x62>
 8000e3c:	4610      	mov	r0, r2
 8000e3e:	e6fb      	b.n	8000c38 <__udivmoddi4+0x90>
 8000e40:	4548      	cmp	r0, r9
 8000e42:	d2a9      	bcs.n	8000d98 <__udivmoddi4+0x1f0>
 8000e44:	ebb9 0802 	subs.w	r8, r9, r2
 8000e48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	e7a3      	b.n	8000d98 <__udivmoddi4+0x1f0>
 8000e50:	4645      	mov	r5, r8
 8000e52:	e7ea      	b.n	8000e2a <__udivmoddi4+0x282>
 8000e54:	462b      	mov	r3, r5
 8000e56:	e794      	b.n	8000d82 <__udivmoddi4+0x1da>
 8000e58:	4640      	mov	r0, r8
 8000e5a:	e7d1      	b.n	8000e00 <__udivmoddi4+0x258>
 8000e5c:	46d0      	mov	r8, sl
 8000e5e:	e77b      	b.n	8000d58 <__udivmoddi4+0x1b0>
 8000e60:	3d02      	subs	r5, #2
 8000e62:	4462      	add	r2, ip
 8000e64:	e732      	b.n	8000ccc <__udivmoddi4+0x124>
 8000e66:	4608      	mov	r0, r1
 8000e68:	e70a      	b.n	8000c80 <__udivmoddi4+0xd8>
 8000e6a:	4464      	add	r4, ip
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	e742      	b.n	8000cf6 <__udivmoddi4+0x14e>

08000e70 <__aeabi_idiv0>:
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop

08000e74 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <LL_EXTI_EnableIT_32_63+0x24>)
 8000e7e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000e82:	4905      	ldr	r1, [pc, #20]	; (8000e98 <LL_EXTI_EnableIT_32_63+0x24>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	58000800 	.word	0x58000800

08000e9c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ea8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000eaa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
}
 8000ec2:	bf00      	nop
 8000ec4:	3714      	adds	r7, #20
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b085      	sub	sp, #20
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eda:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000ede:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eee:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
}
 8000efa:	bf00      	nop
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000f0a:	f003 fce5 	bl	80048d8 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000f0e:	f003 fce9 	bl	80048e4 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000f12:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000f16:	f7ff ffad 	bl	8000e74 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000f1a:	f009 fd55 	bl	800a9c8 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8000f1e:	f000 f821 	bl	8000f64 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000f22:	f000 f8c1 	bl	80010a8 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000f26:	bf00      	nop
}
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000f2c:	b5b0      	push	{r4, r5, r7, lr}
 8000f2e:	b088      	sub	sp, #32
 8000f30:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000f32:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <APPD_EnableCPU2+0x34>)
 8000f34:	1d3c      	adds	r4, r7, #4
 8000f36:	461d      	mov	r5, r3
 8000f38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f3c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f40:	c403      	stmia	r4!, {r0, r1}
 8000f42:	8022      	strh	r2, [r4, #0]
 8000f44:	3402      	adds	r4, #2
 8000f46:	0c13      	lsrs	r3, r2, #16
 8000f48:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000f4a:	f00b fa8d 	bl	800c468 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	4618      	mov	r0, r3
 8000f52:	f00a f8de 	bl	800b112 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000f56:	bf00      	nop
}
 8000f58:	3720      	adds	r7, #32
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bdb0      	pop	{r4, r5, r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	0800f568 	.word	0x0800f568

08000f64 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000f84:	2300      	movs	r3, #0
 8000f86:	77fb      	strb	r3, [r7, #31]
 8000f88:	e036      	b.n	8000ff8 <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000f8a:	7ffb      	ldrb	r3, [r7, #31]
 8000f8c:	4a43      	ldr	r2, [pc, #268]	; (800109c <APPD_SetCPU2GpioConfig+0x138>)
 8000f8e:	00db      	lsls	r3, r3, #3
 8000f90:	4413      	add	r3, r2
 8000f92:	799b      	ldrb	r3, [r3, #6]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d02c      	beq.n	8000ff2 <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000f98:	7ffb      	ldrb	r3, [r7, #31]
 8000f9a:	4a40      	ldr	r2, [pc, #256]	; (800109c <APPD_SetCPU2GpioConfig+0x138>)
 8000f9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000fa0:	4a3f      	ldr	r2, [pc, #252]	; (80010a0 <APPD_SetCPU2GpioConfig+0x13c>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d01b      	beq.n	8000fde <APPD_SetCPU2GpioConfig+0x7a>
 8000fa6:	4a3e      	ldr	r2, [pc, #248]	; (80010a0 <APPD_SetCPU2GpioConfig+0x13c>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d821      	bhi.n	8000ff0 <APPD_SetCPU2GpioConfig+0x8c>
 8000fac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fb0:	d003      	beq.n	8000fba <APPD_SetCPU2GpioConfig+0x56>
 8000fb2:	4a3c      	ldr	r2, [pc, #240]	; (80010a4 <APPD_SetCPU2GpioConfig+0x140>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d009      	beq.n	8000fcc <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 8000fb8:	e01a      	b.n	8000ff0 <APPD_SetCPU2GpioConfig+0x8c>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000fba:	7ffb      	ldrb	r3, [r7, #31]
 8000fbc:	4a37      	ldr	r2, [pc, #220]	; (800109c <APPD_SetCPU2GpioConfig+0x138>)
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	4413      	add	r3, r2
 8000fc2:	889a      	ldrh	r2, [r3, #4]
 8000fc4:	8bbb      	ldrh	r3, [r7, #28]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	83bb      	strh	r3, [r7, #28]
          break;
 8000fca:	e012      	b.n	8000ff2 <APPD_SetCPU2GpioConfig+0x8e>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000fcc:	7ffb      	ldrb	r3, [r7, #31]
 8000fce:	4a33      	ldr	r2, [pc, #204]	; (800109c <APPD_SetCPU2GpioConfig+0x138>)
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	4413      	add	r3, r2
 8000fd4:	889a      	ldrh	r2, [r3, #4]
 8000fd6:	8b7b      	ldrh	r3, [r7, #26]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	837b      	strh	r3, [r7, #26]
          break;
 8000fdc:	e009      	b.n	8000ff2 <APPD_SetCPU2GpioConfig+0x8e>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000fde:	7ffb      	ldrb	r3, [r7, #31]
 8000fe0:	4a2e      	ldr	r2, [pc, #184]	; (800109c <APPD_SetCPU2GpioConfig+0x138>)
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	4413      	add	r3, r2
 8000fe6:	889a      	ldrh	r2, [r3, #4]
 8000fe8:	8b3b      	ldrh	r3, [r7, #24]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	833b      	strh	r3, [r7, #24]
          break;
 8000fee:	e000      	b.n	8000ff2 <APPD_SetCPU2GpioConfig+0x8e>
          break;
 8000ff0:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000ff2:	7ffb      	ldrb	r3, [r7, #31]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	77fb      	strb	r3, [r7, #31]
 8000ff8:	7ffb      	ldrb	r3, [r7, #31]
 8000ffa:	2b25      	cmp	r3, #37	; 0x25
 8000ffc:	d9c5      	bls.n	8000f8a <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8001002:	2301      	movs	r3, #1
 8001004:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001006:	2303      	movs	r3, #3
 8001008:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 800100a:	8bbb      	ldrh	r3, [r7, #28]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d014      	beq.n	800103a <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 8001010:	8bbb      	ldrh	r3, [r7, #28]
 8001012:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001014:	2001      	movs	r0, #1
 8001016:	f7ff ff41 	bl	8000e9c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 800101a:	2001      	movs	r0, #1
 800101c:	f7ff ff57 	bl	8000ece <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	4619      	mov	r1, r3
 8001024:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001028:	f004 f950 	bl	80052cc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 800102c:	8bbb      	ldrh	r3, [r7, #28]
 800102e:	2200      	movs	r2, #0
 8001030:	4619      	mov	r1, r3
 8001032:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001036:	f004 fab1 	bl	800559c <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 800103a:	8b7b      	ldrh	r3, [r7, #26]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d012      	beq.n	8001066 <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 8001040:	8b7b      	ldrh	r3, [r7, #26]
 8001042:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001044:	2002      	movs	r0, #2
 8001046:	f7ff ff29 	bl	8000e9c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 800104a:	2002      	movs	r0, #2
 800104c:	f7ff ff3f 	bl	8000ece <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	4619      	mov	r1, r3
 8001054:	4813      	ldr	r0, [pc, #76]	; (80010a4 <APPD_SetCPU2GpioConfig+0x140>)
 8001056:	f004 f939 	bl	80052cc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 800105a:	8b7b      	ldrh	r3, [r7, #26]
 800105c:	2200      	movs	r2, #0
 800105e:	4619      	mov	r1, r3
 8001060:	4810      	ldr	r0, [pc, #64]	; (80010a4 <APPD_SetCPU2GpioConfig+0x140>)
 8001062:	f004 fa9b 	bl	800559c <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8001066:	8b3b      	ldrh	r3, [r7, #24]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d013      	beq.n	8001094 <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 800106c:	8b3b      	ldrh	r3, [r7, #24]
 800106e:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001070:	2004      	movs	r0, #4
 8001072:	f7ff ff13 	bl	8000e9c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8001076:	2004      	movs	r0, #4
 8001078:	f7ff ff29 	bl	8000ece <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 800107c:	1d3b      	adds	r3, r7, #4
 800107e:	4619      	mov	r1, r3
 8001080:	4807      	ldr	r0, [pc, #28]	; (80010a0 <APPD_SetCPU2GpioConfig+0x13c>)
 8001082:	f004 f923 	bl	80052cc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8001086:	8b3b      	ldrh	r3, [r7, #24]
 8001088:	2200      	movs	r2, #0
 800108a:	4619      	mov	r1, r3
 800108c:	4804      	ldr	r0, [pc, #16]	; (80010a0 <APPD_SetCPU2GpioConfig+0x13c>)
 800108e:	f004 fa85 	bl	800559c <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8001092:	bf00      	nop
 8001094:	bf00      	nop
}
 8001096:	3720      	adds	r7, #32
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	08010a2c 	.word	0x08010a2c
 80010a0:	48000800 	.word	0x48000800
 80010a4:	48000400 	.word	0x48000400

080010a8 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 80010ac:	bf00      	nop
}
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	af00      	add	r7, sp, #0
#endif
  }
  else if (CFG_DEBUG_TRACE_UART == hw_uart1)
  {
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 80010ba:	f001 fc2b 	bl	8002914 <MX_USART1_UART_Init>
#endif
  }
#endif

/* USER CODE END DbgOutputInit */
  return;
 80010be:	bf00      	nop
}
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b084      	sub	sp, #16
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	60f8      	str	r0, [r7, #12]
 80010ca:	460b      	mov	r3, r1
 80010cc:	607a      	str	r2, [r7, #4]
 80010ce:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 80010d0:	897a      	ldrh	r2, [r7, #10]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	68f9      	ldr	r1, [r7, #12]
 80010d6:	2000      	movs	r0, #0
 80010d8:	f001 fa36 	bl	8002548 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 80010dc:	bf00      	nop
}
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80010ec:	4b07      	ldr	r3, [pc, #28]	; (800110c <LL_C2_PWR_SetPowerMode+0x28>)
 80010ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010f2:	f023 0207 	bic.w	r2, r3, #7
 80010f6:	4905      	ldr	r1, [pc, #20]	; (800110c <LL_C2_PWR_SetPowerMode+0x28>)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	58000400 	.word	0x58000400

08001110 <LL_EXTI_EnableIT_32_63>:
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <LL_EXTI_EnableIT_32_63+0x24>)
 800111a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800111e:	4905      	ldr	r1, [pc, #20]	; (8001134 <LL_EXTI_EnableIT_32_63+0x24>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4313      	orrs	r3, r2
 8001124:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	58000800 	.word	0x58000800

08001138 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001144:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8001146:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800114a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800114e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001152:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	021b      	lsls	r3, r3, #8
 800115a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800115e:	4313      	orrs	r3, r2
 8001160:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	cafecafe 	.word	0xcafecafe

08001174 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800117c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001186:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4313      	orrs	r3, r2
 800118e:	608b      	str	r3, [r1, #8]
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80011a0:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <LL_DBGMCU_GetDeviceID+0x18>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	e0042000 	.word	0xe0042000

080011b8 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80011bc:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <LL_DBGMCU_GetRevisionID+0x18>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	0c1b      	lsrs	r3, r3, #16
 80011c2:	b29b      	uxth	r3, r3
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e0042000 	.word	0xe0042000

080011d4 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	22ff      	movs	r2, #255	; 0xff
 80011e0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80011ee:	b480      	push	{r7}
 80011f0:	b083      	sub	sp, #12
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	22ca      	movs	r2, #202	; 0xca
 80011fa:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2253      	movs	r2, #83	; 0x53
 8001200:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800120e:	b480      	push	{r7}
 8001210:	b083      	sub	sp, #12
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
 8001216:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f023 0207 	bic.w	r2, r3, #7
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	431a      	orrs	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	609a      	str	r2, [r3, #8]
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001238:	4b04      	ldr	r3, [pc, #16]	; (800124c <MX_APPE_Config+0x18>)
 800123a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800123e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8001240:	f000 f830 	bl	80012a4 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001244:	f000 f835 	bl	80012b2 <Config_HSE>

  return;
 8001248:	bf00      	nop
}
 800124a:	bd80      	pop	{r7, pc}
 800124c:	58004000 	.word	0x58004000

08001250 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001254:	f000 f841 	bl	80012da <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001258:	f000 f85a 	bl	8001310 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800125c:	4909      	ldr	r1, [pc, #36]	; (8001284 <MX_APPE_Init+0x34>)
 800125e:	2000      	movs	r0, #0
 8001260:	f000 fee2 	bl	8002028 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8001264:	f7ff fe4f 	bl	8000f06 <APPD_Init>

  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8001268:	2101      	movs	r1, #1
 800126a:	2001      	movs	r0, #1
 800126c:	f00b f99a 	bl	800c5a4 <UTIL_LPM_SetOffMode>

  APPE_Led_Init();
 8001270:	f000 f9b2 	bl	80015d8 <APPE_Led_Init>

  APPE_Button_Init();
 8001274:	f000 f9c0 	bl	80015f8 <APPE_Button_Init>
  
  RxUART_Init();
 8001278:	f000 fa2a 	bl	80016d0 <RxUART_Init>

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 800127c:	f000 f858 	bl	8001330 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8001280:	bf00      	nop
}
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000490 	.word	0x20000490

08001288 <Init_Smps>:

void Init_Smps(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 800128c:	bf00      	nop
}
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <Init_Exti>:

void Init_Exti(void)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800129a:	2050      	movs	r0, #80	; 0x50
 800129c:	f7ff ff38 	bl	8001110 <LL_EXTI_EnableIT_32_63>

  return;
 80012a0:	bf00      	nop
}
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80012a8:	bf00      	nop
}
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80012b8:	2000      	movs	r0, #0
 80012ba:	f009 fdbf 	bl	800ae3c <OTP_Read>
 80012be:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d005      	beq.n	80012d2 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	799b      	ldrb	r3, [r3, #6]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff ff34 	bl	8001138 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80012d0:	bf00      	nop
 80012d2:	bf00      	nop
}
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <System_Init>:

static void System_Init(void)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	af00      	add	r7, sp, #0
  Init_Smps();
 80012de:	f7ff ffd3 	bl	8001288 <Init_Smps>

  Init_Exti();
 80012e2:	f7ff ffd8 	bl	8001296 <Init_Exti>

  Init_Rtc();
 80012e6:	f000 f803 	bl	80012f0 <Init_Rtc>

  return;
 80012ea:	bf00      	nop
}
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <Init_Rtc>:

static void Init_Rtc(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80012f4:	4805      	ldr	r0, [pc, #20]	; (800130c <Init_Rtc+0x1c>)
 80012f6:	f7ff ff7a 	bl	80011ee <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80012fa:	2100      	movs	r1, #0
 80012fc:	4803      	ldr	r0, [pc, #12]	; (800130c <Init_Rtc+0x1c>)
 80012fe:	f7ff ff86 	bl	800120e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001302:	4802      	ldr	r0, [pc, #8]	; (800130c <Init_Rtc+0x1c>)
 8001304:	f7ff ff66 	bl	80011d4 <LL_RTC_EnableWriteProtection>

  return;
 8001308:	bf00      	nop
}
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40002800 	.word	0x40002800

08001310 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001314:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001318:	f7ff ff2c 	bl	8001174 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 800131c:	f00b f930 	bl	800c580 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001320:	2004      	movs	r0, #4
 8001322:	f7ff fedf 	bl	80010e4 <LL_C2_PWR_SetPowerMode>
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */
  /**
   * Active SRAM retention for standby support
   */
  HAL_PWREx_EnableSRAMRetention();
 8001326:	f004 fa33 	bl	8005790 <HAL_PWREx_EnableSRAMRetention>

  return;
 800132a:	bf00      	nop
}
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b088      	sub	sp, #32
 8001334:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8001336:	f00a fee1 	bl	800c0fc <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 800133a:	4a11      	ldr	r2, [pc, #68]	; (8001380 <appe_Tl_Init+0x50>)
 800133c:	2100      	movs	r1, #0
 800133e:	2040      	movs	r0, #64	; 0x40
 8001340:	f00b fa5c 	bl	800c7fc <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001344:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <appe_Tl_Init+0x54>)
 8001346:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <appe_Tl_Init+0x58>)
 800134a:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800134c:	463b      	mov	r3, r7
 800134e:	4619      	mov	r1, r3
 8001350:	480e      	ldr	r0, [pc, #56]	; (800138c <appe_Tl_Init+0x5c>)
 8001352:	f009 ffb9 	bl	800b2c8 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <appe_Tl_Init+0x60>)
 8001358:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800135a:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <appe_Tl_Init+0x64>)
 800135c:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <appe_Tl_Init+0x68>)
 8001360:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001362:	f240 533c 	movw	r3, #1340	; 0x53c
 8001366:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8001368:	f107 0308 	add.w	r3, r7, #8
 800136c:	4618      	mov	r0, r3
 800136e:	f00b f807 	bl	800c380 <TL_MM_Init>

  TL_Enable();
 8001372:	f00a febd 	bl	800c0f0 <TL_Enable>

  return;
 8001376:	bf00      	nop
}
 8001378:	3720      	adds	r7, #32
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	0800b301 	.word	0x0800b301
 8001384:	20030734 	.word	0x20030734
 8001388:	0800139d 	.word	0x0800139d
 800138c:	080013b5 	.word	0x080013b5
 8001390:	2003094c 	.word	0x2003094c
 8001394:	20030840 	.word	0x20030840
 8001398:	200301f8 	.word	0x200301f8

0800139c <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80013a6:	bf00      	nop
}
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
	...

080013b4 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	330b      	adds	r3, #11
 80013c2:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	881b      	ldrh	r3, [r3, #0]
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 80013ce:	2b07      	cmp	r3, #7
 80013d0:	d860      	bhi.n	8001494 <APPE_SysUserEvtRx+0xe0>
 80013d2:	a201      	add	r2, pc, #4	; (adr r2, 80013d8 <APPE_SysUserEvtRx+0x24>)
 80013d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d8:	080013f9 	.word	0x080013f9
 80013dc:	0800143b 	.word	0x0800143b
 80013e0:	08001449 	.word	0x08001449
 80013e4:	08001495 	.word	0x08001495
 80013e8:	08001465 	.word	0x08001465
 80013ec:	08001475 	.word	0x08001475
 80013f0:	0800147d 	.word	0x0800147d
 80013f4:	0800148d 	.word	0x0800148d
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80013f8:	f107 030c 	add.w	r3, r7, #12
 80013fc:	4618      	mov	r0, r3
 80013fe:	f009 feb5 	bl	800b16c <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8001402:	7b3b      	ldrb	r3, [r7, #12]
 8001404:	4619      	mov	r1, r3
 8001406:	7b7b      	ldrb	r3, [r7, #13]
 8001408:	461a      	mov	r2, r3
 800140a:	7bbb      	ldrb	r3, [r7, #14]
 800140c:	4824      	ldr	r0, [pc, #144]	; (80014a0 <APPE_SysUserEvtRx+0xec>)
 800140e:	f00c f85f 	bl	800d4d0 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8001412:	7c3b      	ldrb	r3, [r7, #16]
 8001414:	4619      	mov	r1, r3
 8001416:	4823      	ldr	r0, [pc, #140]	; (80014a4 <APPE_SysUserEvtRx+0xf0>)
 8001418:	f00c f85a 	bl	800d4d0 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 800141c:	7dbb      	ldrb	r3, [r7, #22]
 800141e:	4619      	mov	r1, r3
 8001420:	7dfb      	ldrb	r3, [r7, #23]
 8001422:	461a      	mov	r2, r3
 8001424:	7e3b      	ldrb	r3, [r7, #24]
 8001426:	4820      	ldr	r0, [pc, #128]	; (80014a8 <APPE_SysUserEvtRx+0xf4>)
 8001428:	f00c f852 	bl	800d4d0 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 800142c:	481f      	ldr	r0, [pc, #124]	; (80014ac <APPE_SysUserEvtRx+0xf8>)
 800142e:	f00c f84f 	bl	800d4d0 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f000 f870 	bl	8001518 <APPE_SysEvtReadyProcessing>
    break;
 8001438:	e02d      	b.n	8001496 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 800143a:	481d      	ldr	r0, [pc, #116]	; (80014b0 <APPE_SysUserEvtRx+0xfc>)
 800143c:	f00c f848 	bl	800d4d0 <iprintf>
    APPE_SysEvtError(pPayload);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f000 f843 	bl	80014cc <APPE_SysEvtError>
    break;
 8001446:	e026      	b.n	8001496 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8001448:	481a      	ldr	r0, [pc, #104]	; (80014b4 <APPE_SysUserEvtRx+0x100>)
 800144a:	f00c f8af 	bl	800d5ac <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8001452:	6819      	ldr	r1, [r3, #0]
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	461a      	mov	r2, r3
 800145c:	4816      	ldr	r0, [pc, #88]	; (80014b8 <APPE_SysUserEvtRx+0x104>)
 800145e:	f00c f837 	bl	800d4d0 <iprintf>
    break;
 8001462:	e018      	b.n	8001496 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	3302      	adds	r3, #2
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4619      	mov	r1, r3
 800146c:	4813      	ldr	r0, [pc, #76]	; (80014bc <APPE_SysUserEvtRx+0x108>)
 800146e:	f00c f82f 	bl	800d4d0 <iprintf>
    break;
 8001472:	e010      	b.n	8001496 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8001474:	4812      	ldr	r0, [pc, #72]	; (80014c0 <APPE_SysUserEvtRx+0x10c>)
 8001476:	f00c f82b 	bl	800d4d0 <iprintf>
    break;
 800147a:	e00c      	b.n	8001496 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	3302      	adds	r3, #2
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4619      	mov	r1, r3
 8001484:	480f      	ldr	r0, [pc, #60]	; (80014c4 <APPE_SysUserEvtRx+0x110>)
 8001486:	f00c f823 	bl	800d4d0 <iprintf>
    break;
 800148a:	e004      	b.n	8001496 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 800148c:	480e      	ldr	r0, [pc, #56]	; (80014c8 <APPE_SysUserEvtRx+0x114>)
 800148e:	f00c f81f 	bl	800d4d0 <iprintf>
    break;
 8001492:	e000      	b.n	8001496 <APPE_SysUserEvtRx+0xe2>

  default:
    break;
 8001494:	bf00      	nop
  }

  return;
 8001496:	bf00      	nop
}
 8001498:	3720      	adds	r7, #32
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	0800f584 	.word	0x0800f584
 80014a4:	0800f5a8 	.word	0x0800f5a8
 80014a8:	0800f5c4 	.word	0x0800f5c4
 80014ac:	0800f5dc 	.word	0x0800f5dc
 80014b0:	0800f5fc 	.word	0x0800f5fc
 80014b4:	0800f620 	.word	0x0800f620
 80014b8:	0800f670 	.word	0x0800f670
 80014bc:	0800f698 	.word	0x0800f698
 80014c0:	0800f6d4 	.word	0x0800f6d4
 80014c4:	0800f6f8 	.word	0x0800f6f8
 80014c8:	0800f734 	.word	0x0800f734

080014cc <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	330b      	adds	r3, #11
 80014da:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	3302      	adds	r3, #2
 80014e0:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	4619      	mov	r1, r3
 80014e8:	4808      	ldr	r0, [pc, #32]	; (800150c <APPE_SysEvtError+0x40>)
 80014ea:	f00b fff1 	bl	800d4d0 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d103      	bne.n	80014fe <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 80014f6:	4806      	ldr	r0, [pc, #24]	; (8001510 <APPE_SysEvtError+0x44>)
 80014f8:	f00c f858 	bl	800d5ac <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80014fc:	e003      	b.n	8001506 <APPE_SysEvtError+0x3a>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 80014fe:	4805      	ldr	r0, [pc, #20]	; (8001514 <APPE_SysEvtError+0x48>)
 8001500:	f00c f854 	bl	800d5ac <puts>
  return;
 8001504:	bf00      	nop
}
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	0800f758 	.word	0x0800f758
 8001510:	0800f788 	.word	0x0800f788
 8001514:	0800f7c4 	.word	0x0800f7c4

08001518 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	; 0x28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001520:	f107 0308 	add.w	r3, r7, #8
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 800152e:	2300      	movs	r3, #0
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8001532:	2300      	movs	r3, #0
 8001534:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	330b      	adds	r3, #11
 800153c:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	3302      	adds	r3, #2
 8001542:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d128      	bne.n	800159e <APPE_SysEvtReadyProcessing+0x86>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 800154c:	481d      	ldr	r0, [pc, #116]	; (80015c4 <APPE_SysEvtReadyProcessing+0xac>)
 800154e:	f00c f82d 	bl	800d5ac <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8001552:	f7ff fceb 	bl	8000f2c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8001556:	230f      	movs	r3, #15
 8001558:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800155a:	237f      	movs	r3, #127	; 0x7f
 800155c:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 800155e:	f7ff fe2b 	bl	80011b8 <LL_DBGMCU_GetRevisionID>
 8001562:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8001564:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001566:	4818      	ldr	r0, [pc, #96]	; (80015c8 <APPE_SysEvtReadyProcessing+0xb0>)
 8001568:	f00b ffb2 	bl	800d4d0 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	b29b      	uxth	r3, r3
 8001570:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8001572:	f7ff fe13 	bl	800119c <LL_DBGMCU_GetDeviceID>
 8001576:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8001578:	6a39      	ldr	r1, [r7, #32]
 800157a:	4814      	ldr	r0, [pc, #80]	; (80015cc <APPE_SysEvtReadyProcessing+0xb4>)
 800157c:	f00b ffa8 	bl	800d4d0 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 8001580:	6a3b      	ldr	r3, [r7, #32]
 8001582:	b29b      	uxth	r3, r3
 8001584:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8001586:	f107 0308 	add.w	r3, r7, #8
 800158a:	4618      	mov	r0, r3
 800158c:	f009 fdd8 	bl	800b140 <SHCI_C2_Config>

    APP_BLE_Init();
 8001590:	f001 fd0c 	bl	8002fac <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001594:	2100      	movs	r1, #0
 8001596:	2001      	movs	r0, #1
 8001598:	f00b f804 	bl	800c5a4 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 800159c:	e00e      	b.n	80015bc <APPE_SysEvtReadyProcessing+0xa4>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d106      	bne.n	80015b4 <APPE_SysEvtReadyProcessing+0x9c>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 80015a6:	480a      	ldr	r0, [pc, #40]	; (80015d0 <APPE_SysEvtReadyProcessing+0xb8>)
 80015a8:	f00b ff92 	bl	800d4d0 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	701a      	strb	r2, [r3, #0]
  return;
 80015b2:	e003      	b.n	80015bc <APPE_SysEvtReadyProcessing+0xa4>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 80015b4:	4807      	ldr	r0, [pc, #28]	; (80015d4 <APPE_SysEvtReadyProcessing+0xbc>)
 80015b6:	f00b ff8b 	bl	800d4d0 <iprintf>
  return;
 80015ba:	bf00      	nop
}
 80015bc:	3728      	adds	r7, #40	; 0x28
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	0800f7fc 	.word	0x0800f7fc
 80015c8:	0800f818 	.word	0x0800f818
 80015cc:	0800f83c 	.word	0x0800f83c
 80015d0:	0800f85c 	.word	0x0800f85c
 80015d4:	0800f890 	.word	0x0800f890

080015d8 <APPE_Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
void APPE_Led_Init( void )
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */

  BSP_LED_Init(LED_BLUE);
 80015dc:	2000      	movs	r0, #0
 80015de:	f002 ff6f 	bl	80044c0 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 80015e2:	2001      	movs	r0, #1
 80015e4:	f002 ff6c 	bl	80044c0 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80015e8:	2002      	movs	r0, #2
 80015ea:	f002 ff69 	bl	80044c0 <BSP_LED_Init>

  BSP_LED_On(LED_GREEN);
 80015ee:	2001      	movs	r0, #1
 80015f0:	f002 ffa0 	bl	8004534 <BSP_LED_On>
#endif

  return;
 80015f4:	bf00      	nop
}
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <APPE_Button_Init>:

void APPE_Button_Init( void )
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */

  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 80015fc:	2101      	movs	r1, #1
 80015fe:	2000      	movs	r0, #0
 8001600:	f002 ffcc 	bl	800459c <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8001604:	2101      	movs	r1, #1
 8001606:	2001      	movs	r0, #1
 8001608:	f002 ffc8 	bl	800459c <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 800160c:	2101      	movs	r1, #1
 800160e:	2002      	movs	r0, #2
 8001610:	f002 ffc4 	bl	800459c <BSP_PB_Init>
#endif

  return;
 8001614:	bf00      	nop
}
 8001616:	bd80      	pop	{r7, pc}

08001618 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800161c:	f04f 30ff 	mov.w	r0, #4294967295
 8001620:	f00a fff0 	bl	800c604 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}

08001628 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800162c:	bf00      	nop
}
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
 800163e:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001640:	f04f 30ff 	mov.w	r0, #4294967295
 8001644:	f00a ffde 	bl	800c604 <UTIL_SEQ_Run>

  return;
 8001648:	bf00      	nop
}
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001658:	2100      	movs	r1, #0
 800165a:	2040      	movs	r0, #64	; 0x40
 800165c:	f00b f8f0 	bl	800c840 <UTIL_SEQ_SetTask>
  return;
 8001660:	bf00      	nop
}
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001670:	2002      	movs	r0, #2
 8001672:	f00b f951 	bl	800c918 <UTIL_SEQ_SetEvt>
  return;
 8001676:	bf00      	nop
}
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001686:	2002      	movs	r0, #2
 8001688:	f00b f966 	bl	800c958 <UTIL_SEQ_WaitEvt>
  return;
 800168c:	bf00      	nop
}
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800169e:	88fb      	ldrh	r3, [r7, #6]
 80016a0:	2b40      	cmp	r3, #64	; 0x40
 80016a2:	d00c      	beq.n	80016be <HAL_GPIO_EXTI_Callback+0x2a>
 80016a4:	2b40      	cmp	r3, #64	; 0x40
 80016a6:	dc0d      	bgt.n	80016c4 <HAL_GPIO_EXTI_Callback+0x30>
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d002      	beq.n	80016b2 <HAL_GPIO_EXTI_Callback+0x1e>
 80016ac:	2b10      	cmp	r3, #16
 80016ae:	d003      	beq.n	80016b8 <HAL_GPIO_EXTI_Callback+0x24>
    case BUTTON_SW3_PIN:
      APP_BLE_Key_Button3_Action();
      break;

    default:
      break;
 80016b0:	e008      	b.n	80016c4 <HAL_GPIO_EXTI_Callback+0x30>
      APP_BLE_Key_Button1_Action();
 80016b2:	f001 ff8b 	bl	80035cc <APP_BLE_Key_Button1_Action>
      break; 
 80016b6:	e006      	b.n	80016c6 <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button2_Action();
 80016b8:	f001 ff8e 	bl	80035d8 <APP_BLE_Key_Button2_Action>
      break; 
 80016bc:	e003      	b.n	80016c6 <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button3_Action();
 80016be:	f001 ff93 	bl	80035e8 <APP_BLE_Key_Button3_Action>
      break;
 80016c2:	e000      	b.n	80016c6 <HAL_GPIO_EXTI_Callback+0x32>
      break;
 80016c4:	bf00      	nop

  }
  return;
 80016c6:	bf00      	nop
}
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <RxUART_Init>:

static void RxUART_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 80016d4:	4b03      	ldr	r3, [pc, #12]	; (80016e4 <RxUART_Init+0x14>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	4903      	ldr	r1, [pc, #12]	; (80016e8 <RxUART_Init+0x18>)
 80016da:	2000      	movs	r0, #0
 80016dc:	f000 ff10 	bl	8002500 <HW_UART_Receive_IT>
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	080016ed 	.word	0x080016ed
 80016e8:	2000028c 	.word	0x2000028c

080016ec <RxCpltCallback>:

static void RxCpltCallback(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 80016f0:	4b15      	ldr	r3, [pc, #84]	; (8001748 <RxCpltCallback+0x5c>)
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	2bff      	cmp	r3, #255	; 0xff
 80016f6:	d81e      	bhi.n	8001736 <RxCpltCallback+0x4a>
  {
    if (aRxBuffer[0] == '\r')
 80016f8:	4b14      	ldr	r3, [pc, #80]	; (800174c <RxCpltCallback+0x60>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b0d      	cmp	r3, #13
 80016fe:	d10f      	bne.n	8001720 <RxCpltCallback+0x34>
    {
      APP_DBG_MSG("received %s\n", CommandString);
 8001700:	4913      	ldr	r1, [pc, #76]	; (8001750 <RxCpltCallback+0x64>)
 8001702:	4814      	ldr	r0, [pc, #80]	; (8001754 <RxCpltCallback+0x68>)
 8001704:	f00b fee4 	bl	800d4d0 <iprintf>

      UartCmdExecute();
 8001708:	f000 f828 	bl	800175c <UartCmdExecute>

      /* Clear receive buffer and character counter*/
      indexReceiveChar = 0;
 800170c:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <RxCpltCallback+0x5c>)
 800170e:	2200      	movs	r2, #0
 8001710:	801a      	strh	r2, [r3, #0]
      memset(CommandString, 0, C_SIZE_CMD_STRING);
 8001712:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001716:	2100      	movs	r1, #0
 8001718:	480d      	ldr	r0, [pc, #52]	; (8001750 <RxCpltCallback+0x64>)
 800171a:	f00c f827 	bl	800d76c <memset>
 800171e:	e00a      	b.n	8001736 <RxCpltCallback+0x4a>
    }
    else
    {
      CommandString[indexReceiveChar++] = aRxBuffer[0];
 8001720:	4b09      	ldr	r3, [pc, #36]	; (8001748 <RxCpltCallback+0x5c>)
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	1c5a      	adds	r2, r3, #1
 8001726:	b291      	uxth	r1, r2
 8001728:	4a07      	ldr	r2, [pc, #28]	; (8001748 <RxCpltCallback+0x5c>)
 800172a:	8011      	strh	r1, [r2, #0]
 800172c:	461a      	mov	r2, r3
 800172e:	4b07      	ldr	r3, [pc, #28]	; (800174c <RxCpltCallback+0x60>)
 8001730:	7819      	ldrb	r1, [r3, #0]
 8001732:	4b07      	ldr	r3, [pc, #28]	; (8001750 <RxCpltCallback+0x64>)
 8001734:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 8001736:	4b08      	ldr	r3, [pc, #32]	; (8001758 <RxCpltCallback+0x6c>)
 8001738:	2201      	movs	r2, #1
 800173a:	4904      	ldr	r1, [pc, #16]	; (800174c <RxCpltCallback+0x60>)
 800173c:	2000      	movs	r0, #0
 800173e:	f000 fedf 	bl	8002500 <HW_UART_Receive_IT>
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000394 	.word	0x20000394
 800174c:	2000028c 	.word	0x2000028c
 8001750:	20000294 	.word	0x20000294
 8001754:	0800f8c4 	.word	0x0800f8c4
 8001758:	080016ed 	.word	0x080016ed

0800175c <UartCmdExecute>:

static void UartCmdExecute(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* Parse received CommandString */
  if(strcmp((char const*)CommandString, "SW1") == 0)
 8001760:	491c      	ldr	r1, [pc, #112]	; (80017d4 <UartCmdExecute+0x78>)
 8001762:	481d      	ldr	r0, [pc, #116]	; (80017d8 <UartCmdExecute+0x7c>)
 8001764:	f7fe fd0c 	bl	8000180 <strcmp>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d10a      	bne.n	8001784 <UartCmdExecute+0x28>
  {
    APP_DBG_MSG("SW1 OK\n");
 800176e:	481b      	ldr	r0, [pc, #108]	; (80017dc <UartCmdExecute+0x80>)
 8001770:	f00b ff1c 	bl	800d5ac <puts>
    exti_handle.Line = EXTI_LINE_0;
 8001774:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <UartCmdExecute+0x84>)
 8001776:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 800177a:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 800177c:	4818      	ldr	r0, [pc, #96]	; (80017e0 <UartCmdExecute+0x84>)
 800177e:	f003 fd83 	bl	8005288 <HAL_EXTI_GenerateSWI>
  }
  else
  {
    APP_DBG_MSG("NOT RECOGNIZED COMMAND : %s\n", CommandString);
  }
}
 8001782:	e025      	b.n	80017d0 <UartCmdExecute+0x74>
  else if (strcmp((char const*)CommandString, "SW2") == 0)
 8001784:	4917      	ldr	r1, [pc, #92]	; (80017e4 <UartCmdExecute+0x88>)
 8001786:	4814      	ldr	r0, [pc, #80]	; (80017d8 <UartCmdExecute+0x7c>)
 8001788:	f7fe fcfa 	bl	8000180 <strcmp>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d109      	bne.n	80017a6 <UartCmdExecute+0x4a>
    APP_DBG_MSG("SW2 OK\n");
 8001792:	4815      	ldr	r0, [pc, #84]	; (80017e8 <UartCmdExecute+0x8c>)
 8001794:	f00b ff0a 	bl	800d5ac <puts>
    exti_handle.Line = EXTI_LINE_4;
 8001798:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <UartCmdExecute+0x84>)
 800179a:	4a14      	ldr	r2, [pc, #80]	; (80017ec <UartCmdExecute+0x90>)
 800179c:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 800179e:	4810      	ldr	r0, [pc, #64]	; (80017e0 <UartCmdExecute+0x84>)
 80017a0:	f003 fd72 	bl	8005288 <HAL_EXTI_GenerateSWI>
}
 80017a4:	e014      	b.n	80017d0 <UartCmdExecute+0x74>
  else if (strcmp((char const*)CommandString, "SW3") == 0)
 80017a6:	4912      	ldr	r1, [pc, #72]	; (80017f0 <UartCmdExecute+0x94>)
 80017a8:	480b      	ldr	r0, [pc, #44]	; (80017d8 <UartCmdExecute+0x7c>)
 80017aa:	f7fe fce9 	bl	8000180 <strcmp>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d109      	bne.n	80017c8 <UartCmdExecute+0x6c>
    APP_DBG_MSG("SW3 OK\n");
 80017b4:	480f      	ldr	r0, [pc, #60]	; (80017f4 <UartCmdExecute+0x98>)
 80017b6:	f00b fef9 	bl	800d5ac <puts>
    exti_handle.Line = EXTI_LINE_6;
 80017ba:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <UartCmdExecute+0x84>)
 80017bc:	4a0e      	ldr	r2, [pc, #56]	; (80017f8 <UartCmdExecute+0x9c>)
 80017be:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 80017c0:	4807      	ldr	r0, [pc, #28]	; (80017e0 <UartCmdExecute+0x84>)
 80017c2:	f003 fd61 	bl	8005288 <HAL_EXTI_GenerateSWI>
}
 80017c6:	e003      	b.n	80017d0 <UartCmdExecute+0x74>
    APP_DBG_MSG("NOT RECOGNIZED COMMAND : %s\n", CommandString);
 80017c8:	4903      	ldr	r1, [pc, #12]	; (80017d8 <UartCmdExecute+0x7c>)
 80017ca:	480c      	ldr	r0, [pc, #48]	; (80017fc <UartCmdExecute+0xa0>)
 80017cc:	f00b fe80 	bl	800d4d0 <iprintf>
}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	0800f8d4 	.word	0x0800f8d4
 80017d8:	20000294 	.word	0x20000294
 80017dc:	0800f8d8 	.word	0x0800f8d8
 80017e0:	20000284 	.word	0x20000284
 80017e4:	0800f8e0 	.word	0x0800f8e0
 80017e8:	0800f8e4 	.word	0x0800f8e4
 80017ec:	16000004 	.word	0x16000004
 80017f0:	0800f8ec 	.word	0x0800f8ec
 80017f4:	0800f8f0 	.word	0x0800f8f0
 80017f8:	16000006 	.word	0x16000006
 80017fc:	0800f8f8 	.word	0x0800f8f8

08001800 <LL_EXTI_EnableIT_0_31>:
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001808:	4b06      	ldr	r3, [pc, #24]	; (8001824 <LL_EXTI_EnableIT_0_31+0x24>)
 800180a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800180e:	4905      	ldr	r1, [pc, #20]	; (8001824 <LL_EXTI_EnableIT_0_31+0x24>)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4313      	orrs	r3, r2
 8001814:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	58000800 	.word	0x58000800

08001828 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001830:	4b05      	ldr	r3, [pc, #20]	; (8001848 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4904      	ldr	r1, [pc, #16]	; (8001848 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4313      	orrs	r3, r2
 800183a:	600b      	str	r3, [r1, #0]

}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	58000800 	.word	0x58000800

0800184c <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001852:	4b0d      	ldr	r3, [pc, #52]	; (8001888 <ReadRtcSsrValue+0x3c>)
 8001854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001856:	b29b      	uxth	r3, r3
 8001858:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800185a:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <ReadRtcSsrValue+0x3c>)
 800185c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185e:	b29b      	uxth	r3, r3
 8001860:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001862:	e005      	b.n	8001870 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001868:	4b07      	ldr	r3, [pc, #28]	; (8001888 <ReadRtcSsrValue+0x3c>)
 800186a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186c:	b29b      	uxth	r3, r3
 800186e:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d1f5      	bne.n	8001864 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001878:	683b      	ldr	r3, [r7, #0]
}
 800187a:	4618      	mov	r0, r3
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	40002800 	.word	0x40002800

0800188c <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	460a      	mov	r2, r1
 8001896:	71fb      	strb	r3, [r7, #7]
 8001898:	4613      	mov	r3, r2
 800189a:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 800189c:	79ba      	ldrb	r2, [r7, #6]
 800189e:	491d      	ldr	r1, [pc, #116]	; (8001914 <LinkTimerAfter+0x88>)
 80018a0:	4613      	mov	r3, r2
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	4413      	add	r3, r2
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	440b      	add	r3, r1
 80018aa:	3315      	adds	r3, #21
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80018b0:	7bfb      	ldrb	r3, [r7, #15]
 80018b2:	2b06      	cmp	r3, #6
 80018b4:	d009      	beq.n	80018ca <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80018b6:	7bfa      	ldrb	r2, [r7, #15]
 80018b8:	4916      	ldr	r1, [pc, #88]	; (8001914 <LinkTimerAfter+0x88>)
 80018ba:	4613      	mov	r3, r2
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	4413      	add	r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	440b      	add	r3, r1
 80018c4:	3314      	adds	r3, #20
 80018c6:	79fa      	ldrb	r2, [r7, #7]
 80018c8:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80018ca:	79fa      	ldrb	r2, [r7, #7]
 80018cc:	4911      	ldr	r1, [pc, #68]	; (8001914 <LinkTimerAfter+0x88>)
 80018ce:	4613      	mov	r3, r2
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	4413      	add	r3, r2
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	440b      	add	r3, r1
 80018d8:	3315      	adds	r3, #21
 80018da:	7bfa      	ldrb	r2, [r7, #15]
 80018dc:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80018de:	79fa      	ldrb	r2, [r7, #7]
 80018e0:	490c      	ldr	r1, [pc, #48]	; (8001914 <LinkTimerAfter+0x88>)
 80018e2:	4613      	mov	r3, r2
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	4413      	add	r3, r2
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	440b      	add	r3, r1
 80018ec:	3314      	adds	r3, #20
 80018ee:	79ba      	ldrb	r2, [r7, #6]
 80018f0:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80018f2:	79ba      	ldrb	r2, [r7, #6]
 80018f4:	4907      	ldr	r1, [pc, #28]	; (8001914 <LinkTimerAfter+0x88>)
 80018f6:	4613      	mov	r3, r2
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	4413      	add	r3, r2
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	440b      	add	r3, r1
 8001900:	3315      	adds	r3, #21
 8001902:	79fa      	ldrb	r2, [r7, #7]
 8001904:	701a      	strb	r2, [r3, #0]

  return;
 8001906:	bf00      	nop
}
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	20000398 	.word	0x20000398

08001918 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	460a      	mov	r2, r1
 8001922:	71fb      	strb	r3, [r7, #7]
 8001924:	4613      	mov	r3, r2
 8001926:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001928:	4b29      	ldr	r3, [pc, #164]	; (80019d0 <LinkTimerBefore+0xb8>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	b2db      	uxtb	r3, r3
 800192e:	79ba      	ldrb	r2, [r7, #6]
 8001930:	429a      	cmp	r2, r3
 8001932:	d032      	beq.n	800199a <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001934:	79ba      	ldrb	r2, [r7, #6]
 8001936:	4927      	ldr	r1, [pc, #156]	; (80019d4 <LinkTimerBefore+0xbc>)
 8001938:	4613      	mov	r3, r2
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	4413      	add	r3, r2
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	440b      	add	r3, r1
 8001942:	3314      	adds	r3, #20
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001948:	7bfa      	ldrb	r2, [r7, #15]
 800194a:	4922      	ldr	r1, [pc, #136]	; (80019d4 <LinkTimerBefore+0xbc>)
 800194c:	4613      	mov	r3, r2
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	4413      	add	r3, r2
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	440b      	add	r3, r1
 8001956:	3315      	adds	r3, #21
 8001958:	79fa      	ldrb	r2, [r7, #7]
 800195a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 800195c:	79fa      	ldrb	r2, [r7, #7]
 800195e:	491d      	ldr	r1, [pc, #116]	; (80019d4 <LinkTimerBefore+0xbc>)
 8001960:	4613      	mov	r3, r2
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	4413      	add	r3, r2
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	440b      	add	r3, r1
 800196a:	3315      	adds	r3, #21
 800196c:	79ba      	ldrb	r2, [r7, #6]
 800196e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001970:	79fa      	ldrb	r2, [r7, #7]
 8001972:	4918      	ldr	r1, [pc, #96]	; (80019d4 <LinkTimerBefore+0xbc>)
 8001974:	4613      	mov	r3, r2
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	4413      	add	r3, r2
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	440b      	add	r3, r1
 800197e:	3314      	adds	r3, #20
 8001980:	7bfa      	ldrb	r2, [r7, #15]
 8001982:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001984:	79ba      	ldrb	r2, [r7, #6]
 8001986:	4913      	ldr	r1, [pc, #76]	; (80019d4 <LinkTimerBefore+0xbc>)
 8001988:	4613      	mov	r3, r2
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	4413      	add	r3, r2
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	440b      	add	r3, r1
 8001992:	3314      	adds	r3, #20
 8001994:	79fa      	ldrb	r2, [r7, #7]
 8001996:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001998:	e014      	b.n	80019c4 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800199a:	79fa      	ldrb	r2, [r7, #7]
 800199c:	490d      	ldr	r1, [pc, #52]	; (80019d4 <LinkTimerBefore+0xbc>)
 800199e:	4613      	mov	r3, r2
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	4413      	add	r3, r2
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	440b      	add	r3, r1
 80019a8:	3315      	adds	r3, #21
 80019aa:	79ba      	ldrb	r2, [r7, #6]
 80019ac:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80019ae:	79ba      	ldrb	r2, [r7, #6]
 80019b0:	4908      	ldr	r1, [pc, #32]	; (80019d4 <LinkTimerBefore+0xbc>)
 80019b2:	4613      	mov	r3, r2
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	4413      	add	r3, r2
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	440b      	add	r3, r1
 80019bc:	3314      	adds	r3, #20
 80019be:	79fa      	ldrb	r2, [r7, #7]
 80019c0:	701a      	strb	r2, [r3, #0]
  return;
 80019c2:	bf00      	nop
}
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	20000428 	.word	0x20000428
 80019d4:	20000398 	.word	0x20000398

080019d8 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80019e2:	4b4e      	ldr	r3, [pc, #312]	; (8001b1c <linkTimer+0x144>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2b06      	cmp	r3, #6
 80019ea:	d118      	bne.n	8001a1e <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80019ec:	4b4b      	ldr	r3, [pc, #300]	; (8001b1c <linkTimer+0x144>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	4b4b      	ldr	r3, [pc, #300]	; (8001b20 <linkTimer+0x148>)
 80019f4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80019f6:	4a49      	ldr	r2, [pc, #292]	; (8001b1c <linkTimer+0x144>)
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80019fc:	79fa      	ldrb	r2, [r7, #7]
 80019fe:	4949      	ldr	r1, [pc, #292]	; (8001b24 <linkTimer+0x14c>)
 8001a00:	4613      	mov	r3, r2
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	4413      	add	r3, r2
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	440b      	add	r3, r1
 8001a0a:	3315      	adds	r3, #21
 8001a0c:	2206      	movs	r2, #6
 8001a0e:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001a10:	4b45      	ldr	r3, [pc, #276]	; (8001b28 <linkTimer+0x150>)
 8001a12:	f04f 32ff 	mov.w	r2, #4294967295
 8001a16:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	81fb      	strh	r3, [r7, #14]
 8001a1c:	e078      	b.n	8001b10 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001a1e:	f000 f909 	bl	8001c34 <ReturnTimeElapsed>
 8001a22:	4603      	mov	r3, r0
 8001a24:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001a26:	79fa      	ldrb	r2, [r7, #7]
 8001a28:	493e      	ldr	r1, [pc, #248]	; (8001b24 <linkTimer+0x14c>)
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	4413      	add	r3, r2
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	440b      	add	r3, r1
 8001a34:	3308      	adds	r3, #8
 8001a36:	6819      	ldr	r1, [r3, #0]
 8001a38:	89fb      	ldrh	r3, [r7, #14]
 8001a3a:	79fa      	ldrb	r2, [r7, #7]
 8001a3c:	4419      	add	r1, r3
 8001a3e:	4839      	ldr	r0, [pc, #228]	; (8001b24 <linkTimer+0x14c>)
 8001a40:	4613      	mov	r3, r2
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	4413      	add	r3, r2
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	4403      	add	r3, r0
 8001a4a:	3308      	adds	r3, #8
 8001a4c:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001a4e:	79fa      	ldrb	r2, [r7, #7]
 8001a50:	4934      	ldr	r1, [pc, #208]	; (8001b24 <linkTimer+0x14c>)
 8001a52:	4613      	mov	r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	4413      	add	r3, r2
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	440b      	add	r3, r1
 8001a5c:	3308      	adds	r3, #8
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001a62:	4b2e      	ldr	r3, [pc, #184]	; (8001b1c <linkTimer+0x144>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4a2e      	ldr	r2, [pc, #184]	; (8001b24 <linkTimer+0x14c>)
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	440b      	add	r3, r1
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	4413      	add	r3, r2
 8001a76:	3308      	adds	r3, #8
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68ba      	ldr	r2, [r7, #8]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d337      	bcc.n	8001af0 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001a80:	4b26      	ldr	r3, [pc, #152]	; (8001b1c <linkTimer+0x144>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001a86:	7b7a      	ldrb	r2, [r7, #13]
 8001a88:	4926      	ldr	r1, [pc, #152]	; (8001b24 <linkTimer+0x14c>)
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	4413      	add	r3, r2
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	440b      	add	r3, r1
 8001a94:	3315      	adds	r3, #21
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001a9a:	e013      	b.n	8001ac4 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001a9c:	7b7a      	ldrb	r2, [r7, #13]
 8001a9e:	4921      	ldr	r1, [pc, #132]	; (8001b24 <linkTimer+0x14c>)
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	4413      	add	r3, r2
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	440b      	add	r3, r1
 8001aaa:	3315      	adds	r3, #21
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001ab0:	7b7a      	ldrb	r2, [r7, #13]
 8001ab2:	491c      	ldr	r1, [pc, #112]	; (8001b24 <linkTimer+0x14c>)
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	4413      	add	r3, r2
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	440b      	add	r3, r1
 8001abe:	3315      	adds	r3, #21
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001ac4:	7b3b      	ldrb	r3, [r7, #12]
 8001ac6:	2b06      	cmp	r3, #6
 8001ac8:	d00b      	beq.n	8001ae2 <linkTimer+0x10a>
 8001aca:	7b3a      	ldrb	r2, [r7, #12]
 8001acc:	4915      	ldr	r1, [pc, #84]	; (8001b24 <linkTimer+0x14c>)
 8001ace:	4613      	mov	r3, r2
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	4413      	add	r3, r2
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	440b      	add	r3, r1
 8001ad8:	3308      	adds	r3, #8
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68ba      	ldr	r2, [r7, #8]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d2dc      	bcs.n	8001a9c <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001ae2:	7b7a      	ldrb	r2, [r7, #13]
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	4611      	mov	r1, r2
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff fecf 	bl	800188c <LinkTimerAfter>
 8001aee:	e00f      	b.n	8001b10 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001af0:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <linkTimer+0x144>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	4611      	mov	r1, r2
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff ff0c 	bl	8001918 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001b00:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <linkTimer+0x144>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <linkTimer+0x148>)
 8001b08:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001b0a:	4a04      	ldr	r2, [pc, #16]	; (8001b1c <linkTimer+0x144>)
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001b10:	89fb      	ldrh	r3, [r7, #14]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000428 	.word	0x20000428
 8001b20:	20000429 	.word	0x20000429
 8001b24:	20000398 	.word	0x20000398
 8001b28:	2000042c 	.word	0x2000042c

08001b2c <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	460a      	mov	r2, r1
 8001b36:	71fb      	strb	r3, [r7, #7]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001b3c:	4b39      	ldr	r3, [pc, #228]	; (8001c24 <UnlinkTimer+0xf8>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	79fa      	ldrb	r2, [r7, #7]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d111      	bne.n	8001b6c <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001b48:	4b36      	ldr	r3, [pc, #216]	; (8001c24 <UnlinkTimer+0xf8>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	4b36      	ldr	r3, [pc, #216]	; (8001c28 <UnlinkTimer+0xfc>)
 8001b50:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001b52:	79fa      	ldrb	r2, [r7, #7]
 8001b54:	4935      	ldr	r1, [pc, #212]	; (8001c2c <UnlinkTimer+0x100>)
 8001b56:	4613      	mov	r3, r2
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	4413      	add	r3, r2
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	440b      	add	r3, r1
 8001b60:	3315      	adds	r3, #21
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	4b2f      	ldr	r3, [pc, #188]	; (8001c24 <UnlinkTimer+0xf8>)
 8001b68:	701a      	strb	r2, [r3, #0]
 8001b6a:	e03e      	b.n	8001bea <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001b6c:	79fa      	ldrb	r2, [r7, #7]
 8001b6e:	492f      	ldr	r1, [pc, #188]	; (8001c2c <UnlinkTimer+0x100>)
 8001b70:	4613      	mov	r3, r2
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	4413      	add	r3, r2
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	440b      	add	r3, r1
 8001b7a:	3314      	adds	r3, #20
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001b80:	79fa      	ldrb	r2, [r7, #7]
 8001b82:	492a      	ldr	r1, [pc, #168]	; (8001c2c <UnlinkTimer+0x100>)
 8001b84:	4613      	mov	r3, r2
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	4413      	add	r3, r2
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	440b      	add	r3, r1
 8001b8e:	3315      	adds	r3, #21
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001b94:	79f9      	ldrb	r1, [r7, #7]
 8001b96:	7bfa      	ldrb	r2, [r7, #15]
 8001b98:	4824      	ldr	r0, [pc, #144]	; (8001c2c <UnlinkTimer+0x100>)
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	440b      	add	r3, r1
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	4403      	add	r3, r0
 8001ba4:	3315      	adds	r3, #21
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	b2d8      	uxtb	r0, r3
 8001baa:	4920      	ldr	r1, [pc, #128]	; (8001c2c <UnlinkTimer+0x100>)
 8001bac:	4613      	mov	r3, r2
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	4413      	add	r3, r2
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	440b      	add	r3, r1
 8001bb6:	3315      	adds	r3, #21
 8001bb8:	4602      	mov	r2, r0
 8001bba:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001bbc:	7bbb      	ldrb	r3, [r7, #14]
 8001bbe:	2b06      	cmp	r3, #6
 8001bc0:	d013      	beq.n	8001bea <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001bc2:	79f9      	ldrb	r1, [r7, #7]
 8001bc4:	7bba      	ldrb	r2, [r7, #14]
 8001bc6:	4819      	ldr	r0, [pc, #100]	; (8001c2c <UnlinkTimer+0x100>)
 8001bc8:	460b      	mov	r3, r1
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	440b      	add	r3, r1
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	4403      	add	r3, r0
 8001bd2:	3314      	adds	r3, #20
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	b2d8      	uxtb	r0, r3
 8001bd8:	4914      	ldr	r1, [pc, #80]	; (8001c2c <UnlinkTimer+0x100>)
 8001bda:	4613      	mov	r3, r2
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	4413      	add	r3, r2
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	440b      	add	r3, r1
 8001be4:	3314      	adds	r3, #20
 8001be6:	4602      	mov	r2, r0
 8001be8:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001bea:	79fa      	ldrb	r2, [r7, #7]
 8001bec:	490f      	ldr	r1, [pc, #60]	; (8001c2c <UnlinkTimer+0x100>)
 8001bee:	4613      	mov	r3, r2
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	4413      	add	r3, r2
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	440b      	add	r3, r1
 8001bf8:	330c      	adds	r3, #12
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001bfe:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <UnlinkTimer+0xf8>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	2b06      	cmp	r3, #6
 8001c06:	d107      	bne.n	8001c18 <UnlinkTimer+0xec>
 8001c08:	79bb      	ldrb	r3, [r7, #6]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d104      	bne.n	8001c18 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001c0e:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <UnlinkTimer+0x104>)
 8001c10:	f04f 32ff 	mov.w	r2, #4294967295
 8001c14:	601a      	str	r2, [r3, #0]
  }

  return;
 8001c16:	bf00      	nop
 8001c18:	bf00      	nop
}
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	20000428 	.word	0x20000428
 8001c28:	20000429 	.word	0x20000429
 8001c2c:	20000398 	.word	0x20000398
 8001c30:	2000042c 	.word	0x2000042c

08001c34 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001c3a:	4b1a      	ldr	r3, [pc, #104]	; (8001ca4 <ReturnTimeElapsed+0x70>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c42:	d026      	beq.n	8001c92 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001c44:	f7ff fe02 	bl	800184c <ReadRtcSsrValue>
 8001c48:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001c4a:	4b16      	ldr	r3, [pc, #88]	; (8001ca4 <ReturnTimeElapsed+0x70>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d805      	bhi.n	8001c60 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001c54:	4b13      	ldr	r3, [pc, #76]	; (8001ca4 <ReturnTimeElapsed+0x70>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	607b      	str	r3, [r7, #4]
 8001c5e:	e00a      	b.n	8001c76 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001c60:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <ReturnTimeElapsed+0x74>)
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	461a      	mov	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001c6c:	4b0d      	ldr	r3, [pc, #52]	; (8001ca4 <ReturnTimeElapsed+0x70>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	4413      	add	r3, r2
 8001c74:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001c76:	4b0d      	ldr	r3, [pc, #52]	; (8001cac <ReturnTimeElapsed+0x78>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	fb02 f303 	mul.w	r3, r2, r3
 8001c82:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001c84:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <ReturnTimeElapsed+0x7c>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	40d3      	lsrs	r3, r2
 8001c8e:	607b      	str	r3, [r7, #4]
 8001c90:	e001      	b.n	8001c96 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	b29b      	uxth	r3, r3
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	2000042c 	.word	0x2000042c
 8001ca8:	20000434 	.word	0x20000434
 8001cac:	20000432 	.word	0x20000432
 8001cb0:	20000431 	.word	0x20000431

08001cb4 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001cbe:	88fb      	ldrh	r3, [r7, #6]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d108      	bne.n	8001cd6 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001cc4:	f7ff fdc2 	bl	800184c <ReadRtcSsrValue>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	4a21      	ldr	r2, [pc, #132]	; (8001d50 <RestartWakeupCounter+0x9c>)
 8001ccc:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001cce:	2003      	movs	r0, #3
 8001cd0:	f002 ff8b 	bl	8004bea <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001cd4:	e039      	b.n	8001d4a <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001cd6:	88fb      	ldrh	r3, [r7, #6]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d803      	bhi.n	8001ce4 <RestartWakeupCounter+0x30>
 8001cdc:	4b1d      	ldr	r3, [pc, #116]	; (8001d54 <RestartWakeupCounter+0xa0>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d002      	beq.n	8001cea <RestartWakeupCounter+0x36>
      Value -= 1;
 8001ce4:	88fb      	ldrh	r3, [r7, #6]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001cea:	bf00      	nop
 8001cec:	4b1a      	ldr	r3, [pc, #104]	; (8001d58 <RestartWakeupCounter+0xa4>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	f003 0304 	and.w	r3, r3, #4
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0f8      	beq.n	8001cec <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001cfa:	4b17      	ldr	r3, [pc, #92]	; (8001d58 <RestartWakeupCounter+0xa4>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	4b15      	ldr	r3, [pc, #84]	; (8001d58 <RestartWakeupCounter+0xa4>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001d0a:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001d0c:	4b13      	ldr	r3, [pc, #76]	; (8001d5c <RestartWakeupCounter+0xa8>)
 8001d0e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001d12:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001d14:	2003      	movs	r0, #3
 8001d16:	f002 ff76 	bl	8004c06 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001d1a:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <RestartWakeupCounter+0xac>)
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	0c1b      	lsrs	r3, r3, #16
 8001d20:	041b      	lsls	r3, r3, #16
 8001d22:	88fa      	ldrh	r2, [r7, #6]
 8001d24:	490e      	ldr	r1, [pc, #56]	; (8001d60 <RestartWakeupCounter+0xac>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001d2a:	f7ff fd8f 	bl	800184c <ReadRtcSsrValue>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	4a07      	ldr	r2, [pc, #28]	; (8001d50 <RestartWakeupCounter+0x9c>)
 8001d32:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001d34:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <RestartWakeupCounter+0xa4>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689a      	ldr	r2, [r3, #8]
 8001d3a:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <RestartWakeupCounter+0xa4>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d42:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001d44:	f3af 8000 	nop.w
  return ;
 8001d48:	bf00      	nop
}
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	2000042c 	.word	0x2000042c
 8001d54:	20000431 	.word	0x20000431
 8001d58:	20000490 	.word	0x20000490
 8001d5c:	58000800 	.word	0x58000800
 8001d60:	40002800 	.word	0x40002800

08001d64 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001d6a:	4b45      	ldr	r3, [pc, #276]	; (8001e80 <RescheduleTimerList+0x11c>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d76:	d107      	bne.n	8001d88 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001d78:	bf00      	nop
 8001d7a:	4b42      	ldr	r3, [pc, #264]	; (8001e84 <RescheduleTimerList+0x120>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1f8      	bne.n	8001d7a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001d88:	4b3e      	ldr	r3, [pc, #248]	; (8001e84 <RescheduleTimerList+0x120>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689a      	ldr	r2, [r3, #8]
 8001d8e:	4b3d      	ldr	r3, [pc, #244]	; (8001e84 <RescheduleTimerList+0x120>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d96:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001d98:	4b3b      	ldr	r3, [pc, #236]	; (8001e88 <RescheduleTimerList+0x124>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001d9e:	7bfa      	ldrb	r2, [r7, #15]
 8001da0:	493a      	ldr	r1, [pc, #232]	; (8001e8c <RescheduleTimerList+0x128>)
 8001da2:	4613      	mov	r3, r2
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	4413      	add	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	440b      	add	r3, r1
 8001dac:	3308      	adds	r3, #8
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001db2:	f7ff ff3f 	bl	8001c34 <ReturnTimeElapsed>
 8001db6:	4603      	mov	r3, r0
 8001db8:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001dba:	88fb      	ldrh	r3, [r7, #6]
 8001dbc:	68ba      	ldr	r2, [r7, #8]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d205      	bcs.n	8001dce <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001dc6:	4b32      	ldr	r3, [pc, #200]	; (8001e90 <RescheduleTimerList+0x12c>)
 8001dc8:	2201      	movs	r2, #1
 8001dca:	701a      	strb	r2, [r3, #0]
 8001dcc:	e04d      	b.n	8001e6a <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001dce:	88fb      	ldrh	r3, [r7, #6]
 8001dd0:	4a30      	ldr	r2, [pc, #192]	; (8001e94 <RescheduleTimerList+0x130>)
 8001dd2:	8812      	ldrh	r2, [r2, #0]
 8001dd4:	b292      	uxth	r2, r2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	461a      	mov	r2, r3
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d906      	bls.n	8001dee <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001de0:	4b2c      	ldr	r3, [pc, #176]	; (8001e94 <RescheduleTimerList+0x130>)
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001de6:	4b2a      	ldr	r3, [pc, #168]	; (8001e90 <RescheduleTimerList+0x12c>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	701a      	strb	r2, [r3, #0]
 8001dec:	e03d      	b.n	8001e6a <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	88fb      	ldrh	r3, [r7, #6]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001df8:	4b25      	ldr	r3, [pc, #148]	; (8001e90 <RescheduleTimerList+0x12c>)
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001dfe:	e034      	b.n	8001e6a <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001e00:	7bfa      	ldrb	r2, [r7, #15]
 8001e02:	4922      	ldr	r1, [pc, #136]	; (8001e8c <RescheduleTimerList+0x128>)
 8001e04:	4613      	mov	r3, r2
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	4413      	add	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	440b      	add	r3, r1
 8001e0e:	3308      	adds	r3, #8
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	88fb      	ldrh	r3, [r7, #6]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d20a      	bcs.n	8001e2e <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001e18:	7bfa      	ldrb	r2, [r7, #15]
 8001e1a:	491c      	ldr	r1, [pc, #112]	; (8001e8c <RescheduleTimerList+0x128>)
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	4413      	add	r3, r2
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	440b      	add	r3, r1
 8001e26:	3308      	adds	r3, #8
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	e013      	b.n	8001e56 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001e2e:	7bfa      	ldrb	r2, [r7, #15]
 8001e30:	4916      	ldr	r1, [pc, #88]	; (8001e8c <RescheduleTimerList+0x128>)
 8001e32:	4613      	mov	r3, r2
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	4413      	add	r3, r2
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	440b      	add	r3, r1
 8001e3c:	3308      	adds	r3, #8
 8001e3e:	6819      	ldr	r1, [r3, #0]
 8001e40:	88fb      	ldrh	r3, [r7, #6]
 8001e42:	7bfa      	ldrb	r2, [r7, #15]
 8001e44:	1ac9      	subs	r1, r1, r3
 8001e46:	4811      	ldr	r0, [pc, #68]	; (8001e8c <RescheduleTimerList+0x128>)
 8001e48:	4613      	mov	r3, r2
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	4413      	add	r3, r2
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	4403      	add	r3, r0
 8001e52:	3308      	adds	r3, #8
 8001e54:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001e56:	7bfa      	ldrb	r2, [r7, #15]
 8001e58:	490c      	ldr	r1, [pc, #48]	; (8001e8c <RescheduleTimerList+0x128>)
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	4413      	add	r3, r2
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	440b      	add	r3, r1
 8001e64:	3315      	adds	r3, #21
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
 8001e6c:	2b06      	cmp	r3, #6
 8001e6e:	d1c7      	bne.n	8001e00 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001e70:	89bb      	ldrh	r3, [r7, #12]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff ff1e 	bl	8001cb4 <RestartWakeupCounter>

  return ;
 8001e78:	bf00      	nop
}
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40002800 	.word	0x40002800
 8001e84:	20000490 	.word	0x20000490
 8001e88:	20000428 	.word	0x20000428
 8001e8c:	20000398 	.word	0x20000398
 8001e90:	20000430 	.word	0x20000430
 8001e94:	20000436 	.word	0x20000436

08001e98 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08a      	sub	sp, #40	; 0x28
 8001e9c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e9e:	f3ef 8310 	mrs	r3, PRIMASK
 8001ea2:	617b      	str	r3, [r7, #20]
  return(result);
 8001ea4:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea8:	b672      	cpsid	i
}
 8001eaa:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001eac:	4b59      	ldr	r3, [pc, #356]	; (8002014 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	22ca      	movs	r2, #202	; 0xca
 8001eb2:	625a      	str	r2, [r3, #36]	; 0x24
 8001eb4:	4b57      	ldr	r3, [pc, #348]	; (8002014 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2253      	movs	r2, #83	; 0x53
 8001eba:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001ebc:	4b55      	ldr	r3, [pc, #340]	; (8002014 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	689a      	ldr	r2, [r3, #8]
 8001ec2:	4b54      	ldr	r3, [pc, #336]	; (8002014 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eca:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001ecc:	4b52      	ldr	r3, [pc, #328]	; (8002018 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001ed4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001ed8:	4950      	ldr	r1, [pc, #320]	; (800201c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001eda:	4613      	mov	r3, r2
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	4413      	add	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	440b      	add	r3, r1
 8001ee4:	330c      	adds	r3, #12
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d16e      	bne.n	8001fcc <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001eee:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001ef2:	494a      	ldr	r1, [pc, #296]	; (800201c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	4413      	add	r3, r2
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	440b      	add	r3, r1
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001f02:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001f06:	4945      	ldr	r1, [pc, #276]	; (800201c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001f08:	4613      	mov	r3, r2
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	4413      	add	r3, r2
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	440b      	add	r3, r1
 8001f12:	3310      	adds	r3, #16
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001f18:	4b41      	ldr	r3, [pc, #260]	; (8002020 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d04c      	beq.n	8001fbc <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001f22:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001f26:	493d      	ldr	r1, [pc, #244]	; (800201c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001f28:	4613      	mov	r3, r2
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	4413      	add	r3, r2
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	440b      	add	r3, r1
 8001f32:	330d      	adds	r3, #13
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d124      	bne.n	8001f86 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001f3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f40:	2101      	movs	r1, #1
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff fdf2 	bl	8001b2c <UnlinkTimer>
 8001f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4a:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	f383 8810 	msr	PRIMASK, r3
}
 8001f52:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001f54:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001f58:	4930      	ldr	r1, [pc, #192]	; (800201c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	4413      	add	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	440b      	add	r3, r1
 8001f64:	3304      	adds	r3, #4
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f000 fa32 	bl	80023d8 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001f74:	4b27      	ldr	r3, [pc, #156]	; (8002014 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	22ca      	movs	r2, #202	; 0xca
 8001f7a:	625a      	str	r2, [r3, #36]	; 0x24
 8001f7c:	4b25      	ldr	r3, [pc, #148]	; (8002014 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2253      	movs	r2, #83	; 0x53
 8001f82:	625a      	str	r2, [r3, #36]	; 0x24
 8001f84:	e012      	b.n	8001fac <HW_TS_RTC_Wakeup_Handler+0x114>
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f383 8810 	msr	PRIMASK, r3
}
 8001f90:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001f92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f96:	4618      	mov	r0, r3
 8001f98:	f000 f99a 	bl	80022d0 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001f9c:	4b1d      	ldr	r3, [pc, #116]	; (8002014 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	22ca      	movs	r2, #202	; 0xca
 8001fa2:	625a      	str	r2, [r3, #36]	; 0x24
 8001fa4:	4b1b      	ldr	r3, [pc, #108]	; (8002014 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2253      	movs	r2, #83	; 0x53
 8001faa:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001fac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001fb0:	69fa      	ldr	r2, [r7, #28]
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	69b8      	ldr	r0, [r7, #24]
 8001fb6:	f000 fa95 	bl	80024e4 <HW_TS_RTC_Int_AppNot>
 8001fba:	e022      	b.n	8002002 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001fbc:	f7ff fed2 	bl	8001d64 <RescheduleTimerList>
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	f383 8810 	msr	PRIMASK, r3
}
 8001fca:	e01a      	b.n	8002002 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001fcc:	bf00      	nop
 8001fce:	4b11      	ldr	r3, [pc, #68]	; (8002014 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	f003 0304 	and.w	r3, r3, #4
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0f8      	beq.n	8001fce <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001fdc:	4b0d      	ldr	r3, [pc, #52]	; (8002014 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001fec:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001fee:	4b0d      	ldr	r3, [pc, #52]	; (8002024 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001ff0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001ff4:	60da      	str	r2, [r3, #12]
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f383 8810 	msr	PRIMASK, r3
}
 8002000:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002002:	4b04      	ldr	r3, [pc, #16]	; (8002014 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	22ff      	movs	r2, #255	; 0xff
 8002008:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 800200a:	bf00      	nop
}
 800200c:	3728      	adds	r7, #40	; 0x28
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20000490 	.word	0x20000490
 8002018:	20000428 	.word	0x20000428
 800201c:	20000398 	.word	0x20000398
 8002020:	20000430 	.word	0x20000430
 8002024:	58000800 	.word	0x58000800

08002028 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b088      	sub	sp, #32
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	6039      	str	r1, [r7, #0]
 8002032:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002034:	4b5e      	ldr	r3, [pc, #376]	; (80021b0 <HW_TS_Init+0x188>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	22ca      	movs	r2, #202	; 0xca
 800203a:	625a      	str	r2, [r3, #36]	; 0x24
 800203c:	4b5c      	ldr	r3, [pc, #368]	; (80021b0 <HW_TS_Init+0x188>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2253      	movs	r2, #83	; 0x53
 8002042:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002044:	4b5b      	ldr	r3, [pc, #364]	; (80021b4 <HW_TS_Init+0x18c>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	4a5a      	ldr	r2, [pc, #360]	; (80021b4 <HW_TS_Init+0x18c>)
 800204a:	f043 0320 	orr.w	r3, r3, #32
 800204e:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8002050:	4b58      	ldr	r3, [pc, #352]	; (80021b4 <HW_TS_Init+0x18c>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	b2db      	uxtb	r3, r3
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	b2db      	uxtb	r3, r3
 800205c:	f1c3 0304 	rsb	r3, r3, #4
 8002060:	b2da      	uxtb	r2, r3
 8002062:	4b55      	ldr	r3, [pc, #340]	; (80021b8 <HW_TS_Init+0x190>)
 8002064:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8002066:	4b53      	ldr	r3, [pc, #332]	; (80021b4 <HW_TS_Init+0x18c>)
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800206e:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8002072:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	fa92 f2a2 	rbit	r2, r2
 800207a:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	2a00      	cmp	r2, #0
 8002084:	d101      	bne.n	800208a <HW_TS_Init+0x62>
  {
    return 32U;
 8002086:	2220      	movs	r2, #32
 8002088:	e003      	b.n	8002092 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	fab2 f282 	clz	r2, r2
 8002090:	b2d2      	uxtb	r2, r2
 8002092:	40d3      	lsrs	r3, r2
 8002094:	b2db      	uxtb	r3, r3
 8002096:	3301      	adds	r3, #1
 8002098:	b2da      	uxtb	r2, r3
 800209a:	4b48      	ldr	r3, [pc, #288]	; (80021bc <HW_TS_Init+0x194>)
 800209c:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800209e:	4b45      	ldr	r3, [pc, #276]	; (80021b4 <HW_TS_Init+0x18c>)
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	3301      	adds	r3, #1
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	4b44      	ldr	r3, [pc, #272]	; (80021c0 <HW_TS_Init+0x198>)
 80020b0:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80020b2:	4b43      	ldr	r3, [pc, #268]	; (80021c0 <HW_TS_Init+0x198>)
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	4a40      	ldr	r2, [pc, #256]	; (80021bc <HW_TS_Init+0x194>)
 80020ba:	7812      	ldrb	r2, [r2, #0]
 80020bc:	fb02 f303 	mul.w	r3, r2, r3
 80020c0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80020c4:	4a3c      	ldr	r2, [pc, #240]	; (80021b8 <HW_TS_Init+0x190>)
 80020c6:	7812      	ldrb	r2, [r2, #0]
 80020c8:	40d3      	lsrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d904      	bls.n	80020e0 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80020d6:	4b3b      	ldr	r3, [pc, #236]	; (80021c4 <HW_TS_Init+0x19c>)
 80020d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020dc:	801a      	strh	r2, [r3, #0]
 80020de:	e003      	b.n	80020e8 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	4b37      	ldr	r3, [pc, #220]	; (80021c4 <HW_TS_Init+0x19c>)
 80020e6:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80020e8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80020ec:	f7ff fb9c 	bl	8001828 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80020f0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80020f4:	f7ff fb84 	bl	8001800 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80020f8:	79fb      	ldrb	r3, [r7, #7]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d13d      	bne.n	800217a <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80020fe:	4b32      	ldr	r3, [pc, #200]	; (80021c8 <HW_TS_Init+0x1a0>)
 8002100:	2201      	movs	r2, #1
 8002102:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002104:	4b31      	ldr	r3, [pc, #196]	; (80021cc <HW_TS_Init+0x1a4>)
 8002106:	f04f 32ff 	mov.w	r2, #4294967295
 800210a:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800210c:	2300      	movs	r3, #0
 800210e:	77fb      	strb	r3, [r7, #31]
 8002110:	e00c      	b.n	800212c <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8002112:	7ffa      	ldrb	r2, [r7, #31]
 8002114:	492e      	ldr	r1, [pc, #184]	; (80021d0 <HW_TS_Init+0x1a8>)
 8002116:	4613      	mov	r3, r2
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	4413      	add	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	440b      	add	r3, r1
 8002120:	330c      	adds	r3, #12
 8002122:	2200      	movs	r2, #0
 8002124:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002126:	7ffb      	ldrb	r3, [r7, #31]
 8002128:	3301      	adds	r3, #1
 800212a:	77fb      	strb	r3, [r7, #31]
 800212c:	7ffb      	ldrb	r3, [r7, #31]
 800212e:	2b05      	cmp	r3, #5
 8002130:	d9ef      	bls.n	8002112 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8002132:	4b28      	ldr	r3, [pc, #160]	; (80021d4 <HW_TS_Init+0x1ac>)
 8002134:	2206      	movs	r2, #6
 8002136:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002138:	4b1d      	ldr	r3, [pc, #116]	; (80021b0 <HW_TS_Init+0x188>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	4b1c      	ldr	r3, [pc, #112]	; (80021b0 <HW_TS_Init+0x188>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002146:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8002148:	4b19      	ldr	r3, [pc, #100]	; (80021b0 <HW_TS_Init+0x188>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	b2da      	uxtb	r2, r3
 8002150:	4b17      	ldr	r3, [pc, #92]	; (80021b0 <HW_TS_Init+0x188>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002158:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800215a:	4b1f      	ldr	r3, [pc, #124]	; (80021d8 <HW_TS_Init+0x1b0>)
 800215c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002160:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8002162:	2003      	movs	r0, #3
 8002164:	f002 fd4f 	bl	8004c06 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8002168:	4b11      	ldr	r3, [pc, #68]	; (80021b0 <HW_TS_Init+0x188>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	4b10      	ldr	r3, [pc, #64]	; (80021b0 <HW_TS_Init+0x188>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	e009      	b.n	800218e <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800217a:	4b0d      	ldr	r3, [pc, #52]	; (80021b0 <HW_TS_Init+0x188>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002184:	2b00      	cmp	r3, #0
 8002186:	d002      	beq.n	800218e <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002188:	2003      	movs	r0, #3
 800218a:	f002 fd2e 	bl	8004bea <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800218e:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <HW_TS_Init+0x188>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	22ff      	movs	r2, #255	; 0xff
 8002194:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8002196:	2200      	movs	r2, #0
 8002198:	2103      	movs	r1, #3
 800219a:	2003      	movs	r0, #3
 800219c:	f002 fce3 	bl	8004b66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80021a0:	2003      	movs	r0, #3
 80021a2:	f002 fcfa 	bl	8004b9a <HAL_NVIC_EnableIRQ>

  return;
 80021a6:	bf00      	nop
}
 80021a8:	3720      	adds	r7, #32
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20000490 	.word	0x20000490
 80021b4:	40002800 	.word	0x40002800
 80021b8:	20000431 	.word	0x20000431
 80021bc:	20000432 	.word	0x20000432
 80021c0:	20000434 	.word	0x20000434
 80021c4:	20000436 	.word	0x20000436
 80021c8:	20000430 	.word	0x20000430
 80021cc:	2000042c 	.word	0x2000042c
 80021d0:	20000398 	.word	0x20000398
 80021d4:	20000428 	.word	0x20000428
 80021d8:	58000800 	.word	0x58000800

080021dc <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80021dc:	b480      	push	{r7}
 80021de:	b08b      	sub	sp, #44	; 0x2c
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	603b      	str	r3, [r7, #0]
 80021e8:	4613      	mov	r3, r2
 80021ea:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021f2:	f3ef 8310 	mrs	r3, PRIMASK
 80021f6:	61fb      	str	r3, [r7, #28]
  return(result);
 80021f8:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80021fa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80021fc:	b672      	cpsid	i
}
 80021fe:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002200:	e004      	b.n	800220c <HW_TS_Create+0x30>
  {
    loop++;
 8002202:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002206:	3301      	adds	r3, #1
 8002208:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800220c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002210:	2b05      	cmp	r3, #5
 8002212:	d80c      	bhi.n	800222e <HW_TS_Create+0x52>
 8002214:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002218:	492c      	ldr	r1, [pc, #176]	; (80022cc <HW_TS_Create+0xf0>)
 800221a:	4613      	mov	r3, r2
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	4413      	add	r3, r2
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	440b      	add	r3, r1
 8002224:	330c      	adds	r3, #12
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1e9      	bne.n	8002202 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800222e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002232:	2b06      	cmp	r3, #6
 8002234:	d038      	beq.n	80022a8 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8002236:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800223a:	4924      	ldr	r1, [pc, #144]	; (80022cc <HW_TS_Create+0xf0>)
 800223c:	4613      	mov	r3, r2
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	4413      	add	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	440b      	add	r3, r1
 8002246:	330c      	adds	r3, #12
 8002248:	2201      	movs	r2, #1
 800224a:	701a      	strb	r2, [r3, #0]
 800224c:	6a3b      	ldr	r3, [r7, #32]
 800224e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	f383 8810 	msr	PRIMASK, r3
}
 8002256:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8002258:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800225c:	491b      	ldr	r1, [pc, #108]	; (80022cc <HW_TS_Create+0xf0>)
 800225e:	4613      	mov	r3, r2
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	4413      	add	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	440b      	add	r3, r1
 8002268:	3310      	adds	r3, #16
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 800226e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002272:	4916      	ldr	r1, [pc, #88]	; (80022cc <HW_TS_Create+0xf0>)
 8002274:	4613      	mov	r3, r2
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	4413      	add	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	440b      	add	r3, r1
 800227e:	330d      	adds	r3, #13
 8002280:	79fa      	ldrb	r2, [r7, #7]
 8002282:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8002284:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002288:	4910      	ldr	r1, [pc, #64]	; (80022cc <HW_TS_Create+0xf0>)
 800228a:	4613      	mov	r3, r2
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	4413      	add	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	440b      	add	r3, r1
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800229e:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80022a0:	2300      	movs	r3, #0
 80022a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80022a6:	e008      	b.n	80022ba <HW_TS_Create+0xde>
 80022a8:	6a3b      	ldr	r3, [r7, #32]
 80022aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	f383 8810 	msr	PRIMASK, r3
}
 80022b2:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80022b4:	2301      	movs	r3, #1
 80022b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 80022ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80022be:	4618      	mov	r0, r3
 80022c0:	372c      	adds	r7, #44	; 0x2c
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	20000398 	.word	0x20000398

080022d0 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022da:	f3ef 8310 	mrs	r3, PRIMASK
 80022de:	60fb      	str	r3, [r7, #12]
  return(result);
 80022e0:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80022e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80022e4:	b672      	cpsid	i
}
 80022e6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80022e8:	2003      	movs	r0, #3
 80022ea:	f002 fc64 	bl	8004bb6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80022ee:	4b34      	ldr	r3, [pc, #208]	; (80023c0 <HW_TS_Stop+0xf0>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	22ca      	movs	r2, #202	; 0xca
 80022f4:	625a      	str	r2, [r3, #36]	; 0x24
 80022f6:	4b32      	ldr	r3, [pc, #200]	; (80023c0 <HW_TS_Stop+0xf0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2253      	movs	r2, #83	; 0x53
 80022fc:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80022fe:	79fa      	ldrb	r2, [r7, #7]
 8002300:	4930      	ldr	r1, [pc, #192]	; (80023c4 <HW_TS_Stop+0xf4>)
 8002302:	4613      	mov	r3, r2
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	4413      	add	r3, r2
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	440b      	add	r3, r1
 800230c:	330c      	adds	r3, #12
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d142      	bne.n	800239c <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	2100      	movs	r1, #0
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff fc06 	bl	8001b2c <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002320:	4b29      	ldr	r3, [pc, #164]	; (80023c8 <HW_TS_Stop+0xf8>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002326:	7cfb      	ldrb	r3, [r7, #19]
 8002328:	2b06      	cmp	r3, #6
 800232a:	d12f      	bne.n	800238c <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800232c:	4b27      	ldr	r3, [pc, #156]	; (80023cc <HW_TS_Stop+0xfc>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002338:	d107      	bne.n	800234a <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800233a:	bf00      	nop
 800233c:	4b20      	ldr	r3, [pc, #128]	; (80023c0 <HW_TS_Stop+0xf0>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	f003 0304 	and.w	r3, r3, #4
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f8      	bne.n	800233c <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800234a:	4b1d      	ldr	r3, [pc, #116]	; (80023c0 <HW_TS_Stop+0xf0>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	4b1b      	ldr	r3, [pc, #108]	; (80023c0 <HW_TS_Stop+0xf0>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002358:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800235a:	bf00      	nop
 800235c:	4b18      	ldr	r3, [pc, #96]	; (80023c0 <HW_TS_Stop+0xf0>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	f003 0304 	and.w	r3, r3, #4
 8002366:	2b00      	cmp	r3, #0
 8002368:	d0f8      	beq.n	800235c <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800236a:	4b15      	ldr	r3, [pc, #84]	; (80023c0 <HW_TS_Stop+0xf0>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	b2da      	uxtb	r2, r3
 8002372:	4b13      	ldr	r3, [pc, #76]	; (80023c0 <HW_TS_Stop+0xf0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800237a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800237c:	4b14      	ldr	r3, [pc, #80]	; (80023d0 <HW_TS_Stop+0x100>)
 800237e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002382:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002384:	2003      	movs	r0, #3
 8002386:	f002 fc3e 	bl	8004c06 <HAL_NVIC_ClearPendingIRQ>
 800238a:	e007      	b.n	800239c <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800238c:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <HW_TS_Stop+0x104>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	b2db      	uxtb	r3, r3
 8002392:	7cfa      	ldrb	r2, [r7, #19]
 8002394:	429a      	cmp	r2, r3
 8002396:	d001      	beq.n	800239c <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8002398:	f7ff fce4 	bl	8001d64 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800239c:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <HW_TS_Stop+0xf0>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	22ff      	movs	r2, #255	; 0xff
 80023a2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80023a4:	2003      	movs	r0, #3
 80023a6:	f002 fbf8 	bl	8004b9a <HAL_NVIC_EnableIRQ>
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	f383 8810 	msr	PRIMASK, r3
}
 80023b4:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80023b6:	bf00      	nop
}
 80023b8:	3718      	adds	r7, #24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000490 	.word	0x20000490
 80023c4:	20000398 	.word	0x20000398
 80023c8:	20000428 	.word	0x20000428
 80023cc:	40002800 	.word	0x40002800
 80023d0:	58000800 	.word	0x58000800
 80023d4:	20000429 	.word	0x20000429

080023d8 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	6039      	str	r1, [r7, #0]
 80023e2:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80023e4:	79fa      	ldrb	r2, [r7, #7]
 80023e6:	493b      	ldr	r1, [pc, #236]	; (80024d4 <HW_TS_Start+0xfc>)
 80023e8:	4613      	mov	r3, r2
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	4413      	add	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	440b      	add	r3, r1
 80023f2:	330c      	adds	r3, #12
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d103      	bne.n	8002404 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff ff66 	bl	80022d0 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002404:	f3ef 8310 	mrs	r3, PRIMASK
 8002408:	60fb      	str	r3, [r7, #12]
  return(result);
 800240a:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800240c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800240e:	b672      	cpsid	i
}
 8002410:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002412:	2003      	movs	r0, #3
 8002414:	f002 fbcf 	bl	8004bb6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002418:	4b2f      	ldr	r3, [pc, #188]	; (80024d8 <HW_TS_Start+0x100>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	22ca      	movs	r2, #202	; 0xca
 800241e:	625a      	str	r2, [r3, #36]	; 0x24
 8002420:	4b2d      	ldr	r3, [pc, #180]	; (80024d8 <HW_TS_Start+0x100>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2253      	movs	r2, #83	; 0x53
 8002426:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8002428:	79fa      	ldrb	r2, [r7, #7]
 800242a:	492a      	ldr	r1, [pc, #168]	; (80024d4 <HW_TS_Start+0xfc>)
 800242c:	4613      	mov	r3, r2
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	4413      	add	r3, r2
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	440b      	add	r3, r1
 8002436:	330c      	adds	r3, #12
 8002438:	2202      	movs	r2, #2
 800243a:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800243c:	79fa      	ldrb	r2, [r7, #7]
 800243e:	4925      	ldr	r1, [pc, #148]	; (80024d4 <HW_TS_Start+0xfc>)
 8002440:	4613      	mov	r3, r2
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	4413      	add	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	440b      	add	r3, r1
 800244a:	3308      	adds	r3, #8
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8002450:	79fa      	ldrb	r2, [r7, #7]
 8002452:	4920      	ldr	r1, [pc, #128]	; (80024d4 <HW_TS_Start+0xfc>)
 8002454:	4613      	mov	r3, r2
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	4413      	add	r3, r2
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	440b      	add	r3, r1
 800245e:	3304      	adds	r3, #4
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002464:	79fb      	ldrb	r3, [r7, #7]
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff fab6 	bl	80019d8 <linkTimer>
 800246c:	4603      	mov	r3, r0
 800246e:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002470:	4b1a      	ldr	r3, [pc, #104]	; (80024dc <HW_TS_Start+0x104>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002476:	4b1a      	ldr	r3, [pc, #104]	; (80024e0 <HW_TS_Start+0x108>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	b2db      	uxtb	r3, r3
 800247c:	7c7a      	ldrb	r2, [r7, #17]
 800247e:	429a      	cmp	r2, r3
 8002480:	d002      	beq.n	8002488 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8002482:	f7ff fc6f 	bl	8001d64 <RescheduleTimerList>
 8002486:	e013      	b.n	80024b0 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8002488:	79fa      	ldrb	r2, [r7, #7]
 800248a:	4912      	ldr	r1, [pc, #72]	; (80024d4 <HW_TS_Start+0xfc>)
 800248c:	4613      	mov	r3, r2
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	4413      	add	r3, r2
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	440b      	add	r3, r1
 8002496:	3308      	adds	r3, #8
 8002498:	6819      	ldr	r1, [r3, #0]
 800249a:	8a7b      	ldrh	r3, [r7, #18]
 800249c:	79fa      	ldrb	r2, [r7, #7]
 800249e:	1ac9      	subs	r1, r1, r3
 80024a0:	480c      	ldr	r0, [pc, #48]	; (80024d4 <HW_TS_Start+0xfc>)
 80024a2:	4613      	mov	r3, r2
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	4413      	add	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	4403      	add	r3, r0
 80024ac:	3308      	adds	r3, #8
 80024ae:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80024b0:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <HW_TS_Start+0x100>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	22ff      	movs	r2, #255	; 0xff
 80024b6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80024b8:	2003      	movs	r0, #3
 80024ba:	f002 fb6e 	bl	8004b9a <HAL_NVIC_EnableIRQ>
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	f383 8810 	msr	PRIMASK, r3
}
 80024c8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80024ca:	bf00      	nop
}
 80024cc:	3718      	adds	r7, #24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	20000398 	.word	0x20000398
 80024d8:	20000490 	.word	0x20000490
 80024dc:	20000428 	.word	0x20000428
 80024e0:	20000429 	.word	0x20000429

080024e4 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	460b      	mov	r3, r1
 80024ee:	607a      	str	r2, [r7, #4]
 80024f0:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4798      	blx	r3

  return;
 80024f6:	bf00      	nop
}
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
	...

08002500 <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	60b9      	str	r1, [r7, #8]
 8002508:	607b      	str	r3, [r7, #4]
 800250a:	4603      	mov	r3, r0
 800250c:	73fb      	strb	r3, [r7, #15]
 800250e:	4613      	mov	r3, r2
 8002510:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 8002512:	7bfb      	ldrb	r3, [r7, #15]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10c      	bne.n	8002532 <HW_UART_Receive_IT+0x32>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_UART_RX_IT(huart1, USART1);
 8002518:	4a08      	ldr	r2, [pc, #32]	; (800253c <HW_UART_Receive_IT+0x3c>)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	4b08      	ldr	r3, [pc, #32]	; (8002540 <HW_UART_Receive_IT+0x40>)
 8002520:	4a08      	ldr	r2, [pc, #32]	; (8002544 <HW_UART_Receive_IT+0x44>)
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	89bb      	ldrh	r3, [r7, #12]
 8002526:	461a      	mov	r2, r3
 8002528:	68b9      	ldr	r1, [r7, #8]
 800252a:	4805      	ldr	r0, [pc, #20]	; (8002540 <HW_UART_Receive_IT+0x40>)
 800252c:	f004 fefe 	bl	800732c <HAL_UART_Receive_IT>
            break;
 8002530:	e000      	b.n	8002534 <HW_UART_Receive_IT+0x34>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 8002532:	bf00      	nop
    }

    return;
 8002534:	bf00      	nop
}
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	20000438 	.word	0x20000438
 8002540:	200004b4 	.word	0x200004b4
 8002544:	40013800 	.word	0x40013800

08002548 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	60b9      	str	r1, [r7, #8]
 8002550:	607b      	str	r3, [r7, #4]
 8002552:	4603      	mov	r3, r0
 8002554:	73fb      	strb	r3, [r7, #15]
 8002556:	4613      	mov	r3, r2
 8002558:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800255a:	2300      	movs	r3, #0
 800255c:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 800255e:	2300      	movs	r3, #0
 8002560:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8002562:	7bfb      	ldrb	r3, [r7, #15]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d10e      	bne.n	8002586 <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 8002568:	4a17      	ldr	r2, [pc, #92]	; (80025c8 <HW_UART_Transmit_DMA+0x80>)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 800256e:	4b17      	ldr	r3, [pc, #92]	; (80025cc <HW_UART_Transmit_DMA+0x84>)
 8002570:	4a17      	ldr	r2, [pc, #92]	; (80025d0 <HW_UART_Transmit_DMA+0x88>)
 8002572:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002574:	89bb      	ldrh	r3, [r7, #12]
 8002576:	461a      	mov	r2, r3
 8002578:	68b9      	ldr	r1, [r7, #8]
 800257a:	4814      	ldr	r0, [pc, #80]	; (80025cc <HW_UART_Transmit_DMA+0x84>)
 800257c:	f004 ff22 	bl	80073c4 <HAL_UART_Transmit_DMA>
 8002580:	4603      	mov	r3, r0
 8002582:	75fb      	strb	r3, [r7, #23]
            break;
 8002584:	e000      	b.n	8002588 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8002586:	bf00      	nop
    }

    switch (hal_status)
 8002588:	7dfb      	ldrb	r3, [r7, #23]
 800258a:	2b03      	cmp	r3, #3
 800258c:	d816      	bhi.n	80025bc <HW_UART_Transmit_DMA+0x74>
 800258e:	a201      	add	r2, pc, #4	; (adr r2, 8002594 <HW_UART_Transmit_DMA+0x4c>)
 8002590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002594:	080025a5 	.word	0x080025a5
 8002598:	080025ab 	.word	0x080025ab
 800259c:	080025b1 	.word	0x080025b1
 80025a0:	080025b7 	.word	0x080025b7
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 80025a4:	2300      	movs	r3, #0
 80025a6:	75bb      	strb	r3, [r7, #22]
            break;
 80025a8:	e009      	b.n	80025be <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 80025aa:	2301      	movs	r3, #1
 80025ac:	75bb      	strb	r3, [r7, #22]
            break;
 80025ae:	e006      	b.n	80025be <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 80025b0:	2302      	movs	r3, #2
 80025b2:	75bb      	strb	r3, [r7, #22]
            break;
 80025b4:	e003      	b.n	80025be <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 80025b6:	2303      	movs	r3, #3
 80025b8:	75bb      	strb	r3, [r7, #22]
            break;
 80025ba:	e000      	b.n	80025be <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 80025bc:	bf00      	nop
    }

    return hw_status;
 80025be:	7dbb      	ldrb	r3, [r7, #22]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	2000043c 	.word	0x2000043c
 80025cc:	200004b4 	.word	0x200004b4
 80025d0:	40013800 	.word	0x40013800

080025d4 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	461a      	mov	r2, r3
 80025e2:	4b09      	ldr	r3, [pc, #36]	; (8002608 <HAL_UART_RxCpltCallback+0x34>)
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d107      	bne.n	80025f8 <HAL_UART_RxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 80025e8:	4b08      	ldr	r3, [pc, #32]	; (800260c <HAL_UART_RxCpltCallback+0x38>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d005      	beq.n	80025fc <HAL_UART_RxCpltCallback+0x28>
            {
                HW_huart1RxCb();
 80025f0:	4b06      	ldr	r3, [pc, #24]	; (800260c <HAL_UART_RxCpltCallback+0x38>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4798      	blx	r3
            }
            break;
 80025f6:	e001      	b.n	80025fc <HAL_UART_RxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 80025f8:	bf00      	nop
 80025fa:	e000      	b.n	80025fe <HAL_UART_RxCpltCallback+0x2a>
            break;
 80025fc:	bf00      	nop
    }

    return;
 80025fe:	bf00      	nop
}
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40013800 	.word	0x40013800
 800260c:	20000438 	.word	0x20000438

08002610 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	461a      	mov	r2, r3
 800261e:	4b09      	ldr	r3, [pc, #36]	; (8002644 <HAL_UART_TxCpltCallback+0x34>)
 8002620:	429a      	cmp	r2, r3
 8002622:	d107      	bne.n	8002634 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8002624:	4b08      	ldr	r3, [pc, #32]	; (8002648 <HAL_UART_TxCpltCallback+0x38>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d005      	beq.n	8002638 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 800262c:	4b06      	ldr	r3, [pc, #24]	; (8002648 <HAL_UART_TxCpltCallback+0x38>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4798      	blx	r3
            }
            break;
 8002632:	e001      	b.n	8002638 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8002634:	bf00      	nop
 8002636:	e000      	b.n	800263a <HAL_UART_TxCpltCallback+0x2a>
            break;
 8002638:	bf00      	nop
    }

    return;
 800263a:	bf00      	nop
}
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40013800 	.word	0x40013800
 8002648:	2000043c 	.word	0x2000043c

0800264c <LL_RCC_LSE_SetDriveCapability>:
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265c:	f023 0218 	bic.w	r2, r3, #24
 8002660:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4313      	orrs	r3, r2
 8002668:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <LL_AHB1_GRP1_EnableClock>:
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002684:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002686:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4313      	orrs	r3, r2
 800268e:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002694:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4013      	ands	r3, r2
 800269a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800269c:	68fb      	ldr	r3, [r7, #12]
}
 800269e:	bf00      	nop
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr

080026aa <LL_AHB2_GRP1_EnableClock>:
{
 80026aa:	b480      	push	{r7}
 80026ac:	b085      	sub	sp, #20
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80026b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4313      	orrs	r3, r2
 80026c0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80026c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4013      	ands	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80026ce:	68fb      	ldr	r3, [r7, #12]
}
 80026d0:	bf00      	nop
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <LL_RTC_EnableWriteProtection>:
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	22ff      	movs	r2, #255	; 0xff
 80026e8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <LL_RTC_DisableWriteProtection>:
{
 80026f6:	b480      	push	{r7}
 80026f8:	b083      	sub	sp, #12
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	22ca      	movs	r2, #202	; 0xca
 8002702:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2253      	movs	r2, #83	; 0x53
 8002708:	625a      	str	r2, [r3, #36]	; 0x24
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <LL_RTC_WAKEUP_SetClock>:
{
 8002716:	b480      	push	{r7}
 8002718:	b083      	sub	sp, #12
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
 800271e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f023 0207 	bic.w	r2, r3, #7
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	609a      	str	r2, [r3, #8]
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002740:	f002 f844 	bl	80047cc <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002744:	f7fe fd76 	bl	8001234 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002748:	f000 f813 	bl	8002772 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800274c:	f000 f85d 	bl	800280a <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8002750:	f000 f87c 	bl	800284c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002754:	f000 f93e 	bl	80029d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002758:	f000 f92a 	bl	80029b0 <MX_DMA_Init>
  MX_RTC_Init();
 800275c:	f000 f8a0 	bl	80028a0 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8002760:	f000 f8d8 	bl	8002914 <MX_USART1_UART_Init>
  MX_RNG_Init();
 8002764:	f000 f886 	bl	8002874 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002768:	f7fe fd72 	bl	8001250 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 800276c:	f7fe ff54 	bl	8001618 <MX_APPE_Process>
 8002770:	e7fc      	b.n	800276c <main+0x30>

08002772 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b098      	sub	sp, #96	; 0x60
 8002776:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002778:	f107 031c 	add.w	r3, r7, #28
 800277c:	2244      	movs	r2, #68	; 0x44
 800277e:	2100      	movs	r1, #0
 8002780:	4618      	mov	r0, r3
 8002782:	f00a fff3 	bl	800d76c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002786:	463b      	mov	r3, r7
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	605a      	str	r2, [r3, #4]
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	60da      	str	r2, [r3, #12]
 8002792:	611a      	str	r2, [r3, #16]
 8002794:	615a      	str	r2, [r3, #20]
 8002796:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002798:	f002 ffda 	bl	8005750 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800279c:	2000      	movs	r0, #0
 800279e:	f7ff ff55 	bl	800264c <LL_RCC_LSE_SetDriveCapability>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80027a2:	2307      	movs	r3, #7
 80027a4:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80027a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80027ac:	2301      	movs	r3, #1
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027b6:	2340      	movs	r3, #64	; 0x40
 80027b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80027ba:	2300      	movs	r3, #0
 80027bc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027be:	f107 031c 	add.w	r3, r7, #28
 80027c2:	4618      	mov	r0, r3
 80027c4:	f003 fb2c 	bl	8005e20 <HAL_RCC_OscConfig>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <SystemClock_Config+0x60>
  {
    Error_Handler();
 80027ce:	f000 f90b 	bl	80029e8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80027d2:	236f      	movs	r3, #111	; 0x6f
 80027d4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80027d6:	2302      	movs	r3, #2
 80027d8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027da:	2300      	movs	r3, #0
 80027dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027de:	2300      	movs	r3, #0
 80027e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027e2:	2300      	movs	r3, #0
 80027e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80027e6:	2300      	movs	r3, #0
 80027e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80027ea:	2300      	movs	r3, #0
 80027ec:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80027ee:	463b      	mov	r3, r7
 80027f0:	2101      	movs	r1, #1
 80027f2:	4618      	mov	r0, r3
 80027f4:	f003 fe4a 	bl	800648c <HAL_RCC_ClockConfig>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80027fe:	f000 f8f3 	bl	80029e8 <Error_Handler>
  }
}
 8002802:	bf00      	nop
 8002804:	3760      	adds	r7, #96	; 0x60
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b08c      	sub	sp, #48	; 0x30
 800280e:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002810:	463b      	mov	r3, r7
 8002812:	2230      	movs	r2, #48	; 0x30
 8002814:	2100      	movs	r1, #0
 8002816:	4618      	mov	r0, r3
 8002818:	f00a ffa8 	bl	800d76c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800281c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002820:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002822:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002826:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8002828:	2302      	movs	r3, #2
 800282a:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800282c:	2310      	movs	r3, #16
 800282e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002830:	463b      	mov	r3, r7
 8002832:	4618      	mov	r0, r3
 8002834:	f004 f9ec 	bl	8006c10 <HAL_RCCEx_PeriphCLKConfig>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 800283e:	f000 f8d3 	bl	80029e8 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002842:	bf00      	nop
 8002844:	3730      	adds	r7, #48	; 0x30
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
void MX_IPCC_Init(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002850:	4b06      	ldr	r3, [pc, #24]	; (800286c <MX_IPCC_Init+0x20>)
 8002852:	4a07      	ldr	r2, [pc, #28]	; (8002870 <MX_IPCC_Init+0x24>)
 8002854:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002856:	4805      	ldr	r0, [pc, #20]	; (800286c <MX_IPCC_Init+0x20>)
 8002858:	f002 fef4 	bl	8005644 <HAL_IPCC_Init>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002862:	f000 f8c1 	bl	80029e8 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002866:	bf00      	nop
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	20000440 	.word	0x20000440
 8002870:	58000c00 	.word	0x58000c00

08002874 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002878:	4b07      	ldr	r3, [pc, #28]	; (8002898 <MX_RNG_Init+0x24>)
 800287a:	4a08      	ldr	r2, [pc, #32]	; (800289c <MX_RNG_Init+0x28>)
 800287c:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800287e:	4b06      	ldr	r3, [pc, #24]	; (8002898 <MX_RNG_Init+0x24>)
 8002880:	2200      	movs	r2, #0
 8002882:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002884:	4804      	ldr	r0, [pc, #16]	; (8002898 <MX_RNG_Init+0x24>)
 8002886:	f004 fab9 	bl	8006dfc <HAL_RNG_Init>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8002890:	f000 f8aa 	bl	80029e8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002894:	bf00      	nop
 8002896:	bd80      	pop	{r7, pc}
 8002898:	2000047c 	.word	0x2000047c
 800289c:	58001000 	.word	0x58001000

080028a0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
void MX_RTC_Init(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80028a4:	4b19      	ldr	r3, [pc, #100]	; (800290c <MX_RTC_Init+0x6c>)
 80028a6:	4a1a      	ldr	r2, [pc, #104]	; (8002910 <MX_RTC_Init+0x70>)
 80028a8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80028aa:	4b18      	ldr	r3, [pc, #96]	; (800290c <MX_RTC_Init+0x6c>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80028b0:	4b16      	ldr	r3, [pc, #88]	; (800290c <MX_RTC_Init+0x6c>)
 80028b2:	220f      	movs	r2, #15
 80028b4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80028b6:	4b15      	ldr	r3, [pc, #84]	; (800290c <MX_RTC_Init+0x6c>)
 80028b8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80028bc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80028be:	4b13      	ldr	r3, [pc, #76]	; (800290c <MX_RTC_Init+0x6c>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80028c4:	4b11      	ldr	r3, [pc, #68]	; (800290c <MX_RTC_Init+0x6c>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80028ca:	4b10      	ldr	r3, [pc, #64]	; (800290c <MX_RTC_Init+0x6c>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80028d0:	480e      	ldr	r0, [pc, #56]	; (800290c <MX_RTC_Init+0x6c>)
 80028d2:	f004 fac9 	bl	8006e68 <HAL_RTC_Init>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 80028dc:	f000 f884 	bl	80029e8 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80028e0:	2200      	movs	r2, #0
 80028e2:	2100      	movs	r1, #0
 80028e4:	4809      	ldr	r0, [pc, #36]	; (800290c <MX_RTC_Init+0x6c>)
 80028e6:	f004 fbbf 	bl	8007068 <HAL_RTCEx_SetWakeUpTimer_IT>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 80028f0:	f000 f87a 	bl	80029e8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80028f4:	4806      	ldr	r0, [pc, #24]	; (8002910 <MX_RTC_Init+0x70>)
 80028f6:	f7ff fefe 	bl	80026f6 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80028fa:	2100      	movs	r1, #0
 80028fc:	4804      	ldr	r0, [pc, #16]	; (8002910 <MX_RTC_Init+0x70>)
 80028fe:	f7ff ff0a 	bl	8002716 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8002902:	4803      	ldr	r0, [pc, #12]	; (8002910 <MX_RTC_Init+0x70>)
 8002904:	f7ff feea 	bl	80026dc <LL_RTC_EnableWriteProtection>
  /* USER CODE END RTC_Init 2 */

}
 8002908:	bf00      	nop
 800290a:	bd80      	pop	{r7, pc}
 800290c:	20000490 	.word	0x20000490
 8002910:	40002800 	.word	0x40002800

08002914 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002918:	4b23      	ldr	r3, [pc, #140]	; (80029a8 <MX_USART1_UART_Init+0x94>)
 800291a:	4a24      	ldr	r2, [pc, #144]	; (80029ac <MX_USART1_UART_Init+0x98>)
 800291c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800291e:	4b22      	ldr	r3, [pc, #136]	; (80029a8 <MX_USART1_UART_Init+0x94>)
 8002920:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002924:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002926:	4b20      	ldr	r3, [pc, #128]	; (80029a8 <MX_USART1_UART_Init+0x94>)
 8002928:	2200      	movs	r2, #0
 800292a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800292c:	4b1e      	ldr	r3, [pc, #120]	; (80029a8 <MX_USART1_UART_Init+0x94>)
 800292e:	2200      	movs	r2, #0
 8002930:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002932:	4b1d      	ldr	r3, [pc, #116]	; (80029a8 <MX_USART1_UART_Init+0x94>)
 8002934:	2200      	movs	r2, #0
 8002936:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002938:	4b1b      	ldr	r3, [pc, #108]	; (80029a8 <MX_USART1_UART_Init+0x94>)
 800293a:	220c      	movs	r2, #12
 800293c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800293e:	4b1a      	ldr	r3, [pc, #104]	; (80029a8 <MX_USART1_UART_Init+0x94>)
 8002940:	2200      	movs	r2, #0
 8002942:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002944:	4b18      	ldr	r3, [pc, #96]	; (80029a8 <MX_USART1_UART_Init+0x94>)
 8002946:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800294a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800294c:	4b16      	ldr	r3, [pc, #88]	; (80029a8 <MX_USART1_UART_Init+0x94>)
 800294e:	2200      	movs	r2, #0
 8002950:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002952:	4b15      	ldr	r3, [pc, #84]	; (80029a8 <MX_USART1_UART_Init+0x94>)
 8002954:	2200      	movs	r2, #0
 8002956:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002958:	4b13      	ldr	r3, [pc, #76]	; (80029a8 <MX_USART1_UART_Init+0x94>)
 800295a:	2200      	movs	r2, #0
 800295c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800295e:	4812      	ldr	r0, [pc, #72]	; (80029a8 <MX_USART1_UART_Init+0x94>)
 8002960:	f004 fc94 	bl	800728c <HAL_UART_Init>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800296a:	f000 f83d 	bl	80029e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800296e:	2100      	movs	r1, #0
 8002970:	480d      	ldr	r0, [pc, #52]	; (80029a8 <MX_USART1_UART_Init+0x94>)
 8002972:	f006 fce0 	bl	8009336 <HAL_UARTEx_SetTxFifoThreshold>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 800297c:	f000 f834 	bl	80029e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002980:	2100      	movs	r1, #0
 8002982:	4809      	ldr	r0, [pc, #36]	; (80029a8 <MX_USART1_UART_Init+0x94>)
 8002984:	f006 fd15 	bl	80093b2 <HAL_UARTEx_SetRxFifoThreshold>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 800298e:	f000 f82b 	bl	80029e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002992:	4805      	ldr	r0, [pc, #20]	; (80029a8 <MX_USART1_UART_Init+0x94>)
 8002994:	f006 fc96 	bl	80092c4 <HAL_UARTEx_DisableFifoMode>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 800299e:	f000 f823 	bl	80029e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80029a2:	bf00      	nop
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	200004b4 	.word	0x200004b4
 80029ac:	40013800 	.word	0x40013800

080029b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80029b4:	2004      	movs	r0, #4
 80029b6:	f7ff fe5f 	bl	8002678 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80029ba:	2001      	movs	r0, #1
 80029bc:	f7ff fe5c 	bl	8002678 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 80029c0:	2200      	movs	r2, #0
 80029c2:	210f      	movs	r1, #15
 80029c4:	200e      	movs	r0, #14
 80029c6:	f002 f8ce 	bl	8004b66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80029ca:	200e      	movs	r0, #14
 80029cc:	f002 f8e5 	bl	8004b9a <HAL_NVIC_EnableIRQ>

}
 80029d0:	bf00      	nop
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029d8:	2004      	movs	r0, #4
 80029da:	f7ff fe66 	bl	80026aa <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029de:	2001      	movs	r0, #1
 80029e0:	f7ff fe63 	bl	80026aa <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80029e4:	bf00      	nop
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80029ec:	bf00      	nop
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80029fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002a22:	b480      	push	{r7}
 8002a24:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002a3a:	bf00      	nop
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <LL_AHB2_GRP1_EnableClock>:
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4013      	ands	r3, r2
 8002a66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a68:	68fb      	ldr	r3, [r7, #12]
}
 8002a6a:	bf00      	nop
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <LL_AHB3_GRP1_EnableClock>:
{
 8002a76:	b480      	push	{r7}
 8002a78:	b085      	sub	sp, #20
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4013      	ands	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
}
 8002a9c:	bf00      	nop
 8002a9e:	3714      	adds	r7, #20
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <LL_APB1_GRP1_EnableClock>:
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ab6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002ac0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002acc:	68fb      	ldr	r3, [r7, #12]
}
 8002ace:	bf00      	nop
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <LL_APB2_GRP1_EnableClock>:
{
 8002ada:	b480      	push	{r7}
 8002adc:	b085      	sub	sp, #20
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ae8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002af6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4013      	ands	r3, r2
 8002afc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002afe:	68fb      	ldr	r3, [r7, #12]
}
 8002b00:	bf00      	nop
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002b10:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002b14:	f7ff ffaf 	bl	8002a76 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002b18:	2200      	movs	r2, #0
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	202e      	movs	r0, #46	; 0x2e
 8002b1e:	f002 f822 	bl	8004b66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002b22:	202e      	movs	r0, #46	; 0x2e
 8002b24:	f002 f839 	bl	8004b9a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b28:	bf00      	nop
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a0d      	ldr	r2, [pc, #52]	; (8002b70 <HAL_IPCC_MspInit+0x44>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d113      	bne.n	8002b66 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002b3e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002b42:	f7ff ff98 	bl	8002a76 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002b46:	2200      	movs	r2, #0
 8002b48:	2100      	movs	r1, #0
 8002b4a:	202c      	movs	r0, #44	; 0x2c
 8002b4c:	f002 f80b 	bl	8004b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002b50:	202c      	movs	r0, #44	; 0x2c
 8002b52:	f002 f822 	bl	8004b9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002b56:	2200      	movs	r2, #0
 8002b58:	2100      	movs	r1, #0
 8002b5a:	202d      	movs	r0, #45	; 0x2d
 8002b5c:	f002 f803 	bl	8004b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002b60:	202d      	movs	r0, #45	; 0x2d
 8002b62:	f002 f81a 	bl	8004b9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002b66:	bf00      	nop
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	58000c00 	.word	0x58000c00

08002b74 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b08e      	sub	sp, #56	; 0x38
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b7c:	f107 0308 	add.w	r3, r7, #8
 8002b80:	2230      	movs	r2, #48	; 0x30
 8002b82:	2100      	movs	r1, #0
 8002b84:	4618      	mov	r0, r3
 8002b86:	f00a fdf1 	bl	800d76c <memset>
  if(hrng->Instance==RNG)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a0d      	ldr	r2, [pc, #52]	; (8002bc4 <HAL_RNG_MspInit+0x50>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d113      	bne.n	8002bbc <HAL_RNG_MspInit+0x48>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002b94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b98:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_LSE;
 8002b9a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002b9e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ba0:	f107 0308 	add.w	r3, r7, #8
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f004 f833 	bl	8006c10 <HAL_RCCEx_PeriphCLKConfig>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8002bb0:	f7ff ff1a 	bl	80029e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002bb4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002bb8:	f7ff ff5d 	bl	8002a76 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8002bbc:	bf00      	nop
 8002bbe:	3738      	adds	r7, #56	; 0x38
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	58001000 	.word	0x58001000

08002bc8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b08e      	sub	sp, #56	; 0x38
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bd0:	f107 0308 	add.w	r3, r7, #8
 8002bd4:	2230      	movs	r2, #48	; 0x30
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f00a fdc7 	bl	800d76c <memset>
  if(hrtc->Instance==RTC)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a18      	ldr	r2, [pc, #96]	; (8002c44 <HAL_RTC_MspInit+0x7c>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d128      	bne.n	8002c3a <HAL_RTC_MspInit+0x72>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8002be8:	f002 fdb2 	bl	8005750 <HAL_PWR_EnableBkUpAccess>

  /**
  *  Write twice the value to flush the APB-AHB bridge
  *  This bit shall be written in the register before writing the next one
  */
  HAL_PWR_EnableBkUpAccess();
 8002bec:	f002 fdb0 	bl	8005750 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSI as RTC Input */
 8002bf0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002bf4:	f7ff feff 	bl	80029f6 <LL_RCC_SetRTCClockSource>
  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002bf8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002bfc:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002bfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c02:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c04:	f107 0308 	add.w	r3, r7, #8
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f004 f801 	bl	8006c10 <HAL_RCCEx_PeriphCLKConfig>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <HAL_RTC_MspInit+0x50>
    {
      Error_Handler();
 8002c14:	f7ff fee8 	bl	80029e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002c18:	f7ff ff03 	bl	8002a22 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002c1c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002c20:	f7ff ff42 	bl	8002aa8 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002c24:	2200      	movs	r2, #0
 8002c26:	2100      	movs	r1, #0
 8002c28:	2003      	movs	r0, #3
 8002c2a:	f001 ff9c 	bl	8004b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002c2e:	2003      	movs	r0, #3
 8002c30:	f001 ffb3 	bl	8004b9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f004 fad3 	bl	80071e0 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002c3a:	bf00      	nop
 8002c3c:	3738      	adds	r7, #56	; 0x38
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40002800 	.word	0x40002800

08002c48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b094      	sub	sp, #80	; 0x50
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c50:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	605a      	str	r2, [r3, #4]
 8002c5a:	609a      	str	r2, [r3, #8]
 8002c5c:	60da      	str	r2, [r3, #12]
 8002c5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c60:	f107 030c 	add.w	r3, r7, #12
 8002c64:	2230      	movs	r2, #48	; 0x30
 8002c66:	2100      	movs	r1, #0
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f00a fd7f 	bl	800d76c <memset>
  if(huart->Instance==USART1)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a2f      	ldr	r2, [pc, #188]	; (8002d30 <HAL_UART_MspInit+0xe8>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d157      	bne.n	8002d28 <HAL_UART_MspInit+0xe0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c80:	f107 030c 	add.w	r3, r7, #12
 8002c84:	4618      	mov	r0, r3
 8002c86:	f003 ffc3 	bl	8006c10 <HAL_RCCEx_PeriphCLKConfig>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002c90:	f7ff feaa 	bl	80029e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c94:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002c98:	f7ff ff1f 	bl	8002ada <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c9c:	2001      	movs	r0, #1
 8002c9e:	f7ff fed1 	bl	8002a44 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ca2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca8:	2302      	movs	r3, #2
 8002caa:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cac:	2301      	movs	r3, #1
 8002cae:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002cb4:	2307      	movs	r3, #7
 8002cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cc2:	f002 fb03 	bl	80052cc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002cc6:	4b1b      	ldr	r3, [pc, #108]	; (8002d34 <HAL_UART_MspInit+0xec>)
 8002cc8:	4a1b      	ldr	r2, [pc, #108]	; (8002d38 <HAL_UART_MspInit+0xf0>)
 8002cca:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002ccc:	4b19      	ldr	r3, [pc, #100]	; (8002d34 <HAL_UART_MspInit+0xec>)
 8002cce:	220f      	movs	r2, #15
 8002cd0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cd2:	4b18      	ldr	r3, [pc, #96]	; (8002d34 <HAL_UART_MspInit+0xec>)
 8002cd4:	2210      	movs	r2, #16
 8002cd6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cd8:	4b16      	ldr	r3, [pc, #88]	; (8002d34 <HAL_UART_MspInit+0xec>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002cde:	4b15      	ldr	r3, [pc, #84]	; (8002d34 <HAL_UART_MspInit+0xec>)
 8002ce0:	2280      	movs	r2, #128	; 0x80
 8002ce2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ce4:	4b13      	ldr	r3, [pc, #76]	; (8002d34 <HAL_UART_MspInit+0xec>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cea:	4b12      	ldr	r3, [pc, #72]	; (8002d34 <HAL_UART_MspInit+0xec>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002cf0:	4b10      	ldr	r3, [pc, #64]	; (8002d34 <HAL_UART_MspInit+0xec>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002cf6:	4b0f      	ldr	r3, [pc, #60]	; (8002d34 <HAL_UART_MspInit+0xec>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002cfc:	480d      	ldr	r0, [pc, #52]	; (8002d34 <HAL_UART_MspInit+0xec>)
 8002cfe:	f001 ff91 	bl	8004c24 <HAL_DMA_Init>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8002d08:	f7ff fe6e 	bl	80029e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a09      	ldr	r2, [pc, #36]	; (8002d34 <HAL_UART_MspInit+0xec>)
 8002d10:	67da      	str	r2, [r3, #124]	; 0x7c
 8002d12:	4a08      	ldr	r2, [pc, #32]	; (8002d34 <HAL_UART_MspInit+0xec>)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002d18:	2200      	movs	r2, #0
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	2024      	movs	r0, #36	; 0x24
 8002d1e:	f001 ff22 	bl	8004b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d22:	2024      	movs	r0, #36	; 0x24
 8002d24:	f001 ff39 	bl	8004b9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002d28:	bf00      	nop
 8002d2a:	3750      	adds	r7, #80	; 0x50
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40013800 	.word	0x40013800
 8002d34:	20000548 	.word	0x20000548
 8002d38:	40020044 	.word	0x40020044

08002d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d40:	e7fe      	b.n	8002d40 <NMI_Handler+0x4>

08002d42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d42:	b480      	push	{r7}
 8002d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d46:	e7fe      	b.n	8002d46 <HardFault_Handler+0x4>

08002d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d4c:	e7fe      	b.n	8002d4c <MemManage_Handler+0x4>

08002d4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d52:	e7fe      	b.n	8002d52 <BusFault_Handler+0x4>

08002d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d58:	e7fe      	b.n	8002d58 <UsageFault_Handler+0x4>

08002d5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d5e:	bf00      	nop
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d6c:	bf00      	nop
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d76:	b480      	push	{r7}
 8002d78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d7a:	bf00      	nop
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d88:	f001 fd7a 	bl	8004880 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d8c:	bf00      	nop
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002d94:	f7ff f880 	bl	8001e98 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002d98:	bf00      	nop
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002da0:	4802      	ldr	r0, [pc, #8]	; (8002dac <DMA1_Channel4_IRQHandler+0x10>)
 8002da2:	f002 f904 	bl	8004fae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002da6:	bf00      	nop
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	20000548 	.word	0x20000548

08002db0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002db4:	4802      	ldr	r0, [pc, #8]	; (8002dc0 <USART1_IRQHandler+0x10>)
 8002db6:	f004 fb85 	bl	80074c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002dba:	bf00      	nop
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	200004b4 	.word	0x200004b4

08002dc4 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002dc8:	f001 f9ec 	bl	80041a4 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002dcc:	bf00      	nop
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002dd4:	f001 fa1c 	bl	8004210 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002dd8:	bf00      	nop
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002de0:	f002 fc0c 	bl	80055fc <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002de4:	bf00      	nop
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <EXTI0_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 8002dec:	2001      	movs	r0, #1
 8002dee:	f002 fbed 	bl	80055cc <HAL_GPIO_EXTI_IRQHandler>
}
 8002df2:	bf00      	nop
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <EXTI4_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW2_EXTI_IRQHandler(void)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 8002dfa:	2010      	movs	r0, #16
 8002dfc:	f002 fbe6 	bl	80055cc <HAL_GPIO_EXTI_IRQHandler>
}
 8002e00:	bf00      	nop
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <EXTI9_5_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW3_EXTI_IRQHandler(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 8002e08:	2040      	movs	r0, #64	; 0x40
 8002e0a:	f002 fbdf 	bl	80055cc <HAL_GPIO_EXTI_IRQHandler>
}
 8002e0e:	bf00      	nop
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e12:	b480      	push	{r7}
 8002e14:	af00      	add	r7, sp, #0
  return 1;
 8002e16:	2301      	movs	r3, #1
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <_kill>:

int _kill(int pid, int sig)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b082      	sub	sp, #8
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
 8002e2a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e2c:	f00a fcf0 	bl	800d810 <__errno>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2216      	movs	r2, #22
 8002e34:	601a      	str	r2, [r3, #0]
  return -1;
 8002e36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <_exit>:

void _exit (int status)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b082      	sub	sp, #8
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e4a:	f04f 31ff 	mov.w	r1, #4294967295
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7ff ffe7 	bl	8002e22 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e54:	e7fe      	b.n	8002e54 <_exit+0x12>

08002e56 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b086      	sub	sp, #24
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	60f8      	str	r0, [r7, #12]
 8002e5e:	60b9      	str	r1, [r7, #8]
 8002e60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e62:	2300      	movs	r3, #0
 8002e64:	617b      	str	r3, [r7, #20]
 8002e66:	e00a      	b.n	8002e7e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e68:	f3af 8000 	nop.w
 8002e6c:	4601      	mov	r1, r0
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	60ba      	str	r2, [r7, #8]
 8002e74:	b2ca      	uxtb	r2, r1
 8002e76:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	617b      	str	r3, [r7, #20]
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	dbf0      	blt.n	8002e68 <_read+0x12>
  }

  return len;
 8002e86:	687b      	ldr	r3, [r7, #4]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3718      	adds	r7, #24
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002eb8:	605a      	str	r2, [r3, #4]
  return 0;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <_isatty>:

int _isatty(int file)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ed0:	2301      	movs	r3, #1
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b085      	sub	sp, #20
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	60f8      	str	r0, [r7, #12]
 8002ee6:	60b9      	str	r1, [r7, #8]
 8002ee8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f00:	4a14      	ldr	r2, [pc, #80]	; (8002f54 <_sbrk+0x5c>)
 8002f02:	4b15      	ldr	r3, [pc, #84]	; (8002f58 <_sbrk+0x60>)
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f0c:	4b13      	ldr	r3, [pc, #76]	; (8002f5c <_sbrk+0x64>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d102      	bne.n	8002f1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f14:	4b11      	ldr	r3, [pc, #68]	; (8002f5c <_sbrk+0x64>)
 8002f16:	4a12      	ldr	r2, [pc, #72]	; (8002f60 <_sbrk+0x68>)
 8002f18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f1a:	4b10      	ldr	r3, [pc, #64]	; (8002f5c <_sbrk+0x64>)
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4413      	add	r3, r2
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d207      	bcs.n	8002f38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f28:	f00a fc72 	bl	800d810 <__errno>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	220c      	movs	r2, #12
 8002f30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f32:	f04f 33ff 	mov.w	r3, #4294967295
 8002f36:	e009      	b.n	8002f4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f38:	4b08      	ldr	r3, [pc, #32]	; (8002f5c <_sbrk+0x64>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f3e:	4b07      	ldr	r3, [pc, #28]	; (8002f5c <_sbrk+0x64>)
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4413      	add	r3, r2
 8002f46:	4a05      	ldr	r2, [pc, #20]	; (8002f5c <_sbrk+0x64>)
 8002f48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3718      	adds	r7, #24
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	20003000 	.word	0x20003000
 8002f58:	00001000 	.word	0x00001000
 8002f5c:	200005a8 	.word	0x200005a8
 8002f60:	200018f8 	.word	0x200018f8

08002f64 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8002f68:	4b03      	ldr	r3, [pc, #12]	; (8002f78 <LL_FLASH_GetUDN+0x14>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	1fff7580 	.word	0x1fff7580

08002f7c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8002f80:	4b03      	ldr	r3, [pc, #12]	; (8002f90 <LL_FLASH_GetDeviceID+0x14>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	b2db      	uxtb	r3, r3
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr
 8002f90:	1fff7584 	.word	0x1fff7584

08002f94 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8002f98:	4b03      	ldr	r3, [pc, #12]	; (8002fa8 <LL_FLASH_GetSTCompanyID+0x14>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	0a1b      	lsrs	r3, r3, #8
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	1fff7584 	.word	0x1fff7584

08002fac <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8002fac:	b5b0      	push	{r4, r5, r7, lr}
 8002fae:	b090      	sub	sp, #64	; 0x40
 8002fb0:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8002fb2:	2392      	movs	r3, #146	; 0x92
 8002fb4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8002fb8:	4b3f      	ldr	r3, [pc, #252]	; (80030b8 <APP_BLE_Init+0x10c>)
 8002fba:	1d3c      	adds	r4, r7, #4
 8002fbc:	461d      	mov	r5, r3
 8002fbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002fce:	c403      	stmia	r4!, {r0, r1}
 8002fd0:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8002fd2:	f000 fb11 	bl	80035f8 <Ble_Tl_Init>

#if (CFG_LPM_STANDBY_SUPPORTED == 0)
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	2002      	movs	r0, #2
 8002fda:	f009 fae3 	bl	800c5a4 <UTIL_LPM_SetOffMode>
#endif /* CFG_LPM_STANDBY_SUPPORTED == 0 */

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8002fde:	4a37      	ldr	r2, [pc, #220]	; (80030bc <APP_BLE_Init+0x110>)
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	2004      	movs	r0, #4
 8002fe4:	f009 fc0a 	bl	800c7fc <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8002fe8:	1d3b      	adds	r3, r7, #4
 8002fea:	4618      	mov	r0, r3
 8002fec:	f008 f87a 	bl	800b0e4 <SHCI_C2_BLE_Init>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 8002ff6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d008      	beq.n	8003010 <APP_BLE_Init+0x64>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 8002ffe:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003002:	4619      	mov	r1, r3
 8003004:	482e      	ldr	r0, [pc, #184]	; (80030c0 <APP_BLE_Init+0x114>)
 8003006:	f00a fa63 	bl	800d4d0 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800300a:	f7ff fced 	bl	80029e8 <Error_Handler>
 800300e:	e002      	b.n	8003016 <APP_BLE_Init+0x6a>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 8003010:	482c      	ldr	r0, [pc, #176]	; (80030c4 <APP_BLE_Init+0x118>)
 8003012:	f00a fa5d 	bl	800d4d0 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8003016:	f000 fb05 	bl	8003624 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800301a:	f008 ffc3 	bl	800bfa4 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800301e:	4b2a      	ldr	r3, [pc, #168]	; (80030c8 <APP_BLE_Init+0x11c>)
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8003026:	4b28      	ldr	r3, [pc, #160]	; (80030c8 <APP_BLE_Init+0x11c>)
 8003028:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800302c:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800302e:	4a27      	ldr	r2, [pc, #156]	; (80030cc <APP_BLE_Init+0x120>)
 8003030:	2100      	movs	r1, #0
 8003032:	2001      	movs	r0, #1
 8003034:	f009 fbe2 	bl	800c7fc <UTIL_SEQ_RegTask>
#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
  UTIL_SEQ_RegTask(1<<CFG_TASK_CONN_UPDATE_REG_ID, UTIL_SEQ_RFU, Connection_Interval_Update_Req);
 8003038:	4a25      	ldr	r2, [pc, #148]	; (80030d0 <APP_BLE_Init+0x124>)
 800303a:	2100      	movs	r1, #0
 800303c:	2002      	movs	r0, #2
 800303e:	f009 fbdd 	bl	800c7fc <UTIL_SEQ_RegTask>
#if (BLE_CFG_OTA_REBOOT_CHAR != 0)
  a_ManufData[sizeof(a_ManufData)-8] = CFG_FEATURE_OTA_REBOOT;
#endif /* BLE_CFG_OTA_REBOOT_CHAR != 0 */

#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8003042:	2006      	movs	r0, #6
 8003044:	f007 fa75 	bl	800a532 <aci_hal_set_radio_activity_mask>
 8003048:	4603      	mov	r3, r0
 800304a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 800304e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003052:	2b00      	cmp	r3, #0
 8003054:	d006      	beq.n	8003064 <APP_BLE_Init+0xb8>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 8003056:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800305a:	4619      	mov	r1, r3
 800305c:	481d      	ldr	r0, [pc, #116]	; (80030d4 <APP_BLE_Init+0x128>)
 800305e:	f00a fa37 	bl	800d4d0 <iprintf>
 8003062:	e002      	b.n	800306a <APP_BLE_Init+0xbe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 8003064:	481c      	ldr	r0, [pc, #112]	; (80030d8 <APP_BLE_Init+0x12c>)
 8003066:	f00a fa33 	bl	800d4d0 <iprintf>
  }
#endif /* RADIO_ACTIVITY_EVENT != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
  index_con_int = 0;
 800306a:	4b1c      	ldr	r3, [pc, #112]	; (80030dc <APP_BLE_Init+0x130>)
 800306c:	2200      	movs	r2, #0
 800306e:	701a      	strb	r2, [r3, #0]
  mutex = 1;
 8003070:	4b1b      	ldr	r3, [pc, #108]	; (80030e0 <APP_BLE_Init+0x134>)
 8003072:	2201      	movs	r2, #1
 8003074:	701a      	strb	r2, [r3, #0]
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 8003076:	f000 ff2b 	bl	8003ed0 <P2PS_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 800307a:	4b1a      	ldr	r3, [pc, #104]	; (80030e4 <APP_BLE_Init+0x138>)
 800307c:	2200      	movs	r2, #0
 800307e:	491a      	ldr	r1, [pc, #104]	; (80030e8 <APP_BLE_Init+0x13c>)
 8003080:	2000      	movs	r0, #0
 8003082:	f7ff f8ab 	bl	80021dc <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 8003086:	4b19      	ldr	r3, [pc, #100]	; (80030ec <APP_BLE_Init+0x140>)
 8003088:	2200      	movs	r2, #0
 800308a:	4919      	ldr	r1, [pc, #100]	; (80030f0 <APP_BLE_Init+0x144>)
 800308c:	2000      	movs	r0, #0
 800308e:	f7ff f8a5 	bl	80021dc <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8003092:	4b0d      	ldr	r3, [pc, #52]	; (80030c8 <APP_BLE_Init+0x11c>)
 8003094:	2200      	movs	r2, #0
 8003096:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8003098:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <APP_BLE_Init+0x11c>)
 800309a:	2200      	movs	r2, #0
 800309c:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 800309e:	4b15      	ldr	r3, [pc, #84]	; (80030f4 <APP_BLE_Init+0x148>)
 80030a0:	2280      	movs	r2, #128	; 0x80
 80030a2:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 80030a4:	4b14      	ldr	r3, [pc, #80]	; (80030f8 <APP_BLE_Init+0x14c>)
 80030a6:	22a0      	movs	r2, #160	; 0xa0
 80030a8:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 80030aa:	2001      	movs	r0, #1
 80030ac:	f000 fc6a 	bl	8003984 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 80030b0:	bf00      	nop
}
 80030b2:	3740      	adds	r7, #64	; 0x40
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bdb0      	pop	{r4, r5, r7, pc}
 80030b8:	0800f9f4 	.word	0x0800f9f4
 80030bc:	0800aafd 	.word	0x0800aafd
 80030c0:	0800f918 	.word	0x0800f918
 80030c4:	0800f950 	.word	0x0800f950
 80030c8:	200005b4 	.word	0x200005b4
 80030cc:	08003b65 	.word	0x08003b65
 80030d0:	08003cad 	.word	0x08003cad
 80030d4:	0800f978 	.word	0x0800f978
 80030d8:	0800f9bc 	.word	0x0800f9bc
 80030dc:	20000640 	.word	0x20000640
 80030e0:	20000641 	.word	0x20000641
 80030e4:	08003bc5 	.word	0x08003bc5
 80030e8:	20000635 	.word	0x20000635
 80030ec:	08003bd5 	.word	0x08003bd5
 80030f0:	20000636 	.word	0x20000636
 80030f4:	20000638 	.word	0x20000638
 80030f8:	2000063a 	.word	0x2000063a

080030fc <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 80030fc:	b5b0      	push	{r4, r5, r7, lr}
 80030fe:	b090      	sub	sp, #64	; 0x40
 8003100:	af04      	add	r7, sp, #16
 8003102:	6078      	str	r0, [r7, #4]
	printf("start notification\n\r");
 8003104:	4896      	ldr	r0, [pc, #600]	; (8003360 <SVCCTL_App_Notification+0x264>)
 8003106:	f00a f9e3 	bl	800d4d0 <iprintf>
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  uint8_t           Tx_phy, Rx_phy;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800310a:	2392      	movs	r3, #146	; 0x92
 800310c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3301      	adds	r3, #1
 8003114:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (p_event_pckt->evt)
 8003116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	2bff      	cmp	r3, #255	; 0xff
 800311c:	f000 8140 	beq.w	80033a0 <SVCCTL_App_Notification+0x2a4>
 8003120:	2bff      	cmp	r3, #255	; 0xff
 8003122:	f300 821c 	bgt.w	800355e <SVCCTL_App_Notification+0x462>
 8003126:	2b05      	cmp	r3, #5
 8003128:	d002      	beq.n	8003130 <SVCCTL_App_Notification+0x34>
 800312a:	2b3e      	cmp	r3, #62	; 0x3e
 800312c:	d02e      	beq.n	800318c <SVCCTL_App_Notification+0x90>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800312e:	e216      	b.n	800355e <SVCCTL_App_Notification+0x462>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8003130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003132:	3302      	adds	r3, #2
 8003134:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800313c:	b29a      	uxth	r2, r3
 800313e:	4b89      	ldr	r3, [pc, #548]	; (8003364 <SVCCTL_App_Notification+0x268>)
 8003140:	8adb      	ldrh	r3, [r3, #22]
 8003142:	429a      	cmp	r2, r3
 8003144:	d114      	bne.n	8003170 <SVCCTL_App_Notification+0x74>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8003146:	4b87      	ldr	r3, [pc, #540]	; (8003364 <SVCCTL_App_Notification+0x268>)
 8003148:	2200      	movs	r2, #0
 800314a:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800314c:	4b85      	ldr	r3, [pc, #532]	; (8003364 <SVCCTL_App_Notification+0x268>)
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 8003154:	4884      	ldr	r0, [pc, #528]	; (8003368 <SVCCTL_App_Notification+0x26c>)
 8003156:	f00a fa29 	bl	800d5ac <puts>
                    p_disconnection_complete_event->Connection_Handle,
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003160:	b29b      	uxth	r3, r3
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 8003162:	4619      	mov	r1, r3
                    p_disconnection_complete_event->Reason);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	78db      	ldrb	r3, [r3, #3]
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 8003168:	461a      	mov	r2, r3
 800316a:	4880      	ldr	r0, [pc, #512]	; (800336c <SVCCTL_App_Notification+0x270>)
 800316c:	f00a f9b0 	bl	800d4d0 <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 8003170:	2001      	movs	r0, #1
 8003172:	f000 fc07 	bl	8003984 <Adv_Request>
      HandleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8003176:	4b7e      	ldr	r3, [pc, #504]	; (8003370 <SVCCTL_App_Notification+0x274>)
 8003178:	2201      	movs	r2, #1
 800317a:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800317c:	4b79      	ldr	r3, [pc, #484]	; (8003364 <SVCCTL_App_Notification+0x268>)
 800317e:	8ada      	ldrh	r2, [r3, #22]
 8003180:	4b7b      	ldr	r3, [pc, #492]	; (8003370 <SVCCTL_App_Notification+0x274>)
 8003182:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&HandleNotification);
 8003184:	487a      	ldr	r0, [pc, #488]	; (8003370 <SVCCTL_App_Notification+0x274>)
 8003186:	f000 fe8f 	bl	8003ea8 <P2PS_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800318a:	e1eb      	b.n	8003564 <SVCCTL_App_Notification+0x468>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800318c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318e:	3302      	adds	r3, #2
 8003190:	61fb      	str	r3, [r7, #28]
      switch (p_meta_evt->subevent)
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	2b0c      	cmp	r3, #12
 8003198:	d033      	beq.n	8003202 <SVCCTL_App_Notification+0x106>
 800319a:	2b0c      	cmp	r3, #12
 800319c:	f300 80de 	bgt.w	800335c <SVCCTL_App_Notification+0x260>
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d06c      	beq.n	800327e <SVCCTL_App_Notification+0x182>
 80031a4:	2b03      	cmp	r3, #3
 80031a6:	f040 80d9 	bne.w	800335c <SVCCTL_App_Notification+0x260>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	3301      	adds	r3, #1
 80031ae:	617b      	str	r3, [r7, #20]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 80031b0:	4870      	ldr	r0, [pc, #448]	; (8003374 <SVCCTL_App_Notification+0x278>)
 80031b2:	f00a f9fb 	bl	800d5ac <puts>
                       p_connection_update_complete_event->Conn_Interval*1.25,
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80031bc:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 80031be:	4618      	mov	r0, r3
 80031c0:	f7fd f998 	bl	80004f4 <__aeabi_i2d>
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	4b6b      	ldr	r3, [pc, #428]	; (8003378 <SVCCTL_App_Notification+0x27c>)
 80031ca:	f7fd f9fd 	bl	80005c8 <__aeabi_dmul>
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	4610      	mov	r0, r2
 80031d4:	4619      	mov	r1, r3
                       p_connection_update_complete_event->Conn_Latency,
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80031dc:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 80031de:	461c      	mov	r4, r3
                       p_connection_update_complete_event->Supervision_Timeout*10);
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 80031ea:	4613      	mov	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	9301      	str	r3, [sp, #4]
 80031f4:	9400      	str	r4, [sp, #0]
 80031f6:	4602      	mov	r2, r0
 80031f8:	460b      	mov	r3, r1
 80031fa:	4860      	ldr	r0, [pc, #384]	; (800337c <SVCCTL_App_Notification+0x280>)
 80031fc:	f00a f968 	bl	800d4d0 <iprintf>
          break;
 8003200:	e0ad      	b.n	800335e <SVCCTL_App_Notification+0x262>
          p_evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)p_meta_evt->data;
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	3301      	adds	r3, #1
 8003206:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG("==>> HCI_LE_PHY_UPDATE_COMPLETE_SUBEVT_CODE - ");
 8003208:	485d      	ldr	r0, [pc, #372]	; (8003380 <SVCCTL_App_Notification+0x284>)
 800320a:	f00a f961 	bl	800d4d0 <iprintf>
          if (p_evt_le_phy_update_complete->Status == 0)
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d103      	bne.n	800321e <SVCCTL_App_Notification+0x122>
            APP_DBG_MSG("status ok \n");
 8003216:	485b      	ldr	r0, [pc, #364]	; (8003384 <SVCCTL_App_Notification+0x288>)
 8003218:	f00a f9c8 	bl	800d5ac <puts>
 800321c:	e002      	b.n	8003224 <SVCCTL_App_Notification+0x128>
            APP_DBG_MSG("status nok \n");
 800321e:	485a      	ldr	r0, [pc, #360]	; (8003388 <SVCCTL_App_Notification+0x28c>)
 8003220:	f00a f9c4 	bl	800d5ac <puts>
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, &Tx_phy, &Rx_phy);
 8003224:	4b4f      	ldr	r3, [pc, #316]	; (8003364 <SVCCTL_App_Notification+0x268>)
 8003226:	8adb      	ldrh	r3, [r3, #22]
 8003228:	f107 020a 	add.w	r2, r7, #10
 800322c:	f107 010b 	add.w	r1, r7, #11
 8003230:	4618      	mov	r0, r3
 8003232:	f007 f9f6 	bl	800a622 <hci_le_read_phy>
 8003236:	4603      	mov	r3, r0
 8003238:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 800323c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <SVCCTL_App_Notification+0x150>
            APP_DBG_MSG("==>> hci_le_read_phy : fail\n\r");
 8003244:	4851      	ldr	r0, [pc, #324]	; (800338c <SVCCTL_App_Notification+0x290>)
 8003246:	f00a f943 	bl	800d4d0 <iprintf>
          break;
 800324a:	e088      	b.n	800335e <SVCCTL_App_Notification+0x262>
            APP_DBG_MSG("==>> hci_le_read_phy - Success \n");
 800324c:	4850      	ldr	r0, [pc, #320]	; (8003390 <SVCCTL_App_Notification+0x294>)
 800324e:	f00a f9ad 	bl	800d5ac <puts>
            if ((Tx_phy == TX_2M) && (Rx_phy == RX_2M))
 8003252:	7afb      	ldrb	r3, [r7, #11]
 8003254:	2b02      	cmp	r3, #2
 8003256:	d10a      	bne.n	800326e <SVCCTL_App_Notification+0x172>
 8003258:	7abb      	ldrb	r3, [r7, #10]
 800325a:	2b02      	cmp	r3, #2
 800325c:	d107      	bne.n	800326e <SVCCTL_App_Notification+0x172>
              APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n\r", Tx_phy, Rx_phy);
 800325e:	7afb      	ldrb	r3, [r7, #11]
 8003260:	4619      	mov	r1, r3
 8003262:	7abb      	ldrb	r3, [r7, #10]
 8003264:	461a      	mov	r2, r3
 8003266:	484b      	ldr	r0, [pc, #300]	; (8003394 <SVCCTL_App_Notification+0x298>)
 8003268:	f00a f932 	bl	800d4d0 <iprintf>
          break;
 800326c:	e077      	b.n	800335e <SVCCTL_App_Notification+0x262>
              APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n\r", Tx_phy, Rx_phy);
 800326e:	7afb      	ldrb	r3, [r7, #11]
 8003270:	4619      	mov	r1, r3
 8003272:	7abb      	ldrb	r3, [r7, #10]
 8003274:	461a      	mov	r2, r3
 8003276:	4847      	ldr	r0, [pc, #284]	; (8003394 <SVCCTL_App_Notification+0x298>)
 8003278:	f00a f92a 	bl	800d4d0 <iprintf>
          break;
 800327c:	e06f      	b.n	800335e <SVCCTL_App_Notification+0x262>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	3301      	adds	r3, #1
 8003282:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8003284:	4b37      	ldr	r3, [pc, #220]	; (8003364 <SVCCTL_App_Notification+0x268>)
 8003286:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff f820 	bl	80022d0 <HW_TS_Stop>
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003296:	b29b      	uxth	r3, r3
 8003298:	4619      	mov	r1, r3
 800329a:	483f      	ldr	r0, [pc, #252]	; (8003398 <SVCCTL_App_Notification+0x29c>)
 800329c:	f00a f918 	bl	800d4d0 <iprintf>
                      p_connection_complete_event->Peer_Address[5],
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	7a9b      	ldrb	r3, [r3, #10]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 80032a4:	4618      	mov	r0, r3
                      p_connection_complete_event->Peer_Address[4],
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	7a5b      	ldrb	r3, [r3, #9]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 80032aa:	461c      	mov	r4, r3
                      p_connection_complete_event->Peer_Address[3],
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	7a1b      	ldrb	r3, [r3, #8]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 80032b0:	461d      	mov	r5, r3
                      p_connection_complete_event->Peer_Address[2],
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	79db      	ldrb	r3, [r3, #7]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 80032b6:	461a      	mov	r2, r3
                      p_connection_complete_event->Peer_Address[1],
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	799b      	ldrb	r3, [r3, #6]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 80032bc:	4619      	mov	r1, r3
                      p_connection_complete_event->Peer_Address[0]);
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	795b      	ldrb	r3, [r3, #5]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 80032c2:	9302      	str	r3, [sp, #8]
 80032c4:	9101      	str	r1, [sp, #4]
 80032c6:	9200      	str	r2, [sp, #0]
 80032c8:	462b      	mov	r3, r5
 80032ca:	4622      	mov	r2, r4
 80032cc:	4601      	mov	r1, r0
 80032ce:	4833      	ldr	r0, [pc, #204]	; (800339c <SVCCTL_App_Notification+0x2a0>)
 80032d0:	f00a f8fe 	bl	800d4d0 <iprintf>
                      p_connection_complete_event->Conn_Interval*1.25,
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 80032da:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 80032dc:	4618      	mov	r0, r3
 80032de:	f7fd f909 	bl	80004f4 <__aeabi_i2d>
 80032e2:	f04f 0200 	mov.w	r2, #0
 80032e6:	4b24      	ldr	r3, [pc, #144]	; (8003378 <SVCCTL_App_Notification+0x27c>)
 80032e8:	f7fd f96e 	bl	80005c8 <__aeabi_dmul>
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	4610      	mov	r0, r2
 80032f2:	4619      	mov	r1, r3
                      p_connection_complete_event->Conn_Latency,
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 80032fa:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 80032fc:	461c      	mov	r4, r3
                      p_connection_complete_event->Supervision_Timeout*10
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8003304:	b29b      	uxth	r3, r3
 8003306:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	9301      	str	r3, [sp, #4]
 8003312:	9400      	str	r4, [sp, #0]
 8003314:	4602      	mov	r2, r0
 8003316:	460b      	mov	r3, r1
 8003318:	4818      	ldr	r0, [pc, #96]	; (800337c <SVCCTL_App_Notification+0x280>)
 800331a:	f00a f8d9 	bl	800d4d0 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800331e:	4b11      	ldr	r3, [pc, #68]	; (8003364 <SVCCTL_App_Notification+0x268>)
 8003320:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003324:	2b04      	cmp	r3, #4
 8003326:	d104      	bne.n	8003332 <SVCCTL_App_Notification+0x236>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8003328:	4b0e      	ldr	r3, [pc, #56]	; (8003364 <SVCCTL_App_Notification+0x268>)
 800332a:	2206      	movs	r2, #6
 800332c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8003330:	e003      	b.n	800333a <SVCCTL_App_Notification+0x23e>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8003332:	4b0c      	ldr	r3, [pc, #48]	; (8003364 <SVCCTL_App_Notification+0x268>)
 8003334:	2205      	movs	r2, #5
 8003336:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003340:	b29a      	uxth	r2, r3
 8003342:	4b08      	ldr	r3, [pc, #32]	; (8003364 <SVCCTL_App_Notification+0x268>)
 8003344:	82da      	strh	r2, [r3, #22]
          HandleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8003346:	4b0a      	ldr	r3, [pc, #40]	; (8003370 <SVCCTL_App_Notification+0x274>)
 8003348:	2200      	movs	r2, #0
 800334a:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800334c:	4b05      	ldr	r3, [pc, #20]	; (8003364 <SVCCTL_App_Notification+0x268>)
 800334e:	8ada      	ldrh	r2, [r3, #22]
 8003350:	4b07      	ldr	r3, [pc, #28]	; (8003370 <SVCCTL_App_Notification+0x274>)
 8003352:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&HandleNotification);
 8003354:	4806      	ldr	r0, [pc, #24]	; (8003370 <SVCCTL_App_Notification+0x274>)
 8003356:	f000 fda7 	bl	8003ea8 <P2PS_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800335a:	e000      	b.n	800335e <SVCCTL_App_Notification+0x262>
          break;
 800335c:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800335e:	e101      	b.n	8003564 <SVCCTL_App_Notification+0x468>
 8003360:	0800fa30 	.word	0x0800fa30
 8003364:	200005b4 	.word	0x200005b4
 8003368:	0800fa48 	.word	0x0800fa48
 800336c:	0800fa74 	.word	0x0800fa74
 8003370:	2000063c 	.word	0x2000063c
 8003374:	0800fab0 	.word	0x0800fab0
 8003378:	3ff40000 	.word	0x3ff40000
 800337c:	0800fae4 	.word	0x0800fae4
 8003380:	0800fb50 	.word	0x0800fb50
 8003384:	0800fb80 	.word	0x0800fb80
 8003388:	0800fb8c 	.word	0x0800fb8c
 800338c:	0800fb98 	.word	0x0800fb98
 8003390:	0800fbb8 	.word	0x0800fbb8
 8003394:	0800fbd8 	.word	0x0800fbd8
 8003398:	0800fbfc 	.word	0x0800fbfc
 800339c:	0800fc44 	.word	0x0800fc44
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 80033a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a2:	3302      	adds	r3, #2
 80033a4:	627b      	str	r3, [r7, #36]	; 0x24
      switch (p_blecore_evt->ecode)
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033b0:	f000 80c1 	beq.w	8003536 <SVCCTL_App_Notification+0x43a>
 80033b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033b8:	f300 80d3 	bgt.w	8003562 <SVCCTL_App_Notification+0x466>
 80033bc:	2b04      	cmp	r3, #4
 80033be:	f000 80c2 	beq.w	8003546 <SVCCTL_App_Notification+0x44a>
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	f2c0 80cd 	blt.w	8003562 <SVCCTL_App_Notification+0x466>
 80033c8:	f240 420a 	movw	r2, #1034	; 0x40a
 80033cc:	4293      	cmp	r3, r2
 80033ce:	f300 80c8 	bgt.w	8003562 <SVCCTL_App_Notification+0x466>
 80033d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033d6:	f2c0 80c4 	blt.w	8003562 <SVCCTL_App_Notification+0x466>
 80033da:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80033de:	2b0a      	cmp	r3, #10
 80033e0:	f200 80bf 	bhi.w	8003562 <SVCCTL_App_Notification+0x466>
 80033e4:	a201      	add	r2, pc, #4	; (adr r2, 80033ec <SVCCTL_App_Notification+0x2f0>)
 80033e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ea:	bf00      	nop
 80033ec:	08003419 	.word	0x08003419
 80033f0:	08003501 	.word	0x08003501
 80033f4:	08003421 	.word	0x08003421
 80033f8:	08003457 	.word	0x08003457
 80033fc:	0800345f 	.word	0x0800345f
 8003400:	08003467 	.word	0x08003467
 8003404:	08003563 	.word	0x08003563
 8003408:	0800353f 	.word	0x0800353f
 800340c:	0800349b 	.word	0x0800349b
 8003410:	080034ab 	.word	0x080034ab
 8003414:	080034a3 	.word	0x080034a3
          APP_DBG_MSG(">>== ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE \n");
 8003418:	4855      	ldr	r0, [pc, #340]	; (8003570 <SVCCTL_App_Notification+0x474>)
 800341a:	f00a f8c7 	bl	800d5ac <puts>
          break; /* ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE */
 800341e:	e09d      	b.n	800355c <SVCCTL_App_Notification+0x460>
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 8003420:	4854      	ldr	r0, [pc, #336]	; (8003574 <SVCCTL_App_Notification+0x478>)
 8003422:	f00a f8c3 	bl	800d5ac <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,123456);
 8003426:	4b54      	ldr	r3, [pc, #336]	; (8003578 <SVCCTL_App_Notification+0x47c>)
 8003428:	8adb      	ldrh	r3, [r3, #22]
 800342a:	4954      	ldr	r1, [pc, #336]	; (800357c <SVCCTL_App_Notification+0x480>)
 800342c:	4618      	mov	r0, r3
 800342e:	f006 fa83 	bl	8009938 <aci_gap_pass_key_resp>
 8003432:	4603      	mov	r3, r0
 8003434:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 8003438:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800343c:	2b00      	cmp	r3, #0
 800343e:	d006      	beq.n	800344e <SVCCTL_App_Notification+0x352>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 8003440:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003444:	4619      	mov	r1, r3
 8003446:	484e      	ldr	r0, [pc, #312]	; (8003580 <SVCCTL_App_Notification+0x484>)
 8003448:	f00a f842 	bl	800d4d0 <iprintf>
          break; /* ACI_GAP_PASS_KEY_REQ_VSEVT_CODE */
 800344c:	e086      	b.n	800355c <SVCCTL_App_Notification+0x460>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 800344e:	484d      	ldr	r0, [pc, #308]	; (8003584 <SVCCTL_App_Notification+0x488>)
 8003450:	f00a f8ac 	bl	800d5ac <puts>
          break; /* ACI_GAP_PASS_KEY_REQ_VSEVT_CODE */
 8003454:	e082      	b.n	800355c <SVCCTL_App_Notification+0x460>
          APP_DBG_MSG(">>== ACI_GAP_AUTHORIZATION_REQ_VSEVT_CODE\n");
 8003456:	484c      	ldr	r0, [pc, #304]	; (8003588 <SVCCTL_App_Notification+0x48c>)
 8003458:	f00a f8a8 	bl	800d5ac <puts>
          break; /* ACI_GAP_AUTHORIZATION_REQ_VSEVT_CODE */
 800345c:	e07e      	b.n	800355c <SVCCTL_App_Notification+0x460>
          APP_DBG_MSG("==>> ACI_GAP_SLAVE_SECURITY_INITIATED_VSEVT_CODE \n");
 800345e:	484b      	ldr	r0, [pc, #300]	; (800358c <SVCCTL_App_Notification+0x490>)
 8003460:	f00a f8a4 	bl	800d5ac <puts>
          break; /* ACI_GAP_SLAVE_SECURITY_INITIATED_VSEVT_CODE */
 8003464:	e07a      	b.n	800355c <SVCCTL_App_Notification+0x460>
          APP_DBG_MSG("==>> ACI_GAP_BOND_LOST_VSEVT_CODE \n");
 8003466:	484a      	ldr	r0, [pc, #296]	; (8003590 <SVCCTL_App_Notification+0x494>)
 8003468:	f00a f8a0 	bl	800d5ac <puts>
          ret = aci_gap_allow_rebond(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800346c:	4b42      	ldr	r3, [pc, #264]	; (8003578 <SVCCTL_App_Notification+0x47c>)
 800346e:	8adb      	ldrh	r3, [r3, #22]
 8003470:	4618      	mov	r0, r3
 8003472:	f006 fc0b 	bl	8009c8c <aci_gap_allow_rebond>
 8003476:	4603      	mov	r3, r0
 8003478:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 800347c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003480:	2b00      	cmp	r3, #0
 8003482:	d006      	beq.n	8003492 <SVCCTL_App_Notification+0x396>
            APP_DBG_MSG("==>> aci_gap_allow_rebond : Fail, reason: 0x%x\n", ret);
 8003484:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003488:	4619      	mov	r1, r3
 800348a:	4842      	ldr	r0, [pc, #264]	; (8003594 <SVCCTL_App_Notification+0x498>)
 800348c:	f00a f820 	bl	800d4d0 <iprintf>
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 8003490:	e064      	b.n	800355c <SVCCTL_App_Notification+0x460>
            APP_DBG_MSG("==>> aci_gap_allow_rebond : Success \n");
 8003492:	4841      	ldr	r0, [pc, #260]	; (8003598 <SVCCTL_App_Notification+0x49c>)
 8003494:	f00a f88a 	bl	800d5ac <puts>
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 8003498:	e060      	b.n	800355c <SVCCTL_App_Notification+0x460>
          APP_DBG_MSG(">>== ACI_GAP_ADDR_NOT_RESOLVED_VSEVT_CODE \n");
 800349a:	4840      	ldr	r0, [pc, #256]	; (800359c <SVCCTL_App_Notification+0x4a0>)
 800349c:	f00a f886 	bl	800d5ac <puts>
          break; /* ACI_GAP_ADDR_NOT_RESOLVED_VSEVT_CODE */
 80034a0:	e05c      	b.n	800355c <SVCCTL_App_Notification+0x460>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 80034a2:	483f      	ldr	r0, [pc, #252]	; (80035a0 <SVCCTL_App_Notification+0x4a4>)
 80034a4:	f00a f882 	bl	800d5ac <puts>
          break; /* ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE */    
 80034a8:	e058      	b.n	800355c <SVCCTL_App_Notification+0x460>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 80034aa:	483e      	ldr	r0, [pc, #248]	; (80035a4 <SVCCTL_App_Notification+0x4a8>)
 80034ac:	f00a f87e 	bl	800d5ac <puts>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 80034b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b2:	3302      	adds	r3, #2
          APP_DBG_MSG("     - numeric_value = %ld\n",
 80034b4:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80034b8:	4619      	mov	r1, r3
 80034ba:	483b      	ldr	r0, [pc, #236]	; (80035a8 <SVCCTL_App_Notification+0x4ac>)
 80034bc:	f00a f808 	bl	800d4d0 <iprintf>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c2:	3302      	adds	r3, #2
          APP_DBG_MSG("     - Hex_value = %lx\n",
 80034c4:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80034c8:	4619      	mov	r1, r3
 80034ca:	4838      	ldr	r0, [pc, #224]	; (80035ac <SVCCTL_App_Notification+0x4b0>)
 80034cc:	f00a f800 	bl	800d4d0 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES); /* CONFIRM_YES = 1 */
 80034d0:	4b29      	ldr	r3, [pc, #164]	; (8003578 <SVCCTL_App_Notification+0x47c>)
 80034d2:	8adb      	ldrh	r3, [r3, #22]
 80034d4:	2101      	movs	r1, #1
 80034d6:	4618      	mov	r0, r3
 80034d8:	f006 fc2c 	bl	8009d34 <aci_gap_numeric_comparison_value_confirm_yesno>
 80034dc:	4603      	mov	r3, r0
 80034de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 80034e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d006      	beq.n	80034f8 <SVCCTL_App_Notification+0x3fc>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 80034ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80034ee:	4619      	mov	r1, r3
 80034f0:	482f      	ldr	r0, [pc, #188]	; (80035b0 <SVCCTL_App_Notification+0x4b4>)
 80034f2:	f009 ffed 	bl	800d4d0 <iprintf>
          break;
 80034f6:	e031      	b.n	800355c <SVCCTL_App_Notification+0x460>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 80034f8:	482e      	ldr	r0, [pc, #184]	; (80035b4 <SVCCTL_App_Notification+0x4b8>)
 80034fa:	f00a f857 	bl	800d5ac <puts>
          break;
 80034fe:	e02d      	b.n	800355c <SVCCTL_App_Notification+0x460>
          pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003502:	3302      	adds	r3, #2
 8003504:	623b      	str	r3, [r7, #32]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 8003506:	482c      	ldr	r0, [pc, #176]	; (80035b8 <SVCCTL_App_Notification+0x4bc>)
 8003508:	f00a f850 	bl	800d5ac <puts>
          if (pairing_complete->Status == 0)
 800350c:	6a3b      	ldr	r3, [r7, #32]
 800350e:	789b      	ldrb	r3, [r3, #2]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d103      	bne.n	800351c <SVCCTL_App_Notification+0x420>
            APP_DBG_MSG("     - Pairing Success\n");
 8003514:	4829      	ldr	r0, [pc, #164]	; (80035bc <SVCCTL_App_Notification+0x4c0>)
 8003516:	f00a f849 	bl	800d5ac <puts>
 800351a:	e008      	b.n	800352e <SVCCTL_App_Notification+0x432>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n",pairing_complete->Status, pairing_complete->Reason);
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	789b      	ldrb	r3, [r3, #2]
 8003520:	4619      	mov	r1, r3
 8003522:	6a3b      	ldr	r3, [r7, #32]
 8003524:	78db      	ldrb	r3, [r3, #3]
 8003526:	461a      	mov	r2, r3
 8003528:	4825      	ldr	r0, [pc, #148]	; (80035c0 <SVCCTL_App_Notification+0x4c4>)
 800352a:	f009 ffd1 	bl	800d4d0 <iprintf>
          APP_DBG_MSG("\n");
 800352e:	200a      	movs	r0, #10
 8003530:	f009 ffe0 	bl	800d4f4 <putchar>
          break;    
 8003534:	e012      	b.n	800355c <SVCCTL_App_Notification+0x460>
          mutex = 1;
 8003536:	4b23      	ldr	r3, [pc, #140]	; (80035c4 <SVCCTL_App_Notification+0x4c8>)
 8003538:	2201      	movs	r2, #1
 800353a:	701a      	strb	r2, [r3, #0]
          break;
 800353c:	e00e      	b.n	800355c <SVCCTL_App_Notification+0x460>
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 800353e:	4822      	ldr	r0, [pc, #136]	; (80035c8 <SVCCTL_App_Notification+0x4cc>)
 8003540:	f009 ffc6 	bl	800d4d0 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8003544:	e00a      	b.n	800355c <SVCCTL_App_Notification+0x460>
          BSP_LED_On(LED_GREEN);
 8003546:	2001      	movs	r0, #1
 8003548:	f000 fff4 	bl	8004534 <BSP_LED_On>
          HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 800354c:	4b0a      	ldr	r3, [pc, #40]	; (8003578 <SVCCTL_App_Notification+0x47c>)
 800354e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8003552:	210a      	movs	r1, #10
 8003554:	4618      	mov	r0, r3
 8003556:	f7fe ff3f 	bl	80023d8 <HW_TS_Start>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800355a:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800355c:	e001      	b.n	8003562 <SVCCTL_App_Notification+0x466>
      break;
 800355e:	bf00      	nop
 8003560:	e000      	b.n	8003564 <SVCCTL_App_Notification+0x468>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8003562:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8003564:	2301      	movs	r3, #1
}
 8003566:	4618      	mov	r0, r3
 8003568:	3730      	adds	r7, #48	; 0x30
 800356a:	46bd      	mov	sp, r7
 800356c:	bdb0      	pop	{r4, r5, r7, pc}
 800356e:	bf00      	nop
 8003570:	0800fc94 	.word	0x0800fc94
 8003574:	0800fcc4 	.word	0x0800fcc4
 8003578:	200005b4 	.word	0x200005b4
 800357c:	0001e240 	.word	0x0001e240
 8003580:	0800fcec 	.word	0x0800fcec
 8003584:	0800fd20 	.word	0x0800fd20
 8003588:	0800fd48 	.word	0x0800fd48
 800358c:	0800fd74 	.word	0x0800fd74
 8003590:	0800fda8 	.word	0x0800fda8
 8003594:	0800fdcc 	.word	0x0800fdcc
 8003598:	0800fdfc 	.word	0x0800fdfc
 800359c:	0800fe24 	.word	0x0800fe24
 80035a0:	0800fe50 	.word	0x0800fe50
 80035a4:	0800fe80 	.word	0x0800fe80
 80035a8:	0800feb4 	.word	0x0800feb4
 80035ac:	0800fed0 	.word	0x0800fed0
 80035b0:	0800fee8 	.word	0x0800fee8
 80035b4:	0800ff38 	.word	0x0800ff38
 80035b8:	0800ff80 	.word	0x0800ff80
 80035bc:	0800ffac 	.word	0x0800ffac
 80035c0:	0800ffc4 	.word	0x0800ffc4
 80035c4:	20000641 	.word	0x20000641
 80035c8:	08010000 	.word	0x08010000

080035cc <APP_BLE_Key_Button1_Action>:
  return BleApplicationContext.Device_Connection_Status;
}

/* USER CODE BEGIN FD*/
void APP_BLE_Key_Button1_Action(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
  P2PS_APP_SW1_Button_Action();
 80035d0:	f000 fcaa 	bl	8003f28 <P2PS_APP_SW1_Button_Action>
}
 80035d4:	bf00      	nop
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )    
  UTIL_SEQ_SetTask( 1<<CFG_TASK_CONN_UPDATE_REG_ID, CFG_SCH_PRIO_0);
 80035dc:	2100      	movs	r1, #0
 80035de:	2002      	movs	r0, #2
 80035e0:	f009 f92e 	bl	800c840 <UTIL_SEQ_SetTask>
#endif
  
  return;
 80035e4:	bf00      	nop
}
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <APP_BLE_Key_Button3_Action>:

void APP_BLE_Key_Button3_Action(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
}
 80035ec:	bf00      	nop
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
	...

080035f8 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80035fe:	4b06      	ldr	r3, [pc, #24]	; (8003618 <Ble_Tl_Init+0x20>)
 8003600:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8003602:	4b06      	ldr	r3, [pc, #24]	; (800361c <Ble_Tl_Init+0x24>)
 8003604:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8003606:	463b      	mov	r3, r7
 8003608:	4619      	mov	r1, r3
 800360a:	4805      	ldr	r0, [pc, #20]	; (8003620 <Ble_Tl_Init+0x28>)
 800360c:	f007 fa5a 	bl	800aac4 <hci_init>

  return;
 8003610:	bf00      	nop
}
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	20030028 	.word	0x20030028
 800361c:	08003d55 	.word	0x08003d55
 8003620:	08003d1d 	.word	0x08003d1d

08003624 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8003624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003626:	b08d      	sub	sp, #52	; 0x34
 8003628:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800362a:	2300      	movs	r3, #0
 800362c:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800362e:	2392      	movs	r3, #146	; 0x92
 8003630:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 8003632:	48a5      	ldr	r0, [pc, #660]	; (80038c8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8003634:	f009 ffba 	bl	800d5ac <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8003638:	f006 ffcf 	bl	800a5da <hci_reset>
 800363c:	4603      	mov	r3, r0
 800363e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003640:	7dfb      	ldrb	r3, [r7, #23]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d005      	beq.n	8003652 <Ble_Hci_Gap_Gatt_Init+0x2e>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 8003646:	7dfb      	ldrb	r3, [r7, #23]
 8003648:	4619      	mov	r1, r3
 800364a:	48a0      	ldr	r0, [pc, #640]	; (80038cc <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 800364c:	f009 ff40 	bl	800d4d0 <iprintf>
 8003650:	e002      	b.n	8003658 <Ble_Hci_Gap_Gatt_Init+0x34>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 8003652:	489f      	ldr	r0, [pc, #636]	; (80038d0 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 8003654:	f009 ffaa 	bl	800d5ac <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8003658:	f000 fa40 	bl	8003adc <BleGetBdAddress>
 800365c:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	2106      	movs	r1, #6
 8003662:	2000      	movs	r0, #0
 8003664:	f006 fe79 	bl	800a35a <aci_hal_write_config_data>
 8003668:	4603      	mov	r3, r0
 800366a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800366c:	7dfb      	ldrb	r3, [r7, #23]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d005      	beq.n	800367e <Ble_Hci_Gap_Gatt_Init+0x5a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 8003672:	7dfb      	ldrb	r3, [r7, #23]
 8003674:	4619      	mov	r1, r3
 8003676:	4897      	ldr	r0, [pc, #604]	; (80038d4 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 8003678:	f009 ff2a 	bl	800d4d0 <iprintf>
 800367c:	e021      	b.n	80036c2 <Ble_Hci_Gap_Gatt_Init+0x9e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 800367e:	4896      	ldr	r0, [pc, #600]	; (80038d8 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 8003680:	f009 ff94 	bl	800d5ac <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	3305      	adds	r3, #5
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	3304      	adds	r3, #4
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	461c      	mov	r4, r3
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	3303      	adds	r3, #3
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	461d      	mov	r5, r3
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	3302      	adds	r3, #2
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	461a      	mov	r2, r3
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	3301      	adds	r3, #1
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	4619      	mov	r1, r3
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	9302      	str	r3, [sp, #8]
 80036b2:	9101      	str	r1, [sp, #4]
 80036b4:	9200      	str	r2, [sp, #0]
 80036b6:	462b      	mov	r3, r5
 80036b8:	4622      	mov	r2, r4
 80036ba:	4601      	mov	r1, r0
 80036bc:	4887      	ldr	r0, [pc, #540]	; (80038dc <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 80036be:	f009 ff07 	bl	800d4d0 <iprintf>
  }

#if (CFG_BLE_ADDRESS_TYPE == GAP_PUBLIC_ADDR)
  /* BLE MAC in ADV Packet */
  a_ManufData[ sizeof(a_ManufData)-6] = p_bd_addr[5];
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	3305      	adds	r3, #5
 80036c6:	781a      	ldrb	r2, [r3, #0]
 80036c8:	4b85      	ldr	r3, [pc, #532]	; (80038e0 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 80036ca:	721a      	strb	r2, [r3, #8]
  a_ManufData[ sizeof(a_ManufData)-5] = p_bd_addr[4];
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	3304      	adds	r3, #4
 80036d0:	781a      	ldrb	r2, [r3, #0]
 80036d2:	4b83      	ldr	r3, [pc, #524]	; (80038e0 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 80036d4:	725a      	strb	r2, [r3, #9]
  a_ManufData[ sizeof(a_ManufData)-4] = p_bd_addr[3];
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	3303      	adds	r3, #3
 80036da:	781a      	ldrb	r2, [r3, #0]
 80036dc:	4b80      	ldr	r3, [pc, #512]	; (80038e0 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 80036de:	729a      	strb	r2, [r3, #10]
  a_ManufData[ sizeof(a_ManufData)-3] = p_bd_addr[2];
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	3302      	adds	r3, #2
 80036e4:	781a      	ldrb	r2, [r3, #0]
 80036e6:	4b7e      	ldr	r3, [pc, #504]	; (80038e0 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 80036e8:	72da      	strb	r2, [r3, #11]
  a_ManufData[ sizeof(a_ManufData)-2] = p_bd_addr[1];
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	3301      	adds	r3, #1
 80036ee:	781a      	ldrb	r2, [r3, #0]
 80036f0:	4b7b      	ldr	r3, [pc, #492]	; (80038e0 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 80036f2:	731a      	strb	r2, [r3, #12]
  a_ManufData[ sizeof(a_ManufData)-1] = p_bd_addr[0];
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	781a      	ldrb	r2, [r3, #0]
 80036f8:	4b79      	ldr	r3, [pc, #484]	; (80038e0 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 80036fa:	735a      	strb	r2, [r3, #13]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 80036fc:	4a79      	ldr	r2, [pc, #484]	; (80038e4 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 80036fe:	2110      	movs	r1, #16
 8003700:	2018      	movs	r0, #24
 8003702:	f006 fe2a 	bl	800a35a <aci_hal_write_config_data>
 8003706:	4603      	mov	r3, r0
 8003708:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800370a:	7dfb      	ldrb	r3, [r7, #23]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d005      	beq.n	800371c <Ble_Hci_Gap_Gatt_Init+0xf8>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 8003710:	7dfb      	ldrb	r3, [r7, #23]
 8003712:	4619      	mov	r1, r3
 8003714:	4874      	ldr	r0, [pc, #464]	; (80038e8 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 8003716:	f009 fedb 	bl	800d4d0 <iprintf>
 800371a:	e002      	b.n	8003722 <Ble_Hci_Gap_Gatt_Init+0xfe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800371c:	4873      	ldr	r0, [pc, #460]	; (80038ec <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800371e:	f009 ff45 	bl	800d5ac <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8003722:	4a73      	ldr	r2, [pc, #460]	; (80038f0 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 8003724:	2110      	movs	r1, #16
 8003726:	2008      	movs	r0, #8
 8003728:	f006 fe17 	bl	800a35a <aci_hal_write_config_data>
 800372c:	4603      	mov	r3, r0
 800372e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003730:	7dfb      	ldrb	r3, [r7, #23]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d005      	beq.n	8003742 <Ble_Hci_Gap_Gatt_Init+0x11e>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 8003736:	7dfb      	ldrb	r3, [r7, #23]
 8003738:	4619      	mov	r1, r3
 800373a:	486e      	ldr	r0, [pc, #440]	; (80038f4 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 800373c:	f009 fec8 	bl	800d4d0 <iprintf>
 8003740:	e002      	b.n	8003748 <Ble_Hci_Gap_Gatt_Init+0x124>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 8003742:	486d      	ldr	r0, [pc, #436]	; (80038f8 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 8003744:	f009 ff32 	bl	800d5ac <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8003748:	2118      	movs	r1, #24
 800374a:	2001      	movs	r0, #1
 800374c:	f006 fe8a 	bl	800a464 <aci_hal_set_tx_power_level>
 8003750:	4603      	mov	r3, r0
 8003752:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003754:	7dfb      	ldrb	r3, [r7, #23]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d005      	beq.n	8003766 <Ble_Hci_Gap_Gatt_Init+0x142>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800375a:	7dfb      	ldrb	r3, [r7, #23]
 800375c:	4619      	mov	r1, r3
 800375e:	4867      	ldr	r0, [pc, #412]	; (80038fc <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 8003760:	f009 feb6 	bl	800d4d0 <iprintf>
 8003764:	e002      	b.n	800376c <Ble_Hci_Gap_Gatt_Init+0x148>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 8003766:	4866      	ldr	r0, [pc, #408]	; (8003900 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 8003768:	f009 ff20 	bl	800d5ac <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800376c:	f006 fb49 	bl	8009e02 <aci_gatt_init>
 8003770:	4603      	mov	r3, r0
 8003772:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003774:	7dfb      	ldrb	r3, [r7, #23]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d005      	beq.n	8003786 <Ble_Hci_Gap_Gatt_Init+0x162>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800377a:	7dfb      	ldrb	r3, [r7, #23]
 800377c:	4619      	mov	r1, r3
 800377e:	4861      	ldr	r0, [pc, #388]	; (8003904 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 8003780:	f009 fea6 	bl	800d4d0 <iprintf>
 8003784:	e002      	b.n	800378c <Ble_Hci_Gap_Gatt_Init+0x168>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 8003786:	4860      	ldr	r0, [pc, #384]	; (8003908 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 8003788:	f009 ff10 	bl	800d5ac <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800378c:	2300      	movs	r3, #0
 800378e:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8003790:	7bfb      	ldrb	r3, [r7, #15]
 8003792:	f043 0301 	orr.w	r3, r3, #1
 8003796:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8003798:	7bfb      	ldrb	r3, [r7, #15]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d02b      	beq.n	80037f6 <Ble_Hci_Gap_Gatt_Init+0x1d2>
  {
    const char *name = "P2PSRV1";
 800379e:	4b5b      	ldr	r3, [pc, #364]	; (800390c <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 80037a0:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 80037a2:	1dba      	adds	r2, r7, #6
 80037a4:	7bf8      	ldrb	r0, [r7, #15]
 80037a6:	1cbb      	adds	r3, r7, #2
 80037a8:	9301      	str	r3, [sp, #4]
 80037aa:	1d3b      	adds	r3, r7, #4
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	4613      	mov	r3, r2
 80037b0:	2207      	movs	r2, #7
 80037b2:	2100      	movs	r1, #0
 80037b4:	f006 f927 	bl	8009a06 <aci_gap_init>
 80037b8:	4603      	mov	r3, r0
 80037ba:	75fb      	strb	r3, [r7, #23]
                       APPBLE_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 80037bc:	7dfb      	ldrb	r3, [r7, #23]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d005      	beq.n	80037ce <Ble_Hci_Gap_Gatt_Init+0x1aa>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 80037c2:	7dfb      	ldrb	r3, [r7, #23]
 80037c4:	4619      	mov	r1, r3
 80037c6:	4852      	ldr	r0, [pc, #328]	; (8003910 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 80037c8:	f009 fe82 	bl	800d4d0 <iprintf>
 80037cc:	e002      	b.n	80037d4 <Ble_Hci_Gap_Gatt_Init+0x1b0>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 80037ce:	4851      	ldr	r0, [pc, #324]	; (8003914 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 80037d0:	f009 feec 	bl	800d5ac <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 80037d4:	88fc      	ldrh	r4, [r7, #6]
 80037d6:	88bd      	ldrh	r5, [r7, #4]
 80037d8:	68b8      	ldr	r0, [r7, #8]
 80037da:	f7fc fd31 	bl	8000240 <strlen>
 80037de:	4603      	mov	r3, r0
 80037e0:	b2da      	uxtb	r2, r3
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	4613      	mov	r3, r2
 80037e8:	2200      	movs	r2, #0
 80037ea:	4629      	mov	r1, r5
 80037ec:	4620      	mov	r0, r4
 80037ee:	f006 fd0b 	bl	800a208 <aci_gatt_update_char_value>
 80037f2:	4603      	mov	r3, r0
 80037f4:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 80037f6:	88f8      	ldrh	r0, [r7, #6]
 80037f8:	8879      	ldrh	r1, [r7, #2]
 80037fa:	463b      	mov	r3, r7
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	2302      	movs	r3, #2
 8003800:	2200      	movs	r2, #0
 8003802:	f006 fd01 	bl	800a208 <aci_gatt_update_char_value>
 8003806:	4603      	mov	r3, r0
 8003808:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800380a:	2202      	movs	r2, #2
 800380c:	2102      	movs	r1, #2
 800380e:	2000      	movs	r0, #0
 8003810:	f006 ff85 	bl	800a71e <hci_le_set_default_phy>
 8003814:	4603      	mov	r3, r0
 8003816:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003818:	7dfb      	ldrb	r3, [r7, #23]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d005      	beq.n	800382a <Ble_Hci_Gap_Gatt_Init+0x206>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 800381e:	7dfb      	ldrb	r3, [r7, #23]
 8003820:	4619      	mov	r1, r3
 8003822:	483d      	ldr	r0, [pc, #244]	; (8003918 <Ble_Hci_Gap_Gatt_Init+0x2f4>)
 8003824:	f009 fe54 	bl	800d4d0 <iprintf>
 8003828:	e002      	b.n	8003830 <Ble_Hci_Gap_Gatt_Init+0x20c>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 800382a:	483c      	ldr	r0, [pc, #240]	; (800391c <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800382c:	f009 febe 	bl	800d5ac <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8003830:	4b3b      	ldr	r3, [pc, #236]	; (8003920 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003832:	2201      	movs	r2, #1
 8003834:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8003836:	4b3a      	ldr	r3, [pc, #232]	; (8003920 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	4618      	mov	r0, r3
 800383c:	f005 ff64 	bl	8009708 <aci_gap_set_io_capability>
 8003840:	4603      	mov	r3, r0
 8003842:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003844:	7dfb      	ldrb	r3, [r7, #23]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d005      	beq.n	8003856 <Ble_Hci_Gap_Gatt_Init+0x232>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800384a:	7dfb      	ldrb	r3, [r7, #23]
 800384c:	4619      	mov	r1, r3
 800384e:	4835      	ldr	r0, [pc, #212]	; (8003924 <Ble_Hci_Gap_Gatt_Init+0x300>)
 8003850:	f009 fe3e 	bl	800d4d0 <iprintf>
 8003854:	e002      	b.n	800385c <Ble_Hci_Gap_Gatt_Init+0x238>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 8003856:	4834      	ldr	r0, [pc, #208]	; (8003928 <Ble_Hci_Gap_Gatt_Init+0x304>)
 8003858:	f009 fea8 	bl	800d5ac <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800385c:	4b30      	ldr	r3, [pc, #192]	; (8003920 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800385e:	2201      	movs	r2, #1
 8003860:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8003862:	4b2f      	ldr	r3, [pc, #188]	; (8003920 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003864:	2208      	movs	r2, #8
 8003866:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8003868:	4b2d      	ldr	r3, [pc, #180]	; (8003920 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800386a:	2210      	movs	r2, #16
 800386c:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800386e:	4b2c      	ldr	r3, [pc, #176]	; (8003920 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003870:	2200      	movs	r2, #0
 8003872:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8003874:	4b2a      	ldr	r3, [pc, #168]	; (8003920 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003876:	4a2d      	ldr	r2, [pc, #180]	; (800392c <Ble_Hci_Gap_Gatt_Init+0x308>)
 8003878:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800387a:	4b29      	ldr	r3, [pc, #164]	; (8003920 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800387c:	2201      	movs	r2, #1
 800387e:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8003880:	4b27      	ldr	r3, [pc, #156]	; (8003920 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003882:	789c      	ldrb	r4, [r3, #2]
 8003884:	4b26      	ldr	r3, [pc, #152]	; (8003920 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003886:	785d      	ldrb	r5, [r3, #1]
 8003888:	4b25      	ldr	r3, [pc, #148]	; (8003920 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800388a:	791b      	ldrb	r3, [r3, #4]
 800388c:	4a24      	ldr	r2, [pc, #144]	; (8003920 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800388e:	7952      	ldrb	r2, [r2, #5]
 8003890:	4923      	ldr	r1, [pc, #140]	; (8003920 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003892:	78c9      	ldrb	r1, [r1, #3]
 8003894:	4822      	ldr	r0, [pc, #136]	; (8003920 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003896:	6880      	ldr	r0, [r0, #8]
 8003898:	2600      	movs	r6, #0
 800389a:	9604      	str	r6, [sp, #16]
 800389c:	9003      	str	r0, [sp, #12]
 800389e:	9102      	str	r1, [sp, #8]
 80038a0:	9201      	str	r2, [sp, #4]
 80038a2:	9300      	str	r3, [sp, #0]
 80038a4:	2300      	movs	r3, #0
 80038a6:	2201      	movs	r2, #1
 80038a8:	4629      	mov	r1, r5
 80038aa:	4620      	mov	r0, r4
 80038ac:	f005 ff80 	bl	80097b0 <aci_gap_set_authentication_requirement>
 80038b0:	4603      	mov	r3, r0
 80038b2:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 80038b4:	7dfb      	ldrb	r3, [r7, #23]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d03c      	beq.n	8003934 <Ble_Hci_Gap_Gatt_Init+0x310>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 80038ba:	7dfb      	ldrb	r3, [r7, #23]
 80038bc:	4619      	mov	r1, r3
 80038be:	481c      	ldr	r0, [pc, #112]	; (8003930 <Ble_Hci_Gap_Gatt_Init+0x30c>)
 80038c0:	f009 fe06 	bl	800d4d0 <iprintf>
 80038c4:	e039      	b.n	800393a <Ble_Hci_Gap_Gatt_Init+0x316>
 80038c6:	bf00      	nop
 80038c8:	08010028 	.word	0x08010028
 80038cc:	08010054 	.word	0x08010054
 80038d0:	08010084 	.word	0x08010084
 80038d4:	080100a4 	.word	0x080100a4
 80038d8:	08010100 	.word	0x08010100
 80038dc:	0801014c 	.word	0x0801014c
 80038e0:	20000010 	.word	0x20000010
 80038e4:	08010b64 	.word	0x08010b64
 80038e8:	08010188 	.word	0x08010188
 80038ec:	080101e0 	.word	0x080101e0
 80038f0:	08010b74 	.word	0x08010b74
 80038f4:	08010228 	.word	0x08010228
 80038f8:	08010280 	.word	0x08010280
 80038fc:	080102c8 	.word	0x080102c8
 8003900:	08010308 	.word	0x08010308
 8003904:	08010338 	.word	0x08010338
 8003908:	0801036c 	.word	0x0801036c
 800390c:	08010390 	.word	0x08010390
 8003910:	08010398 	.word	0x08010398
 8003914:	080103c8 	.word	0x080103c8
 8003918:	080103e8 	.word	0x080103e8
 800391c:	08010424 	.word	0x08010424
 8003920:	200005b4 	.word	0x200005b4
 8003924:	08010450 	.word	0x08010450
 8003928:	08010490 	.word	0x08010490
 800392c:	0001b207 	.word	0x0001b207
 8003930:	080104c0 	.word	0x080104c0
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 8003934:	480e      	ldr	r0, [pc, #56]	; (8003970 <Ble_Hci_Gap_Gatt_Init+0x34c>)
 8003936:	f009 fe39 	bl	800d5ac <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800393a:	4b0e      	ldr	r3, [pc, #56]	; (8003974 <Ble_Hci_Gap_Gatt_Init+0x350>)
 800393c:	789b      	ldrb	r3, [r3, #2]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00f      	beq.n	8003962 <Ble_Hci_Gap_Gatt_Init+0x33e>
  {
    ret = aci_gap_configure_whitelist();
 8003942:	f006 f97f 	bl	8009c44 <aci_gap_configure_filter_accept_list>
 8003946:	4603      	mov	r3, r0
 8003948:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800394a:	7dfb      	ldrb	r3, [r7, #23]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d005      	beq.n	800395c <Ble_Hci_Gap_Gatt_Init+0x338>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 8003950:	7dfb      	ldrb	r3, [r7, #23]
 8003952:	4619      	mov	r1, r3
 8003954:	4808      	ldr	r0, [pc, #32]	; (8003978 <Ble_Hci_Gap_Gatt_Init+0x354>)
 8003956:	f009 fdbb 	bl	800d4d0 <iprintf>
 800395a:	e002      	b.n	8003962 <Ble_Hci_Gap_Gatt_Init+0x33e>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800395c:	4807      	ldr	r0, [pc, #28]	; (800397c <Ble_Hci_Gap_Gatt_Init+0x358>)
 800395e:	f009 fe25 	bl	800d5ac <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 8003962:	4807      	ldr	r0, [pc, #28]	; (8003980 <Ble_Hci_Gap_Gatt_Init+0x35c>)
 8003964:	f009 fdb4 	bl	800d4d0 <iprintf>
}
 8003968:	bf00      	nop
 800396a:	371c      	adds	r7, #28
 800396c:	46bd      	mov	sp, r7
 800396e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003970:	0801050c 	.word	0x0801050c
 8003974:	200005b4 	.word	0x200005b4
 8003978:	08010548 	.word	0x08010548
 800397c:	08010588 	.word	0x08010588
 8003980:	080105b8 	.word	0x080105b8

08003984 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b08c      	sub	sp, #48	; 0x30
 8003988:	af08      	add	r7, sp, #32
 800398a:	4603      	mov	r3, r0
 800398c:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800398e:	2392      	movs	r3, #146	; 0x92
 8003990:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (NewStatus == APP_BLE_FAST_ADV)
 8003992:	79fb      	ldrb	r3, [r7, #7]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d106      	bne.n	80039a6 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 8003998:	4b41      	ldr	r3, [pc, #260]	; (8003aa0 <Adv_Request+0x11c>)
 800399a:	881b      	ldrh	r3, [r3, #0]
 800399c:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800399e:	4b41      	ldr	r3, [pc, #260]	; (8003aa4 <Adv_Request+0x120>)
 80039a0:	881b      	ldrh	r3, [r3, #0]
 80039a2:	81bb      	strh	r3, [r7, #12]
 80039a4:	e005      	b.n	80039b2 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 80039a6:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 80039aa:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 80039ac:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80039b0:	81bb      	strh	r3, [r7, #12]

  /**
   * Stop the timer, it will be restarted for a new shot
   * It does not hurt if the timer was not running
   */
  HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 80039b2:	4b3d      	ldr	r3, [pc, #244]	; (8003aa8 <Adv_Request+0x124>)
 80039b4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7fe fc89 	bl	80022d0 <HW_TS_Stop>

  if ((NewStatus == APP_BLE_LP_ADV)
 80039be:	79fb      	ldrb	r3, [r7, #7]
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d119      	bne.n	80039f8 <Adv_Request+0x74>
      && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 80039c4:	4b38      	ldr	r3, [pc, #224]	; (8003aa8 <Adv_Request+0x124>)
 80039c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d004      	beq.n	80039d8 <Adv_Request+0x54>
          || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 80039ce:	4b36      	ldr	r3, [pc, #216]	; (8003aa8 <Adv_Request+0x124>)
 80039d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d10f      	bne.n	80039f8 <Adv_Request+0x74>
  {
    /* Connection in ADVERTISE mode have to stop the current advertising */
    ret = aci_gap_set_non_discoverable();
 80039d8:	f005 fd78 	bl	80094cc <aci_gap_set_non_discoverable>
 80039dc:	4603      	mov	r3, r0
 80039de:	72fb      	strb	r3, [r7, #11]
    if (ret != BLE_STATUS_SUCCESS)
 80039e0:	7afb      	ldrb	r3, [r7, #11]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d005      	beq.n	80039f2 <Adv_Request+0x6e>
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Stop Advertising Failed , result: %d \n", ret);
 80039e6:	7afb      	ldrb	r3, [r7, #11]
 80039e8:	4619      	mov	r1, r3
 80039ea:	4830      	ldr	r0, [pc, #192]	; (8003aac <Adv_Request+0x128>)
 80039ec:	f009 fd70 	bl	800d4d0 <iprintf>
 80039f0:	e002      	b.n	80039f8 <Adv_Request+0x74>
    }
    else
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Successfully Stopped Advertising \n");
 80039f2:	482f      	ldr	r0, [pc, #188]	; (8003ab0 <Adv_Request+0x12c>)
 80039f4:	f009 fdda 	bl	800d5ac <puts>
    }
  }

  BleApplicationContext.Device_Connection_Status = NewStatus;
 80039f8:	4a2b      	ldr	r2, [pc, #172]	; (8003aa8 <Adv_Request+0x124>)
 80039fa:	79fb      	ldrb	r3, [r7, #7]
 80039fc:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_IND,
 8003a00:	4b29      	ldr	r3, [pc, #164]	; (8003aa8 <Adv_Request+0x124>)
 8003a02:	7e1b      	ldrb	r3, [r3, #24]
 8003a04:	89ba      	ldrh	r2, [r7, #12]
 8003a06:	89f9      	ldrh	r1, [r7, #14]
 8003a08:	2000      	movs	r0, #0
 8003a0a:	9006      	str	r0, [sp, #24]
 8003a0c:	2000      	movs	r0, #0
 8003a0e:	9005      	str	r0, [sp, #20]
 8003a10:	4828      	ldr	r0, [pc, #160]	; (8003ab4 <Adv_Request+0x130>)
 8003a12:	9004      	str	r0, [sp, #16]
 8003a14:	9303      	str	r3, [sp, #12]
 8003a16:	4b28      	ldr	r3, [pc, #160]	; (8003ab8 <Adv_Request+0x134>)
 8003a18:	9302      	str	r3, [sp, #8]
 8003a1a:	2308      	movs	r3, #8
 8003a1c:	9301      	str	r3, [sp, #4]
 8003a1e:	2300      	movs	r3, #0
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	2300      	movs	r3, #0
 8003a24:	2000      	movs	r0, #0
 8003a26:	f005 fd75 	bl	8009514 <aci_gap_set_discoverable>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	72fb      	strb	r3, [r7, #11]
                                 (uint8_t*) &a_LocalName,
                                 BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen,
                                 BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 8003a2e:	7afb      	ldrb	r3, [r7, #11]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d005      	beq.n	8003a40 <Adv_Request+0xbc>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 8003a34:	7afb      	ldrb	r3, [r7, #11]
 8003a36:	4619      	mov	r1, r3
 8003a38:	4820      	ldr	r0, [pc, #128]	; (8003abc <Adv_Request+0x138>)
 8003a3a:	f009 fd49 	bl	800d4d0 <iprintf>
 8003a3e:	e002      	b.n	8003a46 <Adv_Request+0xc2>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 8003a40:	481f      	ldr	r0, [pc, #124]	; (8003ac0 <Adv_Request+0x13c>)
 8003a42:	f009 fdb3 	bl	800d5ac <puts>
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_ManufData), (uint8_t*) a_ManufData);
 8003a46:	491f      	ldr	r1, [pc, #124]	; (8003ac4 <Adv_Request+0x140>)
 8003a48:	200e      	movs	r0, #14
 8003a4a:	f006 f889 	bl	8009b60 <aci_gap_update_adv_data>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	72fb      	strb	r3, [r7, #11]
  if (ret != BLE_STATUS_SUCCESS)
 8003a52:	7afb      	ldrb	r3, [r7, #11]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00e      	beq.n	8003a76 <Adv_Request+0xf2>
  {
    if (NewStatus == APP_BLE_FAST_ADV)
 8003a58:	79fb      	ldrb	r3, [r7, #7]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d105      	bne.n	8003a6a <Adv_Request+0xe6>
    {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 8003a5e:	7afb      	ldrb	r3, [r7, #11]
 8003a60:	4619      	mov	r1, r3
 8003a62:	4819      	ldr	r0, [pc, #100]	; (8003ac8 <Adv_Request+0x144>)
 8003a64:	f009 fd34 	bl	800d4d0 <iprintf>
    {
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
    }
  }

  return;
 8003a68:	e017      	b.n	8003a9a <Adv_Request+0x116>
      APP_DBG_MSG("==>> Start Low Power Advertising Failed , result: %d \n\r", ret);
 8003a6a:	7afb      	ldrb	r3, [r7, #11]
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4817      	ldr	r0, [pc, #92]	; (8003acc <Adv_Request+0x148>)
 8003a70:	f009 fd2e 	bl	800d4d0 <iprintf>
  return;
 8003a74:	e011      	b.n	8003a9a <Adv_Request+0x116>
    if (NewStatus == APP_BLE_FAST_ADV)
 8003a76:	79fb      	ldrb	r3, [r7, #7]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d10a      	bne.n	8003a92 <Adv_Request+0x10e>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 8003a7c:	4814      	ldr	r0, [pc, #80]	; (8003ad0 <Adv_Request+0x14c>)
 8003a7e:	f009 fd27 	bl	800d4d0 <iprintf>
      HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 8003a82:	4b09      	ldr	r3, [pc, #36]	; (8003aa8 <Adv_Request+0x124>)
 8003a84:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003a88:	4912      	ldr	r1, [pc, #72]	; (8003ad4 <Adv_Request+0x150>)
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fe fca4 	bl	80023d8 <HW_TS_Start>
  return;
 8003a90:	e003      	b.n	8003a9a <Adv_Request+0x116>
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
 8003a92:	4811      	ldr	r0, [pc, #68]	; (8003ad8 <Adv_Request+0x154>)
 8003a94:	f009 fd1c 	bl	800d4d0 <iprintf>
  return;
 8003a98:	bf00      	nop
}
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	20000638 	.word	0x20000638
 8003aa4:	2000063a 	.word	0x2000063a
 8003aa8:	200005b4 	.word	0x200005b4
 8003aac:	080105e4 	.word	0x080105e4
 8003ab0:	08010630 	.word	0x08010630
 8003ab4:	200005cd 	.word	0x200005cd
 8003ab8:	08010b84 	.word	0x08010b84
 8003abc:	08010678 	.word	0x08010678
 8003ac0:	080106b0 	.word	0x080106b0
 8003ac4:	20000010 	.word	0x20000010
 8003ac8:	080106d8 	.word	0x080106d8
 8003acc:	0801070c 	.word	0x0801070c
 8003ad0:	08010744 	.word	0x08010744
 8003ad4:	0001e046 	.word	0x0001e046
 8003ad8:	0801076c 	.word	0x0801076c

08003adc <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8003ae2:	f7ff fa3f 	bl	8002f64 <LL_FLASH_GetUDN>
 8003ae6:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aee:	d023      	beq.n	8003b38 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8003af0:	f7ff fa50 	bl	8002f94 <LL_FLASH_GetSTCompanyID>
 8003af4:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8003af6:	f7ff fa41 	bl	8002f7c <LL_FLASH_GetDeviceID>
 8003afa:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	b2da      	uxtb	r2, r3
 8003b00:	4b16      	ldr	r3, [pc, #88]	; (8003b5c <BleGetBdAddress+0x80>)
 8003b02:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	0a1b      	lsrs	r3, r3, #8
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	4b14      	ldr	r3, [pc, #80]	; (8003b5c <BleGetBdAddress+0x80>)
 8003b0c:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	4b12      	ldr	r3, [pc, #72]	; (8003b5c <BleGetBdAddress+0x80>)
 8003b14:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	b2da      	uxtb	r2, r3
 8003b1a:	4b10      	ldr	r3, [pc, #64]	; (8003b5c <BleGetBdAddress+0x80>)
 8003b1c:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	0a1b      	lsrs	r3, r3, #8
 8003b22:	b2da      	uxtb	r2, r3
 8003b24:	4b0d      	ldr	r3, [pc, #52]	; (8003b5c <BleGetBdAddress+0x80>)
 8003b26:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	0c1b      	lsrs	r3, r3, #16
 8003b2c:	b2da      	uxtb	r2, r3
 8003b2e:	4b0b      	ldr	r3, [pc, #44]	; (8003b5c <BleGetBdAddress+0x80>)
 8003b30:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8003b32:	4b0a      	ldr	r3, [pc, #40]	; (8003b5c <BleGetBdAddress+0x80>)
 8003b34:	617b      	str	r3, [r7, #20]
 8003b36:	e00b      	b.n	8003b50 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8003b38:	2000      	movs	r0, #0
 8003b3a:	f007 f97f 	bl	800ae3c <OTP_Read>
 8003b3e:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d002      	beq.n	8003b4c <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	617b      	str	r3, [r7, #20]
 8003b4a:	e001      	b.n	8003b50 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8003b4c:	4b04      	ldr	r3, [pc, #16]	; (8003b60 <BleGetBdAddress+0x84>)
 8003b4e:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8003b50:	697b      	ldr	r3, [r7, #20]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3718      	adds	r7, #24
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	200005ac 	.word	0x200005ac
 8003b60:	08010b5c 	.word	0x08010b5c

08003b64 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */
  BSP_LED_Off(LED_GREEN);
 8003b6a:	2001      	movs	r0, #1
 8003b6c:	f000 fcfc 	bl	8004568 <BSP_LED_Off>
  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8003b70:	4b10      	ldr	r3, [pc, #64]	; (8003bb4 <Adv_Cancel+0x50>)
 8003b72:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003b76:	2b05      	cmp	r3, #5
 8003b78:	d017      	beq.n	8003baa <Adv_Cancel+0x46>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8003b7a:	2392      	movs	r3, #146	; 0x92
 8003b7c:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8003b7e:	f005 fca5 	bl	80094cc <aci_gap_set_non_discoverable>
 8003b82:	4603      	mov	r3, r0
 8003b84:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8003b86:	4b0b      	ldr	r3, [pc, #44]	; (8003bb4 <Adv_Cancel+0x50>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if (ret != BLE_STATUS_SUCCESS)
 8003b8e:	79fb      	ldrb	r3, [r7, #7]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d003      	beq.n	8003b9c <Adv_Cancel+0x38>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 8003b94:	4808      	ldr	r0, [pc, #32]	; (8003bb8 <Adv_Cancel+0x54>)
 8003b96:	f009 fc9b 	bl	800d4d0 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8003b9a:	e006      	b.n	8003baa <Adv_Cancel+0x46>
      APP_DBG_MSG("  \r\n\r");
 8003b9c:	4807      	ldr	r0, [pc, #28]	; (8003bbc <Adv_Cancel+0x58>)
 8003b9e:	f009 fc97 	bl	800d4d0 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 8003ba2:	4807      	ldr	r0, [pc, #28]	; (8003bc0 <Adv_Cancel+0x5c>)
 8003ba4:	f009 fc94 	bl	800d4d0 <iprintf>
  return;
 8003ba8:	bf00      	nop
 8003baa:	bf00      	nop
}
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	200005b4 	.word	0x200005b4
 8003bb8:	0801079c 	.word	0x0801079c
 8003bbc:	080107c0 	.word	0x080107c0
 8003bc0:	080107c8 	.word	0x080107c8

08003bc4 <Adv_Cancel_Req>:

static void Adv_Cancel_Req(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_Req_1 */

  /* USER CODE END Adv_Cancel_Req_1 */

  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 8003bc8:	2100      	movs	r1, #0
 8003bca:	2001      	movs	r0, #1
 8003bcc:	f008 fe38 	bl	800c840 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN Adv_Cancel_Req_2 */

  /* USER CODE END Adv_Cancel_Req_2 */

  return;
 8003bd0:	bf00      	nop
}
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO()
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Switch_OFF_GPIO */
  BSP_LED_Off(LED_GREEN);
 8003bd8:	2001      	movs	r0, #1
 8003bda:	f000 fcc5 	bl	8004568 <BSP_LED_Off>
  /* USER CODE END Switch_OFF_GPIO */
}
 8003bde:	bf00      	nop
 8003be0:	bd80      	pop	{r7, pc}
	...

08003be4 <BLE_SVC_L2CAP_Conn_Update>:

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
void BLE_SVC_L2CAP_Conn_Update(uint16_t ConnectionHandle)
{
 8003be4:	b590      	push	{r4, r7, lr}
 8003be6:	b089      	sub	sp, #36	; 0x24
 8003be8:	af02      	add	r7, sp, #8
 8003bea:	4603      	mov	r3, r0
 8003bec:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_1 */

  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_1 */

  if (mutex == 1)
 8003bee:	4b29      	ldr	r3, [pc, #164]	; (8003c94 <BLE_SVC_L2CAP_Conn_Update+0xb0>)
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d149      	bne.n	8003c8a <BLE_SVC_L2CAP_Conn_Update+0xa6>
  {
    mutex = 0;
 8003bf6:	4b27      	ldr	r3, [pc, #156]	; (8003c94 <BLE_SVC_L2CAP_Conn_Update+0xb0>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	701a      	strb	r2, [r3, #0]
    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 8003bfc:	4b26      	ldr	r3, [pc, #152]	; (8003c98 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	3301      	adds	r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	bfb8      	it	lt
 8003c0a:	425b      	neglt	r3, r3
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	4b22      	ldr	r3, [pc, #136]	; (8003c98 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 8003c10:	701a      	strb	r2, [r3, #0]
    uint16_t interval_min = CONN_P(a_ConnInterval[index_con_int]);
 8003c12:	4b21      	ldr	r3, [pc, #132]	; (8003c98 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	4a21      	ldr	r2, [pc, #132]	; (8003c9c <BLE_SVC_L2CAP_Conn_Update+0xb8>)
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4413      	add	r3, r2
 8003c1c:	ed93 7a00 	vldr	s14, [r3]
 8003c20:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
 8003c24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c2c:	ee17 3a90 	vmov	r3, s15
 8003c30:	82fb      	strh	r3, [r7, #22]
    uint16_t interval_max = CONN_P(a_ConnInterval[index_con_int]);
 8003c32:	4b19      	ldr	r3, [pc, #100]	; (8003c98 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	4a19      	ldr	r2, [pc, #100]	; (8003c9c <BLE_SVC_L2CAP_Conn_Update+0xb8>)
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	4413      	add	r3, r2
 8003c3c:	ed93 7a00 	vldr	s14, [r3]
 8003c40:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
 8003c44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c4c:	ee17 3a90 	vmov	r3, s15
 8003c50:	82bb      	strh	r3, [r7, #20]
    uint16_t slave_latency = L2CAP_SLAVE_LATENCY;
 8003c52:	2300      	movs	r3, #0
 8003c54:	827b      	strh	r3, [r7, #18]
    uint16_t timeout_multiplier = L2CAP_TIMEOUT_MULTIPLIER;
 8003c56:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003c5a:	823b      	strh	r3, [r7, #16]
    tBleStatus ret;

    ret = aci_l2cap_connection_parameter_update_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 8003c5c:	4b10      	ldr	r3, [pc, #64]	; (8003ca0 <BLE_SVC_L2CAP_Conn_Update+0xbc>)
 8003c5e:	8ad8      	ldrh	r0, [r3, #22]
 8003c60:	8a7c      	ldrh	r4, [r7, #18]
 8003c62:	8aba      	ldrh	r2, [r7, #20]
 8003c64:	8af9      	ldrh	r1, [r7, #22]
 8003c66:	8a3b      	ldrh	r3, [r7, #16]
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	4623      	mov	r3, r4
 8003c6c:	f006 fdd4 	bl	800a818 <aci_l2cap_connection_parameter_update_req>
 8003c70:	4603      	mov	r3, r0
 8003c72:	73fb      	strb	r3, [r7, #15]
                                                    interval_min, interval_max,
                                                    slave_latency, timeout_multiplier);
    if (ret != BLE_STATUS_SUCCESS)
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <BLE_SVC_L2CAP_Conn_Update+0x9e>
    {
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Failed \r\n\r");
 8003c7a:	480a      	ldr	r0, [pc, #40]	; (8003ca4 <BLE_SVC_L2CAP_Conn_Update+0xc0>)
 8003c7c:	f009 fc28 	bl	800d4d0 <iprintf>

  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_2 */

  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_2 */

  return;
 8003c80:	e003      	b.n	8003c8a <BLE_SVC_L2CAP_Conn_Update+0xa6>
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Successfully \r\n\r");
 8003c82:	4809      	ldr	r0, [pc, #36]	; (8003ca8 <BLE_SVC_L2CAP_Conn_Update+0xc4>)
 8003c84:	f009 fc24 	bl	800d4d0 <iprintf>
  return;
 8003c88:	bf00      	nop
 8003c8a:	bf00      	nop
}
 8003c8c:	371c      	adds	r7, #28
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd90      	pop	{r4, r7, pc}
 8003c92:	bf00      	nop
 8003c94:	20000641 	.word	0x20000641
 8003c98:	20000640 	.word	0x20000640
 8003c9c:	20000008 	.word	0x20000008
 8003ca0:	200005b4 	.word	0x200005b4
 8003ca4:	080107e4 	.word	0x080107e4
 8003ca8:	0801080c 	.word	0x0801080c

08003cac <Connection_Interval_Update_Req>:
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
static void Connection_Interval_Update_Req(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_FAST_ADV && BleApplicationContext.Device_Connection_Status != APP_BLE_IDLE)
 8003cb0:	4b08      	ldr	r3, [pc, #32]	; (8003cd4 <Connection_Interval_Update_Req+0x28>)
 8003cb2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d00a      	beq.n	8003cd0 <Connection_Interval_Update_Req+0x24>
 8003cba:	4b06      	ldr	r3, [pc, #24]	; (8003cd4 <Connection_Interval_Update_Req+0x28>)
 8003cbc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d005      	beq.n	8003cd0 <Connection_Interval_Update_Req+0x24>
  {
    BLE_SVC_L2CAP_Conn_Update(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8003cc4:	4b03      	ldr	r3, [pc, #12]	; (8003cd4 <Connection_Interval_Update_Req+0x28>)
 8003cc6:	8adb      	ldrh	r3, [r3, #22]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7ff ff8b 	bl	8003be4 <BLE_SVC_L2CAP_Conn_Update>
  }

  return;
 8003cce:	bf00      	nop
 8003cd0:	bf00      	nop
}
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	200005b4 	.word	0x200005b4

08003cd8 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	2004      	movs	r0, #4
 8003ce4:	f008 fdac 	bl	800c840 <UTIL_SEQ_SetTask>

  return;
 8003ce8:	bf00      	nop
}
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8003cf8:	2001      	movs	r0, #1
 8003cfa:	f008 fe0d 	bl	800c918 <UTIL_SEQ_SetEvt>

  return;
 8003cfe:	bf00      	nop
}
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b082      	sub	sp, #8
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8003d0e:	2001      	movs	r0, #1
 8003d10:	f008 fe22 	bl	800c958 <UTIL_SEQ_WaitEvt>

  return;
 8003d14:	bf00      	nop
}
 8003d16:	3708      	adds	r7, #8
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	3308      	adds	r3, #8
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f008 f98a 	bl	800c048 <SVCCTL_UserEvtRx>
 8003d34:	4603      	mov	r3, r0
 8003d36:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8003d38:	7afb      	ldrb	r3, [r7, #11]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2201      	movs	r2, #1
 8003d42:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8003d44:	e003      	b.n	8003d4e <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	701a      	strb	r2, [r3, #0]
  return;
 8003d4c:	bf00      	nop
}
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8003d5e:	79fb      	ldrb	r3, [r7, #7]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d002      	beq.n	8003d6a <BLE_StatusNot+0x16>
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d006      	beq.n	8003d76 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8003d68:	e00b      	b.n	8003d82 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8003d6a:	233f      	movs	r3, #63	; 0x3f
 8003d6c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f008 fd92 	bl	800c898 <UTIL_SEQ_PauseTask>
      break;
 8003d74:	e005      	b.n	8003d82 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8003d76:	233f      	movs	r3, #63	; 0x3f
 8003d78:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f008 fdac 	bl	800c8d8 <UTIL_SEQ_ResumeTask>
      break;
 8003d80:	bf00      	nop
  }

  return;
 8003d82:	bf00      	nop
}
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
	...

08003d8c <P2PS_STM_App_Notification>:
static void P2PS_APP_LED_BUTTON_context_Init(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	2b03      	cmp	r3, #3
 8003d9a:	d01a      	beq.n	8003dd2 <P2PS_STM_App_Notification+0x46>
 8003d9c:	2b03      	cmp	r3, #3
 8003d9e:	dc6b      	bgt.n	8003e78 <P2PS_STM_App_Notification+0xec>
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d002      	beq.n	8003daa <P2PS_STM_App_Notification+0x1e>
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d00a      	beq.n	8003dbe <P2PS_STM_App_Notification+0x32>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 8003da8:	e066      	b.n	8003e78 <P2PS_STM_App_Notification+0xec>
      P2P_Server_App_Context.Notification_Status = 1;
 8003daa:	4b37      	ldr	r3, [pc, #220]	; (8003e88 <P2PS_STM_App_Notification+0xfc>)
 8003dac:	2201      	movs	r2, #1
 8003dae:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION ENABLED\n"); 
 8003db0:	4836      	ldr	r0, [pc, #216]	; (8003e8c <P2PS_STM_App_Notification+0x100>)
 8003db2:	f009 fbfb 	bl	800d5ac <puts>
      APP_DBG_MSG(" \n\r");
 8003db6:	4836      	ldr	r0, [pc, #216]	; (8003e90 <P2PS_STM_App_Notification+0x104>)
 8003db8:	f009 fb8a 	bl	800d4d0 <iprintf>
      break;
 8003dbc:	e05f      	b.n	8003e7e <P2PS_STM_App_Notification+0xf2>
      P2P_Server_App_Context.Notification_Status = 0;
 8003dbe:	4b32      	ldr	r3, [pc, #200]	; (8003e88 <P2PS_STM_App_Notification+0xfc>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION DISABLED\n");
 8003dc4:	4833      	ldr	r0, [pc, #204]	; (8003e94 <P2PS_STM_App_Notification+0x108>)
 8003dc6:	f009 fbf1 	bl	800d5ac <puts>
      APP_DBG_MSG(" \n\r");
 8003dca:	4831      	ldr	r0, [pc, #196]	; (8003e90 <P2PS_STM_App_Notification+0x104>)
 8003dcc:	f009 fb80 	bl	800d4d0 <iprintf>
      break;
 8003dd0:	e055      	b.n	8003e7e <P2PS_STM_App_Notification+0xf2>
      if(pNotification->DataTransfered.pPayload[0] == 0x00){ /* ALL Deviceselected - may be necessary as LB Routeur informs all connection */
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d123      	bne.n	8003e24 <P2PS_STM_App_Notification+0x98>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	3301      	adds	r3, #1
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d10b      	bne.n	8003e00 <P2PS_STM_App_Notification+0x74>
          BSP_LED_On(LED_BLUE);
 8003de8:	2000      	movs	r0, #0
 8003dea:	f000 fba3 	bl	8004534 <BSP_LED_On>
          APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED1 ON\n"); 
 8003dee:	482a      	ldr	r0, [pc, #168]	; (8003e98 <P2PS_STM_App_Notification+0x10c>)
 8003df0:	f009 fbdc 	bl	800d5ac <puts>
          APP_DBG_MSG(" \n\r");
 8003df4:	4826      	ldr	r0, [pc, #152]	; (8003e90 <P2PS_STM_App_Notification+0x104>)
 8003df6:	f009 fb6b 	bl	800d4d0 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 8003dfa:	4b23      	ldr	r3, [pc, #140]	; (8003e88 <P2PS_STM_App_Notification+0xfc>)
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	3301      	adds	r3, #1
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10b      	bne.n	8003e24 <P2PS_STM_App_Notification+0x98>
          BSP_LED_Off(LED_BLUE);
 8003e0c:	2000      	movs	r0, #0
 8003e0e:	f000 fbab 	bl	8004568 <BSP_LED_Off>
          APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED1 OFF\n"); 
 8003e12:	4822      	ldr	r0, [pc, #136]	; (8003e9c <P2PS_STM_App_Notification+0x110>)
 8003e14:	f009 fbca 	bl	800d5ac <puts>
          APP_DBG_MSG(" \n\r");
 8003e18:	481d      	ldr	r0, [pc, #116]	; (8003e90 <P2PS_STM_App_Notification+0x104>)
 8003e1a:	f009 fb59 	bl	800d4d0 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 8003e1e:	4b1a      	ldr	r3, [pc, #104]	; (8003e88 <P2PS_STM_App_Notification+0xfc>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	709a      	strb	r2, [r3, #2]
      if(pNotification->DataTransfered.pPayload[0] == 0x01){ /* end device 1 selected - may be necessary as LB Routeur informs all connection */
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d126      	bne.n	8003e7c <P2PS_STM_App_Notification+0xf0>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	3301      	adds	r3, #1
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d10b      	bne.n	8003e52 <P2PS_STM_App_Notification+0xc6>
          BSP_LED_On(LED_BLUE);
 8003e3a:	2000      	movs	r0, #0
 8003e3c:	f000 fb7a 	bl	8004534 <BSP_LED_On>
          APP_DBG_MSG("-- P2P APPLICATION SERVER 1 : LED1 ON\n"); 
 8003e40:	4817      	ldr	r0, [pc, #92]	; (8003ea0 <P2PS_STM_App_Notification+0x114>)
 8003e42:	f009 fbb3 	bl	800d5ac <puts>
          APP_DBG_MSG(" \n\r");
 8003e46:	4812      	ldr	r0, [pc, #72]	; (8003e90 <P2PS_STM_App_Notification+0x104>)
 8003e48:	f009 fb42 	bl	800d4d0 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 8003e4c:	4b0e      	ldr	r3, [pc, #56]	; (8003e88 <P2PS_STM_App_Notification+0xfc>)
 8003e4e:	2201      	movs	r2, #1
 8003e50:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	3301      	adds	r3, #1
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10e      	bne.n	8003e7c <P2PS_STM_App_Notification+0xf0>
          BSP_LED_Off(LED_BLUE);
 8003e5e:	2000      	movs	r0, #0
 8003e60:	f000 fb82 	bl	8004568 <BSP_LED_Off>
          APP_DBG_MSG("-- P2P APPLICATION SERVER 1 : LED1 OFF\n"); 
 8003e64:	480f      	ldr	r0, [pc, #60]	; (8003ea4 <P2PS_STM_App_Notification+0x118>)
 8003e66:	f009 fba1 	bl	800d5ac <puts>
          APP_DBG_MSG(" \n\r");
 8003e6a:	4809      	ldr	r0, [pc, #36]	; (8003e90 <P2PS_STM_App_Notification+0x104>)
 8003e6c:	f009 fb30 	bl	800d4d0 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 8003e70:	4b05      	ldr	r3, [pc, #20]	; (8003e88 <P2PS_STM_App_Notification+0xfc>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	709a      	strb	r2, [r3, #2]
      break;
 8003e76:	e001      	b.n	8003e7c <P2PS_STM_App_Notification+0xf0>
      break;
 8003e78:	bf00      	nop
 8003e7a:	e000      	b.n	8003e7e <P2PS_STM_App_Notification+0xf2>
      break;
 8003e7c:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 8003e7e:	bf00      	nop
}
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	20000644 	.word	0x20000644
 8003e8c:	0801083c 	.word	0x0801083c
 8003e90:	08010870 	.word	0x08010870
 8003e94:	08010874 	.word	0x08010874
 8003e98:	080108a8 	.word	0x080108a8
 8003e9c:	080108d0 	.word	0x080108d0
 8003ea0:	080108f8 	.word	0x080108f8
 8003ea4:	08010920 	.word	0x08010920

08003ea8 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d005      	beq.n	8003ec4 <P2PS_APP_Notification+0x1c>
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d000      	beq.n	8003ebe <P2PS_APP_Notification+0x16>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 8003ebc:	e003      	b.n	8003ec6 <P2PS_APP_Notification+0x1e>
      P2PS_APP_LED_BUTTON_context_Init();
 8003ebe:	f000 f819 	bl	8003ef4 <P2PS_APP_LED_BUTTON_context_Init>
    break;
 8003ec2:	e000      	b.n	8003ec6 <P2PS_APP_Notification+0x1e>
    break;
 8003ec4:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 8003ec6:	bf00      	nop
}
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
	...

08003ed0 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, P2PS_Send_Notification );
 8003ed4:	4a05      	ldr	r2, [pc, #20]	; (8003eec <P2PS_APP_Init+0x1c>)
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	2008      	movs	r0, #8
 8003eda:	f008 fc8f 	bl	800c7fc <UTIL_SEQ_RegTask>

  /**
   * Initialize LedButton Service
   */
  P2P_Server_App_Context.Notification_Status=0; 
 8003ede:	4b04      	ldr	r3, [pc, #16]	; (8003ef0 <P2PS_APP_Init+0x20>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	701a      	strb	r2, [r3, #0]
  P2PS_APP_LED_BUTTON_context_Init();
 8003ee4:	f000 f806 	bl	8003ef4 <P2PS_APP_LED_BUTTON_context_Init>
/* USER CODE END P2PS_APP_Init */
  return;
 8003ee8:	bf00      	nop
}
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	08003f39 	.word	0x08003f39
 8003ef0:	20000644 	.word	0x20000644

08003ef4 <P2PS_APP_LED_BUTTON_context_Init>:

/* USER CODE BEGIN FD */
void P2PS_APP_LED_BUTTON_context_Init(void){
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
  
  BSP_LED_Off(LED_BLUE);
 8003ef8:	2000      	movs	r0, #0
 8003efa:	f000 fb35 	bl	8004568 <BSP_LED_Off>
  APP_DBG_MSG("LED BLUE OFF\n");
 8003efe:	4808      	ldr	r0, [pc, #32]	; (8003f20 <P2PS_APP_LED_BUTTON_context_Init+0x2c>)
 8003f00:	f009 fb54 	bl	800d5ac <puts>
  
  #if(P2P_SERVER1 != 0)
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x01; /* Device1 */
 8003f04:	4b07      	ldr	r3, [pc, #28]	; (8003f24 <P2PS_APP_LED_BUTTON_context_Init+0x30>)
 8003f06:	2201      	movs	r2, #1
 8003f08:	705a      	strb	r2, [r3, #1]
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
 8003f0a:	4b06      	ldr	r3, [pc, #24]	; (8003f24 <P2PS_APP_LED_BUTTON_context_Init+0x30>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	709a      	strb	r2, [r3, #2]
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x01;/* Device1 */
 8003f10:	4b04      	ldr	r3, [pc, #16]	; (8003f24 <P2PS_APP_LED_BUTTON_context_Init+0x30>)
 8003f12:	2201      	movs	r2, #1
 8003f14:	70da      	strb	r2, [r3, #3]
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 8003f16:	4b03      	ldr	r3, [pc, #12]	; (8003f24 <P2PS_APP_LED_BUTTON_context_Init+0x30>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	711a      	strb	r2, [r3, #4]
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x06; /* device6 */
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x06; /* Device6 */
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
#endif  
}
 8003f1c:	bf00      	nop
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	08010948 	.word	0x08010948
 8003f24:	20000644 	.word	0x20000644

08003f28 <P2PS_APP_SW1_Button_Action>:

void P2PS_APP_SW1_Button_Action(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	2008      	movs	r0, #8
 8003f30:	f008 fc86 	bl	800c840 <UTIL_SEQ_SetTask>

  return;
 8003f34:	bf00      	nop
}
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <P2PS_Send_Notification>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/
/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void P2PS_Send_Notification(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
 
  if(P2P_Server_App_Context.ButtonControl.ButtonStatus == 0x00){
 8003f3c:	4b0f      	ldr	r3, [pc, #60]	; (8003f7c <P2PS_Send_Notification+0x44>)
 8003f3e:	791b      	ldrb	r3, [r3, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d103      	bne.n	8003f4c <P2PS_Send_Notification+0x14>
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x01;
 8003f44:	4b0d      	ldr	r3, [pc, #52]	; (8003f7c <P2PS_Send_Notification+0x44>)
 8003f46:	2201      	movs	r2, #1
 8003f48:	711a      	strb	r2, [r3, #4]
 8003f4a:	e002      	b.n	8003f52 <P2PS_Send_Notification+0x1a>
  } else {
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 8003f4c:	4b0b      	ldr	r3, [pc, #44]	; (8003f7c <P2PS_Send_Notification+0x44>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	711a      	strb	r2, [r3, #4]
  }
  
   if(P2P_Server_App_Context.Notification_Status){ 
 8003f52:	4b0a      	ldr	r3, [pc, #40]	; (8003f7c <P2PS_Send_Notification+0x44>)
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00b      	beq.n	8003f72 <P2PS_Send_Notification+0x3a>
    APP_DBG_MSG("-- P2P APPLICATION SERVER  : INFORM CLIENT BUTTON 1 PUSHED \n ");
 8003f5a:	4809      	ldr	r0, [pc, #36]	; (8003f80 <P2PS_Send_Notification+0x48>)
 8003f5c:	f009 fab8 	bl	800d4d0 <iprintf>
    APP_DBG_MSG(" \n\r");
 8003f60:	4808      	ldr	r0, [pc, #32]	; (8003f84 <P2PS_Send_Notification+0x4c>)
 8003f62:	f009 fab5 	bl	800d4d0 <iprintf>
    P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&P2P_Server_App_Context.ButtonControl);
 8003f66:	4908      	ldr	r1, [pc, #32]	; (8003f88 <P2PS_Send_Notification+0x50>)
 8003f68:	f64f 6042 	movw	r0, #65090	; 0xfe42
 8003f6c:	f007 f898 	bl	800b0a0 <P2PS_STM_App_Update_Char>
   } else {
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n "); 
   }

  return;
 8003f70:	e003      	b.n	8003f7a <P2PS_Send_Notification+0x42>
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n "); 
 8003f72:	4806      	ldr	r0, [pc, #24]	; (8003f8c <P2PS_Send_Notification+0x54>)
 8003f74:	f009 faac 	bl	800d4d0 <iprintf>
  return;
 8003f78:	bf00      	nop
}
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	20000644 	.word	0x20000644
 8003f80:	08010958 	.word	0x08010958
 8003f84:	08010870 	.word	0x08010870
 8003f88:	20000647 	.word	0x20000647
 8003f8c:	08010998 	.word	0x08010998

08003f90 <LL_PWR_EnableBootC2>:
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8003f94:	4b05      	ldr	r3, [pc, #20]	; (8003fac <LL_PWR_EnableBootC2+0x1c>)
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	4a04      	ldr	r2, [pc, #16]	; (8003fac <LL_PWR_EnableBootC2+0x1c>)
 8003f9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f9e:	60d3      	str	r3, [r2, #12]
}
 8003fa0:	bf00      	nop
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	58000400 	.word	0x58000400

08003fb0 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8003fb8:	4b06      	ldr	r3, [pc, #24]	; (8003fd4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8003fba:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8003fbe:	4905      	ldr	r1, [pc, #20]	; (8003fd4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr
 8003fd4:	58000800 	.word	0x58000800

08003fd8 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8003fe0:	4b05      	ldr	r3, [pc, #20]	; (8003ff8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003fe2:	6a1a      	ldr	r2, [r3, #32]
 8003fe4:	4904      	ldr	r1, [pc, #16]	; (8003ff8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	620b      	str	r3, [r1, #32]
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr
 8003ff8:	58000800 	.word	0x58000800

08003ffc <LL_AHB3_GRP1_EnableClock>:
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8004004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004008:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800400a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4313      	orrs	r3, r2
 8004012:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8004014:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004018:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4013      	ands	r3, r2
 800401e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004020:	68fb      	ldr	r3, [r7, #12]
}
 8004022:	bf00      	nop
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800402e:	b480      	push	{r7}
 8004030:	b085      	sub	sp, #20
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8004036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800403a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800403e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4313      	orrs	r3, r2
 8004046:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800404a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800404e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4013      	ands	r3, r2
 8004056:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004058:	68fb      	ldr	r3, [r7, #12]
}
 800405a:	bf00      	nop
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr

08004066 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8004066:	b480      	push	{r7}
 8004068:	b083      	sub	sp, #12
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	601a      	str	r2, [r3, #0]
}
 800407a:	bf00      	nop
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8004086:	b480      	push	{r7}
 8004088:	b083      	sub	sp, #12
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f043 0201 	orr.w	r2, r3, #1
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	601a      	str	r2, [r3, #0]
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr

080040a6 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b083      	sub	sp, #12
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
 80040ae:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	041b      	lsls	r3, r3, #16
 80040b8:	43db      	mvns	r3, r3
 80040ba:	401a      	ands	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	605a      	str	r2, [r3, #4]
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	041b      	lsls	r3, r3, #16
 80040de:	431a      	orrs	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	605a      	str	r2, [r3, #4]
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685a      	ldr	r2, [r3, #4]
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	43db      	mvns	r3, r3
 8004102:	401a      	ands	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	605a      	str	r2, [r3, #4]
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	609a      	str	r2, [r3, #8]
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	041a      	lsls	r2, r3, #16
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	609a      	str	r2, [r3, #8]
}
 8004142:	bf00      	nop
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr

0800414e <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800414e:	b480      	push	{r7}
 8004150:	b083      	sub	sp, #12
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
 8004156:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68da      	ldr	r2, [r3, #12]
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	4013      	ands	r3, r2
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	429a      	cmp	r2, r3
 8004164:	d101      	bne.n	800416a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8004166:	2301      	movs	r3, #1
 8004168:	e000      	b.n	800416c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	69da      	ldr	r2, [r3, #28]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	4013      	ands	r3, r2
 800418a:	683a      	ldr	r2, [r7, #0]
 800418c:	429a      	cmp	r2, r3
 800418e:	d101      	bne.n	8004194 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8004190:	2301      	movs	r3, #1
 8004192:	e000      	b.n	8004196 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
	...

080041a4 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80041a8:	2102      	movs	r1, #2
 80041aa:	4818      	ldr	r0, [pc, #96]	; (800420c <HW_IPCC_Rx_Handler+0x68>)
 80041ac:	f7ff ffe4 	bl	8004178 <LL_C2_IPCC_IsActiveFlag_CHx>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d008      	beq.n	80041c8 <HW_IPCC_Rx_Handler+0x24>
 80041b6:	4b15      	ldr	r3, [pc, #84]	; (800420c <HW_IPCC_Rx_Handler+0x68>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d102      	bne.n	80041c8 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 80041c2:	f000 f8d5 	bl	8004370 <HW_IPCC_SYS_EvtHandler>
 80041c6:	e01e      	b.n	8004206 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80041c8:	2101      	movs	r1, #1
 80041ca:	4810      	ldr	r0, [pc, #64]	; (800420c <HW_IPCC_Rx_Handler+0x68>)
 80041cc:	f7ff ffd4 	bl	8004178 <LL_C2_IPCC_IsActiveFlag_CHx>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d008      	beq.n	80041e8 <HW_IPCC_Rx_Handler+0x44>
 80041d6:	4b0d      	ldr	r3, [pc, #52]	; (800420c <HW_IPCC_Rx_Handler+0x68>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d102      	bne.n	80041e8 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 80041e2:	f000 f889 	bl	80042f8 <HW_IPCC_BLE_EvtHandler>
 80041e6:	e00e      	b.n	8004206 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80041e8:	2108      	movs	r1, #8
 80041ea:	4808      	ldr	r0, [pc, #32]	; (800420c <HW_IPCC_Rx_Handler+0x68>)
 80041ec:	f7ff ffc4 	bl	8004178 <LL_C2_IPCC_IsActiveFlag_CHx>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d008      	beq.n	8004208 <HW_IPCC_Rx_Handler+0x64>
 80041f6:	4b05      	ldr	r3, [pc, #20]	; (800420c <HW_IPCC_Rx_Handler+0x68>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f003 0308 	and.w	r3, r3, #8
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d102      	bne.n	8004208 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8004202:	f000 f901 	bl	8004408 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8004206:	bf00      	nop
 8004208:	bf00      	nop
}
 800420a:	bd80      	pop	{r7, pc}
 800420c:	58000c00 	.word	0x58000c00

08004210 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8004214:	2102      	movs	r1, #2
 8004216:	4818      	ldr	r0, [pc, #96]	; (8004278 <HW_IPCC_Tx_Handler+0x68>)
 8004218:	f7ff ff99 	bl	800414e <LL_C1_IPCC_IsActiveFlag_CHx>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d108      	bne.n	8004234 <HW_IPCC_Tx_Handler+0x24>
 8004222:	4b15      	ldr	r3, [pc, #84]	; (8004278 <HW_IPCC_Tx_Handler+0x68>)
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d102      	bne.n	8004234 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800422e:	f000 f893 	bl	8004358 <HW_IPCC_SYS_CmdEvtHandler>
 8004232:	e01e      	b.n	8004272 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8004234:	2108      	movs	r1, #8
 8004236:	4810      	ldr	r0, [pc, #64]	; (8004278 <HW_IPCC_Tx_Handler+0x68>)
 8004238:	f7ff ff89 	bl	800414e <LL_C1_IPCC_IsActiveFlag_CHx>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d108      	bne.n	8004254 <HW_IPCC_Tx_Handler+0x44>
 8004242:	4b0d      	ldr	r3, [pc, #52]	; (8004278 <HW_IPCC_Tx_Handler+0x68>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d102      	bne.n	8004254 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800424e:	f000 f8bd 	bl	80043cc <HW_IPCC_MM_FreeBufHandler>
 8004252:	e00e      	b.n	8004272 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8004254:	2120      	movs	r1, #32
 8004256:	4808      	ldr	r0, [pc, #32]	; (8004278 <HW_IPCC_Tx_Handler+0x68>)
 8004258:	f7ff ff79 	bl	800414e <LL_C1_IPCC_IsActiveFlag_CHx>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d108      	bne.n	8004274 <HW_IPCC_Tx_Handler+0x64>
 8004262:	4b05      	ldr	r3, [pc, #20]	; (8004278 <HW_IPCC_Tx_Handler+0x68>)
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d102      	bne.n	8004274 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800426e:	f000 f84f 	bl	8004310 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8004272:	bf00      	nop
 8004274:	bf00      	nop
}
 8004276:	bd80      	pop	{r7, pc}
 8004278:	58000c00 	.word	0x58000c00

0800427c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8004280:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004284:	f7ff fed3 	bl	800402e <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8004288:	f44f 7000 	mov.w	r0, #512	; 0x200
 800428c:	f7ff fea4 	bl	8003fd8 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8004290:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004294:	f7ff fe8c 	bl	8003fb0 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8004298:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800429a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800429c:	f7ff fe78 	bl	8003f90 <LL_PWR_EnableBootC2>

  return;
 80042a0:	bf00      	nop
}
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80042a8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80042ac:	f7ff fea6 	bl	8003ffc <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80042b0:	4806      	ldr	r0, [pc, #24]	; (80042cc <HW_IPCC_Init+0x28>)
 80042b2:	f7ff fee8 	bl	8004086 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80042b6:	4805      	ldr	r0, [pc, #20]	; (80042cc <HW_IPCC_Init+0x28>)
 80042b8:	f7ff fed5 	bl	8004066 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80042bc:	202c      	movs	r0, #44	; 0x2c
 80042be:	f000 fc6c 	bl	8004b9a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80042c2:	202d      	movs	r0, #45	; 0x2d
 80042c4:	f000 fc69 	bl	8004b9a <HAL_NVIC_EnableIRQ>

  return;
 80042c8:	bf00      	nop
}
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	58000c00 	.word	0x58000c00

080042d0 <HW_IPCC_BLE_Init>:
#endif
/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80042d4:	2101      	movs	r1, #1
 80042d6:	4802      	ldr	r0, [pc, #8]	; (80042e0 <HW_IPCC_BLE_Init+0x10>)
 80042d8:	f7ff ff0a 	bl	80040f0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80042dc:	bf00      	nop
}
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	58000c00 	.word	0x58000c00

080042e4 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_BLE_CMD_CHANNEL );
 80042e8:	2101      	movs	r1, #1
 80042ea:	4802      	ldr	r0, [pc, #8]	; (80042f4 <HW_IPCC_BLE_SendCmd+0x10>)
 80042ec:	f7ff ff20 	bl	8004130 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80042f0:	bf00      	nop
}
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	58000c00 	.word	0x58000c00

080042f8 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80042fc:	f007 ff88 	bl	800c210 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8004300:	2101      	movs	r1, #1
 8004302:	4802      	ldr	r0, [pc, #8]	; (800430c <HW_IPCC_BLE_EvtHandler+0x14>)
 8004304:	f7ff ff06 	bl	8004114 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8004308:	bf00      	nop
}
 800430a:	bd80      	pop	{r7, pc}
 800430c:	58000c00 	.word	0x58000c00

08004310 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8004314:	2120      	movs	r1, #32
 8004316:	4803      	ldr	r0, [pc, #12]	; (8004324 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8004318:	f7ff fed8 	bl	80040cc <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800431c:	f007 ffa8 	bl	800c270 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8004320:	bf00      	nop
}
 8004322:	bd80      	pop	{r7, pc}
 8004324:	58000c00 	.word	0x58000c00

08004328 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8004328:	b580      	push	{r7, lr}
 800432a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800432c:	2102      	movs	r1, #2
 800432e:	4802      	ldr	r0, [pc, #8]	; (8004338 <HW_IPCC_SYS_Init+0x10>)
 8004330:	f7ff fede 	bl	80040f0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8004334:	bf00      	nop
}
 8004336:	bd80      	pop	{r7, pc}
 8004338:	58000c00 	.word	0x58000c00

0800433c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800433c:	b580      	push	{r7, lr}
 800433e:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8004340:	2102      	movs	r1, #2
 8004342:	4804      	ldr	r0, [pc, #16]	; (8004354 <HW_IPCC_SYS_SendCmd+0x18>)
 8004344:	f7ff fef4 	bl	8004130 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8004348:	2102      	movs	r1, #2
 800434a:	4802      	ldr	r0, [pc, #8]	; (8004354 <HW_IPCC_SYS_SendCmd+0x18>)
 800434c:	f7ff feab 	bl	80040a6 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8004350:	bf00      	nop
}
 8004352:	bd80      	pop	{r7, pc}
 8004354:	58000c00 	.word	0x58000c00

08004358 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800435c:	2102      	movs	r1, #2
 800435e:	4803      	ldr	r0, [pc, #12]	; (800436c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8004360:	f7ff feb4 	bl	80040cc <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8004364:	f007 ffd4 	bl	800c310 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8004368:	bf00      	nop
}
 800436a:	bd80      	pop	{r7, pc}
 800436c:	58000c00 	.word	0x58000c00

08004370 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8004374:	f007 ffe2 	bl	800c33c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8004378:	2102      	movs	r1, #2
 800437a:	4802      	ldr	r0, [pc, #8]	; (8004384 <HW_IPCC_SYS_EvtHandler+0x14>)
 800437c:	f7ff feca 	bl	8004114 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8004380:	bf00      	nop
}
 8004382:	bd80      	pop	{r7, pc}
 8004384:	58000c00 	.word	0x58000c00

08004388 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8004390:	2108      	movs	r1, #8
 8004392:	480c      	ldr	r0, [pc, #48]	; (80043c4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8004394:	f7ff fedb 	bl	800414e <LL_C1_IPCC_IsActiveFlag_CHx>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d007      	beq.n	80043ae <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800439e:	4a0a      	ldr	r2, [pc, #40]	; (80043c8 <HW_IPCC_MM_SendFreeBuf+0x40>)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80043a4:	2108      	movs	r1, #8
 80043a6:	4807      	ldr	r0, [pc, #28]	; (80043c4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80043a8:	f7ff fe7d 	bl	80040a6 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80043ac:	e006      	b.n	80043bc <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4798      	blx	r3
    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80043b2:	2108      	movs	r1, #8
 80043b4:	4803      	ldr	r0, [pc, #12]	; (80043c4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80043b6:	f7ff febb 	bl	8004130 <LL_C1_IPCC_SetFlag_CHx>
  return;
 80043ba:	bf00      	nop
}
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	58000c00 	.word	0x58000c00
 80043c8:	2000064c 	.word	0x2000064c

080043cc <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80043d0:	2108      	movs	r1, #8
 80043d2:	4806      	ldr	r0, [pc, #24]	; (80043ec <HW_IPCC_MM_FreeBufHandler+0x20>)
 80043d4:	f7ff fe7a 	bl	80040cc <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80043d8:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4798      	blx	r3

  HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80043de:	2108      	movs	r1, #8
 80043e0:	4802      	ldr	r0, [pc, #8]	; (80043ec <HW_IPCC_MM_FreeBufHandler+0x20>)
 80043e2:	f7ff fea5 	bl	8004130 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80043e6:	bf00      	nop
}
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	58000c00 	.word	0x58000c00
 80043f0:	2000064c 	.word	0x2000064c

080043f4 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80043f8:	2108      	movs	r1, #8
 80043fa:	4802      	ldr	r0, [pc, #8]	; (8004404 <HW_IPCC_TRACES_Init+0x10>)
 80043fc:	f7ff fe78 	bl	80040f0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8004400:	bf00      	nop
}
 8004402:	bd80      	pop	{r7, pc}
 8004404:	58000c00 	.word	0x58000c00

08004408 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800440c:	f008 f83e 	bl	800c48c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8004410:	2108      	movs	r1, #8
 8004412:	4802      	ldr	r0, [pc, #8]	; (800441c <HW_IPCC_TRACES_EvtHandler+0x14>)
 8004414:	f7ff fe7e 	bl	8004114 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8004418:	bf00      	nop
}
 800441a:	bd80      	pop	{r7, pc}
 800441c:	58000c00 	.word	0x58000c00

08004420 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8004420:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004422:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004424:	3304      	adds	r3, #4

08004426 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004426:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004428:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800442a:	d3f9      	bcc.n	8004420 <CopyDataInit>
  bx lr
 800442c:	4770      	bx	lr

0800442e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800442e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8004430:	3004      	adds	r0, #4

08004432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8004432:	4288      	cmp	r0, r1
  bcc FillZerobss
 8004434:	d3fb      	bcc.n	800442e <FillZerobss>
  bx lr
 8004436:	4770      	bx	lr

08004438 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004438:	480c      	ldr	r0, [pc, #48]	; (800446c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800443a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800443c:	f000 f954 	bl	80046e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8004440:	480b      	ldr	r0, [pc, #44]	; (8004470 <LoopForever+0x8>)
 8004442:	490c      	ldr	r1, [pc, #48]	; (8004474 <LoopForever+0xc>)
 8004444:	4a0c      	ldr	r2, [pc, #48]	; (8004478 <LoopForever+0x10>)
 8004446:	2300      	movs	r3, #0
 8004448:	f7ff ffed 	bl	8004426 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800444c:	480b      	ldr	r0, [pc, #44]	; (800447c <LoopForever+0x14>)
 800444e:	490c      	ldr	r1, [pc, #48]	; (8004480 <LoopForever+0x18>)
 8004450:	2300      	movs	r3, #0
 8004452:	f7ff ffee 	bl	8004432 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8004456:	480b      	ldr	r0, [pc, #44]	; (8004484 <LoopForever+0x1c>)
 8004458:	490b      	ldr	r1, [pc, #44]	; (8004488 <LoopForever+0x20>)
 800445a:	2300      	movs	r3, #0
 800445c:	f7ff ffe9 	bl	8004432 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004460:	f009 f9dc 	bl	800d81c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8004464:	f7fe f96a 	bl	800273c <main>

08004468 <LoopForever>:

LoopForever:
  b LoopForever
 8004468:	e7fe      	b.n	8004468 <LoopForever>
 800446a:	0000      	.short	0x0000
  ldr   r0, =_estack
 800446c:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 8004470:	20000008 	.word	0x20000008
 8004474:	2000022c 	.word	0x2000022c
 8004478:	08011004 	.word	0x08011004
  INIT_BSS _sbss, _ebss
 800447c:	20000268 	.word	0x20000268
 8004480:	200018f4 	.word	0x200018f4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8004484:	200301e4 	.word	0x200301e4
 8004488:	20030a67 	.word	0x20030a67

0800448c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800448c:	e7fe      	b.n	800448c <ADC1_IRQHandler>

0800448e <LL_AHB2_GRP1_EnableClock>:
{
 800448e:	b480      	push	{r7}
 8004490:	b085      	sub	sp, #20
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800449a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800449c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80044a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4013      	ands	r3, r2
 80044b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80044b2:	68fb      	ldr	r3, [r7, #12]
}
 80044b4:	bf00      	nop
 80044b6:	3714      	adds	r7, #20
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b088      	sub	sp, #32
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	4603      	mov	r3, r0
 80044c8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80044ca:	f107 030c 	add.w	r3, r7, #12
 80044ce:	2200      	movs	r2, #0
 80044d0:	601a      	str	r2, [r3, #0]
 80044d2:	605a      	str	r2, [r3, #4]
 80044d4:	609a      	str	r2, [r3, #8]
 80044d6:	60da      	str	r2, [r3, #12]
 80044d8:	611a      	str	r2, [r3, #16]

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80044da:	2002      	movs	r0, #2
 80044dc:	f7ff ffd7 	bl	800448e <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 80044e0:	79fb      	ldrb	r3, [r7, #7]
 80044e2:	4a12      	ldr	r2, [pc, #72]	; (800452c <BSP_LED_Init+0x6c>)
 80044e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044e8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 80044ea:	2301      	movs	r3, #1
 80044ec:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80044ee:	2300      	movs	r3, #0
 80044f0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80044f2:	2302      	movs	r3, #2
 80044f4:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80044f6:	79fb      	ldrb	r3, [r7, #7]
 80044f8:	4a0d      	ldr	r2, [pc, #52]	; (8004530 <BSP_LED_Init+0x70>)
 80044fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044fe:	f107 020c 	add.w	r2, r7, #12
 8004502:	4611      	mov	r1, r2
 8004504:	4618      	mov	r0, r3
 8004506:	f000 fee1 	bl	80052cc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800450a:	79fb      	ldrb	r3, [r7, #7]
 800450c:	4a08      	ldr	r2, [pc, #32]	; (8004530 <BSP_LED_Init+0x70>)
 800450e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004512:	79fb      	ldrb	r3, [r7, #7]
 8004514:	4a05      	ldr	r2, [pc, #20]	; (800452c <BSP_LED_Init+0x6c>)
 8004516:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800451a:	2200      	movs	r2, #0
 800451c:	4619      	mov	r1, r3
 800451e:	f001 f83d 	bl	800559c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3720      	adds	r7, #32
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	08010b8c 	.word	0x08010b8c
 8004530:	20000020 	.word	0x20000020

08004534 <BSP_LED_On>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	4603      	mov	r3, r0
 800453c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 800453e:	79fb      	ldrb	r3, [r7, #7]
 8004540:	4a07      	ldr	r2, [pc, #28]	; (8004560 <BSP_LED_On+0x2c>)
 8004542:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004546:	79fb      	ldrb	r3, [r7, #7]
 8004548:	4a06      	ldr	r2, [pc, #24]	; (8004564 <BSP_LED_On+0x30>)
 800454a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800454e:	2201      	movs	r2, #1
 8004550:	4619      	mov	r1, r3
 8004552:	f001 f823 	bl	800559c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	20000020 	.word	0x20000020
 8004564:	08010b8c 	.word	0x08010b8c

08004568 <BSP_LED_Off>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	4603      	mov	r3, r0
 8004570:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8004572:	79fb      	ldrb	r3, [r7, #7]
 8004574:	4a07      	ldr	r2, [pc, #28]	; (8004594 <BSP_LED_Off+0x2c>)
 8004576:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800457a:	79fb      	ldrb	r3, [r7, #7]
 800457c:	4a06      	ldr	r2, [pc, #24]	; (8004598 <BSP_LED_Off+0x30>)
 800457e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004582:	2200      	movs	r2, #0
 8004584:	4619      	mov	r1, r3
 8004586:	f001 f809 	bl	800559c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	20000020 	.word	0x20000020
 8004598:	08010b8c 	.word	0x08010b8c

0800459c <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b088      	sub	sp, #32
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	4603      	mov	r3, r0
 80045a4:	460a      	mov	r2, r1
 80045a6:	71fb      	strb	r3, [r7, #7]
 80045a8:	4613      	mov	r3, r2
 80045aa:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure = {0};
 80045ac:	f107 030c 	add.w	r3, r7, #12
 80045b0:	2200      	movs	r2, #0
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	605a      	str	r2, [r3, #4]
 80045b6:	609a      	str	r2, [r3, #8]
 80045b8:	60da      	str	r2, [r3, #12]
 80045ba:	611a      	str	r2, [r3, #16]
  static BSP_EXTI_LineCallback button_callback[BUTTONn] = {BUTTON_SW1_EXTI_Callback, BUTTON_SW2_EXTI_Callback, BUTTON_SW3_EXTI_Callback};
  static uint32_t button_interrupt_priority[BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY, BSP_BUTTON_USER_IT_PRIORITY, BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t button_exti_line[BUTTONn] = {BUTTON_SW1_EXTI_LINE, BUTTON_SW2_EXTI_LINE, BUTTON_SW3_EXTI_LINE};

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80045bc:	79fb      	ldrb	r3, [r7, #7]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d103      	bne.n	80045ca <BSP_PB_Init+0x2e>
 80045c2:	2001      	movs	r0, #1
 80045c4:	f7ff ff63 	bl	800448e <LL_AHB2_GRP1_EnableClock>
 80045c8:	e00c      	b.n	80045e4 <BSP_PB_Init+0x48>
 80045ca:	79fb      	ldrb	r3, [r7, #7]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d103      	bne.n	80045d8 <BSP_PB_Init+0x3c>
 80045d0:	2010      	movs	r0, #16
 80045d2:	f7ff ff5c 	bl	800448e <LL_AHB2_GRP1_EnableClock>
 80045d6:	e005      	b.n	80045e4 <BSP_PB_Init+0x48>
 80045d8:	79fb      	ldrb	r3, [r7, #7]
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d102      	bne.n	80045e4 <BSP_PB_Init+0x48>
 80045de:	2001      	movs	r0, #1
 80045e0:	f7ff ff55 	bl	800448e <LL_AHB2_GRP1_EnableClock>

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 80045e4:	79fb      	ldrb	r3, [r7, #7]
 80045e6:	4a29      	ldr	r2, [pc, #164]	; (800468c <BSP_PB_Init+0xf0>)
 80045e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045ec:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80045ee:	2301      	movs	r3, #1
 80045f0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80045f2:	2302      	movs	r3, #2
 80045f4:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 80045f6:	79bb      	ldrb	r3, [r7, #6]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d10c      	bne.n	8004616 <BSP_PB_Init+0x7a>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80045fc:	2300      	movs	r3, #0
 80045fe:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8004600:	79fb      	ldrb	r3, [r7, #7]
 8004602:	4a23      	ldr	r2, [pc, #140]	; (8004690 <BSP_PB_Init+0xf4>)
 8004604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004608:	f107 020c 	add.w	r2, r7, #12
 800460c:	4611      	mov	r1, r2
 800460e:	4618      	mov	r0, r3
 8004610:	f000 fe5c 	bl	80052cc <HAL_GPIO_Init>
 8004614:	e035      	b.n	8004682 <BSP_PB_Init+0xe6>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8004616:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800461a:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800461c:	79fb      	ldrb	r3, [r7, #7]
 800461e:	4a1c      	ldr	r2, [pc, #112]	; (8004690 <BSP_PB_Init+0xf4>)
 8004620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004624:	f107 020c 	add.w	r2, r7, #12
 8004628:	4611      	mov	r1, r2
 800462a:	4618      	mov	r0, r3
 800462c:	f000 fe4e 	bl	80052cc <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], button_exti_line[Button]);
 8004630:	79fb      	ldrb	r3, [r7, #7]
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	4a17      	ldr	r2, [pc, #92]	; (8004694 <BSP_PB_Init+0xf8>)
 8004636:	441a      	add	r2, r3
 8004638:	79fb      	ldrb	r3, [r7, #7]
 800463a:	4917      	ldr	r1, [pc, #92]	; (8004698 <BSP_PB_Init+0xfc>)
 800463c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004640:	4619      	mov	r1, r3
 8004642:	4610      	mov	r0, r2
 8004644:	f000 fe0c 	bl	8005260 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button], HAL_EXTI_COMMON_CB_ID, button_callback[Button]);
 8004648:	79fb      	ldrb	r3, [r7, #7]
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	4a11      	ldr	r2, [pc, #68]	; (8004694 <BSP_PB_Init+0xf8>)
 800464e:	1898      	adds	r0, r3, r2
 8004650:	79fb      	ldrb	r3, [r7, #7]
 8004652:	4a12      	ldr	r2, [pc, #72]	; (800469c <BSP_PB_Init+0x100>)
 8004654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004658:	461a      	mov	r2, r3
 800465a:	2100      	movs	r1, #0
 800465c:	f000 fde6 	bl	800522c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
 8004660:	79fb      	ldrb	r3, [r7, #7]
 8004662:	4a0f      	ldr	r2, [pc, #60]	; (80046a0 <BSP_PB_Init+0x104>)
 8004664:	56d0      	ldrsb	r0, [r2, r3]
 8004666:	79fb      	ldrb	r3, [r7, #7]
 8004668:	4a0e      	ldr	r2, [pc, #56]	; (80046a4 <BSP_PB_Init+0x108>)
 800466a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800466e:	2200      	movs	r2, #0
 8004670:	4619      	mov	r1, r3
 8004672:	f000 fa78 	bl	8004b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8004676:	79fb      	ldrb	r3, [r7, #7]
 8004678:	4a09      	ldr	r2, [pc, #36]	; (80046a0 <BSP_PB_Init+0x104>)
 800467a:	56d3      	ldrsb	r3, [r2, r3]
 800467c:	4618      	mov	r0, r3
 800467e:	f000 fa8c 	bl	8004b9a <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8004682:	2300      	movs	r3, #0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3720      	adds	r7, #32
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	08010b94 	.word	0x08010b94
 8004690:	2000002c 	.word	0x2000002c
 8004694:	20000650 	.word	0x20000650
 8004698:	08010ba0 	.word	0x08010ba0
 800469c:	20000038 	.word	0x20000038
 80046a0:	08010b9c 	.word	0x08010b9c
 80046a4:	20000044 	.word	0x20000044

080046a8 <BSP_PB_Callback>:
  *           @arg BUTTON_SW2
  *           @arg BUTTON_SW3
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	4603      	mov	r3, r0
 80046b0:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80046b2:	bf00      	nop
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <BUTTON_SW1_EXTI_Callback>:
/**
  * @brief  Button SW1 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW1_EXTI_Callback(void)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW1);
 80046c2:	2000      	movs	r0, #0
 80046c4:	f7ff fff0 	bl	80046a8 <BSP_PB_Callback>
}
 80046c8:	bf00      	nop
 80046ca:	bd80      	pop	{r7, pc}

080046cc <BUTTON_SW2_EXTI_Callback>:
/**
  * @brief  Button SW2 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW2_EXTI_Callback(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW2);
 80046d0:	2001      	movs	r0, #1
 80046d2:	f7ff ffe9 	bl	80046a8 <BSP_PB_Callback>
}
 80046d6:	bf00      	nop
 80046d8:	bd80      	pop	{r7, pc}

080046da <BUTTON_SW3_EXTI_Callback>:
/**
  * @brief  Button SW3 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW3_EXTI_Callback(void)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW3);
 80046de:	2002      	movs	r0, #2
 80046e0:	f7ff ffe2 	bl	80046a8 <BSP_PB_Callback>
}
 80046e4:	bf00      	nop
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80046e8:	b480      	push	{r7}
 80046ea:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80046ec:	4b24      	ldr	r3, [pc, #144]	; (8004780 <SystemInit+0x98>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80046f2:	4b23      	ldr	r3, [pc, #140]	; (8004780 <SystemInit+0x98>)
 80046f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f8:	4a21      	ldr	r2, [pc, #132]	; (8004780 <SystemInit+0x98>)
 80046fa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800470c:	f043 0301 	orr.w	r3, r3, #1
 8004710:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8004712:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004716:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800471a:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800471c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004726:	4b17      	ldr	r3, [pc, #92]	; (8004784 <SystemInit+0x9c>)
 8004728:	4013      	ands	r3, r2
 800472a:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800472c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004730:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004734:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004738:	f023 0305 	bic.w	r3, r3, #5
 800473c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004744:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004748:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800474c:	f023 0301 	bic.w	r3, r3, #1
 8004750:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8004754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004758:	4a0b      	ldr	r2, [pc, #44]	; (8004788 <SystemInit+0xa0>)
 800475a:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800475c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004766:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800476a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800476c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004770:	2200      	movs	r2, #0
 8004772:	619a      	str	r2, [r3, #24]
}
 8004774:	bf00      	nop
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	e000ed00 	.word	0xe000ed00
 8004784:	faf6fefb 	.word	0xfaf6fefb
 8004788:	22041000 	.word	0x22041000

0800478c <LL_DBGMCU_EnableDBGSleepMode>:
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8004790:	4b05      	ldr	r3, [pc, #20]	; (80047a8 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	4a04      	ldr	r2, [pc, #16]	; (80047a8 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8004796:	f043 0301 	orr.w	r3, r3, #1
 800479a:	6053      	str	r3, [r2, #4]
}
 800479c:	bf00      	nop
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	e0042000 	.word	0xe0042000

080047ac <LL_DBGMCU_EnableDBGStopMode>:
{
 80047ac:	b480      	push	{r7}
 80047ae:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80047b0:	4b05      	ldr	r3, [pc, #20]	; (80047c8 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	4a04      	ldr	r2, [pc, #16]	; (80047c8 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 80047b6:	f043 0302 	orr.w	r3, r3, #2
 80047ba:	6053      	str	r3, [r2, #4]
}
 80047bc:	bf00      	nop
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	e0042000 	.word	0xe0042000

080047cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80047d2:	2300      	movs	r3, #0
 80047d4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80047d6:	4b0c      	ldr	r3, [pc, #48]	; (8004808 <HAL_Init+0x3c>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a0b      	ldr	r2, [pc, #44]	; (8004808 <HAL_Init+0x3c>)
 80047dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047e0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047e2:	2003      	movs	r0, #3
 80047e4:	f000 f9b4 	bl	8004b50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80047e8:	2000      	movs	r0, #0
 80047ea:	f000 f80f 	bl	800480c <HAL_InitTick>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d002      	beq.n	80047fa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	71fb      	strb	r3, [r7, #7]
 80047f8:	e001      	b.n	80047fe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80047fa:	f7fe f987 	bl	8002b0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80047fe:	79fb      	ldrb	r3, [r7, #7]
}
 8004800:	4618      	mov	r0, r3
 8004802:	3708      	adds	r7, #8
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	58004000 	.word	0x58004000

0800480c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004814:	2300      	movs	r3, #0
 8004816:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8004818:	4b17      	ldr	r3, [pc, #92]	; (8004878 <HAL_InitTick+0x6c>)
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d024      	beq.n	800486a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004820:	f001 ffe0 	bl	80067e4 <HAL_RCC_GetHCLKFreq>
 8004824:	4602      	mov	r2, r0
 8004826:	4b14      	ldr	r3, [pc, #80]	; (8004878 <HAL_InitTick+0x6c>)
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	4619      	mov	r1, r3
 800482c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004830:	fbb3 f3f1 	udiv	r3, r3, r1
 8004834:	fbb2 f3f3 	udiv	r3, r2, r3
 8004838:	4618      	mov	r0, r3
 800483a:	f000 f9ca 	bl	8004bd2 <HAL_SYSTICK_Config>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d10f      	bne.n	8004864 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b0f      	cmp	r3, #15
 8004848:	d809      	bhi.n	800485e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800484a:	2200      	movs	r2, #0
 800484c:	6879      	ldr	r1, [r7, #4]
 800484e:	f04f 30ff 	mov.w	r0, #4294967295
 8004852:	f000 f988 	bl	8004b66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004856:	4a09      	ldr	r2, [pc, #36]	; (800487c <HAL_InitTick+0x70>)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6013      	str	r3, [r2, #0]
 800485c:	e007      	b.n	800486e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	73fb      	strb	r3, [r7, #15]
 8004862:	e004      	b.n	800486e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	73fb      	strb	r3, [r7, #15]
 8004868:	e001      	b.n	800486e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800486e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004870:	4618      	mov	r0, r3
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	20000058 	.word	0x20000058
 800487c:	20000054 	.word	0x20000054

08004880 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004880:	b480      	push	{r7}
 8004882:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004884:	4b06      	ldr	r3, [pc, #24]	; (80048a0 <HAL_IncTick+0x20>)
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	461a      	mov	r2, r3
 800488a:	4b06      	ldr	r3, [pc, #24]	; (80048a4 <HAL_IncTick+0x24>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4413      	add	r3, r2
 8004890:	4a04      	ldr	r2, [pc, #16]	; (80048a4 <HAL_IncTick+0x24>)
 8004892:	6013      	str	r3, [r2, #0]
}
 8004894:	bf00      	nop
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	20000058 	.word	0x20000058
 80048a4:	20000668 	.word	0x20000668

080048a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048a8:	b480      	push	{r7}
 80048aa:	af00      	add	r7, sp, #0
  return uwTick;
 80048ac:	4b03      	ldr	r3, [pc, #12]	; (80048bc <HAL_GetTick+0x14>)
 80048ae:	681b      	ldr	r3, [r3, #0]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	20000668 	.word	0x20000668

080048c0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80048c0:	b480      	push	{r7}
 80048c2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80048c4:	4b03      	ldr	r3, [pc, #12]	; (80048d4 <HAL_GetTickPrio+0x14>)
 80048c6:	681b      	ldr	r3, [r3, #0]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	20000054 	.word	0x20000054

080048d8 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80048dc:	f7ff ff56 	bl	800478c <LL_DBGMCU_EnableDBGSleepMode>
}
 80048e0:	bf00      	nop
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80048e8:	f7ff ff60 	bl	80047ac <LL_DBGMCU_EnableDBGStopMode>
}
 80048ec:	bf00      	nop
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f003 0307 	and.w	r3, r3, #7
 80048fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004900:	4b0c      	ldr	r3, [pc, #48]	; (8004934 <__NVIC_SetPriorityGrouping+0x44>)
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800490c:	4013      	ands	r3, r2
 800490e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004918:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800491c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004922:	4a04      	ldr	r2, [pc, #16]	; (8004934 <__NVIC_SetPriorityGrouping+0x44>)
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	60d3      	str	r3, [r2, #12]
}
 8004928:	bf00      	nop
 800492a:	3714      	adds	r7, #20
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr
 8004934:	e000ed00 	.word	0xe000ed00

08004938 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004938:	b480      	push	{r7}
 800493a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800493c:	4b04      	ldr	r3, [pc, #16]	; (8004950 <__NVIC_GetPriorityGrouping+0x18>)
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	0a1b      	lsrs	r3, r3, #8
 8004942:	f003 0307 	and.w	r3, r3, #7
}
 8004946:	4618      	mov	r0, r3
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr
 8004950:	e000ed00 	.word	0xe000ed00

08004954 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	4603      	mov	r3, r0
 800495c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800495e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004962:	2b00      	cmp	r3, #0
 8004964:	db0b      	blt.n	800497e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004966:	79fb      	ldrb	r3, [r7, #7]
 8004968:	f003 021f 	and.w	r2, r3, #31
 800496c:	4907      	ldr	r1, [pc, #28]	; (800498c <__NVIC_EnableIRQ+0x38>)
 800496e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004972:	095b      	lsrs	r3, r3, #5
 8004974:	2001      	movs	r0, #1
 8004976:	fa00 f202 	lsl.w	r2, r0, r2
 800497a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800497e:	bf00      	nop
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	e000e100 	.word	0xe000e100

08004990 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	4603      	mov	r3, r0
 8004998:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800499a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	db12      	blt.n	80049c8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049a2:	79fb      	ldrb	r3, [r7, #7]
 80049a4:	f003 021f 	and.w	r2, r3, #31
 80049a8:	490a      	ldr	r1, [pc, #40]	; (80049d4 <__NVIC_DisableIRQ+0x44>)
 80049aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ae:	095b      	lsrs	r3, r3, #5
 80049b0:	2001      	movs	r0, #1
 80049b2:	fa00 f202 	lsl.w	r2, r0, r2
 80049b6:	3320      	adds	r3, #32
 80049b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80049bc:	f3bf 8f4f 	dsb	sy
}
 80049c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80049c2:	f3bf 8f6f 	isb	sy
}
 80049c6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr
 80049d4:	e000e100 	.word	0xe000e100

080049d8 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	4603      	mov	r3, r0
 80049e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	db0c      	blt.n	8004a04 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049ea:	79fb      	ldrb	r3, [r7, #7]
 80049ec:	f003 021f 	and.w	r2, r3, #31
 80049f0:	4907      	ldr	r1, [pc, #28]	; (8004a10 <__NVIC_SetPendingIRQ+0x38>)
 80049f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049f6:	095b      	lsrs	r3, r3, #5
 80049f8:	2001      	movs	r0, #1
 80049fa:	fa00 f202 	lsl.w	r2, r0, r2
 80049fe:	3340      	adds	r3, #64	; 0x40
 8004a00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr
 8004a10:	e000e100 	.word	0xe000e100

08004a14 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	db0c      	blt.n	8004a40 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a26:	79fb      	ldrb	r3, [r7, #7]
 8004a28:	f003 021f 	and.w	r2, r3, #31
 8004a2c:	4907      	ldr	r1, [pc, #28]	; (8004a4c <__NVIC_ClearPendingIRQ+0x38>)
 8004a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a32:	095b      	lsrs	r3, r3, #5
 8004a34:	2001      	movs	r0, #1
 8004a36:	fa00 f202 	lsl.w	r2, r0, r2
 8004a3a:	3360      	adds	r3, #96	; 0x60
 8004a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr
 8004a4c:	e000e100 	.word	0xe000e100

08004a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	4603      	mov	r3, r0
 8004a58:	6039      	str	r1, [r7, #0]
 8004a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	db0a      	blt.n	8004a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	b2da      	uxtb	r2, r3
 8004a68:	490c      	ldr	r1, [pc, #48]	; (8004a9c <__NVIC_SetPriority+0x4c>)
 8004a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a6e:	0112      	lsls	r2, r2, #4
 8004a70:	b2d2      	uxtb	r2, r2
 8004a72:	440b      	add	r3, r1
 8004a74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a78:	e00a      	b.n	8004a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	b2da      	uxtb	r2, r3
 8004a7e:	4908      	ldr	r1, [pc, #32]	; (8004aa0 <__NVIC_SetPriority+0x50>)
 8004a80:	79fb      	ldrb	r3, [r7, #7]
 8004a82:	f003 030f 	and.w	r3, r3, #15
 8004a86:	3b04      	subs	r3, #4
 8004a88:	0112      	lsls	r2, r2, #4
 8004a8a:	b2d2      	uxtb	r2, r2
 8004a8c:	440b      	add	r3, r1
 8004a8e:	761a      	strb	r2, [r3, #24]
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr
 8004a9c:	e000e100 	.word	0xe000e100
 8004aa0:	e000ed00 	.word	0xe000ed00

08004aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b089      	sub	sp, #36	; 0x24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f003 0307 	and.w	r3, r3, #7
 8004ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	f1c3 0307 	rsb	r3, r3, #7
 8004abe:	2b04      	cmp	r3, #4
 8004ac0:	bf28      	it	cs
 8004ac2:	2304      	movcs	r3, #4
 8004ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	3304      	adds	r3, #4
 8004aca:	2b06      	cmp	r3, #6
 8004acc:	d902      	bls.n	8004ad4 <NVIC_EncodePriority+0x30>
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	3b03      	subs	r3, #3
 8004ad2:	e000      	b.n	8004ad6 <NVIC_EncodePriority+0x32>
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae2:	43da      	mvns	r2, r3
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	401a      	ands	r2, r3
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004aec:	f04f 31ff 	mov.w	r1, #4294967295
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	fa01 f303 	lsl.w	r3, r1, r3
 8004af6:	43d9      	mvns	r1, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004afc:	4313      	orrs	r3, r2
         );
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3724      	adds	r7, #36	; 0x24
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
	...

08004b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	3b01      	subs	r3, #1
 8004b18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b1c:	d301      	bcc.n	8004b22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e00f      	b.n	8004b42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b22:	4a0a      	ldr	r2, [pc, #40]	; (8004b4c <SysTick_Config+0x40>)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	3b01      	subs	r3, #1
 8004b28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b2a:	210f      	movs	r1, #15
 8004b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b30:	f7ff ff8e 	bl	8004a50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b34:	4b05      	ldr	r3, [pc, #20]	; (8004b4c <SysTick_Config+0x40>)
 8004b36:	2200      	movs	r2, #0
 8004b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b3a:	4b04      	ldr	r3, [pc, #16]	; (8004b4c <SysTick_Config+0x40>)
 8004b3c:	2207      	movs	r2, #7
 8004b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3708      	adds	r7, #8
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	e000e010 	.word	0xe000e010

08004b50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f7ff fec9 	bl	80048f0 <__NVIC_SetPriorityGrouping>
}
 8004b5e:	bf00      	nop
 8004b60:	3708      	adds	r7, #8
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b086      	sub	sp, #24
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	60b9      	str	r1, [r7, #8]
 8004b70:	607a      	str	r2, [r7, #4]
 8004b72:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b74:	f7ff fee0 	bl	8004938 <__NVIC_GetPriorityGrouping>
 8004b78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	68b9      	ldr	r1, [r7, #8]
 8004b7e:	6978      	ldr	r0, [r7, #20]
 8004b80:	f7ff ff90 	bl	8004aa4 <NVIC_EncodePriority>
 8004b84:	4602      	mov	r2, r0
 8004b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b8a:	4611      	mov	r1, r2
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7ff ff5f 	bl	8004a50 <__NVIC_SetPriority>
}
 8004b92:	bf00      	nop
 8004b94:	3718      	adds	r7, #24
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b082      	sub	sp, #8
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7ff fed3 	bl	8004954 <__NVIC_EnableIRQ>
}
 8004bae:	bf00      	nop
 8004bb0:	3708      	adds	r7, #8
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b082      	sub	sp, #8
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7ff fee3 	bl	8004990 <__NVIC_DisableIRQ>
}
 8004bca:	bf00      	nop
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b082      	sub	sp, #8
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f7ff ff96 	bl	8004b0c <SysTick_Config>
 8004be0:	4603      	mov	r3, r0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3708      	adds	r7, #8
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b082      	sub	sp, #8
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8004bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7ff feed 	bl	80049d8 <__NVIC_SetPendingIRQ>
}
 8004bfe:	bf00      	nop
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b082      	sub	sp, #8
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7ff fefd 	bl	8004a14 <__NVIC_ClearPendingIRQ>
}
 8004c1a:	bf00      	nop
 8004c1c:	3708      	adds	r7, #8
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
	...

08004c24 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e078      	b.n	8004d28 <HAL_DMA_Init+0x104>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	4b3c      	ldr	r3, [pc, #240]	; (8004d30 <HAL_DMA_Init+0x10c>)
 8004c3e:	4413      	add	r3, r2
 8004c40:	4a3c      	ldr	r2, [pc, #240]	; (8004d34 <HAL_DMA_Init+0x110>)
 8004c42:	fba2 2303 	umull	r2, r3, r2, r3
 8004c46:	091b      	lsrs	r3, r3, #4
 8004c48:	009a      	lsls	r2, r3, #2
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a39      	ldr	r2, [pc, #228]	; (8004d38 <HAL_DMA_Init+0x114>)
 8004c52:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2202      	movs	r2, #2
 8004c58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004c78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 fa6e 	bl	8005188 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cb4:	d102      	bne.n	8004cbc <HAL_DMA_Init+0x98>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685a      	ldr	r2, [r3, #4]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cc4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004cc8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004cd2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d010      	beq.n	8004cfe <HAL_DMA_Init+0xda>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	2b04      	cmp	r3, #4
 8004ce2:	d80c      	bhi.n	8004cfe <HAL_DMA_Init+0xda>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 fa7b 	bl	80051e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cee:	2200      	movs	r2, #0
 8004cf0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004cfa:	605a      	str	r2, [r3, #4]
 8004cfc:	e008      	b.n	8004d10 <HAL_DMA_Init+0xec>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	bffdfff8 	.word	0xbffdfff8
 8004d34:	cccccccd 	.word	0xcccccccd
 8004d38:	40020000 	.word	0x40020000

08004d3c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
 8004d48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d101      	bne.n	8004d5c <HAL_DMA_Start_IT+0x20>
 8004d58:	2302      	movs	r3, #2
 8004d5a:	e066      	b.n	8004e2a <HAL_DMA_Start_IT+0xee>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d155      	bne.n	8004e1c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2202      	movs	r2, #2
 8004d74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f022 0201 	bic.w	r2, r2, #1
 8004d8c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	68b9      	ldr	r1, [r7, #8]
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f000 f9b9 	bl	800510c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d008      	beq.n	8004db4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f042 020e 	orr.w	r2, r2, #14
 8004db0:	601a      	str	r2, [r3, #0]
 8004db2:	e00f      	b.n	8004dd4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 0204 	bic.w	r2, r2, #4
 8004dc2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f042 020a 	orr.w	r2, r2, #10
 8004dd2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d007      	beq.n	8004df2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004df0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d007      	beq.n	8004e0a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e08:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f042 0201 	orr.w	r2, r2, #1
 8004e18:	601a      	str	r2, [r3, #0]
 8004e1a:	e005      	b.n	8004e28 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004e24:	2302      	movs	r3, #2
 8004e26:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3718      	adds	r7, #24
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004e32:	b480      	push	{r7}
 8004e34:	b083      	sub	sp, #12
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d101      	bne.n	8004e44 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e04f      	b.n	8004ee4 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d008      	beq.n	8004e62 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2204      	movs	r2, #4
 8004e54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e040      	b.n	8004ee4 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f022 020e 	bic.w	r2, r2, #14
 8004e70:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e80:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 0201 	bic.w	r2, r2, #1
 8004e90:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e96:	f003 021c 	and.w	r2, r3, #28
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	2101      	movs	r1, #1
 8004ea0:	fa01 f202 	lsl.w	r2, r1, r2
 8004ea4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004eae:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00c      	beq.n	8004ed2 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ec6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004ed0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d005      	beq.n	8004f14 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2204      	movs	r2, #4
 8004f0c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	73fb      	strb	r3, [r7, #15]
 8004f12:	e047      	b.n	8004fa4 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f022 020e 	bic.w	r2, r2, #14
 8004f22:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f022 0201 	bic.w	r2, r2, #1
 8004f32:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f48:	f003 021c 	and.w	r2, r3, #28
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f50:	2101      	movs	r1, #1
 8004f52:	fa01 f202 	lsl.w	r2, r1, r2
 8004f56:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004f60:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00c      	beq.n	8004f84 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f78:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004f82:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d003      	beq.n	8004fa4 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	4798      	blx	r3
    }
  }
  return status;
 8004fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b084      	sub	sp, #16
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fca:	f003 031c 	and.w	r3, r3, #28
 8004fce:	2204      	movs	r2, #4
 8004fd0:	409a      	lsls	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d026      	beq.n	8005028 <HAL_DMA_IRQHandler+0x7a>
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	f003 0304 	and.w	r3, r3, #4
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d021      	beq.n	8005028 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0320 	and.w	r3, r3, #32
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d107      	bne.n	8005002 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f022 0204 	bic.w	r2, r2, #4
 8005000:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005006:	f003 021c 	and.w	r2, r3, #28
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500e:	2104      	movs	r1, #4
 8005010:	fa01 f202 	lsl.w	r2, r1, r2
 8005014:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501a:	2b00      	cmp	r3, #0
 800501c:	d071      	beq.n	8005102 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005026:	e06c      	b.n	8005102 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502c:	f003 031c 	and.w	r3, r3, #28
 8005030:	2202      	movs	r2, #2
 8005032:	409a      	lsls	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	4013      	ands	r3, r2
 8005038:	2b00      	cmp	r3, #0
 800503a:	d02e      	beq.n	800509a <HAL_DMA_IRQHandler+0xec>
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	2b00      	cmp	r3, #0
 8005044:	d029      	beq.n	800509a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0320 	and.w	r3, r3, #32
 8005050:	2b00      	cmp	r3, #0
 8005052:	d10b      	bne.n	800506c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f022 020a 	bic.w	r2, r2, #10
 8005062:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005070:	f003 021c 	and.w	r2, r3, #28
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005078:	2102      	movs	r1, #2
 800507a:	fa01 f202 	lsl.w	r2, r1, r2
 800507e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508c:	2b00      	cmp	r3, #0
 800508e:	d038      	beq.n	8005102 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005098:	e033      	b.n	8005102 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509e:	f003 031c 	and.w	r3, r3, #28
 80050a2:	2208      	movs	r2, #8
 80050a4:	409a      	lsls	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	4013      	ands	r3, r2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d02a      	beq.n	8005104 <HAL_DMA_IRQHandler+0x156>
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	f003 0308 	and.w	r3, r3, #8
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d025      	beq.n	8005104 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f022 020e 	bic.w	r2, r2, #14
 80050c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050cc:	f003 021c 	and.w	r2, r3, #28
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d4:	2101      	movs	r1, #1
 80050d6:	fa01 f202 	lsl.w	r2, r1, r2
 80050da:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2201      	movs	r2, #1
 80050e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d004      	beq.n	8005104 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005102:	bf00      	nop
 8005104:	bf00      	nop
}
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
 8005118:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005122:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005128:	2b00      	cmp	r3, #0
 800512a:	d004      	beq.n	8005136 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005134:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800513a:	f003 021c 	and.w	r2, r3, #28
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005142:	2101      	movs	r1, #1
 8005144:	fa01 f202 	lsl.w	r2, r1, r2
 8005148:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	683a      	ldr	r2, [r7, #0]
 8005150:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	2b10      	cmp	r3, #16
 8005158:	d108      	bne.n	800516c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800516a:	e007      	b.n	800517c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	60da      	str	r2, [r3, #12]
}
 800517c:	bf00      	nop
 800517e:	3714      	adds	r7, #20
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005194:	089b      	lsrs	r3, r3, #2
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800519c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	6493      	str	r3, [r2, #72]	; 0x48
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	3b08      	subs	r3, #8
 80051ac:	4a0a      	ldr	r2, [pc, #40]	; (80051d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80051ae:	fba2 2303 	umull	r2, r3, r2, r3
 80051b2:	091b      	lsrs	r3, r3, #4
 80051b4:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a08      	ldr	r2, [pc, #32]	; (80051dc <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80051ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f003 031f 	and.w	r3, r3, #31
 80051c2:	2201      	movs	r2, #1
 80051c4:	409a      	lsls	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80051ca:	bf00      	nop
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	cccccccd 	.word	0xcccccccd
 80051dc:	40020880 	.word	0x40020880

080051e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051f0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	4b0b      	ldr	r3, [pc, #44]	; (8005224 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80051f6:	4413      	add	r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	461a      	mov	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a09      	ldr	r2, [pc, #36]	; (8005228 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8005204:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	3b01      	subs	r3, #1
 800520a:	f003 0303 	and.w	r3, r3, #3
 800520e:	2201      	movs	r2, #1
 8005210:	409a      	lsls	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005216:	bf00      	nop
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	1000823f 	.word	0x1000823f
 8005228:	40020940 	.word	0x40020940

0800522c <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 800522c:	b480      	push	{r7}
 800522e:	b087      	sub	sp, #28
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	460b      	mov	r3, r1
 8005236:	607a      	str	r2, [r7, #4]
 8005238:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800523a:	2300      	movs	r3, #0
 800523c:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800523e:	7afb      	ldrb	r3, [r7, #11]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d103      	bne.n	800524c <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	605a      	str	r2, [r3, #4]
      break;
 800524a:	e002      	b.n	8005252 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	75fb      	strb	r3, [r7, #23]
      break;
 8005250:	bf00      	nop
  }

  return status;
 8005252:	7dfb      	ldrb	r3, [r7, #23]
}
 8005254:	4618      	mov	r0, r3
 8005256:	371c      	adds	r7, #28
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d101      	bne.n	8005274 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e003      	b.n	800527c <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	683a      	ldr	r2, [r7, #0]
 8005278:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800527a:	2300      	movs	r3, #0
  }
}
 800527c:	4618      	mov	r0, r3
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 8005288:	b480      	push	{r7}
 800528a:	b087      	sub	sp, #28
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	0c1b      	lsrs	r3, r3, #16
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 031f 	and.w	r3, r3, #31
 80052a4:	2201      	movs	r2, #1
 80052a6:	fa02 f303 	lsl.w	r3, r2, r3
 80052aa:	613b      	str	r3, [r7, #16]

  regaddr = (&EXTI->SWIER1 + (EXTI_CONFIG_OFFSET * offset));
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	015b      	lsls	r3, r3, #5
 80052b0:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 80052b4:	f603 0308 	addw	r3, r3, #2056	; 0x808
 80052b8:	60fb      	str	r3, [r7, #12]
  *regaddr = maskline;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	601a      	str	r2, [r3, #0]
}
 80052c0:	bf00      	nop
 80052c2:	371c      	adds	r7, #28
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b087      	sub	sp, #28
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80052d6:	2300      	movs	r3, #0
 80052d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80052da:	e146      	b.n	800556a <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	2101      	movs	r1, #1
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	fa01 f303 	lsl.w	r3, r1, r3
 80052e8:	4013      	ands	r3, r2
 80052ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f000 8138 	beq.w	8005564 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f003 0303 	and.w	r3, r3, #3
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d005      	beq.n	800530c <HAL_GPIO_Init+0x40>
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f003 0303 	and.w	r3, r3, #3
 8005308:	2b02      	cmp	r3, #2
 800530a:	d130      	bne.n	800536e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	005b      	lsls	r3, r3, #1
 8005316:	2203      	movs	r2, #3
 8005318:	fa02 f303 	lsl.w	r3, r2, r3
 800531c:	43db      	mvns	r3, r3
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	4013      	ands	r3, r2
 8005322:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	68da      	ldr	r2, [r3, #12]
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	005b      	lsls	r3, r3, #1
 800532c:	fa02 f303 	lsl.w	r3, r2, r3
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	4313      	orrs	r3, r2
 8005334:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005342:	2201      	movs	r2, #1
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	fa02 f303 	lsl.w	r3, r2, r3
 800534a:	43db      	mvns	r3, r3
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	4013      	ands	r3, r2
 8005350:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	091b      	lsrs	r3, r3, #4
 8005358:	f003 0201 	and.w	r2, r3, #1
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	fa02 f303 	lsl.w	r3, r2, r3
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	4313      	orrs	r3, r2
 8005366:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f003 0303 	and.w	r3, r3, #3
 8005376:	2b03      	cmp	r3, #3
 8005378:	d017      	beq.n	80053aa <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	005b      	lsls	r3, r3, #1
 8005384:	2203      	movs	r2, #3
 8005386:	fa02 f303 	lsl.w	r3, r2, r3
 800538a:	43db      	mvns	r3, r3
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	4013      	ands	r3, r2
 8005390:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	689a      	ldr	r2, [r3, #8]
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	005b      	lsls	r3, r3, #1
 800539a:	fa02 f303 	lsl.w	r3, r2, r3
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f003 0303 	and.w	r3, r3, #3
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d123      	bne.n	80053fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	08da      	lsrs	r2, r3, #3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	3208      	adds	r2, #8
 80053be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f003 0307 	and.w	r3, r3, #7
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	220f      	movs	r2, #15
 80053ce:	fa02 f303 	lsl.w	r3, r2, r3
 80053d2:	43db      	mvns	r3, r3
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	4013      	ands	r3, r2
 80053d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	691a      	ldr	r2, [r3, #16]
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f003 0307 	and.w	r3, r3, #7
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	08da      	lsrs	r2, r3, #3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	3208      	adds	r2, #8
 80053f8:	6939      	ldr	r1, [r7, #16]
 80053fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	005b      	lsls	r3, r3, #1
 8005408:	2203      	movs	r2, #3
 800540a:	fa02 f303 	lsl.w	r3, r2, r3
 800540e:	43db      	mvns	r3, r3
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	4013      	ands	r3, r2
 8005414:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f003 0203 	and.w	r2, r3, #3
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	005b      	lsls	r3, r3, #1
 8005422:	fa02 f303 	lsl.w	r3, r2, r3
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	4313      	orrs	r3, r2
 800542a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800543a:	2b00      	cmp	r3, #0
 800543c:	f000 8092 	beq.w	8005564 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005440:	4a51      	ldr	r2, [pc, #324]	; (8005588 <HAL_GPIO_Init+0x2bc>)
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	089b      	lsrs	r3, r3, #2
 8005446:	3302      	adds	r3, #2
 8005448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800544c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f003 0303 	and.w	r3, r3, #3
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	220f      	movs	r2, #15
 8005458:	fa02 f303 	lsl.w	r3, r2, r3
 800545c:	43db      	mvns	r3, r3
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	4013      	ands	r3, r2
 8005462:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800546a:	d013      	beq.n	8005494 <HAL_GPIO_Init+0x1c8>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a47      	ldr	r2, [pc, #284]	; (800558c <HAL_GPIO_Init+0x2c0>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d00d      	beq.n	8005490 <HAL_GPIO_Init+0x1c4>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a46      	ldr	r2, [pc, #280]	; (8005590 <HAL_GPIO_Init+0x2c4>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d007      	beq.n	800548c <HAL_GPIO_Init+0x1c0>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a45      	ldr	r2, [pc, #276]	; (8005594 <HAL_GPIO_Init+0x2c8>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d101      	bne.n	8005488 <HAL_GPIO_Init+0x1bc>
 8005484:	2304      	movs	r3, #4
 8005486:	e006      	b.n	8005496 <HAL_GPIO_Init+0x1ca>
 8005488:	2307      	movs	r3, #7
 800548a:	e004      	b.n	8005496 <HAL_GPIO_Init+0x1ca>
 800548c:	2302      	movs	r3, #2
 800548e:	e002      	b.n	8005496 <HAL_GPIO_Init+0x1ca>
 8005490:	2301      	movs	r3, #1
 8005492:	e000      	b.n	8005496 <HAL_GPIO_Init+0x1ca>
 8005494:	2300      	movs	r3, #0
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	f002 0203 	and.w	r2, r2, #3
 800549c:	0092      	lsls	r2, r2, #2
 800549e:	4093      	lsls	r3, r2
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80054a6:	4938      	ldr	r1, [pc, #224]	; (8005588 <HAL_GPIO_Init+0x2bc>)
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	089b      	lsrs	r3, r3, #2
 80054ac:	3302      	adds	r3, #2
 80054ae:	693a      	ldr	r2, [r7, #16]
 80054b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80054b4:	4b38      	ldr	r3, [pc, #224]	; (8005598 <HAL_GPIO_Init+0x2cc>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	43db      	mvns	r3, r3
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	4013      	ands	r3, r2
 80054c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d003      	beq.n	80054d8 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80054d8:	4a2f      	ldr	r2, [pc, #188]	; (8005598 <HAL_GPIO_Init+0x2cc>)
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80054de:	4b2e      	ldr	r3, [pc, #184]	; (8005598 <HAL_GPIO_Init+0x2cc>)
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	43db      	mvns	r3, r3
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	4013      	ands	r3, r2
 80054ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d003      	beq.n	8005502 <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	4313      	orrs	r3, r2
 8005500:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005502:	4a25      	ldr	r2, [pc, #148]	; (8005598 <HAL_GPIO_Init+0x2cc>)
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005508:	4b23      	ldr	r3, [pc, #140]	; (8005598 <HAL_GPIO_Init+0x2cc>)
 800550a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800550e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	43db      	mvns	r3, r3
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	4013      	ands	r3, r2
 8005518:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d003      	beq.n	800552e <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	4313      	orrs	r3, r2
 800552c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800552e:	4a1a      	ldr	r2, [pc, #104]	; (8005598 <HAL_GPIO_Init+0x2cc>)
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8005536:	4b18      	ldr	r3, [pc, #96]	; (8005598 <HAL_GPIO_Init+0x2cc>)
 8005538:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800553c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	43db      	mvns	r3, r3
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	4013      	ands	r3, r2
 8005546:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d003      	beq.n	800555c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	4313      	orrs	r3, r2
 800555a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800555c:	4a0e      	ldr	r2, [pc, #56]	; (8005598 <HAL_GPIO_Init+0x2cc>)
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	3301      	adds	r3, #1
 8005568:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	fa22 f303 	lsr.w	r3, r2, r3
 8005574:	2b00      	cmp	r3, #0
 8005576:	f47f aeb1 	bne.w	80052dc <HAL_GPIO_Init+0x10>
  }
}
 800557a:	bf00      	nop
 800557c:	bf00      	nop
 800557e:	371c      	adds	r7, #28
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	40010000 	.word	0x40010000
 800558c:	48000400 	.word	0x48000400
 8005590:	48000800 	.word	0x48000800
 8005594:	48001000 	.word	0x48001000
 8005598:	58000800 	.word	0x58000800

0800559c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	460b      	mov	r3, r1
 80055a6:	807b      	strh	r3, [r7, #2]
 80055a8:	4613      	mov	r3, r2
 80055aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80055ac:	787b      	ldrb	r3, [r7, #1]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d003      	beq.n	80055ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80055b2:	887a      	ldrh	r2, [r7, #2]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80055b8:	e002      	b.n	80055c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80055ba:	887a      	ldrh	r2, [r7, #2]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	4603      	mov	r3, r0
 80055d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80055d6:	4b08      	ldr	r3, [pc, #32]	; (80055f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055d8:	68da      	ldr	r2, [r3, #12]
 80055da:	88fb      	ldrh	r3, [r7, #6]
 80055dc:	4013      	ands	r3, r2
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d006      	beq.n	80055f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80055e2:	4a05      	ldr	r2, [pc, #20]	; (80055f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055e4:	88fb      	ldrh	r3, [r7, #6]
 80055e6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80055e8:	88fb      	ldrh	r3, [r7, #6]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7fc f852 	bl	8001694 <HAL_GPIO_EXTI_Callback>
  }
}
 80055f0:	bf00      	nop
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	58000800 	.word	0x58000800

080055fc <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8005602:	4b0a      	ldr	r3, [pc, #40]	; (800562c <HAL_HSEM_IRQHandler+0x30>)
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8005608:	4b08      	ldr	r3, [pc, #32]	; (800562c <HAL_HSEM_IRQHandler+0x30>)
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	43db      	mvns	r3, r3
 8005610:	4906      	ldr	r1, [pc, #24]	; (800562c <HAL_HSEM_IRQHandler+0x30>)
 8005612:	4013      	ands	r3, r2
 8005614:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8005616:	4a05      	ldr	r2, [pc, #20]	; (800562c <HAL_HSEM_IRQHandler+0x30>)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 f807 	bl	8005630 <HAL_HSEM_FreeCallback>
}
 8005622:	bf00      	nop
 8005624:	3708      	adds	r7, #8
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	58001500 	.word	0x58001500

08005630 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800564c:	2300      	movs	r3, #0
 800564e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d01e      	beq.n	8005694 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8005656:	4b13      	ldr	r3, [pc, #76]	; (80056a4 <HAL_IPCC_Init+0x60>)
 8005658:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d102      	bne.n	800566c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f7fd fa60 	bl	8002b2c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800566c:	68b8      	ldr	r0, [r7, #8]
 800566e:	f000 f85b 	bl	8005728 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 f82c 	bl	80056dc <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8005692:	e001      	b.n	8005698 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8005698:	7bfb      	ldrb	r3, [r7, #15]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	58000c00 	.word	0x58000c00

080056a8 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	4613      	mov	r3, r2
 80056b4:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80056b6:	bf00      	nop
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b085      	sub	sp, #20
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	60f8      	str	r0, [r7, #12]
 80056ca:	60b9      	str	r1, [r7, #8]
 80056cc:	4613      	mov	r3, r2
 80056ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80056d0:	bf00      	nop
 80056d2:	3714      	adds	r7, #20
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80056e4:	2300      	movs	r3, #0
 80056e6:	60fb      	str	r3, [r7, #12]
 80056e8:	e00f      	b.n	800570a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4413      	add	r3, r2
 80056f2:	4a0b      	ldr	r2, [pc, #44]	; (8005720 <IPCC_SetDefaultCallbacks+0x44>)
 80056f4:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	3306      	adds	r3, #6
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4413      	add	r3, r2
 8005700:	4a08      	ldr	r2, [pc, #32]	; (8005724 <IPCC_SetDefaultCallbacks+0x48>)
 8005702:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	3301      	adds	r3, #1
 8005708:	60fb      	str	r3, [r7, #12]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2b05      	cmp	r3, #5
 800570e:	d9ec      	bls.n	80056ea <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8005710:	bf00      	nop
 8005712:	bf00      	nop
 8005714:	3714      	adds	r7, #20
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	080056a9 	.word	0x080056a9
 8005724:	080056c3 	.word	0x080056c3

08005728 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 800573c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	223f      	movs	r2, #63	; 0x3f
 8005742:	609a      	str	r2, [r3, #8]
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005750:	b480      	push	{r7}
 8005752:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005754:	4b05      	ldr	r3, [pc, #20]	; (800576c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a04      	ldr	r2, [pc, #16]	; (800576c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800575a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800575e:	6013      	str	r3, [r2, #0]
}
 8005760:	bf00      	nop
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	58000400 	.word	0x58000400

08005770 <LL_PWR_EnableSRAM2Retention>:
{
 8005770:	b480      	push	{r7}
 8005772:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 8005774:	4b05      	ldr	r3, [pc, #20]	; (800578c <LL_PWR_EnableSRAM2Retention+0x1c>)
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	4a04      	ldr	r2, [pc, #16]	; (800578c <LL_PWR_EnableSRAM2Retention+0x1c>)
 800577a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800577e:	6093      	str	r3, [r2, #8]
}
 8005780:	bf00      	nop
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	58000400 	.word	0x58000400

08005790 <HAL_PWREx_EnableSRAMRetention>:
  * @note   On devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx retention is extended
  *         to SRAM1, SRAM2a and SRAM2b.
  * @retval None
  */
void HAL_PWREx_EnableSRAMRetention(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	af00      	add	r7, sp, #0
  LL_PWR_EnableSRAM2Retention();
 8005794:	f7ff ffec 	bl	8005770 <LL_PWR_EnableSRAM2Retention>
}
 8005798:	bf00      	nop
 800579a:	bd80      	pop	{r7, pc}

0800579c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800579c:	b480      	push	{r7}
 800579e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80057a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057ae:	d101      	bne.n	80057b4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80057b0:	2301      	movs	r3, #1
 80057b2:	e000      	b.n	80057b6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <LL_RCC_HSE_Enable>:
{
 80057c0:	b480      	push	{r7}
 80057c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80057c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057d2:	6013      	str	r3, [r2, #0]
}
 80057d4:	bf00      	nop
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <LL_RCC_HSE_Disable>:
{
 80057de:	b480      	push	{r7}
 80057e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80057e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057f0:	6013      	str	r3, [r2, #0]
}
 80057f2:	bf00      	nop
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <LL_RCC_HSE_IsReady>:
{
 80057fc:	b480      	push	{r7}
 80057fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800580a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800580e:	d101      	bne.n	8005814 <LL_RCC_HSE_IsReady+0x18>
 8005810:	2301      	movs	r3, #1
 8005812:	e000      	b.n	8005816 <LL_RCC_HSE_IsReady+0x1a>
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <LL_RCC_HSI_Enable>:
{
 8005820:	b480      	push	{r7}
 8005822:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005824:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800582e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005832:	6013      	str	r3, [r2, #0]
}
 8005834:	bf00      	nop
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <LL_RCC_HSI_Disable>:
{
 800583e:	b480      	push	{r7}
 8005840:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800584c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005850:	6013      	str	r3, [r2, #0]
}
 8005852:	bf00      	nop
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <LL_RCC_HSI_IsReady>:
{
 800585c:	b480      	push	{r7}
 800585e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800586a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800586e:	d101      	bne.n	8005874 <LL_RCC_HSI_IsReady+0x18>
 8005870:	2301      	movs	r3, #1
 8005872:	e000      	b.n	8005876 <LL_RCC_HSI_IsReady+0x1a>
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	061b      	lsls	r3, r3, #24
 8005896:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800589a:	4313      	orrs	r3, r2
 800589c:	604b      	str	r3, [r1, #4]
}
 800589e:	bf00      	nop
 80058a0:	370c      	adds	r7, #12
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr

080058aa <LL_RCC_LSE_Enable>:
{
 80058aa:	b480      	push	{r7}
 80058ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80058ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058ba:	f043 0301 	orr.w	r3, r3, #1
 80058be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80058c2:	bf00      	nop
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <LL_RCC_LSE_Disable>:
{
 80058cc:	b480      	push	{r7}
 80058ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80058d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058dc:	f023 0301 	bic.w	r3, r3, #1
 80058e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80058e4:	bf00      	nop
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <LL_RCC_LSE_EnableBypass>:
{
 80058ee:	b480      	push	{r7}
 80058f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80058f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058fe:	f043 0304 	orr.w	r3, r3, #4
 8005902:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005906:	bf00      	nop
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <LL_RCC_LSE_DisableBypass>:
{
 8005910:	b480      	push	{r7}
 8005912:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800591c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005920:	f023 0304 	bic.w	r3, r3, #4
 8005924:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005928:	bf00      	nop
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr

08005932 <LL_RCC_LSE_IsReady>:
{
 8005932:	b480      	push	{r7}
 8005934:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800593a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b02      	cmp	r3, #2
 8005944:	d101      	bne.n	800594a <LL_RCC_LSE_IsReady+0x18>
 8005946:	2301      	movs	r3, #1
 8005948:	e000      	b.n	800594c <LL_RCC_LSE_IsReady+0x1a>
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr

08005956 <LL_RCC_LSI1_Enable>:
{
 8005956:	b480      	push	{r7}
 8005958:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800595a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800595e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005962:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005966:	f043 0301 	orr.w	r3, r3, #1
 800596a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800596e:	bf00      	nop
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <LL_RCC_LSI1_Disable>:
{
 8005978:	b480      	push	{r7}
 800597a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800597c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005980:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005984:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005988:	f023 0301 	bic.w	r3, r3, #1
 800598c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005990:	bf00      	nop
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <LL_RCC_LSI1_IsReady>:
{
 800599a:	b480      	push	{r7}
 800599c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800599e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d101      	bne.n	80059b2 <LL_RCC_LSI1_IsReady+0x18>
 80059ae:	2301      	movs	r3, #1
 80059b0:	e000      	b.n	80059b4 <LL_RCC_LSI1_IsReady+0x1a>
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr

080059be <LL_RCC_LSI2_Enable>:
{
 80059be:	b480      	push	{r7}
 80059c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80059c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059ce:	f043 0304 	orr.w	r3, r3, #4
 80059d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80059d6:	bf00      	nop
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <LL_RCC_LSI2_Disable>:
{
 80059e0:	b480      	push	{r7}
 80059e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80059e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059f0:	f023 0304 	bic.w	r3, r3, #4
 80059f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80059f8:	bf00      	nop
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <LL_RCC_LSI2_IsReady>:
{
 8005a02:	b480      	push	{r7}
 8005a04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8005a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a0e:	f003 0308 	and.w	r3, r3, #8
 8005a12:	2b08      	cmp	r3, #8
 8005a14:	d101      	bne.n	8005a1a <LL_RCC_LSI2_IsReady+0x18>
 8005a16:	2301      	movs	r3, #1
 8005a18:	e000      	b.n	8005a1c <LL_RCC_LSI2_IsReady+0x1a>
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <LL_RCC_LSI2_SetTrimming>:
{
 8005a26:	b480      	push	{r7}
 8005a28:	b083      	sub	sp, #12
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a36:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	021b      	lsls	r3, r3, #8
 8005a3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a42:	4313      	orrs	r3, r2
 8005a44:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <LL_RCC_MSI_Enable>:
{
 8005a54:	b480      	push	{r7}
 8005a56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a62:	f043 0301 	orr.w	r3, r3, #1
 8005a66:	6013      	str	r3, [r2, #0]
}
 8005a68:	bf00      	nop
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <LL_RCC_MSI_Disable>:
{
 8005a72:	b480      	push	{r7}
 8005a74:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a80:	f023 0301 	bic.w	r3, r3, #1
 8005a84:	6013      	str	r3, [r2, #0]
}
 8005a86:	bf00      	nop
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <LL_RCC_MSI_IsReady>:
{
 8005a90:	b480      	push	{r7}
 8005a92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005a94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d101      	bne.n	8005aa6 <LL_RCC_MSI_IsReady+0x16>
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e000      	b.n	8005aa8 <LL_RCC_MSI_IsReady+0x18>
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr

08005ab2 <LL_RCC_MSI_SetRange>:
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b083      	sub	sp, #12
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005aba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ac4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	600b      	str	r3, [r1, #0]
}
 8005ace:	bf00      	nop
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr

08005ada <LL_RCC_MSI_GetRange>:
{
 8005ada:	b480      	push	{r7}
 8005adc:	b083      	sub	sp, #12
 8005ade:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005aea:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2bb0      	cmp	r3, #176	; 0xb0
 8005af0:	d901      	bls.n	8005af6 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8005af2:	23b0      	movs	r3, #176	; 0xb0
 8005af4:	607b      	str	r3, [r7, #4]
  return msiRange;
 8005af6:	687b      	ldr	r3, [r7, #4]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	021b      	lsls	r3, r3, #8
 8005b1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	604b      	str	r3, [r1, #4]
}
 8005b22:	bf00      	nop
 8005b24:	370c      	adds	r7, #12
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr

08005b2e <LL_RCC_SetSysClkSource>:
{
 8005b2e:	b480      	push	{r7}
 8005b30:	b083      	sub	sp, #12
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f023 0203 	bic.w	r2, r3, #3
 8005b40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	608b      	str	r3, [r1, #8]
}
 8005b4a:	bf00      	nop
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <LL_RCC_GetSysClkSource>:
{
 8005b56:	b480      	push	{r7}
 8005b58:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	f003 030c 	and.w	r3, r3, #12
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr

08005b6e <LL_RCC_SetAHBPrescaler>:
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b083      	sub	sp, #12
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	608b      	str	r3, [r1, #8]
}
 8005b8a:	bf00      	nop
 8005b8c:	370c      	adds	r7, #12
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr

08005b96 <LL_C2_RCC_SetAHBPrescaler>:
{
 8005b96:	b480      	push	{r7}
 8005b98:	b083      	sub	sp, #12
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ba2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005ba6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005baa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005bb6:	bf00      	nop
 8005bb8:	370c      	adds	r7, #12
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr

08005bc2 <LL_RCC_SetAHB4Prescaler>:
{
 8005bc2:	b480      	push	{r7}
 8005bc4:	b083      	sub	sp, #12
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005bd2:	f023 020f 	bic.w	r2, r3, #15
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	091b      	lsrs	r3, r3, #4
 8005bda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bde:	4313      	orrs	r3, r2
 8005be0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <LL_RCC_SetAPB1Prescaler>:
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	608b      	str	r3, [r1, #8]
}
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <LL_RCC_SetAPB2Prescaler>:
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005c2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	608b      	str	r3, [r1, #8]
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <LL_RCC_GetAHBPrescaler>:
{
 8005c40:	b480      	push	{r7}
 8005c42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <LL_RCC_GetAHB4Prescaler>:
{
 8005c58:	b480      	push	{r7}
 8005c5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c60:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005c64:	011b      	lsls	r3, r3, #4
 8005c66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <LL_RCC_GetAPB1Prescaler>:
{
 8005c74:	b480      	push	{r7}
 8005c76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <LL_RCC_GetAPB2Prescaler>:
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cb6:	6013      	str	r3, [r2, #0]
}
 8005cb8:	bf00      	nop
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr

08005cc2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005cc2:	b480      	push	{r7}
 8005cc4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cd4:	6013      	str	r3, [r2, #0]
}
 8005cd6:	bf00      	nop
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005cf2:	d101      	bne.n	8005cf8 <LL_RCC_PLL_IsReady+0x18>
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e000      	b.n	8005cfa <LL_RCC_PLL_IsReady+0x1a>
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005d04:	b480      	push	{r7}
 8005d06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	0a1b      	lsrs	r3, r3, #8
 8005d10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr

08005d1e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005d1e:	b480      	push	{r7}
 8005d20:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr

08005d36 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005d36:	b480      	push	{r7}
 8005d38:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr

08005d4e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005d4e:	b480      	push	{r7}
 8005d50:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	f003 0303 	and.w	r3, r3, #3
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005d66:	b480      	push	{r7}
 8005d68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d78:	d101      	bne.n	8005d7e <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e000      	b.n	8005d80 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d92:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d9e:	d101      	bne.n	8005da4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005da0:	2301      	movs	r3, #1
 8005da2:	e000      	b.n	8005da6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005db0:	b480      	push	{r7}
 8005db2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005db4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005db8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005dbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dc4:	d101      	bne.n	8005dca <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e000      	b.n	8005dcc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr

08005dd6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005dd6:	b480      	push	{r7}
 8005dd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005de4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005de8:	d101      	bne.n	8005dee <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005dea:	2301      	movs	r3, #1
 8005dec:	e000      	b.n	8005df0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005dee:	2300      	movs	r3, #0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005dfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e0c:	d101      	bne.n	8005e12 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e000      	b.n	8005e14 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
	...

08005e20 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e20:	b590      	push	{r4, r7, lr}
 8005e22:	b08d      	sub	sp, #52	; 0x34
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d101      	bne.n	8005e32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e324      	b.n	800647c <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0320 	and.w	r3, r3, #32
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f000 808d 	beq.w	8005f5a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e40:	f7ff fe89 	bl	8005b56 <LL_RCC_GetSysClkSource>
 8005e44:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e46:	f7ff ff82 	bl	8005d4e <LL_RCC_PLL_GetMainSource>
 8005e4a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d005      	beq.n	8005e5e <HAL_RCC_OscConfig+0x3e>
 8005e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e54:	2b0c      	cmp	r3, #12
 8005e56:	d147      	bne.n	8005ee8 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d144      	bne.n	8005ee8 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	69db      	ldr	r3, [r3, #28]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d101      	bne.n	8005e6a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e308      	b.n	800647c <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005e6e:	f7ff fe34 	bl	8005ada <LL_RCC_MSI_GetRange>
 8005e72:	4603      	mov	r3, r0
 8005e74:	429c      	cmp	r4, r3
 8005e76:	d914      	bls.n	8005ea2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f000 fcf1 	bl	8006864 <RCC_SetFlashLatencyFromMSIRange>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d001      	beq.n	8005e8c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e2f7      	b.n	800647c <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e90:	4618      	mov	r0, r3
 8005e92:	f7ff fe0e 	bl	8005ab2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7ff fe32 	bl	8005b04 <LL_RCC_MSI_SetCalibTrimming>
 8005ea0:	e013      	b.n	8005eca <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7ff fe03 	bl	8005ab2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a1b      	ldr	r3, [r3, #32]
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f7ff fe27 	bl	8005b04 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f000 fcd2 	bl	8006864 <RCC_SetFlashLatencyFromMSIRange>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d001      	beq.n	8005eca <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e2d8      	b.n	800647c <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005eca:	f000 fc8b 	bl	80067e4 <HAL_RCC_GetHCLKFreq>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	4aa4      	ldr	r2, [pc, #656]	; (8006164 <HAL_RCC_OscConfig+0x344>)
 8005ed2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005ed4:	4ba4      	ldr	r3, [pc, #656]	; (8006168 <HAL_RCC_OscConfig+0x348>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7fe fc97 	bl	800480c <HAL_InitTick>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d039      	beq.n	8005f58 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e2c9      	b.n	800647c <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	69db      	ldr	r3, [r3, #28]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d01e      	beq.n	8005f2e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005ef0:	f7ff fdb0 	bl	8005a54 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005ef4:	f7fe fcd8 	bl	80048a8 <HAL_GetTick>
 8005ef8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005efa:	e008      	b.n	8005f0e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005efc:	f7fe fcd4 	bl	80048a8 <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d901      	bls.n	8005f0e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e2b6      	b.n	800647c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005f0e:	f7ff fdbf 	bl	8005a90 <LL_RCC_MSI_IsReady>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d0f1      	beq.n	8005efc <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7ff fdc8 	bl	8005ab2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7ff fdec 	bl	8005b04 <LL_RCC_MSI_SetCalibTrimming>
 8005f2c:	e015      	b.n	8005f5a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005f2e:	f7ff fda0 	bl	8005a72 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005f32:	f7fe fcb9 	bl	80048a8 <HAL_GetTick>
 8005f36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005f38:	e008      	b.n	8005f4c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005f3a:	f7fe fcb5 	bl	80048a8 <HAL_GetTick>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d901      	bls.n	8005f4c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	e297      	b.n	800647c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005f4c:	f7ff fda0 	bl	8005a90 <LL_RCC_MSI_IsReady>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1f1      	bne.n	8005f3a <HAL_RCC_OscConfig+0x11a>
 8005f56:	e000      	b.n	8005f5a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005f58:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 0301 	and.w	r3, r3, #1
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d047      	beq.n	8005ff6 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f66:	f7ff fdf6 	bl	8005b56 <LL_RCC_GetSysClkSource>
 8005f6a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f6c:	f7ff feef 	bl	8005d4e <LL_RCC_PLL_GetMainSource>
 8005f70:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005f72:	6a3b      	ldr	r3, [r7, #32]
 8005f74:	2b08      	cmp	r3, #8
 8005f76:	d005      	beq.n	8005f84 <HAL_RCC_OscConfig+0x164>
 8005f78:	6a3b      	ldr	r3, [r7, #32]
 8005f7a:	2b0c      	cmp	r3, #12
 8005f7c:	d108      	bne.n	8005f90 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	2b03      	cmp	r3, #3
 8005f82:	d105      	bne.n	8005f90 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d134      	bne.n	8005ff6 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e275      	b.n	800647c <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f98:	d102      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x180>
 8005f9a:	f7ff fc11 	bl	80057c0 <LL_RCC_HSE_Enable>
 8005f9e:	e001      	b.n	8005fa4 <HAL_RCC_OscConfig+0x184>
 8005fa0:	f7ff fc1d 	bl	80057de <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d012      	beq.n	8005fd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fac:	f7fe fc7c 	bl	80048a8 <HAL_GetTick>
 8005fb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005fb2:	e008      	b.n	8005fc6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fb4:	f7fe fc78 	bl	80048a8 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	2b64      	cmp	r3, #100	; 0x64
 8005fc0:	d901      	bls.n	8005fc6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e25a      	b.n	800647c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005fc6:	f7ff fc19 	bl	80057fc <LL_RCC_HSE_IsReady>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d0f1      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x194>
 8005fd0:	e011      	b.n	8005ff6 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fd2:	f7fe fc69 	bl	80048a8 <HAL_GetTick>
 8005fd6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005fd8:	e008      	b.n	8005fec <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fda:	f7fe fc65 	bl	80048a8 <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	2b64      	cmp	r3, #100	; 0x64
 8005fe6:	d901      	bls.n	8005fec <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	e247      	b.n	800647c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005fec:	f7ff fc06 	bl	80057fc <LL_RCC_HSE_IsReady>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1f1      	bne.n	8005fda <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0302 	and.w	r3, r3, #2
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d04c      	beq.n	800609c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006002:	f7ff fda8 	bl	8005b56 <LL_RCC_GetSysClkSource>
 8006006:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006008:	f7ff fea1 	bl	8005d4e <LL_RCC_PLL_GetMainSource>
 800600c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	2b04      	cmp	r3, #4
 8006012:	d005      	beq.n	8006020 <HAL_RCC_OscConfig+0x200>
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	2b0c      	cmp	r3, #12
 8006018:	d10e      	bne.n	8006038 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	2b02      	cmp	r3, #2
 800601e:	d10b      	bne.n	8006038 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d101      	bne.n	800602c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e227      	b.n	800647c <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	4618      	mov	r0, r3
 8006032:	f7ff fc25 	bl	8005880 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006036:	e031      	b.n	800609c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d019      	beq.n	8006074 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006040:	f7ff fbee 	bl	8005820 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006044:	f7fe fc30 	bl	80048a8 <HAL_GetTick>
 8006048:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800604a:	e008      	b.n	800605e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800604c:	f7fe fc2c 	bl	80048a8 <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	2b02      	cmp	r3, #2
 8006058:	d901      	bls.n	800605e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e20e      	b.n	800647c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 800605e:	f7ff fbfd 	bl	800585c <LL_RCC_HSI_IsReady>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d0f1      	beq.n	800604c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	4618      	mov	r0, r3
 800606e:	f7ff fc07 	bl	8005880 <LL_RCC_HSI_SetCalibTrimming>
 8006072:	e013      	b.n	800609c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006074:	f7ff fbe3 	bl	800583e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006078:	f7fe fc16 	bl	80048a8 <HAL_GetTick>
 800607c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800607e:	e008      	b.n	8006092 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006080:	f7fe fc12 	bl	80048a8 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	2b02      	cmp	r3, #2
 800608c:	d901      	bls.n	8006092 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e1f4      	b.n	800647c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 8006092:	f7ff fbe3 	bl	800585c <LL_RCC_HSI_IsReady>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1f1      	bne.n	8006080 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0308 	and.w	r3, r3, #8
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d106      	bne.n	80060b6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f000 80a3 	beq.w	80061fc <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d076      	beq.n	80061ac <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0310 	and.w	r3, r3, #16
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d046      	beq.n	8006158 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80060ca:	f7ff fc66 	bl	800599a <LL_RCC_LSI1_IsReady>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d113      	bne.n	80060fc <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80060d4:	f7ff fc3f 	bl	8005956 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80060d8:	f7fe fbe6 	bl	80048a8 <HAL_GetTick>
 80060dc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80060de:	e008      	b.n	80060f2 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80060e0:	f7fe fbe2 	bl	80048a8 <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d901      	bls.n	80060f2 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e1c4      	b.n	800647c <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80060f2:	f7ff fc52 	bl	800599a <LL_RCC_LSI1_IsReady>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d0f1      	beq.n	80060e0 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80060fc:	f7ff fc5f 	bl	80059be <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006100:	f7fe fbd2 	bl	80048a8 <HAL_GetTick>
 8006104:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006106:	e008      	b.n	800611a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006108:	f7fe fbce 	bl	80048a8 <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	2b03      	cmp	r3, #3
 8006114:	d901      	bls.n	800611a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e1b0      	b.n	800647c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800611a:	f7ff fc72 	bl	8005a02 <LL_RCC_LSI2_IsReady>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d0f1      	beq.n	8006108 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	699b      	ldr	r3, [r3, #24]
 8006128:	4618      	mov	r0, r3
 800612a:	f7ff fc7c 	bl	8005a26 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800612e:	f7ff fc23 	bl	8005978 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006132:	f7fe fbb9 	bl	80048a8 <HAL_GetTick>
 8006136:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006138:	e008      	b.n	800614c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800613a:	f7fe fbb5 	bl	80048a8 <HAL_GetTick>
 800613e:	4602      	mov	r2, r0
 8006140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	2b02      	cmp	r3, #2
 8006146:	d901      	bls.n	800614c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	e197      	b.n	800647c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800614c:	f7ff fc25 	bl	800599a <LL_RCC_LSI1_IsReady>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1f1      	bne.n	800613a <HAL_RCC_OscConfig+0x31a>
 8006156:	e051      	b.n	80061fc <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8006158:	f7ff fbfd 	bl	8005956 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800615c:	f7fe fba4 	bl	80048a8 <HAL_GetTick>
 8006160:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006162:	e00c      	b.n	800617e <HAL_RCC_OscConfig+0x35e>
 8006164:	20000050 	.word	0x20000050
 8006168:	20000054 	.word	0x20000054
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800616c:	f7fe fb9c 	bl	80048a8 <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	2b02      	cmp	r3, #2
 8006178:	d901      	bls.n	800617e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e17e      	b.n	800647c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800617e:	f7ff fc0c 	bl	800599a <LL_RCC_LSI1_IsReady>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d0f1      	beq.n	800616c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8006188:	f7ff fc2a 	bl	80059e0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800618c:	e008      	b.n	80061a0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800618e:	f7fe fb8b 	bl	80048a8 <HAL_GetTick>
 8006192:	4602      	mov	r2, r0
 8006194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	2b03      	cmp	r3, #3
 800619a:	d901      	bls.n	80061a0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800619c:	2303      	movs	r3, #3
 800619e:	e16d      	b.n	800647c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80061a0:	f7ff fc2f 	bl	8005a02 <LL_RCC_LSI2_IsReady>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1f1      	bne.n	800618e <HAL_RCC_OscConfig+0x36e>
 80061aa:	e027      	b.n	80061fc <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80061ac:	f7ff fc18 	bl	80059e0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061b0:	f7fe fb7a 	bl	80048a8 <HAL_GetTick>
 80061b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80061b6:	e008      	b.n	80061ca <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80061b8:	f7fe fb76 	bl	80048a8 <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	2b03      	cmp	r3, #3
 80061c4:	d901      	bls.n	80061ca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e158      	b.n	800647c <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80061ca:	f7ff fc1a 	bl	8005a02 <LL_RCC_LSI2_IsReady>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1f1      	bne.n	80061b8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80061d4:	f7ff fbd0 	bl	8005978 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061d8:	f7fe fb66 	bl	80048a8 <HAL_GetTick>
 80061dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80061de:	e008      	b.n	80061f2 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80061e0:	f7fe fb62 	bl	80048a8 <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d901      	bls.n	80061f2 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	e144      	b.n	800647c <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80061f2:	f7ff fbd2 	bl	800599a <LL_RCC_LSI1_IsReady>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d1f1      	bne.n	80061e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 0304 	and.w	r3, r3, #4
 8006204:	2b00      	cmp	r3, #0
 8006206:	d05b      	beq.n	80062c0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006208:	4b9e      	ldr	r3, [pc, #632]	; (8006484 <HAL_RCC_OscConfig+0x664>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006210:	2b00      	cmp	r3, #0
 8006212:	d114      	bne.n	800623e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006214:	f7ff fa9c 	bl	8005750 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006218:	f7fe fb46 	bl	80048a8 <HAL_GetTick>
 800621c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800621e:	e008      	b.n	8006232 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006220:	f7fe fb42 	bl	80048a8 <HAL_GetTick>
 8006224:	4602      	mov	r2, r0
 8006226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	2b02      	cmp	r3, #2
 800622c:	d901      	bls.n	8006232 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	e124      	b.n	800647c <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006232:	4b94      	ldr	r3, [pc, #592]	; (8006484 <HAL_RCC_OscConfig+0x664>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800623a:	2b00      	cmp	r3, #0
 800623c:	d0f0      	beq.n	8006220 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d102      	bne.n	800624c <HAL_RCC_OscConfig+0x42c>
 8006246:	f7ff fb30 	bl	80058aa <LL_RCC_LSE_Enable>
 800624a:	e00c      	b.n	8006266 <HAL_RCC_OscConfig+0x446>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	2b05      	cmp	r3, #5
 8006252:	d104      	bne.n	800625e <HAL_RCC_OscConfig+0x43e>
 8006254:	f7ff fb4b 	bl	80058ee <LL_RCC_LSE_EnableBypass>
 8006258:	f7ff fb27 	bl	80058aa <LL_RCC_LSE_Enable>
 800625c:	e003      	b.n	8006266 <HAL_RCC_OscConfig+0x446>
 800625e:	f7ff fb35 	bl	80058cc <LL_RCC_LSE_Disable>
 8006262:	f7ff fb55 	bl	8005910 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d014      	beq.n	8006298 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800626e:	f7fe fb1b 	bl	80048a8 <HAL_GetTick>
 8006272:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006274:	e00a      	b.n	800628c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006276:	f7fe fb17 	bl	80048a8 <HAL_GetTick>
 800627a:	4602      	mov	r2, r0
 800627c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	f241 3288 	movw	r2, #5000	; 0x1388
 8006284:	4293      	cmp	r3, r2
 8006286:	d901      	bls.n	800628c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e0f7      	b.n	800647c <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 800628c:	f7ff fb51 	bl	8005932 <LL_RCC_LSE_IsReady>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d0ef      	beq.n	8006276 <HAL_RCC_OscConfig+0x456>
 8006296:	e013      	b.n	80062c0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006298:	f7fe fb06 	bl	80048a8 <HAL_GetTick>
 800629c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800629e:	e00a      	b.n	80062b6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062a0:	f7fe fb02 	bl	80048a8 <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d901      	bls.n	80062b6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e0e2      	b.n	800647c <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 80062b6:	f7ff fb3c 	bl	8005932 <LL_RCC_LSE_IsReady>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d1ef      	bne.n	80062a0 <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f000 80d8 	beq.w	800647a <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062ca:	f7ff fc44 	bl	8005b56 <LL_RCC_GetSysClkSource>
 80062ce:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80062d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062dc:	2b02      	cmp	r3, #2
 80062de:	f040 80a6 	bne.w	800642e <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f003 0203 	and.w	r2, r3, #3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d123      	bne.n	8006338 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d11c      	bne.n	8006338 <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	0a1b      	lsrs	r3, r3, #8
 8006302:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800630a:	429a      	cmp	r2, r3
 800630c:	d114      	bne.n	8006338 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006318:	429a      	cmp	r2, r3
 800631a:	d10d      	bne.n	8006338 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006326:	429a      	cmp	r2, r3
 8006328:	d106      	bne.n	8006338 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006334:	429a      	cmp	r2, r3
 8006336:	d054      	beq.n	80063e2 <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	2b0c      	cmp	r3, #12
 800633c:	d04f      	beq.n	80063de <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800633e:	f7ff fcc0 	bl	8005cc2 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006342:	f7fe fab1 	bl	80048a8 <HAL_GetTick>
 8006346:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006348:	e008      	b.n	800635c <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800634a:	f7fe faad 	bl	80048a8 <HAL_GetTick>
 800634e:	4602      	mov	r2, r0
 8006350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	2b02      	cmp	r3, #2
 8006356:	d901      	bls.n	800635c <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 8006358:	2303      	movs	r3, #3
 800635a:	e08f      	b.n	800647c <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800635c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1ef      	bne.n	800634a <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800636a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800636e:	68da      	ldr	r2, [r3, #12]
 8006370:	4b45      	ldr	r3, [pc, #276]	; (8006488 <HAL_RCC_OscConfig+0x668>)
 8006372:	4013      	ands	r3, r2
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800637c:	4311      	orrs	r1, r2
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006382:	0212      	lsls	r2, r2, #8
 8006384:	4311      	orrs	r1, r2
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800638a:	4311      	orrs	r1, r2
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006390:	4311      	orrs	r1, r2
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006396:	430a      	orrs	r2, r1
 8006398:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800639c:	4313      	orrs	r3, r2
 800639e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80063a0:	f7ff fc80 	bl	8005ca4 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80063a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80063b4:	f7fe fa78 	bl	80048a8 <HAL_GetTick>
 80063b8:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063ba:	e008      	b.n	80063ce <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063bc:	f7fe fa74 	bl	80048a8 <HAL_GetTick>
 80063c0:	4602      	mov	r2, r0
 80063c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d901      	bls.n	80063ce <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 80063ca:	2303      	movs	r3, #3
 80063cc:	e056      	b.n	800647c <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d0ef      	beq.n	80063bc <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063dc:	e04d      	b.n	800647a <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e04c      	b.n	800647c <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d144      	bne.n	800647a <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80063f0:	f7ff fc58 	bl	8005ca4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80063f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006402:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006404:	f7fe fa50 	bl	80048a8 <HAL_GetTick>
 8006408:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800640a:	e008      	b.n	800641e <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800640c:	f7fe fa4c 	bl	80048a8 <HAL_GetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	2b02      	cmp	r3, #2
 8006418:	d901      	bls.n	800641e <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e02e      	b.n	800647c <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800641e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d0ef      	beq.n	800640c <HAL_RCC_OscConfig+0x5ec>
 800642c:	e025      	b.n	800647a <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	2b0c      	cmp	r3, #12
 8006432:	d020      	beq.n	8006476 <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006434:	f7ff fc45 	bl	8005cc2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006438:	f7fe fa36 	bl	80048a8 <HAL_GetTick>
 800643c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800643e:	e008      	b.n	8006452 <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006440:	f7fe fa32 	bl	80048a8 <HAL_GetTick>
 8006444:	4602      	mov	r2, r0
 8006446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	2b02      	cmp	r3, #2
 800644c:	d901      	bls.n	8006452 <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e014      	b.n	800647c <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1ef      	bne.n	8006440 <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 8006460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800646a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800646e:	f023 0303 	bic.w	r3, r3, #3
 8006472:	60d3      	str	r3, [r2, #12]
 8006474:	e001      	b.n	800647a <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e000      	b.n	800647c <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3734      	adds	r7, #52	; 0x34
 8006480:	46bd      	mov	sp, r7
 8006482:	bd90      	pop	{r4, r7, pc}
 8006484:	58000400 	.word	0x58000400
 8006488:	11c1808c 	.word	0x11c1808c

0800648c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d101      	bne.n	80064a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e12d      	b.n	80066fc <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80064a0:	4b98      	ldr	r3, [pc, #608]	; (8006704 <HAL_RCC_ClockConfig+0x278>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0307 	and.w	r3, r3, #7
 80064a8:	683a      	ldr	r2, [r7, #0]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d91b      	bls.n	80064e6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064ae:	4b95      	ldr	r3, [pc, #596]	; (8006704 <HAL_RCC_ClockConfig+0x278>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f023 0207 	bic.w	r2, r3, #7
 80064b6:	4993      	ldr	r1, [pc, #588]	; (8006704 <HAL_RCC_ClockConfig+0x278>)
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064be:	f7fe f9f3 	bl	80048a8 <HAL_GetTick>
 80064c2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064c4:	e008      	b.n	80064d8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80064c6:	f7fe f9ef 	bl	80048a8 <HAL_GetTick>
 80064ca:	4602      	mov	r2, r0
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d901      	bls.n	80064d8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80064d4:	2303      	movs	r3, #3
 80064d6:	e111      	b.n	80066fc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064d8:	4b8a      	ldr	r3, [pc, #552]	; (8006704 <HAL_RCC_ClockConfig+0x278>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 0307 	and.w	r3, r3, #7
 80064e0:	683a      	ldr	r2, [r7, #0]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d1ef      	bne.n	80064c6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0302 	and.w	r3, r3, #2
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d016      	beq.n	8006520 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	4618      	mov	r0, r3
 80064f8:	f7ff fb39 	bl	8005b6e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80064fc:	f7fe f9d4 	bl	80048a8 <HAL_GetTick>
 8006500:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006502:	e008      	b.n	8006516 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006504:	f7fe f9d0 	bl	80048a8 <HAL_GetTick>
 8006508:	4602      	mov	r2, r0
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	2b02      	cmp	r3, #2
 8006510:	d901      	bls.n	8006516 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e0f2      	b.n	80066fc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006516:	f7ff fc26 	bl	8005d66 <LL_RCC_IsActiveFlag_HPRE>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d0f1      	beq.n	8006504 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0320 	and.w	r3, r3, #32
 8006528:	2b00      	cmp	r3, #0
 800652a:	d016      	beq.n	800655a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	695b      	ldr	r3, [r3, #20]
 8006530:	4618      	mov	r0, r3
 8006532:	f7ff fb30 	bl	8005b96 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006536:	f7fe f9b7 	bl	80048a8 <HAL_GetTick>
 800653a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800653c:	e008      	b.n	8006550 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800653e:	f7fe f9b3 	bl	80048a8 <HAL_GetTick>
 8006542:	4602      	mov	r2, r0
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	1ad3      	subs	r3, r2, r3
 8006548:	2b02      	cmp	r3, #2
 800654a:	d901      	bls.n	8006550 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	e0d5      	b.n	80066fc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006550:	f7ff fc1b 	bl	8005d8a <LL_RCC_IsActiveFlag_C2HPRE>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d0f1      	beq.n	800653e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006562:	2b00      	cmp	r3, #0
 8006564:	d016      	beq.n	8006594 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	4618      	mov	r0, r3
 800656c:	f7ff fb29 	bl	8005bc2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006570:	f7fe f99a 	bl	80048a8 <HAL_GetTick>
 8006574:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006576:	e008      	b.n	800658a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006578:	f7fe f996 	bl	80048a8 <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	2b02      	cmp	r3, #2
 8006584:	d901      	bls.n	800658a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	e0b8      	b.n	80066fc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800658a:	f7ff fc11 	bl	8005db0 <LL_RCC_IsActiveFlag_SHDHPRE>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d0f1      	beq.n	8006578 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 0304 	and.w	r3, r3, #4
 800659c:	2b00      	cmp	r3, #0
 800659e:	d016      	beq.n	80065ce <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7ff fb23 	bl	8005bf0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80065aa:	f7fe f97d 	bl	80048a8 <HAL_GetTick>
 80065ae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80065b0:	e008      	b.n	80065c4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80065b2:	f7fe f979 	bl	80048a8 <HAL_GetTick>
 80065b6:	4602      	mov	r2, r0
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d901      	bls.n	80065c4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e09b      	b.n	80066fc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80065c4:	f7ff fc07 	bl	8005dd6 <LL_RCC_IsActiveFlag_PPRE1>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d0f1      	beq.n	80065b2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0308 	and.w	r3, r3, #8
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d017      	beq.n	800660a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	00db      	lsls	r3, r3, #3
 80065e0:	4618      	mov	r0, r3
 80065e2:	f7ff fb19 	bl	8005c18 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80065e6:	f7fe f95f 	bl	80048a8 <HAL_GetTick>
 80065ea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80065ec:	e008      	b.n	8006600 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80065ee:	f7fe f95b 	bl	80048a8 <HAL_GetTick>
 80065f2:	4602      	mov	r2, r0
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d901      	bls.n	8006600 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80065fc:	2303      	movs	r3, #3
 80065fe:	e07d      	b.n	80066fc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006600:	f7ff fbfb 	bl	8005dfa <LL_RCC_IsActiveFlag_PPRE2>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d0f1      	beq.n	80065ee <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 0301 	and.w	r3, r3, #1
 8006612:	2b00      	cmp	r3, #0
 8006614:	d043      	beq.n	800669e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	2b02      	cmp	r3, #2
 800661c:	d106      	bne.n	800662c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800661e:	f7ff f8ed 	bl	80057fc <LL_RCC_HSE_IsReady>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d11e      	bne.n	8006666 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e067      	b.n	80066fc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	2b03      	cmp	r3, #3
 8006632:	d106      	bne.n	8006642 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006634:	f7ff fb54 	bl	8005ce0 <LL_RCC_PLL_IsReady>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d113      	bne.n	8006666 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e05c      	b.n	80066fc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d106      	bne.n	8006658 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800664a:	f7ff fa21 	bl	8005a90 <LL_RCC_MSI_IsReady>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d108      	bne.n	8006666 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e051      	b.n	80066fc <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006658:	f7ff f900 	bl	800585c <LL_RCC_HSI_IsReady>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d101      	bne.n	8006666 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e04a      	b.n	80066fc <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	4618      	mov	r0, r3
 800666c:	f7ff fa5f 	bl	8005b2e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006670:	f7fe f91a 	bl	80048a8 <HAL_GetTick>
 8006674:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006676:	e00a      	b.n	800668e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006678:	f7fe f916 	bl	80048a8 <HAL_GetTick>
 800667c:	4602      	mov	r2, r0
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	f241 3288 	movw	r2, #5000	; 0x1388
 8006686:	4293      	cmp	r3, r2
 8006688:	d901      	bls.n	800668e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	e036      	b.n	80066fc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800668e:	f7ff fa62 	bl	8005b56 <LL_RCC_GetSysClkSource>
 8006692:	4602      	mov	r2, r0
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	429a      	cmp	r2, r3
 800669c:	d1ec      	bne.n	8006678 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800669e:	4b19      	ldr	r3, [pc, #100]	; (8006704 <HAL_RCC_ClockConfig+0x278>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 0307 	and.w	r3, r3, #7
 80066a6:	683a      	ldr	r2, [r7, #0]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d21b      	bcs.n	80066e4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066ac:	4b15      	ldr	r3, [pc, #84]	; (8006704 <HAL_RCC_ClockConfig+0x278>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f023 0207 	bic.w	r2, r3, #7
 80066b4:	4913      	ldr	r1, [pc, #76]	; (8006704 <HAL_RCC_ClockConfig+0x278>)
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066bc:	f7fe f8f4 	bl	80048a8 <HAL_GetTick>
 80066c0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066c2:	e008      	b.n	80066d6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80066c4:	f7fe f8f0 	bl	80048a8 <HAL_GetTick>
 80066c8:	4602      	mov	r2, r0
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	d901      	bls.n	80066d6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80066d2:	2303      	movs	r3, #3
 80066d4:	e012      	b.n	80066fc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066d6:	4b0b      	ldr	r3, [pc, #44]	; (8006704 <HAL_RCC_ClockConfig+0x278>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 0307 	and.w	r3, r3, #7
 80066de:	683a      	ldr	r2, [r7, #0]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d1ef      	bne.n	80066c4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80066e4:	f000 f87e 	bl	80067e4 <HAL_RCC_GetHCLKFreq>
 80066e8:	4603      	mov	r3, r0
 80066ea:	4a07      	ldr	r2, [pc, #28]	; (8006708 <HAL_RCC_ClockConfig+0x27c>)
 80066ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80066ee:	f7fe f8e7 	bl	80048c0 <HAL_GetTickPrio>
 80066f2:	4603      	mov	r3, r0
 80066f4:	4618      	mov	r0, r3
 80066f6:	f7fe f889 	bl	800480c <HAL_InitTick>
 80066fa:	4603      	mov	r3, r0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3710      	adds	r7, #16
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	58004000 	.word	0x58004000
 8006708:	20000050 	.word	0x20000050

0800670c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800670c:	b590      	push	{r4, r7, lr}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006712:	f7ff fa20 	bl	8005b56 <LL_RCC_GetSysClkSource>
 8006716:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d10a      	bne.n	8006734 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800671e:	f7ff f9dc 	bl	8005ada <LL_RCC_MSI_GetRange>
 8006722:	4603      	mov	r3, r0
 8006724:	091b      	lsrs	r3, r3, #4
 8006726:	f003 030f 	and.w	r3, r3, #15
 800672a:	4a2b      	ldr	r2, [pc, #172]	; (80067d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800672c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006730:	60fb      	str	r3, [r7, #12]
 8006732:	e04b      	b.n	80067cc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2b04      	cmp	r3, #4
 8006738:	d102      	bne.n	8006740 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800673a:	4b28      	ldr	r3, [pc, #160]	; (80067dc <HAL_RCC_GetSysClockFreq+0xd0>)
 800673c:	60fb      	str	r3, [r7, #12]
 800673e:	e045      	b.n	80067cc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2b08      	cmp	r3, #8
 8006744:	d10a      	bne.n	800675c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006746:	f7ff f829 	bl	800579c <LL_RCC_HSE_IsEnabledDiv2>
 800674a:	4603      	mov	r3, r0
 800674c:	2b01      	cmp	r3, #1
 800674e:	d102      	bne.n	8006756 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006750:	4b22      	ldr	r3, [pc, #136]	; (80067dc <HAL_RCC_GetSysClockFreq+0xd0>)
 8006752:	60fb      	str	r3, [r7, #12]
 8006754:	e03a      	b.n	80067cc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006756:	4b22      	ldr	r3, [pc, #136]	; (80067e0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006758:	60fb      	str	r3, [r7, #12]
 800675a:	e037      	b.n	80067cc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800675c:	f7ff faf7 	bl	8005d4e <LL_RCC_PLL_GetMainSource>
 8006760:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	2b02      	cmp	r3, #2
 8006766:	d003      	beq.n	8006770 <HAL_RCC_GetSysClockFreq+0x64>
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	2b03      	cmp	r3, #3
 800676c:	d003      	beq.n	8006776 <HAL_RCC_GetSysClockFreq+0x6a>
 800676e:	e00d      	b.n	800678c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006770:	4b1a      	ldr	r3, [pc, #104]	; (80067dc <HAL_RCC_GetSysClockFreq+0xd0>)
 8006772:	60bb      	str	r3, [r7, #8]
        break;
 8006774:	e015      	b.n	80067a2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006776:	f7ff f811 	bl	800579c <LL_RCC_HSE_IsEnabledDiv2>
 800677a:	4603      	mov	r3, r0
 800677c:	2b01      	cmp	r3, #1
 800677e:	d102      	bne.n	8006786 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006780:	4b16      	ldr	r3, [pc, #88]	; (80067dc <HAL_RCC_GetSysClockFreq+0xd0>)
 8006782:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006784:	e00d      	b.n	80067a2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8006786:	4b16      	ldr	r3, [pc, #88]	; (80067e0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006788:	60bb      	str	r3, [r7, #8]
        break;
 800678a:	e00a      	b.n	80067a2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800678c:	f7ff f9a5 	bl	8005ada <LL_RCC_MSI_GetRange>
 8006790:	4603      	mov	r3, r0
 8006792:	091b      	lsrs	r3, r3, #4
 8006794:	f003 030f 	and.w	r3, r3, #15
 8006798:	4a0f      	ldr	r2, [pc, #60]	; (80067d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800679a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800679e:	60bb      	str	r3, [r7, #8]
        break;
 80067a0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80067a2:	f7ff faaf 	bl	8005d04 <LL_RCC_PLL_GetN>
 80067a6:	4602      	mov	r2, r0
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	fb03 f402 	mul.w	r4, r3, r2
 80067ae:	f7ff fac2 	bl	8005d36 <LL_RCC_PLL_GetDivider>
 80067b2:	4603      	mov	r3, r0
 80067b4:	091b      	lsrs	r3, r3, #4
 80067b6:	3301      	adds	r3, #1
 80067b8:	fbb4 f4f3 	udiv	r4, r4, r3
 80067bc:	f7ff faaf 	bl	8005d1e <LL_RCC_PLL_GetR>
 80067c0:	4603      	mov	r3, r0
 80067c2:	0f5b      	lsrs	r3, r3, #29
 80067c4:	3301      	adds	r3, #1
 80067c6:	fbb4 f3f3 	udiv	r3, r4, r3
 80067ca:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80067cc:	68fb      	ldr	r3, [r7, #12]
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3714      	adds	r7, #20
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd90      	pop	{r4, r7, pc}
 80067d6:	bf00      	nop
 80067d8:	08010c0c 	.word	0x08010c0c
 80067dc:	00f42400 	.word	0x00f42400
 80067e0:	01e84800 	.word	0x01e84800

080067e4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067e4:	b598      	push	{r3, r4, r7, lr}
 80067e6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80067e8:	f7ff ff90 	bl	800670c <HAL_RCC_GetSysClockFreq>
 80067ec:	4604      	mov	r4, r0
 80067ee:	f7ff fa27 	bl	8005c40 <LL_RCC_GetAHBPrescaler>
 80067f2:	4603      	mov	r3, r0
 80067f4:	091b      	lsrs	r3, r3, #4
 80067f6:	f003 030f 	and.w	r3, r3, #15
 80067fa:	4a03      	ldr	r2, [pc, #12]	; (8006808 <HAL_RCC_GetHCLKFreq+0x24>)
 80067fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006800:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006804:	4618      	mov	r0, r3
 8006806:	bd98      	pop	{r3, r4, r7, pc}
 8006808:	08010bac 	.word	0x08010bac

0800680c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800680c:	b598      	push	{r3, r4, r7, lr}
 800680e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006810:	f7ff ffe8 	bl	80067e4 <HAL_RCC_GetHCLKFreq>
 8006814:	4604      	mov	r4, r0
 8006816:	f7ff fa2d 	bl	8005c74 <LL_RCC_GetAPB1Prescaler>
 800681a:	4603      	mov	r3, r0
 800681c:	0a1b      	lsrs	r3, r3, #8
 800681e:	f003 0307 	and.w	r3, r3, #7
 8006822:	4a04      	ldr	r2, [pc, #16]	; (8006834 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006828:	f003 031f 	and.w	r3, r3, #31
 800682c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006830:	4618      	mov	r0, r3
 8006832:	bd98      	pop	{r3, r4, r7, pc}
 8006834:	08010bec 	.word	0x08010bec

08006838 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006838:	b598      	push	{r3, r4, r7, lr}
 800683a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800683c:	f7ff ffd2 	bl	80067e4 <HAL_RCC_GetHCLKFreq>
 8006840:	4604      	mov	r4, r0
 8006842:	f7ff fa23 	bl	8005c8c <LL_RCC_GetAPB2Prescaler>
 8006846:	4603      	mov	r3, r0
 8006848:	0adb      	lsrs	r3, r3, #11
 800684a:	f003 0307 	and.w	r3, r3, #7
 800684e:	4a04      	ldr	r2, [pc, #16]	; (8006860 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006854:	f003 031f 	and.w	r3, r3, #31
 8006858:	fa24 f303 	lsr.w	r3, r4, r3
}
 800685c:	4618      	mov	r0, r3
 800685e:	bd98      	pop	{r3, r4, r7, pc}
 8006860:	08010bec 	.word	0x08010bec

08006864 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2bb0      	cmp	r3, #176	; 0xb0
 8006870:	d903      	bls.n	800687a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8006872:	4b14      	ldr	r3, [pc, #80]	; (80068c4 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8006874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006876:	60fb      	str	r3, [r7, #12]
 8006878:	e007      	b.n	800688a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	091b      	lsrs	r3, r3, #4
 800687e:	f003 030f 	and.w	r3, r3, #15
 8006882:	4a10      	ldr	r2, [pc, #64]	; (80068c4 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8006884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006888:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800688a:	f7ff f9e5 	bl	8005c58 <LL_RCC_GetAHB4Prescaler>
 800688e:	4603      	mov	r3, r0
 8006890:	091b      	lsrs	r3, r3, #4
 8006892:	f003 030f 	and.w	r3, r3, #15
 8006896:	4a0c      	ldr	r2, [pc, #48]	; (80068c8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	fbb2 f3f3 	udiv	r3, r2, r3
 80068a2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	4a09      	ldr	r2, [pc, #36]	; (80068cc <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80068a8:	fba2 2303 	umull	r2, r3, r2, r3
 80068ac:	0c9b      	lsrs	r3, r3, #18
 80068ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80068b2:	4618      	mov	r0, r3
 80068b4:	f000 f80c 	bl	80068d0 <RCC_SetFlashLatency>
 80068b8:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	08010c0c 	.word	0x08010c0c
 80068c8:	08010bac 	.word	0x08010bac
 80068cc:	431bde83 	.word	0x431bde83

080068d0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80068d0:	b590      	push	{r4, r7, lr}
 80068d2:	b08f      	sub	sp, #60	; 0x3c
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80068da:	4b24      	ldr	r3, [pc, #144]	; (800696c <RCC_SetFlashLatency+0x9c>)
 80068dc:	f107 041c 	add.w	r4, r7, #28
 80068e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80068e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80068e6:	4b22      	ldr	r3, [pc, #136]	; (8006970 <RCC_SetFlashLatency+0xa0>)
 80068e8:	f107 040c 	add.w	r4, r7, #12
 80068ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80068ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80068f2:	2300      	movs	r3, #0
 80068f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80068f6:	2300      	movs	r3, #0
 80068f8:	633b      	str	r3, [r7, #48]	; 0x30
 80068fa:	e013      	b.n	8006924 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80068fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	3338      	adds	r3, #56	; 0x38
 8006902:	443b      	add	r3, r7
 8006904:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	429a      	cmp	r2, r3
 800690c:	d807      	bhi.n	800691e <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 800690e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	3338      	adds	r3, #56	; 0x38
 8006914:	443b      	add	r3, r7
 8006916:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800691a:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 800691c:	e005      	b.n	800692a <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800691e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006920:	3301      	adds	r3, #1
 8006922:	633b      	str	r3, [r7, #48]	; 0x30
 8006924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006926:	2b03      	cmp	r3, #3
 8006928:	d9e8      	bls.n	80068fc <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800692a:	4b12      	ldr	r3, [pc, #72]	; (8006974 <RCC_SetFlashLatency+0xa4>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f023 0207 	bic.w	r2, r3, #7
 8006932:	4910      	ldr	r1, [pc, #64]	; (8006974 <RCC_SetFlashLatency+0xa4>)
 8006934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006936:	4313      	orrs	r3, r2
 8006938:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800693a:	f7fd ffb5 	bl	80048a8 <HAL_GetTick>
 800693e:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006940:	e008      	b.n	8006954 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006942:	f7fd ffb1 	bl	80048a8 <HAL_GetTick>
 8006946:	4602      	mov	r2, r0
 8006948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694a:	1ad3      	subs	r3, r2, r3
 800694c:	2b02      	cmp	r3, #2
 800694e:	d901      	bls.n	8006954 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	e007      	b.n	8006964 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006954:	4b07      	ldr	r3, [pc, #28]	; (8006974 <RCC_SetFlashLatency+0xa4>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 0307 	and.w	r3, r3, #7
 800695c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800695e:	429a      	cmp	r2, r3
 8006960:	d1ef      	bne.n	8006942 <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	373c      	adds	r7, #60	; 0x3c
 8006968:	46bd      	mov	sp, r7
 800696a:	bd90      	pop	{r4, r7, pc}
 800696c:	080109e4 	.word	0x080109e4
 8006970:	080109f4 	.word	0x080109f4
 8006974:	58004000 	.word	0x58004000

08006978 <LL_RCC_LSE_IsEnabled>:
{
 8006978:	b480      	push	{r7}
 800697a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800697c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006984:	f003 0301 	and.w	r3, r3, #1
 8006988:	2b01      	cmp	r3, #1
 800698a:	d101      	bne.n	8006990 <LL_RCC_LSE_IsEnabled+0x18>
 800698c:	2301      	movs	r3, #1
 800698e:	e000      	b.n	8006992 <LL_RCC_LSE_IsEnabled+0x1a>
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <LL_RCC_LSE_IsReady>:
{
 800699c:	b480      	push	{r7}
 800699e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80069a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069a8:	f003 0302 	and.w	r3, r3, #2
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d101      	bne.n	80069b4 <LL_RCC_LSE_IsReady+0x18>
 80069b0:	2301      	movs	r3, #1
 80069b2:	e000      	b.n	80069b6 <LL_RCC_LSE_IsReady+0x1a>
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <LL_RCC_SetRFWKPClockSource>:
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80069c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80069d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4313      	orrs	r3, r2
 80069dc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <LL_RCC_SetSMPSClockSource>:
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80069f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fa:	f023 0203 	bic.w	r2, r3, #3
 80069fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006a08:	bf00      	nop
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <LL_RCC_SetSMPSPrescaler>:
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a22:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006a26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006a30:	bf00      	nop
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <LL_RCC_SetUSARTClockSource>:
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a4c:	f023 0203 	bic.w	r2, r3, #3
 8006a50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006a5c:	bf00      	nop
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <LL_RCC_SetLPUARTClockSource>:
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a78:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006a7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006a88:	bf00      	nop
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <LL_RCC_SetI2CClockSource>:
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aa0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	091b      	lsrs	r3, r3, #4
 8006aa8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006aac:	43db      	mvns	r3, r3
 8006aae:	401a      	ands	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	011b      	lsls	r3, r3, #4
 8006ab4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006ab8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006abc:	4313      	orrs	r3, r2
 8006abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006ac2:	bf00      	nop
 8006ac4:	370c      	adds	r7, #12
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr

08006ace <LL_RCC_SetLPTIMClockSource>:
{
 8006ace:	b480      	push	{r7}
 8006ad0:	b083      	sub	sp, #12
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ada:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	0c1b      	lsrs	r3, r3, #16
 8006ae2:	041b      	lsls	r3, r3, #16
 8006ae4:	43db      	mvns	r3, r3
 8006ae6:	401a      	ands	r2, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	041b      	lsls	r3, r3, #16
 8006aec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006af0:	4313      	orrs	r3, r2
 8006af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006af6:	bf00      	nop
 8006af8:	370c      	adds	r7, #12
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr

08006b02 <LL_RCC_SetRNGClockSource>:
{
 8006b02:	b480      	push	{r7}
 8006b04:	b083      	sub	sp, #12
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b12:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006b16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006b22:	bf00      	nop
 8006b24:	370c      	adds	r7, #12
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr

08006b2e <LL_RCC_SetCLK48ClockSource>:
{
 8006b2e:	b480      	push	{r7}
 8006b30:	b083      	sub	sp, #12
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006b42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006b4e:	bf00      	nop
 8006b50:	370c      	adds	r7, #12
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <LL_RCC_SetADCClockSource>:
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b083      	sub	sp, #12
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b6a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006b6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006b7a:	bf00      	nop
 8006b7c:	370c      	adds	r7, #12
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <LL_RCC_SetRTCClockSource>:
{
 8006b86:	b480      	push	{r7}
 8006b88:	b083      	sub	sp, #12
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006ba6:	bf00      	nop
 8006ba8:	370c      	adds	r7, #12
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr

08006bb2 <LL_RCC_GetRTCClockSource>:
{
 8006bb2:	b480      	push	{r7}
 8006bb4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006bb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <LL_RCC_ForceBackupDomainReset>:
{
 8006bcc:	b480      	push	{r7}
 8006bce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006be0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006be4:	bf00      	nop
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr

08006bee <LL_RCC_ReleaseBackupDomainReset>:
{
 8006bee:	b480      	push	{r7}
 8006bf0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006c06:	bf00      	nop
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b088      	sub	sp, #32
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8006c18:	2300      	movs	r3, #0
 8006c1a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d046      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006c2c:	f7ff ffc1 	bl	8006bb2 <LL_RCC_GetRTCClockSource>
 8006c30:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a1b      	ldr	r3, [r3, #32]
 8006c36:	69ba      	ldr	r2, [r7, #24]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d03c      	beq.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006c3c:	f7fe fd88 	bl	8005750 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d105      	bne.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6a1b      	ldr	r3, [r3, #32]
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f7ff ff9b 	bl	8006b86 <LL_RCC_SetRTCClockSource>
 8006c50:	e02e      	b.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8006c52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c5a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006c5c:	f7ff ffb6 	bl	8006bcc <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006c60:	f7ff ffc5 	bl	8006bee <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a1b      	ldr	r3, [r3, #32]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8006c72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006c7c:	f7ff fe7c 	bl	8006978 <LL_RCC_LSE_IsEnabled>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d114      	bne.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006c86:	f7fd fe0f 	bl	80048a8 <HAL_GetTick>
 8006c8a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006c8c:	e00b      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c8e:	f7fd fe0b 	bl	80048a8 <HAL_GetTick>
 8006c92:	4602      	mov	r2, r0
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d902      	bls.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	77fb      	strb	r3, [r7, #31]
              break;
 8006ca4:	e004      	b.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 8006ca6:	f7ff fe79 	bl	800699c <LL_RCC_LSE_IsReady>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d1ee      	bne.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8006cb0:	7ffb      	ldrb	r3, [r7, #31]
 8006cb2:	77bb      	strb	r3, [r7, #30]
 8006cb4:	e001      	b.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cb6:	7ffb      	ldrb	r3, [r7, #31]
 8006cb8:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d004      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f7ff feb6 	bl	8006a3c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0302 	and.w	r3, r3, #2
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d004      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f7ff fec1 	bl	8006a68 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 0310 	and.w	r3, r3, #16
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d004      	beq.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7ff fee9 	bl	8006ace <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 0320 	and.w	r3, r3, #32
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d004      	beq.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	695b      	ldr	r3, [r3, #20]
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7ff fede 	bl	8006ace <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 0304 	and.w	r3, r3, #4
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d004      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7ff feb6 	bl	8006a94 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d02b      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d3c:	d008      	beq.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	699b      	ldr	r3, [r3, #24]
 8006d42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d46:	d003      	beq.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	699b      	ldr	r3, [r3, #24]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d105      	bne.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	699b      	ldr	r3, [r3, #24]
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7ff fed4 	bl	8006b02 <LL_RCC_SetRNGClockSource>
 8006d5a:	e00a      	b.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d64:	60fb      	str	r3, [r7, #12]
 8006d66:	2000      	movs	r0, #0
 8006d68:	f7ff fecb 	bl	8006b02 <LL_RCC_SetRNGClockSource>
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f7ff fede 	bl	8006b2e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	699b      	ldr	r3, [r3, #24]
 8006d76:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006d7a:	d107      	bne.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d8a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d011      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	69db      	ldr	r3, [r3, #28]
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f7ff fedc 	bl	8006b5a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	69db      	ldr	r3, [r3, #28]
 8006da6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006daa:	d107      	bne.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006db6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dba:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d004      	beq.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f7ff fdf7 	bl	80069c0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d009      	beq.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de2:	4618      	mov	r0, r3
 8006de4:	f7ff fe16 	bl	8006a14 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7ff fdfd 	bl	80069ec <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8006df2:	7fbb      	ldrb	r3, [r7, #30]
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3720      	adds	r7, #32
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d101      	bne.n	8006e0e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e027      	b.n	8006e5e <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	7a5b      	ldrb	r3, [r3, #9]
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d105      	bne.n	8006e24 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f7fb fea8 	bl	8002b74 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2202      	movs	r2, #2
 8006e28:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f023 0120 	bic.w	r1, r3, #32
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	685a      	ldr	r2, [r3, #4]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	430a      	orrs	r2, r1
 8006e3e:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f042 0204 	orr.w	r2, r2, #4
 8006e4e:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3708      	adds	r7, #8
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
	...

08006e68 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d101      	bne.n	8006e7a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e09f      	b.n	8006fba <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d106      	bne.n	8006e94 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f7fb fe9a 	bl	8002bc8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2202      	movs	r2, #2
 8006e98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006e9c:	4b49      	ldr	r3, [pc, #292]	; (8006fc4 <HAL_RTC_Init+0x15c>)
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	f003 0310 	and.w	r3, r3, #16
 8006ea4:	2b10      	cmp	r3, #16
 8006ea6:	d07e      	beq.n	8006fa6 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	22ca      	movs	r2, #202	; 0xca
 8006eae:	625a      	str	r2, [r3, #36]	; 0x24
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2253      	movs	r2, #83	; 0x53
 8006eb6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 f8ab 	bl	8007014 <RTC_EnterInitMode>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00a      	beq.n	8006eda <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	22ff      	movs	r2, #255	; 0xff
 8006eca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2204      	movs	r2, #4
 8006ed0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	73fb      	strb	r3, [r7, #15]
 8006ed8:	e067      	b.n	8006faa <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	6812      	ldr	r2, [r2, #0]
 8006ee4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006ee8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eec:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	6899      	ldr	r1, [r3, #8]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	685a      	ldr	r2, [r3, #4]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	431a      	orrs	r2, r3
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	699b      	ldr	r3, [r3, #24]
 8006f02:	431a      	orrs	r2, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	430a      	orrs	r2, r1
 8006f0a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	68d2      	ldr	r2, [r2, #12]
 8006f14:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	6919      	ldr	r1, [r3, #16]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	041a      	lsls	r2, r3, #16
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	430a      	orrs	r2, r1
 8006f28:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68da      	ldr	r2, [r3, #12]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f38:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f022 0202 	bic.w	r2, r2, #2
 8006f48:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	69da      	ldr	r2, [r3, #28]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	695b      	ldr	r3, [r3, #20]
 8006f58:	431a      	orrs	r2, r3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	430a      	orrs	r2, r1
 8006f60:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	f003 0320 	and.w	r3, r3, #32
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d113      	bne.n	8006f98 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 f829 	bl	8006fc8 <HAL_RTC_WaitForSynchro>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d00d      	beq.n	8006f98 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	22ff      	movs	r2, #255	; 0xff
 8006f82:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2204      	movs	r2, #4
 8006f88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	e010      	b.n	8006fba <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	22ff      	movs	r2, #255	; 0xff
 8006f9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	73fb      	strb	r3, [r7, #15]
 8006fa4:	e001      	b.n	8006faa <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006faa:	7bfb      	ldrb	r3, [r7, #15]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d103      	bne.n	8006fb8 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8006fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	40002800 	.word	0x40002800

08006fc8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	68da      	ldr	r2, [r3, #12]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006fde:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006fe0:	f7fd fc62 	bl	80048a8 <HAL_GetTick>
 8006fe4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006fe6:	e009      	b.n	8006ffc <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006fe8:	f7fd fc5e 	bl	80048a8 <HAL_GetTick>
 8006fec:	4602      	mov	r2, r0
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ff6:	d901      	bls.n	8006ffc <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	e007      	b.n	800700c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	f003 0320 	and.w	r3, r3, #32
 8007006:	2b00      	cmp	r3, #0
 8007008:	d0ee      	beq.n	8006fe8 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007026:	2b00      	cmp	r3, #0
 8007028:	d119      	bne.n	800705e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f04f 32ff 	mov.w	r2, #4294967295
 8007032:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007034:	f7fd fc38 	bl	80048a8 <HAL_GetTick>
 8007038:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800703a:	e009      	b.n	8007050 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800703c:	f7fd fc34 	bl	80048a8 <HAL_GetTick>
 8007040:	4602      	mov	r2, r0
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800704a:	d901      	bls.n	8007050 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800704c:	2303      	movs	r3, #3
 800704e:	e007      	b.n	8007060 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800705a:	2b00      	cmp	r3, #0
 800705c:	d0ee      	beq.n	800703c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	4618      	mov	r0, r3
 8007062:	3710      	adds	r7, #16
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b086      	sub	sp, #24
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f893 3020 	ldrb.w	r3, [r3, #32]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d101      	bne.n	8007082 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800707e:	2302      	movs	r3, #2
 8007080:	e0a8      	b.n	80071d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2201      	movs	r2, #1
 8007086:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2202      	movs	r2, #2
 800708e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	22ca      	movs	r2, #202	; 0xca
 8007098:	625a      	str	r2, [r3, #36]	; 0x24
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2253      	movs	r2, #83	; 0x53
 80070a0:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d020      	beq.n	80070f2 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80070b0:	f7fd fbfa 	bl	80048a8 <HAL_GetTick>
 80070b4:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80070b6:	e015      	b.n	80070e4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80070b8:	f7fd fbf6 	bl	80048a8 <HAL_GetTick>
 80070bc:	4602      	mov	r2, r0
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80070c6:	d90d      	bls.n	80070e4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	22ff      	movs	r2, #255	; 0xff
 80070ce:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2203      	movs	r2, #3
 80070d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80070e0:	2303      	movs	r3, #3
 80070e2:	e077      	b.n	80071d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	f003 0304 	and.w	r3, r3, #4
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d1e2      	bne.n	80070b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	689a      	ldr	r2, [r3, #8]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007100:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	b2da      	uxtb	r2, r3
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8007112:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007114:	f7fd fbc8 	bl	80048a8 <HAL_GetTick>
 8007118:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800711a:	e015      	b.n	8007148 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800711c:	f7fd fbc4 	bl	80048a8 <HAL_GetTick>
 8007120:	4602      	mov	r2, r0
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	1ad3      	subs	r3, r2, r3
 8007126:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800712a:	d90d      	bls.n	8007148 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	22ff      	movs	r2, #255	; 0xff
 8007132:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2203      	movs	r2, #3
 8007138:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2200      	movs	r2, #0
 8007140:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e045      	b.n	80071d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	f003 0304 	and.w	r3, r3, #4
 8007152:	2b00      	cmp	r3, #0
 8007154:	d0e2      	beq.n	800711c <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	689a      	ldr	r2, [r3, #8]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f022 0207 	bic.w	r2, r2, #7
 800716c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	6899      	ldr	r1, [r3, #8]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	430a      	orrs	r2, r1
 800717c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800717e:	4b17      	ldr	r3, [pc, #92]	; (80071dc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007180:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007184:	4a15      	ldr	r2, [pc, #84]	; (80071dc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007186:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800718a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800718e:	4b13      	ldr	r3, [pc, #76]	; (80071dc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a12      	ldr	r2, [pc, #72]	; (80071dc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007194:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007198:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	689a      	ldr	r2, [r3, #8]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071a8:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	689a      	ldr	r2, [r3, #8]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80071b8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	22ff      	movs	r2, #255	; 0xff
 80071c0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2201      	movs	r2, #1
 80071c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3718      	adds	r7, #24
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	58000800 	.word	0x58000800

080071e0 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d101      	bne.n	80071f6 <HAL_RTCEx_EnableBypassShadow+0x16>
 80071f2:	2302      	movs	r3, #2
 80071f4:	e024      	b.n	8007240 <HAL_RTCEx_EnableBypassShadow+0x60>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2201      	movs	r2, #1
 80071fa:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2202      	movs	r2, #2
 8007202:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	22ca      	movs	r2, #202	; 0xca
 800720c:	625a      	str	r2, [r3, #36]	; 0x24
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2253      	movs	r2, #83	; 0x53
 8007214:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	689a      	ldr	r2, [r3, #8]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f042 0220 	orr.w	r2, r2, #32
 8007224:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	22ff      	movs	r2, #255	; 0xff
 800722c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2201      	movs	r2, #1
 8007232:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800723e:	2300      	movs	r3, #0
}
 8007240:	4618      	mov	r0, r3
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <LL_RCC_GetUSARTClockSource>:
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8007254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007258:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4013      	ands	r3, r2
}
 8007260:	4618      	mov	r0, r3
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <LL_RCC_GetLPUARTClockSource>:
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007278:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4013      	ands	r3, r2
}
 8007280:	4618      	mov	r0, r3
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d101      	bne.n	800729e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	e042      	b.n	8007324 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d106      	bne.n	80072b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f7fb fcc9 	bl	8002c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2224      	movs	r2, #36	; 0x24
 80072ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f022 0201 	bic.w	r2, r2, #1
 80072cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d002      	beq.n	80072dc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 fe60 	bl	8007f9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 fc35 	bl	8007b4c <UART_SetConfig>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d101      	bne.n	80072ec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	e01b      	b.n	8007324 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	685a      	ldr	r2, [r3, #4]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	689a      	ldr	r2, [r3, #8]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800730a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f042 0201 	orr.w	r2, r2, #1
 800731a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f000 fedf 	bl	80080e0 <UART_CheckIdleState>
 8007322:	4603      	mov	r3, r0
}
 8007324:	4618      	mov	r0, r3
 8007326:	3708      	adds	r7, #8
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b08a      	sub	sp, #40	; 0x28
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	4613      	mov	r3, r2
 8007338:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007340:	2b20      	cmp	r3, #32
 8007342:	d137      	bne.n	80073b4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d002      	beq.n	8007350 <HAL_UART_Receive_IT+0x24>
 800734a:	88fb      	ldrh	r3, [r7, #6]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d101      	bne.n	8007354 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	e030      	b.n	80073b6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2200      	movs	r2, #0
 8007358:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a18      	ldr	r2, [pc, #96]	; (80073c0 <HAL_UART_Receive_IT+0x94>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d01f      	beq.n	80073a4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800736e:	2b00      	cmp	r3, #0
 8007370:	d018      	beq.n	80073a4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	e853 3f00 	ldrex	r3, [r3]
 800737e:	613b      	str	r3, [r7, #16]
   return(result);
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007386:	627b      	str	r3, [r7, #36]	; 0x24
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	461a      	mov	r2, r3
 800738e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007390:	623b      	str	r3, [r7, #32]
 8007392:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007394:	69f9      	ldr	r1, [r7, #28]
 8007396:	6a3a      	ldr	r2, [r7, #32]
 8007398:	e841 2300 	strex	r3, r2, [r1]
 800739c:	61bb      	str	r3, [r7, #24]
   return(result);
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d1e6      	bne.n	8007372 <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 80073a4:	88fb      	ldrh	r3, [r7, #6]
 80073a6:	461a      	mov	r2, r3
 80073a8:	68b9      	ldr	r1, [r7, #8]
 80073aa:	68f8      	ldr	r0, [r7, #12]
 80073ac:	f000 ffaa 	bl	8008304 <UART_Start_Receive_IT>
 80073b0:	4603      	mov	r3, r0
 80073b2:	e000      	b.n	80073b6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80073b4:	2302      	movs	r3, #2
  }
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3728      	adds	r7, #40	; 0x28
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	40008000 	.word	0x40008000

080073c4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b08a      	sub	sp, #40	; 0x28
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	4613      	mov	r3, r2
 80073d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073d8:	2b20      	cmp	r3, #32
 80073da:	d167      	bne.n	80074ac <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d002      	beq.n	80073e8 <HAL_UART_Transmit_DMA+0x24>
 80073e2:	88fb      	ldrh	r3, [r7, #6]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d101      	bne.n	80073ec <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80073e8:	2301      	movs	r3, #1
 80073ea:	e060      	b.n	80074ae <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	68ba      	ldr	r2, [r7, #8]
 80073f0:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	88fa      	ldrh	r2, [r7, #6]
 80073f6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	88fa      	ldrh	r2, [r7, #6]
 80073fe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2200      	movs	r2, #0
 8007406:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2221      	movs	r2, #33	; 0x21
 800740e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007416:	2b00      	cmp	r3, #0
 8007418:	d028      	beq.n	800746c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800741e:	4a26      	ldr	r2, [pc, #152]	; (80074b8 <HAL_UART_Transmit_DMA+0xf4>)
 8007420:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007426:	4a25      	ldr	r2, [pc, #148]	; (80074bc <HAL_UART_Transmit_DMA+0xf8>)
 8007428:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800742e:	4a24      	ldr	r2, [pc, #144]	; (80074c0 <HAL_UART_Transmit_DMA+0xfc>)
 8007430:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007436:	2200      	movs	r2, #0
 8007438:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007442:	4619      	mov	r1, r3
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	3328      	adds	r3, #40	; 0x28
 800744a:	461a      	mov	r2, r3
 800744c:	88fb      	ldrh	r3, [r7, #6]
 800744e:	f7fd fc75 	bl	8004d3c <HAL_DMA_Start_IT>
 8007452:	4603      	mov	r3, r0
 8007454:	2b00      	cmp	r3, #0
 8007456:	d009      	beq.n	800746c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2210      	movs	r2, #16
 800745c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2220      	movs	r2, #32
 8007464:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	e020      	b.n	80074ae <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	2240      	movs	r2, #64	; 0x40
 8007472:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	3308      	adds	r3, #8
 800747a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	e853 3f00 	ldrex	r3, [r3]
 8007482:	613b      	str	r3, [r7, #16]
   return(result);
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800748a:	627b      	str	r3, [r7, #36]	; 0x24
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	3308      	adds	r3, #8
 8007492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007494:	623a      	str	r2, [r7, #32]
 8007496:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007498:	69f9      	ldr	r1, [r7, #28]
 800749a:	6a3a      	ldr	r2, [r7, #32]
 800749c:	e841 2300 	strex	r3, r2, [r1]
 80074a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d1e5      	bne.n	8007474 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80074a8:	2300      	movs	r3, #0
 80074aa:	e000      	b.n	80074ae <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80074ac:	2302      	movs	r3, #2
  }
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3728      	adds	r7, #40	; 0x28
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	08008697 	.word	0x08008697
 80074bc:	08008731 	.word	0x08008731
 80074c0:	0800874d 	.word	0x0800874d

080074c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b0ba      	sub	sp, #232	; 0xe8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	69db      	ldr	r3, [r3, #28]
 80074d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80074ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80074ee:	f640 030f 	movw	r3, #2063	; 0x80f
 80074f2:	4013      	ands	r3, r2
 80074f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80074f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d11b      	bne.n	8007538 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007504:	f003 0320 	and.w	r3, r3, #32
 8007508:	2b00      	cmp	r3, #0
 800750a:	d015      	beq.n	8007538 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800750c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007510:	f003 0320 	and.w	r3, r3, #32
 8007514:	2b00      	cmp	r3, #0
 8007516:	d105      	bne.n	8007524 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007518:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800751c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007520:	2b00      	cmp	r3, #0
 8007522:	d009      	beq.n	8007538 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007528:	2b00      	cmp	r3, #0
 800752a:	f000 82e3 	beq.w	8007af4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	4798      	blx	r3
      }
      return;
 8007536:	e2dd      	b.n	8007af4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007538:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800753c:	2b00      	cmp	r3, #0
 800753e:	f000 8123 	beq.w	8007788 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007542:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007546:	4b8d      	ldr	r3, [pc, #564]	; (800777c <HAL_UART_IRQHandler+0x2b8>)
 8007548:	4013      	ands	r3, r2
 800754a:	2b00      	cmp	r3, #0
 800754c:	d106      	bne.n	800755c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800754e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007552:	4b8b      	ldr	r3, [pc, #556]	; (8007780 <HAL_UART_IRQHandler+0x2bc>)
 8007554:	4013      	ands	r3, r2
 8007556:	2b00      	cmp	r3, #0
 8007558:	f000 8116 	beq.w	8007788 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800755c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007560:	f003 0301 	and.w	r3, r3, #1
 8007564:	2b00      	cmp	r3, #0
 8007566:	d011      	beq.n	800758c <HAL_UART_IRQHandler+0xc8>
 8007568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800756c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00b      	beq.n	800758c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2201      	movs	r2, #1
 800757a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007582:	f043 0201 	orr.w	r2, r3, #1
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800758c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007590:	f003 0302 	and.w	r3, r3, #2
 8007594:	2b00      	cmp	r3, #0
 8007596:	d011      	beq.n	80075bc <HAL_UART_IRQHandler+0xf8>
 8007598:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800759c:	f003 0301 	and.w	r3, r3, #1
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00b      	beq.n	80075bc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2202      	movs	r2, #2
 80075aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075b2:	f043 0204 	orr.w	r2, r3, #4
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075c0:	f003 0304 	and.w	r3, r3, #4
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d011      	beq.n	80075ec <HAL_UART_IRQHandler+0x128>
 80075c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075cc:	f003 0301 	and.w	r3, r3, #1
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d00b      	beq.n	80075ec <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2204      	movs	r2, #4
 80075da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075e2:	f043 0202 	orr.w	r2, r3, #2
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80075ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075f0:	f003 0308 	and.w	r3, r3, #8
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d017      	beq.n	8007628 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80075f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075fc:	f003 0320 	and.w	r3, r3, #32
 8007600:	2b00      	cmp	r3, #0
 8007602:	d105      	bne.n	8007610 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007604:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007608:	4b5c      	ldr	r3, [pc, #368]	; (800777c <HAL_UART_IRQHandler+0x2b8>)
 800760a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800760c:	2b00      	cmp	r3, #0
 800760e:	d00b      	beq.n	8007628 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2208      	movs	r2, #8
 8007616:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800761e:	f043 0208 	orr.w	r2, r3, #8
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800762c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007630:	2b00      	cmp	r3, #0
 8007632:	d012      	beq.n	800765a <HAL_UART_IRQHandler+0x196>
 8007634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007638:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800763c:	2b00      	cmp	r3, #0
 800763e:	d00c      	beq.n	800765a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007648:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007650:	f043 0220 	orr.w	r2, r3, #32
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007660:	2b00      	cmp	r3, #0
 8007662:	f000 8249 	beq.w	8007af8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800766a:	f003 0320 	and.w	r3, r3, #32
 800766e:	2b00      	cmp	r3, #0
 8007670:	d013      	beq.n	800769a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007672:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007676:	f003 0320 	and.w	r3, r3, #32
 800767a:	2b00      	cmp	r3, #0
 800767c:	d105      	bne.n	800768a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800767e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007686:	2b00      	cmp	r3, #0
 8007688:	d007      	beq.n	800769a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800768e:	2b00      	cmp	r3, #0
 8007690:	d003      	beq.n	800769a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ae:	2b40      	cmp	r3, #64	; 0x40
 80076b0:	d005      	beq.n	80076be <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80076b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80076b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d054      	beq.n	8007768 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 ff83 	bl	80085ca <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ce:	2b40      	cmp	r3, #64	; 0x40
 80076d0:	d146      	bne.n	8007760 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	3308      	adds	r3, #8
 80076d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076e0:	e853 3f00 	ldrex	r3, [r3]
 80076e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80076e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	3308      	adds	r3, #8
 80076fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80076fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007702:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007706:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800770a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800770e:	e841 2300 	strex	r3, r2, [r1]
 8007712:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007716:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1d9      	bne.n	80076d2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007724:	2b00      	cmp	r3, #0
 8007726:	d017      	beq.n	8007758 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800772e:	4a15      	ldr	r2, [pc, #84]	; (8007784 <HAL_UART_IRQHandler+0x2c0>)
 8007730:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007738:	4618      	mov	r0, r3
 800773a:	f7fd fbd9 	bl	8004ef0 <HAL_DMA_Abort_IT>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d019      	beq.n	8007778 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800774a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007752:	4610      	mov	r0, r2
 8007754:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007756:	e00f      	b.n	8007778 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 f9e1 	bl	8007b20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800775e:	e00b      	b.n	8007778 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 f9dd 	bl	8007b20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007766:	e007      	b.n	8007778 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 f9d9 	bl	8007b20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8007776:	e1bf      	b.n	8007af8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007778:	bf00      	nop
    return;
 800777a:	e1bd      	b.n	8007af8 <HAL_UART_IRQHandler+0x634>
 800777c:	10000001 	.word	0x10000001
 8007780:	04000120 	.word	0x04000120
 8007784:	080087cd 	.word	0x080087cd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800778c:	2b01      	cmp	r3, #1
 800778e:	f040 8153 	bne.w	8007a38 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007796:	f003 0310 	and.w	r3, r3, #16
 800779a:	2b00      	cmp	r3, #0
 800779c:	f000 814c 	beq.w	8007a38 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80077a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077a4:	f003 0310 	and.w	r3, r3, #16
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	f000 8145 	beq.w	8007a38 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	2210      	movs	r2, #16
 80077b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077c0:	2b40      	cmp	r3, #64	; 0x40
 80077c2:	f040 80bb 	bne.w	800793c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80077d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f000 818f 	beq.w	8007afc <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80077e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077e8:	429a      	cmp	r2, r3
 80077ea:	f080 8187 	bcs.w	8007afc <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f003 0320 	and.w	r3, r3, #32
 8007806:	2b00      	cmp	r3, #0
 8007808:	f040 8087 	bne.w	800791a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007814:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007818:	e853 3f00 	ldrex	r3, [r3]
 800781c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007820:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007824:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007828:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	461a      	mov	r2, r3
 8007832:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007836:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800783a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007842:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007846:	e841 2300 	strex	r3, r2, [r1]
 800784a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800784e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007852:	2b00      	cmp	r3, #0
 8007854:	d1da      	bne.n	800780c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	3308      	adds	r3, #8
 800785c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007860:	e853 3f00 	ldrex	r3, [r3]
 8007864:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007866:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007868:	f023 0301 	bic.w	r3, r3, #1
 800786c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	3308      	adds	r3, #8
 8007876:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800787a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800787e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007880:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007882:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007886:	e841 2300 	strex	r3, r2, [r1]
 800788a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800788c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800788e:	2b00      	cmp	r3, #0
 8007890:	d1e1      	bne.n	8007856 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	3308      	adds	r3, #8
 8007898:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800789a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800789c:	e853 3f00 	ldrex	r3, [r3]
 80078a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80078a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	3308      	adds	r3, #8
 80078b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80078b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80078b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80078bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80078be:	e841 2300 	strex	r3, r2, [r1]
 80078c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80078c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d1e3      	bne.n	8007892 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2220      	movs	r2, #32
 80078ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2200      	movs	r2, #0
 80078d6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078e0:	e853 3f00 	ldrex	r3, [r3]
 80078e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80078e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078e8:	f023 0310 	bic.w	r3, r3, #16
 80078ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	461a      	mov	r2, r3
 80078f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80078fc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007900:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007902:	e841 2300 	strex	r3, r2, [r1]
 8007906:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800790a:	2b00      	cmp	r3, #0
 800790c:	d1e4      	bne.n	80078d8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007914:	4618      	mov	r0, r3
 8007916:	f7fd fa8c 	bl	8004e32 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2202      	movs	r2, #2
 800791e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800792c:	b29b      	uxth	r3, r3
 800792e:	1ad3      	subs	r3, r2, r3
 8007930:	b29b      	uxth	r3, r3
 8007932:	4619      	mov	r1, r3
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 f8fd 	bl	8007b34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800793a:	e0df      	b.n	8007afc <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007948:	b29b      	uxth	r3, r3
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007956:	b29b      	uxth	r3, r3
 8007958:	2b00      	cmp	r3, #0
 800795a:	f000 80d1 	beq.w	8007b00 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800795e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007962:	2b00      	cmp	r3, #0
 8007964:	f000 80cc 	beq.w	8007b00 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007970:	e853 3f00 	ldrex	r3, [r3]
 8007974:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007978:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800797c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	461a      	mov	r2, r3
 8007986:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800798a:	647b      	str	r3, [r7, #68]	; 0x44
 800798c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007990:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007992:	e841 2300 	strex	r3, r2, [r1]
 8007996:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800799a:	2b00      	cmp	r3, #0
 800799c:	d1e4      	bne.n	8007968 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	3308      	adds	r3, #8
 80079a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a8:	e853 3f00 	ldrex	r3, [r3]
 80079ac:	623b      	str	r3, [r7, #32]
   return(result);
 80079ae:	6a3b      	ldr	r3, [r7, #32]
 80079b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079b4:	f023 0301 	bic.w	r3, r3, #1
 80079b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	3308      	adds	r3, #8
 80079c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80079c6:	633a      	str	r2, [r7, #48]	; 0x30
 80079c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079ce:	e841 2300 	strex	r3, r2, [r1]
 80079d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d1e1      	bne.n	800799e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2220      	movs	r2, #32
 80079de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	e853 3f00 	ldrex	r3, [r3]
 80079fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f023 0310 	bic.w	r3, r3, #16
 8007a02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007a10:	61fb      	str	r3, [r7, #28]
 8007a12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a14:	69b9      	ldr	r1, [r7, #24]
 8007a16:	69fa      	ldr	r2, [r7, #28]
 8007a18:	e841 2300 	strex	r3, r2, [r1]
 8007a1c:	617b      	str	r3, [r7, #20]
   return(result);
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d1e4      	bne.n	80079ee <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2202      	movs	r2, #2
 8007a28:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a2e:	4619      	mov	r1, r3
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 f87f 	bl	8007b34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a36:	e063      	b.n	8007b00 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d00e      	beq.n	8007a62 <HAL_UART_IRQHandler+0x59e>
 8007a44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d008      	beq.n	8007a62 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007a58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f001 fc14 	bl	8009288 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a60:	e051      	b.n	8007b06 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d014      	beq.n	8007a98 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d105      	bne.n	8007a86 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007a7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d008      	beq.n	8007a98 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d03a      	beq.n	8007b04 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	4798      	blx	r3
    }
    return;
 8007a96:	e035      	b.n	8007b04 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d009      	beq.n	8007ab8 <HAL_UART_IRQHandler+0x5f4>
 8007aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d003      	beq.n	8007ab8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 fea1 	bl	80087f8 <UART_EndTransmit_IT>
    return;
 8007ab6:	e026      	b.n	8007b06 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007abc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d009      	beq.n	8007ad8 <HAL_UART_IRQHandler+0x614>
 8007ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ac8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d003      	beq.n	8007ad8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f001 fbed 	bl	80092b0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ad6:	e016      	b.n	8007b06 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007adc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d010      	beq.n	8007b06 <HAL_UART_IRQHandler+0x642>
 8007ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	da0c      	bge.n	8007b06 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f001 fbd5 	bl	800929c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007af2:	e008      	b.n	8007b06 <HAL_UART_IRQHandler+0x642>
      return;
 8007af4:	bf00      	nop
 8007af6:	e006      	b.n	8007b06 <HAL_UART_IRQHandler+0x642>
    return;
 8007af8:	bf00      	nop
 8007afa:	e004      	b.n	8007b06 <HAL_UART_IRQHandler+0x642>
      return;
 8007afc:	bf00      	nop
 8007afe:	e002      	b.n	8007b06 <HAL_UART_IRQHandler+0x642>
      return;
 8007b00:	bf00      	nop
 8007b02:	e000      	b.n	8007b06 <HAL_UART_IRQHandler+0x642>
    return;
 8007b04:	bf00      	nop
  }
}
 8007b06:	37e8      	adds	r7, #232	; 0xe8
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007b14:	bf00      	nop
 8007b16:	370c      	adds	r7, #12
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007b28:	bf00      	nop
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b40:	bf00      	nop
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b50:	b08c      	sub	sp, #48	; 0x30
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b56:	2300      	movs	r3, #0
 8007b58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	689a      	ldr	r2, [r3, #8]
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	691b      	ldr	r3, [r3, #16]
 8007b64:	431a      	orrs	r2, r3
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	695b      	ldr	r3, [r3, #20]
 8007b6a:	431a      	orrs	r2, r3
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	69db      	ldr	r3, [r3, #28]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	4baf      	ldr	r3, [pc, #700]	; (8007e38 <UART_SetConfig+0x2ec>)
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	697a      	ldr	r2, [r7, #20]
 8007b80:	6812      	ldr	r2, [r2, #0]
 8007b82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b84:	430b      	orrs	r3, r1
 8007b86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	68da      	ldr	r2, [r3, #12]
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	430a      	orrs	r2, r1
 8007b9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	699b      	ldr	r3, [r3, #24]
 8007ba2:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4aa4      	ldr	r2, [pc, #656]	; (8007e3c <UART_SetConfig+0x2f0>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d004      	beq.n	8007bb8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	6a1b      	ldr	r3, [r3, #32]
 8007bb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007bc2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007bc6:	697a      	ldr	r2, [r7, #20]
 8007bc8:	6812      	ldr	r2, [r2, #0]
 8007bca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bcc:	430b      	orrs	r3, r1
 8007bce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd6:	f023 010f 	bic.w	r1, r3, #15
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	430a      	orrs	r2, r1
 8007be4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a95      	ldr	r2, [pc, #596]	; (8007e40 <UART_SetConfig+0x2f4>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d125      	bne.n	8007c3c <UART_SetConfig+0xf0>
 8007bf0:	2003      	movs	r0, #3
 8007bf2:	f7ff fb2b 	bl	800724c <LL_RCC_GetUSARTClockSource>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b03      	cmp	r3, #3
 8007bfa:	d81b      	bhi.n	8007c34 <UART_SetConfig+0xe8>
 8007bfc:	a201      	add	r2, pc, #4	; (adr r2, 8007c04 <UART_SetConfig+0xb8>)
 8007bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c02:	bf00      	nop
 8007c04:	08007c15 	.word	0x08007c15
 8007c08:	08007c25 	.word	0x08007c25
 8007c0c:	08007c1d 	.word	0x08007c1d
 8007c10:	08007c2d 	.word	0x08007c2d
 8007c14:	2301      	movs	r3, #1
 8007c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c1a:	e042      	b.n	8007ca2 <UART_SetConfig+0x156>
 8007c1c:	2302      	movs	r3, #2
 8007c1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c22:	e03e      	b.n	8007ca2 <UART_SetConfig+0x156>
 8007c24:	2304      	movs	r3, #4
 8007c26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c2a:	e03a      	b.n	8007ca2 <UART_SetConfig+0x156>
 8007c2c:	2308      	movs	r3, #8
 8007c2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c32:	e036      	b.n	8007ca2 <UART_SetConfig+0x156>
 8007c34:	2310      	movs	r3, #16
 8007c36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c3a:	e032      	b.n	8007ca2 <UART_SetConfig+0x156>
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a7e      	ldr	r2, [pc, #504]	; (8007e3c <UART_SetConfig+0x2f0>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d12a      	bne.n	8007c9c <UART_SetConfig+0x150>
 8007c46:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007c4a:	f7ff fb0f 	bl	800726c <LL_RCC_GetLPUARTClockSource>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c54:	d01a      	beq.n	8007c8c <UART_SetConfig+0x140>
 8007c56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c5a:	d81b      	bhi.n	8007c94 <UART_SetConfig+0x148>
 8007c5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c60:	d00c      	beq.n	8007c7c <UART_SetConfig+0x130>
 8007c62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c66:	d815      	bhi.n	8007c94 <UART_SetConfig+0x148>
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d003      	beq.n	8007c74 <UART_SetConfig+0x128>
 8007c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c70:	d008      	beq.n	8007c84 <UART_SetConfig+0x138>
 8007c72:	e00f      	b.n	8007c94 <UART_SetConfig+0x148>
 8007c74:	2300      	movs	r3, #0
 8007c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c7a:	e012      	b.n	8007ca2 <UART_SetConfig+0x156>
 8007c7c:	2302      	movs	r3, #2
 8007c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c82:	e00e      	b.n	8007ca2 <UART_SetConfig+0x156>
 8007c84:	2304      	movs	r3, #4
 8007c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c8a:	e00a      	b.n	8007ca2 <UART_SetConfig+0x156>
 8007c8c:	2308      	movs	r3, #8
 8007c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c92:	e006      	b.n	8007ca2 <UART_SetConfig+0x156>
 8007c94:	2310      	movs	r3, #16
 8007c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c9a:	e002      	b.n	8007ca2 <UART_SetConfig+0x156>
 8007c9c:	2310      	movs	r3, #16
 8007c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a65      	ldr	r2, [pc, #404]	; (8007e3c <UART_SetConfig+0x2f0>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	f040 8097 	bne.w	8007ddc <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007cae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007cb2:	2b08      	cmp	r3, #8
 8007cb4:	d823      	bhi.n	8007cfe <UART_SetConfig+0x1b2>
 8007cb6:	a201      	add	r2, pc, #4	; (adr r2, 8007cbc <UART_SetConfig+0x170>)
 8007cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cbc:	08007ce1 	.word	0x08007ce1
 8007cc0:	08007cff 	.word	0x08007cff
 8007cc4:	08007ce9 	.word	0x08007ce9
 8007cc8:	08007cff 	.word	0x08007cff
 8007ccc:	08007cef 	.word	0x08007cef
 8007cd0:	08007cff 	.word	0x08007cff
 8007cd4:	08007cff 	.word	0x08007cff
 8007cd8:	08007cff 	.word	0x08007cff
 8007cdc:	08007cf7 	.word	0x08007cf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ce0:	f7fe fd94 	bl	800680c <HAL_RCC_GetPCLK1Freq>
 8007ce4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ce6:	e010      	b.n	8007d0a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ce8:	4b56      	ldr	r3, [pc, #344]	; (8007e44 <UART_SetConfig+0x2f8>)
 8007cea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007cec:	e00d      	b.n	8007d0a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cee:	f7fe fd0d 	bl	800670c <HAL_RCC_GetSysClockFreq>
 8007cf2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007cf4:	e009      	b.n	8007d0a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cfa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007cfc:	e005      	b.n	8007d0a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007d08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f000 812b 	beq.w	8007f68 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d16:	4a4c      	ldr	r2, [pc, #304]	; (8007e48 <UART_SetConfig+0x2fc>)
 8007d18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d20:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d24:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	685a      	ldr	r2, [r3, #4]
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	005b      	lsls	r3, r3, #1
 8007d2e:	4413      	add	r3, r2
 8007d30:	69ba      	ldr	r2, [r7, #24]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d305      	bcc.n	8007d42 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d3c:	69ba      	ldr	r2, [r7, #24]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d903      	bls.n	8007d4a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007d48:	e10e      	b.n	8007f68 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	60bb      	str	r3, [r7, #8]
 8007d50:	60fa      	str	r2, [r7, #12]
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d56:	4a3c      	ldr	r2, [pc, #240]	; (8007e48 <UART_SetConfig+0x2fc>)
 8007d58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	2200      	movs	r2, #0
 8007d60:	603b      	str	r3, [r7, #0]
 8007d62:	607a      	str	r2, [r7, #4]
 8007d64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d6c:	f7f8 ff04 	bl	8000b78 <__aeabi_uldivmod>
 8007d70:	4602      	mov	r2, r0
 8007d72:	460b      	mov	r3, r1
 8007d74:	4610      	mov	r0, r2
 8007d76:	4619      	mov	r1, r3
 8007d78:	f04f 0200 	mov.w	r2, #0
 8007d7c:	f04f 0300 	mov.w	r3, #0
 8007d80:	020b      	lsls	r3, r1, #8
 8007d82:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007d86:	0202      	lsls	r2, r0, #8
 8007d88:	6979      	ldr	r1, [r7, #20]
 8007d8a:	6849      	ldr	r1, [r1, #4]
 8007d8c:	0849      	lsrs	r1, r1, #1
 8007d8e:	2000      	movs	r0, #0
 8007d90:	460c      	mov	r4, r1
 8007d92:	4605      	mov	r5, r0
 8007d94:	eb12 0804 	adds.w	r8, r2, r4
 8007d98:	eb43 0905 	adc.w	r9, r3, r5
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	469a      	mov	sl, r3
 8007da4:	4693      	mov	fp, r2
 8007da6:	4652      	mov	r2, sl
 8007da8:	465b      	mov	r3, fp
 8007daa:	4640      	mov	r0, r8
 8007dac:	4649      	mov	r1, r9
 8007dae:	f7f8 fee3 	bl	8000b78 <__aeabi_uldivmod>
 8007db2:	4602      	mov	r2, r0
 8007db4:	460b      	mov	r3, r1
 8007db6:	4613      	mov	r3, r2
 8007db8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007dba:	6a3b      	ldr	r3, [r7, #32]
 8007dbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dc0:	d308      	bcc.n	8007dd4 <UART_SetConfig+0x288>
 8007dc2:	6a3b      	ldr	r3, [r7, #32]
 8007dc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dc8:	d204      	bcs.n	8007dd4 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	6a3a      	ldr	r2, [r7, #32]
 8007dd0:	60da      	str	r2, [r3, #12]
 8007dd2:	e0c9      	b.n	8007f68 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007dda:	e0c5      	b.n	8007f68 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	69db      	ldr	r3, [r3, #28]
 8007de0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007de4:	d16d      	bne.n	8007ec2 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8007de6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007dea:	3b01      	subs	r3, #1
 8007dec:	2b07      	cmp	r3, #7
 8007dee:	d82d      	bhi.n	8007e4c <UART_SetConfig+0x300>
 8007df0:	a201      	add	r2, pc, #4	; (adr r2, 8007df8 <UART_SetConfig+0x2ac>)
 8007df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df6:	bf00      	nop
 8007df8:	08007e19 	.word	0x08007e19
 8007dfc:	08007e21 	.word	0x08007e21
 8007e00:	08007e4d 	.word	0x08007e4d
 8007e04:	08007e27 	.word	0x08007e27
 8007e08:	08007e4d 	.word	0x08007e4d
 8007e0c:	08007e4d 	.word	0x08007e4d
 8007e10:	08007e4d 	.word	0x08007e4d
 8007e14:	08007e2f 	.word	0x08007e2f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e18:	f7fe fd0e 	bl	8006838 <HAL_RCC_GetPCLK2Freq>
 8007e1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e1e:	e01b      	b.n	8007e58 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e20:	4b08      	ldr	r3, [pc, #32]	; (8007e44 <UART_SetConfig+0x2f8>)
 8007e22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e24:	e018      	b.n	8007e58 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e26:	f7fe fc71 	bl	800670c <HAL_RCC_GetSysClockFreq>
 8007e2a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e2c:	e014      	b.n	8007e58 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e34:	e010      	b.n	8007e58 <UART_SetConfig+0x30c>
 8007e36:	bf00      	nop
 8007e38:	cfff69f3 	.word	0xcfff69f3
 8007e3c:	40008000 	.word	0x40008000
 8007e40:	40013800 	.word	0x40013800
 8007e44:	00f42400 	.word	0x00f42400
 8007e48:	08010c4c 	.word	0x08010c4c
      default:
        pclk = 0U;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007e56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	f000 8084 	beq.w	8007f68 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e64:	4a4b      	ldr	r2, [pc, #300]	; (8007f94 <UART_SetConfig+0x448>)
 8007e66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e72:	005a      	lsls	r2, r3, #1
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	085b      	lsrs	r3, r3, #1
 8007e7a:	441a      	add	r2, r3
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e84:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e86:	6a3b      	ldr	r3, [r7, #32]
 8007e88:	2b0f      	cmp	r3, #15
 8007e8a:	d916      	bls.n	8007eba <UART_SetConfig+0x36e>
 8007e8c:	6a3b      	ldr	r3, [r7, #32]
 8007e8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e92:	d212      	bcs.n	8007eba <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e94:	6a3b      	ldr	r3, [r7, #32]
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	f023 030f 	bic.w	r3, r3, #15
 8007e9c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e9e:	6a3b      	ldr	r3, [r7, #32]
 8007ea0:	085b      	lsrs	r3, r3, #1
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	f003 0307 	and.w	r3, r3, #7
 8007ea8:	b29a      	uxth	r2, r3
 8007eaa:	8bfb      	ldrh	r3, [r7, #30]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	8bfa      	ldrh	r2, [r7, #30]
 8007eb6:	60da      	str	r2, [r3, #12]
 8007eb8:	e056      	b.n	8007f68 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007ec0:	e052      	b.n	8007f68 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ec2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	2b07      	cmp	r3, #7
 8007eca:	d822      	bhi.n	8007f12 <UART_SetConfig+0x3c6>
 8007ecc:	a201      	add	r2, pc, #4	; (adr r2, 8007ed4 <UART_SetConfig+0x388>)
 8007ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ed2:	bf00      	nop
 8007ed4:	08007ef5 	.word	0x08007ef5
 8007ed8:	08007efd 	.word	0x08007efd
 8007edc:	08007f13 	.word	0x08007f13
 8007ee0:	08007f03 	.word	0x08007f03
 8007ee4:	08007f13 	.word	0x08007f13
 8007ee8:	08007f13 	.word	0x08007f13
 8007eec:	08007f13 	.word	0x08007f13
 8007ef0:	08007f0b 	.word	0x08007f0b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ef4:	f7fe fca0 	bl	8006838 <HAL_RCC_GetPCLK2Freq>
 8007ef8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007efa:	e010      	b.n	8007f1e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007efc:	4b26      	ldr	r3, [pc, #152]	; (8007f98 <UART_SetConfig+0x44c>)
 8007efe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f00:	e00d      	b.n	8007f1e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f02:	f7fe fc03 	bl	800670c <HAL_RCC_GetSysClockFreq>
 8007f06:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f08:	e009      	b.n	8007f1e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f10:	e005      	b.n	8007f1e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8007f12:	2300      	movs	r3, #0
 8007f14:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007f1c:	bf00      	nop
    }

    if (pclk != 0U)
 8007f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d021      	beq.n	8007f68 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f28:	4a1a      	ldr	r2, [pc, #104]	; (8007f94 <UART_SetConfig+0x448>)
 8007f2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f2e:	461a      	mov	r2, r3
 8007f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f32:	fbb3 f2f2 	udiv	r2, r3, r2
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	085b      	lsrs	r3, r3, #1
 8007f3c:	441a      	add	r2, r3
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f46:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f48:	6a3b      	ldr	r3, [r7, #32]
 8007f4a:	2b0f      	cmp	r3, #15
 8007f4c:	d909      	bls.n	8007f62 <UART_SetConfig+0x416>
 8007f4e:	6a3b      	ldr	r3, [r7, #32]
 8007f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f54:	d205      	bcs.n	8007f62 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f56:	6a3b      	ldr	r3, [r7, #32]
 8007f58:	b29a      	uxth	r2, r3
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	60da      	str	r2, [r3, #12]
 8007f60:	e002      	b.n	8007f68 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	2200      	movs	r2, #0
 8007f82:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007f84:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3730      	adds	r7, #48	; 0x30
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f92:	bf00      	nop
 8007f94:	08010c4c 	.word	0x08010c4c
 8007f98:	00f42400 	.word	0x00f42400

08007f9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa8:	f003 0308 	and.w	r3, r3, #8
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d00a      	beq.n	8007fc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	430a      	orrs	r2, r1
 8007fc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fca:	f003 0301 	and.w	r3, r3, #1
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d00a      	beq.n	8007fe8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	430a      	orrs	r2, r1
 8007fe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fec:	f003 0302 	and.w	r3, r3, #2
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00a      	beq.n	800800a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	430a      	orrs	r2, r1
 8008008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800800e:	f003 0304 	and.w	r3, r3, #4
 8008012:	2b00      	cmp	r3, #0
 8008014:	d00a      	beq.n	800802c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	430a      	orrs	r2, r1
 800802a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008030:	f003 0310 	and.w	r3, r3, #16
 8008034:	2b00      	cmp	r3, #0
 8008036:	d00a      	beq.n	800804e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	430a      	orrs	r2, r1
 800804c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008052:	f003 0320 	and.w	r3, r3, #32
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00a      	beq.n	8008070 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	430a      	orrs	r2, r1
 800806e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008078:	2b00      	cmp	r3, #0
 800807a:	d01a      	beq.n	80080b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	430a      	orrs	r2, r1
 8008090:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008096:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800809a:	d10a      	bne.n	80080b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	430a      	orrs	r2, r1
 80080b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d00a      	beq.n	80080d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	430a      	orrs	r2, r1
 80080d2:	605a      	str	r2, [r3, #4]
  }
}
 80080d4:	bf00      	nop
 80080d6:	370c      	adds	r7, #12
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b098      	sub	sp, #96	; 0x60
 80080e4:	af02      	add	r7, sp, #8
 80080e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80080f0:	f7fc fbda 	bl	80048a8 <HAL_GetTick>
 80080f4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f003 0308 	and.w	r3, r3, #8
 8008100:	2b08      	cmp	r3, #8
 8008102:	d12f      	bne.n	8008164 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008104:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008108:	9300      	str	r3, [sp, #0]
 800810a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800810c:	2200      	movs	r2, #0
 800810e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 f88e 	bl	8008234 <UART_WaitOnFlagUntilTimeout>
 8008118:	4603      	mov	r3, r0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d022      	beq.n	8008164 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008126:	e853 3f00 	ldrex	r3, [r3]
 800812a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800812c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800812e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008132:	653b      	str	r3, [r7, #80]	; 0x50
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	461a      	mov	r2, r3
 800813a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800813c:	647b      	str	r3, [r7, #68]	; 0x44
 800813e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008140:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008142:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008144:	e841 2300 	strex	r3, r2, [r1]
 8008148:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800814a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800814c:	2b00      	cmp	r3, #0
 800814e:	d1e6      	bne.n	800811e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2220      	movs	r2, #32
 8008154:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008160:	2303      	movs	r3, #3
 8008162:	e063      	b.n	800822c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f003 0304 	and.w	r3, r3, #4
 800816e:	2b04      	cmp	r3, #4
 8008170:	d149      	bne.n	8008206 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008172:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008176:	9300      	str	r3, [sp, #0]
 8008178:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800817a:	2200      	movs	r2, #0
 800817c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 f857 	bl	8008234 <UART_WaitOnFlagUntilTimeout>
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d03c      	beq.n	8008206 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008194:	e853 3f00 	ldrex	r3, [r3]
 8008198:	623b      	str	r3, [r7, #32]
   return(result);
 800819a:	6a3b      	ldr	r3, [r7, #32]
 800819c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	461a      	mov	r2, r3
 80081a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081aa:	633b      	str	r3, [r7, #48]	; 0x30
 80081ac:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081b2:	e841 2300 	strex	r3, r2, [r1]
 80081b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80081b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d1e6      	bne.n	800818c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	3308      	adds	r3, #8
 80081c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	e853 3f00 	ldrex	r3, [r3]
 80081cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f023 0301 	bic.w	r3, r3, #1
 80081d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	3308      	adds	r3, #8
 80081dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081de:	61fa      	str	r2, [r7, #28]
 80081e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e2:	69b9      	ldr	r1, [r7, #24]
 80081e4:	69fa      	ldr	r2, [r7, #28]
 80081e6:	e841 2300 	strex	r3, r2, [r1]
 80081ea:	617b      	str	r3, [r7, #20]
   return(result);
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d1e5      	bne.n	80081be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2220      	movs	r2, #32
 80081f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008202:	2303      	movs	r3, #3
 8008204:	e012      	b.n	800822c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2220      	movs	r2, #32
 800820a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2220      	movs	r2, #32
 8008212:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800822a:	2300      	movs	r3, #0
}
 800822c:	4618      	mov	r0, r3
 800822e:	3758      	adds	r7, #88	; 0x58
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	60b9      	str	r1, [r7, #8]
 800823e:	603b      	str	r3, [r7, #0]
 8008240:	4613      	mov	r3, r2
 8008242:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008244:	e049      	b.n	80082da <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800824c:	d045      	beq.n	80082da <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800824e:	f7fc fb2b 	bl	80048a8 <HAL_GetTick>
 8008252:	4602      	mov	r2, r0
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	1ad3      	subs	r3, r2, r3
 8008258:	69ba      	ldr	r2, [r7, #24]
 800825a:	429a      	cmp	r2, r3
 800825c:	d302      	bcc.n	8008264 <UART_WaitOnFlagUntilTimeout+0x30>
 800825e:	69bb      	ldr	r3, [r7, #24]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d101      	bne.n	8008268 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008264:	2303      	movs	r3, #3
 8008266:	e048      	b.n	80082fa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f003 0304 	and.w	r3, r3, #4
 8008272:	2b00      	cmp	r3, #0
 8008274:	d031      	beq.n	80082da <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	69db      	ldr	r3, [r3, #28]
 800827c:	f003 0308 	and.w	r3, r3, #8
 8008280:	2b08      	cmp	r3, #8
 8008282:	d110      	bne.n	80082a6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	2208      	movs	r2, #8
 800828a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800828c:	68f8      	ldr	r0, [r7, #12]
 800828e:	f000 f99c 	bl	80085ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2208      	movs	r2, #8
 8008296:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2200      	movs	r2, #0
 800829e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80082a2:	2301      	movs	r3, #1
 80082a4:	e029      	b.n	80082fa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	69db      	ldr	r3, [r3, #28]
 80082ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082b4:	d111      	bne.n	80082da <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80082c0:	68f8      	ldr	r0, [r7, #12]
 80082c2:	f000 f982 	bl	80085ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2220      	movs	r2, #32
 80082ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80082d6:	2303      	movs	r3, #3
 80082d8:	e00f      	b.n	80082fa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	69da      	ldr	r2, [r3, #28]
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	4013      	ands	r3, r2
 80082e4:	68ba      	ldr	r2, [r7, #8]
 80082e6:	429a      	cmp	r2, r3
 80082e8:	bf0c      	ite	eq
 80082ea:	2301      	moveq	r3, #1
 80082ec:	2300      	movne	r3, #0
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	461a      	mov	r2, r3
 80082f2:	79fb      	ldrb	r3, [r7, #7]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d0a6      	beq.n	8008246 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80082f8:	2300      	movs	r3, #0
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3710      	adds	r7, #16
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
	...

08008304 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008304:	b480      	push	{r7}
 8008306:	b0a3      	sub	sp, #140	; 0x8c
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	4613      	mov	r3, r2
 8008310:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	68ba      	ldr	r2, [r7, #8]
 8008316:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	88fa      	ldrh	r2, [r7, #6]
 800831c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	88fa      	ldrh	r2, [r7, #6]
 8008324:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2200      	movs	r2, #0
 800832c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008336:	d10e      	bne.n	8008356 <UART_Start_Receive_IT+0x52>
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	691b      	ldr	r3, [r3, #16]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d105      	bne.n	800834c <UART_Start_Receive_IT+0x48>
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008346:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800834a:	e02d      	b.n	80083a8 <UART_Start_Receive_IT+0xa4>
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	22ff      	movs	r2, #255	; 0xff
 8008350:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008354:	e028      	b.n	80083a8 <UART_Start_Receive_IT+0xa4>
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d10d      	bne.n	800837a <UART_Start_Receive_IT+0x76>
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	691b      	ldr	r3, [r3, #16]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d104      	bne.n	8008370 <UART_Start_Receive_IT+0x6c>
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	22ff      	movs	r2, #255	; 0xff
 800836a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800836e:	e01b      	b.n	80083a8 <UART_Start_Receive_IT+0xa4>
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	227f      	movs	r2, #127	; 0x7f
 8008374:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008378:	e016      	b.n	80083a8 <UART_Start_Receive_IT+0xa4>
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008382:	d10d      	bne.n	80083a0 <UART_Start_Receive_IT+0x9c>
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	691b      	ldr	r3, [r3, #16]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d104      	bne.n	8008396 <UART_Start_Receive_IT+0x92>
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	227f      	movs	r2, #127	; 0x7f
 8008390:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008394:	e008      	b.n	80083a8 <UART_Start_Receive_IT+0xa4>
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	223f      	movs	r2, #63	; 0x3f
 800839a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800839e:	e003      	b.n	80083a8 <UART_Start_Receive_IT+0xa4>
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2200      	movs	r2, #0
 80083a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2200      	movs	r2, #0
 80083ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2222      	movs	r2, #34	; 0x22
 80083b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	3308      	adds	r3, #8
 80083be:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083c2:	e853 3f00 	ldrex	r3, [r3]
 80083c6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80083c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083ca:	f043 0301 	orr.w	r3, r3, #1
 80083ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	3308      	adds	r3, #8
 80083d8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80083dc:	673a      	str	r2, [r7, #112]	; 0x70
 80083de:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80083e2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80083e4:	e841 2300 	strex	r3, r2, [r1]
 80083e8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80083ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d1e3      	bne.n	80083b8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083f8:	d14f      	bne.n	800849a <UART_Start_Receive_IT+0x196>
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008400:	88fa      	ldrh	r2, [r7, #6]
 8008402:	429a      	cmp	r2, r3
 8008404:	d349      	bcc.n	800849a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800840e:	d107      	bne.n	8008420 <UART_Start_Receive_IT+0x11c>
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	691b      	ldr	r3, [r3, #16]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d103      	bne.n	8008420 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	4a47      	ldr	r2, [pc, #284]	; (8008538 <UART_Start_Receive_IT+0x234>)
 800841c:	675a      	str	r2, [r3, #116]	; 0x74
 800841e:	e002      	b.n	8008426 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	4a46      	ldr	r2, [pc, #280]	; (800853c <UART_Start_Receive_IT+0x238>)
 8008424:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	691b      	ldr	r3, [r3, #16]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d01a      	beq.n	8008464 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008436:	e853 3f00 	ldrex	r3, [r3]
 800843a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800843c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800843e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008442:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	461a      	mov	r2, r3
 800844c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008450:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008452:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008454:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008456:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008458:	e841 2300 	strex	r3, r2, [r1]
 800845c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800845e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008460:	2b00      	cmp	r3, #0
 8008462:	d1e4      	bne.n	800842e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	3308      	adds	r3, #8
 800846a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800846e:	e853 3f00 	ldrex	r3, [r3]
 8008472:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800847a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	3308      	adds	r3, #8
 8008482:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008484:	64ba      	str	r2, [r7, #72]	; 0x48
 8008486:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008488:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800848a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800848c:	e841 2300 	strex	r3, r2, [r1]
 8008490:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008492:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008494:	2b00      	cmp	r3, #0
 8008496:	d1e5      	bne.n	8008464 <UART_Start_Receive_IT+0x160>
 8008498:	e046      	b.n	8008528 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084a2:	d107      	bne.n	80084b4 <UART_Start_Receive_IT+0x1b0>
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	691b      	ldr	r3, [r3, #16]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d103      	bne.n	80084b4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	4a24      	ldr	r2, [pc, #144]	; (8008540 <UART_Start_Receive_IT+0x23c>)
 80084b0:	675a      	str	r2, [r3, #116]	; 0x74
 80084b2:	e002      	b.n	80084ba <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	4a23      	ldr	r2, [pc, #140]	; (8008544 <UART_Start_Receive_IT+0x240>)
 80084b8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	691b      	ldr	r3, [r3, #16]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d019      	beq.n	80084f6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ca:	e853 3f00 	ldrex	r3, [r3]
 80084ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80084d6:	677b      	str	r3, [r7, #116]	; 0x74
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	461a      	mov	r2, r3
 80084de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084e0:	637b      	str	r3, [r7, #52]	; 0x34
 80084e2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80084e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084e8:	e841 2300 	strex	r3, r2, [r1]
 80084ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80084ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d1e6      	bne.n	80084c2 <UART_Start_Receive_IT+0x1be>
 80084f4:	e018      	b.n	8008528 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	e853 3f00 	ldrex	r3, [r3]
 8008502:	613b      	str	r3, [r7, #16]
   return(result);
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	f043 0320 	orr.w	r3, r3, #32
 800850a:	67bb      	str	r3, [r7, #120]	; 0x78
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	461a      	mov	r2, r3
 8008512:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008514:	623b      	str	r3, [r7, #32]
 8008516:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008518:	69f9      	ldr	r1, [r7, #28]
 800851a:	6a3a      	ldr	r2, [r7, #32]
 800851c:	e841 2300 	strex	r3, r2, [r1]
 8008520:	61bb      	str	r3, [r7, #24]
   return(result);
 8008522:	69bb      	ldr	r3, [r7, #24]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d1e6      	bne.n	80084f6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008528:	2300      	movs	r3, #0
}
 800852a:	4618      	mov	r0, r3
 800852c:	378c      	adds	r7, #140	; 0x8c
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr
 8008536:	bf00      	nop
 8008538:	08008f21 	.word	0x08008f21
 800853c:	08008bc1 	.word	0x08008bc1
 8008540:	08008a09 	.word	0x08008a09
 8008544:	08008851 	.word	0x08008851

08008548 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008548:	b480      	push	{r7}
 800854a:	b08f      	sub	sp, #60	; 0x3c
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008556:	6a3b      	ldr	r3, [r7, #32]
 8008558:	e853 3f00 	ldrex	r3, [r3]
 800855c:	61fb      	str	r3, [r7, #28]
   return(result);
 800855e:	69fb      	ldr	r3, [r7, #28]
 8008560:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008564:	637b      	str	r3, [r7, #52]	; 0x34
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	461a      	mov	r2, r3
 800856c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800856e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008570:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008572:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008574:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008576:	e841 2300 	strex	r3, r2, [r1]
 800857a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800857c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857e:	2b00      	cmp	r3, #0
 8008580:	d1e6      	bne.n	8008550 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	3308      	adds	r3, #8
 8008588:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	e853 3f00 	ldrex	r3, [r3]
 8008590:	60bb      	str	r3, [r7, #8]
   return(result);
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008598:	633b      	str	r3, [r7, #48]	; 0x30
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	3308      	adds	r3, #8
 80085a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085a2:	61ba      	str	r2, [r7, #24]
 80085a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a6:	6979      	ldr	r1, [r7, #20]
 80085a8:	69ba      	ldr	r2, [r7, #24]
 80085aa:	e841 2300 	strex	r3, r2, [r1]
 80085ae:	613b      	str	r3, [r7, #16]
   return(result);
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d1e5      	bne.n	8008582 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2220      	movs	r2, #32
 80085ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80085be:	bf00      	nop
 80085c0:	373c      	adds	r7, #60	; 0x3c
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr

080085ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80085ca:	b480      	push	{r7}
 80085cc:	b095      	sub	sp, #84	; 0x54
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085da:	e853 3f00 	ldrex	r3, [r3]
 80085de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80085e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	461a      	mov	r2, r3
 80085ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085f0:	643b      	str	r3, [r7, #64]	; 0x40
 80085f2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80085f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80085f8:	e841 2300 	strex	r3, r2, [r1]
 80085fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80085fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008600:	2b00      	cmp	r3, #0
 8008602:	d1e6      	bne.n	80085d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	3308      	adds	r3, #8
 800860a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860c:	6a3b      	ldr	r3, [r7, #32]
 800860e:	e853 3f00 	ldrex	r3, [r3]
 8008612:	61fb      	str	r3, [r7, #28]
   return(result);
 8008614:	69fb      	ldr	r3, [r7, #28]
 8008616:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800861a:	f023 0301 	bic.w	r3, r3, #1
 800861e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	3308      	adds	r3, #8
 8008626:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008628:	62fa      	str	r2, [r7, #44]	; 0x2c
 800862a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800862e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008630:	e841 2300 	strex	r3, r2, [r1]
 8008634:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1e3      	bne.n	8008604 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008640:	2b01      	cmp	r3, #1
 8008642:	d118      	bne.n	8008676 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	e853 3f00 	ldrex	r3, [r3]
 8008650:	60bb      	str	r3, [r7, #8]
   return(result);
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	f023 0310 	bic.w	r3, r3, #16
 8008658:	647b      	str	r3, [r7, #68]	; 0x44
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	461a      	mov	r2, r3
 8008660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008662:	61bb      	str	r3, [r7, #24]
 8008664:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008666:	6979      	ldr	r1, [r7, #20]
 8008668:	69ba      	ldr	r2, [r7, #24]
 800866a:	e841 2300 	strex	r3, r2, [r1]
 800866e:	613b      	str	r3, [r7, #16]
   return(result);
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d1e6      	bne.n	8008644 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2220      	movs	r2, #32
 800867a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	675a      	str	r2, [r3, #116]	; 0x74
}
 800868a:	bf00      	nop
 800868c:	3754      	adds	r7, #84	; 0x54
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr

08008696 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008696:	b580      	push	{r7, lr}
 8008698:	b090      	sub	sp, #64	; 0x40
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f003 0320 	and.w	r3, r3, #32
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d137      	bne.n	8008722 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80086b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086b4:	2200      	movs	r2, #0
 80086b6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80086ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	3308      	adds	r3, #8
 80086c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c4:	e853 3f00 	ldrex	r3, [r3]
 80086c8:	623b      	str	r3, [r7, #32]
   return(result);
 80086ca:	6a3b      	ldr	r3, [r7, #32]
 80086cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80086d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	3308      	adds	r3, #8
 80086d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086da:	633a      	str	r2, [r7, #48]	; 0x30
 80086dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086e2:	e841 2300 	strex	r3, r2, [r1]
 80086e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80086e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d1e5      	bne.n	80086ba <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80086ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	e853 3f00 	ldrex	r3, [r3]
 80086fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008702:	637b      	str	r3, [r7, #52]	; 0x34
 8008704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	461a      	mov	r2, r3
 800870a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800870c:	61fb      	str	r3, [r7, #28]
 800870e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008710:	69b9      	ldr	r1, [r7, #24]
 8008712:	69fa      	ldr	r2, [r7, #28]
 8008714:	e841 2300 	strex	r3, r2, [r1]
 8008718:	617b      	str	r3, [r7, #20]
   return(result);
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d1e6      	bne.n	80086ee <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008720:	e002      	b.n	8008728 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008722:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008724:	f7f9 ff74 	bl	8002610 <HAL_UART_TxCpltCallback>
}
 8008728:	bf00      	nop
 800872a:	3740      	adds	r7, #64	; 0x40
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800873c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800873e:	68f8      	ldr	r0, [r7, #12]
 8008740:	f7ff f9e4 	bl	8007b0c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008744:	bf00      	nop
 8008746:	3710      	adds	r7, #16
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b086      	sub	sp, #24
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008758:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008760:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008768:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008774:	2b80      	cmp	r3, #128	; 0x80
 8008776:	d109      	bne.n	800878c <UART_DMAError+0x40>
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	2b21      	cmp	r3, #33	; 0x21
 800877c:	d106      	bne.n	800878c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	2200      	movs	r2, #0
 8008782:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008786:	6978      	ldr	r0, [r7, #20]
 8008788:	f7ff fede 	bl	8008548 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008796:	2b40      	cmp	r3, #64	; 0x40
 8008798:	d109      	bne.n	80087ae <UART_DMAError+0x62>
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2b22      	cmp	r3, #34	; 0x22
 800879e:	d106      	bne.n	80087ae <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	2200      	movs	r2, #0
 80087a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80087a8:	6978      	ldr	r0, [r7, #20]
 80087aa:	f7ff ff0e 	bl	80085ca <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087b4:	f043 0210 	orr.w	r2, r3, #16
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087be:	6978      	ldr	r0, [r7, #20]
 80087c0:	f7ff f9ae 	bl	8007b20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087c4:	bf00      	nop
 80087c6:	3718      	adds	r7, #24
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2200      	movs	r2, #0
 80087de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2200      	movs	r2, #0
 80087e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087ea:	68f8      	ldr	r0, [r7, #12]
 80087ec:	f7ff f998 	bl	8007b20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087f0:	bf00      	nop
 80087f2:	3710      	adds	r7, #16
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b088      	sub	sp, #32
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	e853 3f00 	ldrex	r3, [r3]
 800880c:	60bb      	str	r3, [r7, #8]
   return(result);
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008814:	61fb      	str	r3, [r7, #28]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	461a      	mov	r2, r3
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	61bb      	str	r3, [r7, #24]
 8008820:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008822:	6979      	ldr	r1, [r7, #20]
 8008824:	69ba      	ldr	r2, [r7, #24]
 8008826:	e841 2300 	strex	r3, r2, [r1]
 800882a:	613b      	str	r3, [r7, #16]
   return(result);
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d1e6      	bne.n	8008800 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2220      	movs	r2, #32
 8008836:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f7f9 fee5 	bl	8002610 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008846:	bf00      	nop
 8008848:	3720      	adds	r7, #32
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
	...

08008850 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b09c      	sub	sp, #112	; 0x70
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800885e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008868:	2b22      	cmp	r3, #34	; 0x22
 800886a:	f040 80be 	bne.w	80089ea <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008874:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008878:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800887c:	b2d9      	uxtb	r1, r3
 800887e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008882:	b2da      	uxtb	r2, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008888:	400a      	ands	r2, r1
 800888a:	b2d2      	uxtb	r2, r2
 800888c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008892:	1c5a      	adds	r2, r3, #1
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800889e:	b29b      	uxth	r3, r3
 80088a0:	3b01      	subs	r3, #1
 80088a2:	b29a      	uxth	r2, r3
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	f040 80a1 	bne.w	80089fa <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088c0:	e853 3f00 	ldrex	r3, [r3]
 80088c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80088c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	461a      	mov	r2, r3
 80088d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80088d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80088d8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80088dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80088de:	e841 2300 	strex	r3, r2, [r1]
 80088e2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80088e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d1e6      	bne.n	80088b8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	3308      	adds	r3, #8
 80088f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f4:	e853 3f00 	ldrex	r3, [r3]
 80088f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80088fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088fc:	f023 0301 	bic.w	r3, r3, #1
 8008900:	667b      	str	r3, [r7, #100]	; 0x64
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	3308      	adds	r3, #8
 8008908:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800890a:	647a      	str	r2, [r7, #68]	; 0x44
 800890c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800890e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008910:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008912:	e841 2300 	strex	r3, r2, [r1]
 8008916:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800891a:	2b00      	cmp	r3, #0
 800891c:	d1e5      	bne.n	80088ea <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2220      	movs	r2, #32
 8008922:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2200      	movs	r2, #0
 8008930:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a33      	ldr	r2, [pc, #204]	; (8008a04 <UART_RxISR_8BIT+0x1b4>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d01f      	beq.n	800897c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008946:	2b00      	cmp	r3, #0
 8008948:	d018      	beq.n	800897c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008952:	e853 3f00 	ldrex	r3, [r3]
 8008956:	623b      	str	r3, [r7, #32]
   return(result);
 8008958:	6a3b      	ldr	r3, [r7, #32]
 800895a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800895e:	663b      	str	r3, [r7, #96]	; 0x60
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	461a      	mov	r2, r3
 8008966:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008968:	633b      	str	r3, [r7, #48]	; 0x30
 800896a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800896e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008970:	e841 2300 	strex	r3, r2, [r1]
 8008974:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008978:	2b00      	cmp	r3, #0
 800897a:	d1e6      	bne.n	800894a <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008980:	2b01      	cmp	r3, #1
 8008982:	d12e      	bne.n	80089e2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	e853 3f00 	ldrex	r3, [r3]
 8008996:	60fb      	str	r3, [r7, #12]
   return(result);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f023 0310 	bic.w	r3, r3, #16
 800899e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	461a      	mov	r2, r3
 80089a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089a8:	61fb      	str	r3, [r7, #28]
 80089aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ac:	69b9      	ldr	r1, [r7, #24]
 80089ae:	69fa      	ldr	r2, [r7, #28]
 80089b0:	e841 2300 	strex	r3, r2, [r1]
 80089b4:	617b      	str	r3, [r7, #20]
   return(result);
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1e6      	bne.n	800898a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	69db      	ldr	r3, [r3, #28]
 80089c2:	f003 0310 	and.w	r3, r3, #16
 80089c6:	2b10      	cmp	r3, #16
 80089c8:	d103      	bne.n	80089d2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2210      	movs	r2, #16
 80089d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80089d8:	4619      	mov	r1, r3
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f7ff f8aa 	bl	8007b34 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80089e0:	e00b      	b.n	80089fa <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f7f9 fdf6 	bl	80025d4 <HAL_UART_RxCpltCallback>
}
 80089e8:	e007      	b.n	80089fa <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	699a      	ldr	r2, [r3, #24]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f042 0208 	orr.w	r2, r2, #8
 80089f8:	619a      	str	r2, [r3, #24]
}
 80089fa:	bf00      	nop
 80089fc:	3770      	adds	r7, #112	; 0x70
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	40008000 	.word	0x40008000

08008a08 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b09c      	sub	sp, #112	; 0x70
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008a16:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a20:	2b22      	cmp	r3, #34	; 0x22
 8008a22:	f040 80be 	bne.w	8008ba2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a2c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a34:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008a36:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008a3a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008a3e:	4013      	ands	r3, r2
 8008a40:	b29a      	uxth	r2, r3
 8008a42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a44:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a4a:	1c9a      	adds	r2, r3, #2
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	3b01      	subs	r3, #1
 8008a5a:	b29a      	uxth	r2, r3
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	f040 80a1 	bne.w	8008bb2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a78:	e853 3f00 	ldrex	r3, [r3]
 8008a7c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008a7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a84:	667b      	str	r3, [r7, #100]	; 0x64
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a8e:	657b      	str	r3, [r7, #84]	; 0x54
 8008a90:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a92:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008a94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008a96:	e841 2300 	strex	r3, r2, [r1]
 8008a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d1e6      	bne.n	8008a70 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	3308      	adds	r3, #8
 8008aa8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aac:	e853 3f00 	ldrex	r3, [r3]
 8008ab0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab4:	f023 0301 	bic.w	r3, r3, #1
 8008ab8:	663b      	str	r3, [r7, #96]	; 0x60
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	3308      	adds	r3, #8
 8008ac0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008ac2:	643a      	str	r2, [r7, #64]	; 0x40
 8008ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ac8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008aca:	e841 2300 	strex	r3, r2, [r1]
 8008ace:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d1e5      	bne.n	8008aa2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2220      	movs	r2, #32
 8008ada:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a33      	ldr	r2, [pc, #204]	; (8008bbc <UART_RxISR_16BIT+0x1b4>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d01f      	beq.n	8008b34 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d018      	beq.n	8008b34 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b08:	6a3b      	ldr	r3, [r7, #32]
 8008b0a:	e853 3f00 	ldrex	r3, [r3]
 8008b0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b10:	69fb      	ldr	r3, [r7, #28]
 8008b12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008b16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b22:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b28:	e841 2300 	strex	r3, r2, [r1]
 8008b2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d1e6      	bne.n	8008b02 <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d12e      	bne.n	8008b9a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	e853 3f00 	ldrex	r3, [r3]
 8008b4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	f023 0310 	bic.w	r3, r3, #16
 8008b56:	65bb      	str	r3, [r7, #88]	; 0x58
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b60:	61bb      	str	r3, [r7, #24]
 8008b62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b64:	6979      	ldr	r1, [r7, #20]
 8008b66:	69ba      	ldr	r2, [r7, #24]
 8008b68:	e841 2300 	strex	r3, r2, [r1]
 8008b6c:	613b      	str	r3, [r7, #16]
   return(result);
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d1e6      	bne.n	8008b42 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	69db      	ldr	r3, [r3, #28]
 8008b7a:	f003 0310 	and.w	r3, r3, #16
 8008b7e:	2b10      	cmp	r3, #16
 8008b80:	d103      	bne.n	8008b8a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	2210      	movs	r2, #16
 8008b88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008b90:	4619      	mov	r1, r3
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f7fe ffce 	bl	8007b34 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b98:	e00b      	b.n	8008bb2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f7f9 fd1a 	bl	80025d4 <HAL_UART_RxCpltCallback>
}
 8008ba0:	e007      	b.n	8008bb2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	699a      	ldr	r2, [r3, #24]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f042 0208 	orr.w	r2, r2, #8
 8008bb0:	619a      	str	r2, [r3, #24]
}
 8008bb2:	bf00      	nop
 8008bb4:	3770      	adds	r7, #112	; 0x70
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	40008000 	.word	0x40008000

08008bc0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b0ac      	sub	sp, #176	; 0xb0
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008bce:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	69db      	ldr	r3, [r3, #28]
 8008bd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bf6:	2b22      	cmp	r3, #34	; 0x22
 8008bf8:	f040 8182 	bne.w	8008f00 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008c02:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008c06:	e125      	b.n	8008e54 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c0e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008c12:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8008c16:	b2d9      	uxtb	r1, r3
 8008c18:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008c1c:	b2da      	uxtb	r2, r3
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c22:	400a      	ands	r2, r1
 8008c24:	b2d2      	uxtb	r2, r2
 8008c26:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c2c:	1c5a      	adds	r2, r3, #1
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	3b01      	subs	r3, #1
 8008c3c:	b29a      	uxth	r2, r3
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	69db      	ldr	r3, [r3, #28]
 8008c4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008c4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c52:	f003 0307 	and.w	r3, r3, #7
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d053      	beq.n	8008d02 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c5e:	f003 0301 	and.w	r3, r3, #1
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d011      	beq.n	8008c8a <UART_RxISR_8BIT_FIFOEN+0xca>
 8008c66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d00b      	beq.n	8008c8a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	2201      	movs	r2, #1
 8008c78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c80:	f043 0201 	orr.w	r2, r3, #1
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c8e:	f003 0302 	and.w	r3, r3, #2
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d011      	beq.n	8008cba <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008c96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008c9a:	f003 0301 	and.w	r3, r3, #1
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d00b      	beq.n	8008cba <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	2202      	movs	r2, #2
 8008ca8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cb0:	f043 0204 	orr.w	r2, r3, #4
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008cba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008cbe:	f003 0304 	and.w	r3, r3, #4
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d011      	beq.n	8008cea <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008cc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008cca:	f003 0301 	and.w	r3, r3, #1
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d00b      	beq.n	8008cea <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	2204      	movs	r2, #4
 8008cd8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ce0:	f043 0202 	orr.w	r2, r3, #2
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d006      	beq.n	8008d02 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f7fe ff13 	bl	8007b20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	f040 80a2 	bne.w	8008e54 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d18:	e853 3f00 	ldrex	r3, [r3]
 8008d1c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8008d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	461a      	mov	r2, r3
 8008d2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d32:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008d34:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d36:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008d38:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008d3a:	e841 2300 	strex	r3, r2, [r1]
 8008d3e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8008d40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d1e4      	bne.n	8008d10 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	3308      	adds	r3, #8
 8008d4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d50:	e853 3f00 	ldrex	r3, [r3]
 8008d54:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008d56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d5c:	f023 0301 	bic.w	r3, r3, #1
 8008d60:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	3308      	adds	r3, #8
 8008d6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008d6e:	66ba      	str	r2, [r7, #104]	; 0x68
 8008d70:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d72:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008d74:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008d76:	e841 2300 	strex	r3, r2, [r1]
 8008d7a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008d7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d1e1      	bne.n	8008d46 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2220      	movs	r2, #32
 8008d86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a5f      	ldr	r2, [pc, #380]	; (8008f18 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d021      	beq.n	8008de4 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d01a      	beq.n	8008de4 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008db6:	e853 3f00 	ldrex	r3, [r3]
 8008dba:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008dbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dbe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008dc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	461a      	mov	r2, r3
 8008dcc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008dd0:	657b      	str	r3, [r7, #84]	; 0x54
 8008dd2:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008dd6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008dd8:	e841 2300 	strex	r3, r2, [r1]
 8008ddc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d1e4      	bne.n	8008dae <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d130      	bne.n	8008e4e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dfa:	e853 3f00 	ldrex	r3, [r3]
 8008dfe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e02:	f023 0310 	bic.w	r3, r3, #16
 8008e06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	461a      	mov	r2, r3
 8008e10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008e14:	643b      	str	r3, [r7, #64]	; 0x40
 8008e16:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e1c:	e841 2300 	strex	r3, r2, [r1]
 8008e20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d1e4      	bne.n	8008df2 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	69db      	ldr	r3, [r3, #28]
 8008e2e:	f003 0310 	and.w	r3, r3, #16
 8008e32:	2b10      	cmp	r3, #16
 8008e34:	d103      	bne.n	8008e3e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	2210      	movs	r2, #16
 8008e3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008e44:	4619      	mov	r1, r3
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f7fe fe74 	bl	8007b34 <HAL_UARTEx_RxEventCallback>
 8008e4c:	e002      	b.n	8008e54 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f7f9 fbc0 	bl	80025d4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008e54:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d006      	beq.n	8008e6a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008e5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008e60:	f003 0320 	and.w	r3, r3, #32
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	f47f aecf 	bne.w	8008c08 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e70:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008e74:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d049      	beq.n	8008f10 <UART_RxISR_8BIT_FIFOEN+0x350>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008e82:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d242      	bcs.n	8008f10 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	3308      	adds	r3, #8
 8008e90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e92:	6a3b      	ldr	r3, [r7, #32]
 8008e94:	e853 3f00 	ldrex	r3, [r3]
 8008e98:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ea0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	3308      	adds	r3, #8
 8008eaa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008eae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008eb0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008eb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008eb6:	e841 2300 	strex	r3, r2, [r1]
 8008eba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d1e3      	bne.n	8008e8a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	4a15      	ldr	r2, [pc, #84]	; (8008f1c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008ec6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	e853 3f00 	ldrex	r3, [r3]
 8008ed4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	f043 0320 	orr.w	r3, r3, #32
 8008edc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008eea:	61bb      	str	r3, [r7, #24]
 8008eec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eee:	6979      	ldr	r1, [r7, #20]
 8008ef0:	69ba      	ldr	r2, [r7, #24]
 8008ef2:	e841 2300 	strex	r3, r2, [r1]
 8008ef6:	613b      	str	r3, [r7, #16]
   return(result);
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d1e4      	bne.n	8008ec8 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008efe:	e007      	b.n	8008f10 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	699a      	ldr	r2, [r3, #24]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f042 0208 	orr.w	r2, r2, #8
 8008f0e:	619a      	str	r2, [r3, #24]
}
 8008f10:	bf00      	nop
 8008f12:	37b0      	adds	r7, #176	; 0xb0
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}
 8008f18:	40008000 	.word	0x40008000
 8008f1c:	08008851 	.word	0x08008851

08008f20 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b0ae      	sub	sp, #184	; 0xb8
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008f2e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	69db      	ldr	r3, [r3, #28]
 8008f38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f56:	2b22      	cmp	r3, #34	; 0x22
 8008f58:	f040 8186 	bne.w	8009268 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008f62:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008f66:	e129      	b.n	80091bc <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f6e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008f7a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8008f7e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008f82:	4013      	ands	r3, r2
 8008f84:	b29a      	uxth	r2, r3
 8008f86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008f8a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f90:	1c9a      	adds	r2, r3, #2
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	3b01      	subs	r3, #1
 8008fa0:	b29a      	uxth	r2, r3
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	69db      	ldr	r3, [r3, #28]
 8008fae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008fb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008fb6:	f003 0307 	and.w	r3, r3, #7
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d053      	beq.n	8009066 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008fbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008fc2:	f003 0301 	and.w	r3, r3, #1
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d011      	beq.n	8008fee <UART_RxISR_16BIT_FIFOEN+0xce>
 8008fca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d00b      	beq.n	8008fee <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fe4:	f043 0201 	orr.w	r2, r3, #1
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008fee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008ff2:	f003 0302 	and.w	r3, r3, #2
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d011      	beq.n	800901e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008ffa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008ffe:	f003 0301 	and.w	r3, r3, #1
 8009002:	2b00      	cmp	r3, #0
 8009004:	d00b      	beq.n	800901e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	2202      	movs	r2, #2
 800900c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009014:	f043 0204 	orr.w	r2, r3, #4
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800901e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009022:	f003 0304 	and.w	r3, r3, #4
 8009026:	2b00      	cmp	r3, #0
 8009028:	d011      	beq.n	800904e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800902a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800902e:	f003 0301 	and.w	r3, r3, #1
 8009032:	2b00      	cmp	r3, #0
 8009034:	d00b      	beq.n	800904e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	2204      	movs	r2, #4
 800903c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009044:	f043 0202 	orr.w	r2, r3, #2
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009054:	2b00      	cmp	r3, #0
 8009056:	d006      	beq.n	8009066 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f7fe fd61 	bl	8007b20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2200      	movs	r2, #0
 8009062:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800906c:	b29b      	uxth	r3, r3
 800906e:	2b00      	cmp	r3, #0
 8009070:	f040 80a4 	bne.w	80091bc <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800907a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800907c:	e853 3f00 	ldrex	r3, [r3]
 8009080:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009082:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009084:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009088:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	461a      	mov	r2, r3
 8009092:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009096:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800909a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800909e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80090a2:	e841 2300 	strex	r3, r2, [r1]
 80090a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80090a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d1e2      	bne.n	8009074 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	3308      	adds	r3, #8
 80090b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090b8:	e853 3f00 	ldrex	r3, [r3]
 80090bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80090be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80090c4:	f023 0301 	bic.w	r3, r3, #1
 80090c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	3308      	adds	r3, #8
 80090d2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80090d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80090d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80090dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80090de:	e841 2300 	strex	r3, r2, [r1]
 80090e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80090e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d1e1      	bne.n	80090ae <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2220      	movs	r2, #32
 80090ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2200      	movs	r2, #0
 80090f6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4a5f      	ldr	r2, [pc, #380]	; (8009280 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d021      	beq.n	800914c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009112:	2b00      	cmp	r3, #0
 8009114:	d01a      	beq.n	800914c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800911c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800911e:	e853 3f00 	ldrex	r3, [r3]
 8009122:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009126:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800912a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	461a      	mov	r2, r3
 8009134:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009138:	65bb      	str	r3, [r7, #88]	; 0x58
 800913a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800913c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800913e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009140:	e841 2300 	strex	r3, r2, [r1]
 8009144:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009148:	2b00      	cmp	r3, #0
 800914a:	d1e4      	bne.n	8009116 <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009150:	2b01      	cmp	r3, #1
 8009152:	d130      	bne.n	80091b6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009162:	e853 3f00 	ldrex	r3, [r3]
 8009166:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800916a:	f023 0310 	bic.w	r3, r3, #16
 800916e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	461a      	mov	r2, r3
 8009178:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800917c:	647b      	str	r3, [r7, #68]	; 0x44
 800917e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009180:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009182:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009184:	e841 2300 	strex	r3, r2, [r1]
 8009188:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800918a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800918c:	2b00      	cmp	r3, #0
 800918e:	d1e4      	bne.n	800915a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	69db      	ldr	r3, [r3, #28]
 8009196:	f003 0310 	and.w	r3, r3, #16
 800919a:	2b10      	cmp	r3, #16
 800919c:	d103      	bne.n	80091a6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	2210      	movs	r2, #16
 80091a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80091ac:	4619      	mov	r1, r3
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f7fe fcc0 	bl	8007b34 <HAL_UARTEx_RxEventCallback>
 80091b4:	e002      	b.n	80091bc <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f7f9 fa0c 	bl	80025d4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80091bc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d006      	beq.n	80091d2 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80091c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80091c8:	f003 0320 	and.w	r3, r3, #32
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	f47f aecb 	bne.w	8008f68 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091d8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80091dc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d049      	beq.n	8009278 <UART_RxISR_16BIT_FIFOEN+0x358>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80091ea:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80091ee:	429a      	cmp	r2, r3
 80091f0:	d242      	bcs.n	8009278 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	3308      	adds	r3, #8
 80091f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fc:	e853 3f00 	ldrex	r3, [r3]
 8009200:	623b      	str	r3, [r7, #32]
   return(result);
 8009202:	6a3b      	ldr	r3, [r7, #32]
 8009204:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009208:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	3308      	adds	r3, #8
 8009212:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009216:	633a      	str	r2, [r7, #48]	; 0x30
 8009218:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800921a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800921c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800921e:	e841 2300 	strex	r3, r2, [r1]
 8009222:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009226:	2b00      	cmp	r3, #0
 8009228:	d1e3      	bne.n	80091f2 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	4a15      	ldr	r2, [pc, #84]	; (8009284 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800922e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	e853 3f00 	ldrex	r3, [r3]
 800923c:	60fb      	str	r3, [r7, #12]
   return(result);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	f043 0320 	orr.w	r3, r3, #32
 8009244:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	461a      	mov	r2, r3
 800924e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009252:	61fb      	str	r3, [r7, #28]
 8009254:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009256:	69b9      	ldr	r1, [r7, #24]
 8009258:	69fa      	ldr	r2, [r7, #28]
 800925a:	e841 2300 	strex	r3, r2, [r1]
 800925e:	617b      	str	r3, [r7, #20]
   return(result);
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d1e4      	bne.n	8009230 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009266:	e007      	b.n	8009278 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	699a      	ldr	r2, [r3, #24]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f042 0208 	orr.w	r2, r2, #8
 8009276:	619a      	str	r2, [r3, #24]
}
 8009278:	bf00      	nop
 800927a:	37b8      	adds	r7, #184	; 0xb8
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}
 8009280:	40008000 	.word	0x40008000
 8009284:	08008a09 	.word	0x08008a09

08009288 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009290:	bf00      	nop
 8009292:	370c      	adds	r7, #12
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr

0800929c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800929c:	b480      	push	{r7}
 800929e:	b083      	sub	sp, #12
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80092a4:	bf00      	nop
 80092a6:	370c      	adds	r7, #12
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr

080092b0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b083      	sub	sp, #12
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80092b8:	bf00      	nop
 80092ba:	370c      	adds	r7, #12
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b085      	sub	sp, #20
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d101      	bne.n	80092da <HAL_UARTEx_DisableFifoMode+0x16>
 80092d6:	2302      	movs	r3, #2
 80092d8:	e027      	b.n	800932a <HAL_UARTEx_DisableFifoMode+0x66>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2201      	movs	r2, #1
 80092de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2224      	movs	r2, #36	; 0x24
 80092e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f022 0201 	bic.w	r2, r2, #1
 8009300:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009308:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	68fa      	ldr	r2, [r7, #12]
 8009316:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2220      	movs	r2, #32
 800931c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009328:	2300      	movs	r3, #0
}
 800932a:	4618      	mov	r0, r3
 800932c:	3714      	adds	r7, #20
 800932e:	46bd      	mov	sp, r7
 8009330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009334:	4770      	bx	lr

08009336 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009336:	b580      	push	{r7, lr}
 8009338:	b084      	sub	sp, #16
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
 800933e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009346:	2b01      	cmp	r3, #1
 8009348:	d101      	bne.n	800934e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800934a:	2302      	movs	r3, #2
 800934c:	e02d      	b.n	80093aa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2201      	movs	r2, #1
 8009352:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2224      	movs	r2, #36	; 0x24
 800935a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f022 0201 	bic.w	r2, r2, #1
 8009374:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	683a      	ldr	r2, [r7, #0]
 8009386:	430a      	orrs	r2, r1
 8009388:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 f850 	bl	8009430 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	68fa      	ldr	r2, [r7, #12]
 8009396:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2220      	movs	r2, #32
 800939c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80093a8:	2300      	movs	r3, #0
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3710      	adds	r7, #16
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80093b2:	b580      	push	{r7, lr}
 80093b4:	b084      	sub	sp, #16
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
 80093ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d101      	bne.n	80093ca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80093c6:	2302      	movs	r3, #2
 80093c8:	e02d      	b.n	8009426 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2201      	movs	r2, #1
 80093ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2224      	movs	r2, #36	; 0x24
 80093d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f022 0201 	bic.w	r2, r2, #1
 80093f0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	689b      	ldr	r3, [r3, #8]
 80093f8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	683a      	ldr	r2, [r7, #0]
 8009402:	430a      	orrs	r2, r1
 8009404:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 f812 	bl	8009430 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	68fa      	ldr	r2, [r7, #12]
 8009412:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2220      	movs	r2, #32
 8009418:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2200      	movs	r2, #0
 8009420:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009424:	2300      	movs	r3, #0
}
 8009426:	4618      	mov	r0, r3
 8009428:	3710      	adds	r7, #16
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
	...

08009430 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009430:	b480      	push	{r7}
 8009432:	b085      	sub	sp, #20
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800943c:	2b00      	cmp	r3, #0
 800943e:	d108      	bne.n	8009452 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2201      	movs	r2, #1
 8009444:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2201      	movs	r2, #1
 800944c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009450:	e031      	b.n	80094b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009452:	2308      	movs	r3, #8
 8009454:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009456:	2308      	movs	r3, #8
 8009458:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	0e5b      	lsrs	r3, r3, #25
 8009462:	b2db      	uxtb	r3, r3
 8009464:	f003 0307 	and.w	r3, r3, #7
 8009468:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	0f5b      	lsrs	r3, r3, #29
 8009472:	b2db      	uxtb	r3, r3
 8009474:	f003 0307 	and.w	r3, r3, #7
 8009478:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800947a:	7bbb      	ldrb	r3, [r7, #14]
 800947c:	7b3a      	ldrb	r2, [r7, #12]
 800947e:	4911      	ldr	r1, [pc, #68]	; (80094c4 <UARTEx_SetNbDataToProcess+0x94>)
 8009480:	5c8a      	ldrb	r2, [r1, r2]
 8009482:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009486:	7b3a      	ldrb	r2, [r7, #12]
 8009488:	490f      	ldr	r1, [pc, #60]	; (80094c8 <UARTEx_SetNbDataToProcess+0x98>)
 800948a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800948c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009490:	b29a      	uxth	r2, r3
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009498:	7bfb      	ldrb	r3, [r7, #15]
 800949a:	7b7a      	ldrb	r2, [r7, #13]
 800949c:	4909      	ldr	r1, [pc, #36]	; (80094c4 <UARTEx_SetNbDataToProcess+0x94>)
 800949e:	5c8a      	ldrb	r2, [r1, r2]
 80094a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80094a4:	7b7a      	ldrb	r2, [r7, #13]
 80094a6:	4908      	ldr	r1, [pc, #32]	; (80094c8 <UARTEx_SetNbDataToProcess+0x98>)
 80094a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80094aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80094ae:	b29a      	uxth	r2, r3
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80094b6:	bf00      	nop
 80094b8:	3714      	adds	r7, #20
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr
 80094c2:	bf00      	nop
 80094c4:	08010c64 	.word	0x08010c64
 80094c8:	08010c6c 	.word	0x08010c6c

080094cc <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b088      	sub	sp, #32
 80094d0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80094d2:	2300      	movs	r3, #0
 80094d4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80094d6:	f107 0308 	add.w	r3, r7, #8
 80094da:	2218      	movs	r2, #24
 80094dc:	2100      	movs	r1, #0
 80094de:	4618      	mov	r0, r3
 80094e0:	f001 fc9c 	bl	800ae1c <Osal_MemSet>
  rq.ogf = 0x3f;
 80094e4:	233f      	movs	r3, #63	; 0x3f
 80094e6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80094e8:	2381      	movs	r3, #129	; 0x81
 80094ea:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80094ec:	1dfb      	adds	r3, r7, #7
 80094ee:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80094f0:	2301      	movs	r3, #1
 80094f2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80094f4:	f107 0308 	add.w	r3, r7, #8
 80094f8:	2100      	movs	r1, #0
 80094fa:	4618      	mov	r0, r3
 80094fc:	f001 fb4c 	bl	800ab98 <hci_send_req>
 8009500:	4603      	mov	r3, r0
 8009502:	2b00      	cmp	r3, #0
 8009504:	da01      	bge.n	800950a <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009506:	23ff      	movs	r3, #255	; 0xff
 8009508:	e000      	b.n	800950c <aci_gap_set_non_discoverable+0x40>
  return status;
 800950a:	79fb      	ldrb	r3, [r7, #7]
}
 800950c:	4618      	mov	r0, r3
 800950e:	3720      	adds	r7, #32
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8009514:	b5b0      	push	{r4, r5, r7, lr}
 8009516:	b0ce      	sub	sp, #312	; 0x138
 8009518:	af00      	add	r7, sp, #0
 800951a:	4605      	mov	r5, r0
 800951c:	460c      	mov	r4, r1
 800951e:	4610      	mov	r0, r2
 8009520:	4619      	mov	r1, r3
 8009522:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009526:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800952a:	462a      	mov	r2, r5
 800952c:	701a      	strb	r2, [r3, #0]
 800952e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009532:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009536:	4622      	mov	r2, r4
 8009538:	801a      	strh	r2, [r3, #0]
 800953a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800953e:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8009542:	4602      	mov	r2, r0
 8009544:	801a      	strh	r2, [r3, #0]
 8009546:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800954a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800954e:	460a      	mov	r2, r1
 8009550:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8009552:	f107 0310 	add.w	r3, r7, #16
 8009556:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800955a:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800955e:	3308      	adds	r3, #8
 8009560:	f107 0210 	add.w	r2, r7, #16
 8009564:	4413      	add	r3, r2
 8009566:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800956a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800956e:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8009572:	4413      	add	r3, r2
 8009574:	3309      	adds	r3, #9
 8009576:	f107 0210 	add.w	r2, r7, #16
 800957a:	4413      	add	r3, r2
 800957c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009580:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009584:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009588:	2200      	movs	r2, #0
 800958a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800958c:	2300      	movs	r3, #0
 800958e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8009592:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009596:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800959a:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800959e:	7812      	ldrb	r2, [r2, #0]
 80095a0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80095a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095a6:	3301      	adds	r3, #1
 80095a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 80095ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80095b0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80095b4:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 80095b8:	8812      	ldrh	r2, [r2, #0]
 80095ba:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80095be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095c2:	3302      	adds	r3, #2
 80095c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 80095c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80095cc:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80095d0:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 80095d4:	8812      	ldrh	r2, [r2, #0]
 80095d6:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80095da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095de:	3302      	adds	r3, #2
 80095e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80095e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80095e8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80095ec:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80095f0:	7812      	ldrb	r2, [r2, #0]
 80095f2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80095f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095f8:	3301      	adds	r3, #1
 80095fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80095fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009602:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8009606:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8009608:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800960c:	3301      	adds	r3, #1
 800960e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8009612:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009616:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800961a:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800961c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009620:	3301      	adds	r3, #1
 8009622:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8009626:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800962a:	3308      	adds	r3, #8
 800962c:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8009630:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8009634:	4618      	mov	r0, r3
 8009636:	f001 fbe1 	bl	800adfc <Osal_MemCpy>
    index_input += Local_Name_Length;
 800963a:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800963e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009642:	4413      	add	r3, r2
 8009644:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8009648:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800964c:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8009650:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8009652:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009656:	3301      	adds	r3, #1
 8009658:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800965c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009660:	3301      	adds	r3, #1
 8009662:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8009666:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800966a:	4618      	mov	r0, r3
 800966c:	f001 fbc6 	bl	800adfc <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8009670:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8009674:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009678:	4413      	add	r3, r2
 800967a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800967e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009682:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8009686:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8009688:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800968c:	3302      	adds	r3, #2
 800968e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8009692:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009696:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800969a:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800969c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80096a0:	3302      	adds	r3, #2
 80096a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80096a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80096aa:	2218      	movs	r2, #24
 80096ac:	2100      	movs	r1, #0
 80096ae:	4618      	mov	r0, r3
 80096b0:	f001 fbb4 	bl	800ae1c <Osal_MemSet>
  rq.ogf = 0x3f;
 80096b4:	233f      	movs	r3, #63	; 0x3f
 80096b6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 80096ba:	2383      	movs	r3, #131	; 0x83
 80096bc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80096c0:	f107 0310 	add.w	r3, r7, #16
 80096c4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80096c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80096cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80096d0:	f107 030f 	add.w	r3, r7, #15
 80096d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80096d8:	2301      	movs	r3, #1
 80096da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80096de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80096e2:	2100      	movs	r1, #0
 80096e4:	4618      	mov	r0, r3
 80096e6:	f001 fa57 	bl	800ab98 <hci_send_req>
 80096ea:	4603      	mov	r3, r0
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	da01      	bge.n	80096f4 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 80096f0:	23ff      	movs	r3, #255	; 0xff
 80096f2:	e004      	b.n	80096fe <aci_gap_set_discoverable+0x1ea>
  return status;
 80096f4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80096f8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80096fc:	781b      	ldrb	r3, [r3, #0]
}
 80096fe:	4618      	mov	r0, r3
 8009700:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8009704:	46bd      	mov	sp, r7
 8009706:	bdb0      	pop	{r4, r5, r7, pc}

08009708 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b0cc      	sub	sp, #304	; 0x130
 800970c:	af00      	add	r7, sp, #0
 800970e:	4602      	mov	r2, r0
 8009710:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009714:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009718:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800971a:	f107 0310 	add.w	r3, r7, #16
 800971e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009722:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009726:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800972a:	2200      	movs	r2, #0
 800972c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800972e:	2300      	movs	r3, #0
 8009730:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8009734:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009738:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800973c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009740:	7812      	ldrb	r2, [r2, #0]
 8009742:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009744:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009748:	3301      	adds	r3, #1
 800974a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800974e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009752:	2218      	movs	r2, #24
 8009754:	2100      	movs	r1, #0
 8009756:	4618      	mov	r0, r3
 8009758:	f001 fb60 	bl	800ae1c <Osal_MemSet>
  rq.ogf = 0x3f;
 800975c:	233f      	movs	r3, #63	; 0x3f
 800975e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8009762:	2385      	movs	r3, #133	; 0x85
 8009764:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009768:	f107 0310 	add.w	r3, r7, #16
 800976c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009770:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009774:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009778:	f107 030f 	add.w	r3, r7, #15
 800977c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009780:	2301      	movs	r3, #1
 8009782:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009786:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800978a:	2100      	movs	r1, #0
 800978c:	4618      	mov	r0, r3
 800978e:	f001 fa03 	bl	800ab98 <hci_send_req>
 8009792:	4603      	mov	r3, r0
 8009794:	2b00      	cmp	r3, #0
 8009796:	da01      	bge.n	800979c <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8009798:	23ff      	movs	r3, #255	; 0xff
 800979a:	e004      	b.n	80097a6 <aci_gap_set_io_capability+0x9e>
  return status;
 800979c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097a0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80097a4:	781b      	ldrb	r3, [r3, #0]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 80097b0:	b5b0      	push	{r4, r5, r7, lr}
 80097b2:	b0cc      	sub	sp, #304	; 0x130
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	4605      	mov	r5, r0
 80097b8:	460c      	mov	r4, r1
 80097ba:	4610      	mov	r0, r2
 80097bc:	4619      	mov	r1, r3
 80097be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097c2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80097c6:	462a      	mov	r2, r5
 80097c8:	701a      	strb	r2, [r3, #0]
 80097ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097ce:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80097d2:	4622      	mov	r2, r4
 80097d4:	701a      	strb	r2, [r3, #0]
 80097d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097da:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80097de:	4602      	mov	r2, r0
 80097e0:	701a      	strb	r2, [r3, #0]
 80097e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80097ea:	460a      	mov	r2, r1
 80097ec:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 80097ee:	f107 0310 	add.w	r3, r7, #16
 80097f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80097f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097fa:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80097fe:	2200      	movs	r2, #0
 8009800:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009802:	2300      	movs	r3, #0
 8009804:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8009808:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800980c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009810:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009814:	7812      	ldrb	r2, [r2, #0]
 8009816:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009818:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800981c:	3301      	adds	r3, #1
 800981e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8009822:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009826:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800982a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800982e:	7812      	ldrb	r2, [r2, #0]
 8009830:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009832:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009836:	3301      	adds	r3, #1
 8009838:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 800983c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009840:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009844:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8009848:	7812      	ldrb	r2, [r2, #0]
 800984a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800984c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009850:	3301      	adds	r3, #1
 8009852:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8009856:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800985a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800985e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009862:	7812      	ldrb	r2, [r2, #0]
 8009864:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8009866:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800986a:	3301      	adds	r3, #1
 800986c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8009870:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009874:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8009878:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800987a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800987e:	3301      	adds	r3, #1
 8009880:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8009884:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009888:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800988c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800988e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009892:	3301      	adds	r3, #1
 8009894:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8009898:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800989c:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80098a0:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80098a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80098a6:	3301      	adds	r3, #1
 80098a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 80098ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098b0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80098b4:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 80098b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80098bc:	3304      	adds	r3, #4
 80098be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 80098c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098c6:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80098ca:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80098cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80098d0:	3301      	adds	r3, #1
 80098d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80098d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80098da:	2218      	movs	r2, #24
 80098dc:	2100      	movs	r1, #0
 80098de:	4618      	mov	r0, r3
 80098e0:	f001 fa9c 	bl	800ae1c <Osal_MemSet>
  rq.ogf = 0x3f;
 80098e4:	233f      	movs	r3, #63	; 0x3f
 80098e6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 80098ea:	2386      	movs	r3, #134	; 0x86
 80098ec:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80098f0:	f107 0310 	add.w	r3, r7, #16
 80098f4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80098f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80098fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009900:	f107 030f 	add.w	r3, r7, #15
 8009904:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009908:	2301      	movs	r3, #1
 800990a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800990e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009912:	2100      	movs	r1, #0
 8009914:	4618      	mov	r0, r3
 8009916:	f001 f93f 	bl	800ab98 <hci_send_req>
 800991a:	4603      	mov	r3, r0
 800991c:	2b00      	cmp	r3, #0
 800991e:	da01      	bge.n	8009924 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8009920:	23ff      	movs	r3, #255	; 0xff
 8009922:	e004      	b.n	800992e <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8009924:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009928:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800992c:	781b      	ldrb	r3, [r3, #0]
}
 800992e:	4618      	mov	r0, r3
 8009930:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009934:	46bd      	mov	sp, r7
 8009936:	bdb0      	pop	{r4, r5, r7, pc}

08009938 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b0cc      	sub	sp, #304	; 0x130
 800993c:	af00      	add	r7, sp, #0
 800993e:	4602      	mov	r2, r0
 8009940:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009944:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009948:	6019      	str	r1, [r3, #0]
 800994a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800994e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009952:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8009954:	f107 0310 	add.w	r3, r7, #16
 8009958:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800995c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009960:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009964:	2200      	movs	r2, #0
 8009966:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009968:	2300      	movs	r3, #0
 800996a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800996e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009972:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009976:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800997a:	8812      	ldrh	r2, [r2, #0]
 800997c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800997e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009982:	3302      	adds	r3, #2
 8009984:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8009988:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800998c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009990:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8009994:	6812      	ldr	r2, [r2, #0]
 8009996:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800999a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800999e:	3304      	adds	r3, #4
 80099a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80099a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80099a8:	2218      	movs	r2, #24
 80099aa:	2100      	movs	r1, #0
 80099ac:	4618      	mov	r0, r3
 80099ae:	f001 fa35 	bl	800ae1c <Osal_MemSet>
  rq.ogf = 0x3f;
 80099b2:	233f      	movs	r3, #63	; 0x3f
 80099b4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 80099b8:	2388      	movs	r3, #136	; 0x88
 80099ba:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80099be:	f107 0310 	add.w	r3, r7, #16
 80099c2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80099c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80099ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80099ce:	f107 030f 	add.w	r3, r7, #15
 80099d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80099d6:	2301      	movs	r3, #1
 80099d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80099dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80099e0:	2100      	movs	r1, #0
 80099e2:	4618      	mov	r0, r3
 80099e4:	f001 f8d8 	bl	800ab98 <hci_send_req>
 80099e8:	4603      	mov	r3, r0
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	da01      	bge.n	80099f2 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 80099ee:	23ff      	movs	r3, #255	; 0xff
 80099f0:	e004      	b.n	80099fc <aci_gap_pass_key_resp+0xc4>
  return status;
 80099f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099f6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80099fa:	781b      	ldrb	r3, [r3, #0]
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}

08009a06 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8009a06:	b590      	push	{r4, r7, lr}
 8009a08:	b0cd      	sub	sp, #308	; 0x134
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	4604      	mov	r4, r0
 8009a0e:	4608      	mov	r0, r1
 8009a10:	4611      	mov	r1, r2
 8009a12:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009a16:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8009a1a:	6013      	str	r3, [r2, #0]
 8009a1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a20:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009a24:	4622      	mov	r2, r4
 8009a26:	701a      	strb	r2, [r3, #0]
 8009a28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a2c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009a30:	4602      	mov	r2, r0
 8009a32:	701a      	strb	r2, [r3, #0]
 8009a34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a38:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8009a3c:	460a      	mov	r2, r1
 8009a3e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8009a40:	f107 0310 	add.w	r3, r7, #16
 8009a44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009a48:	f107 0308 	add.w	r3, r7, #8
 8009a4c:	2207      	movs	r2, #7
 8009a4e:	2100      	movs	r1, #0
 8009a50:	4618      	mov	r0, r3
 8009a52:	f001 f9e3 	bl	800ae1c <Osal_MemSet>
  int index_input = 0;
 8009a56:	2300      	movs	r3, #0
 8009a58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8009a5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a60:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009a64:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009a68:	7812      	ldrb	r2, [r2, #0]
 8009a6a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009a6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a70:	3301      	adds	r3, #1
 8009a72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8009a76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a7a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009a7e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009a82:	7812      	ldrb	r2, [r2, #0]
 8009a84:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009a86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8009a90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a94:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009a98:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8009a9c:	7812      	ldrb	r2, [r2, #0]
 8009a9e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009aa0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009aa4:	3301      	adds	r3, #1
 8009aa6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009aaa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009aae:	2218      	movs	r2, #24
 8009ab0:	2100      	movs	r1, #0
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f001 f9b2 	bl	800ae1c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009ab8:	233f      	movs	r3, #63	; 0x3f
 8009aba:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8009abe:	238a      	movs	r3, #138	; 0x8a
 8009ac0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009ac4:	f107 0310 	add.w	r3, r7, #16
 8009ac8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009acc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ad0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8009ad4:	f107 0308 	add.w	r3, r7, #8
 8009ad8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8009adc:	2307      	movs	r3, #7
 8009ade:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009ae2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009ae6:	2100      	movs	r1, #0
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f001 f855 	bl	800ab98 <hci_send_req>
 8009aee:	4603      	mov	r3, r0
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	da01      	bge.n	8009af8 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8009af4:	23ff      	movs	r3, #255	; 0xff
 8009af6:	e02e      	b.n	8009b56 <aci_gap_init+0x150>
  if ( resp.Status )
 8009af8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009afc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d005      	beq.n	8009b12 <aci_gap_init+0x10c>
    return resp.Status;
 8009b06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b0a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	e021      	b.n	8009b56 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8009b12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b16:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009b1a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009b1e:	b29a      	uxth	r2, r3
 8009b20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8009b2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b30:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009b34:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009b38:	b29a      	uxth	r2, r3
 8009b3a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009b3e:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8009b40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b44:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009b48:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8009b4c:	b29a      	uxth	r2, r3
 8009b4e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009b52:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009b54:	2300      	movs	r3, #0
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd90      	pop	{r4, r7, pc}

08009b60 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b0cc      	sub	sp, #304	; 0x130
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	4602      	mov	r2, r0
 8009b68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b70:	6019      	str	r1, [r3, #0]
 8009b72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b76:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009b7a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8009b7c:	f107 0310 	add.w	r3, r7, #16
 8009b80:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009b84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b88:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009b90:	2300      	movs	r3, #0
 8009b92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8009b96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b9a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009b9e:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009ba2:	7812      	ldrb	r2, [r2, #0]
 8009ba4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009ba6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009baa:	3301      	adds	r3, #1
 8009bac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8009bb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bb4:	1c58      	adds	r0, r3, #1
 8009bb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bba:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009bbe:	781a      	ldrb	r2, [r3, #0]
 8009bc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009bc8:	6819      	ldr	r1, [r3, #0]
 8009bca:	f001 f917 	bl	800adfc <Osal_MemCpy>
  index_input += AdvDataLen;
 8009bce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bd2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009bdc:	4413      	add	r3, r2
 8009bde:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009be2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009be6:	2218      	movs	r2, #24
 8009be8:	2100      	movs	r1, #0
 8009bea:	4618      	mov	r0, r3
 8009bec:	f001 f916 	bl	800ae1c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009bf0:	233f      	movs	r3, #63	; 0x3f
 8009bf2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8009bf6:	238e      	movs	r3, #142	; 0x8e
 8009bf8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009bfc:	f107 0310 	add.w	r3, r7, #16
 8009c00:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009c04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c08:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009c0c:	f107 030f 	add.w	r3, r7, #15
 8009c10:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009c14:	2301      	movs	r3, #1
 8009c16:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009c1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009c1e:	2100      	movs	r1, #0
 8009c20:	4618      	mov	r0, r3
 8009c22:	f000 ffb9 	bl	800ab98 <hci_send_req>
 8009c26:	4603      	mov	r3, r0
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	da01      	bge.n	8009c30 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8009c2c:	23ff      	movs	r3, #255	; 0xff
 8009c2e:	e004      	b.n	8009c3a <aci_gap_update_adv_data+0xda>
  return status;
 8009c30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c34:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009c38:	781b      	ldrb	r3, [r3, #0]
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b088      	sub	sp, #32
 8009c48:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009c4e:	f107 0308 	add.w	r3, r7, #8
 8009c52:	2218      	movs	r2, #24
 8009c54:	2100      	movs	r1, #0
 8009c56:	4618      	mov	r0, r3
 8009c58:	f001 f8e0 	bl	800ae1c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009c5c:	233f      	movs	r3, #63	; 0x3f
 8009c5e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8009c60:	2392      	movs	r3, #146	; 0x92
 8009c62:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009c64:	1dfb      	adds	r3, r7, #7
 8009c66:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009c6c:	f107 0308 	add.w	r3, r7, #8
 8009c70:	2100      	movs	r1, #0
 8009c72:	4618      	mov	r0, r3
 8009c74:	f000 ff90 	bl	800ab98 <hci_send_req>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	da01      	bge.n	8009c82 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009c7e:	23ff      	movs	r3, #255	; 0xff
 8009c80:	e000      	b.n	8009c84 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8009c82:	79fb      	ldrb	r3, [r7, #7]
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3720      	adds	r7, #32
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <aci_gap_allow_rebond>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_allow_rebond( uint16_t Connection_Handle )
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b0cc      	sub	sp, #304	; 0x130
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	4602      	mov	r2, r0
 8009c94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c98:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009c9c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
 8009c9e:	f107 0310 	add.w	r3, r7, #16
 8009ca2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009ca6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009caa:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009cae:	2200      	movs	r2, #0
 8009cb0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009cb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cbc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009cc0:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009cc4:	8812      	ldrh	r2, [r2, #0]
 8009cc6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009cc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ccc:	3302      	adds	r3, #2
 8009cce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009cd2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009cd6:	2218      	movs	r2, #24
 8009cd8:	2100      	movs	r1, #0
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f001 f89e 	bl	800ae1c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009ce0:	233f      	movs	r3, #63	; 0x3f
 8009ce2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x095;
 8009ce6:	2395      	movs	r3, #149	; 0x95
 8009ce8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009cec:	f107 0310 	add.w	r3, r7, #16
 8009cf0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009cf4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009cf8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009cfc:	f107 030f 	add.w	r3, r7, #15
 8009d00:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009d04:	2301      	movs	r3, #1
 8009d06:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009d0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009d0e:	2100      	movs	r1, #0
 8009d10:	4618      	mov	r0, r3
 8009d12:	f000 ff41 	bl	800ab98 <hci_send_req>
 8009d16:	4603      	mov	r3, r0
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	da01      	bge.n	8009d20 <aci_gap_allow_rebond+0x94>
    return BLE_STATUS_TIMEOUT;
 8009d1c:	23ff      	movs	r3, #255	; 0xff
 8009d1e:	e004      	b.n	8009d2a <aci_gap_allow_rebond+0x9e>
  return status;
 8009d20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d24:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009d28:	781b      	ldrb	r3, [r3, #0]
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b0cc      	sub	sp, #304	; 0x130
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	4602      	mov	r2, r0
 8009d3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d40:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009d44:	801a      	strh	r2, [r3, #0]
 8009d46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d4a:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8009d4e:	460a      	mov	r2, r1
 8009d50:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8009d52:	f107 0310 	add.w	r3, r7, #16
 8009d56:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009d5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d5e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009d62:	2200      	movs	r2, #0
 8009d64:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009d66:	2300      	movs	r3, #0
 8009d68:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009d6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d70:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009d74:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009d78:	8812      	ldrh	r2, [r2, #0]
 8009d7a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009d7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d80:	3302      	adds	r3, #2
 8009d82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8009d86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d8a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009d8e:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8009d92:	7812      	ldrb	r2, [r2, #0]
 8009d94:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009d96:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009da0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009da4:	2218      	movs	r2, #24
 8009da6:	2100      	movs	r1, #0
 8009da8:	4618      	mov	r0, r3
 8009daa:	f001 f837 	bl	800ae1c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009dae:	233f      	movs	r3, #63	; 0x3f
 8009db0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8009db4:	23a5      	movs	r3, #165	; 0xa5
 8009db6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009dba:	f107 0310 	add.w	r3, r7, #16
 8009dbe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009dc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009dc6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009dca:	f107 030f 	add.w	r3, r7, #15
 8009dce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009dd8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009ddc:	2100      	movs	r1, #0
 8009dde:	4618      	mov	r0, r3
 8009de0:	f000 feda 	bl	800ab98 <hci_send_req>
 8009de4:	4603      	mov	r3, r0
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	da01      	bge.n	8009dee <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8009dea:	23ff      	movs	r3, #255	; 0xff
 8009dec:	e004      	b.n	8009df8 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8009dee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009df2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009df6:	781b      	ldrb	r3, [r3, #0]
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}

08009e02 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8009e02:	b580      	push	{r7, lr}
 8009e04:	b088      	sub	sp, #32
 8009e06:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009e0c:	f107 0308 	add.w	r3, r7, #8
 8009e10:	2218      	movs	r2, #24
 8009e12:	2100      	movs	r1, #0
 8009e14:	4618      	mov	r0, r3
 8009e16:	f001 f801 	bl	800ae1c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009e1a:	233f      	movs	r3, #63	; 0x3f
 8009e1c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8009e1e:	f240 1301 	movw	r3, #257	; 0x101
 8009e22:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009e24:	1dfb      	adds	r3, r7, #7
 8009e26:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009e28:	2301      	movs	r3, #1
 8009e2a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009e2c:	f107 0308 	add.w	r3, r7, #8
 8009e30:	2100      	movs	r1, #0
 8009e32:	4618      	mov	r0, r3
 8009e34:	f000 feb0 	bl	800ab98 <hci_send_req>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	da01      	bge.n	8009e42 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8009e3e:	23ff      	movs	r3, #255	; 0xff
 8009e40:	e000      	b.n	8009e44 <aci_gatt_init+0x42>
  return status;
 8009e42:	79fb      	ldrb	r3, [r7, #7]
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3720      	adds	r7, #32
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8009e4c:	b590      	push	{r4, r7, lr}
 8009e4e:	b0cf      	sub	sp, #316	; 0x13c
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	4604      	mov	r4, r0
 8009e54:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8009e58:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8009e5c:	6001      	str	r1, [r0, #0]
 8009e5e:	4610      	mov	r0, r2
 8009e60:	4619      	mov	r1, r3
 8009e62:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009e66:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8009e6a:	4622      	mov	r2, r4
 8009e6c:	701a      	strb	r2, [r3, #0]
 8009e6e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009e72:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8009e76:	4602      	mov	r2, r0
 8009e78:	701a      	strb	r2, [r3, #0]
 8009e7a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009e7e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009e82:	460a      	mov	r2, r1
 8009e84:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8009e86:	f107 0310 	add.w	r3, r7, #16
 8009e8a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8009e8e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009e92:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8009e96:	781b      	ldrb	r3, [r3, #0]
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d00a      	beq.n	8009eb2 <aci_gatt_add_service+0x66>
 8009e9c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009ea0:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	2b02      	cmp	r3, #2
 8009ea8:	d101      	bne.n	8009eae <aci_gatt_add_service+0x62>
 8009eaa:	2311      	movs	r3, #17
 8009eac:	e002      	b.n	8009eb4 <aci_gatt_add_service+0x68>
 8009eae:	2301      	movs	r3, #1
 8009eb0:	e000      	b.n	8009eb4 <aci_gatt_add_service+0x68>
 8009eb2:	2303      	movs	r3, #3
 8009eb4:	f107 0210 	add.w	r2, r7, #16
 8009eb8:	4413      	add	r3, r2
 8009eba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009ebe:	f107 030c 	add.w	r3, r7, #12
 8009ec2:	2203      	movs	r2, #3
 8009ec4:	2100      	movs	r1, #0
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f000 ffa8 	bl	800ae1c <Osal_MemSet>
  int index_input = 0;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8009ed2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009ed6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009eda:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8009ede:	7812      	ldrb	r2, [r2, #0]
 8009ee0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009ee2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ee6:	3301      	adds	r3, #1
 8009ee8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8009eec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009ef0:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8009ef4:	781b      	ldrb	r3, [r3, #0]
 8009ef6:	2b01      	cmp	r3, #1
 8009ef8:	d002      	beq.n	8009f00 <aci_gatt_add_service+0xb4>
 8009efa:	2b02      	cmp	r3, #2
 8009efc:	d004      	beq.n	8009f08 <aci_gatt_add_service+0xbc>
 8009efe:	e007      	b.n	8009f10 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8009f00:	2302      	movs	r3, #2
 8009f02:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8009f06:	e005      	b.n	8009f14 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8009f08:	2310      	movs	r3, #16
 8009f0a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8009f0e:	e001      	b.n	8009f14 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8009f10:	2397      	movs	r3, #151	; 0x97
 8009f12:	e06c      	b.n	8009fee <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8009f14:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009f18:	1c58      	adds	r0, r3, #1
 8009f1a:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8009f1e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009f22:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009f26:	6819      	ldr	r1, [r3, #0]
 8009f28:	f000 ff68 	bl	800adfc <Osal_MemCpy>
    index_input += size;
 8009f2c:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8009f30:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009f34:	4413      	add	r3, r2
 8009f36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8009f3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f3e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009f42:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8009f46:	7812      	ldrb	r2, [r2, #0]
 8009f48:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8009f4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009f4e:	3301      	adds	r3, #1
 8009f50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8009f54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f58:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009f5c:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8009f60:	7812      	ldrb	r2, [r2, #0]
 8009f62:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8009f64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009f68:	3301      	adds	r3, #1
 8009f6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009f6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009f72:	2218      	movs	r2, #24
 8009f74:	2100      	movs	r1, #0
 8009f76:	4618      	mov	r0, r3
 8009f78:	f000 ff50 	bl	800ae1c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009f7c:	233f      	movs	r3, #63	; 0x3f
 8009f7e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8009f82:	f44f 7381 	mov.w	r3, #258	; 0x102
 8009f86:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009f8a:	f107 0310 	add.w	r3, r7, #16
 8009f8e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009f92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009f96:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8009f9a:	f107 030c 	add.w	r3, r7, #12
 8009f9e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8009fa2:	2303      	movs	r3, #3
 8009fa4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009fa8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009fac:	2100      	movs	r1, #0
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f000 fdf2 	bl	800ab98 <hci_send_req>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	da01      	bge.n	8009fbe <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8009fba:	23ff      	movs	r3, #255	; 0xff
 8009fbc:	e017      	b.n	8009fee <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8009fbe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009fc2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d005      	beq.n	8009fd8 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8009fcc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009fd0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009fd4:	781b      	ldrb	r3, [r3, #0]
 8009fd6:	e00a      	b.n	8009fee <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8009fd8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009fdc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009fe0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009fe4:	b29a      	uxth	r2, r3
 8009fe6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009fea:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009fec:	2300      	movs	r3, #0
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd90      	pop	{r4, r7, pc}

08009ff8 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8009ff8:	b590      	push	{r4, r7, lr}
 8009ffa:	b0d1      	sub	sp, #324	; 0x144
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	4604      	mov	r4, r0
 800a000:	4608      	mov	r0, r1
 800a002:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800a006:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800a00a:	600a      	str	r2, [r1, #0]
 800a00c:	4619      	mov	r1, r3
 800a00e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a012:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800a016:	4622      	mov	r2, r4
 800a018:	801a      	strh	r2, [r3, #0]
 800a01a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a01e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800a022:	4602      	mov	r2, r0
 800a024:	701a      	strb	r2, [r3, #0]
 800a026:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a02a:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800a02e:	460a      	mov	r2, r1
 800a030:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800a032:	f107 0318 	add.w	r3, r7, #24
 800a036:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800a03a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a03e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800a042:	781b      	ldrb	r3, [r3, #0]
 800a044:	2b01      	cmp	r3, #1
 800a046:	d00a      	beq.n	800a05e <aci_gatt_add_char+0x66>
 800a048:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a04c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800a050:	781b      	ldrb	r3, [r3, #0]
 800a052:	2b02      	cmp	r3, #2
 800a054:	d101      	bne.n	800a05a <aci_gatt_add_char+0x62>
 800a056:	2313      	movs	r3, #19
 800a058:	e002      	b.n	800a060 <aci_gatt_add_char+0x68>
 800a05a:	2303      	movs	r3, #3
 800a05c:	e000      	b.n	800a060 <aci_gatt_add_char+0x68>
 800a05e:	2305      	movs	r3, #5
 800a060:	f107 0218 	add.w	r2, r7, #24
 800a064:	4413      	add	r3, r2
 800a066:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800a06a:	f107 0314 	add.w	r3, r7, #20
 800a06e:	2203      	movs	r2, #3
 800a070:	2100      	movs	r1, #0
 800a072:	4618      	mov	r0, r3
 800a074:	f000 fed2 	bl	800ae1c <Osal_MemSet>
  int index_input = 0;
 800a078:	2300      	movs	r3, #0
 800a07a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800a07e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a082:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800a086:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800a08a:	8812      	ldrh	r2, [r2, #0]
 800a08c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a08e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a092:	3302      	adds	r3, #2
 800a094:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800a098:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a09c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800a0a0:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800a0a4:	7812      	ldrb	r2, [r2, #0]
 800a0a6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a0a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a0ac:	3301      	adds	r3, #1
 800a0ae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800a0b2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a0b6:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800a0ba:	781b      	ldrb	r3, [r3, #0]
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	d002      	beq.n	800a0c6 <aci_gatt_add_char+0xce>
 800a0c0:	2b02      	cmp	r3, #2
 800a0c2:	d004      	beq.n	800a0ce <aci_gatt_add_char+0xd6>
 800a0c4:	e007      	b.n	800a0d6 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800a0c6:	2302      	movs	r3, #2
 800a0c8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800a0cc:	e005      	b.n	800a0da <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800a0ce:	2310      	movs	r3, #16
 800a0d0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800a0d4:	e001      	b.n	800a0da <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800a0d6:	2397      	movs	r3, #151	; 0x97
 800a0d8:	e091      	b.n	800a1fe <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800a0da:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a0de:	1cd8      	adds	r0, r3, #3
 800a0e0:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800a0e4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a0e8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800a0ec:	6819      	ldr	r1, [r3, #0]
 800a0ee:	f000 fe85 	bl	800adfc <Osal_MemCpy>
    index_input += size;
 800a0f2:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800a0f6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800a0fa:	4413      	add	r3, r2
 800a0fc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800a100:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a104:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800a108:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800a10c:	8812      	ldrh	r2, [r2, #0]
 800a10e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800a110:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a114:	3302      	adds	r3, #2
 800a116:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800a11a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a11e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800a122:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800a124:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a128:	3301      	adds	r3, #1
 800a12a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800a12e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a132:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800a136:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800a138:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a13c:	3301      	adds	r3, #1
 800a13e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800a142:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a146:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800a14a:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800a14c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a150:	3301      	adds	r3, #1
 800a152:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800a156:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a15a:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800a15e:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800a160:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a164:	3301      	adds	r3, #1
 800a166:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800a16a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a16e:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800a172:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800a174:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a178:	3301      	adds	r3, #1
 800a17a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a17e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a182:	2218      	movs	r2, #24
 800a184:	2100      	movs	r1, #0
 800a186:	4618      	mov	r0, r3
 800a188:	f000 fe48 	bl	800ae1c <Osal_MemSet>
  rq.ogf = 0x3f;
 800a18c:	233f      	movs	r3, #63	; 0x3f
 800a18e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800a192:	f44f 7382 	mov.w	r3, #260	; 0x104
 800a196:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800a19a:	f107 0318 	add.w	r3, r7, #24
 800a19e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800a1a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a1a6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800a1aa:	f107 0314 	add.w	r3, r7, #20
 800a1ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800a1b2:	2303      	movs	r3, #3
 800a1b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a1b8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a1bc:	2100      	movs	r1, #0
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f000 fcea 	bl	800ab98 <hci_send_req>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	da01      	bge.n	800a1ce <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800a1ca:	23ff      	movs	r3, #255	; 0xff
 800a1cc:	e017      	b.n	800a1fe <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800a1ce:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a1d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a1d6:	781b      	ldrb	r3, [r3, #0]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d005      	beq.n	800a1e8 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800a1dc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a1e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a1e4:	781b      	ldrb	r3, [r3, #0]
 800a1e6:	e00a      	b.n	800a1fe <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800a1e8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a1ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a1f0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a1f4:	b29a      	uxth	r2, r3
 800a1f6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800a1fa:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a1fc:	2300      	movs	r3, #0
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800a204:	46bd      	mov	sp, r7
 800a206:	bd90      	pop	{r4, r7, pc}

0800a208 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800a208:	b5b0      	push	{r4, r5, r7, lr}
 800a20a:	b0cc      	sub	sp, #304	; 0x130
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	4605      	mov	r5, r0
 800a210:	460c      	mov	r4, r1
 800a212:	4610      	mov	r0, r2
 800a214:	4619      	mov	r1, r3
 800a216:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a21a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a21e:	462a      	mov	r2, r5
 800a220:	801a      	strh	r2, [r3, #0]
 800a222:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a226:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a22a:	4622      	mov	r2, r4
 800a22c:	801a      	strh	r2, [r3, #0]
 800a22e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a232:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800a236:	4602      	mov	r2, r0
 800a238:	701a      	strb	r2, [r3, #0]
 800a23a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a23e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800a242:	460a      	mov	r2, r1
 800a244:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800a246:	f107 0310 	add.w	r3, r7, #16
 800a24a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a24e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a252:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a256:	2200      	movs	r2, #0
 800a258:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a25a:	2300      	movs	r3, #0
 800a25c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800a260:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a264:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a268:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a26c:	8812      	ldrh	r2, [r2, #0]
 800a26e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a270:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a274:	3302      	adds	r3, #2
 800a276:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800a27a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a27e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a282:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800a286:	8812      	ldrh	r2, [r2, #0]
 800a288:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800a28a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a28e:	3302      	adds	r3, #2
 800a290:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800a294:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a298:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a29c:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800a2a0:	7812      	ldrb	r2, [r2, #0]
 800a2a2:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800a2a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a2a8:	3301      	adds	r3, #1
 800a2aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800a2ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2b2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a2b6:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800a2ba:	7812      	ldrb	r2, [r2, #0]
 800a2bc:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800a2be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a2c2:	3301      	adds	r3, #1
 800a2c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800a2c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2cc:	1d98      	adds	r0, r3, #6
 800a2ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2d2:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	461a      	mov	r2, r3
 800a2da:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800a2de:	f000 fd8d 	bl	800adfc <Osal_MemCpy>
  index_input += Char_Value_Length;
 800a2e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2e6:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800a2ea:	781b      	ldrb	r3, [r3, #0]
 800a2ec:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a2f0:	4413      	add	r3, r2
 800a2f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a2f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a2fa:	2218      	movs	r2, #24
 800a2fc:	2100      	movs	r1, #0
 800a2fe:	4618      	mov	r0, r3
 800a300:	f000 fd8c 	bl	800ae1c <Osal_MemSet>
  rq.ogf = 0x3f;
 800a304:	233f      	movs	r3, #63	; 0x3f
 800a306:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800a30a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800a30e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a312:	f107 0310 	add.w	r3, r7, #16
 800a316:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a31a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a31e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a322:	f107 030f 	add.w	r3, r7, #15
 800a326:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a32a:	2301      	movs	r3, #1
 800a32c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a330:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a334:	2100      	movs	r1, #0
 800a336:	4618      	mov	r0, r3
 800a338:	f000 fc2e 	bl	800ab98 <hci_send_req>
 800a33c:	4603      	mov	r3, r0
 800a33e:	2b00      	cmp	r3, #0
 800a340:	da01      	bge.n	800a346 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800a342:	23ff      	movs	r3, #255	; 0xff
 800a344:	e004      	b.n	800a350 <aci_gatt_update_char_value+0x148>
  return status;
 800a346:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a34a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a34e:	781b      	ldrb	r3, [r3, #0]
}
 800a350:	4618      	mov	r0, r3
 800a352:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a356:	46bd      	mov	sp, r7
 800a358:	bdb0      	pop	{r4, r5, r7, pc}

0800a35a <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800a35a:	b580      	push	{r7, lr}
 800a35c:	b0cc      	sub	sp, #304	; 0x130
 800a35e:	af00      	add	r7, sp, #0
 800a360:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a364:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a368:	601a      	str	r2, [r3, #0]
 800a36a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a36e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a372:	4602      	mov	r2, r0
 800a374:	701a      	strb	r2, [r3, #0]
 800a376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a37a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a37e:	460a      	mov	r2, r1
 800a380:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800a382:	f107 0310 	add.w	r3, r7, #16
 800a386:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a38a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a38e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a392:	2200      	movs	r2, #0
 800a394:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a396:	2300      	movs	r3, #0
 800a398:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800a39c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3a0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a3a4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800a3a8:	7812      	ldrb	r2, [r2, #0]
 800a3aa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a3ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a3b0:	3301      	adds	r3, #1
 800a3b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800a3b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3ba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a3be:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a3c2:	7812      	ldrb	r2, [r2, #0]
 800a3c4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a3c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800a3d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3d4:	1c98      	adds	r0, r3, #2
 800a3d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3da:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a3de:	781a      	ldrb	r2, [r3, #0]
 800a3e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3e8:	6819      	ldr	r1, [r3, #0]
 800a3ea:	f000 fd07 	bl	800adfc <Osal_MemCpy>
  index_input += Length;
 800a3ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3f2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a3f6:	781b      	ldrb	r3, [r3, #0]
 800a3f8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a3fc:	4413      	add	r3, r2
 800a3fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a402:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a406:	2218      	movs	r2, #24
 800a408:	2100      	movs	r1, #0
 800a40a:	4618      	mov	r0, r3
 800a40c:	f000 fd06 	bl	800ae1c <Osal_MemSet>
  rq.ogf = 0x3f;
 800a410:	233f      	movs	r3, #63	; 0x3f
 800a412:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800a416:	230c      	movs	r3, #12
 800a418:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a41c:	f107 0310 	add.w	r3, r7, #16
 800a420:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a424:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a428:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a42c:	f107 030f 	add.w	r3, r7, #15
 800a430:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a434:	2301      	movs	r3, #1
 800a436:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a43a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a43e:	2100      	movs	r1, #0
 800a440:	4618      	mov	r0, r3
 800a442:	f000 fba9 	bl	800ab98 <hci_send_req>
 800a446:	4603      	mov	r3, r0
 800a448:	2b00      	cmp	r3, #0
 800a44a:	da01      	bge.n	800a450 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800a44c:	23ff      	movs	r3, #255	; 0xff
 800a44e:	e004      	b.n	800a45a <aci_hal_write_config_data+0x100>
  return status;
 800a450:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a454:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a458:	781b      	ldrb	r3, [r3, #0]
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b0cc      	sub	sp, #304	; 0x130
 800a468:	af00      	add	r7, sp, #0
 800a46a:	4602      	mov	r2, r0
 800a46c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a470:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a474:	701a      	strb	r2, [r3, #0]
 800a476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a47a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a47e:	460a      	mov	r2, r1
 800a480:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800a482:	f107 0310 	add.w	r3, r7, #16
 800a486:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a48a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a48e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a492:	2200      	movs	r2, #0
 800a494:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a496:	2300      	movs	r3, #0
 800a498:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800a49c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a4a0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a4a4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800a4a8:	7812      	ldrb	r2, [r2, #0]
 800a4aa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a4ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a4b0:	3301      	adds	r3, #1
 800a4b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800a4b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a4ba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a4be:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a4c2:	7812      	ldrb	r2, [r2, #0]
 800a4c4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a4c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a4ca:	3301      	adds	r3, #1
 800a4cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a4d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a4d4:	2218      	movs	r2, #24
 800a4d6:	2100      	movs	r1, #0
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f000 fc9f 	bl	800ae1c <Osal_MemSet>
  rq.ogf = 0x3f;
 800a4de:	233f      	movs	r3, #63	; 0x3f
 800a4e0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800a4e4:	230f      	movs	r3, #15
 800a4e6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a4ea:	f107 0310 	add.w	r3, r7, #16
 800a4ee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a4f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a4f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a4fa:	f107 030f 	add.w	r3, r7, #15
 800a4fe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a502:	2301      	movs	r3, #1
 800a504:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a508:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a50c:	2100      	movs	r1, #0
 800a50e:	4618      	mov	r0, r3
 800a510:	f000 fb42 	bl	800ab98 <hci_send_req>
 800a514:	4603      	mov	r3, r0
 800a516:	2b00      	cmp	r3, #0
 800a518:	da01      	bge.n	800a51e <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800a51a:	23ff      	movs	r3, #255	; 0xff
 800a51c:	e004      	b.n	800a528 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800a51e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a522:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a526:	781b      	ldrb	r3, [r3, #0]
}
 800a528:	4618      	mov	r0, r3
 800a52a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}

0800a532 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800a532:	b580      	push	{r7, lr}
 800a534:	b0cc      	sub	sp, #304	; 0x130
 800a536:	af00      	add	r7, sp, #0
 800a538:	4602      	mov	r2, r0
 800a53a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a53e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a542:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800a544:	f107 0310 	add.w	r3, r7, #16
 800a548:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a54c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a550:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a554:	2200      	movs	r2, #0
 800a556:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a558:	2300      	movs	r3, #0
 800a55a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800a55e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a562:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a566:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a56a:	8812      	ldrh	r2, [r2, #0]
 800a56c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a56e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a572:	3302      	adds	r3, #2
 800a574:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a578:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a57c:	2218      	movs	r2, #24
 800a57e:	2100      	movs	r1, #0
 800a580:	4618      	mov	r0, r3
 800a582:	f000 fc4b 	bl	800ae1c <Osal_MemSet>
  rq.ogf = 0x3f;
 800a586:	233f      	movs	r3, #63	; 0x3f
 800a588:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800a58c:	2318      	movs	r3, #24
 800a58e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a592:	f107 0310 	add.w	r3, r7, #16
 800a596:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a59a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a59e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a5a2:	f107 030f 	add.w	r3, r7, #15
 800a5a6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a5b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a5b4:	2100      	movs	r1, #0
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f000 faee 	bl	800ab98 <hci_send_req>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	da01      	bge.n	800a5c6 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800a5c2:	23ff      	movs	r3, #255	; 0xff
 800a5c4:	e004      	b.n	800a5d0 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800a5c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5ca:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a5ce:	781b      	ldrb	r3, [r3, #0]
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}

0800a5da <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800a5da:	b580      	push	{r7, lr}
 800a5dc:	b088      	sub	sp, #32
 800a5de:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a5e4:	f107 0308 	add.w	r3, r7, #8
 800a5e8:	2218      	movs	r2, #24
 800a5ea:	2100      	movs	r1, #0
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f000 fc15 	bl	800ae1c <Osal_MemSet>
  rq.ogf = 0x03;
 800a5f2:	2303      	movs	r3, #3
 800a5f4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800a5f6:	2303      	movs	r3, #3
 800a5f8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a5fa:	1dfb      	adds	r3, r7, #7
 800a5fc:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a5fe:	2301      	movs	r3, #1
 800a600:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a602:	f107 0308 	add.w	r3, r7, #8
 800a606:	2100      	movs	r1, #0
 800a608:	4618      	mov	r0, r3
 800a60a:	f000 fac5 	bl	800ab98 <hci_send_req>
 800a60e:	4603      	mov	r3, r0
 800a610:	2b00      	cmp	r3, #0
 800a612:	da01      	bge.n	800a618 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800a614:	23ff      	movs	r3, #255	; 0xff
 800a616:	e000      	b.n	800a61a <hci_reset+0x40>
  return status;
 800a618:	79fb      	ldrb	r3, [r7, #7]
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3720      	adds	r7, #32
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}

0800a622 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 800a622:	b580      	push	{r7, lr}
 800a624:	b0ce      	sub	sp, #312	; 0x138
 800a626:	af00      	add	r7, sp, #0
 800a628:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a62c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a630:	6019      	str	r1, [r3, #0]
 800a632:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a636:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800a63a:	601a      	str	r2, [r3, #0]
 800a63c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a640:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a644:	4602      	mov	r2, r0
 800a646:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800a648:	f107 0318 	add.w	r3, r7, #24
 800a64c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800a650:	f107 0310 	add.w	r3, r7, #16
 800a654:	2205      	movs	r2, #5
 800a656:	2100      	movs	r1, #0
 800a658:	4618      	mov	r0, r3
 800a65a:	f000 fbdf 	bl	800ae1c <Osal_MemSet>
  int index_input = 0;
 800a65e:	2300      	movs	r3, #0
 800a660:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 800a664:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a668:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800a66c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a670:	8812      	ldrh	r2, [r2, #0]
 800a672:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a674:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a678:	3302      	adds	r3, #2
 800a67a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a67e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a682:	2218      	movs	r2, #24
 800a684:	2100      	movs	r1, #0
 800a686:	4618      	mov	r0, r3
 800a688:	f000 fbc8 	bl	800ae1c <Osal_MemSet>
  rq.ogf = 0x08;
 800a68c:	2308      	movs	r3, #8
 800a68e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 800a692:	2330      	movs	r3, #48	; 0x30
 800a694:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800a698:	f107 0318 	add.w	r3, r7, #24
 800a69c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800a6a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a6a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800a6a8:	f107 0310 	add.w	r3, r7, #16
 800a6ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800a6b0:	2305      	movs	r3, #5
 800a6b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a6b6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a6ba:	2100      	movs	r1, #0
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f000 fa6b 	bl	800ab98 <hci_send_req>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	da01      	bge.n	800a6cc <hci_le_read_phy+0xaa>
    return BLE_STATUS_TIMEOUT;
 800a6c8:	23ff      	movs	r3, #255	; 0xff
 800a6ca:	e023      	b.n	800a714 <hci_le_read_phy+0xf2>
  if ( resp.Status )
 800a6cc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a6d0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d005      	beq.n	800a6e6 <hci_le_read_phy+0xc4>
    return resp.Status;
 800a6da:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a6de:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800a6e2:	781b      	ldrb	r3, [r3, #0]
 800a6e4:	e016      	b.n	800a714 <hci_le_read_phy+0xf2>
  *TX_PHY = resp.TX_PHY;
 800a6e6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a6ea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800a6ee:	78da      	ldrb	r2, [r3, #3]
 800a6f0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a6f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 800a6fc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a700:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800a704:	791a      	ldrb	r2, [r3, #4]
 800a706:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a70a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a712:	2300      	movs	r3, #0
}
 800a714:	4618      	mov	r0, r3
 800a716:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}

0800a71e <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800a71e:	b590      	push	{r4, r7, lr}
 800a720:	b0cd      	sub	sp, #308	; 0x134
 800a722:	af00      	add	r7, sp, #0
 800a724:	4604      	mov	r4, r0
 800a726:	4608      	mov	r0, r1
 800a728:	4611      	mov	r1, r2
 800a72a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a72e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a732:	4622      	mov	r2, r4
 800a734:	701a      	strb	r2, [r3, #0]
 800a736:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a73a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a73e:	4602      	mov	r2, r0
 800a740:	701a      	strb	r2, [r3, #0]
 800a742:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a746:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800a74a:	460a      	mov	r2, r1
 800a74c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800a74e:	f107 0310 	add.w	r3, r7, #16
 800a752:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a756:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a75a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a75e:	2200      	movs	r2, #0
 800a760:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a762:	2300      	movs	r3, #0
 800a764:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800a768:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a76c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a770:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800a774:	7812      	ldrb	r2, [r2, #0]
 800a776:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a778:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a77c:	3301      	adds	r3, #1
 800a77e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800a782:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a786:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a78a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a78e:	7812      	ldrb	r2, [r2, #0]
 800a790:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a792:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a796:	3301      	adds	r3, #1
 800a798:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800a79c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7a0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a7a4:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800a7a8:	7812      	ldrb	r2, [r2, #0]
 800a7aa:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a7ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a7b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a7ba:	2218      	movs	r2, #24
 800a7bc:	2100      	movs	r1, #0
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f000 fb2c 	bl	800ae1c <Osal_MemSet>
  rq.ogf = 0x08;
 800a7c4:	2308      	movs	r3, #8
 800a7c6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800a7ca:	2331      	movs	r3, #49	; 0x31
 800a7cc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a7d0:	f107 0310 	add.w	r3, r7, #16
 800a7d4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a7d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a7dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a7e0:	f107 030f 	add.w	r3, r7, #15
 800a7e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a7ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a7f2:	2100      	movs	r1, #0
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f000 f9cf 	bl	800ab98 <hci_send_req>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	da01      	bge.n	800a804 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800a800:	23ff      	movs	r3, #255	; 0xff
 800a802:	e004      	b.n	800a80e <hci_le_set_default_phy+0xf0>
  return status;
 800a804:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a808:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a80c:	781b      	ldrb	r3, [r3, #0]
}
 800a80e:	4618      	mov	r0, r3
 800a810:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800a814:	46bd      	mov	sp, r7
 800a816:	bd90      	pop	{r4, r7, pc}

0800a818 <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req( uint16_t Connection_Handle,
                                                      uint16_t Conn_Interval_Min,
                                                      uint16_t Conn_Interval_Max,
                                                      uint16_t Latency,
                                                      uint16_t Timeout_Multiplier )
{
 800a818:	b5b0      	push	{r4, r5, r7, lr}
 800a81a:	b0cc      	sub	sp, #304	; 0x130
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	4605      	mov	r5, r0
 800a820:	460c      	mov	r4, r1
 800a822:	4610      	mov	r0, r2
 800a824:	4619      	mov	r1, r3
 800a826:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a82a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a82e:	462a      	mov	r2, r5
 800a830:	801a      	strh	r2, [r3, #0]
 800a832:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a836:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a83a:	4622      	mov	r2, r4
 800a83c:	801a      	strh	r2, [r3, #0]
 800a83e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a842:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800a846:	4602      	mov	r2, r0
 800a848:	801a      	strh	r2, [r3, #0]
 800a84a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a84e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a852:	460a      	mov	r2, r1
 800a854:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
 800a856:	f107 0310 	add.w	r3, r7, #16
 800a85a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a85e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a862:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a866:	2200      	movs	r2, #0
 800a868:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a86a:	2300      	movs	r3, #0
 800a86c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800a870:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a874:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a878:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a87c:	8812      	ldrh	r2, [r2, #0]
 800a87e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a880:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a884:	3302      	adds	r3, #2
 800a886:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 800a88a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a88e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a892:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800a896:	8812      	ldrh	r2, [r2, #0]
 800a898:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800a89a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a89e:	3302      	adds	r3, #2
 800a8a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 800a8a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8a8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a8ac:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800a8b0:	8812      	ldrh	r2, [r2, #0]
 800a8b2:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800a8b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a8b8:	3302      	adds	r3, #2
 800a8ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Latency = Latency;
 800a8be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8c2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a8c6:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800a8ca:	8812      	ldrh	r2, [r2, #0]
 800a8cc:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 800a8ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a8d2:	3302      	adds	r3, #2
 800a8d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 800a8d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8dc:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 800a8e0:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 800a8e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a8e6:	3302      	adds	r3, #2
 800a8e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a8ec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a8f0:	2218      	movs	r2, #24
 800a8f2:	2100      	movs	r1, #0
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f000 fa91 	bl	800ae1c <Osal_MemSet>
  rq.ogf = 0x3f;
 800a8fa:	233f      	movs	r3, #63	; 0x3f
 800a8fc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x181;
 800a900:	f240 1381 	movw	r3, #385	; 0x181
 800a904:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800a908:	230f      	movs	r3, #15
 800a90a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800a90e:	f107 0310 	add.w	r3, r7, #16
 800a912:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a916:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a91a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a91e:	f107 030f 	add.w	r3, r7, #15
 800a922:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a926:	2301      	movs	r3, #1
 800a928:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a92c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a930:	2100      	movs	r1, #0
 800a932:	4618      	mov	r0, r3
 800a934:	f000 f930 	bl	800ab98 <hci_send_req>
 800a938:	4603      	mov	r3, r0
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	da01      	bge.n	800a942 <aci_l2cap_connection_parameter_update_req+0x12a>
    return BLE_STATUS_TIMEOUT;
 800a93e:	23ff      	movs	r3, #255	; 0xff
 800a940:	e004      	b.n	800a94c <aci_l2cap_connection_parameter_update_req+0x134>
  return status;
 800a942:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a946:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a94a:	781b      	ldrb	r3, [r3, #0]
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a952:	46bd      	mov	sp, r7
 800a954:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a958 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b086      	sub	sp, #24
 800a95c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a95e:	f3ef 8310 	mrs	r3, PRIMASK
 800a962:	60fb      	str	r3, [r7, #12]
  return(result);
 800a964:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800a966:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a968:	b672      	cpsid	i
}
 800a96a:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800a96c:	1cbb      	adds	r3, r7, #2
 800a96e:	4619      	mov	r1, r3
 800a970:	4812      	ldr	r0, [pc, #72]	; (800a9bc <DbgTrace_TxCpltCallback+0x64>)
 800a972:	f001 f8f8 	bl	800bb66 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800a976:	1cbb      	adds	r3, r7, #2
 800a978:	4619      	mov	r1, r3
 800a97a:	4810      	ldr	r0, [pc, #64]	; (800a9bc <DbgTrace_TxCpltCallback+0x64>)
 800a97c:	f001 f9e4 	bl	800bd48 <CircularQueue_Sense>
 800a980:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d00c      	beq.n	800a9a2 <DbgTrace_TxCpltCallback+0x4a>
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	f383 8810 	msr	PRIMASK, r3
}
 800a992:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800a994:	887b      	ldrh	r3, [r7, #2]
 800a996:	4a0a      	ldr	r2, [pc, #40]	; (800a9c0 <DbgTrace_TxCpltCallback+0x68>)
 800a998:	4619      	mov	r1, r3
 800a99a:	6938      	ldr	r0, [r7, #16]
 800a99c:	f7f6 fb91 	bl	80010c2 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800a9a0:	e008      	b.n	800a9b4 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800a9a2:	4b08      	ldr	r3, [pc, #32]	; (800a9c4 <DbgTrace_TxCpltCallback+0x6c>)
 800a9a4:	2201      	movs	r2, #1
 800a9a6:	701a      	strb	r2, [r3, #0]
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f383 8810 	msr	PRIMASK, r3
}
 800a9b2:	bf00      	nop
}
 800a9b4:	bf00      	nop
 800a9b6:	3718      	adds	r7, #24
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}
 800a9bc:	2000066c 	.word	0x2000066c
 800a9c0:	0800a959 	.word	0x0800a959
 800a9c4:	20000059 	.word	0x20000059

0800a9c8 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b082      	sub	sp, #8
 800a9cc:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800a9ce:	f7f6 fb72 	bl	80010b6 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800a9d2:	2302      	movs	r3, #2
 800a9d4:	9300      	str	r3, [sp, #0]
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a9dc:	4903      	ldr	r1, [pc, #12]	; (800a9ec <DbgTraceInit+0x24>)
 800a9de:	4804      	ldr	r0, [pc, #16]	; (800a9f0 <DbgTraceInit+0x28>)
 800a9e0:	f000 fe68 	bl	800b6b4 <CircularQueue_Init>
#endif 
#endif
  return;
 800a9e4:	bf00      	nop
}
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}
 800a9ea:	bf00      	nop
 800a9ec:	2000068c 	.word	0x2000068c
 800a9f0:	2000066c 	.word	0x2000066c

0800a9f4 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b084      	sub	sp, #16
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	60f8      	str	r0, [r7, #12]
 800a9fc:	60b9      	str	r1, [r7, #8]
 800a9fe:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800aa00:	687a      	ldr	r2, [r7, #4]
 800aa02:	68b9      	ldr	r1, [r7, #8]
 800aa04:	68f8      	ldr	r0, [r7, #12]
 800aa06:	f000 f805 	bl	800aa14 <DbgTraceWrite>
 800aa0a:	4603      	mov	r3, r0
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3710      	adds	r7, #16
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}

0800aa14 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b08a      	sub	sp, #40	; 0x28
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	60f8      	str	r0, [r7, #12]
 800aa1c:	60b9      	str	r1, [r7, #8]
 800aa1e:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800aa20:	2300      	movs	r3, #0
 800aa22:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa24:	f3ef 8310 	mrs	r3, PRIMASK
 800aa28:	61bb      	str	r3, [r7, #24]
  return(result);
 800aa2a:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800aa2c:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa34:	d102      	bne.n	800aa3c <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800aa36:	2300      	movs	r3, #0
 800aa38:	627b      	str	r3, [r7, #36]	; 0x24
 800aa3a:	e037      	b.n	800aaac <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2b01      	cmp	r3, #1
 800aa40:	d006      	beq.n	800aa50 <DbgTraceWrite+0x3c>
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2b02      	cmp	r3, #2
 800aa46:	d003      	beq.n	800aa50 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800aa48:	f04f 33ff 	mov.w	r3, #4294967295
 800aa4c:	627b      	str	r3, [r7, #36]	; 0x24
 800aa4e:	e02d      	b.n	800aaac <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d02a      	beq.n	800aaac <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800aa5a:	b672      	cpsid	i
}
 800aa5c:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	b29a      	uxth	r2, r3
 800aa62:	2301      	movs	r3, #1
 800aa64:	68b9      	ldr	r1, [r7, #8]
 800aa66:	4814      	ldr	r0, [pc, #80]	; (800aab8 <DbgTraceWrite+0xa4>)
 800aa68:	f000 fe56 	bl	800b718 <CircularQueue_Add>
 800aa6c:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800aa6e:	69fb      	ldr	r3, [r7, #28]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d015      	beq.n	800aaa0 <DbgTraceWrite+0x8c>
 800aa74:	4b11      	ldr	r3, [pc, #68]	; (800aabc <DbgTraceWrite+0xa8>)
 800aa76:	781b      	ldrb	r3, [r3, #0]
 800aa78:	b2db      	uxtb	r3, r3
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d010      	beq.n	800aaa0 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800aa7e:	4b0f      	ldr	r3, [pc, #60]	; (800aabc <DbgTraceWrite+0xa8>)
 800aa80:	2200      	movs	r2, #0
 800aa82:	701a      	strb	r2, [r3, #0]
 800aa84:	6a3b      	ldr	r3, [r7, #32]
 800aa86:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	f383 8810 	msr	PRIMASK, r3
}
 800aa8e:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	b29b      	uxth	r3, r3
 800aa94:	4a0a      	ldr	r2, [pc, #40]	; (800aac0 <DbgTraceWrite+0xac>)
 800aa96:	4619      	mov	r1, r3
 800aa98:	69f8      	ldr	r0, [r7, #28]
 800aa9a:	f7f6 fb12 	bl	80010c2 <DbgOutputTraces>
 800aa9e:	e005      	b.n	800aaac <DbgTraceWrite+0x98>
 800aaa0:	6a3b      	ldr	r3, [r7, #32]
 800aaa2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	f383 8810 	msr	PRIMASK, r3
}
 800aaaa:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800aaac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3728      	adds	r7, #40	; 0x28
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}
 800aab6:	bf00      	nop
 800aab8:	2000066c 	.word	0x2000066c
 800aabc:	20000059 	.word	0x20000059
 800aac0:	0800a959 	.word	0x0800a959

0800aac4 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b082      	sub	sp, #8
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
 800aacc:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	685b      	ldr	r3, [r3, #4]
 800aad2:	4a08      	ldr	r2, [pc, #32]	; (800aaf4 <hci_init+0x30>)
 800aad4:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800aad6:	4a08      	ldr	r2, [pc, #32]	; (800aaf8 <hci_init+0x34>)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800aadc:	4806      	ldr	r0, [pc, #24]	; (800aaf8 <hci_init+0x34>)
 800aade:	f000 f979 	bl	800add4 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	4618      	mov	r0, r3
 800aae8:	f000 f8da 	bl	800aca0 <TlInit>

  return;
 800aaec:	bf00      	nop
}
 800aaee:	3708      	adds	r7, #8
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}
 800aaf4:	200016b4 	.word	0x200016b4
 800aaf8:	2000168c 	.word	0x2000168c

0800aafc <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b084      	sub	sp, #16
 800ab00:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800ab02:	4822      	ldr	r0, [pc, #136]	; (800ab8c <hci_user_evt_proc+0x90>)
 800ab04:	f000 fd28 	bl	800b558 <LST_is_empty>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d12b      	bne.n	800ab66 <hci_user_evt_proc+0x6a>
 800ab0e:	4b20      	ldr	r3, [pc, #128]	; (800ab90 <hci_user_evt_proc+0x94>)
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d027      	beq.n	800ab66 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800ab16:	f107 030c 	add.w	r3, r7, #12
 800ab1a:	4619      	mov	r1, r3
 800ab1c:	481b      	ldr	r0, [pc, #108]	; (800ab8c <hci_user_evt_proc+0x90>)
 800ab1e:	f000 fdaa 	bl	800b676 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800ab22:	4b1c      	ldr	r3, [pc, #112]	; (800ab94 <hci_user_evt_proc+0x98>)
 800ab24:	69db      	ldr	r3, [r3, #28]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d00c      	beq.n	800ab44 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800ab2e:	2301      	movs	r3, #1
 800ab30:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800ab32:	4b18      	ldr	r3, [pc, #96]	; (800ab94 <hci_user_evt_proc+0x98>)
 800ab34:	69db      	ldr	r3, [r3, #28]
 800ab36:	1d3a      	adds	r2, r7, #4
 800ab38:	4610      	mov	r0, r2
 800ab3a:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800ab3c:	793a      	ldrb	r2, [r7, #4]
 800ab3e:	4b14      	ldr	r3, [pc, #80]	; (800ab90 <hci_user_evt_proc+0x94>)
 800ab40:	701a      	strb	r2, [r3, #0]
 800ab42:	e002      	b.n	800ab4a <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800ab44:	4b12      	ldr	r3, [pc, #72]	; (800ab90 <hci_user_evt_proc+0x94>)
 800ab46:	2201      	movs	r2, #1
 800ab48:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800ab4a:	4b11      	ldr	r3, [pc, #68]	; (800ab90 <hci_user_evt_proc+0x94>)
 800ab4c:	781b      	ldrb	r3, [r3, #0]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d004      	beq.n	800ab5c <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	4618      	mov	r0, r3
 800ab56:	f001 fc4f 	bl	800c3f8 <TL_MM_EvtDone>
 800ab5a:	e004      	b.n	800ab66 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	4619      	mov	r1, r3
 800ab60:	480a      	ldr	r0, [pc, #40]	; (800ab8c <hci_user_evt_proc+0x90>)
 800ab62:	f000 fd1b 	bl	800b59c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800ab66:	4809      	ldr	r0, [pc, #36]	; (800ab8c <hci_user_evt_proc+0x90>)
 800ab68:	f000 fcf6 	bl	800b558 <LST_is_empty>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d107      	bne.n	800ab82 <hci_user_evt_proc+0x86>
 800ab72:	4b07      	ldr	r3, [pc, #28]	; (800ab90 <hci_user_evt_proc+0x94>)
 800ab74:	781b      	ldrb	r3, [r3, #0]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d003      	beq.n	800ab82 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800ab7a:	4804      	ldr	r0, [pc, #16]	; (800ab8c <hci_user_evt_proc+0x90>)
 800ab7c:	f7f9 f8ac 	bl	8003cd8 <hci_notify_asynch_evt>
  }


  return;
 800ab80:	bf00      	nop
 800ab82:	bf00      	nop
}
 800ab84:	3710      	adds	r7, #16
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}
 800ab8a:	bf00      	nop
 800ab8c:	20000230 	.word	0x20000230
 800ab90:	2000023c 	.word	0x2000023c
 800ab94:	2000168c 	.word	0x2000168c

0800ab98 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b088      	sub	sp, #32
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
 800aba0:	460b      	mov	r3, r1
 800aba2:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800aba4:	2000      	movs	r0, #0
 800aba6:	f000 f8d1 	bl	800ad4c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800abaa:	2300      	movs	r3, #0
 800abac:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	885b      	ldrh	r3, [r3, #2]
 800abb2:	b21b      	sxth	r3, r3
 800abb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800abb8:	b21a      	sxth	r2, r3
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	881b      	ldrh	r3, [r3, #0]
 800abbe:	029b      	lsls	r3, r3, #10
 800abc0:	b21b      	sxth	r3, r3
 800abc2:	4313      	orrs	r3, r2
 800abc4:	b21b      	sxth	r3, r3
 800abc6:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800abc8:	4b33      	ldr	r3, [pc, #204]	; (800ac98 <hci_send_req+0x100>)
 800abca:	2201      	movs	r2, #1
 800abcc:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	68db      	ldr	r3, [r3, #12]
 800abd2:	b2d9      	uxtb	r1, r3
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	689a      	ldr	r2, [r3, #8]
 800abd8:	8bbb      	ldrh	r3, [r7, #28]
 800abda:	4618      	mov	r0, r3
 800abdc:	f000 f890 	bl	800ad00 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800abe0:	e04e      	b.n	800ac80 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800abe2:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800abe6:	f7f9 f88e 	bl	8003d06 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800abea:	e043      	b.n	800ac74 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800abec:	f107 030c 	add.w	r3, r7, #12
 800abf0:	4619      	mov	r1, r3
 800abf2:	482a      	ldr	r0, [pc, #168]	; (800ac9c <hci_send_req+0x104>)
 800abf4:	f000 fd3f 	bl	800b676 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	7a5b      	ldrb	r3, [r3, #9]
 800abfc:	2b0f      	cmp	r3, #15
 800abfe:	d114      	bne.n	800ac2a <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	330b      	adds	r3, #11
 800ac04:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	885b      	ldrh	r3, [r3, #2]
 800ac0a:	b29b      	uxth	r3, r3
 800ac0c:	8bba      	ldrh	r2, [r7, #28]
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d104      	bne.n	800ac1c <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	691b      	ldr	r3, [r3, #16]
 800ac16:	693a      	ldr	r2, [r7, #16]
 800ac18:	7812      	ldrb	r2, [r2, #0]
 800ac1a:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	785b      	ldrb	r3, [r3, #1]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d027      	beq.n	800ac74 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800ac24:	2301      	movs	r3, #1
 800ac26:	77fb      	strb	r3, [r7, #31]
 800ac28:	e024      	b.n	800ac74 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	330b      	adds	r3, #11
 800ac2e:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800ac30:	69bb      	ldr	r3, [r7, #24]
 800ac32:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ac36:	b29b      	uxth	r3, r3
 800ac38:	8bba      	ldrh	r2, [r7, #28]
 800ac3a:	429a      	cmp	r2, r3
 800ac3c:	d114      	bne.n	800ac68 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	7a9b      	ldrb	r3, [r3, #10]
 800ac42:	3b03      	subs	r3, #3
 800ac44:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	695a      	ldr	r2, [r3, #20]
 800ac4a:	7dfb      	ldrb	r3, [r7, #23]
 800ac4c:	429a      	cmp	r2, r3
 800ac4e:	bfa8      	it	ge
 800ac50:	461a      	movge	r2, r3
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6918      	ldr	r0, [r3, #16]
 800ac5a:	69bb      	ldr	r3, [r7, #24]
 800ac5c:	1cd9      	adds	r1, r3, #3
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	695b      	ldr	r3, [r3, #20]
 800ac62:	461a      	mov	r2, r3
 800ac64:	f002 fe01 	bl	800d86a <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800ac68:	69bb      	ldr	r3, [r7, #24]
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d001      	beq.n	800ac74 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800ac70:	2301      	movs	r3, #1
 800ac72:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800ac74:	4809      	ldr	r0, [pc, #36]	; (800ac9c <hci_send_req+0x104>)
 800ac76:	f000 fc6f 	bl	800b558 <LST_is_empty>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d0b5      	beq.n	800abec <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800ac80:	7ffb      	ldrb	r3, [r7, #31]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d0ad      	beq.n	800abe2 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800ac86:	2001      	movs	r0, #1
 800ac88:	f000 f860 	bl	800ad4c <NotifyCmdStatus>

  return 0;
 800ac8c:	2300      	movs	r3, #0
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3720      	adds	r7, #32
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}
 800ac96:	bf00      	nop
 800ac98:	200016b8 	.word	0x200016b8
 800ac9c:	200016ac 	.word	0x200016ac

0800aca0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b086      	sub	sp, #24
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800aca8:	480f      	ldr	r0, [pc, #60]	; (800ace8 <TlInit+0x48>)
 800acaa:	f000 fc45 	bl	800b538 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800acae:	4a0f      	ldr	r2, [pc, #60]	; (800acec <TlInit+0x4c>)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800acb4:	480e      	ldr	r0, [pc, #56]	; (800acf0 <TlInit+0x50>)
 800acb6:	f000 fc3f 	bl	800b538 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800acba:	4b0e      	ldr	r3, [pc, #56]	; (800acf4 <TlInit+0x54>)
 800acbc:	2201      	movs	r2, #1
 800acbe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800acc0:	4b0d      	ldr	r3, [pc, #52]	; (800acf8 <TlInit+0x58>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d00a      	beq.n	800acde <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800accc:	4b0b      	ldr	r3, [pc, #44]	; (800acfc <TlInit+0x5c>)
 800acce:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800acd0:	4b09      	ldr	r3, [pc, #36]	; (800acf8 <TlInit+0x58>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f107 0208 	add.w	r2, r7, #8
 800acd8:	4610      	mov	r0, r2
 800acda:	4798      	blx	r3
  }

  return;
 800acdc:	bf00      	nop
 800acde:	bf00      	nop
}
 800ace0:	3718      	adds	r7, #24
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}
 800ace6:	bf00      	nop
 800ace8:	200016ac 	.word	0x200016ac
 800acec:	20000238 	.word	0x20000238
 800acf0:	20000230 	.word	0x20000230
 800acf4:	2000023c 	.word	0x2000023c
 800acf8:	2000168c 	.word	0x2000168c
 800acfc:	0800ad8d 	.word	0x0800ad8d

0800ad00 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b082      	sub	sp, #8
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	4603      	mov	r3, r0
 800ad08:	603a      	str	r2, [r7, #0]
 800ad0a:	80fb      	strh	r3, [r7, #6]
 800ad0c:	460b      	mov	r3, r1
 800ad0e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800ad10:	4b0c      	ldr	r3, [pc, #48]	; (800ad44 <SendCmd+0x44>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	88fa      	ldrh	r2, [r7, #6]
 800ad16:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800ad1a:	4b0a      	ldr	r3, [pc, #40]	; (800ad44 <SendCmd+0x44>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	797a      	ldrb	r2, [r7, #5]
 800ad20:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800ad22:	4b08      	ldr	r3, [pc, #32]	; (800ad44 <SendCmd+0x44>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	330c      	adds	r3, #12
 800ad28:	797a      	ldrb	r2, [r7, #5]
 800ad2a:	6839      	ldr	r1, [r7, #0]
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f002 fd9c 	bl	800d86a <memcpy>

  hciContext.io.Send(0,0);
 800ad32:	4b05      	ldr	r3, [pc, #20]	; (800ad48 <SendCmd+0x48>)
 800ad34:	691b      	ldr	r3, [r3, #16]
 800ad36:	2100      	movs	r1, #0
 800ad38:	2000      	movs	r0, #0
 800ad3a:	4798      	blx	r3

  return;
 800ad3c:	bf00      	nop
}
 800ad3e:	3708      	adds	r7, #8
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}
 800ad44:	20000238 	.word	0x20000238
 800ad48:	2000168c 	.word	0x2000168c

0800ad4c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b082      	sub	sp, #8
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	4603      	mov	r3, r0
 800ad54:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800ad56:	79fb      	ldrb	r3, [r7, #7]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d108      	bne.n	800ad6e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800ad5c:	4b0a      	ldr	r3, [pc, #40]	; (800ad88 <NotifyCmdStatus+0x3c>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d00d      	beq.n	800ad80 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800ad64:	4b08      	ldr	r3, [pc, #32]	; (800ad88 <NotifyCmdStatus+0x3c>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	2000      	movs	r0, #0
 800ad6a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800ad6c:	e008      	b.n	800ad80 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800ad6e:	4b06      	ldr	r3, [pc, #24]	; (800ad88 <NotifyCmdStatus+0x3c>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d004      	beq.n	800ad80 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800ad76:	4b04      	ldr	r3, [pc, #16]	; (800ad88 <NotifyCmdStatus+0x3c>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	2001      	movs	r0, #1
 800ad7c:	4798      	blx	r3
  return;
 800ad7e:	bf00      	nop
 800ad80:	bf00      	nop
}
 800ad82:	3708      	adds	r7, #8
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}
 800ad88:	200016b4 	.word	0x200016b4

0800ad8c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b082      	sub	sp, #8
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	7a5b      	ldrb	r3, [r3, #9]
 800ad98:	2b0f      	cmp	r3, #15
 800ad9a:	d003      	beq.n	800ada4 <TlEvtReceived+0x18>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	7a5b      	ldrb	r3, [r3, #9]
 800ada0:	2b0e      	cmp	r3, #14
 800ada2:	d107      	bne.n	800adb4 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800ada4:	6879      	ldr	r1, [r7, #4]
 800ada6:	4809      	ldr	r0, [pc, #36]	; (800adcc <TlEvtReceived+0x40>)
 800ada8:	f000 fc1e 	bl	800b5e8 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800adac:	2000      	movs	r0, #0
 800adae:	f7f8 ff9f 	bl	8003cf0 <hci_cmd_resp_release>
 800adb2:	e006      	b.n	800adc2 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800adb4:	6879      	ldr	r1, [r7, #4]
 800adb6:	4806      	ldr	r0, [pc, #24]	; (800add0 <TlEvtReceived+0x44>)
 800adb8:	f000 fc16 	bl	800b5e8 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800adbc:	4804      	ldr	r0, [pc, #16]	; (800add0 <TlEvtReceived+0x44>)
 800adbe:	f7f8 ff8b 	bl	8003cd8 <hci_notify_asynch_evt>
  }

  return;
 800adc2:	bf00      	nop
}
 800adc4:	3708      	adds	r7, #8
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}
 800adca:	bf00      	nop
 800adcc:	200016ac 	.word	0x200016ac
 800add0:	20000230 	.word	0x20000230

0800add4 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800add4:	b480      	push	{r7}
 800add6:	b083      	sub	sp, #12
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	4a05      	ldr	r2, [pc, #20]	; (800adf4 <hci_register_io_bus+0x20>)
 800ade0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	4a04      	ldr	r2, [pc, #16]	; (800adf8 <hci_register_io_bus+0x24>)
 800ade6:	611a      	str	r2, [r3, #16]

  return;
 800ade8:	bf00      	nop
}
 800adea:	370c      	adds	r7, #12
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr
 800adf4:	0800c171 	.word	0x0800c171
 800adf8:	0800c1d9 	.word	0x0800c1d9

0800adfc <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b084      	sub	sp, #16
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	60f8      	str	r0, [r7, #12]
 800ae04:	60b9      	str	r1, [r7, #8]
 800ae06:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800ae08:	687a      	ldr	r2, [r7, #4]
 800ae0a:	68b9      	ldr	r1, [r7, #8]
 800ae0c:	68f8      	ldr	r0, [r7, #12]
 800ae0e:	f002 fd2c 	bl	800d86a <memcpy>
 800ae12:	4603      	mov	r3, r0
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3710      	adds	r7, #16
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b084      	sub	sp, #16
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	60f8      	str	r0, [r7, #12]
 800ae24:	60b9      	str	r1, [r7, #8]
 800ae26:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800ae28:	687a      	ldr	r2, [r7, #4]
 800ae2a:	68b9      	ldr	r1, [r7, #8]
 800ae2c:	68f8      	ldr	r0, [r7, #12]
 800ae2e:	f002 fc9d 	bl	800d76c <memset>
 800ae32:	4603      	mov	r3, r0
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	3710      	adds	r7, #16
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b085      	sub	sp, #20
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	4603      	mov	r3, r0
 800ae44:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800ae46:	4b0f      	ldr	r3, [pc, #60]	; (800ae84 <OTP_Read+0x48>)
 800ae48:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800ae4a:	e002      	b.n	800ae52 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	3b08      	subs	r3, #8
 800ae50:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	3307      	adds	r3, #7
 800ae56:	781b      	ldrb	r3, [r3, #0]
 800ae58:	79fa      	ldrb	r2, [r7, #7]
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	d003      	beq.n	800ae66 <OTP_Read+0x2a>
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	4a09      	ldr	r2, [pc, #36]	; (800ae88 <OTP_Read+0x4c>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d1f2      	bne.n	800ae4c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	3307      	adds	r3, #7
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	79fa      	ldrb	r2, [r7, #7]
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	d001      	beq.n	800ae76 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800ae72:	2300      	movs	r3, #0
 800ae74:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800ae76:	68fb      	ldr	r3, [r7, #12]
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3714      	adds	r7, #20
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr
 800ae84:	1fff73f8 	.word	0x1fff73f8
 800ae88:	1fff7000 	.word	0x1fff7000

0800ae8c <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b08a      	sub	sp, #40	; 0x28
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800ae94:	2300      	movs	r3, #0
 800ae96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	3301      	adds	r3, #1
 800ae9e:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800aea0:	6a3b      	ldr	r3, [r7, #32]
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	2bff      	cmp	r3, #255	; 0xff
 800aea6:	d14f      	bne.n	800af48 <PeerToPeer_Event_Handler+0xbc>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800aea8:	6a3b      	ldr	r3, [r7, #32]
 800aeaa:	3302      	adds	r3, #2
 800aeac:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 800aeae:	69fb      	ldr	r3, [r7, #28]
 800aeb0:	881b      	ldrh	r3, [r3, #0]
 800aeb2:	b29b      	uxth	r3, r3
 800aeb4:	461a      	mov	r2, r3
 800aeb6:	f640 4301 	movw	r3, #3073	; 0xc01
 800aeba:	429a      	cmp	r2, r3
 800aebc:	d140      	bne.n	800af40 <PeerToPeer_Event_Handler+0xb4>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800aebe:	69fb      	ldr	r3, [r7, #28]
 800aec0:	3302      	adds	r3, #2
 800aec2:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 800aec4:	69bb      	ldr	r3, [r7, #24]
 800aec6:	885b      	ldrh	r3, [r3, #2]
 800aec8:	b29b      	uxth	r3, r3
 800aeca:	461a      	mov	r2, r3
 800aecc:	4b22      	ldr	r3, [pc, #136]	; (800af58 <PeerToPeer_Event_Handler+0xcc>)
 800aece:	889b      	ldrh	r3, [r3, #4]
 800aed0:	3302      	adds	r3, #2
 800aed2:	429a      	cmp	r2, r3
 800aed4:	d118      	bne.n	800af08 <PeerToPeer_Event_Handler+0x7c>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 800aed6:	2301      	movs	r3, #1
 800aed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800aedc:	69bb      	ldr	r3, [r7, #24]
 800aede:	7a1b      	ldrb	r3, [r3, #8]
 800aee0:	f003 0301 	and.w	r3, r3, #1
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d007      	beq.n	800aef8 <PeerToPeer_Event_Handler+0x6c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 800aee8:	2300      	movs	r3, #0
 800aeea:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800aeec:	f107 0308 	add.w	r3, r7, #8
 800aef0:	4618      	mov	r0, r3
 800aef2:	f7f8 ff4b 	bl	8003d8c <P2PS_STM_App_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              P2PS_STM_App_Notification(&Notification);
            }
#endif
        }
        break;
 800aef6:	e025      	b.n	800af44 <PeerToPeer_Event_Handler+0xb8>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 800aef8:	2301      	movs	r3, #1
 800aefa:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800aefc:	f107 0308 	add.w	r3, r7, #8
 800af00:	4618      	mov	r0, r3
 800af02:	f7f8 ff43 	bl	8003d8c <P2PS_STM_App_Notification>
        break;
 800af06:	e01d      	b.n	800af44 <PeerToPeer_Event_Handler+0xb8>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 800af08:	69bb      	ldr	r3, [r7, #24]
 800af0a:	885b      	ldrh	r3, [r3, #2]
 800af0c:	b29b      	uxth	r3, r3
 800af0e:	461a      	mov	r2, r3
 800af10:	4b11      	ldr	r3, [pc, #68]	; (800af58 <PeerToPeer_Event_Handler+0xcc>)
 800af12:	885b      	ldrh	r3, [r3, #2]
 800af14:	3301      	adds	r3, #1
 800af16:	429a      	cmp	r2, r3
 800af18:	d114      	bne.n	800af44 <PeerToPeer_Event_Handler+0xb8>
              BLE_DBG_P2P_STM_MSG("-- GATT : LED CONFIGURATION RECEIVED\n");
 800af1a:	4810      	ldr	r0, [pc, #64]	; (800af5c <PeerToPeer_Event_Handler+0xd0>)
 800af1c:	f002 fb46 	bl	800d5ac <puts>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800af20:	2303      	movs	r3, #3
 800af22:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800af24:	69bb      	ldr	r3, [r7, #24]
 800af26:	88db      	ldrh	r3, [r3, #6]
 800af28:	b29b      	uxth	r3, r3
 800af2a:	b2db      	uxtb	r3, r3
 800af2c:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800af2e:	69bb      	ldr	r3, [r7, #24]
 800af30:	3308      	adds	r3, #8
 800af32:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 800af34:	f107 0308 	add.w	r3, r7, #8
 800af38:	4618      	mov	r0, r3
 800af3a:	f7f8 ff27 	bl	8003d8c <P2PS_STM_App_Notification>
        break;
 800af3e:	e001      	b.n	800af44 <PeerToPeer_Event_Handler+0xb8>

        default:
          break;
 800af40:	bf00      	nop
 800af42:	e002      	b.n	800af4a <PeerToPeer_Event_Handler+0xbe>
        break;
 800af44:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800af46:	e000      	b.n	800af4a <PeerToPeer_Event_Handler+0xbe>

    default:
      break;
 800af48:	bf00      	nop
  }

  return(return_value);
 800af4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800af4e:	4618      	mov	r0, r3
 800af50:	3728      	adds	r7, #40	; 0x28
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
 800af56:	bf00      	nop
 800af58:	20000240 	.word	0x20000240
 800af5c:	08010a04 	.word	0x08010a04

0800af60 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b08a      	sub	sp, #40	; 0x28
 800af64:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 800af66:	484a      	ldr	r0, [pc, #296]	; (800b090 <P2PS_STM_Init+0x130>)
 800af68:	f001 f854 	bl	800c014 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 800af6c:	238f      	movs	r3, #143	; 0x8f
 800af6e:	703b      	strb	r3, [r7, #0]
 800af70:	23e5      	movs	r3, #229	; 0xe5
 800af72:	707b      	strb	r3, [r7, #1]
 800af74:	23b3      	movs	r3, #179	; 0xb3
 800af76:	70bb      	strb	r3, [r7, #2]
 800af78:	23d5      	movs	r3, #213	; 0xd5
 800af7a:	70fb      	strb	r3, [r7, #3]
 800af7c:	232e      	movs	r3, #46	; 0x2e
 800af7e:	713b      	strb	r3, [r7, #4]
 800af80:	237f      	movs	r3, #127	; 0x7f
 800af82:	717b      	strb	r3, [r7, #5]
 800af84:	234a      	movs	r3, #74	; 0x4a
 800af86:	71bb      	strb	r3, [r7, #6]
 800af88:	2398      	movs	r3, #152	; 0x98
 800af8a:	71fb      	strb	r3, [r7, #7]
 800af8c:	232a      	movs	r3, #42	; 0x2a
 800af8e:	723b      	strb	r3, [r7, #8]
 800af90:	2348      	movs	r3, #72	; 0x48
 800af92:	727b      	strb	r3, [r7, #9]
 800af94:	237a      	movs	r3, #122	; 0x7a
 800af96:	72bb      	strb	r3, [r7, #10]
 800af98:	23cc      	movs	r3, #204	; 0xcc
 800af9a:	72fb      	strb	r3, [r7, #11]
 800af9c:	2340      	movs	r3, #64	; 0x40
 800af9e:	733b      	strb	r3, [r7, #12]
 800afa0:	23fe      	movs	r3, #254	; 0xfe
 800afa2:	737b      	strb	r3, [r7, #13]
 800afa4:	2300      	movs	r3, #0
 800afa6:	73bb      	strb	r3, [r7, #14]
 800afa8:	2300      	movs	r3, #0
 800afaa:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800afac:	4639      	mov	r1, r7
 800afae:	4b39      	ldr	r3, [pc, #228]	; (800b094 <P2PS_STM_Init+0x134>)
 800afb0:	9300      	str	r3, [sp, #0]
 800afb2:	2308      	movs	r3, #8
 800afb4:	2201      	movs	r2, #1
 800afb6:	2002      	movs	r0, #2
 800afb8:	f7fe ff48 	bl	8009e4c <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800afbc:	2319      	movs	r3, #25
 800afbe:	703b      	strb	r3, [r7, #0]
 800afc0:	23ed      	movs	r3, #237	; 0xed
 800afc2:	707b      	strb	r3, [r7, #1]
 800afc4:	2382      	movs	r3, #130	; 0x82
 800afc6:	70bb      	strb	r3, [r7, #2]
 800afc8:	23ae      	movs	r3, #174	; 0xae
 800afca:	70fb      	strb	r3, [r7, #3]
 800afcc:	23ed      	movs	r3, #237	; 0xed
 800afce:	713b      	strb	r3, [r7, #4]
 800afd0:	2321      	movs	r3, #33	; 0x21
 800afd2:	717b      	strb	r3, [r7, #5]
 800afd4:	234c      	movs	r3, #76	; 0x4c
 800afd6:	71bb      	strb	r3, [r7, #6]
 800afd8:	239d      	movs	r3, #157	; 0x9d
 800afda:	71fb      	strb	r3, [r7, #7]
 800afdc:	2341      	movs	r3, #65	; 0x41
 800afde:	723b      	strb	r3, [r7, #8]
 800afe0:	2345      	movs	r3, #69	; 0x45
 800afe2:	727b      	strb	r3, [r7, #9]
 800afe4:	2322      	movs	r3, #34	; 0x22
 800afe6:	72bb      	strb	r3, [r7, #10]
 800afe8:	238e      	movs	r3, #142	; 0x8e
 800afea:	72fb      	strb	r3, [r7, #11]
 800afec:	2341      	movs	r3, #65	; 0x41
 800afee:	733b      	strb	r3, [r7, #12]
 800aff0:	23fe      	movs	r3, #254	; 0xfe
 800aff2:	737b      	strb	r3, [r7, #13]
 800aff4:	2300      	movs	r3, #0
 800aff6:	73bb      	strb	r3, [r7, #14]
 800aff8:	2300      	movs	r3, #0
 800affa:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800affc:	4b25      	ldr	r3, [pc, #148]	; (800b094 <P2PS_STM_Init+0x134>)
 800affe:	8818      	ldrh	r0, [r3, #0]
 800b000:	463a      	mov	r2, r7
 800b002:	4b25      	ldr	r3, [pc, #148]	; (800b098 <P2PS_STM_Init+0x138>)
 800b004:	9305      	str	r3, [sp, #20]
 800b006:	2301      	movs	r3, #1
 800b008:	9304      	str	r3, [sp, #16]
 800b00a:	230a      	movs	r3, #10
 800b00c:	9303      	str	r3, [sp, #12]
 800b00e:	2301      	movs	r3, #1
 800b010:	9302      	str	r3, [sp, #8]
 800b012:	2300      	movs	r3, #0
 800b014:	9301      	str	r3, [sp, #4]
 800b016:	2306      	movs	r3, #6
 800b018:	9300      	str	r3, [sp, #0]
 800b01a:	2302      	movs	r3, #2
 800b01c:	2102      	movs	r1, #2
 800b01e:	f7fe ffeb 	bl	8009ff8 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800b022:	2319      	movs	r3, #25
 800b024:	703b      	strb	r3, [r7, #0]
 800b026:	23ed      	movs	r3, #237	; 0xed
 800b028:	707b      	strb	r3, [r7, #1]
 800b02a:	2382      	movs	r3, #130	; 0x82
 800b02c:	70bb      	strb	r3, [r7, #2]
 800b02e:	23ae      	movs	r3, #174	; 0xae
 800b030:	70fb      	strb	r3, [r7, #3]
 800b032:	23ed      	movs	r3, #237	; 0xed
 800b034:	713b      	strb	r3, [r7, #4]
 800b036:	2321      	movs	r3, #33	; 0x21
 800b038:	717b      	strb	r3, [r7, #5]
 800b03a:	234c      	movs	r3, #76	; 0x4c
 800b03c:	71bb      	strb	r3, [r7, #6]
 800b03e:	239d      	movs	r3, #157	; 0x9d
 800b040:	71fb      	strb	r3, [r7, #7]
 800b042:	2341      	movs	r3, #65	; 0x41
 800b044:	723b      	strb	r3, [r7, #8]
 800b046:	2345      	movs	r3, #69	; 0x45
 800b048:	727b      	strb	r3, [r7, #9]
 800b04a:	2322      	movs	r3, #34	; 0x22
 800b04c:	72bb      	strb	r3, [r7, #10]
 800b04e:	238e      	movs	r3, #142	; 0x8e
 800b050:	72fb      	strb	r3, [r7, #11]
 800b052:	2342      	movs	r3, #66	; 0x42
 800b054:	733b      	strb	r3, [r7, #12]
 800b056:	23fe      	movs	r3, #254	; 0xfe
 800b058:	737b      	strb	r3, [r7, #13]
 800b05a:	2300      	movs	r3, #0
 800b05c:	73bb      	strb	r3, [r7, #14]
 800b05e:	2300      	movs	r3, #0
 800b060:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800b062:	4b0c      	ldr	r3, [pc, #48]	; (800b094 <P2PS_STM_Init+0x134>)
 800b064:	8818      	ldrh	r0, [r3, #0]
 800b066:	463a      	mov	r2, r7
 800b068:	4b0c      	ldr	r3, [pc, #48]	; (800b09c <P2PS_STM_Init+0x13c>)
 800b06a:	9305      	str	r3, [sp, #20]
 800b06c:	2301      	movs	r3, #1
 800b06e:	9304      	str	r3, [sp, #16]
 800b070:	230a      	movs	r3, #10
 800b072:	9303      	str	r3, [sp, #12]
 800b074:	2301      	movs	r3, #1
 800b076:	9302      	str	r3, [sp, #8]
 800b078:	2300      	movs	r3, #0
 800b07a:	9301      	str	r3, [sp, #4]
 800b07c:	2310      	movs	r3, #16
 800b07e:	9300      	str	r3, [sp, #0]
 800b080:	2302      	movs	r3, #2
 800b082:	2102      	movs	r1, #2
 800b084:	f7fe ffb8 	bl	8009ff8 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 800b088:	bf00      	nop
}
 800b08a:	3710      	adds	r7, #16
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}
 800b090:	0800ae8d 	.word	0x0800ae8d
 800b094:	20000240 	.word	0x20000240
 800b098:	20000242 	.word	0x20000242
 800b09c:	20000244 	.word	0x20000244

0800b0a0 <P2PS_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload) 
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b086      	sub	sp, #24
 800b0a4:	af02      	add	r7, sp, #8
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	6039      	str	r1, [r7, #0]
 800b0aa:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800b0ac:	2392      	movs	r3, #146	; 0x92
 800b0ae:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 800b0b0:	88fb      	ldrh	r3, [r7, #6]
 800b0b2:	f64f 6242 	movw	r2, #65090	; 0xfe42
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	d10c      	bne.n	800b0d4 <P2PS_STM_App_Update_Char+0x34>
  {
    case P2P_NOTIFY_CHAR_UUID:
      
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 800b0ba:	4b09      	ldr	r3, [pc, #36]	; (800b0e0 <P2PS_STM_App_Update_Char+0x40>)
 800b0bc:	8818      	ldrh	r0, [r3, #0]
 800b0be:	4b08      	ldr	r3, [pc, #32]	; (800b0e0 <P2PS_STM_App_Update_Char+0x40>)
 800b0c0:	8899      	ldrh	r1, [r3, #4]
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	9300      	str	r3, [sp, #0]
 800b0c6:	2302      	movs	r3, #2
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	f7ff f89d 	bl	800a208 <aci_gatt_update_char_value>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	73fb      	strb	r3, [r7, #15]
                             aPeerToPeerContext.P2PNotifyServerToClientCharHdle,
                              0, /* charValOffset */
                             2, /* charValueLen */
                             (uint8_t *)  pPayload);
    
      break;
 800b0d2:	e000      	b.n	800b0d6 <P2PS_STM_App_Update_Char+0x36>

    default:
      break;
 800b0d4:	bf00      	nop
  }

  return result;
 800b0d6:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3710      	adds	r7, #16
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}
 800b0e0:	20000240 	.word	0x20000240

0800b0e4 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b088      	sub	sp, #32
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800b0ec:	f107 030c 	add.w	r3, r7, #12
 800b0f0:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800b0f8:	69fb      	ldr	r3, [r7, #28]
 800b0fa:	212e      	movs	r1, #46	; 0x2e
 800b0fc:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800b100:	f000 f94c 	bl	800b39c <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800b104:	69fb      	ldr	r3, [r7, #28]
 800b106:	330b      	adds	r3, #11
 800b108:	78db      	ldrb	r3, [r3, #3]
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3720      	adds	r7, #32
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}

0800b112 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800b112:	b580      	push	{r7, lr}
 800b114:	b088      	sub	sp, #32
 800b116:	af00      	add	r7, sp, #0
 800b118:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800b11a:	f107 030c 	add.w	r3, r7, #12
 800b11e:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800b126:	69fb      	ldr	r3, [r7, #28]
 800b128:	210f      	movs	r1, #15
 800b12a:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800b12e:	f000 f935 	bl	800b39c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800b132:	69fb      	ldr	r3, [r7, #28]
 800b134:	330b      	adds	r3, #11
 800b136:	78db      	ldrb	r3, [r3, #3]
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3720      	adds	r7, #32
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b088      	sub	sp, #32
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800b148:	f107 030c 	add.w	r3, r7, #12
 800b14c:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800b14e:	69fb      	ldr	r3, [r7, #28]
 800b150:	687a      	ldr	r2, [r7, #4]
 800b152:	2110      	movs	r1, #16
 800b154:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800b158:	f000 f920 	bl	800b39c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800b15c:	69fb      	ldr	r3, [r7, #28]
 800b15e:	330b      	adds	r3, #11
 800b160:	78db      	ldrb	r3, [r3, #3]
}
 800b162:	4618      	mov	r0, r3
 800b164:	3720      	adds	r7, #32
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
	...

0800b16c <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800b16c:	b480      	push	{r7}
 800b16e:	b08b      	sub	sp, #44	; 0x2c
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800b174:	2300      	movs	r3, #0
 800b176:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800b178:	2300      	movs	r3, #0
 800b17a:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800b17c:	2300      	movs	r3, #0
 800b17e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800b180:	2300      	movs	r3, #0
 800b182:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800b184:	2300      	movs	r3, #0
 800b186:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800b188:	2300      	movs	r3, #0
 800b18a:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800b18c:	2300      	movs	r3, #0
 800b18e:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800b190:	2300      	movs	r3, #0
 800b192:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800b194:	4b4a      	ldr	r3, [pc, #296]	; (800b2c0 <SHCI_GetWirelessFwInfo+0x154>)
 800b196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b198:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b19c:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800b19e:	693b      	ldr	r3, [r7, #16]
 800b1a0:	009b      	lsls	r3, r3, #2
 800b1a2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800b1a6:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	4a44      	ldr	r2, [pc, #272]	; (800b2c4 <SHCI_GetWirelessFwInfo+0x158>)
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	d10f      	bne.n	800b1d8 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	695b      	ldr	r3, [r3, #20]
 800b1bc:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	699b      	ldr	r3, [r3, #24]
 800b1c2:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	69db      	ldr	r3, [r3, #28]
 800b1c8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	68db      	ldr	r3, [r3, #12]
 800b1ce:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	691b      	ldr	r3, [r3, #16]
 800b1d4:	617b      	str	r3, [r7, #20]
 800b1d6:	e01a      	b.n	800b20e <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	009b      	lsls	r3, r3, #2
 800b1dc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800b1e0:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800b1e4:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	691b      	ldr	r3, [r3, #16]
 800b1ec:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	695b      	ldr	r3, [r3, #20]
 800b1f4:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	699b      	ldr	r3, [r3, #24]
 800b1fc:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	685b      	ldr	r3, [r3, #4]
 800b204:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	689b      	ldr	r3, [r3, #8]
 800b20c:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800b20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b210:	0e1b      	lsrs	r3, r3, #24
 800b212:	b2da      	uxtb	r2, r3
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800b218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b21a:	0c1b      	lsrs	r3, r3, #16
 800b21c:	b2da      	uxtb	r2, r3
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800b222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b224:	0a1b      	lsrs	r3, r3, #8
 800b226:	b2da      	uxtb	r2, r3
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800b22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b22e:	091b      	lsrs	r3, r3, #4
 800b230:	b2db      	uxtb	r3, r3
 800b232:	f003 030f 	and.w	r3, r3, #15
 800b236:	b2da      	uxtb	r2, r3
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800b23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b23e:	b2db      	uxtb	r3, r3
 800b240:	f003 030f 	and.w	r3, r3, #15
 800b244:	b2da      	uxtb	r2, r3
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800b24a:	6a3b      	ldr	r3, [r7, #32]
 800b24c:	0e1b      	lsrs	r3, r3, #24
 800b24e:	b2da      	uxtb	r2, r3
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800b254:	6a3b      	ldr	r3, [r7, #32]
 800b256:	0c1b      	lsrs	r3, r3, #16
 800b258:	b2da      	uxtb	r2, r3
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800b25e:	6a3b      	ldr	r3, [r7, #32]
 800b260:	0a1b      	lsrs	r3, r3, #8
 800b262:	b2da      	uxtb	r2, r3
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800b268:	6a3b      	ldr	r3, [r7, #32]
 800b26a:	b2da      	uxtb	r2, r3
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800b270:	69fb      	ldr	r3, [r7, #28]
 800b272:	b2da      	uxtb	r2, r3
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800b278:	69bb      	ldr	r3, [r7, #24]
 800b27a:	0e1b      	lsrs	r3, r3, #24
 800b27c:	b2da      	uxtb	r2, r3
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800b282:	69bb      	ldr	r3, [r7, #24]
 800b284:	0c1b      	lsrs	r3, r3, #16
 800b286:	b2da      	uxtb	r2, r3
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800b28c:	69bb      	ldr	r3, [r7, #24]
 800b28e:	0a1b      	lsrs	r3, r3, #8
 800b290:	b2da      	uxtb	r2, r3
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	0e1b      	lsrs	r3, r3, #24
 800b29a:	b2da      	uxtb	r2, r3
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800b2a0:	697b      	ldr	r3, [r7, #20]
 800b2a2:	0c1b      	lsrs	r3, r3, #16
 800b2a4:	b2da      	uxtb	r2, r3
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	b2da      	uxtb	r2, r3
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800b2b2:	2300      	movs	r3, #0
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	372c      	adds	r7, #44	; 0x2c
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr
 800b2c0:	58004000 	.word	0x58004000
 800b2c4:	a94656b9 	.word	0xa94656b9

0800b2c8 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b082      	sub	sp, #8
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	685b      	ldr	r3, [r3, #4]
 800b2d6:	4a08      	ldr	r2, [pc, #32]	; (800b2f8 <shci_init+0x30>)
 800b2d8:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800b2da:	4a08      	ldr	r2, [pc, #32]	; (800b2fc <shci_init+0x34>)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800b2e0:	4806      	ldr	r0, [pc, #24]	; (800b2fc <shci_init+0x34>)
 800b2e2:	f000 f915 	bl	800b510 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f000 f898 	bl	800b420 <TlInit>

  return;
 800b2f0:	bf00      	nop
}
 800b2f2:	3708      	adds	r7, #8
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}
 800b2f8:	200016dc 	.word	0x200016dc
 800b2fc:	200016bc 	.word	0x200016bc

0800b300 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b084      	sub	sp, #16
 800b304:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800b306:	4822      	ldr	r0, [pc, #136]	; (800b390 <shci_user_evt_proc+0x90>)
 800b308:	f000 f926 	bl	800b558 <LST_is_empty>
 800b30c:	4603      	mov	r3, r0
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d12b      	bne.n	800b36a <shci_user_evt_proc+0x6a>
 800b312:	4b20      	ldr	r3, [pc, #128]	; (800b394 <shci_user_evt_proc+0x94>)
 800b314:	781b      	ldrb	r3, [r3, #0]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d027      	beq.n	800b36a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800b31a:	f107 030c 	add.w	r3, r7, #12
 800b31e:	4619      	mov	r1, r3
 800b320:	481b      	ldr	r0, [pc, #108]	; (800b390 <shci_user_evt_proc+0x90>)
 800b322:	f000 f9a8 	bl	800b676 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800b326:	4b1c      	ldr	r3, [pc, #112]	; (800b398 <shci_user_evt_proc+0x98>)
 800b328:	69db      	ldr	r3, [r3, #28]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d00c      	beq.n	800b348 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800b332:	2301      	movs	r3, #1
 800b334:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800b336:	4b18      	ldr	r3, [pc, #96]	; (800b398 <shci_user_evt_proc+0x98>)
 800b338:	69db      	ldr	r3, [r3, #28]
 800b33a:	1d3a      	adds	r2, r7, #4
 800b33c:	4610      	mov	r0, r2
 800b33e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800b340:	793a      	ldrb	r2, [r7, #4]
 800b342:	4b14      	ldr	r3, [pc, #80]	; (800b394 <shci_user_evt_proc+0x94>)
 800b344:	701a      	strb	r2, [r3, #0]
 800b346:	e002      	b.n	800b34e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800b348:	4b12      	ldr	r3, [pc, #72]	; (800b394 <shci_user_evt_proc+0x94>)
 800b34a:	2201      	movs	r2, #1
 800b34c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800b34e:	4b11      	ldr	r3, [pc, #68]	; (800b394 <shci_user_evt_proc+0x94>)
 800b350:	781b      	ldrb	r3, [r3, #0]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d004      	beq.n	800b360 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	4618      	mov	r0, r3
 800b35a:	f001 f84d 	bl	800c3f8 <TL_MM_EvtDone>
 800b35e:	e004      	b.n	800b36a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	4619      	mov	r1, r3
 800b364:	480a      	ldr	r0, [pc, #40]	; (800b390 <shci_user_evt_proc+0x90>)
 800b366:	f000 f919 	bl	800b59c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800b36a:	4809      	ldr	r0, [pc, #36]	; (800b390 <shci_user_evt_proc+0x90>)
 800b36c:	f000 f8f4 	bl	800b558 <LST_is_empty>
 800b370:	4603      	mov	r3, r0
 800b372:	2b00      	cmp	r3, #0
 800b374:	d107      	bne.n	800b386 <shci_user_evt_proc+0x86>
 800b376:	4b07      	ldr	r3, [pc, #28]	; (800b394 <shci_user_evt_proc+0x94>)
 800b378:	781b      	ldrb	r3, [r3, #0]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d003      	beq.n	800b386 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800b37e:	4804      	ldr	r0, [pc, #16]	; (800b390 <shci_user_evt_proc+0x90>)
 800b380:	f7f6 f966 	bl	8001650 <shci_notify_asynch_evt>
  }


  return;
 800b384:	bf00      	nop
 800b386:	bf00      	nop
}
 800b388:	3710      	adds	r7, #16
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}
 800b38e:	bf00      	nop
 800b390:	20000254 	.word	0x20000254
 800b394:	20000264 	.word	0x20000264
 800b398:	200016bc 	.word	0x200016bc

0800b39c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b084      	sub	sp, #16
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	60ba      	str	r2, [r7, #8]
 800b3a4:	607b      	str	r3, [r7, #4]
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	81fb      	strh	r3, [r7, #14]
 800b3aa:	460b      	mov	r3, r1
 800b3ac:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800b3ae:	2000      	movs	r0, #0
 800b3b0:	f000 f868 	bl	800b484 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800b3b4:	4b17      	ldr	r3, [pc, #92]	; (800b414 <shci_send+0x78>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	89fa      	ldrh	r2, [r7, #14]
 800b3ba:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800b3be:	4b15      	ldr	r3, [pc, #84]	; (800b414 <shci_send+0x78>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	7b7a      	ldrb	r2, [r7, #13]
 800b3c4:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800b3c6:	4b13      	ldr	r3, [pc, #76]	; (800b414 <shci_send+0x78>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	330c      	adds	r3, #12
 800b3cc:	7b7a      	ldrb	r2, [r7, #13]
 800b3ce:	68b9      	ldr	r1, [r7, #8]
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f002 fa4a 	bl	800d86a <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800b3d6:	4b10      	ldr	r3, [pc, #64]	; (800b418 <shci_send+0x7c>)
 800b3d8:	2201      	movs	r2, #1
 800b3da:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800b3dc:	4b0f      	ldr	r3, [pc, #60]	; (800b41c <shci_send+0x80>)
 800b3de:	691b      	ldr	r3, [r3, #16]
 800b3e0:	2100      	movs	r1, #0
 800b3e2:	2000      	movs	r0, #0
 800b3e4:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800b3e6:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800b3ea:	f7f6 f948 	bl	800167e <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f103 0008 	add.w	r0, r3, #8
 800b3f4:	4b07      	ldr	r3, [pc, #28]	; (800b414 <shci_send+0x78>)
 800b3f6:	6819      	ldr	r1, [r3, #0]
 800b3f8:	4b06      	ldr	r3, [pc, #24]	; (800b414 <shci_send+0x78>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	789b      	ldrb	r3, [r3, #2]
 800b3fe:	3303      	adds	r3, #3
 800b400:	461a      	mov	r2, r3
 800b402:	f002 fa32 	bl	800d86a <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800b406:	2001      	movs	r0, #1
 800b408:	f000 f83c 	bl	800b484 <Cmd_SetStatus>

  return;
 800b40c:	bf00      	nop
}
 800b40e:	3710      	adds	r7, #16
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}
 800b414:	20000260 	.word	0x20000260
 800b418:	200016e0 	.word	0x200016e0
 800b41c:	200016bc 	.word	0x200016bc

0800b420 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b086      	sub	sp, #24
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800b428:	4a10      	ldr	r2, [pc, #64]	; (800b46c <TlInit+0x4c>)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800b42e:	4810      	ldr	r0, [pc, #64]	; (800b470 <TlInit+0x50>)
 800b430:	f000 f882 	bl	800b538 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800b434:	2001      	movs	r0, #1
 800b436:	f000 f825 	bl	800b484 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800b43a:	4b0e      	ldr	r3, [pc, #56]	; (800b474 <TlInit+0x54>)
 800b43c:	2201      	movs	r2, #1
 800b43e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800b440:	4b0d      	ldr	r3, [pc, #52]	; (800b478 <TlInit+0x58>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d00c      	beq.n	800b462 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800b44c:	4b0b      	ldr	r3, [pc, #44]	; (800b47c <TlInit+0x5c>)
 800b44e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800b450:	4b0b      	ldr	r3, [pc, #44]	; (800b480 <TlInit+0x60>)
 800b452:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800b454:	4b08      	ldr	r3, [pc, #32]	; (800b478 <TlInit+0x58>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f107 020c 	add.w	r2, r7, #12
 800b45c:	4610      	mov	r0, r2
 800b45e:	4798      	blx	r3
  }

  return;
 800b460:	bf00      	nop
 800b462:	bf00      	nop
}
 800b464:	3718      	adds	r7, #24
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}
 800b46a:	bf00      	nop
 800b46c:	20000260 	.word	0x20000260
 800b470:	20000254 	.word	0x20000254
 800b474:	20000264 	.word	0x20000264
 800b478:	200016bc 	.word	0x200016bc
 800b47c:	0800b4d5 	.word	0x0800b4d5
 800b480:	0800b4ed 	.word	0x0800b4ed

0800b484 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b082      	sub	sp, #8
 800b488:	af00      	add	r7, sp, #0
 800b48a:	4603      	mov	r3, r0
 800b48c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800b48e:	79fb      	ldrb	r3, [r7, #7]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d10b      	bne.n	800b4ac <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800b494:	4b0d      	ldr	r3, [pc, #52]	; (800b4cc <Cmd_SetStatus+0x48>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d003      	beq.n	800b4a4 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800b49c:	4b0b      	ldr	r3, [pc, #44]	; (800b4cc <Cmd_SetStatus+0x48>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	2000      	movs	r0, #0
 800b4a2:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800b4a4:	4b0a      	ldr	r3, [pc, #40]	; (800b4d0 <Cmd_SetStatus+0x4c>)
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800b4aa:	e00b      	b.n	800b4c4 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800b4ac:	4b08      	ldr	r3, [pc, #32]	; (800b4d0 <Cmd_SetStatus+0x4c>)
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800b4b2:	4b06      	ldr	r3, [pc, #24]	; (800b4cc <Cmd_SetStatus+0x48>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d004      	beq.n	800b4c4 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800b4ba:	4b04      	ldr	r3, [pc, #16]	; (800b4cc <Cmd_SetStatus+0x48>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	2001      	movs	r0, #1
 800b4c0:	4798      	blx	r3
  return;
 800b4c2:	bf00      	nop
 800b4c4:	bf00      	nop
}
 800b4c6:	3708      	adds	r7, #8
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}
 800b4cc:	200016dc 	.word	0x200016dc
 800b4d0:	2000025c 	.word	0x2000025c

0800b4d4 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b082      	sub	sp, #8
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800b4dc:	2000      	movs	r0, #0
 800b4de:	f7f6 f8c3 	bl	8001668 <shci_cmd_resp_release>

  return;
 800b4e2:	bf00      	nop
}
 800b4e4:	3708      	adds	r7, #8
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
	...

0800b4ec <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b082      	sub	sp, #8
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800b4f4:	6879      	ldr	r1, [r7, #4]
 800b4f6:	4805      	ldr	r0, [pc, #20]	; (800b50c <TlUserEvtReceived+0x20>)
 800b4f8:	f000 f876 	bl	800b5e8 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800b4fc:	4803      	ldr	r0, [pc, #12]	; (800b50c <TlUserEvtReceived+0x20>)
 800b4fe:	f7f6 f8a7 	bl	8001650 <shci_notify_asynch_evt>

  return;
 800b502:	bf00      	nop
}
 800b504:	3708      	adds	r7, #8
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}
 800b50a:	bf00      	nop
 800b50c:	20000254 	.word	0x20000254

0800b510 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800b510:	b480      	push	{r7}
 800b512:	b083      	sub	sp, #12
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	4a05      	ldr	r2, [pc, #20]	; (800b530 <shci_register_io_bus+0x20>)
 800b51c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	4a04      	ldr	r2, [pc, #16]	; (800b534 <shci_register_io_bus+0x24>)
 800b522:	611a      	str	r2, [r3, #16]

  return;
 800b524:	bf00      	nop
}
 800b526:	370c      	adds	r7, #12
 800b528:	46bd      	mov	sp, r7
 800b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52e:	4770      	bx	lr
 800b530:	0800c285 	.word	0x0800c285
 800b534:	0800c2d9 	.word	0x0800c2d9

0800b538 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800b538:	b480      	push	{r7}
 800b53a:	b083      	sub	sp, #12
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	687a      	ldr	r2, [r7, #4]
 800b544:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	687a      	ldr	r2, [r7, #4]
 800b54a:	605a      	str	r2, [r3, #4]
}
 800b54c:	bf00      	nop
 800b54e:	370c      	adds	r7, #12
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr

0800b558 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800b558:	b480      	push	{r7}
 800b55a:	b087      	sub	sp, #28
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b560:	f3ef 8310 	mrs	r3, PRIMASK
 800b564:	60fb      	str	r3, [r7, #12]
  return(result);
 800b566:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b568:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b56a:	b672      	cpsid	i
}
 800b56c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	687a      	ldr	r2, [r7, #4]
 800b574:	429a      	cmp	r2, r3
 800b576:	d102      	bne.n	800b57e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800b578:	2301      	movs	r3, #1
 800b57a:	75fb      	strb	r3, [r7, #23]
 800b57c:	e001      	b.n	800b582 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800b57e:	2300      	movs	r3, #0
 800b580:	75fb      	strb	r3, [r7, #23]
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	f383 8810 	msr	PRIMASK, r3
}
 800b58c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800b58e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b590:	4618      	mov	r0, r3
 800b592:	371c      	adds	r7, #28
 800b594:	46bd      	mov	sp, r7
 800b596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59a:	4770      	bx	lr

0800b59c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800b59c:	b480      	push	{r7}
 800b59e:	b087      	sub	sp, #28
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5a6:	f3ef 8310 	mrs	r3, PRIMASK
 800b5aa:	60fb      	str	r3, [r7, #12]
  return(result);
 800b5ac:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b5ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b5b0:	b672      	cpsid	i
}
 800b5b2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681a      	ldr	r2, [r3, #0]
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	687a      	ldr	r2, [r7, #4]
 800b5c0:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	683a      	ldr	r2, [r7, #0]
 800b5c6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	683a      	ldr	r2, [r7, #0]
 800b5ce:	605a      	str	r2, [r3, #4]
 800b5d0:	697b      	ldr	r3, [r7, #20]
 800b5d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5d4:	693b      	ldr	r3, [r7, #16]
 800b5d6:	f383 8810 	msr	PRIMASK, r3
}
 800b5da:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b5dc:	bf00      	nop
 800b5de:	371c      	adds	r7, #28
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e6:	4770      	bx	lr

0800b5e8 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b087      	sub	sp, #28
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
 800b5f0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5f2:	f3ef 8310 	mrs	r3, PRIMASK
 800b5f6:	60fb      	str	r3, [r7, #12]
  return(result);
 800b5f8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b5fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b5fc:	b672      	cpsid	i
}
 800b5fe:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	685a      	ldr	r2, [r3, #4]
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	683a      	ldr	r2, [r7, #0]
 800b612:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	685b      	ldr	r3, [r3, #4]
 800b618:	683a      	ldr	r2, [r7, #0]
 800b61a:	601a      	str	r2, [r3, #0]
 800b61c:	697b      	ldr	r3, [r7, #20]
 800b61e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	f383 8810 	msr	PRIMASK, r3
}
 800b626:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b628:	bf00      	nop
 800b62a:	371c      	adds	r7, #28
 800b62c:	46bd      	mov	sp, r7
 800b62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b632:	4770      	bx	lr

0800b634 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800b634:	b480      	push	{r7}
 800b636:	b087      	sub	sp, #28
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b63c:	f3ef 8310 	mrs	r3, PRIMASK
 800b640:	60fb      	str	r3, [r7, #12]
  return(result);
 800b642:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b644:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b646:	b672      	cpsid	i
}
 800b648:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	685b      	ldr	r3, [r3, #4]
 800b64e:	687a      	ldr	r2, [r7, #4]
 800b650:	6812      	ldr	r2, [r2, #0]
 800b652:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	687a      	ldr	r2, [r7, #4]
 800b65a:	6852      	ldr	r2, [r2, #4]
 800b65c:	605a      	str	r2, [r3, #4]
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b662:	693b      	ldr	r3, [r7, #16]
 800b664:	f383 8810 	msr	PRIMASK, r3
}
 800b668:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b66a:	bf00      	nop
 800b66c:	371c      	adds	r7, #28
 800b66e:	46bd      	mov	sp, r7
 800b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b674:	4770      	bx	lr

0800b676 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800b676:	b580      	push	{r7, lr}
 800b678:	b086      	sub	sp, #24
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	6078      	str	r0, [r7, #4]
 800b67e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b680:	f3ef 8310 	mrs	r3, PRIMASK
 800b684:	60fb      	str	r3, [r7, #12]
  return(result);
 800b686:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b688:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b68a:	b672      	cpsid	i
}
 800b68c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681a      	ldr	r2, [r3, #0]
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	4618      	mov	r0, r3
 800b69c:	f7ff ffca 	bl	800b634 <LST_remove_node>
 800b6a0:	697b      	ldr	r3, [r7, #20]
 800b6a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	f383 8810 	msr	PRIMASK, r3
}
 800b6aa:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b6ac:	bf00      	nop
 800b6ae:	3718      	adds	r7, #24
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}

0800b6b4 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b085      	sub	sp, #20
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	60f8      	str	r0, [r7, #12]
 800b6bc:	60b9      	str	r1, [r7, #8]
 800b6be:	607a      	str	r2, [r7, #4]
 800b6c0:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	68ba      	ldr	r2, [r7, #8]
 800b6c6:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	2200      	movs	r2, #0
 800b6de:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	687a      	ldr	r2, [r7, #4]
 800b6e4:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	887a      	ldrh	r2, [r7, #2]
 800b6ea:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	7e3a      	ldrb	r2, [r7, #24]
 800b6f0:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800b6f2:	7e3b      	ldrb	r3, [r7, #24]
 800b6f4:	f003 0302 	and.w	r3, r3, #2
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d006      	beq.n	800b70a <CircularQueue_Init+0x56>
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	891b      	ldrh	r3, [r3, #8]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d002      	beq.n	800b70a <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800b704:	f04f 33ff 	mov.w	r3, #4294967295
 800b708:	e000      	b.n	800b70c <CircularQueue_Init+0x58>
  }
  return 0;
 800b70a:	2300      	movs	r3, #0
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3714      	adds	r7, #20
 800b710:	46bd      	mov	sp, r7
 800b712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b716:	4770      	bx	lr

0800b718 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b08e      	sub	sp, #56	; 0x38
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	60f8      	str	r0, [r7, #12]
 800b720:	60b9      	str	r1, [r7, #8]
 800b722:	603b      	str	r3, [r7, #0]
 800b724:	4613      	mov	r3, r2
 800b726:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800b728:	2300      	movs	r3, #0
 800b72a:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800b72c:	2300      	movs	r3, #0
 800b72e:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 800b730:	2300      	movs	r3, #0
 800b732:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800b734:	2300      	movs	r3, #0
 800b736:	62bb      	str	r3, [r7, #40]	; 0x28
 800b738:	2300      	movs	r3, #0
 800b73a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800b73c:	2300      	movs	r3, #0
 800b73e:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800b740:	2300      	movs	r3, #0
 800b742:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	891b      	ldrh	r3, [r3, #8]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d101      	bne.n	800b750 <CircularQueue_Add+0x38>
 800b74c:	2302      	movs	r3, #2
 800b74e:	e000      	b.n	800b752 <CircularQueue_Add+0x3a>
 800b750:	2300      	movs	r3, #0
 800b752:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	695b      	ldr	r3, [r3, #20]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d02a      	beq.n	800b7b2 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	891b      	ldrh	r3, [r3, #8]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d123      	bne.n	800b7ac <CircularQueue_Add+0x94>
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	681a      	ldr	r2, [r3, #0]
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	691b      	ldr	r3, [r3, #16]
 800b76c:	4413      	add	r3, r2
 800b76e:	781b      	ldrb	r3, [r3, #0]
 800b770:	b29a      	uxth	r2, r3
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	6819      	ldr	r1, [r3, #0]
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	691b      	ldr	r3, [r3, #16]
 800b77a:	1c58      	adds	r0, r3, #1
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	685b      	ldr	r3, [r3, #4]
 800b780:	4298      	cmp	r0, r3
 800b782:	d306      	bcc.n	800b792 <CircularQueue_Add+0x7a>
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	6918      	ldr	r0, [r3, #16]
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	1ac3      	subs	r3, r0, r3
 800b78e:	3301      	adds	r3, #1
 800b790:	e002      	b.n	800b798 <CircularQueue_Add+0x80>
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	691b      	ldr	r3, [r3, #16]
 800b796:	3301      	adds	r3, #1
 800b798:	440b      	add	r3, r1
 800b79a:	781b      	ldrb	r3, [r3, #0]
 800b79c:	b29b      	uxth	r3, r3
 800b79e:	021b      	lsls	r3, r3, #8
 800b7a0:	b29b      	uxth	r3, r3
 800b7a2:	4413      	add	r3, r2
 800b7a4:	b29b      	uxth	r3, r3
 800b7a6:	3302      	adds	r3, #2
 800b7a8:	b29b      	uxth	r3, r3
 800b7aa:	e001      	b.n	800b7b0 <CircularQueue_Add+0x98>
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	891b      	ldrh	r3, [r3, #8]
 800b7b0:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	891b      	ldrh	r3, [r3, #8]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d002      	beq.n	800b7c0 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	891b      	ldrh	r3, [r3, #8]
 800b7be:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	691a      	ldr	r2, [r3, #16]
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	68db      	ldr	r3, [r3, #12]
 800b7c8:	429a      	cmp	r2, r3
 800b7ca:	d307      	bcc.n	800b7dc <CircularQueue_Add+0xc4>
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	685a      	ldr	r2, [r3, #4]
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	6919      	ldr	r1, [r3, #16]
 800b7d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b7d6:	440b      	add	r3, r1
 800b7d8:	1ad3      	subs	r3, r2, r3
 800b7da:	e000      	b.n	800b7de <CircularQueue_Add+0xc6>
 800b7dc:	2300      	movs	r3, #0
 800b7de:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800b7e0:	88fa      	ldrh	r2, [r7, #6]
 800b7e2:	7ffb      	ldrb	r3, [r7, #31]
 800b7e4:	4413      	add	r3, r2
 800b7e6:	461a      	mov	r2, r3
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	fb02 f303 	mul.w	r3, r2, r3
 800b7ee:	69ba      	ldr	r2, [r7, #24]
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	d80b      	bhi.n	800b80c <CircularQueue_Add+0xf4>
 800b7f4:	88fa      	ldrh	r2, [r7, #6]
 800b7f6:	7ffb      	ldrb	r3, [r7, #31]
 800b7f8:	4413      	add	r3, r2
 800b7fa:	461a      	mov	r2, r3
 800b7fc:	69bb      	ldr	r3, [r7, #24]
 800b7fe:	fbb3 f1f2 	udiv	r1, r3, r2
 800b802:	fb01 f202 	mul.w	r2, r1, r2
 800b806:	1a9b      	subs	r3, r3, r2
 800b808:	b2db      	uxtb	r3, r3
 800b80a:	e000      	b.n	800b80e <CircularQueue_Add+0xf6>
 800b80c:	2300      	movs	r3, #0
 800b80e:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800b810:	7dfa      	ldrb	r2, [r7, #23]
 800b812:	7ffb      	ldrb	r3, [r7, #31]
 800b814:	429a      	cmp	r2, r3
 800b816:	bf8c      	ite	hi
 800b818:	2301      	movhi	r3, #1
 800b81a:	2300      	movls	r3, #0
 800b81c:	b2db      	uxtb	r3, r3
 800b81e:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800b820:	7fbb      	ldrb	r3, [r7, #30]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d008      	beq.n	800b838 <CircularQueue_Add+0x120>
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	7f1b      	ldrb	r3, [r3, #28]
 800b82a:	f003 0301 	and.w	r3, r3, #1
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d002      	beq.n	800b838 <CircularQueue_Add+0x120>
 800b832:	7dfb      	ldrb	r3, [r7, #23]
 800b834:	b29b      	uxth	r3, r3
 800b836:	e000      	b.n	800b83a <CircularQueue_Add+0x122>
 800b838:	8bbb      	ldrh	r3, [r7, #28]
 800b83a:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800b83c:	7fbb      	ldrb	r3, [r7, #30]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d008      	beq.n	800b854 <CircularQueue_Add+0x13c>
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	7f1b      	ldrb	r3, [r3, #28]
 800b846:	f003 0302 	and.w	r3, r3, #2
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d002      	beq.n	800b854 <CircularQueue_Add+0x13c>
 800b84e:	7ffb      	ldrb	r3, [r7, #31]
 800b850:	b29b      	uxth	r3, r3
 800b852:	e000      	b.n	800b856 <CircularQueue_Add+0x13e>
 800b854:	8bbb      	ldrh	r3, [r7, #28]
 800b856:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800b858:	88fb      	ldrh	r3, [r7, #6]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	f000 817e 	beq.w	800bb5c <CircularQueue_Add+0x444>
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	695a      	ldr	r2, [r3, #20]
 800b864:	88f9      	ldrh	r1, [r7, #6]
 800b866:	7ffb      	ldrb	r3, [r7, #31]
 800b868:	440b      	add	r3, r1
 800b86a:	4619      	mov	r1, r3
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	fb01 f303 	mul.w	r3, r1, r3
 800b872:	441a      	add	r2, r3
 800b874:	8bbb      	ldrh	r3, [r7, #28]
 800b876:	441a      	add	r2, r3
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	685b      	ldr	r3, [r3, #4]
 800b87c:	429a      	cmp	r2, r3
 800b87e:	f200 816d 	bhi.w	800bb5c <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800b882:	2300      	movs	r3, #0
 800b884:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b886:	e14a      	b.n	800bb1e <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	691a      	ldr	r2, [r3, #16]
 800b88c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b88e:	441a      	add	r2, r3
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	685b      	ldr	r3, [r3, #4]
 800b894:	429a      	cmp	r2, r3
 800b896:	d307      	bcc.n	800b8a8 <CircularQueue_Add+0x190>
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	691a      	ldr	r2, [r3, #16]
 800b89c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b89e:	441a      	add	r2, r3
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	685b      	ldr	r3, [r3, #4]
 800b8a4:	1ad3      	subs	r3, r2, r3
 800b8a6:	e003      	b.n	800b8b0 <CircularQueue_Add+0x198>
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	691a      	ldr	r2, [r3, #16]
 800b8ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b8ae:	4413      	add	r3, r2
 800b8b0:	68fa      	ldr	r2, [r7, #12]
 800b8b2:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	691b      	ldr	r3, [r3, #16]
 800b8b8:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	891b      	ldrh	r3, [r3, #8]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d130      	bne.n	800b924 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	681a      	ldr	r2, [r3, #0]
 800b8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c8:	1c59      	adds	r1, r3, #1
 800b8ca:	6339      	str	r1, [r7, #48]	; 0x30
 800b8cc:	4413      	add	r3, r2
 800b8ce:	88fa      	ldrh	r2, [r7, #6]
 800b8d0:	b2d2      	uxtb	r2, r2
 800b8d2:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	685b      	ldr	r3, [r3, #4]
 800b8d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d304      	bcc.n	800b8e8 <CircularQueue_Add+0x1d0>
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	685b      	ldr	r3, [r3, #4]
 800b8e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8e4:	1ad3      	subs	r3, r2, r3
 800b8e6:	e000      	b.n	800b8ea <CircularQueue_Add+0x1d2>
 800b8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ea:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800b8ec:	88fb      	ldrh	r3, [r7, #6]
 800b8ee:	0a1b      	lsrs	r3, r3, #8
 800b8f0:	b298      	uxth	r0, r3
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681a      	ldr	r2, [r3, #0]
 800b8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f8:	1c59      	adds	r1, r3, #1
 800b8fa:	6339      	str	r1, [r7, #48]	; 0x30
 800b8fc:	4413      	add	r3, r2
 800b8fe:	b2c2      	uxtb	r2, r0
 800b900:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	685b      	ldr	r3, [r3, #4]
 800b906:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b908:	429a      	cmp	r2, r3
 800b90a:	d304      	bcc.n	800b916 <CircularQueue_Add+0x1fe>
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	685b      	ldr	r3, [r3, #4]
 800b910:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b912:	1ad3      	subs	r3, r2, r3
 800b914:	e000      	b.n	800b918 <CircularQueue_Add+0x200>
 800b916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b918:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	695b      	ldr	r3, [r3, #20]
 800b91e:	1c9a      	adds	r2, r3, #2
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800b924:	88fa      	ldrh	r2, [r7, #6]
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	6859      	ldr	r1, [r3, #4]
 800b92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b92c:	1acb      	subs	r3, r1, r3
 800b92e:	4293      	cmp	r3, r2
 800b930:	bf28      	it	cs
 800b932:	4613      	movcs	r3, r2
 800b934:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800b936:	88fb      	ldrh	r3, [r7, #6]
 800b938:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b93a:	429a      	cmp	r2, r3
 800b93c:	d007      	beq.n	800b94e <CircularQueue_Add+0x236>
 800b93e:	88fb      	ldrh	r3, [r7, #6]
 800b940:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b942:	429a      	cmp	r2, r3
 800b944:	d225      	bcs.n	800b992 <CircularQueue_Add+0x27a>
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	7f1b      	ldrb	r3, [r3, #28]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d121      	bne.n	800b992 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	681a      	ldr	r2, [r3, #0]
 800b952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b954:	18d0      	adds	r0, r2, r3
 800b956:	88fb      	ldrh	r3, [r7, #6]
 800b958:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b95a:	fb02 f303 	mul.w	r3, r2, r3
 800b95e:	68ba      	ldr	r2, [r7, #8]
 800b960:	4413      	add	r3, r2
 800b962:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b964:	4619      	mov	r1, r3
 800b966:	f001 ff80 	bl	800d86a <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	695a      	ldr	r2, [r3, #20]
 800b96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b970:	441a      	add	r2, r3
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800b976:	2300      	movs	r3, #0
 800b978:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800b97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b97c:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800b97e:	88fa      	ldrh	r2, [r7, #6]
 800b980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b982:	1ad3      	subs	r3, r2, r3
 800b984:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800b986:	7ffb      	ldrb	r3, [r7, #31]
 800b988:	b29a      	uxth	r2, r3
 800b98a:	88fb      	ldrh	r3, [r7, #6]
 800b98c:	4413      	add	r3, r2
 800b98e:	86fb      	strh	r3, [r7, #54]	; 0x36
 800b990:	e0a4      	b.n	800badc <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800b992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b994:	2b00      	cmp	r3, #0
 800b996:	f000 80a1 	beq.w	800badc <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	7f1b      	ldrb	r3, [r3, #28]
 800b99e:	f003 0301 	and.w	r3, r3, #1
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d03a      	beq.n	800ba1c <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	891b      	ldrh	r3, [r3, #8]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d10d      	bne.n	800b9ca <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681a      	ldr	r2, [r3, #0]
 800b9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b4:	3b02      	subs	r3, #2
 800b9b6:	4413      	add	r3, r2
 800b9b8:	22ff      	movs	r2, #255	; 0xff
 800b9ba:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681a      	ldr	r2, [r3, #0]
 800b9c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c2:	3b01      	subs	r3, #1
 800b9c4:	4413      	add	r3, r2
 800b9c6:	22ff      	movs	r2, #255	; 0xff
 800b9c8:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	695a      	ldr	r2, [r3, #20]
 800b9ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d0:	441a      	add	r2, r3
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800b9da:	88fb      	ldrh	r3, [r7, #6]
 800b9dc:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800b9de:	2300      	movs	r3, #0
 800b9e0:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	891b      	ldrh	r3, [r3, #8]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d16f      	bne.n	800baca <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	681a      	ldr	r2, [r3, #0]
 800b9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f0:	1c59      	adds	r1, r3, #1
 800b9f2:	6339      	str	r1, [r7, #48]	; 0x30
 800b9f4:	4413      	add	r3, r2
 800b9f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9f8:	b2d2      	uxtb	r2, r2
 800b9fa:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800b9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9fe:	0a18      	lsrs	r0, r3, #8
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681a      	ldr	r2, [r3, #0]
 800ba04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba06:	1c59      	adds	r1, r3, #1
 800ba08:	6339      	str	r1, [r7, #48]	; 0x30
 800ba0a:	4413      	add	r3, r2
 800ba0c:	b2c2      	uxtb	r2, r0
 800ba0e:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	695b      	ldr	r3, [r3, #20]
 800ba14:	1c9a      	adds	r2, r3, #2
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	615a      	str	r2, [r3, #20]
 800ba1a:	e056      	b.n	800baca <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	7f1b      	ldrb	r3, [r3, #28]
 800ba20:	f003 0302 	and.w	r3, r3, #2
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d050      	beq.n	800baca <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	891b      	ldrh	r3, [r3, #8]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d14a      	bne.n	800bac6 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681a      	ldr	r2, [r3, #0]
 800ba34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba36:	3b02      	subs	r3, #2
 800ba38:	4413      	add	r3, r2
 800ba3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba3c:	b2d2      	uxtb	r2, r2
 800ba3e:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800ba40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba42:	0a19      	lsrs	r1, r3, #8
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	681a      	ldr	r2, [r3, #0]
 800ba48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba4a:	3b01      	subs	r3, #1
 800ba4c:	4413      	add	r3, r2
 800ba4e:	b2ca      	uxtb	r2, r1
 800ba50:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	681a      	ldr	r2, [r3, #0]
 800ba56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba58:	18d0      	adds	r0, r2, r3
 800ba5a:	88fb      	ldrh	r3, [r7, #6]
 800ba5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba5e:	fb02 f303 	mul.w	r3, r2, r3
 800ba62:	68ba      	ldr	r2, [r7, #8]
 800ba64:	4413      	add	r3, r2
 800ba66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba68:	4619      	mov	r1, r3
 800ba6a:	f001 fefe 	bl	800d86a <memcpy>
             q->byteCount += NbBytesToCopy; 
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	695a      	ldr	r2, [r3, #20]
 800ba72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba74:	441a      	add	r2, r3
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800ba7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba7c:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800ba7e:	88fa      	ldrh	r2, [r7, #6]
 800ba80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba82:	1ad3      	subs	r3, r2, r3
 800ba84:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	699b      	ldr	r3, [r3, #24]
 800ba8a:	1c5a      	adds	r2, r3, #1
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800ba90:	2300      	movs	r3, #0
 800ba92:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681a      	ldr	r2, [r3, #0]
 800ba98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba9a:	1c59      	adds	r1, r3, #1
 800ba9c:	6339      	str	r1, [r7, #48]	; 0x30
 800ba9e:	4413      	add	r3, r2
 800baa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800baa2:	b2d2      	uxtb	r2, r2
 800baa4:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800baa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa8:	0a18      	lsrs	r0, r3, #8
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	681a      	ldr	r2, [r3, #0]
 800baae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab0:	1c59      	adds	r1, r3, #1
 800bab2:	6339      	str	r1, [r7, #48]	; 0x30
 800bab4:	4413      	add	r3, r2
 800bab6:	b2c2      	uxtb	r2, r0
 800bab8:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	695b      	ldr	r3, [r3, #20]
 800babe:	1c9a      	adds	r2, r3, #2
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	615a      	str	r2, [r3, #20]
 800bac4:	e001      	b.n	800baca <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800bac6:	2300      	movs	r3, #0
 800bac8:	e049      	b.n	800bb5e <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800baca:	7ffb      	ldrb	r3, [r7, #31]
 800bacc:	b29a      	uxth	r2, r3
 800bace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad0:	b29b      	uxth	r3, r3
 800bad2:	4413      	add	r3, r2
 800bad4:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	2200      	movs	r2, #0
 800bada:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 800badc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d015      	beq.n	800bb0e <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681a      	ldr	r2, [r3, #0]
 800bae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae8:	18d0      	adds	r0, r2, r3
 800baea:	88fb      	ldrh	r3, [r7, #6]
 800baec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800baee:	fb03 f202 	mul.w	r2, r3, r2
 800baf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf4:	4413      	add	r3, r2
 800baf6:	68ba      	ldr	r2, [r7, #8]
 800baf8:	4413      	add	r3, r2
 800bafa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bafc:	4619      	mov	r1, r3
 800bafe:	f001 feb4 	bl	800d86a <memcpy>
        q->byteCount += NbBytesToCopy;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	695a      	ldr	r2, [r3, #20]
 800bb06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb08:	441a      	add	r2, r3
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	699b      	ldr	r3, [r3, #24]
 800bb12:	1c5a      	adds	r2, r3, #1
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800bb18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb1a:	3301      	adds	r3, #1
 800bb1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	429a      	cmp	r2, r3
 800bb24:	f4ff aeb0 	bcc.w	800b888 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	681a      	ldr	r2, [r3, #0]
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	6919      	ldr	r1, [r3, #16]
 800bb30:	7ffb      	ldrb	r3, [r7, #31]
 800bb32:	4419      	add	r1, r3
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	685b      	ldr	r3, [r3, #4]
 800bb38:	4299      	cmp	r1, r3
 800bb3a:	d307      	bcc.n	800bb4c <CircularQueue_Add+0x434>
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	6919      	ldr	r1, [r3, #16]
 800bb40:	7ffb      	ldrb	r3, [r7, #31]
 800bb42:	4419      	add	r1, r3
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	685b      	ldr	r3, [r3, #4]
 800bb48:	1acb      	subs	r3, r1, r3
 800bb4a:	e003      	b.n	800bb54 <CircularQueue_Add+0x43c>
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	6919      	ldr	r1, [r3, #16]
 800bb50:	7ffb      	ldrb	r3, [r7, #31]
 800bb52:	440b      	add	r3, r1
 800bb54:	4413      	add	r3, r2
 800bb56:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800bb58:	6a3b      	ldr	r3, [r7, #32]
 800bb5a:	e000      	b.n	800bb5e <CircularQueue_Add+0x446>
    return NULL;
 800bb5c:	2300      	movs	r3, #0
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3738      	adds	r7, #56	; 0x38
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}

0800bb66 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800bb66:	b480      	push	{r7}
 800bb68:	b085      	sub	sp, #20
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	6078      	str	r0, [r7, #4]
 800bb6e:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800bb70:	2300      	movs	r3, #0
 800bb72:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800bb74:	2300      	movs	r3, #0
 800bb76:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	891b      	ldrh	r3, [r3, #8]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d101      	bne.n	800bb84 <CircularQueue_Remove+0x1e>
 800bb80:	2302      	movs	r3, #2
 800bb82:	e000      	b.n	800bb86 <CircularQueue_Remove+0x20>
 800bb84:	2300      	movs	r3, #0
 800bb86:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	695b      	ldr	r3, [r3, #20]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	f000 80cc 	beq.w	800bd2e <CircularQueue_Remove+0x1c8>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	891b      	ldrh	r3, [r3, #8]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d121      	bne.n	800bbe2 <CircularQueue_Remove+0x7c>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681a      	ldr	r2, [r3, #0]
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	68db      	ldr	r3, [r3, #12]
 800bba6:	4413      	add	r3, r2
 800bba8:	781b      	ldrb	r3, [r3, #0]
 800bbaa:	b29a      	uxth	r2, r3
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	6819      	ldr	r1, [r3, #0]
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	68db      	ldr	r3, [r3, #12]
 800bbb4:	1c58      	adds	r0, r3, #1
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	685b      	ldr	r3, [r3, #4]
 800bbba:	4298      	cmp	r0, r3
 800bbbc:	d306      	bcc.n	800bbcc <CircularQueue_Remove+0x66>
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	68d8      	ldr	r0, [r3, #12]
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	685b      	ldr	r3, [r3, #4]
 800bbc6:	1ac3      	subs	r3, r0, r3
 800bbc8:	3301      	adds	r3, #1
 800bbca:	e002      	b.n	800bbd2 <CircularQueue_Remove+0x6c>
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	68db      	ldr	r3, [r3, #12]
 800bbd0:	3301      	adds	r3, #1
 800bbd2:	440b      	add	r3, r1
 800bbd4:	781b      	ldrb	r3, [r3, #0]
 800bbd6:	b29b      	uxth	r3, r3
 800bbd8:	021b      	lsls	r3, r3, #8
 800bbda:	b29b      	uxth	r3, r3
 800bbdc:	4413      	add	r3, r2
 800bbde:	b29b      	uxth	r3, r3
 800bbe0:	e001      	b.n	800bbe6 <CircularQueue_Remove+0x80>
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	891b      	ldrh	r3, [r3, #8]
 800bbe6:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	7f1b      	ldrb	r3, [r3, #28]
 800bbec:	f003 0301 	and.w	r3, r3, #1
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d057      	beq.n	800bca4 <CircularQueue_Remove+0x13e>
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	7f1b      	ldrb	r3, [r3, #28]
 800bbf8:	f003 0302 	and.w	r3, r3, #2
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d151      	bne.n	800bca4 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800bc00:	897b      	ldrh	r3, [r7, #10]
 800bc02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bc06:	4293      	cmp	r3, r2
 800bc08:	d103      	bne.n	800bc12 <CircularQueue_Remove+0xac>
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	891b      	ldrh	r3, [r3, #8]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d012      	beq.n	800bc38 <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	68da      	ldr	r2, [r3, #12]
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800bc1a:	429a      	cmp	r2, r3
 800bc1c:	d942      	bls.n	800bca4 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	891b      	ldrh	r3, [r3, #8]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d03e      	beq.n	800bca4 <CircularQueue_Remove+0x13e>
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	685a      	ldr	r2, [r3, #4]
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	68db      	ldr	r3, [r3, #12]
 800bc2e:	1ad3      	subs	r3, r2, r3
 800bc30:	687a      	ldr	r2, [r7, #4]
 800bc32:	8912      	ldrh	r2, [r2, #8]
 800bc34:	4293      	cmp	r3, r2
 800bc36:	d235      	bcs.n	800bca4 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	695a      	ldr	r2, [r3, #20]
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	68d9      	ldr	r1, [r3, #12]
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	685b      	ldr	r3, [r3, #4]
 800bc44:	1acb      	subs	r3, r1, r3
 800bc46:	441a      	add	r2, r3
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	891b      	ldrh	r3, [r3, #8]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d121      	bne.n	800bc9e <CircularQueue_Remove+0x138>
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681a      	ldr	r2, [r3, #0]
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	68db      	ldr	r3, [r3, #12]
 800bc62:	4413      	add	r3, r2
 800bc64:	781b      	ldrb	r3, [r3, #0]
 800bc66:	b29a      	uxth	r2, r3
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6819      	ldr	r1, [r3, #0]
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	68db      	ldr	r3, [r3, #12]
 800bc70:	1c58      	adds	r0, r3, #1
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	685b      	ldr	r3, [r3, #4]
 800bc76:	4298      	cmp	r0, r3
 800bc78:	d306      	bcc.n	800bc88 <CircularQueue_Remove+0x122>
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	68d8      	ldr	r0, [r3, #12]
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	685b      	ldr	r3, [r3, #4]
 800bc82:	1ac3      	subs	r3, r0, r3
 800bc84:	3301      	adds	r3, #1
 800bc86:	e002      	b.n	800bc8e <CircularQueue_Remove+0x128>
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	68db      	ldr	r3, [r3, #12]
 800bc8c:	3301      	adds	r3, #1
 800bc8e:	440b      	add	r3, r1
 800bc90:	781b      	ldrb	r3, [r3, #0]
 800bc92:	b29b      	uxth	r3, r3
 800bc94:	021b      	lsls	r3, r3, #8
 800bc96:	b29b      	uxth	r3, r3
 800bc98:	4413      	add	r3, r2
 800bc9a:	b29b      	uxth	r3, r3
 800bc9c:	e001      	b.n	800bca2 <CircularQueue_Remove+0x13c>
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	891b      	ldrh	r3, [r3, #8]
 800bca2:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681a      	ldr	r2, [r3, #0]
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	68d9      	ldr	r1, [r3, #12]
 800bcac:	7a7b      	ldrb	r3, [r7, #9]
 800bcae:	4419      	add	r1, r3
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	685b      	ldr	r3, [r3, #4]
 800bcb4:	4299      	cmp	r1, r3
 800bcb6:	d307      	bcc.n	800bcc8 <CircularQueue_Remove+0x162>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	68d9      	ldr	r1, [r3, #12]
 800bcbc:	7a7b      	ldrb	r3, [r7, #9]
 800bcbe:	4419      	add	r1, r3
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	685b      	ldr	r3, [r3, #4]
 800bcc4:	1acb      	subs	r3, r1, r3
 800bcc6:	e003      	b.n	800bcd0 <CircularQueue_Remove+0x16a>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	68d9      	ldr	r1, [r3, #12]
 800bccc:	7a7b      	ldrb	r3, [r7, #9]
 800bcce:	440b      	add	r3, r1
 800bcd0:	4413      	add	r3, r2
 800bcd2:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	695b      	ldr	r3, [r3, #20]
 800bcd8:	8979      	ldrh	r1, [r7, #10]
 800bcda:	7a7a      	ldrb	r2, [r7, #9]
 800bcdc:	440a      	add	r2, r1
 800bcde:	1a9a      	subs	r2, r3, r2
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	695b      	ldr	r3, [r3, #20]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d01b      	beq.n	800bd24 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	68da      	ldr	r2, [r3, #12]
 800bcf0:	897b      	ldrh	r3, [r7, #10]
 800bcf2:	441a      	add	r2, r3
 800bcf4:	7a7b      	ldrb	r3, [r7, #9]
 800bcf6:	441a      	add	r2, r3
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	685b      	ldr	r3, [r3, #4]
 800bcfc:	429a      	cmp	r2, r3
 800bcfe:	d309      	bcc.n	800bd14 <CircularQueue_Remove+0x1ae>
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	68da      	ldr	r2, [r3, #12]
 800bd04:	897b      	ldrh	r3, [r7, #10]
 800bd06:	441a      	add	r2, r3
 800bd08:	7a7b      	ldrb	r3, [r7, #9]
 800bd0a:	441a      	add	r2, r3
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	685b      	ldr	r3, [r3, #4]
 800bd10:	1ad3      	subs	r3, r2, r3
 800bd12:	e005      	b.n	800bd20 <CircularQueue_Remove+0x1ba>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	68da      	ldr	r2, [r3, #12]
 800bd18:	897b      	ldrh	r3, [r7, #10]
 800bd1a:	441a      	add	r2, r3
 800bd1c:	7a7b      	ldrb	r3, [r7, #9]
 800bd1e:	4413      	add	r3, r2
 800bd20:	687a      	ldr	r2, [r7, #4]
 800bd22:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	699b      	ldr	r3, [r3, #24]
 800bd28:	1e5a      	subs	r2, r3, #1
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d002      	beq.n	800bd3a <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	897a      	ldrh	r2, [r7, #10]
 800bd38:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3714      	adds	r7, #20
 800bd40:	46bd      	mov	sp, r7
 800bd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd46:	4770      	bx	lr

0800bd48 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b087      	sub	sp, #28
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
 800bd50:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800bd52:	2300      	movs	r3, #0
 800bd54:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800bd56:	2300      	movs	r3, #0
 800bd58:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	891b      	ldrh	r3, [r3, #8]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d101      	bne.n	800bd66 <CircularQueue_Sense+0x1e>
 800bd62:	2302      	movs	r3, #2
 800bd64:	e000      	b.n	800bd68 <CircularQueue_Sense+0x20>
 800bd66:	2300      	movs	r3, #0
 800bd68:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	695b      	ldr	r3, [r3, #20]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	f000 8090 	beq.w	800be9c <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	68db      	ldr	r3, [r3, #12]
 800bd80:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	891b      	ldrh	r3, [r3, #8]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d121      	bne.n	800bdce <CircularQueue_Sense+0x86>
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681a      	ldr	r2, [r3, #0]
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	68db      	ldr	r3, [r3, #12]
 800bd92:	4413      	add	r3, r2
 800bd94:	781b      	ldrb	r3, [r3, #0]
 800bd96:	b29a      	uxth	r2, r3
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6819      	ldr	r1, [r3, #0]
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	68db      	ldr	r3, [r3, #12]
 800bda0:	1c58      	adds	r0, r3, #1
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	685b      	ldr	r3, [r3, #4]
 800bda6:	4298      	cmp	r0, r3
 800bda8:	d306      	bcc.n	800bdb8 <CircularQueue_Sense+0x70>
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	68d8      	ldr	r0, [r3, #12]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	685b      	ldr	r3, [r3, #4]
 800bdb2:	1ac3      	subs	r3, r0, r3
 800bdb4:	3301      	adds	r3, #1
 800bdb6:	e002      	b.n	800bdbe <CircularQueue_Sense+0x76>
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	68db      	ldr	r3, [r3, #12]
 800bdbc:	3301      	adds	r3, #1
 800bdbe:	440b      	add	r3, r1
 800bdc0:	781b      	ldrb	r3, [r3, #0]
 800bdc2:	b29b      	uxth	r3, r3
 800bdc4:	021b      	lsls	r3, r3, #8
 800bdc6:	b29b      	uxth	r3, r3
 800bdc8:	4413      	add	r3, r2
 800bdca:	b29b      	uxth	r3, r3
 800bdcc:	e001      	b.n	800bdd2 <CircularQueue_Sense+0x8a>
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	891b      	ldrh	r3, [r3, #8]
 800bdd2:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	7f1b      	ldrb	r3, [r3, #28]
 800bdd8:	f003 0301 	and.w	r3, r3, #1
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d048      	beq.n	800be72 <CircularQueue_Sense+0x12a>
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	7f1b      	ldrb	r3, [r3, #28]
 800bde4:	f003 0302 	and.w	r3, r3, #2
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d142      	bne.n	800be72 <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800bdec:	8a7b      	ldrh	r3, [r7, #18]
 800bdee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	d103      	bne.n	800bdfe <CircularQueue_Sense+0xb6>
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	891b      	ldrh	r3, [r3, #8]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d012      	beq.n	800be24 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	68da      	ldr	r2, [r3, #12]
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800be06:	429a      	cmp	r2, r3
 800be08:	d933      	bls.n	800be72 <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	891b      	ldrh	r3, [r3, #8]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d02f      	beq.n	800be72 <CircularQueue_Sense+0x12a>
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	685a      	ldr	r2, [r3, #4]
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	68db      	ldr	r3, [r3, #12]
 800be1a:	1ad3      	subs	r3, r2, r3
 800be1c:	687a      	ldr	r2, [r7, #4]
 800be1e:	8912      	ldrh	r2, [r2, #8]
 800be20:	4293      	cmp	r3, r2
 800be22:	d226      	bcs.n	800be72 <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800be24:	2300      	movs	r3, #0
 800be26:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	891b      	ldrh	r3, [r3, #8]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d11d      	bne.n	800be6c <CircularQueue_Sense+0x124>
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681a      	ldr	r2, [r3, #0]
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	4413      	add	r3, r2
 800be38:	781b      	ldrb	r3, [r3, #0]
 800be3a:	b29a      	uxth	r2, r3
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6819      	ldr	r1, [r3, #0]
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	1c58      	adds	r0, r3, #1
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	685b      	ldr	r3, [r3, #4]
 800be48:	4298      	cmp	r0, r3
 800be4a:	d305      	bcc.n	800be58 <CircularQueue_Sense+0x110>
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	685b      	ldr	r3, [r3, #4]
 800be50:	68f8      	ldr	r0, [r7, #12]
 800be52:	1ac3      	subs	r3, r0, r3
 800be54:	3301      	adds	r3, #1
 800be56:	e001      	b.n	800be5c <CircularQueue_Sense+0x114>
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	3301      	adds	r3, #1
 800be5c:	440b      	add	r3, r1
 800be5e:	781b      	ldrb	r3, [r3, #0]
 800be60:	b29b      	uxth	r3, r3
 800be62:	021b      	lsls	r3, r3, #8
 800be64:	b29b      	uxth	r3, r3
 800be66:	4413      	add	r3, r2
 800be68:	b29b      	uxth	r3, r3
 800be6a:	e001      	b.n	800be70 <CircularQueue_Sense+0x128>
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	891b      	ldrh	r3, [r3, #8]
 800be70:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681a      	ldr	r2, [r3, #0]
 800be76:	7af9      	ldrb	r1, [r7, #11]
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	4419      	add	r1, r3
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	685b      	ldr	r3, [r3, #4]
 800be80:	4299      	cmp	r1, r3
 800be82:	d306      	bcc.n	800be92 <CircularQueue_Sense+0x14a>
 800be84:	7af9      	ldrb	r1, [r7, #11]
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	4419      	add	r1, r3
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	685b      	ldr	r3, [r3, #4]
 800be8e:	1acb      	subs	r3, r1, r3
 800be90:	e002      	b.n	800be98 <CircularQueue_Sense+0x150>
 800be92:	7af9      	ldrb	r1, [r7, #11]
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	440b      	add	r3, r1
 800be98:	4413      	add	r3, r2
 800be9a:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d002      	beq.n	800bea8 <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	8a7a      	ldrh	r2, [r7, #18]
 800bea6:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800bea8:	697b      	ldr	r3, [r7, #20]
}
 800beaa:	4618      	mov	r0, r3
 800beac:	371c      	adds	r7, #28
 800beae:	46bd      	mov	sp, r7
 800beb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb4:	4770      	bx	lr

0800beb6 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800beb6:	b480      	push	{r7}
 800beb8:	af00      	add	r7, sp, #0
  return;
 800beba:	bf00      	nop
}
 800bebc:	46bd      	mov	sp, r7
 800bebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec2:	4770      	bx	lr

0800bec4 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800bec4:	b480      	push	{r7}
 800bec6:	af00      	add	r7, sp, #0
  return;
 800bec8:	bf00      	nop
}
 800beca:	46bd      	mov	sp, r7
 800becc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed0:	4770      	bx	lr

0800bed2 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800bed2:	b480      	push	{r7}
 800bed4:	af00      	add	r7, sp, #0
  return;
 800bed6:	bf00      	nop
}
 800bed8:	46bd      	mov	sp, r7
 800beda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bede:	4770      	bx	lr

0800bee0 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800bee0:	b480      	push	{r7}
 800bee2:	af00      	add	r7, sp, #0
  return;
 800bee4:	bf00      	nop
}
 800bee6:	46bd      	mov	sp, r7
 800bee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beec:	4770      	bx	lr

0800beee <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800beee:	b480      	push	{r7}
 800bef0:	af00      	add	r7, sp, #0
  return;
 800bef2:	bf00      	nop
}
 800bef4:	46bd      	mov	sp, r7
 800bef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befa:	4770      	bx	lr

0800befc <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800befc:	b480      	push	{r7}
 800befe:	af00      	add	r7, sp, #0
  return;
 800bf00:	bf00      	nop
}
 800bf02:	46bd      	mov	sp, r7
 800bf04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf08:	4770      	bx	lr

0800bf0a <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800bf0a:	b480      	push	{r7}
 800bf0c:	af00      	add	r7, sp, #0
  return;
 800bf0e:	bf00      	nop
}
 800bf10:	46bd      	mov	sp, r7
 800bf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf16:	4770      	bx	lr

0800bf18 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800bf18:	b480      	push	{r7}
 800bf1a:	af00      	add	r7, sp, #0
  return;
 800bf1c:	bf00      	nop
}
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf24:	4770      	bx	lr

0800bf26 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800bf26:	b480      	push	{r7}
 800bf28:	af00      	add	r7, sp, #0
  return;
 800bf2a:	bf00      	nop
}
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf32:	4770      	bx	lr

0800bf34 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800bf34:	b480      	push	{r7}
 800bf36:	af00      	add	r7, sp, #0
  return;
 800bf38:	bf00      	nop
}
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf40:	4770      	bx	lr

0800bf42 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800bf42:	b480      	push	{r7}
 800bf44:	af00      	add	r7, sp, #0
  return;
 800bf46:	bf00      	nop
}
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4e:	4770      	bx	lr

0800bf50 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800bf50:	b480      	push	{r7}
 800bf52:	af00      	add	r7, sp, #0
  return;
 800bf54:	bf00      	nop
}
 800bf56:	46bd      	mov	sp, r7
 800bf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5c:	4770      	bx	lr

0800bf5e <ZDD_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
  return;
}
__WEAK void ZDD_STM_Init( void )
{
 800bf5e:	b480      	push	{r7}
 800bf60:	af00      	add	r7, sp, #0
  return;
 800bf62:	bf00      	nop
}
 800bf64:	46bd      	mov	sp, r7
 800bf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6a:	4770      	bx	lr

0800bf6c <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800bf6c:	b480      	push	{r7}
 800bf6e:	af00      	add	r7, sp, #0
  return;
 800bf70:	bf00      	nop
}
 800bf72:	46bd      	mov	sp, r7
 800bf74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf78:	4770      	bx	lr

0800bf7a <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800bf7a:	b480      	push	{r7}
 800bf7c:	af00      	add	r7, sp, #0
  return;
 800bf7e:	bf00      	nop
}
 800bf80:	46bd      	mov	sp, r7
 800bf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf86:	4770      	bx	lr

0800bf88 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800bf88:	b480      	push	{r7}
 800bf8a:	af00      	add	r7, sp, #0
  return;
 800bf8c:	bf00      	nop
}
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf94:	4770      	bx	lr

0800bf96 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 800bf96:	b480      	push	{r7}
 800bf98:	af00      	add	r7, sp, #0
  return;
 800bf9a:	bf00      	nop
}
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa2:	4770      	bx	lr

0800bfa4 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800bfa8:	4b04      	ldr	r3, [pc, #16]	; (800bfbc <SVCCTL_Init+0x18>)
 800bfaa:	2200      	movs	r2, #0
 800bfac:	711a      	strb	r2, [r3, #4]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800bfae:	4b04      	ldr	r3, [pc, #16]	; (800bfc0 <SVCCTL_Init+0x1c>)
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800bfb4:	f000 f806 	bl	800bfc4 <SVCCTL_SvcInit>

  return;
 800bfb8:	bf00      	nop
}
 800bfba:	bd80      	pop	{r7, pc}
 800bfbc:	20000248 	.word	0x20000248
 800bfc0:	20000250 	.word	0x20000250

0800bfc4 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	af00      	add	r7, sp, #0
  BAS_Init();
 800bfc8:	f7ff ff75 	bl	800beb6 <BAS_Init>

  BLS_Init();
 800bfcc:	f7ff ff7a 	bl	800bec4 <BLS_Init>

  CRS_STM_Init();
 800bfd0:	f7ff ff7f 	bl	800bed2 <CRS_STM_Init>

  DIS_Init();
 800bfd4:	f7ff ff84 	bl	800bee0 <DIS_Init>

  EDS_STM_Init();
 800bfd8:	f7ff ff89 	bl	800beee <EDS_STM_Init>

  HIDS_Init();
 800bfdc:	f7ff ff8e 	bl	800befc <HIDS_Init>

  HRS_Init();
 800bfe0:	f7ff ff93 	bl	800bf0a <HRS_Init>

  HTS_Init();
 800bfe4:	f7ff ff98 	bl	800bf18 <HTS_Init>

  IAS_Init();
 800bfe8:	f7ff ff9d 	bl	800bf26 <IAS_Init>

  LLS_Init();
 800bfec:	f7ff ffa2 	bl	800bf34 <LLS_Init>

  TPS_Init();
 800bff0:	f7ff ffa7 	bl	800bf42 <TPS_Init>

  MOTENV_STM_Init();
 800bff4:	f7ff ffac 	bl	800bf50 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800bff8:	f7fe ffb2 	bl	800af60 <P2PS_STM_Init>

  ZDD_STM_Init();
 800bffc:	f7ff ffaf 	bl	800bf5e <ZDD_STM_Init>

  OTAS_STM_Init();
 800c000:	f7ff ffb4 	bl	800bf6c <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800c004:	f7ff ffc0 	bl	800bf88 <BVOPUS_STM_Init>

  MESH_Init();
 800c008:	f7ff ffb7 	bl	800bf7a <MESH_Init>

  SVCCTL_InitCustomSvc();
 800c00c:	f7ff ffc3 	bl	800bf96 <SVCCTL_InitCustomSvc>
  
  return;
 800c010:	bf00      	nop
}
 800c012:	bd80      	pop	{r7, pc}

0800c014 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800c014:	b480      	push	{r7}
 800c016:	b083      	sub	sp, #12
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800c01c:	4b09      	ldr	r3, [pc, #36]	; (800c044 <SVCCTL_RegisterSvcHandler+0x30>)
 800c01e:	791b      	ldrb	r3, [r3, #4]
 800c020:	4619      	mov	r1, r3
 800c022:	4a08      	ldr	r2, [pc, #32]	; (800c044 <SVCCTL_RegisterSvcHandler+0x30>)
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800c02a:	4b06      	ldr	r3, [pc, #24]	; (800c044 <SVCCTL_RegisterSvcHandler+0x30>)
 800c02c:	791b      	ldrb	r3, [r3, #4]
 800c02e:	3301      	adds	r3, #1
 800c030:	b2da      	uxtb	r2, r3
 800c032:	4b04      	ldr	r3, [pc, #16]	; (800c044 <SVCCTL_RegisterSvcHandler+0x30>)
 800c034:	711a      	strb	r2, [r3, #4]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800c036:	bf00      	nop
}
 800c038:	370c      	adds	r7, #12
 800c03a:	46bd      	mov	sp, r7
 800c03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c040:	4770      	bx	lr
 800c042:	bf00      	nop
 800c044:	20000248 	.word	0x20000248

0800c048 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b086      	sub	sp, #24
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	3301      	adds	r3, #1
 800c054:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800c056:	2300      	movs	r3, #0
 800c058:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	781b      	ldrb	r3, [r3, #0]
 800c05e:	2bff      	cmp	r3, #255	; 0xff
 800c060:	d125      	bne.n	800c0ae <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800c062:	693b      	ldr	r3, [r7, #16]
 800c064:	3302      	adds	r3, #2
 800c066:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	881b      	ldrh	r3, [r3, #0]
 800c06c:	b29b      	uxth	r3, r3
 800c06e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c072:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c076:	d118      	bne.n	800c0aa <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800c078:	2300      	movs	r3, #0
 800c07a:	757b      	strb	r3, [r7, #21]
 800c07c:	e00d      	b.n	800c09a <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800c07e:	7d7b      	ldrb	r3, [r7, #21]
 800c080:	4a1a      	ldr	r2, [pc, #104]	; (800c0ec <SVCCTL_UserEvtRx+0xa4>)
 800c082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	4798      	blx	r3
 800c08a:	4603      	mov	r3, r0
 800c08c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800c08e:	7dfb      	ldrb	r3, [r7, #23]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d108      	bne.n	800c0a6 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800c094:	7d7b      	ldrb	r3, [r7, #21]
 800c096:	3301      	adds	r3, #1
 800c098:	757b      	strb	r3, [r7, #21]
 800c09a:	4b14      	ldr	r3, [pc, #80]	; (800c0ec <SVCCTL_UserEvtRx+0xa4>)
 800c09c:	791b      	ldrb	r3, [r3, #4]
 800c09e:	7d7a      	ldrb	r2, [r7, #21]
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d3ec      	bcc.n	800c07e <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800c0a4:	e002      	b.n	800c0ac <SVCCTL_UserEvtRx+0x64>
              break;
 800c0a6:	bf00      	nop
          break;
 800c0a8:	e000      	b.n	800c0ac <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800c0aa:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800c0ac:	e000      	b.n	800c0b0 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800c0ae:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800c0b0:	7dfb      	ldrb	r3, [r7, #23]
 800c0b2:	2b02      	cmp	r3, #2
 800c0b4:	d00f      	beq.n	800c0d6 <SVCCTL_UserEvtRx+0x8e>
 800c0b6:	2b02      	cmp	r3, #2
 800c0b8:	dc10      	bgt.n	800c0dc <SVCCTL_UserEvtRx+0x94>
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d002      	beq.n	800c0c4 <SVCCTL_UserEvtRx+0x7c>
 800c0be:	2b01      	cmp	r3, #1
 800c0c0:	d006      	beq.n	800c0d0 <SVCCTL_UserEvtRx+0x88>
 800c0c2:	e00b      	b.n	800c0dc <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f7f7 f819 	bl	80030fc <SVCCTL_App_Notification>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	75bb      	strb	r3, [r7, #22]
      break;
 800c0ce:	e008      	b.n	800c0e2 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	75bb      	strb	r3, [r7, #22]
      break;
 800c0d4:	e005      	b.n	800c0e2 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	75bb      	strb	r3, [r7, #22]
      break;
 800c0da:	e002      	b.n	800c0e2 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800c0dc:	2301      	movs	r3, #1
 800c0de:	75bb      	strb	r3, [r7, #22]
      break;
 800c0e0:	bf00      	nop
  }

  return (return_status);
 800c0e2:	7dbb      	ldrb	r3, [r7, #22]
}
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	3718      	adds	r7, #24
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}
 800c0ec:	20000248 	.word	0x20000248

0800c0f0 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800c0f4:	f7f8 f8c2 	bl	800427c <HW_IPCC_Enable>

  return;
 800c0f8:	bf00      	nop
}
 800c0fa:	bd80      	pop	{r7, pc}

0800c0fc <TL_Init>:


void TL_Init( void )
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800c100:	4b10      	ldr	r3, [pc, #64]	; (800c144 <TL_Init+0x48>)
 800c102:	4a11      	ldr	r2, [pc, #68]	; (800c148 <TL_Init+0x4c>)
 800c104:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800c106:	4b0f      	ldr	r3, [pc, #60]	; (800c144 <TL_Init+0x48>)
 800c108:	4a10      	ldr	r2, [pc, #64]	; (800c14c <TL_Init+0x50>)
 800c10a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800c10c:	4b0d      	ldr	r3, [pc, #52]	; (800c144 <TL_Init+0x48>)
 800c10e:	4a10      	ldr	r2, [pc, #64]	; (800c150 <TL_Init+0x54>)
 800c110:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800c112:	4b0c      	ldr	r3, [pc, #48]	; (800c144 <TL_Init+0x48>)
 800c114:	4a0f      	ldr	r2, [pc, #60]	; (800c154 <TL_Init+0x58>)
 800c116:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800c118:	4b0a      	ldr	r3, [pc, #40]	; (800c144 <TL_Init+0x48>)
 800c11a:	4a0f      	ldr	r2, [pc, #60]	; (800c158 <TL_Init+0x5c>)
 800c11c:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800c11e:	4b09      	ldr	r3, [pc, #36]	; (800c144 <TL_Init+0x48>)
 800c120:	4a0e      	ldr	r2, [pc, #56]	; (800c15c <TL_Init+0x60>)
 800c122:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800c124:	4b07      	ldr	r3, [pc, #28]	; (800c144 <TL_Init+0x48>)
 800c126:	4a0e      	ldr	r2, [pc, #56]	; (800c160 <TL_Init+0x64>)
 800c128:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800c12a:	4b06      	ldr	r3, [pc, #24]	; (800c144 <TL_Init+0x48>)
 800c12c:	4a0d      	ldr	r2, [pc, #52]	; (800c164 <TL_Init+0x68>)
 800c12e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800c130:	4b04      	ldr	r3, [pc, #16]	; (800c144 <TL_Init+0x48>)
 800c132:	4a0d      	ldr	r2, [pc, #52]	; (800c168 <TL_Init+0x6c>)
 800c134:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800c136:	4b03      	ldr	r3, [pc, #12]	; (800c144 <TL_Init+0x48>)
 800c138:	4a0c      	ldr	r2, [pc, #48]	; (800c16c <TL_Init+0x70>)
 800c13a:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800c13c:	f7f8 f8b2 	bl	80042a4 <HW_IPCC_Init>

  return;
 800c140:	bf00      	nop
}
 800c142:	bd80      	pop	{r7, pc}
 800c144:	20030000 	.word	0x20030000
 800c148:	20030134 	.word	0x20030134
 800c14c:	20030154 	.word	0x20030154
 800c150:	20030164 	.word	0x20030164
 800c154:	20030174 	.word	0x20030174
 800c158:	2003017c 	.word	0x2003017c
 800c15c:	20030184 	.word	0x20030184
 800c160:	2003018c 	.word	0x2003018c
 800c164:	200301a8 	.word	0x200301a8
 800c168:	200301ac 	.word	0x200301ac
 800c16c:	200301b8 	.word	0x200301b8

0800c170 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b084      	sub	sp, #16
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800c17c:	4811      	ldr	r0, [pc, #68]	; (800c1c4 <TL_BLE_Init+0x54>)
 800c17e:	f7ff f9db 	bl	800b538 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800c182:	4b11      	ldr	r3, [pc, #68]	; (800c1c8 <TL_BLE_Init+0x58>)
 800c184:	685b      	ldr	r3, [r3, #4]
 800c186:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	689a      	ldr	r2, [r3, #8]
 800c18c:	68bb      	ldr	r3, [r7, #8]
 800c18e:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	68da      	ldr	r2, [r3, #12]
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	4a0c      	ldr	r2, [pc, #48]	; (800c1cc <TL_BLE_Init+0x5c>)
 800c19c:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	4a08      	ldr	r2, [pc, #32]	; (800c1c4 <TL_BLE_Init+0x54>)
 800c1a2:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800c1a4:	f7f8 f894 	bl	80042d0 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	4a08      	ldr	r2, [pc, #32]	; (800c1d0 <TL_BLE_Init+0x60>)
 800c1ae:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	685b      	ldr	r3, [r3, #4]
 800c1b4:	4a07      	ldr	r2, [pc, #28]	; (800c1d4 <TL_BLE_Init+0x64>)
 800c1b6:	6013      	str	r3, [r2, #0]

  return 0;
 800c1b8:	2300      	movs	r3, #0
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3710      	adds	r7, #16
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
 800c1c2:	bf00      	nop
 800c1c4:	200301d4 	.word	0x200301d4
 800c1c8:	20030000 	.word	0x20030000
 800c1cc:	20030a58 	.word	0x20030a58
 800c1d0:	200016ec 	.word	0x200016ec
 800c1d4:	200016f0 	.word	0x200016f0

0800c1d8 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b082      	sub	sp, #8
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
 800c1e0:	460b      	mov	r3, r1
 800c1e2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800c1e4:	4b09      	ldr	r3, [pc, #36]	; (800c20c <TL_BLE_SendCmd+0x34>)
 800c1e6:	685b      	ldr	r3, [r3, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	2201      	movs	r2, #1
 800c1ec:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800c1ee:	4b07      	ldr	r3, [pc, #28]	; (800c20c <TL_BLE_SendCmd+0x34>)
 800c1f0:	685b      	ldr	r3, [r3, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	4619      	mov	r1, r3
 800c1f6:	2001      	movs	r0, #1
 800c1f8:	f000 f96c 	bl	800c4d4 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800c1fc:	f7f8 f872 	bl	80042e4 <HW_IPCC_BLE_SendCmd>

  return 0;
 800c200:	2300      	movs	r3, #0
}
 800c202:	4618      	mov	r0, r3
 800c204:	3708      	adds	r7, #8
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}
 800c20a:	bf00      	nop
 800c20c:	20030000 	.word	0x20030000

0800c210 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b082      	sub	sp, #8
 800c214:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800c216:	e01c      	b.n	800c252 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800c218:	1d3b      	adds	r3, r7, #4
 800c21a:	4619      	mov	r1, r3
 800c21c:	4812      	ldr	r0, [pc, #72]	; (800c268 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800c21e:	f7ff fa2a 	bl	800b676 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	7a5b      	ldrb	r3, [r3, #9]
 800c226:	2b0f      	cmp	r3, #15
 800c228:	d003      	beq.n	800c232 <HW_IPCC_BLE_RxEvtNot+0x22>
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	7a5b      	ldrb	r3, [r3, #9]
 800c22e:	2b0e      	cmp	r3, #14
 800c230:	d105      	bne.n	800c23e <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	4619      	mov	r1, r3
 800c236:	2002      	movs	r0, #2
 800c238:	f000 f94c 	bl	800c4d4 <OutputDbgTrace>
 800c23c:	e004      	b.n	800c248 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	4619      	mov	r1, r3
 800c242:	2003      	movs	r0, #3
 800c244:	f000 f946 	bl	800c4d4 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800c248:	4b08      	ldr	r3, [pc, #32]	; (800c26c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	687a      	ldr	r2, [r7, #4]
 800c24e:	4610      	mov	r0, r2
 800c250:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800c252:	4805      	ldr	r0, [pc, #20]	; (800c268 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800c254:	f7ff f980 	bl	800b558 <LST_is_empty>
 800c258:	4603      	mov	r3, r0
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d0dc      	beq.n	800c218 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800c25e:	bf00      	nop
}
 800c260:	3708      	adds	r7, #8
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
 800c266:	bf00      	nop
 800c268:	200301d4 	.word	0x200301d4
 800c26c:	200016ec 	.word	0x200016ec

0800c270 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800c274:	4b02      	ldr	r3, [pc, #8]	; (800c280 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	4798      	blx	r3

  return;
 800c27a:	bf00      	nop
}
 800c27c:	bd80      	pop	{r7, pc}
 800c27e:	bf00      	nop
 800c280:	200016f0 	.word	0x200016f0

0800c284 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b084      	sub	sp, #16
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800c290:	480d      	ldr	r0, [pc, #52]	; (800c2c8 <TL_SYS_Init+0x44>)
 800c292:	f7ff f951 	bl	800b538 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800c296:	4b0d      	ldr	r3, [pc, #52]	; (800c2cc <TL_SYS_Init+0x48>)
 800c298:	68db      	ldr	r3, [r3, #12]
 800c29a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	689a      	ldr	r2, [r3, #8]
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	4a08      	ldr	r2, [pc, #32]	; (800c2c8 <TL_SYS_Init+0x44>)
 800c2a8:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800c2aa:	f7f8 f83d 	bl	8004328 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	4a07      	ldr	r2, [pc, #28]	; (800c2d0 <TL_SYS_Init+0x4c>)
 800c2b4:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	685b      	ldr	r3, [r3, #4]
 800c2ba:	4a06      	ldr	r2, [pc, #24]	; (800c2d4 <TL_SYS_Init+0x50>)
 800c2bc:	6013      	str	r3, [r2, #0]

  return 0;
 800c2be:	2300      	movs	r3, #0
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3710      	adds	r7, #16
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}
 800c2c8:	200301dc 	.word	0x200301dc
 800c2cc:	20030000 	.word	0x20030000
 800c2d0:	200016f4 	.word	0x200016f4
 800c2d4:	200016f8 	.word	0x200016f8

0800c2d8 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b082      	sub	sp, #8
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
 800c2e0:	460b      	mov	r3, r1
 800c2e2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800c2e4:	4b09      	ldr	r3, [pc, #36]	; (800c30c <TL_SYS_SendCmd+0x34>)
 800c2e6:	68db      	ldr	r3, [r3, #12]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	2210      	movs	r2, #16
 800c2ec:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800c2ee:	4b07      	ldr	r3, [pc, #28]	; (800c30c <TL_SYS_SendCmd+0x34>)
 800c2f0:	68db      	ldr	r3, [r3, #12]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	4619      	mov	r1, r3
 800c2f6:	2004      	movs	r0, #4
 800c2f8:	f000 f8ec 	bl	800c4d4 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800c2fc:	f7f8 f81e 	bl	800433c <HW_IPCC_SYS_SendCmd>

  return 0;
 800c300:	2300      	movs	r3, #0
}
 800c302:	4618      	mov	r0, r3
 800c304:	3708      	adds	r7, #8
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}
 800c30a:	bf00      	nop
 800c30c:	20030000 	.word	0x20030000

0800c310 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800c314:	4b07      	ldr	r3, [pc, #28]	; (800c334 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800c316:	68db      	ldr	r3, [r3, #12]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	4619      	mov	r1, r3
 800c31c:	2005      	movs	r0, #5
 800c31e:	f000 f8d9 	bl	800c4d4 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800c322:	4b05      	ldr	r3, [pc, #20]	; (800c338 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	4a03      	ldr	r2, [pc, #12]	; (800c334 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800c328:	68d2      	ldr	r2, [r2, #12]
 800c32a:	6812      	ldr	r2, [r2, #0]
 800c32c:	4610      	mov	r0, r2
 800c32e:	4798      	blx	r3

  return;
 800c330:	bf00      	nop
}
 800c332:	bd80      	pop	{r7, pc}
 800c334:	20030000 	.word	0x20030000
 800c338:	200016f4 	.word	0x200016f4

0800c33c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b082      	sub	sp, #8
 800c340:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c342:	e00e      	b.n	800c362 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800c344:	1d3b      	adds	r3, r7, #4
 800c346:	4619      	mov	r1, r3
 800c348:	480b      	ldr	r0, [pc, #44]	; (800c378 <HW_IPCC_SYS_EvtNot+0x3c>)
 800c34a:	f7ff f994 	bl	800b676 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	4619      	mov	r1, r3
 800c352:	2006      	movs	r0, #6
 800c354:	f000 f8be 	bl	800c4d4 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800c358:	4b08      	ldr	r3, [pc, #32]	; (800c37c <HW_IPCC_SYS_EvtNot+0x40>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	687a      	ldr	r2, [r7, #4]
 800c35e:	4610      	mov	r0, r2
 800c360:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c362:	4805      	ldr	r0, [pc, #20]	; (800c378 <HW_IPCC_SYS_EvtNot+0x3c>)
 800c364:	f7ff f8f8 	bl	800b558 <LST_is_empty>
 800c368:	4603      	mov	r3, r0
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d0ea      	beq.n	800c344 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800c36e:	bf00      	nop
}
 800c370:	3708      	adds	r7, #8
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}
 800c376:	bf00      	nop
 800c378:	200301dc 	.word	0x200301dc
 800c37c:	200016f8 	.word	0x200016f8

0800c380 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b082      	sub	sp, #8
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800c388:	4817      	ldr	r0, [pc, #92]	; (800c3e8 <TL_MM_Init+0x68>)
 800c38a:	f7ff f8d5 	bl	800b538 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800c38e:	4817      	ldr	r0, [pc, #92]	; (800c3ec <TL_MM_Init+0x6c>)
 800c390:	f7ff f8d2 	bl	800b538 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800c394:	4b16      	ldr	r3, [pc, #88]	; (800c3f0 <TL_MM_Init+0x70>)
 800c396:	691b      	ldr	r3, [r3, #16]
 800c398:	4a16      	ldr	r2, [pc, #88]	; (800c3f4 <TL_MM_Init+0x74>)
 800c39a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800c39c:	4b15      	ldr	r3, [pc, #84]	; (800c3f4 <TL_MM_Init+0x74>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	687a      	ldr	r2, [r7, #4]
 800c3a2:	6892      	ldr	r2, [r2, #8]
 800c3a4:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800c3a6:	4b13      	ldr	r3, [pc, #76]	; (800c3f4 <TL_MM_Init+0x74>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	687a      	ldr	r2, [r7, #4]
 800c3ac:	68d2      	ldr	r2, [r2, #12]
 800c3ae:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800c3b0:	4b10      	ldr	r3, [pc, #64]	; (800c3f4 <TL_MM_Init+0x74>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	4a0c      	ldr	r2, [pc, #48]	; (800c3e8 <TL_MM_Init+0x68>)
 800c3b6:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800c3b8:	4b0e      	ldr	r3, [pc, #56]	; (800c3f4 <TL_MM_Init+0x74>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	687a      	ldr	r2, [r7, #4]
 800c3be:	6812      	ldr	r2, [r2, #0]
 800c3c0:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800c3c2:	4b0c      	ldr	r3, [pc, #48]	; (800c3f4 <TL_MM_Init+0x74>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	687a      	ldr	r2, [r7, #4]
 800c3c8:	6852      	ldr	r2, [r2, #4]
 800c3ca:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800c3cc:	4b09      	ldr	r3, [pc, #36]	; (800c3f4 <TL_MM_Init+0x74>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	687a      	ldr	r2, [r7, #4]
 800c3d2:	6912      	ldr	r2, [r2, #16]
 800c3d4:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800c3d6:	4b07      	ldr	r3, [pc, #28]	; (800c3f4 <TL_MM_Init+0x74>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	687a      	ldr	r2, [r7, #4]
 800c3dc:	6952      	ldr	r2, [r2, #20]
 800c3de:	619a      	str	r2, [r3, #24]

  return;
 800c3e0:	bf00      	nop
}
 800c3e2:	3708      	adds	r7, #8
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}
 800c3e8:	200301c4 	.word	0x200301c4
 800c3ec:	200016e4 	.word	0x200016e4
 800c3f0:	20030000 	.word	0x20030000
 800c3f4:	200016fc 	.word	0x200016fc

0800c3f8 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b082      	sub	sp, #8
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800c400:	6879      	ldr	r1, [r7, #4]
 800c402:	4807      	ldr	r0, [pc, #28]	; (800c420 <TL_MM_EvtDone+0x28>)
 800c404:	f7ff f8f0 	bl	800b5e8 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800c408:	6879      	ldr	r1, [r7, #4]
 800c40a:	2000      	movs	r0, #0
 800c40c:	f000 f862 	bl	800c4d4 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800c410:	4804      	ldr	r0, [pc, #16]	; (800c424 <TL_MM_EvtDone+0x2c>)
 800c412:	f7f7 ffb9 	bl	8004388 <HW_IPCC_MM_SendFreeBuf>

  return;
 800c416:	bf00      	nop
}
 800c418:	3708      	adds	r7, #8
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}
 800c41e:	bf00      	nop
 800c420:	200016e4 	.word	0x200016e4
 800c424:	0800c429 	.word	0x0800c429

0800c428 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b082      	sub	sp, #8
 800c42c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c42e:	e00c      	b.n	800c44a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800c430:	1d3b      	adds	r3, r7, #4
 800c432:	4619      	mov	r1, r3
 800c434:	480a      	ldr	r0, [pc, #40]	; (800c460 <SendFreeBuf+0x38>)
 800c436:	f7ff f91e 	bl	800b676 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800c43a:	4b0a      	ldr	r3, [pc, #40]	; (800c464 <SendFreeBuf+0x3c>)
 800c43c:	691b      	ldr	r3, [r3, #16]
 800c43e:	691b      	ldr	r3, [r3, #16]
 800c440:	687a      	ldr	r2, [r7, #4]
 800c442:	4611      	mov	r1, r2
 800c444:	4618      	mov	r0, r3
 800c446:	f7ff f8cf 	bl	800b5e8 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c44a:	4805      	ldr	r0, [pc, #20]	; (800c460 <SendFreeBuf+0x38>)
 800c44c:	f7ff f884 	bl	800b558 <LST_is_empty>
 800c450:	4603      	mov	r3, r0
 800c452:	2b00      	cmp	r3, #0
 800c454:	d0ec      	beq.n	800c430 <SendFreeBuf+0x8>
  }

  return;
 800c456:	bf00      	nop
}
 800c458:	3708      	adds	r7, #8
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}
 800c45e:	bf00      	nop
 800c460:	200016e4 	.word	0x200016e4
 800c464:	20030000 	.word	0x20030000

0800c468 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800c46c:	4805      	ldr	r0, [pc, #20]	; (800c484 <TL_TRACES_Init+0x1c>)
 800c46e:	f7ff f863 	bl	800b538 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800c472:	4b05      	ldr	r3, [pc, #20]	; (800c488 <TL_TRACES_Init+0x20>)
 800c474:	695b      	ldr	r3, [r3, #20]
 800c476:	4a03      	ldr	r2, [pc, #12]	; (800c484 <TL_TRACES_Init+0x1c>)
 800c478:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800c47a:	f7f7 ffbb 	bl	80043f4 <HW_IPCC_TRACES_Init>

  return;
 800c47e:	bf00      	nop
}
 800c480:	bd80      	pop	{r7, pc}
 800c482:	bf00      	nop
 800c484:	200301cc 	.word	0x200301cc
 800c488:	20030000 	.word	0x20030000

0800c48c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b082      	sub	sp, #8
 800c490:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c492:	e008      	b.n	800c4a6 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800c494:	1d3b      	adds	r3, r7, #4
 800c496:	4619      	mov	r1, r3
 800c498:	4808      	ldr	r0, [pc, #32]	; (800c4bc <HW_IPCC_TRACES_EvtNot+0x30>)
 800c49a:	f7ff f8ec 	bl	800b676 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f000 f80d 	bl	800c4c0 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c4a6:	4805      	ldr	r0, [pc, #20]	; (800c4bc <HW_IPCC_TRACES_EvtNot+0x30>)
 800c4a8:	f7ff f856 	bl	800b558 <LST_is_empty>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d0f0      	beq.n	800c494 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800c4b2:	bf00      	nop
}
 800c4b4:	3708      	adds	r7, #8
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}
 800c4ba:	bf00      	nop
 800c4bc:	200301cc 	.word	0x200301cc

0800c4c0 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	b083      	sub	sp, #12
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800c4c8:	bf00      	nop
 800c4ca:	370c      	adds	r7, #12
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d2:	4770      	bx	lr

0800c4d4 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800c4d4:	b480      	push	{r7}
 800c4d6:	b085      	sub	sp, #20
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	4603      	mov	r3, r0
 800c4dc:	6039      	str	r1, [r7, #0]
 800c4de:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800c4e0:	79fb      	ldrb	r3, [r7, #7]
 800c4e2:	2b06      	cmp	r3, #6
 800c4e4:	d845      	bhi.n	800c572 <OutputDbgTrace+0x9e>
 800c4e6:	a201      	add	r2, pc, #4	; (adr r2, 800c4ec <OutputDbgTrace+0x18>)
 800c4e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4ec:	0800c509 	.word	0x0800c509
 800c4f0:	0800c52d 	.word	0x0800c52d
 800c4f4:	0800c533 	.word	0x0800c533
 800c4f8:	0800c547 	.word	0x0800c547
 800c4fc:	0800c553 	.word	0x0800c553
 800c500:	0800c559 	.word	0x0800c559
 800c504:	0800c567 	.word	0x0800c567
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	7a5b      	ldrb	r3, [r3, #9]
 800c510:	2bff      	cmp	r3, #255	; 0xff
 800c512:	d005      	beq.n	800c520 <OutputDbgTrace+0x4c>
 800c514:	2bff      	cmp	r3, #255	; 0xff
 800c516:	dc05      	bgt.n	800c524 <OutputDbgTrace+0x50>
 800c518:	2b0e      	cmp	r3, #14
 800c51a:	d005      	beq.n	800c528 <OutputDbgTrace+0x54>
 800c51c:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800c51e:	e001      	b.n	800c524 <OutputDbgTrace+0x50>
          break;
 800c520:	bf00      	nop
 800c522:	e027      	b.n	800c574 <OutputDbgTrace+0xa0>
          break;
 800c524:	bf00      	nop
 800c526:	e025      	b.n	800c574 <OutputDbgTrace+0xa0>
          break;
 800c528:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800c52a:	e023      	b.n	800c574 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800c530:	e020      	b.n	800c574 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	7a5b      	ldrb	r3, [r3, #9]
 800c53a:	2b0e      	cmp	r3, #14
 800c53c:	d001      	beq.n	800c542 <OutputDbgTrace+0x6e>
 800c53e:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800c540:	e000      	b.n	800c544 <OutputDbgTrace+0x70>
          break;
 800c542:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c544:	e016      	b.n	800c574 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	7a5b      	ldrb	r3, [r3, #9]
 800c54e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c550:	e010      	b.n	800c574 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800c556:	e00d      	b.n	800c574 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	7a5b      	ldrb	r3, [r3, #9]
 800c560:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800c562:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c564:	e006      	b.n	800c574 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	7a5b      	ldrb	r3, [r3, #9]
 800c56e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c570:	e000      	b.n	800c574 <OutputDbgTrace+0xa0>

    default:
      break;
 800c572:	bf00      	nop
  }

  return;
 800c574:	bf00      	nop
}
 800c576:	3714      	adds	r7, #20
 800c578:	46bd      	mov	sp, r7
 800c57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57e:	4770      	bx	lr

0800c580 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800c580:	b480      	push	{r7}
 800c582:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800c584:	4b05      	ldr	r3, [pc, #20]	; (800c59c <UTIL_LPM_Init+0x1c>)
 800c586:	2200      	movs	r2, #0
 800c588:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800c58a:	4b05      	ldr	r3, [pc, #20]	; (800c5a0 <UTIL_LPM_Init+0x20>)
 800c58c:	2200      	movs	r2, #0
 800c58e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800c590:	bf00      	nop
 800c592:	46bd      	mov	sp, r7
 800c594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c598:	4770      	bx	lr
 800c59a:	bf00      	nop
 800c59c:	20001700 	.word	0x20001700
 800c5a0:	20001704 	.word	0x20001704

0800c5a4 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800c5a4:	b480      	push	{r7}
 800c5a6:	b087      	sub	sp, #28
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	460b      	mov	r3, r1
 800c5ae:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c5b0:	f3ef 8310 	mrs	r3, PRIMASK
 800c5b4:	613b      	str	r3, [r7, #16]
  return(result);
 800c5b6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800c5b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c5ba:	b672      	cpsid	i
}
 800c5bc:	bf00      	nop
  
  switch(state)
 800c5be:	78fb      	ldrb	r3, [r7, #3]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d008      	beq.n	800c5d6 <UTIL_LPM_SetOffMode+0x32>
 800c5c4:	2b01      	cmp	r3, #1
 800c5c6:	d10e      	bne.n	800c5e6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800c5c8:	4b0d      	ldr	r3, [pc, #52]	; (800c600 <UTIL_LPM_SetOffMode+0x5c>)
 800c5ca:	681a      	ldr	r2, [r3, #0]
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	4313      	orrs	r3, r2
 800c5d0:	4a0b      	ldr	r2, [pc, #44]	; (800c600 <UTIL_LPM_SetOffMode+0x5c>)
 800c5d2:	6013      	str	r3, [r2, #0]
      break;
 800c5d4:	e008      	b.n	800c5e8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	43da      	mvns	r2, r3
 800c5da:	4b09      	ldr	r3, [pc, #36]	; (800c600 <UTIL_LPM_SetOffMode+0x5c>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	4013      	ands	r3, r2
 800c5e0:	4a07      	ldr	r2, [pc, #28]	; (800c600 <UTIL_LPM_SetOffMode+0x5c>)
 800c5e2:	6013      	str	r3, [r2, #0]
      break;
 800c5e4:	e000      	b.n	800c5e8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800c5e6:	bf00      	nop
 800c5e8:	697b      	ldr	r3, [r7, #20]
 800c5ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	f383 8810 	msr	PRIMASK, r3
}
 800c5f2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800c5f4:	bf00      	nop
 800c5f6:	371c      	adds	r7, #28
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fe:	4770      	bx	lr
 800c600:	20001704 	.word	0x20001704

0800c604 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b090      	sub	sp, #64	; 0x40
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800c60c:	4b73      	ldr	r3, [pc, #460]	; (800c7dc <UTIL_SEQ_Run+0x1d8>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800c612:	4b72      	ldr	r3, [pc, #456]	; (800c7dc <UTIL_SEQ_Run+0x1d8>)
 800c614:	681a      	ldr	r2, [r3, #0]
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	4013      	ands	r3, r2
 800c61a:	4a70      	ldr	r2, [pc, #448]	; (800c7dc <UTIL_SEQ_Run+0x1d8>)
 800c61c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800c61e:	4b70      	ldr	r3, [pc, #448]	; (800c7e0 <UTIL_SEQ_Run+0x1dc>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800c624:	4b6f      	ldr	r3, [pc, #444]	; (800c7e4 <UTIL_SEQ_Run+0x1e0>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800c62a:	4b6f      	ldr	r3, [pc, #444]	; (800c7e8 <UTIL_SEQ_Run+0x1e4>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800c630:	4b6e      	ldr	r3, [pc, #440]	; (800c7ec <UTIL_SEQ_Run+0x1e8>)
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c636:	e08d      	b.n	800c754 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800c638:	2300      	movs	r3, #0
 800c63a:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800c63c:	e002      	b.n	800c644 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800c63e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c640:	3301      	adds	r3, #1
 800c642:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800c644:	4a6a      	ldr	r2, [pc, #424]	; (800c7f0 <UTIL_SEQ_Run+0x1ec>)
 800c646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c648:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c64e:	401a      	ands	r2, r3
 800c650:	4b62      	ldr	r3, [pc, #392]	; (800c7dc <UTIL_SEQ_Run+0x1d8>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	4013      	ands	r3, r2
 800c656:	2b00      	cmp	r3, #0
 800c658:	d0f1      	beq.n	800c63e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800c65a:	4a65      	ldr	r2, [pc, #404]	; (800c7f0 <UTIL_SEQ_Run+0x1ec>)
 800c65c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c65e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c664:	401a      	ands	r2, r3
 800c666:	4b5d      	ldr	r3, [pc, #372]	; (800c7dc <UTIL_SEQ_Run+0x1d8>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	4013      	ands	r3, r2
 800c66c:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800c66e:	4a60      	ldr	r2, [pc, #384]	; (800c7f0 <UTIL_SEQ_Run+0x1ec>)
 800c670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c672:	00db      	lsls	r3, r3, #3
 800c674:	4413      	add	r3, r2
 800c676:	685a      	ldr	r2, [r3, #4]
 800c678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c67a:	4013      	ands	r3, r2
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d106      	bne.n	800c68e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800c680:	4a5b      	ldr	r2, [pc, #364]	; (800c7f0 <UTIL_SEQ_Run+0x1ec>)
 800c682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c684:	00db      	lsls	r3, r3, #3
 800c686:	4413      	add	r3, r2
 800c688:	f04f 32ff 	mov.w	r2, #4294967295
 800c68c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800c68e:	4a58      	ldr	r2, [pc, #352]	; (800c7f0 <UTIL_SEQ_Run+0x1ec>)
 800c690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c692:	00db      	lsls	r3, r3, #3
 800c694:	4413      	add	r3, r2
 800c696:	685a      	ldr	r2, [r3, #4]
 800c698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c69a:	4013      	ands	r3, r2
 800c69c:	4618      	mov	r0, r3
 800c69e:	f000 f9b3 	bl	800ca08 <SEQ_BitPosition>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	461a      	mov	r2, r3
 800c6a6:	4b53      	ldr	r3, [pc, #332]	; (800c7f4 <UTIL_SEQ_Run+0x1f0>)
 800c6a8:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800c6aa:	4a51      	ldr	r2, [pc, #324]	; (800c7f0 <UTIL_SEQ_Run+0x1ec>)
 800c6ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6ae:	00db      	lsls	r3, r3, #3
 800c6b0:	4413      	add	r3, r2
 800c6b2:	685a      	ldr	r2, [r3, #4]
 800c6b4:	4b4f      	ldr	r3, [pc, #316]	; (800c7f4 <UTIL_SEQ_Run+0x1f0>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	2101      	movs	r1, #1
 800c6ba:	fa01 f303 	lsl.w	r3, r1, r3
 800c6be:	43db      	mvns	r3, r3
 800c6c0:	401a      	ands	r2, r3
 800c6c2:	494b      	ldr	r1, [pc, #300]	; (800c7f0 <UTIL_SEQ_Run+0x1ec>)
 800c6c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6c6:	00db      	lsls	r3, r3, #3
 800c6c8:	440b      	add	r3, r1
 800c6ca:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c6cc:	f3ef 8310 	mrs	r3, PRIMASK
 800c6d0:	61bb      	str	r3, [r7, #24]
  return(result);
 800c6d2:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c6d4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800c6d6:	b672      	cpsid	i
}
 800c6d8:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800c6da:	4b46      	ldr	r3, [pc, #280]	; (800c7f4 <UTIL_SEQ_Run+0x1f0>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	2201      	movs	r2, #1
 800c6e0:	fa02 f303 	lsl.w	r3, r2, r3
 800c6e4:	43da      	mvns	r2, r3
 800c6e6:	4b3e      	ldr	r3, [pc, #248]	; (800c7e0 <UTIL_SEQ_Run+0x1dc>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	4013      	ands	r3, r2
 800c6ec:	4a3c      	ldr	r2, [pc, #240]	; (800c7e0 <UTIL_SEQ_Run+0x1dc>)
 800c6ee:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800c6f0:	2302      	movs	r3, #2
 800c6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6f4:	e013      	b.n	800c71e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800c6f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6f8:	3b01      	subs	r3, #1
 800c6fa:	4a3d      	ldr	r2, [pc, #244]	; (800c7f0 <UTIL_SEQ_Run+0x1ec>)
 800c6fc:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800c700:	4b3c      	ldr	r3, [pc, #240]	; (800c7f4 <UTIL_SEQ_Run+0x1f0>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	2201      	movs	r2, #1
 800c706:	fa02 f303 	lsl.w	r3, r2, r3
 800c70a:	43da      	mvns	r2, r3
 800c70c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c70e:	3b01      	subs	r3, #1
 800c710:	400a      	ands	r2, r1
 800c712:	4937      	ldr	r1, [pc, #220]	; (800c7f0 <UTIL_SEQ_Run+0x1ec>)
 800c714:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800c718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c71a:	3b01      	subs	r3, #1
 800c71c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c71e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c720:	2b00      	cmp	r3, #0
 800c722:	d1e8      	bne.n	800c6f6 <UTIL_SEQ_Run+0xf2>
 800c724:	6a3b      	ldr	r3, [r7, #32]
 800c726:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	f383 8810 	msr	PRIMASK, r3
}
 800c72e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800c730:	4b30      	ldr	r3, [pc, #192]	; (800c7f4 <UTIL_SEQ_Run+0x1f0>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	4a30      	ldr	r2, [pc, #192]	; (800c7f8 <UTIL_SEQ_Run+0x1f4>)
 800c736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c73a:	4798      	blx	r3

    local_taskset = TaskSet;
 800c73c:	4b28      	ldr	r3, [pc, #160]	; (800c7e0 <UTIL_SEQ_Run+0x1dc>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800c742:	4b28      	ldr	r3, [pc, #160]	; (800c7e4 <UTIL_SEQ_Run+0x1e0>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800c748:	4b27      	ldr	r3, [pc, #156]	; (800c7e8 <UTIL_SEQ_Run+0x1e4>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800c74e:	4b27      	ldr	r3, [pc, #156]	; (800c7ec <UTIL_SEQ_Run+0x1e8>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c754:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c758:	401a      	ands	r2, r3
 800c75a:	4b20      	ldr	r3, [pc, #128]	; (800c7dc <UTIL_SEQ_Run+0x1d8>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	4013      	ands	r3, r2
 800c760:	2b00      	cmp	r3, #0
 800c762:	d005      	beq.n	800c770 <UTIL_SEQ_Run+0x16c>
 800c764:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c768:	4013      	ands	r3, r2
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	f43f af64 	beq.w	800c638 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800c770:	4b20      	ldr	r3, [pc, #128]	; (800c7f4 <UTIL_SEQ_Run+0x1f0>)
 800c772:	f04f 32ff 	mov.w	r2, #4294967295
 800c776:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800c778:	f000 f938 	bl	800c9ec <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c77c:	f3ef 8310 	mrs	r3, PRIMASK
 800c780:	613b      	str	r3, [r7, #16]
  return(result);
 800c782:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800c784:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c786:	b672      	cpsid	i
}
 800c788:	bf00      	nop
  local_taskset = TaskSet;
 800c78a:	4b15      	ldr	r3, [pc, #84]	; (800c7e0 <UTIL_SEQ_Run+0x1dc>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800c790:	4b14      	ldr	r3, [pc, #80]	; (800c7e4 <UTIL_SEQ_Run+0x1e0>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800c796:	4b14      	ldr	r3, [pc, #80]	; (800c7e8 <UTIL_SEQ_Run+0x1e4>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800c79c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a0:	401a      	ands	r2, r3
 800c7a2:	4b0e      	ldr	r3, [pc, #56]	; (800c7dc <UTIL_SEQ_Run+0x1d8>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	4013      	ands	r3, r2
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d107      	bne.n	800c7bc <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800c7ac:	4b0f      	ldr	r3, [pc, #60]	; (800c7ec <UTIL_SEQ_Run+0x1e8>)
 800c7ae:	681a      	ldr	r2, [r3, #0]
 800c7b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7b2:	4013      	ands	r3, r2
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d101      	bne.n	800c7bc <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800c7b8:	f7f4 ff36 	bl	8001628 <UTIL_SEQ_Idle>
 800c7bc:	69fb      	ldr	r3, [r7, #28]
 800c7be:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	f383 8810 	msr	PRIMASK, r3
}
 800c7c6:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800c7c8:	f000 f917 	bl	800c9fa <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800c7cc:	4a03      	ldr	r2, [pc, #12]	; (800c7dc <UTIL_SEQ_Run+0x1d8>)
 800c7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7d0:	6013      	str	r3, [r2, #0]

  return;
 800c7d2:	bf00      	nop
}
 800c7d4:	3740      	adds	r7, #64	; 0x40
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	bd80      	pop	{r7, pc}
 800c7da:	bf00      	nop
 800c7dc:	20000060 	.word	0x20000060
 800c7e0:	20001708 	.word	0x20001708
 800c7e4:	2000170c 	.word	0x2000170c
 800c7e8:	2000005c 	.word	0x2000005c
 800c7ec:	20001710 	.word	0x20001710
 800c7f0:	20001798 	.word	0x20001798
 800c7f4:	20001714 	.word	0x20001714
 800c7f8:	20001718 	.word	0x20001718

0800c7fc <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b088      	sub	sp, #32
 800c800:	af00      	add	r7, sp, #0
 800c802:	60f8      	str	r0, [r7, #12]
 800c804:	60b9      	str	r1, [r7, #8]
 800c806:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c808:	f3ef 8310 	mrs	r3, PRIMASK
 800c80c:	617b      	str	r3, [r7, #20]
  return(result);
 800c80e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800c810:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c812:	b672      	cpsid	i
}
 800c814:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800c816:	68f8      	ldr	r0, [r7, #12]
 800c818:	f000 f8f6 	bl	800ca08 <SEQ_BitPosition>
 800c81c:	4603      	mov	r3, r0
 800c81e:	4619      	mov	r1, r3
 800c820:	4a06      	ldr	r2, [pc, #24]	; (800c83c <UTIL_SEQ_RegTask+0x40>)
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c828:	69fb      	ldr	r3, [r7, #28]
 800c82a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c82c:	69bb      	ldr	r3, [r7, #24]
 800c82e:	f383 8810 	msr	PRIMASK, r3
}
 800c832:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800c834:	bf00      	nop
}
 800c836:	3720      	adds	r7, #32
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}
 800c83c:	20001718 	.word	0x20001718

0800c840 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800c840:	b480      	push	{r7}
 800c842:	b087      	sub	sp, #28
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
 800c848:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c84a:	f3ef 8310 	mrs	r3, PRIMASK
 800c84e:	60fb      	str	r3, [r7, #12]
  return(result);
 800c850:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c852:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c854:	b672      	cpsid	i
}
 800c856:	bf00      	nop

  TaskSet |= TaskId_bm;
 800c858:	4b0d      	ldr	r3, [pc, #52]	; (800c890 <UTIL_SEQ_SetTask+0x50>)
 800c85a:	681a      	ldr	r2, [r3, #0]
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	4313      	orrs	r3, r2
 800c860:	4a0b      	ldr	r2, [pc, #44]	; (800c890 <UTIL_SEQ_SetTask+0x50>)
 800c862:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800c864:	4a0b      	ldr	r2, [pc, #44]	; (800c894 <UTIL_SEQ_SetTask+0x54>)
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	431a      	orrs	r2, r3
 800c870:	4908      	ldr	r1, [pc, #32]	; (800c894 <UTIL_SEQ_SetTask+0x54>)
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800c878:	697b      	ldr	r3, [r7, #20]
 800c87a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c87c:	693b      	ldr	r3, [r7, #16]
 800c87e:	f383 8810 	msr	PRIMASK, r3
}
 800c882:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c884:	bf00      	nop
}
 800c886:	371c      	adds	r7, #28
 800c888:	46bd      	mov	sp, r7
 800c88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88e:	4770      	bx	lr
 800c890:	20001708 	.word	0x20001708
 800c894:	20001798 	.word	0x20001798

0800c898 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800c898:	b480      	push	{r7}
 800c89a:	b087      	sub	sp, #28
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c8a0:	f3ef 8310 	mrs	r3, PRIMASK
 800c8a4:	60fb      	str	r3, [r7, #12]
  return(result);
 800c8a6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c8a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c8aa:	b672      	cpsid	i
}
 800c8ac:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	43da      	mvns	r2, r3
 800c8b2:	4b08      	ldr	r3, [pc, #32]	; (800c8d4 <UTIL_SEQ_PauseTask+0x3c>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	4013      	ands	r3, r2
 800c8b8:	4a06      	ldr	r2, [pc, #24]	; (800c8d4 <UTIL_SEQ_PauseTask+0x3c>)
 800c8ba:	6013      	str	r3, [r2, #0]
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8c0:	693b      	ldr	r3, [r7, #16]
 800c8c2:	f383 8810 	msr	PRIMASK, r3
}
 800c8c6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c8c8:	bf00      	nop
}
 800c8ca:	371c      	adds	r7, #28
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d2:	4770      	bx	lr
 800c8d4:	2000005c 	.word	0x2000005c

0800c8d8 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800c8d8:	b480      	push	{r7}
 800c8da:	b087      	sub	sp, #28
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c8e0:	f3ef 8310 	mrs	r3, PRIMASK
 800c8e4:	60fb      	str	r3, [r7, #12]
  return(result);
 800c8e6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c8e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c8ea:	b672      	cpsid	i
}
 800c8ec:	bf00      	nop

  TaskMask |= TaskId_bm;
 800c8ee:	4b09      	ldr	r3, [pc, #36]	; (800c914 <UTIL_SEQ_ResumeTask+0x3c>)
 800c8f0:	681a      	ldr	r2, [r3, #0]
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	4313      	orrs	r3, r2
 800c8f6:	4a07      	ldr	r2, [pc, #28]	; (800c914 <UTIL_SEQ_ResumeTask+0x3c>)
 800c8f8:	6013      	str	r3, [r2, #0]
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8fe:	693b      	ldr	r3, [r7, #16]
 800c900:	f383 8810 	msr	PRIMASK, r3
}
 800c904:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c906:	bf00      	nop
}
 800c908:	371c      	adds	r7, #28
 800c90a:	46bd      	mov	sp, r7
 800c90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c910:	4770      	bx	lr
 800c912:	bf00      	nop
 800c914:	2000005c 	.word	0x2000005c

0800c918 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800c918:	b480      	push	{r7}
 800c91a:	b087      	sub	sp, #28
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c920:	f3ef 8310 	mrs	r3, PRIMASK
 800c924:	60fb      	str	r3, [r7, #12]
  return(result);
 800c926:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c928:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c92a:	b672      	cpsid	i
}
 800c92c:	bf00      	nop

  EvtSet |= EvtId_bm;
 800c92e:	4b09      	ldr	r3, [pc, #36]	; (800c954 <UTIL_SEQ_SetEvt+0x3c>)
 800c930:	681a      	ldr	r2, [r3, #0]
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	4313      	orrs	r3, r2
 800c936:	4a07      	ldr	r2, [pc, #28]	; (800c954 <UTIL_SEQ_SetEvt+0x3c>)
 800c938:	6013      	str	r3, [r2, #0]
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c93e:	693b      	ldr	r3, [r7, #16]
 800c940:	f383 8810 	msr	PRIMASK, r3
}
 800c944:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c946:	bf00      	nop
}
 800c948:	371c      	adds	r7, #28
 800c94a:	46bd      	mov	sp, r7
 800c94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c950:	4770      	bx	lr
 800c952:	bf00      	nop
 800c954:	2000170c 	.word	0x2000170c

0800c958 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b088      	sub	sp, #32
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800c960:	4b1f      	ldr	r3, [pc, #124]	; (800c9e0 <UTIL_SEQ_WaitEvt+0x88>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800c966:	4b1e      	ldr	r3, [pc, #120]	; (800c9e0 <UTIL_SEQ_WaitEvt+0x88>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c96e:	d102      	bne.n	800c976 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800c970:	2300      	movs	r3, #0
 800c972:	61fb      	str	r3, [r7, #28]
 800c974:	e005      	b.n	800c982 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800c976:	4b1a      	ldr	r3, [pc, #104]	; (800c9e0 <UTIL_SEQ_WaitEvt+0x88>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	2201      	movs	r2, #1
 800c97c:	fa02 f303 	lsl.w	r3, r2, r3
 800c980:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800c982:	4b18      	ldr	r3, [pc, #96]	; (800c9e4 <UTIL_SEQ_WaitEvt+0x8c>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800c988:	4a16      	ldr	r2, [pc, #88]	; (800c9e4 <UTIL_SEQ_WaitEvt+0x8c>)
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800c98e:	e003      	b.n	800c998 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800c990:	6879      	ldr	r1, [r7, #4]
 800c992:	69f8      	ldr	r0, [r7, #28]
 800c994:	f7f4 fe4f 	bl	8001636 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800c998:	4b13      	ldr	r3, [pc, #76]	; (800c9e8 <UTIL_SEQ_WaitEvt+0x90>)
 800c99a:	681a      	ldr	r2, [r3, #0]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	4013      	ands	r3, r2
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d0f5      	beq.n	800c990 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800c9a4:	4a0e      	ldr	r2, [pc, #56]	; (800c9e0 <UTIL_SEQ_WaitEvt+0x88>)
 800c9a6:	69bb      	ldr	r3, [r7, #24]
 800c9a8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c9aa:	f3ef 8310 	mrs	r3, PRIMASK
 800c9ae:	60bb      	str	r3, [r7, #8]
  return(result);
 800c9b0:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c9b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c9b4:	b672      	cpsid	i
}
 800c9b6:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	43da      	mvns	r2, r3
 800c9bc:	4b0a      	ldr	r3, [pc, #40]	; (800c9e8 <UTIL_SEQ_WaitEvt+0x90>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4013      	ands	r3, r2
 800c9c2:	4a09      	ldr	r2, [pc, #36]	; (800c9e8 <UTIL_SEQ_WaitEvt+0x90>)
 800c9c4:	6013      	str	r3, [r2, #0]
 800c9c6:	693b      	ldr	r3, [r7, #16]
 800c9c8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	f383 8810 	msr	PRIMASK, r3
}
 800c9d0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800c9d2:	4a04      	ldr	r2, [pc, #16]	; (800c9e4 <UTIL_SEQ_WaitEvt+0x8c>)
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	6013      	str	r3, [r2, #0]
  return;
 800c9d8:	bf00      	nop
}
 800c9da:	3720      	adds	r7, #32
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}
 800c9e0:	20001714 	.word	0x20001714
 800c9e4:	20001710 	.word	0x20001710
 800c9e8:	2000170c 	.word	0x2000170c

0800c9ec <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c9f0:	bf00      	nop
}
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f8:	4770      	bx	lr

0800c9fa <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800c9fa:	b480      	push	{r7}
 800c9fc:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c9fe:	bf00      	nop
}
 800ca00:	46bd      	mov	sp, r7
 800ca02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca06:	4770      	bx	lr

0800ca08 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800ca08:	b480      	push	{r7}
 800ca0a:	b085      	sub	sp, #20
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800ca10:	2300      	movs	r3, #0
 800ca12:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	0c1b      	lsrs	r3, r3, #16
 800ca1c:	041b      	lsls	r3, r3, #16
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d104      	bne.n	800ca2c <SEQ_BitPosition+0x24>
 800ca22:	2310      	movs	r3, #16
 800ca24:	73fb      	strb	r3, [r7, #15]
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	041b      	lsls	r3, r3, #16
 800ca2a:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d105      	bne.n	800ca42 <SEQ_BitPosition+0x3a>
 800ca36:	7bfb      	ldrb	r3, [r7, #15]
 800ca38:	3308      	adds	r3, #8
 800ca3a:	73fb      	strb	r3, [r7, #15]
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	021b      	lsls	r3, r3, #8
 800ca40:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800ca42:	68bb      	ldr	r3, [r7, #8]
 800ca44:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d105      	bne.n	800ca58 <SEQ_BitPosition+0x50>
 800ca4c:	7bfb      	ldrb	r3, [r7, #15]
 800ca4e:	3304      	adds	r3, #4
 800ca50:	73fb      	strb	r3, [r7, #15]
 800ca52:	68bb      	ldr	r3, [r7, #8]
 800ca54:	011b      	lsls	r3, r3, #4
 800ca56:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800ca58:	68bb      	ldr	r3, [r7, #8]
 800ca5a:	0f1b      	lsrs	r3, r3, #28
 800ca5c:	4a07      	ldr	r2, [pc, #28]	; (800ca7c <SEQ_BitPosition+0x74>)
 800ca5e:	5cd2      	ldrb	r2, [r2, r3]
 800ca60:	7bfb      	ldrb	r3, [r7, #15]
 800ca62:	4413      	add	r3, r2
 800ca64:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800ca66:	7bfb      	ldrb	r3, [r7, #15]
 800ca68:	f1c3 031f 	rsb	r3, r3, #31
 800ca6c:	b2db      	uxtb	r3, r3
}
 800ca6e:	4618      	mov	r0, r3
 800ca70:	3714      	adds	r7, #20
 800ca72:	46bd      	mov	sp, r7
 800ca74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca78:	4770      	bx	lr
 800ca7a:	bf00      	nop
 800ca7c:	08010c74 	.word	0x08010c74

0800ca80 <__cvt>:
 800ca80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca84:	ec55 4b10 	vmov	r4, r5, d0
 800ca88:	2d00      	cmp	r5, #0
 800ca8a:	460e      	mov	r6, r1
 800ca8c:	4619      	mov	r1, r3
 800ca8e:	462b      	mov	r3, r5
 800ca90:	bfbb      	ittet	lt
 800ca92:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ca96:	461d      	movlt	r5, r3
 800ca98:	2300      	movge	r3, #0
 800ca9a:	232d      	movlt	r3, #45	; 0x2d
 800ca9c:	700b      	strb	r3, [r1, #0]
 800ca9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800caa0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800caa4:	4691      	mov	r9, r2
 800caa6:	f023 0820 	bic.w	r8, r3, #32
 800caaa:	bfbc      	itt	lt
 800caac:	4622      	movlt	r2, r4
 800caae:	4614      	movlt	r4, r2
 800cab0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cab4:	d005      	beq.n	800cac2 <__cvt+0x42>
 800cab6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800caba:	d100      	bne.n	800cabe <__cvt+0x3e>
 800cabc:	3601      	adds	r6, #1
 800cabe:	2102      	movs	r1, #2
 800cac0:	e000      	b.n	800cac4 <__cvt+0x44>
 800cac2:	2103      	movs	r1, #3
 800cac4:	ab03      	add	r3, sp, #12
 800cac6:	9301      	str	r3, [sp, #4]
 800cac8:	ab02      	add	r3, sp, #8
 800caca:	9300      	str	r3, [sp, #0]
 800cacc:	ec45 4b10 	vmov	d0, r4, r5
 800cad0:	4653      	mov	r3, sl
 800cad2:	4632      	mov	r2, r6
 800cad4:	f000 ff60 	bl	800d998 <_dtoa_r>
 800cad8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cadc:	4607      	mov	r7, r0
 800cade:	d102      	bne.n	800cae6 <__cvt+0x66>
 800cae0:	f019 0f01 	tst.w	r9, #1
 800cae4:	d022      	beq.n	800cb2c <__cvt+0xac>
 800cae6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800caea:	eb07 0906 	add.w	r9, r7, r6
 800caee:	d110      	bne.n	800cb12 <__cvt+0x92>
 800caf0:	783b      	ldrb	r3, [r7, #0]
 800caf2:	2b30      	cmp	r3, #48	; 0x30
 800caf4:	d10a      	bne.n	800cb0c <__cvt+0x8c>
 800caf6:	2200      	movs	r2, #0
 800caf8:	2300      	movs	r3, #0
 800cafa:	4620      	mov	r0, r4
 800cafc:	4629      	mov	r1, r5
 800cafe:	f7f3 ffcb 	bl	8000a98 <__aeabi_dcmpeq>
 800cb02:	b918      	cbnz	r0, 800cb0c <__cvt+0x8c>
 800cb04:	f1c6 0601 	rsb	r6, r6, #1
 800cb08:	f8ca 6000 	str.w	r6, [sl]
 800cb0c:	f8da 3000 	ldr.w	r3, [sl]
 800cb10:	4499      	add	r9, r3
 800cb12:	2200      	movs	r2, #0
 800cb14:	2300      	movs	r3, #0
 800cb16:	4620      	mov	r0, r4
 800cb18:	4629      	mov	r1, r5
 800cb1a:	f7f3 ffbd 	bl	8000a98 <__aeabi_dcmpeq>
 800cb1e:	b108      	cbz	r0, 800cb24 <__cvt+0xa4>
 800cb20:	f8cd 900c 	str.w	r9, [sp, #12]
 800cb24:	2230      	movs	r2, #48	; 0x30
 800cb26:	9b03      	ldr	r3, [sp, #12]
 800cb28:	454b      	cmp	r3, r9
 800cb2a:	d307      	bcc.n	800cb3c <__cvt+0xbc>
 800cb2c:	9b03      	ldr	r3, [sp, #12]
 800cb2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb30:	1bdb      	subs	r3, r3, r7
 800cb32:	4638      	mov	r0, r7
 800cb34:	6013      	str	r3, [r2, #0]
 800cb36:	b004      	add	sp, #16
 800cb38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb3c:	1c59      	adds	r1, r3, #1
 800cb3e:	9103      	str	r1, [sp, #12]
 800cb40:	701a      	strb	r2, [r3, #0]
 800cb42:	e7f0      	b.n	800cb26 <__cvt+0xa6>

0800cb44 <__exponent>:
 800cb44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb46:	4603      	mov	r3, r0
 800cb48:	2900      	cmp	r1, #0
 800cb4a:	bfb8      	it	lt
 800cb4c:	4249      	neglt	r1, r1
 800cb4e:	f803 2b02 	strb.w	r2, [r3], #2
 800cb52:	bfb4      	ite	lt
 800cb54:	222d      	movlt	r2, #45	; 0x2d
 800cb56:	222b      	movge	r2, #43	; 0x2b
 800cb58:	2909      	cmp	r1, #9
 800cb5a:	7042      	strb	r2, [r0, #1]
 800cb5c:	dd2a      	ble.n	800cbb4 <__exponent+0x70>
 800cb5e:	f10d 0207 	add.w	r2, sp, #7
 800cb62:	4617      	mov	r7, r2
 800cb64:	260a      	movs	r6, #10
 800cb66:	4694      	mov	ip, r2
 800cb68:	fb91 f5f6 	sdiv	r5, r1, r6
 800cb6c:	fb06 1415 	mls	r4, r6, r5, r1
 800cb70:	3430      	adds	r4, #48	; 0x30
 800cb72:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800cb76:	460c      	mov	r4, r1
 800cb78:	2c63      	cmp	r4, #99	; 0x63
 800cb7a:	f102 32ff 	add.w	r2, r2, #4294967295
 800cb7e:	4629      	mov	r1, r5
 800cb80:	dcf1      	bgt.n	800cb66 <__exponent+0x22>
 800cb82:	3130      	adds	r1, #48	; 0x30
 800cb84:	f1ac 0402 	sub.w	r4, ip, #2
 800cb88:	f802 1c01 	strb.w	r1, [r2, #-1]
 800cb8c:	1c41      	adds	r1, r0, #1
 800cb8e:	4622      	mov	r2, r4
 800cb90:	42ba      	cmp	r2, r7
 800cb92:	d30a      	bcc.n	800cbaa <__exponent+0x66>
 800cb94:	f10d 0209 	add.w	r2, sp, #9
 800cb98:	eba2 020c 	sub.w	r2, r2, ip
 800cb9c:	42bc      	cmp	r4, r7
 800cb9e:	bf88      	it	hi
 800cba0:	2200      	movhi	r2, #0
 800cba2:	4413      	add	r3, r2
 800cba4:	1a18      	subs	r0, r3, r0
 800cba6:	b003      	add	sp, #12
 800cba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbaa:	f812 5b01 	ldrb.w	r5, [r2], #1
 800cbae:	f801 5f01 	strb.w	r5, [r1, #1]!
 800cbb2:	e7ed      	b.n	800cb90 <__exponent+0x4c>
 800cbb4:	2330      	movs	r3, #48	; 0x30
 800cbb6:	3130      	adds	r1, #48	; 0x30
 800cbb8:	7083      	strb	r3, [r0, #2]
 800cbba:	70c1      	strb	r1, [r0, #3]
 800cbbc:	1d03      	adds	r3, r0, #4
 800cbbe:	e7f1      	b.n	800cba4 <__exponent+0x60>

0800cbc0 <_printf_float>:
 800cbc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbc4:	ed2d 8b02 	vpush	{d8}
 800cbc8:	b08d      	sub	sp, #52	; 0x34
 800cbca:	460c      	mov	r4, r1
 800cbcc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cbd0:	4616      	mov	r6, r2
 800cbd2:	461f      	mov	r7, r3
 800cbd4:	4605      	mov	r5, r0
 800cbd6:	f000 fdd1 	bl	800d77c <_localeconv_r>
 800cbda:	f8d0 a000 	ldr.w	sl, [r0]
 800cbde:	4650      	mov	r0, sl
 800cbe0:	f7f3 fb2e 	bl	8000240 <strlen>
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	930a      	str	r3, [sp, #40]	; 0x28
 800cbe8:	6823      	ldr	r3, [r4, #0]
 800cbea:	9305      	str	r3, [sp, #20]
 800cbec:	f8d8 3000 	ldr.w	r3, [r8]
 800cbf0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cbf4:	3307      	adds	r3, #7
 800cbf6:	f023 0307 	bic.w	r3, r3, #7
 800cbfa:	f103 0208 	add.w	r2, r3, #8
 800cbfe:	f8c8 2000 	str.w	r2, [r8]
 800cc02:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cc06:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cc0a:	9307      	str	r3, [sp, #28]
 800cc0c:	f8cd 8018 	str.w	r8, [sp, #24]
 800cc10:	ee08 0a10 	vmov	s16, r0
 800cc14:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800cc18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc1c:	4b9e      	ldr	r3, [pc, #632]	; (800ce98 <_printf_float+0x2d8>)
 800cc1e:	f04f 32ff 	mov.w	r2, #4294967295
 800cc22:	f7f3 ff6b 	bl	8000afc <__aeabi_dcmpun>
 800cc26:	bb88      	cbnz	r0, 800cc8c <_printf_float+0xcc>
 800cc28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc2c:	4b9a      	ldr	r3, [pc, #616]	; (800ce98 <_printf_float+0x2d8>)
 800cc2e:	f04f 32ff 	mov.w	r2, #4294967295
 800cc32:	f7f3 ff45 	bl	8000ac0 <__aeabi_dcmple>
 800cc36:	bb48      	cbnz	r0, 800cc8c <_printf_float+0xcc>
 800cc38:	2200      	movs	r2, #0
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	4640      	mov	r0, r8
 800cc3e:	4649      	mov	r1, r9
 800cc40:	f7f3 ff34 	bl	8000aac <__aeabi_dcmplt>
 800cc44:	b110      	cbz	r0, 800cc4c <_printf_float+0x8c>
 800cc46:	232d      	movs	r3, #45	; 0x2d
 800cc48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc4c:	4a93      	ldr	r2, [pc, #588]	; (800ce9c <_printf_float+0x2dc>)
 800cc4e:	4b94      	ldr	r3, [pc, #592]	; (800cea0 <_printf_float+0x2e0>)
 800cc50:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cc54:	bf94      	ite	ls
 800cc56:	4690      	movls	r8, r2
 800cc58:	4698      	movhi	r8, r3
 800cc5a:	2303      	movs	r3, #3
 800cc5c:	6123      	str	r3, [r4, #16]
 800cc5e:	9b05      	ldr	r3, [sp, #20]
 800cc60:	f023 0304 	bic.w	r3, r3, #4
 800cc64:	6023      	str	r3, [r4, #0]
 800cc66:	f04f 0900 	mov.w	r9, #0
 800cc6a:	9700      	str	r7, [sp, #0]
 800cc6c:	4633      	mov	r3, r6
 800cc6e:	aa0b      	add	r2, sp, #44	; 0x2c
 800cc70:	4621      	mov	r1, r4
 800cc72:	4628      	mov	r0, r5
 800cc74:	f000 f9da 	bl	800d02c <_printf_common>
 800cc78:	3001      	adds	r0, #1
 800cc7a:	f040 8090 	bne.w	800cd9e <_printf_float+0x1de>
 800cc7e:	f04f 30ff 	mov.w	r0, #4294967295
 800cc82:	b00d      	add	sp, #52	; 0x34
 800cc84:	ecbd 8b02 	vpop	{d8}
 800cc88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc8c:	4642      	mov	r2, r8
 800cc8e:	464b      	mov	r3, r9
 800cc90:	4640      	mov	r0, r8
 800cc92:	4649      	mov	r1, r9
 800cc94:	f7f3 ff32 	bl	8000afc <__aeabi_dcmpun>
 800cc98:	b140      	cbz	r0, 800ccac <_printf_float+0xec>
 800cc9a:	464b      	mov	r3, r9
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	bfbc      	itt	lt
 800cca0:	232d      	movlt	r3, #45	; 0x2d
 800cca2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cca6:	4a7f      	ldr	r2, [pc, #508]	; (800cea4 <_printf_float+0x2e4>)
 800cca8:	4b7f      	ldr	r3, [pc, #508]	; (800cea8 <_printf_float+0x2e8>)
 800ccaa:	e7d1      	b.n	800cc50 <_printf_float+0x90>
 800ccac:	6863      	ldr	r3, [r4, #4]
 800ccae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ccb2:	9206      	str	r2, [sp, #24]
 800ccb4:	1c5a      	adds	r2, r3, #1
 800ccb6:	d13f      	bne.n	800cd38 <_printf_float+0x178>
 800ccb8:	2306      	movs	r3, #6
 800ccba:	6063      	str	r3, [r4, #4]
 800ccbc:	9b05      	ldr	r3, [sp, #20]
 800ccbe:	6861      	ldr	r1, [r4, #4]
 800ccc0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	9303      	str	r3, [sp, #12]
 800ccc8:	ab0a      	add	r3, sp, #40	; 0x28
 800ccca:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ccce:	ab09      	add	r3, sp, #36	; 0x24
 800ccd0:	ec49 8b10 	vmov	d0, r8, r9
 800ccd4:	9300      	str	r3, [sp, #0]
 800ccd6:	6022      	str	r2, [r4, #0]
 800ccd8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ccdc:	4628      	mov	r0, r5
 800ccde:	f7ff fecf 	bl	800ca80 <__cvt>
 800cce2:	9b06      	ldr	r3, [sp, #24]
 800cce4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cce6:	2b47      	cmp	r3, #71	; 0x47
 800cce8:	4680      	mov	r8, r0
 800ccea:	d108      	bne.n	800ccfe <_printf_float+0x13e>
 800ccec:	1cc8      	adds	r0, r1, #3
 800ccee:	db02      	blt.n	800ccf6 <_printf_float+0x136>
 800ccf0:	6863      	ldr	r3, [r4, #4]
 800ccf2:	4299      	cmp	r1, r3
 800ccf4:	dd41      	ble.n	800cd7a <_printf_float+0x1ba>
 800ccf6:	f1ab 0302 	sub.w	r3, fp, #2
 800ccfa:	fa5f fb83 	uxtb.w	fp, r3
 800ccfe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cd02:	d820      	bhi.n	800cd46 <_printf_float+0x186>
 800cd04:	3901      	subs	r1, #1
 800cd06:	465a      	mov	r2, fp
 800cd08:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cd0c:	9109      	str	r1, [sp, #36]	; 0x24
 800cd0e:	f7ff ff19 	bl	800cb44 <__exponent>
 800cd12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd14:	1813      	adds	r3, r2, r0
 800cd16:	2a01      	cmp	r2, #1
 800cd18:	4681      	mov	r9, r0
 800cd1a:	6123      	str	r3, [r4, #16]
 800cd1c:	dc02      	bgt.n	800cd24 <_printf_float+0x164>
 800cd1e:	6822      	ldr	r2, [r4, #0]
 800cd20:	07d2      	lsls	r2, r2, #31
 800cd22:	d501      	bpl.n	800cd28 <_printf_float+0x168>
 800cd24:	3301      	adds	r3, #1
 800cd26:	6123      	str	r3, [r4, #16]
 800cd28:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d09c      	beq.n	800cc6a <_printf_float+0xaa>
 800cd30:	232d      	movs	r3, #45	; 0x2d
 800cd32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd36:	e798      	b.n	800cc6a <_printf_float+0xaa>
 800cd38:	9a06      	ldr	r2, [sp, #24]
 800cd3a:	2a47      	cmp	r2, #71	; 0x47
 800cd3c:	d1be      	bne.n	800ccbc <_printf_float+0xfc>
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d1bc      	bne.n	800ccbc <_printf_float+0xfc>
 800cd42:	2301      	movs	r3, #1
 800cd44:	e7b9      	b.n	800ccba <_printf_float+0xfa>
 800cd46:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cd4a:	d118      	bne.n	800cd7e <_printf_float+0x1be>
 800cd4c:	2900      	cmp	r1, #0
 800cd4e:	6863      	ldr	r3, [r4, #4]
 800cd50:	dd0b      	ble.n	800cd6a <_printf_float+0x1aa>
 800cd52:	6121      	str	r1, [r4, #16]
 800cd54:	b913      	cbnz	r3, 800cd5c <_printf_float+0x19c>
 800cd56:	6822      	ldr	r2, [r4, #0]
 800cd58:	07d0      	lsls	r0, r2, #31
 800cd5a:	d502      	bpl.n	800cd62 <_printf_float+0x1a2>
 800cd5c:	3301      	adds	r3, #1
 800cd5e:	440b      	add	r3, r1
 800cd60:	6123      	str	r3, [r4, #16]
 800cd62:	65a1      	str	r1, [r4, #88]	; 0x58
 800cd64:	f04f 0900 	mov.w	r9, #0
 800cd68:	e7de      	b.n	800cd28 <_printf_float+0x168>
 800cd6a:	b913      	cbnz	r3, 800cd72 <_printf_float+0x1b2>
 800cd6c:	6822      	ldr	r2, [r4, #0]
 800cd6e:	07d2      	lsls	r2, r2, #31
 800cd70:	d501      	bpl.n	800cd76 <_printf_float+0x1b6>
 800cd72:	3302      	adds	r3, #2
 800cd74:	e7f4      	b.n	800cd60 <_printf_float+0x1a0>
 800cd76:	2301      	movs	r3, #1
 800cd78:	e7f2      	b.n	800cd60 <_printf_float+0x1a0>
 800cd7a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cd7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd80:	4299      	cmp	r1, r3
 800cd82:	db05      	blt.n	800cd90 <_printf_float+0x1d0>
 800cd84:	6823      	ldr	r3, [r4, #0]
 800cd86:	6121      	str	r1, [r4, #16]
 800cd88:	07d8      	lsls	r0, r3, #31
 800cd8a:	d5ea      	bpl.n	800cd62 <_printf_float+0x1a2>
 800cd8c:	1c4b      	adds	r3, r1, #1
 800cd8e:	e7e7      	b.n	800cd60 <_printf_float+0x1a0>
 800cd90:	2900      	cmp	r1, #0
 800cd92:	bfd4      	ite	le
 800cd94:	f1c1 0202 	rsble	r2, r1, #2
 800cd98:	2201      	movgt	r2, #1
 800cd9a:	4413      	add	r3, r2
 800cd9c:	e7e0      	b.n	800cd60 <_printf_float+0x1a0>
 800cd9e:	6823      	ldr	r3, [r4, #0]
 800cda0:	055a      	lsls	r2, r3, #21
 800cda2:	d407      	bmi.n	800cdb4 <_printf_float+0x1f4>
 800cda4:	6923      	ldr	r3, [r4, #16]
 800cda6:	4642      	mov	r2, r8
 800cda8:	4631      	mov	r1, r6
 800cdaa:	4628      	mov	r0, r5
 800cdac:	47b8      	blx	r7
 800cdae:	3001      	adds	r0, #1
 800cdb0:	d12c      	bne.n	800ce0c <_printf_float+0x24c>
 800cdb2:	e764      	b.n	800cc7e <_printf_float+0xbe>
 800cdb4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cdb8:	f240 80e0 	bls.w	800cf7c <_printf_float+0x3bc>
 800cdbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	f7f3 fe68 	bl	8000a98 <__aeabi_dcmpeq>
 800cdc8:	2800      	cmp	r0, #0
 800cdca:	d034      	beq.n	800ce36 <_printf_float+0x276>
 800cdcc:	4a37      	ldr	r2, [pc, #220]	; (800ceac <_printf_float+0x2ec>)
 800cdce:	2301      	movs	r3, #1
 800cdd0:	4631      	mov	r1, r6
 800cdd2:	4628      	mov	r0, r5
 800cdd4:	47b8      	blx	r7
 800cdd6:	3001      	adds	r0, #1
 800cdd8:	f43f af51 	beq.w	800cc7e <_printf_float+0xbe>
 800cddc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cde0:	429a      	cmp	r2, r3
 800cde2:	db02      	blt.n	800cdea <_printf_float+0x22a>
 800cde4:	6823      	ldr	r3, [r4, #0]
 800cde6:	07d8      	lsls	r0, r3, #31
 800cde8:	d510      	bpl.n	800ce0c <_printf_float+0x24c>
 800cdea:	ee18 3a10 	vmov	r3, s16
 800cdee:	4652      	mov	r2, sl
 800cdf0:	4631      	mov	r1, r6
 800cdf2:	4628      	mov	r0, r5
 800cdf4:	47b8      	blx	r7
 800cdf6:	3001      	adds	r0, #1
 800cdf8:	f43f af41 	beq.w	800cc7e <_printf_float+0xbe>
 800cdfc:	f04f 0800 	mov.w	r8, #0
 800ce00:	f104 091a 	add.w	r9, r4, #26
 800ce04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce06:	3b01      	subs	r3, #1
 800ce08:	4543      	cmp	r3, r8
 800ce0a:	dc09      	bgt.n	800ce20 <_printf_float+0x260>
 800ce0c:	6823      	ldr	r3, [r4, #0]
 800ce0e:	079b      	lsls	r3, r3, #30
 800ce10:	f100 8107 	bmi.w	800d022 <_printf_float+0x462>
 800ce14:	68e0      	ldr	r0, [r4, #12]
 800ce16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce18:	4298      	cmp	r0, r3
 800ce1a:	bfb8      	it	lt
 800ce1c:	4618      	movlt	r0, r3
 800ce1e:	e730      	b.n	800cc82 <_printf_float+0xc2>
 800ce20:	2301      	movs	r3, #1
 800ce22:	464a      	mov	r2, r9
 800ce24:	4631      	mov	r1, r6
 800ce26:	4628      	mov	r0, r5
 800ce28:	47b8      	blx	r7
 800ce2a:	3001      	adds	r0, #1
 800ce2c:	f43f af27 	beq.w	800cc7e <_printf_float+0xbe>
 800ce30:	f108 0801 	add.w	r8, r8, #1
 800ce34:	e7e6      	b.n	800ce04 <_printf_float+0x244>
 800ce36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	dc39      	bgt.n	800ceb0 <_printf_float+0x2f0>
 800ce3c:	4a1b      	ldr	r2, [pc, #108]	; (800ceac <_printf_float+0x2ec>)
 800ce3e:	2301      	movs	r3, #1
 800ce40:	4631      	mov	r1, r6
 800ce42:	4628      	mov	r0, r5
 800ce44:	47b8      	blx	r7
 800ce46:	3001      	adds	r0, #1
 800ce48:	f43f af19 	beq.w	800cc7e <_printf_float+0xbe>
 800ce4c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ce50:	4313      	orrs	r3, r2
 800ce52:	d102      	bne.n	800ce5a <_printf_float+0x29a>
 800ce54:	6823      	ldr	r3, [r4, #0]
 800ce56:	07d9      	lsls	r1, r3, #31
 800ce58:	d5d8      	bpl.n	800ce0c <_printf_float+0x24c>
 800ce5a:	ee18 3a10 	vmov	r3, s16
 800ce5e:	4652      	mov	r2, sl
 800ce60:	4631      	mov	r1, r6
 800ce62:	4628      	mov	r0, r5
 800ce64:	47b8      	blx	r7
 800ce66:	3001      	adds	r0, #1
 800ce68:	f43f af09 	beq.w	800cc7e <_printf_float+0xbe>
 800ce6c:	f04f 0900 	mov.w	r9, #0
 800ce70:	f104 0a1a 	add.w	sl, r4, #26
 800ce74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce76:	425b      	negs	r3, r3
 800ce78:	454b      	cmp	r3, r9
 800ce7a:	dc01      	bgt.n	800ce80 <_printf_float+0x2c0>
 800ce7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce7e:	e792      	b.n	800cda6 <_printf_float+0x1e6>
 800ce80:	2301      	movs	r3, #1
 800ce82:	4652      	mov	r2, sl
 800ce84:	4631      	mov	r1, r6
 800ce86:	4628      	mov	r0, r5
 800ce88:	47b8      	blx	r7
 800ce8a:	3001      	adds	r0, #1
 800ce8c:	f43f aef7 	beq.w	800cc7e <_printf_float+0xbe>
 800ce90:	f109 0901 	add.w	r9, r9, #1
 800ce94:	e7ee      	b.n	800ce74 <_printf_float+0x2b4>
 800ce96:	bf00      	nop
 800ce98:	7fefffff 	.word	0x7fefffff
 800ce9c:	08010c84 	.word	0x08010c84
 800cea0:	08010c88 	.word	0x08010c88
 800cea4:	08010c8c 	.word	0x08010c8c
 800cea8:	08010c90 	.word	0x08010c90
 800ceac:	08010c94 	.word	0x08010c94
 800ceb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ceb2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	bfa8      	it	ge
 800ceb8:	461a      	movge	r2, r3
 800ceba:	2a00      	cmp	r2, #0
 800cebc:	4691      	mov	r9, r2
 800cebe:	dc37      	bgt.n	800cf30 <_printf_float+0x370>
 800cec0:	f04f 0b00 	mov.w	fp, #0
 800cec4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cec8:	f104 021a 	add.w	r2, r4, #26
 800cecc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cece:	9305      	str	r3, [sp, #20]
 800ced0:	eba3 0309 	sub.w	r3, r3, r9
 800ced4:	455b      	cmp	r3, fp
 800ced6:	dc33      	bgt.n	800cf40 <_printf_float+0x380>
 800ced8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cedc:	429a      	cmp	r2, r3
 800cede:	db3b      	blt.n	800cf58 <_printf_float+0x398>
 800cee0:	6823      	ldr	r3, [r4, #0]
 800cee2:	07da      	lsls	r2, r3, #31
 800cee4:	d438      	bmi.n	800cf58 <_printf_float+0x398>
 800cee6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ceea:	eba2 0903 	sub.w	r9, r2, r3
 800ceee:	9b05      	ldr	r3, [sp, #20]
 800cef0:	1ad2      	subs	r2, r2, r3
 800cef2:	4591      	cmp	r9, r2
 800cef4:	bfa8      	it	ge
 800cef6:	4691      	movge	r9, r2
 800cef8:	f1b9 0f00 	cmp.w	r9, #0
 800cefc:	dc35      	bgt.n	800cf6a <_printf_float+0x3aa>
 800cefe:	f04f 0800 	mov.w	r8, #0
 800cf02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf06:	f104 0a1a 	add.w	sl, r4, #26
 800cf0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cf0e:	1a9b      	subs	r3, r3, r2
 800cf10:	eba3 0309 	sub.w	r3, r3, r9
 800cf14:	4543      	cmp	r3, r8
 800cf16:	f77f af79 	ble.w	800ce0c <_printf_float+0x24c>
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	4652      	mov	r2, sl
 800cf1e:	4631      	mov	r1, r6
 800cf20:	4628      	mov	r0, r5
 800cf22:	47b8      	blx	r7
 800cf24:	3001      	adds	r0, #1
 800cf26:	f43f aeaa 	beq.w	800cc7e <_printf_float+0xbe>
 800cf2a:	f108 0801 	add.w	r8, r8, #1
 800cf2e:	e7ec      	b.n	800cf0a <_printf_float+0x34a>
 800cf30:	4613      	mov	r3, r2
 800cf32:	4631      	mov	r1, r6
 800cf34:	4642      	mov	r2, r8
 800cf36:	4628      	mov	r0, r5
 800cf38:	47b8      	blx	r7
 800cf3a:	3001      	adds	r0, #1
 800cf3c:	d1c0      	bne.n	800cec0 <_printf_float+0x300>
 800cf3e:	e69e      	b.n	800cc7e <_printf_float+0xbe>
 800cf40:	2301      	movs	r3, #1
 800cf42:	4631      	mov	r1, r6
 800cf44:	4628      	mov	r0, r5
 800cf46:	9205      	str	r2, [sp, #20]
 800cf48:	47b8      	blx	r7
 800cf4a:	3001      	adds	r0, #1
 800cf4c:	f43f ae97 	beq.w	800cc7e <_printf_float+0xbe>
 800cf50:	9a05      	ldr	r2, [sp, #20]
 800cf52:	f10b 0b01 	add.w	fp, fp, #1
 800cf56:	e7b9      	b.n	800cecc <_printf_float+0x30c>
 800cf58:	ee18 3a10 	vmov	r3, s16
 800cf5c:	4652      	mov	r2, sl
 800cf5e:	4631      	mov	r1, r6
 800cf60:	4628      	mov	r0, r5
 800cf62:	47b8      	blx	r7
 800cf64:	3001      	adds	r0, #1
 800cf66:	d1be      	bne.n	800cee6 <_printf_float+0x326>
 800cf68:	e689      	b.n	800cc7e <_printf_float+0xbe>
 800cf6a:	9a05      	ldr	r2, [sp, #20]
 800cf6c:	464b      	mov	r3, r9
 800cf6e:	4442      	add	r2, r8
 800cf70:	4631      	mov	r1, r6
 800cf72:	4628      	mov	r0, r5
 800cf74:	47b8      	blx	r7
 800cf76:	3001      	adds	r0, #1
 800cf78:	d1c1      	bne.n	800cefe <_printf_float+0x33e>
 800cf7a:	e680      	b.n	800cc7e <_printf_float+0xbe>
 800cf7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf7e:	2a01      	cmp	r2, #1
 800cf80:	dc01      	bgt.n	800cf86 <_printf_float+0x3c6>
 800cf82:	07db      	lsls	r3, r3, #31
 800cf84:	d53a      	bpl.n	800cffc <_printf_float+0x43c>
 800cf86:	2301      	movs	r3, #1
 800cf88:	4642      	mov	r2, r8
 800cf8a:	4631      	mov	r1, r6
 800cf8c:	4628      	mov	r0, r5
 800cf8e:	47b8      	blx	r7
 800cf90:	3001      	adds	r0, #1
 800cf92:	f43f ae74 	beq.w	800cc7e <_printf_float+0xbe>
 800cf96:	ee18 3a10 	vmov	r3, s16
 800cf9a:	4652      	mov	r2, sl
 800cf9c:	4631      	mov	r1, r6
 800cf9e:	4628      	mov	r0, r5
 800cfa0:	47b8      	blx	r7
 800cfa2:	3001      	adds	r0, #1
 800cfa4:	f43f ae6b 	beq.w	800cc7e <_printf_float+0xbe>
 800cfa8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cfac:	2200      	movs	r2, #0
 800cfae:	2300      	movs	r3, #0
 800cfb0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800cfb4:	f7f3 fd70 	bl	8000a98 <__aeabi_dcmpeq>
 800cfb8:	b9d8      	cbnz	r0, 800cff2 <_printf_float+0x432>
 800cfba:	f10a 33ff 	add.w	r3, sl, #4294967295
 800cfbe:	f108 0201 	add.w	r2, r8, #1
 800cfc2:	4631      	mov	r1, r6
 800cfc4:	4628      	mov	r0, r5
 800cfc6:	47b8      	blx	r7
 800cfc8:	3001      	adds	r0, #1
 800cfca:	d10e      	bne.n	800cfea <_printf_float+0x42a>
 800cfcc:	e657      	b.n	800cc7e <_printf_float+0xbe>
 800cfce:	2301      	movs	r3, #1
 800cfd0:	4652      	mov	r2, sl
 800cfd2:	4631      	mov	r1, r6
 800cfd4:	4628      	mov	r0, r5
 800cfd6:	47b8      	blx	r7
 800cfd8:	3001      	adds	r0, #1
 800cfda:	f43f ae50 	beq.w	800cc7e <_printf_float+0xbe>
 800cfde:	f108 0801 	add.w	r8, r8, #1
 800cfe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfe4:	3b01      	subs	r3, #1
 800cfe6:	4543      	cmp	r3, r8
 800cfe8:	dcf1      	bgt.n	800cfce <_printf_float+0x40e>
 800cfea:	464b      	mov	r3, r9
 800cfec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cff0:	e6da      	b.n	800cda8 <_printf_float+0x1e8>
 800cff2:	f04f 0800 	mov.w	r8, #0
 800cff6:	f104 0a1a 	add.w	sl, r4, #26
 800cffa:	e7f2      	b.n	800cfe2 <_printf_float+0x422>
 800cffc:	2301      	movs	r3, #1
 800cffe:	4642      	mov	r2, r8
 800d000:	e7df      	b.n	800cfc2 <_printf_float+0x402>
 800d002:	2301      	movs	r3, #1
 800d004:	464a      	mov	r2, r9
 800d006:	4631      	mov	r1, r6
 800d008:	4628      	mov	r0, r5
 800d00a:	47b8      	blx	r7
 800d00c:	3001      	adds	r0, #1
 800d00e:	f43f ae36 	beq.w	800cc7e <_printf_float+0xbe>
 800d012:	f108 0801 	add.w	r8, r8, #1
 800d016:	68e3      	ldr	r3, [r4, #12]
 800d018:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d01a:	1a5b      	subs	r3, r3, r1
 800d01c:	4543      	cmp	r3, r8
 800d01e:	dcf0      	bgt.n	800d002 <_printf_float+0x442>
 800d020:	e6f8      	b.n	800ce14 <_printf_float+0x254>
 800d022:	f04f 0800 	mov.w	r8, #0
 800d026:	f104 0919 	add.w	r9, r4, #25
 800d02a:	e7f4      	b.n	800d016 <_printf_float+0x456>

0800d02c <_printf_common>:
 800d02c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d030:	4616      	mov	r6, r2
 800d032:	4699      	mov	r9, r3
 800d034:	688a      	ldr	r2, [r1, #8]
 800d036:	690b      	ldr	r3, [r1, #16]
 800d038:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d03c:	4293      	cmp	r3, r2
 800d03e:	bfb8      	it	lt
 800d040:	4613      	movlt	r3, r2
 800d042:	6033      	str	r3, [r6, #0]
 800d044:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d048:	4607      	mov	r7, r0
 800d04a:	460c      	mov	r4, r1
 800d04c:	b10a      	cbz	r2, 800d052 <_printf_common+0x26>
 800d04e:	3301      	adds	r3, #1
 800d050:	6033      	str	r3, [r6, #0]
 800d052:	6823      	ldr	r3, [r4, #0]
 800d054:	0699      	lsls	r1, r3, #26
 800d056:	bf42      	ittt	mi
 800d058:	6833      	ldrmi	r3, [r6, #0]
 800d05a:	3302      	addmi	r3, #2
 800d05c:	6033      	strmi	r3, [r6, #0]
 800d05e:	6825      	ldr	r5, [r4, #0]
 800d060:	f015 0506 	ands.w	r5, r5, #6
 800d064:	d106      	bne.n	800d074 <_printf_common+0x48>
 800d066:	f104 0a19 	add.w	sl, r4, #25
 800d06a:	68e3      	ldr	r3, [r4, #12]
 800d06c:	6832      	ldr	r2, [r6, #0]
 800d06e:	1a9b      	subs	r3, r3, r2
 800d070:	42ab      	cmp	r3, r5
 800d072:	dc26      	bgt.n	800d0c2 <_printf_common+0x96>
 800d074:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d078:	1e13      	subs	r3, r2, #0
 800d07a:	6822      	ldr	r2, [r4, #0]
 800d07c:	bf18      	it	ne
 800d07e:	2301      	movne	r3, #1
 800d080:	0692      	lsls	r2, r2, #26
 800d082:	d42b      	bmi.n	800d0dc <_printf_common+0xb0>
 800d084:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d088:	4649      	mov	r1, r9
 800d08a:	4638      	mov	r0, r7
 800d08c:	47c0      	blx	r8
 800d08e:	3001      	adds	r0, #1
 800d090:	d01e      	beq.n	800d0d0 <_printf_common+0xa4>
 800d092:	6823      	ldr	r3, [r4, #0]
 800d094:	6922      	ldr	r2, [r4, #16]
 800d096:	f003 0306 	and.w	r3, r3, #6
 800d09a:	2b04      	cmp	r3, #4
 800d09c:	bf02      	ittt	eq
 800d09e:	68e5      	ldreq	r5, [r4, #12]
 800d0a0:	6833      	ldreq	r3, [r6, #0]
 800d0a2:	1aed      	subeq	r5, r5, r3
 800d0a4:	68a3      	ldr	r3, [r4, #8]
 800d0a6:	bf0c      	ite	eq
 800d0a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d0ac:	2500      	movne	r5, #0
 800d0ae:	4293      	cmp	r3, r2
 800d0b0:	bfc4      	itt	gt
 800d0b2:	1a9b      	subgt	r3, r3, r2
 800d0b4:	18ed      	addgt	r5, r5, r3
 800d0b6:	2600      	movs	r6, #0
 800d0b8:	341a      	adds	r4, #26
 800d0ba:	42b5      	cmp	r5, r6
 800d0bc:	d11a      	bne.n	800d0f4 <_printf_common+0xc8>
 800d0be:	2000      	movs	r0, #0
 800d0c0:	e008      	b.n	800d0d4 <_printf_common+0xa8>
 800d0c2:	2301      	movs	r3, #1
 800d0c4:	4652      	mov	r2, sl
 800d0c6:	4649      	mov	r1, r9
 800d0c8:	4638      	mov	r0, r7
 800d0ca:	47c0      	blx	r8
 800d0cc:	3001      	adds	r0, #1
 800d0ce:	d103      	bne.n	800d0d8 <_printf_common+0xac>
 800d0d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d0d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0d8:	3501      	adds	r5, #1
 800d0da:	e7c6      	b.n	800d06a <_printf_common+0x3e>
 800d0dc:	18e1      	adds	r1, r4, r3
 800d0de:	1c5a      	adds	r2, r3, #1
 800d0e0:	2030      	movs	r0, #48	; 0x30
 800d0e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d0e6:	4422      	add	r2, r4
 800d0e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d0ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d0f0:	3302      	adds	r3, #2
 800d0f2:	e7c7      	b.n	800d084 <_printf_common+0x58>
 800d0f4:	2301      	movs	r3, #1
 800d0f6:	4622      	mov	r2, r4
 800d0f8:	4649      	mov	r1, r9
 800d0fa:	4638      	mov	r0, r7
 800d0fc:	47c0      	blx	r8
 800d0fe:	3001      	adds	r0, #1
 800d100:	d0e6      	beq.n	800d0d0 <_printf_common+0xa4>
 800d102:	3601      	adds	r6, #1
 800d104:	e7d9      	b.n	800d0ba <_printf_common+0x8e>
	...

0800d108 <_printf_i>:
 800d108:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d10c:	7e0f      	ldrb	r7, [r1, #24]
 800d10e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d110:	2f78      	cmp	r7, #120	; 0x78
 800d112:	4691      	mov	r9, r2
 800d114:	4680      	mov	r8, r0
 800d116:	460c      	mov	r4, r1
 800d118:	469a      	mov	sl, r3
 800d11a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d11e:	d807      	bhi.n	800d130 <_printf_i+0x28>
 800d120:	2f62      	cmp	r7, #98	; 0x62
 800d122:	d80a      	bhi.n	800d13a <_printf_i+0x32>
 800d124:	2f00      	cmp	r7, #0
 800d126:	f000 80d4 	beq.w	800d2d2 <_printf_i+0x1ca>
 800d12a:	2f58      	cmp	r7, #88	; 0x58
 800d12c:	f000 80c0 	beq.w	800d2b0 <_printf_i+0x1a8>
 800d130:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d134:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d138:	e03a      	b.n	800d1b0 <_printf_i+0xa8>
 800d13a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d13e:	2b15      	cmp	r3, #21
 800d140:	d8f6      	bhi.n	800d130 <_printf_i+0x28>
 800d142:	a101      	add	r1, pc, #4	; (adr r1, 800d148 <_printf_i+0x40>)
 800d144:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d148:	0800d1a1 	.word	0x0800d1a1
 800d14c:	0800d1b5 	.word	0x0800d1b5
 800d150:	0800d131 	.word	0x0800d131
 800d154:	0800d131 	.word	0x0800d131
 800d158:	0800d131 	.word	0x0800d131
 800d15c:	0800d131 	.word	0x0800d131
 800d160:	0800d1b5 	.word	0x0800d1b5
 800d164:	0800d131 	.word	0x0800d131
 800d168:	0800d131 	.word	0x0800d131
 800d16c:	0800d131 	.word	0x0800d131
 800d170:	0800d131 	.word	0x0800d131
 800d174:	0800d2b9 	.word	0x0800d2b9
 800d178:	0800d1e1 	.word	0x0800d1e1
 800d17c:	0800d273 	.word	0x0800d273
 800d180:	0800d131 	.word	0x0800d131
 800d184:	0800d131 	.word	0x0800d131
 800d188:	0800d2db 	.word	0x0800d2db
 800d18c:	0800d131 	.word	0x0800d131
 800d190:	0800d1e1 	.word	0x0800d1e1
 800d194:	0800d131 	.word	0x0800d131
 800d198:	0800d131 	.word	0x0800d131
 800d19c:	0800d27b 	.word	0x0800d27b
 800d1a0:	682b      	ldr	r3, [r5, #0]
 800d1a2:	1d1a      	adds	r2, r3, #4
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	602a      	str	r2, [r5, #0]
 800d1a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d1ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d1b0:	2301      	movs	r3, #1
 800d1b2:	e09f      	b.n	800d2f4 <_printf_i+0x1ec>
 800d1b4:	6820      	ldr	r0, [r4, #0]
 800d1b6:	682b      	ldr	r3, [r5, #0]
 800d1b8:	0607      	lsls	r7, r0, #24
 800d1ba:	f103 0104 	add.w	r1, r3, #4
 800d1be:	6029      	str	r1, [r5, #0]
 800d1c0:	d501      	bpl.n	800d1c6 <_printf_i+0xbe>
 800d1c2:	681e      	ldr	r6, [r3, #0]
 800d1c4:	e003      	b.n	800d1ce <_printf_i+0xc6>
 800d1c6:	0646      	lsls	r6, r0, #25
 800d1c8:	d5fb      	bpl.n	800d1c2 <_printf_i+0xba>
 800d1ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d1ce:	2e00      	cmp	r6, #0
 800d1d0:	da03      	bge.n	800d1da <_printf_i+0xd2>
 800d1d2:	232d      	movs	r3, #45	; 0x2d
 800d1d4:	4276      	negs	r6, r6
 800d1d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d1da:	485a      	ldr	r0, [pc, #360]	; (800d344 <_printf_i+0x23c>)
 800d1dc:	230a      	movs	r3, #10
 800d1de:	e012      	b.n	800d206 <_printf_i+0xfe>
 800d1e0:	682b      	ldr	r3, [r5, #0]
 800d1e2:	6820      	ldr	r0, [r4, #0]
 800d1e4:	1d19      	adds	r1, r3, #4
 800d1e6:	6029      	str	r1, [r5, #0]
 800d1e8:	0605      	lsls	r5, r0, #24
 800d1ea:	d501      	bpl.n	800d1f0 <_printf_i+0xe8>
 800d1ec:	681e      	ldr	r6, [r3, #0]
 800d1ee:	e002      	b.n	800d1f6 <_printf_i+0xee>
 800d1f0:	0641      	lsls	r1, r0, #25
 800d1f2:	d5fb      	bpl.n	800d1ec <_printf_i+0xe4>
 800d1f4:	881e      	ldrh	r6, [r3, #0]
 800d1f6:	4853      	ldr	r0, [pc, #332]	; (800d344 <_printf_i+0x23c>)
 800d1f8:	2f6f      	cmp	r7, #111	; 0x6f
 800d1fa:	bf0c      	ite	eq
 800d1fc:	2308      	moveq	r3, #8
 800d1fe:	230a      	movne	r3, #10
 800d200:	2100      	movs	r1, #0
 800d202:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d206:	6865      	ldr	r5, [r4, #4]
 800d208:	60a5      	str	r5, [r4, #8]
 800d20a:	2d00      	cmp	r5, #0
 800d20c:	bfa2      	ittt	ge
 800d20e:	6821      	ldrge	r1, [r4, #0]
 800d210:	f021 0104 	bicge.w	r1, r1, #4
 800d214:	6021      	strge	r1, [r4, #0]
 800d216:	b90e      	cbnz	r6, 800d21c <_printf_i+0x114>
 800d218:	2d00      	cmp	r5, #0
 800d21a:	d04b      	beq.n	800d2b4 <_printf_i+0x1ac>
 800d21c:	4615      	mov	r5, r2
 800d21e:	fbb6 f1f3 	udiv	r1, r6, r3
 800d222:	fb03 6711 	mls	r7, r3, r1, r6
 800d226:	5dc7      	ldrb	r7, [r0, r7]
 800d228:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d22c:	4637      	mov	r7, r6
 800d22e:	42bb      	cmp	r3, r7
 800d230:	460e      	mov	r6, r1
 800d232:	d9f4      	bls.n	800d21e <_printf_i+0x116>
 800d234:	2b08      	cmp	r3, #8
 800d236:	d10b      	bne.n	800d250 <_printf_i+0x148>
 800d238:	6823      	ldr	r3, [r4, #0]
 800d23a:	07de      	lsls	r6, r3, #31
 800d23c:	d508      	bpl.n	800d250 <_printf_i+0x148>
 800d23e:	6923      	ldr	r3, [r4, #16]
 800d240:	6861      	ldr	r1, [r4, #4]
 800d242:	4299      	cmp	r1, r3
 800d244:	bfde      	ittt	le
 800d246:	2330      	movle	r3, #48	; 0x30
 800d248:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d24c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d250:	1b52      	subs	r2, r2, r5
 800d252:	6122      	str	r2, [r4, #16]
 800d254:	f8cd a000 	str.w	sl, [sp]
 800d258:	464b      	mov	r3, r9
 800d25a:	aa03      	add	r2, sp, #12
 800d25c:	4621      	mov	r1, r4
 800d25e:	4640      	mov	r0, r8
 800d260:	f7ff fee4 	bl	800d02c <_printf_common>
 800d264:	3001      	adds	r0, #1
 800d266:	d14a      	bne.n	800d2fe <_printf_i+0x1f6>
 800d268:	f04f 30ff 	mov.w	r0, #4294967295
 800d26c:	b004      	add	sp, #16
 800d26e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d272:	6823      	ldr	r3, [r4, #0]
 800d274:	f043 0320 	orr.w	r3, r3, #32
 800d278:	6023      	str	r3, [r4, #0]
 800d27a:	4833      	ldr	r0, [pc, #204]	; (800d348 <_printf_i+0x240>)
 800d27c:	2778      	movs	r7, #120	; 0x78
 800d27e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d282:	6823      	ldr	r3, [r4, #0]
 800d284:	6829      	ldr	r1, [r5, #0]
 800d286:	061f      	lsls	r7, r3, #24
 800d288:	f851 6b04 	ldr.w	r6, [r1], #4
 800d28c:	d402      	bmi.n	800d294 <_printf_i+0x18c>
 800d28e:	065f      	lsls	r7, r3, #25
 800d290:	bf48      	it	mi
 800d292:	b2b6      	uxthmi	r6, r6
 800d294:	07df      	lsls	r7, r3, #31
 800d296:	bf48      	it	mi
 800d298:	f043 0320 	orrmi.w	r3, r3, #32
 800d29c:	6029      	str	r1, [r5, #0]
 800d29e:	bf48      	it	mi
 800d2a0:	6023      	strmi	r3, [r4, #0]
 800d2a2:	b91e      	cbnz	r6, 800d2ac <_printf_i+0x1a4>
 800d2a4:	6823      	ldr	r3, [r4, #0]
 800d2a6:	f023 0320 	bic.w	r3, r3, #32
 800d2aa:	6023      	str	r3, [r4, #0]
 800d2ac:	2310      	movs	r3, #16
 800d2ae:	e7a7      	b.n	800d200 <_printf_i+0xf8>
 800d2b0:	4824      	ldr	r0, [pc, #144]	; (800d344 <_printf_i+0x23c>)
 800d2b2:	e7e4      	b.n	800d27e <_printf_i+0x176>
 800d2b4:	4615      	mov	r5, r2
 800d2b6:	e7bd      	b.n	800d234 <_printf_i+0x12c>
 800d2b8:	682b      	ldr	r3, [r5, #0]
 800d2ba:	6826      	ldr	r6, [r4, #0]
 800d2bc:	6961      	ldr	r1, [r4, #20]
 800d2be:	1d18      	adds	r0, r3, #4
 800d2c0:	6028      	str	r0, [r5, #0]
 800d2c2:	0635      	lsls	r5, r6, #24
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	d501      	bpl.n	800d2cc <_printf_i+0x1c4>
 800d2c8:	6019      	str	r1, [r3, #0]
 800d2ca:	e002      	b.n	800d2d2 <_printf_i+0x1ca>
 800d2cc:	0670      	lsls	r0, r6, #25
 800d2ce:	d5fb      	bpl.n	800d2c8 <_printf_i+0x1c0>
 800d2d0:	8019      	strh	r1, [r3, #0]
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	6123      	str	r3, [r4, #16]
 800d2d6:	4615      	mov	r5, r2
 800d2d8:	e7bc      	b.n	800d254 <_printf_i+0x14c>
 800d2da:	682b      	ldr	r3, [r5, #0]
 800d2dc:	1d1a      	adds	r2, r3, #4
 800d2de:	602a      	str	r2, [r5, #0]
 800d2e0:	681d      	ldr	r5, [r3, #0]
 800d2e2:	6862      	ldr	r2, [r4, #4]
 800d2e4:	2100      	movs	r1, #0
 800d2e6:	4628      	mov	r0, r5
 800d2e8:	f7f2 ff5a 	bl	80001a0 <memchr>
 800d2ec:	b108      	cbz	r0, 800d2f2 <_printf_i+0x1ea>
 800d2ee:	1b40      	subs	r0, r0, r5
 800d2f0:	6060      	str	r0, [r4, #4]
 800d2f2:	6863      	ldr	r3, [r4, #4]
 800d2f4:	6123      	str	r3, [r4, #16]
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d2fc:	e7aa      	b.n	800d254 <_printf_i+0x14c>
 800d2fe:	6923      	ldr	r3, [r4, #16]
 800d300:	462a      	mov	r2, r5
 800d302:	4649      	mov	r1, r9
 800d304:	4640      	mov	r0, r8
 800d306:	47d0      	blx	sl
 800d308:	3001      	adds	r0, #1
 800d30a:	d0ad      	beq.n	800d268 <_printf_i+0x160>
 800d30c:	6823      	ldr	r3, [r4, #0]
 800d30e:	079b      	lsls	r3, r3, #30
 800d310:	d413      	bmi.n	800d33a <_printf_i+0x232>
 800d312:	68e0      	ldr	r0, [r4, #12]
 800d314:	9b03      	ldr	r3, [sp, #12]
 800d316:	4298      	cmp	r0, r3
 800d318:	bfb8      	it	lt
 800d31a:	4618      	movlt	r0, r3
 800d31c:	e7a6      	b.n	800d26c <_printf_i+0x164>
 800d31e:	2301      	movs	r3, #1
 800d320:	4632      	mov	r2, r6
 800d322:	4649      	mov	r1, r9
 800d324:	4640      	mov	r0, r8
 800d326:	47d0      	blx	sl
 800d328:	3001      	adds	r0, #1
 800d32a:	d09d      	beq.n	800d268 <_printf_i+0x160>
 800d32c:	3501      	adds	r5, #1
 800d32e:	68e3      	ldr	r3, [r4, #12]
 800d330:	9903      	ldr	r1, [sp, #12]
 800d332:	1a5b      	subs	r3, r3, r1
 800d334:	42ab      	cmp	r3, r5
 800d336:	dcf2      	bgt.n	800d31e <_printf_i+0x216>
 800d338:	e7eb      	b.n	800d312 <_printf_i+0x20a>
 800d33a:	2500      	movs	r5, #0
 800d33c:	f104 0619 	add.w	r6, r4, #25
 800d340:	e7f5      	b.n	800d32e <_printf_i+0x226>
 800d342:	bf00      	nop
 800d344:	08010c96 	.word	0x08010c96
 800d348:	08010ca7 	.word	0x08010ca7

0800d34c <std>:
 800d34c:	2300      	movs	r3, #0
 800d34e:	b510      	push	{r4, lr}
 800d350:	4604      	mov	r4, r0
 800d352:	e9c0 3300 	strd	r3, r3, [r0]
 800d356:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d35a:	6083      	str	r3, [r0, #8]
 800d35c:	8181      	strh	r1, [r0, #12]
 800d35e:	6643      	str	r3, [r0, #100]	; 0x64
 800d360:	81c2      	strh	r2, [r0, #14]
 800d362:	6183      	str	r3, [r0, #24]
 800d364:	4619      	mov	r1, r3
 800d366:	2208      	movs	r2, #8
 800d368:	305c      	adds	r0, #92	; 0x5c
 800d36a:	f000 f9ff 	bl	800d76c <memset>
 800d36e:	4b0d      	ldr	r3, [pc, #52]	; (800d3a4 <std+0x58>)
 800d370:	6263      	str	r3, [r4, #36]	; 0x24
 800d372:	4b0d      	ldr	r3, [pc, #52]	; (800d3a8 <std+0x5c>)
 800d374:	62a3      	str	r3, [r4, #40]	; 0x28
 800d376:	4b0d      	ldr	r3, [pc, #52]	; (800d3ac <std+0x60>)
 800d378:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d37a:	4b0d      	ldr	r3, [pc, #52]	; (800d3b0 <std+0x64>)
 800d37c:	6323      	str	r3, [r4, #48]	; 0x30
 800d37e:	4b0d      	ldr	r3, [pc, #52]	; (800d3b4 <std+0x68>)
 800d380:	6224      	str	r4, [r4, #32]
 800d382:	429c      	cmp	r4, r3
 800d384:	d006      	beq.n	800d394 <std+0x48>
 800d386:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d38a:	4294      	cmp	r4, r2
 800d38c:	d002      	beq.n	800d394 <std+0x48>
 800d38e:	33d0      	adds	r3, #208	; 0xd0
 800d390:	429c      	cmp	r4, r3
 800d392:	d105      	bne.n	800d3a0 <std+0x54>
 800d394:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d39c:	f000 ba62 	b.w	800d864 <__retarget_lock_init_recursive>
 800d3a0:	bd10      	pop	{r4, pc}
 800d3a2:	bf00      	nop
 800d3a4:	0800d5bd 	.word	0x0800d5bd
 800d3a8:	0800d5df 	.word	0x0800d5df
 800d3ac:	0800d617 	.word	0x0800d617
 800d3b0:	0800d63b 	.word	0x0800d63b
 800d3b4:	200017a8 	.word	0x200017a8

0800d3b8 <stdio_exit_handler>:
 800d3b8:	4a02      	ldr	r2, [pc, #8]	; (800d3c4 <stdio_exit_handler+0xc>)
 800d3ba:	4903      	ldr	r1, [pc, #12]	; (800d3c8 <stdio_exit_handler+0x10>)
 800d3bc:	4803      	ldr	r0, [pc, #12]	; (800d3cc <stdio_exit_handler+0x14>)
 800d3be:	f000 b869 	b.w	800d494 <_fwalk_sglue>
 800d3c2:	bf00      	nop
 800d3c4:	20000064 	.word	0x20000064
 800d3c8:	0800f209 	.word	0x0800f209
 800d3cc:	20000070 	.word	0x20000070

0800d3d0 <cleanup_stdio>:
 800d3d0:	6841      	ldr	r1, [r0, #4]
 800d3d2:	4b0c      	ldr	r3, [pc, #48]	; (800d404 <cleanup_stdio+0x34>)
 800d3d4:	4299      	cmp	r1, r3
 800d3d6:	b510      	push	{r4, lr}
 800d3d8:	4604      	mov	r4, r0
 800d3da:	d001      	beq.n	800d3e0 <cleanup_stdio+0x10>
 800d3dc:	f001 ff14 	bl	800f208 <_fflush_r>
 800d3e0:	68a1      	ldr	r1, [r4, #8]
 800d3e2:	4b09      	ldr	r3, [pc, #36]	; (800d408 <cleanup_stdio+0x38>)
 800d3e4:	4299      	cmp	r1, r3
 800d3e6:	d002      	beq.n	800d3ee <cleanup_stdio+0x1e>
 800d3e8:	4620      	mov	r0, r4
 800d3ea:	f001 ff0d 	bl	800f208 <_fflush_r>
 800d3ee:	68e1      	ldr	r1, [r4, #12]
 800d3f0:	4b06      	ldr	r3, [pc, #24]	; (800d40c <cleanup_stdio+0x3c>)
 800d3f2:	4299      	cmp	r1, r3
 800d3f4:	d004      	beq.n	800d400 <cleanup_stdio+0x30>
 800d3f6:	4620      	mov	r0, r4
 800d3f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3fc:	f001 bf04 	b.w	800f208 <_fflush_r>
 800d400:	bd10      	pop	{r4, pc}
 800d402:	bf00      	nop
 800d404:	200017a8 	.word	0x200017a8
 800d408:	20001810 	.word	0x20001810
 800d40c:	20001878 	.word	0x20001878

0800d410 <global_stdio_init.part.0>:
 800d410:	b510      	push	{r4, lr}
 800d412:	4b0b      	ldr	r3, [pc, #44]	; (800d440 <global_stdio_init.part.0+0x30>)
 800d414:	4c0b      	ldr	r4, [pc, #44]	; (800d444 <global_stdio_init.part.0+0x34>)
 800d416:	4a0c      	ldr	r2, [pc, #48]	; (800d448 <global_stdio_init.part.0+0x38>)
 800d418:	601a      	str	r2, [r3, #0]
 800d41a:	4620      	mov	r0, r4
 800d41c:	2200      	movs	r2, #0
 800d41e:	2104      	movs	r1, #4
 800d420:	f7ff ff94 	bl	800d34c <std>
 800d424:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d428:	2201      	movs	r2, #1
 800d42a:	2109      	movs	r1, #9
 800d42c:	f7ff ff8e 	bl	800d34c <std>
 800d430:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d434:	2202      	movs	r2, #2
 800d436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d43a:	2112      	movs	r1, #18
 800d43c:	f7ff bf86 	b.w	800d34c <std>
 800d440:	200018e0 	.word	0x200018e0
 800d444:	200017a8 	.word	0x200017a8
 800d448:	0800d3b9 	.word	0x0800d3b9

0800d44c <__sfp_lock_acquire>:
 800d44c:	4801      	ldr	r0, [pc, #4]	; (800d454 <__sfp_lock_acquire+0x8>)
 800d44e:	f000 ba0a 	b.w	800d866 <__retarget_lock_acquire_recursive>
 800d452:	bf00      	nop
 800d454:	200018e9 	.word	0x200018e9

0800d458 <__sfp_lock_release>:
 800d458:	4801      	ldr	r0, [pc, #4]	; (800d460 <__sfp_lock_release+0x8>)
 800d45a:	f000 ba05 	b.w	800d868 <__retarget_lock_release_recursive>
 800d45e:	bf00      	nop
 800d460:	200018e9 	.word	0x200018e9

0800d464 <__sinit>:
 800d464:	b510      	push	{r4, lr}
 800d466:	4604      	mov	r4, r0
 800d468:	f7ff fff0 	bl	800d44c <__sfp_lock_acquire>
 800d46c:	6a23      	ldr	r3, [r4, #32]
 800d46e:	b11b      	cbz	r3, 800d478 <__sinit+0x14>
 800d470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d474:	f7ff bff0 	b.w	800d458 <__sfp_lock_release>
 800d478:	4b04      	ldr	r3, [pc, #16]	; (800d48c <__sinit+0x28>)
 800d47a:	6223      	str	r3, [r4, #32]
 800d47c:	4b04      	ldr	r3, [pc, #16]	; (800d490 <__sinit+0x2c>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d1f5      	bne.n	800d470 <__sinit+0xc>
 800d484:	f7ff ffc4 	bl	800d410 <global_stdio_init.part.0>
 800d488:	e7f2      	b.n	800d470 <__sinit+0xc>
 800d48a:	bf00      	nop
 800d48c:	0800d3d1 	.word	0x0800d3d1
 800d490:	200018e0 	.word	0x200018e0

0800d494 <_fwalk_sglue>:
 800d494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d498:	4607      	mov	r7, r0
 800d49a:	4688      	mov	r8, r1
 800d49c:	4614      	mov	r4, r2
 800d49e:	2600      	movs	r6, #0
 800d4a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d4a4:	f1b9 0901 	subs.w	r9, r9, #1
 800d4a8:	d505      	bpl.n	800d4b6 <_fwalk_sglue+0x22>
 800d4aa:	6824      	ldr	r4, [r4, #0]
 800d4ac:	2c00      	cmp	r4, #0
 800d4ae:	d1f7      	bne.n	800d4a0 <_fwalk_sglue+0xc>
 800d4b0:	4630      	mov	r0, r6
 800d4b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4b6:	89ab      	ldrh	r3, [r5, #12]
 800d4b8:	2b01      	cmp	r3, #1
 800d4ba:	d907      	bls.n	800d4cc <_fwalk_sglue+0x38>
 800d4bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d4c0:	3301      	adds	r3, #1
 800d4c2:	d003      	beq.n	800d4cc <_fwalk_sglue+0x38>
 800d4c4:	4629      	mov	r1, r5
 800d4c6:	4638      	mov	r0, r7
 800d4c8:	47c0      	blx	r8
 800d4ca:	4306      	orrs	r6, r0
 800d4cc:	3568      	adds	r5, #104	; 0x68
 800d4ce:	e7e9      	b.n	800d4a4 <_fwalk_sglue+0x10>

0800d4d0 <iprintf>:
 800d4d0:	b40f      	push	{r0, r1, r2, r3}
 800d4d2:	b507      	push	{r0, r1, r2, lr}
 800d4d4:	4906      	ldr	r1, [pc, #24]	; (800d4f0 <iprintf+0x20>)
 800d4d6:	ab04      	add	r3, sp, #16
 800d4d8:	6808      	ldr	r0, [r1, #0]
 800d4da:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4de:	6881      	ldr	r1, [r0, #8]
 800d4e0:	9301      	str	r3, [sp, #4]
 800d4e2:	f001 fcf1 	bl	800eec8 <_vfiprintf_r>
 800d4e6:	b003      	add	sp, #12
 800d4e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d4ec:	b004      	add	sp, #16
 800d4ee:	4770      	bx	lr
 800d4f0:	200000bc 	.word	0x200000bc

0800d4f4 <putchar>:
 800d4f4:	4b02      	ldr	r3, [pc, #8]	; (800d500 <putchar+0xc>)
 800d4f6:	4601      	mov	r1, r0
 800d4f8:	6818      	ldr	r0, [r3, #0]
 800d4fa:	6882      	ldr	r2, [r0, #8]
 800d4fc:	f001 bf0e 	b.w	800f31c <_putc_r>
 800d500:	200000bc 	.word	0x200000bc

0800d504 <_puts_r>:
 800d504:	6a03      	ldr	r3, [r0, #32]
 800d506:	b570      	push	{r4, r5, r6, lr}
 800d508:	6884      	ldr	r4, [r0, #8]
 800d50a:	4605      	mov	r5, r0
 800d50c:	460e      	mov	r6, r1
 800d50e:	b90b      	cbnz	r3, 800d514 <_puts_r+0x10>
 800d510:	f7ff ffa8 	bl	800d464 <__sinit>
 800d514:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d516:	07db      	lsls	r3, r3, #31
 800d518:	d405      	bmi.n	800d526 <_puts_r+0x22>
 800d51a:	89a3      	ldrh	r3, [r4, #12]
 800d51c:	0598      	lsls	r0, r3, #22
 800d51e:	d402      	bmi.n	800d526 <_puts_r+0x22>
 800d520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d522:	f000 f9a0 	bl	800d866 <__retarget_lock_acquire_recursive>
 800d526:	89a3      	ldrh	r3, [r4, #12]
 800d528:	0719      	lsls	r1, r3, #28
 800d52a:	d513      	bpl.n	800d554 <_puts_r+0x50>
 800d52c:	6923      	ldr	r3, [r4, #16]
 800d52e:	b18b      	cbz	r3, 800d554 <_puts_r+0x50>
 800d530:	3e01      	subs	r6, #1
 800d532:	68a3      	ldr	r3, [r4, #8]
 800d534:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d538:	3b01      	subs	r3, #1
 800d53a:	60a3      	str	r3, [r4, #8]
 800d53c:	b9e9      	cbnz	r1, 800d57a <_puts_r+0x76>
 800d53e:	2b00      	cmp	r3, #0
 800d540:	da2e      	bge.n	800d5a0 <_puts_r+0x9c>
 800d542:	4622      	mov	r2, r4
 800d544:	210a      	movs	r1, #10
 800d546:	4628      	mov	r0, r5
 800d548:	f000 f87b 	bl	800d642 <__swbuf_r>
 800d54c:	3001      	adds	r0, #1
 800d54e:	d007      	beq.n	800d560 <_puts_r+0x5c>
 800d550:	250a      	movs	r5, #10
 800d552:	e007      	b.n	800d564 <_puts_r+0x60>
 800d554:	4621      	mov	r1, r4
 800d556:	4628      	mov	r0, r5
 800d558:	f000 f8b0 	bl	800d6bc <__swsetup_r>
 800d55c:	2800      	cmp	r0, #0
 800d55e:	d0e7      	beq.n	800d530 <_puts_r+0x2c>
 800d560:	f04f 35ff 	mov.w	r5, #4294967295
 800d564:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d566:	07da      	lsls	r2, r3, #31
 800d568:	d405      	bmi.n	800d576 <_puts_r+0x72>
 800d56a:	89a3      	ldrh	r3, [r4, #12]
 800d56c:	059b      	lsls	r3, r3, #22
 800d56e:	d402      	bmi.n	800d576 <_puts_r+0x72>
 800d570:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d572:	f000 f979 	bl	800d868 <__retarget_lock_release_recursive>
 800d576:	4628      	mov	r0, r5
 800d578:	bd70      	pop	{r4, r5, r6, pc}
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	da04      	bge.n	800d588 <_puts_r+0x84>
 800d57e:	69a2      	ldr	r2, [r4, #24]
 800d580:	429a      	cmp	r2, r3
 800d582:	dc06      	bgt.n	800d592 <_puts_r+0x8e>
 800d584:	290a      	cmp	r1, #10
 800d586:	d004      	beq.n	800d592 <_puts_r+0x8e>
 800d588:	6823      	ldr	r3, [r4, #0]
 800d58a:	1c5a      	adds	r2, r3, #1
 800d58c:	6022      	str	r2, [r4, #0]
 800d58e:	7019      	strb	r1, [r3, #0]
 800d590:	e7cf      	b.n	800d532 <_puts_r+0x2e>
 800d592:	4622      	mov	r2, r4
 800d594:	4628      	mov	r0, r5
 800d596:	f000 f854 	bl	800d642 <__swbuf_r>
 800d59a:	3001      	adds	r0, #1
 800d59c:	d1c9      	bne.n	800d532 <_puts_r+0x2e>
 800d59e:	e7df      	b.n	800d560 <_puts_r+0x5c>
 800d5a0:	6823      	ldr	r3, [r4, #0]
 800d5a2:	250a      	movs	r5, #10
 800d5a4:	1c5a      	adds	r2, r3, #1
 800d5a6:	6022      	str	r2, [r4, #0]
 800d5a8:	701d      	strb	r5, [r3, #0]
 800d5aa:	e7db      	b.n	800d564 <_puts_r+0x60>

0800d5ac <puts>:
 800d5ac:	4b02      	ldr	r3, [pc, #8]	; (800d5b8 <puts+0xc>)
 800d5ae:	4601      	mov	r1, r0
 800d5b0:	6818      	ldr	r0, [r3, #0]
 800d5b2:	f7ff bfa7 	b.w	800d504 <_puts_r>
 800d5b6:	bf00      	nop
 800d5b8:	200000bc 	.word	0x200000bc

0800d5bc <__sread>:
 800d5bc:	b510      	push	{r4, lr}
 800d5be:	460c      	mov	r4, r1
 800d5c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5c4:	f000 f900 	bl	800d7c8 <_read_r>
 800d5c8:	2800      	cmp	r0, #0
 800d5ca:	bfab      	itete	ge
 800d5cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d5ce:	89a3      	ldrhlt	r3, [r4, #12]
 800d5d0:	181b      	addge	r3, r3, r0
 800d5d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d5d6:	bfac      	ite	ge
 800d5d8:	6563      	strge	r3, [r4, #84]	; 0x54
 800d5da:	81a3      	strhlt	r3, [r4, #12]
 800d5dc:	bd10      	pop	{r4, pc}

0800d5de <__swrite>:
 800d5de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5e2:	461f      	mov	r7, r3
 800d5e4:	898b      	ldrh	r3, [r1, #12]
 800d5e6:	05db      	lsls	r3, r3, #23
 800d5e8:	4605      	mov	r5, r0
 800d5ea:	460c      	mov	r4, r1
 800d5ec:	4616      	mov	r6, r2
 800d5ee:	d505      	bpl.n	800d5fc <__swrite+0x1e>
 800d5f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5f4:	2302      	movs	r3, #2
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	f000 f8d4 	bl	800d7a4 <_lseek_r>
 800d5fc:	89a3      	ldrh	r3, [r4, #12]
 800d5fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d602:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d606:	81a3      	strh	r3, [r4, #12]
 800d608:	4632      	mov	r2, r6
 800d60a:	463b      	mov	r3, r7
 800d60c:	4628      	mov	r0, r5
 800d60e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d612:	f000 b8eb 	b.w	800d7ec <_write_r>

0800d616 <__sseek>:
 800d616:	b510      	push	{r4, lr}
 800d618:	460c      	mov	r4, r1
 800d61a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d61e:	f000 f8c1 	bl	800d7a4 <_lseek_r>
 800d622:	1c43      	adds	r3, r0, #1
 800d624:	89a3      	ldrh	r3, [r4, #12]
 800d626:	bf15      	itete	ne
 800d628:	6560      	strne	r0, [r4, #84]	; 0x54
 800d62a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d62e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d632:	81a3      	strheq	r3, [r4, #12]
 800d634:	bf18      	it	ne
 800d636:	81a3      	strhne	r3, [r4, #12]
 800d638:	bd10      	pop	{r4, pc}

0800d63a <__sclose>:
 800d63a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d63e:	f000 b8a1 	b.w	800d784 <_close_r>

0800d642 <__swbuf_r>:
 800d642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d644:	460e      	mov	r6, r1
 800d646:	4614      	mov	r4, r2
 800d648:	4605      	mov	r5, r0
 800d64a:	b118      	cbz	r0, 800d654 <__swbuf_r+0x12>
 800d64c:	6a03      	ldr	r3, [r0, #32]
 800d64e:	b90b      	cbnz	r3, 800d654 <__swbuf_r+0x12>
 800d650:	f7ff ff08 	bl	800d464 <__sinit>
 800d654:	69a3      	ldr	r3, [r4, #24]
 800d656:	60a3      	str	r3, [r4, #8]
 800d658:	89a3      	ldrh	r3, [r4, #12]
 800d65a:	071a      	lsls	r2, r3, #28
 800d65c:	d525      	bpl.n	800d6aa <__swbuf_r+0x68>
 800d65e:	6923      	ldr	r3, [r4, #16]
 800d660:	b31b      	cbz	r3, 800d6aa <__swbuf_r+0x68>
 800d662:	6823      	ldr	r3, [r4, #0]
 800d664:	6922      	ldr	r2, [r4, #16]
 800d666:	1a98      	subs	r0, r3, r2
 800d668:	6963      	ldr	r3, [r4, #20]
 800d66a:	b2f6      	uxtb	r6, r6
 800d66c:	4283      	cmp	r3, r0
 800d66e:	4637      	mov	r7, r6
 800d670:	dc04      	bgt.n	800d67c <__swbuf_r+0x3a>
 800d672:	4621      	mov	r1, r4
 800d674:	4628      	mov	r0, r5
 800d676:	f001 fdc7 	bl	800f208 <_fflush_r>
 800d67a:	b9e0      	cbnz	r0, 800d6b6 <__swbuf_r+0x74>
 800d67c:	68a3      	ldr	r3, [r4, #8]
 800d67e:	3b01      	subs	r3, #1
 800d680:	60a3      	str	r3, [r4, #8]
 800d682:	6823      	ldr	r3, [r4, #0]
 800d684:	1c5a      	adds	r2, r3, #1
 800d686:	6022      	str	r2, [r4, #0]
 800d688:	701e      	strb	r6, [r3, #0]
 800d68a:	6962      	ldr	r2, [r4, #20]
 800d68c:	1c43      	adds	r3, r0, #1
 800d68e:	429a      	cmp	r2, r3
 800d690:	d004      	beq.n	800d69c <__swbuf_r+0x5a>
 800d692:	89a3      	ldrh	r3, [r4, #12]
 800d694:	07db      	lsls	r3, r3, #31
 800d696:	d506      	bpl.n	800d6a6 <__swbuf_r+0x64>
 800d698:	2e0a      	cmp	r6, #10
 800d69a:	d104      	bne.n	800d6a6 <__swbuf_r+0x64>
 800d69c:	4621      	mov	r1, r4
 800d69e:	4628      	mov	r0, r5
 800d6a0:	f001 fdb2 	bl	800f208 <_fflush_r>
 800d6a4:	b938      	cbnz	r0, 800d6b6 <__swbuf_r+0x74>
 800d6a6:	4638      	mov	r0, r7
 800d6a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6aa:	4621      	mov	r1, r4
 800d6ac:	4628      	mov	r0, r5
 800d6ae:	f000 f805 	bl	800d6bc <__swsetup_r>
 800d6b2:	2800      	cmp	r0, #0
 800d6b4:	d0d5      	beq.n	800d662 <__swbuf_r+0x20>
 800d6b6:	f04f 37ff 	mov.w	r7, #4294967295
 800d6ba:	e7f4      	b.n	800d6a6 <__swbuf_r+0x64>

0800d6bc <__swsetup_r>:
 800d6bc:	b538      	push	{r3, r4, r5, lr}
 800d6be:	4b2a      	ldr	r3, [pc, #168]	; (800d768 <__swsetup_r+0xac>)
 800d6c0:	4605      	mov	r5, r0
 800d6c2:	6818      	ldr	r0, [r3, #0]
 800d6c4:	460c      	mov	r4, r1
 800d6c6:	b118      	cbz	r0, 800d6d0 <__swsetup_r+0x14>
 800d6c8:	6a03      	ldr	r3, [r0, #32]
 800d6ca:	b90b      	cbnz	r3, 800d6d0 <__swsetup_r+0x14>
 800d6cc:	f7ff feca 	bl	800d464 <__sinit>
 800d6d0:	89a3      	ldrh	r3, [r4, #12]
 800d6d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d6d6:	0718      	lsls	r0, r3, #28
 800d6d8:	d422      	bmi.n	800d720 <__swsetup_r+0x64>
 800d6da:	06d9      	lsls	r1, r3, #27
 800d6dc:	d407      	bmi.n	800d6ee <__swsetup_r+0x32>
 800d6de:	2309      	movs	r3, #9
 800d6e0:	602b      	str	r3, [r5, #0]
 800d6e2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d6e6:	81a3      	strh	r3, [r4, #12]
 800d6e8:	f04f 30ff 	mov.w	r0, #4294967295
 800d6ec:	e034      	b.n	800d758 <__swsetup_r+0x9c>
 800d6ee:	0758      	lsls	r0, r3, #29
 800d6f0:	d512      	bpl.n	800d718 <__swsetup_r+0x5c>
 800d6f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d6f4:	b141      	cbz	r1, 800d708 <__swsetup_r+0x4c>
 800d6f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d6fa:	4299      	cmp	r1, r3
 800d6fc:	d002      	beq.n	800d704 <__swsetup_r+0x48>
 800d6fe:	4628      	mov	r0, r5
 800d700:	f000 ff3c 	bl	800e57c <_free_r>
 800d704:	2300      	movs	r3, #0
 800d706:	6363      	str	r3, [r4, #52]	; 0x34
 800d708:	89a3      	ldrh	r3, [r4, #12]
 800d70a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d70e:	81a3      	strh	r3, [r4, #12]
 800d710:	2300      	movs	r3, #0
 800d712:	6063      	str	r3, [r4, #4]
 800d714:	6923      	ldr	r3, [r4, #16]
 800d716:	6023      	str	r3, [r4, #0]
 800d718:	89a3      	ldrh	r3, [r4, #12]
 800d71a:	f043 0308 	orr.w	r3, r3, #8
 800d71e:	81a3      	strh	r3, [r4, #12]
 800d720:	6923      	ldr	r3, [r4, #16]
 800d722:	b94b      	cbnz	r3, 800d738 <__swsetup_r+0x7c>
 800d724:	89a3      	ldrh	r3, [r4, #12]
 800d726:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d72a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d72e:	d003      	beq.n	800d738 <__swsetup_r+0x7c>
 800d730:	4621      	mov	r1, r4
 800d732:	4628      	mov	r0, r5
 800d734:	f001 fdb6 	bl	800f2a4 <__smakebuf_r>
 800d738:	89a0      	ldrh	r0, [r4, #12]
 800d73a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d73e:	f010 0301 	ands.w	r3, r0, #1
 800d742:	d00a      	beq.n	800d75a <__swsetup_r+0x9e>
 800d744:	2300      	movs	r3, #0
 800d746:	60a3      	str	r3, [r4, #8]
 800d748:	6963      	ldr	r3, [r4, #20]
 800d74a:	425b      	negs	r3, r3
 800d74c:	61a3      	str	r3, [r4, #24]
 800d74e:	6923      	ldr	r3, [r4, #16]
 800d750:	b943      	cbnz	r3, 800d764 <__swsetup_r+0xa8>
 800d752:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d756:	d1c4      	bne.n	800d6e2 <__swsetup_r+0x26>
 800d758:	bd38      	pop	{r3, r4, r5, pc}
 800d75a:	0781      	lsls	r1, r0, #30
 800d75c:	bf58      	it	pl
 800d75e:	6963      	ldrpl	r3, [r4, #20]
 800d760:	60a3      	str	r3, [r4, #8]
 800d762:	e7f4      	b.n	800d74e <__swsetup_r+0x92>
 800d764:	2000      	movs	r0, #0
 800d766:	e7f7      	b.n	800d758 <__swsetup_r+0x9c>
 800d768:	200000bc 	.word	0x200000bc

0800d76c <memset>:
 800d76c:	4402      	add	r2, r0
 800d76e:	4603      	mov	r3, r0
 800d770:	4293      	cmp	r3, r2
 800d772:	d100      	bne.n	800d776 <memset+0xa>
 800d774:	4770      	bx	lr
 800d776:	f803 1b01 	strb.w	r1, [r3], #1
 800d77a:	e7f9      	b.n	800d770 <memset+0x4>

0800d77c <_localeconv_r>:
 800d77c:	4800      	ldr	r0, [pc, #0]	; (800d780 <_localeconv_r+0x4>)
 800d77e:	4770      	bx	lr
 800d780:	200001b0 	.word	0x200001b0

0800d784 <_close_r>:
 800d784:	b538      	push	{r3, r4, r5, lr}
 800d786:	4d06      	ldr	r5, [pc, #24]	; (800d7a0 <_close_r+0x1c>)
 800d788:	2300      	movs	r3, #0
 800d78a:	4604      	mov	r4, r0
 800d78c:	4608      	mov	r0, r1
 800d78e:	602b      	str	r3, [r5, #0]
 800d790:	f7f5 fb7e 	bl	8002e90 <_close>
 800d794:	1c43      	adds	r3, r0, #1
 800d796:	d102      	bne.n	800d79e <_close_r+0x1a>
 800d798:	682b      	ldr	r3, [r5, #0]
 800d79a:	b103      	cbz	r3, 800d79e <_close_r+0x1a>
 800d79c:	6023      	str	r3, [r4, #0]
 800d79e:	bd38      	pop	{r3, r4, r5, pc}
 800d7a0:	200018e4 	.word	0x200018e4

0800d7a4 <_lseek_r>:
 800d7a4:	b538      	push	{r3, r4, r5, lr}
 800d7a6:	4d07      	ldr	r5, [pc, #28]	; (800d7c4 <_lseek_r+0x20>)
 800d7a8:	4604      	mov	r4, r0
 800d7aa:	4608      	mov	r0, r1
 800d7ac:	4611      	mov	r1, r2
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	602a      	str	r2, [r5, #0]
 800d7b2:	461a      	mov	r2, r3
 800d7b4:	f7f5 fb93 	bl	8002ede <_lseek>
 800d7b8:	1c43      	adds	r3, r0, #1
 800d7ba:	d102      	bne.n	800d7c2 <_lseek_r+0x1e>
 800d7bc:	682b      	ldr	r3, [r5, #0]
 800d7be:	b103      	cbz	r3, 800d7c2 <_lseek_r+0x1e>
 800d7c0:	6023      	str	r3, [r4, #0]
 800d7c2:	bd38      	pop	{r3, r4, r5, pc}
 800d7c4:	200018e4 	.word	0x200018e4

0800d7c8 <_read_r>:
 800d7c8:	b538      	push	{r3, r4, r5, lr}
 800d7ca:	4d07      	ldr	r5, [pc, #28]	; (800d7e8 <_read_r+0x20>)
 800d7cc:	4604      	mov	r4, r0
 800d7ce:	4608      	mov	r0, r1
 800d7d0:	4611      	mov	r1, r2
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	602a      	str	r2, [r5, #0]
 800d7d6:	461a      	mov	r2, r3
 800d7d8:	f7f5 fb3d 	bl	8002e56 <_read>
 800d7dc:	1c43      	adds	r3, r0, #1
 800d7de:	d102      	bne.n	800d7e6 <_read_r+0x1e>
 800d7e0:	682b      	ldr	r3, [r5, #0]
 800d7e2:	b103      	cbz	r3, 800d7e6 <_read_r+0x1e>
 800d7e4:	6023      	str	r3, [r4, #0]
 800d7e6:	bd38      	pop	{r3, r4, r5, pc}
 800d7e8:	200018e4 	.word	0x200018e4

0800d7ec <_write_r>:
 800d7ec:	b538      	push	{r3, r4, r5, lr}
 800d7ee:	4d07      	ldr	r5, [pc, #28]	; (800d80c <_write_r+0x20>)
 800d7f0:	4604      	mov	r4, r0
 800d7f2:	4608      	mov	r0, r1
 800d7f4:	4611      	mov	r1, r2
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	602a      	str	r2, [r5, #0]
 800d7fa:	461a      	mov	r2, r3
 800d7fc:	f7fd f8fa 	bl	800a9f4 <_write>
 800d800:	1c43      	adds	r3, r0, #1
 800d802:	d102      	bne.n	800d80a <_write_r+0x1e>
 800d804:	682b      	ldr	r3, [r5, #0]
 800d806:	b103      	cbz	r3, 800d80a <_write_r+0x1e>
 800d808:	6023      	str	r3, [r4, #0]
 800d80a:	bd38      	pop	{r3, r4, r5, pc}
 800d80c:	200018e4 	.word	0x200018e4

0800d810 <__errno>:
 800d810:	4b01      	ldr	r3, [pc, #4]	; (800d818 <__errno+0x8>)
 800d812:	6818      	ldr	r0, [r3, #0]
 800d814:	4770      	bx	lr
 800d816:	bf00      	nop
 800d818:	200000bc 	.word	0x200000bc

0800d81c <__libc_init_array>:
 800d81c:	b570      	push	{r4, r5, r6, lr}
 800d81e:	4d0d      	ldr	r5, [pc, #52]	; (800d854 <__libc_init_array+0x38>)
 800d820:	4c0d      	ldr	r4, [pc, #52]	; (800d858 <__libc_init_array+0x3c>)
 800d822:	1b64      	subs	r4, r4, r5
 800d824:	10a4      	asrs	r4, r4, #2
 800d826:	2600      	movs	r6, #0
 800d828:	42a6      	cmp	r6, r4
 800d82a:	d109      	bne.n	800d840 <__libc_init_array+0x24>
 800d82c:	4d0b      	ldr	r5, [pc, #44]	; (800d85c <__libc_init_array+0x40>)
 800d82e:	4c0c      	ldr	r4, [pc, #48]	; (800d860 <__libc_init_array+0x44>)
 800d830:	f001 fe8c 	bl	800f54c <_init>
 800d834:	1b64      	subs	r4, r4, r5
 800d836:	10a4      	asrs	r4, r4, #2
 800d838:	2600      	movs	r6, #0
 800d83a:	42a6      	cmp	r6, r4
 800d83c:	d105      	bne.n	800d84a <__libc_init_array+0x2e>
 800d83e:	bd70      	pop	{r4, r5, r6, pc}
 800d840:	f855 3b04 	ldr.w	r3, [r5], #4
 800d844:	4798      	blx	r3
 800d846:	3601      	adds	r6, #1
 800d848:	e7ee      	b.n	800d828 <__libc_init_array+0xc>
 800d84a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d84e:	4798      	blx	r3
 800d850:	3601      	adds	r6, #1
 800d852:	e7f2      	b.n	800d83a <__libc_init_array+0x1e>
 800d854:	08010ffc 	.word	0x08010ffc
 800d858:	08010ffc 	.word	0x08010ffc
 800d85c:	08010ffc 	.word	0x08010ffc
 800d860:	08011000 	.word	0x08011000

0800d864 <__retarget_lock_init_recursive>:
 800d864:	4770      	bx	lr

0800d866 <__retarget_lock_acquire_recursive>:
 800d866:	4770      	bx	lr

0800d868 <__retarget_lock_release_recursive>:
 800d868:	4770      	bx	lr

0800d86a <memcpy>:
 800d86a:	440a      	add	r2, r1
 800d86c:	4291      	cmp	r1, r2
 800d86e:	f100 33ff 	add.w	r3, r0, #4294967295
 800d872:	d100      	bne.n	800d876 <memcpy+0xc>
 800d874:	4770      	bx	lr
 800d876:	b510      	push	{r4, lr}
 800d878:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d87c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d880:	4291      	cmp	r1, r2
 800d882:	d1f9      	bne.n	800d878 <memcpy+0xe>
 800d884:	bd10      	pop	{r4, pc}

0800d886 <quorem>:
 800d886:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d88a:	6903      	ldr	r3, [r0, #16]
 800d88c:	690c      	ldr	r4, [r1, #16]
 800d88e:	42a3      	cmp	r3, r4
 800d890:	4607      	mov	r7, r0
 800d892:	db7e      	blt.n	800d992 <quorem+0x10c>
 800d894:	3c01      	subs	r4, #1
 800d896:	f101 0814 	add.w	r8, r1, #20
 800d89a:	f100 0514 	add.w	r5, r0, #20
 800d89e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d8a2:	9301      	str	r3, [sp, #4]
 800d8a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d8a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d8ac:	3301      	adds	r3, #1
 800d8ae:	429a      	cmp	r2, r3
 800d8b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d8b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d8b8:	fbb2 f6f3 	udiv	r6, r2, r3
 800d8bc:	d331      	bcc.n	800d922 <quorem+0x9c>
 800d8be:	f04f 0e00 	mov.w	lr, #0
 800d8c2:	4640      	mov	r0, r8
 800d8c4:	46ac      	mov	ip, r5
 800d8c6:	46f2      	mov	sl, lr
 800d8c8:	f850 2b04 	ldr.w	r2, [r0], #4
 800d8cc:	b293      	uxth	r3, r2
 800d8ce:	fb06 e303 	mla	r3, r6, r3, lr
 800d8d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d8d6:	0c1a      	lsrs	r2, r3, #16
 800d8d8:	b29b      	uxth	r3, r3
 800d8da:	ebaa 0303 	sub.w	r3, sl, r3
 800d8de:	f8dc a000 	ldr.w	sl, [ip]
 800d8e2:	fa13 f38a 	uxtah	r3, r3, sl
 800d8e6:	fb06 220e 	mla	r2, r6, lr, r2
 800d8ea:	9300      	str	r3, [sp, #0]
 800d8ec:	9b00      	ldr	r3, [sp, #0]
 800d8ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d8f2:	b292      	uxth	r2, r2
 800d8f4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d8f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d8fc:	f8bd 3000 	ldrh.w	r3, [sp]
 800d900:	4581      	cmp	r9, r0
 800d902:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d906:	f84c 3b04 	str.w	r3, [ip], #4
 800d90a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d90e:	d2db      	bcs.n	800d8c8 <quorem+0x42>
 800d910:	f855 300b 	ldr.w	r3, [r5, fp]
 800d914:	b92b      	cbnz	r3, 800d922 <quorem+0x9c>
 800d916:	9b01      	ldr	r3, [sp, #4]
 800d918:	3b04      	subs	r3, #4
 800d91a:	429d      	cmp	r5, r3
 800d91c:	461a      	mov	r2, r3
 800d91e:	d32c      	bcc.n	800d97a <quorem+0xf4>
 800d920:	613c      	str	r4, [r7, #16]
 800d922:	4638      	mov	r0, r7
 800d924:	f001 f9a6 	bl	800ec74 <__mcmp>
 800d928:	2800      	cmp	r0, #0
 800d92a:	db22      	blt.n	800d972 <quorem+0xec>
 800d92c:	3601      	adds	r6, #1
 800d92e:	4629      	mov	r1, r5
 800d930:	2000      	movs	r0, #0
 800d932:	f858 2b04 	ldr.w	r2, [r8], #4
 800d936:	f8d1 c000 	ldr.w	ip, [r1]
 800d93a:	b293      	uxth	r3, r2
 800d93c:	1ac3      	subs	r3, r0, r3
 800d93e:	0c12      	lsrs	r2, r2, #16
 800d940:	fa13 f38c 	uxtah	r3, r3, ip
 800d944:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d948:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d94c:	b29b      	uxth	r3, r3
 800d94e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d952:	45c1      	cmp	r9, r8
 800d954:	f841 3b04 	str.w	r3, [r1], #4
 800d958:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d95c:	d2e9      	bcs.n	800d932 <quorem+0xac>
 800d95e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d962:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d966:	b922      	cbnz	r2, 800d972 <quorem+0xec>
 800d968:	3b04      	subs	r3, #4
 800d96a:	429d      	cmp	r5, r3
 800d96c:	461a      	mov	r2, r3
 800d96e:	d30a      	bcc.n	800d986 <quorem+0x100>
 800d970:	613c      	str	r4, [r7, #16]
 800d972:	4630      	mov	r0, r6
 800d974:	b003      	add	sp, #12
 800d976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d97a:	6812      	ldr	r2, [r2, #0]
 800d97c:	3b04      	subs	r3, #4
 800d97e:	2a00      	cmp	r2, #0
 800d980:	d1ce      	bne.n	800d920 <quorem+0x9a>
 800d982:	3c01      	subs	r4, #1
 800d984:	e7c9      	b.n	800d91a <quorem+0x94>
 800d986:	6812      	ldr	r2, [r2, #0]
 800d988:	3b04      	subs	r3, #4
 800d98a:	2a00      	cmp	r2, #0
 800d98c:	d1f0      	bne.n	800d970 <quorem+0xea>
 800d98e:	3c01      	subs	r4, #1
 800d990:	e7eb      	b.n	800d96a <quorem+0xe4>
 800d992:	2000      	movs	r0, #0
 800d994:	e7ee      	b.n	800d974 <quorem+0xee>
	...

0800d998 <_dtoa_r>:
 800d998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d99c:	ed2d 8b04 	vpush	{d8-d9}
 800d9a0:	69c5      	ldr	r5, [r0, #28]
 800d9a2:	b093      	sub	sp, #76	; 0x4c
 800d9a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d9a8:	ec57 6b10 	vmov	r6, r7, d0
 800d9ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d9b0:	9107      	str	r1, [sp, #28]
 800d9b2:	4604      	mov	r4, r0
 800d9b4:	920a      	str	r2, [sp, #40]	; 0x28
 800d9b6:	930d      	str	r3, [sp, #52]	; 0x34
 800d9b8:	b975      	cbnz	r5, 800d9d8 <_dtoa_r+0x40>
 800d9ba:	2010      	movs	r0, #16
 800d9bc:	f000 fe2a 	bl	800e614 <malloc>
 800d9c0:	4602      	mov	r2, r0
 800d9c2:	61e0      	str	r0, [r4, #28]
 800d9c4:	b920      	cbnz	r0, 800d9d0 <_dtoa_r+0x38>
 800d9c6:	4bae      	ldr	r3, [pc, #696]	; (800dc80 <_dtoa_r+0x2e8>)
 800d9c8:	21ef      	movs	r1, #239	; 0xef
 800d9ca:	48ae      	ldr	r0, [pc, #696]	; (800dc84 <_dtoa_r+0x2ec>)
 800d9cc:	f001 fd0c 	bl	800f3e8 <__assert_func>
 800d9d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d9d4:	6005      	str	r5, [r0, #0]
 800d9d6:	60c5      	str	r5, [r0, #12]
 800d9d8:	69e3      	ldr	r3, [r4, #28]
 800d9da:	6819      	ldr	r1, [r3, #0]
 800d9dc:	b151      	cbz	r1, 800d9f4 <_dtoa_r+0x5c>
 800d9de:	685a      	ldr	r2, [r3, #4]
 800d9e0:	604a      	str	r2, [r1, #4]
 800d9e2:	2301      	movs	r3, #1
 800d9e4:	4093      	lsls	r3, r2
 800d9e6:	608b      	str	r3, [r1, #8]
 800d9e8:	4620      	mov	r0, r4
 800d9ea:	f000 ff07 	bl	800e7fc <_Bfree>
 800d9ee:	69e3      	ldr	r3, [r4, #28]
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	601a      	str	r2, [r3, #0]
 800d9f4:	1e3b      	subs	r3, r7, #0
 800d9f6:	bfbb      	ittet	lt
 800d9f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d9fc:	9303      	strlt	r3, [sp, #12]
 800d9fe:	2300      	movge	r3, #0
 800da00:	2201      	movlt	r2, #1
 800da02:	bfac      	ite	ge
 800da04:	f8c8 3000 	strge.w	r3, [r8]
 800da08:	f8c8 2000 	strlt.w	r2, [r8]
 800da0c:	4b9e      	ldr	r3, [pc, #632]	; (800dc88 <_dtoa_r+0x2f0>)
 800da0e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800da12:	ea33 0308 	bics.w	r3, r3, r8
 800da16:	d11b      	bne.n	800da50 <_dtoa_r+0xb8>
 800da18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800da1a:	f242 730f 	movw	r3, #9999	; 0x270f
 800da1e:	6013      	str	r3, [r2, #0]
 800da20:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800da24:	4333      	orrs	r3, r6
 800da26:	f000 8593 	beq.w	800e550 <_dtoa_r+0xbb8>
 800da2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800da2c:	b963      	cbnz	r3, 800da48 <_dtoa_r+0xb0>
 800da2e:	4b97      	ldr	r3, [pc, #604]	; (800dc8c <_dtoa_r+0x2f4>)
 800da30:	e027      	b.n	800da82 <_dtoa_r+0xea>
 800da32:	4b97      	ldr	r3, [pc, #604]	; (800dc90 <_dtoa_r+0x2f8>)
 800da34:	9300      	str	r3, [sp, #0]
 800da36:	3308      	adds	r3, #8
 800da38:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800da3a:	6013      	str	r3, [r2, #0]
 800da3c:	9800      	ldr	r0, [sp, #0]
 800da3e:	b013      	add	sp, #76	; 0x4c
 800da40:	ecbd 8b04 	vpop	{d8-d9}
 800da44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da48:	4b90      	ldr	r3, [pc, #576]	; (800dc8c <_dtoa_r+0x2f4>)
 800da4a:	9300      	str	r3, [sp, #0]
 800da4c:	3303      	adds	r3, #3
 800da4e:	e7f3      	b.n	800da38 <_dtoa_r+0xa0>
 800da50:	ed9d 7b02 	vldr	d7, [sp, #8]
 800da54:	2200      	movs	r2, #0
 800da56:	ec51 0b17 	vmov	r0, r1, d7
 800da5a:	eeb0 8a47 	vmov.f32	s16, s14
 800da5e:	eef0 8a67 	vmov.f32	s17, s15
 800da62:	2300      	movs	r3, #0
 800da64:	f7f3 f818 	bl	8000a98 <__aeabi_dcmpeq>
 800da68:	4681      	mov	r9, r0
 800da6a:	b160      	cbz	r0, 800da86 <_dtoa_r+0xee>
 800da6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800da6e:	2301      	movs	r3, #1
 800da70:	6013      	str	r3, [r2, #0]
 800da72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800da74:	2b00      	cmp	r3, #0
 800da76:	f000 8568 	beq.w	800e54a <_dtoa_r+0xbb2>
 800da7a:	4b86      	ldr	r3, [pc, #536]	; (800dc94 <_dtoa_r+0x2fc>)
 800da7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800da7e:	6013      	str	r3, [r2, #0]
 800da80:	3b01      	subs	r3, #1
 800da82:	9300      	str	r3, [sp, #0]
 800da84:	e7da      	b.n	800da3c <_dtoa_r+0xa4>
 800da86:	aa10      	add	r2, sp, #64	; 0x40
 800da88:	a911      	add	r1, sp, #68	; 0x44
 800da8a:	4620      	mov	r0, r4
 800da8c:	eeb0 0a48 	vmov.f32	s0, s16
 800da90:	eef0 0a68 	vmov.f32	s1, s17
 800da94:	f001 f994 	bl	800edc0 <__d2b>
 800da98:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800da9c:	4682      	mov	sl, r0
 800da9e:	2d00      	cmp	r5, #0
 800daa0:	d07f      	beq.n	800dba2 <_dtoa_r+0x20a>
 800daa2:	ee18 3a90 	vmov	r3, s17
 800daa6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800daaa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800daae:	ec51 0b18 	vmov	r0, r1, d8
 800dab2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800dab6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800daba:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800dabe:	4619      	mov	r1, r3
 800dac0:	2200      	movs	r2, #0
 800dac2:	4b75      	ldr	r3, [pc, #468]	; (800dc98 <_dtoa_r+0x300>)
 800dac4:	f7f2 fbc8 	bl	8000258 <__aeabi_dsub>
 800dac8:	a367      	add	r3, pc, #412	; (adr r3, 800dc68 <_dtoa_r+0x2d0>)
 800daca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dace:	f7f2 fd7b 	bl	80005c8 <__aeabi_dmul>
 800dad2:	a367      	add	r3, pc, #412	; (adr r3, 800dc70 <_dtoa_r+0x2d8>)
 800dad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dad8:	f7f2 fbc0 	bl	800025c <__adddf3>
 800dadc:	4606      	mov	r6, r0
 800dade:	4628      	mov	r0, r5
 800dae0:	460f      	mov	r7, r1
 800dae2:	f7f2 fd07 	bl	80004f4 <__aeabi_i2d>
 800dae6:	a364      	add	r3, pc, #400	; (adr r3, 800dc78 <_dtoa_r+0x2e0>)
 800dae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daec:	f7f2 fd6c 	bl	80005c8 <__aeabi_dmul>
 800daf0:	4602      	mov	r2, r0
 800daf2:	460b      	mov	r3, r1
 800daf4:	4630      	mov	r0, r6
 800daf6:	4639      	mov	r1, r7
 800daf8:	f7f2 fbb0 	bl	800025c <__adddf3>
 800dafc:	4606      	mov	r6, r0
 800dafe:	460f      	mov	r7, r1
 800db00:	f7f3 f812 	bl	8000b28 <__aeabi_d2iz>
 800db04:	2200      	movs	r2, #0
 800db06:	4683      	mov	fp, r0
 800db08:	2300      	movs	r3, #0
 800db0a:	4630      	mov	r0, r6
 800db0c:	4639      	mov	r1, r7
 800db0e:	f7f2 ffcd 	bl	8000aac <__aeabi_dcmplt>
 800db12:	b148      	cbz	r0, 800db28 <_dtoa_r+0x190>
 800db14:	4658      	mov	r0, fp
 800db16:	f7f2 fced 	bl	80004f4 <__aeabi_i2d>
 800db1a:	4632      	mov	r2, r6
 800db1c:	463b      	mov	r3, r7
 800db1e:	f7f2 ffbb 	bl	8000a98 <__aeabi_dcmpeq>
 800db22:	b908      	cbnz	r0, 800db28 <_dtoa_r+0x190>
 800db24:	f10b 3bff 	add.w	fp, fp, #4294967295
 800db28:	f1bb 0f16 	cmp.w	fp, #22
 800db2c:	d857      	bhi.n	800dbde <_dtoa_r+0x246>
 800db2e:	4b5b      	ldr	r3, [pc, #364]	; (800dc9c <_dtoa_r+0x304>)
 800db30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800db34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db38:	ec51 0b18 	vmov	r0, r1, d8
 800db3c:	f7f2 ffb6 	bl	8000aac <__aeabi_dcmplt>
 800db40:	2800      	cmp	r0, #0
 800db42:	d04e      	beq.n	800dbe2 <_dtoa_r+0x24a>
 800db44:	f10b 3bff 	add.w	fp, fp, #4294967295
 800db48:	2300      	movs	r3, #0
 800db4a:	930c      	str	r3, [sp, #48]	; 0x30
 800db4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800db4e:	1b5b      	subs	r3, r3, r5
 800db50:	1e5a      	subs	r2, r3, #1
 800db52:	bf45      	ittet	mi
 800db54:	f1c3 0301 	rsbmi	r3, r3, #1
 800db58:	9305      	strmi	r3, [sp, #20]
 800db5a:	2300      	movpl	r3, #0
 800db5c:	2300      	movmi	r3, #0
 800db5e:	9206      	str	r2, [sp, #24]
 800db60:	bf54      	ite	pl
 800db62:	9305      	strpl	r3, [sp, #20]
 800db64:	9306      	strmi	r3, [sp, #24]
 800db66:	f1bb 0f00 	cmp.w	fp, #0
 800db6a:	db3c      	blt.n	800dbe6 <_dtoa_r+0x24e>
 800db6c:	9b06      	ldr	r3, [sp, #24]
 800db6e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800db72:	445b      	add	r3, fp
 800db74:	9306      	str	r3, [sp, #24]
 800db76:	2300      	movs	r3, #0
 800db78:	9308      	str	r3, [sp, #32]
 800db7a:	9b07      	ldr	r3, [sp, #28]
 800db7c:	2b09      	cmp	r3, #9
 800db7e:	d868      	bhi.n	800dc52 <_dtoa_r+0x2ba>
 800db80:	2b05      	cmp	r3, #5
 800db82:	bfc4      	itt	gt
 800db84:	3b04      	subgt	r3, #4
 800db86:	9307      	strgt	r3, [sp, #28]
 800db88:	9b07      	ldr	r3, [sp, #28]
 800db8a:	f1a3 0302 	sub.w	r3, r3, #2
 800db8e:	bfcc      	ite	gt
 800db90:	2500      	movgt	r5, #0
 800db92:	2501      	movle	r5, #1
 800db94:	2b03      	cmp	r3, #3
 800db96:	f200 8085 	bhi.w	800dca4 <_dtoa_r+0x30c>
 800db9a:	e8df f003 	tbb	[pc, r3]
 800db9e:	3b2e      	.short	0x3b2e
 800dba0:	5839      	.short	0x5839
 800dba2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800dba6:	441d      	add	r5, r3
 800dba8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800dbac:	2b20      	cmp	r3, #32
 800dbae:	bfc1      	itttt	gt
 800dbb0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800dbb4:	fa08 f803 	lslgt.w	r8, r8, r3
 800dbb8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800dbbc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800dbc0:	bfd6      	itet	le
 800dbc2:	f1c3 0320 	rsble	r3, r3, #32
 800dbc6:	ea48 0003 	orrgt.w	r0, r8, r3
 800dbca:	fa06 f003 	lslle.w	r0, r6, r3
 800dbce:	f7f2 fc81 	bl	80004d4 <__aeabi_ui2d>
 800dbd2:	2201      	movs	r2, #1
 800dbd4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800dbd8:	3d01      	subs	r5, #1
 800dbda:	920e      	str	r2, [sp, #56]	; 0x38
 800dbdc:	e76f      	b.n	800dabe <_dtoa_r+0x126>
 800dbde:	2301      	movs	r3, #1
 800dbe0:	e7b3      	b.n	800db4a <_dtoa_r+0x1b2>
 800dbe2:	900c      	str	r0, [sp, #48]	; 0x30
 800dbe4:	e7b2      	b.n	800db4c <_dtoa_r+0x1b4>
 800dbe6:	9b05      	ldr	r3, [sp, #20]
 800dbe8:	eba3 030b 	sub.w	r3, r3, fp
 800dbec:	9305      	str	r3, [sp, #20]
 800dbee:	f1cb 0300 	rsb	r3, fp, #0
 800dbf2:	9308      	str	r3, [sp, #32]
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	930b      	str	r3, [sp, #44]	; 0x2c
 800dbf8:	e7bf      	b.n	800db7a <_dtoa_r+0x1e2>
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	9309      	str	r3, [sp, #36]	; 0x24
 800dbfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	dc52      	bgt.n	800dcaa <_dtoa_r+0x312>
 800dc04:	2301      	movs	r3, #1
 800dc06:	9301      	str	r3, [sp, #4]
 800dc08:	9304      	str	r3, [sp, #16]
 800dc0a:	461a      	mov	r2, r3
 800dc0c:	920a      	str	r2, [sp, #40]	; 0x28
 800dc0e:	e00b      	b.n	800dc28 <_dtoa_r+0x290>
 800dc10:	2301      	movs	r3, #1
 800dc12:	e7f3      	b.n	800dbfc <_dtoa_r+0x264>
 800dc14:	2300      	movs	r3, #0
 800dc16:	9309      	str	r3, [sp, #36]	; 0x24
 800dc18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc1a:	445b      	add	r3, fp
 800dc1c:	9301      	str	r3, [sp, #4]
 800dc1e:	3301      	adds	r3, #1
 800dc20:	2b01      	cmp	r3, #1
 800dc22:	9304      	str	r3, [sp, #16]
 800dc24:	bfb8      	it	lt
 800dc26:	2301      	movlt	r3, #1
 800dc28:	69e0      	ldr	r0, [r4, #28]
 800dc2a:	2100      	movs	r1, #0
 800dc2c:	2204      	movs	r2, #4
 800dc2e:	f102 0614 	add.w	r6, r2, #20
 800dc32:	429e      	cmp	r6, r3
 800dc34:	d93d      	bls.n	800dcb2 <_dtoa_r+0x31a>
 800dc36:	6041      	str	r1, [r0, #4]
 800dc38:	4620      	mov	r0, r4
 800dc3a:	f000 fd9f 	bl	800e77c <_Balloc>
 800dc3e:	9000      	str	r0, [sp, #0]
 800dc40:	2800      	cmp	r0, #0
 800dc42:	d139      	bne.n	800dcb8 <_dtoa_r+0x320>
 800dc44:	4b16      	ldr	r3, [pc, #88]	; (800dca0 <_dtoa_r+0x308>)
 800dc46:	4602      	mov	r2, r0
 800dc48:	f240 11af 	movw	r1, #431	; 0x1af
 800dc4c:	e6bd      	b.n	800d9ca <_dtoa_r+0x32>
 800dc4e:	2301      	movs	r3, #1
 800dc50:	e7e1      	b.n	800dc16 <_dtoa_r+0x27e>
 800dc52:	2501      	movs	r5, #1
 800dc54:	2300      	movs	r3, #0
 800dc56:	9307      	str	r3, [sp, #28]
 800dc58:	9509      	str	r5, [sp, #36]	; 0x24
 800dc5a:	f04f 33ff 	mov.w	r3, #4294967295
 800dc5e:	9301      	str	r3, [sp, #4]
 800dc60:	9304      	str	r3, [sp, #16]
 800dc62:	2200      	movs	r2, #0
 800dc64:	2312      	movs	r3, #18
 800dc66:	e7d1      	b.n	800dc0c <_dtoa_r+0x274>
 800dc68:	636f4361 	.word	0x636f4361
 800dc6c:	3fd287a7 	.word	0x3fd287a7
 800dc70:	8b60c8b3 	.word	0x8b60c8b3
 800dc74:	3fc68a28 	.word	0x3fc68a28
 800dc78:	509f79fb 	.word	0x509f79fb
 800dc7c:	3fd34413 	.word	0x3fd34413
 800dc80:	08010cc5 	.word	0x08010cc5
 800dc84:	08010cdc 	.word	0x08010cdc
 800dc88:	7ff00000 	.word	0x7ff00000
 800dc8c:	08010cc1 	.word	0x08010cc1
 800dc90:	08010cb8 	.word	0x08010cb8
 800dc94:	08010c95 	.word	0x08010c95
 800dc98:	3ff80000 	.word	0x3ff80000
 800dc9c:	08010dc8 	.word	0x08010dc8
 800dca0:	08010d34 	.word	0x08010d34
 800dca4:	2301      	movs	r3, #1
 800dca6:	9309      	str	r3, [sp, #36]	; 0x24
 800dca8:	e7d7      	b.n	800dc5a <_dtoa_r+0x2c2>
 800dcaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcac:	9301      	str	r3, [sp, #4]
 800dcae:	9304      	str	r3, [sp, #16]
 800dcb0:	e7ba      	b.n	800dc28 <_dtoa_r+0x290>
 800dcb2:	3101      	adds	r1, #1
 800dcb4:	0052      	lsls	r2, r2, #1
 800dcb6:	e7ba      	b.n	800dc2e <_dtoa_r+0x296>
 800dcb8:	69e3      	ldr	r3, [r4, #28]
 800dcba:	9a00      	ldr	r2, [sp, #0]
 800dcbc:	601a      	str	r2, [r3, #0]
 800dcbe:	9b04      	ldr	r3, [sp, #16]
 800dcc0:	2b0e      	cmp	r3, #14
 800dcc2:	f200 80a8 	bhi.w	800de16 <_dtoa_r+0x47e>
 800dcc6:	2d00      	cmp	r5, #0
 800dcc8:	f000 80a5 	beq.w	800de16 <_dtoa_r+0x47e>
 800dccc:	f1bb 0f00 	cmp.w	fp, #0
 800dcd0:	dd38      	ble.n	800dd44 <_dtoa_r+0x3ac>
 800dcd2:	4bc0      	ldr	r3, [pc, #768]	; (800dfd4 <_dtoa_r+0x63c>)
 800dcd4:	f00b 020f 	and.w	r2, fp, #15
 800dcd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dcdc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800dce0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800dce4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800dce8:	d019      	beq.n	800dd1e <_dtoa_r+0x386>
 800dcea:	4bbb      	ldr	r3, [pc, #748]	; (800dfd8 <_dtoa_r+0x640>)
 800dcec:	ec51 0b18 	vmov	r0, r1, d8
 800dcf0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dcf4:	f7f2 fd92 	bl	800081c <__aeabi_ddiv>
 800dcf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dcfc:	f008 080f 	and.w	r8, r8, #15
 800dd00:	2503      	movs	r5, #3
 800dd02:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800dfd8 <_dtoa_r+0x640>
 800dd06:	f1b8 0f00 	cmp.w	r8, #0
 800dd0a:	d10a      	bne.n	800dd22 <_dtoa_r+0x38a>
 800dd0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd10:	4632      	mov	r2, r6
 800dd12:	463b      	mov	r3, r7
 800dd14:	f7f2 fd82 	bl	800081c <__aeabi_ddiv>
 800dd18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dd1c:	e02b      	b.n	800dd76 <_dtoa_r+0x3de>
 800dd1e:	2502      	movs	r5, #2
 800dd20:	e7ef      	b.n	800dd02 <_dtoa_r+0x36a>
 800dd22:	f018 0f01 	tst.w	r8, #1
 800dd26:	d008      	beq.n	800dd3a <_dtoa_r+0x3a2>
 800dd28:	4630      	mov	r0, r6
 800dd2a:	4639      	mov	r1, r7
 800dd2c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800dd30:	f7f2 fc4a 	bl	80005c8 <__aeabi_dmul>
 800dd34:	3501      	adds	r5, #1
 800dd36:	4606      	mov	r6, r0
 800dd38:	460f      	mov	r7, r1
 800dd3a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800dd3e:	f109 0908 	add.w	r9, r9, #8
 800dd42:	e7e0      	b.n	800dd06 <_dtoa_r+0x36e>
 800dd44:	f000 809f 	beq.w	800de86 <_dtoa_r+0x4ee>
 800dd48:	f1cb 0600 	rsb	r6, fp, #0
 800dd4c:	4ba1      	ldr	r3, [pc, #644]	; (800dfd4 <_dtoa_r+0x63c>)
 800dd4e:	4fa2      	ldr	r7, [pc, #648]	; (800dfd8 <_dtoa_r+0x640>)
 800dd50:	f006 020f 	and.w	r2, r6, #15
 800dd54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd5c:	ec51 0b18 	vmov	r0, r1, d8
 800dd60:	f7f2 fc32 	bl	80005c8 <__aeabi_dmul>
 800dd64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dd68:	1136      	asrs	r6, r6, #4
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	2502      	movs	r5, #2
 800dd6e:	2e00      	cmp	r6, #0
 800dd70:	d17e      	bne.n	800de70 <_dtoa_r+0x4d8>
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d1d0      	bne.n	800dd18 <_dtoa_r+0x380>
 800dd76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dd78:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	f000 8084 	beq.w	800de8a <_dtoa_r+0x4f2>
 800dd82:	4b96      	ldr	r3, [pc, #600]	; (800dfdc <_dtoa_r+0x644>)
 800dd84:	2200      	movs	r2, #0
 800dd86:	4640      	mov	r0, r8
 800dd88:	4649      	mov	r1, r9
 800dd8a:	f7f2 fe8f 	bl	8000aac <__aeabi_dcmplt>
 800dd8e:	2800      	cmp	r0, #0
 800dd90:	d07b      	beq.n	800de8a <_dtoa_r+0x4f2>
 800dd92:	9b04      	ldr	r3, [sp, #16]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d078      	beq.n	800de8a <_dtoa_r+0x4f2>
 800dd98:	9b01      	ldr	r3, [sp, #4]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	dd39      	ble.n	800de12 <_dtoa_r+0x47a>
 800dd9e:	4b90      	ldr	r3, [pc, #576]	; (800dfe0 <_dtoa_r+0x648>)
 800dda0:	2200      	movs	r2, #0
 800dda2:	4640      	mov	r0, r8
 800dda4:	4649      	mov	r1, r9
 800dda6:	f7f2 fc0f 	bl	80005c8 <__aeabi_dmul>
 800ddaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ddae:	9e01      	ldr	r6, [sp, #4]
 800ddb0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ddb4:	3501      	adds	r5, #1
 800ddb6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ddba:	4628      	mov	r0, r5
 800ddbc:	f7f2 fb9a 	bl	80004f4 <__aeabi_i2d>
 800ddc0:	4642      	mov	r2, r8
 800ddc2:	464b      	mov	r3, r9
 800ddc4:	f7f2 fc00 	bl	80005c8 <__aeabi_dmul>
 800ddc8:	4b86      	ldr	r3, [pc, #536]	; (800dfe4 <_dtoa_r+0x64c>)
 800ddca:	2200      	movs	r2, #0
 800ddcc:	f7f2 fa46 	bl	800025c <__adddf3>
 800ddd0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ddd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ddd8:	9303      	str	r3, [sp, #12]
 800ddda:	2e00      	cmp	r6, #0
 800dddc:	d158      	bne.n	800de90 <_dtoa_r+0x4f8>
 800ddde:	4b82      	ldr	r3, [pc, #520]	; (800dfe8 <_dtoa_r+0x650>)
 800dde0:	2200      	movs	r2, #0
 800dde2:	4640      	mov	r0, r8
 800dde4:	4649      	mov	r1, r9
 800dde6:	f7f2 fa37 	bl	8000258 <__aeabi_dsub>
 800ddea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ddee:	4680      	mov	r8, r0
 800ddf0:	4689      	mov	r9, r1
 800ddf2:	f7f2 fe79 	bl	8000ae8 <__aeabi_dcmpgt>
 800ddf6:	2800      	cmp	r0, #0
 800ddf8:	f040 8296 	bne.w	800e328 <_dtoa_r+0x990>
 800ddfc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800de00:	4640      	mov	r0, r8
 800de02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800de06:	4649      	mov	r1, r9
 800de08:	f7f2 fe50 	bl	8000aac <__aeabi_dcmplt>
 800de0c:	2800      	cmp	r0, #0
 800de0e:	f040 8289 	bne.w	800e324 <_dtoa_r+0x98c>
 800de12:	ed8d 8b02 	vstr	d8, [sp, #8]
 800de16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800de18:	2b00      	cmp	r3, #0
 800de1a:	f2c0 814e 	blt.w	800e0ba <_dtoa_r+0x722>
 800de1e:	f1bb 0f0e 	cmp.w	fp, #14
 800de22:	f300 814a 	bgt.w	800e0ba <_dtoa_r+0x722>
 800de26:	4b6b      	ldr	r3, [pc, #428]	; (800dfd4 <_dtoa_r+0x63c>)
 800de28:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800de2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800de30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de32:	2b00      	cmp	r3, #0
 800de34:	f280 80dc 	bge.w	800dff0 <_dtoa_r+0x658>
 800de38:	9b04      	ldr	r3, [sp, #16]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	f300 80d8 	bgt.w	800dff0 <_dtoa_r+0x658>
 800de40:	f040 826f 	bne.w	800e322 <_dtoa_r+0x98a>
 800de44:	4b68      	ldr	r3, [pc, #416]	; (800dfe8 <_dtoa_r+0x650>)
 800de46:	2200      	movs	r2, #0
 800de48:	4640      	mov	r0, r8
 800de4a:	4649      	mov	r1, r9
 800de4c:	f7f2 fbbc 	bl	80005c8 <__aeabi_dmul>
 800de50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800de54:	f7f2 fe3e 	bl	8000ad4 <__aeabi_dcmpge>
 800de58:	9e04      	ldr	r6, [sp, #16]
 800de5a:	4637      	mov	r7, r6
 800de5c:	2800      	cmp	r0, #0
 800de5e:	f040 8245 	bne.w	800e2ec <_dtoa_r+0x954>
 800de62:	9d00      	ldr	r5, [sp, #0]
 800de64:	2331      	movs	r3, #49	; 0x31
 800de66:	f805 3b01 	strb.w	r3, [r5], #1
 800de6a:	f10b 0b01 	add.w	fp, fp, #1
 800de6e:	e241      	b.n	800e2f4 <_dtoa_r+0x95c>
 800de70:	07f2      	lsls	r2, r6, #31
 800de72:	d505      	bpl.n	800de80 <_dtoa_r+0x4e8>
 800de74:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de78:	f7f2 fba6 	bl	80005c8 <__aeabi_dmul>
 800de7c:	3501      	adds	r5, #1
 800de7e:	2301      	movs	r3, #1
 800de80:	1076      	asrs	r6, r6, #1
 800de82:	3708      	adds	r7, #8
 800de84:	e773      	b.n	800dd6e <_dtoa_r+0x3d6>
 800de86:	2502      	movs	r5, #2
 800de88:	e775      	b.n	800dd76 <_dtoa_r+0x3de>
 800de8a:	9e04      	ldr	r6, [sp, #16]
 800de8c:	465f      	mov	r7, fp
 800de8e:	e792      	b.n	800ddb6 <_dtoa_r+0x41e>
 800de90:	9900      	ldr	r1, [sp, #0]
 800de92:	4b50      	ldr	r3, [pc, #320]	; (800dfd4 <_dtoa_r+0x63c>)
 800de94:	ed9d 7b02 	vldr	d7, [sp, #8]
 800de98:	4431      	add	r1, r6
 800de9a:	9102      	str	r1, [sp, #8]
 800de9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800de9e:	eeb0 9a47 	vmov.f32	s18, s14
 800dea2:	eef0 9a67 	vmov.f32	s19, s15
 800dea6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800deaa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800deae:	2900      	cmp	r1, #0
 800deb0:	d044      	beq.n	800df3c <_dtoa_r+0x5a4>
 800deb2:	494e      	ldr	r1, [pc, #312]	; (800dfec <_dtoa_r+0x654>)
 800deb4:	2000      	movs	r0, #0
 800deb6:	f7f2 fcb1 	bl	800081c <__aeabi_ddiv>
 800deba:	ec53 2b19 	vmov	r2, r3, d9
 800debe:	f7f2 f9cb 	bl	8000258 <__aeabi_dsub>
 800dec2:	9d00      	ldr	r5, [sp, #0]
 800dec4:	ec41 0b19 	vmov	d9, r0, r1
 800dec8:	4649      	mov	r1, r9
 800deca:	4640      	mov	r0, r8
 800decc:	f7f2 fe2c 	bl	8000b28 <__aeabi_d2iz>
 800ded0:	4606      	mov	r6, r0
 800ded2:	f7f2 fb0f 	bl	80004f4 <__aeabi_i2d>
 800ded6:	4602      	mov	r2, r0
 800ded8:	460b      	mov	r3, r1
 800deda:	4640      	mov	r0, r8
 800dedc:	4649      	mov	r1, r9
 800dede:	f7f2 f9bb 	bl	8000258 <__aeabi_dsub>
 800dee2:	3630      	adds	r6, #48	; 0x30
 800dee4:	f805 6b01 	strb.w	r6, [r5], #1
 800dee8:	ec53 2b19 	vmov	r2, r3, d9
 800deec:	4680      	mov	r8, r0
 800deee:	4689      	mov	r9, r1
 800def0:	f7f2 fddc 	bl	8000aac <__aeabi_dcmplt>
 800def4:	2800      	cmp	r0, #0
 800def6:	d164      	bne.n	800dfc2 <_dtoa_r+0x62a>
 800def8:	4642      	mov	r2, r8
 800defa:	464b      	mov	r3, r9
 800defc:	4937      	ldr	r1, [pc, #220]	; (800dfdc <_dtoa_r+0x644>)
 800defe:	2000      	movs	r0, #0
 800df00:	f7f2 f9aa 	bl	8000258 <__aeabi_dsub>
 800df04:	ec53 2b19 	vmov	r2, r3, d9
 800df08:	f7f2 fdd0 	bl	8000aac <__aeabi_dcmplt>
 800df0c:	2800      	cmp	r0, #0
 800df0e:	f040 80b6 	bne.w	800e07e <_dtoa_r+0x6e6>
 800df12:	9b02      	ldr	r3, [sp, #8]
 800df14:	429d      	cmp	r5, r3
 800df16:	f43f af7c 	beq.w	800de12 <_dtoa_r+0x47a>
 800df1a:	4b31      	ldr	r3, [pc, #196]	; (800dfe0 <_dtoa_r+0x648>)
 800df1c:	ec51 0b19 	vmov	r0, r1, d9
 800df20:	2200      	movs	r2, #0
 800df22:	f7f2 fb51 	bl	80005c8 <__aeabi_dmul>
 800df26:	4b2e      	ldr	r3, [pc, #184]	; (800dfe0 <_dtoa_r+0x648>)
 800df28:	ec41 0b19 	vmov	d9, r0, r1
 800df2c:	2200      	movs	r2, #0
 800df2e:	4640      	mov	r0, r8
 800df30:	4649      	mov	r1, r9
 800df32:	f7f2 fb49 	bl	80005c8 <__aeabi_dmul>
 800df36:	4680      	mov	r8, r0
 800df38:	4689      	mov	r9, r1
 800df3a:	e7c5      	b.n	800dec8 <_dtoa_r+0x530>
 800df3c:	ec51 0b17 	vmov	r0, r1, d7
 800df40:	f7f2 fb42 	bl	80005c8 <__aeabi_dmul>
 800df44:	9b02      	ldr	r3, [sp, #8]
 800df46:	9d00      	ldr	r5, [sp, #0]
 800df48:	930f      	str	r3, [sp, #60]	; 0x3c
 800df4a:	ec41 0b19 	vmov	d9, r0, r1
 800df4e:	4649      	mov	r1, r9
 800df50:	4640      	mov	r0, r8
 800df52:	f7f2 fde9 	bl	8000b28 <__aeabi_d2iz>
 800df56:	4606      	mov	r6, r0
 800df58:	f7f2 facc 	bl	80004f4 <__aeabi_i2d>
 800df5c:	3630      	adds	r6, #48	; 0x30
 800df5e:	4602      	mov	r2, r0
 800df60:	460b      	mov	r3, r1
 800df62:	4640      	mov	r0, r8
 800df64:	4649      	mov	r1, r9
 800df66:	f7f2 f977 	bl	8000258 <__aeabi_dsub>
 800df6a:	f805 6b01 	strb.w	r6, [r5], #1
 800df6e:	9b02      	ldr	r3, [sp, #8]
 800df70:	429d      	cmp	r5, r3
 800df72:	4680      	mov	r8, r0
 800df74:	4689      	mov	r9, r1
 800df76:	f04f 0200 	mov.w	r2, #0
 800df7a:	d124      	bne.n	800dfc6 <_dtoa_r+0x62e>
 800df7c:	4b1b      	ldr	r3, [pc, #108]	; (800dfec <_dtoa_r+0x654>)
 800df7e:	ec51 0b19 	vmov	r0, r1, d9
 800df82:	f7f2 f96b 	bl	800025c <__adddf3>
 800df86:	4602      	mov	r2, r0
 800df88:	460b      	mov	r3, r1
 800df8a:	4640      	mov	r0, r8
 800df8c:	4649      	mov	r1, r9
 800df8e:	f7f2 fdab 	bl	8000ae8 <__aeabi_dcmpgt>
 800df92:	2800      	cmp	r0, #0
 800df94:	d173      	bne.n	800e07e <_dtoa_r+0x6e6>
 800df96:	ec53 2b19 	vmov	r2, r3, d9
 800df9a:	4914      	ldr	r1, [pc, #80]	; (800dfec <_dtoa_r+0x654>)
 800df9c:	2000      	movs	r0, #0
 800df9e:	f7f2 f95b 	bl	8000258 <__aeabi_dsub>
 800dfa2:	4602      	mov	r2, r0
 800dfa4:	460b      	mov	r3, r1
 800dfa6:	4640      	mov	r0, r8
 800dfa8:	4649      	mov	r1, r9
 800dfaa:	f7f2 fd7f 	bl	8000aac <__aeabi_dcmplt>
 800dfae:	2800      	cmp	r0, #0
 800dfb0:	f43f af2f 	beq.w	800de12 <_dtoa_r+0x47a>
 800dfb4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800dfb6:	1e6b      	subs	r3, r5, #1
 800dfb8:	930f      	str	r3, [sp, #60]	; 0x3c
 800dfba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dfbe:	2b30      	cmp	r3, #48	; 0x30
 800dfc0:	d0f8      	beq.n	800dfb4 <_dtoa_r+0x61c>
 800dfc2:	46bb      	mov	fp, r7
 800dfc4:	e04a      	b.n	800e05c <_dtoa_r+0x6c4>
 800dfc6:	4b06      	ldr	r3, [pc, #24]	; (800dfe0 <_dtoa_r+0x648>)
 800dfc8:	f7f2 fafe 	bl	80005c8 <__aeabi_dmul>
 800dfcc:	4680      	mov	r8, r0
 800dfce:	4689      	mov	r9, r1
 800dfd0:	e7bd      	b.n	800df4e <_dtoa_r+0x5b6>
 800dfd2:	bf00      	nop
 800dfd4:	08010dc8 	.word	0x08010dc8
 800dfd8:	08010da0 	.word	0x08010da0
 800dfdc:	3ff00000 	.word	0x3ff00000
 800dfe0:	40240000 	.word	0x40240000
 800dfe4:	401c0000 	.word	0x401c0000
 800dfe8:	40140000 	.word	0x40140000
 800dfec:	3fe00000 	.word	0x3fe00000
 800dff0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dff4:	9d00      	ldr	r5, [sp, #0]
 800dff6:	4642      	mov	r2, r8
 800dff8:	464b      	mov	r3, r9
 800dffa:	4630      	mov	r0, r6
 800dffc:	4639      	mov	r1, r7
 800dffe:	f7f2 fc0d 	bl	800081c <__aeabi_ddiv>
 800e002:	f7f2 fd91 	bl	8000b28 <__aeabi_d2iz>
 800e006:	9001      	str	r0, [sp, #4]
 800e008:	f7f2 fa74 	bl	80004f4 <__aeabi_i2d>
 800e00c:	4642      	mov	r2, r8
 800e00e:	464b      	mov	r3, r9
 800e010:	f7f2 fada 	bl	80005c8 <__aeabi_dmul>
 800e014:	4602      	mov	r2, r0
 800e016:	460b      	mov	r3, r1
 800e018:	4630      	mov	r0, r6
 800e01a:	4639      	mov	r1, r7
 800e01c:	f7f2 f91c 	bl	8000258 <__aeabi_dsub>
 800e020:	9e01      	ldr	r6, [sp, #4]
 800e022:	9f04      	ldr	r7, [sp, #16]
 800e024:	3630      	adds	r6, #48	; 0x30
 800e026:	f805 6b01 	strb.w	r6, [r5], #1
 800e02a:	9e00      	ldr	r6, [sp, #0]
 800e02c:	1bae      	subs	r6, r5, r6
 800e02e:	42b7      	cmp	r7, r6
 800e030:	4602      	mov	r2, r0
 800e032:	460b      	mov	r3, r1
 800e034:	d134      	bne.n	800e0a0 <_dtoa_r+0x708>
 800e036:	f7f2 f911 	bl	800025c <__adddf3>
 800e03a:	4642      	mov	r2, r8
 800e03c:	464b      	mov	r3, r9
 800e03e:	4606      	mov	r6, r0
 800e040:	460f      	mov	r7, r1
 800e042:	f7f2 fd51 	bl	8000ae8 <__aeabi_dcmpgt>
 800e046:	b9c8      	cbnz	r0, 800e07c <_dtoa_r+0x6e4>
 800e048:	4642      	mov	r2, r8
 800e04a:	464b      	mov	r3, r9
 800e04c:	4630      	mov	r0, r6
 800e04e:	4639      	mov	r1, r7
 800e050:	f7f2 fd22 	bl	8000a98 <__aeabi_dcmpeq>
 800e054:	b110      	cbz	r0, 800e05c <_dtoa_r+0x6c4>
 800e056:	9b01      	ldr	r3, [sp, #4]
 800e058:	07db      	lsls	r3, r3, #31
 800e05a:	d40f      	bmi.n	800e07c <_dtoa_r+0x6e4>
 800e05c:	4651      	mov	r1, sl
 800e05e:	4620      	mov	r0, r4
 800e060:	f000 fbcc 	bl	800e7fc <_Bfree>
 800e064:	2300      	movs	r3, #0
 800e066:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e068:	702b      	strb	r3, [r5, #0]
 800e06a:	f10b 0301 	add.w	r3, fp, #1
 800e06e:	6013      	str	r3, [r2, #0]
 800e070:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e072:	2b00      	cmp	r3, #0
 800e074:	f43f ace2 	beq.w	800da3c <_dtoa_r+0xa4>
 800e078:	601d      	str	r5, [r3, #0]
 800e07a:	e4df      	b.n	800da3c <_dtoa_r+0xa4>
 800e07c:	465f      	mov	r7, fp
 800e07e:	462b      	mov	r3, r5
 800e080:	461d      	mov	r5, r3
 800e082:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e086:	2a39      	cmp	r2, #57	; 0x39
 800e088:	d106      	bne.n	800e098 <_dtoa_r+0x700>
 800e08a:	9a00      	ldr	r2, [sp, #0]
 800e08c:	429a      	cmp	r2, r3
 800e08e:	d1f7      	bne.n	800e080 <_dtoa_r+0x6e8>
 800e090:	9900      	ldr	r1, [sp, #0]
 800e092:	2230      	movs	r2, #48	; 0x30
 800e094:	3701      	adds	r7, #1
 800e096:	700a      	strb	r2, [r1, #0]
 800e098:	781a      	ldrb	r2, [r3, #0]
 800e09a:	3201      	adds	r2, #1
 800e09c:	701a      	strb	r2, [r3, #0]
 800e09e:	e790      	b.n	800dfc2 <_dtoa_r+0x62a>
 800e0a0:	4ba3      	ldr	r3, [pc, #652]	; (800e330 <_dtoa_r+0x998>)
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	f7f2 fa90 	bl	80005c8 <__aeabi_dmul>
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	4606      	mov	r6, r0
 800e0ae:	460f      	mov	r7, r1
 800e0b0:	f7f2 fcf2 	bl	8000a98 <__aeabi_dcmpeq>
 800e0b4:	2800      	cmp	r0, #0
 800e0b6:	d09e      	beq.n	800dff6 <_dtoa_r+0x65e>
 800e0b8:	e7d0      	b.n	800e05c <_dtoa_r+0x6c4>
 800e0ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e0bc:	2a00      	cmp	r2, #0
 800e0be:	f000 80ca 	beq.w	800e256 <_dtoa_r+0x8be>
 800e0c2:	9a07      	ldr	r2, [sp, #28]
 800e0c4:	2a01      	cmp	r2, #1
 800e0c6:	f300 80ad 	bgt.w	800e224 <_dtoa_r+0x88c>
 800e0ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e0cc:	2a00      	cmp	r2, #0
 800e0ce:	f000 80a5 	beq.w	800e21c <_dtoa_r+0x884>
 800e0d2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e0d6:	9e08      	ldr	r6, [sp, #32]
 800e0d8:	9d05      	ldr	r5, [sp, #20]
 800e0da:	9a05      	ldr	r2, [sp, #20]
 800e0dc:	441a      	add	r2, r3
 800e0de:	9205      	str	r2, [sp, #20]
 800e0e0:	9a06      	ldr	r2, [sp, #24]
 800e0e2:	2101      	movs	r1, #1
 800e0e4:	441a      	add	r2, r3
 800e0e6:	4620      	mov	r0, r4
 800e0e8:	9206      	str	r2, [sp, #24]
 800e0ea:	f000 fc3d 	bl	800e968 <__i2b>
 800e0ee:	4607      	mov	r7, r0
 800e0f0:	b165      	cbz	r5, 800e10c <_dtoa_r+0x774>
 800e0f2:	9b06      	ldr	r3, [sp, #24]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	dd09      	ble.n	800e10c <_dtoa_r+0x774>
 800e0f8:	42ab      	cmp	r3, r5
 800e0fa:	9a05      	ldr	r2, [sp, #20]
 800e0fc:	bfa8      	it	ge
 800e0fe:	462b      	movge	r3, r5
 800e100:	1ad2      	subs	r2, r2, r3
 800e102:	9205      	str	r2, [sp, #20]
 800e104:	9a06      	ldr	r2, [sp, #24]
 800e106:	1aed      	subs	r5, r5, r3
 800e108:	1ad3      	subs	r3, r2, r3
 800e10a:	9306      	str	r3, [sp, #24]
 800e10c:	9b08      	ldr	r3, [sp, #32]
 800e10e:	b1f3      	cbz	r3, 800e14e <_dtoa_r+0x7b6>
 800e110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e112:	2b00      	cmp	r3, #0
 800e114:	f000 80a3 	beq.w	800e25e <_dtoa_r+0x8c6>
 800e118:	2e00      	cmp	r6, #0
 800e11a:	dd10      	ble.n	800e13e <_dtoa_r+0x7a6>
 800e11c:	4639      	mov	r1, r7
 800e11e:	4632      	mov	r2, r6
 800e120:	4620      	mov	r0, r4
 800e122:	f000 fce1 	bl	800eae8 <__pow5mult>
 800e126:	4652      	mov	r2, sl
 800e128:	4601      	mov	r1, r0
 800e12a:	4607      	mov	r7, r0
 800e12c:	4620      	mov	r0, r4
 800e12e:	f000 fc31 	bl	800e994 <__multiply>
 800e132:	4651      	mov	r1, sl
 800e134:	4680      	mov	r8, r0
 800e136:	4620      	mov	r0, r4
 800e138:	f000 fb60 	bl	800e7fc <_Bfree>
 800e13c:	46c2      	mov	sl, r8
 800e13e:	9b08      	ldr	r3, [sp, #32]
 800e140:	1b9a      	subs	r2, r3, r6
 800e142:	d004      	beq.n	800e14e <_dtoa_r+0x7b6>
 800e144:	4651      	mov	r1, sl
 800e146:	4620      	mov	r0, r4
 800e148:	f000 fcce 	bl	800eae8 <__pow5mult>
 800e14c:	4682      	mov	sl, r0
 800e14e:	2101      	movs	r1, #1
 800e150:	4620      	mov	r0, r4
 800e152:	f000 fc09 	bl	800e968 <__i2b>
 800e156:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e158:	2b00      	cmp	r3, #0
 800e15a:	4606      	mov	r6, r0
 800e15c:	f340 8081 	ble.w	800e262 <_dtoa_r+0x8ca>
 800e160:	461a      	mov	r2, r3
 800e162:	4601      	mov	r1, r0
 800e164:	4620      	mov	r0, r4
 800e166:	f000 fcbf 	bl	800eae8 <__pow5mult>
 800e16a:	9b07      	ldr	r3, [sp, #28]
 800e16c:	2b01      	cmp	r3, #1
 800e16e:	4606      	mov	r6, r0
 800e170:	dd7a      	ble.n	800e268 <_dtoa_r+0x8d0>
 800e172:	f04f 0800 	mov.w	r8, #0
 800e176:	6933      	ldr	r3, [r6, #16]
 800e178:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e17c:	6918      	ldr	r0, [r3, #16]
 800e17e:	f000 fba5 	bl	800e8cc <__hi0bits>
 800e182:	f1c0 0020 	rsb	r0, r0, #32
 800e186:	9b06      	ldr	r3, [sp, #24]
 800e188:	4418      	add	r0, r3
 800e18a:	f010 001f 	ands.w	r0, r0, #31
 800e18e:	f000 8094 	beq.w	800e2ba <_dtoa_r+0x922>
 800e192:	f1c0 0320 	rsb	r3, r0, #32
 800e196:	2b04      	cmp	r3, #4
 800e198:	f340 8085 	ble.w	800e2a6 <_dtoa_r+0x90e>
 800e19c:	9b05      	ldr	r3, [sp, #20]
 800e19e:	f1c0 001c 	rsb	r0, r0, #28
 800e1a2:	4403      	add	r3, r0
 800e1a4:	9305      	str	r3, [sp, #20]
 800e1a6:	9b06      	ldr	r3, [sp, #24]
 800e1a8:	4403      	add	r3, r0
 800e1aa:	4405      	add	r5, r0
 800e1ac:	9306      	str	r3, [sp, #24]
 800e1ae:	9b05      	ldr	r3, [sp, #20]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	dd05      	ble.n	800e1c0 <_dtoa_r+0x828>
 800e1b4:	4651      	mov	r1, sl
 800e1b6:	461a      	mov	r2, r3
 800e1b8:	4620      	mov	r0, r4
 800e1ba:	f000 fcef 	bl	800eb9c <__lshift>
 800e1be:	4682      	mov	sl, r0
 800e1c0:	9b06      	ldr	r3, [sp, #24]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	dd05      	ble.n	800e1d2 <_dtoa_r+0x83a>
 800e1c6:	4631      	mov	r1, r6
 800e1c8:	461a      	mov	r2, r3
 800e1ca:	4620      	mov	r0, r4
 800e1cc:	f000 fce6 	bl	800eb9c <__lshift>
 800e1d0:	4606      	mov	r6, r0
 800e1d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d072      	beq.n	800e2be <_dtoa_r+0x926>
 800e1d8:	4631      	mov	r1, r6
 800e1da:	4650      	mov	r0, sl
 800e1dc:	f000 fd4a 	bl	800ec74 <__mcmp>
 800e1e0:	2800      	cmp	r0, #0
 800e1e2:	da6c      	bge.n	800e2be <_dtoa_r+0x926>
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	4651      	mov	r1, sl
 800e1e8:	220a      	movs	r2, #10
 800e1ea:	4620      	mov	r0, r4
 800e1ec:	f000 fb28 	bl	800e840 <__multadd>
 800e1f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e1f6:	4682      	mov	sl, r0
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	f000 81b0 	beq.w	800e55e <_dtoa_r+0xbc6>
 800e1fe:	2300      	movs	r3, #0
 800e200:	4639      	mov	r1, r7
 800e202:	220a      	movs	r2, #10
 800e204:	4620      	mov	r0, r4
 800e206:	f000 fb1b 	bl	800e840 <__multadd>
 800e20a:	9b01      	ldr	r3, [sp, #4]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	4607      	mov	r7, r0
 800e210:	f300 8096 	bgt.w	800e340 <_dtoa_r+0x9a8>
 800e214:	9b07      	ldr	r3, [sp, #28]
 800e216:	2b02      	cmp	r3, #2
 800e218:	dc59      	bgt.n	800e2ce <_dtoa_r+0x936>
 800e21a:	e091      	b.n	800e340 <_dtoa_r+0x9a8>
 800e21c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e21e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e222:	e758      	b.n	800e0d6 <_dtoa_r+0x73e>
 800e224:	9b04      	ldr	r3, [sp, #16]
 800e226:	1e5e      	subs	r6, r3, #1
 800e228:	9b08      	ldr	r3, [sp, #32]
 800e22a:	42b3      	cmp	r3, r6
 800e22c:	bfbf      	itttt	lt
 800e22e:	9b08      	ldrlt	r3, [sp, #32]
 800e230:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800e232:	9608      	strlt	r6, [sp, #32]
 800e234:	1af3      	sublt	r3, r6, r3
 800e236:	bfb4      	ite	lt
 800e238:	18d2      	addlt	r2, r2, r3
 800e23a:	1b9e      	subge	r6, r3, r6
 800e23c:	9b04      	ldr	r3, [sp, #16]
 800e23e:	bfbc      	itt	lt
 800e240:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800e242:	2600      	movlt	r6, #0
 800e244:	2b00      	cmp	r3, #0
 800e246:	bfb7      	itett	lt
 800e248:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800e24c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800e250:	1a9d      	sublt	r5, r3, r2
 800e252:	2300      	movlt	r3, #0
 800e254:	e741      	b.n	800e0da <_dtoa_r+0x742>
 800e256:	9e08      	ldr	r6, [sp, #32]
 800e258:	9d05      	ldr	r5, [sp, #20]
 800e25a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e25c:	e748      	b.n	800e0f0 <_dtoa_r+0x758>
 800e25e:	9a08      	ldr	r2, [sp, #32]
 800e260:	e770      	b.n	800e144 <_dtoa_r+0x7ac>
 800e262:	9b07      	ldr	r3, [sp, #28]
 800e264:	2b01      	cmp	r3, #1
 800e266:	dc19      	bgt.n	800e29c <_dtoa_r+0x904>
 800e268:	9b02      	ldr	r3, [sp, #8]
 800e26a:	b9bb      	cbnz	r3, 800e29c <_dtoa_r+0x904>
 800e26c:	9b03      	ldr	r3, [sp, #12]
 800e26e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e272:	b99b      	cbnz	r3, 800e29c <_dtoa_r+0x904>
 800e274:	9b03      	ldr	r3, [sp, #12]
 800e276:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e27a:	0d1b      	lsrs	r3, r3, #20
 800e27c:	051b      	lsls	r3, r3, #20
 800e27e:	b183      	cbz	r3, 800e2a2 <_dtoa_r+0x90a>
 800e280:	9b05      	ldr	r3, [sp, #20]
 800e282:	3301      	adds	r3, #1
 800e284:	9305      	str	r3, [sp, #20]
 800e286:	9b06      	ldr	r3, [sp, #24]
 800e288:	3301      	adds	r3, #1
 800e28a:	9306      	str	r3, [sp, #24]
 800e28c:	f04f 0801 	mov.w	r8, #1
 800e290:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e292:	2b00      	cmp	r3, #0
 800e294:	f47f af6f 	bne.w	800e176 <_dtoa_r+0x7de>
 800e298:	2001      	movs	r0, #1
 800e29a:	e774      	b.n	800e186 <_dtoa_r+0x7ee>
 800e29c:	f04f 0800 	mov.w	r8, #0
 800e2a0:	e7f6      	b.n	800e290 <_dtoa_r+0x8f8>
 800e2a2:	4698      	mov	r8, r3
 800e2a4:	e7f4      	b.n	800e290 <_dtoa_r+0x8f8>
 800e2a6:	d082      	beq.n	800e1ae <_dtoa_r+0x816>
 800e2a8:	9a05      	ldr	r2, [sp, #20]
 800e2aa:	331c      	adds	r3, #28
 800e2ac:	441a      	add	r2, r3
 800e2ae:	9205      	str	r2, [sp, #20]
 800e2b0:	9a06      	ldr	r2, [sp, #24]
 800e2b2:	441a      	add	r2, r3
 800e2b4:	441d      	add	r5, r3
 800e2b6:	9206      	str	r2, [sp, #24]
 800e2b8:	e779      	b.n	800e1ae <_dtoa_r+0x816>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	e7f4      	b.n	800e2a8 <_dtoa_r+0x910>
 800e2be:	9b04      	ldr	r3, [sp, #16]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	dc37      	bgt.n	800e334 <_dtoa_r+0x99c>
 800e2c4:	9b07      	ldr	r3, [sp, #28]
 800e2c6:	2b02      	cmp	r3, #2
 800e2c8:	dd34      	ble.n	800e334 <_dtoa_r+0x99c>
 800e2ca:	9b04      	ldr	r3, [sp, #16]
 800e2cc:	9301      	str	r3, [sp, #4]
 800e2ce:	9b01      	ldr	r3, [sp, #4]
 800e2d0:	b963      	cbnz	r3, 800e2ec <_dtoa_r+0x954>
 800e2d2:	4631      	mov	r1, r6
 800e2d4:	2205      	movs	r2, #5
 800e2d6:	4620      	mov	r0, r4
 800e2d8:	f000 fab2 	bl	800e840 <__multadd>
 800e2dc:	4601      	mov	r1, r0
 800e2de:	4606      	mov	r6, r0
 800e2e0:	4650      	mov	r0, sl
 800e2e2:	f000 fcc7 	bl	800ec74 <__mcmp>
 800e2e6:	2800      	cmp	r0, #0
 800e2e8:	f73f adbb 	bgt.w	800de62 <_dtoa_r+0x4ca>
 800e2ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2ee:	9d00      	ldr	r5, [sp, #0]
 800e2f0:	ea6f 0b03 	mvn.w	fp, r3
 800e2f4:	f04f 0800 	mov.w	r8, #0
 800e2f8:	4631      	mov	r1, r6
 800e2fa:	4620      	mov	r0, r4
 800e2fc:	f000 fa7e 	bl	800e7fc <_Bfree>
 800e300:	2f00      	cmp	r7, #0
 800e302:	f43f aeab 	beq.w	800e05c <_dtoa_r+0x6c4>
 800e306:	f1b8 0f00 	cmp.w	r8, #0
 800e30a:	d005      	beq.n	800e318 <_dtoa_r+0x980>
 800e30c:	45b8      	cmp	r8, r7
 800e30e:	d003      	beq.n	800e318 <_dtoa_r+0x980>
 800e310:	4641      	mov	r1, r8
 800e312:	4620      	mov	r0, r4
 800e314:	f000 fa72 	bl	800e7fc <_Bfree>
 800e318:	4639      	mov	r1, r7
 800e31a:	4620      	mov	r0, r4
 800e31c:	f000 fa6e 	bl	800e7fc <_Bfree>
 800e320:	e69c      	b.n	800e05c <_dtoa_r+0x6c4>
 800e322:	2600      	movs	r6, #0
 800e324:	4637      	mov	r7, r6
 800e326:	e7e1      	b.n	800e2ec <_dtoa_r+0x954>
 800e328:	46bb      	mov	fp, r7
 800e32a:	4637      	mov	r7, r6
 800e32c:	e599      	b.n	800de62 <_dtoa_r+0x4ca>
 800e32e:	bf00      	nop
 800e330:	40240000 	.word	0x40240000
 800e334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e336:	2b00      	cmp	r3, #0
 800e338:	f000 80c8 	beq.w	800e4cc <_dtoa_r+0xb34>
 800e33c:	9b04      	ldr	r3, [sp, #16]
 800e33e:	9301      	str	r3, [sp, #4]
 800e340:	2d00      	cmp	r5, #0
 800e342:	dd05      	ble.n	800e350 <_dtoa_r+0x9b8>
 800e344:	4639      	mov	r1, r7
 800e346:	462a      	mov	r2, r5
 800e348:	4620      	mov	r0, r4
 800e34a:	f000 fc27 	bl	800eb9c <__lshift>
 800e34e:	4607      	mov	r7, r0
 800e350:	f1b8 0f00 	cmp.w	r8, #0
 800e354:	d05b      	beq.n	800e40e <_dtoa_r+0xa76>
 800e356:	6879      	ldr	r1, [r7, #4]
 800e358:	4620      	mov	r0, r4
 800e35a:	f000 fa0f 	bl	800e77c <_Balloc>
 800e35e:	4605      	mov	r5, r0
 800e360:	b928      	cbnz	r0, 800e36e <_dtoa_r+0x9d6>
 800e362:	4b83      	ldr	r3, [pc, #524]	; (800e570 <_dtoa_r+0xbd8>)
 800e364:	4602      	mov	r2, r0
 800e366:	f240 21ef 	movw	r1, #751	; 0x2ef
 800e36a:	f7ff bb2e 	b.w	800d9ca <_dtoa_r+0x32>
 800e36e:	693a      	ldr	r2, [r7, #16]
 800e370:	3202      	adds	r2, #2
 800e372:	0092      	lsls	r2, r2, #2
 800e374:	f107 010c 	add.w	r1, r7, #12
 800e378:	300c      	adds	r0, #12
 800e37a:	f7ff fa76 	bl	800d86a <memcpy>
 800e37e:	2201      	movs	r2, #1
 800e380:	4629      	mov	r1, r5
 800e382:	4620      	mov	r0, r4
 800e384:	f000 fc0a 	bl	800eb9c <__lshift>
 800e388:	9b00      	ldr	r3, [sp, #0]
 800e38a:	3301      	adds	r3, #1
 800e38c:	9304      	str	r3, [sp, #16]
 800e38e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e392:	4413      	add	r3, r2
 800e394:	9308      	str	r3, [sp, #32]
 800e396:	9b02      	ldr	r3, [sp, #8]
 800e398:	f003 0301 	and.w	r3, r3, #1
 800e39c:	46b8      	mov	r8, r7
 800e39e:	9306      	str	r3, [sp, #24]
 800e3a0:	4607      	mov	r7, r0
 800e3a2:	9b04      	ldr	r3, [sp, #16]
 800e3a4:	4631      	mov	r1, r6
 800e3a6:	3b01      	subs	r3, #1
 800e3a8:	4650      	mov	r0, sl
 800e3aa:	9301      	str	r3, [sp, #4]
 800e3ac:	f7ff fa6b 	bl	800d886 <quorem>
 800e3b0:	4641      	mov	r1, r8
 800e3b2:	9002      	str	r0, [sp, #8]
 800e3b4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e3b8:	4650      	mov	r0, sl
 800e3ba:	f000 fc5b 	bl	800ec74 <__mcmp>
 800e3be:	463a      	mov	r2, r7
 800e3c0:	9005      	str	r0, [sp, #20]
 800e3c2:	4631      	mov	r1, r6
 800e3c4:	4620      	mov	r0, r4
 800e3c6:	f000 fc71 	bl	800ecac <__mdiff>
 800e3ca:	68c2      	ldr	r2, [r0, #12]
 800e3cc:	4605      	mov	r5, r0
 800e3ce:	bb02      	cbnz	r2, 800e412 <_dtoa_r+0xa7a>
 800e3d0:	4601      	mov	r1, r0
 800e3d2:	4650      	mov	r0, sl
 800e3d4:	f000 fc4e 	bl	800ec74 <__mcmp>
 800e3d8:	4602      	mov	r2, r0
 800e3da:	4629      	mov	r1, r5
 800e3dc:	4620      	mov	r0, r4
 800e3de:	9209      	str	r2, [sp, #36]	; 0x24
 800e3e0:	f000 fa0c 	bl	800e7fc <_Bfree>
 800e3e4:	9b07      	ldr	r3, [sp, #28]
 800e3e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e3e8:	9d04      	ldr	r5, [sp, #16]
 800e3ea:	ea43 0102 	orr.w	r1, r3, r2
 800e3ee:	9b06      	ldr	r3, [sp, #24]
 800e3f0:	4319      	orrs	r1, r3
 800e3f2:	d110      	bne.n	800e416 <_dtoa_r+0xa7e>
 800e3f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e3f8:	d029      	beq.n	800e44e <_dtoa_r+0xab6>
 800e3fa:	9b05      	ldr	r3, [sp, #20]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	dd02      	ble.n	800e406 <_dtoa_r+0xa6e>
 800e400:	9b02      	ldr	r3, [sp, #8]
 800e402:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800e406:	9b01      	ldr	r3, [sp, #4]
 800e408:	f883 9000 	strb.w	r9, [r3]
 800e40c:	e774      	b.n	800e2f8 <_dtoa_r+0x960>
 800e40e:	4638      	mov	r0, r7
 800e410:	e7ba      	b.n	800e388 <_dtoa_r+0x9f0>
 800e412:	2201      	movs	r2, #1
 800e414:	e7e1      	b.n	800e3da <_dtoa_r+0xa42>
 800e416:	9b05      	ldr	r3, [sp, #20]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	db04      	blt.n	800e426 <_dtoa_r+0xa8e>
 800e41c:	9907      	ldr	r1, [sp, #28]
 800e41e:	430b      	orrs	r3, r1
 800e420:	9906      	ldr	r1, [sp, #24]
 800e422:	430b      	orrs	r3, r1
 800e424:	d120      	bne.n	800e468 <_dtoa_r+0xad0>
 800e426:	2a00      	cmp	r2, #0
 800e428:	dded      	ble.n	800e406 <_dtoa_r+0xa6e>
 800e42a:	4651      	mov	r1, sl
 800e42c:	2201      	movs	r2, #1
 800e42e:	4620      	mov	r0, r4
 800e430:	f000 fbb4 	bl	800eb9c <__lshift>
 800e434:	4631      	mov	r1, r6
 800e436:	4682      	mov	sl, r0
 800e438:	f000 fc1c 	bl	800ec74 <__mcmp>
 800e43c:	2800      	cmp	r0, #0
 800e43e:	dc03      	bgt.n	800e448 <_dtoa_r+0xab0>
 800e440:	d1e1      	bne.n	800e406 <_dtoa_r+0xa6e>
 800e442:	f019 0f01 	tst.w	r9, #1
 800e446:	d0de      	beq.n	800e406 <_dtoa_r+0xa6e>
 800e448:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e44c:	d1d8      	bne.n	800e400 <_dtoa_r+0xa68>
 800e44e:	9a01      	ldr	r2, [sp, #4]
 800e450:	2339      	movs	r3, #57	; 0x39
 800e452:	7013      	strb	r3, [r2, #0]
 800e454:	462b      	mov	r3, r5
 800e456:	461d      	mov	r5, r3
 800e458:	3b01      	subs	r3, #1
 800e45a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e45e:	2a39      	cmp	r2, #57	; 0x39
 800e460:	d06c      	beq.n	800e53c <_dtoa_r+0xba4>
 800e462:	3201      	adds	r2, #1
 800e464:	701a      	strb	r2, [r3, #0]
 800e466:	e747      	b.n	800e2f8 <_dtoa_r+0x960>
 800e468:	2a00      	cmp	r2, #0
 800e46a:	dd07      	ble.n	800e47c <_dtoa_r+0xae4>
 800e46c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e470:	d0ed      	beq.n	800e44e <_dtoa_r+0xab6>
 800e472:	9a01      	ldr	r2, [sp, #4]
 800e474:	f109 0301 	add.w	r3, r9, #1
 800e478:	7013      	strb	r3, [r2, #0]
 800e47a:	e73d      	b.n	800e2f8 <_dtoa_r+0x960>
 800e47c:	9b04      	ldr	r3, [sp, #16]
 800e47e:	9a08      	ldr	r2, [sp, #32]
 800e480:	f803 9c01 	strb.w	r9, [r3, #-1]
 800e484:	4293      	cmp	r3, r2
 800e486:	d043      	beq.n	800e510 <_dtoa_r+0xb78>
 800e488:	4651      	mov	r1, sl
 800e48a:	2300      	movs	r3, #0
 800e48c:	220a      	movs	r2, #10
 800e48e:	4620      	mov	r0, r4
 800e490:	f000 f9d6 	bl	800e840 <__multadd>
 800e494:	45b8      	cmp	r8, r7
 800e496:	4682      	mov	sl, r0
 800e498:	f04f 0300 	mov.w	r3, #0
 800e49c:	f04f 020a 	mov.w	r2, #10
 800e4a0:	4641      	mov	r1, r8
 800e4a2:	4620      	mov	r0, r4
 800e4a4:	d107      	bne.n	800e4b6 <_dtoa_r+0xb1e>
 800e4a6:	f000 f9cb 	bl	800e840 <__multadd>
 800e4aa:	4680      	mov	r8, r0
 800e4ac:	4607      	mov	r7, r0
 800e4ae:	9b04      	ldr	r3, [sp, #16]
 800e4b0:	3301      	adds	r3, #1
 800e4b2:	9304      	str	r3, [sp, #16]
 800e4b4:	e775      	b.n	800e3a2 <_dtoa_r+0xa0a>
 800e4b6:	f000 f9c3 	bl	800e840 <__multadd>
 800e4ba:	4639      	mov	r1, r7
 800e4bc:	4680      	mov	r8, r0
 800e4be:	2300      	movs	r3, #0
 800e4c0:	220a      	movs	r2, #10
 800e4c2:	4620      	mov	r0, r4
 800e4c4:	f000 f9bc 	bl	800e840 <__multadd>
 800e4c8:	4607      	mov	r7, r0
 800e4ca:	e7f0      	b.n	800e4ae <_dtoa_r+0xb16>
 800e4cc:	9b04      	ldr	r3, [sp, #16]
 800e4ce:	9301      	str	r3, [sp, #4]
 800e4d0:	9d00      	ldr	r5, [sp, #0]
 800e4d2:	4631      	mov	r1, r6
 800e4d4:	4650      	mov	r0, sl
 800e4d6:	f7ff f9d6 	bl	800d886 <quorem>
 800e4da:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e4de:	9b00      	ldr	r3, [sp, #0]
 800e4e0:	f805 9b01 	strb.w	r9, [r5], #1
 800e4e4:	1aea      	subs	r2, r5, r3
 800e4e6:	9b01      	ldr	r3, [sp, #4]
 800e4e8:	4293      	cmp	r3, r2
 800e4ea:	dd07      	ble.n	800e4fc <_dtoa_r+0xb64>
 800e4ec:	4651      	mov	r1, sl
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	220a      	movs	r2, #10
 800e4f2:	4620      	mov	r0, r4
 800e4f4:	f000 f9a4 	bl	800e840 <__multadd>
 800e4f8:	4682      	mov	sl, r0
 800e4fa:	e7ea      	b.n	800e4d2 <_dtoa_r+0xb3a>
 800e4fc:	9b01      	ldr	r3, [sp, #4]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	bfc8      	it	gt
 800e502:	461d      	movgt	r5, r3
 800e504:	9b00      	ldr	r3, [sp, #0]
 800e506:	bfd8      	it	le
 800e508:	2501      	movle	r5, #1
 800e50a:	441d      	add	r5, r3
 800e50c:	f04f 0800 	mov.w	r8, #0
 800e510:	4651      	mov	r1, sl
 800e512:	2201      	movs	r2, #1
 800e514:	4620      	mov	r0, r4
 800e516:	f000 fb41 	bl	800eb9c <__lshift>
 800e51a:	4631      	mov	r1, r6
 800e51c:	4682      	mov	sl, r0
 800e51e:	f000 fba9 	bl	800ec74 <__mcmp>
 800e522:	2800      	cmp	r0, #0
 800e524:	dc96      	bgt.n	800e454 <_dtoa_r+0xabc>
 800e526:	d102      	bne.n	800e52e <_dtoa_r+0xb96>
 800e528:	f019 0f01 	tst.w	r9, #1
 800e52c:	d192      	bne.n	800e454 <_dtoa_r+0xabc>
 800e52e:	462b      	mov	r3, r5
 800e530:	461d      	mov	r5, r3
 800e532:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e536:	2a30      	cmp	r2, #48	; 0x30
 800e538:	d0fa      	beq.n	800e530 <_dtoa_r+0xb98>
 800e53a:	e6dd      	b.n	800e2f8 <_dtoa_r+0x960>
 800e53c:	9a00      	ldr	r2, [sp, #0]
 800e53e:	429a      	cmp	r2, r3
 800e540:	d189      	bne.n	800e456 <_dtoa_r+0xabe>
 800e542:	f10b 0b01 	add.w	fp, fp, #1
 800e546:	2331      	movs	r3, #49	; 0x31
 800e548:	e796      	b.n	800e478 <_dtoa_r+0xae0>
 800e54a:	4b0a      	ldr	r3, [pc, #40]	; (800e574 <_dtoa_r+0xbdc>)
 800e54c:	f7ff ba99 	b.w	800da82 <_dtoa_r+0xea>
 800e550:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e552:	2b00      	cmp	r3, #0
 800e554:	f47f aa6d 	bne.w	800da32 <_dtoa_r+0x9a>
 800e558:	4b07      	ldr	r3, [pc, #28]	; (800e578 <_dtoa_r+0xbe0>)
 800e55a:	f7ff ba92 	b.w	800da82 <_dtoa_r+0xea>
 800e55e:	9b01      	ldr	r3, [sp, #4]
 800e560:	2b00      	cmp	r3, #0
 800e562:	dcb5      	bgt.n	800e4d0 <_dtoa_r+0xb38>
 800e564:	9b07      	ldr	r3, [sp, #28]
 800e566:	2b02      	cmp	r3, #2
 800e568:	f73f aeb1 	bgt.w	800e2ce <_dtoa_r+0x936>
 800e56c:	e7b0      	b.n	800e4d0 <_dtoa_r+0xb38>
 800e56e:	bf00      	nop
 800e570:	08010d34 	.word	0x08010d34
 800e574:	08010c94 	.word	0x08010c94
 800e578:	08010cb8 	.word	0x08010cb8

0800e57c <_free_r>:
 800e57c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e57e:	2900      	cmp	r1, #0
 800e580:	d044      	beq.n	800e60c <_free_r+0x90>
 800e582:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e586:	9001      	str	r0, [sp, #4]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	f1a1 0404 	sub.w	r4, r1, #4
 800e58e:	bfb8      	it	lt
 800e590:	18e4      	addlt	r4, r4, r3
 800e592:	f000 f8e7 	bl	800e764 <__malloc_lock>
 800e596:	4a1e      	ldr	r2, [pc, #120]	; (800e610 <_free_r+0x94>)
 800e598:	9801      	ldr	r0, [sp, #4]
 800e59a:	6813      	ldr	r3, [r2, #0]
 800e59c:	b933      	cbnz	r3, 800e5ac <_free_r+0x30>
 800e59e:	6063      	str	r3, [r4, #4]
 800e5a0:	6014      	str	r4, [r2, #0]
 800e5a2:	b003      	add	sp, #12
 800e5a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e5a8:	f000 b8e2 	b.w	800e770 <__malloc_unlock>
 800e5ac:	42a3      	cmp	r3, r4
 800e5ae:	d908      	bls.n	800e5c2 <_free_r+0x46>
 800e5b0:	6825      	ldr	r5, [r4, #0]
 800e5b2:	1961      	adds	r1, r4, r5
 800e5b4:	428b      	cmp	r3, r1
 800e5b6:	bf01      	itttt	eq
 800e5b8:	6819      	ldreq	r1, [r3, #0]
 800e5ba:	685b      	ldreq	r3, [r3, #4]
 800e5bc:	1949      	addeq	r1, r1, r5
 800e5be:	6021      	streq	r1, [r4, #0]
 800e5c0:	e7ed      	b.n	800e59e <_free_r+0x22>
 800e5c2:	461a      	mov	r2, r3
 800e5c4:	685b      	ldr	r3, [r3, #4]
 800e5c6:	b10b      	cbz	r3, 800e5cc <_free_r+0x50>
 800e5c8:	42a3      	cmp	r3, r4
 800e5ca:	d9fa      	bls.n	800e5c2 <_free_r+0x46>
 800e5cc:	6811      	ldr	r1, [r2, #0]
 800e5ce:	1855      	adds	r5, r2, r1
 800e5d0:	42a5      	cmp	r5, r4
 800e5d2:	d10b      	bne.n	800e5ec <_free_r+0x70>
 800e5d4:	6824      	ldr	r4, [r4, #0]
 800e5d6:	4421      	add	r1, r4
 800e5d8:	1854      	adds	r4, r2, r1
 800e5da:	42a3      	cmp	r3, r4
 800e5dc:	6011      	str	r1, [r2, #0]
 800e5de:	d1e0      	bne.n	800e5a2 <_free_r+0x26>
 800e5e0:	681c      	ldr	r4, [r3, #0]
 800e5e2:	685b      	ldr	r3, [r3, #4]
 800e5e4:	6053      	str	r3, [r2, #4]
 800e5e6:	440c      	add	r4, r1
 800e5e8:	6014      	str	r4, [r2, #0]
 800e5ea:	e7da      	b.n	800e5a2 <_free_r+0x26>
 800e5ec:	d902      	bls.n	800e5f4 <_free_r+0x78>
 800e5ee:	230c      	movs	r3, #12
 800e5f0:	6003      	str	r3, [r0, #0]
 800e5f2:	e7d6      	b.n	800e5a2 <_free_r+0x26>
 800e5f4:	6825      	ldr	r5, [r4, #0]
 800e5f6:	1961      	adds	r1, r4, r5
 800e5f8:	428b      	cmp	r3, r1
 800e5fa:	bf04      	itt	eq
 800e5fc:	6819      	ldreq	r1, [r3, #0]
 800e5fe:	685b      	ldreq	r3, [r3, #4]
 800e600:	6063      	str	r3, [r4, #4]
 800e602:	bf04      	itt	eq
 800e604:	1949      	addeq	r1, r1, r5
 800e606:	6021      	streq	r1, [r4, #0]
 800e608:	6054      	str	r4, [r2, #4]
 800e60a:	e7ca      	b.n	800e5a2 <_free_r+0x26>
 800e60c:	b003      	add	sp, #12
 800e60e:	bd30      	pop	{r4, r5, pc}
 800e610:	200018ec 	.word	0x200018ec

0800e614 <malloc>:
 800e614:	4b02      	ldr	r3, [pc, #8]	; (800e620 <malloc+0xc>)
 800e616:	4601      	mov	r1, r0
 800e618:	6818      	ldr	r0, [r3, #0]
 800e61a:	f000 b823 	b.w	800e664 <_malloc_r>
 800e61e:	bf00      	nop
 800e620:	200000bc 	.word	0x200000bc

0800e624 <sbrk_aligned>:
 800e624:	b570      	push	{r4, r5, r6, lr}
 800e626:	4e0e      	ldr	r6, [pc, #56]	; (800e660 <sbrk_aligned+0x3c>)
 800e628:	460c      	mov	r4, r1
 800e62a:	6831      	ldr	r1, [r6, #0]
 800e62c:	4605      	mov	r5, r0
 800e62e:	b911      	cbnz	r1, 800e636 <sbrk_aligned+0x12>
 800e630:	f000 feca 	bl	800f3c8 <_sbrk_r>
 800e634:	6030      	str	r0, [r6, #0]
 800e636:	4621      	mov	r1, r4
 800e638:	4628      	mov	r0, r5
 800e63a:	f000 fec5 	bl	800f3c8 <_sbrk_r>
 800e63e:	1c43      	adds	r3, r0, #1
 800e640:	d00a      	beq.n	800e658 <sbrk_aligned+0x34>
 800e642:	1cc4      	adds	r4, r0, #3
 800e644:	f024 0403 	bic.w	r4, r4, #3
 800e648:	42a0      	cmp	r0, r4
 800e64a:	d007      	beq.n	800e65c <sbrk_aligned+0x38>
 800e64c:	1a21      	subs	r1, r4, r0
 800e64e:	4628      	mov	r0, r5
 800e650:	f000 feba 	bl	800f3c8 <_sbrk_r>
 800e654:	3001      	adds	r0, #1
 800e656:	d101      	bne.n	800e65c <sbrk_aligned+0x38>
 800e658:	f04f 34ff 	mov.w	r4, #4294967295
 800e65c:	4620      	mov	r0, r4
 800e65e:	bd70      	pop	{r4, r5, r6, pc}
 800e660:	200018f0 	.word	0x200018f0

0800e664 <_malloc_r>:
 800e664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e668:	1ccd      	adds	r5, r1, #3
 800e66a:	f025 0503 	bic.w	r5, r5, #3
 800e66e:	3508      	adds	r5, #8
 800e670:	2d0c      	cmp	r5, #12
 800e672:	bf38      	it	cc
 800e674:	250c      	movcc	r5, #12
 800e676:	2d00      	cmp	r5, #0
 800e678:	4607      	mov	r7, r0
 800e67a:	db01      	blt.n	800e680 <_malloc_r+0x1c>
 800e67c:	42a9      	cmp	r1, r5
 800e67e:	d905      	bls.n	800e68c <_malloc_r+0x28>
 800e680:	230c      	movs	r3, #12
 800e682:	603b      	str	r3, [r7, #0]
 800e684:	2600      	movs	r6, #0
 800e686:	4630      	mov	r0, r6
 800e688:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e68c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e760 <_malloc_r+0xfc>
 800e690:	f000 f868 	bl	800e764 <__malloc_lock>
 800e694:	f8d8 3000 	ldr.w	r3, [r8]
 800e698:	461c      	mov	r4, r3
 800e69a:	bb5c      	cbnz	r4, 800e6f4 <_malloc_r+0x90>
 800e69c:	4629      	mov	r1, r5
 800e69e:	4638      	mov	r0, r7
 800e6a0:	f7ff ffc0 	bl	800e624 <sbrk_aligned>
 800e6a4:	1c43      	adds	r3, r0, #1
 800e6a6:	4604      	mov	r4, r0
 800e6a8:	d155      	bne.n	800e756 <_malloc_r+0xf2>
 800e6aa:	f8d8 4000 	ldr.w	r4, [r8]
 800e6ae:	4626      	mov	r6, r4
 800e6b0:	2e00      	cmp	r6, #0
 800e6b2:	d145      	bne.n	800e740 <_malloc_r+0xdc>
 800e6b4:	2c00      	cmp	r4, #0
 800e6b6:	d048      	beq.n	800e74a <_malloc_r+0xe6>
 800e6b8:	6823      	ldr	r3, [r4, #0]
 800e6ba:	4631      	mov	r1, r6
 800e6bc:	4638      	mov	r0, r7
 800e6be:	eb04 0903 	add.w	r9, r4, r3
 800e6c2:	f000 fe81 	bl	800f3c8 <_sbrk_r>
 800e6c6:	4581      	cmp	r9, r0
 800e6c8:	d13f      	bne.n	800e74a <_malloc_r+0xe6>
 800e6ca:	6821      	ldr	r1, [r4, #0]
 800e6cc:	1a6d      	subs	r5, r5, r1
 800e6ce:	4629      	mov	r1, r5
 800e6d0:	4638      	mov	r0, r7
 800e6d2:	f7ff ffa7 	bl	800e624 <sbrk_aligned>
 800e6d6:	3001      	adds	r0, #1
 800e6d8:	d037      	beq.n	800e74a <_malloc_r+0xe6>
 800e6da:	6823      	ldr	r3, [r4, #0]
 800e6dc:	442b      	add	r3, r5
 800e6de:	6023      	str	r3, [r4, #0]
 800e6e0:	f8d8 3000 	ldr.w	r3, [r8]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d038      	beq.n	800e75a <_malloc_r+0xf6>
 800e6e8:	685a      	ldr	r2, [r3, #4]
 800e6ea:	42a2      	cmp	r2, r4
 800e6ec:	d12b      	bne.n	800e746 <_malloc_r+0xe2>
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	605a      	str	r2, [r3, #4]
 800e6f2:	e00f      	b.n	800e714 <_malloc_r+0xb0>
 800e6f4:	6822      	ldr	r2, [r4, #0]
 800e6f6:	1b52      	subs	r2, r2, r5
 800e6f8:	d41f      	bmi.n	800e73a <_malloc_r+0xd6>
 800e6fa:	2a0b      	cmp	r2, #11
 800e6fc:	d917      	bls.n	800e72e <_malloc_r+0xca>
 800e6fe:	1961      	adds	r1, r4, r5
 800e700:	42a3      	cmp	r3, r4
 800e702:	6025      	str	r5, [r4, #0]
 800e704:	bf18      	it	ne
 800e706:	6059      	strne	r1, [r3, #4]
 800e708:	6863      	ldr	r3, [r4, #4]
 800e70a:	bf08      	it	eq
 800e70c:	f8c8 1000 	streq.w	r1, [r8]
 800e710:	5162      	str	r2, [r4, r5]
 800e712:	604b      	str	r3, [r1, #4]
 800e714:	4638      	mov	r0, r7
 800e716:	f104 060b 	add.w	r6, r4, #11
 800e71a:	f000 f829 	bl	800e770 <__malloc_unlock>
 800e71e:	f026 0607 	bic.w	r6, r6, #7
 800e722:	1d23      	adds	r3, r4, #4
 800e724:	1af2      	subs	r2, r6, r3
 800e726:	d0ae      	beq.n	800e686 <_malloc_r+0x22>
 800e728:	1b9b      	subs	r3, r3, r6
 800e72a:	50a3      	str	r3, [r4, r2]
 800e72c:	e7ab      	b.n	800e686 <_malloc_r+0x22>
 800e72e:	42a3      	cmp	r3, r4
 800e730:	6862      	ldr	r2, [r4, #4]
 800e732:	d1dd      	bne.n	800e6f0 <_malloc_r+0x8c>
 800e734:	f8c8 2000 	str.w	r2, [r8]
 800e738:	e7ec      	b.n	800e714 <_malloc_r+0xb0>
 800e73a:	4623      	mov	r3, r4
 800e73c:	6864      	ldr	r4, [r4, #4]
 800e73e:	e7ac      	b.n	800e69a <_malloc_r+0x36>
 800e740:	4634      	mov	r4, r6
 800e742:	6876      	ldr	r6, [r6, #4]
 800e744:	e7b4      	b.n	800e6b0 <_malloc_r+0x4c>
 800e746:	4613      	mov	r3, r2
 800e748:	e7cc      	b.n	800e6e4 <_malloc_r+0x80>
 800e74a:	230c      	movs	r3, #12
 800e74c:	603b      	str	r3, [r7, #0]
 800e74e:	4638      	mov	r0, r7
 800e750:	f000 f80e 	bl	800e770 <__malloc_unlock>
 800e754:	e797      	b.n	800e686 <_malloc_r+0x22>
 800e756:	6025      	str	r5, [r4, #0]
 800e758:	e7dc      	b.n	800e714 <_malloc_r+0xb0>
 800e75a:	605b      	str	r3, [r3, #4]
 800e75c:	deff      	udf	#255	; 0xff
 800e75e:	bf00      	nop
 800e760:	200018ec 	.word	0x200018ec

0800e764 <__malloc_lock>:
 800e764:	4801      	ldr	r0, [pc, #4]	; (800e76c <__malloc_lock+0x8>)
 800e766:	f7ff b87e 	b.w	800d866 <__retarget_lock_acquire_recursive>
 800e76a:	bf00      	nop
 800e76c:	200018e8 	.word	0x200018e8

0800e770 <__malloc_unlock>:
 800e770:	4801      	ldr	r0, [pc, #4]	; (800e778 <__malloc_unlock+0x8>)
 800e772:	f7ff b879 	b.w	800d868 <__retarget_lock_release_recursive>
 800e776:	bf00      	nop
 800e778:	200018e8 	.word	0x200018e8

0800e77c <_Balloc>:
 800e77c:	b570      	push	{r4, r5, r6, lr}
 800e77e:	69c6      	ldr	r6, [r0, #28]
 800e780:	4604      	mov	r4, r0
 800e782:	460d      	mov	r5, r1
 800e784:	b976      	cbnz	r6, 800e7a4 <_Balloc+0x28>
 800e786:	2010      	movs	r0, #16
 800e788:	f7ff ff44 	bl	800e614 <malloc>
 800e78c:	4602      	mov	r2, r0
 800e78e:	61e0      	str	r0, [r4, #28]
 800e790:	b920      	cbnz	r0, 800e79c <_Balloc+0x20>
 800e792:	4b18      	ldr	r3, [pc, #96]	; (800e7f4 <_Balloc+0x78>)
 800e794:	4818      	ldr	r0, [pc, #96]	; (800e7f8 <_Balloc+0x7c>)
 800e796:	216b      	movs	r1, #107	; 0x6b
 800e798:	f000 fe26 	bl	800f3e8 <__assert_func>
 800e79c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e7a0:	6006      	str	r6, [r0, #0]
 800e7a2:	60c6      	str	r6, [r0, #12]
 800e7a4:	69e6      	ldr	r6, [r4, #28]
 800e7a6:	68f3      	ldr	r3, [r6, #12]
 800e7a8:	b183      	cbz	r3, 800e7cc <_Balloc+0x50>
 800e7aa:	69e3      	ldr	r3, [r4, #28]
 800e7ac:	68db      	ldr	r3, [r3, #12]
 800e7ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e7b2:	b9b8      	cbnz	r0, 800e7e4 <_Balloc+0x68>
 800e7b4:	2101      	movs	r1, #1
 800e7b6:	fa01 f605 	lsl.w	r6, r1, r5
 800e7ba:	1d72      	adds	r2, r6, #5
 800e7bc:	0092      	lsls	r2, r2, #2
 800e7be:	4620      	mov	r0, r4
 800e7c0:	f000 fe30 	bl	800f424 <_calloc_r>
 800e7c4:	b160      	cbz	r0, 800e7e0 <_Balloc+0x64>
 800e7c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e7ca:	e00e      	b.n	800e7ea <_Balloc+0x6e>
 800e7cc:	2221      	movs	r2, #33	; 0x21
 800e7ce:	2104      	movs	r1, #4
 800e7d0:	4620      	mov	r0, r4
 800e7d2:	f000 fe27 	bl	800f424 <_calloc_r>
 800e7d6:	69e3      	ldr	r3, [r4, #28]
 800e7d8:	60f0      	str	r0, [r6, #12]
 800e7da:	68db      	ldr	r3, [r3, #12]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d1e4      	bne.n	800e7aa <_Balloc+0x2e>
 800e7e0:	2000      	movs	r0, #0
 800e7e2:	bd70      	pop	{r4, r5, r6, pc}
 800e7e4:	6802      	ldr	r2, [r0, #0]
 800e7e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e7f0:	e7f7      	b.n	800e7e2 <_Balloc+0x66>
 800e7f2:	bf00      	nop
 800e7f4:	08010cc5 	.word	0x08010cc5
 800e7f8:	08010d45 	.word	0x08010d45

0800e7fc <_Bfree>:
 800e7fc:	b570      	push	{r4, r5, r6, lr}
 800e7fe:	69c6      	ldr	r6, [r0, #28]
 800e800:	4605      	mov	r5, r0
 800e802:	460c      	mov	r4, r1
 800e804:	b976      	cbnz	r6, 800e824 <_Bfree+0x28>
 800e806:	2010      	movs	r0, #16
 800e808:	f7ff ff04 	bl	800e614 <malloc>
 800e80c:	4602      	mov	r2, r0
 800e80e:	61e8      	str	r0, [r5, #28]
 800e810:	b920      	cbnz	r0, 800e81c <_Bfree+0x20>
 800e812:	4b09      	ldr	r3, [pc, #36]	; (800e838 <_Bfree+0x3c>)
 800e814:	4809      	ldr	r0, [pc, #36]	; (800e83c <_Bfree+0x40>)
 800e816:	218f      	movs	r1, #143	; 0x8f
 800e818:	f000 fde6 	bl	800f3e8 <__assert_func>
 800e81c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e820:	6006      	str	r6, [r0, #0]
 800e822:	60c6      	str	r6, [r0, #12]
 800e824:	b13c      	cbz	r4, 800e836 <_Bfree+0x3a>
 800e826:	69eb      	ldr	r3, [r5, #28]
 800e828:	6862      	ldr	r2, [r4, #4]
 800e82a:	68db      	ldr	r3, [r3, #12]
 800e82c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e830:	6021      	str	r1, [r4, #0]
 800e832:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e836:	bd70      	pop	{r4, r5, r6, pc}
 800e838:	08010cc5 	.word	0x08010cc5
 800e83c:	08010d45 	.word	0x08010d45

0800e840 <__multadd>:
 800e840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e844:	690d      	ldr	r5, [r1, #16]
 800e846:	4607      	mov	r7, r0
 800e848:	460c      	mov	r4, r1
 800e84a:	461e      	mov	r6, r3
 800e84c:	f101 0c14 	add.w	ip, r1, #20
 800e850:	2000      	movs	r0, #0
 800e852:	f8dc 3000 	ldr.w	r3, [ip]
 800e856:	b299      	uxth	r1, r3
 800e858:	fb02 6101 	mla	r1, r2, r1, r6
 800e85c:	0c1e      	lsrs	r6, r3, #16
 800e85e:	0c0b      	lsrs	r3, r1, #16
 800e860:	fb02 3306 	mla	r3, r2, r6, r3
 800e864:	b289      	uxth	r1, r1
 800e866:	3001      	adds	r0, #1
 800e868:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e86c:	4285      	cmp	r5, r0
 800e86e:	f84c 1b04 	str.w	r1, [ip], #4
 800e872:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e876:	dcec      	bgt.n	800e852 <__multadd+0x12>
 800e878:	b30e      	cbz	r6, 800e8be <__multadd+0x7e>
 800e87a:	68a3      	ldr	r3, [r4, #8]
 800e87c:	42ab      	cmp	r3, r5
 800e87e:	dc19      	bgt.n	800e8b4 <__multadd+0x74>
 800e880:	6861      	ldr	r1, [r4, #4]
 800e882:	4638      	mov	r0, r7
 800e884:	3101      	adds	r1, #1
 800e886:	f7ff ff79 	bl	800e77c <_Balloc>
 800e88a:	4680      	mov	r8, r0
 800e88c:	b928      	cbnz	r0, 800e89a <__multadd+0x5a>
 800e88e:	4602      	mov	r2, r0
 800e890:	4b0c      	ldr	r3, [pc, #48]	; (800e8c4 <__multadd+0x84>)
 800e892:	480d      	ldr	r0, [pc, #52]	; (800e8c8 <__multadd+0x88>)
 800e894:	21ba      	movs	r1, #186	; 0xba
 800e896:	f000 fda7 	bl	800f3e8 <__assert_func>
 800e89a:	6922      	ldr	r2, [r4, #16]
 800e89c:	3202      	adds	r2, #2
 800e89e:	f104 010c 	add.w	r1, r4, #12
 800e8a2:	0092      	lsls	r2, r2, #2
 800e8a4:	300c      	adds	r0, #12
 800e8a6:	f7fe ffe0 	bl	800d86a <memcpy>
 800e8aa:	4621      	mov	r1, r4
 800e8ac:	4638      	mov	r0, r7
 800e8ae:	f7ff ffa5 	bl	800e7fc <_Bfree>
 800e8b2:	4644      	mov	r4, r8
 800e8b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e8b8:	3501      	adds	r5, #1
 800e8ba:	615e      	str	r6, [r3, #20]
 800e8bc:	6125      	str	r5, [r4, #16]
 800e8be:	4620      	mov	r0, r4
 800e8c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8c4:	08010d34 	.word	0x08010d34
 800e8c8:	08010d45 	.word	0x08010d45

0800e8cc <__hi0bits>:
 800e8cc:	0c03      	lsrs	r3, r0, #16
 800e8ce:	041b      	lsls	r3, r3, #16
 800e8d0:	b9d3      	cbnz	r3, 800e908 <__hi0bits+0x3c>
 800e8d2:	0400      	lsls	r0, r0, #16
 800e8d4:	2310      	movs	r3, #16
 800e8d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e8da:	bf04      	itt	eq
 800e8dc:	0200      	lsleq	r0, r0, #8
 800e8de:	3308      	addeq	r3, #8
 800e8e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e8e4:	bf04      	itt	eq
 800e8e6:	0100      	lsleq	r0, r0, #4
 800e8e8:	3304      	addeq	r3, #4
 800e8ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e8ee:	bf04      	itt	eq
 800e8f0:	0080      	lsleq	r0, r0, #2
 800e8f2:	3302      	addeq	r3, #2
 800e8f4:	2800      	cmp	r0, #0
 800e8f6:	db05      	blt.n	800e904 <__hi0bits+0x38>
 800e8f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e8fc:	f103 0301 	add.w	r3, r3, #1
 800e900:	bf08      	it	eq
 800e902:	2320      	moveq	r3, #32
 800e904:	4618      	mov	r0, r3
 800e906:	4770      	bx	lr
 800e908:	2300      	movs	r3, #0
 800e90a:	e7e4      	b.n	800e8d6 <__hi0bits+0xa>

0800e90c <__lo0bits>:
 800e90c:	6803      	ldr	r3, [r0, #0]
 800e90e:	f013 0207 	ands.w	r2, r3, #7
 800e912:	d00c      	beq.n	800e92e <__lo0bits+0x22>
 800e914:	07d9      	lsls	r1, r3, #31
 800e916:	d422      	bmi.n	800e95e <__lo0bits+0x52>
 800e918:	079a      	lsls	r2, r3, #30
 800e91a:	bf49      	itett	mi
 800e91c:	085b      	lsrmi	r3, r3, #1
 800e91e:	089b      	lsrpl	r3, r3, #2
 800e920:	6003      	strmi	r3, [r0, #0]
 800e922:	2201      	movmi	r2, #1
 800e924:	bf5c      	itt	pl
 800e926:	6003      	strpl	r3, [r0, #0]
 800e928:	2202      	movpl	r2, #2
 800e92a:	4610      	mov	r0, r2
 800e92c:	4770      	bx	lr
 800e92e:	b299      	uxth	r1, r3
 800e930:	b909      	cbnz	r1, 800e936 <__lo0bits+0x2a>
 800e932:	0c1b      	lsrs	r3, r3, #16
 800e934:	2210      	movs	r2, #16
 800e936:	b2d9      	uxtb	r1, r3
 800e938:	b909      	cbnz	r1, 800e93e <__lo0bits+0x32>
 800e93a:	3208      	adds	r2, #8
 800e93c:	0a1b      	lsrs	r3, r3, #8
 800e93e:	0719      	lsls	r1, r3, #28
 800e940:	bf04      	itt	eq
 800e942:	091b      	lsreq	r3, r3, #4
 800e944:	3204      	addeq	r2, #4
 800e946:	0799      	lsls	r1, r3, #30
 800e948:	bf04      	itt	eq
 800e94a:	089b      	lsreq	r3, r3, #2
 800e94c:	3202      	addeq	r2, #2
 800e94e:	07d9      	lsls	r1, r3, #31
 800e950:	d403      	bmi.n	800e95a <__lo0bits+0x4e>
 800e952:	085b      	lsrs	r3, r3, #1
 800e954:	f102 0201 	add.w	r2, r2, #1
 800e958:	d003      	beq.n	800e962 <__lo0bits+0x56>
 800e95a:	6003      	str	r3, [r0, #0]
 800e95c:	e7e5      	b.n	800e92a <__lo0bits+0x1e>
 800e95e:	2200      	movs	r2, #0
 800e960:	e7e3      	b.n	800e92a <__lo0bits+0x1e>
 800e962:	2220      	movs	r2, #32
 800e964:	e7e1      	b.n	800e92a <__lo0bits+0x1e>
	...

0800e968 <__i2b>:
 800e968:	b510      	push	{r4, lr}
 800e96a:	460c      	mov	r4, r1
 800e96c:	2101      	movs	r1, #1
 800e96e:	f7ff ff05 	bl	800e77c <_Balloc>
 800e972:	4602      	mov	r2, r0
 800e974:	b928      	cbnz	r0, 800e982 <__i2b+0x1a>
 800e976:	4b05      	ldr	r3, [pc, #20]	; (800e98c <__i2b+0x24>)
 800e978:	4805      	ldr	r0, [pc, #20]	; (800e990 <__i2b+0x28>)
 800e97a:	f240 1145 	movw	r1, #325	; 0x145
 800e97e:	f000 fd33 	bl	800f3e8 <__assert_func>
 800e982:	2301      	movs	r3, #1
 800e984:	6144      	str	r4, [r0, #20]
 800e986:	6103      	str	r3, [r0, #16]
 800e988:	bd10      	pop	{r4, pc}
 800e98a:	bf00      	nop
 800e98c:	08010d34 	.word	0x08010d34
 800e990:	08010d45 	.word	0x08010d45

0800e994 <__multiply>:
 800e994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e998:	4691      	mov	r9, r2
 800e99a:	690a      	ldr	r2, [r1, #16]
 800e99c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e9a0:	429a      	cmp	r2, r3
 800e9a2:	bfb8      	it	lt
 800e9a4:	460b      	movlt	r3, r1
 800e9a6:	460c      	mov	r4, r1
 800e9a8:	bfbc      	itt	lt
 800e9aa:	464c      	movlt	r4, r9
 800e9ac:	4699      	movlt	r9, r3
 800e9ae:	6927      	ldr	r7, [r4, #16]
 800e9b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e9b4:	68a3      	ldr	r3, [r4, #8]
 800e9b6:	6861      	ldr	r1, [r4, #4]
 800e9b8:	eb07 060a 	add.w	r6, r7, sl
 800e9bc:	42b3      	cmp	r3, r6
 800e9be:	b085      	sub	sp, #20
 800e9c0:	bfb8      	it	lt
 800e9c2:	3101      	addlt	r1, #1
 800e9c4:	f7ff feda 	bl	800e77c <_Balloc>
 800e9c8:	b930      	cbnz	r0, 800e9d8 <__multiply+0x44>
 800e9ca:	4602      	mov	r2, r0
 800e9cc:	4b44      	ldr	r3, [pc, #272]	; (800eae0 <__multiply+0x14c>)
 800e9ce:	4845      	ldr	r0, [pc, #276]	; (800eae4 <__multiply+0x150>)
 800e9d0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e9d4:	f000 fd08 	bl	800f3e8 <__assert_func>
 800e9d8:	f100 0514 	add.w	r5, r0, #20
 800e9dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e9e0:	462b      	mov	r3, r5
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	4543      	cmp	r3, r8
 800e9e6:	d321      	bcc.n	800ea2c <__multiply+0x98>
 800e9e8:	f104 0314 	add.w	r3, r4, #20
 800e9ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e9f0:	f109 0314 	add.w	r3, r9, #20
 800e9f4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e9f8:	9202      	str	r2, [sp, #8]
 800e9fa:	1b3a      	subs	r2, r7, r4
 800e9fc:	3a15      	subs	r2, #21
 800e9fe:	f022 0203 	bic.w	r2, r2, #3
 800ea02:	3204      	adds	r2, #4
 800ea04:	f104 0115 	add.w	r1, r4, #21
 800ea08:	428f      	cmp	r7, r1
 800ea0a:	bf38      	it	cc
 800ea0c:	2204      	movcc	r2, #4
 800ea0e:	9201      	str	r2, [sp, #4]
 800ea10:	9a02      	ldr	r2, [sp, #8]
 800ea12:	9303      	str	r3, [sp, #12]
 800ea14:	429a      	cmp	r2, r3
 800ea16:	d80c      	bhi.n	800ea32 <__multiply+0x9e>
 800ea18:	2e00      	cmp	r6, #0
 800ea1a:	dd03      	ble.n	800ea24 <__multiply+0x90>
 800ea1c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d05b      	beq.n	800eadc <__multiply+0x148>
 800ea24:	6106      	str	r6, [r0, #16]
 800ea26:	b005      	add	sp, #20
 800ea28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea2c:	f843 2b04 	str.w	r2, [r3], #4
 800ea30:	e7d8      	b.n	800e9e4 <__multiply+0x50>
 800ea32:	f8b3 a000 	ldrh.w	sl, [r3]
 800ea36:	f1ba 0f00 	cmp.w	sl, #0
 800ea3a:	d024      	beq.n	800ea86 <__multiply+0xf2>
 800ea3c:	f104 0e14 	add.w	lr, r4, #20
 800ea40:	46a9      	mov	r9, r5
 800ea42:	f04f 0c00 	mov.w	ip, #0
 800ea46:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ea4a:	f8d9 1000 	ldr.w	r1, [r9]
 800ea4e:	fa1f fb82 	uxth.w	fp, r2
 800ea52:	b289      	uxth	r1, r1
 800ea54:	fb0a 110b 	mla	r1, sl, fp, r1
 800ea58:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ea5c:	f8d9 2000 	ldr.w	r2, [r9]
 800ea60:	4461      	add	r1, ip
 800ea62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ea66:	fb0a c20b 	mla	r2, sl, fp, ip
 800ea6a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ea6e:	b289      	uxth	r1, r1
 800ea70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ea74:	4577      	cmp	r7, lr
 800ea76:	f849 1b04 	str.w	r1, [r9], #4
 800ea7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ea7e:	d8e2      	bhi.n	800ea46 <__multiply+0xb2>
 800ea80:	9a01      	ldr	r2, [sp, #4]
 800ea82:	f845 c002 	str.w	ip, [r5, r2]
 800ea86:	9a03      	ldr	r2, [sp, #12]
 800ea88:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ea8c:	3304      	adds	r3, #4
 800ea8e:	f1b9 0f00 	cmp.w	r9, #0
 800ea92:	d021      	beq.n	800ead8 <__multiply+0x144>
 800ea94:	6829      	ldr	r1, [r5, #0]
 800ea96:	f104 0c14 	add.w	ip, r4, #20
 800ea9a:	46ae      	mov	lr, r5
 800ea9c:	f04f 0a00 	mov.w	sl, #0
 800eaa0:	f8bc b000 	ldrh.w	fp, [ip]
 800eaa4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800eaa8:	fb09 220b 	mla	r2, r9, fp, r2
 800eaac:	4452      	add	r2, sl
 800eaae:	b289      	uxth	r1, r1
 800eab0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800eab4:	f84e 1b04 	str.w	r1, [lr], #4
 800eab8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800eabc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800eac0:	f8be 1000 	ldrh.w	r1, [lr]
 800eac4:	fb09 110a 	mla	r1, r9, sl, r1
 800eac8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800eacc:	4567      	cmp	r7, ip
 800eace:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ead2:	d8e5      	bhi.n	800eaa0 <__multiply+0x10c>
 800ead4:	9a01      	ldr	r2, [sp, #4]
 800ead6:	50a9      	str	r1, [r5, r2]
 800ead8:	3504      	adds	r5, #4
 800eada:	e799      	b.n	800ea10 <__multiply+0x7c>
 800eadc:	3e01      	subs	r6, #1
 800eade:	e79b      	b.n	800ea18 <__multiply+0x84>
 800eae0:	08010d34 	.word	0x08010d34
 800eae4:	08010d45 	.word	0x08010d45

0800eae8 <__pow5mult>:
 800eae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eaec:	4615      	mov	r5, r2
 800eaee:	f012 0203 	ands.w	r2, r2, #3
 800eaf2:	4606      	mov	r6, r0
 800eaf4:	460f      	mov	r7, r1
 800eaf6:	d007      	beq.n	800eb08 <__pow5mult+0x20>
 800eaf8:	4c25      	ldr	r4, [pc, #148]	; (800eb90 <__pow5mult+0xa8>)
 800eafa:	3a01      	subs	r2, #1
 800eafc:	2300      	movs	r3, #0
 800eafe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800eb02:	f7ff fe9d 	bl	800e840 <__multadd>
 800eb06:	4607      	mov	r7, r0
 800eb08:	10ad      	asrs	r5, r5, #2
 800eb0a:	d03d      	beq.n	800eb88 <__pow5mult+0xa0>
 800eb0c:	69f4      	ldr	r4, [r6, #28]
 800eb0e:	b97c      	cbnz	r4, 800eb30 <__pow5mult+0x48>
 800eb10:	2010      	movs	r0, #16
 800eb12:	f7ff fd7f 	bl	800e614 <malloc>
 800eb16:	4602      	mov	r2, r0
 800eb18:	61f0      	str	r0, [r6, #28]
 800eb1a:	b928      	cbnz	r0, 800eb28 <__pow5mult+0x40>
 800eb1c:	4b1d      	ldr	r3, [pc, #116]	; (800eb94 <__pow5mult+0xac>)
 800eb1e:	481e      	ldr	r0, [pc, #120]	; (800eb98 <__pow5mult+0xb0>)
 800eb20:	f240 11b3 	movw	r1, #435	; 0x1b3
 800eb24:	f000 fc60 	bl	800f3e8 <__assert_func>
 800eb28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800eb2c:	6004      	str	r4, [r0, #0]
 800eb2e:	60c4      	str	r4, [r0, #12]
 800eb30:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800eb34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800eb38:	b94c      	cbnz	r4, 800eb4e <__pow5mult+0x66>
 800eb3a:	f240 2171 	movw	r1, #625	; 0x271
 800eb3e:	4630      	mov	r0, r6
 800eb40:	f7ff ff12 	bl	800e968 <__i2b>
 800eb44:	2300      	movs	r3, #0
 800eb46:	f8c8 0008 	str.w	r0, [r8, #8]
 800eb4a:	4604      	mov	r4, r0
 800eb4c:	6003      	str	r3, [r0, #0]
 800eb4e:	f04f 0900 	mov.w	r9, #0
 800eb52:	07eb      	lsls	r3, r5, #31
 800eb54:	d50a      	bpl.n	800eb6c <__pow5mult+0x84>
 800eb56:	4639      	mov	r1, r7
 800eb58:	4622      	mov	r2, r4
 800eb5a:	4630      	mov	r0, r6
 800eb5c:	f7ff ff1a 	bl	800e994 <__multiply>
 800eb60:	4639      	mov	r1, r7
 800eb62:	4680      	mov	r8, r0
 800eb64:	4630      	mov	r0, r6
 800eb66:	f7ff fe49 	bl	800e7fc <_Bfree>
 800eb6a:	4647      	mov	r7, r8
 800eb6c:	106d      	asrs	r5, r5, #1
 800eb6e:	d00b      	beq.n	800eb88 <__pow5mult+0xa0>
 800eb70:	6820      	ldr	r0, [r4, #0]
 800eb72:	b938      	cbnz	r0, 800eb84 <__pow5mult+0x9c>
 800eb74:	4622      	mov	r2, r4
 800eb76:	4621      	mov	r1, r4
 800eb78:	4630      	mov	r0, r6
 800eb7a:	f7ff ff0b 	bl	800e994 <__multiply>
 800eb7e:	6020      	str	r0, [r4, #0]
 800eb80:	f8c0 9000 	str.w	r9, [r0]
 800eb84:	4604      	mov	r4, r0
 800eb86:	e7e4      	b.n	800eb52 <__pow5mult+0x6a>
 800eb88:	4638      	mov	r0, r7
 800eb8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb8e:	bf00      	nop
 800eb90:	08010e90 	.word	0x08010e90
 800eb94:	08010cc5 	.word	0x08010cc5
 800eb98:	08010d45 	.word	0x08010d45

0800eb9c <__lshift>:
 800eb9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eba0:	460c      	mov	r4, r1
 800eba2:	6849      	ldr	r1, [r1, #4]
 800eba4:	6923      	ldr	r3, [r4, #16]
 800eba6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ebaa:	68a3      	ldr	r3, [r4, #8]
 800ebac:	4607      	mov	r7, r0
 800ebae:	4691      	mov	r9, r2
 800ebb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ebb4:	f108 0601 	add.w	r6, r8, #1
 800ebb8:	42b3      	cmp	r3, r6
 800ebba:	db0b      	blt.n	800ebd4 <__lshift+0x38>
 800ebbc:	4638      	mov	r0, r7
 800ebbe:	f7ff fddd 	bl	800e77c <_Balloc>
 800ebc2:	4605      	mov	r5, r0
 800ebc4:	b948      	cbnz	r0, 800ebda <__lshift+0x3e>
 800ebc6:	4602      	mov	r2, r0
 800ebc8:	4b28      	ldr	r3, [pc, #160]	; (800ec6c <__lshift+0xd0>)
 800ebca:	4829      	ldr	r0, [pc, #164]	; (800ec70 <__lshift+0xd4>)
 800ebcc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ebd0:	f000 fc0a 	bl	800f3e8 <__assert_func>
 800ebd4:	3101      	adds	r1, #1
 800ebd6:	005b      	lsls	r3, r3, #1
 800ebd8:	e7ee      	b.n	800ebb8 <__lshift+0x1c>
 800ebda:	2300      	movs	r3, #0
 800ebdc:	f100 0114 	add.w	r1, r0, #20
 800ebe0:	f100 0210 	add.w	r2, r0, #16
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	4553      	cmp	r3, sl
 800ebe8:	db33      	blt.n	800ec52 <__lshift+0xb6>
 800ebea:	6920      	ldr	r0, [r4, #16]
 800ebec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ebf0:	f104 0314 	add.w	r3, r4, #20
 800ebf4:	f019 091f 	ands.w	r9, r9, #31
 800ebf8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ebfc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ec00:	d02b      	beq.n	800ec5a <__lshift+0xbe>
 800ec02:	f1c9 0e20 	rsb	lr, r9, #32
 800ec06:	468a      	mov	sl, r1
 800ec08:	2200      	movs	r2, #0
 800ec0a:	6818      	ldr	r0, [r3, #0]
 800ec0c:	fa00 f009 	lsl.w	r0, r0, r9
 800ec10:	4310      	orrs	r0, r2
 800ec12:	f84a 0b04 	str.w	r0, [sl], #4
 800ec16:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec1a:	459c      	cmp	ip, r3
 800ec1c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ec20:	d8f3      	bhi.n	800ec0a <__lshift+0x6e>
 800ec22:	ebac 0304 	sub.w	r3, ip, r4
 800ec26:	3b15      	subs	r3, #21
 800ec28:	f023 0303 	bic.w	r3, r3, #3
 800ec2c:	3304      	adds	r3, #4
 800ec2e:	f104 0015 	add.w	r0, r4, #21
 800ec32:	4584      	cmp	ip, r0
 800ec34:	bf38      	it	cc
 800ec36:	2304      	movcc	r3, #4
 800ec38:	50ca      	str	r2, [r1, r3]
 800ec3a:	b10a      	cbz	r2, 800ec40 <__lshift+0xa4>
 800ec3c:	f108 0602 	add.w	r6, r8, #2
 800ec40:	3e01      	subs	r6, #1
 800ec42:	4638      	mov	r0, r7
 800ec44:	612e      	str	r6, [r5, #16]
 800ec46:	4621      	mov	r1, r4
 800ec48:	f7ff fdd8 	bl	800e7fc <_Bfree>
 800ec4c:	4628      	mov	r0, r5
 800ec4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec52:	f842 0f04 	str.w	r0, [r2, #4]!
 800ec56:	3301      	adds	r3, #1
 800ec58:	e7c5      	b.n	800ebe6 <__lshift+0x4a>
 800ec5a:	3904      	subs	r1, #4
 800ec5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec60:	f841 2f04 	str.w	r2, [r1, #4]!
 800ec64:	459c      	cmp	ip, r3
 800ec66:	d8f9      	bhi.n	800ec5c <__lshift+0xc0>
 800ec68:	e7ea      	b.n	800ec40 <__lshift+0xa4>
 800ec6a:	bf00      	nop
 800ec6c:	08010d34 	.word	0x08010d34
 800ec70:	08010d45 	.word	0x08010d45

0800ec74 <__mcmp>:
 800ec74:	b530      	push	{r4, r5, lr}
 800ec76:	6902      	ldr	r2, [r0, #16]
 800ec78:	690c      	ldr	r4, [r1, #16]
 800ec7a:	1b12      	subs	r2, r2, r4
 800ec7c:	d10e      	bne.n	800ec9c <__mcmp+0x28>
 800ec7e:	f100 0314 	add.w	r3, r0, #20
 800ec82:	3114      	adds	r1, #20
 800ec84:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ec88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ec8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ec90:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ec94:	42a5      	cmp	r5, r4
 800ec96:	d003      	beq.n	800eca0 <__mcmp+0x2c>
 800ec98:	d305      	bcc.n	800eca6 <__mcmp+0x32>
 800ec9a:	2201      	movs	r2, #1
 800ec9c:	4610      	mov	r0, r2
 800ec9e:	bd30      	pop	{r4, r5, pc}
 800eca0:	4283      	cmp	r3, r0
 800eca2:	d3f3      	bcc.n	800ec8c <__mcmp+0x18>
 800eca4:	e7fa      	b.n	800ec9c <__mcmp+0x28>
 800eca6:	f04f 32ff 	mov.w	r2, #4294967295
 800ecaa:	e7f7      	b.n	800ec9c <__mcmp+0x28>

0800ecac <__mdiff>:
 800ecac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecb0:	460c      	mov	r4, r1
 800ecb2:	4606      	mov	r6, r0
 800ecb4:	4611      	mov	r1, r2
 800ecb6:	4620      	mov	r0, r4
 800ecb8:	4690      	mov	r8, r2
 800ecba:	f7ff ffdb 	bl	800ec74 <__mcmp>
 800ecbe:	1e05      	subs	r5, r0, #0
 800ecc0:	d110      	bne.n	800ece4 <__mdiff+0x38>
 800ecc2:	4629      	mov	r1, r5
 800ecc4:	4630      	mov	r0, r6
 800ecc6:	f7ff fd59 	bl	800e77c <_Balloc>
 800ecca:	b930      	cbnz	r0, 800ecda <__mdiff+0x2e>
 800eccc:	4b3a      	ldr	r3, [pc, #232]	; (800edb8 <__mdiff+0x10c>)
 800ecce:	4602      	mov	r2, r0
 800ecd0:	f240 2137 	movw	r1, #567	; 0x237
 800ecd4:	4839      	ldr	r0, [pc, #228]	; (800edbc <__mdiff+0x110>)
 800ecd6:	f000 fb87 	bl	800f3e8 <__assert_func>
 800ecda:	2301      	movs	r3, #1
 800ecdc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ece0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ece4:	bfa4      	itt	ge
 800ece6:	4643      	movge	r3, r8
 800ece8:	46a0      	movge	r8, r4
 800ecea:	4630      	mov	r0, r6
 800ecec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ecf0:	bfa6      	itte	ge
 800ecf2:	461c      	movge	r4, r3
 800ecf4:	2500      	movge	r5, #0
 800ecf6:	2501      	movlt	r5, #1
 800ecf8:	f7ff fd40 	bl	800e77c <_Balloc>
 800ecfc:	b920      	cbnz	r0, 800ed08 <__mdiff+0x5c>
 800ecfe:	4b2e      	ldr	r3, [pc, #184]	; (800edb8 <__mdiff+0x10c>)
 800ed00:	4602      	mov	r2, r0
 800ed02:	f240 2145 	movw	r1, #581	; 0x245
 800ed06:	e7e5      	b.n	800ecd4 <__mdiff+0x28>
 800ed08:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ed0c:	6926      	ldr	r6, [r4, #16]
 800ed0e:	60c5      	str	r5, [r0, #12]
 800ed10:	f104 0914 	add.w	r9, r4, #20
 800ed14:	f108 0514 	add.w	r5, r8, #20
 800ed18:	f100 0e14 	add.w	lr, r0, #20
 800ed1c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ed20:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ed24:	f108 0210 	add.w	r2, r8, #16
 800ed28:	46f2      	mov	sl, lr
 800ed2a:	2100      	movs	r1, #0
 800ed2c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ed30:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ed34:	fa11 f88b 	uxtah	r8, r1, fp
 800ed38:	b299      	uxth	r1, r3
 800ed3a:	0c1b      	lsrs	r3, r3, #16
 800ed3c:	eba8 0801 	sub.w	r8, r8, r1
 800ed40:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ed44:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ed48:	fa1f f888 	uxth.w	r8, r8
 800ed4c:	1419      	asrs	r1, r3, #16
 800ed4e:	454e      	cmp	r6, r9
 800ed50:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ed54:	f84a 3b04 	str.w	r3, [sl], #4
 800ed58:	d8e8      	bhi.n	800ed2c <__mdiff+0x80>
 800ed5a:	1b33      	subs	r3, r6, r4
 800ed5c:	3b15      	subs	r3, #21
 800ed5e:	f023 0303 	bic.w	r3, r3, #3
 800ed62:	3304      	adds	r3, #4
 800ed64:	3415      	adds	r4, #21
 800ed66:	42a6      	cmp	r6, r4
 800ed68:	bf38      	it	cc
 800ed6a:	2304      	movcc	r3, #4
 800ed6c:	441d      	add	r5, r3
 800ed6e:	4473      	add	r3, lr
 800ed70:	469e      	mov	lr, r3
 800ed72:	462e      	mov	r6, r5
 800ed74:	4566      	cmp	r6, ip
 800ed76:	d30e      	bcc.n	800ed96 <__mdiff+0xea>
 800ed78:	f10c 0203 	add.w	r2, ip, #3
 800ed7c:	1b52      	subs	r2, r2, r5
 800ed7e:	f022 0203 	bic.w	r2, r2, #3
 800ed82:	3d03      	subs	r5, #3
 800ed84:	45ac      	cmp	ip, r5
 800ed86:	bf38      	it	cc
 800ed88:	2200      	movcc	r2, #0
 800ed8a:	4413      	add	r3, r2
 800ed8c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ed90:	b17a      	cbz	r2, 800edb2 <__mdiff+0x106>
 800ed92:	6107      	str	r7, [r0, #16]
 800ed94:	e7a4      	b.n	800ece0 <__mdiff+0x34>
 800ed96:	f856 8b04 	ldr.w	r8, [r6], #4
 800ed9a:	fa11 f288 	uxtah	r2, r1, r8
 800ed9e:	1414      	asrs	r4, r2, #16
 800eda0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800eda4:	b292      	uxth	r2, r2
 800eda6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800edaa:	f84e 2b04 	str.w	r2, [lr], #4
 800edae:	1421      	asrs	r1, r4, #16
 800edb0:	e7e0      	b.n	800ed74 <__mdiff+0xc8>
 800edb2:	3f01      	subs	r7, #1
 800edb4:	e7ea      	b.n	800ed8c <__mdiff+0xe0>
 800edb6:	bf00      	nop
 800edb8:	08010d34 	.word	0x08010d34
 800edbc:	08010d45 	.word	0x08010d45

0800edc0 <__d2b>:
 800edc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800edc4:	460f      	mov	r7, r1
 800edc6:	2101      	movs	r1, #1
 800edc8:	ec59 8b10 	vmov	r8, r9, d0
 800edcc:	4616      	mov	r6, r2
 800edce:	f7ff fcd5 	bl	800e77c <_Balloc>
 800edd2:	4604      	mov	r4, r0
 800edd4:	b930      	cbnz	r0, 800ede4 <__d2b+0x24>
 800edd6:	4602      	mov	r2, r0
 800edd8:	4b24      	ldr	r3, [pc, #144]	; (800ee6c <__d2b+0xac>)
 800edda:	4825      	ldr	r0, [pc, #148]	; (800ee70 <__d2b+0xb0>)
 800eddc:	f240 310f 	movw	r1, #783	; 0x30f
 800ede0:	f000 fb02 	bl	800f3e8 <__assert_func>
 800ede4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ede8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800edec:	bb2d      	cbnz	r5, 800ee3a <__d2b+0x7a>
 800edee:	9301      	str	r3, [sp, #4]
 800edf0:	f1b8 0300 	subs.w	r3, r8, #0
 800edf4:	d026      	beq.n	800ee44 <__d2b+0x84>
 800edf6:	4668      	mov	r0, sp
 800edf8:	9300      	str	r3, [sp, #0]
 800edfa:	f7ff fd87 	bl	800e90c <__lo0bits>
 800edfe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ee02:	b1e8      	cbz	r0, 800ee40 <__d2b+0x80>
 800ee04:	f1c0 0320 	rsb	r3, r0, #32
 800ee08:	fa02 f303 	lsl.w	r3, r2, r3
 800ee0c:	430b      	orrs	r3, r1
 800ee0e:	40c2      	lsrs	r2, r0
 800ee10:	6163      	str	r3, [r4, #20]
 800ee12:	9201      	str	r2, [sp, #4]
 800ee14:	9b01      	ldr	r3, [sp, #4]
 800ee16:	61a3      	str	r3, [r4, #24]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	bf14      	ite	ne
 800ee1c:	2202      	movne	r2, #2
 800ee1e:	2201      	moveq	r2, #1
 800ee20:	6122      	str	r2, [r4, #16]
 800ee22:	b1bd      	cbz	r5, 800ee54 <__d2b+0x94>
 800ee24:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ee28:	4405      	add	r5, r0
 800ee2a:	603d      	str	r5, [r7, #0]
 800ee2c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ee30:	6030      	str	r0, [r6, #0]
 800ee32:	4620      	mov	r0, r4
 800ee34:	b003      	add	sp, #12
 800ee36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ee3e:	e7d6      	b.n	800edee <__d2b+0x2e>
 800ee40:	6161      	str	r1, [r4, #20]
 800ee42:	e7e7      	b.n	800ee14 <__d2b+0x54>
 800ee44:	a801      	add	r0, sp, #4
 800ee46:	f7ff fd61 	bl	800e90c <__lo0bits>
 800ee4a:	9b01      	ldr	r3, [sp, #4]
 800ee4c:	6163      	str	r3, [r4, #20]
 800ee4e:	3020      	adds	r0, #32
 800ee50:	2201      	movs	r2, #1
 800ee52:	e7e5      	b.n	800ee20 <__d2b+0x60>
 800ee54:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ee58:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ee5c:	6038      	str	r0, [r7, #0]
 800ee5e:	6918      	ldr	r0, [r3, #16]
 800ee60:	f7ff fd34 	bl	800e8cc <__hi0bits>
 800ee64:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ee68:	e7e2      	b.n	800ee30 <__d2b+0x70>
 800ee6a:	bf00      	nop
 800ee6c:	08010d34 	.word	0x08010d34
 800ee70:	08010d45 	.word	0x08010d45

0800ee74 <__sfputc_r>:
 800ee74:	6893      	ldr	r3, [r2, #8]
 800ee76:	3b01      	subs	r3, #1
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	b410      	push	{r4}
 800ee7c:	6093      	str	r3, [r2, #8]
 800ee7e:	da08      	bge.n	800ee92 <__sfputc_r+0x1e>
 800ee80:	6994      	ldr	r4, [r2, #24]
 800ee82:	42a3      	cmp	r3, r4
 800ee84:	db01      	blt.n	800ee8a <__sfputc_r+0x16>
 800ee86:	290a      	cmp	r1, #10
 800ee88:	d103      	bne.n	800ee92 <__sfputc_r+0x1e>
 800ee8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee8e:	f7fe bbd8 	b.w	800d642 <__swbuf_r>
 800ee92:	6813      	ldr	r3, [r2, #0]
 800ee94:	1c58      	adds	r0, r3, #1
 800ee96:	6010      	str	r0, [r2, #0]
 800ee98:	7019      	strb	r1, [r3, #0]
 800ee9a:	4608      	mov	r0, r1
 800ee9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eea0:	4770      	bx	lr

0800eea2 <__sfputs_r>:
 800eea2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eea4:	4606      	mov	r6, r0
 800eea6:	460f      	mov	r7, r1
 800eea8:	4614      	mov	r4, r2
 800eeaa:	18d5      	adds	r5, r2, r3
 800eeac:	42ac      	cmp	r4, r5
 800eeae:	d101      	bne.n	800eeb4 <__sfputs_r+0x12>
 800eeb0:	2000      	movs	r0, #0
 800eeb2:	e007      	b.n	800eec4 <__sfputs_r+0x22>
 800eeb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eeb8:	463a      	mov	r2, r7
 800eeba:	4630      	mov	r0, r6
 800eebc:	f7ff ffda 	bl	800ee74 <__sfputc_r>
 800eec0:	1c43      	adds	r3, r0, #1
 800eec2:	d1f3      	bne.n	800eeac <__sfputs_r+0xa>
 800eec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eec8 <_vfiprintf_r>:
 800eec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eecc:	460d      	mov	r5, r1
 800eece:	b09d      	sub	sp, #116	; 0x74
 800eed0:	4614      	mov	r4, r2
 800eed2:	4698      	mov	r8, r3
 800eed4:	4606      	mov	r6, r0
 800eed6:	b118      	cbz	r0, 800eee0 <_vfiprintf_r+0x18>
 800eed8:	6a03      	ldr	r3, [r0, #32]
 800eeda:	b90b      	cbnz	r3, 800eee0 <_vfiprintf_r+0x18>
 800eedc:	f7fe fac2 	bl	800d464 <__sinit>
 800eee0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eee2:	07d9      	lsls	r1, r3, #31
 800eee4:	d405      	bmi.n	800eef2 <_vfiprintf_r+0x2a>
 800eee6:	89ab      	ldrh	r3, [r5, #12]
 800eee8:	059a      	lsls	r2, r3, #22
 800eeea:	d402      	bmi.n	800eef2 <_vfiprintf_r+0x2a>
 800eeec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eeee:	f7fe fcba 	bl	800d866 <__retarget_lock_acquire_recursive>
 800eef2:	89ab      	ldrh	r3, [r5, #12]
 800eef4:	071b      	lsls	r3, r3, #28
 800eef6:	d501      	bpl.n	800eefc <_vfiprintf_r+0x34>
 800eef8:	692b      	ldr	r3, [r5, #16]
 800eefa:	b99b      	cbnz	r3, 800ef24 <_vfiprintf_r+0x5c>
 800eefc:	4629      	mov	r1, r5
 800eefe:	4630      	mov	r0, r6
 800ef00:	f7fe fbdc 	bl	800d6bc <__swsetup_r>
 800ef04:	b170      	cbz	r0, 800ef24 <_vfiprintf_r+0x5c>
 800ef06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ef08:	07dc      	lsls	r4, r3, #31
 800ef0a:	d504      	bpl.n	800ef16 <_vfiprintf_r+0x4e>
 800ef0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ef10:	b01d      	add	sp, #116	; 0x74
 800ef12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef16:	89ab      	ldrh	r3, [r5, #12]
 800ef18:	0598      	lsls	r0, r3, #22
 800ef1a:	d4f7      	bmi.n	800ef0c <_vfiprintf_r+0x44>
 800ef1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ef1e:	f7fe fca3 	bl	800d868 <__retarget_lock_release_recursive>
 800ef22:	e7f3      	b.n	800ef0c <_vfiprintf_r+0x44>
 800ef24:	2300      	movs	r3, #0
 800ef26:	9309      	str	r3, [sp, #36]	; 0x24
 800ef28:	2320      	movs	r3, #32
 800ef2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ef2e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef32:	2330      	movs	r3, #48	; 0x30
 800ef34:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f0e8 <_vfiprintf_r+0x220>
 800ef38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ef3c:	f04f 0901 	mov.w	r9, #1
 800ef40:	4623      	mov	r3, r4
 800ef42:	469a      	mov	sl, r3
 800ef44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef48:	b10a      	cbz	r2, 800ef4e <_vfiprintf_r+0x86>
 800ef4a:	2a25      	cmp	r2, #37	; 0x25
 800ef4c:	d1f9      	bne.n	800ef42 <_vfiprintf_r+0x7a>
 800ef4e:	ebba 0b04 	subs.w	fp, sl, r4
 800ef52:	d00b      	beq.n	800ef6c <_vfiprintf_r+0xa4>
 800ef54:	465b      	mov	r3, fp
 800ef56:	4622      	mov	r2, r4
 800ef58:	4629      	mov	r1, r5
 800ef5a:	4630      	mov	r0, r6
 800ef5c:	f7ff ffa1 	bl	800eea2 <__sfputs_r>
 800ef60:	3001      	adds	r0, #1
 800ef62:	f000 80a9 	beq.w	800f0b8 <_vfiprintf_r+0x1f0>
 800ef66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef68:	445a      	add	r2, fp
 800ef6a:	9209      	str	r2, [sp, #36]	; 0x24
 800ef6c:	f89a 3000 	ldrb.w	r3, [sl]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	f000 80a1 	beq.w	800f0b8 <_vfiprintf_r+0x1f0>
 800ef76:	2300      	movs	r3, #0
 800ef78:	f04f 32ff 	mov.w	r2, #4294967295
 800ef7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ef80:	f10a 0a01 	add.w	sl, sl, #1
 800ef84:	9304      	str	r3, [sp, #16]
 800ef86:	9307      	str	r3, [sp, #28]
 800ef88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ef8c:	931a      	str	r3, [sp, #104]	; 0x68
 800ef8e:	4654      	mov	r4, sl
 800ef90:	2205      	movs	r2, #5
 800ef92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef96:	4854      	ldr	r0, [pc, #336]	; (800f0e8 <_vfiprintf_r+0x220>)
 800ef98:	f7f1 f902 	bl	80001a0 <memchr>
 800ef9c:	9a04      	ldr	r2, [sp, #16]
 800ef9e:	b9d8      	cbnz	r0, 800efd8 <_vfiprintf_r+0x110>
 800efa0:	06d1      	lsls	r1, r2, #27
 800efa2:	bf44      	itt	mi
 800efa4:	2320      	movmi	r3, #32
 800efa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800efaa:	0713      	lsls	r3, r2, #28
 800efac:	bf44      	itt	mi
 800efae:	232b      	movmi	r3, #43	; 0x2b
 800efb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800efb4:	f89a 3000 	ldrb.w	r3, [sl]
 800efb8:	2b2a      	cmp	r3, #42	; 0x2a
 800efba:	d015      	beq.n	800efe8 <_vfiprintf_r+0x120>
 800efbc:	9a07      	ldr	r2, [sp, #28]
 800efbe:	4654      	mov	r4, sl
 800efc0:	2000      	movs	r0, #0
 800efc2:	f04f 0c0a 	mov.w	ip, #10
 800efc6:	4621      	mov	r1, r4
 800efc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800efcc:	3b30      	subs	r3, #48	; 0x30
 800efce:	2b09      	cmp	r3, #9
 800efd0:	d94d      	bls.n	800f06e <_vfiprintf_r+0x1a6>
 800efd2:	b1b0      	cbz	r0, 800f002 <_vfiprintf_r+0x13a>
 800efd4:	9207      	str	r2, [sp, #28]
 800efd6:	e014      	b.n	800f002 <_vfiprintf_r+0x13a>
 800efd8:	eba0 0308 	sub.w	r3, r0, r8
 800efdc:	fa09 f303 	lsl.w	r3, r9, r3
 800efe0:	4313      	orrs	r3, r2
 800efe2:	9304      	str	r3, [sp, #16]
 800efe4:	46a2      	mov	sl, r4
 800efe6:	e7d2      	b.n	800ef8e <_vfiprintf_r+0xc6>
 800efe8:	9b03      	ldr	r3, [sp, #12]
 800efea:	1d19      	adds	r1, r3, #4
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	9103      	str	r1, [sp, #12]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	bfbb      	ittet	lt
 800eff4:	425b      	neglt	r3, r3
 800eff6:	f042 0202 	orrlt.w	r2, r2, #2
 800effa:	9307      	strge	r3, [sp, #28]
 800effc:	9307      	strlt	r3, [sp, #28]
 800effe:	bfb8      	it	lt
 800f000:	9204      	strlt	r2, [sp, #16]
 800f002:	7823      	ldrb	r3, [r4, #0]
 800f004:	2b2e      	cmp	r3, #46	; 0x2e
 800f006:	d10c      	bne.n	800f022 <_vfiprintf_r+0x15a>
 800f008:	7863      	ldrb	r3, [r4, #1]
 800f00a:	2b2a      	cmp	r3, #42	; 0x2a
 800f00c:	d134      	bne.n	800f078 <_vfiprintf_r+0x1b0>
 800f00e:	9b03      	ldr	r3, [sp, #12]
 800f010:	1d1a      	adds	r2, r3, #4
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	9203      	str	r2, [sp, #12]
 800f016:	2b00      	cmp	r3, #0
 800f018:	bfb8      	it	lt
 800f01a:	f04f 33ff 	movlt.w	r3, #4294967295
 800f01e:	3402      	adds	r4, #2
 800f020:	9305      	str	r3, [sp, #20]
 800f022:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f0f8 <_vfiprintf_r+0x230>
 800f026:	7821      	ldrb	r1, [r4, #0]
 800f028:	2203      	movs	r2, #3
 800f02a:	4650      	mov	r0, sl
 800f02c:	f7f1 f8b8 	bl	80001a0 <memchr>
 800f030:	b138      	cbz	r0, 800f042 <_vfiprintf_r+0x17a>
 800f032:	9b04      	ldr	r3, [sp, #16]
 800f034:	eba0 000a 	sub.w	r0, r0, sl
 800f038:	2240      	movs	r2, #64	; 0x40
 800f03a:	4082      	lsls	r2, r0
 800f03c:	4313      	orrs	r3, r2
 800f03e:	3401      	adds	r4, #1
 800f040:	9304      	str	r3, [sp, #16]
 800f042:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f046:	4829      	ldr	r0, [pc, #164]	; (800f0ec <_vfiprintf_r+0x224>)
 800f048:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f04c:	2206      	movs	r2, #6
 800f04e:	f7f1 f8a7 	bl	80001a0 <memchr>
 800f052:	2800      	cmp	r0, #0
 800f054:	d03f      	beq.n	800f0d6 <_vfiprintf_r+0x20e>
 800f056:	4b26      	ldr	r3, [pc, #152]	; (800f0f0 <_vfiprintf_r+0x228>)
 800f058:	bb1b      	cbnz	r3, 800f0a2 <_vfiprintf_r+0x1da>
 800f05a:	9b03      	ldr	r3, [sp, #12]
 800f05c:	3307      	adds	r3, #7
 800f05e:	f023 0307 	bic.w	r3, r3, #7
 800f062:	3308      	adds	r3, #8
 800f064:	9303      	str	r3, [sp, #12]
 800f066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f068:	443b      	add	r3, r7
 800f06a:	9309      	str	r3, [sp, #36]	; 0x24
 800f06c:	e768      	b.n	800ef40 <_vfiprintf_r+0x78>
 800f06e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f072:	460c      	mov	r4, r1
 800f074:	2001      	movs	r0, #1
 800f076:	e7a6      	b.n	800efc6 <_vfiprintf_r+0xfe>
 800f078:	2300      	movs	r3, #0
 800f07a:	3401      	adds	r4, #1
 800f07c:	9305      	str	r3, [sp, #20]
 800f07e:	4619      	mov	r1, r3
 800f080:	f04f 0c0a 	mov.w	ip, #10
 800f084:	4620      	mov	r0, r4
 800f086:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f08a:	3a30      	subs	r2, #48	; 0x30
 800f08c:	2a09      	cmp	r2, #9
 800f08e:	d903      	bls.n	800f098 <_vfiprintf_r+0x1d0>
 800f090:	2b00      	cmp	r3, #0
 800f092:	d0c6      	beq.n	800f022 <_vfiprintf_r+0x15a>
 800f094:	9105      	str	r1, [sp, #20]
 800f096:	e7c4      	b.n	800f022 <_vfiprintf_r+0x15a>
 800f098:	fb0c 2101 	mla	r1, ip, r1, r2
 800f09c:	4604      	mov	r4, r0
 800f09e:	2301      	movs	r3, #1
 800f0a0:	e7f0      	b.n	800f084 <_vfiprintf_r+0x1bc>
 800f0a2:	ab03      	add	r3, sp, #12
 800f0a4:	9300      	str	r3, [sp, #0]
 800f0a6:	462a      	mov	r2, r5
 800f0a8:	4b12      	ldr	r3, [pc, #72]	; (800f0f4 <_vfiprintf_r+0x22c>)
 800f0aa:	a904      	add	r1, sp, #16
 800f0ac:	4630      	mov	r0, r6
 800f0ae:	f7fd fd87 	bl	800cbc0 <_printf_float>
 800f0b2:	4607      	mov	r7, r0
 800f0b4:	1c78      	adds	r0, r7, #1
 800f0b6:	d1d6      	bne.n	800f066 <_vfiprintf_r+0x19e>
 800f0b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f0ba:	07d9      	lsls	r1, r3, #31
 800f0bc:	d405      	bmi.n	800f0ca <_vfiprintf_r+0x202>
 800f0be:	89ab      	ldrh	r3, [r5, #12]
 800f0c0:	059a      	lsls	r2, r3, #22
 800f0c2:	d402      	bmi.n	800f0ca <_vfiprintf_r+0x202>
 800f0c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f0c6:	f7fe fbcf 	bl	800d868 <__retarget_lock_release_recursive>
 800f0ca:	89ab      	ldrh	r3, [r5, #12]
 800f0cc:	065b      	lsls	r3, r3, #25
 800f0ce:	f53f af1d 	bmi.w	800ef0c <_vfiprintf_r+0x44>
 800f0d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f0d4:	e71c      	b.n	800ef10 <_vfiprintf_r+0x48>
 800f0d6:	ab03      	add	r3, sp, #12
 800f0d8:	9300      	str	r3, [sp, #0]
 800f0da:	462a      	mov	r2, r5
 800f0dc:	4b05      	ldr	r3, [pc, #20]	; (800f0f4 <_vfiprintf_r+0x22c>)
 800f0de:	a904      	add	r1, sp, #16
 800f0e0:	4630      	mov	r0, r6
 800f0e2:	f7fe f811 	bl	800d108 <_printf_i>
 800f0e6:	e7e4      	b.n	800f0b2 <_vfiprintf_r+0x1ea>
 800f0e8:	08010e9c 	.word	0x08010e9c
 800f0ec:	08010ea6 	.word	0x08010ea6
 800f0f0:	0800cbc1 	.word	0x0800cbc1
 800f0f4:	0800eea3 	.word	0x0800eea3
 800f0f8:	08010ea2 	.word	0x08010ea2

0800f0fc <__sflush_r>:
 800f0fc:	898a      	ldrh	r2, [r1, #12]
 800f0fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f102:	4605      	mov	r5, r0
 800f104:	0710      	lsls	r0, r2, #28
 800f106:	460c      	mov	r4, r1
 800f108:	d458      	bmi.n	800f1bc <__sflush_r+0xc0>
 800f10a:	684b      	ldr	r3, [r1, #4]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	dc05      	bgt.n	800f11c <__sflush_r+0x20>
 800f110:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f112:	2b00      	cmp	r3, #0
 800f114:	dc02      	bgt.n	800f11c <__sflush_r+0x20>
 800f116:	2000      	movs	r0, #0
 800f118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f11c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f11e:	2e00      	cmp	r6, #0
 800f120:	d0f9      	beq.n	800f116 <__sflush_r+0x1a>
 800f122:	2300      	movs	r3, #0
 800f124:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f128:	682f      	ldr	r7, [r5, #0]
 800f12a:	6a21      	ldr	r1, [r4, #32]
 800f12c:	602b      	str	r3, [r5, #0]
 800f12e:	d032      	beq.n	800f196 <__sflush_r+0x9a>
 800f130:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f132:	89a3      	ldrh	r3, [r4, #12]
 800f134:	075a      	lsls	r2, r3, #29
 800f136:	d505      	bpl.n	800f144 <__sflush_r+0x48>
 800f138:	6863      	ldr	r3, [r4, #4]
 800f13a:	1ac0      	subs	r0, r0, r3
 800f13c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f13e:	b10b      	cbz	r3, 800f144 <__sflush_r+0x48>
 800f140:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f142:	1ac0      	subs	r0, r0, r3
 800f144:	2300      	movs	r3, #0
 800f146:	4602      	mov	r2, r0
 800f148:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f14a:	6a21      	ldr	r1, [r4, #32]
 800f14c:	4628      	mov	r0, r5
 800f14e:	47b0      	blx	r6
 800f150:	1c43      	adds	r3, r0, #1
 800f152:	89a3      	ldrh	r3, [r4, #12]
 800f154:	d106      	bne.n	800f164 <__sflush_r+0x68>
 800f156:	6829      	ldr	r1, [r5, #0]
 800f158:	291d      	cmp	r1, #29
 800f15a:	d82b      	bhi.n	800f1b4 <__sflush_r+0xb8>
 800f15c:	4a29      	ldr	r2, [pc, #164]	; (800f204 <__sflush_r+0x108>)
 800f15e:	410a      	asrs	r2, r1
 800f160:	07d6      	lsls	r6, r2, #31
 800f162:	d427      	bmi.n	800f1b4 <__sflush_r+0xb8>
 800f164:	2200      	movs	r2, #0
 800f166:	6062      	str	r2, [r4, #4]
 800f168:	04d9      	lsls	r1, r3, #19
 800f16a:	6922      	ldr	r2, [r4, #16]
 800f16c:	6022      	str	r2, [r4, #0]
 800f16e:	d504      	bpl.n	800f17a <__sflush_r+0x7e>
 800f170:	1c42      	adds	r2, r0, #1
 800f172:	d101      	bne.n	800f178 <__sflush_r+0x7c>
 800f174:	682b      	ldr	r3, [r5, #0]
 800f176:	b903      	cbnz	r3, 800f17a <__sflush_r+0x7e>
 800f178:	6560      	str	r0, [r4, #84]	; 0x54
 800f17a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f17c:	602f      	str	r7, [r5, #0]
 800f17e:	2900      	cmp	r1, #0
 800f180:	d0c9      	beq.n	800f116 <__sflush_r+0x1a>
 800f182:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f186:	4299      	cmp	r1, r3
 800f188:	d002      	beq.n	800f190 <__sflush_r+0x94>
 800f18a:	4628      	mov	r0, r5
 800f18c:	f7ff f9f6 	bl	800e57c <_free_r>
 800f190:	2000      	movs	r0, #0
 800f192:	6360      	str	r0, [r4, #52]	; 0x34
 800f194:	e7c0      	b.n	800f118 <__sflush_r+0x1c>
 800f196:	2301      	movs	r3, #1
 800f198:	4628      	mov	r0, r5
 800f19a:	47b0      	blx	r6
 800f19c:	1c41      	adds	r1, r0, #1
 800f19e:	d1c8      	bne.n	800f132 <__sflush_r+0x36>
 800f1a0:	682b      	ldr	r3, [r5, #0]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d0c5      	beq.n	800f132 <__sflush_r+0x36>
 800f1a6:	2b1d      	cmp	r3, #29
 800f1a8:	d001      	beq.n	800f1ae <__sflush_r+0xb2>
 800f1aa:	2b16      	cmp	r3, #22
 800f1ac:	d101      	bne.n	800f1b2 <__sflush_r+0xb6>
 800f1ae:	602f      	str	r7, [r5, #0]
 800f1b0:	e7b1      	b.n	800f116 <__sflush_r+0x1a>
 800f1b2:	89a3      	ldrh	r3, [r4, #12]
 800f1b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f1b8:	81a3      	strh	r3, [r4, #12]
 800f1ba:	e7ad      	b.n	800f118 <__sflush_r+0x1c>
 800f1bc:	690f      	ldr	r7, [r1, #16]
 800f1be:	2f00      	cmp	r7, #0
 800f1c0:	d0a9      	beq.n	800f116 <__sflush_r+0x1a>
 800f1c2:	0793      	lsls	r3, r2, #30
 800f1c4:	680e      	ldr	r6, [r1, #0]
 800f1c6:	bf08      	it	eq
 800f1c8:	694b      	ldreq	r3, [r1, #20]
 800f1ca:	600f      	str	r7, [r1, #0]
 800f1cc:	bf18      	it	ne
 800f1ce:	2300      	movne	r3, #0
 800f1d0:	eba6 0807 	sub.w	r8, r6, r7
 800f1d4:	608b      	str	r3, [r1, #8]
 800f1d6:	f1b8 0f00 	cmp.w	r8, #0
 800f1da:	dd9c      	ble.n	800f116 <__sflush_r+0x1a>
 800f1dc:	6a21      	ldr	r1, [r4, #32]
 800f1de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f1e0:	4643      	mov	r3, r8
 800f1e2:	463a      	mov	r2, r7
 800f1e4:	4628      	mov	r0, r5
 800f1e6:	47b0      	blx	r6
 800f1e8:	2800      	cmp	r0, #0
 800f1ea:	dc06      	bgt.n	800f1fa <__sflush_r+0xfe>
 800f1ec:	89a3      	ldrh	r3, [r4, #12]
 800f1ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f1f2:	81a3      	strh	r3, [r4, #12]
 800f1f4:	f04f 30ff 	mov.w	r0, #4294967295
 800f1f8:	e78e      	b.n	800f118 <__sflush_r+0x1c>
 800f1fa:	4407      	add	r7, r0
 800f1fc:	eba8 0800 	sub.w	r8, r8, r0
 800f200:	e7e9      	b.n	800f1d6 <__sflush_r+0xda>
 800f202:	bf00      	nop
 800f204:	dfbffffe 	.word	0xdfbffffe

0800f208 <_fflush_r>:
 800f208:	b538      	push	{r3, r4, r5, lr}
 800f20a:	690b      	ldr	r3, [r1, #16]
 800f20c:	4605      	mov	r5, r0
 800f20e:	460c      	mov	r4, r1
 800f210:	b913      	cbnz	r3, 800f218 <_fflush_r+0x10>
 800f212:	2500      	movs	r5, #0
 800f214:	4628      	mov	r0, r5
 800f216:	bd38      	pop	{r3, r4, r5, pc}
 800f218:	b118      	cbz	r0, 800f222 <_fflush_r+0x1a>
 800f21a:	6a03      	ldr	r3, [r0, #32]
 800f21c:	b90b      	cbnz	r3, 800f222 <_fflush_r+0x1a>
 800f21e:	f7fe f921 	bl	800d464 <__sinit>
 800f222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d0f3      	beq.n	800f212 <_fflush_r+0xa>
 800f22a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f22c:	07d0      	lsls	r0, r2, #31
 800f22e:	d404      	bmi.n	800f23a <_fflush_r+0x32>
 800f230:	0599      	lsls	r1, r3, #22
 800f232:	d402      	bmi.n	800f23a <_fflush_r+0x32>
 800f234:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f236:	f7fe fb16 	bl	800d866 <__retarget_lock_acquire_recursive>
 800f23a:	4628      	mov	r0, r5
 800f23c:	4621      	mov	r1, r4
 800f23e:	f7ff ff5d 	bl	800f0fc <__sflush_r>
 800f242:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f244:	07da      	lsls	r2, r3, #31
 800f246:	4605      	mov	r5, r0
 800f248:	d4e4      	bmi.n	800f214 <_fflush_r+0xc>
 800f24a:	89a3      	ldrh	r3, [r4, #12]
 800f24c:	059b      	lsls	r3, r3, #22
 800f24e:	d4e1      	bmi.n	800f214 <_fflush_r+0xc>
 800f250:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f252:	f7fe fb09 	bl	800d868 <__retarget_lock_release_recursive>
 800f256:	e7dd      	b.n	800f214 <_fflush_r+0xc>

0800f258 <__swhatbuf_r>:
 800f258:	b570      	push	{r4, r5, r6, lr}
 800f25a:	460c      	mov	r4, r1
 800f25c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f260:	2900      	cmp	r1, #0
 800f262:	b096      	sub	sp, #88	; 0x58
 800f264:	4615      	mov	r5, r2
 800f266:	461e      	mov	r6, r3
 800f268:	da0d      	bge.n	800f286 <__swhatbuf_r+0x2e>
 800f26a:	89a3      	ldrh	r3, [r4, #12]
 800f26c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f270:	f04f 0100 	mov.w	r1, #0
 800f274:	bf0c      	ite	eq
 800f276:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f27a:	2340      	movne	r3, #64	; 0x40
 800f27c:	2000      	movs	r0, #0
 800f27e:	6031      	str	r1, [r6, #0]
 800f280:	602b      	str	r3, [r5, #0]
 800f282:	b016      	add	sp, #88	; 0x58
 800f284:	bd70      	pop	{r4, r5, r6, pc}
 800f286:	466a      	mov	r2, sp
 800f288:	f000 f87c 	bl	800f384 <_fstat_r>
 800f28c:	2800      	cmp	r0, #0
 800f28e:	dbec      	blt.n	800f26a <__swhatbuf_r+0x12>
 800f290:	9901      	ldr	r1, [sp, #4]
 800f292:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f296:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f29a:	4259      	negs	r1, r3
 800f29c:	4159      	adcs	r1, r3
 800f29e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f2a2:	e7eb      	b.n	800f27c <__swhatbuf_r+0x24>

0800f2a4 <__smakebuf_r>:
 800f2a4:	898b      	ldrh	r3, [r1, #12]
 800f2a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f2a8:	079d      	lsls	r5, r3, #30
 800f2aa:	4606      	mov	r6, r0
 800f2ac:	460c      	mov	r4, r1
 800f2ae:	d507      	bpl.n	800f2c0 <__smakebuf_r+0x1c>
 800f2b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f2b4:	6023      	str	r3, [r4, #0]
 800f2b6:	6123      	str	r3, [r4, #16]
 800f2b8:	2301      	movs	r3, #1
 800f2ba:	6163      	str	r3, [r4, #20]
 800f2bc:	b002      	add	sp, #8
 800f2be:	bd70      	pop	{r4, r5, r6, pc}
 800f2c0:	ab01      	add	r3, sp, #4
 800f2c2:	466a      	mov	r2, sp
 800f2c4:	f7ff ffc8 	bl	800f258 <__swhatbuf_r>
 800f2c8:	9900      	ldr	r1, [sp, #0]
 800f2ca:	4605      	mov	r5, r0
 800f2cc:	4630      	mov	r0, r6
 800f2ce:	f7ff f9c9 	bl	800e664 <_malloc_r>
 800f2d2:	b948      	cbnz	r0, 800f2e8 <__smakebuf_r+0x44>
 800f2d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2d8:	059a      	lsls	r2, r3, #22
 800f2da:	d4ef      	bmi.n	800f2bc <__smakebuf_r+0x18>
 800f2dc:	f023 0303 	bic.w	r3, r3, #3
 800f2e0:	f043 0302 	orr.w	r3, r3, #2
 800f2e4:	81a3      	strh	r3, [r4, #12]
 800f2e6:	e7e3      	b.n	800f2b0 <__smakebuf_r+0xc>
 800f2e8:	89a3      	ldrh	r3, [r4, #12]
 800f2ea:	6020      	str	r0, [r4, #0]
 800f2ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f2f0:	81a3      	strh	r3, [r4, #12]
 800f2f2:	9b00      	ldr	r3, [sp, #0]
 800f2f4:	6163      	str	r3, [r4, #20]
 800f2f6:	9b01      	ldr	r3, [sp, #4]
 800f2f8:	6120      	str	r0, [r4, #16]
 800f2fa:	b15b      	cbz	r3, 800f314 <__smakebuf_r+0x70>
 800f2fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f300:	4630      	mov	r0, r6
 800f302:	f000 f851 	bl	800f3a8 <_isatty_r>
 800f306:	b128      	cbz	r0, 800f314 <__smakebuf_r+0x70>
 800f308:	89a3      	ldrh	r3, [r4, #12]
 800f30a:	f023 0303 	bic.w	r3, r3, #3
 800f30e:	f043 0301 	orr.w	r3, r3, #1
 800f312:	81a3      	strh	r3, [r4, #12]
 800f314:	89a3      	ldrh	r3, [r4, #12]
 800f316:	431d      	orrs	r5, r3
 800f318:	81a5      	strh	r5, [r4, #12]
 800f31a:	e7cf      	b.n	800f2bc <__smakebuf_r+0x18>

0800f31c <_putc_r>:
 800f31c:	b570      	push	{r4, r5, r6, lr}
 800f31e:	460d      	mov	r5, r1
 800f320:	4614      	mov	r4, r2
 800f322:	4606      	mov	r6, r0
 800f324:	b118      	cbz	r0, 800f32e <_putc_r+0x12>
 800f326:	6a03      	ldr	r3, [r0, #32]
 800f328:	b90b      	cbnz	r3, 800f32e <_putc_r+0x12>
 800f32a:	f7fe f89b 	bl	800d464 <__sinit>
 800f32e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f330:	07d8      	lsls	r0, r3, #31
 800f332:	d405      	bmi.n	800f340 <_putc_r+0x24>
 800f334:	89a3      	ldrh	r3, [r4, #12]
 800f336:	0599      	lsls	r1, r3, #22
 800f338:	d402      	bmi.n	800f340 <_putc_r+0x24>
 800f33a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f33c:	f7fe fa93 	bl	800d866 <__retarget_lock_acquire_recursive>
 800f340:	68a3      	ldr	r3, [r4, #8]
 800f342:	3b01      	subs	r3, #1
 800f344:	2b00      	cmp	r3, #0
 800f346:	60a3      	str	r3, [r4, #8]
 800f348:	da05      	bge.n	800f356 <_putc_r+0x3a>
 800f34a:	69a2      	ldr	r2, [r4, #24]
 800f34c:	4293      	cmp	r3, r2
 800f34e:	db12      	blt.n	800f376 <_putc_r+0x5a>
 800f350:	b2eb      	uxtb	r3, r5
 800f352:	2b0a      	cmp	r3, #10
 800f354:	d00f      	beq.n	800f376 <_putc_r+0x5a>
 800f356:	6823      	ldr	r3, [r4, #0]
 800f358:	1c5a      	adds	r2, r3, #1
 800f35a:	6022      	str	r2, [r4, #0]
 800f35c:	701d      	strb	r5, [r3, #0]
 800f35e:	b2ed      	uxtb	r5, r5
 800f360:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f362:	07da      	lsls	r2, r3, #31
 800f364:	d405      	bmi.n	800f372 <_putc_r+0x56>
 800f366:	89a3      	ldrh	r3, [r4, #12]
 800f368:	059b      	lsls	r3, r3, #22
 800f36a:	d402      	bmi.n	800f372 <_putc_r+0x56>
 800f36c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f36e:	f7fe fa7b 	bl	800d868 <__retarget_lock_release_recursive>
 800f372:	4628      	mov	r0, r5
 800f374:	bd70      	pop	{r4, r5, r6, pc}
 800f376:	4629      	mov	r1, r5
 800f378:	4622      	mov	r2, r4
 800f37a:	4630      	mov	r0, r6
 800f37c:	f7fe f961 	bl	800d642 <__swbuf_r>
 800f380:	4605      	mov	r5, r0
 800f382:	e7ed      	b.n	800f360 <_putc_r+0x44>

0800f384 <_fstat_r>:
 800f384:	b538      	push	{r3, r4, r5, lr}
 800f386:	4d07      	ldr	r5, [pc, #28]	; (800f3a4 <_fstat_r+0x20>)
 800f388:	2300      	movs	r3, #0
 800f38a:	4604      	mov	r4, r0
 800f38c:	4608      	mov	r0, r1
 800f38e:	4611      	mov	r1, r2
 800f390:	602b      	str	r3, [r5, #0]
 800f392:	f7f3 fd89 	bl	8002ea8 <_fstat>
 800f396:	1c43      	adds	r3, r0, #1
 800f398:	d102      	bne.n	800f3a0 <_fstat_r+0x1c>
 800f39a:	682b      	ldr	r3, [r5, #0]
 800f39c:	b103      	cbz	r3, 800f3a0 <_fstat_r+0x1c>
 800f39e:	6023      	str	r3, [r4, #0]
 800f3a0:	bd38      	pop	{r3, r4, r5, pc}
 800f3a2:	bf00      	nop
 800f3a4:	200018e4 	.word	0x200018e4

0800f3a8 <_isatty_r>:
 800f3a8:	b538      	push	{r3, r4, r5, lr}
 800f3aa:	4d06      	ldr	r5, [pc, #24]	; (800f3c4 <_isatty_r+0x1c>)
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	4604      	mov	r4, r0
 800f3b0:	4608      	mov	r0, r1
 800f3b2:	602b      	str	r3, [r5, #0]
 800f3b4:	f7f3 fd88 	bl	8002ec8 <_isatty>
 800f3b8:	1c43      	adds	r3, r0, #1
 800f3ba:	d102      	bne.n	800f3c2 <_isatty_r+0x1a>
 800f3bc:	682b      	ldr	r3, [r5, #0]
 800f3be:	b103      	cbz	r3, 800f3c2 <_isatty_r+0x1a>
 800f3c0:	6023      	str	r3, [r4, #0]
 800f3c2:	bd38      	pop	{r3, r4, r5, pc}
 800f3c4:	200018e4 	.word	0x200018e4

0800f3c8 <_sbrk_r>:
 800f3c8:	b538      	push	{r3, r4, r5, lr}
 800f3ca:	4d06      	ldr	r5, [pc, #24]	; (800f3e4 <_sbrk_r+0x1c>)
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	4604      	mov	r4, r0
 800f3d0:	4608      	mov	r0, r1
 800f3d2:	602b      	str	r3, [r5, #0]
 800f3d4:	f7f3 fd90 	bl	8002ef8 <_sbrk>
 800f3d8:	1c43      	adds	r3, r0, #1
 800f3da:	d102      	bne.n	800f3e2 <_sbrk_r+0x1a>
 800f3dc:	682b      	ldr	r3, [r5, #0]
 800f3de:	b103      	cbz	r3, 800f3e2 <_sbrk_r+0x1a>
 800f3e0:	6023      	str	r3, [r4, #0]
 800f3e2:	bd38      	pop	{r3, r4, r5, pc}
 800f3e4:	200018e4 	.word	0x200018e4

0800f3e8 <__assert_func>:
 800f3e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f3ea:	4614      	mov	r4, r2
 800f3ec:	461a      	mov	r2, r3
 800f3ee:	4b09      	ldr	r3, [pc, #36]	; (800f414 <__assert_func+0x2c>)
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	4605      	mov	r5, r0
 800f3f4:	68d8      	ldr	r0, [r3, #12]
 800f3f6:	b14c      	cbz	r4, 800f40c <__assert_func+0x24>
 800f3f8:	4b07      	ldr	r3, [pc, #28]	; (800f418 <__assert_func+0x30>)
 800f3fa:	9100      	str	r1, [sp, #0]
 800f3fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f400:	4906      	ldr	r1, [pc, #24]	; (800f41c <__assert_func+0x34>)
 800f402:	462b      	mov	r3, r5
 800f404:	f000 f844 	bl	800f490 <fiprintf>
 800f408:	f000 f854 	bl	800f4b4 <abort>
 800f40c:	4b04      	ldr	r3, [pc, #16]	; (800f420 <__assert_func+0x38>)
 800f40e:	461c      	mov	r4, r3
 800f410:	e7f3      	b.n	800f3fa <__assert_func+0x12>
 800f412:	bf00      	nop
 800f414:	200000bc 	.word	0x200000bc
 800f418:	08010eb7 	.word	0x08010eb7
 800f41c:	08010ec4 	.word	0x08010ec4
 800f420:	08010ef2 	.word	0x08010ef2

0800f424 <_calloc_r>:
 800f424:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f426:	fba1 2402 	umull	r2, r4, r1, r2
 800f42a:	b94c      	cbnz	r4, 800f440 <_calloc_r+0x1c>
 800f42c:	4611      	mov	r1, r2
 800f42e:	9201      	str	r2, [sp, #4]
 800f430:	f7ff f918 	bl	800e664 <_malloc_r>
 800f434:	9a01      	ldr	r2, [sp, #4]
 800f436:	4605      	mov	r5, r0
 800f438:	b930      	cbnz	r0, 800f448 <_calloc_r+0x24>
 800f43a:	4628      	mov	r0, r5
 800f43c:	b003      	add	sp, #12
 800f43e:	bd30      	pop	{r4, r5, pc}
 800f440:	220c      	movs	r2, #12
 800f442:	6002      	str	r2, [r0, #0]
 800f444:	2500      	movs	r5, #0
 800f446:	e7f8      	b.n	800f43a <_calloc_r+0x16>
 800f448:	4621      	mov	r1, r4
 800f44a:	f7fe f98f 	bl	800d76c <memset>
 800f44e:	e7f4      	b.n	800f43a <_calloc_r+0x16>

0800f450 <__ascii_mbtowc>:
 800f450:	b082      	sub	sp, #8
 800f452:	b901      	cbnz	r1, 800f456 <__ascii_mbtowc+0x6>
 800f454:	a901      	add	r1, sp, #4
 800f456:	b142      	cbz	r2, 800f46a <__ascii_mbtowc+0x1a>
 800f458:	b14b      	cbz	r3, 800f46e <__ascii_mbtowc+0x1e>
 800f45a:	7813      	ldrb	r3, [r2, #0]
 800f45c:	600b      	str	r3, [r1, #0]
 800f45e:	7812      	ldrb	r2, [r2, #0]
 800f460:	1e10      	subs	r0, r2, #0
 800f462:	bf18      	it	ne
 800f464:	2001      	movne	r0, #1
 800f466:	b002      	add	sp, #8
 800f468:	4770      	bx	lr
 800f46a:	4610      	mov	r0, r2
 800f46c:	e7fb      	b.n	800f466 <__ascii_mbtowc+0x16>
 800f46e:	f06f 0001 	mvn.w	r0, #1
 800f472:	e7f8      	b.n	800f466 <__ascii_mbtowc+0x16>

0800f474 <__ascii_wctomb>:
 800f474:	b149      	cbz	r1, 800f48a <__ascii_wctomb+0x16>
 800f476:	2aff      	cmp	r2, #255	; 0xff
 800f478:	bf85      	ittet	hi
 800f47a:	238a      	movhi	r3, #138	; 0x8a
 800f47c:	6003      	strhi	r3, [r0, #0]
 800f47e:	700a      	strbls	r2, [r1, #0]
 800f480:	f04f 30ff 	movhi.w	r0, #4294967295
 800f484:	bf98      	it	ls
 800f486:	2001      	movls	r0, #1
 800f488:	4770      	bx	lr
 800f48a:	4608      	mov	r0, r1
 800f48c:	4770      	bx	lr
	...

0800f490 <fiprintf>:
 800f490:	b40e      	push	{r1, r2, r3}
 800f492:	b503      	push	{r0, r1, lr}
 800f494:	4601      	mov	r1, r0
 800f496:	ab03      	add	r3, sp, #12
 800f498:	4805      	ldr	r0, [pc, #20]	; (800f4b0 <fiprintf+0x20>)
 800f49a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f49e:	6800      	ldr	r0, [r0, #0]
 800f4a0:	9301      	str	r3, [sp, #4]
 800f4a2:	f7ff fd11 	bl	800eec8 <_vfiprintf_r>
 800f4a6:	b002      	add	sp, #8
 800f4a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f4ac:	b003      	add	sp, #12
 800f4ae:	4770      	bx	lr
 800f4b0:	200000bc 	.word	0x200000bc

0800f4b4 <abort>:
 800f4b4:	b508      	push	{r3, lr}
 800f4b6:	2006      	movs	r0, #6
 800f4b8:	f000 f82c 	bl	800f514 <raise>
 800f4bc:	2001      	movs	r0, #1
 800f4be:	f7f3 fcc0 	bl	8002e42 <_exit>

0800f4c2 <_raise_r>:
 800f4c2:	291f      	cmp	r1, #31
 800f4c4:	b538      	push	{r3, r4, r5, lr}
 800f4c6:	4604      	mov	r4, r0
 800f4c8:	460d      	mov	r5, r1
 800f4ca:	d904      	bls.n	800f4d6 <_raise_r+0x14>
 800f4cc:	2316      	movs	r3, #22
 800f4ce:	6003      	str	r3, [r0, #0]
 800f4d0:	f04f 30ff 	mov.w	r0, #4294967295
 800f4d4:	bd38      	pop	{r3, r4, r5, pc}
 800f4d6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f4d8:	b112      	cbz	r2, 800f4e0 <_raise_r+0x1e>
 800f4da:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f4de:	b94b      	cbnz	r3, 800f4f4 <_raise_r+0x32>
 800f4e0:	4620      	mov	r0, r4
 800f4e2:	f000 f831 	bl	800f548 <_getpid_r>
 800f4e6:	462a      	mov	r2, r5
 800f4e8:	4601      	mov	r1, r0
 800f4ea:	4620      	mov	r0, r4
 800f4ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f4f0:	f000 b818 	b.w	800f524 <_kill_r>
 800f4f4:	2b01      	cmp	r3, #1
 800f4f6:	d00a      	beq.n	800f50e <_raise_r+0x4c>
 800f4f8:	1c59      	adds	r1, r3, #1
 800f4fa:	d103      	bne.n	800f504 <_raise_r+0x42>
 800f4fc:	2316      	movs	r3, #22
 800f4fe:	6003      	str	r3, [r0, #0]
 800f500:	2001      	movs	r0, #1
 800f502:	e7e7      	b.n	800f4d4 <_raise_r+0x12>
 800f504:	2400      	movs	r4, #0
 800f506:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f50a:	4628      	mov	r0, r5
 800f50c:	4798      	blx	r3
 800f50e:	2000      	movs	r0, #0
 800f510:	e7e0      	b.n	800f4d4 <_raise_r+0x12>
	...

0800f514 <raise>:
 800f514:	4b02      	ldr	r3, [pc, #8]	; (800f520 <raise+0xc>)
 800f516:	4601      	mov	r1, r0
 800f518:	6818      	ldr	r0, [r3, #0]
 800f51a:	f7ff bfd2 	b.w	800f4c2 <_raise_r>
 800f51e:	bf00      	nop
 800f520:	200000bc 	.word	0x200000bc

0800f524 <_kill_r>:
 800f524:	b538      	push	{r3, r4, r5, lr}
 800f526:	4d07      	ldr	r5, [pc, #28]	; (800f544 <_kill_r+0x20>)
 800f528:	2300      	movs	r3, #0
 800f52a:	4604      	mov	r4, r0
 800f52c:	4608      	mov	r0, r1
 800f52e:	4611      	mov	r1, r2
 800f530:	602b      	str	r3, [r5, #0]
 800f532:	f7f3 fc76 	bl	8002e22 <_kill>
 800f536:	1c43      	adds	r3, r0, #1
 800f538:	d102      	bne.n	800f540 <_kill_r+0x1c>
 800f53a:	682b      	ldr	r3, [r5, #0]
 800f53c:	b103      	cbz	r3, 800f540 <_kill_r+0x1c>
 800f53e:	6023      	str	r3, [r4, #0]
 800f540:	bd38      	pop	{r3, r4, r5, pc}
 800f542:	bf00      	nop
 800f544:	200018e4 	.word	0x200018e4

0800f548 <_getpid_r>:
 800f548:	f7f3 bc63 	b.w	8002e12 <_getpid>

0800f54c <_init>:
 800f54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f54e:	bf00      	nop
 800f550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f552:	bc08      	pop	{r3}
 800f554:	469e      	mov	lr, r3
 800f556:	4770      	bx	lr

0800f558 <_fini>:
 800f558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f55a:	bf00      	nop
 800f55c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f55e:	bc08      	pop	{r3}
 800f560:	469e      	mov	lr, r3
 800f562:	4770      	bx	lr
