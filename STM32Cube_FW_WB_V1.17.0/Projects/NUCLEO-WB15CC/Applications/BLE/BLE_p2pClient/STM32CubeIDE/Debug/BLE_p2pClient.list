
BLE_p2pClient.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e374  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d84  0800e4b8  0800e4b8  0001e4b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f23c  0800f23c  0001f23c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f244  0800f244  0001f244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f248  0800f248  0001f248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000218  20000008  0800f24c  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 0000003c  20000220  0800f464  00020220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  2000025c  0800f4a0  0002025c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000167c  20000270  0800f4b1  00020270  2**2
                  ALLOC
 10 ._user_heap_stack 00001404  200018ec  0800f4b1  000218ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002026d  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 13 MB_MEM1       000001bc  20030028  20030028  00030000  2**2
                  ALLOC
 14 MB_MEM2       00000883  200301e4  200301e4  00030000  2**2
                  ALLOC
 15 .comment      00000043  00000000  00000000  0002029d  2**0
                  CONTENTS, READONLY
 16 .debug_info   0002cf0e  00000000  00000000  000202e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 000066e4  00000000  00000000  0004d1ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000026e0  00000000  00000000  000538d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00001d9d  00000000  00000000  00055fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00027ddc  00000000  00000000  00057d55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   000300e4  00000000  00000000  0007fb31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000d6a60  00000000  00000000  000afc15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000b2a8  00000000  00000000  00186678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 000000c8  00000000  00000000  00191920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000270 	.word	0x20000270
 800015c:	00000000 	.word	0x00000000
 8000160:	0800e49c 	.word	0x0800e49c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000274 	.word	0x20000274
 800017c:	0800e49c 	.word	0x0800e49c

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr
	...

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	; 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_uldivmod>:
 8000b78:	b953      	cbnz	r3, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7a:	b94a      	cbnz	r2, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	bf08      	it	eq
 8000b80:	2800      	cmpeq	r0, #0
 8000b82:	bf1c      	itt	ne
 8000b84:	f04f 31ff 	movne.w	r1, #4294967295
 8000b88:	f04f 30ff 	movne.w	r0, #4294967295
 8000b8c:	f000 b970 	b.w	8000e70 <__aeabi_idiv0>
 8000b90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b98:	f000 f806 	bl	8000ba8 <__udivmoddi4>
 8000b9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba4:	b004      	add	sp, #16
 8000ba6:	4770      	bx	lr

08000ba8 <__udivmoddi4>:
 8000ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bac:	9e08      	ldr	r6, [sp, #32]
 8000bae:	460d      	mov	r5, r1
 8000bb0:	4604      	mov	r4, r0
 8000bb2:	460f      	mov	r7, r1
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d14a      	bne.n	8000c4e <__udivmoddi4+0xa6>
 8000bb8:	428a      	cmp	r2, r1
 8000bba:	4694      	mov	ip, r2
 8000bbc:	d965      	bls.n	8000c8a <__udivmoddi4+0xe2>
 8000bbe:	fab2 f382 	clz	r3, r2
 8000bc2:	b143      	cbz	r3, 8000bd6 <__udivmoddi4+0x2e>
 8000bc4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bc8:	f1c3 0220 	rsb	r2, r3, #32
 8000bcc:	409f      	lsls	r7, r3
 8000bce:	fa20 f202 	lsr.w	r2, r0, r2
 8000bd2:	4317      	orrs	r7, r2
 8000bd4:	409c      	lsls	r4, r3
 8000bd6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bda:	fa1f f58c 	uxth.w	r5, ip
 8000bde:	fbb7 f1fe 	udiv	r1, r7, lr
 8000be2:	0c22      	lsrs	r2, r4, #16
 8000be4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000be8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bec:	fb01 f005 	mul.w	r0, r1, r5
 8000bf0:	4290      	cmp	r0, r2
 8000bf2:	d90a      	bls.n	8000c0a <__udivmoddi4+0x62>
 8000bf4:	eb1c 0202 	adds.w	r2, ip, r2
 8000bf8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bfc:	f080 811c 	bcs.w	8000e38 <__udivmoddi4+0x290>
 8000c00:	4290      	cmp	r0, r2
 8000c02:	f240 8119 	bls.w	8000e38 <__udivmoddi4+0x290>
 8000c06:	3902      	subs	r1, #2
 8000c08:	4462      	add	r2, ip
 8000c0a:	1a12      	subs	r2, r2, r0
 8000c0c:	b2a4      	uxth	r4, r4
 8000c0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c16:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c1a:	fb00 f505 	mul.w	r5, r0, r5
 8000c1e:	42a5      	cmp	r5, r4
 8000c20:	d90a      	bls.n	8000c38 <__udivmoddi4+0x90>
 8000c22:	eb1c 0404 	adds.w	r4, ip, r4
 8000c26:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c2a:	f080 8107 	bcs.w	8000e3c <__udivmoddi4+0x294>
 8000c2e:	42a5      	cmp	r5, r4
 8000c30:	f240 8104 	bls.w	8000e3c <__udivmoddi4+0x294>
 8000c34:	4464      	add	r4, ip
 8000c36:	3802      	subs	r0, #2
 8000c38:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c3c:	1b64      	subs	r4, r4, r5
 8000c3e:	2100      	movs	r1, #0
 8000c40:	b11e      	cbz	r6, 8000c4a <__udivmoddi4+0xa2>
 8000c42:	40dc      	lsrs	r4, r3
 8000c44:	2300      	movs	r3, #0
 8000c46:	e9c6 4300 	strd	r4, r3, [r6]
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d908      	bls.n	8000c64 <__udivmoddi4+0xbc>
 8000c52:	2e00      	cmp	r6, #0
 8000c54:	f000 80ed 	beq.w	8000e32 <__udivmoddi4+0x28a>
 8000c58:	2100      	movs	r1, #0
 8000c5a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c5e:	4608      	mov	r0, r1
 8000c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c64:	fab3 f183 	clz	r1, r3
 8000c68:	2900      	cmp	r1, #0
 8000c6a:	d149      	bne.n	8000d00 <__udivmoddi4+0x158>
 8000c6c:	42ab      	cmp	r3, r5
 8000c6e:	d302      	bcc.n	8000c76 <__udivmoddi4+0xce>
 8000c70:	4282      	cmp	r2, r0
 8000c72:	f200 80f8 	bhi.w	8000e66 <__udivmoddi4+0x2be>
 8000c76:	1a84      	subs	r4, r0, r2
 8000c78:	eb65 0203 	sbc.w	r2, r5, r3
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	4617      	mov	r7, r2
 8000c80:	2e00      	cmp	r6, #0
 8000c82:	d0e2      	beq.n	8000c4a <__udivmoddi4+0xa2>
 8000c84:	e9c6 4700 	strd	r4, r7, [r6]
 8000c88:	e7df      	b.n	8000c4a <__udivmoddi4+0xa2>
 8000c8a:	b902      	cbnz	r2, 8000c8e <__udivmoddi4+0xe6>
 8000c8c:	deff      	udf	#255	; 0xff
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8090 	bne.w	8000db8 <__udivmoddi4+0x210>
 8000c98:	1a8a      	subs	r2, r1, r2
 8000c9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ca8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cac:	0c22      	lsrs	r2, r4, #16
 8000cae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cb2:	fb0e f005 	mul.w	r0, lr, r5
 8000cb6:	4290      	cmp	r0, r2
 8000cb8:	d908      	bls.n	8000ccc <__udivmoddi4+0x124>
 8000cba:	eb1c 0202 	adds.w	r2, ip, r2
 8000cbe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x122>
 8000cc4:	4290      	cmp	r0, r2
 8000cc6:	f200 80cb 	bhi.w	8000e60 <__udivmoddi4+0x2b8>
 8000cca:	4645      	mov	r5, r8
 8000ccc:	1a12      	subs	r2, r2, r0
 8000cce:	b2a4      	uxth	r4, r4
 8000cd0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cd4:	fb07 2210 	mls	r2, r7, r0, r2
 8000cd8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cdc:	fb0e fe00 	mul.w	lr, lr, r0
 8000ce0:	45a6      	cmp	lr, r4
 8000ce2:	d908      	bls.n	8000cf6 <__udivmoddi4+0x14e>
 8000ce4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x14c>
 8000cee:	45a6      	cmp	lr, r4
 8000cf0:	f200 80bb 	bhi.w	8000e6a <__udivmoddi4+0x2c2>
 8000cf4:	4610      	mov	r0, r2
 8000cf6:	eba4 040e 	sub.w	r4, r4, lr
 8000cfa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cfe:	e79f      	b.n	8000c40 <__udivmoddi4+0x98>
 8000d00:	f1c1 0720 	rsb	r7, r1, #32
 8000d04:	408b      	lsls	r3, r1
 8000d06:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d0a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d0e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d12:	fa20 f307 	lsr.w	r3, r0, r7
 8000d16:	40fd      	lsrs	r5, r7
 8000d18:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d1c:	4323      	orrs	r3, r4
 8000d1e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d22:	fa1f fe8c 	uxth.w	lr, ip
 8000d26:	fb09 5518 	mls	r5, r9, r8, r5
 8000d2a:	0c1c      	lsrs	r4, r3, #16
 8000d2c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d30:	fb08 f50e 	mul.w	r5, r8, lr
 8000d34:	42a5      	cmp	r5, r4
 8000d36:	fa02 f201 	lsl.w	r2, r2, r1
 8000d3a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d3e:	d90b      	bls.n	8000d58 <__udivmoddi4+0x1b0>
 8000d40:	eb1c 0404 	adds.w	r4, ip, r4
 8000d44:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d48:	f080 8088 	bcs.w	8000e5c <__udivmoddi4+0x2b4>
 8000d4c:	42a5      	cmp	r5, r4
 8000d4e:	f240 8085 	bls.w	8000e5c <__udivmoddi4+0x2b4>
 8000d52:	f1a8 0802 	sub.w	r8, r8, #2
 8000d56:	4464      	add	r4, ip
 8000d58:	1b64      	subs	r4, r4, r5
 8000d5a:	b29d      	uxth	r5, r3
 8000d5c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d60:	fb09 4413 	mls	r4, r9, r3, r4
 8000d64:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d68:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	d908      	bls.n	8000d82 <__udivmoddi4+0x1da>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d78:	d26c      	bcs.n	8000e54 <__udivmoddi4+0x2ac>
 8000d7a:	45a6      	cmp	lr, r4
 8000d7c:	d96a      	bls.n	8000e54 <__udivmoddi4+0x2ac>
 8000d7e:	3b02      	subs	r3, #2
 8000d80:	4464      	add	r4, ip
 8000d82:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d86:	fba3 9502 	umull	r9, r5, r3, r2
 8000d8a:	eba4 040e 	sub.w	r4, r4, lr
 8000d8e:	42ac      	cmp	r4, r5
 8000d90:	46c8      	mov	r8, r9
 8000d92:	46ae      	mov	lr, r5
 8000d94:	d356      	bcc.n	8000e44 <__udivmoddi4+0x29c>
 8000d96:	d053      	beq.n	8000e40 <__udivmoddi4+0x298>
 8000d98:	b156      	cbz	r6, 8000db0 <__udivmoddi4+0x208>
 8000d9a:	ebb0 0208 	subs.w	r2, r0, r8
 8000d9e:	eb64 040e 	sbc.w	r4, r4, lr
 8000da2:	fa04 f707 	lsl.w	r7, r4, r7
 8000da6:	40ca      	lsrs	r2, r1
 8000da8:	40cc      	lsrs	r4, r1
 8000daa:	4317      	orrs	r7, r2
 8000dac:	e9c6 7400 	strd	r7, r4, [r6]
 8000db0:	4618      	mov	r0, r3
 8000db2:	2100      	movs	r1, #0
 8000db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db8:	f1c3 0120 	rsb	r1, r3, #32
 8000dbc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dc0:	fa20 f201 	lsr.w	r2, r0, r1
 8000dc4:	fa25 f101 	lsr.w	r1, r5, r1
 8000dc8:	409d      	lsls	r5, r3
 8000dca:	432a      	orrs	r2, r5
 8000dcc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd0:	fa1f fe8c 	uxth.w	lr, ip
 8000dd4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ddc:	0c11      	lsrs	r1, r2, #16
 8000dde:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000de2:	fb00 f50e 	mul.w	r5, r0, lr
 8000de6:	428d      	cmp	r5, r1
 8000de8:	fa04 f403 	lsl.w	r4, r4, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x258>
 8000dee:	eb1c 0101 	adds.w	r1, ip, r1
 8000df2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000df6:	d22f      	bcs.n	8000e58 <__udivmoddi4+0x2b0>
 8000df8:	428d      	cmp	r5, r1
 8000dfa:	d92d      	bls.n	8000e58 <__udivmoddi4+0x2b0>
 8000dfc:	3802      	subs	r0, #2
 8000dfe:	4461      	add	r1, ip
 8000e00:	1b49      	subs	r1, r1, r5
 8000e02:	b292      	uxth	r2, r2
 8000e04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e08:	fb07 1115 	mls	r1, r7, r5, r1
 8000e0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e10:	fb05 f10e 	mul.w	r1, r5, lr
 8000e14:	4291      	cmp	r1, r2
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x282>
 8000e18:	eb1c 0202 	adds.w	r2, ip, r2
 8000e1c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e20:	d216      	bcs.n	8000e50 <__udivmoddi4+0x2a8>
 8000e22:	4291      	cmp	r1, r2
 8000e24:	d914      	bls.n	8000e50 <__udivmoddi4+0x2a8>
 8000e26:	3d02      	subs	r5, #2
 8000e28:	4462      	add	r2, ip
 8000e2a:	1a52      	subs	r2, r2, r1
 8000e2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e30:	e738      	b.n	8000ca4 <__udivmoddi4+0xfc>
 8000e32:	4631      	mov	r1, r6
 8000e34:	4630      	mov	r0, r6
 8000e36:	e708      	b.n	8000c4a <__udivmoddi4+0xa2>
 8000e38:	4639      	mov	r1, r7
 8000e3a:	e6e6      	b.n	8000c0a <__udivmoddi4+0x62>
 8000e3c:	4610      	mov	r0, r2
 8000e3e:	e6fb      	b.n	8000c38 <__udivmoddi4+0x90>
 8000e40:	4548      	cmp	r0, r9
 8000e42:	d2a9      	bcs.n	8000d98 <__udivmoddi4+0x1f0>
 8000e44:	ebb9 0802 	subs.w	r8, r9, r2
 8000e48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	e7a3      	b.n	8000d98 <__udivmoddi4+0x1f0>
 8000e50:	4645      	mov	r5, r8
 8000e52:	e7ea      	b.n	8000e2a <__udivmoddi4+0x282>
 8000e54:	462b      	mov	r3, r5
 8000e56:	e794      	b.n	8000d82 <__udivmoddi4+0x1da>
 8000e58:	4640      	mov	r0, r8
 8000e5a:	e7d1      	b.n	8000e00 <__udivmoddi4+0x258>
 8000e5c:	46d0      	mov	r8, sl
 8000e5e:	e77b      	b.n	8000d58 <__udivmoddi4+0x1b0>
 8000e60:	3d02      	subs	r5, #2
 8000e62:	4462      	add	r2, ip
 8000e64:	e732      	b.n	8000ccc <__udivmoddi4+0x124>
 8000e66:	4608      	mov	r0, r1
 8000e68:	e70a      	b.n	8000c80 <__udivmoddi4+0xd8>
 8000e6a:	4464      	add	r4, ip
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	e742      	b.n	8000cf6 <__udivmoddi4+0x14e>

08000e70 <__aeabi_idiv0>:
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop

08000e74 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <LL_EXTI_EnableIT_32_63+0x24>)
 8000e7e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000e82:	4905      	ldr	r1, [pc, #20]	; (8000e98 <LL_EXTI_EnableIT_32_63+0x24>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	58000800 	.word	0x58000800

08000e9c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ea8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000eaa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
}
 8000ec2:	bf00      	nop
 8000ec4:	3714      	adds	r7, #20
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b085      	sub	sp, #20
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eda:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000ede:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eee:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
}
 8000efa:	bf00      	nop
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000f0a:	f003 f89b 	bl	8004044 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000f0e:	f003 f89f 	bl	8004050 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000f12:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000f16:	f7ff ffad 	bl	8000e74 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000f1a:	f008 fc81 	bl	8009820 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8000f1e:	f000 f821 	bl	8000f64 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000f22:	f000 f8c1 	bl	80010a8 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000f26:	bf00      	nop
}
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000f2c:	b5b0      	push	{r4, r5, r7, lr}
 8000f2e:	b088      	sub	sp, #32
 8000f30:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000f32:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <APPD_EnableCPU2+0x34>)
 8000f34:	1d3c      	adds	r4, r7, #4
 8000f36:	461d      	mov	r5, r3
 8000f38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f3c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f40:	c403      	stmia	r4!, {r0, r1}
 8000f42:	8022      	strh	r2, [r4, #0]
 8000f44:	3402      	adds	r4, #2
 8000f46:	0c13      	lsrs	r3, r2, #16
 8000f48:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000f4a:	f00a f897 	bl	800b07c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	4618      	mov	r0, r3
 8000f52:	f008 fede 	bl	8009d12 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000f56:	bf00      	nop
}
 8000f58:	3720      	adds	r7, #32
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bdb0      	pop	{r4, r5, r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	0800e4b8 	.word	0x0800e4b8

08000f64 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000f84:	2300      	movs	r3, #0
 8000f86:	77fb      	strb	r3, [r7, #31]
 8000f88:	e036      	b.n	8000ff8 <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000f8a:	7ffb      	ldrb	r3, [r7, #31]
 8000f8c:	4a43      	ldr	r2, [pc, #268]	; (800109c <APPD_SetCPU2GpioConfig+0x138>)
 8000f8e:	00db      	lsls	r3, r3, #3
 8000f90:	4413      	add	r3, r2
 8000f92:	799b      	ldrb	r3, [r3, #6]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d02c      	beq.n	8000ff2 <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000f98:	7ffb      	ldrb	r3, [r7, #31]
 8000f9a:	4a40      	ldr	r2, [pc, #256]	; (800109c <APPD_SetCPU2GpioConfig+0x138>)
 8000f9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000fa0:	4a3f      	ldr	r2, [pc, #252]	; (80010a0 <APPD_SetCPU2GpioConfig+0x13c>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d01b      	beq.n	8000fde <APPD_SetCPU2GpioConfig+0x7a>
 8000fa6:	4a3e      	ldr	r2, [pc, #248]	; (80010a0 <APPD_SetCPU2GpioConfig+0x13c>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d821      	bhi.n	8000ff0 <APPD_SetCPU2GpioConfig+0x8c>
 8000fac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fb0:	d003      	beq.n	8000fba <APPD_SetCPU2GpioConfig+0x56>
 8000fb2:	4a3c      	ldr	r2, [pc, #240]	; (80010a4 <APPD_SetCPU2GpioConfig+0x140>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d009      	beq.n	8000fcc <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 8000fb8:	e01a      	b.n	8000ff0 <APPD_SetCPU2GpioConfig+0x8c>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000fba:	7ffb      	ldrb	r3, [r7, #31]
 8000fbc:	4a37      	ldr	r2, [pc, #220]	; (800109c <APPD_SetCPU2GpioConfig+0x138>)
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	4413      	add	r3, r2
 8000fc2:	889a      	ldrh	r2, [r3, #4]
 8000fc4:	8bbb      	ldrh	r3, [r7, #28]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	83bb      	strh	r3, [r7, #28]
          break;
 8000fca:	e012      	b.n	8000ff2 <APPD_SetCPU2GpioConfig+0x8e>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000fcc:	7ffb      	ldrb	r3, [r7, #31]
 8000fce:	4a33      	ldr	r2, [pc, #204]	; (800109c <APPD_SetCPU2GpioConfig+0x138>)
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	4413      	add	r3, r2
 8000fd4:	889a      	ldrh	r2, [r3, #4]
 8000fd6:	8b7b      	ldrh	r3, [r7, #26]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	837b      	strh	r3, [r7, #26]
          break;
 8000fdc:	e009      	b.n	8000ff2 <APPD_SetCPU2GpioConfig+0x8e>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000fde:	7ffb      	ldrb	r3, [r7, #31]
 8000fe0:	4a2e      	ldr	r2, [pc, #184]	; (800109c <APPD_SetCPU2GpioConfig+0x138>)
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	4413      	add	r3, r2
 8000fe6:	889a      	ldrh	r2, [r3, #4]
 8000fe8:	8b3b      	ldrh	r3, [r7, #24]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	833b      	strh	r3, [r7, #24]
          break;
 8000fee:	e000      	b.n	8000ff2 <APPD_SetCPU2GpioConfig+0x8e>
          break;
 8000ff0:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000ff2:	7ffb      	ldrb	r3, [r7, #31]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	77fb      	strb	r3, [r7, #31]
 8000ff8:	7ffb      	ldrb	r3, [r7, #31]
 8000ffa:	2b25      	cmp	r3, #37	; 0x25
 8000ffc:	d9c5      	bls.n	8000f8a <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8001002:	2301      	movs	r3, #1
 8001004:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001006:	2303      	movs	r3, #3
 8001008:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 800100a:	8bbb      	ldrh	r3, [r7, #28]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d014      	beq.n	800103a <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 8001010:	8bbb      	ldrh	r3, [r7, #28]
 8001012:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001014:	2001      	movs	r0, #1
 8001016:	f7ff ff41 	bl	8000e9c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 800101a:	2001      	movs	r0, #1
 800101c:	f7ff ff57 	bl	8000ece <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	4619      	mov	r1, r3
 8001024:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001028:	f003 fd06 	bl	8004a38 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 800102c:	8bbb      	ldrh	r3, [r7, #28]
 800102e:	2200      	movs	r2, #0
 8001030:	4619      	mov	r1, r3
 8001032:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001036:	f003 fe67 	bl	8004d08 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 800103a:	8b7b      	ldrh	r3, [r7, #26]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d012      	beq.n	8001066 <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 8001040:	8b7b      	ldrh	r3, [r7, #26]
 8001042:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001044:	2002      	movs	r0, #2
 8001046:	f7ff ff29 	bl	8000e9c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 800104a:	2002      	movs	r0, #2
 800104c:	f7ff ff3f 	bl	8000ece <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	4619      	mov	r1, r3
 8001054:	4813      	ldr	r0, [pc, #76]	; (80010a4 <APPD_SetCPU2GpioConfig+0x140>)
 8001056:	f003 fcef 	bl	8004a38 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 800105a:	8b7b      	ldrh	r3, [r7, #26]
 800105c:	2200      	movs	r2, #0
 800105e:	4619      	mov	r1, r3
 8001060:	4810      	ldr	r0, [pc, #64]	; (80010a4 <APPD_SetCPU2GpioConfig+0x140>)
 8001062:	f003 fe51 	bl	8004d08 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8001066:	8b3b      	ldrh	r3, [r7, #24]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d013      	beq.n	8001094 <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 800106c:	8b3b      	ldrh	r3, [r7, #24]
 800106e:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001070:	2004      	movs	r0, #4
 8001072:	f7ff ff13 	bl	8000e9c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8001076:	2004      	movs	r0, #4
 8001078:	f7ff ff29 	bl	8000ece <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 800107c:	1d3b      	adds	r3, r7, #4
 800107e:	4619      	mov	r1, r3
 8001080:	4807      	ldr	r0, [pc, #28]	; (80010a0 <APPD_SetCPU2GpioConfig+0x13c>)
 8001082:	f003 fcd9 	bl	8004a38 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8001086:	8b3b      	ldrh	r3, [r7, #24]
 8001088:	2200      	movs	r2, #0
 800108a:	4619      	mov	r1, r3
 800108c:	4804      	ldr	r0, [pc, #16]	; (80010a0 <APPD_SetCPU2GpioConfig+0x13c>)
 800108e:	f003 fe3b 	bl	8004d08 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8001092:	bf00      	nop
 8001094:	bf00      	nop
}
 8001096:	3720      	adds	r7, #32
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	0800ec78 	.word	0x0800ec78
 80010a0:	48000800 	.word	0x48000800
 80010a4:	48000400 	.word	0x48000400

080010a8 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 80010ac:	bf00      	nop
}
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	af00      	add	r7, sp, #0
#endif
  }
  else if (CFG_DEBUG_TRACE_UART == hw_uart1)
  {
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 80010ba:	f001 fba3 	bl	8002804 <MX_USART1_UART_Init>
#endif
  }
#endif

/* USER CODE END DbgOutputInit */
  return;
 80010be:	bf00      	nop
}
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b084      	sub	sp, #16
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	60f8      	str	r0, [r7, #12]
 80010ca:	460b      	mov	r3, r1
 80010cc:	607a      	str	r2, [r7, #4]
 80010ce:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 80010d0:	897a      	ldrh	r2, [r7, #10]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	68f9      	ldr	r1, [r7, #12]
 80010d6:	2000      	movs	r0, #0
 80010d8:	f001 fa00 	bl	80024dc <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 80010dc:	bf00      	nop
}
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80010ec:	4b07      	ldr	r3, [pc, #28]	; (800110c <LL_C2_PWR_SetPowerMode+0x28>)
 80010ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010f2:	f023 0207 	bic.w	r2, r3, #7
 80010f6:	4905      	ldr	r1, [pc, #20]	; (800110c <LL_C2_PWR_SetPowerMode+0x28>)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	58000400 	.word	0x58000400

08001110 <LL_EXTI_EnableIT_32_63>:
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <LL_EXTI_EnableIT_32_63+0x24>)
 800111a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800111e:	4905      	ldr	r1, [pc, #20]	; (8001134 <LL_EXTI_EnableIT_32_63+0x24>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4313      	orrs	r3, r2
 8001124:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	58000800 	.word	0x58000800

08001138 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001144:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8001146:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800114a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800114e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001152:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	021b      	lsls	r3, r3, #8
 800115a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800115e:	4313      	orrs	r3, r2
 8001160:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	cafecafe 	.word	0xcafecafe

08001174 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800117c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001186:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4313      	orrs	r3, r2
 800118e:	608b      	str	r3, [r1, #8]
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80011a0:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <LL_DBGMCU_GetDeviceID+0x18>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	e0042000 	.word	0xe0042000

080011b8 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80011bc:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <LL_DBGMCU_GetRevisionID+0x18>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	0c1b      	lsrs	r3, r3, #16
 80011c2:	b29b      	uxth	r3, r3
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e0042000 	.word	0xe0042000

080011d4 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	22ff      	movs	r2, #255	; 0xff
 80011e0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80011ee:	b480      	push	{r7}
 80011f0:	b083      	sub	sp, #12
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	22ca      	movs	r2, #202	; 0xca
 80011fa:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2253      	movs	r2, #83	; 0x53
 8001200:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800120e:	b480      	push	{r7}
 8001210:	b083      	sub	sp, #12
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
 8001216:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f023 0207 	bic.w	r2, r3, #7
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	431a      	orrs	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	609a      	str	r2, [r3, #8]
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001238:	4b04      	ldr	r3, [pc, #16]	; (800124c <MX_APPE_Config+0x18>)
 800123a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800123e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8001240:	f000 f830 	bl	80012a4 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001244:	f000 f835 	bl	80012b2 <Config_HSE>

  return;
 8001248:	bf00      	nop
}
 800124a:	bd80      	pop	{r7, pc}
 800124c:	58004000 	.word	0x58004000

08001250 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001254:	f000 f841 	bl	80012da <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001258:	f000 f85a 	bl	8001310 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800125c:	4909      	ldr	r1, [pc, #36]	; (8001284 <MX_APPE_Init+0x34>)
 800125e:	2000      	movs	r0, #0
 8001260:	f000 feac 	bl	8001fbc <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8001264:	f7ff fe4f 	bl	8000f06 <APPD_Init>

  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8001268:	2101      	movs	r1, #1
 800126a:	2001      	movs	r0, #1
 800126c:	f009 ffa4 	bl	800b1b8 <UTIL_LPM_SetOffMode>

  APPE_Led_Init();
 8001270:	f000 f97c 	bl	800156c <APPE_Led_Init>

  APPE_Button_Init();
 8001274:	f000 f98a 	bl	800158c <APPE_Button_Init>
  
  RxUART_Init();
 8001278:	f000 f9f4 	bl	8001664 <RxUART_Init>

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 800127c:	f000 f858 	bl	8001330 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8001280:	bf00      	nop
}
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000484 	.word	0x20000484

08001288 <Init_Smps>:

void Init_Smps(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 800128c:	bf00      	nop
}
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <Init_Exti>:

void Init_Exti(void)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800129a:	2050      	movs	r0, #80	; 0x50
 800129c:	f7ff ff38 	bl	8001110 <LL_EXTI_EnableIT_32_63>

  return;
 80012a0:	bf00      	nop
}
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80012a8:	bf00      	nop
}
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80012b8:	2000      	movs	r0, #0
 80012ba:	f008 fceb 	bl	8009c94 <OTP_Read>
 80012be:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d005      	beq.n	80012d2 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	799b      	ldrb	r3, [r3, #6]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff ff34 	bl	8001138 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80012d0:	bf00      	nop
 80012d2:	bf00      	nop
}
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <System_Init>:

static void System_Init(void)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	af00      	add	r7, sp, #0
  Init_Smps();
 80012de:	f7ff ffd3 	bl	8001288 <Init_Smps>

  Init_Exti();
 80012e2:	f7ff ffd8 	bl	8001296 <Init_Exti>

  Init_Rtc();
 80012e6:	f000 f803 	bl	80012f0 <Init_Rtc>

  return;
 80012ea:	bf00      	nop
}
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <Init_Rtc>:

static void Init_Rtc(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80012f4:	4805      	ldr	r0, [pc, #20]	; (800130c <Init_Rtc+0x1c>)
 80012f6:	f7ff ff7a 	bl	80011ee <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80012fa:	2100      	movs	r1, #0
 80012fc:	4803      	ldr	r0, [pc, #12]	; (800130c <Init_Rtc+0x1c>)
 80012fe:	f7ff ff86 	bl	800120e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001302:	4802      	ldr	r0, [pc, #8]	; (800130c <Init_Rtc+0x1c>)
 8001304:	f7ff ff66 	bl	80011d4 <LL_RTC_EnableWriteProtection>

  return;
 8001308:	bf00      	nop
}
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40002800 	.word	0x40002800

08001310 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001314:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001318:	f7ff ff2c 	bl	8001174 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 800131c:	f009 ff3a 	bl	800b194 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001320:	2004      	movs	r0, #4
 8001322:	f7ff fedf 	bl	80010e4 <LL_C2_PWR_SetPowerMode>
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */
  /**
   * Active SRAM retention for standby support
   */
  HAL_PWREx_EnableSRAMRetention();
 8001326:	f003 fde9 	bl	8004efc <HAL_PWREx_EnableSRAMRetention>

  return;
 800132a:	bf00      	nop
}
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b088      	sub	sp, #32
 8001334:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8001336:	f009 fceb 	bl	800ad10 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 800133a:	4a11      	ldr	r2, [pc, #68]	; (8001380 <appe_Tl_Init+0x50>)
 800133c:	2100      	movs	r1, #0
 800133e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001342:	f00a f865 	bl	800b410 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001346:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <appe_Tl_Init+0x54>)
 8001348:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 800134a:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <appe_Tl_Init+0x58>)
 800134c:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800134e:	463b      	mov	r3, r7
 8001350:	4619      	mov	r1, r3
 8001352:	480e      	ldr	r0, [pc, #56]	; (800138c <appe_Tl_Init+0x5c>)
 8001354:	f008 fdb8 	bl	8009ec8 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8001358:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <appe_Tl_Init+0x60>)
 800135a:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800135c:	4b0d      	ldr	r3, [pc, #52]	; (8001394 <appe_Tl_Init+0x64>)
 800135e:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001360:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <appe_Tl_Init+0x68>)
 8001362:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001364:	f240 533c 	movw	r3, #1340	; 0x53c
 8001368:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 800136a:	f107 0308 	add.w	r3, r7, #8
 800136e:	4618      	mov	r0, r3
 8001370:	f009 fe10 	bl	800af94 <TL_MM_Init>

  TL_Enable();
 8001374:	f009 fcc6 	bl	800ad04 <TL_Enable>

  return;
 8001378:	bf00      	nop
}
 800137a:	3720      	adds	r7, #32
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	08009f01 	.word	0x08009f01
 8001384:	20030734 	.word	0x20030734
 8001388:	0800139d 	.word	0x0800139d
 800138c:	080013b5 	.word	0x080013b5
 8001390:	2003094c 	.word	0x2003094c
 8001394:	20030840 	.word	0x20030840
 8001398:	200301f8 	.word	0x200301f8

0800139c <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80013a6:	bf00      	nop
}
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
	...

080013b4 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	330b      	adds	r3, #11
 80013c2:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	881b      	ldrh	r3, [r3, #0]
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 80013ce:	2b07      	cmp	r3, #7
 80013d0:	d848      	bhi.n	8001464 <APPE_SysUserEvtRx+0xb0>
 80013d2:	a201      	add	r2, pc, #4	; (adr r2, 80013d8 <APPE_SysUserEvtRx+0x24>)
 80013d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d8:	080013f9 	.word	0x080013f9
 80013dc:	0800140b 	.word	0x0800140b
 80013e0:	08001419 	.word	0x08001419
 80013e4:	08001465 	.word	0x08001465
 80013e8:	08001435 	.word	0x08001435
 80013ec:	08001445 	.word	0x08001445
 80013f0:	0800144d 	.word	0x0800144d
 80013f4:	0800145d 	.word	0x0800145d
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80013f8:	f107 030c 	add.w	r3, r7, #12
 80013fc:	4618      	mov	r0, r3
 80013fe:	f008 fcb5 	bl	8009d6c <SHCI_GetWirelessFwInfo>
    //APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    //APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    //APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    //APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f000 f868 	bl	80014d8 <APPE_SysEvtReadyProcessing>
    break;
 8001408:	e02d      	b.n	8001466 <APPE_SysUserEvtRx+0xb2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 800140a:	4819      	ldr	r0, [pc, #100]	; (8001470 <APPE_SysUserEvtRx+0xbc>)
 800140c:	f00a fe6a 	bl	800c0e4 <iprintf>
    APPE_SysEvtError(pPayload);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f000 f83b 	bl	800148c <APPE_SysEvtError>
    break;
 8001416:	e026      	b.n	8001466 <APPE_SysUserEvtRx+0xb2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8001418:	4816      	ldr	r0, [pc, #88]	; (8001474 <APPE_SysUserEvtRx+0xc0>)
 800141a:	f00a fec9 	bl	800c1b0 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8001422:	6819      	ldr	r1, [r3, #0]
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	461a      	mov	r2, r3
 800142c:	4812      	ldr	r0, [pc, #72]	; (8001478 <APPE_SysUserEvtRx+0xc4>)
 800142e:	f00a fe59 	bl	800c0e4 <iprintf>
    break;
 8001432:	e018      	b.n	8001466 <APPE_SysUserEvtRx+0xb2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	3302      	adds	r3, #2
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4619      	mov	r1, r3
 800143c:	480f      	ldr	r0, [pc, #60]	; (800147c <APPE_SysUserEvtRx+0xc8>)
 800143e:	f00a fe51 	bl	800c0e4 <iprintf>
    break;
 8001442:	e010      	b.n	8001466 <APPE_SysUserEvtRx+0xb2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8001444:	480e      	ldr	r0, [pc, #56]	; (8001480 <APPE_SysUserEvtRx+0xcc>)
 8001446:	f00a fe4d 	bl	800c0e4 <iprintf>
    break;
 800144a:	e00c      	b.n	8001466 <APPE_SysUserEvtRx+0xb2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	3302      	adds	r3, #2
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4619      	mov	r1, r3
 8001454:	480b      	ldr	r0, [pc, #44]	; (8001484 <APPE_SysUserEvtRx+0xd0>)
 8001456:	f00a fe45 	bl	800c0e4 <iprintf>
    break;
 800145a:	e004      	b.n	8001466 <APPE_SysUserEvtRx+0xb2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 800145c:	480a      	ldr	r0, [pc, #40]	; (8001488 <APPE_SysUserEvtRx+0xd4>)
 800145e:	f00a fe41 	bl	800c0e4 <iprintf>
    break;
 8001462:	e000      	b.n	8001466 <APPE_SysUserEvtRx+0xb2>

  default:
    break;
 8001464:	bf00      	nop
  }

  return;
 8001466:	bf00      	nop
}
 8001468:	3720      	adds	r7, #32
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	0800e4d4 	.word	0x0800e4d4
 8001474:	0800e4f8 	.word	0x0800e4f8
 8001478:	0800e548 	.word	0x0800e548
 800147c:	0800e570 	.word	0x0800e570
 8001480:	0800e5ac 	.word	0x0800e5ac
 8001484:	0800e5d0 	.word	0x0800e5d0
 8001488:	0800e60c 	.word	0x0800e60c

0800148c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	330b      	adds	r3, #11
 800149a:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	3302      	adds	r3, #2
 80014a0:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	4619      	mov	r1, r3
 80014a8:	4808      	ldr	r0, [pc, #32]	; (80014cc <APPE_SysEvtError+0x40>)
 80014aa:	f00a fe1b 	bl	800c0e4 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d103      	bne.n	80014be <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 80014b6:	4806      	ldr	r0, [pc, #24]	; (80014d0 <APPE_SysEvtError+0x44>)
 80014b8:	f00a fe7a 	bl	800c1b0 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80014bc:	e003      	b.n	80014c6 <APPE_SysEvtError+0x3a>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 80014be:	4805      	ldr	r0, [pc, #20]	; (80014d4 <APPE_SysEvtError+0x48>)
 80014c0:	f00a fe76 	bl	800c1b0 <puts>
  return;
 80014c4:	bf00      	nop
}
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	0800e630 	.word	0x0800e630
 80014d0:	0800e660 	.word	0x0800e660
 80014d4:	0800e69c 	.word	0x0800e69c

080014d8 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08a      	sub	sp, #40	; 0x28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80014e0:	f107 0308 	add.w	r3, r7, #8
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	330b      	adds	r3, #11
 80014fc:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3302      	adds	r3, #2
 8001502:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d11d      	bne.n	8001548 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    //APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800150c:	f7ff fd0e 	bl	8000f2c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8001510:	230f      	movs	r3, #15
 8001512:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8001514:	237f      	movs	r3, #127	; 0x7f
 8001516:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8001518:	f7ff fe4e 	bl	80011b8 <LL_DBGMCU_GetRevisionID>
 800151c:	6278      	str	r0, [r7, #36]	; 0x24

    //APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 800151e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001520:	b29b      	uxth	r3, r3
 8001522:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8001524:	f7ff fe3a 	bl	800119c <LL_DBGMCU_GetDeviceID>
 8001528:	6238      	str	r0, [r7, #32]
    //APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 800152a:	6a3b      	ldr	r3, [r7, #32]
 800152c:	b29b      	uxth	r3, r3
 800152e:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8001530:	f107 0308 	add.w	r3, r7, #8
 8001534:	4618      	mov	r0, r3
 8001536:	f008 fc03 	bl	8009d40 <SHCI_C2_Config>

    APP_BLE_Init();
 800153a:	f001 fc85 	bl	8002e48 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800153e:	2100      	movs	r1, #0
 8001540:	2001      	movs	r0, #1
 8001542:	f009 fe39 	bl	800b1b8 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001546:	e00b      	b.n	8001560 <APPE_SysEvtReadyProcessing+0x88>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d103      	bne.n	8001558 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	701a      	strb	r2, [r3, #0]
  return;
 8001556:	e003      	b.n	8001560 <APPE_SysEvtReadyProcessing+0x88>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8001558:	4803      	ldr	r0, [pc, #12]	; (8001568 <APPE_SysEvtReadyProcessing+0x90>)
 800155a:	f00a fdc3 	bl	800c0e4 <iprintf>
  return;
 800155e:	bf00      	nop
}
 8001560:	3728      	adds	r7, #40	; 0x28
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	0800e6d4 	.word	0x0800e6d4

0800156c <APPE_Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
void APPE_Led_Init( void )
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */

  BSP_LED_Init(LED_BLUE);
 8001570:	2000      	movs	r0, #0
 8001572:	f002 fb5b 	bl	8003c2c <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8001576:	2001      	movs	r0, #1
 8001578:	f002 fb58 	bl	8003c2c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800157c:	2002      	movs	r0, #2
 800157e:	f002 fb55 	bl	8003c2c <BSP_LED_Init>

  BSP_LED_On(LED_GREEN);
 8001582:	2001      	movs	r0, #1
 8001584:	f002 fb8c 	bl	8003ca0 <BSP_LED_On>
#endif

  return;
 8001588:	bf00      	nop
}
 800158a:	bd80      	pop	{r7, pc}

0800158c <APPE_Button_Init>:

void APPE_Button_Init( void )
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */

  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8001590:	2101      	movs	r1, #1
 8001592:	2000      	movs	r0, #0
 8001594:	f002 fbb8 	bl	8003d08 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8001598:	2101      	movs	r1, #1
 800159a:	2001      	movs	r0, #1
 800159c:	f002 fbb4 	bl	8003d08 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 80015a0:	2101      	movs	r1, #1
 80015a2:	2002      	movs	r0, #2
 80015a4:	f002 fbb0 	bl	8003d08 <BSP_PB_Init>
#endif

  return;
 80015a8:	bf00      	nop
}
 80015aa:	bd80      	pop	{r7, pc}

080015ac <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80015b0:	f04f 30ff 	mov.w	r0, #4294967295
 80015b4:	f009 fe30 	bl	800b218 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}

080015bc <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80015c0:	bf00      	nop
}
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
 80015d2:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80015d4:	f04f 30ff 	mov.w	r0, #4294967295
 80015d8:	f009 fe1e 	bl	800b218 <UTIL_SEQ_Run>

  return;
 80015dc:	bf00      	nop
}
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80015ec:	2100      	movs	r1, #0
 80015ee:	f44f 7080 	mov.w	r0, #256	; 0x100
 80015f2:	f009 ff2f 	bl	800b454 <UTIL_SEQ_SetTask>
  return;
 80015f6:	bf00      	nop
}
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b082      	sub	sp, #8
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001606:	2002      	movs	r0, #2
 8001608:	f009 ff90 	bl	800b52c <UTIL_SEQ_SetEvt>
  return;
 800160c:	bf00      	nop
}
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800161c:	2002      	movs	r0, #2
 800161e:	f009 ffa5 	bl	800b56c <UTIL_SEQ_WaitEvt>
  return;
 8001622:	bf00      	nop
}
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b082      	sub	sp, #8
 800162e:	af00      	add	r7, sp, #0
 8001630:	4603      	mov	r3, r0
 8001632:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8001634:	88fb      	ldrh	r3, [r7, #6]
 8001636:	2b40      	cmp	r3, #64	; 0x40
 8001638:	d00c      	beq.n	8001654 <HAL_GPIO_EXTI_Callback+0x2a>
 800163a:	2b40      	cmp	r3, #64	; 0x40
 800163c:	dc0d      	bgt.n	800165a <HAL_GPIO_EXTI_Callback+0x30>
 800163e:	2b01      	cmp	r3, #1
 8001640:	d002      	beq.n	8001648 <HAL_GPIO_EXTI_Callback+0x1e>
 8001642:	2b10      	cmp	r3, #16
 8001644:	d003      	beq.n	800164e <HAL_GPIO_EXTI_Callback+0x24>
    case BUTTON_SW3_PIN:
      APP_BLE_Key_Button3_Action();
      break;

    default:
      break;
 8001646:	e008      	b.n	800165a <HAL_GPIO_EXTI_Callback+0x30>
      APP_BLE_Key_Button1_Action();
 8001648:	f001 fdd8 	bl	80031fc <APP_BLE_Key_Button1_Action>
      break; 
 800164c:	e006      	b.n	800165c <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button2_Action();
 800164e:	f001 fde5 	bl	800321c <APP_BLE_Key_Button2_Action>
      break; 
 8001652:	e003      	b.n	800165c <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button3_Action();
 8001654:	f001 fdea 	bl	800322c <APP_BLE_Key_Button3_Action>
      break;
 8001658:	e000      	b.n	800165c <HAL_GPIO_EXTI_Callback+0x32>
      break;
 800165a:	bf00      	nop

  }
  return;
 800165c:	bf00      	nop
}
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <RxUART_Init>:

static void RxUART_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 8001668:	4b03      	ldr	r3, [pc, #12]	; (8001678 <RxUART_Init+0x14>)
 800166a:	2201      	movs	r2, #1
 800166c:	4903      	ldr	r1, [pc, #12]	; (800167c <RxUART_Init+0x18>)
 800166e:	2000      	movs	r0, #0
 8001670:	f000 ff10 	bl	8002494 <HW_UART_Receive_IT>
}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}
 8001678:	08001681 	.word	0x08001681
 800167c:	20000294 	.word	0x20000294

08001680 <RxCpltCallback>:

static void RxCpltCallback(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 8001684:	4b15      	ldr	r3, [pc, #84]	; (80016dc <RxCpltCallback+0x5c>)
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	2bff      	cmp	r3, #255	; 0xff
 800168a:	d81e      	bhi.n	80016ca <RxCpltCallback+0x4a>
  {
    if (aRxBuffer[0] == '\r')
 800168c:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <RxCpltCallback+0x60>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b0d      	cmp	r3, #13
 8001692:	d10f      	bne.n	80016b4 <RxCpltCallback+0x34>
    {
      APP_DBG_MSG("received %s\n", CommandString);
 8001694:	4913      	ldr	r1, [pc, #76]	; (80016e4 <RxCpltCallback+0x64>)
 8001696:	4814      	ldr	r0, [pc, #80]	; (80016e8 <RxCpltCallback+0x68>)
 8001698:	f00a fd24 	bl	800c0e4 <iprintf>

      UartCmdExecute();
 800169c:	f000 f828 	bl	80016f0 <UartCmdExecute>

      /* Clear receive buffer and character counter*/
      indexReceiveChar = 0;
 80016a0:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <RxCpltCallback+0x5c>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	801a      	strh	r2, [r3, #0]
      memset(CommandString, 0, C_SIZE_CMD_STRING);
 80016a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016aa:	2100      	movs	r1, #0
 80016ac:	480d      	ldr	r0, [pc, #52]	; (80016e4 <RxCpltCallback+0x64>)
 80016ae:	f00a fe7f 	bl	800c3b0 <memset>
 80016b2:	e00a      	b.n	80016ca <RxCpltCallback+0x4a>
    }
    else
    {
      CommandString[indexReceiveChar++] = aRxBuffer[0];
 80016b4:	4b09      	ldr	r3, [pc, #36]	; (80016dc <RxCpltCallback+0x5c>)
 80016b6:	881b      	ldrh	r3, [r3, #0]
 80016b8:	1c5a      	adds	r2, r3, #1
 80016ba:	b291      	uxth	r1, r2
 80016bc:	4a07      	ldr	r2, [pc, #28]	; (80016dc <RxCpltCallback+0x5c>)
 80016be:	8011      	strh	r1, [r2, #0]
 80016c0:	461a      	mov	r2, r3
 80016c2:	4b07      	ldr	r3, [pc, #28]	; (80016e0 <RxCpltCallback+0x60>)
 80016c4:	7819      	ldrb	r1, [r3, #0]
 80016c6:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <RxCpltCallback+0x64>)
 80016c8:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 80016ca:	4b08      	ldr	r3, [pc, #32]	; (80016ec <RxCpltCallback+0x6c>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	4904      	ldr	r1, [pc, #16]	; (80016e0 <RxCpltCallback+0x60>)
 80016d0:	2000      	movs	r0, #0
 80016d2:	f000 fedf 	bl	8002494 <HW_UART_Receive_IT>
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	2000039c 	.word	0x2000039c
 80016e0:	20000294 	.word	0x20000294
 80016e4:	2000029c 	.word	0x2000029c
 80016e8:	0800e708 	.word	0x0800e708
 80016ec:	08001681 	.word	0x08001681

080016f0 <UartCmdExecute>:

static void UartCmdExecute(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* Parse received CommandString */
  if(strcmp((char const*)CommandString, "SW1") == 0)
 80016f4:	491c      	ldr	r1, [pc, #112]	; (8001768 <UartCmdExecute+0x78>)
 80016f6:	481d      	ldr	r0, [pc, #116]	; (800176c <UartCmdExecute+0x7c>)
 80016f8:	f7fe fd42 	bl	8000180 <strcmp>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d10a      	bne.n	8001718 <UartCmdExecute+0x28>
  {
    APP_DBG_MSG("SW1 OK\n");
 8001702:	481b      	ldr	r0, [pc, #108]	; (8001770 <UartCmdExecute+0x80>)
 8001704:	f00a fd54 	bl	800c1b0 <puts>
    exti_handle.Line = EXTI_LINE_0;
 8001708:	4b1a      	ldr	r3, [pc, #104]	; (8001774 <UartCmdExecute+0x84>)
 800170a:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 800170e:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 8001710:	4818      	ldr	r0, [pc, #96]	; (8001774 <UartCmdExecute+0x84>)
 8001712:	f003 f96f 	bl	80049f4 <HAL_EXTI_GenerateSWI>
  }
  else
  {
    APP_DBG_MSG("NOT RECOGNIZED COMMAND : %s\n", CommandString);
  }
}
 8001716:	e025      	b.n	8001764 <UartCmdExecute+0x74>
  else if (strcmp((char const*)CommandString, "SW2") == 0)
 8001718:	4917      	ldr	r1, [pc, #92]	; (8001778 <UartCmdExecute+0x88>)
 800171a:	4814      	ldr	r0, [pc, #80]	; (800176c <UartCmdExecute+0x7c>)
 800171c:	f7fe fd30 	bl	8000180 <strcmp>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d109      	bne.n	800173a <UartCmdExecute+0x4a>
    APP_DBG_MSG("SW2 OK\n");
 8001726:	4815      	ldr	r0, [pc, #84]	; (800177c <UartCmdExecute+0x8c>)
 8001728:	f00a fd42 	bl	800c1b0 <puts>
    exti_handle.Line = EXTI_LINE_4;
 800172c:	4b11      	ldr	r3, [pc, #68]	; (8001774 <UartCmdExecute+0x84>)
 800172e:	4a14      	ldr	r2, [pc, #80]	; (8001780 <UartCmdExecute+0x90>)
 8001730:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 8001732:	4810      	ldr	r0, [pc, #64]	; (8001774 <UartCmdExecute+0x84>)
 8001734:	f003 f95e 	bl	80049f4 <HAL_EXTI_GenerateSWI>
}
 8001738:	e014      	b.n	8001764 <UartCmdExecute+0x74>
  else if (strcmp((char const*)CommandString, "SW3") == 0)
 800173a:	4912      	ldr	r1, [pc, #72]	; (8001784 <UartCmdExecute+0x94>)
 800173c:	480b      	ldr	r0, [pc, #44]	; (800176c <UartCmdExecute+0x7c>)
 800173e:	f7fe fd1f 	bl	8000180 <strcmp>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d109      	bne.n	800175c <UartCmdExecute+0x6c>
    APP_DBG_MSG("SW3 OK\n");
 8001748:	480f      	ldr	r0, [pc, #60]	; (8001788 <UartCmdExecute+0x98>)
 800174a:	f00a fd31 	bl	800c1b0 <puts>
    exti_handle.Line = EXTI_LINE_6;
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <UartCmdExecute+0x84>)
 8001750:	4a0e      	ldr	r2, [pc, #56]	; (800178c <UartCmdExecute+0x9c>)
 8001752:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 8001754:	4807      	ldr	r0, [pc, #28]	; (8001774 <UartCmdExecute+0x84>)
 8001756:	f003 f94d 	bl	80049f4 <HAL_EXTI_GenerateSWI>
}
 800175a:	e003      	b.n	8001764 <UartCmdExecute+0x74>
    APP_DBG_MSG("NOT RECOGNIZED COMMAND : %s\n", CommandString);
 800175c:	4903      	ldr	r1, [pc, #12]	; (800176c <UartCmdExecute+0x7c>)
 800175e:	480c      	ldr	r0, [pc, #48]	; (8001790 <UartCmdExecute+0xa0>)
 8001760:	f00a fcc0 	bl	800c0e4 <iprintf>
}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}
 8001768:	0800e718 	.word	0x0800e718
 800176c:	2000029c 	.word	0x2000029c
 8001770:	0800e71c 	.word	0x0800e71c
 8001774:	2000028c 	.word	0x2000028c
 8001778:	0800e724 	.word	0x0800e724
 800177c:	0800e728 	.word	0x0800e728
 8001780:	16000004 	.word	0x16000004
 8001784:	0800e730 	.word	0x0800e730
 8001788:	0800e734 	.word	0x0800e734
 800178c:	16000006 	.word	0x16000006
 8001790:	0800e73c 	.word	0x0800e73c

08001794 <LL_EXTI_EnableIT_0_31>:
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <LL_EXTI_EnableIT_0_31+0x24>)
 800179e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80017a2:	4905      	ldr	r1, [pc, #20]	; (80017b8 <LL_EXTI_EnableIT_0_31+0x24>)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	58000800 	.word	0x58000800

080017bc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80017c4:	4b05      	ldr	r3, [pc, #20]	; (80017dc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4904      	ldr	r1, [pc, #16]	; (80017dc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	600b      	str	r3, [r1, #0]

}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	58000800 	.word	0x58000800

080017e0 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80017e6:	4b0d      	ldr	r3, [pc, #52]	; (800181c <ReadRtcSsrValue+0x3c>)
 80017e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80017ee:	4b0b      	ldr	r3, [pc, #44]	; (800181c <ReadRtcSsrValue+0x3c>)
 80017f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80017f6:	e005      	b.n	8001804 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80017fc:	4b07      	ldr	r3, [pc, #28]	; (800181c <ReadRtcSsrValue+0x3c>)
 80017fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001800:	b29b      	uxth	r3, r3
 8001802:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	429a      	cmp	r2, r3
 800180a:	d1f5      	bne.n	80017f8 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 800180c:	683b      	ldr	r3, [r7, #0]
}
 800180e:	4618      	mov	r0, r3
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	40002800 	.word	0x40002800

08001820 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	460a      	mov	r2, r1
 800182a:	71fb      	strb	r3, [r7, #7]
 800182c:	4613      	mov	r3, r2
 800182e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001830:	79ba      	ldrb	r2, [r7, #6]
 8001832:	491d      	ldr	r1, [pc, #116]	; (80018a8 <LinkTimerAfter+0x88>)
 8001834:	4613      	mov	r3, r2
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	4413      	add	r3, r2
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	440b      	add	r3, r1
 800183e:	3315      	adds	r3, #21
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001844:	7bfb      	ldrb	r3, [r7, #15]
 8001846:	2b06      	cmp	r3, #6
 8001848:	d009      	beq.n	800185e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800184a:	7bfa      	ldrb	r2, [r7, #15]
 800184c:	4916      	ldr	r1, [pc, #88]	; (80018a8 <LinkTimerAfter+0x88>)
 800184e:	4613      	mov	r3, r2
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	4413      	add	r3, r2
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	440b      	add	r3, r1
 8001858:	3314      	adds	r3, #20
 800185a:	79fa      	ldrb	r2, [r7, #7]
 800185c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800185e:	79fa      	ldrb	r2, [r7, #7]
 8001860:	4911      	ldr	r1, [pc, #68]	; (80018a8 <LinkTimerAfter+0x88>)
 8001862:	4613      	mov	r3, r2
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	4413      	add	r3, r2
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	440b      	add	r3, r1
 800186c:	3315      	adds	r3, #21
 800186e:	7bfa      	ldrb	r2, [r7, #15]
 8001870:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001872:	79fa      	ldrb	r2, [r7, #7]
 8001874:	490c      	ldr	r1, [pc, #48]	; (80018a8 <LinkTimerAfter+0x88>)
 8001876:	4613      	mov	r3, r2
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	4413      	add	r3, r2
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	440b      	add	r3, r1
 8001880:	3314      	adds	r3, #20
 8001882:	79ba      	ldrb	r2, [r7, #6]
 8001884:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001886:	79ba      	ldrb	r2, [r7, #6]
 8001888:	4907      	ldr	r1, [pc, #28]	; (80018a8 <LinkTimerAfter+0x88>)
 800188a:	4613      	mov	r3, r2
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	4413      	add	r3, r2
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	440b      	add	r3, r1
 8001894:	3315      	adds	r3, #21
 8001896:	79fa      	ldrb	r2, [r7, #7]
 8001898:	701a      	strb	r2, [r3, #0]

  return;
 800189a:	bf00      	nop
}
 800189c:	3714      	adds	r7, #20
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	200003a0 	.word	0x200003a0

080018ac <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	460a      	mov	r2, r1
 80018b6:	71fb      	strb	r3, [r7, #7]
 80018b8:	4613      	mov	r3, r2
 80018ba:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80018bc:	4b29      	ldr	r3, [pc, #164]	; (8001964 <LinkTimerBefore+0xb8>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	79ba      	ldrb	r2, [r7, #6]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d032      	beq.n	800192e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80018c8:	79ba      	ldrb	r2, [r7, #6]
 80018ca:	4927      	ldr	r1, [pc, #156]	; (8001968 <LinkTimerBefore+0xbc>)
 80018cc:	4613      	mov	r3, r2
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	4413      	add	r3, r2
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	440b      	add	r3, r1
 80018d6:	3314      	adds	r3, #20
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80018dc:	7bfa      	ldrb	r2, [r7, #15]
 80018de:	4922      	ldr	r1, [pc, #136]	; (8001968 <LinkTimerBefore+0xbc>)
 80018e0:	4613      	mov	r3, r2
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	4413      	add	r3, r2
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	440b      	add	r3, r1
 80018ea:	3315      	adds	r3, #21
 80018ec:	79fa      	ldrb	r2, [r7, #7]
 80018ee:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80018f0:	79fa      	ldrb	r2, [r7, #7]
 80018f2:	491d      	ldr	r1, [pc, #116]	; (8001968 <LinkTimerBefore+0xbc>)
 80018f4:	4613      	mov	r3, r2
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	4413      	add	r3, r2
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	440b      	add	r3, r1
 80018fe:	3315      	adds	r3, #21
 8001900:	79ba      	ldrb	r2, [r7, #6]
 8001902:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001904:	79fa      	ldrb	r2, [r7, #7]
 8001906:	4918      	ldr	r1, [pc, #96]	; (8001968 <LinkTimerBefore+0xbc>)
 8001908:	4613      	mov	r3, r2
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	4413      	add	r3, r2
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	440b      	add	r3, r1
 8001912:	3314      	adds	r3, #20
 8001914:	7bfa      	ldrb	r2, [r7, #15]
 8001916:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001918:	79ba      	ldrb	r2, [r7, #6]
 800191a:	4913      	ldr	r1, [pc, #76]	; (8001968 <LinkTimerBefore+0xbc>)
 800191c:	4613      	mov	r3, r2
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	4413      	add	r3, r2
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	440b      	add	r3, r1
 8001926:	3314      	adds	r3, #20
 8001928:	79fa      	ldrb	r2, [r7, #7]
 800192a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 800192c:	e014      	b.n	8001958 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800192e:	79fa      	ldrb	r2, [r7, #7]
 8001930:	490d      	ldr	r1, [pc, #52]	; (8001968 <LinkTimerBefore+0xbc>)
 8001932:	4613      	mov	r3, r2
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	4413      	add	r3, r2
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	440b      	add	r3, r1
 800193c:	3315      	adds	r3, #21
 800193e:	79ba      	ldrb	r2, [r7, #6]
 8001940:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001942:	79ba      	ldrb	r2, [r7, #6]
 8001944:	4908      	ldr	r1, [pc, #32]	; (8001968 <LinkTimerBefore+0xbc>)
 8001946:	4613      	mov	r3, r2
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	4413      	add	r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	440b      	add	r3, r1
 8001950:	3314      	adds	r3, #20
 8001952:	79fa      	ldrb	r2, [r7, #7]
 8001954:	701a      	strb	r2, [r3, #0]
  return;
 8001956:	bf00      	nop
}
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	20000430 	.word	0x20000430
 8001968:	200003a0 	.word	0x200003a0

0800196c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001976:	4b4e      	ldr	r3, [pc, #312]	; (8001ab0 <linkTimer+0x144>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	b2db      	uxtb	r3, r3
 800197c:	2b06      	cmp	r3, #6
 800197e:	d118      	bne.n	80019b2 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001980:	4b4b      	ldr	r3, [pc, #300]	; (8001ab0 <linkTimer+0x144>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	b2da      	uxtb	r2, r3
 8001986:	4b4b      	ldr	r3, [pc, #300]	; (8001ab4 <linkTimer+0x148>)
 8001988:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800198a:	4a49      	ldr	r2, [pc, #292]	; (8001ab0 <linkTimer+0x144>)
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001990:	79fa      	ldrb	r2, [r7, #7]
 8001992:	4949      	ldr	r1, [pc, #292]	; (8001ab8 <linkTimer+0x14c>)
 8001994:	4613      	mov	r3, r2
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	4413      	add	r3, r2
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	440b      	add	r3, r1
 800199e:	3315      	adds	r3, #21
 80019a0:	2206      	movs	r2, #6
 80019a2:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80019a4:	4b45      	ldr	r3, [pc, #276]	; (8001abc <linkTimer+0x150>)
 80019a6:	f04f 32ff 	mov.w	r2, #4294967295
 80019aa:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	81fb      	strh	r3, [r7, #14]
 80019b0:	e078      	b.n	8001aa4 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80019b2:	f000 f909 	bl	8001bc8 <ReturnTimeElapsed>
 80019b6:	4603      	mov	r3, r0
 80019b8:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80019ba:	79fa      	ldrb	r2, [r7, #7]
 80019bc:	493e      	ldr	r1, [pc, #248]	; (8001ab8 <linkTimer+0x14c>)
 80019be:	4613      	mov	r3, r2
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	4413      	add	r3, r2
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	440b      	add	r3, r1
 80019c8:	3308      	adds	r3, #8
 80019ca:	6819      	ldr	r1, [r3, #0]
 80019cc:	89fb      	ldrh	r3, [r7, #14]
 80019ce:	79fa      	ldrb	r2, [r7, #7]
 80019d0:	4419      	add	r1, r3
 80019d2:	4839      	ldr	r0, [pc, #228]	; (8001ab8 <linkTimer+0x14c>)
 80019d4:	4613      	mov	r3, r2
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	4413      	add	r3, r2
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	4403      	add	r3, r0
 80019de:	3308      	adds	r3, #8
 80019e0:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80019e2:	79fa      	ldrb	r2, [r7, #7]
 80019e4:	4934      	ldr	r1, [pc, #208]	; (8001ab8 <linkTimer+0x14c>)
 80019e6:	4613      	mov	r3, r2
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	4413      	add	r3, r2
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	440b      	add	r3, r1
 80019f0:	3308      	adds	r3, #8
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80019f6:	4b2e      	ldr	r3, [pc, #184]	; (8001ab0 <linkTimer+0x144>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	4619      	mov	r1, r3
 80019fe:	4a2e      	ldr	r2, [pc, #184]	; (8001ab8 <linkTimer+0x14c>)
 8001a00:	460b      	mov	r3, r1
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	440b      	add	r3, r1
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	4413      	add	r3, r2
 8001a0a:	3308      	adds	r3, #8
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	68ba      	ldr	r2, [r7, #8]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d337      	bcc.n	8001a84 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001a14:	4b26      	ldr	r3, [pc, #152]	; (8001ab0 <linkTimer+0x144>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001a1a:	7b7a      	ldrb	r2, [r7, #13]
 8001a1c:	4926      	ldr	r1, [pc, #152]	; (8001ab8 <linkTimer+0x14c>)
 8001a1e:	4613      	mov	r3, r2
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	4413      	add	r3, r2
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	440b      	add	r3, r1
 8001a28:	3315      	adds	r3, #21
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001a2e:	e013      	b.n	8001a58 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001a30:	7b7a      	ldrb	r2, [r7, #13]
 8001a32:	4921      	ldr	r1, [pc, #132]	; (8001ab8 <linkTimer+0x14c>)
 8001a34:	4613      	mov	r3, r2
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	4413      	add	r3, r2
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	440b      	add	r3, r1
 8001a3e:	3315      	adds	r3, #21
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001a44:	7b7a      	ldrb	r2, [r7, #13]
 8001a46:	491c      	ldr	r1, [pc, #112]	; (8001ab8 <linkTimer+0x14c>)
 8001a48:	4613      	mov	r3, r2
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	4413      	add	r3, r2
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	440b      	add	r3, r1
 8001a52:	3315      	adds	r3, #21
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001a58:	7b3b      	ldrb	r3, [r7, #12]
 8001a5a:	2b06      	cmp	r3, #6
 8001a5c:	d00b      	beq.n	8001a76 <linkTimer+0x10a>
 8001a5e:	7b3a      	ldrb	r2, [r7, #12]
 8001a60:	4915      	ldr	r1, [pc, #84]	; (8001ab8 <linkTimer+0x14c>)
 8001a62:	4613      	mov	r3, r2
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	4413      	add	r3, r2
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	440b      	add	r3, r1
 8001a6c:	3308      	adds	r3, #8
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	68ba      	ldr	r2, [r7, #8]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d2dc      	bcs.n	8001a30 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001a76:	7b7a      	ldrb	r2, [r7, #13]
 8001a78:	79fb      	ldrb	r3, [r7, #7]
 8001a7a:	4611      	mov	r1, r2
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fecf 	bl	8001820 <LinkTimerAfter>
 8001a82:	e00f      	b.n	8001aa4 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001a84:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <linkTimer+0x144>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	4611      	mov	r1, r2
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff ff0c 	bl	80018ac <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <linkTimer+0x144>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <linkTimer+0x148>)
 8001a9c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001a9e:	4a04      	ldr	r2, [pc, #16]	; (8001ab0 <linkTimer+0x144>)
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001aa4:	89fb      	ldrh	r3, [r7, #14]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000430 	.word	0x20000430
 8001ab4:	20000431 	.word	0x20000431
 8001ab8:	200003a0 	.word	0x200003a0
 8001abc:	20000434 	.word	0x20000434

08001ac0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	460a      	mov	r2, r1
 8001aca:	71fb      	strb	r3, [r7, #7]
 8001acc:	4613      	mov	r3, r2
 8001ace:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001ad0:	4b39      	ldr	r3, [pc, #228]	; (8001bb8 <UnlinkTimer+0xf8>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	79fa      	ldrb	r2, [r7, #7]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d111      	bne.n	8001b00 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001adc:	4b36      	ldr	r3, [pc, #216]	; (8001bb8 <UnlinkTimer+0xf8>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	4b36      	ldr	r3, [pc, #216]	; (8001bbc <UnlinkTimer+0xfc>)
 8001ae4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001ae6:	79fa      	ldrb	r2, [r7, #7]
 8001ae8:	4935      	ldr	r1, [pc, #212]	; (8001bc0 <UnlinkTimer+0x100>)
 8001aea:	4613      	mov	r3, r2
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	4413      	add	r3, r2
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	440b      	add	r3, r1
 8001af4:	3315      	adds	r3, #21
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	b2da      	uxtb	r2, r3
 8001afa:	4b2f      	ldr	r3, [pc, #188]	; (8001bb8 <UnlinkTimer+0xf8>)
 8001afc:	701a      	strb	r2, [r3, #0]
 8001afe:	e03e      	b.n	8001b7e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001b00:	79fa      	ldrb	r2, [r7, #7]
 8001b02:	492f      	ldr	r1, [pc, #188]	; (8001bc0 <UnlinkTimer+0x100>)
 8001b04:	4613      	mov	r3, r2
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	4413      	add	r3, r2
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	440b      	add	r3, r1
 8001b0e:	3314      	adds	r3, #20
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001b14:	79fa      	ldrb	r2, [r7, #7]
 8001b16:	492a      	ldr	r1, [pc, #168]	; (8001bc0 <UnlinkTimer+0x100>)
 8001b18:	4613      	mov	r3, r2
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	4413      	add	r3, r2
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	440b      	add	r3, r1
 8001b22:	3315      	adds	r3, #21
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001b28:	79f9      	ldrb	r1, [r7, #7]
 8001b2a:	7bfa      	ldrb	r2, [r7, #15]
 8001b2c:	4824      	ldr	r0, [pc, #144]	; (8001bc0 <UnlinkTimer+0x100>)
 8001b2e:	460b      	mov	r3, r1
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	440b      	add	r3, r1
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	4403      	add	r3, r0
 8001b38:	3315      	adds	r3, #21
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	b2d8      	uxtb	r0, r3
 8001b3e:	4920      	ldr	r1, [pc, #128]	; (8001bc0 <UnlinkTimer+0x100>)
 8001b40:	4613      	mov	r3, r2
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	4413      	add	r3, r2
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	440b      	add	r3, r1
 8001b4a:	3315      	adds	r3, #21
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001b50:	7bbb      	ldrb	r3, [r7, #14]
 8001b52:	2b06      	cmp	r3, #6
 8001b54:	d013      	beq.n	8001b7e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001b56:	79f9      	ldrb	r1, [r7, #7]
 8001b58:	7bba      	ldrb	r2, [r7, #14]
 8001b5a:	4819      	ldr	r0, [pc, #100]	; (8001bc0 <UnlinkTimer+0x100>)
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	440b      	add	r3, r1
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	4403      	add	r3, r0
 8001b66:	3314      	adds	r3, #20
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	b2d8      	uxtb	r0, r3
 8001b6c:	4914      	ldr	r1, [pc, #80]	; (8001bc0 <UnlinkTimer+0x100>)
 8001b6e:	4613      	mov	r3, r2
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	4413      	add	r3, r2
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	440b      	add	r3, r1
 8001b78:	3314      	adds	r3, #20
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001b7e:	79fa      	ldrb	r2, [r7, #7]
 8001b80:	490f      	ldr	r1, [pc, #60]	; (8001bc0 <UnlinkTimer+0x100>)
 8001b82:	4613      	mov	r3, r2
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	4413      	add	r3, r2
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	440b      	add	r3, r1
 8001b8c:	330c      	adds	r3, #12
 8001b8e:	2201      	movs	r2, #1
 8001b90:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001b92:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <UnlinkTimer+0xf8>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b06      	cmp	r3, #6
 8001b9a:	d107      	bne.n	8001bac <UnlinkTimer+0xec>
 8001b9c:	79bb      	ldrb	r3, [r7, #6]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d104      	bne.n	8001bac <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001ba2:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <UnlinkTimer+0x104>)
 8001ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba8:	601a      	str	r2, [r3, #0]
  }

  return;
 8001baa:	bf00      	nop
 8001bac:	bf00      	nop
}
 8001bae:	3714      	adds	r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	20000430 	.word	0x20000430
 8001bbc:	20000431 	.word	0x20000431
 8001bc0:	200003a0 	.word	0x200003a0
 8001bc4:	20000434 	.word	0x20000434

08001bc8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001bce:	4b1a      	ldr	r3, [pc, #104]	; (8001c38 <ReturnTimeElapsed+0x70>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd6:	d026      	beq.n	8001c26 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001bd8:	f7ff fe02 	bl	80017e0 <ReadRtcSsrValue>
 8001bdc:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001bde:	4b16      	ldr	r3, [pc, #88]	; (8001c38 <ReturnTimeElapsed+0x70>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d805      	bhi.n	8001bf4 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001be8:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <ReturnTimeElapsed+0x70>)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	607b      	str	r3, [r7, #4]
 8001bf2:	e00a      	b.n	8001c0a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001bf4:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <ReturnTimeElapsed+0x74>)
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001c00:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <ReturnTimeElapsed+0x70>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	4413      	add	r3, r2
 8001c08:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001c0a:	4b0d      	ldr	r3, [pc, #52]	; (8001c40 <ReturnTimeElapsed+0x78>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	fb02 f303 	mul.w	r3, r2, r3
 8001c16:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001c18:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <ReturnTimeElapsed+0x7c>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	40d3      	lsrs	r3, r2
 8001c22:	607b      	str	r3, [r7, #4]
 8001c24:	e001      	b.n	8001c2a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001c26:	2300      	movs	r3, #0
 8001c28:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	b29b      	uxth	r3, r3
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000434 	.word	0x20000434
 8001c3c:	2000043c 	.word	0x2000043c
 8001c40:	2000043a 	.word	0x2000043a
 8001c44:	20000439 	.word	0x20000439

08001c48 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001c52:	88fb      	ldrh	r3, [r7, #6]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d108      	bne.n	8001c6a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001c58:	f7ff fdc2 	bl	80017e0 <ReadRtcSsrValue>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	4a21      	ldr	r2, [pc, #132]	; (8001ce4 <RestartWakeupCounter+0x9c>)
 8001c60:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001c62:	2003      	movs	r0, #3
 8001c64:	f002 fb77 	bl	8004356 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001c68:	e039      	b.n	8001cde <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001c6a:	88fb      	ldrh	r3, [r7, #6]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d803      	bhi.n	8001c78 <RestartWakeupCounter+0x30>
 8001c70:	4b1d      	ldr	r3, [pc, #116]	; (8001ce8 <RestartWakeupCounter+0xa0>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d002      	beq.n	8001c7e <RestartWakeupCounter+0x36>
      Value -= 1;
 8001c78:	88fb      	ldrh	r3, [r7, #6]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001c7e:	bf00      	nop
 8001c80:	4b1a      	ldr	r3, [pc, #104]	; (8001cec <RestartWakeupCounter+0xa4>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	f003 0304 	and.w	r3, r3, #4
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0f8      	beq.n	8001c80 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001c8e:	4b17      	ldr	r3, [pc, #92]	; (8001cec <RestartWakeupCounter+0xa4>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	4b15      	ldr	r3, [pc, #84]	; (8001cec <RestartWakeupCounter+0xa4>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001c9e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001ca0:	4b13      	ldr	r3, [pc, #76]	; (8001cf0 <RestartWakeupCounter+0xa8>)
 8001ca2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001ca6:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001ca8:	2003      	movs	r0, #3
 8001caa:	f002 fb62 	bl	8004372 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001cae:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <RestartWakeupCounter+0xac>)
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	0c1b      	lsrs	r3, r3, #16
 8001cb4:	041b      	lsls	r3, r3, #16
 8001cb6:	88fa      	ldrh	r2, [r7, #6]
 8001cb8:	490e      	ldr	r1, [pc, #56]	; (8001cf4 <RestartWakeupCounter+0xac>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001cbe:	f7ff fd8f 	bl	80017e0 <ReadRtcSsrValue>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	4a07      	ldr	r2, [pc, #28]	; (8001ce4 <RestartWakeupCounter+0x9c>)
 8001cc6:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001cc8:	4b08      	ldr	r3, [pc, #32]	; (8001cec <RestartWakeupCounter+0xa4>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	689a      	ldr	r2, [r3, #8]
 8001cce:	4b07      	ldr	r3, [pc, #28]	; (8001cec <RestartWakeupCounter+0xa4>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001cd6:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001cd8:	f3af 8000 	nop.w
  return ;
 8001cdc:	bf00      	nop
}
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20000434 	.word	0x20000434
 8001ce8:	20000439 	.word	0x20000439
 8001cec:	20000484 	.word	0x20000484
 8001cf0:	58000800 	.word	0x58000800
 8001cf4:	40002800 	.word	0x40002800

08001cf8 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001cfe:	4b45      	ldr	r3, [pc, #276]	; (8001e14 <RescheduleTimerList+0x11c>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d0a:	d107      	bne.n	8001d1c <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001d0c:	bf00      	nop
 8001d0e:	4b42      	ldr	r3, [pc, #264]	; (8001e18 <RescheduleTimerList+0x120>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	f003 0304 	and.w	r3, r3, #4
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1f8      	bne.n	8001d0e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001d1c:	4b3e      	ldr	r3, [pc, #248]	; (8001e18 <RescheduleTimerList+0x120>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689a      	ldr	r2, [r3, #8]
 8001d22:	4b3d      	ldr	r3, [pc, #244]	; (8001e18 <RescheduleTimerList+0x120>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d2a:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001d2c:	4b3b      	ldr	r3, [pc, #236]	; (8001e1c <RescheduleTimerList+0x124>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001d32:	7bfa      	ldrb	r2, [r7, #15]
 8001d34:	493a      	ldr	r1, [pc, #232]	; (8001e20 <RescheduleTimerList+0x128>)
 8001d36:	4613      	mov	r3, r2
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	4413      	add	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	440b      	add	r3, r1
 8001d40:	3308      	adds	r3, #8
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001d46:	f7ff ff3f 	bl	8001bc8 <ReturnTimeElapsed>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001d4e:	88fb      	ldrh	r3, [r7, #6]
 8001d50:	68ba      	ldr	r2, [r7, #8]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d205      	bcs.n	8001d62 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001d5a:	4b32      	ldr	r3, [pc, #200]	; (8001e24 <RescheduleTimerList+0x12c>)
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	701a      	strb	r2, [r3, #0]
 8001d60:	e04d      	b.n	8001dfe <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001d62:	88fb      	ldrh	r3, [r7, #6]
 8001d64:	4a30      	ldr	r2, [pc, #192]	; (8001e28 <RescheduleTimerList+0x130>)
 8001d66:	8812      	ldrh	r2, [r2, #0]
 8001d68:	b292      	uxth	r2, r2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d906      	bls.n	8001d82 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001d74:	4b2c      	ldr	r3, [pc, #176]	; (8001e28 <RescheduleTimerList+0x130>)
 8001d76:	881b      	ldrh	r3, [r3, #0]
 8001d78:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001d7a:	4b2a      	ldr	r3, [pc, #168]	; (8001e24 <RescheduleTimerList+0x12c>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	701a      	strb	r2, [r3, #0]
 8001d80:	e03d      	b.n	8001dfe <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	88fb      	ldrh	r3, [r7, #6]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001d8c:	4b25      	ldr	r3, [pc, #148]	; (8001e24 <RescheduleTimerList+0x12c>)
 8001d8e:	2201      	movs	r2, #1
 8001d90:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001d92:	e034      	b.n	8001dfe <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001d94:	7bfa      	ldrb	r2, [r7, #15]
 8001d96:	4922      	ldr	r1, [pc, #136]	; (8001e20 <RescheduleTimerList+0x128>)
 8001d98:	4613      	mov	r3, r2
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	4413      	add	r3, r2
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	440b      	add	r3, r1
 8001da2:	3308      	adds	r3, #8
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	88fb      	ldrh	r3, [r7, #6]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d20a      	bcs.n	8001dc2 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001dac:	7bfa      	ldrb	r2, [r7, #15]
 8001dae:	491c      	ldr	r1, [pc, #112]	; (8001e20 <RescheduleTimerList+0x128>)
 8001db0:	4613      	mov	r3, r2
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	4413      	add	r3, r2
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	440b      	add	r3, r1
 8001dba:	3308      	adds	r3, #8
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	e013      	b.n	8001dea <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001dc2:	7bfa      	ldrb	r2, [r7, #15]
 8001dc4:	4916      	ldr	r1, [pc, #88]	; (8001e20 <RescheduleTimerList+0x128>)
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	4413      	add	r3, r2
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	440b      	add	r3, r1
 8001dd0:	3308      	adds	r3, #8
 8001dd2:	6819      	ldr	r1, [r3, #0]
 8001dd4:	88fb      	ldrh	r3, [r7, #6]
 8001dd6:	7bfa      	ldrb	r2, [r7, #15]
 8001dd8:	1ac9      	subs	r1, r1, r3
 8001dda:	4811      	ldr	r0, [pc, #68]	; (8001e20 <RescheduleTimerList+0x128>)
 8001ddc:	4613      	mov	r3, r2
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	4413      	add	r3, r2
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	4403      	add	r3, r0
 8001de6:	3308      	adds	r3, #8
 8001de8:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001dea:	7bfa      	ldrb	r2, [r7, #15]
 8001dec:	490c      	ldr	r1, [pc, #48]	; (8001e20 <RescheduleTimerList+0x128>)
 8001dee:	4613      	mov	r3, r2
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	4413      	add	r3, r2
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	440b      	add	r3, r1
 8001df8:	3315      	adds	r3, #21
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001dfe:	7bfb      	ldrb	r3, [r7, #15]
 8001e00:	2b06      	cmp	r3, #6
 8001e02:	d1c7      	bne.n	8001d94 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001e04:	89bb      	ldrh	r3, [r7, #12]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff ff1e 	bl	8001c48 <RestartWakeupCounter>

  return ;
 8001e0c:	bf00      	nop
}
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40002800 	.word	0x40002800
 8001e18:	20000484 	.word	0x20000484
 8001e1c:	20000430 	.word	0x20000430
 8001e20:	200003a0 	.word	0x200003a0
 8001e24:	20000438 	.word	0x20000438
 8001e28:	2000043e 	.word	0x2000043e

08001e2c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b08a      	sub	sp, #40	; 0x28
 8001e30:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e32:	f3ef 8310 	mrs	r3, PRIMASK
 8001e36:	617b      	str	r3, [r7, #20]
  return(result);
 8001e38:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001e3a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001e3c:	b672      	cpsid	i
}
 8001e3e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001e40:	4b59      	ldr	r3, [pc, #356]	; (8001fa8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	22ca      	movs	r2, #202	; 0xca
 8001e46:	625a      	str	r2, [r3, #36]	; 0x24
 8001e48:	4b57      	ldr	r3, [pc, #348]	; (8001fa8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2253      	movs	r2, #83	; 0x53
 8001e4e:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001e50:	4b55      	ldr	r3, [pc, #340]	; (8001fa8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	689a      	ldr	r2, [r3, #8]
 8001e56:	4b54      	ldr	r3, [pc, #336]	; (8001fa8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e5e:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001e60:	4b52      	ldr	r3, [pc, #328]	; (8001fac <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001e68:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001e6c:	4950      	ldr	r1, [pc, #320]	; (8001fb0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001e6e:	4613      	mov	r3, r2
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	4413      	add	r3, r2
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	440b      	add	r3, r1
 8001e78:	330c      	adds	r3, #12
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d16e      	bne.n	8001f60 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001e82:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001e86:	494a      	ldr	r1, [pc, #296]	; (8001fb0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001e88:	4613      	mov	r3, r2
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	4413      	add	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	440b      	add	r3, r1
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001e96:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001e9a:	4945      	ldr	r1, [pc, #276]	; (8001fb0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	4413      	add	r3, r2
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	440b      	add	r3, r1
 8001ea6:	3310      	adds	r3, #16
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001eac:	4b41      	ldr	r3, [pc, #260]	; (8001fb4 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d04c      	beq.n	8001f50 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001eb6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001eba:	493d      	ldr	r1, [pc, #244]	; (8001fb0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	4413      	add	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	440b      	add	r3, r1
 8001ec6:	330d      	adds	r3, #13
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d124      	bne.n	8001f1a <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001ed0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff fdf2 	bl	8001ac0 <UnlinkTimer>
 8001edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ede:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	f383 8810 	msr	PRIMASK, r3
}
 8001ee6:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001ee8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001eec:	4930      	ldr	r1, [pc, #192]	; (8001fb0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001eee:	4613      	mov	r3, r2
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	4413      	add	r3, r2
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	440b      	add	r3, r1
 8001ef8:	3304      	adds	r3, #4
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f00:	4611      	mov	r1, r2
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 fa32 	bl	800236c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001f08:	4b27      	ldr	r3, [pc, #156]	; (8001fa8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	22ca      	movs	r2, #202	; 0xca
 8001f0e:	625a      	str	r2, [r3, #36]	; 0x24
 8001f10:	4b25      	ldr	r3, [pc, #148]	; (8001fa8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2253      	movs	r2, #83	; 0x53
 8001f16:	625a      	str	r2, [r3, #36]	; 0x24
 8001f18:	e012      	b.n	8001f40 <HW_TS_RTC_Wakeup_Handler+0x114>
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f383 8810 	msr	PRIMASK, r3
}
 8001f24:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001f26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 f99a 	bl	8002264 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001f30:	4b1d      	ldr	r3, [pc, #116]	; (8001fa8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	22ca      	movs	r2, #202	; 0xca
 8001f36:	625a      	str	r2, [r3, #36]	; 0x24
 8001f38:	4b1b      	ldr	r3, [pc, #108]	; (8001fa8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2253      	movs	r2, #83	; 0x53
 8001f3e:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001f40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f44:	69fa      	ldr	r2, [r7, #28]
 8001f46:	4619      	mov	r1, r3
 8001f48:	69b8      	ldr	r0, [r7, #24]
 8001f4a:	f000 fa95 	bl	8002478 <HW_TS_RTC_Int_AppNot>
 8001f4e:	e022      	b.n	8001f96 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001f50:	f7ff fed2 	bl	8001cf8 <RescheduleTimerList>
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	f383 8810 	msr	PRIMASK, r3
}
 8001f5e:	e01a      	b.n	8001f96 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001f60:	bf00      	nop
 8001f62:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0f8      	beq.n	8001f62 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001f70:	4b0d      	ldr	r3, [pc, #52]	; (8001fa8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001f80:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001f82:	4b0d      	ldr	r3, [pc, #52]	; (8001fb8 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001f84:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f383 8810 	msr	PRIMASK, r3
}
 8001f94:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001f96:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	22ff      	movs	r2, #255	; 0xff
 8001f9c:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001f9e:	bf00      	nop
}
 8001fa0:	3728      	adds	r7, #40	; 0x28
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	20000484 	.word	0x20000484
 8001fac:	20000430 	.word	0x20000430
 8001fb0:	200003a0 	.word	0x200003a0
 8001fb4:	20000438 	.word	0x20000438
 8001fb8:	58000800 	.word	0x58000800

08001fbc <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b088      	sub	sp, #32
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	6039      	str	r1, [r7, #0]
 8001fc6:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001fc8:	4b5e      	ldr	r3, [pc, #376]	; (8002144 <HW_TS_Init+0x188>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	22ca      	movs	r2, #202	; 0xca
 8001fce:	625a      	str	r2, [r3, #36]	; 0x24
 8001fd0:	4b5c      	ldr	r3, [pc, #368]	; (8002144 <HW_TS_Init+0x188>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2253      	movs	r2, #83	; 0x53
 8001fd6:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001fd8:	4b5b      	ldr	r3, [pc, #364]	; (8002148 <HW_TS_Init+0x18c>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	4a5a      	ldr	r2, [pc, #360]	; (8002148 <HW_TS_Init+0x18c>)
 8001fde:	f043 0320 	orr.w	r3, r3, #32
 8001fe2:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001fe4:	4b58      	ldr	r3, [pc, #352]	; (8002148 <HW_TS_Init+0x18c>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	f1c3 0304 	rsb	r3, r3, #4
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	4b55      	ldr	r3, [pc, #340]	; (800214c <HW_TS_Init+0x190>)
 8001ff8:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001ffa:	4b53      	ldr	r3, [pc, #332]	; (8002148 <HW_TS_Init+0x18c>)
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002002:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8002006:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	fa92 f2a2 	rbit	r2, r2
 800200e:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	2a00      	cmp	r2, #0
 8002018:	d101      	bne.n	800201e <HW_TS_Init+0x62>
  {
    return 32U;
 800201a:	2220      	movs	r2, #32
 800201c:	e003      	b.n	8002026 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	fab2 f282 	clz	r2, r2
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	40d3      	lsrs	r3, r2
 8002028:	b2db      	uxtb	r3, r3
 800202a:	3301      	adds	r3, #1
 800202c:	b2da      	uxtb	r2, r3
 800202e:	4b48      	ldr	r3, [pc, #288]	; (8002150 <HW_TS_Init+0x194>)
 8002030:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8002032:	4b45      	ldr	r3, [pc, #276]	; (8002148 <HW_TS_Init+0x18c>)
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	b29b      	uxth	r3, r3
 8002038:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800203c:	b29b      	uxth	r3, r3
 800203e:	3301      	adds	r3, #1
 8002040:	b29a      	uxth	r2, r3
 8002042:	4b44      	ldr	r3, [pc, #272]	; (8002154 <HW_TS_Init+0x198>)
 8002044:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002046:	4b43      	ldr	r3, [pc, #268]	; (8002154 <HW_TS_Init+0x198>)
 8002048:	881b      	ldrh	r3, [r3, #0]
 800204a:	3b01      	subs	r3, #1
 800204c:	4a40      	ldr	r2, [pc, #256]	; (8002150 <HW_TS_Init+0x194>)
 800204e:	7812      	ldrb	r2, [r2, #0]
 8002050:	fb02 f303 	mul.w	r3, r2, r3
 8002054:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002058:	4a3c      	ldr	r2, [pc, #240]	; (800214c <HW_TS_Init+0x190>)
 800205a:	7812      	ldrb	r2, [r2, #0]
 800205c:	40d3      	lsrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002066:	4293      	cmp	r3, r2
 8002068:	d904      	bls.n	8002074 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800206a:	4b3b      	ldr	r3, [pc, #236]	; (8002158 <HW_TS_Init+0x19c>)
 800206c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002070:	801a      	strh	r2, [r3, #0]
 8002072:	e003      	b.n	800207c <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	b29a      	uxth	r2, r3
 8002078:	4b37      	ldr	r3, [pc, #220]	; (8002158 <HW_TS_Init+0x19c>)
 800207a:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800207c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002080:	f7ff fb9c 	bl	80017bc <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002084:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002088:	f7ff fb84 	bl	8001794 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800208c:	79fb      	ldrb	r3, [r7, #7]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d13d      	bne.n	800210e <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002092:	4b32      	ldr	r3, [pc, #200]	; (800215c <HW_TS_Init+0x1a0>)
 8002094:	2201      	movs	r2, #1
 8002096:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002098:	4b31      	ldr	r3, [pc, #196]	; (8002160 <HW_TS_Init+0x1a4>)
 800209a:	f04f 32ff 	mov.w	r2, #4294967295
 800209e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80020a0:	2300      	movs	r3, #0
 80020a2:	77fb      	strb	r3, [r7, #31]
 80020a4:	e00c      	b.n	80020c0 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80020a6:	7ffa      	ldrb	r2, [r7, #31]
 80020a8:	492e      	ldr	r1, [pc, #184]	; (8002164 <HW_TS_Init+0x1a8>)
 80020aa:	4613      	mov	r3, r2
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	4413      	add	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	440b      	add	r3, r1
 80020b4:	330c      	adds	r3, #12
 80020b6:	2200      	movs	r2, #0
 80020b8:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80020ba:	7ffb      	ldrb	r3, [r7, #31]
 80020bc:	3301      	adds	r3, #1
 80020be:	77fb      	strb	r3, [r7, #31]
 80020c0:	7ffb      	ldrb	r3, [r7, #31]
 80020c2:	2b05      	cmp	r3, #5
 80020c4:	d9ef      	bls.n	80020a6 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80020c6:	4b28      	ldr	r3, [pc, #160]	; (8002168 <HW_TS_Init+0x1ac>)
 80020c8:	2206      	movs	r2, #6
 80020ca:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 80020cc:	4b1d      	ldr	r3, [pc, #116]	; (8002144 <HW_TS_Init+0x188>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689a      	ldr	r2, [r3, #8]
 80020d2:	4b1c      	ldr	r3, [pc, #112]	; (8002144 <HW_TS_Init+0x188>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020da:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80020dc:	4b19      	ldr	r3, [pc, #100]	; (8002144 <HW_TS_Init+0x188>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	b2da      	uxtb	r2, r3
 80020e4:	4b17      	ldr	r3, [pc, #92]	; (8002144 <HW_TS_Init+0x188>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80020ec:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80020ee:	4b1f      	ldr	r3, [pc, #124]	; (800216c <HW_TS_Init+0x1b0>)
 80020f0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80020f4:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80020f6:	2003      	movs	r0, #3
 80020f8:	f002 f93b 	bl	8004372 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80020fc:	4b11      	ldr	r3, [pc, #68]	; (8002144 <HW_TS_Init+0x188>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	4b10      	ldr	r3, [pc, #64]	; (8002144 <HW_TS_Init+0x188>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800210a:	609a      	str	r2, [r3, #8]
 800210c:	e009      	b.n	8002122 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800210e:	4b0d      	ldr	r3, [pc, #52]	; (8002144 <HW_TS_Init+0x188>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002118:	2b00      	cmp	r3, #0
 800211a:	d002      	beq.n	8002122 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800211c:	2003      	movs	r0, #3
 800211e:	f002 f91a 	bl	8004356 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002122:	4b08      	ldr	r3, [pc, #32]	; (8002144 <HW_TS_Init+0x188>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	22ff      	movs	r2, #255	; 0xff
 8002128:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800212a:	2200      	movs	r2, #0
 800212c:	2103      	movs	r1, #3
 800212e:	2003      	movs	r0, #3
 8002130:	f002 f8cf 	bl	80042d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002134:	2003      	movs	r0, #3
 8002136:	f002 f8e6 	bl	8004306 <HAL_NVIC_EnableIRQ>

  return;
 800213a:	bf00      	nop
}
 800213c:	3720      	adds	r7, #32
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20000484 	.word	0x20000484
 8002148:	40002800 	.word	0x40002800
 800214c:	20000439 	.word	0x20000439
 8002150:	2000043a 	.word	0x2000043a
 8002154:	2000043c 	.word	0x2000043c
 8002158:	2000043e 	.word	0x2000043e
 800215c:	20000438 	.word	0x20000438
 8002160:	20000434 	.word	0x20000434
 8002164:	200003a0 	.word	0x200003a0
 8002168:	20000430 	.word	0x20000430
 800216c:	58000800 	.word	0x58000800

08002170 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8002170:	b480      	push	{r7}
 8002172:	b08b      	sub	sp, #44	; 0x2c
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	603b      	str	r3, [r7, #0]
 800217c:	4613      	mov	r3, r2
 800217e:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8002180:	2300      	movs	r3, #0
 8002182:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002186:	f3ef 8310 	mrs	r3, PRIMASK
 800218a:	61fb      	str	r3, [r7, #28]
  return(result);
 800218c:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800218e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8002190:	b672      	cpsid	i
}
 8002192:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002194:	e004      	b.n	80021a0 <HW_TS_Create+0x30>
  {
    loop++;
 8002196:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800219a:	3301      	adds	r3, #1
 800219c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80021a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80021a4:	2b05      	cmp	r3, #5
 80021a6:	d80c      	bhi.n	80021c2 <HW_TS_Create+0x52>
 80021a8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80021ac:	492c      	ldr	r1, [pc, #176]	; (8002260 <HW_TS_Create+0xf0>)
 80021ae:	4613      	mov	r3, r2
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	4413      	add	r3, r2
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	440b      	add	r3, r1
 80021b8:	330c      	adds	r3, #12
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1e9      	bne.n	8002196 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80021c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80021c6:	2b06      	cmp	r3, #6
 80021c8:	d038      	beq.n	800223c <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 80021ca:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80021ce:	4924      	ldr	r1, [pc, #144]	; (8002260 <HW_TS_Create+0xf0>)
 80021d0:	4613      	mov	r3, r2
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	4413      	add	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	440b      	add	r3, r1
 80021da:	330c      	adds	r3, #12
 80021dc:	2201      	movs	r2, #1
 80021de:	701a      	strb	r2, [r3, #0]
 80021e0:	6a3b      	ldr	r3, [r7, #32]
 80021e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	f383 8810 	msr	PRIMASK, r3
}
 80021ea:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80021ec:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80021f0:	491b      	ldr	r1, [pc, #108]	; (8002260 <HW_TS_Create+0xf0>)
 80021f2:	4613      	mov	r3, r2
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	4413      	add	r3, r2
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	440b      	add	r3, r1
 80021fc:	3310      	adds	r3, #16
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8002202:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002206:	4916      	ldr	r1, [pc, #88]	; (8002260 <HW_TS_Create+0xf0>)
 8002208:	4613      	mov	r3, r2
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	4413      	add	r3, r2
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	440b      	add	r3, r1
 8002212:	330d      	adds	r3, #13
 8002214:	79fa      	ldrb	r2, [r7, #7]
 8002216:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8002218:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800221c:	4910      	ldr	r1, [pc, #64]	; (8002260 <HW_TS_Create+0xf0>)
 800221e:	4613      	mov	r3, r2
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	4413      	add	r3, r2
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	440b      	add	r3, r1
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002232:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8002234:	2300      	movs	r3, #0
 8002236:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800223a:	e008      	b.n	800224e <HW_TS_Create+0xde>
 800223c:	6a3b      	ldr	r3, [r7, #32]
 800223e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	f383 8810 	msr	PRIMASK, r3
}
 8002246:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8002248:	2301      	movs	r3, #1
 800224a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 800224e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002252:	4618      	mov	r0, r3
 8002254:	372c      	adds	r7, #44	; 0x2c
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	200003a0 	.word	0x200003a0

08002264 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800226e:	f3ef 8310 	mrs	r3, PRIMASK
 8002272:	60fb      	str	r3, [r7, #12]
  return(result);
 8002274:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002276:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002278:	b672      	cpsid	i
}
 800227a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800227c:	2003      	movs	r0, #3
 800227e:	f002 f850 	bl	8004322 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002282:	4b34      	ldr	r3, [pc, #208]	; (8002354 <HW_TS_Stop+0xf0>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	22ca      	movs	r2, #202	; 0xca
 8002288:	625a      	str	r2, [r3, #36]	; 0x24
 800228a:	4b32      	ldr	r3, [pc, #200]	; (8002354 <HW_TS_Stop+0xf0>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2253      	movs	r2, #83	; 0x53
 8002290:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002292:	79fa      	ldrb	r2, [r7, #7]
 8002294:	4930      	ldr	r1, [pc, #192]	; (8002358 <HW_TS_Stop+0xf4>)
 8002296:	4613      	mov	r3, r2
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	4413      	add	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	440b      	add	r3, r1
 80022a0:	330c      	adds	r3, #12
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d142      	bne.n	8002330 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80022aa:	79fb      	ldrb	r3, [r7, #7]
 80022ac:	2100      	movs	r1, #0
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff fc06 	bl	8001ac0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80022b4:	4b29      	ldr	r3, [pc, #164]	; (800235c <HW_TS_Stop+0xf8>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80022ba:	7cfb      	ldrb	r3, [r7, #19]
 80022bc:	2b06      	cmp	r3, #6
 80022be:	d12f      	bne.n	8002320 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80022c0:	4b27      	ldr	r3, [pc, #156]	; (8002360 <HW_TS_Stop+0xfc>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022cc:	d107      	bne.n	80022de <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80022ce:	bf00      	nop
 80022d0:	4b20      	ldr	r3, [pc, #128]	; (8002354 <HW_TS_Stop+0xf0>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	f003 0304 	and.w	r3, r3, #4
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f8      	bne.n	80022d0 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80022de:	4b1d      	ldr	r3, [pc, #116]	; (8002354 <HW_TS_Stop+0xf0>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	4b1b      	ldr	r3, [pc, #108]	; (8002354 <HW_TS_Stop+0xf0>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022ec:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80022ee:	bf00      	nop
 80022f0:	4b18      	ldr	r3, [pc, #96]	; (8002354 <HW_TS_Stop+0xf0>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	f003 0304 	and.w	r3, r3, #4
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0f8      	beq.n	80022f0 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80022fe:	4b15      	ldr	r3, [pc, #84]	; (8002354 <HW_TS_Stop+0xf0>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	b2da      	uxtb	r2, r3
 8002306:	4b13      	ldr	r3, [pc, #76]	; (8002354 <HW_TS_Stop+0xf0>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800230e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002310:	4b14      	ldr	r3, [pc, #80]	; (8002364 <HW_TS_Stop+0x100>)
 8002312:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002316:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002318:	2003      	movs	r0, #3
 800231a:	f002 f82a 	bl	8004372 <HAL_NVIC_ClearPendingIRQ>
 800231e:	e007      	b.n	8002330 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002320:	4b11      	ldr	r3, [pc, #68]	; (8002368 <HW_TS_Stop+0x104>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	b2db      	uxtb	r3, r3
 8002326:	7cfa      	ldrb	r2, [r7, #19]
 8002328:	429a      	cmp	r2, r3
 800232a:	d001      	beq.n	8002330 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 800232c:	f7ff fce4 	bl	8001cf8 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002330:	4b08      	ldr	r3, [pc, #32]	; (8002354 <HW_TS_Stop+0xf0>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	22ff      	movs	r2, #255	; 0xff
 8002336:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002338:	2003      	movs	r0, #3
 800233a:	f001 ffe4 	bl	8004306 <HAL_NVIC_EnableIRQ>
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	f383 8810 	msr	PRIMASK, r3
}
 8002348:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800234a:	bf00      	nop
}
 800234c:	3718      	adds	r7, #24
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20000484 	.word	0x20000484
 8002358:	200003a0 	.word	0x200003a0
 800235c:	20000430 	.word	0x20000430
 8002360:	40002800 	.word	0x40002800
 8002364:	58000800 	.word	0x58000800
 8002368:	20000431 	.word	0x20000431

0800236c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	6039      	str	r1, [r7, #0]
 8002376:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002378:	79fa      	ldrb	r2, [r7, #7]
 800237a:	493b      	ldr	r1, [pc, #236]	; (8002468 <HW_TS_Start+0xfc>)
 800237c:	4613      	mov	r3, r2
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	4413      	add	r3, r2
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	440b      	add	r3, r1
 8002386:	330c      	adds	r3, #12
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d103      	bne.n	8002398 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002390:	79fb      	ldrb	r3, [r7, #7]
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff ff66 	bl	8002264 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002398:	f3ef 8310 	mrs	r3, PRIMASK
 800239c:	60fb      	str	r3, [r7, #12]
  return(result);
 800239e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80023a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80023a2:	b672      	cpsid	i
}
 80023a4:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80023a6:	2003      	movs	r0, #3
 80023a8:	f001 ffbb 	bl	8004322 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80023ac:	4b2f      	ldr	r3, [pc, #188]	; (800246c <HW_TS_Start+0x100>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	22ca      	movs	r2, #202	; 0xca
 80023b2:	625a      	str	r2, [r3, #36]	; 0x24
 80023b4:	4b2d      	ldr	r3, [pc, #180]	; (800246c <HW_TS_Start+0x100>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2253      	movs	r2, #83	; 0x53
 80023ba:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80023bc:	79fa      	ldrb	r2, [r7, #7]
 80023be:	492a      	ldr	r1, [pc, #168]	; (8002468 <HW_TS_Start+0xfc>)
 80023c0:	4613      	mov	r3, r2
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	4413      	add	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	440b      	add	r3, r1
 80023ca:	330c      	adds	r3, #12
 80023cc:	2202      	movs	r2, #2
 80023ce:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80023d0:	79fa      	ldrb	r2, [r7, #7]
 80023d2:	4925      	ldr	r1, [pc, #148]	; (8002468 <HW_TS_Start+0xfc>)
 80023d4:	4613      	mov	r3, r2
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	4413      	add	r3, r2
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	440b      	add	r3, r1
 80023de:	3308      	adds	r3, #8
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80023e4:	79fa      	ldrb	r2, [r7, #7]
 80023e6:	4920      	ldr	r1, [pc, #128]	; (8002468 <HW_TS_Start+0xfc>)
 80023e8:	4613      	mov	r3, r2
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	4413      	add	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	440b      	add	r3, r1
 80023f2:	3304      	adds	r3, #4
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80023f8:	79fb      	ldrb	r3, [r7, #7]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff fab6 	bl	800196c <linkTimer>
 8002400:	4603      	mov	r3, r0
 8002402:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002404:	4b1a      	ldr	r3, [pc, #104]	; (8002470 <HW_TS_Start+0x104>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800240a:	4b1a      	ldr	r3, [pc, #104]	; (8002474 <HW_TS_Start+0x108>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	b2db      	uxtb	r3, r3
 8002410:	7c7a      	ldrb	r2, [r7, #17]
 8002412:	429a      	cmp	r2, r3
 8002414:	d002      	beq.n	800241c <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8002416:	f7ff fc6f 	bl	8001cf8 <RescheduleTimerList>
 800241a:	e013      	b.n	8002444 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800241c:	79fa      	ldrb	r2, [r7, #7]
 800241e:	4912      	ldr	r1, [pc, #72]	; (8002468 <HW_TS_Start+0xfc>)
 8002420:	4613      	mov	r3, r2
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	4413      	add	r3, r2
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	440b      	add	r3, r1
 800242a:	3308      	adds	r3, #8
 800242c:	6819      	ldr	r1, [r3, #0]
 800242e:	8a7b      	ldrh	r3, [r7, #18]
 8002430:	79fa      	ldrb	r2, [r7, #7]
 8002432:	1ac9      	subs	r1, r1, r3
 8002434:	480c      	ldr	r0, [pc, #48]	; (8002468 <HW_TS_Start+0xfc>)
 8002436:	4613      	mov	r3, r2
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	4413      	add	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	4403      	add	r3, r0
 8002440:	3308      	adds	r3, #8
 8002442:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002444:	4b09      	ldr	r3, [pc, #36]	; (800246c <HW_TS_Start+0x100>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	22ff      	movs	r2, #255	; 0xff
 800244a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800244c:	2003      	movs	r0, #3
 800244e:	f001 ff5a 	bl	8004306 <HAL_NVIC_EnableIRQ>
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	f383 8810 	msr	PRIMASK, r3
}
 800245c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800245e:	bf00      	nop
}
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	200003a0 	.word	0x200003a0
 800246c:	20000484 	.word	0x20000484
 8002470:	20000430 	.word	0x20000430
 8002474:	20000431 	.word	0x20000431

08002478 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	460b      	mov	r3, r1
 8002482:	607a      	str	r2, [r7, #4]
 8002484:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4798      	blx	r3

  return;
 800248a:	bf00      	nop
}
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
	...

08002494 <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	60b9      	str	r1, [r7, #8]
 800249c:	607b      	str	r3, [r7, #4]
 800249e:	4603      	mov	r3, r0
 80024a0:	73fb      	strb	r3, [r7, #15]
 80024a2:	4613      	mov	r3, r2
 80024a4:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10c      	bne.n	80024c6 <HW_UART_Receive_IT+0x32>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_UART_RX_IT(huart1, USART1);
 80024ac:	4a08      	ldr	r2, [pc, #32]	; (80024d0 <HW_UART_Receive_IT+0x3c>)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <HW_UART_Receive_IT+0x40>)
 80024b4:	4a08      	ldr	r2, [pc, #32]	; (80024d8 <HW_UART_Receive_IT+0x44>)
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	89bb      	ldrh	r3, [r7, #12]
 80024ba:	461a      	mov	r2, r3
 80024bc:	68b9      	ldr	r1, [r7, #8]
 80024be:	4805      	ldr	r0, [pc, #20]	; (80024d4 <HW_UART_Receive_IT+0x40>)
 80024c0:	f004 fab4 	bl	8006a2c <HAL_UART_Receive_IT>
            break;
 80024c4:	e000      	b.n	80024c8 <HW_UART_Receive_IT+0x34>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 80024c6:	bf00      	nop
    }

    return;
 80024c8:	bf00      	nop
}
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	20000440 	.word	0x20000440
 80024d4:	200004a8 	.word	0x200004a8
 80024d8:	40013800 	.word	0x40013800

080024dc <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60b9      	str	r1, [r7, #8]
 80024e4:	607b      	str	r3, [r7, #4]
 80024e6:	4603      	mov	r3, r0
 80024e8:	73fb      	strb	r3, [r7, #15]
 80024ea:	4613      	mov	r3, r2
 80024ec:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 80024ee:	2300      	movs	r3, #0
 80024f0:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 80024f2:	2300      	movs	r3, #0
 80024f4:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 80024f6:	7bfb      	ldrb	r3, [r7, #15]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10e      	bne.n	800251a <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 80024fc:	4a17      	ldr	r2, [pc, #92]	; (800255c <HW_UART_Transmit_DMA+0x80>)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8002502:	4b17      	ldr	r3, [pc, #92]	; (8002560 <HW_UART_Transmit_DMA+0x84>)
 8002504:	4a17      	ldr	r2, [pc, #92]	; (8002564 <HW_UART_Transmit_DMA+0x88>)
 8002506:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002508:	89bb      	ldrh	r3, [r7, #12]
 800250a:	461a      	mov	r2, r3
 800250c:	68b9      	ldr	r1, [r7, #8]
 800250e:	4814      	ldr	r0, [pc, #80]	; (8002560 <HW_UART_Transmit_DMA+0x84>)
 8002510:	f004 fad8 	bl	8006ac4 <HAL_UART_Transmit_DMA>
 8002514:	4603      	mov	r3, r0
 8002516:	75fb      	strb	r3, [r7, #23]
            break;
 8002518:	e000      	b.n	800251c <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 800251a:	bf00      	nop
    }

    switch (hal_status)
 800251c:	7dfb      	ldrb	r3, [r7, #23]
 800251e:	2b03      	cmp	r3, #3
 8002520:	d816      	bhi.n	8002550 <HW_UART_Transmit_DMA+0x74>
 8002522:	a201      	add	r2, pc, #4	; (adr r2, 8002528 <HW_UART_Transmit_DMA+0x4c>)
 8002524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002528:	08002539 	.word	0x08002539
 800252c:	0800253f 	.word	0x0800253f
 8002530:	08002545 	.word	0x08002545
 8002534:	0800254b 	.word	0x0800254b
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8002538:	2300      	movs	r3, #0
 800253a:	75bb      	strb	r3, [r7, #22]
            break;
 800253c:	e009      	b.n	8002552 <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 800253e:	2301      	movs	r3, #1
 8002540:	75bb      	strb	r3, [r7, #22]
            break;
 8002542:	e006      	b.n	8002552 <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8002544:	2302      	movs	r3, #2
 8002546:	75bb      	strb	r3, [r7, #22]
            break;
 8002548:	e003      	b.n	8002552 <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 800254a:	2303      	movs	r3, #3
 800254c:	75bb      	strb	r3, [r7, #22]
            break;
 800254e:	e000      	b.n	8002552 <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8002550:	bf00      	nop
    }

    return hw_status;
 8002552:	7dbb      	ldrb	r3, [r7, #22]
}
 8002554:	4618      	mov	r0, r3
 8002556:	3718      	adds	r7, #24
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	20000444 	.word	0x20000444
 8002560:	200004a8 	.word	0x200004a8
 8002564:	40013800 	.word	0x40013800

08002568 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	461a      	mov	r2, r3
 8002576:	4b09      	ldr	r3, [pc, #36]	; (800259c <HAL_UART_RxCpltCallback+0x34>)
 8002578:	429a      	cmp	r2, r3
 800257a:	d107      	bne.n	800258c <HAL_UART_RxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 800257c:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <HAL_UART_RxCpltCallback+0x38>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d005      	beq.n	8002590 <HAL_UART_RxCpltCallback+0x28>
            {
                HW_huart1RxCb();
 8002584:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <HAL_UART_RxCpltCallback+0x38>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4798      	blx	r3
            }
            break;
 800258a:	e001      	b.n	8002590 <HAL_UART_RxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 800258c:	bf00      	nop
 800258e:	e000      	b.n	8002592 <HAL_UART_RxCpltCallback+0x2a>
            break;
 8002590:	bf00      	nop
    }

    return;
 8002592:	bf00      	nop
}
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40013800 	.word	0x40013800
 80025a0:	20000440 	.word	0x20000440

080025a4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	461a      	mov	r2, r3
 80025b2:	4b09      	ldr	r3, [pc, #36]	; (80025d8 <HAL_UART_TxCpltCallback+0x34>)
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d107      	bne.n	80025c8 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 80025b8:	4b08      	ldr	r3, [pc, #32]	; (80025dc <HAL_UART_TxCpltCallback+0x38>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d005      	beq.n	80025cc <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 80025c0:	4b06      	ldr	r3, [pc, #24]	; (80025dc <HAL_UART_TxCpltCallback+0x38>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4798      	blx	r3
            }
            break;
 80025c6:	e001      	b.n	80025cc <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 80025c8:	bf00      	nop
 80025ca:	e000      	b.n	80025ce <HAL_UART_TxCpltCallback+0x2a>
            break;
 80025cc:	bf00      	nop
    }

    return;
 80025ce:	bf00      	nop
}
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40013800 	.word	0x40013800
 80025dc:	20000444 	.word	0x20000444

080025e0 <LL_RCC_LSE_SetDriveCapability>:
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80025e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f0:	f023 0218 	bic.w	r2, r3, #24
 80025f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <LL_AHB1_GRP1_EnableClock>:
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002618:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800261a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4313      	orrs	r3, r2
 8002622:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002628:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4013      	ands	r3, r2
 800262e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002630:	68fb      	ldr	r3, [r7, #12]
}
 8002632:	bf00      	nop
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <LL_AHB2_GRP1_EnableClock>:
{
 800263e:	b480      	push	{r7}
 8002640:	b085      	sub	sp, #20
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800264a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800264c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4313      	orrs	r3, r2
 8002654:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002656:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800265a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4013      	ands	r3, r2
 8002660:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002662:	68fb      	ldr	r3, [r7, #12]
}
 8002664:	bf00      	nop
 8002666:	3714      	adds	r7, #20
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002674:	f001 fc60 	bl	8003f38 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002678:	f7fe fddc 	bl	8001234 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800267c:	f000 f811 	bl	80026a2 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002680:	f000 f85b 	bl	800273a <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8002684:	f000 f87a 	bl	800277c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002688:	f000 f91c 	bl	80028c4 <MX_GPIO_Init>
  MX_DMA_Init();
 800268c:	f000 f908 	bl	80028a0 <MX_DMA_Init>
  MX_RTC_Init();
 8002690:	f000 f888 	bl	80027a4 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8002694:	f000 f8b6 	bl	8002804 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002698:	f7fe fdda 	bl	8001250 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
	{
    /* USER CODE END WHILE */
    MX_APPE_Process();
 800269c:	f7fe ff86 	bl	80015ac <MX_APPE_Process>
 80026a0:	e7fc      	b.n	800269c <main+0x2c>

080026a2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b098      	sub	sp, #96	; 0x60
 80026a6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026a8:	f107 031c 	add.w	r3, r7, #28
 80026ac:	2244      	movs	r2, #68	; 0x44
 80026ae:	2100      	movs	r1, #0
 80026b0:	4618      	mov	r0, r3
 80026b2:	f009 fe7d 	bl	800c3b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026b6:	463b      	mov	r3, r7
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	609a      	str	r2, [r3, #8]
 80026c0:	60da      	str	r2, [r3, #12]
 80026c2:	611a      	str	r2, [r3, #16]
 80026c4:	615a      	str	r2, [r3, #20]
 80026c6:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80026c8:	f002 fbf8 	bl	8004ebc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80026cc:	2000      	movs	r0, #0
 80026ce:	f7ff ff87 	bl	80025e0 <LL_RCC_LSE_SetDriveCapability>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80026d2:	2307      	movs	r3, #7
 80026d4:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80026dc:	2301      	movs	r3, #1
 80026de:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026e6:	2340      	movs	r3, #64	; 0x40
 80026e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80026ea:	2300      	movs	r3, #0
 80026ec:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026ee:	f107 031c 	add.w	r3, r7, #28
 80026f2:	4618      	mov	r0, r3
 80026f4:	f002 ff4a 	bl	800558c <HAL_RCC_OscConfig>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <SystemClock_Config+0x60>
  {
    Error_Handler();
 80026fe:	f000 f8eb 	bl	80028d8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002702:	236f      	movs	r3, #111	; 0x6f
 8002704:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002706:	2302      	movs	r3, #2
 8002708:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800270a:	2300      	movs	r3, #0
 800270c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800270e:	2300      	movs	r3, #0
 8002710:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002712:	2300      	movs	r3, #0
 8002714:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002716:	2300      	movs	r3, #0
 8002718:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800271a:	2300      	movs	r3, #0
 800271c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800271e:	463b      	mov	r3, r7
 8002720:	2101      	movs	r1, #1
 8002722:	4618      	mov	r0, r3
 8002724:	f003 fa68 	bl	8005bf8 <HAL_RCC_ClockConfig>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800272e:	f000 f8d3 	bl	80028d8 <Error_Handler>
  }
}
 8002732:	bf00      	nop
 8002734:	3760      	adds	r7, #96	; 0x60
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b08c      	sub	sp, #48	; 0x30
 800273e:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002740:	463b      	mov	r3, r7
 8002742:	2230      	movs	r2, #48	; 0x30
 8002744:	2100      	movs	r1, #0
 8002746:	4618      	mov	r0, r3
 8002748:	f009 fe32 	bl	800c3b0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800274c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002750:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002752:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002756:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8002758:	2302      	movs	r3, #2
 800275a:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800275c:	2310      	movs	r3, #16
 800275e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002760:	463b      	mov	r3, r7
 8002762:	4618      	mov	r0, r3
 8002764:	f003 fe0a 	bl	800637c <HAL_RCCEx_PeriphCLKConfig>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 800276e:	f000 f8b3 	bl	80028d8 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002772:	bf00      	nop
 8002774:	3730      	adds	r7, #48	; 0x30
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
	...

0800277c <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
void MX_IPCC_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002780:	4b06      	ldr	r3, [pc, #24]	; (800279c <MX_IPCC_Init+0x20>)
 8002782:	4a07      	ldr	r2, [pc, #28]	; (80027a0 <MX_IPCC_Init+0x24>)
 8002784:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002786:	4805      	ldr	r0, [pc, #20]	; (800279c <MX_IPCC_Init+0x20>)
 8002788:	f002 fb12 	bl	8004db0 <HAL_IPCC_Init>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002792:	f000 f8a1 	bl	80028d8 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20000448 	.word	0x20000448
 80027a0:	58000c00 	.word	0x58000c00

080027a4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
void MX_RTC_Init(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80027a8:	4b14      	ldr	r3, [pc, #80]	; (80027fc <MX_RTC_Init+0x58>)
 80027aa:	4a15      	ldr	r2, [pc, #84]	; (8002800 <MX_RTC_Init+0x5c>)
 80027ac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80027ae:	4b13      	ldr	r3, [pc, #76]	; (80027fc <MX_RTC_Init+0x58>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80027b4:	4b11      	ldr	r3, [pc, #68]	; (80027fc <MX_RTC_Init+0x58>)
 80027b6:	220f      	movs	r2, #15
 80027b8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80027ba:	4b10      	ldr	r3, [pc, #64]	; (80027fc <MX_RTC_Init+0x58>)
 80027bc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80027c0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80027c2:	4b0e      	ldr	r3, [pc, #56]	; (80027fc <MX_RTC_Init+0x58>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80027c8:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <MX_RTC_Init+0x58>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80027ce:	4b0b      	ldr	r3, [pc, #44]	; (80027fc <MX_RTC_Init+0x58>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80027d4:	4809      	ldr	r0, [pc, #36]	; (80027fc <MX_RTC_Init+0x58>)
 80027d6:	f003 fec7 	bl	8006568 <HAL_RTC_Init>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 80027e0:	f000 f87a 	bl	80028d8 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80027e4:	2200      	movs	r2, #0
 80027e6:	2100      	movs	r1, #0
 80027e8:	4804      	ldr	r0, [pc, #16]	; (80027fc <MX_RTC_Init+0x58>)
 80027ea:	f003 ffbd 	bl	8006768 <HAL_RTCEx_SetWakeUpTimer_IT>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 80027f4:	f000 f870 	bl	80028d8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80027f8:	bf00      	nop
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	20000484 	.word	0x20000484
 8002800:	40002800 	.word	0x40002800

08002804 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002808:	4b23      	ldr	r3, [pc, #140]	; (8002898 <MX_USART1_UART_Init+0x94>)
 800280a:	4a24      	ldr	r2, [pc, #144]	; (800289c <MX_USART1_UART_Init+0x98>)
 800280c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800280e:	4b22      	ldr	r3, [pc, #136]	; (8002898 <MX_USART1_UART_Init+0x94>)
 8002810:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002814:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002816:	4b20      	ldr	r3, [pc, #128]	; (8002898 <MX_USART1_UART_Init+0x94>)
 8002818:	2200      	movs	r2, #0
 800281a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800281c:	4b1e      	ldr	r3, [pc, #120]	; (8002898 <MX_USART1_UART_Init+0x94>)
 800281e:	2200      	movs	r2, #0
 8002820:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002822:	4b1d      	ldr	r3, [pc, #116]	; (8002898 <MX_USART1_UART_Init+0x94>)
 8002824:	2200      	movs	r2, #0
 8002826:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002828:	4b1b      	ldr	r3, [pc, #108]	; (8002898 <MX_USART1_UART_Init+0x94>)
 800282a:	220c      	movs	r2, #12
 800282c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800282e:	4b1a      	ldr	r3, [pc, #104]	; (8002898 <MX_USART1_UART_Init+0x94>)
 8002830:	2200      	movs	r2, #0
 8002832:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002834:	4b18      	ldr	r3, [pc, #96]	; (8002898 <MX_USART1_UART_Init+0x94>)
 8002836:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800283a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800283c:	4b16      	ldr	r3, [pc, #88]	; (8002898 <MX_USART1_UART_Init+0x94>)
 800283e:	2200      	movs	r2, #0
 8002840:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002842:	4b15      	ldr	r3, [pc, #84]	; (8002898 <MX_USART1_UART_Init+0x94>)
 8002844:	2200      	movs	r2, #0
 8002846:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002848:	4b13      	ldr	r3, [pc, #76]	; (8002898 <MX_USART1_UART_Init+0x94>)
 800284a:	2200      	movs	r2, #0
 800284c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800284e:	4812      	ldr	r0, [pc, #72]	; (8002898 <MX_USART1_UART_Init+0x94>)
 8002850:	f004 f89c 	bl	800698c <HAL_UART_Init>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800285a:	f000 f83d 	bl	80028d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800285e:	2100      	movs	r1, #0
 8002860:	480d      	ldr	r0, [pc, #52]	; (8002898 <MX_USART1_UART_Init+0x94>)
 8002862:	f006 f8e8 	bl	8008a36 <HAL_UARTEx_SetTxFifoThreshold>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 800286c:	f000 f834 	bl	80028d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002870:	2100      	movs	r1, #0
 8002872:	4809      	ldr	r0, [pc, #36]	; (8002898 <MX_USART1_UART_Init+0x94>)
 8002874:	f006 f91d 	bl	8008ab2 <HAL_UARTEx_SetRxFifoThreshold>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 800287e:	f000 f82b 	bl	80028d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002882:	4805      	ldr	r0, [pc, #20]	; (8002898 <MX_USART1_UART_Init+0x94>)
 8002884:	f006 f89e 	bl	80089c4 <HAL_UARTEx_DisableFifoMode>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 800288e:	f000 f823 	bl	80028d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	200004a8 	.word	0x200004a8
 800289c:	40013800 	.word	0x40013800

080028a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80028a4:	2004      	movs	r0, #4
 80028a6:	f7ff feb1 	bl	800260c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80028aa:	2001      	movs	r0, #1
 80028ac:	f7ff feae 	bl	800260c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 80028b0:	2200      	movs	r2, #0
 80028b2:	210f      	movs	r1, #15
 80028b4:	200e      	movs	r0, #14
 80028b6:	f001 fd0c 	bl	80042d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80028ba:	200e      	movs	r0, #14
 80028bc:	f001 fd23 	bl	8004306 <HAL_NVIC_EnableIRQ>

}
 80028c0:	bf00      	nop
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028c8:	2004      	movs	r0, #4
 80028ca:	f7ff feb8 	bl	800263e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ce:	2001      	movs	r0, #1
 80028d0:	f7ff feb5 	bl	800263e <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80028d4:	bf00      	nop
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80028dc:	bf00      	nop
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80028ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4313      	orrs	r3, r2
 8002902:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002912:	b480      	push	{r7}
 8002914:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800291a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800291e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002926:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800292a:	bf00      	nop
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <LL_AHB2_GRP1_EnableClock>:
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800293c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002940:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002942:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4313      	orrs	r3, r2
 800294a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800294c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002950:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4013      	ands	r3, r2
 8002956:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002958:	68fb      	ldr	r3, [r7, #12]
}
 800295a:	bf00      	nop
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <LL_AHB3_GRP1_EnableClock>:
{
 8002966:	b480      	push	{r7}
 8002968:	b085      	sub	sp, #20
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800296e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002972:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002974:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4313      	orrs	r3, r2
 800297c:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800297e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002982:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4013      	ands	r3, r2
 8002988:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800298a:	68fb      	ldr	r3, [r7, #12]
}
 800298c:	bf00      	nop
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <LL_APB1_GRP1_EnableClock>:
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80029a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80029a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80029b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4013      	ands	r3, r2
 80029ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029bc:	68fb      	ldr	r3, [r7, #12]
}
 80029be:	bf00      	nop
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <LL_APB2_GRP1_EnableClock>:
{
 80029ca:	b480      	push	{r7}
 80029cc:	b085      	sub	sp, #20
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80029d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4313      	orrs	r3, r2
 80029e0:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80029e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4013      	ands	r3, r2
 80029ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029ee:	68fb      	ldr	r3, [r7, #12]
}
 80029f0:	bf00      	nop
 80029f2:	3714      	adds	r7, #20
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002a00:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002a04:	f7ff ffaf 	bl	8002966 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002a08:	2200      	movs	r2, #0
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	202e      	movs	r0, #46	; 0x2e
 8002a0e:	f001 fc60 	bl	80042d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002a12:	202e      	movs	r0, #46	; 0x2e
 8002a14:	f001 fc77 	bl	8004306 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a18:	bf00      	nop
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a0d      	ldr	r2, [pc, #52]	; (8002a60 <HAL_IPCC_MspInit+0x44>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d113      	bne.n	8002a56 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002a2e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002a32:	f7ff ff98 	bl	8002966 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002a36:	2200      	movs	r2, #0
 8002a38:	2100      	movs	r1, #0
 8002a3a:	202c      	movs	r0, #44	; 0x2c
 8002a3c:	f001 fc49 	bl	80042d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002a40:	202c      	movs	r0, #44	; 0x2c
 8002a42:	f001 fc60 	bl	8004306 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002a46:	2200      	movs	r2, #0
 8002a48:	2100      	movs	r1, #0
 8002a4a:	202d      	movs	r0, #45	; 0x2d
 8002a4c:	f001 fc41 	bl	80042d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002a50:	202d      	movs	r0, #45	; 0x2d
 8002a52:	f001 fc58 	bl	8004306 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	58000c00 	.word	0x58000c00

08002a64 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08e      	sub	sp, #56	; 0x38
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a6c:	f107 0308 	add.w	r3, r7, #8
 8002a70:	2230      	movs	r2, #48	; 0x30
 8002a72:	2100      	movs	r1, #0
 8002a74:	4618      	mov	r0, r3
 8002a76:	f009 fc9b 	bl	800c3b0 <memset>
  if(hrtc->Instance==RTC)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a18      	ldr	r2, [pc, #96]	; (8002ae0 <HAL_RTC_MspInit+0x7c>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d128      	bne.n	8002ad6 <HAL_RTC_MspInit+0x72>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8002a84:	f002 fa1a 	bl	8004ebc <HAL_PWR_EnableBkUpAccess>

  /**
  *  Write twice the value to flush the APB-AHB bridge
  *  This bit shall be written in the register before writing the next one
  */
  HAL_PWR_EnableBkUpAccess();
 8002a88:	f002 fa18 	bl	8004ebc <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSI as RTC Input */
 8002a8c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002a90:	f7ff ff29 	bl	80028e6 <LL_RCC_SetRTCClockSource>
  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002a94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a98:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002a9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a9e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002aa0:	f107 0308 	add.w	r3, r7, #8
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f003 fc69 	bl	800637c <HAL_RCCEx_PeriphCLKConfig>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <HAL_RTC_MspInit+0x50>
    {
      Error_Handler();
 8002ab0:	f7ff ff12 	bl	80028d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002ab4:	f7ff ff2d 	bl	8002912 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002ab8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002abc:	f7ff ff6c 	bl	8002998 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	2003      	movs	r0, #3
 8002ac6:	f001 fc04 	bl	80042d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002aca:	2003      	movs	r0, #3
 8002acc:	f001 fc1b 	bl	8004306 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f003 ff05 	bl	80068e0 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002ad6:	bf00      	nop
 8002ad8:	3738      	adds	r7, #56	; 0x38
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40002800 	.word	0x40002800

08002ae4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b094      	sub	sp, #80	; 0x50
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	605a      	str	r2, [r3, #4]
 8002af6:	609a      	str	r2, [r3, #8]
 8002af8:	60da      	str	r2, [r3, #12]
 8002afa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002afc:	f107 030c 	add.w	r3, r7, #12
 8002b00:	2230      	movs	r2, #48	; 0x30
 8002b02:	2100      	movs	r1, #0
 8002b04:	4618      	mov	r0, r3
 8002b06:	f009 fc53 	bl	800c3b0 <memset>
  if(huart->Instance==USART1)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a2f      	ldr	r2, [pc, #188]	; (8002bcc <HAL_UART_MspInit+0xe8>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d157      	bne.n	8002bc4 <HAL_UART_MspInit+0xe0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b14:	2301      	movs	r3, #1
 8002b16:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b1c:	f107 030c 	add.w	r3, r7, #12
 8002b20:	4618      	mov	r0, r3
 8002b22:	f003 fc2b 	bl	800637c <HAL_RCCEx_PeriphCLKConfig>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002b2c:	f7ff fed4 	bl	80028d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b30:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002b34:	f7ff ff49 	bl	80029ca <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b38:	2001      	movs	r0, #1
 8002b3a:	f7ff fefb 	bl	8002934 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002b3e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002b42:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b44:	2302      	movs	r3, #2
 8002b46:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b50:	2307      	movs	r3, #7
 8002b52:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b54:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b58:	4619      	mov	r1, r3
 8002b5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b5e:	f001 ff6b 	bl	8004a38 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002b62:	4b1b      	ldr	r3, [pc, #108]	; (8002bd0 <HAL_UART_MspInit+0xec>)
 8002b64:	4a1b      	ldr	r2, [pc, #108]	; (8002bd4 <HAL_UART_MspInit+0xf0>)
 8002b66:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002b68:	4b19      	ldr	r3, [pc, #100]	; (8002bd0 <HAL_UART_MspInit+0xec>)
 8002b6a:	220f      	movs	r2, #15
 8002b6c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b6e:	4b18      	ldr	r3, [pc, #96]	; (8002bd0 <HAL_UART_MspInit+0xec>)
 8002b70:	2210      	movs	r2, #16
 8002b72:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b74:	4b16      	ldr	r3, [pc, #88]	; (8002bd0 <HAL_UART_MspInit+0xec>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b7a:	4b15      	ldr	r3, [pc, #84]	; (8002bd0 <HAL_UART_MspInit+0xec>)
 8002b7c:	2280      	movs	r2, #128	; 0x80
 8002b7e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b80:	4b13      	ldr	r3, [pc, #76]	; (8002bd0 <HAL_UART_MspInit+0xec>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b86:	4b12      	ldr	r3, [pc, #72]	; (8002bd0 <HAL_UART_MspInit+0xec>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002b8c:	4b10      	ldr	r3, [pc, #64]	; (8002bd0 <HAL_UART_MspInit+0xec>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b92:	4b0f      	ldr	r3, [pc, #60]	; (8002bd0 <HAL_UART_MspInit+0xec>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002b98:	480d      	ldr	r0, [pc, #52]	; (8002bd0 <HAL_UART_MspInit+0xec>)
 8002b9a:	f001 fbf9 	bl	8004390 <HAL_DMA_Init>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8002ba4:	f7ff fe98 	bl	80028d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a09      	ldr	r2, [pc, #36]	; (8002bd0 <HAL_UART_MspInit+0xec>)
 8002bac:	67da      	str	r2, [r3, #124]	; 0x7c
 8002bae:	4a08      	ldr	r2, [pc, #32]	; (8002bd0 <HAL_UART_MspInit+0xec>)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	2024      	movs	r0, #36	; 0x24
 8002bba:	f001 fb8a 	bl	80042d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002bbe:	2024      	movs	r0, #36	; 0x24
 8002bc0:	f001 fba1 	bl	8004306 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002bc4:	bf00      	nop
 8002bc6:	3750      	adds	r7, #80	; 0x50
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40013800 	.word	0x40013800
 8002bd0:	2000053c 	.word	0x2000053c
 8002bd4:	40020044 	.word	0x40020044

08002bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bdc:	e7fe      	b.n	8002bdc <NMI_Handler+0x4>

08002bde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bde:	b480      	push	{r7}
 8002be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002be2:	e7fe      	b.n	8002be2 <HardFault_Handler+0x4>

08002be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002be8:	e7fe      	b.n	8002be8 <MemManage_Handler+0x4>

08002bea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bea:	b480      	push	{r7}
 8002bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bee:	e7fe      	b.n	8002bee <BusFault_Handler+0x4>

08002bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bf4:	e7fe      	b.n	8002bf4 <UsageFault_Handler+0x4>

08002bf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bfa:	bf00      	nop
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c08:	bf00      	nop
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr

08002c12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c12:	b480      	push	{r7}
 8002c14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c16:	bf00      	nop
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c24:	f001 f9e2 	bl	8003fec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c28:	bf00      	nop
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002c30:	f7ff f8fc 	bl	8001e2c <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002c34:	bf00      	nop
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002c3c:	4802      	ldr	r0, [pc, #8]	; (8002c48 <DMA1_Channel4_IRQHandler+0x10>)
 8002c3e:	f001 fd6c 	bl	800471a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002c42:	bf00      	nop
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	2000053c 	.word	0x2000053c

08002c4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c50:	4802      	ldr	r0, [pc, #8]	; (8002c5c <USART1_IRQHandler+0x10>)
 8002c52:	f003 ffb7 	bl	8006bc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	200004a8 	.word	0x200004a8

08002c60 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002c64:	f000 fe54 	bl	8003910 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002c68:	bf00      	nop
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002c70:	f000 fe84 	bl	800397c <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002c74:	bf00      	nop
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002c7c:	f002 f874 	bl	8004d68 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002c80:	bf00      	nop
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <EXTI0_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 8002c88:	2001      	movs	r0, #1
 8002c8a:	f002 f855 	bl	8004d38 <HAL_GPIO_EXTI_IRQHandler>
}
 8002c8e:	bf00      	nop
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <EXTI4_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW2_EXTI_IRQHandler(void)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 8002c96:	2010      	movs	r0, #16
 8002c98:	f002 f84e 	bl	8004d38 <HAL_GPIO_EXTI_IRQHandler>
}
 8002c9c:	bf00      	nop
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <EXTI9_5_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW3_EXTI_IRQHandler(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 8002ca4:	2040      	movs	r0, #64	; 0x40
 8002ca6:	f002 f847 	bl	8004d38 <HAL_GPIO_EXTI_IRQHandler>
}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}

08002cae <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	af00      	add	r7, sp, #0
  return 1;
 8002cb2:	2301      	movs	r3, #1
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <_kill>:

int _kill(int pid, int sig)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b082      	sub	sp, #8
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
 8002cc6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002cc8:	f009 fbd4 	bl	800c474 <__errno>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2216      	movs	r2, #22
 8002cd0:	601a      	str	r2, [r3, #0]
  return -1;
 8002cd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <_exit>:

void _exit (int status)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b082      	sub	sp, #8
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ce6:	f04f 31ff 	mov.w	r1, #4294967295
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7ff ffe7 	bl	8002cbe <_kill>
  while (1) {}    /* Make sure we hang here */
 8002cf0:	e7fe      	b.n	8002cf0 <_exit+0x12>

08002cf2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b086      	sub	sp, #24
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	60f8      	str	r0, [r7, #12]
 8002cfa:	60b9      	str	r1, [r7, #8]
 8002cfc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cfe:	2300      	movs	r3, #0
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	e00a      	b.n	8002d1a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d04:	f3af 8000 	nop.w
 8002d08:	4601      	mov	r1, r0
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	1c5a      	adds	r2, r3, #1
 8002d0e:	60ba      	str	r2, [r7, #8]
 8002d10:	b2ca      	uxtb	r2, r1
 8002d12:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	3301      	adds	r3, #1
 8002d18:	617b      	str	r3, [r7, #20]
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	dbf0      	blt.n	8002d04 <_read+0x12>
  }

  return len;
 8002d22:	687b      	ldr	r3, [r7, #4]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3718      	adds	r7, #24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <_close>:
  }
  return len;
}

int _close(int file)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d54:	605a      	str	r2, [r3, #4]
  return 0;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <_isatty>:

int _isatty(int file)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d6c:	2301      	movs	r3, #1
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b085      	sub	sp, #20
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	60f8      	str	r0, [r7, #12]
 8002d82:	60b9      	str	r1, [r7, #8]
 8002d84:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3714      	adds	r7, #20
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d9c:	4a14      	ldr	r2, [pc, #80]	; (8002df0 <_sbrk+0x5c>)
 8002d9e:	4b15      	ldr	r3, [pc, #84]	; (8002df4 <_sbrk+0x60>)
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002da8:	4b13      	ldr	r3, [pc, #76]	; (8002df8 <_sbrk+0x64>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d102      	bne.n	8002db6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002db0:	4b11      	ldr	r3, [pc, #68]	; (8002df8 <_sbrk+0x64>)
 8002db2:	4a12      	ldr	r2, [pc, #72]	; (8002dfc <_sbrk+0x68>)
 8002db4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002db6:	4b10      	ldr	r3, [pc, #64]	; (8002df8 <_sbrk+0x64>)
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d207      	bcs.n	8002dd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dc4:	f009 fb56 	bl	800c474 <__errno>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	220c      	movs	r2, #12
 8002dcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dce:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd2:	e009      	b.n	8002de8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dd4:	4b08      	ldr	r3, [pc, #32]	; (8002df8 <_sbrk+0x64>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dda:	4b07      	ldr	r3, [pc, #28]	; (8002df8 <_sbrk+0x64>)
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4413      	add	r3, r2
 8002de2:	4a05      	ldr	r2, [pc, #20]	; (8002df8 <_sbrk+0x64>)
 8002de4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002de6:	68fb      	ldr	r3, [r7, #12]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	20003000 	.word	0x20003000
 8002df4:	00001000 	.word	0x00001000
 8002df8:	2000059c 	.word	0x2000059c
 8002dfc:	200018f0 	.word	0x200018f0

08002e00 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8002e04:	4b03      	ldr	r3, [pc, #12]	; (8002e14 <LL_FLASH_GetUDN+0x14>)
 8002e06:	681b      	ldr	r3, [r3, #0]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	1fff7580 	.word	0x1fff7580

08002e18 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8002e1c:	4b03      	ldr	r3, [pc, #12]	; (8002e2c <LL_FLASH_GetDeviceID+0x14>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	b2db      	uxtb	r3, r3
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	1fff7584 	.word	0x1fff7584

08002e30 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8002e34:	4b03      	ldr	r3, [pc, #12]	; (8002e44 <LL_FLASH_GetSTCompanyID+0x14>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	0a1b      	lsrs	r3, r3, #8
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr
 8002e44:	1fff7584 	.word	0x1fff7584

08002e48 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8002e48:	b5b0      	push	{r4, r5, r7, lr}
 8002e4a:	b090      	sub	sp, #64	; 0x40
 8002e4c:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8002e4e:	2392      	movs	r3, #146	; 0x92
 8002e50:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8002e54:	4b2c      	ldr	r3, [pc, #176]	; (8002f08 <APP_BLE_Init+0xc0>)
 8002e56:	1d3c      	adds	r4, r7, #4
 8002e58:	461d      	mov	r5, r3
 8002e5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e66:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002e6a:	c403      	stmia	r4!, {r0, r1}
 8002e6c:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8002e6e:	f000 f9ef 	bl	8003250 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8002e72:	2101      	movs	r1, #1
 8002e74:	2002      	movs	r0, #2
 8002e76:	f008 f99f 	bl	800b1b8 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8002e7a:	4a24      	ldr	r2, [pc, #144]	; (8002f0c <APP_BLE_Init+0xc4>)
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	2010      	movs	r0, #16
 8002e80:	f008 fac6 	bl	800b410 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8002e84:	1d3b      	adds	r3, r7, #4
 8002e86:	4618      	mov	r0, r3
 8002e88:	f006 ff2c 	bl	8009ce4 <SHCI_C2_BLE_Init>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 8002e92:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d007      	beq.n	8002eaa <APP_BLE_Init+0x62>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 8002e9a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	481b      	ldr	r0, [pc, #108]	; (8002f10 <APP_BLE_Init+0xc8>)
 8002ea2:	f009 f91f 	bl	800c0e4 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8002ea6:	f7ff fd17 	bl	80028d8 <Error_Handler>


  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8002eaa:	f000 f9e7 	bl	800327c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8002eae:	f007 fe81 	bl	800abb4 <SVCCTL_Init>

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_START_SCAN_ID, UTIL_SEQ_RFU, Scan_Request);
 8002eb2:	4a18      	ldr	r2, [pc, #96]	; (8002f14 <APP_BLE_Init+0xcc>)
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	2001      	movs	r0, #1
 8002eb8:	f008 faaa 	bl	800b410 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1<<CFG_TASK_CONN_DEV_1_ID, UTIL_SEQ_RFU, Connect_Request);
 8002ebc:	4a16      	ldr	r2, [pc, #88]	; (8002f18 <APP_BLE_Init+0xd0>)
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	2002      	movs	r0, #2
 8002ec2:	f008 faa5 	bl	800b410 <UTIL_SEQ_RegTask>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8002ec6:	4b15      	ldr	r3, [pc, #84]	; (8002f1c <APP_BLE_Init+0xd4>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /*Radio mask Activity*/
#if (OOB_DEMO != 0)
  ret = aci_hal_set_radio_activity_mask(0x0020);
 8002ece:	2020      	movs	r0, #32
 8002ed0:	f006 fbf6 	bl	80096c0 <aci_hal_set_radio_activity_mask>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 8002eda:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d005      	beq.n	8002eee <APP_BLE_Init+0xa6>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 8002ee2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	480d      	ldr	r0, [pc, #52]	; (8002f20 <APP_BLE_Init+0xd8>)
 8002eea:	f009 f8fb 	bl	800c0e4 <iprintf>

#endif


#if (OOB_DEMO != 0)
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 8002eee:	4b0d      	ldr	r3, [pc, #52]	; (8002f24 <APP_BLE_Init+0xdc>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	490d      	ldr	r1, [pc, #52]	; (8002f28 <APP_BLE_Init+0xe0>)
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	f7ff f93b 	bl	8002170 <HW_TS_Create>
   * Start scanning
   */
  UTIL_SEQ_SetTask(1 << CFG_TASK_START_SCAN_ID, CFG_SCH_PRIO_0);
#endif
  /* USER CODE BEGIN APP_BLE_Init_2 */
  APP_DBG_MSG("  Success   : BLE INITIALISE COMPLETED \r\n\r");
 8002efa:	480c      	ldr	r0, [pc, #48]	; (8002f2c <APP_BLE_Init+0xe4>)
 8002efc:	f009 f8f2 	bl	800c0e4 <iprintf>
  /* USER CODE END APP_BLE_Init_2 */
  return;
 8002f00:	bf00      	nop
}
 8002f02:	3740      	adds	r7, #64	; 0x40
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bdb0      	pop	{r4, r5, r7, pc}
 8002f08:	0800e848 	.word	0x0800e848
 8002f0c:	08009955 	.word	0x08009955
 8002f10:	0800e7a0 	.word	0x0800e7a0
 8002f14:	0800349d 	.word	0x0800349d
 8002f18:	08003505 	.word	0x08003505
 8002f1c:	200005b0 	.word	0x200005b0
 8002f20:	0800e7d8 	.word	0x0800e7d8
 8002f24:	08003589 	.word	0x08003589
 8002f28:	20000631 	.word	0x20000631
 8002f2c:	0800e81c 	.word	0x0800e81c

08002f30 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *pckt) {
 8002f30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f34:	b0ae      	sub	sp, #184	; 0xb8
 8002f36:	af0e      	add	r7, sp, #56	; 0x38
 8002f38:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  hci_le_advertising_report_event_rp0 * le_advertising_event;
  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	677b      	str	r3, [r7, #116]	; 0x74
  uint8_t event_type;

  switch (event_pckt->evt) {
 8002f40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	2b3e      	cmp	r3, #62	; 0x3e
 8002f46:	f040 8143 	bne.w	80031d0 <SVCCTL_App_Notification+0x2a0>
    case HCI_LE_META_EVT_CODE: {
        meta_evt = (evt_le_meta_event*) event_pckt->data;
 8002f4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f4c:	3302      	adds	r3, #2
 8002f4e:	673b      	str	r3, [r7, #112]	; 0x70

        switch (meta_evt->subevent) {
 8002f50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	f040 8137 	bne.w	80031c8 <SVCCTL_App_Notification+0x298>
          case HCI_LE_ADVERTISING_REPORT_SUBEVT_CODE: {
              uint8_t *adv_report_data;

              le_advertising_event = (hci_le_advertising_report_event_rp0 *) meta_evt->data;
 8002f5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	66fb      	str	r3, [r7, #108]	; 0x6c
              event_type = le_advertising_event->Advertising_Report[0].Event_Type;
 8002f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f62:	785b      	ldrb	r3, [r3, #1]
 8002f64:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
              adv_report_data = (uint8_t*)(&le_advertising_event->Advertising_Report[0].Length_Data) + 1;
 8002f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f6a:	3309      	adds	r3, #9
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	667b      	str	r3, [r7, #100]	; 0x64

              /* NON CONNECTABLE INDICATOR BEACON */
              if (event_type == ADV_NONCONN_IND) {
 8002f70:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8002f74:	2b03      	cmp	r3, #3
 8002f76:	f040 8129 	bne.w	80031cc <SVCCTL_App_Notification+0x29c>
				  /* ISOLATE DEVICE ID */
				  char DEVICE_id[3] = {};
 8002f7a:	4b99      	ldr	r3, [pc, #612]	; (80031e0 <SVCCTL_App_Notification+0x2b0>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8002f82:	f107 0345 	add.w	r3, r7, #69	; 0x45
 8002f86:	2200      	movs	r2, #0
 8002f88:	801a      	strh	r2, [r3, #0]
				  char DEVICE_ID[12] = {};
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f8e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	605a      	str	r2, [r3, #4]
				  for(int i=5; i>=0; i--) {
 8002f98:	2305      	movs	r3, #5
 8002f9a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f9c:	e019      	b.n	8002fd2 <SVCCTL_App_Notification+0xa2>
					  uint8_t id = le_advertising_event->Advertising_Report[0].Address[i];
 8002f9e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002fa0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fa2:	4413      	add	r3, r2
 8002fa4:	3303      	adds	r3, #3
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
					  sprintf(DEVICE_id, "%02x", id);
 8002fac:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8002fb0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002fb4:	498b      	ldr	r1, [pc, #556]	; (80031e4 <SVCCTL_App_Notification+0x2b4>)
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f009 f902 	bl	800c1c0 <siprintf>
					  strcat(DEVICE_ID, DEVICE_id);
 8002fbc:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002fc0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002fc4:	4611      	mov	r1, r2
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f009 f9fa 	bl	800c3c0 <strcat>
				  for(int i=5; i>=0; i--) {
 8002fcc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002fd2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	dae2      	bge.n	8002f9e <SVCCTL_App_Notification+0x6e>
				  }

				  /* COMPARE DEVICE ID */
				  if((strcmp(DEVICE_ID,ID_1) == isMATCHED) || (strcmp(DEVICE_ID,ID_2) == isMATCHED)) {
 8002fd8:	4b83      	ldr	r3, [pc, #524]	; (80031e8 <SVCCTL_App_Notification+0x2b8>)
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002fe0:	4611      	mov	r1, r2
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fd f8cc 	bl	8000180 <strcmp>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00b      	beq.n	8003006 <SVCCTL_App_Notification+0xd6>
 8002fee:	4b7f      	ldr	r3, [pc, #508]	; (80031ec <SVCCTL_App_Notification+0x2bc>)
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7fd f8c1 	bl	8000180 <strcmp>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	f040 80e3 	bne.w	80031cc <SVCCTL_App_Notification+0x29c>

					  /* GET UUID */
					  char DEVICE_uuid[3] = {};
 8003006:	4b76      	ldr	r3, [pc, #472]	; (80031e0 <SVCCTL_App_Notification+0x2b0>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800300e:	f107 0335 	add.w	r3, r7, #53	; 0x35
 8003012:	2200      	movs	r2, #0
 8003014:	801a      	strh	r2, [r3, #0]
					  char DEVICE_UUID[32] = {};
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	f107 0310 	add.w	r3, r7, #16
 800301e:	2200      	movs	r2, #0
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	605a      	str	r2, [r3, #4]
 8003024:	609a      	str	r2, [r3, #8]
 8003026:	60da      	str	r2, [r3, #12]
 8003028:	611a      	str	r2, [r3, #16]
 800302a:	615a      	str	r2, [r3, #20]
 800302c:	619a      	str	r2, [r3, #24]
					  for(int i=0; i<16; i++) {
 800302e:	2300      	movs	r3, #0
 8003030:	67bb      	str	r3, [r7, #120]	; 0x78
 8003032:	e01a      	b.n	800306a <SVCCTL_App_Notification+0x13a>
						  uint8_t uuid = adv_report_data[6+i];
 8003034:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003036:	3306      	adds	r3, #6
 8003038:	461a      	mov	r2, r3
 800303a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800303c:	4413      	add	r3, r2
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
						  sprintf(DEVICE_uuid, "%02x", uuid);
 8003044:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 8003048:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800304c:	4965      	ldr	r1, [pc, #404]	; (80031e4 <SVCCTL_App_Notification+0x2b4>)
 800304e:	4618      	mov	r0, r3
 8003050:	f009 f8b6 	bl	800c1c0 <siprintf>
						  strcat(DEVICE_UUID, DEVICE_uuid);
 8003054:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003058:	f107 030c 	add.w	r3, r7, #12
 800305c:	4611      	mov	r1, r2
 800305e:	4618      	mov	r0, r3
 8003060:	f009 f9ae 	bl	800c3c0 <strcat>
					  for(int i=0; i<16; i++) {
 8003064:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003066:	3301      	adds	r3, #1
 8003068:	67bb      	str	r3, [r7, #120]	; 0x78
 800306a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800306c:	2b0f      	cmp	r3, #15
 800306e:	dde1      	ble.n	8003034 <SVCCTL_App_Notification+0x104>
					  }

					  /* COMPARE UUID */
					  if(strcmp(DEVICE_UUID, UUID) == isMATCHED) {
 8003070:	4b5f      	ldr	r3, [pc, #380]	; (80031f0 <SVCCTL_App_Notification+0x2c0>)
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	f107 030c 	add.w	r3, r7, #12
 8003078:	4611      	mov	r1, r2
 800307a:	4618      	mov	r0, r3
 800307c:	f7fd f880 	bl	8000180 <strcmp>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	f040 80a2 	bne.w	80031cc <SVCCTL_App_Notification+0x29c>
						  /* READ TEMPERATURE VALUE */
						  uint16_t sensor_val1 = (adv_report_data[4] << 8) | (adv_report_data[5]);
 8003088:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800308a:	3304      	adds	r3, #4
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	021b      	lsls	r3, r3, #8
 8003090:	b21a      	sxth	r2, r3
 8003092:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003094:	3305      	adds	r3, #5
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	b21b      	sxth	r3, r3
 800309a:	4313      	orrs	r3, r2
 800309c:	b21b      	sxth	r3, r3
 800309e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
						  uint16_t sensor_val2 = (adv_report_data[22] << 8) | (adv_report_data[23]);
 80030a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030a4:	3316      	adds	r3, #22
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	021b      	lsls	r3, r3, #8
 80030aa:	b21a      	sxth	r2, r3
 80030ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030ae:	3317      	adds	r3, #23
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	b21b      	sxth	r3, r3
 80030b4:	4313      	orrs	r3, r2
 80030b6:	b21b      	sxth	r3, r3
 80030b8:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
						  uint16_t sensor_val3 = (adv_report_data[24] << 8) | (adv_report_data[25]);
 80030bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030be:	3318      	adds	r3, #24
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	021b      	lsls	r3, r3, #8
 80030c4:	b21a      	sxth	r2, r3
 80030c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030c8:	3319      	adds	r3, #25
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	b21b      	sxth	r3, r3
 80030ce:	4313      	orrs	r3, r2
 80030d0:	b21b      	sxth	r3, r3
 80030d2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
						  uint16_t sensor_val4 = (adv_report_data[26] << 8) | (adv_report_data[27]);
 80030d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030d8:	331a      	adds	r3, #26
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	021b      	lsls	r3, r3, #8
 80030de:	b21a      	sxth	r2, r3
 80030e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030e2:	331b      	adds	r3, #27
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	b21b      	sxth	r3, r3
 80030e8:	4313      	orrs	r3, r2
 80030ea:	b21b      	sxth	r3, r3
 80030ec:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

						  float temperature_1 = (float)sensor_val1 * TEMP_SCALAR;
 80030f0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80030f4:	ee07 3a90 	vmov	s15, r3
 80030f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030fc:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80031f4 <SVCCTL_App_Notification+0x2c4>
 8003100:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003104:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
						  float temperature_2 = (float)sensor_val2 * TEMP_SCALAR;
 8003108:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800310c:	ee07 3a90 	vmov	s15, r3
 8003110:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003114:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80031f4 <SVCCTL_App_Notification+0x2c4>
 8003118:	ee67 7a87 	vmul.f32	s15, s15, s14
 800311c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
						  float temperature_3 = (float)sensor_val3 * TEMP_SCALAR;
 8003120:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003124:	ee07 3a90 	vmov	s15, r3
 8003128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800312c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80031f4 <SVCCTL_App_Notification+0x2c4>
 8003130:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003134:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
						  float temperature_4 = (float)sensor_val4 * TEMP_SCALAR;
 8003138:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800313c:	ee07 3a90 	vmov	s15, r3
 8003140:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003144:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80031f4 <SVCCTL_App_Notification+0x2c4>
 8003148:	ee67 7a87 	vmul.f32	s15, s15, s14
 800314c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

						  /* READ RSSI */
						  int8_t RSSI = (int8_t)*(uint8_t*) (adv_report_data + le_advertising_event->Advertising_Report[0].Length_Data);
 8003150:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003152:	7a5b      	ldrb	r3, [r3, #9]
 8003154:	461a      	mov	r2, r3
 8003156:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003158:	4413      	add	r3, r2
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

						  char c[6] = "\u00B0";		// Degree C
 8003160:	f24b 03c2 	movw	r3, #45250	; 0xb0c2
 8003164:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003166:	2300      	movs	r3, #0
 8003168:	863b      	strh	r3, [r7, #48]	; 0x30
						  printf("SENSOR 1: %.2f%sC  SENSOR 2: %.2f%sC  SENSOR 3: %.2f%sC  SENSOR 4: %.2f%sC  RSSI: %d\n\r", temperature_1, c, temperature_2, c, temperature_3, c, temperature_4, c, RSSI);
 800316a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800316c:	f7fd f9d4 	bl	8000518 <__aeabi_f2d>
 8003170:	4682      	mov	sl, r0
 8003172:	468b      	mov	fp, r1
 8003174:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003176:	f7fd f9cf 	bl	8000518 <__aeabi_f2d>
 800317a:	4604      	mov	r4, r0
 800317c:	460d      	mov	r5, r1
 800317e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003180:	f7fd f9ca 	bl	8000518 <__aeabi_f2d>
 8003184:	4680      	mov	r8, r0
 8003186:	4689      	mov	r9, r1
 8003188:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800318a:	f7fd f9c5 	bl	8000518 <__aeabi_f2d>
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	f997 104b 	ldrsb.w	r1, [r7, #75]	; 0x4b
 8003196:	910d      	str	r1, [sp, #52]	; 0x34
 8003198:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800319c:	910c      	str	r1, [sp, #48]	; 0x30
 800319e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80031a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031a6:	9308      	str	r3, [sp, #32]
 80031a8:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80031ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031b0:	9304      	str	r3, [sp, #16]
 80031b2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80031b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	4652      	mov	r2, sl
 80031be:	465b      	mov	r3, fp
 80031c0:	480d      	ldr	r0, [pc, #52]	; (80031f8 <SVCCTL_App_Notification+0x2c8>)
 80031c2:	f008 ff8f 	bl	800c0e4 <iprintf>

					} /* end if DEVICE_UUID */
				  } /* end if DEVICE_ID */
              } /* end if ADV_IND */
            }
            break;	/* HCI_LE_ADVERTISING_REPORT_SUBEVT_CODE */
 80031c6:	e001      	b.n	80031cc <SVCCTL_App_Notification+0x29c>
          default:
            break;
 80031c8:	bf00      	nop
 80031ca:	e002      	b.n	80031d2 <SVCCTL_App_Notification+0x2a2>
            break;	/* HCI_LE_ADVERTISING_REPORT_SUBEVT_CODE */
 80031cc:	bf00      	nop
        }
      }
      break; /* HCI_LE_META_EVT_CODE */
 80031ce:	e000      	b.n	80031d2 <SVCCTL_App_Notification+0x2a2>
      default:
      break;
 80031d0:	bf00      	nop
  } /* event_pckt */
  return (SVCCTL_UserEvtFlowEnable);
 80031d2:	2301      	movs	r3, #1
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3780      	adds	r7, #128	; 0x80
 80031d8:	46bd      	mov	sp, r7
 80031da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031de:	bf00      	nop
 80031e0:	0800e8e4 	.word	0x0800e8e4
 80031e4:	0800e884 	.word	0x0800e884
 80031e8:	2000000c 	.word	0x2000000c
 80031ec:	20000010 	.word	0x20000010
 80031f0:	20000008 	.word	0x20000008
 80031f4:	3c000000 	.word	0x3c000000
 80031f8:	0800e88c 	.word	0x0800e88c

080031fc <APP_BLE_Key_Button1_Action>:
  }
  return APP_BLE_IDLE;
}
/* USER CODE BEGIN FD */
void APP_BLE_Key_Button1_Action(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
#if OOB_DEMO == 0 
  P2PC_APP_SW1_Button_Action();
#else 
  if(P2P_Client_APP_Get_State () != APP_BLE_CONNECTED_CLIENT)
 8003200:	f000 fa70 	bl	80036e4 <P2P_Client_APP_Get_State>
 8003204:	4603      	mov	r3, r0
 8003206:	2b06      	cmp	r3, #6
 8003208:	d004      	beq.n	8003214 <APP_BLE_Key_Button1_Action+0x18>
  {
    UTIL_SEQ_SetTask(1 << CFG_TASK_START_SCAN_ID, CFG_SCH_PRIO_0);		// Start BLE SCAN
 800320a:	2100      	movs	r1, #0
 800320c:	2001      	movs	r0, #1
 800320e:	f008 f921 	bl	800b454 <UTIL_SEQ_SetTask>
  else 
  {
    P2PC_APP_SW1_Button_Action();
  }   
#endif 
}
 8003212:	e001      	b.n	8003218 <APP_BLE_Key_Button1_Action+0x1c>
    P2PC_APP_SW1_Button_Action();
 8003214:	f000 fa5d 	bl	80036d2 <P2PC_APP_SW1_Button_Action>
}
 8003218:	bf00      	nop
 800321a:	bd80      	pop	{r7, pc}

0800321c <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
}
 8003220:	bf00      	nop
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
	...

0800322c <APP_BLE_Key_Button3_Action>:

void APP_BLE_Key_Button3_Action(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
	BSP_LED_On(LED_RED);
 8003230:	2002      	movs	r0, #2
 8003232:	f000 fd35 	bl	8003ca0 <BSP_LED_On>
	BSP_LED_Off(LED_BLUE);
 8003236:	2000      	movs	r0, #0
 8003238:	f000 fd4c 	bl	8003cd4 <BSP_LED_Off>
	APP_DBG_MSG(" \r\n\r** STOP GENERAL DISCOVERY (SCAN) **  \r\n\r");
 800323c:	4803      	ldr	r0, [pc, #12]	; (800324c <APP_BLE_Key_Button3_Action+0x20>)
 800323e:	f008 ff51 	bl	800c0e4 <iprintf>
	aci_gap_terminate_gap_proc(0x80);									// STOP BLE SCAN
 8003242:	2080      	movs	r0, #128	; 0x80
 8003244:	f005 ff86 	bl	8009154 <aci_gap_terminate_gap_proc>
}
 8003248:	bf00      	nop
 800324a:	bd80      	pop	{r7, pc}
 800324c:	0800e8e8 	.word	0x0800e8e8

08003250 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8003256:	4b06      	ldr	r3, [pc, #24]	; (8003270 <Ble_Tl_Init+0x20>)
 8003258:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800325a:	4b06      	ldr	r3, [pc, #24]	; (8003274 <Ble_Tl_Init+0x24>)
 800325c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800325e:	463b      	mov	r3, r7
 8003260:	4619      	mov	r1, r3
 8003262:	4805      	ldr	r0, [pc, #20]	; (8003278 <Ble_Tl_Init+0x28>)
 8003264:	f006 fb5a 	bl	800991c <hci_init>

  return;
 8003268:	bf00      	nop
}
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	20030028 	.word	0x20030028
 8003274:	0800369d 	.word	0x0800369d
 8003278:	08003665 	.word	0x08003665

0800327c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800327c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800327e:	b08d      	sub	sp, #52	; 0x34
 8003280:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;

  uint16_t a_appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 8003282:	2300      	movs	r3, #0
 8003284:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8003286:	2392      	movs	r3, #146	; 0x92
 8003288:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800328a:	f006 fa6d 	bl	8009768 <hci_reset>
 800328e:	4603      	mov	r3, r0
 8003290:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003292:	7dfb      	ldrb	r3, [r7, #23]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d004      	beq.n	80032a2 <Ble_Hci_Gap_Gatt_Init+0x26>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 8003298:	7dfb      	ldrb	r3, [r7, #23]
 800329a:	4619      	mov	r1, r3
 800329c:	4870      	ldr	r0, [pc, #448]	; (8003460 <Ble_Hci_Gap_Gatt_Init+0x1e4>)
 800329e:	f008 ff21 	bl	800c0e4 <iprintf>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 80032a2:	f000 f979 	bl	8003598 <BleGetBdAddress>
 80032a6:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	2106      	movs	r1, #6
 80032ac:	2000      	movs	r0, #0
 80032ae:	f006 f91b 	bl	80094e8 <aci_hal_write_config_data>
 80032b2:	4603      	mov	r3, r0
 80032b4:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80032b6:	7dfb      	ldrb	r3, [r7, #23]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d004      	beq.n	80032c6 <Ble_Hci_Gap_Gatt_Init+0x4a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 80032bc:	7dfb      	ldrb	r3, [r7, #23]
 80032be:	4619      	mov	r1, r3
 80032c0:	4868      	ldr	r0, [pc, #416]	; (8003464 <Ble_Hci_Gap_Gatt_Init+0x1e8>)
 80032c2:	f008 ff0f 	bl	800c0e4 <iprintf>
  }

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 80032c6:	4a68      	ldr	r2, [pc, #416]	; (8003468 <Ble_Hci_Gap_Gatt_Init+0x1ec>)
 80032c8:	2110      	movs	r1, #16
 80032ca:	2018      	movs	r0, #24
 80032cc:	f006 f90c 	bl	80094e8 <aci_hal_write_config_data>
 80032d0:	4603      	mov	r3, r0
 80032d2:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80032d4:	7dfb      	ldrb	r3, [r7, #23]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d004      	beq.n	80032e4 <Ble_Hci_Gap_Gatt_Init+0x68>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 80032da:	7dfb      	ldrb	r3, [r7, #23]
 80032dc:	4619      	mov	r1, r3
 80032de:	4863      	ldr	r0, [pc, #396]	; (800346c <Ble_Hci_Gap_Gatt_Init+0x1f0>)
 80032e0:	f008 ff00 	bl	800c0e4 <iprintf>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 80032e4:	4a62      	ldr	r2, [pc, #392]	; (8003470 <Ble_Hci_Gap_Gatt_Init+0x1f4>)
 80032e6:	2110      	movs	r1, #16
 80032e8:	2008      	movs	r0, #8
 80032ea:	f006 f8fd 	bl	80094e8 <aci_hal_write_config_data>
 80032ee:	4603      	mov	r3, r0
 80032f0:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80032f2:	7dfb      	ldrb	r3, [r7, #23]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d004      	beq.n	8003302 <Ble_Hci_Gap_Gatt_Init+0x86>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 80032f8:	7dfb      	ldrb	r3, [r7, #23]
 80032fa:	4619      	mov	r1, r3
 80032fc:	485d      	ldr	r0, [pc, #372]	; (8003474 <Ble_Hci_Gap_Gatt_Init+0x1f8>)
 80032fe:	f008 fef1 	bl	800c0e4 <iprintf>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8003302:	2118      	movs	r1, #24
 8003304:	2001      	movs	r0, #1
 8003306:	f006 f974 	bl	80095f2 <aci_hal_set_tx_power_level>
 800330a:	4603      	mov	r3, r0
 800330c:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800330e:	7dfb      	ldrb	r3, [r7, #23]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d004      	beq.n	800331e <Ble_Hci_Gap_Gatt_Init+0xa2>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 8003314:	7dfb      	ldrb	r3, [r7, #23]
 8003316:	4619      	mov	r1, r3
 8003318:	4857      	ldr	r0, [pc, #348]	; (8003478 <Ble_Hci_Gap_Gatt_Init+0x1fc>)
 800331a:	f008 fee3 	bl	800c0e4 <iprintf>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800331e:	f006 f815 	bl	800934c <aci_gatt_init>
 8003322:	4603      	mov	r3, r0
 8003324:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003326:	7dfb      	ldrb	r3, [r7, #23]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d004      	beq.n	8003336 <Ble_Hci_Gap_Gatt_Init+0xba>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800332c:	7dfb      	ldrb	r3, [r7, #23]
 800332e:	4619      	mov	r1, r3
 8003330:	4852      	ldr	r0, [pc, #328]	; (800347c <Ble_Hci_Gap_Gatt_Init+0x200>)
 8003332:	f008 fed7 	bl	800c0e4 <iprintf>
  }
  /**
   * Initialize GAP interface
   */
  role = 0;
 8003336:	2300      	movs	r3, #0
 8003338:	73fb      	strb	r3, [r7, #15]
#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
#endif /* BLE_CFG_PERIPHERAL == 1 */

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_OBSERVER_ROLE;
 800333a:	7bfb      	ldrb	r3, [r7, #15]
 800333c:	f043 0308 	orr.w	r3, r3, #8
 8003340:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8003342:	7bfb      	ldrb	r3, [r7, #15]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d027      	beq.n	8003398 <Ble_Hci_Gap_Gatt_Init+0x11c>
  {
    const char *name = "P2PCLI";
 8003348:	4b4d      	ldr	r3, [pc, #308]	; (8003480 <Ble_Hci_Gap_Gatt_Init+0x204>)
 800334a:	60bb      	str	r3, [r7, #8]

    ret = aci_gap_init(role,
 800334c:	1dba      	adds	r2, r7, #6
 800334e:	7bf8      	ldrb	r0, [r7, #15]
 8003350:	1cbb      	adds	r3, r7, #2
 8003352:	9301      	str	r3, [sp, #4]
 8003354:	1d3b      	adds	r3, r7, #4
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	4613      	mov	r3, r2
 800335a:	2207      	movs	r2, #7
 800335c:	2100      	movs	r1, #0
 800335e:	f005 fd4d 	bl	8008dfc <aci_gap_init>
 8003362:	4603      	mov	r3, r0
 8003364:	75fb      	strb	r3, [r7, #23]
                       APPBLE_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 8003366:	7dfb      	ldrb	r3, [r7, #23]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d004      	beq.n	8003376 <Ble_Hci_Gap_Gatt_Init+0xfa>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800336c:	7dfb      	ldrb	r3, [r7, #23]
 800336e:	4619      	mov	r1, r3
 8003370:	4844      	ldr	r0, [pc, #272]	; (8003484 <Ble_Hci_Gap_Gatt_Init+0x208>)
 8003372:	f008 feb7 	bl	800c0e4 <iprintf>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8003376:	88fc      	ldrh	r4, [r7, #6]
 8003378:	88bd      	ldrh	r5, [r7, #4]
 800337a:	68b8      	ldr	r0, [r7, #8]
 800337c:	f7fc ff60 	bl	8000240 <strlen>
 8003380:	4603      	mov	r3, r0
 8003382:	b2da      	uxtb	r2, r3
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	4613      	mov	r3, r2
 800338a:	2200      	movs	r2, #0
 800338c:	4629      	mov	r1, r5
 800338e:	4620      	mov	r0, r4
 8003390:	f006 f801 	bl	8009396 <aci_gatt_update_char_value>
 8003394:	4603      	mov	r3, r0
 8003396:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Fail   : aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8003398:	88f8      	ldrh	r0, [r7, #6]
 800339a:	8879      	ldrh	r1, [r7, #2]
 800339c:	463b      	mov	r3, r7
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	2302      	movs	r3, #2
 80033a2:	2200      	movs	r2, #0
 80033a4:	f005 fff7 	bl	8009396 <aci_gatt_update_char_value>
 80033a8:	4603      	mov	r3, r0
 80033aa:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 80033ac:	4b36      	ldr	r3, [pc, #216]	; (8003488 <Ble_Hci_Gap_Gatt_Init+0x20c>)
 80033ae:	2201      	movs	r2, #1
 80033b0:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 80033b2:	4b35      	ldr	r3, [pc, #212]	; (8003488 <Ble_Hci_Gap_Gatt_Init+0x20c>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f005 fc08 	bl	8008bcc <aci_gap_set_io_capability>
 80033bc:	4603      	mov	r3, r0
 80033be:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80033c0:	7dfb      	ldrb	r3, [r7, #23]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d004      	beq.n	80033d0 <Ble_Hci_Gap_Gatt_Init+0x154>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 80033c6:	7dfb      	ldrb	r3, [r7, #23]
 80033c8:	4619      	mov	r1, r3
 80033ca:	4830      	ldr	r0, [pc, #192]	; (800348c <Ble_Hci_Gap_Gatt_Init+0x210>)
 80033cc:	f008 fe8a 	bl	800c0e4 <iprintf>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 80033d0:	4b2d      	ldr	r3, [pc, #180]	; (8003488 <Ble_Hci_Gap_Gatt_Init+0x20c>)
 80033d2:	2201      	movs	r2, #1
 80033d4:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 80033d6:	4b2c      	ldr	r3, [pc, #176]	; (8003488 <Ble_Hci_Gap_Gatt_Init+0x20c>)
 80033d8:	2208      	movs	r2, #8
 80033da:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 80033dc:	4b2a      	ldr	r3, [pc, #168]	; (8003488 <Ble_Hci_Gap_Gatt_Init+0x20c>)
 80033de:	2210      	movs	r2, #16
 80033e0:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 80033e2:	4b29      	ldr	r3, [pc, #164]	; (8003488 <Ble_Hci_Gap_Gatt_Init+0x20c>)
 80033e4:	2201      	movs	r2, #1
 80033e6:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 80033e8:	4b27      	ldr	r3, [pc, #156]	; (8003488 <Ble_Hci_Gap_Gatt_Init+0x20c>)
 80033ea:	4a29      	ldr	r2, [pc, #164]	; (8003490 <Ble_Hci_Gap_Gatt_Init+0x214>)
 80033ec:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 80033ee:	4b26      	ldr	r3, [pc, #152]	; (8003488 <Ble_Hci_Gap_Gatt_Init+0x20c>)
 80033f0:	2201      	movs	r2, #1
 80033f2:	709a      	strb	r2, [r3, #2]

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 80033f4:	4b24      	ldr	r3, [pc, #144]	; (8003488 <Ble_Hci_Gap_Gatt_Init+0x20c>)
 80033f6:	789c      	ldrb	r4, [r3, #2]
 80033f8:	4b23      	ldr	r3, [pc, #140]	; (8003488 <Ble_Hci_Gap_Gatt_Init+0x20c>)
 80033fa:	785d      	ldrb	r5, [r3, #1]
 80033fc:	4b22      	ldr	r3, [pc, #136]	; (8003488 <Ble_Hci_Gap_Gatt_Init+0x20c>)
 80033fe:	791b      	ldrb	r3, [r3, #4]
 8003400:	4a21      	ldr	r2, [pc, #132]	; (8003488 <Ble_Hci_Gap_Gatt_Init+0x20c>)
 8003402:	7952      	ldrb	r2, [r2, #5]
 8003404:	4920      	ldr	r1, [pc, #128]	; (8003488 <Ble_Hci_Gap_Gatt_Init+0x20c>)
 8003406:	78c9      	ldrb	r1, [r1, #3]
 8003408:	481f      	ldr	r0, [pc, #124]	; (8003488 <Ble_Hci_Gap_Gatt_Init+0x20c>)
 800340a:	6880      	ldr	r0, [r0, #8]
 800340c:	2600      	movs	r6, #0
 800340e:	9604      	str	r6, [sp, #16]
 8003410:	9003      	str	r0, [sp, #12]
 8003412:	9102      	str	r1, [sp, #8]
 8003414:	9201      	str	r2, [sp, #4]
 8003416:	9300      	str	r3, [sp, #0]
 8003418:	2300      	movs	r3, #0
 800341a:	2201      	movs	r2, #1
 800341c:	4629      	mov	r1, r5
 800341e:	4620      	mov	r0, r4
 8003420:	f005 fc28 	bl	8008c74 <aci_gap_set_authentication_requirement>
 8003424:	4603      	mov	r3, r0
 8003426:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 8003428:	7dfb      	ldrb	r3, [r7, #23]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d004      	beq.n	8003438 <Ble_Hci_Gap_Gatt_Init+0x1bc>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800342e:	7dfb      	ldrb	r3, [r7, #23]
 8003430:	4619      	mov	r1, r3
 8003432:	4818      	ldr	r0, [pc, #96]	; (8003494 <Ble_Hci_Gap_Gatt_Init+0x218>)
 8003434:	f008 fe56 	bl	800c0e4 <iprintf>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8003438:	4b13      	ldr	r3, [pc, #76]	; (8003488 <Ble_Hci_Gap_Gatt_Init+0x20c>)
 800343a:	789b      	ldrb	r3, [r3, #2]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00b      	beq.n	8003458 <Ble_Hci_Gap_Gatt_Init+0x1dc>
  {
    ret = aci_gap_configure_whitelist();
 8003440:	f005 fd89 	bl	8008f56 <aci_gap_configure_filter_accept_list>
 8003444:	4603      	mov	r3, r0
 8003446:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 8003448:	7dfb      	ldrb	r3, [r7, #23]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d004      	beq.n	8003458 <Ble_Hci_Gap_Gatt_Init+0x1dc>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800344e:	7dfb      	ldrb	r3, [r7, #23]
 8003450:	4619      	mov	r1, r3
 8003452:	4811      	ldr	r0, [pc, #68]	; (8003498 <Ble_Hci_Gap_Gatt_Init+0x21c>)
 8003454:	f008 fe46 	bl	800c0e4 <iprintf>
    }
  }
}
 8003458:	bf00      	nop
 800345a:	371c      	adds	r7, #28
 800345c:	46bd      	mov	sp, r7
 800345e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003460:	0800e918 	.word	0x0800e918
 8003464:	0800e948 	.word	0x0800e948
 8003468:	0800edb0 	.word	0x0800edb0
 800346c:	0800e9a4 	.word	0x0800e9a4
 8003470:	0800edc0 	.word	0x0800edc0
 8003474:	0800e9fc 	.word	0x0800e9fc
 8003478:	0800ea54 	.word	0x0800ea54
 800347c:	0800ea94 	.word	0x0800ea94
 8003480:	0800eac8 	.word	0x0800eac8
 8003484:	0800ead0 	.word	0x0800ead0
 8003488:	200005b0 	.word	0x200005b0
 800348c:	0800eb00 	.word	0x0800eb00
 8003490:	0001b207 	.word	0x0001b207
 8003494:	0800eb40 	.word	0x0800eb40
 8003498:	0800eb8c 	.word	0x0800eb8c

0800349c <Scan_Request>:

static void Scan_Request(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN Scan_Request_1 */

  /* USER CODE END Scan_Request_1 */
  tBleStatus result;
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 80034a2:	4b15      	ldr	r3, [pc, #84]	; (80034f8 <Scan_Request+0x5c>)
 80034a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80034a8:	2b06      	cmp	r3, #6
 80034aa:	d021      	beq.n	80034f0 <Scan_Request+0x54>
  {
    /* USER CODE BEGIN APP_BLE_CONNECTED_CLIENT */
    BSP_LED_On(LED_BLUE);
 80034ac:	2000      	movs	r0, #0
 80034ae:	f000 fbf7 	bl	8003ca0 <BSP_LED_On>
	BSP_LED_Off(LED_RED);
 80034b2:	2002      	movs	r0, #2
 80034b4:	f000 fc0e 	bl	8003cd4 <BSP_LED_Off>
    /* USER CODE END APP_BLE_CONNECTED_CLIENT */

    //result = aci_gap_start_general_discovery_proc(SCAN_P, SCAN_L, CFG_BLE_ADDRESS_TYPE, 1);
    //result = aci_gap_start_observation_proc(SCAN_P, SCAN_L, 0x00, CFG_BLE_ADDRESS_TYPE, 1,0x00); //commented by midhun-debug
    result = aci_gap_start_observation_proc(0x4000, 0x4000, 0x00, CFG_BLE_ADDRESS_TYPE, 1,0x00);
 80034b8:	2300      	movs	r3, #0
 80034ba:	9301      	str	r3, [sp, #4]
 80034bc:	2301      	movs	r3, #1
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	2300      	movs	r3, #0
 80034c2:	2200      	movs	r2, #0
 80034c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034c8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80034cc:	f005 fe96 	bl	80091fc <aci_gap_start_observation_proc>
 80034d0:	4603      	mov	r3, r0
 80034d2:	71fb      	strb	r3, [r7, #7]

    if (result == BLE_STATUS_SUCCESS)
 80034d4:	79fb      	ldrb	r3, [r7, #7]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d103      	bne.n	80034e2 <Scan_Request+0x46>
    {
    /* USER CODE BEGIN BLE_SCAN_SUCCESS */

    /* USER CODE END BLE_SCAN_SUCCESS */
      APP_DBG_MSG(" \r\n\r** START GENERAL DISCOVERY (SCAN) **  \r\n\r");
 80034da:	4808      	ldr	r0, [pc, #32]	; (80034fc <Scan_Request+0x60>)
 80034dc:	f008 fe02 	bl	800c0e4 <iprintf>
    }
  }
  /* USER CODE BEGIN Scan_Request_2 */

  /* USER CODE END Scan_Request_2 */
  return;
 80034e0:	e006      	b.n	80034f0 <Scan_Request+0x54>
      BSP_LED_On(LED_RED);
 80034e2:	2002      	movs	r0, #2
 80034e4:	f000 fbdc 	bl	8003ca0 <BSP_LED_On>
      APP_DBG_MSG("-- BLE_App_Start_Limited_Disc_Req, Failed \r\n\r");
 80034e8:	4805      	ldr	r0, [pc, #20]	; (8003500 <Scan_Request+0x64>)
 80034ea:	f008 fdfb 	bl	800c0e4 <iprintf>
  return;
 80034ee:	bf00      	nop
 80034f0:	bf00      	nop
}
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	200005b0 	.word	0x200005b0
 80034fc:	0800ebcc 	.word	0x0800ebcc
 8003500:	0800ebfc 	.word	0x0800ebfc

08003504 <Connect_Request>:


static void Connect_Request(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b08a      	sub	sp, #40	; 0x28
 8003508:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN Connect_Request_1 */

  /* USER CODE END Connect_Request_1 */
  tBleStatus result;

  APP_DBG_MSG("\r\n\r** CREATE CONNECTION TO SERVER **  \r\n\r");
 800350a:	481b      	ldr	r0, [pc, #108]	; (8003578 <Connect_Request+0x74>)
 800350c:	f008 fdea 	bl	800c0e4 <iprintf>

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 8003510:	4b1a      	ldr	r3, [pc, #104]	; (800357c <Connect_Request+0x78>)
 8003512:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003516:	2b06      	cmp	r3, #6
 8003518:	d029      	beq.n	800356e <Connect_Request+0x6a>
  {
    result = aci_gap_create_connection(SCAN_P,
 800351a:	4b19      	ldr	r3, [pc, #100]	; (8003580 <Connect_Request+0x7c>)
 800351c:	781a      	ldrb	r2, [r3, #0]
 800351e:	2310      	movs	r3, #16
 8003520:	9306      	str	r3, [sp, #24]
 8003522:	2310      	movs	r3, #16
 8003524:	9305      	str	r3, [sp, #20]
 8003526:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800352a:	9304      	str	r3, [sp, #16]
 800352c:	2300      	movs	r3, #0
 800352e:	9303      	str	r3, [sp, #12]
 8003530:	2350      	movs	r3, #80	; 0x50
 8003532:	9302      	str	r3, [sp, #8]
 8003534:	2328      	movs	r3, #40	; 0x28
 8003536:	9301      	str	r3, [sp, #4]
 8003538:	2300      	movs	r3, #0
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	4b11      	ldr	r3, [pc, #68]	; (8003584 <Connect_Request+0x80>)
 800353e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8003542:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003546:	f005 fd2a 	bl	8008f9e <aci_gap_create_connection>
 800354a:	4603      	mov	r3, r0
 800354c:	71fb      	strb	r3, [r7, #7]
                                       0,
                                       SUPERV_TIMEOUT,
                                       CONN_L1,
                                       CONN_L2);

    if (result == BLE_STATUS_SUCCESS)
 800354e:	79fb      	ldrb	r3, [r7, #7]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d104      	bne.n	800355e <Connect_Request+0x5a>
    {
      /* USER CODE BEGIN BLE_CONNECT_SUCCESS */

      /* USER CODE END BLE_CONNECT_SUCCESS */
      BleApplicationContext.Device_Connection_Status = APP_BLE_LP_CONNECTING;
 8003554:	4b09      	ldr	r3, [pc, #36]	; (800357c <Connect_Request+0x78>)
 8003556:	2204      	movs	r2, #4
 8003558:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    }
  }
  /* USER CODE BEGIN Connect_Request_2 */

  /* USER CODE END Connect_Request_2 */
  return;
 800355c:	e007      	b.n	800356e <Connect_Request+0x6a>
      BSP_LED_On(LED_RED);
 800355e:	2002      	movs	r0, #2
 8003560:	f000 fb9e 	bl	8003ca0 <BSP_LED_On>
      BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8003564:	4b05      	ldr	r3, [pc, #20]	; (800357c <Connect_Request+0x78>)
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return;
 800356c:	bf00      	nop
 800356e:	bf00      	nop
}
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	0800ec2c 	.word	0x0800ec2c
 800357c:	200005b0 	.word	0x200005b0
 8003580:	200005ae 	.word	0x200005ae
 8003584:	200005a8 	.word	0x200005a8

08003588 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO()
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Switch_OFF_GPIO */
  BSP_LED_Off(LED_GREEN);
 800358c:	2001      	movs	r0, #1
 800358e:	f000 fba1 	bl	8003cd4 <BSP_LED_Off>
  /* USER CODE END Switch_OFF_GPIO */
}
 8003592:	bf00      	nop
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800359e:	f7ff fc2f 	bl	8002e00 <LL_FLASH_GetUDN>
 80035a2:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035aa:	d023      	beq.n	80035f4 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80035ac:	f7ff fc40 	bl	8002e30 <LL_FLASH_GetSTCompanyID>
 80035b0:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80035b2:	f7ff fc31 	bl	8002e18 <LL_FLASH_GetDeviceID>
 80035b6:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	4b16      	ldr	r3, [pc, #88]	; (8003618 <BleGetBdAddress+0x80>)
 80035be:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	0a1b      	lsrs	r3, r3, #8
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	4b14      	ldr	r3, [pc, #80]	; (8003618 <BleGetBdAddress+0x80>)
 80035c8:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	b2da      	uxtb	r2, r3
 80035ce:	4b12      	ldr	r3, [pc, #72]	; (8003618 <BleGetBdAddress+0x80>)
 80035d0:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	4b10      	ldr	r3, [pc, #64]	; (8003618 <BleGetBdAddress+0x80>)
 80035d8:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	0a1b      	lsrs	r3, r3, #8
 80035de:	b2da      	uxtb	r2, r3
 80035e0:	4b0d      	ldr	r3, [pc, #52]	; (8003618 <BleGetBdAddress+0x80>)
 80035e2:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	0c1b      	lsrs	r3, r3, #16
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <BleGetBdAddress+0x80>)
 80035ec:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 80035ee:	4b0a      	ldr	r3, [pc, #40]	; (8003618 <BleGetBdAddress+0x80>)
 80035f0:	617b      	str	r3, [r7, #20]
 80035f2:	e00b      	b.n	800360c <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 80035f4:	2000      	movs	r0, #0
 80035f6:	f006 fb4d 	bl	8009c94 <OTP_Read>
 80035fa:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d002      	beq.n	8003608 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	617b      	str	r3, [r7, #20]
 8003606:	e001      	b.n	800360c <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8003608:	4b04      	ldr	r3, [pc, #16]	; (800361c <BleGetBdAddress+0x84>)
 800360a:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800360c:	697b      	ldr	r3, [r7, #20]
}
 800360e:	4618      	mov	r0, r3
 8003610:	3718      	adds	r7, #24
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	200005a0 	.word	0x200005a0
 800361c:	0800eda8 	.word	0x0800eda8

08003620 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8003628:	2100      	movs	r1, #0
 800362a:	2010      	movs	r0, #16
 800362c:	f007 ff12 	bl	800b454 <UTIL_SEQ_SetTask>
  return;
 8003630:	bf00      	nop
}
 8003632:	3708      	adds	r7, #8
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8003640:	2001      	movs	r0, #1
 8003642:	f007 ff73 	bl	800b52c <UTIL_SEQ_SetEvt>
  return;
 8003646:	bf00      	nop
}
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b082      	sub	sp, #8
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8003656:	2001      	movs	r0, #1
 8003658:	f007 ff88 	bl	800b56c <UTIL_SEQ_WaitEvt>
  return;
 800365c:	bf00      	nop
}
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void * pPayload)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	3308      	adds	r3, #8
 8003676:	4618      	mov	r0, r3
 8003678:	f007 fad4 	bl	800ac24 <SVCCTL_UserEvtRx>
 800367c:	4603      	mov	r3, r0
 800367e:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8003680:	7afb      	ldrb	r3, [r7, #11]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2201      	movs	r2, #1
 800368a:	701a      	strb	r2, [r3, #0]
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800368c:	e003      	b.n	8003696 <BLE_UserEvtRx+0x32>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	701a      	strb	r2, [r3, #0]
  return;
 8003694:	bf00      	nop
}
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t status)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	4603      	mov	r3, r0
 80036a4:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 80036a6:	79fb      	ldrb	r3, [r7, #7]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d002      	beq.n	80036b2 <BLE_StatusNot+0x16>
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d006      	beq.n	80036be <BLE_StatusNot+0x22>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
      UTIL_SEQ_ResumeTask(task_id_list);
      break;

    default:
      break;
 80036b0:	e00b      	b.n	80036ca <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80036b2:	23ff      	movs	r3, #255	; 0xff
 80036b4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f007 fef8 	bl	800b4ac <UTIL_SEQ_PauseTask>
      break;
 80036bc:	e005      	b.n	80036ca <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80036be:	23ff      	movs	r3, #255	; 0xff
 80036c0:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f007 ff12 	bl	800b4ec <UTIL_SEQ_ResumeTask>
      break;
 80036c8:	bf00      	nop
  }
  return;
 80036ca:	bf00      	nop
}
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <P2PC_APP_SW1_Button_Action>:
/* USER CODE END P2PC_APP_Notification_2 */
  return;
}
/* USER CODE BEGIN FD */
void P2PC_APP_SW1_Button_Action(void)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	af00      	add	r7, sp, #0

  UTIL_SEQ_SetTask(1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 80036d6:	2100      	movs	r1, #0
 80036d8:	2020      	movs	r0, #32
 80036da:	f007 febb 	bl	800b454 <UTIL_SEQ_SetTask>

}
 80036de:	bf00      	nop
 80036e0:	bd80      	pop	{r7, pc}
	...

080036e4 <P2P_Client_APP_Get_State>:

/* USER CODE END Gatt_Notification_2 */
  return;
}

uint8_t P2P_Client_APP_Get_State( void ) {
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
  return aP2PClientContext[0].state;
 80036e8:	4b03      	ldr	r3, [pc, #12]	; (80036f8 <P2P_Client_APP_Get_State+0x14>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	20000634 	.word	0x20000634

080036fc <LL_PWR_EnableBootC2>:
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8003700:	4b05      	ldr	r3, [pc, #20]	; (8003718 <LL_PWR_EnableBootC2+0x1c>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	4a04      	ldr	r2, [pc, #16]	; (8003718 <LL_PWR_EnableBootC2+0x1c>)
 8003706:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800370a:	60d3      	str	r3, [r2, #12]
}
 800370c:	bf00      	nop
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	58000400 	.word	0x58000400

0800371c <LL_C2_EXTI_EnableEvent_32_63>:
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8003724:	4b06      	ldr	r3, [pc, #24]	; (8003740 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8003726:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800372a:	4905      	ldr	r1, [pc, #20]	; (8003740 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4313      	orrs	r3, r2
 8003730:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	58000800 	.word	0x58000800

08003744 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800374c:	4b05      	ldr	r3, [pc, #20]	; (8003764 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800374e:	6a1a      	ldr	r2, [r3, #32]
 8003750:	4904      	ldr	r1, [pc, #16]	; (8003764 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4313      	orrs	r3, r2
 8003756:	620b      	str	r3, [r1, #32]
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	58000800 	.word	0x58000800

08003768 <LL_AHB3_GRP1_EnableClock>:
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003774:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003776:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4313      	orrs	r3, r2
 800377e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003784:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4013      	ands	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800378c:	68fb      	ldr	r3, [r7, #12]
}
 800378e:	bf00      	nop
 8003790:	3714      	adds	r7, #20
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800379a:	b480      	push	{r7}
 800379c:	b085      	sub	sp, #20
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80037a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037a6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80037aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80037b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ba:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4013      	ands	r3, r2
 80037c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80037c4:	68fb      	ldr	r3, [r7, #12]
}
 80037c6:	bf00      	nop
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 80037d2:	b480      	push	{r7}
 80037d4:	b083      	sub	sp, #12
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	601a      	str	r2, [r3, #0]
}
 80037e6:	bf00      	nop
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b083      	sub	sp, #12
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f043 0201 	orr.w	r2, r3, #1
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	601a      	str	r2, [r3, #0]
}
 8003806:	bf00      	nop
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8003812:	b480      	push	{r7}
 8003814:	b083      	sub	sp, #12
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
 800381a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	041b      	lsls	r3, r3, #16
 8003824:	43db      	mvns	r3, r3
 8003826:	401a      	ands	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	605a      	str	r2, [r3, #4]
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	041b      	lsls	r3, r3, #16
 800384a:	431a      	orrs	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	605a      	str	r2, [r3, #4]
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	43db      	mvns	r3, r3
 800386e:	401a      	ands	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	605a      	str	r2, [r3, #4]
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	609a      	str	r2, [r3, #8]
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	041a      	lsls	r2, r3, #16
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	609a      	str	r2, [r3, #8]
}
 80038ae:	bf00      	nop
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b083      	sub	sp, #12
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
 80038c2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68da      	ldr	r2, [r3, #12]
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	4013      	ands	r3, r2
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d101      	bne.n	80038d6 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80038d2:	2301      	movs	r3, #1
 80038d4:	e000      	b.n	80038d8 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	69da      	ldr	r2, [r3, #28]
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	4013      	ands	r3, r2
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d101      	bne.n	8003900 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80038fc:	2301      	movs	r3, #1
 80038fe:	e000      	b.n	8003902 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
	...

08003910 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8003914:	2102      	movs	r1, #2
 8003916:	4818      	ldr	r0, [pc, #96]	; (8003978 <HW_IPCC_Rx_Handler+0x68>)
 8003918:	f7ff ffe4 	bl	80038e4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d008      	beq.n	8003934 <HW_IPCC_Rx_Handler+0x24>
 8003922:	4b15      	ldr	r3, [pc, #84]	; (8003978 <HW_IPCC_Rx_Handler+0x68>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d102      	bne.n	8003934 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800392e:	f000 f8d5 	bl	8003adc <HW_IPCC_SYS_EvtHandler>
 8003932:	e01e      	b.n	8003972 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8003934:	2101      	movs	r1, #1
 8003936:	4810      	ldr	r0, [pc, #64]	; (8003978 <HW_IPCC_Rx_Handler+0x68>)
 8003938:	f7ff ffd4 	bl	80038e4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d008      	beq.n	8003954 <HW_IPCC_Rx_Handler+0x44>
 8003942:	4b0d      	ldr	r3, [pc, #52]	; (8003978 <HW_IPCC_Rx_Handler+0x68>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d102      	bne.n	8003954 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800394e:	f000 f889 	bl	8003a64 <HW_IPCC_BLE_EvtHandler>
 8003952:	e00e      	b.n	8003972 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8003954:	2108      	movs	r1, #8
 8003956:	4808      	ldr	r0, [pc, #32]	; (8003978 <HW_IPCC_Rx_Handler+0x68>)
 8003958:	f7ff ffc4 	bl	80038e4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d008      	beq.n	8003974 <HW_IPCC_Rx_Handler+0x64>
 8003962:	4b05      	ldr	r3, [pc, #20]	; (8003978 <HW_IPCC_Rx_Handler+0x68>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f003 0308 	and.w	r3, r3, #8
 800396a:	2b00      	cmp	r3, #0
 800396c:	d102      	bne.n	8003974 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800396e:	f000 f901 	bl	8003b74 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8003972:	bf00      	nop
 8003974:	bf00      	nop
}
 8003976:	bd80      	pop	{r7, pc}
 8003978:	58000c00 	.word	0x58000c00

0800397c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8003980:	2102      	movs	r1, #2
 8003982:	4818      	ldr	r0, [pc, #96]	; (80039e4 <HW_IPCC_Tx_Handler+0x68>)
 8003984:	f7ff ff99 	bl	80038ba <LL_C1_IPCC_IsActiveFlag_CHx>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d108      	bne.n	80039a0 <HW_IPCC_Tx_Handler+0x24>
 800398e:	4b15      	ldr	r3, [pc, #84]	; (80039e4 <HW_IPCC_Tx_Handler+0x68>)
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d102      	bne.n	80039a0 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800399a:	f000 f893 	bl	8003ac4 <HW_IPCC_SYS_CmdEvtHandler>
 800399e:	e01e      	b.n	80039de <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80039a0:	2108      	movs	r1, #8
 80039a2:	4810      	ldr	r0, [pc, #64]	; (80039e4 <HW_IPCC_Tx_Handler+0x68>)
 80039a4:	f7ff ff89 	bl	80038ba <LL_C1_IPCC_IsActiveFlag_CHx>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d108      	bne.n	80039c0 <HW_IPCC_Tx_Handler+0x44>
 80039ae:	4b0d      	ldr	r3, [pc, #52]	; (80039e4 <HW_IPCC_Tx_Handler+0x68>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d102      	bne.n	80039c0 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 80039ba:	f000 f8bd 	bl	8003b38 <HW_IPCC_MM_FreeBufHandler>
 80039be:	e00e      	b.n	80039de <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80039c0:	2120      	movs	r1, #32
 80039c2:	4808      	ldr	r0, [pc, #32]	; (80039e4 <HW_IPCC_Tx_Handler+0x68>)
 80039c4:	f7ff ff79 	bl	80038ba <LL_C1_IPCC_IsActiveFlag_CHx>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d108      	bne.n	80039e0 <HW_IPCC_Tx_Handler+0x64>
 80039ce:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <HW_IPCC_Tx_Handler+0x68>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d102      	bne.n	80039e0 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80039da:	f000 f84f 	bl	8003a7c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80039de:	bf00      	nop
 80039e0:	bf00      	nop
}
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	58000c00 	.word	0x58000c00

080039e8 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 80039ec:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80039f0:	f7ff fed3 	bl	800379a <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 80039f4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80039f8:	f7ff fea4 	bl	8003744 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80039fc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003a00:	f7ff fe8c 	bl	800371c <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8003a04:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8003a06:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8003a08:	f7ff fe78 	bl	80036fc <LL_PWR_EnableBootC2>

  return;
 8003a0c:	bf00      	nop
}
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8003a14:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003a18:	f7ff fea6 	bl	8003768 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8003a1c:	4806      	ldr	r0, [pc, #24]	; (8003a38 <HW_IPCC_Init+0x28>)
 8003a1e:	f7ff fee8 	bl	80037f2 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8003a22:	4805      	ldr	r0, [pc, #20]	; (8003a38 <HW_IPCC_Init+0x28>)
 8003a24:	f7ff fed5 	bl	80037d2 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8003a28:	202c      	movs	r0, #44	; 0x2c
 8003a2a:	f000 fc6c 	bl	8004306 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8003a2e:	202d      	movs	r0, #45	; 0x2d
 8003a30:	f000 fc69 	bl	8004306 <HAL_NVIC_EnableIRQ>

  return;
 8003a34:	bf00      	nop
}
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	58000c00 	.word	0x58000c00

08003a3c <HW_IPCC_BLE_Init>:
#endif
/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8003a40:	2101      	movs	r1, #1
 8003a42:	4802      	ldr	r0, [pc, #8]	; (8003a4c <HW_IPCC_BLE_Init+0x10>)
 8003a44:	f7ff ff0a 	bl	800385c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8003a48:	bf00      	nop
}
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	58000c00 	.word	0x58000c00

08003a50 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_BLE_CMD_CHANNEL );
 8003a54:	2101      	movs	r1, #1
 8003a56:	4802      	ldr	r0, [pc, #8]	; (8003a60 <HW_IPCC_BLE_SendCmd+0x10>)
 8003a58:	f7ff ff20 	bl	800389c <LL_C1_IPCC_SetFlag_CHx>

  return;
 8003a5c:	bf00      	nop
}
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	58000c00 	.word	0x58000c00

08003a64 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8003a68:	f007 f9dc 	bl	800ae24 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	4802      	ldr	r0, [pc, #8]	; (8003a78 <HW_IPCC_BLE_EvtHandler+0x14>)
 8003a70:	f7ff ff06 	bl	8003880 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8003a74:	bf00      	nop
}
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	58000c00 	.word	0x58000c00

08003a7c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8003a80:	2120      	movs	r1, #32
 8003a82:	4803      	ldr	r0, [pc, #12]	; (8003a90 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8003a84:	f7ff fed8 	bl	8003838 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8003a88:	f007 f9fc 	bl	800ae84 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8003a8c:	bf00      	nop
}
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	58000c00 	.word	0x58000c00

08003a94 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8003a98:	2102      	movs	r1, #2
 8003a9a:	4802      	ldr	r0, [pc, #8]	; (8003aa4 <HW_IPCC_SYS_Init+0x10>)
 8003a9c:	f7ff fede 	bl	800385c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8003aa0:	bf00      	nop
}
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	58000c00 	.word	0x58000c00

08003aa8 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8003aac:	2102      	movs	r1, #2
 8003aae:	4804      	ldr	r0, [pc, #16]	; (8003ac0 <HW_IPCC_SYS_SendCmd+0x18>)
 8003ab0:	f7ff fef4 	bl	800389c <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8003ab4:	2102      	movs	r1, #2
 8003ab6:	4802      	ldr	r0, [pc, #8]	; (8003ac0 <HW_IPCC_SYS_SendCmd+0x18>)
 8003ab8:	f7ff feab 	bl	8003812 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8003abc:	bf00      	nop
}
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	58000c00 	.word	0x58000c00

08003ac4 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8003ac8:	2102      	movs	r1, #2
 8003aca:	4803      	ldr	r0, [pc, #12]	; (8003ad8 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8003acc:	f7ff feb4 	bl	8003838 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8003ad0:	f007 fa28 	bl	800af24 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8003ad4:	bf00      	nop
}
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	58000c00 	.word	0x58000c00

08003adc <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8003ae0:	f007 fa36 	bl	800af50 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8003ae4:	2102      	movs	r1, #2
 8003ae6:	4802      	ldr	r0, [pc, #8]	; (8003af0 <HW_IPCC_SYS_EvtHandler+0x14>)
 8003ae8:	f7ff feca 	bl	8003880 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8003aec:	bf00      	nop
}
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	58000c00 	.word	0x58000c00

08003af4 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8003afc:	2108      	movs	r1, #8
 8003afe:	480c      	ldr	r0, [pc, #48]	; (8003b30 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8003b00:	f7ff fedb 	bl	80038ba <LL_C1_IPCC_IsActiveFlag_CHx>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d007      	beq.n	8003b1a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8003b0a:	4a0a      	ldr	r2, [pc, #40]	; (8003b34 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8003b10:	2108      	movs	r1, #8
 8003b12:	4807      	ldr	r0, [pc, #28]	; (8003b30 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8003b14:	f7ff fe7d 	bl	8003812 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8003b18:	e006      	b.n	8003b28 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4798      	blx	r3
    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8003b1e:	2108      	movs	r1, #8
 8003b20:	4803      	ldr	r0, [pc, #12]	; (8003b30 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8003b22:	f7ff febb 	bl	800389c <LL_C1_IPCC_SetFlag_CHx>
  return;
 8003b26:	bf00      	nop
}
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	58000c00 	.word	0x58000c00
 8003b34:	20000644 	.word	0x20000644

08003b38 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8003b3c:	2108      	movs	r1, #8
 8003b3e:	4806      	ldr	r0, [pc, #24]	; (8003b58 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8003b40:	f7ff fe7a 	bl	8003838 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8003b44:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <HW_IPCC_MM_FreeBufHandler+0x24>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4798      	blx	r3

  HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8003b4a:	2108      	movs	r1, #8
 8003b4c:	4802      	ldr	r0, [pc, #8]	; (8003b58 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8003b4e:	f7ff fea5 	bl	800389c <LL_C1_IPCC_SetFlag_CHx>

  return;
 8003b52:	bf00      	nop
}
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	58000c00 	.word	0x58000c00
 8003b5c:	20000644 	.word	0x20000644

08003b60 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8003b64:	2108      	movs	r1, #8
 8003b66:	4802      	ldr	r0, [pc, #8]	; (8003b70 <HW_IPCC_TRACES_Init+0x10>)
 8003b68:	f7ff fe78 	bl	800385c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8003b6c:	bf00      	nop
}
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	58000c00 	.word	0x58000c00

08003b74 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8003b78:	f007 fa92 	bl	800b0a0 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8003b7c:	2108      	movs	r1, #8
 8003b7e:	4802      	ldr	r0, [pc, #8]	; (8003b88 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8003b80:	f7ff fe7e 	bl	8003880 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8003b84:	bf00      	nop
}
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	58000c00 	.word	0x58000c00

08003b8c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8003b8c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b8e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b90:	3304      	adds	r3, #4

08003b92 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b92:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b94:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003b96:	d3f9      	bcc.n	8003b8c <CopyDataInit>
  bx lr
 8003b98:	4770      	bx	lr

08003b9a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8003b9a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003b9c:	3004      	adds	r0, #4

08003b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8003b9e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003ba0:	d3fb      	bcc.n	8003b9a <FillZerobss>
  bx lr
 8003ba2:	4770      	bx	lr

08003ba4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003ba4:	480c      	ldr	r0, [pc, #48]	; (8003bd8 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8003ba6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003ba8:	f000 f954 	bl	8003e54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003bac:	480b      	ldr	r0, [pc, #44]	; (8003bdc <LoopForever+0x8>)
 8003bae:	490c      	ldr	r1, [pc, #48]	; (8003be0 <LoopForever+0xc>)
 8003bb0:	4a0c      	ldr	r2, [pc, #48]	; (8003be4 <LoopForever+0x10>)
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	f7ff ffed 	bl	8003b92 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003bb8:	480b      	ldr	r0, [pc, #44]	; (8003be8 <LoopForever+0x14>)
 8003bba:	490c      	ldr	r1, [pc, #48]	; (8003bec <LoopForever+0x18>)
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	f7ff ffee 	bl	8003b9e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8003bc2:	480b      	ldr	r0, [pc, #44]	; (8003bf0 <LoopForever+0x1c>)
 8003bc4:	490b      	ldr	r1, [pc, #44]	; (8003bf4 <LoopForever+0x20>)
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	f7ff ffe9 	bl	8003b9e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003bcc:	f008 fc58 	bl	800c480 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8003bd0:	f7fe fd4e 	bl	8002670 <main>

08003bd4 <LoopForever>:

LoopForever:
  b LoopForever
 8003bd4:	e7fe      	b.n	8003bd4 <LoopForever>
 8003bd6:	0000      	.short	0x0000
  ldr   r0, =_estack
 8003bd8:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 8003bdc:	20000008 	.word	0x20000008
 8003be0:	20000220 	.word	0x20000220
 8003be4:	0800f24c 	.word	0x0800f24c
  INIT_BSS _sbss, _ebss
 8003be8:	20000270 	.word	0x20000270
 8003bec:	200018ec 	.word	0x200018ec
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8003bf0:	200301e4 	.word	0x200301e4
 8003bf4:	20030a67 	.word	0x20030a67

08003bf8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003bf8:	e7fe      	b.n	8003bf8 <ADC1_IRQHandler>

08003bfa <LL_AHB2_GRP1_EnableClock>:
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b085      	sub	sp, #20
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003c12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
}
 8003c20:	bf00      	nop
 8003c22:	3714      	adds	r7, #20
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b088      	sub	sp, #32
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	4603      	mov	r3, r0
 8003c34:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8003c36:	f107 030c 	add.w	r3, r7, #12
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	605a      	str	r2, [r3, #4]
 8003c40:	609a      	str	r2, [r3, #8]
 8003c42:	60da      	str	r2, [r3, #12]
 8003c44:	611a      	str	r2, [r3, #16]

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8003c46:	2002      	movs	r0, #2
 8003c48:	f7ff ffd7 	bl	8003bfa <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 8003c4c:	79fb      	ldrb	r3, [r7, #7]
 8003c4e:	4a12      	ldr	r2, [pc, #72]	; (8003c98 <BSP_LED_Init+0x6c>)
 8003c50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c54:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8003c56:	2301      	movs	r3, #1
 8003c58:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c5e:	2302      	movs	r3, #2
 8003c60:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8003c62:	79fb      	ldrb	r3, [r7, #7]
 8003c64:	4a0d      	ldr	r2, [pc, #52]	; (8003c9c <BSP_LED_Init+0x70>)
 8003c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c6a:	f107 020c 	add.w	r2, r7, #12
 8003c6e:	4611      	mov	r1, r2
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 fee1 	bl	8004a38 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8003c76:	79fb      	ldrb	r3, [r7, #7]
 8003c78:	4a08      	ldr	r2, [pc, #32]	; (8003c9c <BSP_LED_Init+0x70>)
 8003c7a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003c7e:	79fb      	ldrb	r3, [r7, #7]
 8003c80:	4a05      	ldr	r2, [pc, #20]	; (8003c98 <BSP_LED_Init+0x6c>)
 8003c82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c86:	2200      	movs	r2, #0
 8003c88:	4619      	mov	r1, r3
 8003c8a:	f001 f83d 	bl	8004d08 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3720      	adds	r7, #32
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	0800edd0 	.word	0x0800edd0
 8003c9c:	20000014 	.word	0x20000014

08003ca0 <BSP_LED_On>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8003caa:	79fb      	ldrb	r3, [r7, #7]
 8003cac:	4a07      	ldr	r2, [pc, #28]	; (8003ccc <BSP_LED_On+0x2c>)
 8003cae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003cb2:	79fb      	ldrb	r3, [r7, #7]
 8003cb4:	4a06      	ldr	r2, [pc, #24]	; (8003cd0 <BSP_LED_On+0x30>)
 8003cb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	f001 f823 	bl	8004d08 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3708      	adds	r7, #8
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	20000014 	.word	0x20000014
 8003cd0:	0800edd0 	.word	0x0800edd0

08003cd4 <BSP_LED_Off>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	4603      	mov	r3, r0
 8003cdc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8003cde:	79fb      	ldrb	r3, [r7, #7]
 8003ce0:	4a07      	ldr	r2, [pc, #28]	; (8003d00 <BSP_LED_Off+0x2c>)
 8003ce2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003ce6:	79fb      	ldrb	r3, [r7, #7]
 8003ce8:	4a06      	ldr	r2, [pc, #24]	; (8003d04 <BSP_LED_Off+0x30>)
 8003cea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	f001 f809 	bl	8004d08 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3708      	adds	r7, #8
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	20000014 	.word	0x20000014
 8003d04:	0800edd0 	.word	0x0800edd0

08003d08 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b088      	sub	sp, #32
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	4603      	mov	r3, r0
 8003d10:	460a      	mov	r2, r1
 8003d12:	71fb      	strb	r3, [r7, #7]
 8003d14:	4613      	mov	r3, r2
 8003d16:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure = {0};
 8003d18:	f107 030c 	add.w	r3, r7, #12
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	605a      	str	r2, [r3, #4]
 8003d22:	609a      	str	r2, [r3, #8]
 8003d24:	60da      	str	r2, [r3, #12]
 8003d26:	611a      	str	r2, [r3, #16]
  static BSP_EXTI_LineCallback button_callback[BUTTONn] = {BUTTON_SW1_EXTI_Callback, BUTTON_SW2_EXTI_Callback, BUTTON_SW3_EXTI_Callback};
  static uint32_t button_interrupt_priority[BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY, BSP_BUTTON_USER_IT_PRIORITY, BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t button_exti_line[BUTTONn] = {BUTTON_SW1_EXTI_LINE, BUTTON_SW2_EXTI_LINE, BUTTON_SW3_EXTI_LINE};

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8003d28:	79fb      	ldrb	r3, [r7, #7]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d103      	bne.n	8003d36 <BSP_PB_Init+0x2e>
 8003d2e:	2001      	movs	r0, #1
 8003d30:	f7ff ff63 	bl	8003bfa <LL_AHB2_GRP1_EnableClock>
 8003d34:	e00c      	b.n	8003d50 <BSP_PB_Init+0x48>
 8003d36:	79fb      	ldrb	r3, [r7, #7]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d103      	bne.n	8003d44 <BSP_PB_Init+0x3c>
 8003d3c:	2010      	movs	r0, #16
 8003d3e:	f7ff ff5c 	bl	8003bfa <LL_AHB2_GRP1_EnableClock>
 8003d42:	e005      	b.n	8003d50 <BSP_PB_Init+0x48>
 8003d44:	79fb      	ldrb	r3, [r7, #7]
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d102      	bne.n	8003d50 <BSP_PB_Init+0x48>
 8003d4a:	2001      	movs	r0, #1
 8003d4c:	f7ff ff55 	bl	8003bfa <LL_AHB2_GRP1_EnableClock>

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8003d50:	79fb      	ldrb	r3, [r7, #7]
 8003d52:	4a29      	ldr	r2, [pc, #164]	; (8003df8 <BSP_PB_Init+0xf0>)
 8003d54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d58:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d5e:	2302      	movs	r3, #2
 8003d60:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8003d62:	79bb      	ldrb	r3, [r7, #6]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10c      	bne.n	8003d82 <BSP_PB_Init+0x7a>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8003d6c:	79fb      	ldrb	r3, [r7, #7]
 8003d6e:	4a23      	ldr	r2, [pc, #140]	; (8003dfc <BSP_PB_Init+0xf4>)
 8003d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d74:	f107 020c 	add.w	r2, r7, #12
 8003d78:	4611      	mov	r1, r2
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f000 fe5c 	bl	8004a38 <HAL_GPIO_Init>
 8003d80:	e035      	b.n	8003dee <BSP_PB_Init+0xe6>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8003d82:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003d86:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8003d88:	79fb      	ldrb	r3, [r7, #7]
 8003d8a:	4a1c      	ldr	r2, [pc, #112]	; (8003dfc <BSP_PB_Init+0xf4>)
 8003d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d90:	f107 020c 	add.w	r2, r7, #12
 8003d94:	4611      	mov	r1, r2
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 fe4e 	bl	8004a38 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], button_exti_line[Button]);
 8003d9c:	79fb      	ldrb	r3, [r7, #7]
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	4a17      	ldr	r2, [pc, #92]	; (8003e00 <BSP_PB_Init+0xf8>)
 8003da2:	441a      	add	r2, r3
 8003da4:	79fb      	ldrb	r3, [r7, #7]
 8003da6:	4917      	ldr	r1, [pc, #92]	; (8003e04 <BSP_PB_Init+0xfc>)
 8003da8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003dac:	4619      	mov	r1, r3
 8003dae:	4610      	mov	r0, r2
 8003db0:	f000 fe0c 	bl	80049cc <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button], HAL_EXTI_COMMON_CB_ID, button_callback[Button]);
 8003db4:	79fb      	ldrb	r3, [r7, #7]
 8003db6:	00db      	lsls	r3, r3, #3
 8003db8:	4a11      	ldr	r2, [pc, #68]	; (8003e00 <BSP_PB_Init+0xf8>)
 8003dba:	1898      	adds	r0, r3, r2
 8003dbc:	79fb      	ldrb	r3, [r7, #7]
 8003dbe:	4a12      	ldr	r2, [pc, #72]	; (8003e08 <BSP_PB_Init+0x100>)
 8003dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	f000 fde6 	bl	8004998 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
 8003dcc:	79fb      	ldrb	r3, [r7, #7]
 8003dce:	4a0f      	ldr	r2, [pc, #60]	; (8003e0c <BSP_PB_Init+0x104>)
 8003dd0:	56d0      	ldrsb	r0, [r2, r3]
 8003dd2:	79fb      	ldrb	r3, [r7, #7]
 8003dd4:	4a0e      	ldr	r2, [pc, #56]	; (8003e10 <BSP_PB_Init+0x108>)
 8003dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	4619      	mov	r1, r3
 8003dde:	f000 fa78 	bl	80042d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8003de2:	79fb      	ldrb	r3, [r7, #7]
 8003de4:	4a09      	ldr	r2, [pc, #36]	; (8003e0c <BSP_PB_Init+0x104>)
 8003de6:	56d3      	ldrsb	r3, [r2, r3]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f000 fa8c 	bl	8004306 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3720      	adds	r7, #32
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	0800edd8 	.word	0x0800edd8
 8003dfc:	20000020 	.word	0x20000020
 8003e00:	20000648 	.word	0x20000648
 8003e04:	0800ede4 	.word	0x0800ede4
 8003e08:	2000002c 	.word	0x2000002c
 8003e0c:	0800ede0 	.word	0x0800ede0
 8003e10:	20000038 	.word	0x20000038

08003e14 <BSP_PB_Callback>:
  *           @arg BUTTON_SW2
  *           @arg BUTTON_SW3
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8003e1e:	bf00      	nop
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <BUTTON_SW1_EXTI_Callback>:
/**
  * @brief  Button SW1 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW1_EXTI_Callback(void)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW1);
 8003e2e:	2000      	movs	r0, #0
 8003e30:	f7ff fff0 	bl	8003e14 <BSP_PB_Callback>
}
 8003e34:	bf00      	nop
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <BUTTON_SW2_EXTI_Callback>:
/**
  * @brief  Button SW2 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW2_EXTI_Callback(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW2);
 8003e3c:	2001      	movs	r0, #1
 8003e3e:	f7ff ffe9 	bl	8003e14 <BSP_PB_Callback>
}
 8003e42:	bf00      	nop
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <BUTTON_SW3_EXTI_Callback>:
/**
  * @brief  Button SW3 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW3_EXTI_Callback(void)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW3);
 8003e4a:	2002      	movs	r0, #2
 8003e4c:	f7ff ffe2 	bl	8003e14 <BSP_PB_Callback>
}
 8003e50:	bf00      	nop
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8003e58:	4b24      	ldr	r3, [pc, #144]	; (8003eec <SystemInit+0x98>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8003e5e:	4b23      	ldr	r3, [pc, #140]	; (8003eec <SystemInit+0x98>)
 8003e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e64:	4a21      	ldr	r2, [pc, #132]	; (8003eec <SystemInit+0x98>)
 8003e66:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e6a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003e6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e78:	f043 0301 	orr.w	r3, r3, #1
 8003e7c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003e7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e82:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003e86:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e92:	4b17      	ldr	r3, [pc, #92]	; (8003ef0 <SystemInit+0x9c>)
 8003e94:	4013      	ands	r3, r2
 8003e96:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003e98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ea0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ea4:	f023 0305 	bic.w	r3, r3, #5
 8003ea8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003eb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003eb8:	f023 0301 	bic.w	r3, r3, #1
 8003ebc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8003ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ec4:	4a0b      	ldr	r2, [pc, #44]	; (8003ef4 <SystemInit+0xa0>)
 8003ec6:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ed6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003edc:	2200      	movs	r2, #0
 8003ede:	619a      	str	r2, [r3, #24]
}
 8003ee0:	bf00      	nop
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	e000ed00 	.word	0xe000ed00
 8003ef0:	faf6fefb 	.word	0xfaf6fefb
 8003ef4:	22041000 	.word	0x22041000

08003ef8 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003efc:	4b05      	ldr	r3, [pc, #20]	; (8003f14 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	4a04      	ldr	r2, [pc, #16]	; (8003f14 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8003f02:	f043 0301 	orr.w	r3, r3, #1
 8003f06:	6053      	str	r3, [r2, #4]
}
 8003f08:	bf00      	nop
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	e0042000 	.word	0xe0042000

08003f18 <LL_DBGMCU_EnableDBGStopMode>:
{
 8003f18:	b480      	push	{r7}
 8003f1a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003f1c:	4b05      	ldr	r3, [pc, #20]	; (8003f34 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	4a04      	ldr	r2, [pc, #16]	; (8003f34 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8003f22:	f043 0302 	orr.w	r3, r3, #2
 8003f26:	6053      	str	r3, [r2, #4]
}
 8003f28:	bf00      	nop
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	e0042000 	.word	0xe0042000

08003f38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f42:	4b0c      	ldr	r3, [pc, #48]	; (8003f74 <HAL_Init+0x3c>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a0b      	ldr	r2, [pc, #44]	; (8003f74 <HAL_Init+0x3c>)
 8003f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f4c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f4e:	2003      	movs	r0, #3
 8003f50:	f000 f9b4 	bl	80042bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f54:	2000      	movs	r0, #0
 8003f56:	f000 f80f 	bl	8003f78 <HAL_InitTick>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d002      	beq.n	8003f66 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	71fb      	strb	r3, [r7, #7]
 8003f64:	e001      	b.n	8003f6a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003f66:	f7fe fd49 	bl	80029fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003f6a:	79fb      	ldrb	r3, [r7, #7]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3708      	adds	r7, #8
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	58004000 	.word	0x58004000

08003f78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003f80:	2300      	movs	r3, #0
 8003f82:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003f84:	4b17      	ldr	r3, [pc, #92]	; (8003fe4 <HAL_InitTick+0x6c>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d024      	beq.n	8003fd6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003f8c:	f001 ffe0 	bl	8005f50 <HAL_RCC_GetHCLKFreq>
 8003f90:	4602      	mov	r2, r0
 8003f92:	4b14      	ldr	r3, [pc, #80]	; (8003fe4 <HAL_InitTick+0x6c>)
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	4619      	mov	r1, r3
 8003f98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f9c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f000 f9ca 	bl	800433e <HAL_SYSTICK_Config>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10f      	bne.n	8003fd0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b0f      	cmp	r3, #15
 8003fb4:	d809      	bhi.n	8003fca <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	6879      	ldr	r1, [r7, #4]
 8003fba:	f04f 30ff 	mov.w	r0, #4294967295
 8003fbe:	f000 f988 	bl	80042d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003fc2:	4a09      	ldr	r2, [pc, #36]	; (8003fe8 <HAL_InitTick+0x70>)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6013      	str	r3, [r2, #0]
 8003fc8:	e007      	b.n	8003fda <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	73fb      	strb	r3, [r7, #15]
 8003fce:	e004      	b.n	8003fda <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	73fb      	strb	r3, [r7, #15]
 8003fd4:	e001      	b.n	8003fda <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	2000004c 	.word	0x2000004c
 8003fe8:	20000048 	.word	0x20000048

08003fec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003ff0:	4b06      	ldr	r3, [pc, #24]	; (800400c <HAL_IncTick+0x20>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	4b06      	ldr	r3, [pc, #24]	; (8004010 <HAL_IncTick+0x24>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	4a04      	ldr	r2, [pc, #16]	; (8004010 <HAL_IncTick+0x24>)
 8003ffe:	6013      	str	r3, [r2, #0]
}
 8004000:	bf00      	nop
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	2000004c 	.word	0x2000004c
 8004010:	20000660 	.word	0x20000660

08004014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
  return uwTick;
 8004018:	4b03      	ldr	r3, [pc, #12]	; (8004028 <HAL_GetTick+0x14>)
 800401a:	681b      	ldr	r3, [r3, #0]
}
 800401c:	4618      	mov	r0, r3
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	20000660 	.word	0x20000660

0800402c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8004030:	4b03      	ldr	r3, [pc, #12]	; (8004040 <HAL_GetTickPrio+0x14>)
 8004032:	681b      	ldr	r3, [r3, #0]
}
 8004034:	4618      	mov	r0, r3
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	20000048 	.word	0x20000048

08004044 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8004048:	f7ff ff56 	bl	8003ef8 <LL_DBGMCU_EnableDBGSleepMode>
}
 800404c:	bf00      	nop
 800404e:	bd80      	pop	{r7, pc}

08004050 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8004054:	f7ff ff60 	bl	8003f18 <LL_DBGMCU_EnableDBGStopMode>
}
 8004058:	bf00      	nop
 800405a:	bd80      	pop	{r7, pc}

0800405c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f003 0307 	and.w	r3, r3, #7
 800406a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800406c:	4b0c      	ldr	r3, [pc, #48]	; (80040a0 <__NVIC_SetPriorityGrouping+0x44>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004078:	4013      	ands	r3, r2
 800407a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004084:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800408c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800408e:	4a04      	ldr	r2, [pc, #16]	; (80040a0 <__NVIC_SetPriorityGrouping+0x44>)
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	60d3      	str	r3, [r2, #12]
}
 8004094:	bf00      	nop
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	e000ed00 	.word	0xe000ed00

080040a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040a8:	4b04      	ldr	r3, [pc, #16]	; (80040bc <__NVIC_GetPriorityGrouping+0x18>)
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	0a1b      	lsrs	r3, r3, #8
 80040ae:	f003 0307 	and.w	r3, r3, #7
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	e000ed00 	.word	0xe000ed00

080040c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	4603      	mov	r3, r0
 80040c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	db0b      	blt.n	80040ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040d2:	79fb      	ldrb	r3, [r7, #7]
 80040d4:	f003 021f 	and.w	r2, r3, #31
 80040d8:	4907      	ldr	r1, [pc, #28]	; (80040f8 <__NVIC_EnableIRQ+0x38>)
 80040da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040de:	095b      	lsrs	r3, r3, #5
 80040e0:	2001      	movs	r0, #1
 80040e2:	fa00 f202 	lsl.w	r2, r0, r2
 80040e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80040ea:	bf00      	nop
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	e000e100 	.word	0xe000e100

080040fc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	4603      	mov	r3, r0
 8004104:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800410a:	2b00      	cmp	r3, #0
 800410c:	db12      	blt.n	8004134 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800410e:	79fb      	ldrb	r3, [r7, #7]
 8004110:	f003 021f 	and.w	r2, r3, #31
 8004114:	490a      	ldr	r1, [pc, #40]	; (8004140 <__NVIC_DisableIRQ+0x44>)
 8004116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800411a:	095b      	lsrs	r3, r3, #5
 800411c:	2001      	movs	r0, #1
 800411e:	fa00 f202 	lsl.w	r2, r0, r2
 8004122:	3320      	adds	r3, #32
 8004124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004128:	f3bf 8f4f 	dsb	sy
}
 800412c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800412e:	f3bf 8f6f 	isb	sy
}
 8004132:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr
 8004140:	e000e100 	.word	0xe000e100

08004144 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	4603      	mov	r3, r0
 800414c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800414e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004152:	2b00      	cmp	r3, #0
 8004154:	db0c      	blt.n	8004170 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004156:	79fb      	ldrb	r3, [r7, #7]
 8004158:	f003 021f 	and.w	r2, r3, #31
 800415c:	4907      	ldr	r1, [pc, #28]	; (800417c <__NVIC_SetPendingIRQ+0x38>)
 800415e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004162:	095b      	lsrs	r3, r3, #5
 8004164:	2001      	movs	r0, #1
 8004166:	fa00 f202 	lsl.w	r2, r0, r2
 800416a:	3340      	adds	r3, #64	; 0x40
 800416c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	e000e100 	.word	0xe000e100

08004180 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	4603      	mov	r3, r0
 8004188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800418a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800418e:	2b00      	cmp	r3, #0
 8004190:	db0c      	blt.n	80041ac <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004192:	79fb      	ldrb	r3, [r7, #7]
 8004194:	f003 021f 	and.w	r2, r3, #31
 8004198:	4907      	ldr	r1, [pc, #28]	; (80041b8 <__NVIC_ClearPendingIRQ+0x38>)
 800419a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800419e:	095b      	lsrs	r3, r3, #5
 80041a0:	2001      	movs	r0, #1
 80041a2:	fa00 f202 	lsl.w	r2, r0, r2
 80041a6:	3360      	adds	r3, #96	; 0x60
 80041a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr
 80041b8:	e000e100 	.word	0xe000e100

080041bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	4603      	mov	r3, r0
 80041c4:	6039      	str	r1, [r7, #0]
 80041c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	db0a      	blt.n	80041e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	b2da      	uxtb	r2, r3
 80041d4:	490c      	ldr	r1, [pc, #48]	; (8004208 <__NVIC_SetPriority+0x4c>)
 80041d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041da:	0112      	lsls	r2, r2, #4
 80041dc:	b2d2      	uxtb	r2, r2
 80041de:	440b      	add	r3, r1
 80041e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041e4:	e00a      	b.n	80041fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	4908      	ldr	r1, [pc, #32]	; (800420c <__NVIC_SetPriority+0x50>)
 80041ec:	79fb      	ldrb	r3, [r7, #7]
 80041ee:	f003 030f 	and.w	r3, r3, #15
 80041f2:	3b04      	subs	r3, #4
 80041f4:	0112      	lsls	r2, r2, #4
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	440b      	add	r3, r1
 80041fa:	761a      	strb	r2, [r3, #24]
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	e000e100 	.word	0xe000e100
 800420c:	e000ed00 	.word	0xe000ed00

08004210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004210:	b480      	push	{r7}
 8004212:	b089      	sub	sp, #36	; 0x24
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	f1c3 0307 	rsb	r3, r3, #7
 800422a:	2b04      	cmp	r3, #4
 800422c:	bf28      	it	cs
 800422e:	2304      	movcs	r3, #4
 8004230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	3304      	adds	r3, #4
 8004236:	2b06      	cmp	r3, #6
 8004238:	d902      	bls.n	8004240 <NVIC_EncodePriority+0x30>
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	3b03      	subs	r3, #3
 800423e:	e000      	b.n	8004242 <NVIC_EncodePriority+0x32>
 8004240:	2300      	movs	r3, #0
 8004242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004244:	f04f 32ff 	mov.w	r2, #4294967295
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	fa02 f303 	lsl.w	r3, r2, r3
 800424e:	43da      	mvns	r2, r3
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	401a      	ands	r2, r3
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004258:	f04f 31ff 	mov.w	r1, #4294967295
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	fa01 f303 	lsl.w	r3, r1, r3
 8004262:	43d9      	mvns	r1, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004268:	4313      	orrs	r3, r2
         );
}
 800426a:	4618      	mov	r0, r3
 800426c:	3724      	adds	r7, #36	; 0x24
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
	...

08004278 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	3b01      	subs	r3, #1
 8004284:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004288:	d301      	bcc.n	800428e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800428a:	2301      	movs	r3, #1
 800428c:	e00f      	b.n	80042ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800428e:	4a0a      	ldr	r2, [pc, #40]	; (80042b8 <SysTick_Config+0x40>)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3b01      	subs	r3, #1
 8004294:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004296:	210f      	movs	r1, #15
 8004298:	f04f 30ff 	mov.w	r0, #4294967295
 800429c:	f7ff ff8e 	bl	80041bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042a0:	4b05      	ldr	r3, [pc, #20]	; (80042b8 <SysTick_Config+0x40>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042a6:	4b04      	ldr	r3, [pc, #16]	; (80042b8 <SysTick_Config+0x40>)
 80042a8:	2207      	movs	r2, #7
 80042aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	e000e010 	.word	0xe000e010

080042bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f7ff fec9 	bl	800405c <__NVIC_SetPriorityGrouping>
}
 80042ca:	bf00      	nop
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b086      	sub	sp, #24
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	4603      	mov	r3, r0
 80042da:	60b9      	str	r1, [r7, #8]
 80042dc:	607a      	str	r2, [r7, #4]
 80042de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80042e0:	f7ff fee0 	bl	80040a4 <__NVIC_GetPriorityGrouping>
 80042e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	68b9      	ldr	r1, [r7, #8]
 80042ea:	6978      	ldr	r0, [r7, #20]
 80042ec:	f7ff ff90 	bl	8004210 <NVIC_EncodePriority>
 80042f0:	4602      	mov	r2, r0
 80042f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042f6:	4611      	mov	r1, r2
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7ff ff5f 	bl	80041bc <__NVIC_SetPriority>
}
 80042fe:	bf00      	nop
 8004300:	3718      	adds	r7, #24
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b082      	sub	sp, #8
 800430a:	af00      	add	r7, sp, #0
 800430c:	4603      	mov	r3, r0
 800430e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004314:	4618      	mov	r0, r3
 8004316:	f7ff fed3 	bl	80040c0 <__NVIC_EnableIRQ>
}
 800431a:	bf00      	nop
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b082      	sub	sp, #8
 8004326:	af00      	add	r7, sp, #0
 8004328:	4603      	mov	r3, r0
 800432a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800432c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004330:	4618      	mov	r0, r3
 8004332:	f7ff fee3 	bl	80040fc <__NVIC_DisableIRQ>
}
 8004336:	bf00      	nop
 8004338:	3708      	adds	r7, #8
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b082      	sub	sp, #8
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7ff ff96 	bl	8004278 <SysTick_Config>
 800434c:	4603      	mov	r3, r0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3708      	adds	r7, #8
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b082      	sub	sp, #8
 800435a:	af00      	add	r7, sp, #0
 800435c:	4603      	mov	r3, r0
 800435e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8004360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004364:	4618      	mov	r0, r3
 8004366:	f7ff feed 	bl	8004144 <__NVIC_SetPendingIRQ>
}
 800436a:	bf00      	nop
 800436c:	3708      	adds	r7, #8
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b082      	sub	sp, #8
 8004376:	af00      	add	r7, sp, #0
 8004378:	4603      	mov	r3, r0
 800437a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800437c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004380:	4618      	mov	r0, r3
 8004382:	f7ff fefd 	bl	8004180 <__NVIC_ClearPendingIRQ>
}
 8004386:	bf00      	nop
 8004388:	3708      	adds	r7, #8
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
	...

08004390 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e078      	b.n	8004494 <HAL_DMA_Init+0x104>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	461a      	mov	r2, r3
 80043a8:	4b3c      	ldr	r3, [pc, #240]	; (800449c <HAL_DMA_Init+0x10c>)
 80043aa:	4413      	add	r3, r2
 80043ac:	4a3c      	ldr	r2, [pc, #240]	; (80044a0 <HAL_DMA_Init+0x110>)
 80043ae:	fba2 2303 	umull	r2, r3, r2, r3
 80043b2:	091b      	lsrs	r3, r3, #4
 80043b4:	009a      	lsls	r2, r3, #2
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a39      	ldr	r2, [pc, #228]	; (80044a4 <HAL_DMA_Init+0x114>)
 80043be:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2202      	movs	r2, #2
 80043c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80043d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80043e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	4313      	orrs	r3, r2
 8004408:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 fa6e 	bl	80048f4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004420:	d102      	bne.n	8004428 <HAL_DMA_Init+0x98>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004430:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004434:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800443e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d010      	beq.n	800446a <HAL_DMA_Init+0xda>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	2b04      	cmp	r3, #4
 800444e:	d80c      	bhi.n	800446a <HAL_DMA_Init+0xda>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 fa7b 	bl	800494c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445a:	2200      	movs	r2, #0
 800445c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004466:	605a      	str	r2, [r3, #4]
 8004468:	e008      	b.n	800447c <HAL_DMA_Init+0xec>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	bffdfff8 	.word	0xbffdfff8
 80044a0:	cccccccd 	.word	0xcccccccd
 80044a4:	40020000 	.word	0x40020000

080044a8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
 80044b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044b6:	2300      	movs	r3, #0
 80044b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d101      	bne.n	80044c8 <HAL_DMA_Start_IT+0x20>
 80044c4:	2302      	movs	r3, #2
 80044c6:	e066      	b.n	8004596 <HAL_DMA_Start_IT+0xee>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d155      	bne.n	8004588 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2202      	movs	r2, #2
 80044e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 0201 	bic.w	r2, r2, #1
 80044f8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	68b9      	ldr	r1, [r7, #8]
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f000 f9b9 	bl	8004878 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450a:	2b00      	cmp	r3, #0
 800450c:	d008      	beq.n	8004520 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f042 020e 	orr.w	r2, r2, #14
 800451c:	601a      	str	r2, [r3, #0]
 800451e:	e00f      	b.n	8004540 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 0204 	bic.w	r2, r2, #4
 800452e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f042 020a 	orr.w	r2, r2, #10
 800453e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d007      	beq.n	800455e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004558:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800455c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004562:	2b00      	cmp	r3, #0
 8004564:	d007      	beq.n	8004576 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004570:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004574:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f042 0201 	orr.w	r2, r2, #1
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	e005      	b.n	8004594 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004590:	2302      	movs	r3, #2
 8004592:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004594:	7dfb      	ldrb	r3, [r7, #23]
}
 8004596:	4618      	mov	r0, r3
 8004598:	3718      	adds	r7, #24
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800459e:	b480      	push	{r7}
 80045a0:	b083      	sub	sp, #12
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d101      	bne.n	80045b0 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e04f      	b.n	8004650 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d008      	beq.n	80045ce <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2204      	movs	r2, #4
 80045c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e040      	b.n	8004650 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 020e 	bic.w	r2, r2, #14
 80045dc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045ec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 0201 	bic.w	r2, r2, #1
 80045fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004602:	f003 021c 	and.w	r2, r3, #28
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460a:	2101      	movs	r1, #1
 800460c:	fa01 f202 	lsl.w	r2, r1, r2
 8004610:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800461a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00c      	beq.n	800463e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004632:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800463c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004664:	2300      	movs	r3, #0
 8004666:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b02      	cmp	r3, #2
 8004672:	d005      	beq.n	8004680 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2204      	movs	r2, #4
 8004678:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	73fb      	strb	r3, [r7, #15]
 800467e:	e047      	b.n	8004710 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f022 020e 	bic.w	r2, r2, #14
 800468e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f022 0201 	bic.w	r2, r2, #1
 800469e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b4:	f003 021c 	and.w	r2, r3, #28
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046bc:	2101      	movs	r1, #1
 80046be:	fa01 f202 	lsl.w	r2, r1, r2
 80046c2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80046cc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00c      	beq.n	80046f0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046e4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80046ee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004704:	2b00      	cmp	r3, #0
 8004706:	d003      	beq.n	8004710 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	4798      	blx	r3
    }
  }
  return status;
 8004710:	7bfb      	ldrb	r3, [r7, #15]
}
 8004712:	4618      	mov	r0, r3
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800471a:	b580      	push	{r7, lr}
 800471c:	b084      	sub	sp, #16
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004736:	f003 031c 	and.w	r3, r3, #28
 800473a:	2204      	movs	r2, #4
 800473c:	409a      	lsls	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	4013      	ands	r3, r2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d026      	beq.n	8004794 <HAL_DMA_IRQHandler+0x7a>
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	f003 0304 	and.w	r3, r3, #4
 800474c:	2b00      	cmp	r3, #0
 800474e:	d021      	beq.n	8004794 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0320 	and.w	r3, r3, #32
 800475a:	2b00      	cmp	r3, #0
 800475c:	d107      	bne.n	800476e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f022 0204 	bic.w	r2, r2, #4
 800476c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004772:	f003 021c 	and.w	r2, r3, #28
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	2104      	movs	r1, #4
 800477c:	fa01 f202 	lsl.w	r2, r1, r2
 8004780:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004786:	2b00      	cmp	r3, #0
 8004788:	d071      	beq.n	800486e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004792:	e06c      	b.n	800486e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004798:	f003 031c 	and.w	r3, r3, #28
 800479c:	2202      	movs	r2, #2
 800479e:	409a      	lsls	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4013      	ands	r3, r2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d02e      	beq.n	8004806 <HAL_DMA_IRQHandler+0xec>
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d029      	beq.n	8004806 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0320 	and.w	r3, r3, #32
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10b      	bne.n	80047d8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 020a 	bic.w	r2, r2, #10
 80047ce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047dc:	f003 021c 	and.w	r2, r3, #28
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e4:	2102      	movs	r1, #2
 80047e6:	fa01 f202 	lsl.w	r2, r1, r2
 80047ea:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d038      	beq.n	800486e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004804:	e033      	b.n	800486e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480a:	f003 031c 	and.w	r3, r3, #28
 800480e:	2208      	movs	r2, #8
 8004810:	409a      	lsls	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	4013      	ands	r3, r2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d02a      	beq.n	8004870 <HAL_DMA_IRQHandler+0x156>
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	f003 0308 	and.w	r3, r3, #8
 8004820:	2b00      	cmp	r3, #0
 8004822:	d025      	beq.n	8004870 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f022 020e 	bic.w	r2, r2, #14
 8004832:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004838:	f003 021c 	and.w	r2, r3, #28
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004840:	2101      	movs	r1, #1
 8004842:	fa01 f202 	lsl.w	r2, r1, r2
 8004846:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004862:	2b00      	cmp	r3, #0
 8004864:	d004      	beq.n	8004870 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800486e:	bf00      	nop
 8004870:	bf00      	nop
}
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
 8004884:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800488e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004894:	2b00      	cmp	r3, #0
 8004896:	d004      	beq.n	80048a2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80048a0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a6:	f003 021c 	and.w	r2, r3, #28
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	2101      	movs	r1, #1
 80048b0:	fa01 f202 	lsl.w	r2, r1, r2
 80048b4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	2b10      	cmp	r3, #16
 80048c4:	d108      	bne.n	80048d8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80048d6:	e007      	b.n	80048e8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68ba      	ldr	r2, [r7, #8]
 80048de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	60da      	str	r2, [r3, #12]
}
 80048e8:	bf00      	nop
 80048ea:	3714      	adds	r7, #20
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004900:	089b      	lsrs	r3, r3, #2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004908:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	6493      	str	r3, [r2, #72]	; 0x48
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	b2db      	uxtb	r3, r3
 8004916:	3b08      	subs	r3, #8
 8004918:	4a0a      	ldr	r2, [pc, #40]	; (8004944 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800491a:	fba2 2303 	umull	r2, r3, r2, r3
 800491e:	091b      	lsrs	r3, r3, #4
 8004920:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a08      	ldr	r2, [pc, #32]	; (8004948 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8004926:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f003 031f 	and.w	r3, r3, #31
 800492e:	2201      	movs	r2, #1
 8004930:	409a      	lsls	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004936:	bf00      	nop
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	cccccccd 	.word	0xcccccccd
 8004948:	40020880 	.word	0x40020880

0800494c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800495c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	4b0b      	ldr	r3, [pc, #44]	; (8004990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004962:	4413      	add	r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	461a      	mov	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a09      	ldr	r2, [pc, #36]	; (8004994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8004970:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	3b01      	subs	r3, #1
 8004976:	f003 0303 	and.w	r3, r3, #3
 800497a:	2201      	movs	r2, #1
 800497c:	409a      	lsls	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004982:	bf00      	nop
 8004984:	3714      	adds	r7, #20
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	1000823f 	.word	0x1000823f
 8004994:	40020940 	.word	0x40020940

08004998 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8004998:	b480      	push	{r7}
 800499a:	b087      	sub	sp, #28
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	460b      	mov	r3, r1
 80049a2:	607a      	str	r2, [r7, #4]
 80049a4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80049a6:	2300      	movs	r3, #0
 80049a8:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80049aa:	7afb      	ldrb	r3, [r7, #11]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d103      	bne.n	80049b8 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	605a      	str	r2, [r3, #4]
      break;
 80049b6:	e002      	b.n	80049be <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	75fb      	strb	r3, [r7, #23]
      break;
 80049bc:	bf00      	nop
  }

  return status;
 80049be:	7dfb      	ldrb	r3, [r7, #23]
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	371c      	adds	r7, #28
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d101      	bne.n	80049e0 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e003      	b.n	80049e8 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80049e6:	2300      	movs	r3, #0
  }
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b087      	sub	sp, #28
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	0c1b      	lsrs	r3, r3, #16
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 031f 	and.w	r3, r3, #31
 8004a10:	2201      	movs	r2, #1
 8004a12:	fa02 f303 	lsl.w	r3, r2, r3
 8004a16:	613b      	str	r3, [r7, #16]

  regaddr = (&EXTI->SWIER1 + (EXTI_CONFIG_OFFSET * offset));
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	015b      	lsls	r3, r3, #5
 8004a1c:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8004a20:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8004a24:	60fb      	str	r3, [r7, #12]
  *regaddr = maskline;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	601a      	str	r2, [r3, #0]
}
 8004a2c:	bf00      	nop
 8004a2e:	371c      	adds	r7, #28
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b087      	sub	sp, #28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004a42:	2300      	movs	r3, #0
 8004a44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a46:	e146      	b.n	8004cd6 <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	2101      	movs	r1, #1
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	fa01 f303 	lsl.w	r3, r1, r3
 8004a54:	4013      	ands	r3, r2
 8004a56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f000 8138 	beq.w	8004cd0 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f003 0303 	and.w	r3, r3, #3
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d005      	beq.n	8004a78 <HAL_GPIO_Init+0x40>
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f003 0303 	and.w	r3, r3, #3
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d130      	bne.n	8004ada <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	2203      	movs	r2, #3
 8004a84:	fa02 f303 	lsl.w	r3, r2, r3
 8004a88:	43db      	mvns	r3, r3
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	68da      	ldr	r2, [r3, #12]
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004aae:	2201      	movs	r2, #1
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab6:	43db      	mvns	r3, r3
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	4013      	ands	r3, r2
 8004abc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	091b      	lsrs	r3, r3, #4
 8004ac4:	f003 0201 	and.w	r2, r3, #1
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f003 0303 	and.w	r3, r3, #3
 8004ae2:	2b03      	cmp	r3, #3
 8004ae4:	d017      	beq.n	8004b16 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	005b      	lsls	r3, r3, #1
 8004af0:	2203      	movs	r2, #3
 8004af2:	fa02 f303 	lsl.w	r3, r2, r3
 8004af6:	43db      	mvns	r3, r3
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	4013      	ands	r3, r2
 8004afc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	689a      	ldr	r2, [r3, #8]
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f003 0303 	and.w	r3, r3, #3
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d123      	bne.n	8004b6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	08da      	lsrs	r2, r3, #3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	3208      	adds	r2, #8
 8004b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	f003 0307 	and.w	r3, r3, #7
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	220f      	movs	r2, #15
 8004b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3e:	43db      	mvns	r3, r3
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	4013      	ands	r3, r2
 8004b44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	691a      	ldr	r2, [r3, #16]
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	f003 0307 	and.w	r3, r3, #7
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	fa02 f303 	lsl.w	r3, r2, r3
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	08da      	lsrs	r2, r3, #3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	3208      	adds	r2, #8
 8004b64:	6939      	ldr	r1, [r7, #16]
 8004b66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	005b      	lsls	r3, r3, #1
 8004b74:	2203      	movs	r2, #3
 8004b76:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7a:	43db      	mvns	r3, r3
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	4013      	ands	r3, r2
 8004b80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f003 0203 	and.w	r2, r3, #3
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	005b      	lsls	r3, r3, #1
 8004b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f000 8092 	beq.w	8004cd0 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004bac:	4a51      	ldr	r2, [pc, #324]	; (8004cf4 <HAL_GPIO_Init+0x2bc>)
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	089b      	lsrs	r3, r3, #2
 8004bb2:	3302      	adds	r3, #2
 8004bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	f003 0303 	and.w	r3, r3, #3
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	220f      	movs	r2, #15
 8004bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc8:	43db      	mvns	r3, r3
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	4013      	ands	r3, r2
 8004bce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004bd6:	d013      	beq.n	8004c00 <HAL_GPIO_Init+0x1c8>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a47      	ldr	r2, [pc, #284]	; (8004cf8 <HAL_GPIO_Init+0x2c0>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d00d      	beq.n	8004bfc <HAL_GPIO_Init+0x1c4>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a46      	ldr	r2, [pc, #280]	; (8004cfc <HAL_GPIO_Init+0x2c4>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d007      	beq.n	8004bf8 <HAL_GPIO_Init+0x1c0>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a45      	ldr	r2, [pc, #276]	; (8004d00 <HAL_GPIO_Init+0x2c8>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d101      	bne.n	8004bf4 <HAL_GPIO_Init+0x1bc>
 8004bf0:	2304      	movs	r3, #4
 8004bf2:	e006      	b.n	8004c02 <HAL_GPIO_Init+0x1ca>
 8004bf4:	2307      	movs	r3, #7
 8004bf6:	e004      	b.n	8004c02 <HAL_GPIO_Init+0x1ca>
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	e002      	b.n	8004c02 <HAL_GPIO_Init+0x1ca>
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e000      	b.n	8004c02 <HAL_GPIO_Init+0x1ca>
 8004c00:	2300      	movs	r3, #0
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	f002 0203 	and.w	r2, r2, #3
 8004c08:	0092      	lsls	r2, r2, #2
 8004c0a:	4093      	lsls	r3, r2
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004c12:	4938      	ldr	r1, [pc, #224]	; (8004cf4 <HAL_GPIO_Init+0x2bc>)
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	089b      	lsrs	r3, r3, #2
 8004c18:	3302      	adds	r3, #2
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c20:	4b38      	ldr	r3, [pc, #224]	; (8004d04 <HAL_GPIO_Init+0x2cc>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	43db      	mvns	r3, r3
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d003      	beq.n	8004c44 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004c44:	4a2f      	ldr	r2, [pc, #188]	; (8004d04 <HAL_GPIO_Init+0x2cc>)
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004c4a:	4b2e      	ldr	r3, [pc, #184]	; (8004d04 <HAL_GPIO_Init+0x2cc>)
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	43db      	mvns	r3, r3
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	4013      	ands	r3, r2
 8004c58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004c6e:	4a25      	ldr	r2, [pc, #148]	; (8004d04 <HAL_GPIO_Init+0x2cc>)
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004c74:	4b23      	ldr	r3, [pc, #140]	; (8004d04 <HAL_GPIO_Init+0x2cc>)
 8004c76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	43db      	mvns	r3, r3
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	4013      	ands	r3, r2
 8004c84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d003      	beq.n	8004c9a <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004c9a:	4a1a      	ldr	r2, [pc, #104]	; (8004d04 <HAL_GPIO_Init+0x2cc>)
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004ca2:	4b18      	ldr	r3, [pc, #96]	; (8004d04 <HAL_GPIO_Init+0x2cc>)
 8004ca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	43db      	mvns	r3, r3
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d003      	beq.n	8004cc8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004cc8:	4a0e      	ldr	r2, [pc, #56]	; (8004d04 <HAL_GPIO_Init+0x2cc>)
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f47f aeb1 	bne.w	8004a48 <HAL_GPIO_Init+0x10>
  }
}
 8004ce6:	bf00      	nop
 8004ce8:	bf00      	nop
 8004cea:	371c      	adds	r7, #28
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr
 8004cf4:	40010000 	.word	0x40010000
 8004cf8:	48000400 	.word	0x48000400
 8004cfc:	48000800 	.word	0x48000800
 8004d00:	48001000 	.word	0x48001000
 8004d04:	58000800 	.word	0x58000800

08004d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	460b      	mov	r3, r1
 8004d12:	807b      	strh	r3, [r7, #2]
 8004d14:	4613      	mov	r3, r2
 8004d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d18:	787b      	ldrb	r3, [r7, #1]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d003      	beq.n	8004d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d1e:	887a      	ldrh	r2, [r7, #2]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d24:	e002      	b.n	8004d2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d26:	887a      	ldrh	r2, [r7, #2]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	4603      	mov	r3, r0
 8004d40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004d42:	4b08      	ldr	r3, [pc, #32]	; (8004d64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d44:	68da      	ldr	r2, [r3, #12]
 8004d46:	88fb      	ldrh	r3, [r7, #6]
 8004d48:	4013      	ands	r3, r2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d006      	beq.n	8004d5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d4e:	4a05      	ldr	r2, [pc, #20]	; (8004d64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d50:	88fb      	ldrh	r3, [r7, #6]
 8004d52:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d54:	88fb      	ldrh	r3, [r7, #6]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7fc fc67 	bl	800162a <HAL_GPIO_EXTI_Callback>
  }
}
 8004d5c:	bf00      	nop
 8004d5e:	3708      	adds	r7, #8
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	58000800 	.word	0x58000800

08004d68 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004d6e:	4b0a      	ldr	r3, [pc, #40]	; (8004d98 <HAL_HSEM_IRQHandler+0x30>)
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004d74:	4b08      	ldr	r3, [pc, #32]	; (8004d98 <HAL_HSEM_IRQHandler+0x30>)
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	43db      	mvns	r3, r3
 8004d7c:	4906      	ldr	r1, [pc, #24]	; (8004d98 <HAL_HSEM_IRQHandler+0x30>)
 8004d7e:	4013      	ands	r3, r2
 8004d80:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004d82:	4a05      	ldr	r2, [pc, #20]	; (8004d98 <HAL_HSEM_IRQHandler+0x30>)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 f807 	bl	8004d9c <HAL_HSEM_FreeCallback>
}
 8004d8e:	bf00      	nop
 8004d90:	3708      	adds	r7, #8
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	58001500 	.word	0x58001500

08004d9c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004db8:	2300      	movs	r3, #0
 8004dba:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d01e      	beq.n	8004e00 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8004dc2:	4b13      	ldr	r3, [pc, #76]	; (8004e10 <HAL_IPCC_Init+0x60>)
 8004dc4:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d102      	bne.n	8004dd8 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f7fd fe22 	bl	8002a1c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8004dd8:	68b8      	ldr	r0, [r7, #8]
 8004dda:	f000 f85b 	bl	8004e94 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 f82c 	bl	8004e48 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004dfe:	e001      	b.n	8004e04 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3710      	adds	r7, #16
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	58000c00 	.word	0x58000c00

08004e14 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8004e22:	bf00      	nop
 8004e24:	3714      	adds	r7, #20
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b085      	sub	sp, #20
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	60f8      	str	r0, [r7, #12]
 8004e36:	60b9      	str	r1, [r7, #8]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8004e3c:	bf00      	nop
 8004e3e:	3714      	adds	r7, #20
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004e50:	2300      	movs	r3, #0
 8004e52:	60fb      	str	r3, [r7, #12]
 8004e54:	e00f      	b.n	8004e76 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4413      	add	r3, r2
 8004e5e:	4a0b      	ldr	r2, [pc, #44]	; (8004e8c <IPCC_SetDefaultCallbacks+0x44>)
 8004e60:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	3306      	adds	r3, #6
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	4413      	add	r3, r2
 8004e6c:	4a08      	ldr	r2, [pc, #32]	; (8004e90 <IPCC_SetDefaultCallbacks+0x48>)
 8004e6e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	3301      	adds	r3, #1
 8004e74:	60fb      	str	r3, [r7, #12]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2b05      	cmp	r3, #5
 8004e7a:	d9ec      	bls.n	8004e56 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8004e7c:	bf00      	nop
 8004e7e:	bf00      	nop
 8004e80:	3714      	adds	r7, #20
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	08004e15 	.word	0x08004e15
 8004e90:	08004e2f 	.word	0x08004e2f

08004e94 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8004ea8:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	223f      	movs	r2, #63	; 0x3f
 8004eae:	609a      	str	r2, [r3, #8]
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ec0:	4b05      	ldr	r3, [pc, #20]	; (8004ed8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a04      	ldr	r2, [pc, #16]	; (8004ed8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eca:	6013      	str	r3, [r2, #0]
}
 8004ecc:	bf00      	nop
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	58000400 	.word	0x58000400

08004edc <LL_PWR_EnableSRAM2Retention>:
{
 8004edc:	b480      	push	{r7}
 8004ede:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 8004ee0:	4b05      	ldr	r3, [pc, #20]	; (8004ef8 <LL_PWR_EnableSRAM2Retention+0x1c>)
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	4a04      	ldr	r2, [pc, #16]	; (8004ef8 <LL_PWR_EnableSRAM2Retention+0x1c>)
 8004ee6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004eea:	6093      	str	r3, [r2, #8]
}
 8004eec:	bf00      	nop
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	58000400 	.word	0x58000400

08004efc <HAL_PWREx_EnableSRAMRetention>:
  * @note   On devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx retention is extended
  *         to SRAM1, SRAM2a and SRAM2b.
  * @retval None
  */
void HAL_PWREx_EnableSRAMRetention(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	af00      	add	r7, sp, #0
  LL_PWR_EnableSRAM2Retention();
 8004f00:	f7ff ffec 	bl	8004edc <LL_PWR_EnableSRAM2Retention>
}
 8004f04:	bf00      	nop
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004f08:	b480      	push	{r7}
 8004f0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f1a:	d101      	bne.n	8004f20 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e000      	b.n	8004f22 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <LL_RCC_HSE_Enable>:
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f3e:	6013      	str	r3, [r2, #0]
}
 8004f40:	bf00      	nop
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <LL_RCC_HSE_Disable>:
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004f4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f5c:	6013      	str	r3, [r2, #0]
}
 8004f5e:	bf00      	nop
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <LL_RCC_HSE_IsReady>:
{
 8004f68:	b480      	push	{r7}
 8004f6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f7a:	d101      	bne.n	8004f80 <LL_RCC_HSE_IsReady+0x18>
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e000      	b.n	8004f82 <LL_RCC_HSE_IsReady+0x1a>
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <LL_RCC_HSI_Enable>:
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f9e:	6013      	str	r3, [r2, #0]
}
 8004fa0:	bf00      	nop
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <LL_RCC_HSI_Disable>:
{
 8004faa:	b480      	push	{r7}
 8004fac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fbc:	6013      	str	r3, [r2, #0]
}
 8004fbe:	bf00      	nop
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <LL_RCC_HSI_IsReady>:
{
 8004fc8:	b480      	push	{r7}
 8004fca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fda:	d101      	bne.n	8004fe0 <LL_RCC_HSI_IsReady+0x18>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e000      	b.n	8004fe2 <LL_RCC_HSI_IsReady+0x1a>
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <LL_RCC_HSI_SetCalibTrimming>:
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	061b      	lsls	r3, r3, #24
 8005002:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005006:	4313      	orrs	r3, r2
 8005008:	604b      	str	r3, [r1, #4]
}
 800500a:	bf00      	nop
 800500c:	370c      	adds	r7, #12
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <LL_RCC_LSE_Enable>:
{
 8005016:	b480      	push	{r7}
 8005018:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800501a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800501e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005022:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005026:	f043 0301 	orr.w	r3, r3, #1
 800502a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800502e:	bf00      	nop
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <LL_RCC_LSE_Disable>:
{
 8005038:	b480      	push	{r7}
 800503a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800503c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005044:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005048:	f023 0301 	bic.w	r3, r3, #1
 800504c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005050:	bf00      	nop
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <LL_RCC_LSE_EnableBypass>:
{
 800505a:	b480      	push	{r7}
 800505c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800505e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005066:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800506a:	f043 0304 	orr.w	r3, r3, #4
 800506e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005072:	bf00      	nop
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <LL_RCC_LSE_DisableBypass>:
{
 800507c:	b480      	push	{r7}
 800507e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005088:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800508c:	f023 0304 	bic.w	r3, r3, #4
 8005090:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005094:	bf00      	nop
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr

0800509e <LL_RCC_LSE_IsReady>:
{
 800509e:	b480      	push	{r7}
 80050a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80050a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050aa:	f003 0302 	and.w	r3, r3, #2
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d101      	bne.n	80050b6 <LL_RCC_LSE_IsReady+0x18>
 80050b2:	2301      	movs	r3, #1
 80050b4:	e000      	b.n	80050b8 <LL_RCC_LSE_IsReady+0x1a>
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <LL_RCC_LSI1_Enable>:
{
 80050c2:	b480      	push	{r7}
 80050c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80050c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050d2:	f043 0301 	orr.w	r3, r3, #1
 80050d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80050da:	bf00      	nop
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <LL_RCC_LSI1_Disable>:
{
 80050e4:	b480      	push	{r7}
 80050e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80050e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050f4:	f023 0301 	bic.w	r3, r3, #1
 80050f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80050fc:	bf00      	nop
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr

08005106 <LL_RCC_LSI1_IsReady>:
{
 8005106:	b480      	push	{r7}
 8005108:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800510a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800510e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b02      	cmp	r3, #2
 8005118:	d101      	bne.n	800511e <LL_RCC_LSI1_IsReady+0x18>
 800511a:	2301      	movs	r3, #1
 800511c:	e000      	b.n	8005120 <LL_RCC_LSI1_IsReady+0x1a>
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr

0800512a <LL_RCC_LSI2_Enable>:
{
 800512a:	b480      	push	{r7}
 800512c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800512e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005132:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005136:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800513a:	f043 0304 	orr.w	r3, r3, #4
 800513e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005142:	bf00      	nop
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <LL_RCC_LSI2_Disable>:
{
 800514c:	b480      	push	{r7}
 800514e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005154:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005158:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800515c:	f023 0304 	bic.w	r3, r3, #4
 8005160:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005164:	bf00      	nop
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr

0800516e <LL_RCC_LSI2_IsReady>:
{
 800516e:	b480      	push	{r7}
 8005170:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8005172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005176:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800517a:	f003 0308 	and.w	r3, r3, #8
 800517e:	2b08      	cmp	r3, #8
 8005180:	d101      	bne.n	8005186 <LL_RCC_LSI2_IsReady+0x18>
 8005182:	2301      	movs	r3, #1
 8005184:	e000      	b.n	8005188 <LL_RCC_LSI2_IsReady+0x1a>
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <LL_RCC_LSI2_SetTrimming>:
{
 8005192:	b480      	push	{r7}
 8005194:	b083      	sub	sp, #12
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800519a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800519e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051a2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	021b      	lsls	r3, r3, #8
 80051aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051ae:	4313      	orrs	r3, r2
 80051b0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <LL_RCC_MSI_Enable>:
{
 80051c0:	b480      	push	{r7}
 80051c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80051c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051ce:	f043 0301 	orr.w	r3, r3, #1
 80051d2:	6013      	str	r3, [r2, #0]
}
 80051d4:	bf00      	nop
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <LL_RCC_MSI_Disable>:
{
 80051de:	b480      	push	{r7}
 80051e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80051e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051ec:	f023 0301 	bic.w	r3, r3, #1
 80051f0:	6013      	str	r3, [r2, #0]
}
 80051f2:	bf00      	nop
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <LL_RCC_MSI_IsReady>:
{
 80051fc:	b480      	push	{r7}
 80051fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b02      	cmp	r3, #2
 800520c:	d101      	bne.n	8005212 <LL_RCC_MSI_IsReady+0x16>
 800520e:	2301      	movs	r3, #1
 8005210:	e000      	b.n	8005214 <LL_RCC_MSI_IsReady+0x18>
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <LL_RCC_MSI_SetRange>:
{
 800521e:	b480      	push	{r7}
 8005220:	b083      	sub	sp, #12
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005230:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4313      	orrs	r3, r2
 8005238:	600b      	str	r3, [r1, #0]
}
 800523a:	bf00      	nop
 800523c:	370c      	adds	r7, #12
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr

08005246 <LL_RCC_MSI_GetRange>:
{
 8005246:	b480      	push	{r7}
 8005248:	b083      	sub	sp, #12
 800524a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800524c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005256:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2bb0      	cmp	r3, #176	; 0xb0
 800525c:	d901      	bls.n	8005262 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800525e:	23b0      	movs	r3, #176	; 0xb0
 8005260:	607b      	str	r3, [r7, #4]
  return msiRange;
 8005262:	687b      	ldr	r3, [r7, #4]
}
 8005264:	4618      	mov	r0, r3
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	021b      	lsls	r3, r3, #8
 8005286:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800528a:	4313      	orrs	r3, r2
 800528c:	604b      	str	r3, [r1, #4]
}
 800528e:	bf00      	nop
 8005290:	370c      	adds	r7, #12
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <LL_RCC_SetSysClkSource>:
{
 800529a:	b480      	push	{r7}
 800529c:	b083      	sub	sp, #12
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80052a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f023 0203 	bic.w	r2, r3, #3
 80052ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	608b      	str	r3, [r1, #8]
}
 80052b6:	bf00      	nop
 80052b8:	370c      	adds	r7, #12
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <LL_RCC_GetSysClkSource>:
{
 80052c2:	b480      	push	{r7}
 80052c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80052c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f003 030c 	and.w	r3, r3, #12
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <LL_RCC_SetAHBPrescaler>:
{
 80052da:	b480      	push	{r7}
 80052dc:	b083      	sub	sp, #12
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80052e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	608b      	str	r3, [r1, #8]
}
 80052f6:	bf00      	nop
 80052f8:	370c      	adds	r7, #12
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <LL_C2_RCC_SetAHBPrescaler>:
{
 8005302:	b480      	push	{r7}
 8005304:	b083      	sub	sp, #12
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800530a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800530e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005312:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005316:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4313      	orrs	r3, r2
 800531e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005322:	bf00      	nop
 8005324:	370c      	adds	r7, #12
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <LL_RCC_SetAHB4Prescaler>:
{
 800532e:	b480      	push	{r7}
 8005330:	b083      	sub	sp, #12
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800533a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800533e:	f023 020f 	bic.w	r2, r3, #15
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	091b      	lsrs	r3, r3, #4
 8005346:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800534a:	4313      	orrs	r3, r2
 800534c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <LL_RCC_SetAPB1Prescaler>:
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005364:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800536e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4313      	orrs	r3, r2
 8005376:	608b      	str	r3, [r1, #8]
}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <LL_RCC_SetAPB2Prescaler>:
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800538c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005396:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4313      	orrs	r3, r2
 800539e:	608b      	str	r3, [r1, #8]
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <LL_RCC_GetAHBPrescaler>:
{
 80053ac:	b480      	push	{r7}
 80053ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80053b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <LL_RCC_GetAHB4Prescaler>:
{
 80053c4:	b480      	push	{r7}
 80053c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80053c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053cc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80053d0:	011b      	lsls	r3, r3, #4
 80053d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <LL_RCC_GetAPB1Prescaler>:
{
 80053e0:	b480      	push	{r7}
 80053e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80053e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <LL_RCC_GetAPB2Prescaler>:
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80053fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005406:	4618      	mov	r0, r3
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005410:	b480      	push	{r7}
 8005412:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800541e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005422:	6013      	str	r3, [r2, #0]
}
 8005424:	bf00      	nop
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800542e:	b480      	push	{r7}
 8005430:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005432:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800543c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005440:	6013      	str	r3, [r2, #0]
}
 8005442:	bf00      	nop
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800544c:	b480      	push	{r7}
 800544e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800545a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800545e:	d101      	bne.n	8005464 <LL_RCC_PLL_IsReady+0x18>
 8005460:	2301      	movs	r3, #1
 8005462:	e000      	b.n	8005466 <LL_RCC_PLL_IsReady+0x1a>
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005470:	b480      	push	{r7}
 8005472:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	0a1b      	lsrs	r3, r3, #8
 800547c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005480:	4618      	mov	r0, r3
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr

0800548a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800548a:	b480      	push	{r7}
 800548c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800548e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005498:	4618      	mov	r0, r3
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80054a2:	b480      	push	{r7}
 80054a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80054a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80054ba:	b480      	push	{r7}
 80054bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80054be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	f003 0303 	and.w	r3, r3, #3
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80054d2:	b480      	push	{r7}
 80054d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80054d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054e4:	d101      	bne.n	80054ea <LL_RCC_IsActiveFlag_HPRE+0x18>
 80054e6:	2301      	movs	r3, #1
 80054e8:	e000      	b.n	80054ec <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr

080054f6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80054f6:	b480      	push	{r7}
 80054f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80054fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005506:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800550a:	d101      	bne.n	8005510 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800550c:	2301      	movs	r3, #1
 800550e:	e000      	b.n	8005512 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800551c:	b480      	push	{r7}
 800551e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005520:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005524:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800552c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005530:	d101      	bne.n	8005536 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005532:	2301      	movs	r3, #1
 8005534:	e000      	b.n	8005538 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr

08005542 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005542:	b480      	push	{r7}
 8005544:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005550:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005554:	d101      	bne.n	800555a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005556:	2301      	movs	r3, #1
 8005558:	e000      	b.n	800555c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr

08005566 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005566:	b480      	push	{r7}
 8005568:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800556a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005574:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005578:	d101      	bne.n	800557e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800557a:	2301      	movs	r3, #1
 800557c:	e000      	b.n	8005580 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
	...

0800558c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800558c:	b590      	push	{r4, r7, lr}
 800558e:	b08d      	sub	sp, #52	; 0x34
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d101      	bne.n	800559e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e324      	b.n	8005be8 <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0320 	and.w	r3, r3, #32
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	f000 808d 	beq.w	80056c6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055ac:	f7ff fe89 	bl	80052c2 <LL_RCC_GetSysClkSource>
 80055b0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055b2:	f7ff ff82 	bl	80054ba <LL_RCC_PLL_GetMainSource>
 80055b6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80055b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d005      	beq.n	80055ca <HAL_RCC_OscConfig+0x3e>
 80055be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c0:	2b0c      	cmp	r3, #12
 80055c2:	d147      	bne.n	8005654 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80055c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d144      	bne.n	8005654 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d101      	bne.n	80055d6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e308      	b.n	8005be8 <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80055da:	f7ff fe34 	bl	8005246 <LL_RCC_MSI_GetRange>
 80055de:	4603      	mov	r3, r0
 80055e0:	429c      	cmp	r4, r3
 80055e2:	d914      	bls.n	800560e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	4618      	mov	r0, r3
 80055ea:	f000 fcf1 	bl	8005fd0 <RCC_SetFlashLatencyFromMSIRange>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d001      	beq.n	80055f8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e2f7      	b.n	8005be8 <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7ff fe0e 	bl	800521e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	4618      	mov	r0, r3
 8005608:	f7ff fe32 	bl	8005270 <LL_RCC_MSI_SetCalibTrimming>
 800560c:	e013      	b.n	8005636 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005612:	4618      	mov	r0, r3
 8005614:	f7ff fe03 	bl	800521e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	4618      	mov	r0, r3
 800561e:	f7ff fe27 	bl	8005270 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005626:	4618      	mov	r0, r3
 8005628:	f000 fcd2 	bl	8005fd0 <RCC_SetFlashLatencyFromMSIRange>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d001      	beq.n	8005636 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e2d8      	b.n	8005be8 <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005636:	f000 fc8b 	bl	8005f50 <HAL_RCC_GetHCLKFreq>
 800563a:	4603      	mov	r3, r0
 800563c:	4aa4      	ldr	r2, [pc, #656]	; (80058d0 <HAL_RCC_OscConfig+0x344>)
 800563e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005640:	4ba4      	ldr	r3, [pc, #656]	; (80058d4 <HAL_RCC_OscConfig+0x348>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4618      	mov	r0, r3
 8005646:	f7fe fc97 	bl	8003f78 <HAL_InitTick>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d039      	beq.n	80056c4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e2c9      	b.n	8005be8 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	69db      	ldr	r3, [r3, #28]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d01e      	beq.n	800569a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800565c:	f7ff fdb0 	bl	80051c0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005660:	f7fe fcd8 	bl	8004014 <HAL_GetTick>
 8005664:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005666:	e008      	b.n	800567a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005668:	f7fe fcd4 	bl	8004014 <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	2b02      	cmp	r3, #2
 8005674:	d901      	bls.n	800567a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e2b6      	b.n	8005be8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 800567a:	f7ff fdbf 	bl	80051fc <LL_RCC_MSI_IsReady>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d0f1      	beq.n	8005668 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005688:	4618      	mov	r0, r3
 800568a:	f7ff fdc8 	bl	800521e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	4618      	mov	r0, r3
 8005694:	f7ff fdec 	bl	8005270 <LL_RCC_MSI_SetCalibTrimming>
 8005698:	e015      	b.n	80056c6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800569a:	f7ff fda0 	bl	80051de <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800569e:	f7fe fcb9 	bl	8004014 <HAL_GetTick>
 80056a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80056a4:	e008      	b.n	80056b8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80056a6:	f7fe fcb5 	bl	8004014 <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d901      	bls.n	80056b8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e297      	b.n	8005be8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 80056b8:	f7ff fda0 	bl	80051fc <LL_RCC_MSI_IsReady>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1f1      	bne.n	80056a6 <HAL_RCC_OscConfig+0x11a>
 80056c2:	e000      	b.n	80056c6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80056c4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d047      	beq.n	8005762 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056d2:	f7ff fdf6 	bl	80052c2 <LL_RCC_GetSysClkSource>
 80056d6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056d8:	f7ff feef 	bl	80054ba <LL_RCC_PLL_GetMainSource>
 80056dc:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	2b08      	cmp	r3, #8
 80056e2:	d005      	beq.n	80056f0 <HAL_RCC_OscConfig+0x164>
 80056e4:	6a3b      	ldr	r3, [r7, #32]
 80056e6:	2b0c      	cmp	r3, #12
 80056e8:	d108      	bne.n	80056fc <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	2b03      	cmp	r3, #3
 80056ee:	d105      	bne.n	80056fc <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d134      	bne.n	8005762 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e275      	b.n	8005be8 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005704:	d102      	bne.n	800570c <HAL_RCC_OscConfig+0x180>
 8005706:	f7ff fc11 	bl	8004f2c <LL_RCC_HSE_Enable>
 800570a:	e001      	b.n	8005710 <HAL_RCC_OscConfig+0x184>
 800570c:	f7ff fc1d 	bl	8004f4a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d012      	beq.n	800573e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005718:	f7fe fc7c 	bl	8004014 <HAL_GetTick>
 800571c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800571e:	e008      	b.n	8005732 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005720:	f7fe fc78 	bl	8004014 <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	2b64      	cmp	r3, #100	; 0x64
 800572c:	d901      	bls.n	8005732 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e25a      	b.n	8005be8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005732:	f7ff fc19 	bl	8004f68 <LL_RCC_HSE_IsReady>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d0f1      	beq.n	8005720 <HAL_RCC_OscConfig+0x194>
 800573c:	e011      	b.n	8005762 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800573e:	f7fe fc69 	bl	8004014 <HAL_GetTick>
 8005742:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005744:	e008      	b.n	8005758 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005746:	f7fe fc65 	bl	8004014 <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	2b64      	cmp	r3, #100	; 0x64
 8005752:	d901      	bls.n	8005758 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e247      	b.n	8005be8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005758:	f7ff fc06 	bl	8004f68 <LL_RCC_HSE_IsReady>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1f1      	bne.n	8005746 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0302 	and.w	r3, r3, #2
 800576a:	2b00      	cmp	r3, #0
 800576c:	d04c      	beq.n	8005808 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800576e:	f7ff fda8 	bl	80052c2 <LL_RCC_GetSysClkSource>
 8005772:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005774:	f7ff fea1 	bl	80054ba <LL_RCC_PLL_GetMainSource>
 8005778:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	2b04      	cmp	r3, #4
 800577e:	d005      	beq.n	800578c <HAL_RCC_OscConfig+0x200>
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	2b0c      	cmp	r3, #12
 8005784:	d10e      	bne.n	80057a4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	2b02      	cmp	r3, #2
 800578a:	d10b      	bne.n	80057a4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d101      	bne.n	8005798 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e227      	b.n	8005be8 <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	4618      	mov	r0, r3
 800579e:	f7ff fc25 	bl	8004fec <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80057a2:	e031      	b.n	8005808 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d019      	beq.n	80057e0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057ac:	f7ff fbee 	bl	8004f8c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b0:	f7fe fc30 	bl	8004014 <HAL_GetTick>
 80057b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80057b6:	e008      	b.n	80057ca <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057b8:	f7fe fc2c 	bl	8004014 <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e20e      	b.n	8005be8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 80057ca:	f7ff fbfd 	bl	8004fc8 <LL_RCC_HSI_IsReady>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d0f1      	beq.n	80057b8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	4618      	mov	r0, r3
 80057da:	f7ff fc07 	bl	8004fec <LL_RCC_HSI_SetCalibTrimming>
 80057de:	e013      	b.n	8005808 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057e0:	f7ff fbe3 	bl	8004faa <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e4:	f7fe fc16 	bl	8004014 <HAL_GetTick>
 80057e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80057ea:	e008      	b.n	80057fe <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057ec:	f7fe fc12 	bl	8004014 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d901      	bls.n	80057fe <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e1f4      	b.n	8005be8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 80057fe:	f7ff fbe3 	bl	8004fc8 <LL_RCC_HSI_IsReady>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1f1      	bne.n	80057ec <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0308 	and.w	r3, r3, #8
 8005810:	2b00      	cmp	r3, #0
 8005812:	d106      	bne.n	8005822 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800581c:	2b00      	cmp	r3, #0
 800581e:	f000 80a3 	beq.w	8005968 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d076      	beq.n	8005918 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0310 	and.w	r3, r3, #16
 8005832:	2b00      	cmp	r3, #0
 8005834:	d046      	beq.n	80058c4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005836:	f7ff fc66 	bl	8005106 <LL_RCC_LSI1_IsReady>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d113      	bne.n	8005868 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005840:	f7ff fc3f 	bl	80050c2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005844:	f7fe fbe6 	bl	8004014 <HAL_GetTick>
 8005848:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800584a:	e008      	b.n	800585e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800584c:	f7fe fbe2 	bl	8004014 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b02      	cmp	r3, #2
 8005858:	d901      	bls.n	800585e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e1c4      	b.n	8005be8 <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800585e:	f7ff fc52 	bl	8005106 <LL_RCC_LSI1_IsReady>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d0f1      	beq.n	800584c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005868:	f7ff fc5f 	bl	800512a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800586c:	f7fe fbd2 	bl	8004014 <HAL_GetTick>
 8005870:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005872:	e008      	b.n	8005886 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005874:	f7fe fbce 	bl	8004014 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	2b03      	cmp	r3, #3
 8005880:	d901      	bls.n	8005886 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e1b0      	b.n	8005be8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005886:	f7ff fc72 	bl	800516e <LL_RCC_LSI2_IsReady>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d0f1      	beq.n	8005874 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	4618      	mov	r0, r3
 8005896:	f7ff fc7c 	bl	8005192 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800589a:	f7ff fc23 	bl	80050e4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800589e:	f7fe fbb9 	bl	8004014 <HAL_GetTick>
 80058a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80058a4:	e008      	b.n	80058b8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80058a6:	f7fe fbb5 	bl	8004014 <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d901      	bls.n	80058b8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e197      	b.n	8005be8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80058b8:	f7ff fc25 	bl	8005106 <LL_RCC_LSI1_IsReady>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1f1      	bne.n	80058a6 <HAL_RCC_OscConfig+0x31a>
 80058c2:	e051      	b.n	8005968 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80058c4:	f7ff fbfd 	bl	80050c2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c8:	f7fe fba4 	bl	8004014 <HAL_GetTick>
 80058cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80058ce:	e00c      	b.n	80058ea <HAL_RCC_OscConfig+0x35e>
 80058d0:	20000044 	.word	0x20000044
 80058d4:	20000048 	.word	0x20000048
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80058d8:	f7fe fb9c 	bl	8004014 <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d901      	bls.n	80058ea <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e17e      	b.n	8005be8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80058ea:	f7ff fc0c 	bl	8005106 <LL_RCC_LSI1_IsReady>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d0f1      	beq.n	80058d8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80058f4:	f7ff fc2a 	bl	800514c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80058f8:	e008      	b.n	800590c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80058fa:	f7fe fb8b 	bl	8004014 <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	2b03      	cmp	r3, #3
 8005906:	d901      	bls.n	800590c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e16d      	b.n	8005be8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800590c:	f7ff fc2f 	bl	800516e <LL_RCC_LSI2_IsReady>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1f1      	bne.n	80058fa <HAL_RCC_OscConfig+0x36e>
 8005916:	e027      	b.n	8005968 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005918:	f7ff fc18 	bl	800514c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800591c:	f7fe fb7a 	bl	8004014 <HAL_GetTick>
 8005920:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005922:	e008      	b.n	8005936 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005924:	f7fe fb76 	bl	8004014 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	2b03      	cmp	r3, #3
 8005930:	d901      	bls.n	8005936 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e158      	b.n	8005be8 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005936:	f7ff fc1a 	bl	800516e <LL_RCC_LSI2_IsReady>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1f1      	bne.n	8005924 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005940:	f7ff fbd0 	bl	80050e4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005944:	f7fe fb66 	bl	8004014 <HAL_GetTick>
 8005948:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800594a:	e008      	b.n	800595e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800594c:	f7fe fb62 	bl	8004014 <HAL_GetTick>
 8005950:	4602      	mov	r2, r0
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	2b02      	cmp	r3, #2
 8005958:	d901      	bls.n	800595e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e144      	b.n	8005be8 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800595e:	f7ff fbd2 	bl	8005106 <LL_RCC_LSI1_IsReady>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d1f1      	bne.n	800594c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0304 	and.w	r3, r3, #4
 8005970:	2b00      	cmp	r3, #0
 8005972:	d05b      	beq.n	8005a2c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005974:	4b9e      	ldr	r3, [pc, #632]	; (8005bf0 <HAL_RCC_OscConfig+0x664>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800597c:	2b00      	cmp	r3, #0
 800597e:	d114      	bne.n	80059aa <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005980:	f7ff fa9c 	bl	8004ebc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005984:	f7fe fb46 	bl	8004014 <HAL_GetTick>
 8005988:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800598a:	e008      	b.n	800599e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800598c:	f7fe fb42 	bl	8004014 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	2b02      	cmp	r3, #2
 8005998:	d901      	bls.n	800599e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e124      	b.n	8005be8 <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800599e:	4b94      	ldr	r3, [pc, #592]	; (8005bf0 <HAL_RCC_OscConfig+0x664>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d0f0      	beq.n	800598c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d102      	bne.n	80059b8 <HAL_RCC_OscConfig+0x42c>
 80059b2:	f7ff fb30 	bl	8005016 <LL_RCC_LSE_Enable>
 80059b6:	e00c      	b.n	80059d2 <HAL_RCC_OscConfig+0x446>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	2b05      	cmp	r3, #5
 80059be:	d104      	bne.n	80059ca <HAL_RCC_OscConfig+0x43e>
 80059c0:	f7ff fb4b 	bl	800505a <LL_RCC_LSE_EnableBypass>
 80059c4:	f7ff fb27 	bl	8005016 <LL_RCC_LSE_Enable>
 80059c8:	e003      	b.n	80059d2 <HAL_RCC_OscConfig+0x446>
 80059ca:	f7ff fb35 	bl	8005038 <LL_RCC_LSE_Disable>
 80059ce:	f7ff fb55 	bl	800507c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d014      	beq.n	8005a04 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059da:	f7fe fb1b 	bl	8004014 <HAL_GetTick>
 80059de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80059e0:	e00a      	b.n	80059f8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059e2:	f7fe fb17 	bl	8004014 <HAL_GetTick>
 80059e6:	4602      	mov	r2, r0
 80059e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d901      	bls.n	80059f8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e0f7      	b.n	8005be8 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 80059f8:	f7ff fb51 	bl	800509e <LL_RCC_LSE_IsReady>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d0ef      	beq.n	80059e2 <HAL_RCC_OscConfig+0x456>
 8005a02:	e013      	b.n	8005a2c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a04:	f7fe fb06 	bl	8004014 <HAL_GetTick>
 8005a08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005a0a:	e00a      	b.n	8005a22 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a0c:	f7fe fb02 	bl	8004014 <HAL_GetTick>
 8005a10:	4602      	mov	r2, r0
 8005a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d901      	bls.n	8005a22 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e0e2      	b.n	8005be8 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005a22:	f7ff fb3c 	bl	800509e <LL_RCC_LSE_IsReady>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1ef      	bne.n	8005a0c <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f000 80d8 	beq.w	8005be6 <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a36:	f7ff fc44 	bl	80052c2 <LL_RCC_GetSysClkSource>
 8005a3a:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	f040 80a6 	bne.w	8005b9a <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f003 0203 	and.w	r2, r3, #3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d123      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d11c      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	0a1b      	lsrs	r3, r3, #8
 8005a6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d114      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d10d      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d106      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d054      	beq.n	8005b4e <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	2b0c      	cmp	r3, #12
 8005aa8:	d04f      	beq.n	8005b4a <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005aaa:	f7ff fcc0 	bl	800542e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005aae:	f7fe fab1 	bl	8004014 <HAL_GetTick>
 8005ab2:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ab4:	e008      	b.n	8005ac8 <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ab6:	f7fe faad 	bl	8004014 <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d901      	bls.n	8005ac8 <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e08f      	b.n	8005be8 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1ef      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ada:	68da      	ldr	r2, [r3, #12]
 8005adc:	4b45      	ldr	r3, [pc, #276]	; (8005bf4 <HAL_RCC_OscConfig+0x668>)
 8005ade:	4013      	ands	r3, r2
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005ae8:	4311      	orrs	r1, r2
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005aee:	0212      	lsls	r2, r2, #8
 8005af0:	4311      	orrs	r1, r2
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005af6:	4311      	orrs	r1, r2
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005afc:	4311      	orrs	r1, r2
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005b02:	430a      	orrs	r2, r1
 8005b04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005b0c:	f7ff fc80 	bl	8005410 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b1e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005b20:	f7fe fa78 	bl	8004014 <HAL_GetTick>
 8005b24:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b26:	e008      	b.n	8005b3a <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b28:	f7fe fa74 	bl	8004014 <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d901      	bls.n	8005b3a <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e056      	b.n	8005be8 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d0ef      	beq.n	8005b28 <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b48:	e04d      	b.n	8005be6 <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e04c      	b.n	8005be8 <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d144      	bne.n	8005be6 <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005b5c:	f7ff fc58 	bl	8005410 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b6e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b70:	f7fe fa50 	bl	8004014 <HAL_GetTick>
 8005b74:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b76:	e008      	b.n	8005b8a <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b78:	f7fe fa4c 	bl	8004014 <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d901      	bls.n	8005b8a <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e02e      	b.n	8005be8 <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d0ef      	beq.n	8005b78 <HAL_RCC_OscConfig+0x5ec>
 8005b98:	e025      	b.n	8005be6 <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	2b0c      	cmp	r3, #12
 8005b9e:	d020      	beq.n	8005be2 <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ba0:	f7ff fc45 	bl	800542e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ba4:	f7fe fa36 	bl	8004014 <HAL_GetTick>
 8005ba8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005baa:	e008      	b.n	8005bbe <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bac:	f7fe fa32 	bl	8004014 <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d901      	bls.n	8005bbe <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e014      	b.n	8005be8 <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1ef      	bne.n	8005bac <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 8005bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bda:	f023 0303 	bic.w	r3, r3, #3
 8005bde:	60d3      	str	r3, [r2, #12]
 8005be0:	e001      	b.n	8005be6 <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e000      	b.n	8005be8 <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3734      	adds	r7, #52	; 0x34
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd90      	pop	{r4, r7, pc}
 8005bf0:	58000400 	.word	0x58000400
 8005bf4:	11c1808c 	.word	0x11c1808c

08005bf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d101      	bne.n	8005c0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e12d      	b.n	8005e68 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c0c:	4b98      	ldr	r3, [pc, #608]	; (8005e70 <HAL_RCC_ClockConfig+0x278>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0307 	and.w	r3, r3, #7
 8005c14:	683a      	ldr	r2, [r7, #0]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d91b      	bls.n	8005c52 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c1a:	4b95      	ldr	r3, [pc, #596]	; (8005e70 <HAL_RCC_ClockConfig+0x278>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f023 0207 	bic.w	r2, r3, #7
 8005c22:	4993      	ldr	r1, [pc, #588]	; (8005e70 <HAL_RCC_ClockConfig+0x278>)
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c2a:	f7fe f9f3 	bl	8004014 <HAL_GetTick>
 8005c2e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c30:	e008      	b.n	8005c44 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005c32:	f7fe f9ef 	bl	8004014 <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d901      	bls.n	8005c44 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e111      	b.n	8005e68 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c44:	4b8a      	ldr	r3, [pc, #552]	; (8005e70 <HAL_RCC_ClockConfig+0x278>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0307 	and.w	r3, r3, #7
 8005c4c:	683a      	ldr	r2, [r7, #0]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d1ef      	bne.n	8005c32 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0302 	and.w	r3, r3, #2
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d016      	beq.n	8005c8c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7ff fb39 	bl	80052da <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005c68:	f7fe f9d4 	bl	8004014 <HAL_GetTick>
 8005c6c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005c6e:	e008      	b.n	8005c82 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005c70:	f7fe f9d0 	bl	8004014 <HAL_GetTick>
 8005c74:	4602      	mov	r2, r0
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d901      	bls.n	8005c82 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e0f2      	b.n	8005e68 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005c82:	f7ff fc26 	bl	80054d2 <LL_RCC_IsActiveFlag_HPRE>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d0f1      	beq.n	8005c70 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0320 	and.w	r3, r3, #32
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d016      	beq.n	8005cc6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	695b      	ldr	r3, [r3, #20]
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f7ff fb30 	bl	8005302 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005ca2:	f7fe f9b7 	bl	8004014 <HAL_GetTick>
 8005ca6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005ca8:	e008      	b.n	8005cbc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005caa:	f7fe f9b3 	bl	8004014 <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d901      	bls.n	8005cbc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e0d5      	b.n	8005e68 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005cbc:	f7ff fc1b 	bl	80054f6 <LL_RCC_IsActiveFlag_C2HPRE>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d0f1      	beq.n	8005caa <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d016      	beq.n	8005d00 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7ff fb29 	bl	800532e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005cdc:	f7fe f99a 	bl	8004014 <HAL_GetTick>
 8005ce0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005ce2:	e008      	b.n	8005cf6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005ce4:	f7fe f996 	bl	8004014 <HAL_GetTick>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d901      	bls.n	8005cf6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e0b8      	b.n	8005e68 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005cf6:	f7ff fc11 	bl	800551c <LL_RCC_IsActiveFlag_SHDHPRE>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d0f1      	beq.n	8005ce4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0304 	and.w	r3, r3, #4
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d016      	beq.n	8005d3a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7ff fb23 	bl	800535c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005d16:	f7fe f97d 	bl	8004014 <HAL_GetTick>
 8005d1a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005d1c:	e008      	b.n	8005d30 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005d1e:	f7fe f979 	bl	8004014 <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d901      	bls.n	8005d30 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e09b      	b.n	8005e68 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005d30:	f7ff fc07 	bl	8005542 <LL_RCC_IsActiveFlag_PPRE1>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d0f1      	beq.n	8005d1e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 0308 	and.w	r3, r3, #8
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d017      	beq.n	8005d76 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	00db      	lsls	r3, r3, #3
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f7ff fb19 	bl	8005384 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005d52:	f7fe f95f 	bl	8004014 <HAL_GetTick>
 8005d56:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005d58:	e008      	b.n	8005d6c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005d5a:	f7fe f95b 	bl	8004014 <HAL_GetTick>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d901      	bls.n	8005d6c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e07d      	b.n	8005e68 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005d6c:	f7ff fbfb 	bl	8005566 <LL_RCC_IsActiveFlag_PPRE2>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d0f1      	beq.n	8005d5a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 0301 	and.w	r3, r3, #1
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d043      	beq.n	8005e0a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d106      	bne.n	8005d98 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005d8a:	f7ff f8ed 	bl	8004f68 <LL_RCC_HSE_IsReady>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d11e      	bne.n	8005dd2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e067      	b.n	8005e68 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	2b03      	cmp	r3, #3
 8005d9e:	d106      	bne.n	8005dae <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005da0:	f7ff fb54 	bl	800544c <LL_RCC_PLL_IsReady>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d113      	bne.n	8005dd2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e05c      	b.n	8005e68 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d106      	bne.n	8005dc4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005db6:	f7ff fa21 	bl	80051fc <LL_RCC_MSI_IsReady>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d108      	bne.n	8005dd2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e051      	b.n	8005e68 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005dc4:	f7ff f900 	bl	8004fc8 <LL_RCC_HSI_IsReady>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d101      	bne.n	8005dd2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e04a      	b.n	8005e68 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7ff fa5f 	bl	800529a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ddc:	f7fe f91a 	bl	8004014 <HAL_GetTick>
 8005de0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005de2:	e00a      	b.n	8005dfa <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005de4:	f7fe f916 	bl	8004014 <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d901      	bls.n	8005dfa <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e036      	b.n	8005e68 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dfa:	f7ff fa62 	bl	80052c2 <LL_RCC_GetSysClkSource>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d1ec      	bne.n	8005de4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e0a:	4b19      	ldr	r3, [pc, #100]	; (8005e70 <HAL_RCC_ClockConfig+0x278>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0307 	and.w	r3, r3, #7
 8005e12:	683a      	ldr	r2, [r7, #0]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d21b      	bcs.n	8005e50 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e18:	4b15      	ldr	r3, [pc, #84]	; (8005e70 <HAL_RCC_ClockConfig+0x278>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f023 0207 	bic.w	r2, r3, #7
 8005e20:	4913      	ldr	r1, [pc, #76]	; (8005e70 <HAL_RCC_ClockConfig+0x278>)
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e28:	f7fe f8f4 	bl	8004014 <HAL_GetTick>
 8005e2c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e2e:	e008      	b.n	8005e42 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005e30:	f7fe f8f0 	bl	8004014 <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d901      	bls.n	8005e42 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e012      	b.n	8005e68 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e42:	4b0b      	ldr	r3, [pc, #44]	; (8005e70 <HAL_RCC_ClockConfig+0x278>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0307 	and.w	r3, r3, #7
 8005e4a:	683a      	ldr	r2, [r7, #0]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d1ef      	bne.n	8005e30 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005e50:	f000 f87e 	bl	8005f50 <HAL_RCC_GetHCLKFreq>
 8005e54:	4603      	mov	r3, r0
 8005e56:	4a07      	ldr	r2, [pc, #28]	; (8005e74 <HAL_RCC_ClockConfig+0x27c>)
 8005e58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005e5a:	f7fe f8e7 	bl	800402c <HAL_GetTickPrio>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7fe f889 	bl	8003f78 <HAL_InitTick>
 8005e66:	4603      	mov	r3, r0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3710      	adds	r7, #16
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	58004000 	.word	0x58004000
 8005e74:	20000044 	.word	0x20000044

08005e78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e78:	b590      	push	{r4, r7, lr}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e7e:	f7ff fa20 	bl	80052c2 <LL_RCC_GetSysClkSource>
 8005e82:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10a      	bne.n	8005ea0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005e8a:	f7ff f9dc 	bl	8005246 <LL_RCC_MSI_GetRange>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	091b      	lsrs	r3, r3, #4
 8005e92:	f003 030f 	and.w	r3, r3, #15
 8005e96:	4a2b      	ldr	r2, [pc, #172]	; (8005f44 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e9c:	60fb      	str	r3, [r7, #12]
 8005e9e:	e04b      	b.n	8005f38 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2b04      	cmp	r3, #4
 8005ea4:	d102      	bne.n	8005eac <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005ea6:	4b28      	ldr	r3, [pc, #160]	; (8005f48 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005ea8:	60fb      	str	r3, [r7, #12]
 8005eaa:	e045      	b.n	8005f38 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b08      	cmp	r3, #8
 8005eb0:	d10a      	bne.n	8005ec8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005eb2:	f7ff f829 	bl	8004f08 <LL_RCC_HSE_IsEnabledDiv2>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d102      	bne.n	8005ec2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005ebc:	4b22      	ldr	r3, [pc, #136]	; (8005f48 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005ebe:	60fb      	str	r3, [r7, #12]
 8005ec0:	e03a      	b.n	8005f38 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005ec2:	4b22      	ldr	r3, [pc, #136]	; (8005f4c <HAL_RCC_GetSysClockFreq+0xd4>)
 8005ec4:	60fb      	str	r3, [r7, #12]
 8005ec6:	e037      	b.n	8005f38 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005ec8:	f7ff faf7 	bl	80054ba <LL_RCC_PLL_GetMainSource>
 8005ecc:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d003      	beq.n	8005edc <HAL_RCC_GetSysClockFreq+0x64>
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	2b03      	cmp	r3, #3
 8005ed8:	d003      	beq.n	8005ee2 <HAL_RCC_GetSysClockFreq+0x6a>
 8005eda:	e00d      	b.n	8005ef8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005edc:	4b1a      	ldr	r3, [pc, #104]	; (8005f48 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005ede:	60bb      	str	r3, [r7, #8]
        break;
 8005ee0:	e015      	b.n	8005f0e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005ee2:	f7ff f811 	bl	8004f08 <LL_RCC_HSE_IsEnabledDiv2>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d102      	bne.n	8005ef2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005eec:	4b16      	ldr	r3, [pc, #88]	; (8005f48 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005eee:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005ef0:	e00d      	b.n	8005f0e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005ef2:	4b16      	ldr	r3, [pc, #88]	; (8005f4c <HAL_RCC_GetSysClockFreq+0xd4>)
 8005ef4:	60bb      	str	r3, [r7, #8]
        break;
 8005ef6:	e00a      	b.n	8005f0e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005ef8:	f7ff f9a5 	bl	8005246 <LL_RCC_MSI_GetRange>
 8005efc:	4603      	mov	r3, r0
 8005efe:	091b      	lsrs	r3, r3, #4
 8005f00:	f003 030f 	and.w	r3, r3, #15
 8005f04:	4a0f      	ldr	r2, [pc, #60]	; (8005f44 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f0a:	60bb      	str	r3, [r7, #8]
        break;
 8005f0c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005f0e:	f7ff faaf 	bl	8005470 <LL_RCC_PLL_GetN>
 8005f12:	4602      	mov	r2, r0
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	fb03 f402 	mul.w	r4, r3, r2
 8005f1a:	f7ff fac2 	bl	80054a2 <LL_RCC_PLL_GetDivider>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	091b      	lsrs	r3, r3, #4
 8005f22:	3301      	adds	r3, #1
 8005f24:	fbb4 f4f3 	udiv	r4, r4, r3
 8005f28:	f7ff faaf 	bl	800548a <LL_RCC_PLL_GetR>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	0f5b      	lsrs	r3, r3, #29
 8005f30:	3301      	adds	r3, #1
 8005f32:	fbb4 f3f3 	udiv	r3, r4, r3
 8005f36:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005f38:	68fb      	ldr	r3, [r7, #12]
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3714      	adds	r7, #20
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd90      	pop	{r4, r7, pc}
 8005f42:	bf00      	nop
 8005f44:	0800ee50 	.word	0x0800ee50
 8005f48:	00f42400 	.word	0x00f42400
 8005f4c:	01e84800 	.word	0x01e84800

08005f50 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f50:	b598      	push	{r3, r4, r7, lr}
 8005f52:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005f54:	f7ff ff90 	bl	8005e78 <HAL_RCC_GetSysClockFreq>
 8005f58:	4604      	mov	r4, r0
 8005f5a:	f7ff fa27 	bl	80053ac <LL_RCC_GetAHBPrescaler>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	091b      	lsrs	r3, r3, #4
 8005f62:	f003 030f 	and.w	r3, r3, #15
 8005f66:	4a03      	ldr	r2, [pc, #12]	; (8005f74 <HAL_RCC_GetHCLKFreq+0x24>)
 8005f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f6c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	bd98      	pop	{r3, r4, r7, pc}
 8005f74:	0800edf0 	.word	0x0800edf0

08005f78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f78:	b598      	push	{r3, r4, r7, lr}
 8005f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005f7c:	f7ff ffe8 	bl	8005f50 <HAL_RCC_GetHCLKFreq>
 8005f80:	4604      	mov	r4, r0
 8005f82:	f7ff fa2d 	bl	80053e0 <LL_RCC_GetAPB1Prescaler>
 8005f86:	4603      	mov	r3, r0
 8005f88:	0a1b      	lsrs	r3, r3, #8
 8005f8a:	f003 0307 	and.w	r3, r3, #7
 8005f8e:	4a04      	ldr	r2, [pc, #16]	; (8005fa0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f94:	f003 031f 	and.w	r3, r3, #31
 8005f98:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	bd98      	pop	{r3, r4, r7, pc}
 8005fa0:	0800ee30 	.word	0x0800ee30

08005fa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fa4:	b598      	push	{r3, r4, r7, lr}
 8005fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005fa8:	f7ff ffd2 	bl	8005f50 <HAL_RCC_GetHCLKFreq>
 8005fac:	4604      	mov	r4, r0
 8005fae:	f7ff fa23 	bl	80053f8 <LL_RCC_GetAPB2Prescaler>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	0adb      	lsrs	r3, r3, #11
 8005fb6:	f003 0307 	and.w	r3, r3, #7
 8005fba:	4a04      	ldr	r2, [pc, #16]	; (8005fcc <HAL_RCC_GetPCLK2Freq+0x28>)
 8005fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fc0:	f003 031f 	and.w	r3, r3, #31
 8005fc4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	bd98      	pop	{r3, r4, r7, pc}
 8005fcc:	0800ee30 	.word	0x0800ee30

08005fd0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2bb0      	cmp	r3, #176	; 0xb0
 8005fdc:	d903      	bls.n	8005fe6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005fde:	4b14      	ldr	r3, [pc, #80]	; (8006030 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8005fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe2:	60fb      	str	r3, [r7, #12]
 8005fe4:	e007      	b.n	8005ff6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	091b      	lsrs	r3, r3, #4
 8005fea:	f003 030f 	and.w	r3, r3, #15
 8005fee:	4a10      	ldr	r2, [pc, #64]	; (8006030 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8005ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ff4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005ff6:	f7ff f9e5 	bl	80053c4 <LL_RCC_GetAHB4Prescaler>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	091b      	lsrs	r3, r3, #4
 8005ffe:	f003 030f 	and.w	r3, r3, #15
 8006002:	4a0c      	ldr	r2, [pc, #48]	; (8006034 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	fbb2 f3f3 	udiv	r3, r2, r3
 800600e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	4a09      	ldr	r2, [pc, #36]	; (8006038 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006014:	fba2 2303 	umull	r2, r3, r2, r3
 8006018:	0c9b      	lsrs	r3, r3, #18
 800601a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800601e:	4618      	mov	r0, r3
 8006020:	f000 f80c 	bl	800603c <RCC_SetFlashLatency>
 8006024:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 8006026:	4618      	mov	r0, r3
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	0800ee50 	.word	0x0800ee50
 8006034:	0800edf0 	.word	0x0800edf0
 8006038:	431bde83 	.word	0x431bde83

0800603c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800603c:	b590      	push	{r4, r7, lr}
 800603e:	b08f      	sub	sp, #60	; 0x3c
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8006046:	4b24      	ldr	r3, [pc, #144]	; (80060d8 <RCC_SetFlashLatency+0x9c>)
 8006048:	f107 041c 	add.w	r4, r7, #28
 800604c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800604e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8006052:	4b22      	ldr	r3, [pc, #136]	; (80060dc <RCC_SetFlashLatency+0xa0>)
 8006054:	f107 040c 	add.w	r4, r7, #12
 8006058:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800605a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800605e:	2300      	movs	r3, #0
 8006060:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006062:	2300      	movs	r3, #0
 8006064:	633b      	str	r3, [r7, #48]	; 0x30
 8006066:	e013      	b.n	8006090 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	3338      	adds	r3, #56	; 0x38
 800606e:	443b      	add	r3, r7
 8006070:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	429a      	cmp	r2, r3
 8006078:	d807      	bhi.n	800608a <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 800607a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	3338      	adds	r3, #56	; 0x38
 8006080:	443b      	add	r3, r7
 8006082:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006086:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8006088:	e005      	b.n	8006096 <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800608a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608c:	3301      	adds	r3, #1
 800608e:	633b      	str	r3, [r7, #48]	; 0x30
 8006090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006092:	2b03      	cmp	r3, #3
 8006094:	d9e8      	bls.n	8006068 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8006096:	4b12      	ldr	r3, [pc, #72]	; (80060e0 <RCC_SetFlashLatency+0xa4>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f023 0207 	bic.w	r2, r3, #7
 800609e:	4910      	ldr	r1, [pc, #64]	; (80060e0 <RCC_SetFlashLatency+0xa4>)
 80060a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a2:	4313      	orrs	r3, r2
 80060a4:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80060a6:	f7fd ffb5 	bl	8004014 <HAL_GetTick>
 80060aa:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80060ac:	e008      	b.n	80060c0 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80060ae:	f7fd ffb1 	bl	8004014 <HAL_GetTick>
 80060b2:	4602      	mov	r2, r0
 80060b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b6:	1ad3      	subs	r3, r2, r3
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d901      	bls.n	80060c0 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	e007      	b.n	80060d0 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80060c0:	4b07      	ldr	r3, [pc, #28]	; (80060e0 <RCC_SetFlashLatency+0xa4>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0307 	and.w	r3, r3, #7
 80060c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d1ef      	bne.n	80060ae <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	373c      	adds	r7, #60	; 0x3c
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd90      	pop	{r4, r7, pc}
 80060d8:	0800ec58 	.word	0x0800ec58
 80060dc:	0800ec68 	.word	0x0800ec68
 80060e0:	58004000 	.word	0x58004000

080060e4 <LL_RCC_LSE_IsEnabled>:
{
 80060e4:	b480      	push	{r7}
 80060e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80060e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060f0:	f003 0301 	and.w	r3, r3, #1
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d101      	bne.n	80060fc <LL_RCC_LSE_IsEnabled+0x18>
 80060f8:	2301      	movs	r3, #1
 80060fa:	e000      	b.n	80060fe <LL_RCC_LSE_IsEnabled+0x1a>
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <LL_RCC_LSE_IsReady>:
{
 8006108:	b480      	push	{r7}
 800610a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800610c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006114:	f003 0302 	and.w	r3, r3, #2
 8006118:	2b02      	cmp	r3, #2
 800611a:	d101      	bne.n	8006120 <LL_RCC_LSE_IsReady+0x18>
 800611c:	2301      	movs	r3, #1
 800611e:	e000      	b.n	8006122 <LL_RCC_LSE_IsReady+0x1a>
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <LL_RCC_SetRFWKPClockSource>:
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006138:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800613c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006140:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4313      	orrs	r3, r2
 8006148:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <LL_RCC_SetSMPSClockSource>:
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006166:	f023 0203 	bic.w	r2, r3, #3
 800616a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4313      	orrs	r3, r2
 8006172:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <LL_RCC_SetSMPSPrescaler>:
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800618c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006192:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4313      	orrs	r3, r2
 800619a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <LL_RCC_SetUSARTClockSource>:
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80061b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061b8:	f023 0203 	bic.w	r2, r3, #3
 80061bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80061c8:	bf00      	nop
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <LL_RCC_SetLPUARTClockSource>:
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80061dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80061e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <LL_RCC_SetI2CClockSource>:
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800620c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	091b      	lsrs	r3, r3, #4
 8006214:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006218:	43db      	mvns	r3, r3
 800621a:	401a      	ands	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	011b      	lsls	r3, r3, #4
 8006220:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006224:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006228:	4313      	orrs	r3, r2
 800622a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800622e:	bf00      	nop
 8006230:	370c      	adds	r7, #12
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr

0800623a <LL_RCC_SetLPTIMClockSource>:
{
 800623a:	b480      	push	{r7}
 800623c:	b083      	sub	sp, #12
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006246:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	0c1b      	lsrs	r3, r3, #16
 800624e:	041b      	lsls	r3, r3, #16
 8006250:	43db      	mvns	r3, r3
 8006252:	401a      	ands	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	041b      	lsls	r3, r3, #16
 8006258:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800625c:	4313      	orrs	r3, r2
 800625e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006262:	bf00      	nop
 8006264:	370c      	adds	r7, #12
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <LL_RCC_SetRNGClockSource>:
{
 800626e:	b480      	push	{r7}
 8006270:	b083      	sub	sp, #12
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800627a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800627e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006282:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4313      	orrs	r3, r2
 800628a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800628e:	bf00      	nop
 8006290:	370c      	adds	r7, #12
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <LL_RCC_SetCLK48ClockSource>:
{
 800629a:	b480      	push	{r7}
 800629c:	b083      	sub	sp, #12
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80062a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80062ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80062ba:	bf00      	nop
 80062bc:	370c      	adds	r7, #12
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr

080062c6 <LL_RCC_SetADCClockSource>:
{
 80062c6:	b480      	push	{r7}
 80062c8:	b083      	sub	sp, #12
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80062ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80062da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80062e6:	bf00      	nop
 80062e8:	370c      	adds	r7, #12
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <LL_RCC_SetRTCClockSource>:
{
 80062f2:	b480      	push	{r7}
 80062f4:	b083      	sub	sp, #12
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80062fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006302:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006306:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4313      	orrs	r3, r2
 800630e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006312:	bf00      	nop
 8006314:	370c      	adds	r7, #12
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr

0800631e <LL_RCC_GetRTCClockSource>:
{
 800631e:	b480      	push	{r7}
 8006320:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800632a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800632e:	4618      	mov	r0, r3
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <LL_RCC_ForceBackupDomainReset>:
{
 8006338:	b480      	push	{r7}
 800633a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800633c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006344:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800634c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006350:	bf00      	nop
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr

0800635a <LL_RCC_ReleaseBackupDomainReset>:
{
 800635a:	b480      	push	{r7}
 800635c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800635e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006366:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800636a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800636e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006372:	bf00      	nop
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b088      	sub	sp, #32
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8006384:	2300      	movs	r3, #0
 8006386:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006388:	2300      	movs	r3, #0
 800638a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006394:	2b00      	cmp	r3, #0
 8006396:	d046      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006398:	f7ff ffc1 	bl	800631e <LL_RCC_GetRTCClockSource>
 800639c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a1b      	ldr	r3, [r3, #32]
 80063a2:	69ba      	ldr	r2, [r7, #24]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d03c      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80063a8:	f7fe fd88 	bl	8004ebc <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d105      	bne.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7ff ff9b 	bl	80062f2 <LL_RCC_SetRTCClockSource>
 80063bc:	e02e      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80063be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063c6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80063c8:	f7ff ffb6 	bl	8006338 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80063cc:	f7ff ffc5 	bl	800635a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a1b      	ldr	r3, [r3, #32]
 80063da:	4313      	orrs	r3, r2
 80063dc:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80063de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80063e8:	f7ff fe7c 	bl	80060e4 <LL_RCC_LSE_IsEnabled>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d114      	bne.n	800641c <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80063f2:	f7fd fe0f 	bl	8004014 <HAL_GetTick>
 80063f6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80063f8:	e00b      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063fa:	f7fd fe0b 	bl	8004014 <HAL_GetTick>
 80063fe:	4602      	mov	r2, r0
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	f241 3288 	movw	r2, #5000	; 0x1388
 8006408:	4293      	cmp	r3, r2
 800640a:	d902      	bls.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 800640c:	2303      	movs	r3, #3
 800640e:	77fb      	strb	r3, [r7, #31]
              break;
 8006410:	e004      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 8006412:	f7ff fe79 	bl	8006108 <LL_RCC_LSE_IsReady>
 8006416:	4603      	mov	r3, r0
 8006418:	2b01      	cmp	r3, #1
 800641a:	d1ee      	bne.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800641c:	7ffb      	ldrb	r3, [r7, #31]
 800641e:	77bb      	strb	r3, [r7, #30]
 8006420:	e001      	b.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006422:	7ffb      	ldrb	r3, [r7, #31]
 8006424:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 0301 	and.w	r3, r3, #1
 800642e:	2b00      	cmp	r3, #0
 8006430:	d004      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	4618      	mov	r0, r3
 8006438:	f7ff feb6 	bl	80061a8 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 0302 	and.w	r3, r3, #2
 8006444:	2b00      	cmp	r3, #0
 8006446:	d004      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	4618      	mov	r0, r3
 800644e:	f7ff fec1 	bl	80061d4 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0310 	and.w	r3, r3, #16
 800645a:	2b00      	cmp	r3, #0
 800645c:	d004      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	4618      	mov	r0, r3
 8006464:	f7ff fee9 	bl	800623a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 0320 	and.w	r3, r3, #32
 8006470:	2b00      	cmp	r3, #0
 8006472:	d004      	beq.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	695b      	ldr	r3, [r3, #20]
 8006478:	4618      	mov	r0, r3
 800647a:	f7ff fede 	bl	800623a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0304 	and.w	r3, r3, #4
 8006486:	2b00      	cmp	r3, #0
 8006488:	d004      	beq.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	4618      	mov	r0, r3
 8006490:	f7ff feb6 	bl	8006200 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800649c:	2b00      	cmp	r3, #0
 800649e:	d02b      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	699b      	ldr	r3, [r3, #24]
 80064a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064a8:	d008      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x140>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064b2:	d003      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x140>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	699b      	ldr	r3, [r3, #24]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d105      	bne.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	699b      	ldr	r3, [r3, #24]
 80064c0:	4618      	mov	r0, r3
 80064c2:	f7ff fed4 	bl	800626e <LL_RCC_SetRNGClockSource>
 80064c6:	e00a      	b.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x162>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064d0:	60fb      	str	r3, [r7, #12]
 80064d2:	2000      	movs	r0, #0
 80064d4:	f7ff fecb 	bl	800626e <LL_RCC_SetRNGClockSource>
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	f7ff fede 	bl	800629a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	699b      	ldr	r3, [r3, #24]
 80064e2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80064e6:	d107      	bne.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80064e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064f6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006500:	2b00      	cmp	r3, #0
 8006502:	d011      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	69db      	ldr	r3, [r3, #28]
 8006508:	4618      	mov	r0, r3
 800650a:	f7ff fedc 	bl	80062c6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	69db      	ldr	r3, [r3, #28]
 8006512:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006516:	d107      	bne.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006522:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006526:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d004      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006538:	4618      	mov	r0, r3
 800653a:	f7ff fdf7 	bl	800612c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d009      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654e:	4618      	mov	r0, r3
 8006550:	f7ff fe16 	bl	8006180 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006558:	4618      	mov	r0, r3
 800655a:	f7ff fdfd 	bl	8006158 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800655e:	7fbb      	ldrb	r3, [r7, #30]
}
 8006560:	4618      	mov	r0, r3
 8006562:	3720      	adds	r7, #32
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d101      	bne.n	800657a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e09f      	b.n	80066ba <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006580:	b2db      	uxtb	r3, r3
 8006582:	2b00      	cmp	r3, #0
 8006584:	d106      	bne.n	8006594 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f7fc fa68 	bl	8002a64 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2202      	movs	r2, #2
 8006598:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800659c:	4b49      	ldr	r3, [pc, #292]	; (80066c4 <HAL_RTC_Init+0x15c>)
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	f003 0310 	and.w	r3, r3, #16
 80065a4:	2b10      	cmp	r3, #16
 80065a6:	d07e      	beq.n	80066a6 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	22ca      	movs	r2, #202	; 0xca
 80065ae:	625a      	str	r2, [r3, #36]	; 0x24
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2253      	movs	r2, #83	; 0x53
 80065b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 f8ab 	bl	8006714 <RTC_EnterInitMode>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00a      	beq.n	80065da <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	22ff      	movs	r2, #255	; 0xff
 80065ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2204      	movs	r2, #4
 80065d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	73fb      	strb	r3, [r7, #15]
 80065d8:	e067      	b.n	80066aa <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	6812      	ldr	r2, [r2, #0]
 80065e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80065e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065ec:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	6899      	ldr	r1, [r3, #8]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	685a      	ldr	r2, [r3, #4]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	431a      	orrs	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	431a      	orrs	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	430a      	orrs	r2, r1
 800660a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	68d2      	ldr	r2, [r2, #12]
 8006614:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	6919      	ldr	r1, [r3, #16]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	041a      	lsls	r2, r3, #16
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	430a      	orrs	r2, r1
 8006628:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68da      	ldr	r2, [r3, #12]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006638:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f022 0202 	bic.w	r2, r2, #2
 8006648:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	69da      	ldr	r2, [r3, #28]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	431a      	orrs	r2, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	430a      	orrs	r2, r1
 8006660:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	f003 0320 	and.w	r3, r3, #32
 800666c:	2b00      	cmp	r3, #0
 800666e:	d113      	bne.n	8006698 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 f829 	bl	80066c8 <HAL_RTC_WaitForSynchro>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00d      	beq.n	8006698 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	22ff      	movs	r2, #255	; 0xff
 8006682:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2204      	movs	r2, #4
 8006688:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e010      	b.n	80066ba <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	22ff      	movs	r2, #255	; 0xff
 800669e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 80066a0:	2300      	movs	r3, #0
 80066a2:	73fb      	strb	r3, [r7, #15]
 80066a4:	e001      	b.n	80066aa <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80066a6:	2300      	movs	r3, #0
 80066a8:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80066aa:	7bfb      	ldrb	r3, [r7, #15]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d103      	bne.n	80066b8 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 80066b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	40002800 	.word	0x40002800

080066c8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68da      	ldr	r2, [r3, #12]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80066de:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80066e0:	f7fd fc98 	bl	8004014 <HAL_GetTick>
 80066e4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80066e6:	e009      	b.n	80066fc <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80066e8:	f7fd fc94 	bl	8004014 <HAL_GetTick>
 80066ec:	4602      	mov	r2, r0
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066f6:	d901      	bls.n	80066fc <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e007      	b.n	800670c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	f003 0320 	and.w	r3, r3, #32
 8006706:	2b00      	cmp	r3, #0
 8006708:	d0ee      	beq.n	80066e8 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006726:	2b00      	cmp	r3, #0
 8006728:	d119      	bne.n	800675e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f04f 32ff 	mov.w	r2, #4294967295
 8006732:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006734:	f7fd fc6e 	bl	8004014 <HAL_GetTick>
 8006738:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800673a:	e009      	b.n	8006750 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800673c:	f7fd fc6a 	bl	8004014 <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800674a:	d901      	bls.n	8006750 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800674c:	2303      	movs	r3, #3
 800674e:	e007      	b.n	8006760 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800675a:	2b00      	cmp	r3, #0
 800675c:	d0ee      	beq.n	800673c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3710      	adds	r7, #16
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b086      	sub	sp, #24
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f893 3020 	ldrb.w	r3, [r3, #32]
 800677a:	2b01      	cmp	r3, #1
 800677c:	d101      	bne.n	8006782 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800677e:	2302      	movs	r3, #2
 8006780:	e0a8      	b.n	80068d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2202      	movs	r2, #2
 800678e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	22ca      	movs	r2, #202	; 0xca
 8006798:	625a      	str	r2, [r3, #36]	; 0x24
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2253      	movs	r2, #83	; 0x53
 80067a0:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d020      	beq.n	80067f2 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80067b0:	f7fd fc30 	bl	8004014 <HAL_GetTick>
 80067b4:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80067b6:	e015      	b.n	80067e4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80067b8:	f7fd fc2c 	bl	8004014 <HAL_GetTick>
 80067bc:	4602      	mov	r2, r0
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067c6:	d90d      	bls.n	80067e4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	22ff      	movs	r2, #255	; 0xff
 80067ce:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2203      	movs	r2, #3
 80067d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80067e0:	2303      	movs	r3, #3
 80067e2:	e077      	b.n	80068d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	f003 0304 	and.w	r3, r3, #4
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d1e2      	bne.n	80067b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	689a      	ldr	r2, [r3, #8]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006800:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	b2da      	uxtb	r2, r3
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8006812:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006814:	f7fd fbfe 	bl	8004014 <HAL_GetTick>
 8006818:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800681a:	e015      	b.n	8006848 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800681c:	f7fd fbfa 	bl	8004014 <HAL_GetTick>
 8006820:	4602      	mov	r2, r0
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800682a:	d90d      	bls.n	8006848 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	22ff      	movs	r2, #255	; 0xff
 8006832:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2203      	movs	r2, #3
 8006838:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8006844:	2303      	movs	r3, #3
 8006846:	e045      	b.n	80068d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	f003 0304 	and.w	r3, r3, #4
 8006852:	2b00      	cmp	r3, #0
 8006854:	d0e2      	beq.n	800681c <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68ba      	ldr	r2, [r7, #8]
 800685c:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	689a      	ldr	r2, [r3, #8]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f022 0207 	bic.w	r2, r2, #7
 800686c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	6899      	ldr	r1, [r3, #8]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	430a      	orrs	r2, r1
 800687c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800687e:	4b17      	ldr	r3, [pc, #92]	; (80068dc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006880:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006884:	4a15      	ldr	r2, [pc, #84]	; (80068dc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006886:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800688a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800688e:	4b13      	ldr	r3, [pc, #76]	; (80068dc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a12      	ldr	r2, [pc, #72]	; (80068dc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006894:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006898:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	689a      	ldr	r2, [r3, #8]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068a8:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	689a      	ldr	r2, [r3, #8]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80068b8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	22ff      	movs	r2, #255	; 0xff
 80068c0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80068d2:	2300      	movs	r3, #0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3718      	adds	r7, #24
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	58000800 	.word	0x58000800

080068e0 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d101      	bne.n	80068f6 <HAL_RTCEx_EnableBypassShadow+0x16>
 80068f2:	2302      	movs	r3, #2
 80068f4:	e024      	b.n	8006940 <HAL_RTCEx_EnableBypassShadow+0x60>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2201      	movs	r2, #1
 80068fa:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2202      	movs	r2, #2
 8006902:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	22ca      	movs	r2, #202	; 0xca
 800690c:	625a      	str	r2, [r3, #36]	; 0x24
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2253      	movs	r2, #83	; 0x53
 8006914:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	689a      	ldr	r2, [r3, #8]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f042 0220 	orr.w	r2, r2, #32
 8006924:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	22ff      	movs	r2, #255	; 0xff
 800692c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <LL_RCC_GetUSARTClockSource>:
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8006954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006958:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4013      	ands	r3, r2
}
 8006960:	4618      	mov	r0, r3
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <LL_RCC_GetLPUARTClockSource>:
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006978:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4013      	ands	r3, r2
}
 8006980:	4618      	mov	r0, r3
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d101      	bne.n	800699e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e042      	b.n	8006a24 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d106      	bne.n	80069b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f7fc f897 	bl	8002ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2224      	movs	r2, #36	; 0x24
 80069ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f022 0201 	bic.w	r2, r2, #1
 80069cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d002      	beq.n	80069dc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 fe60 	bl	800769c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 fc35 	bl	800724c <UART_SetConfig>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d101      	bne.n	80069ec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e01b      	b.n	8006a24 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	685a      	ldr	r2, [r3, #4]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80069fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	689a      	ldr	r2, [r3, #8]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f042 0201 	orr.w	r2, r2, #1
 8006a1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 fedf 	bl	80077e0 <UART_CheckIdleState>
 8006a22:	4603      	mov	r3, r0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3708      	adds	r7, #8
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b08a      	sub	sp, #40	; 0x28
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	4613      	mov	r3, r2
 8006a38:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a40:	2b20      	cmp	r3, #32
 8006a42:	d137      	bne.n	8006ab4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d002      	beq.n	8006a50 <HAL_UART_Receive_IT+0x24>
 8006a4a:	88fb      	ldrh	r3, [r7, #6]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d101      	bne.n	8006a54 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e030      	b.n	8006ab6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2200      	movs	r2, #0
 8006a58:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a18      	ldr	r2, [pc, #96]	; (8006ac0 <HAL_UART_Receive_IT+0x94>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d01f      	beq.n	8006aa4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d018      	beq.n	8006aa4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	e853 3f00 	ldrex	r3, [r3]
 8006a7e:	613b      	str	r3, [r7, #16]
   return(result);
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a86:	627b      	str	r3, [r7, #36]	; 0x24
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a90:	623b      	str	r3, [r7, #32]
 8006a92:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a94:	69f9      	ldr	r1, [r7, #28]
 8006a96:	6a3a      	ldr	r2, [r7, #32]
 8006a98:	e841 2300 	strex	r3, r2, [r1]
 8006a9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d1e6      	bne.n	8006a72 <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006aa4:	88fb      	ldrh	r3, [r7, #6]
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	68b9      	ldr	r1, [r7, #8]
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f000 ffaa 	bl	8007a04 <UART_Start_Receive_IT>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	e000      	b.n	8006ab6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006ab4:	2302      	movs	r3, #2
  }
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3728      	adds	r7, #40	; 0x28
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	40008000 	.word	0x40008000

08006ac4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b08a      	sub	sp, #40	; 0x28
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	4613      	mov	r3, r2
 8006ad0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ad8:	2b20      	cmp	r3, #32
 8006ada:	d167      	bne.n	8006bac <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d002      	beq.n	8006ae8 <HAL_UART_Transmit_DMA+0x24>
 8006ae2:	88fb      	ldrh	r3, [r7, #6]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d101      	bne.n	8006aec <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e060      	b.n	8006bae <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	88fa      	ldrh	r2, [r7, #6]
 8006af6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	88fa      	ldrh	r2, [r7, #6]
 8006afe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2221      	movs	r2, #33	; 0x21
 8006b0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d028      	beq.n	8006b6c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b1e:	4a26      	ldr	r2, [pc, #152]	; (8006bb8 <HAL_UART_Transmit_DMA+0xf4>)
 8006b20:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b26:	4a25      	ldr	r2, [pc, #148]	; (8006bbc <HAL_UART_Transmit_DMA+0xf8>)
 8006b28:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b2e:	4a24      	ldr	r2, [pc, #144]	; (8006bc0 <HAL_UART_Transmit_DMA+0xfc>)
 8006b30:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b36:	2200      	movs	r2, #0
 8006b38:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b42:	4619      	mov	r1, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	3328      	adds	r3, #40	; 0x28
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	88fb      	ldrh	r3, [r7, #6]
 8006b4e:	f7fd fcab 	bl	80044a8 <HAL_DMA_Start_IT>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d009      	beq.n	8006b6c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2210      	movs	r2, #16
 8006b5c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2220      	movs	r2, #32
 8006b64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e020      	b.n	8006bae <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2240      	movs	r2, #64	; 0x40
 8006b72:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	3308      	adds	r3, #8
 8006b7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	e853 3f00 	ldrex	r3, [r3]
 8006b82:	613b      	str	r3, [r7, #16]
   return(result);
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	3308      	adds	r3, #8
 8006b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b94:	623a      	str	r2, [r7, #32]
 8006b96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b98:	69f9      	ldr	r1, [r7, #28]
 8006b9a:	6a3a      	ldr	r2, [r7, #32]
 8006b9c:	e841 2300 	strex	r3, r2, [r1]
 8006ba0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d1e5      	bne.n	8006b74 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	e000      	b.n	8006bae <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006bac:	2302      	movs	r3, #2
  }
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3728      	adds	r7, #40	; 0x28
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	08007d97 	.word	0x08007d97
 8006bbc:	08007e31 	.word	0x08007e31
 8006bc0:	08007e4d 	.word	0x08007e4d

08006bc4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b0ba      	sub	sp, #232	; 0xe8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	69db      	ldr	r3, [r3, #28]
 8006bd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006bea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006bee:	f640 030f 	movw	r3, #2063	; 0x80f
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006bf8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d11b      	bne.n	8006c38 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c04:	f003 0320 	and.w	r3, r3, #32
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d015      	beq.n	8006c38 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c10:	f003 0320 	and.w	r3, r3, #32
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d105      	bne.n	8006c24 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006c18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d009      	beq.n	8006c38 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f000 82e3 	beq.w	80071f4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	4798      	blx	r3
      }
      return;
 8006c36:	e2dd      	b.n	80071f4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006c38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f000 8123 	beq.w	8006e88 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006c42:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006c46:	4b8d      	ldr	r3, [pc, #564]	; (8006e7c <HAL_UART_IRQHandler+0x2b8>)
 8006c48:	4013      	ands	r3, r2
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d106      	bne.n	8006c5c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006c4e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006c52:	4b8b      	ldr	r3, [pc, #556]	; (8006e80 <HAL_UART_IRQHandler+0x2bc>)
 8006c54:	4013      	ands	r3, r2
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	f000 8116 	beq.w	8006e88 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c60:	f003 0301 	and.w	r3, r3, #1
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d011      	beq.n	8006c8c <HAL_UART_IRQHandler+0xc8>
 8006c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d00b      	beq.n	8006c8c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c82:	f043 0201 	orr.w	r2, r3, #1
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c90:	f003 0302 	and.w	r3, r3, #2
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d011      	beq.n	8006cbc <HAL_UART_IRQHandler+0xf8>
 8006c98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c9c:	f003 0301 	and.w	r3, r3, #1
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00b      	beq.n	8006cbc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2202      	movs	r2, #2
 8006caa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cb2:	f043 0204 	orr.w	r2, r3, #4
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cc0:	f003 0304 	and.w	r3, r3, #4
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d011      	beq.n	8006cec <HAL_UART_IRQHandler+0x128>
 8006cc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ccc:	f003 0301 	and.w	r3, r3, #1
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00b      	beq.n	8006cec <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2204      	movs	r2, #4
 8006cda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ce2:	f043 0202 	orr.w	r2, r3, #2
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cf0:	f003 0308 	and.w	r3, r3, #8
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d017      	beq.n	8006d28 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cfc:	f003 0320 	and.w	r3, r3, #32
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d105      	bne.n	8006d10 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006d04:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006d08:	4b5c      	ldr	r3, [pc, #368]	; (8006e7c <HAL_UART_IRQHandler+0x2b8>)
 8006d0a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d00b      	beq.n	8006d28 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2208      	movs	r2, #8
 8006d16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d1e:	f043 0208 	orr.w	r2, r3, #8
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d012      	beq.n	8006d5a <HAL_UART_IRQHandler+0x196>
 8006d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00c      	beq.n	8006d5a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d50:	f043 0220 	orr.w	r2, r3, #32
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f000 8249 	beq.w	80071f8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d6a:	f003 0320 	and.w	r3, r3, #32
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d013      	beq.n	8006d9a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006d72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d76:	f003 0320 	and.w	r3, r3, #32
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d105      	bne.n	8006d8a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006d7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d007      	beq.n	8006d9a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d003      	beq.n	8006d9a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006da0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dae:	2b40      	cmp	r3, #64	; 0x40
 8006db0:	d005      	beq.n	8006dbe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006db2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006db6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d054      	beq.n	8006e68 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 ff83 	bl	8007cca <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dce:	2b40      	cmp	r3, #64	; 0x40
 8006dd0:	d146      	bne.n	8006e60 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	3308      	adds	r3, #8
 8006dd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ddc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006de0:	e853 3f00 	ldrex	r3, [r3]
 8006de4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006de8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006dec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006df0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	3308      	adds	r3, #8
 8006dfa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006dfe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006e02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006e0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006e0e:	e841 2300 	strex	r3, r2, [r1]
 8006e12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006e16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d1d9      	bne.n	8006dd2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d017      	beq.n	8006e58 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e2e:	4a15      	ldr	r2, [pc, #84]	; (8006e84 <HAL_UART_IRQHandler+0x2c0>)
 8006e30:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f7fd fc0f 	bl	800465c <HAL_DMA_Abort_IT>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d019      	beq.n	8006e78 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006e52:	4610      	mov	r0, r2
 8006e54:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e56:	e00f      	b.n	8006e78 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 f9e1 	bl	8007220 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e5e:	e00b      	b.n	8006e78 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 f9dd 	bl	8007220 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e66:	e007      	b.n	8006e78 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 f9d9 	bl	8007220 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006e76:	e1bf      	b.n	80071f8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e78:	bf00      	nop
    return;
 8006e7a:	e1bd      	b.n	80071f8 <HAL_UART_IRQHandler+0x634>
 8006e7c:	10000001 	.word	0x10000001
 8006e80:	04000120 	.word	0x04000120
 8006e84:	08007ecd 	.word	0x08007ecd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	f040 8153 	bne.w	8007138 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e96:	f003 0310 	and.w	r3, r3, #16
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	f000 814c 	beq.w	8007138 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ea4:	f003 0310 	and.w	r3, r3, #16
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	f000 8145 	beq.w	8007138 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2210      	movs	r2, #16
 8006eb4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec0:	2b40      	cmp	r3, #64	; 0x40
 8006ec2:	f040 80bb 	bne.w	800703c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ed4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f000 818f 	beq.w	80071fc <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006ee4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	f080 8187 	bcs.w	80071fc <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ef4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 0320 	and.w	r3, r3, #32
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	f040 8087 	bne.w	800701a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f18:	e853 3f00 	ldrex	r3, [r3]
 8006f1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006f20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	461a      	mov	r2, r3
 8006f32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006f3a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006f42:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006f46:	e841 2300 	strex	r3, r2, [r1]
 8006f4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006f4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d1da      	bne.n	8006f0c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	3308      	adds	r3, #8
 8006f5c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f60:	e853 3f00 	ldrex	r3, [r3]
 8006f64:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006f66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f68:	f023 0301 	bic.w	r3, r3, #1
 8006f6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	3308      	adds	r3, #8
 8006f76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006f7a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006f7e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f80:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006f82:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006f86:	e841 2300 	strex	r3, r2, [r1]
 8006f8a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006f8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d1e1      	bne.n	8006f56 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	3308      	adds	r3, #8
 8006f98:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f9c:	e853 3f00 	ldrex	r3, [r3]
 8006fa0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006fa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fa8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	3308      	adds	r3, #8
 8006fb2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006fb6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006fb8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006fbc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006fbe:	e841 2300 	strex	r3, r2, [r1]
 8006fc2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006fc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d1e3      	bne.n	8006f92 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2220      	movs	r2, #32
 8006fce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fe0:	e853 3f00 	ldrex	r3, [r3]
 8006fe4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fe8:	f023 0310 	bic.w	r3, r3, #16
 8006fec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ffa:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ffc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007000:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007002:	e841 2300 	strex	r3, r2, [r1]
 8007006:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1e4      	bne.n	8006fd8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007014:	4618      	mov	r0, r3
 8007016:	f7fd fac2 	bl	800459e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2202      	movs	r2, #2
 800701e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800702c:	b29b      	uxth	r3, r3
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	b29b      	uxth	r3, r3
 8007032:	4619      	mov	r1, r3
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 f8fd 	bl	8007234 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800703a:	e0df      	b.n	80071fc <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007048:	b29b      	uxth	r3, r3
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007056:	b29b      	uxth	r3, r3
 8007058:	2b00      	cmp	r3, #0
 800705a:	f000 80d1 	beq.w	8007200 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800705e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007062:	2b00      	cmp	r3, #0
 8007064:	f000 80cc 	beq.w	8007200 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007070:	e853 3f00 	ldrex	r3, [r3]
 8007074:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007078:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800707c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	461a      	mov	r2, r3
 8007086:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800708a:	647b      	str	r3, [r7, #68]	; 0x44
 800708c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007090:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007092:	e841 2300 	strex	r3, r2, [r1]
 8007096:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800709a:	2b00      	cmp	r3, #0
 800709c:	d1e4      	bne.n	8007068 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	3308      	adds	r3, #8
 80070a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a8:	e853 3f00 	ldrex	r3, [r3]
 80070ac:	623b      	str	r3, [r7, #32]
   return(result);
 80070ae:	6a3b      	ldr	r3, [r7, #32]
 80070b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070b4:	f023 0301 	bic.w	r3, r3, #1
 80070b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	3308      	adds	r3, #8
 80070c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80070c6:	633a      	str	r2, [r7, #48]	; 0x30
 80070c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070ce:	e841 2300 	strex	r3, r2, [r1]
 80070d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80070d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1e1      	bne.n	800709e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2220      	movs	r2, #32
 80070de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	e853 3f00 	ldrex	r3, [r3]
 80070fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f023 0310 	bic.w	r3, r3, #16
 8007102:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	461a      	mov	r2, r3
 800710c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007110:	61fb      	str	r3, [r7, #28]
 8007112:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007114:	69b9      	ldr	r1, [r7, #24]
 8007116:	69fa      	ldr	r2, [r7, #28]
 8007118:	e841 2300 	strex	r3, r2, [r1]
 800711c:	617b      	str	r3, [r7, #20]
   return(result);
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d1e4      	bne.n	80070ee <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2202      	movs	r2, #2
 8007128:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800712a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800712e:	4619      	mov	r1, r3
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 f87f 	bl	8007234 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007136:	e063      	b.n	8007200 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800713c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007140:	2b00      	cmp	r3, #0
 8007142:	d00e      	beq.n	8007162 <HAL_UART_IRQHandler+0x59e>
 8007144:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007148:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800714c:	2b00      	cmp	r3, #0
 800714e:	d008      	beq.n	8007162 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007158:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f001 fc14 	bl	8008988 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007160:	e051      	b.n	8007206 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800716a:	2b00      	cmp	r3, #0
 800716c:	d014      	beq.n	8007198 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800716e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007176:	2b00      	cmp	r3, #0
 8007178:	d105      	bne.n	8007186 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800717a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800717e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007182:	2b00      	cmp	r3, #0
 8007184:	d008      	beq.n	8007198 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800718a:	2b00      	cmp	r3, #0
 800718c:	d03a      	beq.n	8007204 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	4798      	blx	r3
    }
    return;
 8007196:	e035      	b.n	8007204 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800719c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d009      	beq.n	80071b8 <HAL_UART_IRQHandler+0x5f4>
 80071a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d003      	beq.n	80071b8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 fea1 	bl	8007ef8 <UART_EndTransmit_IT>
    return;
 80071b6:	e026      	b.n	8007206 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80071b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d009      	beq.n	80071d8 <HAL_UART_IRQHandler+0x614>
 80071c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d003      	beq.n	80071d8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f001 fbed 	bl	80089b0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80071d6:	e016      	b.n	8007206 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80071d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d010      	beq.n	8007206 <HAL_UART_IRQHandler+0x642>
 80071e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	da0c      	bge.n	8007206 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f001 fbd5 	bl	800899c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80071f2:	e008      	b.n	8007206 <HAL_UART_IRQHandler+0x642>
      return;
 80071f4:	bf00      	nop
 80071f6:	e006      	b.n	8007206 <HAL_UART_IRQHandler+0x642>
    return;
 80071f8:	bf00      	nop
 80071fa:	e004      	b.n	8007206 <HAL_UART_IRQHandler+0x642>
      return;
 80071fc:	bf00      	nop
 80071fe:	e002      	b.n	8007206 <HAL_UART_IRQHandler+0x642>
      return;
 8007200:	bf00      	nop
 8007202:	e000      	b.n	8007206 <HAL_UART_IRQHandler+0x642>
    return;
 8007204:	bf00      	nop
  }
}
 8007206:	37e8      	adds	r7, #232	; 0xe8
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007214:	bf00      	nop
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007228:	bf00      	nop
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	460b      	mov	r3, r1
 800723e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007240:	bf00      	nop
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800724c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007250:	b08c      	sub	sp, #48	; 0x30
 8007252:	af00      	add	r7, sp, #0
 8007254:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007256:	2300      	movs	r3, #0
 8007258:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	689a      	ldr	r2, [r3, #8]
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	691b      	ldr	r3, [r3, #16]
 8007264:	431a      	orrs	r2, r3
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	695b      	ldr	r3, [r3, #20]
 800726a:	431a      	orrs	r2, r3
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	69db      	ldr	r3, [r3, #28]
 8007270:	4313      	orrs	r3, r2
 8007272:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	4baf      	ldr	r3, [pc, #700]	; (8007538 <UART_SetConfig+0x2ec>)
 800727c:	4013      	ands	r3, r2
 800727e:	697a      	ldr	r2, [r7, #20]
 8007280:	6812      	ldr	r2, [r2, #0]
 8007282:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007284:	430b      	orrs	r3, r1
 8007286:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	68da      	ldr	r2, [r3, #12]
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	430a      	orrs	r2, r1
 800729c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	699b      	ldr	r3, [r3, #24]
 80072a2:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4aa4      	ldr	r2, [pc, #656]	; (800753c <UART_SetConfig+0x2f0>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d004      	beq.n	80072b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	6a1b      	ldr	r3, [r3, #32]
 80072b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072b4:	4313      	orrs	r3, r2
 80072b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80072c2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80072c6:	697a      	ldr	r2, [r7, #20]
 80072c8:	6812      	ldr	r2, [r2, #0]
 80072ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072cc:	430b      	orrs	r3, r1
 80072ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d6:	f023 010f 	bic.w	r1, r3, #15
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	430a      	orrs	r2, r1
 80072e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a95      	ldr	r2, [pc, #596]	; (8007540 <UART_SetConfig+0x2f4>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d125      	bne.n	800733c <UART_SetConfig+0xf0>
 80072f0:	2003      	movs	r0, #3
 80072f2:	f7ff fb2b 	bl	800694c <LL_RCC_GetUSARTClockSource>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b03      	cmp	r3, #3
 80072fa:	d81b      	bhi.n	8007334 <UART_SetConfig+0xe8>
 80072fc:	a201      	add	r2, pc, #4	; (adr r2, 8007304 <UART_SetConfig+0xb8>)
 80072fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007302:	bf00      	nop
 8007304:	08007315 	.word	0x08007315
 8007308:	08007325 	.word	0x08007325
 800730c:	0800731d 	.word	0x0800731d
 8007310:	0800732d 	.word	0x0800732d
 8007314:	2301      	movs	r3, #1
 8007316:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800731a:	e042      	b.n	80073a2 <UART_SetConfig+0x156>
 800731c:	2302      	movs	r3, #2
 800731e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007322:	e03e      	b.n	80073a2 <UART_SetConfig+0x156>
 8007324:	2304      	movs	r3, #4
 8007326:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800732a:	e03a      	b.n	80073a2 <UART_SetConfig+0x156>
 800732c:	2308      	movs	r3, #8
 800732e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007332:	e036      	b.n	80073a2 <UART_SetConfig+0x156>
 8007334:	2310      	movs	r3, #16
 8007336:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800733a:	e032      	b.n	80073a2 <UART_SetConfig+0x156>
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a7e      	ldr	r2, [pc, #504]	; (800753c <UART_SetConfig+0x2f0>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d12a      	bne.n	800739c <UART_SetConfig+0x150>
 8007346:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800734a:	f7ff fb0f 	bl	800696c <LL_RCC_GetLPUARTClockSource>
 800734e:	4603      	mov	r3, r0
 8007350:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007354:	d01a      	beq.n	800738c <UART_SetConfig+0x140>
 8007356:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800735a:	d81b      	bhi.n	8007394 <UART_SetConfig+0x148>
 800735c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007360:	d00c      	beq.n	800737c <UART_SetConfig+0x130>
 8007362:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007366:	d815      	bhi.n	8007394 <UART_SetConfig+0x148>
 8007368:	2b00      	cmp	r3, #0
 800736a:	d003      	beq.n	8007374 <UART_SetConfig+0x128>
 800736c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007370:	d008      	beq.n	8007384 <UART_SetConfig+0x138>
 8007372:	e00f      	b.n	8007394 <UART_SetConfig+0x148>
 8007374:	2300      	movs	r3, #0
 8007376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800737a:	e012      	b.n	80073a2 <UART_SetConfig+0x156>
 800737c:	2302      	movs	r3, #2
 800737e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007382:	e00e      	b.n	80073a2 <UART_SetConfig+0x156>
 8007384:	2304      	movs	r3, #4
 8007386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800738a:	e00a      	b.n	80073a2 <UART_SetConfig+0x156>
 800738c:	2308      	movs	r3, #8
 800738e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007392:	e006      	b.n	80073a2 <UART_SetConfig+0x156>
 8007394:	2310      	movs	r3, #16
 8007396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800739a:	e002      	b.n	80073a2 <UART_SetConfig+0x156>
 800739c:	2310      	movs	r3, #16
 800739e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a65      	ldr	r2, [pc, #404]	; (800753c <UART_SetConfig+0x2f0>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	f040 8097 	bne.w	80074dc <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80073ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80073b2:	2b08      	cmp	r3, #8
 80073b4:	d823      	bhi.n	80073fe <UART_SetConfig+0x1b2>
 80073b6:	a201      	add	r2, pc, #4	; (adr r2, 80073bc <UART_SetConfig+0x170>)
 80073b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073bc:	080073e1 	.word	0x080073e1
 80073c0:	080073ff 	.word	0x080073ff
 80073c4:	080073e9 	.word	0x080073e9
 80073c8:	080073ff 	.word	0x080073ff
 80073cc:	080073ef 	.word	0x080073ef
 80073d0:	080073ff 	.word	0x080073ff
 80073d4:	080073ff 	.word	0x080073ff
 80073d8:	080073ff 	.word	0x080073ff
 80073dc:	080073f7 	.word	0x080073f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073e0:	f7fe fdca 	bl	8005f78 <HAL_RCC_GetPCLK1Freq>
 80073e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80073e6:	e010      	b.n	800740a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073e8:	4b56      	ldr	r3, [pc, #344]	; (8007544 <UART_SetConfig+0x2f8>)
 80073ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80073ec:	e00d      	b.n	800740a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073ee:	f7fe fd43 	bl	8005e78 <HAL_RCC_GetSysClockFreq>
 80073f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80073f4:	e009      	b.n	800740a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80073fc:	e005      	b.n	800740a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80073fe:	2300      	movs	r3, #0
 8007400:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007408:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800740a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740c:	2b00      	cmp	r3, #0
 800740e:	f000 812b 	beq.w	8007668 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007416:	4a4c      	ldr	r2, [pc, #304]	; (8007548 <UART_SetConfig+0x2fc>)
 8007418:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800741c:	461a      	mov	r2, r3
 800741e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007420:	fbb3 f3f2 	udiv	r3, r3, r2
 8007424:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	685a      	ldr	r2, [r3, #4]
 800742a:	4613      	mov	r3, r2
 800742c:	005b      	lsls	r3, r3, #1
 800742e:	4413      	add	r3, r2
 8007430:	69ba      	ldr	r2, [r7, #24]
 8007432:	429a      	cmp	r2, r3
 8007434:	d305      	bcc.n	8007442 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800743c:	69ba      	ldr	r2, [r7, #24]
 800743e:	429a      	cmp	r2, r3
 8007440:	d903      	bls.n	800744a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007448:	e10e      	b.n	8007668 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800744a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744c:	2200      	movs	r2, #0
 800744e:	60bb      	str	r3, [r7, #8]
 8007450:	60fa      	str	r2, [r7, #12]
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007456:	4a3c      	ldr	r2, [pc, #240]	; (8007548 <UART_SetConfig+0x2fc>)
 8007458:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800745c:	b29b      	uxth	r3, r3
 800745e:	2200      	movs	r2, #0
 8007460:	603b      	str	r3, [r7, #0]
 8007462:	607a      	str	r2, [r7, #4]
 8007464:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007468:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800746c:	f7f9 fb84 	bl	8000b78 <__aeabi_uldivmod>
 8007470:	4602      	mov	r2, r0
 8007472:	460b      	mov	r3, r1
 8007474:	4610      	mov	r0, r2
 8007476:	4619      	mov	r1, r3
 8007478:	f04f 0200 	mov.w	r2, #0
 800747c:	f04f 0300 	mov.w	r3, #0
 8007480:	020b      	lsls	r3, r1, #8
 8007482:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007486:	0202      	lsls	r2, r0, #8
 8007488:	6979      	ldr	r1, [r7, #20]
 800748a:	6849      	ldr	r1, [r1, #4]
 800748c:	0849      	lsrs	r1, r1, #1
 800748e:	2000      	movs	r0, #0
 8007490:	460c      	mov	r4, r1
 8007492:	4605      	mov	r5, r0
 8007494:	eb12 0804 	adds.w	r8, r2, r4
 8007498:	eb43 0905 	adc.w	r9, r3, r5
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	469a      	mov	sl, r3
 80074a4:	4693      	mov	fp, r2
 80074a6:	4652      	mov	r2, sl
 80074a8:	465b      	mov	r3, fp
 80074aa:	4640      	mov	r0, r8
 80074ac:	4649      	mov	r1, r9
 80074ae:	f7f9 fb63 	bl	8000b78 <__aeabi_uldivmod>
 80074b2:	4602      	mov	r2, r0
 80074b4:	460b      	mov	r3, r1
 80074b6:	4613      	mov	r3, r2
 80074b8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80074ba:	6a3b      	ldr	r3, [r7, #32]
 80074bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074c0:	d308      	bcc.n	80074d4 <UART_SetConfig+0x288>
 80074c2:	6a3b      	ldr	r3, [r7, #32]
 80074c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074c8:	d204      	bcs.n	80074d4 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	6a3a      	ldr	r2, [r7, #32]
 80074d0:	60da      	str	r2, [r3, #12]
 80074d2:	e0c9      	b.n	8007668 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80074da:	e0c5      	b.n	8007668 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	69db      	ldr	r3, [r3, #28]
 80074e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074e4:	d16d      	bne.n	80075c2 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80074e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80074ea:	3b01      	subs	r3, #1
 80074ec:	2b07      	cmp	r3, #7
 80074ee:	d82d      	bhi.n	800754c <UART_SetConfig+0x300>
 80074f0:	a201      	add	r2, pc, #4	; (adr r2, 80074f8 <UART_SetConfig+0x2ac>)
 80074f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f6:	bf00      	nop
 80074f8:	08007519 	.word	0x08007519
 80074fc:	08007521 	.word	0x08007521
 8007500:	0800754d 	.word	0x0800754d
 8007504:	08007527 	.word	0x08007527
 8007508:	0800754d 	.word	0x0800754d
 800750c:	0800754d 	.word	0x0800754d
 8007510:	0800754d 	.word	0x0800754d
 8007514:	0800752f 	.word	0x0800752f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007518:	f7fe fd44 	bl	8005fa4 <HAL_RCC_GetPCLK2Freq>
 800751c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800751e:	e01b      	b.n	8007558 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007520:	4b08      	ldr	r3, [pc, #32]	; (8007544 <UART_SetConfig+0x2f8>)
 8007522:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007524:	e018      	b.n	8007558 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007526:	f7fe fca7 	bl	8005e78 <HAL_RCC_GetSysClockFreq>
 800752a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800752c:	e014      	b.n	8007558 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800752e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007532:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007534:	e010      	b.n	8007558 <UART_SetConfig+0x30c>
 8007536:	bf00      	nop
 8007538:	cfff69f3 	.word	0xcfff69f3
 800753c:	40008000 	.word	0x40008000
 8007540:	40013800 	.word	0x40013800
 8007544:	00f42400 	.word	0x00f42400
 8007548:	0800ee90 	.word	0x0800ee90
      default:
        pclk = 0U;
 800754c:	2300      	movs	r3, #0
 800754e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007556:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755a:	2b00      	cmp	r3, #0
 800755c:	f000 8084 	beq.w	8007668 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007564:	4a4b      	ldr	r2, [pc, #300]	; (8007694 <UART_SetConfig+0x448>)
 8007566:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800756a:	461a      	mov	r2, r3
 800756c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007572:	005a      	lsls	r2, r3, #1
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	085b      	lsrs	r3, r3, #1
 800757a:	441a      	add	r2, r3
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	fbb2 f3f3 	udiv	r3, r2, r3
 8007584:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007586:	6a3b      	ldr	r3, [r7, #32]
 8007588:	2b0f      	cmp	r3, #15
 800758a:	d916      	bls.n	80075ba <UART_SetConfig+0x36e>
 800758c:	6a3b      	ldr	r3, [r7, #32]
 800758e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007592:	d212      	bcs.n	80075ba <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007594:	6a3b      	ldr	r3, [r7, #32]
 8007596:	b29b      	uxth	r3, r3
 8007598:	f023 030f 	bic.w	r3, r3, #15
 800759c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800759e:	6a3b      	ldr	r3, [r7, #32]
 80075a0:	085b      	lsrs	r3, r3, #1
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	f003 0307 	and.w	r3, r3, #7
 80075a8:	b29a      	uxth	r2, r3
 80075aa:	8bfb      	ldrh	r3, [r7, #30]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	8bfa      	ldrh	r2, [r7, #30]
 80075b6:	60da      	str	r2, [r3, #12]
 80075b8:	e056      	b.n	8007668 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80075c0:	e052      	b.n	8007668 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80075c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80075c6:	3b01      	subs	r3, #1
 80075c8:	2b07      	cmp	r3, #7
 80075ca:	d822      	bhi.n	8007612 <UART_SetConfig+0x3c6>
 80075cc:	a201      	add	r2, pc, #4	; (adr r2, 80075d4 <UART_SetConfig+0x388>)
 80075ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d2:	bf00      	nop
 80075d4:	080075f5 	.word	0x080075f5
 80075d8:	080075fd 	.word	0x080075fd
 80075dc:	08007613 	.word	0x08007613
 80075e0:	08007603 	.word	0x08007603
 80075e4:	08007613 	.word	0x08007613
 80075e8:	08007613 	.word	0x08007613
 80075ec:	08007613 	.word	0x08007613
 80075f0:	0800760b 	.word	0x0800760b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075f4:	f7fe fcd6 	bl	8005fa4 <HAL_RCC_GetPCLK2Freq>
 80075f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80075fa:	e010      	b.n	800761e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075fc:	4b26      	ldr	r3, [pc, #152]	; (8007698 <UART_SetConfig+0x44c>)
 80075fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007600:	e00d      	b.n	800761e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007602:	f7fe fc39 	bl	8005e78 <HAL_RCC_GetSysClockFreq>
 8007606:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007608:	e009      	b.n	800761e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800760a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800760e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007610:	e005      	b.n	800761e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8007612:	2300      	movs	r3, #0
 8007614:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800761c:	bf00      	nop
    }

    if (pclk != 0U)
 800761e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007620:	2b00      	cmp	r3, #0
 8007622:	d021      	beq.n	8007668 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007628:	4a1a      	ldr	r2, [pc, #104]	; (8007694 <UART_SetConfig+0x448>)
 800762a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800762e:	461a      	mov	r2, r3
 8007630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007632:	fbb3 f2f2 	udiv	r2, r3, r2
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	085b      	lsrs	r3, r3, #1
 800763c:	441a      	add	r2, r3
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	fbb2 f3f3 	udiv	r3, r2, r3
 8007646:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007648:	6a3b      	ldr	r3, [r7, #32]
 800764a:	2b0f      	cmp	r3, #15
 800764c:	d909      	bls.n	8007662 <UART_SetConfig+0x416>
 800764e:	6a3b      	ldr	r3, [r7, #32]
 8007650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007654:	d205      	bcs.n	8007662 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007656:	6a3b      	ldr	r3, [r7, #32]
 8007658:	b29a      	uxth	r2, r3
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	60da      	str	r2, [r3, #12]
 8007660:	e002      	b.n	8007668 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	2201      	movs	r2, #1
 800766c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	2201      	movs	r2, #1
 8007674:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	2200      	movs	r2, #0
 800767c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	2200      	movs	r2, #0
 8007682:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007684:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007688:	4618      	mov	r0, r3
 800768a:	3730      	adds	r7, #48	; 0x30
 800768c:	46bd      	mov	sp, r7
 800768e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007692:	bf00      	nop
 8007694:	0800ee90 	.word	0x0800ee90
 8007698:	00f42400 	.word	0x00f42400

0800769c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a8:	f003 0308 	and.w	r3, r3, #8
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00a      	beq.n	80076c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	430a      	orrs	r2, r1
 80076c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ca:	f003 0301 	and.w	r3, r3, #1
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00a      	beq.n	80076e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	430a      	orrs	r2, r1
 80076e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ec:	f003 0302 	and.w	r3, r3, #2
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00a      	beq.n	800770a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	430a      	orrs	r2, r1
 8007708:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800770e:	f003 0304 	and.w	r3, r3, #4
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00a      	beq.n	800772c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	430a      	orrs	r2, r1
 800772a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007730:	f003 0310 	and.w	r3, r3, #16
 8007734:	2b00      	cmp	r3, #0
 8007736:	d00a      	beq.n	800774e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	430a      	orrs	r2, r1
 800774c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007752:	f003 0320 	and.w	r3, r3, #32
 8007756:	2b00      	cmp	r3, #0
 8007758:	d00a      	beq.n	8007770 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	430a      	orrs	r2, r1
 800776e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007778:	2b00      	cmp	r3, #0
 800777a:	d01a      	beq.n	80077b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	430a      	orrs	r2, r1
 8007790:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007796:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800779a:	d10a      	bne.n	80077b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	430a      	orrs	r2, r1
 80077b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00a      	beq.n	80077d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	430a      	orrs	r2, r1
 80077d2:	605a      	str	r2, [r3, #4]
  }
}
 80077d4:	bf00      	nop
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b098      	sub	sp, #96	; 0x60
 80077e4:	af02      	add	r7, sp, #8
 80077e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80077f0:	f7fc fc10 	bl	8004014 <HAL_GetTick>
 80077f4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f003 0308 	and.w	r3, r3, #8
 8007800:	2b08      	cmp	r3, #8
 8007802:	d12f      	bne.n	8007864 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007804:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007808:	9300      	str	r3, [sp, #0]
 800780a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800780c:	2200      	movs	r2, #0
 800780e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f88e 	bl	8007934 <UART_WaitOnFlagUntilTimeout>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d022      	beq.n	8007864 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007826:	e853 3f00 	ldrex	r3, [r3]
 800782a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800782c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800782e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007832:	653b      	str	r3, [r7, #80]	; 0x50
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	461a      	mov	r2, r3
 800783a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800783c:	647b      	str	r3, [r7, #68]	; 0x44
 800783e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007840:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007842:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007844:	e841 2300 	strex	r3, r2, [r1]
 8007848:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800784a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800784c:	2b00      	cmp	r3, #0
 800784e:	d1e6      	bne.n	800781e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2220      	movs	r2, #32
 8007854:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007860:	2303      	movs	r3, #3
 8007862:	e063      	b.n	800792c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 0304 	and.w	r3, r3, #4
 800786e:	2b04      	cmp	r3, #4
 8007870:	d149      	bne.n	8007906 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007872:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007876:	9300      	str	r3, [sp, #0]
 8007878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800787a:	2200      	movs	r2, #0
 800787c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 f857 	bl	8007934 <UART_WaitOnFlagUntilTimeout>
 8007886:	4603      	mov	r3, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d03c      	beq.n	8007906 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007894:	e853 3f00 	ldrex	r3, [r3]
 8007898:	623b      	str	r3, [r7, #32]
   return(result);
 800789a:	6a3b      	ldr	r3, [r7, #32]
 800789c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	461a      	mov	r2, r3
 80078a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078aa:	633b      	str	r3, [r7, #48]	; 0x30
 80078ac:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078b2:	e841 2300 	strex	r3, r2, [r1]
 80078b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d1e6      	bne.n	800788c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	3308      	adds	r3, #8
 80078c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	e853 3f00 	ldrex	r3, [r3]
 80078cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f023 0301 	bic.w	r3, r3, #1
 80078d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	3308      	adds	r3, #8
 80078dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078de:	61fa      	str	r2, [r7, #28]
 80078e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e2:	69b9      	ldr	r1, [r7, #24]
 80078e4:	69fa      	ldr	r2, [r7, #28]
 80078e6:	e841 2300 	strex	r3, r2, [r1]
 80078ea:	617b      	str	r3, [r7, #20]
   return(result);
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d1e5      	bne.n	80078be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2220      	movs	r2, #32
 80078f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007902:	2303      	movs	r3, #3
 8007904:	e012      	b.n	800792c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2220      	movs	r2, #32
 800790a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2220      	movs	r2, #32
 8007912:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800792a:	2300      	movs	r3, #0
}
 800792c:	4618      	mov	r0, r3
 800792e:	3758      	adds	r7, #88	; 0x58
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	603b      	str	r3, [r7, #0]
 8007940:	4613      	mov	r3, r2
 8007942:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007944:	e049      	b.n	80079da <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800794c:	d045      	beq.n	80079da <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800794e:	f7fc fb61 	bl	8004014 <HAL_GetTick>
 8007952:	4602      	mov	r2, r0
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	1ad3      	subs	r3, r2, r3
 8007958:	69ba      	ldr	r2, [r7, #24]
 800795a:	429a      	cmp	r2, r3
 800795c:	d302      	bcc.n	8007964 <UART_WaitOnFlagUntilTimeout+0x30>
 800795e:	69bb      	ldr	r3, [r7, #24]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d101      	bne.n	8007968 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007964:	2303      	movs	r3, #3
 8007966:	e048      	b.n	80079fa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f003 0304 	and.w	r3, r3, #4
 8007972:	2b00      	cmp	r3, #0
 8007974:	d031      	beq.n	80079da <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	69db      	ldr	r3, [r3, #28]
 800797c:	f003 0308 	and.w	r3, r3, #8
 8007980:	2b08      	cmp	r3, #8
 8007982:	d110      	bne.n	80079a6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2208      	movs	r2, #8
 800798a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f000 f99c 	bl	8007cca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2208      	movs	r2, #8
 8007996:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2200      	movs	r2, #0
 800799e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	e029      	b.n	80079fa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	69db      	ldr	r3, [r3, #28]
 80079ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079b4:	d111      	bne.n	80079da <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80079be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80079c0:	68f8      	ldr	r0, [r7, #12]
 80079c2:	f000 f982 	bl	8007cca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2220      	movs	r2, #32
 80079ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80079d6:	2303      	movs	r3, #3
 80079d8:	e00f      	b.n	80079fa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	69da      	ldr	r2, [r3, #28]
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	4013      	ands	r3, r2
 80079e4:	68ba      	ldr	r2, [r7, #8]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	bf0c      	ite	eq
 80079ea:	2301      	moveq	r3, #1
 80079ec:	2300      	movne	r3, #0
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	461a      	mov	r2, r3
 80079f2:	79fb      	ldrb	r3, [r7, #7]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d0a6      	beq.n	8007946 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3710      	adds	r7, #16
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
	...

08007a04 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b0a3      	sub	sp, #140	; 0x8c
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	4613      	mov	r3, r2
 8007a10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	68ba      	ldr	r2, [r7, #8]
 8007a16:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	88fa      	ldrh	r2, [r7, #6]
 8007a1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	88fa      	ldrh	r2, [r7, #6]
 8007a24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a36:	d10e      	bne.n	8007a56 <UART_Start_Receive_IT+0x52>
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	691b      	ldr	r3, [r3, #16]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d105      	bne.n	8007a4c <UART_Start_Receive_IT+0x48>
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007a46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007a4a:	e02d      	b.n	8007aa8 <UART_Start_Receive_IT+0xa4>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	22ff      	movs	r2, #255	; 0xff
 8007a50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007a54:	e028      	b.n	8007aa8 <UART_Start_Receive_IT+0xa4>
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d10d      	bne.n	8007a7a <UART_Start_Receive_IT+0x76>
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	691b      	ldr	r3, [r3, #16]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d104      	bne.n	8007a70 <UART_Start_Receive_IT+0x6c>
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	22ff      	movs	r2, #255	; 0xff
 8007a6a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007a6e:	e01b      	b.n	8007aa8 <UART_Start_Receive_IT+0xa4>
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	227f      	movs	r2, #127	; 0x7f
 8007a74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007a78:	e016      	b.n	8007aa8 <UART_Start_Receive_IT+0xa4>
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a82:	d10d      	bne.n	8007aa0 <UART_Start_Receive_IT+0x9c>
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	691b      	ldr	r3, [r3, #16]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d104      	bne.n	8007a96 <UART_Start_Receive_IT+0x92>
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	227f      	movs	r2, #127	; 0x7f
 8007a90:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007a94:	e008      	b.n	8007aa8 <UART_Start_Receive_IT+0xa4>
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	223f      	movs	r2, #63	; 0x3f
 8007a9a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007a9e:	e003      	b.n	8007aa8 <UART_Start_Receive_IT+0xa4>
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2222      	movs	r2, #34	; 0x22
 8007ab4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	3308      	adds	r3, #8
 8007abe:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ac2:	e853 3f00 	ldrex	r3, [r3]
 8007ac6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007ac8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007aca:	f043 0301 	orr.w	r3, r3, #1
 8007ace:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	3308      	adds	r3, #8
 8007ad8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007adc:	673a      	str	r2, [r7, #112]	; 0x70
 8007ade:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007ae2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007ae4:	e841 2300 	strex	r3, r2, [r1]
 8007ae8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007aea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d1e3      	bne.n	8007ab8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007af4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007af8:	d14f      	bne.n	8007b9a <UART_Start_Receive_IT+0x196>
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007b00:	88fa      	ldrh	r2, [r7, #6]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d349      	bcc.n	8007b9a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b0e:	d107      	bne.n	8007b20 <UART_Start_Receive_IT+0x11c>
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	691b      	ldr	r3, [r3, #16]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d103      	bne.n	8007b20 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	4a47      	ldr	r2, [pc, #284]	; (8007c38 <UART_Start_Receive_IT+0x234>)
 8007b1c:	675a      	str	r2, [r3, #116]	; 0x74
 8007b1e:	e002      	b.n	8007b26 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	4a46      	ldr	r2, [pc, #280]	; (8007c3c <UART_Start_Receive_IT+0x238>)
 8007b24:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	691b      	ldr	r3, [r3, #16]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d01a      	beq.n	8007b64 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b36:	e853 3f00 	ldrex	r3, [r3]
 8007b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007b50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b52:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b54:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b56:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007b58:	e841 2300 	strex	r3, r2, [r1]
 8007b5c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007b5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d1e4      	bne.n	8007b2e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	3308      	adds	r3, #8
 8007b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b6e:	e853 3f00 	ldrex	r3, [r3]
 8007b72:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b7a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	3308      	adds	r3, #8
 8007b82:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007b84:	64ba      	str	r2, [r7, #72]	; 0x48
 8007b86:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b88:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007b8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b8c:	e841 2300 	strex	r3, r2, [r1]
 8007b90:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d1e5      	bne.n	8007b64 <UART_Start_Receive_IT+0x160>
 8007b98:	e046      	b.n	8007c28 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ba2:	d107      	bne.n	8007bb4 <UART_Start_Receive_IT+0x1b0>
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d103      	bne.n	8007bb4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	4a24      	ldr	r2, [pc, #144]	; (8007c40 <UART_Start_Receive_IT+0x23c>)
 8007bb0:	675a      	str	r2, [r3, #116]	; 0x74
 8007bb2:	e002      	b.n	8007bba <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	4a23      	ldr	r2, [pc, #140]	; (8007c44 <UART_Start_Receive_IT+0x240>)
 8007bb8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	691b      	ldr	r3, [r3, #16]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d019      	beq.n	8007bf6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bca:	e853 3f00 	ldrex	r3, [r3]
 8007bce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007bd6:	677b      	str	r3, [r7, #116]	; 0x74
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	461a      	mov	r2, r3
 8007bde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007be0:	637b      	str	r3, [r7, #52]	; 0x34
 8007be2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007be6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007be8:	e841 2300 	strex	r3, r2, [r1]
 8007bec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d1e6      	bne.n	8007bc2 <UART_Start_Receive_IT+0x1be>
 8007bf4:	e018      	b.n	8007c28 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	e853 3f00 	ldrex	r3, [r3]
 8007c02:	613b      	str	r3, [r7, #16]
   return(result);
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	f043 0320 	orr.w	r3, r3, #32
 8007c0a:	67bb      	str	r3, [r7, #120]	; 0x78
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	461a      	mov	r2, r3
 8007c12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c14:	623b      	str	r3, [r7, #32]
 8007c16:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c18:	69f9      	ldr	r1, [r7, #28]
 8007c1a:	6a3a      	ldr	r2, [r7, #32]
 8007c1c:	e841 2300 	strex	r3, r2, [r1]
 8007c20:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c22:	69bb      	ldr	r3, [r7, #24]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d1e6      	bne.n	8007bf6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	378c      	adds	r7, #140	; 0x8c
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr
 8007c36:	bf00      	nop
 8007c38:	08008621 	.word	0x08008621
 8007c3c:	080082c1 	.word	0x080082c1
 8007c40:	08008109 	.word	0x08008109
 8007c44:	08007f51 	.word	0x08007f51

08007c48 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b08f      	sub	sp, #60	; 0x3c
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c56:	6a3b      	ldr	r3, [r7, #32]
 8007c58:	e853 3f00 	ldrex	r3, [r3]
 8007c5c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007c64:	637b      	str	r3, [r7, #52]	; 0x34
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c70:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c76:	e841 2300 	strex	r3, r2, [r1]
 8007c7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d1e6      	bne.n	8007c50 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	3308      	adds	r3, #8
 8007c88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	e853 3f00 	ldrex	r3, [r3]
 8007c90:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007c98:	633b      	str	r3, [r7, #48]	; 0x30
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	3308      	adds	r3, #8
 8007ca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ca2:	61ba      	str	r2, [r7, #24]
 8007ca4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca6:	6979      	ldr	r1, [r7, #20]
 8007ca8:	69ba      	ldr	r2, [r7, #24]
 8007caa:	e841 2300 	strex	r3, r2, [r1]
 8007cae:	613b      	str	r3, [r7, #16]
   return(result);
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d1e5      	bne.n	8007c82 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2220      	movs	r2, #32
 8007cba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8007cbe:	bf00      	nop
 8007cc0:	373c      	adds	r7, #60	; 0x3c
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr

08007cca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007cca:	b480      	push	{r7}
 8007ccc:	b095      	sub	sp, #84	; 0x54
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cda:	e853 3f00 	ldrex	r3, [r3]
 8007cde:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	461a      	mov	r2, r3
 8007cee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cf0:	643b      	str	r3, [r7, #64]	; 0x40
 8007cf2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007cf6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007cf8:	e841 2300 	strex	r3, r2, [r1]
 8007cfc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d1e6      	bne.n	8007cd2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	3308      	adds	r3, #8
 8007d0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0c:	6a3b      	ldr	r3, [r7, #32]
 8007d0e:	e853 3f00 	ldrex	r3, [r3]
 8007d12:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d1a:	f023 0301 	bic.w	r3, r3, #1
 8007d1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	3308      	adds	r3, #8
 8007d26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d30:	e841 2300 	strex	r3, r2, [r1]
 8007d34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d1e3      	bne.n	8007d04 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d118      	bne.n	8007d76 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	e853 3f00 	ldrex	r3, [r3]
 8007d50:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	f023 0310 	bic.w	r3, r3, #16
 8007d58:	647b      	str	r3, [r7, #68]	; 0x44
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d62:	61bb      	str	r3, [r7, #24]
 8007d64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d66:	6979      	ldr	r1, [r7, #20]
 8007d68:	69ba      	ldr	r2, [r7, #24]
 8007d6a:	e841 2300 	strex	r3, r2, [r1]
 8007d6e:	613b      	str	r3, [r7, #16]
   return(result);
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1e6      	bne.n	8007d44 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2220      	movs	r2, #32
 8007d7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007d8a:	bf00      	nop
 8007d8c:	3754      	adds	r7, #84	; 0x54
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr

08007d96 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b090      	sub	sp, #64	; 0x40
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f003 0320 	and.w	r3, r3, #32
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d137      	bne.n	8007e22 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007db4:	2200      	movs	r2, #0
 8007db6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	3308      	adds	r3, #8
 8007dc0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc4:	e853 3f00 	ldrex	r3, [r3]
 8007dc8:	623b      	str	r3, [r7, #32]
   return(result);
 8007dca:	6a3b      	ldr	r3, [r7, #32]
 8007dcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8007dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	3308      	adds	r3, #8
 8007dd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dda:	633a      	str	r2, [r7, #48]	; 0x30
 8007ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007de0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007de2:	e841 2300 	strex	r3, r2, [r1]
 8007de6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d1e5      	bne.n	8007dba <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	e853 3f00 	ldrex	r3, [r3]
 8007dfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e02:	637b      	str	r3, [r7, #52]	; 0x34
 8007e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	461a      	mov	r2, r3
 8007e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e0c:	61fb      	str	r3, [r7, #28]
 8007e0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e10:	69b9      	ldr	r1, [r7, #24]
 8007e12:	69fa      	ldr	r2, [r7, #28]
 8007e14:	e841 2300 	strex	r3, r2, [r1]
 8007e18:	617b      	str	r3, [r7, #20]
   return(result);
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d1e6      	bne.n	8007dee <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007e20:	e002      	b.n	8007e28 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007e22:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007e24:	f7fa fbbe 	bl	80025a4 <HAL_UART_TxCpltCallback>
}
 8007e28:	bf00      	nop
 8007e2a:	3740      	adds	r7, #64	; 0x40
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e3c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f7ff f9e4 	bl	800720c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e44:	bf00      	nop
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b086      	sub	sp, #24
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e58:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e60:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e68:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e74:	2b80      	cmp	r3, #128	; 0x80
 8007e76:	d109      	bne.n	8007e8c <UART_DMAError+0x40>
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	2b21      	cmp	r3, #33	; 0x21
 8007e7c:	d106      	bne.n	8007e8c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007e86:	6978      	ldr	r0, [r7, #20]
 8007e88:	f7ff fede 	bl	8007c48 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e96:	2b40      	cmp	r3, #64	; 0x40
 8007e98:	d109      	bne.n	8007eae <UART_DMAError+0x62>
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2b22      	cmp	r3, #34	; 0x22
 8007e9e:	d106      	bne.n	8007eae <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8007ea8:	6978      	ldr	r0, [r7, #20]
 8007eaa:	f7ff ff0e 	bl	8007cca <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eb4:	f043 0210 	orr.w	r2, r3, #16
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ebe:	6978      	ldr	r0, [r7, #20]
 8007ec0:	f7ff f9ae 	bl	8007220 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ec4:	bf00      	nop
 8007ec6:	3718      	adds	r7, #24
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007eea:	68f8      	ldr	r0, [r7, #12]
 8007eec:	f7ff f998 	bl	8007220 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ef0:	bf00      	nop
 8007ef2:	3710      	adds	r7, #16
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b088      	sub	sp, #32
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	e853 3f00 	ldrex	r3, [r3]
 8007f0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f14:	61fb      	str	r3, [r7, #28]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	69fb      	ldr	r3, [r7, #28]
 8007f1e:	61bb      	str	r3, [r7, #24]
 8007f20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f22:	6979      	ldr	r1, [r7, #20]
 8007f24:	69ba      	ldr	r2, [r7, #24]
 8007f26:	e841 2300 	strex	r3, r2, [r1]
 8007f2a:	613b      	str	r3, [r7, #16]
   return(result);
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d1e6      	bne.n	8007f00 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2220      	movs	r2, #32
 8007f36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f7fa fb2f 	bl	80025a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f46:	bf00      	nop
 8007f48:	3720      	adds	r7, #32
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
	...

08007f50 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b09c      	sub	sp, #112	; 0x70
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007f5e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f68:	2b22      	cmp	r3, #34	; 0x22
 8007f6a:	f040 80be 	bne.w	80080ea <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f74:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007f78:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007f7c:	b2d9      	uxtb	r1, r3
 8007f7e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007f82:	b2da      	uxtb	r2, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f88:	400a      	ands	r2, r1
 8007f8a:	b2d2      	uxtb	r2, r2
 8007f8c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f92:	1c5a      	adds	r2, r3, #1
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	3b01      	subs	r3, #1
 8007fa2:	b29a      	uxth	r2, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	f040 80a1 	bne.w	80080fa <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fc0:	e853 3f00 	ldrex	r3, [r3]
 8007fc4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007fc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fcc:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007fd6:	65bb      	str	r3, [r7, #88]	; 0x58
 8007fd8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fda:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007fdc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007fde:	e841 2300 	strex	r3, r2, [r1]
 8007fe2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007fe4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d1e6      	bne.n	8007fb8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	3308      	adds	r3, #8
 8007ff0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff4:	e853 3f00 	ldrex	r3, [r3]
 8007ff8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ffc:	f023 0301 	bic.w	r3, r3, #1
 8008000:	667b      	str	r3, [r7, #100]	; 0x64
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	3308      	adds	r3, #8
 8008008:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800800a:	647a      	str	r2, [r7, #68]	; 0x44
 800800c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800800e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008010:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008012:	e841 2300 	strex	r3, r2, [r1]
 8008016:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800801a:	2b00      	cmp	r3, #0
 800801c:	d1e5      	bne.n	8007fea <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2220      	movs	r2, #32
 8008022:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a33      	ldr	r2, [pc, #204]	; (8008104 <UART_RxISR_8BIT+0x1b4>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d01f      	beq.n	800807c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008046:	2b00      	cmp	r3, #0
 8008048:	d018      	beq.n	800807c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008052:	e853 3f00 	ldrex	r3, [r3]
 8008056:	623b      	str	r3, [r7, #32]
   return(result);
 8008058:	6a3b      	ldr	r3, [r7, #32]
 800805a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800805e:	663b      	str	r3, [r7, #96]	; 0x60
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	461a      	mov	r2, r3
 8008066:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008068:	633b      	str	r3, [r7, #48]	; 0x30
 800806a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800806e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008070:	e841 2300 	strex	r3, r2, [r1]
 8008074:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008078:	2b00      	cmp	r3, #0
 800807a:	d1e6      	bne.n	800804a <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008080:	2b01      	cmp	r3, #1
 8008082:	d12e      	bne.n	80080e2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	e853 3f00 	ldrex	r3, [r3]
 8008096:	60fb      	str	r3, [r7, #12]
   return(result);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f023 0310 	bic.w	r3, r3, #16
 800809e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	461a      	mov	r2, r3
 80080a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080a8:	61fb      	str	r3, [r7, #28]
 80080aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ac:	69b9      	ldr	r1, [r7, #24]
 80080ae:	69fa      	ldr	r2, [r7, #28]
 80080b0:	e841 2300 	strex	r3, r2, [r1]
 80080b4:	617b      	str	r3, [r7, #20]
   return(result);
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d1e6      	bne.n	800808a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	69db      	ldr	r3, [r3, #28]
 80080c2:	f003 0310 	and.w	r3, r3, #16
 80080c6:	2b10      	cmp	r3, #16
 80080c8:	d103      	bne.n	80080d2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	2210      	movs	r2, #16
 80080d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80080d8:	4619      	mov	r1, r3
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f7ff f8aa 	bl	8007234 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80080e0:	e00b      	b.n	80080fa <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f7fa fa40 	bl	8002568 <HAL_UART_RxCpltCallback>
}
 80080e8:	e007      	b.n	80080fa <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	699a      	ldr	r2, [r3, #24]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f042 0208 	orr.w	r2, r2, #8
 80080f8:	619a      	str	r2, [r3, #24]
}
 80080fa:	bf00      	nop
 80080fc:	3770      	adds	r7, #112	; 0x70
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	40008000 	.word	0x40008000

08008108 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b09c      	sub	sp, #112	; 0x70
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008116:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008120:	2b22      	cmp	r3, #34	; 0x22
 8008122:	f040 80be 	bne.w	80082a2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008134:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008136:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800813a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800813e:	4013      	ands	r3, r2
 8008140:	b29a      	uxth	r2, r3
 8008142:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008144:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800814a:	1c9a      	adds	r2, r3, #2
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008156:	b29b      	uxth	r3, r3
 8008158:	3b01      	subs	r3, #1
 800815a:	b29a      	uxth	r2, r3
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008168:	b29b      	uxth	r3, r3
 800816a:	2b00      	cmp	r3, #0
 800816c:	f040 80a1 	bne.w	80082b2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008176:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008178:	e853 3f00 	ldrex	r3, [r3]
 800817c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800817e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008180:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008184:	667b      	str	r3, [r7, #100]	; 0x64
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	461a      	mov	r2, r3
 800818c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800818e:	657b      	str	r3, [r7, #84]	; 0x54
 8008190:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008192:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008194:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008196:	e841 2300 	strex	r3, r2, [r1]
 800819a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800819c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d1e6      	bne.n	8008170 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	3308      	adds	r3, #8
 80081a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ac:	e853 3f00 	ldrex	r3, [r3]
 80081b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80081b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b4:	f023 0301 	bic.w	r3, r3, #1
 80081b8:	663b      	str	r3, [r7, #96]	; 0x60
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	3308      	adds	r3, #8
 80081c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80081c2:	643a      	str	r2, [r7, #64]	; 0x40
 80081c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80081c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80081ca:	e841 2300 	strex	r3, r2, [r1]
 80081ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80081d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d1e5      	bne.n	80081a2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2220      	movs	r2, #32
 80081da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a33      	ldr	r2, [pc, #204]	; (80082bc <UART_RxISR_16BIT+0x1b4>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d01f      	beq.n	8008234 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d018      	beq.n	8008234 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008208:	6a3b      	ldr	r3, [r7, #32]
 800820a:	e853 3f00 	ldrex	r3, [r3]
 800820e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008216:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	461a      	mov	r2, r3
 800821e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008220:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008222:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008224:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008226:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008228:	e841 2300 	strex	r3, r2, [r1]
 800822c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800822e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008230:	2b00      	cmp	r3, #0
 8008232:	d1e6      	bne.n	8008202 <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008238:	2b01      	cmp	r3, #1
 800823a:	d12e      	bne.n	800829a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	e853 3f00 	ldrex	r3, [r3]
 800824e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	f023 0310 	bic.w	r3, r3, #16
 8008256:	65bb      	str	r3, [r7, #88]	; 0x58
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	461a      	mov	r2, r3
 800825e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008260:	61bb      	str	r3, [r7, #24]
 8008262:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008264:	6979      	ldr	r1, [r7, #20]
 8008266:	69ba      	ldr	r2, [r7, #24]
 8008268:	e841 2300 	strex	r3, r2, [r1]
 800826c:	613b      	str	r3, [r7, #16]
   return(result);
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d1e6      	bne.n	8008242 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	69db      	ldr	r3, [r3, #28]
 800827a:	f003 0310 	and.w	r3, r3, #16
 800827e:	2b10      	cmp	r3, #16
 8008280:	d103      	bne.n	800828a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	2210      	movs	r2, #16
 8008288:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008290:	4619      	mov	r1, r3
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f7fe ffce 	bl	8007234 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008298:	e00b      	b.n	80082b2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f7fa f964 	bl	8002568 <HAL_UART_RxCpltCallback>
}
 80082a0:	e007      	b.n	80082b2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	699a      	ldr	r2, [r3, #24]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f042 0208 	orr.w	r2, r2, #8
 80082b0:	619a      	str	r2, [r3, #24]
}
 80082b2:	bf00      	nop
 80082b4:	3770      	adds	r7, #112	; 0x70
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop
 80082bc:	40008000 	.word	0x40008000

080082c0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b0ac      	sub	sp, #176	; 0xb0
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80082ce:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	69db      	ldr	r3, [r3, #28]
 80082d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082f6:	2b22      	cmp	r3, #34	; 0x22
 80082f8:	f040 8182 	bne.w	8008600 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008302:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008306:	e125      	b.n	8008554 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800830e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008312:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8008316:	b2d9      	uxtb	r1, r3
 8008318:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800831c:	b2da      	uxtb	r2, r3
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008322:	400a      	ands	r2, r1
 8008324:	b2d2      	uxtb	r2, r2
 8008326:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800832c:	1c5a      	adds	r2, r3, #1
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008338:	b29b      	uxth	r3, r3
 800833a:	3b01      	subs	r3, #1
 800833c:	b29a      	uxth	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	69db      	ldr	r3, [r3, #28]
 800834a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800834e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008352:	f003 0307 	and.w	r3, r3, #7
 8008356:	2b00      	cmp	r3, #0
 8008358:	d053      	beq.n	8008402 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800835a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800835e:	f003 0301 	and.w	r3, r3, #1
 8008362:	2b00      	cmp	r3, #0
 8008364:	d011      	beq.n	800838a <UART_RxISR_8BIT_FIFOEN+0xca>
 8008366:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800836a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800836e:	2b00      	cmp	r3, #0
 8008370:	d00b      	beq.n	800838a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	2201      	movs	r2, #1
 8008378:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008380:	f043 0201 	orr.w	r2, r3, #1
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800838a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800838e:	f003 0302 	and.w	r3, r3, #2
 8008392:	2b00      	cmp	r3, #0
 8008394:	d011      	beq.n	80083ba <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008396:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800839a:	f003 0301 	and.w	r3, r3, #1
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d00b      	beq.n	80083ba <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	2202      	movs	r2, #2
 80083a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083b0:	f043 0204 	orr.w	r2, r3, #4
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083be:	f003 0304 	and.w	r3, r3, #4
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d011      	beq.n	80083ea <UART_RxISR_8BIT_FIFOEN+0x12a>
 80083c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80083ca:	f003 0301 	and.w	r3, r3, #1
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d00b      	beq.n	80083ea <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2204      	movs	r2, #4
 80083d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083e0:	f043 0202 	orr.w	r2, r3, #2
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d006      	beq.n	8008402 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f7fe ff13 	bl	8007220 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008408:	b29b      	uxth	r3, r3
 800840a:	2b00      	cmp	r3, #0
 800840c:	f040 80a2 	bne.w	8008554 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008416:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008418:	e853 3f00 	ldrex	r3, [r3]
 800841c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800841e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008420:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008424:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	461a      	mov	r2, r3
 800842e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008432:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008434:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008436:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008438:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800843a:	e841 2300 	strex	r3, r2, [r1]
 800843e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8008440:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008442:	2b00      	cmp	r3, #0
 8008444:	d1e4      	bne.n	8008410 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	3308      	adds	r3, #8
 800844c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800844e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008450:	e853 3f00 	ldrex	r3, [r3]
 8008454:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008456:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008458:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800845c:	f023 0301 	bic.w	r3, r3, #1
 8008460:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	3308      	adds	r3, #8
 800846a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800846e:	66ba      	str	r2, [r7, #104]	; 0x68
 8008470:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008472:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008474:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008476:	e841 2300 	strex	r3, r2, [r1]
 800847a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800847c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800847e:	2b00      	cmp	r3, #0
 8008480:	d1e1      	bne.n	8008446 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2220      	movs	r2, #32
 8008486:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2200      	movs	r2, #0
 800848e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a5f      	ldr	r2, [pc, #380]	; (8008618 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d021      	beq.n	80084e4 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d01a      	beq.n	80084e4 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084b6:	e853 3f00 	ldrex	r3, [r3]
 80084ba:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80084bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80084c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	461a      	mov	r2, r3
 80084cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80084d0:	657b      	str	r3, [r7, #84]	; 0x54
 80084d2:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80084d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80084d8:	e841 2300 	strex	r3, r2, [r1]
 80084dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80084de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d1e4      	bne.n	80084ae <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d130      	bne.n	800854e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084fa:	e853 3f00 	ldrex	r3, [r3]
 80084fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008502:	f023 0310 	bic.w	r3, r3, #16
 8008506:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	461a      	mov	r2, r3
 8008510:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008514:	643b      	str	r3, [r7, #64]	; 0x40
 8008516:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008518:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800851a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800851c:	e841 2300 	strex	r3, r2, [r1]
 8008520:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008524:	2b00      	cmp	r3, #0
 8008526:	d1e4      	bne.n	80084f2 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	69db      	ldr	r3, [r3, #28]
 800852e:	f003 0310 	and.w	r3, r3, #16
 8008532:	2b10      	cmp	r3, #16
 8008534:	d103      	bne.n	800853e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2210      	movs	r2, #16
 800853c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008544:	4619      	mov	r1, r3
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f7fe fe74 	bl	8007234 <HAL_UARTEx_RxEventCallback>
 800854c:	e002      	b.n	8008554 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f7fa f80a 	bl	8002568 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008554:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8008558:	2b00      	cmp	r3, #0
 800855a:	d006      	beq.n	800856a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800855c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008560:	f003 0320 	and.w	r3, r3, #32
 8008564:	2b00      	cmp	r3, #0
 8008566:	f47f aecf 	bne.w	8008308 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008570:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008574:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008578:	2b00      	cmp	r3, #0
 800857a:	d049      	beq.n	8008610 <UART_RxISR_8BIT_FIFOEN+0x350>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008582:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8008586:	429a      	cmp	r2, r3
 8008588:	d242      	bcs.n	8008610 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	3308      	adds	r3, #8
 8008590:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008592:	6a3b      	ldr	r3, [r7, #32]
 8008594:	e853 3f00 	ldrex	r3, [r3]
 8008598:	61fb      	str	r3, [r7, #28]
   return(result);
 800859a:	69fb      	ldr	r3, [r7, #28]
 800859c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	3308      	adds	r3, #8
 80085aa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80085ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80085b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085b6:	e841 2300 	strex	r3, r2, [r1]
 80085ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d1e3      	bne.n	800858a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	4a15      	ldr	r2, [pc, #84]	; (800861c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80085c6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	e853 3f00 	ldrex	r3, [r3]
 80085d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	f043 0320 	orr.w	r3, r3, #32
 80085dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	461a      	mov	r2, r3
 80085e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80085ea:	61bb      	str	r3, [r7, #24]
 80085ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ee:	6979      	ldr	r1, [r7, #20]
 80085f0:	69ba      	ldr	r2, [r7, #24]
 80085f2:	e841 2300 	strex	r3, r2, [r1]
 80085f6:	613b      	str	r3, [r7, #16]
   return(result);
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d1e4      	bne.n	80085c8 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80085fe:	e007      	b.n	8008610 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	699a      	ldr	r2, [r3, #24]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f042 0208 	orr.w	r2, r2, #8
 800860e:	619a      	str	r2, [r3, #24]
}
 8008610:	bf00      	nop
 8008612:	37b0      	adds	r7, #176	; 0xb0
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	40008000 	.word	0x40008000
 800861c:	08007f51 	.word	0x08007f51

08008620 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b0ae      	sub	sp, #184	; 0xb8
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800862e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	69db      	ldr	r3, [r3, #28]
 8008638:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008656:	2b22      	cmp	r3, #34	; 0x22
 8008658:	f040 8186 	bne.w	8008968 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008662:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008666:	e129      	b.n	80088bc <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008676:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800867a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800867e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008682:	4013      	ands	r3, r2
 8008684:	b29a      	uxth	r2, r3
 8008686:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800868a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008690:	1c9a      	adds	r2, r3, #2
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800869c:	b29b      	uxth	r3, r3
 800869e:	3b01      	subs	r3, #1
 80086a0:	b29a      	uxth	r2, r3
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	69db      	ldr	r3, [r3, #28]
 80086ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80086b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80086b6:	f003 0307 	and.w	r3, r3, #7
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d053      	beq.n	8008766 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80086be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80086c2:	f003 0301 	and.w	r3, r3, #1
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d011      	beq.n	80086ee <UART_RxISR_16BIT_FIFOEN+0xce>
 80086ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d00b      	beq.n	80086ee <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	2201      	movs	r2, #1
 80086dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086e4:	f043 0201 	orr.w	r2, r3, #1
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80086ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80086f2:	f003 0302 	and.w	r3, r3, #2
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d011      	beq.n	800871e <UART_RxISR_16BIT_FIFOEN+0xfe>
 80086fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80086fe:	f003 0301 	and.w	r3, r3, #1
 8008702:	2b00      	cmp	r3, #0
 8008704:	d00b      	beq.n	800871e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	2202      	movs	r2, #2
 800870c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008714:	f043 0204 	orr.w	r2, r3, #4
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800871e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008722:	f003 0304 	and.w	r3, r3, #4
 8008726:	2b00      	cmp	r3, #0
 8008728:	d011      	beq.n	800874e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800872a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800872e:	f003 0301 	and.w	r3, r3, #1
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00b      	beq.n	800874e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	2204      	movs	r2, #4
 800873c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008744:	f043 0202 	orr.w	r2, r3, #2
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008754:	2b00      	cmp	r3, #0
 8008756:	d006      	beq.n	8008766 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f7fe fd61 	bl	8007220 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800876c:	b29b      	uxth	r3, r3
 800876e:	2b00      	cmp	r3, #0
 8008770:	f040 80a4 	bne.w	80088bc <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800877c:	e853 3f00 	ldrex	r3, [r3]
 8008780:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008782:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008784:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008788:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	461a      	mov	r2, r3
 8008792:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008796:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800879a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800879e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80087a2:	e841 2300 	strex	r3, r2, [r1]
 80087a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80087a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d1e2      	bne.n	8008774 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	3308      	adds	r3, #8
 80087b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087b8:	e853 3f00 	ldrex	r3, [r3]
 80087bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80087be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087c4:	f023 0301 	bic.w	r3, r3, #1
 80087c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	3308      	adds	r3, #8
 80087d2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80087d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80087d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80087dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80087de:	e841 2300 	strex	r3, r2, [r1]
 80087e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80087e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d1e1      	bne.n	80087ae <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2220      	movs	r2, #32
 80087ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a5f      	ldr	r2, [pc, #380]	; (8008980 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d021      	beq.n	800884c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008812:	2b00      	cmp	r3, #0
 8008814:	d01a      	beq.n	800884c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800881c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800881e:	e853 3f00 	ldrex	r3, [r3]
 8008822:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008824:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008826:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800882a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	461a      	mov	r2, r3
 8008834:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008838:	65bb      	str	r3, [r7, #88]	; 0x58
 800883a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800883c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800883e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008840:	e841 2300 	strex	r3, r2, [r1]
 8008844:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008848:	2b00      	cmp	r3, #0
 800884a:	d1e4      	bne.n	8008816 <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008850:	2b01      	cmp	r3, #1
 8008852:	d130      	bne.n	80088b6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008862:	e853 3f00 	ldrex	r3, [r3]
 8008866:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800886a:	f023 0310 	bic.w	r3, r3, #16
 800886e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	461a      	mov	r2, r3
 8008878:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800887c:	647b      	str	r3, [r7, #68]	; 0x44
 800887e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008880:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008882:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008884:	e841 2300 	strex	r3, r2, [r1]
 8008888:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800888a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800888c:	2b00      	cmp	r3, #0
 800888e:	d1e4      	bne.n	800885a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	69db      	ldr	r3, [r3, #28]
 8008896:	f003 0310 	and.w	r3, r3, #16
 800889a:	2b10      	cmp	r3, #16
 800889c:	d103      	bne.n	80088a6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	2210      	movs	r2, #16
 80088a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80088ac:	4619      	mov	r1, r3
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f7fe fcc0 	bl	8007234 <HAL_UARTEx_RxEventCallback>
 80088b4:	e002      	b.n	80088bc <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f7f9 fe56 	bl	8002568 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80088bc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d006      	beq.n	80088d2 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80088c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80088c8:	f003 0320 	and.w	r3, r3, #32
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	f47f aecb 	bne.w	8008668 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088d8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80088dc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d049      	beq.n	8008978 <UART_RxISR_16BIT_FIFOEN+0x358>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80088ea:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d242      	bcs.n	8008978 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	3308      	adds	r3, #8
 80088f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fc:	e853 3f00 	ldrex	r3, [r3]
 8008900:	623b      	str	r3, [r7, #32]
   return(result);
 8008902:	6a3b      	ldr	r3, [r7, #32]
 8008904:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008908:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	3308      	adds	r3, #8
 8008912:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008916:	633a      	str	r2, [r7, #48]	; 0x30
 8008918:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800891c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800891e:	e841 2300 	strex	r3, r2, [r1]
 8008922:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008926:	2b00      	cmp	r3, #0
 8008928:	d1e3      	bne.n	80088f2 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	4a15      	ldr	r2, [pc, #84]	; (8008984 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800892e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	e853 3f00 	ldrex	r3, [r3]
 800893c:	60fb      	str	r3, [r7, #12]
   return(result);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f043 0320 	orr.w	r3, r3, #32
 8008944:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	461a      	mov	r2, r3
 800894e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008952:	61fb      	str	r3, [r7, #28]
 8008954:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008956:	69b9      	ldr	r1, [r7, #24]
 8008958:	69fa      	ldr	r2, [r7, #28]
 800895a:	e841 2300 	strex	r3, r2, [r1]
 800895e:	617b      	str	r3, [r7, #20]
   return(result);
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d1e4      	bne.n	8008930 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008966:	e007      	b.n	8008978 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	699a      	ldr	r2, [r3, #24]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f042 0208 	orr.w	r2, r2, #8
 8008976:	619a      	str	r2, [r3, #24]
}
 8008978:	bf00      	nop
 800897a:	37b8      	adds	r7, #184	; 0xb8
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}
 8008980:	40008000 	.word	0x40008000
 8008984:	08008109 	.word	0x08008109

08008988 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008990:	bf00      	nop
 8008992:	370c      	adds	r7, #12
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr

0800899c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800899c:	b480      	push	{r7}
 800899e:	b083      	sub	sp, #12
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80089a4:	bf00      	nop
 80089a6:	370c      	adds	r7, #12
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr

080089b0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b083      	sub	sp, #12
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80089b8:	bf00      	nop
 80089ba:	370c      	adds	r7, #12
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d101      	bne.n	80089da <HAL_UARTEx_DisableFifoMode+0x16>
 80089d6:	2302      	movs	r3, #2
 80089d8:	e027      	b.n	8008a2a <HAL_UARTEx_DisableFifoMode+0x66>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2201      	movs	r2, #1
 80089de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2224      	movs	r2, #36	; 0x24
 80089e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f022 0201 	bic.w	r2, r2, #1
 8008a00:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008a08:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	68fa      	ldr	r2, [r7, #12]
 8008a16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2220      	movs	r2, #32
 8008a1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008a28:	2300      	movs	r3, #0
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3714      	adds	r7, #20
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr

08008a36 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a36:	b580      	push	{r7, lr}
 8008a38:	b084      	sub	sp, #16
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
 8008a3e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d101      	bne.n	8008a4e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008a4a:	2302      	movs	r3, #2
 8008a4c:	e02d      	b.n	8008aaa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2201      	movs	r2, #1
 8008a52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2224      	movs	r2, #36	; 0x24
 8008a5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f022 0201 	bic.w	r2, r2, #1
 8008a74:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	683a      	ldr	r2, [r7, #0]
 8008a86:	430a      	orrs	r2, r1
 8008a88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 f850 	bl	8008b30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	68fa      	ldr	r2, [r7, #12]
 8008a96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2220      	movs	r2, #32
 8008a9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008aa8:	2300      	movs	r3, #0
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3710      	adds	r7, #16
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}

08008ab2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ab2:	b580      	push	{r7, lr}
 8008ab4:	b084      	sub	sp, #16
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	6078      	str	r0, [r7, #4]
 8008aba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	d101      	bne.n	8008aca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008ac6:	2302      	movs	r3, #2
 8008ac8:	e02d      	b.n	8008b26 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2201      	movs	r2, #1
 8008ace:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2224      	movs	r2, #36	; 0x24
 8008ad6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f022 0201 	bic.w	r2, r2, #1
 8008af0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	689b      	ldr	r3, [r3, #8]
 8008af8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	683a      	ldr	r2, [r7, #0]
 8008b02:	430a      	orrs	r2, r1
 8008b04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 f812 	bl	8008b30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2220      	movs	r2, #32
 8008b18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008b24:	2300      	movs	r3, #0
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3710      	adds	r7, #16
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
	...

08008b30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b085      	sub	sp, #20
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d108      	bne.n	8008b52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2201      	movs	r2, #1
 8008b44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008b50:	e031      	b.n	8008bb6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008b52:	2308      	movs	r3, #8
 8008b54:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008b56:	2308      	movs	r3, #8
 8008b58:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	0e5b      	lsrs	r3, r3, #25
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	f003 0307 	and.w	r3, r3, #7
 8008b68:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	0f5b      	lsrs	r3, r3, #29
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	f003 0307 	and.w	r3, r3, #7
 8008b78:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b7a:	7bbb      	ldrb	r3, [r7, #14]
 8008b7c:	7b3a      	ldrb	r2, [r7, #12]
 8008b7e:	4911      	ldr	r1, [pc, #68]	; (8008bc4 <UARTEx_SetNbDataToProcess+0x94>)
 8008b80:	5c8a      	ldrb	r2, [r1, r2]
 8008b82:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008b86:	7b3a      	ldrb	r2, [r7, #12]
 8008b88:	490f      	ldr	r1, [pc, #60]	; (8008bc8 <UARTEx_SetNbDataToProcess+0x98>)
 8008b8a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b8c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b90:	b29a      	uxth	r2, r3
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b98:	7bfb      	ldrb	r3, [r7, #15]
 8008b9a:	7b7a      	ldrb	r2, [r7, #13]
 8008b9c:	4909      	ldr	r1, [pc, #36]	; (8008bc4 <UARTEx_SetNbDataToProcess+0x94>)
 8008b9e:	5c8a      	ldrb	r2, [r1, r2]
 8008ba0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008ba4:	7b7a      	ldrb	r2, [r7, #13]
 8008ba6:	4908      	ldr	r1, [pc, #32]	; (8008bc8 <UARTEx_SetNbDataToProcess+0x98>)
 8008ba8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008baa:	fb93 f3f2 	sdiv	r3, r3, r2
 8008bae:	b29a      	uxth	r2, r3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008bb6:	bf00      	nop
 8008bb8:	3714      	adds	r7, #20
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc0:	4770      	bx	lr
 8008bc2:	bf00      	nop
 8008bc4:	0800eea8 	.word	0x0800eea8
 8008bc8:	0800eeb0 	.word	0x0800eeb0

08008bcc <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b0cc      	sub	sp, #304	; 0x130
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bd8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008bdc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8008bde:	f107 0310 	add.w	r3, r7, #16
 8008be2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008be6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bea:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008bee:	2200      	movs	r2, #0
 8008bf0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8008bf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bfc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008c00:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008c04:	7812      	ldrb	r2, [r2, #0]
 8008c06:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008c08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008c12:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008c16:	2218      	movs	r2, #24
 8008c18:	2100      	movs	r1, #0
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f001 f82a 	bl	8009c74 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008c20:	233f      	movs	r3, #63	; 0x3f
 8008c22:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8008c26:	2385      	movs	r3, #133	; 0x85
 8008c28:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008c2c:	f107 0310 	add.w	r3, r7, #16
 8008c30:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008c34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c38:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008c3c:	f107 030f 	add.w	r3, r7, #15
 8008c40:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008c44:	2301      	movs	r3, #1
 8008c46:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008c4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008c4e:	2100      	movs	r1, #0
 8008c50:	4618      	mov	r0, r3
 8008c52:	f000 fecd 	bl	80099f0 <hci_send_req>
 8008c56:	4603      	mov	r3, r0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	da01      	bge.n	8008c60 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8008c5c:	23ff      	movs	r3, #255	; 0xff
 8008c5e:	e004      	b.n	8008c6a <aci_gap_set_io_capability+0x9e>
  return status;
 8008c60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c64:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008c68:	781b      	ldrb	r3, [r3, #0]
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8008c74:	b5b0      	push	{r4, r5, r7, lr}
 8008c76:	b0cc      	sub	sp, #304	; 0x130
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	4605      	mov	r5, r0
 8008c7c:	460c      	mov	r4, r1
 8008c7e:	4610      	mov	r0, r2
 8008c80:	4619      	mov	r1, r3
 8008c82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c86:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008c8a:	462a      	mov	r2, r5
 8008c8c:	701a      	strb	r2, [r3, #0]
 8008c8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c92:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008c96:	4622      	mov	r2, r4
 8008c98:	701a      	strb	r2, [r3, #0]
 8008c9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c9e:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8008ca2:	4602      	mov	r2, r0
 8008ca4:	701a      	strb	r2, [r3, #0]
 8008ca6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008caa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008cae:	460a      	mov	r2, r1
 8008cb0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8008cb2:	f107 0310 	add.w	r3, r7, #16
 8008cb6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008cba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cbe:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8008ccc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cd0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008cd4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008cd8:	7812      	ldrb	r2, [r2, #0]
 8008cda:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008cdc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8008ce6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008cee:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008cf2:	7812      	ldrb	r2, [r2, #0]
 8008cf4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008cf6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8008d00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d04:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008d08:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8008d0c:	7812      	ldrb	r2, [r2, #0]
 8008d0e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008d10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d14:	3301      	adds	r3, #1
 8008d16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8008d1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d1e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008d22:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008d26:	7812      	ldrb	r2, [r2, #0]
 8008d28:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8008d2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d2e:	3301      	adds	r3, #1
 8008d30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8008d34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d38:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8008d3c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008d3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d42:	3301      	adds	r3, #1
 8008d44:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8008d48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d4c:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8008d50:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008d52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d56:	3301      	adds	r3, #1
 8008d58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8008d5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d60:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8008d64:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008d66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8008d70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d74:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8008d78:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8008d7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d80:	3304      	adds	r3, #4
 8008d82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8008d86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d8a:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8008d8e:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8008d90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d94:	3301      	adds	r3, #1
 8008d96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008d9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008d9e:	2218      	movs	r2, #24
 8008da0:	2100      	movs	r1, #0
 8008da2:	4618      	mov	r0, r3
 8008da4:	f000 ff66 	bl	8009c74 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008da8:	233f      	movs	r3, #63	; 0x3f
 8008daa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8008dae:	2386      	movs	r3, #134	; 0x86
 8008db0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008db4:	f107 0310 	add.w	r3, r7, #16
 8008db8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008dbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008dc0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008dc4:	f107 030f 	add.w	r3, r7, #15
 8008dc8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008dd2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008dd6:	2100      	movs	r1, #0
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f000 fe09 	bl	80099f0 <hci_send_req>
 8008dde:	4603      	mov	r3, r0
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	da01      	bge.n	8008de8 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8008de4:	23ff      	movs	r3, #255	; 0xff
 8008de6:	e004      	b.n	8008df2 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8008de8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dec:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008df0:	781b      	ldrb	r3, [r3, #0]
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bdb0      	pop	{r4, r5, r7, pc}

08008dfc <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8008dfc:	b590      	push	{r4, r7, lr}
 8008dfe:	b0cd      	sub	sp, #308	; 0x134
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	4604      	mov	r4, r0
 8008e04:	4608      	mov	r0, r1
 8008e06:	4611      	mov	r1, r2
 8008e08:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008e0c:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8008e10:	6013      	str	r3, [r2, #0]
 8008e12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e16:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008e1a:	4622      	mov	r2, r4
 8008e1c:	701a      	strb	r2, [r3, #0]
 8008e1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e22:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008e26:	4602      	mov	r2, r0
 8008e28:	701a      	strb	r2, [r3, #0]
 8008e2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e2e:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8008e32:	460a      	mov	r2, r1
 8008e34:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8008e36:	f107 0310 	add.w	r3, r7, #16
 8008e3a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008e3e:	f107 0308 	add.w	r3, r7, #8
 8008e42:	2207      	movs	r2, #7
 8008e44:	2100      	movs	r1, #0
 8008e46:	4618      	mov	r0, r3
 8008e48:	f000 ff14 	bl	8009c74 <Osal_MemSet>
  int index_input = 0;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8008e52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e56:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008e5a:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008e5e:	7812      	ldrb	r2, [r2, #0]
 8008e60:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008e62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e66:	3301      	adds	r3, #1
 8008e68:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8008e6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e70:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008e74:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008e78:	7812      	ldrb	r2, [r2, #0]
 8008e7a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008e7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e80:	3301      	adds	r3, #1
 8008e82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8008e86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e8a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008e8e:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8008e92:	7812      	ldrb	r2, [r2, #0]
 8008e94:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008e96:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008ea0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ea4:	2218      	movs	r2, #24
 8008ea6:	2100      	movs	r1, #0
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f000 fee3 	bl	8009c74 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008eae:	233f      	movs	r3, #63	; 0x3f
 8008eb0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8008eb4:	238a      	movs	r3, #138	; 0x8a
 8008eb6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008eba:	f107 0310 	add.w	r3, r7, #16
 8008ebe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008ec2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ec6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8008eca:	f107 0308 	add.w	r3, r7, #8
 8008ece:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008ed2:	2307      	movs	r3, #7
 8008ed4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008ed8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008edc:	2100      	movs	r1, #0
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f000 fd86 	bl	80099f0 <hci_send_req>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	da01      	bge.n	8008eee <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8008eea:	23ff      	movs	r3, #255	; 0xff
 8008eec:	e02e      	b.n	8008f4c <aci_gap_init+0x150>
  if ( resp.Status )
 8008eee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ef2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d005      	beq.n	8008f08 <aci_gap_init+0x10c>
    return resp.Status;
 8008efc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f00:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	e021      	b.n	8008f4c <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8008f08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f0c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008f10:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008f14:	b29a      	uxth	r2, r3
 8008f16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8008f22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f26:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008f2a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008f2e:	b29a      	uxth	r2, r3
 8008f30:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008f34:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8008f36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f3a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008f3e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8008f42:	b29a      	uxth	r2, r3
 8008f44:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008f48:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008f4a:	2300      	movs	r3, #0
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd90      	pop	{r4, r7, pc}

08008f56 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b088      	sub	sp, #32
 8008f5a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008f60:	f107 0308 	add.w	r3, r7, #8
 8008f64:	2218      	movs	r2, #24
 8008f66:	2100      	movs	r1, #0
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f000 fe83 	bl	8009c74 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008f6e:	233f      	movs	r3, #63	; 0x3f
 8008f70:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8008f72:	2392      	movs	r3, #146	; 0x92
 8008f74:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008f76:	1dfb      	adds	r3, r7, #7
 8008f78:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008f7e:	f107 0308 	add.w	r3, r7, #8
 8008f82:	2100      	movs	r1, #0
 8008f84:	4618      	mov	r0, r3
 8008f86:	f000 fd33 	bl	80099f0 <hci_send_req>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	da01      	bge.n	8008f94 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008f90:	23ff      	movs	r3, #255	; 0xff
 8008f92:	e000      	b.n	8008f96 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8008f94:	79fb      	ldrb	r3, [r7, #7]
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3720      	adds	r7, #32
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}

08008f9e <aci_gap_create_connection>:
                                      uint16_t Conn_Interval_Max,
                                      uint16_t Conn_Latency,
                                      uint16_t Supervision_Timeout,
                                      uint16_t Minimum_CE_Length,
                                      uint16_t Maximum_CE_Length )
{
 8008f9e:	b590      	push	{r4, r7, lr}
 8008fa0:	b0cf      	sub	sp, #316	; 0x13c
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	4604      	mov	r4, r0
 8008fa6:	4608      	mov	r0, r1
 8008fa8:	4611      	mov	r1, r2
 8008faa:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008fae:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8008fb2:	6013      	str	r3, [r2, #0]
 8008fb4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008fb8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008fbc:	4622      	mov	r2, r4
 8008fbe:	801a      	strh	r2, [r3, #0]
 8008fc0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008fc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008fc8:	4602      	mov	r2, r0
 8008fca:	801a      	strh	r2, [r3, #0]
 8008fcc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008fd0:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8008fd4:	460a      	mov	r2, r1
 8008fd6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_create_connection_cp0 *cp0 = (aci_gap_create_connection_cp0*)(cmd_buffer);
 8008fd8:	f107 0318 	add.w	r3, r7, #24
 8008fdc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 8008fe0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008fe4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008fe8:	2200      	movs	r2, #0
 8008fea:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008fec:	2300      	movs	r3, #0
 8008fee:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->LE_Scan_Interval = LE_Scan_Interval;
 8008ff2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008ff6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008ffa:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008ffe:	8812      	ldrh	r2, [r2, #0]
 8009000:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009002:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009006:	3302      	adds	r3, #2
 8009008:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->LE_Scan_Window = LE_Scan_Window;
 800900c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009010:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009014:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009018:	8812      	ldrh	r2, [r2, #0]
 800901a:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800901c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009020:	3302      	adds	r3, #2
 8009022:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Peer_Address_Type = Peer_Address_Type;
 8009026:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800902a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800902e:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8009032:	7812      	ldrb	r2, [r2, #0]
 8009034:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009036:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800903a:	3301      	adds	r3, #1
 800903c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy( (void*)&cp0->Peer_Address, (const void*)Peer_Address, 6 );
 8009040:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009044:	1d58      	adds	r0, r3, #5
 8009046:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800904a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800904e:	2206      	movs	r2, #6
 8009050:	6819      	ldr	r1, [r3, #0]
 8009052:	f000 fdff 	bl	8009c54 <Osal_MemCpy>
  index_input += 6;
 8009056:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800905a:	3306      	adds	r3, #6
 800905c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Own_Address_Type = Own_Address_Type;
 8009060:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009064:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8009068:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800906a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800906e:	3301      	adds	r3, #1
 8009070:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 8009074:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009078:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 800907c:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 800907e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009082:	3302      	adds	r3, #2
 8009084:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 8009088:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800908c:	f8b7 2150 	ldrh.w	r2, [r7, #336]	; 0x150
 8009090:	81da      	strh	r2, [r3, #14]
  index_input += 2;
 8009092:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009096:	3302      	adds	r3, #2
 8009098:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Latency = Conn_Latency;
 800909c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80090a0:	f8b7 2154 	ldrh.w	r2, [r7, #340]	; 0x154
 80090a4:	821a      	strh	r2, [r3, #16]
  index_input += 2;
 80090a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80090aa:	3302      	adds	r3, #2
 80090ac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Supervision_Timeout = Supervision_Timeout;
 80090b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80090b4:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 80090b8:	825a      	strh	r2, [r3, #18]
  index_input += 2;
 80090ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80090be:	3302      	adds	r3, #2
 80090c0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Minimum_CE_Length = Minimum_CE_Length;
 80090c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80090c8:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 80090cc:	829a      	strh	r2, [r3, #20]
  index_input += 2;
 80090ce:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80090d2:	3302      	adds	r3, #2
 80090d4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Maximum_CE_Length = Maximum_CE_Length;
 80090d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80090dc:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 80090e0:	82da      	strh	r2, [r3, #22]
  index_input += 2;
 80090e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80090e6:	3302      	adds	r3, #2
 80090e8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80090ec:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80090f0:	2218      	movs	r2, #24
 80090f2:	2100      	movs	r1, #0
 80090f4:	4618      	mov	r0, r3
 80090f6:	f000 fdbd 	bl	8009c74 <Osal_MemSet>
  rq.ogf = 0x3f;
 80090fa:	233f      	movs	r3, #63	; 0x3f
 80090fc:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x09c;
 8009100:	239c      	movs	r3, #156	; 0x9c
 8009102:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 8009106:	230f      	movs	r3, #15
 8009108:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 800910c:	f107 0318 	add.w	r3, r7, #24
 8009110:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8009114:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009118:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 800911c:	f107 0317 	add.w	r3, r7, #23
 8009120:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 8009124:	2301      	movs	r3, #1
 8009126:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800912a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800912e:	2100      	movs	r1, #0
 8009130:	4618      	mov	r0, r3
 8009132:	f000 fc5d 	bl	80099f0 <hci_send_req>
 8009136:	4603      	mov	r3, r0
 8009138:	2b00      	cmp	r3, #0
 800913a:	da01      	bge.n	8009140 <aci_gap_create_connection+0x1a2>
    return BLE_STATUS_TIMEOUT;
 800913c:	23ff      	movs	r3, #255	; 0xff
 800913e:	e004      	b.n	800914a <aci_gap_create_connection+0x1ac>
  return status;
 8009140:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009144:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009148:	781b      	ldrb	r3, [r3, #0]
}
 800914a:	4618      	mov	r0, r3
 800914c:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8009150:	46bd      	mov	sp, r7
 8009152:	bd90      	pop	{r4, r7, pc}

08009154 <aci_gap_terminate_gap_proc>:

tBleStatus aci_gap_terminate_gap_proc( uint8_t Procedure_Code )
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b0cc      	sub	sp, #304	; 0x130
 8009158:	af00      	add	r7, sp, #0
 800915a:	4602      	mov	r2, r0
 800915c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009160:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009164:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_terminate_gap_proc_cp0 *cp0 = (aci_gap_terminate_gap_proc_cp0*)(cmd_buffer);
 8009166:	f107 0310 	add.w	r3, r7, #16
 800916a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800916e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009172:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009176:	2200      	movs	r2, #0
 8009178:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800917a:	2300      	movs	r3, #0
 800917c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Procedure_Code = Procedure_Code;
 8009180:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009184:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009188:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800918c:	7812      	ldrb	r2, [r2, #0]
 800918e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009190:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009194:	3301      	adds	r3, #1
 8009196:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800919a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800919e:	2218      	movs	r2, #24
 80091a0:	2100      	movs	r1, #0
 80091a2:	4618      	mov	r0, r3
 80091a4:	f000 fd66 	bl	8009c74 <Osal_MemSet>
  rq.ogf = 0x3f;
 80091a8:	233f      	movs	r3, #63	; 0x3f
 80091aa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x09d;
 80091ae:	239d      	movs	r3, #157	; 0x9d
 80091b0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80091b4:	f107 0310 	add.w	r3, r7, #16
 80091b8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80091bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80091c0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80091c4:	f107 030f 	add.w	r3, r7, #15
 80091c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80091cc:	2301      	movs	r3, #1
 80091ce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80091d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80091d6:	2100      	movs	r1, #0
 80091d8:	4618      	mov	r0, r3
 80091da:	f000 fc09 	bl	80099f0 <hci_send_req>
 80091de:	4603      	mov	r3, r0
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	da01      	bge.n	80091e8 <aci_gap_terminate_gap_proc+0x94>
    return BLE_STATUS_TIMEOUT;
 80091e4:	23ff      	movs	r3, #255	; 0xff
 80091e6:	e004      	b.n	80091f2 <aci_gap_terminate_gap_proc+0x9e>
  return status;
 80091e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091ec:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80091f0:	781b      	ldrb	r3, [r3, #0]
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <aci_gap_start_observation_proc>:
                                           uint16_t LE_Scan_Window,
                                           uint8_t LE_Scan_Type,
                                           uint8_t Own_Address_Type,
                                           uint8_t Filter_Duplicates,
                                           uint8_t Scanning_Filter_Policy )
{
 80091fc:	b5b0      	push	{r4, r5, r7, lr}
 80091fe:	b0cc      	sub	sp, #304	; 0x130
 8009200:	af00      	add	r7, sp, #0
 8009202:	4605      	mov	r5, r0
 8009204:	460c      	mov	r4, r1
 8009206:	4610      	mov	r0, r2
 8009208:	4619      	mov	r1, r3
 800920a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800920e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009212:	462a      	mov	r2, r5
 8009214:	801a      	strh	r2, [r3, #0]
 8009216:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800921a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800921e:	4622      	mov	r2, r4
 8009220:	801a      	strh	r2, [r3, #0]
 8009222:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009226:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800922a:	4602      	mov	r2, r0
 800922c:	701a      	strb	r2, [r3, #0]
 800922e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009232:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009236:	460a      	mov	r2, r1
 8009238:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_start_observation_proc_cp0 *cp0 = (aci_gap_start_observation_proc_cp0*)(cmd_buffer);
 800923a:	f107 0310 	add.w	r3, r7, #16
 800923e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009242:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009246:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800924a:	2200      	movs	r2, #0
 800924c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800924e:	2300      	movs	r3, #0
 8009250:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Interval = LE_Scan_Interval;
 8009254:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009258:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800925c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009260:	8812      	ldrh	r2, [r2, #0]
 8009262:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009264:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009268:	3302      	adds	r3, #2
 800926a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Window = LE_Scan_Window;
 800926e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009272:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009276:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800927a:	8812      	ldrh	r2, [r2, #0]
 800927c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800927e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009282:	3302      	adds	r3, #2
 8009284:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Type = LE_Scan_Type;
 8009288:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800928c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009290:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8009294:	7812      	ldrb	r2, [r2, #0]
 8009296:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009298:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800929c:	3301      	adds	r3, #1
 800929e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80092a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092a6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80092aa:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 80092ae:	7812      	ldrb	r2, [r2, #0]
 80092b0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80092b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80092b6:	3301      	adds	r3, #1
 80092b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Filter_Duplicates = Filter_Duplicates;
 80092bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092c0:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80092c4:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80092c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80092ca:	3301      	adds	r3, #1
 80092cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Scanning_Filter_Policy = Scanning_Filter_Policy;
 80092d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092d4:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 80092d8:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80092da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80092de:	3301      	adds	r3, #1
 80092e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80092e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80092e8:	2218      	movs	r2, #24
 80092ea:	2100      	movs	r1, #0
 80092ec:	4618      	mov	r0, r3
 80092ee:	f000 fcc1 	bl	8009c74 <Osal_MemSet>
  rq.ogf = 0x3f;
 80092f2:	233f      	movs	r3, #63	; 0x3f
 80092f4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a2;
 80092f8:	23a2      	movs	r3, #162	; 0xa2
 80092fa:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 80092fe:	230f      	movs	r3, #15
 8009300:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8009304:	f107 0310 	add.w	r3, r7, #16
 8009308:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800930c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009310:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009314:	f107 030f 	add.w	r3, r7, #15
 8009318:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800931c:	2301      	movs	r3, #1
 800931e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009322:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009326:	2100      	movs	r1, #0
 8009328:	4618      	mov	r0, r3
 800932a:	f000 fb61 	bl	80099f0 <hci_send_req>
 800932e:	4603      	mov	r3, r0
 8009330:	2b00      	cmp	r3, #0
 8009332:	da01      	bge.n	8009338 <aci_gap_start_observation_proc+0x13c>
    return BLE_STATUS_TIMEOUT;
 8009334:	23ff      	movs	r3, #255	; 0xff
 8009336:	e004      	b.n	8009342 <aci_gap_start_observation_proc+0x146>
  return status;
 8009338:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800933c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009340:	781b      	ldrb	r3, [r3, #0]
}
 8009342:	4618      	mov	r0, r3
 8009344:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009348:	46bd      	mov	sp, r7
 800934a:	bdb0      	pop	{r4, r5, r7, pc}

0800934c <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b088      	sub	sp, #32
 8009350:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009352:	2300      	movs	r3, #0
 8009354:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009356:	f107 0308 	add.w	r3, r7, #8
 800935a:	2218      	movs	r2, #24
 800935c:	2100      	movs	r1, #0
 800935e:	4618      	mov	r0, r3
 8009360:	f000 fc88 	bl	8009c74 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009364:	233f      	movs	r3, #63	; 0x3f
 8009366:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8009368:	f240 1301 	movw	r3, #257	; 0x101
 800936c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800936e:	1dfb      	adds	r3, r7, #7
 8009370:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009372:	2301      	movs	r3, #1
 8009374:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009376:	f107 0308 	add.w	r3, r7, #8
 800937a:	2100      	movs	r1, #0
 800937c:	4618      	mov	r0, r3
 800937e:	f000 fb37 	bl	80099f0 <hci_send_req>
 8009382:	4603      	mov	r3, r0
 8009384:	2b00      	cmp	r3, #0
 8009386:	da01      	bge.n	800938c <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8009388:	23ff      	movs	r3, #255	; 0xff
 800938a:	e000      	b.n	800938e <aci_gatt_init+0x42>
  return status;
 800938c:	79fb      	ldrb	r3, [r7, #7]
}
 800938e:	4618      	mov	r0, r3
 8009390:	3720      	adds	r7, #32
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}

08009396 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8009396:	b5b0      	push	{r4, r5, r7, lr}
 8009398:	b0cc      	sub	sp, #304	; 0x130
 800939a:	af00      	add	r7, sp, #0
 800939c:	4605      	mov	r5, r0
 800939e:	460c      	mov	r4, r1
 80093a0:	4610      	mov	r0, r2
 80093a2:	4619      	mov	r1, r3
 80093a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093a8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80093ac:	462a      	mov	r2, r5
 80093ae:	801a      	strh	r2, [r3, #0]
 80093b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80093b8:	4622      	mov	r2, r4
 80093ba:	801a      	strh	r2, [r3, #0]
 80093bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093c0:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80093c4:	4602      	mov	r2, r0
 80093c6:	701a      	strb	r2, [r3, #0]
 80093c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093cc:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80093d0:	460a      	mov	r2, r1
 80093d2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80093d4:	f107 0310 	add.w	r3, r7, #16
 80093d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80093dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093e0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80093e4:	2200      	movs	r2, #0
 80093e6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80093e8:	2300      	movs	r3, #0
 80093ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 80093ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093f2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80093f6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80093fa:	8812      	ldrh	r2, [r2, #0]
 80093fc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80093fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009402:	3302      	adds	r3, #2
 8009404:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8009408:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800940c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009410:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009414:	8812      	ldrh	r2, [r2, #0]
 8009416:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8009418:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800941c:	3302      	adds	r3, #2
 800941e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8009422:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009426:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800942a:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800942e:	7812      	ldrb	r2, [r2, #0]
 8009430:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009432:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009436:	3301      	adds	r3, #1
 8009438:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800943c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009440:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009444:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8009448:	7812      	ldrb	r2, [r2, #0]
 800944a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800944c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009450:	3301      	adds	r3, #1
 8009452:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8009456:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800945a:	1d98      	adds	r0, r3, #6
 800945c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009460:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009464:	781b      	ldrb	r3, [r3, #0]
 8009466:	461a      	mov	r2, r3
 8009468:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800946c:	f000 fbf2 	bl	8009c54 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8009470:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009474:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800947e:	4413      	add	r3, r2
 8009480:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009484:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009488:	2218      	movs	r2, #24
 800948a:	2100      	movs	r1, #0
 800948c:	4618      	mov	r0, r3
 800948e:	f000 fbf1 	bl	8009c74 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009492:	233f      	movs	r3, #63	; 0x3f
 8009494:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8009498:	f44f 7383 	mov.w	r3, #262	; 0x106
 800949c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80094a0:	f107 0310 	add.w	r3, r7, #16
 80094a4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80094a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80094ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80094b0:	f107 030f 	add.w	r3, r7, #15
 80094b4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80094b8:	2301      	movs	r3, #1
 80094ba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80094be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80094c2:	2100      	movs	r1, #0
 80094c4:	4618      	mov	r0, r3
 80094c6:	f000 fa93 	bl	80099f0 <hci_send_req>
 80094ca:	4603      	mov	r3, r0
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	da01      	bge.n	80094d4 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 80094d0:	23ff      	movs	r3, #255	; 0xff
 80094d2:	e004      	b.n	80094de <aci_gatt_update_char_value+0x148>
  return status;
 80094d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094d8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80094dc:	781b      	ldrb	r3, [r3, #0]
}
 80094de:	4618      	mov	r0, r3
 80094e0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bdb0      	pop	{r4, r5, r7, pc}

080094e8 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b0cc      	sub	sp, #304	; 0x130
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094f6:	601a      	str	r2, [r3, #0]
 80094f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094fc:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009500:	4602      	mov	r2, r0
 8009502:	701a      	strb	r2, [r3, #0]
 8009504:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009508:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800950c:	460a      	mov	r2, r1
 800950e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8009510:	f107 0310 	add.w	r3, r7, #16
 8009514:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009518:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800951c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009520:	2200      	movs	r2, #0
 8009522:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009524:	2300      	movs	r3, #0
 8009526:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800952a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800952e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009532:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009536:	7812      	ldrb	r2, [r2, #0]
 8009538:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800953a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800953e:	3301      	adds	r3, #1
 8009540:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8009544:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009548:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800954c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009550:	7812      	ldrb	r2, [r2, #0]
 8009552:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009554:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009558:	3301      	adds	r3, #1
 800955a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800955e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009562:	1c98      	adds	r0, r3, #2
 8009564:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009568:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800956c:	781a      	ldrb	r2, [r3, #0]
 800956e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009572:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009576:	6819      	ldr	r1, [r3, #0]
 8009578:	f000 fb6c 	bl	8009c54 <Osal_MemCpy>
  index_input += Length;
 800957c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009580:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800958a:	4413      	add	r3, r2
 800958c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009590:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009594:	2218      	movs	r2, #24
 8009596:	2100      	movs	r1, #0
 8009598:	4618      	mov	r0, r3
 800959a:	f000 fb6b 	bl	8009c74 <Osal_MemSet>
  rq.ogf = 0x3f;
 800959e:	233f      	movs	r3, #63	; 0x3f
 80095a0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 80095a4:	230c      	movs	r3, #12
 80095a6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80095aa:	f107 0310 	add.w	r3, r7, #16
 80095ae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80095b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80095ba:	f107 030f 	add.w	r3, r7, #15
 80095be:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80095c2:	2301      	movs	r3, #1
 80095c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80095c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80095cc:	2100      	movs	r1, #0
 80095ce:	4618      	mov	r0, r3
 80095d0:	f000 fa0e 	bl	80099f0 <hci_send_req>
 80095d4:	4603      	mov	r3, r0
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	da01      	bge.n	80095de <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 80095da:	23ff      	movs	r3, #255	; 0xff
 80095dc:	e004      	b.n	80095e8 <aci_hal_write_config_data+0x100>
  return status;
 80095de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095e2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80095e6:	781b      	ldrb	r3, [r3, #0]
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}

080095f2 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 80095f2:	b580      	push	{r7, lr}
 80095f4:	b0cc      	sub	sp, #304	; 0x130
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	4602      	mov	r2, r0
 80095fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095fe:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009602:	701a      	strb	r2, [r3, #0]
 8009604:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009608:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800960c:	460a      	mov	r2, r1
 800960e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8009610:	f107 0310 	add.w	r3, r7, #16
 8009614:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009618:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800961c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009620:	2200      	movs	r2, #0
 8009622:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009624:	2300      	movs	r3, #0
 8009626:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800962a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800962e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009632:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009636:	7812      	ldrb	r2, [r2, #0]
 8009638:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800963a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800963e:	3301      	adds	r3, #1
 8009640:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8009644:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009648:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800964c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009650:	7812      	ldrb	r2, [r2, #0]
 8009652:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009654:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009658:	3301      	adds	r3, #1
 800965a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800965e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009662:	2218      	movs	r2, #24
 8009664:	2100      	movs	r1, #0
 8009666:	4618      	mov	r0, r3
 8009668:	f000 fb04 	bl	8009c74 <Osal_MemSet>
  rq.ogf = 0x3f;
 800966c:	233f      	movs	r3, #63	; 0x3f
 800966e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8009672:	230f      	movs	r3, #15
 8009674:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009678:	f107 0310 	add.w	r3, r7, #16
 800967c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009680:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009684:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009688:	f107 030f 	add.w	r3, r7, #15
 800968c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009690:	2301      	movs	r3, #1
 8009692:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009696:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800969a:	2100      	movs	r1, #0
 800969c:	4618      	mov	r0, r3
 800969e:	f000 f9a7 	bl	80099f0 <hci_send_req>
 80096a2:	4603      	mov	r3, r0
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	da01      	bge.n	80096ac <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 80096a8:	23ff      	movs	r3, #255	; 0xff
 80096aa:	e004      	b.n	80096b6 <aci_hal_set_tx_power_level+0xc4>
  return status;
 80096ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096b0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80096b4:	781b      	ldrb	r3, [r3, #0]
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b0cc      	sub	sp, #304	; 0x130
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	4602      	mov	r2, r0
 80096c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096cc:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80096d0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 80096d2:	f107 0310 	add.w	r3, r7, #16
 80096d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80096da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096de:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80096e2:	2200      	movs	r2, #0
 80096e4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80096e6:	2300      	movs	r3, #0
 80096e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 80096ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096f0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80096f4:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80096f8:	8812      	ldrh	r2, [r2, #0]
 80096fa:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80096fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009700:	3302      	adds	r3, #2
 8009702:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009706:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800970a:	2218      	movs	r2, #24
 800970c:	2100      	movs	r1, #0
 800970e:	4618      	mov	r0, r3
 8009710:	f000 fab0 	bl	8009c74 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009714:	233f      	movs	r3, #63	; 0x3f
 8009716:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800971a:	2318      	movs	r3, #24
 800971c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009720:	f107 0310 	add.w	r3, r7, #16
 8009724:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009728:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800972c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009730:	f107 030f 	add.w	r3, r7, #15
 8009734:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009738:	2301      	movs	r3, #1
 800973a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800973e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009742:	2100      	movs	r1, #0
 8009744:	4618      	mov	r0, r3
 8009746:	f000 f953 	bl	80099f0 <hci_send_req>
 800974a:	4603      	mov	r3, r0
 800974c:	2b00      	cmp	r3, #0
 800974e:	da01      	bge.n	8009754 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8009750:	23ff      	movs	r3, #255	; 0xff
 8009752:	e004      	b.n	800975e <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8009754:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009758:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800975c:	781b      	ldrb	r3, [r3, #0]
}
 800975e:	4618      	mov	r0, r3
 8009760:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b088      	sub	sp, #32
 800976c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800976e:	2300      	movs	r3, #0
 8009770:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009772:	f107 0308 	add.w	r3, r7, #8
 8009776:	2218      	movs	r2, #24
 8009778:	2100      	movs	r1, #0
 800977a:	4618      	mov	r0, r3
 800977c:	f000 fa7a 	bl	8009c74 <Osal_MemSet>
  rq.ogf = 0x03;
 8009780:	2303      	movs	r3, #3
 8009782:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8009784:	2303      	movs	r3, #3
 8009786:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009788:	1dfb      	adds	r3, r7, #7
 800978a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800978c:	2301      	movs	r3, #1
 800978e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009790:	f107 0308 	add.w	r3, r7, #8
 8009794:	2100      	movs	r1, #0
 8009796:	4618      	mov	r0, r3
 8009798:	f000 f92a 	bl	80099f0 <hci_send_req>
 800979c:	4603      	mov	r3, r0
 800979e:	2b00      	cmp	r3, #0
 80097a0:	da01      	bge.n	80097a6 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80097a2:	23ff      	movs	r3, #255	; 0xff
 80097a4:	e000      	b.n	80097a8 <hci_reset+0x40>
  return status;
 80097a6:	79fb      	ldrb	r3, [r7, #7]
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3720      	adds	r7, #32
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b086      	sub	sp, #24
 80097b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097b6:	f3ef 8310 	mrs	r3, PRIMASK
 80097ba:	60fb      	str	r3, [r7, #12]
  return(result);
 80097bc:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 80097be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80097c0:	b672      	cpsid	i
}
 80097c2:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 80097c4:	1cbb      	adds	r3, r7, #2
 80097c6:	4619      	mov	r1, r3
 80097c8:	4812      	ldr	r0, [pc, #72]	; (8009814 <DbgTrace_TxCpltCallback+0x64>)
 80097ca:	f000 ffcc 	bl	800a766 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 80097ce:	1cbb      	adds	r3, r7, #2
 80097d0:	4619      	mov	r1, r3
 80097d2:	4810      	ldr	r0, [pc, #64]	; (8009814 <DbgTrace_TxCpltCallback+0x64>)
 80097d4:	f001 f8b8 	bl	800a948 <CircularQueue_Sense>
 80097d8:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d00c      	beq.n	80097fa <DbgTrace_TxCpltCallback+0x4a>
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	f383 8810 	msr	PRIMASK, r3
}
 80097ea:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 80097ec:	887b      	ldrh	r3, [r7, #2]
 80097ee:	4a0a      	ldr	r2, [pc, #40]	; (8009818 <DbgTrace_TxCpltCallback+0x68>)
 80097f0:	4619      	mov	r1, r3
 80097f2:	6938      	ldr	r0, [r7, #16]
 80097f4:	f7f7 fc65 	bl	80010c2 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 80097f8:	e008      	b.n	800980c <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 80097fa:	4b08      	ldr	r3, [pc, #32]	; (800981c <DbgTrace_TxCpltCallback+0x6c>)
 80097fc:	2201      	movs	r2, #1
 80097fe:	701a      	strb	r2, [r3, #0]
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f383 8810 	msr	PRIMASK, r3
}
 800980a:	bf00      	nop
}
 800980c:	bf00      	nop
 800980e:	3718      	adds	r7, #24
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}
 8009814:	20000664 	.word	0x20000664
 8009818:	080097b1 	.word	0x080097b1
 800981c:	2000004d 	.word	0x2000004d

08009820 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 8009826:	f7f7 fc46 	bl	80010b6 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800982a:	2302      	movs	r3, #2
 800982c:	9300      	str	r3, [sp, #0]
 800982e:	2300      	movs	r3, #0
 8009830:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009834:	4903      	ldr	r1, [pc, #12]	; (8009844 <DbgTraceInit+0x24>)
 8009836:	4804      	ldr	r0, [pc, #16]	; (8009848 <DbgTraceInit+0x28>)
 8009838:	f000 fd3c 	bl	800a2b4 <CircularQueue_Init>
#endif 
#endif
  return;
 800983c:	bf00      	nop
}
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
 8009842:	bf00      	nop
 8009844:	20000684 	.word	0x20000684
 8009848:	20000664 	.word	0x20000664

0800984c <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b084      	sub	sp, #16
 8009850:	af00      	add	r7, sp, #0
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	60b9      	str	r1, [r7, #8]
 8009856:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	68b9      	ldr	r1, [r7, #8]
 800985c:	68f8      	ldr	r0, [r7, #12]
 800985e:	f000 f805 	bl	800986c <DbgTraceWrite>
 8009862:	4603      	mov	r3, r0
}
 8009864:	4618      	mov	r0, r3
 8009866:	3710      	adds	r7, #16
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b08a      	sub	sp, #40	; 0x28
 8009870:	af00      	add	r7, sp, #0
 8009872:	60f8      	str	r0, [r7, #12]
 8009874:	60b9      	str	r1, [r7, #8]
 8009876:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 8009878:	2300      	movs	r3, #0
 800987a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800987c:	f3ef 8310 	mrs	r3, PRIMASK
 8009880:	61bb      	str	r3, [r7, #24]
  return(result);
 8009882:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 8009884:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800988c:	d102      	bne.n	8009894 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800988e:	2300      	movs	r3, #0
 8009890:	627b      	str	r3, [r7, #36]	; 0x24
 8009892:	e037      	b.n	8009904 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	2b01      	cmp	r3, #1
 8009898:	d006      	beq.n	80098a8 <DbgTraceWrite+0x3c>
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2b02      	cmp	r3, #2
 800989e:	d003      	beq.n	80098a8 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 80098a0:	f04f 33ff 	mov.w	r3, #4294967295
 80098a4:	627b      	str	r3, [r7, #36]	; 0x24
 80098a6:	e02d      	b.n	8009904 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d02a      	beq.n	8009904 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80098b2:	b672      	cpsid	i
}
 80098b4:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	b29a      	uxth	r2, r3
 80098ba:	2301      	movs	r3, #1
 80098bc:	68b9      	ldr	r1, [r7, #8]
 80098be:	4814      	ldr	r0, [pc, #80]	; (8009910 <DbgTraceWrite+0xa4>)
 80098c0:	f000 fd2a 	bl	800a318 <CircularQueue_Add>
 80098c4:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 80098c6:	69fb      	ldr	r3, [r7, #28]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d015      	beq.n	80098f8 <DbgTraceWrite+0x8c>
 80098cc:	4b11      	ldr	r3, [pc, #68]	; (8009914 <DbgTraceWrite+0xa8>)
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	b2db      	uxtb	r3, r3
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d010      	beq.n	80098f8 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 80098d6:	4b0f      	ldr	r3, [pc, #60]	; (8009914 <DbgTraceWrite+0xa8>)
 80098d8:	2200      	movs	r2, #0
 80098da:	701a      	strb	r2, [r3, #0]
 80098dc:	6a3b      	ldr	r3, [r7, #32]
 80098de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	f383 8810 	msr	PRIMASK, r3
}
 80098e6:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	4a0a      	ldr	r2, [pc, #40]	; (8009918 <DbgTraceWrite+0xac>)
 80098ee:	4619      	mov	r1, r3
 80098f0:	69f8      	ldr	r0, [r7, #28]
 80098f2:	f7f7 fbe6 	bl	80010c2 <DbgOutputTraces>
 80098f6:	e005      	b.n	8009904 <DbgTraceWrite+0x98>
 80098f8:	6a3b      	ldr	r3, [r7, #32]
 80098fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	f383 8810 	msr	PRIMASK, r3
}
 8009902:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 8009904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009906:	4618      	mov	r0, r3
 8009908:	3728      	adds	r7, #40	; 0x28
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	20000664 	.word	0x20000664
 8009914:	2000004d 	.word	0x2000004d
 8009918:	080097b1 	.word	0x080097b1

0800991c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b082      	sub	sp, #8
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	4a08      	ldr	r2, [pc, #32]	; (800994c <hci_init+0x30>)
 800992c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800992e:	4a08      	ldr	r2, [pc, #32]	; (8009950 <hci_init+0x34>)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8009934:	4806      	ldr	r0, [pc, #24]	; (8009950 <hci_init+0x34>)
 8009936:	f000 f979 	bl	8009c2c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4618      	mov	r0, r3
 8009940:	f000 f8da 	bl	8009af8 <TlInit>

  return;
 8009944:	bf00      	nop
}
 8009946:	3708      	adds	r7, #8
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}
 800994c:	200016ac 	.word	0x200016ac
 8009950:	20001684 	.word	0x20001684

08009954 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800995a:	4822      	ldr	r0, [pc, #136]	; (80099e4 <hci_user_evt_proc+0x90>)
 800995c:	f000 fbfc 	bl	800a158 <LST_is_empty>
 8009960:	4603      	mov	r3, r0
 8009962:	2b00      	cmp	r3, #0
 8009964:	d12b      	bne.n	80099be <hci_user_evt_proc+0x6a>
 8009966:	4b20      	ldr	r3, [pc, #128]	; (80099e8 <hci_user_evt_proc+0x94>)
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d027      	beq.n	80099be <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800996e:	f107 030c 	add.w	r3, r7, #12
 8009972:	4619      	mov	r1, r3
 8009974:	481b      	ldr	r0, [pc, #108]	; (80099e4 <hci_user_evt_proc+0x90>)
 8009976:	f000 fc7e 	bl	800a276 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800997a:	4b1c      	ldr	r3, [pc, #112]	; (80099ec <hci_user_evt_proc+0x98>)
 800997c:	69db      	ldr	r3, [r3, #28]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d00c      	beq.n	800999c <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8009986:	2301      	movs	r3, #1
 8009988:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800998a:	4b18      	ldr	r3, [pc, #96]	; (80099ec <hci_user_evt_proc+0x98>)
 800998c:	69db      	ldr	r3, [r3, #28]
 800998e:	1d3a      	adds	r2, r7, #4
 8009990:	4610      	mov	r0, r2
 8009992:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8009994:	793a      	ldrb	r2, [r7, #4]
 8009996:	4b14      	ldr	r3, [pc, #80]	; (80099e8 <hci_user_evt_proc+0x94>)
 8009998:	701a      	strb	r2, [r3, #0]
 800999a:	e002      	b.n	80099a2 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800999c:	4b12      	ldr	r3, [pc, #72]	; (80099e8 <hci_user_evt_proc+0x94>)
 800999e:	2201      	movs	r2, #1
 80099a0:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80099a2:	4b11      	ldr	r3, [pc, #68]	; (80099e8 <hci_user_evt_proc+0x94>)
 80099a4:	781b      	ldrb	r3, [r3, #0]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d004      	beq.n	80099b4 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	4618      	mov	r0, r3
 80099ae:	f001 fb2d 	bl	800b00c <TL_MM_EvtDone>
 80099b2:	e004      	b.n	80099be <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	4619      	mov	r1, r3
 80099b8:	480a      	ldr	r0, [pc, #40]	; (80099e4 <hci_user_evt_proc+0x90>)
 80099ba:	f000 fbef 	bl	800a19c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80099be:	4809      	ldr	r0, [pc, #36]	; (80099e4 <hci_user_evt_proc+0x90>)
 80099c0:	f000 fbca 	bl	800a158 <LST_is_empty>
 80099c4:	4603      	mov	r3, r0
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d107      	bne.n	80099da <hci_user_evt_proc+0x86>
 80099ca:	4b07      	ldr	r3, [pc, #28]	; (80099e8 <hci_user_evt_proc+0x94>)
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d003      	beq.n	80099da <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80099d2:	4804      	ldr	r0, [pc, #16]	; (80099e4 <hci_user_evt_proc+0x90>)
 80099d4:	f7f9 fe24 	bl	8003620 <hci_notify_asynch_evt>
  }


  return;
 80099d8:	bf00      	nop
 80099da:	bf00      	nop
}
 80099dc:	3710      	adds	r7, #16
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}
 80099e2:	bf00      	nop
 80099e4:	20000224 	.word	0x20000224
 80099e8:	20000230 	.word	0x20000230
 80099ec:	20001684 	.word	0x20001684

080099f0 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b088      	sub	sp, #32
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	460b      	mov	r3, r1
 80099fa:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80099fc:	2000      	movs	r0, #0
 80099fe:	f000 f8d1 	bl	8009ba4 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8009a02:	2300      	movs	r3, #0
 8009a04:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	885b      	ldrh	r3, [r3, #2]
 8009a0a:	b21b      	sxth	r3, r3
 8009a0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a10:	b21a      	sxth	r2, r3
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	881b      	ldrh	r3, [r3, #0]
 8009a16:	029b      	lsls	r3, r3, #10
 8009a18:	b21b      	sxth	r3, r3
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	b21b      	sxth	r3, r3
 8009a1e:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8009a20:	4b33      	ldr	r3, [pc, #204]	; (8009af0 <hci_send_req+0x100>)
 8009a22:	2201      	movs	r2, #1
 8009a24:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	68db      	ldr	r3, [r3, #12]
 8009a2a:	b2d9      	uxtb	r1, r3
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	689a      	ldr	r2, [r3, #8]
 8009a30:	8bbb      	ldrh	r3, [r7, #28]
 8009a32:	4618      	mov	r0, r3
 8009a34:	f000 f890 	bl	8009b58 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8009a38:	e04e      	b.n	8009ad8 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8009a3a:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8009a3e:	f7f9 fe06 	bl	800364e <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8009a42:	e043      	b.n	8009acc <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8009a44:	f107 030c 	add.w	r3, r7, #12
 8009a48:	4619      	mov	r1, r3
 8009a4a:	482a      	ldr	r0, [pc, #168]	; (8009af4 <hci_send_req+0x104>)
 8009a4c:	f000 fc13 	bl	800a276 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	7a5b      	ldrb	r3, [r3, #9]
 8009a54:	2b0f      	cmp	r3, #15
 8009a56:	d114      	bne.n	8009a82 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	330b      	adds	r3, #11
 8009a5c:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	885b      	ldrh	r3, [r3, #2]
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	8bba      	ldrh	r2, [r7, #28]
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d104      	bne.n	8009a74 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	691b      	ldr	r3, [r3, #16]
 8009a6e:	693a      	ldr	r2, [r7, #16]
 8009a70:	7812      	ldrb	r2, [r2, #0]
 8009a72:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	785b      	ldrb	r3, [r3, #1]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d027      	beq.n	8009acc <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	77fb      	strb	r3, [r7, #31]
 8009a80:	e024      	b.n	8009acc <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	330b      	adds	r3, #11
 8009a86:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8009a88:	69bb      	ldr	r3, [r7, #24]
 8009a8a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009a8e:	b29b      	uxth	r3, r3
 8009a90:	8bba      	ldrh	r2, [r7, #28]
 8009a92:	429a      	cmp	r2, r3
 8009a94:	d114      	bne.n	8009ac0 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	7a9b      	ldrb	r3, [r3, #10]
 8009a9a:	3b03      	subs	r3, #3
 8009a9c:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	695a      	ldr	r2, [r3, #20]
 8009aa2:	7dfb      	ldrb	r3, [r7, #23]
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	bfa8      	it	ge
 8009aa8:	461a      	movge	r2, r3
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6918      	ldr	r0, [r3, #16]
 8009ab2:	69bb      	ldr	r3, [r7, #24]
 8009ab4:	1cd9      	adds	r1, r3, #3
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	695b      	ldr	r3, [r3, #20]
 8009aba:	461a      	mov	r2, r3
 8009abc:	f002 fd07 	bl	800c4ce <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8009ac0:	69bb      	ldr	r3, [r7, #24]
 8009ac2:	781b      	ldrb	r3, [r3, #0]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d001      	beq.n	8009acc <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8009acc:	4809      	ldr	r0, [pc, #36]	; (8009af4 <hci_send_req+0x104>)
 8009ace:	f000 fb43 	bl	800a158 <LST_is_empty>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d0b5      	beq.n	8009a44 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8009ad8:	7ffb      	ldrb	r3, [r7, #31]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d0ad      	beq.n	8009a3a <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8009ade:	2001      	movs	r0, #1
 8009ae0:	f000 f860 	bl	8009ba4 <NotifyCmdStatus>

  return 0;
 8009ae4:	2300      	movs	r3, #0
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3720      	adds	r7, #32
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	200016b0 	.word	0x200016b0
 8009af4:	200016a4 	.word	0x200016a4

08009af8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b086      	sub	sp, #24
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8009b00:	480f      	ldr	r0, [pc, #60]	; (8009b40 <TlInit+0x48>)
 8009b02:	f000 fb19 	bl	800a138 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8009b06:	4a0f      	ldr	r2, [pc, #60]	; (8009b44 <TlInit+0x4c>)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8009b0c:	480e      	ldr	r0, [pc, #56]	; (8009b48 <TlInit+0x50>)
 8009b0e:	f000 fb13 	bl	800a138 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009b12:	4b0e      	ldr	r3, [pc, #56]	; (8009b4c <TlInit+0x54>)
 8009b14:	2201      	movs	r2, #1
 8009b16:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8009b18:	4b0d      	ldr	r3, [pc, #52]	; (8009b50 <TlInit+0x58>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d00a      	beq.n	8009b36 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8009b24:	4b0b      	ldr	r3, [pc, #44]	; (8009b54 <TlInit+0x5c>)
 8009b26:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8009b28:	4b09      	ldr	r3, [pc, #36]	; (8009b50 <TlInit+0x58>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f107 0208 	add.w	r2, r7, #8
 8009b30:	4610      	mov	r0, r2
 8009b32:	4798      	blx	r3
  }

  return;
 8009b34:	bf00      	nop
 8009b36:	bf00      	nop
}
 8009b38:	3718      	adds	r7, #24
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
 8009b3e:	bf00      	nop
 8009b40:	200016a4 	.word	0x200016a4
 8009b44:	2000022c 	.word	0x2000022c
 8009b48:	20000224 	.word	0x20000224
 8009b4c:	20000230 	.word	0x20000230
 8009b50:	20001684 	.word	0x20001684
 8009b54:	08009be5 	.word	0x08009be5

08009b58 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b082      	sub	sp, #8
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	4603      	mov	r3, r0
 8009b60:	603a      	str	r2, [r7, #0]
 8009b62:	80fb      	strh	r3, [r7, #6]
 8009b64:	460b      	mov	r3, r1
 8009b66:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8009b68:	4b0c      	ldr	r3, [pc, #48]	; (8009b9c <SendCmd+0x44>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	88fa      	ldrh	r2, [r7, #6]
 8009b6e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8009b72:	4b0a      	ldr	r3, [pc, #40]	; (8009b9c <SendCmd+0x44>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	797a      	ldrb	r2, [r7, #5]
 8009b78:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8009b7a:	4b08      	ldr	r3, [pc, #32]	; (8009b9c <SendCmd+0x44>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	330c      	adds	r3, #12
 8009b80:	797a      	ldrb	r2, [r7, #5]
 8009b82:	6839      	ldr	r1, [r7, #0]
 8009b84:	4618      	mov	r0, r3
 8009b86:	f002 fca2 	bl	800c4ce <memcpy>

  hciContext.io.Send(0,0);
 8009b8a:	4b05      	ldr	r3, [pc, #20]	; (8009ba0 <SendCmd+0x48>)
 8009b8c:	691b      	ldr	r3, [r3, #16]
 8009b8e:	2100      	movs	r1, #0
 8009b90:	2000      	movs	r0, #0
 8009b92:	4798      	blx	r3

  return;
 8009b94:	bf00      	nop
}
 8009b96:	3708      	adds	r7, #8
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}
 8009b9c:	2000022c 	.word	0x2000022c
 8009ba0:	20001684 	.word	0x20001684

08009ba4 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b082      	sub	sp, #8
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	4603      	mov	r3, r0
 8009bac:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8009bae:	79fb      	ldrb	r3, [r7, #7]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d108      	bne.n	8009bc6 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8009bb4:	4b0a      	ldr	r3, [pc, #40]	; (8009be0 <NotifyCmdStatus+0x3c>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d00d      	beq.n	8009bd8 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8009bbc:	4b08      	ldr	r3, [pc, #32]	; (8009be0 <NotifyCmdStatus+0x3c>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	2000      	movs	r0, #0
 8009bc2:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8009bc4:	e008      	b.n	8009bd8 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8009bc6:	4b06      	ldr	r3, [pc, #24]	; (8009be0 <NotifyCmdStatus+0x3c>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d004      	beq.n	8009bd8 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8009bce:	4b04      	ldr	r3, [pc, #16]	; (8009be0 <NotifyCmdStatus+0x3c>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	2001      	movs	r0, #1
 8009bd4:	4798      	blx	r3
  return;
 8009bd6:	bf00      	nop
 8009bd8:	bf00      	nop
}
 8009bda:	3708      	adds	r7, #8
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	200016ac 	.word	0x200016ac

08009be4 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	7a5b      	ldrb	r3, [r3, #9]
 8009bf0:	2b0f      	cmp	r3, #15
 8009bf2:	d003      	beq.n	8009bfc <TlEvtReceived+0x18>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	7a5b      	ldrb	r3, [r3, #9]
 8009bf8:	2b0e      	cmp	r3, #14
 8009bfa:	d107      	bne.n	8009c0c <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8009bfc:	6879      	ldr	r1, [r7, #4]
 8009bfe:	4809      	ldr	r0, [pc, #36]	; (8009c24 <TlEvtReceived+0x40>)
 8009c00:	f000 faf2 	bl	800a1e8 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8009c04:	2000      	movs	r0, #0
 8009c06:	f7f9 fd17 	bl	8003638 <hci_cmd_resp_release>
 8009c0a:	e006      	b.n	8009c1a <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8009c0c:	6879      	ldr	r1, [r7, #4]
 8009c0e:	4806      	ldr	r0, [pc, #24]	; (8009c28 <TlEvtReceived+0x44>)
 8009c10:	f000 faea 	bl	800a1e8 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009c14:	4804      	ldr	r0, [pc, #16]	; (8009c28 <TlEvtReceived+0x44>)
 8009c16:	f7f9 fd03 	bl	8003620 <hci_notify_asynch_evt>
  }

  return;
 8009c1a:	bf00      	nop
}
 8009c1c:	3708      	adds	r7, #8
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	200016a4 	.word	0x200016a4
 8009c28:	20000224 	.word	0x20000224

08009c2c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b083      	sub	sp, #12
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	4a05      	ldr	r2, [pc, #20]	; (8009c4c <hci_register_io_bus+0x20>)
 8009c38:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	4a04      	ldr	r2, [pc, #16]	; (8009c50 <hci_register_io_bus+0x24>)
 8009c3e:	611a      	str	r2, [r3, #16]

  return;
 8009c40:	bf00      	nop
}
 8009c42:	370c      	adds	r7, #12
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr
 8009c4c:	0800ad85 	.word	0x0800ad85
 8009c50:	0800aded 	.word	0x0800aded

08009c54 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	60f8      	str	r0, [r7, #12]
 8009c5c:	60b9      	str	r1, [r7, #8]
 8009c5e:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8009c60:	687a      	ldr	r2, [r7, #4]
 8009c62:	68b9      	ldr	r1, [r7, #8]
 8009c64:	68f8      	ldr	r0, [r7, #12]
 8009c66:	f002 fc32 	bl	800c4ce <memcpy>
 8009c6a:	4603      	mov	r3, r0
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3710      	adds	r7, #16
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}

08009c74 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	60f8      	str	r0, [r7, #12]
 8009c7c:	60b9      	str	r1, [r7, #8]
 8009c7e:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8009c80:	687a      	ldr	r2, [r7, #4]
 8009c82:	68b9      	ldr	r1, [r7, #8]
 8009c84:	68f8      	ldr	r0, [r7, #12]
 8009c86:	f002 fb93 	bl	800c3b0 <memset>
 8009c8a:	4603      	mov	r3, r0
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3710      	adds	r7, #16
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8009c94:	b480      	push	{r7}
 8009c96:	b085      	sub	sp, #20
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8009c9e:	4b0f      	ldr	r3, [pc, #60]	; (8009cdc <OTP_Read+0x48>)
 8009ca0:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8009ca2:	e002      	b.n	8009caa <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	3b08      	subs	r3, #8
 8009ca8:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	3307      	adds	r3, #7
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	79fa      	ldrb	r2, [r7, #7]
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d003      	beq.n	8009cbe <OTP_Read+0x2a>
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	4a09      	ldr	r2, [pc, #36]	; (8009ce0 <OTP_Read+0x4c>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d1f2      	bne.n	8009ca4 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	3307      	adds	r3, #7
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	79fa      	ldrb	r2, [r7, #7]
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d001      	beq.n	8009cce <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8009cce:	68fb      	ldr	r3, [r7, #12]
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3714      	adds	r7, #20
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr
 8009cdc:	1fff73f8 	.word	0x1fff73f8
 8009ce0:	1fff7000 	.word	0x1fff7000

08009ce4 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b088      	sub	sp, #32
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009cec:	f107 030c 	add.w	r3, r7, #12
 8009cf0:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8009cf8:	69fb      	ldr	r3, [r7, #28]
 8009cfa:	212e      	movs	r1, #46	; 0x2e
 8009cfc:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8009d00:	f000 f94c 	bl	8009f9c <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009d04:	69fb      	ldr	r3, [r7, #28]
 8009d06:	330b      	adds	r3, #11
 8009d08:	78db      	ldrb	r3, [r3, #3]
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3720      	adds	r7, #32
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}

08009d12 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8009d12:	b580      	push	{r7, lr}
 8009d14:	b088      	sub	sp, #32
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009d1a:	f107 030c 	add.w	r3, r7, #12
 8009d1e:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8009d26:	69fb      	ldr	r3, [r7, #28]
 8009d28:	210f      	movs	r1, #15
 8009d2a:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8009d2e:	f000 f935 	bl	8009f9c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009d32:	69fb      	ldr	r3, [r7, #28]
 8009d34:	330b      	adds	r3, #11
 8009d36:	78db      	ldrb	r3, [r3, #3]
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3720      	adds	r7, #32
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b088      	sub	sp, #32
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009d48:	f107 030c 	add.w	r3, r7, #12
 8009d4c:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8009d4e:	69fb      	ldr	r3, [r7, #28]
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	2110      	movs	r1, #16
 8009d54:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8009d58:	f000 f920 	bl	8009f9c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009d5c:	69fb      	ldr	r3, [r7, #28]
 8009d5e:	330b      	adds	r3, #11
 8009d60:	78db      	ldrb	r3, [r3, #3]
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3720      	adds	r7, #32
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
	...

08009d6c <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b08b      	sub	sp, #44	; 0x2c
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8009d74:	2300      	movs	r3, #0
 8009d76:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8009d80:	2300      	movs	r3, #0
 8009d82:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8009d84:	2300      	movs	r3, #0
 8009d86:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8009d90:	2300      	movs	r3, #0
 8009d92:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8009d94:	4b4a      	ldr	r3, [pc, #296]	; (8009ec0 <SHCI_GetWirelessFwInfo+0x154>)
 8009d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d98:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009d9c:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	009b      	lsls	r3, r3, #2
 8009da2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009da6:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	4a44      	ldr	r2, [pc, #272]	; (8009ec4 <SHCI_GetWirelessFwInfo+0x158>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d10f      	bne.n	8009dd8 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	695b      	ldr	r3, [r3, #20]
 8009dbc:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	699b      	ldr	r3, [r3, #24]
 8009dc2:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	69db      	ldr	r3, [r3, #28]
 8009dc8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	68db      	ldr	r3, [r3, #12]
 8009dce:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	691b      	ldr	r3, [r3, #16]
 8009dd4:	617b      	str	r3, [r7, #20]
 8009dd6:	e01a      	b.n	8009e0e <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	009b      	lsls	r3, r3, #2
 8009ddc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009de0:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8009de4:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	691b      	ldr	r3, [r3, #16]
 8009dec:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	695b      	ldr	r3, [r3, #20]
 8009df4:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	699b      	ldr	r3, [r3, #24]
 8009dfc:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	689b      	ldr	r3, [r3, #8]
 8009e0c:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e10:	0e1b      	lsrs	r3, r3, #24
 8009e12:	b2da      	uxtb	r2, r3
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e1a:	0c1b      	lsrs	r3, r3, #16
 8009e1c:	b2da      	uxtb	r2, r3
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e24:	0a1b      	lsrs	r3, r3, #8
 8009e26:	b2da      	uxtb	r2, r3
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8009e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2e:	091b      	lsrs	r3, r3, #4
 8009e30:	b2db      	uxtb	r3, r3
 8009e32:	f003 030f 	and.w	r3, r3, #15
 8009e36:	b2da      	uxtb	r2, r3
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8009e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3e:	b2db      	uxtb	r3, r3
 8009e40:	f003 030f 	and.w	r3, r3, #15
 8009e44:	b2da      	uxtb	r2, r3
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009e4a:	6a3b      	ldr	r3, [r7, #32]
 8009e4c:	0e1b      	lsrs	r3, r3, #24
 8009e4e:	b2da      	uxtb	r2, r3
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009e54:	6a3b      	ldr	r3, [r7, #32]
 8009e56:	0c1b      	lsrs	r3, r3, #16
 8009e58:	b2da      	uxtb	r2, r3
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8009e5e:	6a3b      	ldr	r3, [r7, #32]
 8009e60:	0a1b      	lsrs	r3, r3, #8
 8009e62:	b2da      	uxtb	r2, r3
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009e68:	6a3b      	ldr	r3, [r7, #32]
 8009e6a:	b2da      	uxtb	r2, r3
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8009e70:	69fb      	ldr	r3, [r7, #28]
 8009e72:	b2da      	uxtb	r2, r3
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009e78:	69bb      	ldr	r3, [r7, #24]
 8009e7a:	0e1b      	lsrs	r3, r3, #24
 8009e7c:	b2da      	uxtb	r2, r3
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009e82:	69bb      	ldr	r3, [r7, #24]
 8009e84:	0c1b      	lsrs	r3, r3, #16
 8009e86:	b2da      	uxtb	r2, r3
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009e8c:	69bb      	ldr	r3, [r7, #24]
 8009e8e:	0a1b      	lsrs	r3, r3, #8
 8009e90:	b2da      	uxtb	r2, r3
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	0e1b      	lsrs	r3, r3, #24
 8009e9a:	b2da      	uxtb	r2, r3
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	0c1b      	lsrs	r3, r3, #16
 8009ea4:	b2da      	uxtb	r2, r3
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	b2da      	uxtb	r2, r3
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8009eb2:	2300      	movs	r3, #0
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	372c      	adds	r7, #44	; 0x2c
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr
 8009ec0:	58004000 	.word	0x58004000
 8009ec4:	a94656b9 	.word	0xa94656b9

08009ec8 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b082      	sub	sp, #8
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	685b      	ldr	r3, [r3, #4]
 8009ed6:	4a08      	ldr	r2, [pc, #32]	; (8009ef8 <shci_init+0x30>)
 8009ed8:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8009eda:	4a08      	ldr	r2, [pc, #32]	; (8009efc <shci_init+0x34>)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8009ee0:	4806      	ldr	r0, [pc, #24]	; (8009efc <shci_init+0x34>)
 8009ee2:	f000 f915 	bl	800a110 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4618      	mov	r0, r3
 8009eec:	f000 f898 	bl	800a020 <TlInit>

  return;
 8009ef0:	bf00      	nop
}
 8009ef2:	3708      	adds	r7, #8
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}
 8009ef8:	200016d4 	.word	0x200016d4
 8009efc:	200016b4 	.word	0x200016b4

08009f00 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b084      	sub	sp, #16
 8009f04:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009f06:	4822      	ldr	r0, [pc, #136]	; (8009f90 <shci_user_evt_proc+0x90>)
 8009f08:	f000 f926 	bl	800a158 <LST_is_empty>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d12b      	bne.n	8009f6a <shci_user_evt_proc+0x6a>
 8009f12:	4b20      	ldr	r3, [pc, #128]	; (8009f94 <shci_user_evt_proc+0x94>)
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d027      	beq.n	8009f6a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009f1a:	f107 030c 	add.w	r3, r7, #12
 8009f1e:	4619      	mov	r1, r3
 8009f20:	481b      	ldr	r0, [pc, #108]	; (8009f90 <shci_user_evt_proc+0x90>)
 8009f22:	f000 f9a8 	bl	800a276 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8009f26:	4b1c      	ldr	r3, [pc, #112]	; (8009f98 <shci_user_evt_proc+0x98>)
 8009f28:	69db      	ldr	r3, [r3, #28]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d00c      	beq.n	8009f48 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8009f32:	2301      	movs	r3, #1
 8009f34:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009f36:	4b18      	ldr	r3, [pc, #96]	; (8009f98 <shci_user_evt_proc+0x98>)
 8009f38:	69db      	ldr	r3, [r3, #28]
 8009f3a:	1d3a      	adds	r2, r7, #4
 8009f3c:	4610      	mov	r0, r2
 8009f3e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8009f40:	793a      	ldrb	r2, [r7, #4]
 8009f42:	4b14      	ldr	r3, [pc, #80]	; (8009f94 <shci_user_evt_proc+0x94>)
 8009f44:	701a      	strb	r2, [r3, #0]
 8009f46:	e002      	b.n	8009f4e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009f48:	4b12      	ldr	r3, [pc, #72]	; (8009f94 <shci_user_evt_proc+0x94>)
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8009f4e:	4b11      	ldr	r3, [pc, #68]	; (8009f94 <shci_user_evt_proc+0x94>)
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d004      	beq.n	8009f60 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f001 f857 	bl	800b00c <TL_MM_EvtDone>
 8009f5e:	e004      	b.n	8009f6a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	4619      	mov	r1, r3
 8009f64:	480a      	ldr	r0, [pc, #40]	; (8009f90 <shci_user_evt_proc+0x90>)
 8009f66:	f000 f919 	bl	800a19c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009f6a:	4809      	ldr	r0, [pc, #36]	; (8009f90 <shci_user_evt_proc+0x90>)
 8009f6c:	f000 f8f4 	bl	800a158 <LST_is_empty>
 8009f70:	4603      	mov	r3, r0
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d107      	bne.n	8009f86 <shci_user_evt_proc+0x86>
 8009f76:	4b07      	ldr	r3, [pc, #28]	; (8009f94 <shci_user_evt_proc+0x94>)
 8009f78:	781b      	ldrb	r3, [r3, #0]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d003      	beq.n	8009f86 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8009f7e:	4804      	ldr	r0, [pc, #16]	; (8009f90 <shci_user_evt_proc+0x90>)
 8009f80:	f7f7 fb30 	bl	80015e4 <shci_notify_asynch_evt>
  }


  return;
 8009f84:	bf00      	nop
 8009f86:	bf00      	nop
}
 8009f88:	3710      	adds	r7, #16
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	bf00      	nop
 8009f90:	2000025c 	.word	0x2000025c
 8009f94:	2000026c 	.word	0x2000026c
 8009f98:	200016b4 	.word	0x200016b4

08009f9c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	60ba      	str	r2, [r7, #8]
 8009fa4:	607b      	str	r3, [r7, #4]
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	81fb      	strh	r3, [r7, #14]
 8009faa:	460b      	mov	r3, r1
 8009fac:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8009fae:	2000      	movs	r0, #0
 8009fb0:	f000 f868 	bl	800a084 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8009fb4:	4b17      	ldr	r3, [pc, #92]	; (800a014 <shci_send+0x78>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	89fa      	ldrh	r2, [r7, #14]
 8009fba:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8009fbe:	4b15      	ldr	r3, [pc, #84]	; (800a014 <shci_send+0x78>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	7b7a      	ldrb	r2, [r7, #13]
 8009fc4:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8009fc6:	4b13      	ldr	r3, [pc, #76]	; (800a014 <shci_send+0x78>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	330c      	adds	r3, #12
 8009fcc:	7b7a      	ldrb	r2, [r7, #13]
 8009fce:	68b9      	ldr	r1, [r7, #8]
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f002 fa7c 	bl	800c4ce <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8009fd6:	4b10      	ldr	r3, [pc, #64]	; (800a018 <shci_send+0x7c>)
 8009fd8:	2201      	movs	r2, #1
 8009fda:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8009fdc:	4b0f      	ldr	r3, [pc, #60]	; (800a01c <shci_send+0x80>)
 8009fde:	691b      	ldr	r3, [r3, #16]
 8009fe0:	2100      	movs	r1, #0
 8009fe2:	2000      	movs	r0, #0
 8009fe4:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8009fe6:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8009fea:	f7f7 fb13 	bl	8001614 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f103 0008 	add.w	r0, r3, #8
 8009ff4:	4b07      	ldr	r3, [pc, #28]	; (800a014 <shci_send+0x78>)
 8009ff6:	6819      	ldr	r1, [r3, #0]
 8009ff8:	4b06      	ldr	r3, [pc, #24]	; (800a014 <shci_send+0x78>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	789b      	ldrb	r3, [r3, #2]
 8009ffe:	3303      	adds	r3, #3
 800a000:	461a      	mov	r2, r3
 800a002:	f002 fa64 	bl	800c4ce <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a006:	2001      	movs	r0, #1
 800a008:	f000 f83c 	bl	800a084 <Cmd_SetStatus>

  return;
 800a00c:	bf00      	nop
}
 800a00e:	3710      	adds	r7, #16
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}
 800a014:	20000268 	.word	0x20000268
 800a018:	200016d8 	.word	0x200016d8
 800a01c:	200016b4 	.word	0x200016b4

0800a020 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b086      	sub	sp, #24
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800a028:	4a10      	ldr	r2, [pc, #64]	; (800a06c <TlInit+0x4c>)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800a02e:	4810      	ldr	r0, [pc, #64]	; (800a070 <TlInit+0x50>)
 800a030:	f000 f882 	bl	800a138 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a034:	2001      	movs	r0, #1
 800a036:	f000 f825 	bl	800a084 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a03a:	4b0e      	ldr	r3, [pc, #56]	; (800a074 <TlInit+0x54>)
 800a03c:	2201      	movs	r2, #1
 800a03e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800a040:	4b0d      	ldr	r3, [pc, #52]	; (800a078 <TlInit+0x58>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d00c      	beq.n	800a062 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800a04c:	4b0b      	ldr	r3, [pc, #44]	; (800a07c <TlInit+0x5c>)
 800a04e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800a050:	4b0b      	ldr	r3, [pc, #44]	; (800a080 <TlInit+0x60>)
 800a052:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800a054:	4b08      	ldr	r3, [pc, #32]	; (800a078 <TlInit+0x58>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f107 020c 	add.w	r2, r7, #12
 800a05c:	4610      	mov	r0, r2
 800a05e:	4798      	blx	r3
  }

  return;
 800a060:	bf00      	nop
 800a062:	bf00      	nop
}
 800a064:	3718      	adds	r7, #24
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	20000268 	.word	0x20000268
 800a070:	2000025c 	.word	0x2000025c
 800a074:	2000026c 	.word	0x2000026c
 800a078:	200016b4 	.word	0x200016b4
 800a07c:	0800a0d5 	.word	0x0800a0d5
 800a080:	0800a0ed 	.word	0x0800a0ed

0800a084 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b082      	sub	sp, #8
 800a088:	af00      	add	r7, sp, #0
 800a08a:	4603      	mov	r3, r0
 800a08c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800a08e:	79fb      	ldrb	r3, [r7, #7]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d10b      	bne.n	800a0ac <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800a094:	4b0d      	ldr	r3, [pc, #52]	; (800a0cc <Cmd_SetStatus+0x48>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d003      	beq.n	800a0a4 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800a09c:	4b0b      	ldr	r3, [pc, #44]	; (800a0cc <Cmd_SetStatus+0x48>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	2000      	movs	r0, #0
 800a0a2:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800a0a4:	4b0a      	ldr	r3, [pc, #40]	; (800a0d0 <Cmd_SetStatus+0x4c>)
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800a0aa:	e00b      	b.n	800a0c4 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800a0ac:	4b08      	ldr	r3, [pc, #32]	; (800a0d0 <Cmd_SetStatus+0x4c>)
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800a0b2:	4b06      	ldr	r3, [pc, #24]	; (800a0cc <Cmd_SetStatus+0x48>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d004      	beq.n	800a0c4 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800a0ba:	4b04      	ldr	r3, [pc, #16]	; (800a0cc <Cmd_SetStatus+0x48>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	2001      	movs	r0, #1
 800a0c0:	4798      	blx	r3
  return;
 800a0c2:	bf00      	nop
 800a0c4:	bf00      	nop
}
 800a0c6:	3708      	adds	r7, #8
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}
 800a0cc:	200016d4 	.word	0x200016d4
 800a0d0:	20000264 	.word	0x20000264

0800a0d4 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b082      	sub	sp, #8
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800a0dc:	2000      	movs	r0, #0
 800a0de:	f7f7 fa8e 	bl	80015fe <shci_cmd_resp_release>

  return;
 800a0e2:	bf00      	nop
}
 800a0e4:	3708      	adds	r7, #8
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
	...

0800a0ec <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800a0f4:	6879      	ldr	r1, [r7, #4]
 800a0f6:	4805      	ldr	r0, [pc, #20]	; (800a10c <TlUserEvtReceived+0x20>)
 800a0f8:	f000 f876 	bl	800a1e8 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800a0fc:	4803      	ldr	r0, [pc, #12]	; (800a10c <TlUserEvtReceived+0x20>)
 800a0fe:	f7f7 fa71 	bl	80015e4 <shci_notify_asynch_evt>

  return;
 800a102:	bf00      	nop
}
 800a104:	3708      	adds	r7, #8
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
 800a10a:	bf00      	nop
 800a10c:	2000025c 	.word	0x2000025c

0800a110 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800a110:	b480      	push	{r7}
 800a112:	b083      	sub	sp, #12
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	4a05      	ldr	r2, [pc, #20]	; (800a130 <shci_register_io_bus+0x20>)
 800a11c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	4a04      	ldr	r2, [pc, #16]	; (800a134 <shci_register_io_bus+0x24>)
 800a122:	611a      	str	r2, [r3, #16]

  return;
 800a124:	bf00      	nop
}
 800a126:	370c      	adds	r7, #12
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr
 800a130:	0800ae99 	.word	0x0800ae99
 800a134:	0800aeed 	.word	0x0800aeed

0800a138 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800a138:	b480      	push	{r7}
 800a13a:	b083      	sub	sp, #12
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	687a      	ldr	r2, [r7, #4]
 800a14a:	605a      	str	r2, [r3, #4]
}
 800a14c:	bf00      	nop
 800a14e:	370c      	adds	r7, #12
 800a150:	46bd      	mov	sp, r7
 800a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a156:	4770      	bx	lr

0800a158 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800a158:	b480      	push	{r7}
 800a15a:	b087      	sub	sp, #28
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a160:	f3ef 8310 	mrs	r3, PRIMASK
 800a164:	60fb      	str	r3, [r7, #12]
  return(result);
 800a166:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a168:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a16a:	b672      	cpsid	i
}
 800a16c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	429a      	cmp	r2, r3
 800a176:	d102      	bne.n	800a17e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800a178:	2301      	movs	r3, #1
 800a17a:	75fb      	strb	r3, [r7, #23]
 800a17c:	e001      	b.n	800a182 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800a17e:	2300      	movs	r3, #0
 800a180:	75fb      	strb	r3, [r7, #23]
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	f383 8810 	msr	PRIMASK, r3
}
 800a18c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800a18e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a190:	4618      	mov	r0, r3
 800a192:	371c      	adds	r7, #28
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr

0800a19c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b087      	sub	sp, #28
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1a6:	f3ef 8310 	mrs	r3, PRIMASK
 800a1aa:	60fb      	str	r3, [r7, #12]
  return(result);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a1ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a1b0:	b672      	cpsid	i
}
 800a1b2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681a      	ldr	r2, [r3, #0]
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	687a      	ldr	r2, [r7, #4]
 800a1c0:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	683a      	ldr	r2, [r7, #0]
 800a1c6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	683a      	ldr	r2, [r7, #0]
 800a1ce:	605a      	str	r2, [r3, #4]
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	f383 8810 	msr	PRIMASK, r3
}
 800a1da:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a1dc:	bf00      	nop
 800a1de:	371c      	adds	r7, #28
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr

0800a1e8 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b087      	sub	sp, #28
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1f2:	f3ef 8310 	mrs	r3, PRIMASK
 800a1f6:	60fb      	str	r3, [r7, #12]
  return(result);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a1fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a1fc:	b672      	cpsid	i
}
 800a1fe:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	687a      	ldr	r2, [r7, #4]
 800a204:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	685a      	ldr	r2, [r3, #4]
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	683a      	ldr	r2, [r7, #0]
 800a212:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	683a      	ldr	r2, [r7, #0]
 800a21a:	601a      	str	r2, [r3, #0]
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	f383 8810 	msr	PRIMASK, r3
}
 800a226:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a228:	bf00      	nop
 800a22a:	371c      	adds	r7, #28
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr

0800a234 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800a234:	b480      	push	{r7}
 800a236:	b087      	sub	sp, #28
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a23c:	f3ef 8310 	mrs	r3, PRIMASK
 800a240:	60fb      	str	r3, [r7, #12]
  return(result);
 800a242:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a244:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a246:	b672      	cpsid	i
}
 800a248:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	6812      	ldr	r2, [r2, #0]
 800a252:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	6852      	ldr	r2, [r2, #4]
 800a25c:	605a      	str	r2, [r3, #4]
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	f383 8810 	msr	PRIMASK, r3
}
 800a268:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a26a:	bf00      	nop
 800a26c:	371c      	adds	r7, #28
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr

0800a276 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800a276:	b580      	push	{r7, lr}
 800a278:	b086      	sub	sp, #24
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	6078      	str	r0, [r7, #4]
 800a27e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a280:	f3ef 8310 	mrs	r3, PRIMASK
 800a284:	60fb      	str	r3, [r7, #12]
  return(result);
 800a286:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a288:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a28a:	b672      	cpsid	i
}
 800a28c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681a      	ldr	r2, [r3, #0]
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	4618      	mov	r0, r3
 800a29c:	f7ff ffca 	bl	800a234 <LST_remove_node>
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	f383 8810 	msr	PRIMASK, r3
}
 800a2aa:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a2ac:	bf00      	nop
 800a2ae:	3718      	adds	r7, #24
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b085      	sub	sp, #20
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	60b9      	str	r1, [r7, #8]
 800a2be:	607a      	str	r2, [r7, #4]
 800a2c0:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	68ba      	ldr	r2, [r7, #8]
 800a2c6:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	687a      	ldr	r2, [r7, #4]
 800a2e4:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	887a      	ldrh	r2, [r7, #2]
 800a2ea:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	7e3a      	ldrb	r2, [r7, #24]
 800a2f0:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800a2f2:	7e3b      	ldrb	r3, [r7, #24]
 800a2f4:	f003 0302 	and.w	r3, r3, #2
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d006      	beq.n	800a30a <CircularQueue_Init+0x56>
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	891b      	ldrh	r3, [r3, #8]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d002      	beq.n	800a30a <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800a304:	f04f 33ff 	mov.w	r3, #4294967295
 800a308:	e000      	b.n	800a30c <CircularQueue_Init+0x58>
  }
  return 0;
 800a30a:	2300      	movs	r3, #0
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3714      	adds	r7, #20
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr

0800a318 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b08e      	sub	sp, #56	; 0x38
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	603b      	str	r3, [r7, #0]
 800a324:	4613      	mov	r3, r2
 800a326:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800a328:	2300      	movs	r3, #0
 800a32a:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800a32c:	2300      	movs	r3, #0
 800a32e:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 800a330:	2300      	movs	r3, #0
 800a332:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800a334:	2300      	movs	r3, #0
 800a336:	62bb      	str	r3, [r7, #40]	; 0x28
 800a338:	2300      	movs	r3, #0
 800a33a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800a33c:	2300      	movs	r3, #0
 800a33e:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800a340:	2300      	movs	r3, #0
 800a342:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	891b      	ldrh	r3, [r3, #8]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d101      	bne.n	800a350 <CircularQueue_Add+0x38>
 800a34c:	2302      	movs	r3, #2
 800a34e:	e000      	b.n	800a352 <CircularQueue_Add+0x3a>
 800a350:	2300      	movs	r3, #0
 800a352:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	695b      	ldr	r3, [r3, #20]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d02a      	beq.n	800a3b2 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	891b      	ldrh	r3, [r3, #8]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d123      	bne.n	800a3ac <CircularQueue_Add+0x94>
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681a      	ldr	r2, [r3, #0]
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	691b      	ldr	r3, [r3, #16]
 800a36c:	4413      	add	r3, r2
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	b29a      	uxth	r2, r3
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	6819      	ldr	r1, [r3, #0]
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	691b      	ldr	r3, [r3, #16]
 800a37a:	1c58      	adds	r0, r3, #1
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	4298      	cmp	r0, r3
 800a382:	d306      	bcc.n	800a392 <CircularQueue_Add+0x7a>
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	6918      	ldr	r0, [r3, #16]
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	1ac3      	subs	r3, r0, r3
 800a38e:	3301      	adds	r3, #1
 800a390:	e002      	b.n	800a398 <CircularQueue_Add+0x80>
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	691b      	ldr	r3, [r3, #16]
 800a396:	3301      	adds	r3, #1
 800a398:	440b      	add	r3, r1
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	b29b      	uxth	r3, r3
 800a39e:	021b      	lsls	r3, r3, #8
 800a3a0:	b29b      	uxth	r3, r3
 800a3a2:	4413      	add	r3, r2
 800a3a4:	b29b      	uxth	r3, r3
 800a3a6:	3302      	adds	r3, #2
 800a3a8:	b29b      	uxth	r3, r3
 800a3aa:	e001      	b.n	800a3b0 <CircularQueue_Add+0x98>
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	891b      	ldrh	r3, [r3, #8]
 800a3b0:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	891b      	ldrh	r3, [r3, #8]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d002      	beq.n	800a3c0 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	891b      	ldrh	r3, [r3, #8]
 800a3be:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	691a      	ldr	r2, [r3, #16]
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	68db      	ldr	r3, [r3, #12]
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	d307      	bcc.n	800a3dc <CircularQueue_Add+0xc4>
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	685a      	ldr	r2, [r3, #4]
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	6919      	ldr	r1, [r3, #16]
 800a3d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a3d6:	440b      	add	r3, r1
 800a3d8:	1ad3      	subs	r3, r2, r3
 800a3da:	e000      	b.n	800a3de <CircularQueue_Add+0xc6>
 800a3dc:	2300      	movs	r3, #0
 800a3de:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800a3e0:	88fa      	ldrh	r2, [r7, #6]
 800a3e2:	7ffb      	ldrb	r3, [r7, #31]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	fb02 f303 	mul.w	r3, r2, r3
 800a3ee:	69ba      	ldr	r2, [r7, #24]
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	d80b      	bhi.n	800a40c <CircularQueue_Add+0xf4>
 800a3f4:	88fa      	ldrh	r2, [r7, #6]
 800a3f6:	7ffb      	ldrb	r3, [r7, #31]
 800a3f8:	4413      	add	r3, r2
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	69bb      	ldr	r3, [r7, #24]
 800a3fe:	fbb3 f1f2 	udiv	r1, r3, r2
 800a402:	fb01 f202 	mul.w	r2, r1, r2
 800a406:	1a9b      	subs	r3, r3, r2
 800a408:	b2db      	uxtb	r3, r3
 800a40a:	e000      	b.n	800a40e <CircularQueue_Add+0xf6>
 800a40c:	2300      	movs	r3, #0
 800a40e:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800a410:	7dfa      	ldrb	r2, [r7, #23]
 800a412:	7ffb      	ldrb	r3, [r7, #31]
 800a414:	429a      	cmp	r2, r3
 800a416:	bf8c      	ite	hi
 800a418:	2301      	movhi	r3, #1
 800a41a:	2300      	movls	r3, #0
 800a41c:	b2db      	uxtb	r3, r3
 800a41e:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800a420:	7fbb      	ldrb	r3, [r7, #30]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d008      	beq.n	800a438 <CircularQueue_Add+0x120>
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	7f1b      	ldrb	r3, [r3, #28]
 800a42a:	f003 0301 	and.w	r3, r3, #1
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d002      	beq.n	800a438 <CircularQueue_Add+0x120>
 800a432:	7dfb      	ldrb	r3, [r7, #23]
 800a434:	b29b      	uxth	r3, r3
 800a436:	e000      	b.n	800a43a <CircularQueue_Add+0x122>
 800a438:	8bbb      	ldrh	r3, [r7, #28]
 800a43a:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800a43c:	7fbb      	ldrb	r3, [r7, #30]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d008      	beq.n	800a454 <CircularQueue_Add+0x13c>
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	7f1b      	ldrb	r3, [r3, #28]
 800a446:	f003 0302 	and.w	r3, r3, #2
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d002      	beq.n	800a454 <CircularQueue_Add+0x13c>
 800a44e:	7ffb      	ldrb	r3, [r7, #31]
 800a450:	b29b      	uxth	r3, r3
 800a452:	e000      	b.n	800a456 <CircularQueue_Add+0x13e>
 800a454:	8bbb      	ldrh	r3, [r7, #28]
 800a456:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800a458:	88fb      	ldrh	r3, [r7, #6]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	f000 817e 	beq.w	800a75c <CircularQueue_Add+0x444>
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	695a      	ldr	r2, [r3, #20]
 800a464:	88f9      	ldrh	r1, [r7, #6]
 800a466:	7ffb      	ldrb	r3, [r7, #31]
 800a468:	440b      	add	r3, r1
 800a46a:	4619      	mov	r1, r3
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	fb01 f303 	mul.w	r3, r1, r3
 800a472:	441a      	add	r2, r3
 800a474:	8bbb      	ldrh	r3, [r7, #28]
 800a476:	441a      	add	r2, r3
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	429a      	cmp	r2, r3
 800a47e:	f200 816d 	bhi.w	800a75c <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800a482:	2300      	movs	r3, #0
 800a484:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a486:	e14a      	b.n	800a71e <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	691a      	ldr	r2, [r3, #16]
 800a48c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a48e:	441a      	add	r2, r3
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	429a      	cmp	r2, r3
 800a496:	d307      	bcc.n	800a4a8 <CircularQueue_Add+0x190>
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	691a      	ldr	r2, [r3, #16]
 800a49c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a49e:	441a      	add	r2, r3
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	1ad3      	subs	r3, r2, r3
 800a4a6:	e003      	b.n	800a4b0 <CircularQueue_Add+0x198>
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	691a      	ldr	r2, [r3, #16]
 800a4ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a4ae:	4413      	add	r3, r2
 800a4b0:	68fa      	ldr	r2, [r7, #12]
 800a4b2:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	691b      	ldr	r3, [r3, #16]
 800a4b8:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	891b      	ldrh	r3, [r3, #8]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d130      	bne.n	800a524 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681a      	ldr	r2, [r3, #0]
 800a4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c8:	1c59      	adds	r1, r3, #1
 800a4ca:	6339      	str	r1, [r7, #48]	; 0x30
 800a4cc:	4413      	add	r3, r2
 800a4ce:	88fa      	ldrh	r2, [r7, #6]
 800a4d0:	b2d2      	uxtb	r2, r2
 800a4d2:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d304      	bcc.n	800a4e8 <CircularQueue_Add+0x1d0>
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4e4:	1ad3      	subs	r3, r2, r3
 800a4e6:	e000      	b.n	800a4ea <CircularQueue_Add+0x1d2>
 800a4e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ea:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800a4ec:	88fb      	ldrh	r3, [r7, #6]
 800a4ee:	0a1b      	lsrs	r3, r3, #8
 800a4f0:	b298      	uxth	r0, r3
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681a      	ldr	r2, [r3, #0]
 800a4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f8:	1c59      	adds	r1, r3, #1
 800a4fa:	6339      	str	r1, [r7, #48]	; 0x30
 800a4fc:	4413      	add	r3, r2
 800a4fe:	b2c2      	uxtb	r2, r0
 800a500:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a508:	429a      	cmp	r2, r3
 800a50a:	d304      	bcc.n	800a516 <CircularQueue_Add+0x1fe>
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a512:	1ad3      	subs	r3, r2, r3
 800a514:	e000      	b.n	800a518 <CircularQueue_Add+0x200>
 800a516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a518:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	695b      	ldr	r3, [r3, #20]
 800a51e:	1c9a      	adds	r2, r3, #2
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800a524:	88fa      	ldrh	r2, [r7, #6]
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	6859      	ldr	r1, [r3, #4]
 800a52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a52c:	1acb      	subs	r3, r1, r3
 800a52e:	4293      	cmp	r3, r2
 800a530:	bf28      	it	cs
 800a532:	4613      	movcs	r3, r2
 800a534:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800a536:	88fb      	ldrh	r3, [r7, #6]
 800a538:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d007      	beq.n	800a54e <CircularQueue_Add+0x236>
 800a53e:	88fb      	ldrh	r3, [r7, #6]
 800a540:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a542:	429a      	cmp	r2, r3
 800a544:	d225      	bcs.n	800a592 <CircularQueue_Add+0x27a>
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	7f1b      	ldrb	r3, [r3, #28]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d121      	bne.n	800a592 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681a      	ldr	r2, [r3, #0]
 800a552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a554:	18d0      	adds	r0, r2, r3
 800a556:	88fb      	ldrh	r3, [r7, #6]
 800a558:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a55a:	fb02 f303 	mul.w	r3, r2, r3
 800a55e:	68ba      	ldr	r2, [r7, #8]
 800a560:	4413      	add	r3, r2
 800a562:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a564:	4619      	mov	r1, r3
 800a566:	f001 ffb2 	bl	800c4ce <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	695a      	ldr	r2, [r3, #20]
 800a56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a570:	441a      	add	r2, r3
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800a576:	2300      	movs	r3, #0
 800a578:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800a57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a57c:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800a57e:	88fa      	ldrh	r2, [r7, #6]
 800a580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a582:	1ad3      	subs	r3, r2, r3
 800a584:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800a586:	7ffb      	ldrb	r3, [r7, #31]
 800a588:	b29a      	uxth	r2, r3
 800a58a:	88fb      	ldrh	r3, [r7, #6]
 800a58c:	4413      	add	r3, r2
 800a58e:	86fb      	strh	r3, [r7, #54]	; 0x36
 800a590:	e0a4      	b.n	800a6dc <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800a592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a594:	2b00      	cmp	r3, #0
 800a596:	f000 80a1 	beq.w	800a6dc <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	7f1b      	ldrb	r3, [r3, #28]
 800a59e:	f003 0301 	and.w	r3, r3, #1
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d03a      	beq.n	800a61c <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	891b      	ldrh	r3, [r3, #8]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d10d      	bne.n	800a5ca <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681a      	ldr	r2, [r3, #0]
 800a5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b4:	3b02      	subs	r3, #2
 800a5b6:	4413      	add	r3, r2
 800a5b8:	22ff      	movs	r2, #255	; 0xff
 800a5ba:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c2:	3b01      	subs	r3, #1
 800a5c4:	4413      	add	r3, r2
 800a5c6:	22ff      	movs	r2, #255	; 0xff
 800a5c8:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	695a      	ldr	r2, [r3, #20]
 800a5ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d0:	441a      	add	r2, r3
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800a5da:	88fb      	ldrh	r3, [r7, #6]
 800a5dc:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800a5de:	2300      	movs	r3, #0
 800a5e0:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	891b      	ldrh	r3, [r3, #8]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d16f      	bne.n	800a6ca <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f0:	1c59      	adds	r1, r3, #1
 800a5f2:	6339      	str	r1, [r7, #48]	; 0x30
 800a5f4:	4413      	add	r3, r2
 800a5f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5f8:	b2d2      	uxtb	r2, r2
 800a5fa:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a5fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5fe:	0a18      	lsrs	r0, r3, #8
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681a      	ldr	r2, [r3, #0]
 800a604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a606:	1c59      	adds	r1, r3, #1
 800a608:	6339      	str	r1, [r7, #48]	; 0x30
 800a60a:	4413      	add	r3, r2
 800a60c:	b2c2      	uxtb	r2, r0
 800a60e:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	695b      	ldr	r3, [r3, #20]
 800a614:	1c9a      	adds	r2, r3, #2
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	615a      	str	r2, [r3, #20]
 800a61a:	e056      	b.n	800a6ca <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	7f1b      	ldrb	r3, [r3, #28]
 800a620:	f003 0302 	and.w	r3, r3, #2
 800a624:	2b00      	cmp	r3, #0
 800a626:	d050      	beq.n	800a6ca <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	891b      	ldrh	r3, [r3, #8]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d14a      	bne.n	800a6c6 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a636:	3b02      	subs	r3, #2
 800a638:	4413      	add	r3, r2
 800a63a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a63c:	b2d2      	uxtb	r2, r2
 800a63e:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a642:	0a19      	lsrs	r1, r3, #8
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681a      	ldr	r2, [r3, #0]
 800a648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a64a:	3b01      	subs	r3, #1
 800a64c:	4413      	add	r3, r2
 800a64e:	b2ca      	uxtb	r2, r1
 800a650:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681a      	ldr	r2, [r3, #0]
 800a656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a658:	18d0      	adds	r0, r2, r3
 800a65a:	88fb      	ldrh	r3, [r7, #6]
 800a65c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a65e:	fb02 f303 	mul.w	r3, r2, r3
 800a662:	68ba      	ldr	r2, [r7, #8]
 800a664:	4413      	add	r3, r2
 800a666:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a668:	4619      	mov	r1, r3
 800a66a:	f001 ff30 	bl	800c4ce <memcpy>
             q->byteCount += NbBytesToCopy; 
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	695a      	ldr	r2, [r3, #20]
 800a672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a674:	441a      	add	r2, r3
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800a67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a67c:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800a67e:	88fa      	ldrh	r2, [r7, #6]
 800a680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a682:	1ad3      	subs	r3, r2, r3
 800a684:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	699b      	ldr	r3, [r3, #24]
 800a68a:	1c5a      	adds	r2, r3, #1
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800a690:	2300      	movs	r3, #0
 800a692:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681a      	ldr	r2, [r3, #0]
 800a698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a69a:	1c59      	adds	r1, r3, #1
 800a69c:	6339      	str	r1, [r7, #48]	; 0x30
 800a69e:	4413      	add	r3, r2
 800a6a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6a2:	b2d2      	uxtb	r2, r2
 800a6a4:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a8:	0a18      	lsrs	r0, r3, #8
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681a      	ldr	r2, [r3, #0]
 800a6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b0:	1c59      	adds	r1, r3, #1
 800a6b2:	6339      	str	r1, [r7, #48]	; 0x30
 800a6b4:	4413      	add	r3, r2
 800a6b6:	b2c2      	uxtb	r2, r0
 800a6b8:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	695b      	ldr	r3, [r3, #20]
 800a6be:	1c9a      	adds	r2, r3, #2
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	615a      	str	r2, [r3, #20]
 800a6c4:	e001      	b.n	800a6ca <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	e049      	b.n	800a75e <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800a6ca:	7ffb      	ldrb	r3, [r7, #31]
 800a6cc:	b29a      	uxth	r2, r3
 800a6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d0:	b29b      	uxth	r3, r3
 800a6d2:	4413      	add	r3, r2
 800a6d4:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 800a6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d015      	beq.n	800a70e <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681a      	ldr	r2, [r3, #0]
 800a6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e8:	18d0      	adds	r0, r2, r3
 800a6ea:	88fb      	ldrh	r3, [r7, #6]
 800a6ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6ee:	fb03 f202 	mul.w	r2, r3, r2
 800a6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f4:	4413      	add	r3, r2
 800a6f6:	68ba      	ldr	r2, [r7, #8]
 800a6f8:	4413      	add	r3, r2
 800a6fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6fc:	4619      	mov	r1, r3
 800a6fe:	f001 fee6 	bl	800c4ce <memcpy>
        q->byteCount += NbBytesToCopy;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	695a      	ldr	r2, [r3, #20]
 800a706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a708:	441a      	add	r2, r3
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	699b      	ldr	r3, [r3, #24]
 800a712:	1c5a      	adds	r2, r3, #1
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800a718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a71a:	3301      	adds	r3, #1
 800a71c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a71e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	429a      	cmp	r2, r3
 800a724:	f4ff aeb0 	bcc.w	800a488 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681a      	ldr	r2, [r3, #0]
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	6919      	ldr	r1, [r3, #16]
 800a730:	7ffb      	ldrb	r3, [r7, #31]
 800a732:	4419      	add	r1, r3
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	4299      	cmp	r1, r3
 800a73a:	d307      	bcc.n	800a74c <CircularQueue_Add+0x434>
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	6919      	ldr	r1, [r3, #16]
 800a740:	7ffb      	ldrb	r3, [r7, #31]
 800a742:	4419      	add	r1, r3
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	685b      	ldr	r3, [r3, #4]
 800a748:	1acb      	subs	r3, r1, r3
 800a74a:	e003      	b.n	800a754 <CircularQueue_Add+0x43c>
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	6919      	ldr	r1, [r3, #16]
 800a750:	7ffb      	ldrb	r3, [r7, #31]
 800a752:	440b      	add	r3, r1
 800a754:	4413      	add	r3, r2
 800a756:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800a758:	6a3b      	ldr	r3, [r7, #32]
 800a75a:	e000      	b.n	800a75e <CircularQueue_Add+0x446>
    return NULL;
 800a75c:	2300      	movs	r3, #0
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3738      	adds	r7, #56	; 0x38
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}

0800a766 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800a766:	b480      	push	{r7}
 800a768:	b085      	sub	sp, #20
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	6078      	str	r0, [r7, #4]
 800a76e:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800a770:	2300      	movs	r3, #0
 800a772:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800a774:	2300      	movs	r3, #0
 800a776:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	891b      	ldrh	r3, [r3, #8]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d101      	bne.n	800a784 <CircularQueue_Remove+0x1e>
 800a780:	2302      	movs	r3, #2
 800a782:	e000      	b.n	800a786 <CircularQueue_Remove+0x20>
 800a784:	2300      	movs	r3, #0
 800a786:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800a788:	2300      	movs	r3, #0
 800a78a:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	695b      	ldr	r3, [r3, #20]
 800a790:	2b00      	cmp	r3, #0
 800a792:	f000 80cc 	beq.w	800a92e <CircularQueue_Remove+0x1c8>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	891b      	ldrh	r3, [r3, #8]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d121      	bne.n	800a7e2 <CircularQueue_Remove+0x7c>
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681a      	ldr	r2, [r3, #0]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	68db      	ldr	r3, [r3, #12]
 800a7a6:	4413      	add	r3, r2
 800a7a8:	781b      	ldrb	r3, [r3, #0]
 800a7aa:	b29a      	uxth	r2, r3
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6819      	ldr	r1, [r3, #0]
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	68db      	ldr	r3, [r3, #12]
 800a7b4:	1c58      	adds	r0, r3, #1
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	685b      	ldr	r3, [r3, #4]
 800a7ba:	4298      	cmp	r0, r3
 800a7bc:	d306      	bcc.n	800a7cc <CircularQueue_Remove+0x66>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	68d8      	ldr	r0, [r3, #12]
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	1ac3      	subs	r3, r0, r3
 800a7c8:	3301      	adds	r3, #1
 800a7ca:	e002      	b.n	800a7d2 <CircularQueue_Remove+0x6c>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	68db      	ldr	r3, [r3, #12]
 800a7d0:	3301      	adds	r3, #1
 800a7d2:	440b      	add	r3, r1
 800a7d4:	781b      	ldrb	r3, [r3, #0]
 800a7d6:	b29b      	uxth	r3, r3
 800a7d8:	021b      	lsls	r3, r3, #8
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	4413      	add	r3, r2
 800a7de:	b29b      	uxth	r3, r3
 800a7e0:	e001      	b.n	800a7e6 <CircularQueue_Remove+0x80>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	891b      	ldrh	r3, [r3, #8]
 800a7e6:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	7f1b      	ldrb	r3, [r3, #28]
 800a7ec:	f003 0301 	and.w	r3, r3, #1
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d057      	beq.n	800a8a4 <CircularQueue_Remove+0x13e>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	7f1b      	ldrb	r3, [r3, #28]
 800a7f8:	f003 0302 	and.w	r3, r3, #2
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d151      	bne.n	800a8a4 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a800:	897b      	ldrh	r3, [r7, #10]
 800a802:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a806:	4293      	cmp	r3, r2
 800a808:	d103      	bne.n	800a812 <CircularQueue_Remove+0xac>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	891b      	ldrh	r3, [r3, #8]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d012      	beq.n	800a838 <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	68da      	ldr	r2, [r3, #12]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d942      	bls.n	800a8a4 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	891b      	ldrh	r3, [r3, #8]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d03e      	beq.n	800a8a4 <CircularQueue_Remove+0x13e>
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	685a      	ldr	r2, [r3, #4]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	68db      	ldr	r3, [r3, #12]
 800a82e:	1ad3      	subs	r3, r2, r3
 800a830:	687a      	ldr	r2, [r7, #4]
 800a832:	8912      	ldrh	r2, [r2, #8]
 800a834:	4293      	cmp	r3, r2
 800a836:	d235      	bcs.n	800a8a4 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	695a      	ldr	r2, [r3, #20]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	68d9      	ldr	r1, [r3, #12]
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	1acb      	subs	r3, r1, r3
 800a846:	441a      	add	r2, r3
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2200      	movs	r2, #0
 800a850:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	891b      	ldrh	r3, [r3, #8]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d121      	bne.n	800a89e <CircularQueue_Remove+0x138>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681a      	ldr	r2, [r3, #0]
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	68db      	ldr	r3, [r3, #12]
 800a862:	4413      	add	r3, r2
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	b29a      	uxth	r2, r3
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6819      	ldr	r1, [r3, #0]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	68db      	ldr	r3, [r3, #12]
 800a870:	1c58      	adds	r0, r3, #1
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	685b      	ldr	r3, [r3, #4]
 800a876:	4298      	cmp	r0, r3
 800a878:	d306      	bcc.n	800a888 <CircularQueue_Remove+0x122>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	68d8      	ldr	r0, [r3, #12]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	685b      	ldr	r3, [r3, #4]
 800a882:	1ac3      	subs	r3, r0, r3
 800a884:	3301      	adds	r3, #1
 800a886:	e002      	b.n	800a88e <CircularQueue_Remove+0x128>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	68db      	ldr	r3, [r3, #12]
 800a88c:	3301      	adds	r3, #1
 800a88e:	440b      	add	r3, r1
 800a890:	781b      	ldrb	r3, [r3, #0]
 800a892:	b29b      	uxth	r3, r3
 800a894:	021b      	lsls	r3, r3, #8
 800a896:	b29b      	uxth	r3, r3
 800a898:	4413      	add	r3, r2
 800a89a:	b29b      	uxth	r3, r3
 800a89c:	e001      	b.n	800a8a2 <CircularQueue_Remove+0x13c>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	891b      	ldrh	r3, [r3, #8]
 800a8a2:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681a      	ldr	r2, [r3, #0]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	68d9      	ldr	r1, [r3, #12]
 800a8ac:	7a7b      	ldrb	r3, [r7, #9]
 800a8ae:	4419      	add	r1, r3
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	685b      	ldr	r3, [r3, #4]
 800a8b4:	4299      	cmp	r1, r3
 800a8b6:	d307      	bcc.n	800a8c8 <CircularQueue_Remove+0x162>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	68d9      	ldr	r1, [r3, #12]
 800a8bc:	7a7b      	ldrb	r3, [r7, #9]
 800a8be:	4419      	add	r1, r3
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	1acb      	subs	r3, r1, r3
 800a8c6:	e003      	b.n	800a8d0 <CircularQueue_Remove+0x16a>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	68d9      	ldr	r1, [r3, #12]
 800a8cc:	7a7b      	ldrb	r3, [r7, #9]
 800a8ce:	440b      	add	r3, r1
 800a8d0:	4413      	add	r3, r2
 800a8d2:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	695b      	ldr	r3, [r3, #20]
 800a8d8:	8979      	ldrh	r1, [r7, #10]
 800a8da:	7a7a      	ldrb	r2, [r7, #9]
 800a8dc:	440a      	add	r2, r1
 800a8de:	1a9a      	subs	r2, r3, r2
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	695b      	ldr	r3, [r3, #20]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d01b      	beq.n	800a924 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	68da      	ldr	r2, [r3, #12]
 800a8f0:	897b      	ldrh	r3, [r7, #10]
 800a8f2:	441a      	add	r2, r3
 800a8f4:	7a7b      	ldrb	r3, [r7, #9]
 800a8f6:	441a      	add	r2, r3
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	685b      	ldr	r3, [r3, #4]
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d309      	bcc.n	800a914 <CircularQueue_Remove+0x1ae>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	68da      	ldr	r2, [r3, #12]
 800a904:	897b      	ldrh	r3, [r7, #10]
 800a906:	441a      	add	r2, r3
 800a908:	7a7b      	ldrb	r3, [r7, #9]
 800a90a:	441a      	add	r2, r3
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	1ad3      	subs	r3, r2, r3
 800a912:	e005      	b.n	800a920 <CircularQueue_Remove+0x1ba>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	68da      	ldr	r2, [r3, #12]
 800a918:	897b      	ldrh	r3, [r7, #10]
 800a91a:	441a      	add	r2, r3
 800a91c:	7a7b      	ldrb	r3, [r7, #9]
 800a91e:	4413      	add	r3, r2
 800a920:	687a      	ldr	r2, [r7, #4]
 800a922:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	699b      	ldr	r3, [r3, #24]
 800a928:	1e5a      	subs	r2, r3, #1
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d002      	beq.n	800a93a <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	897a      	ldrh	r2, [r7, #10]
 800a938:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800a93a:	68fb      	ldr	r3, [r7, #12]
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3714      	adds	r7, #20
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr

0800a948 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800a948:	b480      	push	{r7}
 800a94a:	b087      	sub	sp, #28
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800a952:	2300      	movs	r3, #0
 800a954:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800a956:	2300      	movs	r3, #0
 800a958:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	891b      	ldrh	r3, [r3, #8]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d101      	bne.n	800a966 <CircularQueue_Sense+0x1e>
 800a962:	2302      	movs	r3, #2
 800a964:	e000      	b.n	800a968 <CircularQueue_Sense+0x20>
 800a966:	2300      	movs	r3, #0
 800a968:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800a96a:	2300      	movs	r3, #0
 800a96c:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800a96e:	2300      	movs	r3, #0
 800a970:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	695b      	ldr	r3, [r3, #20]
 800a976:	2b00      	cmp	r3, #0
 800a978:	f000 8090 	beq.w	800aa9c <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	68db      	ldr	r3, [r3, #12]
 800a980:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	891b      	ldrh	r3, [r3, #8]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d121      	bne.n	800a9ce <CircularQueue_Sense+0x86>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681a      	ldr	r2, [r3, #0]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	68db      	ldr	r3, [r3, #12]
 800a992:	4413      	add	r3, r2
 800a994:	781b      	ldrb	r3, [r3, #0]
 800a996:	b29a      	uxth	r2, r3
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6819      	ldr	r1, [r3, #0]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	68db      	ldr	r3, [r3, #12]
 800a9a0:	1c58      	adds	r0, r3, #1
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	4298      	cmp	r0, r3
 800a9a8:	d306      	bcc.n	800a9b8 <CircularQueue_Sense+0x70>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	68d8      	ldr	r0, [r3, #12]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	1ac3      	subs	r3, r0, r3
 800a9b4:	3301      	adds	r3, #1
 800a9b6:	e002      	b.n	800a9be <CircularQueue_Sense+0x76>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	68db      	ldr	r3, [r3, #12]
 800a9bc:	3301      	adds	r3, #1
 800a9be:	440b      	add	r3, r1
 800a9c0:	781b      	ldrb	r3, [r3, #0]
 800a9c2:	b29b      	uxth	r3, r3
 800a9c4:	021b      	lsls	r3, r3, #8
 800a9c6:	b29b      	uxth	r3, r3
 800a9c8:	4413      	add	r3, r2
 800a9ca:	b29b      	uxth	r3, r3
 800a9cc:	e001      	b.n	800a9d2 <CircularQueue_Sense+0x8a>
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	891b      	ldrh	r3, [r3, #8]
 800a9d2:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	7f1b      	ldrb	r3, [r3, #28]
 800a9d8:	f003 0301 	and.w	r3, r3, #1
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d048      	beq.n	800aa72 <CircularQueue_Sense+0x12a>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	7f1b      	ldrb	r3, [r3, #28]
 800a9e4:	f003 0302 	and.w	r3, r3, #2
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d142      	bne.n	800aa72 <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a9ec:	8a7b      	ldrh	r3, [r7, #18]
 800a9ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d103      	bne.n	800a9fe <CircularQueue_Sense+0xb6>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	891b      	ldrh	r3, [r3, #8]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d012      	beq.n	800aa24 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	68da      	ldr	r2, [r3, #12]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d933      	bls.n	800aa72 <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	891b      	ldrh	r3, [r3, #8]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d02f      	beq.n	800aa72 <CircularQueue_Sense+0x12a>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	685a      	ldr	r2, [r3, #4]
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	68db      	ldr	r3, [r3, #12]
 800aa1a:	1ad3      	subs	r3, r2, r3
 800aa1c:	687a      	ldr	r2, [r7, #4]
 800aa1e:	8912      	ldrh	r2, [r2, #8]
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d226      	bcs.n	800aa72 <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800aa24:	2300      	movs	r3, #0
 800aa26:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	891b      	ldrh	r3, [r3, #8]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d11d      	bne.n	800aa6c <CircularQueue_Sense+0x124>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681a      	ldr	r2, [r3, #0]
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	4413      	add	r3, r2
 800aa38:	781b      	ldrb	r3, [r3, #0]
 800aa3a:	b29a      	uxth	r2, r3
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6819      	ldr	r1, [r3, #0]
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	1c58      	adds	r0, r3, #1
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	685b      	ldr	r3, [r3, #4]
 800aa48:	4298      	cmp	r0, r3
 800aa4a:	d305      	bcc.n	800aa58 <CircularQueue_Sense+0x110>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	685b      	ldr	r3, [r3, #4]
 800aa50:	68f8      	ldr	r0, [r7, #12]
 800aa52:	1ac3      	subs	r3, r0, r3
 800aa54:	3301      	adds	r3, #1
 800aa56:	e001      	b.n	800aa5c <CircularQueue_Sense+0x114>
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	3301      	adds	r3, #1
 800aa5c:	440b      	add	r3, r1
 800aa5e:	781b      	ldrb	r3, [r3, #0]
 800aa60:	b29b      	uxth	r3, r3
 800aa62:	021b      	lsls	r3, r3, #8
 800aa64:	b29b      	uxth	r3, r3
 800aa66:	4413      	add	r3, r2
 800aa68:	b29b      	uxth	r3, r3
 800aa6a:	e001      	b.n	800aa70 <CircularQueue_Sense+0x128>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	891b      	ldrh	r3, [r3, #8]
 800aa70:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681a      	ldr	r2, [r3, #0]
 800aa76:	7af9      	ldrb	r1, [r7, #11]
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	4419      	add	r1, r3
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	4299      	cmp	r1, r3
 800aa82:	d306      	bcc.n	800aa92 <CircularQueue_Sense+0x14a>
 800aa84:	7af9      	ldrb	r1, [r7, #11]
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	4419      	add	r1, r3
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	1acb      	subs	r3, r1, r3
 800aa90:	e002      	b.n	800aa98 <CircularQueue_Sense+0x150>
 800aa92:	7af9      	ldrb	r1, [r7, #11]
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	440b      	add	r3, r1
 800aa98:	4413      	add	r3, r2
 800aa9a:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d002      	beq.n	800aaa8 <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	8a7a      	ldrh	r2, [r7, #18]
 800aaa6:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800aaa8:	697b      	ldr	r3, [r7, #20]
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	371c      	adds	r7, #28
 800aaae:	46bd      	mov	sp, r7
 800aab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab4:	4770      	bx	lr

0800aab6 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800aab6:	b480      	push	{r7}
 800aab8:	af00      	add	r7, sp, #0
  return;
 800aaba:	bf00      	nop
}
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr

0800aac4 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800aac4:	b480      	push	{r7}
 800aac6:	af00      	add	r7, sp, #0
  return;
 800aac8:	bf00      	nop
}
 800aaca:	46bd      	mov	sp, r7
 800aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad0:	4770      	bx	lr

0800aad2 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800aad2:	b480      	push	{r7}
 800aad4:	af00      	add	r7, sp, #0
  return;
 800aad6:	bf00      	nop
}
 800aad8:	46bd      	mov	sp, r7
 800aada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aade:	4770      	bx	lr

0800aae0 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800aae0:	b480      	push	{r7}
 800aae2:	af00      	add	r7, sp, #0
  return;
 800aae4:	bf00      	nop
}
 800aae6:	46bd      	mov	sp, r7
 800aae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaec:	4770      	bx	lr

0800aaee <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800aaee:	b480      	push	{r7}
 800aaf0:	af00      	add	r7, sp, #0
  return;
 800aaf2:	bf00      	nop
}
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr

0800aafc <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800aafc:	b480      	push	{r7}
 800aafe:	af00      	add	r7, sp, #0
  return;
 800ab00:	bf00      	nop
}
 800ab02:	46bd      	mov	sp, r7
 800ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab08:	4770      	bx	lr

0800ab0a <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800ab0a:	b480      	push	{r7}
 800ab0c:	af00      	add	r7, sp, #0
  return;
 800ab0e:	bf00      	nop
}
 800ab10:	46bd      	mov	sp, r7
 800ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab16:	4770      	bx	lr

0800ab18 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800ab18:	b480      	push	{r7}
 800ab1a:	af00      	add	r7, sp, #0
  return;
 800ab1c:	bf00      	nop
}
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab24:	4770      	bx	lr

0800ab26 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800ab26:	b480      	push	{r7}
 800ab28:	af00      	add	r7, sp, #0
  return;
 800ab2a:	bf00      	nop
}
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr

0800ab34 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800ab34:	b480      	push	{r7}
 800ab36:	af00      	add	r7, sp, #0
  return;
 800ab38:	bf00      	nop
}
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab40:	4770      	bx	lr

0800ab42 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800ab42:	b480      	push	{r7}
 800ab44:	af00      	add	r7, sp, #0
  return;
 800ab46:	bf00      	nop
}
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4e:	4770      	bx	lr

0800ab50 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800ab50:	b480      	push	{r7}
 800ab52:	af00      	add	r7, sp, #0
  return;
 800ab54:	bf00      	nop
}
 800ab56:	46bd      	mov	sp, r7
 800ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5c:	4770      	bx	lr

0800ab5e <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800ab5e:	b480      	push	{r7}
 800ab60:	af00      	add	r7, sp, #0
  return;
 800ab62:	bf00      	nop
}
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr

0800ab6c <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	af00      	add	r7, sp, #0
  return;
 800ab70:	bf00      	nop
}
 800ab72:	46bd      	mov	sp, r7
 800ab74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab78:	4770      	bx	lr

0800ab7a <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800ab7a:	b480      	push	{r7}
 800ab7c:	af00      	add	r7, sp, #0
  return;
 800ab7e:	bf00      	nop
}
 800ab80:	46bd      	mov	sp, r7
 800ab82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab86:	4770      	bx	lr

0800ab88 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800ab88:	b480      	push	{r7}
 800ab8a:	af00      	add	r7, sp, #0
  return;
 800ab8c:	bf00      	nop
}
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab94:	4770      	bx	lr

0800ab96 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800ab96:	b480      	push	{r7}
 800ab98:	af00      	add	r7, sp, #0
  return;
 800ab9a:	bf00      	nop
}
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr

0800aba4 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 800aba4:	b480      	push	{r7}
 800aba6:	af00      	add	r7, sp, #0
  return;
 800aba8:	bf00      	nop
}
 800abaa:	46bd      	mov	sp, r7
 800abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb0:	4770      	bx	lr
	...

0800abb4 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800abb8:	4b04      	ldr	r3, [pc, #16]	; (800abcc <SVCCTL_Init+0x18>)
 800abba:	2200      	movs	r2, #0
 800abbc:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800abbe:	4b04      	ldr	r3, [pc, #16]	; (800abd0 <SVCCTL_Init+0x1c>)
 800abc0:	2200      	movs	r2, #0
 800abc2:	711a      	strb	r2, [r3, #4]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800abc4:	f000 f806 	bl	800abd4 <SVCCTL_SvcInit>

  return;
 800abc8:	bf00      	nop
}
 800abca:	bd80      	pop	{r7, pc}
 800abcc:	20000234 	.word	0x20000234
 800abd0:	20000254 	.word	0x20000254

0800abd4 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	af00      	add	r7, sp, #0
  BAS_Init();
 800abd8:	f7ff ff6d 	bl	800aab6 <BAS_Init>

  BLS_Init();
 800abdc:	f7ff ff72 	bl	800aac4 <BLS_Init>

  CRS_STM_Init();
 800abe0:	f7ff ff77 	bl	800aad2 <CRS_STM_Init>

  DIS_Init();
 800abe4:	f7ff ff7c 	bl	800aae0 <DIS_Init>

  EDS_STM_Init();
 800abe8:	f7ff ff81 	bl	800aaee <EDS_STM_Init>

  HIDS_Init();
 800abec:	f7ff ff86 	bl	800aafc <HIDS_Init>

  HRS_Init();
 800abf0:	f7ff ff8b 	bl	800ab0a <HRS_Init>

  HTS_Init();
 800abf4:	f7ff ff90 	bl	800ab18 <HTS_Init>

  IAS_Init();
 800abf8:	f7ff ff95 	bl	800ab26 <IAS_Init>

  LLS_Init();
 800abfc:	f7ff ff9a 	bl	800ab34 <LLS_Init>

  TPS_Init();
 800ac00:	f7ff ff9f 	bl	800ab42 <TPS_Init>

  MOTENV_STM_Init();
 800ac04:	f7ff ffa4 	bl	800ab50 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800ac08:	f7ff ffa9 	bl	800ab5e <P2PS_STM_Init>

  ZDD_STM_Init();
 800ac0c:	f7ff ffae 	bl	800ab6c <ZDD_STM_Init>

  OTAS_STM_Init();
 800ac10:	f7ff ffb3 	bl	800ab7a <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800ac14:	f7ff ffbf 	bl	800ab96 <BVOPUS_STM_Init>

  MESH_Init();
 800ac18:	f7ff ffb6 	bl	800ab88 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800ac1c:	f7ff ffc2 	bl	800aba4 <SVCCTL_InitCustomSvc>
  
  return;
 800ac20:	bf00      	nop
}
 800ac22:	bd80      	pop	{r7, pc}

0800ac24 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b086      	sub	sp, #24
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	3301      	adds	r3, #1
 800ac30:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800ac32:	2300      	movs	r3, #0
 800ac34:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800ac36:	693b      	ldr	r3, [r7, #16]
 800ac38:	781b      	ldrb	r3, [r3, #0]
 800ac3a:	2bff      	cmp	r3, #255	; 0xff
 800ac3c:	d13f      	bne.n	800acbe <SVCCTL_UserEvtRx+0x9a>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800ac3e:	693b      	ldr	r3, [r7, #16]
 800ac40:	3302      	adds	r3, #2
 800ac42:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	881b      	ldrh	r3, [r3, #0]
 800ac48:	b29b      	uxth	r3, r3
 800ac4a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ac4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ac52:	d132      	bne.n	800acba <SVCCTL_UserEvtRx+0x96>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800ac54:	2300      	movs	r3, #0
 800ac56:	757b      	strb	r3, [r7, #21]
 800ac58:	e00d      	b.n	800ac76 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800ac5a:	7d7b      	ldrb	r3, [r7, #21]
 800ac5c:	4a27      	ldr	r2, [pc, #156]	; (800acfc <SVCCTL_UserEvtRx+0xd8>)
 800ac5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	4798      	blx	r3
 800ac66:	4603      	mov	r3, r0
 800ac68:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800ac6a:	7dfb      	ldrb	r3, [r7, #23]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d108      	bne.n	800ac82 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800ac70:	7d7b      	ldrb	r3, [r7, #21]
 800ac72:	3301      	adds	r3, #1
 800ac74:	757b      	strb	r3, [r7, #21]
 800ac76:	4b21      	ldr	r3, [pc, #132]	; (800acfc <SVCCTL_UserEvtRx+0xd8>)
 800ac78:	7f1b      	ldrb	r3, [r3, #28]
 800ac7a:	7d7a      	ldrb	r2, [r7, #21]
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	d3ec      	bcc.n	800ac5a <SVCCTL_UserEvtRx+0x36>
 800ac80:	e000      	b.n	800ac84 <SVCCTL_UserEvtRx+0x60>
            {
              /**
               *  The event has been managed. The Event processing should be stopped
               */
              break;
 800ac82:	bf00      	nop
            }
          }
#endif
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
          /* For Client event handler */
          event_notification_status = SVCCTL_EvtNotAck;
 800ac84:	2300      	movs	r3, #0
 800ac86:	75fb      	strb	r3, [r7, #23]
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 800ac88:	2300      	movs	r3, #0
 800ac8a:	757b      	strb	r3, [r7, #21]
 800ac8c:	e00d      	b.n	800acaa <SVCCTL_UserEvtRx+0x86>
          {
            event_notification_status = SVCCTL_CltHandler.SVCCTL_CltHandlerTable[index](pckt);
 800ac8e:	7d7b      	ldrb	r3, [r7, #21]
 800ac90:	4a1b      	ldr	r2, [pc, #108]	; (800ad00 <SVCCTL_UserEvtRx+0xdc>)
 800ac92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	4798      	blx	r3
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Client, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Client
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800ac9e:	7dfb      	ldrb	r3, [r7, #23]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d108      	bne.n	800acb6 <SVCCTL_UserEvtRx+0x92>
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 800aca4:	7d7b      	ldrb	r3, [r7, #21]
 800aca6:	3301      	adds	r3, #1
 800aca8:	757b      	strb	r3, [r7, #21]
 800acaa:	4b15      	ldr	r3, [pc, #84]	; (800ad00 <SVCCTL_UserEvtRx+0xdc>)
 800acac:	791b      	ldrb	r3, [r3, #4]
 800acae:	7d7a      	ldrb	r2, [r7, #21]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d3ec      	bcc.n	800ac8e <SVCCTL_UserEvtRx+0x6a>
               */
              break;
            }
          }
#endif
          break;
 800acb4:	e002      	b.n	800acbc <SVCCTL_UserEvtRx+0x98>
              break;
 800acb6:	bf00      	nop
          break;
 800acb8:	e000      	b.n	800acbc <SVCCTL_UserEvtRx+0x98>

        default:
          break;
 800acba:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800acbc:	e000      	b.n	800acc0 <SVCCTL_UserEvtRx+0x9c>

    default:
      break;
 800acbe:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800acc0:	7dfb      	ldrb	r3, [r7, #23]
 800acc2:	2b02      	cmp	r3, #2
 800acc4:	d00f      	beq.n	800ace6 <SVCCTL_UserEvtRx+0xc2>
 800acc6:	2b02      	cmp	r3, #2
 800acc8:	dc10      	bgt.n	800acec <SVCCTL_UserEvtRx+0xc8>
 800acca:	2b00      	cmp	r3, #0
 800accc:	d002      	beq.n	800acd4 <SVCCTL_UserEvtRx+0xb0>
 800acce:	2b01      	cmp	r3, #1
 800acd0:	d006      	beq.n	800ace0 <SVCCTL_UserEvtRx+0xbc>
 800acd2:	e00b      	b.n	800acec <SVCCTL_UserEvtRx+0xc8>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f7f8 f92b 	bl	8002f30 <SVCCTL_App_Notification>
 800acda:	4603      	mov	r3, r0
 800acdc:	75bb      	strb	r3, [r7, #22]
      break;
 800acde:	e008      	b.n	800acf2 <SVCCTL_UserEvtRx+0xce>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800ace0:	2301      	movs	r3, #1
 800ace2:	75bb      	strb	r3, [r7, #22]
      break;
 800ace4:	e005      	b.n	800acf2 <SVCCTL_UserEvtRx+0xce>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800ace6:	2300      	movs	r3, #0
 800ace8:	75bb      	strb	r3, [r7, #22]
      break;
 800acea:	e002      	b.n	800acf2 <SVCCTL_UserEvtRx+0xce>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800acec:	2301      	movs	r3, #1
 800acee:	75bb      	strb	r3, [r7, #22]
      break;
 800acf0:	bf00      	nop
  }

  return (return_status);
 800acf2:	7dbb      	ldrb	r3, [r7, #22]
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3718      	adds	r7, #24
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}
 800acfc:	20000234 	.word	0x20000234
 800ad00:	20000254 	.word	0x20000254

0800ad04 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800ad08:	f7f8 fe6e 	bl	80039e8 <HW_IPCC_Enable>

  return;
 800ad0c:	bf00      	nop
}
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <TL_Init>:


void TL_Init( void )
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800ad14:	4b10      	ldr	r3, [pc, #64]	; (800ad58 <TL_Init+0x48>)
 800ad16:	4a11      	ldr	r2, [pc, #68]	; (800ad5c <TL_Init+0x4c>)
 800ad18:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800ad1a:	4b0f      	ldr	r3, [pc, #60]	; (800ad58 <TL_Init+0x48>)
 800ad1c:	4a10      	ldr	r2, [pc, #64]	; (800ad60 <TL_Init+0x50>)
 800ad1e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800ad20:	4b0d      	ldr	r3, [pc, #52]	; (800ad58 <TL_Init+0x48>)
 800ad22:	4a10      	ldr	r2, [pc, #64]	; (800ad64 <TL_Init+0x54>)
 800ad24:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800ad26:	4b0c      	ldr	r3, [pc, #48]	; (800ad58 <TL_Init+0x48>)
 800ad28:	4a0f      	ldr	r2, [pc, #60]	; (800ad68 <TL_Init+0x58>)
 800ad2a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800ad2c:	4b0a      	ldr	r3, [pc, #40]	; (800ad58 <TL_Init+0x48>)
 800ad2e:	4a0f      	ldr	r2, [pc, #60]	; (800ad6c <TL_Init+0x5c>)
 800ad30:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800ad32:	4b09      	ldr	r3, [pc, #36]	; (800ad58 <TL_Init+0x48>)
 800ad34:	4a0e      	ldr	r2, [pc, #56]	; (800ad70 <TL_Init+0x60>)
 800ad36:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800ad38:	4b07      	ldr	r3, [pc, #28]	; (800ad58 <TL_Init+0x48>)
 800ad3a:	4a0e      	ldr	r2, [pc, #56]	; (800ad74 <TL_Init+0x64>)
 800ad3c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800ad3e:	4b06      	ldr	r3, [pc, #24]	; (800ad58 <TL_Init+0x48>)
 800ad40:	4a0d      	ldr	r2, [pc, #52]	; (800ad78 <TL_Init+0x68>)
 800ad42:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800ad44:	4b04      	ldr	r3, [pc, #16]	; (800ad58 <TL_Init+0x48>)
 800ad46:	4a0d      	ldr	r2, [pc, #52]	; (800ad7c <TL_Init+0x6c>)
 800ad48:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800ad4a:	4b03      	ldr	r3, [pc, #12]	; (800ad58 <TL_Init+0x48>)
 800ad4c:	4a0c      	ldr	r2, [pc, #48]	; (800ad80 <TL_Init+0x70>)
 800ad4e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800ad50:	f7f8 fe5e 	bl	8003a10 <HW_IPCC_Init>

  return;
 800ad54:	bf00      	nop
}
 800ad56:	bd80      	pop	{r7, pc}
 800ad58:	20030000 	.word	0x20030000
 800ad5c:	20030134 	.word	0x20030134
 800ad60:	20030154 	.word	0x20030154
 800ad64:	20030164 	.word	0x20030164
 800ad68:	20030174 	.word	0x20030174
 800ad6c:	2003017c 	.word	0x2003017c
 800ad70:	20030184 	.word	0x20030184
 800ad74:	2003018c 	.word	0x2003018c
 800ad78:	200301a8 	.word	0x200301a8
 800ad7c:	200301ac 	.word	0x200301ac
 800ad80:	200301b8 	.word	0x200301b8

0800ad84 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b084      	sub	sp, #16
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800ad90:	4811      	ldr	r0, [pc, #68]	; (800add8 <TL_BLE_Init+0x54>)
 800ad92:	f7ff f9d1 	bl	800a138 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800ad96:	4b11      	ldr	r3, [pc, #68]	; (800addc <TL_BLE_Init+0x58>)
 800ad98:	685b      	ldr	r3, [r3, #4]
 800ad9a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	689a      	ldr	r2, [r3, #8]
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	68da      	ldr	r2, [r3, #12]
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	4a0c      	ldr	r2, [pc, #48]	; (800ade0 <TL_BLE_Init+0x5c>)
 800adb0:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	4a08      	ldr	r2, [pc, #32]	; (800add8 <TL_BLE_Init+0x54>)
 800adb6:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800adb8:	f7f8 fe40 	bl	8003a3c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4a08      	ldr	r2, [pc, #32]	; (800ade4 <TL_BLE_Init+0x60>)
 800adc2:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	4a07      	ldr	r2, [pc, #28]	; (800ade8 <TL_BLE_Init+0x64>)
 800adca:	6013      	str	r3, [r2, #0]

  return 0;
 800adcc:	2300      	movs	r3, #0
}
 800adce:	4618      	mov	r0, r3
 800add0:	3710      	adds	r7, #16
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
 800add6:	bf00      	nop
 800add8:	200301d4 	.word	0x200301d4
 800addc:	20030000 	.word	0x20030000
 800ade0:	20030a58 	.word	0x20030a58
 800ade4:	200016e4 	.word	0x200016e4
 800ade8:	200016e8 	.word	0x200016e8

0800adec <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b082      	sub	sp, #8
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	460b      	mov	r3, r1
 800adf6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800adf8:	4b09      	ldr	r3, [pc, #36]	; (800ae20 <TL_BLE_SendCmd+0x34>)
 800adfa:	685b      	ldr	r3, [r3, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	2201      	movs	r2, #1
 800ae00:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800ae02:	4b07      	ldr	r3, [pc, #28]	; (800ae20 <TL_BLE_SendCmd+0x34>)
 800ae04:	685b      	ldr	r3, [r3, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	4619      	mov	r1, r3
 800ae0a:	2001      	movs	r0, #1
 800ae0c:	f000 f96c 	bl	800b0e8 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800ae10:	f7f8 fe1e 	bl	8003a50 <HW_IPCC_BLE_SendCmd>

  return 0;
 800ae14:	2300      	movs	r3, #0
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3708      	adds	r7, #8
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
 800ae1e:	bf00      	nop
 800ae20:	20030000 	.word	0x20030000

0800ae24 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b082      	sub	sp, #8
 800ae28:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800ae2a:	e01c      	b.n	800ae66 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800ae2c:	1d3b      	adds	r3, r7, #4
 800ae2e:	4619      	mov	r1, r3
 800ae30:	4812      	ldr	r0, [pc, #72]	; (800ae7c <HW_IPCC_BLE_RxEvtNot+0x58>)
 800ae32:	f7ff fa20 	bl	800a276 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	7a5b      	ldrb	r3, [r3, #9]
 800ae3a:	2b0f      	cmp	r3, #15
 800ae3c:	d003      	beq.n	800ae46 <HW_IPCC_BLE_RxEvtNot+0x22>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	7a5b      	ldrb	r3, [r3, #9]
 800ae42:	2b0e      	cmp	r3, #14
 800ae44:	d105      	bne.n	800ae52 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	4619      	mov	r1, r3
 800ae4a:	2002      	movs	r0, #2
 800ae4c:	f000 f94c 	bl	800b0e8 <OutputDbgTrace>
 800ae50:	e004      	b.n	800ae5c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	4619      	mov	r1, r3
 800ae56:	2003      	movs	r0, #3
 800ae58:	f000 f946 	bl	800b0e8 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800ae5c:	4b08      	ldr	r3, [pc, #32]	; (800ae80 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	687a      	ldr	r2, [r7, #4]
 800ae62:	4610      	mov	r0, r2
 800ae64:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800ae66:	4805      	ldr	r0, [pc, #20]	; (800ae7c <HW_IPCC_BLE_RxEvtNot+0x58>)
 800ae68:	f7ff f976 	bl	800a158 <LST_is_empty>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d0dc      	beq.n	800ae2c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800ae72:	bf00      	nop
}
 800ae74:	3708      	adds	r7, #8
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}
 800ae7a:	bf00      	nop
 800ae7c:	200301d4 	.word	0x200301d4
 800ae80:	200016e4 	.word	0x200016e4

0800ae84 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800ae88:	4b02      	ldr	r3, [pc, #8]	; (800ae94 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	4798      	blx	r3

  return;
 800ae8e:	bf00      	nop
}
 800ae90:	bd80      	pop	{r7, pc}
 800ae92:	bf00      	nop
 800ae94:	200016e8 	.word	0x200016e8

0800ae98 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b084      	sub	sp, #16
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800aea4:	480d      	ldr	r0, [pc, #52]	; (800aedc <TL_SYS_Init+0x44>)
 800aea6:	f7ff f947 	bl	800a138 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800aeaa:	4b0d      	ldr	r3, [pc, #52]	; (800aee0 <TL_SYS_Init+0x48>)
 800aeac:	68db      	ldr	r3, [r3, #12]
 800aeae:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	689a      	ldr	r2, [r3, #8]
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	4a08      	ldr	r2, [pc, #32]	; (800aedc <TL_SYS_Init+0x44>)
 800aebc:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800aebe:	f7f8 fde9 	bl	8003a94 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	4a07      	ldr	r2, [pc, #28]	; (800aee4 <TL_SYS_Init+0x4c>)
 800aec8:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	685b      	ldr	r3, [r3, #4]
 800aece:	4a06      	ldr	r2, [pc, #24]	; (800aee8 <TL_SYS_Init+0x50>)
 800aed0:	6013      	str	r3, [r2, #0]

  return 0;
 800aed2:	2300      	movs	r3, #0
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3710      	adds	r7, #16
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}
 800aedc:	200301dc 	.word	0x200301dc
 800aee0:	20030000 	.word	0x20030000
 800aee4:	200016ec 	.word	0x200016ec
 800aee8:	200016f0 	.word	0x200016f0

0800aeec <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b082      	sub	sp, #8
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	460b      	mov	r3, r1
 800aef6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800aef8:	4b09      	ldr	r3, [pc, #36]	; (800af20 <TL_SYS_SendCmd+0x34>)
 800aefa:	68db      	ldr	r3, [r3, #12]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	2210      	movs	r2, #16
 800af00:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800af02:	4b07      	ldr	r3, [pc, #28]	; (800af20 <TL_SYS_SendCmd+0x34>)
 800af04:	68db      	ldr	r3, [r3, #12]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	4619      	mov	r1, r3
 800af0a:	2004      	movs	r0, #4
 800af0c:	f000 f8ec 	bl	800b0e8 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800af10:	f7f8 fdca 	bl	8003aa8 <HW_IPCC_SYS_SendCmd>

  return 0;
 800af14:	2300      	movs	r3, #0
}
 800af16:	4618      	mov	r0, r3
 800af18:	3708      	adds	r7, #8
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}
 800af1e:	bf00      	nop
 800af20:	20030000 	.word	0x20030000

0800af24 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800af28:	4b07      	ldr	r3, [pc, #28]	; (800af48 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800af2a:	68db      	ldr	r3, [r3, #12]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	4619      	mov	r1, r3
 800af30:	2005      	movs	r0, #5
 800af32:	f000 f8d9 	bl	800b0e8 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800af36:	4b05      	ldr	r3, [pc, #20]	; (800af4c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	4a03      	ldr	r2, [pc, #12]	; (800af48 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800af3c:	68d2      	ldr	r2, [r2, #12]
 800af3e:	6812      	ldr	r2, [r2, #0]
 800af40:	4610      	mov	r0, r2
 800af42:	4798      	blx	r3

  return;
 800af44:	bf00      	nop
}
 800af46:	bd80      	pop	{r7, pc}
 800af48:	20030000 	.word	0x20030000
 800af4c:	200016ec 	.word	0x200016ec

0800af50 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b082      	sub	sp, #8
 800af54:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800af56:	e00e      	b.n	800af76 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800af58:	1d3b      	adds	r3, r7, #4
 800af5a:	4619      	mov	r1, r3
 800af5c:	480b      	ldr	r0, [pc, #44]	; (800af8c <HW_IPCC_SYS_EvtNot+0x3c>)
 800af5e:	f7ff f98a 	bl	800a276 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	4619      	mov	r1, r3
 800af66:	2006      	movs	r0, #6
 800af68:	f000 f8be 	bl	800b0e8 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800af6c:	4b08      	ldr	r3, [pc, #32]	; (800af90 <HW_IPCC_SYS_EvtNot+0x40>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	687a      	ldr	r2, [r7, #4]
 800af72:	4610      	mov	r0, r2
 800af74:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800af76:	4805      	ldr	r0, [pc, #20]	; (800af8c <HW_IPCC_SYS_EvtNot+0x3c>)
 800af78:	f7ff f8ee 	bl	800a158 <LST_is_empty>
 800af7c:	4603      	mov	r3, r0
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d0ea      	beq.n	800af58 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800af82:	bf00      	nop
}
 800af84:	3708      	adds	r7, #8
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	bf00      	nop
 800af8c:	200301dc 	.word	0x200301dc
 800af90:	200016f0 	.word	0x200016f0

0800af94 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b082      	sub	sp, #8
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800af9c:	4817      	ldr	r0, [pc, #92]	; (800affc <TL_MM_Init+0x68>)
 800af9e:	f7ff f8cb 	bl	800a138 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800afa2:	4817      	ldr	r0, [pc, #92]	; (800b000 <TL_MM_Init+0x6c>)
 800afa4:	f7ff f8c8 	bl	800a138 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800afa8:	4b16      	ldr	r3, [pc, #88]	; (800b004 <TL_MM_Init+0x70>)
 800afaa:	691b      	ldr	r3, [r3, #16]
 800afac:	4a16      	ldr	r2, [pc, #88]	; (800b008 <TL_MM_Init+0x74>)
 800afae:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800afb0:	4b15      	ldr	r3, [pc, #84]	; (800b008 <TL_MM_Init+0x74>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	687a      	ldr	r2, [r7, #4]
 800afb6:	6892      	ldr	r2, [r2, #8]
 800afb8:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800afba:	4b13      	ldr	r3, [pc, #76]	; (800b008 <TL_MM_Init+0x74>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	687a      	ldr	r2, [r7, #4]
 800afc0:	68d2      	ldr	r2, [r2, #12]
 800afc2:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800afc4:	4b10      	ldr	r3, [pc, #64]	; (800b008 <TL_MM_Init+0x74>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	4a0c      	ldr	r2, [pc, #48]	; (800affc <TL_MM_Init+0x68>)
 800afca:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800afcc:	4b0e      	ldr	r3, [pc, #56]	; (800b008 <TL_MM_Init+0x74>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	687a      	ldr	r2, [r7, #4]
 800afd2:	6812      	ldr	r2, [r2, #0]
 800afd4:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800afd6:	4b0c      	ldr	r3, [pc, #48]	; (800b008 <TL_MM_Init+0x74>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	687a      	ldr	r2, [r7, #4]
 800afdc:	6852      	ldr	r2, [r2, #4]
 800afde:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800afe0:	4b09      	ldr	r3, [pc, #36]	; (800b008 <TL_MM_Init+0x74>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	687a      	ldr	r2, [r7, #4]
 800afe6:	6912      	ldr	r2, [r2, #16]
 800afe8:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800afea:	4b07      	ldr	r3, [pc, #28]	; (800b008 <TL_MM_Init+0x74>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	687a      	ldr	r2, [r7, #4]
 800aff0:	6952      	ldr	r2, [r2, #20]
 800aff2:	619a      	str	r2, [r3, #24]

  return;
 800aff4:	bf00      	nop
}
 800aff6:	3708      	adds	r7, #8
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}
 800affc:	200301c4 	.word	0x200301c4
 800b000:	200016dc 	.word	0x200016dc
 800b004:	20030000 	.word	0x20030000
 800b008:	200016f4 	.word	0x200016f4

0800b00c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b082      	sub	sp, #8
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800b014:	6879      	ldr	r1, [r7, #4]
 800b016:	4807      	ldr	r0, [pc, #28]	; (800b034 <TL_MM_EvtDone+0x28>)
 800b018:	f7ff f8e6 	bl	800a1e8 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800b01c:	6879      	ldr	r1, [r7, #4]
 800b01e:	2000      	movs	r0, #0
 800b020:	f000 f862 	bl	800b0e8 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800b024:	4804      	ldr	r0, [pc, #16]	; (800b038 <TL_MM_EvtDone+0x2c>)
 800b026:	f7f8 fd65 	bl	8003af4 <HW_IPCC_MM_SendFreeBuf>

  return;
 800b02a:	bf00      	nop
}
 800b02c:	3708      	adds	r7, #8
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}
 800b032:	bf00      	nop
 800b034:	200016dc 	.word	0x200016dc
 800b038:	0800b03d 	.word	0x0800b03d

0800b03c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b082      	sub	sp, #8
 800b040:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b042:	e00c      	b.n	800b05e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800b044:	1d3b      	adds	r3, r7, #4
 800b046:	4619      	mov	r1, r3
 800b048:	480a      	ldr	r0, [pc, #40]	; (800b074 <SendFreeBuf+0x38>)
 800b04a:	f7ff f914 	bl	800a276 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800b04e:	4b0a      	ldr	r3, [pc, #40]	; (800b078 <SendFreeBuf+0x3c>)
 800b050:	691b      	ldr	r3, [r3, #16]
 800b052:	691b      	ldr	r3, [r3, #16]
 800b054:	687a      	ldr	r2, [r7, #4]
 800b056:	4611      	mov	r1, r2
 800b058:	4618      	mov	r0, r3
 800b05a:	f7ff f8c5 	bl	800a1e8 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b05e:	4805      	ldr	r0, [pc, #20]	; (800b074 <SendFreeBuf+0x38>)
 800b060:	f7ff f87a 	bl	800a158 <LST_is_empty>
 800b064:	4603      	mov	r3, r0
 800b066:	2b00      	cmp	r3, #0
 800b068:	d0ec      	beq.n	800b044 <SendFreeBuf+0x8>
  }

  return;
 800b06a:	bf00      	nop
}
 800b06c:	3708      	adds	r7, #8
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}
 800b072:	bf00      	nop
 800b074:	200016dc 	.word	0x200016dc
 800b078:	20030000 	.word	0x20030000

0800b07c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800b080:	4805      	ldr	r0, [pc, #20]	; (800b098 <TL_TRACES_Init+0x1c>)
 800b082:	f7ff f859 	bl	800a138 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800b086:	4b05      	ldr	r3, [pc, #20]	; (800b09c <TL_TRACES_Init+0x20>)
 800b088:	695b      	ldr	r3, [r3, #20]
 800b08a:	4a03      	ldr	r2, [pc, #12]	; (800b098 <TL_TRACES_Init+0x1c>)
 800b08c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800b08e:	f7f8 fd67 	bl	8003b60 <HW_IPCC_TRACES_Init>

  return;
 800b092:	bf00      	nop
}
 800b094:	bd80      	pop	{r7, pc}
 800b096:	bf00      	nop
 800b098:	200301cc 	.word	0x200301cc
 800b09c:	20030000 	.word	0x20030000

0800b0a0 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b082      	sub	sp, #8
 800b0a4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b0a6:	e008      	b.n	800b0ba <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800b0a8:	1d3b      	adds	r3, r7, #4
 800b0aa:	4619      	mov	r1, r3
 800b0ac:	4808      	ldr	r0, [pc, #32]	; (800b0d0 <HW_IPCC_TRACES_EvtNot+0x30>)
 800b0ae:	f7ff f8e2 	bl	800a276 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f000 f80d 	bl	800b0d4 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b0ba:	4805      	ldr	r0, [pc, #20]	; (800b0d0 <HW_IPCC_TRACES_EvtNot+0x30>)
 800b0bc:	f7ff f84c 	bl	800a158 <LST_is_empty>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d0f0      	beq.n	800b0a8 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800b0c6:	bf00      	nop
}
 800b0c8:	3708      	adds	r7, #8
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
 800b0ce:	bf00      	nop
 800b0d0:	200301cc 	.word	0x200301cc

0800b0d4 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b083      	sub	sp, #12
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800b0dc:	bf00      	nop
 800b0de:	370c      	adds	r7, #12
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e6:	4770      	bx	lr

0800b0e8 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b085      	sub	sp, #20
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	6039      	str	r1, [r7, #0]
 800b0f2:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800b0f4:	79fb      	ldrb	r3, [r7, #7]
 800b0f6:	2b06      	cmp	r3, #6
 800b0f8:	d845      	bhi.n	800b186 <OutputDbgTrace+0x9e>
 800b0fa:	a201      	add	r2, pc, #4	; (adr r2, 800b100 <OutputDbgTrace+0x18>)
 800b0fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b100:	0800b11d 	.word	0x0800b11d
 800b104:	0800b141 	.word	0x0800b141
 800b108:	0800b147 	.word	0x0800b147
 800b10c:	0800b15b 	.word	0x0800b15b
 800b110:	0800b167 	.word	0x0800b167
 800b114:	0800b16d 	.word	0x0800b16d
 800b118:	0800b17b 	.word	0x0800b17b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	7a5b      	ldrb	r3, [r3, #9]
 800b124:	2bff      	cmp	r3, #255	; 0xff
 800b126:	d005      	beq.n	800b134 <OutputDbgTrace+0x4c>
 800b128:	2bff      	cmp	r3, #255	; 0xff
 800b12a:	dc05      	bgt.n	800b138 <OutputDbgTrace+0x50>
 800b12c:	2b0e      	cmp	r3, #14
 800b12e:	d005      	beq.n	800b13c <OutputDbgTrace+0x54>
 800b130:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800b132:	e001      	b.n	800b138 <OutputDbgTrace+0x50>
          break;
 800b134:	bf00      	nop
 800b136:	e027      	b.n	800b188 <OutputDbgTrace+0xa0>
          break;
 800b138:	bf00      	nop
 800b13a:	e025      	b.n	800b188 <OutputDbgTrace+0xa0>
          break;
 800b13c:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800b13e:	e023      	b.n	800b188 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b144:	e020      	b.n	800b188 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	7a5b      	ldrb	r3, [r3, #9]
 800b14e:	2b0e      	cmp	r3, #14
 800b150:	d001      	beq.n	800b156 <OutputDbgTrace+0x6e>
 800b152:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b154:	e000      	b.n	800b158 <OutputDbgTrace+0x70>
          break;
 800b156:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b158:	e016      	b.n	800b188 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	7a5b      	ldrb	r3, [r3, #9]
 800b162:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b164:	e010      	b.n	800b188 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b16a:	e00d      	b.n	800b188 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	7a5b      	ldrb	r3, [r3, #9]
 800b174:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b176:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b178:	e006      	b.n	800b188 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	7a5b      	ldrb	r3, [r3, #9]
 800b182:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b184:	e000      	b.n	800b188 <OutputDbgTrace+0xa0>

    default:
      break;
 800b186:	bf00      	nop
  }

  return;
 800b188:	bf00      	nop
}
 800b18a:	3714      	adds	r7, #20
 800b18c:	46bd      	mov	sp, r7
 800b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b192:	4770      	bx	lr

0800b194 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800b194:	b480      	push	{r7}
 800b196:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800b198:	4b05      	ldr	r3, [pc, #20]	; (800b1b0 <UTIL_LPM_Init+0x1c>)
 800b19a:	2200      	movs	r2, #0
 800b19c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800b19e:	4b05      	ldr	r3, [pc, #20]	; (800b1b4 <UTIL_LPM_Init+0x20>)
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800b1a4:	bf00      	nop
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ac:	4770      	bx	lr
 800b1ae:	bf00      	nop
 800b1b0:	200016f8 	.word	0x200016f8
 800b1b4:	200016fc 	.word	0x200016fc

0800b1b8 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b087      	sub	sp, #28
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	460b      	mov	r3, r1
 800b1c2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b1c4:	f3ef 8310 	mrs	r3, PRIMASK
 800b1c8:	613b      	str	r3, [r7, #16]
  return(result);
 800b1ca:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800b1cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b1ce:	b672      	cpsid	i
}
 800b1d0:	bf00      	nop
  
  switch(state)
 800b1d2:	78fb      	ldrb	r3, [r7, #3]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d008      	beq.n	800b1ea <UTIL_LPM_SetOffMode+0x32>
 800b1d8:	2b01      	cmp	r3, #1
 800b1da:	d10e      	bne.n	800b1fa <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800b1dc:	4b0d      	ldr	r3, [pc, #52]	; (800b214 <UTIL_LPM_SetOffMode+0x5c>)
 800b1de:	681a      	ldr	r2, [r3, #0]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	4313      	orrs	r3, r2
 800b1e4:	4a0b      	ldr	r2, [pc, #44]	; (800b214 <UTIL_LPM_SetOffMode+0x5c>)
 800b1e6:	6013      	str	r3, [r2, #0]
      break;
 800b1e8:	e008      	b.n	800b1fc <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	43da      	mvns	r2, r3
 800b1ee:	4b09      	ldr	r3, [pc, #36]	; (800b214 <UTIL_LPM_SetOffMode+0x5c>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	4013      	ands	r3, r2
 800b1f4:	4a07      	ldr	r2, [pc, #28]	; (800b214 <UTIL_LPM_SetOffMode+0x5c>)
 800b1f6:	6013      	str	r3, [r2, #0]
      break;
 800b1f8:	e000      	b.n	800b1fc <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800b1fa:	bf00      	nop
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	f383 8810 	msr	PRIMASK, r3
}
 800b206:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800b208:	bf00      	nop
 800b20a:	371c      	adds	r7, #28
 800b20c:	46bd      	mov	sp, r7
 800b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b212:	4770      	bx	lr
 800b214:	200016fc 	.word	0x200016fc

0800b218 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b090      	sub	sp, #64	; 0x40
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800b220:	4b73      	ldr	r3, [pc, #460]	; (800b3f0 <UTIL_SEQ_Run+0x1d8>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800b226:	4b72      	ldr	r3, [pc, #456]	; (800b3f0 <UTIL_SEQ_Run+0x1d8>)
 800b228:	681a      	ldr	r2, [r3, #0]
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	4013      	ands	r3, r2
 800b22e:	4a70      	ldr	r2, [pc, #448]	; (800b3f0 <UTIL_SEQ_Run+0x1d8>)
 800b230:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800b232:	4b70      	ldr	r3, [pc, #448]	; (800b3f4 <UTIL_SEQ_Run+0x1dc>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800b238:	4b6f      	ldr	r3, [pc, #444]	; (800b3f8 <UTIL_SEQ_Run+0x1e0>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800b23e:	4b6f      	ldr	r3, [pc, #444]	; (800b3fc <UTIL_SEQ_Run+0x1e4>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800b244:	4b6e      	ldr	r3, [pc, #440]	; (800b400 <UTIL_SEQ_Run+0x1e8>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800b24a:	e08d      	b.n	800b368 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800b24c:	2300      	movs	r3, #0
 800b24e:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800b250:	e002      	b.n	800b258 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800b252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b254:	3301      	adds	r3, #1
 800b256:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800b258:	4a6a      	ldr	r2, [pc, #424]	; (800b404 <UTIL_SEQ_Run+0x1ec>)
 800b25a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b25c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b262:	401a      	ands	r2, r3
 800b264:	4b62      	ldr	r3, [pc, #392]	; (800b3f0 <UTIL_SEQ_Run+0x1d8>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	4013      	ands	r3, r2
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d0f1      	beq.n	800b252 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800b26e:	4a65      	ldr	r2, [pc, #404]	; (800b404 <UTIL_SEQ_Run+0x1ec>)
 800b270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b272:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b278:	401a      	ands	r2, r3
 800b27a:	4b5d      	ldr	r3, [pc, #372]	; (800b3f0 <UTIL_SEQ_Run+0x1d8>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	4013      	ands	r3, r2
 800b280:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800b282:	4a60      	ldr	r2, [pc, #384]	; (800b404 <UTIL_SEQ_Run+0x1ec>)
 800b284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b286:	00db      	lsls	r3, r3, #3
 800b288:	4413      	add	r3, r2
 800b28a:	685a      	ldr	r2, [r3, #4]
 800b28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b28e:	4013      	ands	r3, r2
 800b290:	2b00      	cmp	r3, #0
 800b292:	d106      	bne.n	800b2a2 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800b294:	4a5b      	ldr	r2, [pc, #364]	; (800b404 <UTIL_SEQ_Run+0x1ec>)
 800b296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b298:	00db      	lsls	r3, r3, #3
 800b29a:	4413      	add	r3, r2
 800b29c:	f04f 32ff 	mov.w	r2, #4294967295
 800b2a0:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800b2a2:	4a58      	ldr	r2, [pc, #352]	; (800b404 <UTIL_SEQ_Run+0x1ec>)
 800b2a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2a6:	00db      	lsls	r3, r3, #3
 800b2a8:	4413      	add	r3, r2
 800b2aa:	685a      	ldr	r2, [r3, #4]
 800b2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ae:	4013      	ands	r3, r2
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f000 f9b3 	bl	800b61c <SEQ_BitPosition>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	4b53      	ldr	r3, [pc, #332]	; (800b408 <UTIL_SEQ_Run+0x1f0>)
 800b2bc:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800b2be:	4a51      	ldr	r2, [pc, #324]	; (800b404 <UTIL_SEQ_Run+0x1ec>)
 800b2c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2c2:	00db      	lsls	r3, r3, #3
 800b2c4:	4413      	add	r3, r2
 800b2c6:	685a      	ldr	r2, [r3, #4]
 800b2c8:	4b4f      	ldr	r3, [pc, #316]	; (800b408 <UTIL_SEQ_Run+0x1f0>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	2101      	movs	r1, #1
 800b2ce:	fa01 f303 	lsl.w	r3, r1, r3
 800b2d2:	43db      	mvns	r3, r3
 800b2d4:	401a      	ands	r2, r3
 800b2d6:	494b      	ldr	r1, [pc, #300]	; (800b404 <UTIL_SEQ_Run+0x1ec>)
 800b2d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2da:	00db      	lsls	r3, r3, #3
 800b2dc:	440b      	add	r3, r1
 800b2de:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b2e0:	f3ef 8310 	mrs	r3, PRIMASK
 800b2e4:	61bb      	str	r3, [r7, #24]
  return(result);
 800b2e6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b2e8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800b2ea:	b672      	cpsid	i
}
 800b2ec:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800b2ee:	4b46      	ldr	r3, [pc, #280]	; (800b408 <UTIL_SEQ_Run+0x1f0>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	2201      	movs	r2, #1
 800b2f4:	fa02 f303 	lsl.w	r3, r2, r3
 800b2f8:	43da      	mvns	r2, r3
 800b2fa:	4b3e      	ldr	r3, [pc, #248]	; (800b3f4 <UTIL_SEQ_Run+0x1dc>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	4013      	ands	r3, r2
 800b300:	4a3c      	ldr	r2, [pc, #240]	; (800b3f4 <UTIL_SEQ_Run+0x1dc>)
 800b302:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b304:	2302      	movs	r3, #2
 800b306:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b308:	e013      	b.n	800b332 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800b30a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b30c:	3b01      	subs	r3, #1
 800b30e:	4a3d      	ldr	r2, [pc, #244]	; (800b404 <UTIL_SEQ_Run+0x1ec>)
 800b310:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800b314:	4b3c      	ldr	r3, [pc, #240]	; (800b408 <UTIL_SEQ_Run+0x1f0>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	2201      	movs	r2, #1
 800b31a:	fa02 f303 	lsl.w	r3, r2, r3
 800b31e:	43da      	mvns	r2, r3
 800b320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b322:	3b01      	subs	r3, #1
 800b324:	400a      	ands	r2, r1
 800b326:	4937      	ldr	r1, [pc, #220]	; (800b404 <UTIL_SEQ_Run+0x1ec>)
 800b328:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b32c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b32e:	3b01      	subs	r3, #1
 800b330:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b334:	2b00      	cmp	r3, #0
 800b336:	d1e8      	bne.n	800b30a <UTIL_SEQ_Run+0xf2>
 800b338:	6a3b      	ldr	r3, [r7, #32]
 800b33a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	f383 8810 	msr	PRIMASK, r3
}
 800b342:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800b344:	4b30      	ldr	r3, [pc, #192]	; (800b408 <UTIL_SEQ_Run+0x1f0>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	4a30      	ldr	r2, [pc, #192]	; (800b40c <UTIL_SEQ_Run+0x1f4>)
 800b34a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b34e:	4798      	blx	r3

    local_taskset = TaskSet;
 800b350:	4b28      	ldr	r3, [pc, #160]	; (800b3f4 <UTIL_SEQ_Run+0x1dc>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800b356:	4b28      	ldr	r3, [pc, #160]	; (800b3f8 <UTIL_SEQ_Run+0x1e0>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800b35c:	4b27      	ldr	r3, [pc, #156]	; (800b3fc <UTIL_SEQ_Run+0x1e4>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800b362:	4b27      	ldr	r3, [pc, #156]	; (800b400 <UTIL_SEQ_Run+0x1e8>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800b368:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b36c:	401a      	ands	r2, r3
 800b36e:	4b20      	ldr	r3, [pc, #128]	; (800b3f0 <UTIL_SEQ_Run+0x1d8>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	4013      	ands	r3, r2
 800b374:	2b00      	cmp	r3, #0
 800b376:	d005      	beq.n	800b384 <UTIL_SEQ_Run+0x16c>
 800b378:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b37c:	4013      	ands	r3, r2
 800b37e:	2b00      	cmp	r3, #0
 800b380:	f43f af64 	beq.w	800b24c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800b384:	4b20      	ldr	r3, [pc, #128]	; (800b408 <UTIL_SEQ_Run+0x1f0>)
 800b386:	f04f 32ff 	mov.w	r2, #4294967295
 800b38a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800b38c:	f000 f938 	bl	800b600 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b390:	f3ef 8310 	mrs	r3, PRIMASK
 800b394:	613b      	str	r3, [r7, #16]
  return(result);
 800b396:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800b398:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b39a:	b672      	cpsid	i
}
 800b39c:	bf00      	nop
  local_taskset = TaskSet;
 800b39e:	4b15      	ldr	r3, [pc, #84]	; (800b3f4 <UTIL_SEQ_Run+0x1dc>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800b3a4:	4b14      	ldr	r3, [pc, #80]	; (800b3f8 <UTIL_SEQ_Run+0x1e0>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800b3aa:	4b14      	ldr	r3, [pc, #80]	; (800b3fc <UTIL_SEQ_Run+0x1e4>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800b3b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b4:	401a      	ands	r2, r3
 800b3b6:	4b0e      	ldr	r3, [pc, #56]	; (800b3f0 <UTIL_SEQ_Run+0x1d8>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	4013      	ands	r3, r2
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d107      	bne.n	800b3d0 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800b3c0:	4b0f      	ldr	r3, [pc, #60]	; (800b400 <UTIL_SEQ_Run+0x1e8>)
 800b3c2:	681a      	ldr	r2, [r3, #0]
 800b3c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3c6:	4013      	ands	r3, r2
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d101      	bne.n	800b3d0 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800b3cc:	f7f6 f8f6 	bl	80015bc <UTIL_SEQ_Idle>
 800b3d0:	69fb      	ldr	r3, [r7, #28]
 800b3d2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	f383 8810 	msr	PRIMASK, r3
}
 800b3da:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800b3dc:	f000 f917 	bl	800b60e <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800b3e0:	4a03      	ldr	r2, [pc, #12]	; (800b3f0 <UTIL_SEQ_Run+0x1d8>)
 800b3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3e4:	6013      	str	r3, [r2, #0]

  return;
 800b3e6:	bf00      	nop
}
 800b3e8:	3740      	adds	r7, #64	; 0x40
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}
 800b3ee:	bf00      	nop
 800b3f0:	20000054 	.word	0x20000054
 800b3f4:	20001700 	.word	0x20001700
 800b3f8:	20001704 	.word	0x20001704
 800b3fc:	20000050 	.word	0x20000050
 800b400:	20001708 	.word	0x20001708
 800b404:	20001790 	.word	0x20001790
 800b408:	2000170c 	.word	0x2000170c
 800b40c:	20001710 	.word	0x20001710

0800b410 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b088      	sub	sp, #32
 800b414:	af00      	add	r7, sp, #0
 800b416:	60f8      	str	r0, [r7, #12]
 800b418:	60b9      	str	r1, [r7, #8]
 800b41a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b41c:	f3ef 8310 	mrs	r3, PRIMASK
 800b420:	617b      	str	r3, [r7, #20]
  return(result);
 800b422:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800b424:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b426:	b672      	cpsid	i
}
 800b428:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800b42a:	68f8      	ldr	r0, [r7, #12]
 800b42c:	f000 f8f6 	bl	800b61c <SEQ_BitPosition>
 800b430:	4603      	mov	r3, r0
 800b432:	4619      	mov	r1, r3
 800b434:	4a06      	ldr	r2, [pc, #24]	; (800b450 <UTIL_SEQ_RegTask+0x40>)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b43c:	69fb      	ldr	r3, [r7, #28]
 800b43e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b440:	69bb      	ldr	r3, [r7, #24]
 800b442:	f383 8810 	msr	PRIMASK, r3
}
 800b446:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800b448:	bf00      	nop
}
 800b44a:	3720      	adds	r7, #32
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}
 800b450:	20001710 	.word	0x20001710

0800b454 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800b454:	b480      	push	{r7}
 800b456:	b087      	sub	sp, #28
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b45e:	f3ef 8310 	mrs	r3, PRIMASK
 800b462:	60fb      	str	r3, [r7, #12]
  return(result);
 800b464:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b466:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b468:	b672      	cpsid	i
}
 800b46a:	bf00      	nop

  TaskSet |= TaskId_bm;
 800b46c:	4b0d      	ldr	r3, [pc, #52]	; (800b4a4 <UTIL_SEQ_SetTask+0x50>)
 800b46e:	681a      	ldr	r2, [r3, #0]
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	4313      	orrs	r3, r2
 800b474:	4a0b      	ldr	r2, [pc, #44]	; (800b4a4 <UTIL_SEQ_SetTask+0x50>)
 800b476:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800b478:	4a0b      	ldr	r2, [pc, #44]	; (800b4a8 <UTIL_SEQ_SetTask+0x54>)
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	431a      	orrs	r2, r3
 800b484:	4908      	ldr	r1, [pc, #32]	; (800b4a8 <UTIL_SEQ_SetTask+0x54>)
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	f383 8810 	msr	PRIMASK, r3
}
 800b496:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b498:	bf00      	nop
}
 800b49a:	371c      	adds	r7, #28
 800b49c:	46bd      	mov	sp, r7
 800b49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a2:	4770      	bx	lr
 800b4a4:	20001700 	.word	0x20001700
 800b4a8:	20001790 	.word	0x20001790

0800b4ac <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b087      	sub	sp, #28
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4b4:	f3ef 8310 	mrs	r3, PRIMASK
 800b4b8:	60fb      	str	r3, [r7, #12]
  return(result);
 800b4ba:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b4bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b4be:	b672      	cpsid	i
}
 800b4c0:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	43da      	mvns	r2, r3
 800b4c6:	4b08      	ldr	r3, [pc, #32]	; (800b4e8 <UTIL_SEQ_PauseTask+0x3c>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	4013      	ands	r3, r2
 800b4cc:	4a06      	ldr	r2, [pc, #24]	; (800b4e8 <UTIL_SEQ_PauseTask+0x3c>)
 800b4ce:	6013      	str	r3, [r2, #0]
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4d4:	693b      	ldr	r3, [r7, #16]
 800b4d6:	f383 8810 	msr	PRIMASK, r3
}
 800b4da:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b4dc:	bf00      	nop
}
 800b4de:	371c      	adds	r7, #28
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e6:	4770      	bx	lr
 800b4e8:	20000050 	.word	0x20000050

0800b4ec <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b087      	sub	sp, #28
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4f4:	f3ef 8310 	mrs	r3, PRIMASK
 800b4f8:	60fb      	str	r3, [r7, #12]
  return(result);
 800b4fa:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b4fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b4fe:	b672      	cpsid	i
}
 800b500:	bf00      	nop

  TaskMask |= TaskId_bm;
 800b502:	4b09      	ldr	r3, [pc, #36]	; (800b528 <UTIL_SEQ_ResumeTask+0x3c>)
 800b504:	681a      	ldr	r2, [r3, #0]
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	4313      	orrs	r3, r2
 800b50a:	4a07      	ldr	r2, [pc, #28]	; (800b528 <UTIL_SEQ_ResumeTask+0x3c>)
 800b50c:	6013      	str	r3, [r2, #0]
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	f383 8810 	msr	PRIMASK, r3
}
 800b518:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b51a:	bf00      	nop
}
 800b51c:	371c      	adds	r7, #28
 800b51e:	46bd      	mov	sp, r7
 800b520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b524:	4770      	bx	lr
 800b526:	bf00      	nop
 800b528:	20000050 	.word	0x20000050

0800b52c <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800b52c:	b480      	push	{r7}
 800b52e:	b087      	sub	sp, #28
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b534:	f3ef 8310 	mrs	r3, PRIMASK
 800b538:	60fb      	str	r3, [r7, #12]
  return(result);
 800b53a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b53c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b53e:	b672      	cpsid	i
}
 800b540:	bf00      	nop

  EvtSet |= EvtId_bm;
 800b542:	4b09      	ldr	r3, [pc, #36]	; (800b568 <UTIL_SEQ_SetEvt+0x3c>)
 800b544:	681a      	ldr	r2, [r3, #0]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	4313      	orrs	r3, r2
 800b54a:	4a07      	ldr	r2, [pc, #28]	; (800b568 <UTIL_SEQ_SetEvt+0x3c>)
 800b54c:	6013      	str	r3, [r2, #0]
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	f383 8810 	msr	PRIMASK, r3
}
 800b558:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b55a:	bf00      	nop
}
 800b55c:	371c      	adds	r7, #28
 800b55e:	46bd      	mov	sp, r7
 800b560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b564:	4770      	bx	lr
 800b566:	bf00      	nop
 800b568:	20001704 	.word	0x20001704

0800b56c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b088      	sub	sp, #32
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800b574:	4b1f      	ldr	r3, [pc, #124]	; (800b5f4 <UTIL_SEQ_WaitEvt+0x88>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800b57a:	4b1e      	ldr	r3, [pc, #120]	; (800b5f4 <UTIL_SEQ_WaitEvt+0x88>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b582:	d102      	bne.n	800b58a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800b584:	2300      	movs	r3, #0
 800b586:	61fb      	str	r3, [r7, #28]
 800b588:	e005      	b.n	800b596 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800b58a:	4b1a      	ldr	r3, [pc, #104]	; (800b5f4 <UTIL_SEQ_WaitEvt+0x88>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	2201      	movs	r2, #1
 800b590:	fa02 f303 	lsl.w	r3, r2, r3
 800b594:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800b596:	4b18      	ldr	r3, [pc, #96]	; (800b5f8 <UTIL_SEQ_WaitEvt+0x8c>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800b59c:	4a16      	ldr	r2, [pc, #88]	; (800b5f8 <UTIL_SEQ_WaitEvt+0x8c>)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800b5a2:	e003      	b.n	800b5ac <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800b5a4:	6879      	ldr	r1, [r7, #4]
 800b5a6:	69f8      	ldr	r0, [r7, #28]
 800b5a8:	f7f6 f80f 	bl	80015ca <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800b5ac:	4b13      	ldr	r3, [pc, #76]	; (800b5fc <UTIL_SEQ_WaitEvt+0x90>)
 800b5ae:	681a      	ldr	r2, [r3, #0]
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	4013      	ands	r3, r2
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d0f5      	beq.n	800b5a4 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800b5b8:	4a0e      	ldr	r2, [pc, #56]	; (800b5f4 <UTIL_SEQ_WaitEvt+0x88>)
 800b5ba:	69bb      	ldr	r3, [r7, #24]
 800b5bc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5be:	f3ef 8310 	mrs	r3, PRIMASK
 800b5c2:	60bb      	str	r3, [r7, #8]
  return(result);
 800b5c4:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b5c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b5c8:	b672      	cpsid	i
}
 800b5ca:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	43da      	mvns	r2, r3
 800b5d0:	4b0a      	ldr	r3, [pc, #40]	; (800b5fc <UTIL_SEQ_WaitEvt+0x90>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	4013      	ands	r3, r2
 800b5d6:	4a09      	ldr	r2, [pc, #36]	; (800b5fc <UTIL_SEQ_WaitEvt+0x90>)
 800b5d8:	6013      	str	r3, [r2, #0]
 800b5da:	693b      	ldr	r3, [r7, #16]
 800b5dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	f383 8810 	msr	PRIMASK, r3
}
 800b5e4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800b5e6:	4a04      	ldr	r2, [pc, #16]	; (800b5f8 <UTIL_SEQ_WaitEvt+0x8c>)
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	6013      	str	r3, [r2, #0]
  return;
 800b5ec:	bf00      	nop
}
 800b5ee:	3720      	adds	r7, #32
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}
 800b5f4:	2000170c 	.word	0x2000170c
 800b5f8:	20001708 	.word	0x20001708
 800b5fc:	20001704 	.word	0x20001704

0800b600 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800b600:	b480      	push	{r7}
 800b602:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b604:	bf00      	nop
}
 800b606:	46bd      	mov	sp, r7
 800b608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60c:	4770      	bx	lr

0800b60e <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800b60e:	b480      	push	{r7}
 800b610:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b612:	bf00      	nop
}
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr

0800b61c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b085      	sub	sp, #20
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800b624:	2300      	movs	r3, #0
 800b626:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	0c1b      	lsrs	r3, r3, #16
 800b630:	041b      	lsls	r3, r3, #16
 800b632:	2b00      	cmp	r3, #0
 800b634:	d104      	bne.n	800b640 <SEQ_BitPosition+0x24>
 800b636:	2310      	movs	r3, #16
 800b638:	73fb      	strb	r3, [r7, #15]
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	041b      	lsls	r3, r3, #16
 800b63e:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b646:	2b00      	cmp	r3, #0
 800b648:	d105      	bne.n	800b656 <SEQ_BitPosition+0x3a>
 800b64a:	7bfb      	ldrb	r3, [r7, #15]
 800b64c:	3308      	adds	r3, #8
 800b64e:	73fb      	strb	r3, [r7, #15]
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	021b      	lsls	r3, r3, #8
 800b654:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d105      	bne.n	800b66c <SEQ_BitPosition+0x50>
 800b660:	7bfb      	ldrb	r3, [r7, #15]
 800b662:	3304      	adds	r3, #4
 800b664:	73fb      	strb	r3, [r7, #15]
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	011b      	lsls	r3, r3, #4
 800b66a:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	0f1b      	lsrs	r3, r3, #28
 800b670:	4a07      	ldr	r2, [pc, #28]	; (800b690 <SEQ_BitPosition+0x74>)
 800b672:	5cd2      	ldrb	r2, [r2, r3]
 800b674:	7bfb      	ldrb	r3, [r7, #15]
 800b676:	4413      	add	r3, r2
 800b678:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800b67a:	7bfb      	ldrb	r3, [r7, #15]
 800b67c:	f1c3 031f 	rsb	r3, r3, #31
 800b680:	b2db      	uxtb	r3, r3
}
 800b682:	4618      	mov	r0, r3
 800b684:	3714      	adds	r7, #20
 800b686:	46bd      	mov	sp, r7
 800b688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68c:	4770      	bx	lr
 800b68e:	bf00      	nop
 800b690:	0800eeb8 	.word	0x0800eeb8

0800b694 <__cvt>:
 800b694:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b698:	ec55 4b10 	vmov	r4, r5, d0
 800b69c:	2d00      	cmp	r5, #0
 800b69e:	460e      	mov	r6, r1
 800b6a0:	4619      	mov	r1, r3
 800b6a2:	462b      	mov	r3, r5
 800b6a4:	bfbb      	ittet	lt
 800b6a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b6aa:	461d      	movlt	r5, r3
 800b6ac:	2300      	movge	r3, #0
 800b6ae:	232d      	movlt	r3, #45	; 0x2d
 800b6b0:	700b      	strb	r3, [r1, #0]
 800b6b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b6b8:	4691      	mov	r9, r2
 800b6ba:	f023 0820 	bic.w	r8, r3, #32
 800b6be:	bfbc      	itt	lt
 800b6c0:	4622      	movlt	r2, r4
 800b6c2:	4614      	movlt	r4, r2
 800b6c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b6c8:	d005      	beq.n	800b6d6 <__cvt+0x42>
 800b6ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b6ce:	d100      	bne.n	800b6d2 <__cvt+0x3e>
 800b6d0:	3601      	adds	r6, #1
 800b6d2:	2102      	movs	r1, #2
 800b6d4:	e000      	b.n	800b6d8 <__cvt+0x44>
 800b6d6:	2103      	movs	r1, #3
 800b6d8:	ab03      	add	r3, sp, #12
 800b6da:	9301      	str	r3, [sp, #4]
 800b6dc:	ab02      	add	r3, sp, #8
 800b6de:	9300      	str	r3, [sp, #0]
 800b6e0:	ec45 4b10 	vmov	d0, r4, r5
 800b6e4:	4653      	mov	r3, sl
 800b6e6:	4632      	mov	r2, r6
 800b6e8:	f000 ff8a 	bl	800c600 <_dtoa_r>
 800b6ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b6f0:	4607      	mov	r7, r0
 800b6f2:	d102      	bne.n	800b6fa <__cvt+0x66>
 800b6f4:	f019 0f01 	tst.w	r9, #1
 800b6f8:	d022      	beq.n	800b740 <__cvt+0xac>
 800b6fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b6fe:	eb07 0906 	add.w	r9, r7, r6
 800b702:	d110      	bne.n	800b726 <__cvt+0x92>
 800b704:	783b      	ldrb	r3, [r7, #0]
 800b706:	2b30      	cmp	r3, #48	; 0x30
 800b708:	d10a      	bne.n	800b720 <__cvt+0x8c>
 800b70a:	2200      	movs	r2, #0
 800b70c:	2300      	movs	r3, #0
 800b70e:	4620      	mov	r0, r4
 800b710:	4629      	mov	r1, r5
 800b712:	f7f5 f9c1 	bl	8000a98 <__aeabi_dcmpeq>
 800b716:	b918      	cbnz	r0, 800b720 <__cvt+0x8c>
 800b718:	f1c6 0601 	rsb	r6, r6, #1
 800b71c:	f8ca 6000 	str.w	r6, [sl]
 800b720:	f8da 3000 	ldr.w	r3, [sl]
 800b724:	4499      	add	r9, r3
 800b726:	2200      	movs	r2, #0
 800b728:	2300      	movs	r3, #0
 800b72a:	4620      	mov	r0, r4
 800b72c:	4629      	mov	r1, r5
 800b72e:	f7f5 f9b3 	bl	8000a98 <__aeabi_dcmpeq>
 800b732:	b108      	cbz	r0, 800b738 <__cvt+0xa4>
 800b734:	f8cd 900c 	str.w	r9, [sp, #12]
 800b738:	2230      	movs	r2, #48	; 0x30
 800b73a:	9b03      	ldr	r3, [sp, #12]
 800b73c:	454b      	cmp	r3, r9
 800b73e:	d307      	bcc.n	800b750 <__cvt+0xbc>
 800b740:	9b03      	ldr	r3, [sp, #12]
 800b742:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b744:	1bdb      	subs	r3, r3, r7
 800b746:	4638      	mov	r0, r7
 800b748:	6013      	str	r3, [r2, #0]
 800b74a:	b004      	add	sp, #16
 800b74c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b750:	1c59      	adds	r1, r3, #1
 800b752:	9103      	str	r1, [sp, #12]
 800b754:	701a      	strb	r2, [r3, #0]
 800b756:	e7f0      	b.n	800b73a <__cvt+0xa6>

0800b758 <__exponent>:
 800b758:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b75a:	4603      	mov	r3, r0
 800b75c:	2900      	cmp	r1, #0
 800b75e:	bfb8      	it	lt
 800b760:	4249      	neglt	r1, r1
 800b762:	f803 2b02 	strb.w	r2, [r3], #2
 800b766:	bfb4      	ite	lt
 800b768:	222d      	movlt	r2, #45	; 0x2d
 800b76a:	222b      	movge	r2, #43	; 0x2b
 800b76c:	2909      	cmp	r1, #9
 800b76e:	7042      	strb	r2, [r0, #1]
 800b770:	dd2a      	ble.n	800b7c8 <__exponent+0x70>
 800b772:	f10d 0207 	add.w	r2, sp, #7
 800b776:	4617      	mov	r7, r2
 800b778:	260a      	movs	r6, #10
 800b77a:	4694      	mov	ip, r2
 800b77c:	fb91 f5f6 	sdiv	r5, r1, r6
 800b780:	fb06 1415 	mls	r4, r6, r5, r1
 800b784:	3430      	adds	r4, #48	; 0x30
 800b786:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b78a:	460c      	mov	r4, r1
 800b78c:	2c63      	cmp	r4, #99	; 0x63
 800b78e:	f102 32ff 	add.w	r2, r2, #4294967295
 800b792:	4629      	mov	r1, r5
 800b794:	dcf1      	bgt.n	800b77a <__exponent+0x22>
 800b796:	3130      	adds	r1, #48	; 0x30
 800b798:	f1ac 0402 	sub.w	r4, ip, #2
 800b79c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b7a0:	1c41      	adds	r1, r0, #1
 800b7a2:	4622      	mov	r2, r4
 800b7a4:	42ba      	cmp	r2, r7
 800b7a6:	d30a      	bcc.n	800b7be <__exponent+0x66>
 800b7a8:	f10d 0209 	add.w	r2, sp, #9
 800b7ac:	eba2 020c 	sub.w	r2, r2, ip
 800b7b0:	42bc      	cmp	r4, r7
 800b7b2:	bf88      	it	hi
 800b7b4:	2200      	movhi	r2, #0
 800b7b6:	4413      	add	r3, r2
 800b7b8:	1a18      	subs	r0, r3, r0
 800b7ba:	b003      	add	sp, #12
 800b7bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7be:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b7c2:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b7c6:	e7ed      	b.n	800b7a4 <__exponent+0x4c>
 800b7c8:	2330      	movs	r3, #48	; 0x30
 800b7ca:	3130      	adds	r1, #48	; 0x30
 800b7cc:	7083      	strb	r3, [r0, #2]
 800b7ce:	70c1      	strb	r1, [r0, #3]
 800b7d0:	1d03      	adds	r3, r0, #4
 800b7d2:	e7f1      	b.n	800b7b8 <__exponent+0x60>

0800b7d4 <_printf_float>:
 800b7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7d8:	ed2d 8b02 	vpush	{d8}
 800b7dc:	b08d      	sub	sp, #52	; 0x34
 800b7de:	460c      	mov	r4, r1
 800b7e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b7e4:	4616      	mov	r6, r2
 800b7e6:	461f      	mov	r7, r3
 800b7e8:	4605      	mov	r5, r0
 800b7ea:	f000 fdf9 	bl	800c3e0 <_localeconv_r>
 800b7ee:	f8d0 a000 	ldr.w	sl, [r0]
 800b7f2:	4650      	mov	r0, sl
 800b7f4:	f7f4 fd24 	bl	8000240 <strlen>
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	930a      	str	r3, [sp, #40]	; 0x28
 800b7fc:	6823      	ldr	r3, [r4, #0]
 800b7fe:	9305      	str	r3, [sp, #20]
 800b800:	f8d8 3000 	ldr.w	r3, [r8]
 800b804:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b808:	3307      	adds	r3, #7
 800b80a:	f023 0307 	bic.w	r3, r3, #7
 800b80e:	f103 0208 	add.w	r2, r3, #8
 800b812:	f8c8 2000 	str.w	r2, [r8]
 800b816:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b81a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b81e:	9307      	str	r3, [sp, #28]
 800b820:	f8cd 8018 	str.w	r8, [sp, #24]
 800b824:	ee08 0a10 	vmov	s16, r0
 800b828:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b82c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b830:	4b9e      	ldr	r3, [pc, #632]	; (800baac <_printf_float+0x2d8>)
 800b832:	f04f 32ff 	mov.w	r2, #4294967295
 800b836:	f7f5 f961 	bl	8000afc <__aeabi_dcmpun>
 800b83a:	bb88      	cbnz	r0, 800b8a0 <_printf_float+0xcc>
 800b83c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b840:	4b9a      	ldr	r3, [pc, #616]	; (800baac <_printf_float+0x2d8>)
 800b842:	f04f 32ff 	mov.w	r2, #4294967295
 800b846:	f7f5 f93b 	bl	8000ac0 <__aeabi_dcmple>
 800b84a:	bb48      	cbnz	r0, 800b8a0 <_printf_float+0xcc>
 800b84c:	2200      	movs	r2, #0
 800b84e:	2300      	movs	r3, #0
 800b850:	4640      	mov	r0, r8
 800b852:	4649      	mov	r1, r9
 800b854:	f7f5 f92a 	bl	8000aac <__aeabi_dcmplt>
 800b858:	b110      	cbz	r0, 800b860 <_printf_float+0x8c>
 800b85a:	232d      	movs	r3, #45	; 0x2d
 800b85c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b860:	4a93      	ldr	r2, [pc, #588]	; (800bab0 <_printf_float+0x2dc>)
 800b862:	4b94      	ldr	r3, [pc, #592]	; (800bab4 <_printf_float+0x2e0>)
 800b864:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b868:	bf94      	ite	ls
 800b86a:	4690      	movls	r8, r2
 800b86c:	4698      	movhi	r8, r3
 800b86e:	2303      	movs	r3, #3
 800b870:	6123      	str	r3, [r4, #16]
 800b872:	9b05      	ldr	r3, [sp, #20]
 800b874:	f023 0304 	bic.w	r3, r3, #4
 800b878:	6023      	str	r3, [r4, #0]
 800b87a:	f04f 0900 	mov.w	r9, #0
 800b87e:	9700      	str	r7, [sp, #0]
 800b880:	4633      	mov	r3, r6
 800b882:	aa0b      	add	r2, sp, #44	; 0x2c
 800b884:	4621      	mov	r1, r4
 800b886:	4628      	mov	r0, r5
 800b888:	f000 f9da 	bl	800bc40 <_printf_common>
 800b88c:	3001      	adds	r0, #1
 800b88e:	f040 8090 	bne.w	800b9b2 <_printf_float+0x1de>
 800b892:	f04f 30ff 	mov.w	r0, #4294967295
 800b896:	b00d      	add	sp, #52	; 0x34
 800b898:	ecbd 8b02 	vpop	{d8}
 800b89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8a0:	4642      	mov	r2, r8
 800b8a2:	464b      	mov	r3, r9
 800b8a4:	4640      	mov	r0, r8
 800b8a6:	4649      	mov	r1, r9
 800b8a8:	f7f5 f928 	bl	8000afc <__aeabi_dcmpun>
 800b8ac:	b140      	cbz	r0, 800b8c0 <_printf_float+0xec>
 800b8ae:	464b      	mov	r3, r9
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	bfbc      	itt	lt
 800b8b4:	232d      	movlt	r3, #45	; 0x2d
 800b8b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b8ba:	4a7f      	ldr	r2, [pc, #508]	; (800bab8 <_printf_float+0x2e4>)
 800b8bc:	4b7f      	ldr	r3, [pc, #508]	; (800babc <_printf_float+0x2e8>)
 800b8be:	e7d1      	b.n	800b864 <_printf_float+0x90>
 800b8c0:	6863      	ldr	r3, [r4, #4]
 800b8c2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b8c6:	9206      	str	r2, [sp, #24]
 800b8c8:	1c5a      	adds	r2, r3, #1
 800b8ca:	d13f      	bne.n	800b94c <_printf_float+0x178>
 800b8cc:	2306      	movs	r3, #6
 800b8ce:	6063      	str	r3, [r4, #4]
 800b8d0:	9b05      	ldr	r3, [sp, #20]
 800b8d2:	6861      	ldr	r1, [r4, #4]
 800b8d4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b8d8:	2300      	movs	r3, #0
 800b8da:	9303      	str	r3, [sp, #12]
 800b8dc:	ab0a      	add	r3, sp, #40	; 0x28
 800b8de:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b8e2:	ab09      	add	r3, sp, #36	; 0x24
 800b8e4:	ec49 8b10 	vmov	d0, r8, r9
 800b8e8:	9300      	str	r3, [sp, #0]
 800b8ea:	6022      	str	r2, [r4, #0]
 800b8ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b8f0:	4628      	mov	r0, r5
 800b8f2:	f7ff fecf 	bl	800b694 <__cvt>
 800b8f6:	9b06      	ldr	r3, [sp, #24]
 800b8f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b8fa:	2b47      	cmp	r3, #71	; 0x47
 800b8fc:	4680      	mov	r8, r0
 800b8fe:	d108      	bne.n	800b912 <_printf_float+0x13e>
 800b900:	1cc8      	adds	r0, r1, #3
 800b902:	db02      	blt.n	800b90a <_printf_float+0x136>
 800b904:	6863      	ldr	r3, [r4, #4]
 800b906:	4299      	cmp	r1, r3
 800b908:	dd41      	ble.n	800b98e <_printf_float+0x1ba>
 800b90a:	f1ab 0302 	sub.w	r3, fp, #2
 800b90e:	fa5f fb83 	uxtb.w	fp, r3
 800b912:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b916:	d820      	bhi.n	800b95a <_printf_float+0x186>
 800b918:	3901      	subs	r1, #1
 800b91a:	465a      	mov	r2, fp
 800b91c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b920:	9109      	str	r1, [sp, #36]	; 0x24
 800b922:	f7ff ff19 	bl	800b758 <__exponent>
 800b926:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b928:	1813      	adds	r3, r2, r0
 800b92a:	2a01      	cmp	r2, #1
 800b92c:	4681      	mov	r9, r0
 800b92e:	6123      	str	r3, [r4, #16]
 800b930:	dc02      	bgt.n	800b938 <_printf_float+0x164>
 800b932:	6822      	ldr	r2, [r4, #0]
 800b934:	07d2      	lsls	r2, r2, #31
 800b936:	d501      	bpl.n	800b93c <_printf_float+0x168>
 800b938:	3301      	adds	r3, #1
 800b93a:	6123      	str	r3, [r4, #16]
 800b93c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b940:	2b00      	cmp	r3, #0
 800b942:	d09c      	beq.n	800b87e <_printf_float+0xaa>
 800b944:	232d      	movs	r3, #45	; 0x2d
 800b946:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b94a:	e798      	b.n	800b87e <_printf_float+0xaa>
 800b94c:	9a06      	ldr	r2, [sp, #24]
 800b94e:	2a47      	cmp	r2, #71	; 0x47
 800b950:	d1be      	bne.n	800b8d0 <_printf_float+0xfc>
 800b952:	2b00      	cmp	r3, #0
 800b954:	d1bc      	bne.n	800b8d0 <_printf_float+0xfc>
 800b956:	2301      	movs	r3, #1
 800b958:	e7b9      	b.n	800b8ce <_printf_float+0xfa>
 800b95a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b95e:	d118      	bne.n	800b992 <_printf_float+0x1be>
 800b960:	2900      	cmp	r1, #0
 800b962:	6863      	ldr	r3, [r4, #4]
 800b964:	dd0b      	ble.n	800b97e <_printf_float+0x1aa>
 800b966:	6121      	str	r1, [r4, #16]
 800b968:	b913      	cbnz	r3, 800b970 <_printf_float+0x19c>
 800b96a:	6822      	ldr	r2, [r4, #0]
 800b96c:	07d0      	lsls	r0, r2, #31
 800b96e:	d502      	bpl.n	800b976 <_printf_float+0x1a2>
 800b970:	3301      	adds	r3, #1
 800b972:	440b      	add	r3, r1
 800b974:	6123      	str	r3, [r4, #16]
 800b976:	65a1      	str	r1, [r4, #88]	; 0x58
 800b978:	f04f 0900 	mov.w	r9, #0
 800b97c:	e7de      	b.n	800b93c <_printf_float+0x168>
 800b97e:	b913      	cbnz	r3, 800b986 <_printf_float+0x1b2>
 800b980:	6822      	ldr	r2, [r4, #0]
 800b982:	07d2      	lsls	r2, r2, #31
 800b984:	d501      	bpl.n	800b98a <_printf_float+0x1b6>
 800b986:	3302      	adds	r3, #2
 800b988:	e7f4      	b.n	800b974 <_printf_float+0x1a0>
 800b98a:	2301      	movs	r3, #1
 800b98c:	e7f2      	b.n	800b974 <_printf_float+0x1a0>
 800b98e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b992:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b994:	4299      	cmp	r1, r3
 800b996:	db05      	blt.n	800b9a4 <_printf_float+0x1d0>
 800b998:	6823      	ldr	r3, [r4, #0]
 800b99a:	6121      	str	r1, [r4, #16]
 800b99c:	07d8      	lsls	r0, r3, #31
 800b99e:	d5ea      	bpl.n	800b976 <_printf_float+0x1a2>
 800b9a0:	1c4b      	adds	r3, r1, #1
 800b9a2:	e7e7      	b.n	800b974 <_printf_float+0x1a0>
 800b9a4:	2900      	cmp	r1, #0
 800b9a6:	bfd4      	ite	le
 800b9a8:	f1c1 0202 	rsble	r2, r1, #2
 800b9ac:	2201      	movgt	r2, #1
 800b9ae:	4413      	add	r3, r2
 800b9b0:	e7e0      	b.n	800b974 <_printf_float+0x1a0>
 800b9b2:	6823      	ldr	r3, [r4, #0]
 800b9b4:	055a      	lsls	r2, r3, #21
 800b9b6:	d407      	bmi.n	800b9c8 <_printf_float+0x1f4>
 800b9b8:	6923      	ldr	r3, [r4, #16]
 800b9ba:	4642      	mov	r2, r8
 800b9bc:	4631      	mov	r1, r6
 800b9be:	4628      	mov	r0, r5
 800b9c0:	47b8      	blx	r7
 800b9c2:	3001      	adds	r0, #1
 800b9c4:	d12c      	bne.n	800ba20 <_printf_float+0x24c>
 800b9c6:	e764      	b.n	800b892 <_printf_float+0xbe>
 800b9c8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b9cc:	f240 80e0 	bls.w	800bb90 <_printf_float+0x3bc>
 800b9d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	f7f5 f85e 	bl	8000a98 <__aeabi_dcmpeq>
 800b9dc:	2800      	cmp	r0, #0
 800b9de:	d034      	beq.n	800ba4a <_printf_float+0x276>
 800b9e0:	4a37      	ldr	r2, [pc, #220]	; (800bac0 <_printf_float+0x2ec>)
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	4631      	mov	r1, r6
 800b9e6:	4628      	mov	r0, r5
 800b9e8:	47b8      	blx	r7
 800b9ea:	3001      	adds	r0, #1
 800b9ec:	f43f af51 	beq.w	800b892 <_printf_float+0xbe>
 800b9f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b9f4:	429a      	cmp	r2, r3
 800b9f6:	db02      	blt.n	800b9fe <_printf_float+0x22a>
 800b9f8:	6823      	ldr	r3, [r4, #0]
 800b9fa:	07d8      	lsls	r0, r3, #31
 800b9fc:	d510      	bpl.n	800ba20 <_printf_float+0x24c>
 800b9fe:	ee18 3a10 	vmov	r3, s16
 800ba02:	4652      	mov	r2, sl
 800ba04:	4631      	mov	r1, r6
 800ba06:	4628      	mov	r0, r5
 800ba08:	47b8      	blx	r7
 800ba0a:	3001      	adds	r0, #1
 800ba0c:	f43f af41 	beq.w	800b892 <_printf_float+0xbe>
 800ba10:	f04f 0800 	mov.w	r8, #0
 800ba14:	f104 091a 	add.w	r9, r4, #26
 800ba18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba1a:	3b01      	subs	r3, #1
 800ba1c:	4543      	cmp	r3, r8
 800ba1e:	dc09      	bgt.n	800ba34 <_printf_float+0x260>
 800ba20:	6823      	ldr	r3, [r4, #0]
 800ba22:	079b      	lsls	r3, r3, #30
 800ba24:	f100 8107 	bmi.w	800bc36 <_printf_float+0x462>
 800ba28:	68e0      	ldr	r0, [r4, #12]
 800ba2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba2c:	4298      	cmp	r0, r3
 800ba2e:	bfb8      	it	lt
 800ba30:	4618      	movlt	r0, r3
 800ba32:	e730      	b.n	800b896 <_printf_float+0xc2>
 800ba34:	2301      	movs	r3, #1
 800ba36:	464a      	mov	r2, r9
 800ba38:	4631      	mov	r1, r6
 800ba3a:	4628      	mov	r0, r5
 800ba3c:	47b8      	blx	r7
 800ba3e:	3001      	adds	r0, #1
 800ba40:	f43f af27 	beq.w	800b892 <_printf_float+0xbe>
 800ba44:	f108 0801 	add.w	r8, r8, #1
 800ba48:	e7e6      	b.n	800ba18 <_printf_float+0x244>
 800ba4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	dc39      	bgt.n	800bac4 <_printf_float+0x2f0>
 800ba50:	4a1b      	ldr	r2, [pc, #108]	; (800bac0 <_printf_float+0x2ec>)
 800ba52:	2301      	movs	r3, #1
 800ba54:	4631      	mov	r1, r6
 800ba56:	4628      	mov	r0, r5
 800ba58:	47b8      	blx	r7
 800ba5a:	3001      	adds	r0, #1
 800ba5c:	f43f af19 	beq.w	800b892 <_printf_float+0xbe>
 800ba60:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ba64:	4313      	orrs	r3, r2
 800ba66:	d102      	bne.n	800ba6e <_printf_float+0x29a>
 800ba68:	6823      	ldr	r3, [r4, #0]
 800ba6a:	07d9      	lsls	r1, r3, #31
 800ba6c:	d5d8      	bpl.n	800ba20 <_printf_float+0x24c>
 800ba6e:	ee18 3a10 	vmov	r3, s16
 800ba72:	4652      	mov	r2, sl
 800ba74:	4631      	mov	r1, r6
 800ba76:	4628      	mov	r0, r5
 800ba78:	47b8      	blx	r7
 800ba7a:	3001      	adds	r0, #1
 800ba7c:	f43f af09 	beq.w	800b892 <_printf_float+0xbe>
 800ba80:	f04f 0900 	mov.w	r9, #0
 800ba84:	f104 0a1a 	add.w	sl, r4, #26
 800ba88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba8a:	425b      	negs	r3, r3
 800ba8c:	454b      	cmp	r3, r9
 800ba8e:	dc01      	bgt.n	800ba94 <_printf_float+0x2c0>
 800ba90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba92:	e792      	b.n	800b9ba <_printf_float+0x1e6>
 800ba94:	2301      	movs	r3, #1
 800ba96:	4652      	mov	r2, sl
 800ba98:	4631      	mov	r1, r6
 800ba9a:	4628      	mov	r0, r5
 800ba9c:	47b8      	blx	r7
 800ba9e:	3001      	adds	r0, #1
 800baa0:	f43f aef7 	beq.w	800b892 <_printf_float+0xbe>
 800baa4:	f109 0901 	add.w	r9, r9, #1
 800baa8:	e7ee      	b.n	800ba88 <_printf_float+0x2b4>
 800baaa:	bf00      	nop
 800baac:	7fefffff 	.word	0x7fefffff
 800bab0:	0800eec8 	.word	0x0800eec8
 800bab4:	0800eecc 	.word	0x0800eecc
 800bab8:	0800eed0 	.word	0x0800eed0
 800babc:	0800eed4 	.word	0x0800eed4
 800bac0:	0800eed8 	.word	0x0800eed8
 800bac4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bac6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bac8:	429a      	cmp	r2, r3
 800baca:	bfa8      	it	ge
 800bacc:	461a      	movge	r2, r3
 800bace:	2a00      	cmp	r2, #0
 800bad0:	4691      	mov	r9, r2
 800bad2:	dc37      	bgt.n	800bb44 <_printf_float+0x370>
 800bad4:	f04f 0b00 	mov.w	fp, #0
 800bad8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800badc:	f104 021a 	add.w	r2, r4, #26
 800bae0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bae2:	9305      	str	r3, [sp, #20]
 800bae4:	eba3 0309 	sub.w	r3, r3, r9
 800bae8:	455b      	cmp	r3, fp
 800baea:	dc33      	bgt.n	800bb54 <_printf_float+0x380>
 800baec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800baf0:	429a      	cmp	r2, r3
 800baf2:	db3b      	blt.n	800bb6c <_printf_float+0x398>
 800baf4:	6823      	ldr	r3, [r4, #0]
 800baf6:	07da      	lsls	r2, r3, #31
 800baf8:	d438      	bmi.n	800bb6c <_printf_float+0x398>
 800bafa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800bafe:	eba2 0903 	sub.w	r9, r2, r3
 800bb02:	9b05      	ldr	r3, [sp, #20]
 800bb04:	1ad2      	subs	r2, r2, r3
 800bb06:	4591      	cmp	r9, r2
 800bb08:	bfa8      	it	ge
 800bb0a:	4691      	movge	r9, r2
 800bb0c:	f1b9 0f00 	cmp.w	r9, #0
 800bb10:	dc35      	bgt.n	800bb7e <_printf_float+0x3aa>
 800bb12:	f04f 0800 	mov.w	r8, #0
 800bb16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bb1a:	f104 0a1a 	add.w	sl, r4, #26
 800bb1e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb22:	1a9b      	subs	r3, r3, r2
 800bb24:	eba3 0309 	sub.w	r3, r3, r9
 800bb28:	4543      	cmp	r3, r8
 800bb2a:	f77f af79 	ble.w	800ba20 <_printf_float+0x24c>
 800bb2e:	2301      	movs	r3, #1
 800bb30:	4652      	mov	r2, sl
 800bb32:	4631      	mov	r1, r6
 800bb34:	4628      	mov	r0, r5
 800bb36:	47b8      	blx	r7
 800bb38:	3001      	adds	r0, #1
 800bb3a:	f43f aeaa 	beq.w	800b892 <_printf_float+0xbe>
 800bb3e:	f108 0801 	add.w	r8, r8, #1
 800bb42:	e7ec      	b.n	800bb1e <_printf_float+0x34a>
 800bb44:	4613      	mov	r3, r2
 800bb46:	4631      	mov	r1, r6
 800bb48:	4642      	mov	r2, r8
 800bb4a:	4628      	mov	r0, r5
 800bb4c:	47b8      	blx	r7
 800bb4e:	3001      	adds	r0, #1
 800bb50:	d1c0      	bne.n	800bad4 <_printf_float+0x300>
 800bb52:	e69e      	b.n	800b892 <_printf_float+0xbe>
 800bb54:	2301      	movs	r3, #1
 800bb56:	4631      	mov	r1, r6
 800bb58:	4628      	mov	r0, r5
 800bb5a:	9205      	str	r2, [sp, #20]
 800bb5c:	47b8      	blx	r7
 800bb5e:	3001      	adds	r0, #1
 800bb60:	f43f ae97 	beq.w	800b892 <_printf_float+0xbe>
 800bb64:	9a05      	ldr	r2, [sp, #20]
 800bb66:	f10b 0b01 	add.w	fp, fp, #1
 800bb6a:	e7b9      	b.n	800bae0 <_printf_float+0x30c>
 800bb6c:	ee18 3a10 	vmov	r3, s16
 800bb70:	4652      	mov	r2, sl
 800bb72:	4631      	mov	r1, r6
 800bb74:	4628      	mov	r0, r5
 800bb76:	47b8      	blx	r7
 800bb78:	3001      	adds	r0, #1
 800bb7a:	d1be      	bne.n	800bafa <_printf_float+0x326>
 800bb7c:	e689      	b.n	800b892 <_printf_float+0xbe>
 800bb7e:	9a05      	ldr	r2, [sp, #20]
 800bb80:	464b      	mov	r3, r9
 800bb82:	4442      	add	r2, r8
 800bb84:	4631      	mov	r1, r6
 800bb86:	4628      	mov	r0, r5
 800bb88:	47b8      	blx	r7
 800bb8a:	3001      	adds	r0, #1
 800bb8c:	d1c1      	bne.n	800bb12 <_printf_float+0x33e>
 800bb8e:	e680      	b.n	800b892 <_printf_float+0xbe>
 800bb90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb92:	2a01      	cmp	r2, #1
 800bb94:	dc01      	bgt.n	800bb9a <_printf_float+0x3c6>
 800bb96:	07db      	lsls	r3, r3, #31
 800bb98:	d53a      	bpl.n	800bc10 <_printf_float+0x43c>
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	4642      	mov	r2, r8
 800bb9e:	4631      	mov	r1, r6
 800bba0:	4628      	mov	r0, r5
 800bba2:	47b8      	blx	r7
 800bba4:	3001      	adds	r0, #1
 800bba6:	f43f ae74 	beq.w	800b892 <_printf_float+0xbe>
 800bbaa:	ee18 3a10 	vmov	r3, s16
 800bbae:	4652      	mov	r2, sl
 800bbb0:	4631      	mov	r1, r6
 800bbb2:	4628      	mov	r0, r5
 800bbb4:	47b8      	blx	r7
 800bbb6:	3001      	adds	r0, #1
 800bbb8:	f43f ae6b 	beq.w	800b892 <_printf_float+0xbe>
 800bbbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800bbc8:	f7f4 ff66 	bl	8000a98 <__aeabi_dcmpeq>
 800bbcc:	b9d8      	cbnz	r0, 800bc06 <_printf_float+0x432>
 800bbce:	f10a 33ff 	add.w	r3, sl, #4294967295
 800bbd2:	f108 0201 	add.w	r2, r8, #1
 800bbd6:	4631      	mov	r1, r6
 800bbd8:	4628      	mov	r0, r5
 800bbda:	47b8      	blx	r7
 800bbdc:	3001      	adds	r0, #1
 800bbde:	d10e      	bne.n	800bbfe <_printf_float+0x42a>
 800bbe0:	e657      	b.n	800b892 <_printf_float+0xbe>
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	4652      	mov	r2, sl
 800bbe6:	4631      	mov	r1, r6
 800bbe8:	4628      	mov	r0, r5
 800bbea:	47b8      	blx	r7
 800bbec:	3001      	adds	r0, #1
 800bbee:	f43f ae50 	beq.w	800b892 <_printf_float+0xbe>
 800bbf2:	f108 0801 	add.w	r8, r8, #1
 800bbf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbf8:	3b01      	subs	r3, #1
 800bbfa:	4543      	cmp	r3, r8
 800bbfc:	dcf1      	bgt.n	800bbe2 <_printf_float+0x40e>
 800bbfe:	464b      	mov	r3, r9
 800bc00:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bc04:	e6da      	b.n	800b9bc <_printf_float+0x1e8>
 800bc06:	f04f 0800 	mov.w	r8, #0
 800bc0a:	f104 0a1a 	add.w	sl, r4, #26
 800bc0e:	e7f2      	b.n	800bbf6 <_printf_float+0x422>
 800bc10:	2301      	movs	r3, #1
 800bc12:	4642      	mov	r2, r8
 800bc14:	e7df      	b.n	800bbd6 <_printf_float+0x402>
 800bc16:	2301      	movs	r3, #1
 800bc18:	464a      	mov	r2, r9
 800bc1a:	4631      	mov	r1, r6
 800bc1c:	4628      	mov	r0, r5
 800bc1e:	47b8      	blx	r7
 800bc20:	3001      	adds	r0, #1
 800bc22:	f43f ae36 	beq.w	800b892 <_printf_float+0xbe>
 800bc26:	f108 0801 	add.w	r8, r8, #1
 800bc2a:	68e3      	ldr	r3, [r4, #12]
 800bc2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bc2e:	1a5b      	subs	r3, r3, r1
 800bc30:	4543      	cmp	r3, r8
 800bc32:	dcf0      	bgt.n	800bc16 <_printf_float+0x442>
 800bc34:	e6f8      	b.n	800ba28 <_printf_float+0x254>
 800bc36:	f04f 0800 	mov.w	r8, #0
 800bc3a:	f104 0919 	add.w	r9, r4, #25
 800bc3e:	e7f4      	b.n	800bc2a <_printf_float+0x456>

0800bc40 <_printf_common>:
 800bc40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc44:	4616      	mov	r6, r2
 800bc46:	4699      	mov	r9, r3
 800bc48:	688a      	ldr	r2, [r1, #8]
 800bc4a:	690b      	ldr	r3, [r1, #16]
 800bc4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bc50:	4293      	cmp	r3, r2
 800bc52:	bfb8      	it	lt
 800bc54:	4613      	movlt	r3, r2
 800bc56:	6033      	str	r3, [r6, #0]
 800bc58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bc5c:	4607      	mov	r7, r0
 800bc5e:	460c      	mov	r4, r1
 800bc60:	b10a      	cbz	r2, 800bc66 <_printf_common+0x26>
 800bc62:	3301      	adds	r3, #1
 800bc64:	6033      	str	r3, [r6, #0]
 800bc66:	6823      	ldr	r3, [r4, #0]
 800bc68:	0699      	lsls	r1, r3, #26
 800bc6a:	bf42      	ittt	mi
 800bc6c:	6833      	ldrmi	r3, [r6, #0]
 800bc6e:	3302      	addmi	r3, #2
 800bc70:	6033      	strmi	r3, [r6, #0]
 800bc72:	6825      	ldr	r5, [r4, #0]
 800bc74:	f015 0506 	ands.w	r5, r5, #6
 800bc78:	d106      	bne.n	800bc88 <_printf_common+0x48>
 800bc7a:	f104 0a19 	add.w	sl, r4, #25
 800bc7e:	68e3      	ldr	r3, [r4, #12]
 800bc80:	6832      	ldr	r2, [r6, #0]
 800bc82:	1a9b      	subs	r3, r3, r2
 800bc84:	42ab      	cmp	r3, r5
 800bc86:	dc26      	bgt.n	800bcd6 <_printf_common+0x96>
 800bc88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bc8c:	1e13      	subs	r3, r2, #0
 800bc8e:	6822      	ldr	r2, [r4, #0]
 800bc90:	bf18      	it	ne
 800bc92:	2301      	movne	r3, #1
 800bc94:	0692      	lsls	r2, r2, #26
 800bc96:	d42b      	bmi.n	800bcf0 <_printf_common+0xb0>
 800bc98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bc9c:	4649      	mov	r1, r9
 800bc9e:	4638      	mov	r0, r7
 800bca0:	47c0      	blx	r8
 800bca2:	3001      	adds	r0, #1
 800bca4:	d01e      	beq.n	800bce4 <_printf_common+0xa4>
 800bca6:	6823      	ldr	r3, [r4, #0]
 800bca8:	6922      	ldr	r2, [r4, #16]
 800bcaa:	f003 0306 	and.w	r3, r3, #6
 800bcae:	2b04      	cmp	r3, #4
 800bcb0:	bf02      	ittt	eq
 800bcb2:	68e5      	ldreq	r5, [r4, #12]
 800bcb4:	6833      	ldreq	r3, [r6, #0]
 800bcb6:	1aed      	subeq	r5, r5, r3
 800bcb8:	68a3      	ldr	r3, [r4, #8]
 800bcba:	bf0c      	ite	eq
 800bcbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bcc0:	2500      	movne	r5, #0
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	bfc4      	itt	gt
 800bcc6:	1a9b      	subgt	r3, r3, r2
 800bcc8:	18ed      	addgt	r5, r5, r3
 800bcca:	2600      	movs	r6, #0
 800bccc:	341a      	adds	r4, #26
 800bcce:	42b5      	cmp	r5, r6
 800bcd0:	d11a      	bne.n	800bd08 <_printf_common+0xc8>
 800bcd2:	2000      	movs	r0, #0
 800bcd4:	e008      	b.n	800bce8 <_printf_common+0xa8>
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	4652      	mov	r2, sl
 800bcda:	4649      	mov	r1, r9
 800bcdc:	4638      	mov	r0, r7
 800bcde:	47c0      	blx	r8
 800bce0:	3001      	adds	r0, #1
 800bce2:	d103      	bne.n	800bcec <_printf_common+0xac>
 800bce4:	f04f 30ff 	mov.w	r0, #4294967295
 800bce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcec:	3501      	adds	r5, #1
 800bcee:	e7c6      	b.n	800bc7e <_printf_common+0x3e>
 800bcf0:	18e1      	adds	r1, r4, r3
 800bcf2:	1c5a      	adds	r2, r3, #1
 800bcf4:	2030      	movs	r0, #48	; 0x30
 800bcf6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bcfa:	4422      	add	r2, r4
 800bcfc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bd00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bd04:	3302      	adds	r3, #2
 800bd06:	e7c7      	b.n	800bc98 <_printf_common+0x58>
 800bd08:	2301      	movs	r3, #1
 800bd0a:	4622      	mov	r2, r4
 800bd0c:	4649      	mov	r1, r9
 800bd0e:	4638      	mov	r0, r7
 800bd10:	47c0      	blx	r8
 800bd12:	3001      	adds	r0, #1
 800bd14:	d0e6      	beq.n	800bce4 <_printf_common+0xa4>
 800bd16:	3601      	adds	r6, #1
 800bd18:	e7d9      	b.n	800bcce <_printf_common+0x8e>
	...

0800bd1c <_printf_i>:
 800bd1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd20:	7e0f      	ldrb	r7, [r1, #24]
 800bd22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bd24:	2f78      	cmp	r7, #120	; 0x78
 800bd26:	4691      	mov	r9, r2
 800bd28:	4680      	mov	r8, r0
 800bd2a:	460c      	mov	r4, r1
 800bd2c:	469a      	mov	sl, r3
 800bd2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bd32:	d807      	bhi.n	800bd44 <_printf_i+0x28>
 800bd34:	2f62      	cmp	r7, #98	; 0x62
 800bd36:	d80a      	bhi.n	800bd4e <_printf_i+0x32>
 800bd38:	2f00      	cmp	r7, #0
 800bd3a:	f000 80d4 	beq.w	800bee6 <_printf_i+0x1ca>
 800bd3e:	2f58      	cmp	r7, #88	; 0x58
 800bd40:	f000 80c0 	beq.w	800bec4 <_printf_i+0x1a8>
 800bd44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bd4c:	e03a      	b.n	800bdc4 <_printf_i+0xa8>
 800bd4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bd52:	2b15      	cmp	r3, #21
 800bd54:	d8f6      	bhi.n	800bd44 <_printf_i+0x28>
 800bd56:	a101      	add	r1, pc, #4	; (adr r1, 800bd5c <_printf_i+0x40>)
 800bd58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bd5c:	0800bdb5 	.word	0x0800bdb5
 800bd60:	0800bdc9 	.word	0x0800bdc9
 800bd64:	0800bd45 	.word	0x0800bd45
 800bd68:	0800bd45 	.word	0x0800bd45
 800bd6c:	0800bd45 	.word	0x0800bd45
 800bd70:	0800bd45 	.word	0x0800bd45
 800bd74:	0800bdc9 	.word	0x0800bdc9
 800bd78:	0800bd45 	.word	0x0800bd45
 800bd7c:	0800bd45 	.word	0x0800bd45
 800bd80:	0800bd45 	.word	0x0800bd45
 800bd84:	0800bd45 	.word	0x0800bd45
 800bd88:	0800becd 	.word	0x0800becd
 800bd8c:	0800bdf5 	.word	0x0800bdf5
 800bd90:	0800be87 	.word	0x0800be87
 800bd94:	0800bd45 	.word	0x0800bd45
 800bd98:	0800bd45 	.word	0x0800bd45
 800bd9c:	0800beef 	.word	0x0800beef
 800bda0:	0800bd45 	.word	0x0800bd45
 800bda4:	0800bdf5 	.word	0x0800bdf5
 800bda8:	0800bd45 	.word	0x0800bd45
 800bdac:	0800bd45 	.word	0x0800bd45
 800bdb0:	0800be8f 	.word	0x0800be8f
 800bdb4:	682b      	ldr	r3, [r5, #0]
 800bdb6:	1d1a      	adds	r2, r3, #4
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	602a      	str	r2, [r5, #0]
 800bdbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bdc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bdc4:	2301      	movs	r3, #1
 800bdc6:	e09f      	b.n	800bf08 <_printf_i+0x1ec>
 800bdc8:	6820      	ldr	r0, [r4, #0]
 800bdca:	682b      	ldr	r3, [r5, #0]
 800bdcc:	0607      	lsls	r7, r0, #24
 800bdce:	f103 0104 	add.w	r1, r3, #4
 800bdd2:	6029      	str	r1, [r5, #0]
 800bdd4:	d501      	bpl.n	800bdda <_printf_i+0xbe>
 800bdd6:	681e      	ldr	r6, [r3, #0]
 800bdd8:	e003      	b.n	800bde2 <_printf_i+0xc6>
 800bdda:	0646      	lsls	r6, r0, #25
 800bddc:	d5fb      	bpl.n	800bdd6 <_printf_i+0xba>
 800bdde:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bde2:	2e00      	cmp	r6, #0
 800bde4:	da03      	bge.n	800bdee <_printf_i+0xd2>
 800bde6:	232d      	movs	r3, #45	; 0x2d
 800bde8:	4276      	negs	r6, r6
 800bdea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdee:	485a      	ldr	r0, [pc, #360]	; (800bf58 <_printf_i+0x23c>)
 800bdf0:	230a      	movs	r3, #10
 800bdf2:	e012      	b.n	800be1a <_printf_i+0xfe>
 800bdf4:	682b      	ldr	r3, [r5, #0]
 800bdf6:	6820      	ldr	r0, [r4, #0]
 800bdf8:	1d19      	adds	r1, r3, #4
 800bdfa:	6029      	str	r1, [r5, #0]
 800bdfc:	0605      	lsls	r5, r0, #24
 800bdfe:	d501      	bpl.n	800be04 <_printf_i+0xe8>
 800be00:	681e      	ldr	r6, [r3, #0]
 800be02:	e002      	b.n	800be0a <_printf_i+0xee>
 800be04:	0641      	lsls	r1, r0, #25
 800be06:	d5fb      	bpl.n	800be00 <_printf_i+0xe4>
 800be08:	881e      	ldrh	r6, [r3, #0]
 800be0a:	4853      	ldr	r0, [pc, #332]	; (800bf58 <_printf_i+0x23c>)
 800be0c:	2f6f      	cmp	r7, #111	; 0x6f
 800be0e:	bf0c      	ite	eq
 800be10:	2308      	moveq	r3, #8
 800be12:	230a      	movne	r3, #10
 800be14:	2100      	movs	r1, #0
 800be16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800be1a:	6865      	ldr	r5, [r4, #4]
 800be1c:	60a5      	str	r5, [r4, #8]
 800be1e:	2d00      	cmp	r5, #0
 800be20:	bfa2      	ittt	ge
 800be22:	6821      	ldrge	r1, [r4, #0]
 800be24:	f021 0104 	bicge.w	r1, r1, #4
 800be28:	6021      	strge	r1, [r4, #0]
 800be2a:	b90e      	cbnz	r6, 800be30 <_printf_i+0x114>
 800be2c:	2d00      	cmp	r5, #0
 800be2e:	d04b      	beq.n	800bec8 <_printf_i+0x1ac>
 800be30:	4615      	mov	r5, r2
 800be32:	fbb6 f1f3 	udiv	r1, r6, r3
 800be36:	fb03 6711 	mls	r7, r3, r1, r6
 800be3a:	5dc7      	ldrb	r7, [r0, r7]
 800be3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800be40:	4637      	mov	r7, r6
 800be42:	42bb      	cmp	r3, r7
 800be44:	460e      	mov	r6, r1
 800be46:	d9f4      	bls.n	800be32 <_printf_i+0x116>
 800be48:	2b08      	cmp	r3, #8
 800be4a:	d10b      	bne.n	800be64 <_printf_i+0x148>
 800be4c:	6823      	ldr	r3, [r4, #0]
 800be4e:	07de      	lsls	r6, r3, #31
 800be50:	d508      	bpl.n	800be64 <_printf_i+0x148>
 800be52:	6923      	ldr	r3, [r4, #16]
 800be54:	6861      	ldr	r1, [r4, #4]
 800be56:	4299      	cmp	r1, r3
 800be58:	bfde      	ittt	le
 800be5a:	2330      	movle	r3, #48	; 0x30
 800be5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800be60:	f105 35ff 	addle.w	r5, r5, #4294967295
 800be64:	1b52      	subs	r2, r2, r5
 800be66:	6122      	str	r2, [r4, #16]
 800be68:	f8cd a000 	str.w	sl, [sp]
 800be6c:	464b      	mov	r3, r9
 800be6e:	aa03      	add	r2, sp, #12
 800be70:	4621      	mov	r1, r4
 800be72:	4640      	mov	r0, r8
 800be74:	f7ff fee4 	bl	800bc40 <_printf_common>
 800be78:	3001      	adds	r0, #1
 800be7a:	d14a      	bne.n	800bf12 <_printf_i+0x1f6>
 800be7c:	f04f 30ff 	mov.w	r0, #4294967295
 800be80:	b004      	add	sp, #16
 800be82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be86:	6823      	ldr	r3, [r4, #0]
 800be88:	f043 0320 	orr.w	r3, r3, #32
 800be8c:	6023      	str	r3, [r4, #0]
 800be8e:	4833      	ldr	r0, [pc, #204]	; (800bf5c <_printf_i+0x240>)
 800be90:	2778      	movs	r7, #120	; 0x78
 800be92:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800be96:	6823      	ldr	r3, [r4, #0]
 800be98:	6829      	ldr	r1, [r5, #0]
 800be9a:	061f      	lsls	r7, r3, #24
 800be9c:	f851 6b04 	ldr.w	r6, [r1], #4
 800bea0:	d402      	bmi.n	800bea8 <_printf_i+0x18c>
 800bea2:	065f      	lsls	r7, r3, #25
 800bea4:	bf48      	it	mi
 800bea6:	b2b6      	uxthmi	r6, r6
 800bea8:	07df      	lsls	r7, r3, #31
 800beaa:	bf48      	it	mi
 800beac:	f043 0320 	orrmi.w	r3, r3, #32
 800beb0:	6029      	str	r1, [r5, #0]
 800beb2:	bf48      	it	mi
 800beb4:	6023      	strmi	r3, [r4, #0]
 800beb6:	b91e      	cbnz	r6, 800bec0 <_printf_i+0x1a4>
 800beb8:	6823      	ldr	r3, [r4, #0]
 800beba:	f023 0320 	bic.w	r3, r3, #32
 800bebe:	6023      	str	r3, [r4, #0]
 800bec0:	2310      	movs	r3, #16
 800bec2:	e7a7      	b.n	800be14 <_printf_i+0xf8>
 800bec4:	4824      	ldr	r0, [pc, #144]	; (800bf58 <_printf_i+0x23c>)
 800bec6:	e7e4      	b.n	800be92 <_printf_i+0x176>
 800bec8:	4615      	mov	r5, r2
 800beca:	e7bd      	b.n	800be48 <_printf_i+0x12c>
 800becc:	682b      	ldr	r3, [r5, #0]
 800bece:	6826      	ldr	r6, [r4, #0]
 800bed0:	6961      	ldr	r1, [r4, #20]
 800bed2:	1d18      	adds	r0, r3, #4
 800bed4:	6028      	str	r0, [r5, #0]
 800bed6:	0635      	lsls	r5, r6, #24
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	d501      	bpl.n	800bee0 <_printf_i+0x1c4>
 800bedc:	6019      	str	r1, [r3, #0]
 800bede:	e002      	b.n	800bee6 <_printf_i+0x1ca>
 800bee0:	0670      	lsls	r0, r6, #25
 800bee2:	d5fb      	bpl.n	800bedc <_printf_i+0x1c0>
 800bee4:	8019      	strh	r1, [r3, #0]
 800bee6:	2300      	movs	r3, #0
 800bee8:	6123      	str	r3, [r4, #16]
 800beea:	4615      	mov	r5, r2
 800beec:	e7bc      	b.n	800be68 <_printf_i+0x14c>
 800beee:	682b      	ldr	r3, [r5, #0]
 800bef0:	1d1a      	adds	r2, r3, #4
 800bef2:	602a      	str	r2, [r5, #0]
 800bef4:	681d      	ldr	r5, [r3, #0]
 800bef6:	6862      	ldr	r2, [r4, #4]
 800bef8:	2100      	movs	r1, #0
 800befa:	4628      	mov	r0, r5
 800befc:	f7f4 f950 	bl	80001a0 <memchr>
 800bf00:	b108      	cbz	r0, 800bf06 <_printf_i+0x1ea>
 800bf02:	1b40      	subs	r0, r0, r5
 800bf04:	6060      	str	r0, [r4, #4]
 800bf06:	6863      	ldr	r3, [r4, #4]
 800bf08:	6123      	str	r3, [r4, #16]
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf10:	e7aa      	b.n	800be68 <_printf_i+0x14c>
 800bf12:	6923      	ldr	r3, [r4, #16]
 800bf14:	462a      	mov	r2, r5
 800bf16:	4649      	mov	r1, r9
 800bf18:	4640      	mov	r0, r8
 800bf1a:	47d0      	blx	sl
 800bf1c:	3001      	adds	r0, #1
 800bf1e:	d0ad      	beq.n	800be7c <_printf_i+0x160>
 800bf20:	6823      	ldr	r3, [r4, #0]
 800bf22:	079b      	lsls	r3, r3, #30
 800bf24:	d413      	bmi.n	800bf4e <_printf_i+0x232>
 800bf26:	68e0      	ldr	r0, [r4, #12]
 800bf28:	9b03      	ldr	r3, [sp, #12]
 800bf2a:	4298      	cmp	r0, r3
 800bf2c:	bfb8      	it	lt
 800bf2e:	4618      	movlt	r0, r3
 800bf30:	e7a6      	b.n	800be80 <_printf_i+0x164>
 800bf32:	2301      	movs	r3, #1
 800bf34:	4632      	mov	r2, r6
 800bf36:	4649      	mov	r1, r9
 800bf38:	4640      	mov	r0, r8
 800bf3a:	47d0      	blx	sl
 800bf3c:	3001      	adds	r0, #1
 800bf3e:	d09d      	beq.n	800be7c <_printf_i+0x160>
 800bf40:	3501      	adds	r5, #1
 800bf42:	68e3      	ldr	r3, [r4, #12]
 800bf44:	9903      	ldr	r1, [sp, #12]
 800bf46:	1a5b      	subs	r3, r3, r1
 800bf48:	42ab      	cmp	r3, r5
 800bf4a:	dcf2      	bgt.n	800bf32 <_printf_i+0x216>
 800bf4c:	e7eb      	b.n	800bf26 <_printf_i+0x20a>
 800bf4e:	2500      	movs	r5, #0
 800bf50:	f104 0619 	add.w	r6, r4, #25
 800bf54:	e7f5      	b.n	800bf42 <_printf_i+0x226>
 800bf56:	bf00      	nop
 800bf58:	0800eeda 	.word	0x0800eeda
 800bf5c:	0800eeeb 	.word	0x0800eeeb

0800bf60 <std>:
 800bf60:	2300      	movs	r3, #0
 800bf62:	b510      	push	{r4, lr}
 800bf64:	4604      	mov	r4, r0
 800bf66:	e9c0 3300 	strd	r3, r3, [r0]
 800bf6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf6e:	6083      	str	r3, [r0, #8]
 800bf70:	8181      	strh	r1, [r0, #12]
 800bf72:	6643      	str	r3, [r0, #100]	; 0x64
 800bf74:	81c2      	strh	r2, [r0, #14]
 800bf76:	6183      	str	r3, [r0, #24]
 800bf78:	4619      	mov	r1, r3
 800bf7a:	2208      	movs	r2, #8
 800bf7c:	305c      	adds	r0, #92	; 0x5c
 800bf7e:	f000 fa17 	bl	800c3b0 <memset>
 800bf82:	4b0d      	ldr	r3, [pc, #52]	; (800bfb8 <std+0x58>)
 800bf84:	6263      	str	r3, [r4, #36]	; 0x24
 800bf86:	4b0d      	ldr	r3, [pc, #52]	; (800bfbc <std+0x5c>)
 800bf88:	62a3      	str	r3, [r4, #40]	; 0x28
 800bf8a:	4b0d      	ldr	r3, [pc, #52]	; (800bfc0 <std+0x60>)
 800bf8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bf8e:	4b0d      	ldr	r3, [pc, #52]	; (800bfc4 <std+0x64>)
 800bf90:	6323      	str	r3, [r4, #48]	; 0x30
 800bf92:	4b0d      	ldr	r3, [pc, #52]	; (800bfc8 <std+0x68>)
 800bf94:	6224      	str	r4, [r4, #32]
 800bf96:	429c      	cmp	r4, r3
 800bf98:	d006      	beq.n	800bfa8 <std+0x48>
 800bf9a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800bf9e:	4294      	cmp	r4, r2
 800bfa0:	d002      	beq.n	800bfa8 <std+0x48>
 800bfa2:	33d0      	adds	r3, #208	; 0xd0
 800bfa4:	429c      	cmp	r4, r3
 800bfa6:	d105      	bne.n	800bfb4 <std+0x54>
 800bfa8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bfac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfb0:	f000 ba8a 	b.w	800c4c8 <__retarget_lock_init_recursive>
 800bfb4:	bd10      	pop	{r4, pc}
 800bfb6:	bf00      	nop
 800bfb8:	0800c201 	.word	0x0800c201
 800bfbc:	0800c223 	.word	0x0800c223
 800bfc0:	0800c25b 	.word	0x0800c25b
 800bfc4:	0800c27f 	.word	0x0800c27f
 800bfc8:	200017a0 	.word	0x200017a0

0800bfcc <stdio_exit_handler>:
 800bfcc:	4a02      	ldr	r2, [pc, #8]	; (800bfd8 <stdio_exit_handler+0xc>)
 800bfce:	4903      	ldr	r1, [pc, #12]	; (800bfdc <stdio_exit_handler+0x10>)
 800bfd0:	4803      	ldr	r0, [pc, #12]	; (800bfe0 <stdio_exit_handler+0x14>)
 800bfd2:	f000 b869 	b.w	800c0a8 <_fwalk_sglue>
 800bfd6:	bf00      	nop
 800bfd8:	20000058 	.word	0x20000058
 800bfdc:	0800e121 	.word	0x0800e121
 800bfe0:	20000064 	.word	0x20000064

0800bfe4 <cleanup_stdio>:
 800bfe4:	6841      	ldr	r1, [r0, #4]
 800bfe6:	4b0c      	ldr	r3, [pc, #48]	; (800c018 <cleanup_stdio+0x34>)
 800bfe8:	4299      	cmp	r1, r3
 800bfea:	b510      	push	{r4, lr}
 800bfec:	4604      	mov	r4, r0
 800bfee:	d001      	beq.n	800bff4 <cleanup_stdio+0x10>
 800bff0:	f002 f896 	bl	800e120 <_fflush_r>
 800bff4:	68a1      	ldr	r1, [r4, #8]
 800bff6:	4b09      	ldr	r3, [pc, #36]	; (800c01c <cleanup_stdio+0x38>)
 800bff8:	4299      	cmp	r1, r3
 800bffa:	d002      	beq.n	800c002 <cleanup_stdio+0x1e>
 800bffc:	4620      	mov	r0, r4
 800bffe:	f002 f88f 	bl	800e120 <_fflush_r>
 800c002:	68e1      	ldr	r1, [r4, #12]
 800c004:	4b06      	ldr	r3, [pc, #24]	; (800c020 <cleanup_stdio+0x3c>)
 800c006:	4299      	cmp	r1, r3
 800c008:	d004      	beq.n	800c014 <cleanup_stdio+0x30>
 800c00a:	4620      	mov	r0, r4
 800c00c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c010:	f002 b886 	b.w	800e120 <_fflush_r>
 800c014:	bd10      	pop	{r4, pc}
 800c016:	bf00      	nop
 800c018:	200017a0 	.word	0x200017a0
 800c01c:	20001808 	.word	0x20001808
 800c020:	20001870 	.word	0x20001870

0800c024 <global_stdio_init.part.0>:
 800c024:	b510      	push	{r4, lr}
 800c026:	4b0b      	ldr	r3, [pc, #44]	; (800c054 <global_stdio_init.part.0+0x30>)
 800c028:	4c0b      	ldr	r4, [pc, #44]	; (800c058 <global_stdio_init.part.0+0x34>)
 800c02a:	4a0c      	ldr	r2, [pc, #48]	; (800c05c <global_stdio_init.part.0+0x38>)
 800c02c:	601a      	str	r2, [r3, #0]
 800c02e:	4620      	mov	r0, r4
 800c030:	2200      	movs	r2, #0
 800c032:	2104      	movs	r1, #4
 800c034:	f7ff ff94 	bl	800bf60 <std>
 800c038:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c03c:	2201      	movs	r2, #1
 800c03e:	2109      	movs	r1, #9
 800c040:	f7ff ff8e 	bl	800bf60 <std>
 800c044:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c048:	2202      	movs	r2, #2
 800c04a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c04e:	2112      	movs	r1, #18
 800c050:	f7ff bf86 	b.w	800bf60 <std>
 800c054:	200018d8 	.word	0x200018d8
 800c058:	200017a0 	.word	0x200017a0
 800c05c:	0800bfcd 	.word	0x0800bfcd

0800c060 <__sfp_lock_acquire>:
 800c060:	4801      	ldr	r0, [pc, #4]	; (800c068 <__sfp_lock_acquire+0x8>)
 800c062:	f000 ba32 	b.w	800c4ca <__retarget_lock_acquire_recursive>
 800c066:	bf00      	nop
 800c068:	200018e1 	.word	0x200018e1

0800c06c <__sfp_lock_release>:
 800c06c:	4801      	ldr	r0, [pc, #4]	; (800c074 <__sfp_lock_release+0x8>)
 800c06e:	f000 ba2d 	b.w	800c4cc <__retarget_lock_release_recursive>
 800c072:	bf00      	nop
 800c074:	200018e1 	.word	0x200018e1

0800c078 <__sinit>:
 800c078:	b510      	push	{r4, lr}
 800c07a:	4604      	mov	r4, r0
 800c07c:	f7ff fff0 	bl	800c060 <__sfp_lock_acquire>
 800c080:	6a23      	ldr	r3, [r4, #32]
 800c082:	b11b      	cbz	r3, 800c08c <__sinit+0x14>
 800c084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c088:	f7ff bff0 	b.w	800c06c <__sfp_lock_release>
 800c08c:	4b04      	ldr	r3, [pc, #16]	; (800c0a0 <__sinit+0x28>)
 800c08e:	6223      	str	r3, [r4, #32]
 800c090:	4b04      	ldr	r3, [pc, #16]	; (800c0a4 <__sinit+0x2c>)
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d1f5      	bne.n	800c084 <__sinit+0xc>
 800c098:	f7ff ffc4 	bl	800c024 <global_stdio_init.part.0>
 800c09c:	e7f2      	b.n	800c084 <__sinit+0xc>
 800c09e:	bf00      	nop
 800c0a0:	0800bfe5 	.word	0x0800bfe5
 800c0a4:	200018d8 	.word	0x200018d8

0800c0a8 <_fwalk_sglue>:
 800c0a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0ac:	4607      	mov	r7, r0
 800c0ae:	4688      	mov	r8, r1
 800c0b0:	4614      	mov	r4, r2
 800c0b2:	2600      	movs	r6, #0
 800c0b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c0b8:	f1b9 0901 	subs.w	r9, r9, #1
 800c0bc:	d505      	bpl.n	800c0ca <_fwalk_sglue+0x22>
 800c0be:	6824      	ldr	r4, [r4, #0]
 800c0c0:	2c00      	cmp	r4, #0
 800c0c2:	d1f7      	bne.n	800c0b4 <_fwalk_sglue+0xc>
 800c0c4:	4630      	mov	r0, r6
 800c0c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0ca:	89ab      	ldrh	r3, [r5, #12]
 800c0cc:	2b01      	cmp	r3, #1
 800c0ce:	d907      	bls.n	800c0e0 <_fwalk_sglue+0x38>
 800c0d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c0d4:	3301      	adds	r3, #1
 800c0d6:	d003      	beq.n	800c0e0 <_fwalk_sglue+0x38>
 800c0d8:	4629      	mov	r1, r5
 800c0da:	4638      	mov	r0, r7
 800c0dc:	47c0      	blx	r8
 800c0de:	4306      	orrs	r6, r0
 800c0e0:	3568      	adds	r5, #104	; 0x68
 800c0e2:	e7e9      	b.n	800c0b8 <_fwalk_sglue+0x10>

0800c0e4 <iprintf>:
 800c0e4:	b40f      	push	{r0, r1, r2, r3}
 800c0e6:	b507      	push	{r0, r1, r2, lr}
 800c0e8:	4906      	ldr	r1, [pc, #24]	; (800c104 <iprintf+0x20>)
 800c0ea:	ab04      	add	r3, sp, #16
 800c0ec:	6808      	ldr	r0, [r1, #0]
 800c0ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0f2:	6881      	ldr	r1, [r0, #8]
 800c0f4:	9301      	str	r3, [sp, #4]
 800c0f6:	f001 fe73 	bl	800dde0 <_vfiprintf_r>
 800c0fa:	b003      	add	sp, #12
 800c0fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c100:	b004      	add	sp, #16
 800c102:	4770      	bx	lr
 800c104:	200000b0 	.word	0x200000b0

0800c108 <_puts_r>:
 800c108:	6a03      	ldr	r3, [r0, #32]
 800c10a:	b570      	push	{r4, r5, r6, lr}
 800c10c:	6884      	ldr	r4, [r0, #8]
 800c10e:	4605      	mov	r5, r0
 800c110:	460e      	mov	r6, r1
 800c112:	b90b      	cbnz	r3, 800c118 <_puts_r+0x10>
 800c114:	f7ff ffb0 	bl	800c078 <__sinit>
 800c118:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c11a:	07db      	lsls	r3, r3, #31
 800c11c:	d405      	bmi.n	800c12a <_puts_r+0x22>
 800c11e:	89a3      	ldrh	r3, [r4, #12]
 800c120:	0598      	lsls	r0, r3, #22
 800c122:	d402      	bmi.n	800c12a <_puts_r+0x22>
 800c124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c126:	f000 f9d0 	bl	800c4ca <__retarget_lock_acquire_recursive>
 800c12a:	89a3      	ldrh	r3, [r4, #12]
 800c12c:	0719      	lsls	r1, r3, #28
 800c12e:	d513      	bpl.n	800c158 <_puts_r+0x50>
 800c130:	6923      	ldr	r3, [r4, #16]
 800c132:	b18b      	cbz	r3, 800c158 <_puts_r+0x50>
 800c134:	3e01      	subs	r6, #1
 800c136:	68a3      	ldr	r3, [r4, #8]
 800c138:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c13c:	3b01      	subs	r3, #1
 800c13e:	60a3      	str	r3, [r4, #8]
 800c140:	b9e9      	cbnz	r1, 800c17e <_puts_r+0x76>
 800c142:	2b00      	cmp	r3, #0
 800c144:	da2e      	bge.n	800c1a4 <_puts_r+0x9c>
 800c146:	4622      	mov	r2, r4
 800c148:	210a      	movs	r1, #10
 800c14a:	4628      	mov	r0, r5
 800c14c:	f000 f89b 	bl	800c286 <__swbuf_r>
 800c150:	3001      	adds	r0, #1
 800c152:	d007      	beq.n	800c164 <_puts_r+0x5c>
 800c154:	250a      	movs	r5, #10
 800c156:	e007      	b.n	800c168 <_puts_r+0x60>
 800c158:	4621      	mov	r1, r4
 800c15a:	4628      	mov	r0, r5
 800c15c:	f000 f8d0 	bl	800c300 <__swsetup_r>
 800c160:	2800      	cmp	r0, #0
 800c162:	d0e7      	beq.n	800c134 <_puts_r+0x2c>
 800c164:	f04f 35ff 	mov.w	r5, #4294967295
 800c168:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c16a:	07da      	lsls	r2, r3, #31
 800c16c:	d405      	bmi.n	800c17a <_puts_r+0x72>
 800c16e:	89a3      	ldrh	r3, [r4, #12]
 800c170:	059b      	lsls	r3, r3, #22
 800c172:	d402      	bmi.n	800c17a <_puts_r+0x72>
 800c174:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c176:	f000 f9a9 	bl	800c4cc <__retarget_lock_release_recursive>
 800c17a:	4628      	mov	r0, r5
 800c17c:	bd70      	pop	{r4, r5, r6, pc}
 800c17e:	2b00      	cmp	r3, #0
 800c180:	da04      	bge.n	800c18c <_puts_r+0x84>
 800c182:	69a2      	ldr	r2, [r4, #24]
 800c184:	429a      	cmp	r2, r3
 800c186:	dc06      	bgt.n	800c196 <_puts_r+0x8e>
 800c188:	290a      	cmp	r1, #10
 800c18a:	d004      	beq.n	800c196 <_puts_r+0x8e>
 800c18c:	6823      	ldr	r3, [r4, #0]
 800c18e:	1c5a      	adds	r2, r3, #1
 800c190:	6022      	str	r2, [r4, #0]
 800c192:	7019      	strb	r1, [r3, #0]
 800c194:	e7cf      	b.n	800c136 <_puts_r+0x2e>
 800c196:	4622      	mov	r2, r4
 800c198:	4628      	mov	r0, r5
 800c19a:	f000 f874 	bl	800c286 <__swbuf_r>
 800c19e:	3001      	adds	r0, #1
 800c1a0:	d1c9      	bne.n	800c136 <_puts_r+0x2e>
 800c1a2:	e7df      	b.n	800c164 <_puts_r+0x5c>
 800c1a4:	6823      	ldr	r3, [r4, #0]
 800c1a6:	250a      	movs	r5, #10
 800c1a8:	1c5a      	adds	r2, r3, #1
 800c1aa:	6022      	str	r2, [r4, #0]
 800c1ac:	701d      	strb	r5, [r3, #0]
 800c1ae:	e7db      	b.n	800c168 <_puts_r+0x60>

0800c1b0 <puts>:
 800c1b0:	4b02      	ldr	r3, [pc, #8]	; (800c1bc <puts+0xc>)
 800c1b2:	4601      	mov	r1, r0
 800c1b4:	6818      	ldr	r0, [r3, #0]
 800c1b6:	f7ff bfa7 	b.w	800c108 <_puts_r>
 800c1ba:	bf00      	nop
 800c1bc:	200000b0 	.word	0x200000b0

0800c1c0 <siprintf>:
 800c1c0:	b40e      	push	{r1, r2, r3}
 800c1c2:	b500      	push	{lr}
 800c1c4:	b09c      	sub	sp, #112	; 0x70
 800c1c6:	ab1d      	add	r3, sp, #116	; 0x74
 800c1c8:	9002      	str	r0, [sp, #8]
 800c1ca:	9006      	str	r0, [sp, #24]
 800c1cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c1d0:	4809      	ldr	r0, [pc, #36]	; (800c1f8 <siprintf+0x38>)
 800c1d2:	9107      	str	r1, [sp, #28]
 800c1d4:	9104      	str	r1, [sp, #16]
 800c1d6:	4909      	ldr	r1, [pc, #36]	; (800c1fc <siprintf+0x3c>)
 800c1d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1dc:	9105      	str	r1, [sp, #20]
 800c1de:	6800      	ldr	r0, [r0, #0]
 800c1e0:	9301      	str	r3, [sp, #4]
 800c1e2:	a902      	add	r1, sp, #8
 800c1e4:	f001 fcd4 	bl	800db90 <_svfiprintf_r>
 800c1e8:	9b02      	ldr	r3, [sp, #8]
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	701a      	strb	r2, [r3, #0]
 800c1ee:	b01c      	add	sp, #112	; 0x70
 800c1f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1f4:	b003      	add	sp, #12
 800c1f6:	4770      	bx	lr
 800c1f8:	200000b0 	.word	0x200000b0
 800c1fc:	ffff0208 	.word	0xffff0208

0800c200 <__sread>:
 800c200:	b510      	push	{r4, lr}
 800c202:	460c      	mov	r4, r1
 800c204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c208:	f000 f910 	bl	800c42c <_read_r>
 800c20c:	2800      	cmp	r0, #0
 800c20e:	bfab      	itete	ge
 800c210:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c212:	89a3      	ldrhlt	r3, [r4, #12]
 800c214:	181b      	addge	r3, r3, r0
 800c216:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c21a:	bfac      	ite	ge
 800c21c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c21e:	81a3      	strhlt	r3, [r4, #12]
 800c220:	bd10      	pop	{r4, pc}

0800c222 <__swrite>:
 800c222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c226:	461f      	mov	r7, r3
 800c228:	898b      	ldrh	r3, [r1, #12]
 800c22a:	05db      	lsls	r3, r3, #23
 800c22c:	4605      	mov	r5, r0
 800c22e:	460c      	mov	r4, r1
 800c230:	4616      	mov	r6, r2
 800c232:	d505      	bpl.n	800c240 <__swrite+0x1e>
 800c234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c238:	2302      	movs	r3, #2
 800c23a:	2200      	movs	r2, #0
 800c23c:	f000 f8e4 	bl	800c408 <_lseek_r>
 800c240:	89a3      	ldrh	r3, [r4, #12]
 800c242:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c246:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c24a:	81a3      	strh	r3, [r4, #12]
 800c24c:	4632      	mov	r2, r6
 800c24e:	463b      	mov	r3, r7
 800c250:	4628      	mov	r0, r5
 800c252:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c256:	f000 b8fb 	b.w	800c450 <_write_r>

0800c25a <__sseek>:
 800c25a:	b510      	push	{r4, lr}
 800c25c:	460c      	mov	r4, r1
 800c25e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c262:	f000 f8d1 	bl	800c408 <_lseek_r>
 800c266:	1c43      	adds	r3, r0, #1
 800c268:	89a3      	ldrh	r3, [r4, #12]
 800c26a:	bf15      	itete	ne
 800c26c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c26e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c272:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c276:	81a3      	strheq	r3, [r4, #12]
 800c278:	bf18      	it	ne
 800c27a:	81a3      	strhne	r3, [r4, #12]
 800c27c:	bd10      	pop	{r4, pc}

0800c27e <__sclose>:
 800c27e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c282:	f000 b8b1 	b.w	800c3e8 <_close_r>

0800c286 <__swbuf_r>:
 800c286:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c288:	460e      	mov	r6, r1
 800c28a:	4614      	mov	r4, r2
 800c28c:	4605      	mov	r5, r0
 800c28e:	b118      	cbz	r0, 800c298 <__swbuf_r+0x12>
 800c290:	6a03      	ldr	r3, [r0, #32]
 800c292:	b90b      	cbnz	r3, 800c298 <__swbuf_r+0x12>
 800c294:	f7ff fef0 	bl	800c078 <__sinit>
 800c298:	69a3      	ldr	r3, [r4, #24]
 800c29a:	60a3      	str	r3, [r4, #8]
 800c29c:	89a3      	ldrh	r3, [r4, #12]
 800c29e:	071a      	lsls	r2, r3, #28
 800c2a0:	d525      	bpl.n	800c2ee <__swbuf_r+0x68>
 800c2a2:	6923      	ldr	r3, [r4, #16]
 800c2a4:	b31b      	cbz	r3, 800c2ee <__swbuf_r+0x68>
 800c2a6:	6823      	ldr	r3, [r4, #0]
 800c2a8:	6922      	ldr	r2, [r4, #16]
 800c2aa:	1a98      	subs	r0, r3, r2
 800c2ac:	6963      	ldr	r3, [r4, #20]
 800c2ae:	b2f6      	uxtb	r6, r6
 800c2b0:	4283      	cmp	r3, r0
 800c2b2:	4637      	mov	r7, r6
 800c2b4:	dc04      	bgt.n	800c2c0 <__swbuf_r+0x3a>
 800c2b6:	4621      	mov	r1, r4
 800c2b8:	4628      	mov	r0, r5
 800c2ba:	f001 ff31 	bl	800e120 <_fflush_r>
 800c2be:	b9e0      	cbnz	r0, 800c2fa <__swbuf_r+0x74>
 800c2c0:	68a3      	ldr	r3, [r4, #8]
 800c2c2:	3b01      	subs	r3, #1
 800c2c4:	60a3      	str	r3, [r4, #8]
 800c2c6:	6823      	ldr	r3, [r4, #0]
 800c2c8:	1c5a      	adds	r2, r3, #1
 800c2ca:	6022      	str	r2, [r4, #0]
 800c2cc:	701e      	strb	r6, [r3, #0]
 800c2ce:	6962      	ldr	r2, [r4, #20]
 800c2d0:	1c43      	adds	r3, r0, #1
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d004      	beq.n	800c2e0 <__swbuf_r+0x5a>
 800c2d6:	89a3      	ldrh	r3, [r4, #12]
 800c2d8:	07db      	lsls	r3, r3, #31
 800c2da:	d506      	bpl.n	800c2ea <__swbuf_r+0x64>
 800c2dc:	2e0a      	cmp	r6, #10
 800c2de:	d104      	bne.n	800c2ea <__swbuf_r+0x64>
 800c2e0:	4621      	mov	r1, r4
 800c2e2:	4628      	mov	r0, r5
 800c2e4:	f001 ff1c 	bl	800e120 <_fflush_r>
 800c2e8:	b938      	cbnz	r0, 800c2fa <__swbuf_r+0x74>
 800c2ea:	4638      	mov	r0, r7
 800c2ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2ee:	4621      	mov	r1, r4
 800c2f0:	4628      	mov	r0, r5
 800c2f2:	f000 f805 	bl	800c300 <__swsetup_r>
 800c2f6:	2800      	cmp	r0, #0
 800c2f8:	d0d5      	beq.n	800c2a6 <__swbuf_r+0x20>
 800c2fa:	f04f 37ff 	mov.w	r7, #4294967295
 800c2fe:	e7f4      	b.n	800c2ea <__swbuf_r+0x64>

0800c300 <__swsetup_r>:
 800c300:	b538      	push	{r3, r4, r5, lr}
 800c302:	4b2a      	ldr	r3, [pc, #168]	; (800c3ac <__swsetup_r+0xac>)
 800c304:	4605      	mov	r5, r0
 800c306:	6818      	ldr	r0, [r3, #0]
 800c308:	460c      	mov	r4, r1
 800c30a:	b118      	cbz	r0, 800c314 <__swsetup_r+0x14>
 800c30c:	6a03      	ldr	r3, [r0, #32]
 800c30e:	b90b      	cbnz	r3, 800c314 <__swsetup_r+0x14>
 800c310:	f7ff feb2 	bl	800c078 <__sinit>
 800c314:	89a3      	ldrh	r3, [r4, #12]
 800c316:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c31a:	0718      	lsls	r0, r3, #28
 800c31c:	d422      	bmi.n	800c364 <__swsetup_r+0x64>
 800c31e:	06d9      	lsls	r1, r3, #27
 800c320:	d407      	bmi.n	800c332 <__swsetup_r+0x32>
 800c322:	2309      	movs	r3, #9
 800c324:	602b      	str	r3, [r5, #0]
 800c326:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c32a:	81a3      	strh	r3, [r4, #12]
 800c32c:	f04f 30ff 	mov.w	r0, #4294967295
 800c330:	e034      	b.n	800c39c <__swsetup_r+0x9c>
 800c332:	0758      	lsls	r0, r3, #29
 800c334:	d512      	bpl.n	800c35c <__swsetup_r+0x5c>
 800c336:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c338:	b141      	cbz	r1, 800c34c <__swsetup_r+0x4c>
 800c33a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c33e:	4299      	cmp	r1, r3
 800c340:	d002      	beq.n	800c348 <__swsetup_r+0x48>
 800c342:	4628      	mov	r0, r5
 800c344:	f000 ff4e 	bl	800d1e4 <_free_r>
 800c348:	2300      	movs	r3, #0
 800c34a:	6363      	str	r3, [r4, #52]	; 0x34
 800c34c:	89a3      	ldrh	r3, [r4, #12]
 800c34e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c352:	81a3      	strh	r3, [r4, #12]
 800c354:	2300      	movs	r3, #0
 800c356:	6063      	str	r3, [r4, #4]
 800c358:	6923      	ldr	r3, [r4, #16]
 800c35a:	6023      	str	r3, [r4, #0]
 800c35c:	89a3      	ldrh	r3, [r4, #12]
 800c35e:	f043 0308 	orr.w	r3, r3, #8
 800c362:	81a3      	strh	r3, [r4, #12]
 800c364:	6923      	ldr	r3, [r4, #16]
 800c366:	b94b      	cbnz	r3, 800c37c <__swsetup_r+0x7c>
 800c368:	89a3      	ldrh	r3, [r4, #12]
 800c36a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c36e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c372:	d003      	beq.n	800c37c <__swsetup_r+0x7c>
 800c374:	4621      	mov	r1, r4
 800c376:	4628      	mov	r0, r5
 800c378:	f001 ff20 	bl	800e1bc <__smakebuf_r>
 800c37c:	89a0      	ldrh	r0, [r4, #12]
 800c37e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c382:	f010 0301 	ands.w	r3, r0, #1
 800c386:	d00a      	beq.n	800c39e <__swsetup_r+0x9e>
 800c388:	2300      	movs	r3, #0
 800c38a:	60a3      	str	r3, [r4, #8]
 800c38c:	6963      	ldr	r3, [r4, #20]
 800c38e:	425b      	negs	r3, r3
 800c390:	61a3      	str	r3, [r4, #24]
 800c392:	6923      	ldr	r3, [r4, #16]
 800c394:	b943      	cbnz	r3, 800c3a8 <__swsetup_r+0xa8>
 800c396:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c39a:	d1c4      	bne.n	800c326 <__swsetup_r+0x26>
 800c39c:	bd38      	pop	{r3, r4, r5, pc}
 800c39e:	0781      	lsls	r1, r0, #30
 800c3a0:	bf58      	it	pl
 800c3a2:	6963      	ldrpl	r3, [r4, #20]
 800c3a4:	60a3      	str	r3, [r4, #8]
 800c3a6:	e7f4      	b.n	800c392 <__swsetup_r+0x92>
 800c3a8:	2000      	movs	r0, #0
 800c3aa:	e7f7      	b.n	800c39c <__swsetup_r+0x9c>
 800c3ac:	200000b0 	.word	0x200000b0

0800c3b0 <memset>:
 800c3b0:	4402      	add	r2, r0
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	4293      	cmp	r3, r2
 800c3b6:	d100      	bne.n	800c3ba <memset+0xa>
 800c3b8:	4770      	bx	lr
 800c3ba:	f803 1b01 	strb.w	r1, [r3], #1
 800c3be:	e7f9      	b.n	800c3b4 <memset+0x4>

0800c3c0 <strcat>:
 800c3c0:	b510      	push	{r4, lr}
 800c3c2:	4602      	mov	r2, r0
 800c3c4:	7814      	ldrb	r4, [r2, #0]
 800c3c6:	4613      	mov	r3, r2
 800c3c8:	3201      	adds	r2, #1
 800c3ca:	2c00      	cmp	r4, #0
 800c3cc:	d1fa      	bne.n	800c3c4 <strcat+0x4>
 800c3ce:	3b01      	subs	r3, #1
 800c3d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3d4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c3d8:	2a00      	cmp	r2, #0
 800c3da:	d1f9      	bne.n	800c3d0 <strcat+0x10>
 800c3dc:	bd10      	pop	{r4, pc}
	...

0800c3e0 <_localeconv_r>:
 800c3e0:	4800      	ldr	r0, [pc, #0]	; (800c3e4 <_localeconv_r+0x4>)
 800c3e2:	4770      	bx	lr
 800c3e4:	200001a4 	.word	0x200001a4

0800c3e8 <_close_r>:
 800c3e8:	b538      	push	{r3, r4, r5, lr}
 800c3ea:	4d06      	ldr	r5, [pc, #24]	; (800c404 <_close_r+0x1c>)
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	4604      	mov	r4, r0
 800c3f0:	4608      	mov	r0, r1
 800c3f2:	602b      	str	r3, [r5, #0]
 800c3f4:	f7f6 fc9a 	bl	8002d2c <_close>
 800c3f8:	1c43      	adds	r3, r0, #1
 800c3fa:	d102      	bne.n	800c402 <_close_r+0x1a>
 800c3fc:	682b      	ldr	r3, [r5, #0]
 800c3fe:	b103      	cbz	r3, 800c402 <_close_r+0x1a>
 800c400:	6023      	str	r3, [r4, #0]
 800c402:	bd38      	pop	{r3, r4, r5, pc}
 800c404:	200018dc 	.word	0x200018dc

0800c408 <_lseek_r>:
 800c408:	b538      	push	{r3, r4, r5, lr}
 800c40a:	4d07      	ldr	r5, [pc, #28]	; (800c428 <_lseek_r+0x20>)
 800c40c:	4604      	mov	r4, r0
 800c40e:	4608      	mov	r0, r1
 800c410:	4611      	mov	r1, r2
 800c412:	2200      	movs	r2, #0
 800c414:	602a      	str	r2, [r5, #0]
 800c416:	461a      	mov	r2, r3
 800c418:	f7f6 fcaf 	bl	8002d7a <_lseek>
 800c41c:	1c43      	adds	r3, r0, #1
 800c41e:	d102      	bne.n	800c426 <_lseek_r+0x1e>
 800c420:	682b      	ldr	r3, [r5, #0]
 800c422:	b103      	cbz	r3, 800c426 <_lseek_r+0x1e>
 800c424:	6023      	str	r3, [r4, #0]
 800c426:	bd38      	pop	{r3, r4, r5, pc}
 800c428:	200018dc 	.word	0x200018dc

0800c42c <_read_r>:
 800c42c:	b538      	push	{r3, r4, r5, lr}
 800c42e:	4d07      	ldr	r5, [pc, #28]	; (800c44c <_read_r+0x20>)
 800c430:	4604      	mov	r4, r0
 800c432:	4608      	mov	r0, r1
 800c434:	4611      	mov	r1, r2
 800c436:	2200      	movs	r2, #0
 800c438:	602a      	str	r2, [r5, #0]
 800c43a:	461a      	mov	r2, r3
 800c43c:	f7f6 fc59 	bl	8002cf2 <_read>
 800c440:	1c43      	adds	r3, r0, #1
 800c442:	d102      	bne.n	800c44a <_read_r+0x1e>
 800c444:	682b      	ldr	r3, [r5, #0]
 800c446:	b103      	cbz	r3, 800c44a <_read_r+0x1e>
 800c448:	6023      	str	r3, [r4, #0]
 800c44a:	bd38      	pop	{r3, r4, r5, pc}
 800c44c:	200018dc 	.word	0x200018dc

0800c450 <_write_r>:
 800c450:	b538      	push	{r3, r4, r5, lr}
 800c452:	4d07      	ldr	r5, [pc, #28]	; (800c470 <_write_r+0x20>)
 800c454:	4604      	mov	r4, r0
 800c456:	4608      	mov	r0, r1
 800c458:	4611      	mov	r1, r2
 800c45a:	2200      	movs	r2, #0
 800c45c:	602a      	str	r2, [r5, #0]
 800c45e:	461a      	mov	r2, r3
 800c460:	f7fd f9f4 	bl	800984c <_write>
 800c464:	1c43      	adds	r3, r0, #1
 800c466:	d102      	bne.n	800c46e <_write_r+0x1e>
 800c468:	682b      	ldr	r3, [r5, #0]
 800c46a:	b103      	cbz	r3, 800c46e <_write_r+0x1e>
 800c46c:	6023      	str	r3, [r4, #0]
 800c46e:	bd38      	pop	{r3, r4, r5, pc}
 800c470:	200018dc 	.word	0x200018dc

0800c474 <__errno>:
 800c474:	4b01      	ldr	r3, [pc, #4]	; (800c47c <__errno+0x8>)
 800c476:	6818      	ldr	r0, [r3, #0]
 800c478:	4770      	bx	lr
 800c47a:	bf00      	nop
 800c47c:	200000b0 	.word	0x200000b0

0800c480 <__libc_init_array>:
 800c480:	b570      	push	{r4, r5, r6, lr}
 800c482:	4d0d      	ldr	r5, [pc, #52]	; (800c4b8 <__libc_init_array+0x38>)
 800c484:	4c0d      	ldr	r4, [pc, #52]	; (800c4bc <__libc_init_array+0x3c>)
 800c486:	1b64      	subs	r4, r4, r5
 800c488:	10a4      	asrs	r4, r4, #2
 800c48a:	2600      	movs	r6, #0
 800c48c:	42a6      	cmp	r6, r4
 800c48e:	d109      	bne.n	800c4a4 <__libc_init_array+0x24>
 800c490:	4d0b      	ldr	r5, [pc, #44]	; (800c4c0 <__libc_init_array+0x40>)
 800c492:	4c0c      	ldr	r4, [pc, #48]	; (800c4c4 <__libc_init_array+0x44>)
 800c494:	f002 f802 	bl	800e49c <_init>
 800c498:	1b64      	subs	r4, r4, r5
 800c49a:	10a4      	asrs	r4, r4, #2
 800c49c:	2600      	movs	r6, #0
 800c49e:	42a6      	cmp	r6, r4
 800c4a0:	d105      	bne.n	800c4ae <__libc_init_array+0x2e>
 800c4a2:	bd70      	pop	{r4, r5, r6, pc}
 800c4a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4a8:	4798      	blx	r3
 800c4aa:	3601      	adds	r6, #1
 800c4ac:	e7ee      	b.n	800c48c <__libc_init_array+0xc>
 800c4ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4b2:	4798      	blx	r3
 800c4b4:	3601      	adds	r6, #1
 800c4b6:	e7f2      	b.n	800c49e <__libc_init_array+0x1e>
 800c4b8:	0800f244 	.word	0x0800f244
 800c4bc:	0800f244 	.word	0x0800f244
 800c4c0:	0800f244 	.word	0x0800f244
 800c4c4:	0800f248 	.word	0x0800f248

0800c4c8 <__retarget_lock_init_recursive>:
 800c4c8:	4770      	bx	lr

0800c4ca <__retarget_lock_acquire_recursive>:
 800c4ca:	4770      	bx	lr

0800c4cc <__retarget_lock_release_recursive>:
 800c4cc:	4770      	bx	lr

0800c4ce <memcpy>:
 800c4ce:	440a      	add	r2, r1
 800c4d0:	4291      	cmp	r1, r2
 800c4d2:	f100 33ff 	add.w	r3, r0, #4294967295
 800c4d6:	d100      	bne.n	800c4da <memcpy+0xc>
 800c4d8:	4770      	bx	lr
 800c4da:	b510      	push	{r4, lr}
 800c4dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c4e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c4e4:	4291      	cmp	r1, r2
 800c4e6:	d1f9      	bne.n	800c4dc <memcpy+0xe>
 800c4e8:	bd10      	pop	{r4, pc}

0800c4ea <quorem>:
 800c4ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ee:	6903      	ldr	r3, [r0, #16]
 800c4f0:	690c      	ldr	r4, [r1, #16]
 800c4f2:	42a3      	cmp	r3, r4
 800c4f4:	4607      	mov	r7, r0
 800c4f6:	db7e      	blt.n	800c5f6 <quorem+0x10c>
 800c4f8:	3c01      	subs	r4, #1
 800c4fa:	f101 0814 	add.w	r8, r1, #20
 800c4fe:	f100 0514 	add.w	r5, r0, #20
 800c502:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c506:	9301      	str	r3, [sp, #4]
 800c508:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c50c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c510:	3301      	adds	r3, #1
 800c512:	429a      	cmp	r2, r3
 800c514:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c518:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c51c:	fbb2 f6f3 	udiv	r6, r2, r3
 800c520:	d331      	bcc.n	800c586 <quorem+0x9c>
 800c522:	f04f 0e00 	mov.w	lr, #0
 800c526:	4640      	mov	r0, r8
 800c528:	46ac      	mov	ip, r5
 800c52a:	46f2      	mov	sl, lr
 800c52c:	f850 2b04 	ldr.w	r2, [r0], #4
 800c530:	b293      	uxth	r3, r2
 800c532:	fb06 e303 	mla	r3, r6, r3, lr
 800c536:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c53a:	0c1a      	lsrs	r2, r3, #16
 800c53c:	b29b      	uxth	r3, r3
 800c53e:	ebaa 0303 	sub.w	r3, sl, r3
 800c542:	f8dc a000 	ldr.w	sl, [ip]
 800c546:	fa13 f38a 	uxtah	r3, r3, sl
 800c54a:	fb06 220e 	mla	r2, r6, lr, r2
 800c54e:	9300      	str	r3, [sp, #0]
 800c550:	9b00      	ldr	r3, [sp, #0]
 800c552:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c556:	b292      	uxth	r2, r2
 800c558:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c55c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c560:	f8bd 3000 	ldrh.w	r3, [sp]
 800c564:	4581      	cmp	r9, r0
 800c566:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c56a:	f84c 3b04 	str.w	r3, [ip], #4
 800c56e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c572:	d2db      	bcs.n	800c52c <quorem+0x42>
 800c574:	f855 300b 	ldr.w	r3, [r5, fp]
 800c578:	b92b      	cbnz	r3, 800c586 <quorem+0x9c>
 800c57a:	9b01      	ldr	r3, [sp, #4]
 800c57c:	3b04      	subs	r3, #4
 800c57e:	429d      	cmp	r5, r3
 800c580:	461a      	mov	r2, r3
 800c582:	d32c      	bcc.n	800c5de <quorem+0xf4>
 800c584:	613c      	str	r4, [r7, #16]
 800c586:	4638      	mov	r0, r7
 800c588:	f001 f9a8 	bl	800d8dc <__mcmp>
 800c58c:	2800      	cmp	r0, #0
 800c58e:	db22      	blt.n	800c5d6 <quorem+0xec>
 800c590:	3601      	adds	r6, #1
 800c592:	4629      	mov	r1, r5
 800c594:	2000      	movs	r0, #0
 800c596:	f858 2b04 	ldr.w	r2, [r8], #4
 800c59a:	f8d1 c000 	ldr.w	ip, [r1]
 800c59e:	b293      	uxth	r3, r2
 800c5a0:	1ac3      	subs	r3, r0, r3
 800c5a2:	0c12      	lsrs	r2, r2, #16
 800c5a4:	fa13 f38c 	uxtah	r3, r3, ip
 800c5a8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c5ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c5b0:	b29b      	uxth	r3, r3
 800c5b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c5b6:	45c1      	cmp	r9, r8
 800c5b8:	f841 3b04 	str.w	r3, [r1], #4
 800c5bc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c5c0:	d2e9      	bcs.n	800c596 <quorem+0xac>
 800c5c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c5c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c5ca:	b922      	cbnz	r2, 800c5d6 <quorem+0xec>
 800c5cc:	3b04      	subs	r3, #4
 800c5ce:	429d      	cmp	r5, r3
 800c5d0:	461a      	mov	r2, r3
 800c5d2:	d30a      	bcc.n	800c5ea <quorem+0x100>
 800c5d4:	613c      	str	r4, [r7, #16]
 800c5d6:	4630      	mov	r0, r6
 800c5d8:	b003      	add	sp, #12
 800c5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5de:	6812      	ldr	r2, [r2, #0]
 800c5e0:	3b04      	subs	r3, #4
 800c5e2:	2a00      	cmp	r2, #0
 800c5e4:	d1ce      	bne.n	800c584 <quorem+0x9a>
 800c5e6:	3c01      	subs	r4, #1
 800c5e8:	e7c9      	b.n	800c57e <quorem+0x94>
 800c5ea:	6812      	ldr	r2, [r2, #0]
 800c5ec:	3b04      	subs	r3, #4
 800c5ee:	2a00      	cmp	r2, #0
 800c5f0:	d1f0      	bne.n	800c5d4 <quorem+0xea>
 800c5f2:	3c01      	subs	r4, #1
 800c5f4:	e7eb      	b.n	800c5ce <quorem+0xe4>
 800c5f6:	2000      	movs	r0, #0
 800c5f8:	e7ee      	b.n	800c5d8 <quorem+0xee>
 800c5fa:	0000      	movs	r0, r0
 800c5fc:	0000      	movs	r0, r0
	...

0800c600 <_dtoa_r>:
 800c600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c604:	ed2d 8b04 	vpush	{d8-d9}
 800c608:	69c5      	ldr	r5, [r0, #28]
 800c60a:	b093      	sub	sp, #76	; 0x4c
 800c60c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c610:	ec57 6b10 	vmov	r6, r7, d0
 800c614:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c618:	9107      	str	r1, [sp, #28]
 800c61a:	4604      	mov	r4, r0
 800c61c:	920a      	str	r2, [sp, #40]	; 0x28
 800c61e:	930d      	str	r3, [sp, #52]	; 0x34
 800c620:	b975      	cbnz	r5, 800c640 <_dtoa_r+0x40>
 800c622:	2010      	movs	r0, #16
 800c624:	f000 fe2a 	bl	800d27c <malloc>
 800c628:	4602      	mov	r2, r0
 800c62a:	61e0      	str	r0, [r4, #28]
 800c62c:	b920      	cbnz	r0, 800c638 <_dtoa_r+0x38>
 800c62e:	4bae      	ldr	r3, [pc, #696]	; (800c8e8 <_dtoa_r+0x2e8>)
 800c630:	21ef      	movs	r1, #239	; 0xef
 800c632:	48ae      	ldr	r0, [pc, #696]	; (800c8ec <_dtoa_r+0x2ec>)
 800c634:	f001 fe4a 	bl	800e2cc <__assert_func>
 800c638:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c63c:	6005      	str	r5, [r0, #0]
 800c63e:	60c5      	str	r5, [r0, #12]
 800c640:	69e3      	ldr	r3, [r4, #28]
 800c642:	6819      	ldr	r1, [r3, #0]
 800c644:	b151      	cbz	r1, 800c65c <_dtoa_r+0x5c>
 800c646:	685a      	ldr	r2, [r3, #4]
 800c648:	604a      	str	r2, [r1, #4]
 800c64a:	2301      	movs	r3, #1
 800c64c:	4093      	lsls	r3, r2
 800c64e:	608b      	str	r3, [r1, #8]
 800c650:	4620      	mov	r0, r4
 800c652:	f000 ff07 	bl	800d464 <_Bfree>
 800c656:	69e3      	ldr	r3, [r4, #28]
 800c658:	2200      	movs	r2, #0
 800c65a:	601a      	str	r2, [r3, #0]
 800c65c:	1e3b      	subs	r3, r7, #0
 800c65e:	bfbb      	ittet	lt
 800c660:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c664:	9303      	strlt	r3, [sp, #12]
 800c666:	2300      	movge	r3, #0
 800c668:	2201      	movlt	r2, #1
 800c66a:	bfac      	ite	ge
 800c66c:	f8c8 3000 	strge.w	r3, [r8]
 800c670:	f8c8 2000 	strlt.w	r2, [r8]
 800c674:	4b9e      	ldr	r3, [pc, #632]	; (800c8f0 <_dtoa_r+0x2f0>)
 800c676:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c67a:	ea33 0308 	bics.w	r3, r3, r8
 800c67e:	d11b      	bne.n	800c6b8 <_dtoa_r+0xb8>
 800c680:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c682:	f242 730f 	movw	r3, #9999	; 0x270f
 800c686:	6013      	str	r3, [r2, #0]
 800c688:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c68c:	4333      	orrs	r3, r6
 800c68e:	f000 8593 	beq.w	800d1b8 <_dtoa_r+0xbb8>
 800c692:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c694:	b963      	cbnz	r3, 800c6b0 <_dtoa_r+0xb0>
 800c696:	4b97      	ldr	r3, [pc, #604]	; (800c8f4 <_dtoa_r+0x2f4>)
 800c698:	e027      	b.n	800c6ea <_dtoa_r+0xea>
 800c69a:	4b97      	ldr	r3, [pc, #604]	; (800c8f8 <_dtoa_r+0x2f8>)
 800c69c:	9300      	str	r3, [sp, #0]
 800c69e:	3308      	adds	r3, #8
 800c6a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c6a2:	6013      	str	r3, [r2, #0]
 800c6a4:	9800      	ldr	r0, [sp, #0]
 800c6a6:	b013      	add	sp, #76	; 0x4c
 800c6a8:	ecbd 8b04 	vpop	{d8-d9}
 800c6ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6b0:	4b90      	ldr	r3, [pc, #576]	; (800c8f4 <_dtoa_r+0x2f4>)
 800c6b2:	9300      	str	r3, [sp, #0]
 800c6b4:	3303      	adds	r3, #3
 800c6b6:	e7f3      	b.n	800c6a0 <_dtoa_r+0xa0>
 800c6b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c6bc:	2200      	movs	r2, #0
 800c6be:	ec51 0b17 	vmov	r0, r1, d7
 800c6c2:	eeb0 8a47 	vmov.f32	s16, s14
 800c6c6:	eef0 8a67 	vmov.f32	s17, s15
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	f7f4 f9e4 	bl	8000a98 <__aeabi_dcmpeq>
 800c6d0:	4681      	mov	r9, r0
 800c6d2:	b160      	cbz	r0, 800c6ee <_dtoa_r+0xee>
 800c6d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	6013      	str	r3, [r2, #0]
 800c6da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	f000 8568 	beq.w	800d1b2 <_dtoa_r+0xbb2>
 800c6e2:	4b86      	ldr	r3, [pc, #536]	; (800c8fc <_dtoa_r+0x2fc>)
 800c6e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c6e6:	6013      	str	r3, [r2, #0]
 800c6e8:	3b01      	subs	r3, #1
 800c6ea:	9300      	str	r3, [sp, #0]
 800c6ec:	e7da      	b.n	800c6a4 <_dtoa_r+0xa4>
 800c6ee:	aa10      	add	r2, sp, #64	; 0x40
 800c6f0:	a911      	add	r1, sp, #68	; 0x44
 800c6f2:	4620      	mov	r0, r4
 800c6f4:	eeb0 0a48 	vmov.f32	s0, s16
 800c6f8:	eef0 0a68 	vmov.f32	s1, s17
 800c6fc:	f001 f994 	bl	800da28 <__d2b>
 800c700:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c704:	4682      	mov	sl, r0
 800c706:	2d00      	cmp	r5, #0
 800c708:	d07f      	beq.n	800c80a <_dtoa_r+0x20a>
 800c70a:	ee18 3a90 	vmov	r3, s17
 800c70e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c712:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c716:	ec51 0b18 	vmov	r0, r1, d8
 800c71a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c71e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c722:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c726:	4619      	mov	r1, r3
 800c728:	2200      	movs	r2, #0
 800c72a:	4b75      	ldr	r3, [pc, #468]	; (800c900 <_dtoa_r+0x300>)
 800c72c:	f7f3 fd94 	bl	8000258 <__aeabi_dsub>
 800c730:	a367      	add	r3, pc, #412	; (adr r3, 800c8d0 <_dtoa_r+0x2d0>)
 800c732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c736:	f7f3 ff47 	bl	80005c8 <__aeabi_dmul>
 800c73a:	a367      	add	r3, pc, #412	; (adr r3, 800c8d8 <_dtoa_r+0x2d8>)
 800c73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c740:	f7f3 fd8c 	bl	800025c <__adddf3>
 800c744:	4606      	mov	r6, r0
 800c746:	4628      	mov	r0, r5
 800c748:	460f      	mov	r7, r1
 800c74a:	f7f3 fed3 	bl	80004f4 <__aeabi_i2d>
 800c74e:	a364      	add	r3, pc, #400	; (adr r3, 800c8e0 <_dtoa_r+0x2e0>)
 800c750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c754:	f7f3 ff38 	bl	80005c8 <__aeabi_dmul>
 800c758:	4602      	mov	r2, r0
 800c75a:	460b      	mov	r3, r1
 800c75c:	4630      	mov	r0, r6
 800c75e:	4639      	mov	r1, r7
 800c760:	f7f3 fd7c 	bl	800025c <__adddf3>
 800c764:	4606      	mov	r6, r0
 800c766:	460f      	mov	r7, r1
 800c768:	f7f4 f9de 	bl	8000b28 <__aeabi_d2iz>
 800c76c:	2200      	movs	r2, #0
 800c76e:	4683      	mov	fp, r0
 800c770:	2300      	movs	r3, #0
 800c772:	4630      	mov	r0, r6
 800c774:	4639      	mov	r1, r7
 800c776:	f7f4 f999 	bl	8000aac <__aeabi_dcmplt>
 800c77a:	b148      	cbz	r0, 800c790 <_dtoa_r+0x190>
 800c77c:	4658      	mov	r0, fp
 800c77e:	f7f3 feb9 	bl	80004f4 <__aeabi_i2d>
 800c782:	4632      	mov	r2, r6
 800c784:	463b      	mov	r3, r7
 800c786:	f7f4 f987 	bl	8000a98 <__aeabi_dcmpeq>
 800c78a:	b908      	cbnz	r0, 800c790 <_dtoa_r+0x190>
 800c78c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c790:	f1bb 0f16 	cmp.w	fp, #22
 800c794:	d857      	bhi.n	800c846 <_dtoa_r+0x246>
 800c796:	4b5b      	ldr	r3, [pc, #364]	; (800c904 <_dtoa_r+0x304>)
 800c798:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a0:	ec51 0b18 	vmov	r0, r1, d8
 800c7a4:	f7f4 f982 	bl	8000aac <__aeabi_dcmplt>
 800c7a8:	2800      	cmp	r0, #0
 800c7aa:	d04e      	beq.n	800c84a <_dtoa_r+0x24a>
 800c7ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	930c      	str	r3, [sp, #48]	; 0x30
 800c7b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c7b6:	1b5b      	subs	r3, r3, r5
 800c7b8:	1e5a      	subs	r2, r3, #1
 800c7ba:	bf45      	ittet	mi
 800c7bc:	f1c3 0301 	rsbmi	r3, r3, #1
 800c7c0:	9305      	strmi	r3, [sp, #20]
 800c7c2:	2300      	movpl	r3, #0
 800c7c4:	2300      	movmi	r3, #0
 800c7c6:	9206      	str	r2, [sp, #24]
 800c7c8:	bf54      	ite	pl
 800c7ca:	9305      	strpl	r3, [sp, #20]
 800c7cc:	9306      	strmi	r3, [sp, #24]
 800c7ce:	f1bb 0f00 	cmp.w	fp, #0
 800c7d2:	db3c      	blt.n	800c84e <_dtoa_r+0x24e>
 800c7d4:	9b06      	ldr	r3, [sp, #24]
 800c7d6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c7da:	445b      	add	r3, fp
 800c7dc:	9306      	str	r3, [sp, #24]
 800c7de:	2300      	movs	r3, #0
 800c7e0:	9308      	str	r3, [sp, #32]
 800c7e2:	9b07      	ldr	r3, [sp, #28]
 800c7e4:	2b09      	cmp	r3, #9
 800c7e6:	d868      	bhi.n	800c8ba <_dtoa_r+0x2ba>
 800c7e8:	2b05      	cmp	r3, #5
 800c7ea:	bfc4      	itt	gt
 800c7ec:	3b04      	subgt	r3, #4
 800c7ee:	9307      	strgt	r3, [sp, #28]
 800c7f0:	9b07      	ldr	r3, [sp, #28]
 800c7f2:	f1a3 0302 	sub.w	r3, r3, #2
 800c7f6:	bfcc      	ite	gt
 800c7f8:	2500      	movgt	r5, #0
 800c7fa:	2501      	movle	r5, #1
 800c7fc:	2b03      	cmp	r3, #3
 800c7fe:	f200 8085 	bhi.w	800c90c <_dtoa_r+0x30c>
 800c802:	e8df f003 	tbb	[pc, r3]
 800c806:	3b2e      	.short	0x3b2e
 800c808:	5839      	.short	0x5839
 800c80a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c80e:	441d      	add	r5, r3
 800c810:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c814:	2b20      	cmp	r3, #32
 800c816:	bfc1      	itttt	gt
 800c818:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c81c:	fa08 f803 	lslgt.w	r8, r8, r3
 800c820:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c824:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c828:	bfd6      	itet	le
 800c82a:	f1c3 0320 	rsble	r3, r3, #32
 800c82e:	ea48 0003 	orrgt.w	r0, r8, r3
 800c832:	fa06 f003 	lslle.w	r0, r6, r3
 800c836:	f7f3 fe4d 	bl	80004d4 <__aeabi_ui2d>
 800c83a:	2201      	movs	r2, #1
 800c83c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c840:	3d01      	subs	r5, #1
 800c842:	920e      	str	r2, [sp, #56]	; 0x38
 800c844:	e76f      	b.n	800c726 <_dtoa_r+0x126>
 800c846:	2301      	movs	r3, #1
 800c848:	e7b3      	b.n	800c7b2 <_dtoa_r+0x1b2>
 800c84a:	900c      	str	r0, [sp, #48]	; 0x30
 800c84c:	e7b2      	b.n	800c7b4 <_dtoa_r+0x1b4>
 800c84e:	9b05      	ldr	r3, [sp, #20]
 800c850:	eba3 030b 	sub.w	r3, r3, fp
 800c854:	9305      	str	r3, [sp, #20]
 800c856:	f1cb 0300 	rsb	r3, fp, #0
 800c85a:	9308      	str	r3, [sp, #32]
 800c85c:	2300      	movs	r3, #0
 800c85e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c860:	e7bf      	b.n	800c7e2 <_dtoa_r+0x1e2>
 800c862:	2300      	movs	r3, #0
 800c864:	9309      	str	r3, [sp, #36]	; 0x24
 800c866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c868:	2b00      	cmp	r3, #0
 800c86a:	dc52      	bgt.n	800c912 <_dtoa_r+0x312>
 800c86c:	2301      	movs	r3, #1
 800c86e:	9301      	str	r3, [sp, #4]
 800c870:	9304      	str	r3, [sp, #16]
 800c872:	461a      	mov	r2, r3
 800c874:	920a      	str	r2, [sp, #40]	; 0x28
 800c876:	e00b      	b.n	800c890 <_dtoa_r+0x290>
 800c878:	2301      	movs	r3, #1
 800c87a:	e7f3      	b.n	800c864 <_dtoa_r+0x264>
 800c87c:	2300      	movs	r3, #0
 800c87e:	9309      	str	r3, [sp, #36]	; 0x24
 800c880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c882:	445b      	add	r3, fp
 800c884:	9301      	str	r3, [sp, #4]
 800c886:	3301      	adds	r3, #1
 800c888:	2b01      	cmp	r3, #1
 800c88a:	9304      	str	r3, [sp, #16]
 800c88c:	bfb8      	it	lt
 800c88e:	2301      	movlt	r3, #1
 800c890:	69e0      	ldr	r0, [r4, #28]
 800c892:	2100      	movs	r1, #0
 800c894:	2204      	movs	r2, #4
 800c896:	f102 0614 	add.w	r6, r2, #20
 800c89a:	429e      	cmp	r6, r3
 800c89c:	d93d      	bls.n	800c91a <_dtoa_r+0x31a>
 800c89e:	6041      	str	r1, [r0, #4]
 800c8a0:	4620      	mov	r0, r4
 800c8a2:	f000 fd9f 	bl	800d3e4 <_Balloc>
 800c8a6:	9000      	str	r0, [sp, #0]
 800c8a8:	2800      	cmp	r0, #0
 800c8aa:	d139      	bne.n	800c920 <_dtoa_r+0x320>
 800c8ac:	4b16      	ldr	r3, [pc, #88]	; (800c908 <_dtoa_r+0x308>)
 800c8ae:	4602      	mov	r2, r0
 800c8b0:	f240 11af 	movw	r1, #431	; 0x1af
 800c8b4:	e6bd      	b.n	800c632 <_dtoa_r+0x32>
 800c8b6:	2301      	movs	r3, #1
 800c8b8:	e7e1      	b.n	800c87e <_dtoa_r+0x27e>
 800c8ba:	2501      	movs	r5, #1
 800c8bc:	2300      	movs	r3, #0
 800c8be:	9307      	str	r3, [sp, #28]
 800c8c0:	9509      	str	r5, [sp, #36]	; 0x24
 800c8c2:	f04f 33ff 	mov.w	r3, #4294967295
 800c8c6:	9301      	str	r3, [sp, #4]
 800c8c8:	9304      	str	r3, [sp, #16]
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	2312      	movs	r3, #18
 800c8ce:	e7d1      	b.n	800c874 <_dtoa_r+0x274>
 800c8d0:	636f4361 	.word	0x636f4361
 800c8d4:	3fd287a7 	.word	0x3fd287a7
 800c8d8:	8b60c8b3 	.word	0x8b60c8b3
 800c8dc:	3fc68a28 	.word	0x3fc68a28
 800c8e0:	509f79fb 	.word	0x509f79fb
 800c8e4:	3fd34413 	.word	0x3fd34413
 800c8e8:	0800ef09 	.word	0x0800ef09
 800c8ec:	0800ef20 	.word	0x0800ef20
 800c8f0:	7ff00000 	.word	0x7ff00000
 800c8f4:	0800ef05 	.word	0x0800ef05
 800c8f8:	0800eefc 	.word	0x0800eefc
 800c8fc:	0800eed9 	.word	0x0800eed9
 800c900:	3ff80000 	.word	0x3ff80000
 800c904:	0800f010 	.word	0x0800f010
 800c908:	0800ef78 	.word	0x0800ef78
 800c90c:	2301      	movs	r3, #1
 800c90e:	9309      	str	r3, [sp, #36]	; 0x24
 800c910:	e7d7      	b.n	800c8c2 <_dtoa_r+0x2c2>
 800c912:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c914:	9301      	str	r3, [sp, #4]
 800c916:	9304      	str	r3, [sp, #16]
 800c918:	e7ba      	b.n	800c890 <_dtoa_r+0x290>
 800c91a:	3101      	adds	r1, #1
 800c91c:	0052      	lsls	r2, r2, #1
 800c91e:	e7ba      	b.n	800c896 <_dtoa_r+0x296>
 800c920:	69e3      	ldr	r3, [r4, #28]
 800c922:	9a00      	ldr	r2, [sp, #0]
 800c924:	601a      	str	r2, [r3, #0]
 800c926:	9b04      	ldr	r3, [sp, #16]
 800c928:	2b0e      	cmp	r3, #14
 800c92a:	f200 80a8 	bhi.w	800ca7e <_dtoa_r+0x47e>
 800c92e:	2d00      	cmp	r5, #0
 800c930:	f000 80a5 	beq.w	800ca7e <_dtoa_r+0x47e>
 800c934:	f1bb 0f00 	cmp.w	fp, #0
 800c938:	dd38      	ble.n	800c9ac <_dtoa_r+0x3ac>
 800c93a:	4bc0      	ldr	r3, [pc, #768]	; (800cc3c <_dtoa_r+0x63c>)
 800c93c:	f00b 020f 	and.w	r2, fp, #15
 800c940:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c944:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c948:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c94c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c950:	d019      	beq.n	800c986 <_dtoa_r+0x386>
 800c952:	4bbb      	ldr	r3, [pc, #748]	; (800cc40 <_dtoa_r+0x640>)
 800c954:	ec51 0b18 	vmov	r0, r1, d8
 800c958:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c95c:	f7f3 ff5e 	bl	800081c <__aeabi_ddiv>
 800c960:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c964:	f008 080f 	and.w	r8, r8, #15
 800c968:	2503      	movs	r5, #3
 800c96a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800cc40 <_dtoa_r+0x640>
 800c96e:	f1b8 0f00 	cmp.w	r8, #0
 800c972:	d10a      	bne.n	800c98a <_dtoa_r+0x38a>
 800c974:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c978:	4632      	mov	r2, r6
 800c97a:	463b      	mov	r3, r7
 800c97c:	f7f3 ff4e 	bl	800081c <__aeabi_ddiv>
 800c980:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c984:	e02b      	b.n	800c9de <_dtoa_r+0x3de>
 800c986:	2502      	movs	r5, #2
 800c988:	e7ef      	b.n	800c96a <_dtoa_r+0x36a>
 800c98a:	f018 0f01 	tst.w	r8, #1
 800c98e:	d008      	beq.n	800c9a2 <_dtoa_r+0x3a2>
 800c990:	4630      	mov	r0, r6
 800c992:	4639      	mov	r1, r7
 800c994:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c998:	f7f3 fe16 	bl	80005c8 <__aeabi_dmul>
 800c99c:	3501      	adds	r5, #1
 800c99e:	4606      	mov	r6, r0
 800c9a0:	460f      	mov	r7, r1
 800c9a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c9a6:	f109 0908 	add.w	r9, r9, #8
 800c9aa:	e7e0      	b.n	800c96e <_dtoa_r+0x36e>
 800c9ac:	f000 809f 	beq.w	800caee <_dtoa_r+0x4ee>
 800c9b0:	f1cb 0600 	rsb	r6, fp, #0
 800c9b4:	4ba1      	ldr	r3, [pc, #644]	; (800cc3c <_dtoa_r+0x63c>)
 800c9b6:	4fa2      	ldr	r7, [pc, #648]	; (800cc40 <_dtoa_r+0x640>)
 800c9b8:	f006 020f 	and.w	r2, r6, #15
 800c9bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c4:	ec51 0b18 	vmov	r0, r1, d8
 800c9c8:	f7f3 fdfe 	bl	80005c8 <__aeabi_dmul>
 800c9cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c9d0:	1136      	asrs	r6, r6, #4
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	2502      	movs	r5, #2
 800c9d6:	2e00      	cmp	r6, #0
 800c9d8:	d17e      	bne.n	800cad8 <_dtoa_r+0x4d8>
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d1d0      	bne.n	800c980 <_dtoa_r+0x380>
 800c9de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c9e0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	f000 8084 	beq.w	800caf2 <_dtoa_r+0x4f2>
 800c9ea:	4b96      	ldr	r3, [pc, #600]	; (800cc44 <_dtoa_r+0x644>)
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	4640      	mov	r0, r8
 800c9f0:	4649      	mov	r1, r9
 800c9f2:	f7f4 f85b 	bl	8000aac <__aeabi_dcmplt>
 800c9f6:	2800      	cmp	r0, #0
 800c9f8:	d07b      	beq.n	800caf2 <_dtoa_r+0x4f2>
 800c9fa:	9b04      	ldr	r3, [sp, #16]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d078      	beq.n	800caf2 <_dtoa_r+0x4f2>
 800ca00:	9b01      	ldr	r3, [sp, #4]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	dd39      	ble.n	800ca7a <_dtoa_r+0x47a>
 800ca06:	4b90      	ldr	r3, [pc, #576]	; (800cc48 <_dtoa_r+0x648>)
 800ca08:	2200      	movs	r2, #0
 800ca0a:	4640      	mov	r0, r8
 800ca0c:	4649      	mov	r1, r9
 800ca0e:	f7f3 fddb 	bl	80005c8 <__aeabi_dmul>
 800ca12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca16:	9e01      	ldr	r6, [sp, #4]
 800ca18:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ca1c:	3501      	adds	r5, #1
 800ca1e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ca22:	4628      	mov	r0, r5
 800ca24:	f7f3 fd66 	bl	80004f4 <__aeabi_i2d>
 800ca28:	4642      	mov	r2, r8
 800ca2a:	464b      	mov	r3, r9
 800ca2c:	f7f3 fdcc 	bl	80005c8 <__aeabi_dmul>
 800ca30:	4b86      	ldr	r3, [pc, #536]	; (800cc4c <_dtoa_r+0x64c>)
 800ca32:	2200      	movs	r2, #0
 800ca34:	f7f3 fc12 	bl	800025c <__adddf3>
 800ca38:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ca3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca40:	9303      	str	r3, [sp, #12]
 800ca42:	2e00      	cmp	r6, #0
 800ca44:	d158      	bne.n	800caf8 <_dtoa_r+0x4f8>
 800ca46:	4b82      	ldr	r3, [pc, #520]	; (800cc50 <_dtoa_r+0x650>)
 800ca48:	2200      	movs	r2, #0
 800ca4a:	4640      	mov	r0, r8
 800ca4c:	4649      	mov	r1, r9
 800ca4e:	f7f3 fc03 	bl	8000258 <__aeabi_dsub>
 800ca52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ca56:	4680      	mov	r8, r0
 800ca58:	4689      	mov	r9, r1
 800ca5a:	f7f4 f845 	bl	8000ae8 <__aeabi_dcmpgt>
 800ca5e:	2800      	cmp	r0, #0
 800ca60:	f040 8296 	bne.w	800cf90 <_dtoa_r+0x990>
 800ca64:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ca68:	4640      	mov	r0, r8
 800ca6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ca6e:	4649      	mov	r1, r9
 800ca70:	f7f4 f81c 	bl	8000aac <__aeabi_dcmplt>
 800ca74:	2800      	cmp	r0, #0
 800ca76:	f040 8289 	bne.w	800cf8c <_dtoa_r+0x98c>
 800ca7a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ca7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	f2c0 814e 	blt.w	800cd22 <_dtoa_r+0x722>
 800ca86:	f1bb 0f0e 	cmp.w	fp, #14
 800ca8a:	f300 814a 	bgt.w	800cd22 <_dtoa_r+0x722>
 800ca8e:	4b6b      	ldr	r3, [pc, #428]	; (800cc3c <_dtoa_r+0x63c>)
 800ca90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ca94:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ca98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	f280 80dc 	bge.w	800cc58 <_dtoa_r+0x658>
 800caa0:	9b04      	ldr	r3, [sp, #16]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	f300 80d8 	bgt.w	800cc58 <_dtoa_r+0x658>
 800caa8:	f040 826f 	bne.w	800cf8a <_dtoa_r+0x98a>
 800caac:	4b68      	ldr	r3, [pc, #416]	; (800cc50 <_dtoa_r+0x650>)
 800caae:	2200      	movs	r2, #0
 800cab0:	4640      	mov	r0, r8
 800cab2:	4649      	mov	r1, r9
 800cab4:	f7f3 fd88 	bl	80005c8 <__aeabi_dmul>
 800cab8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cabc:	f7f4 f80a 	bl	8000ad4 <__aeabi_dcmpge>
 800cac0:	9e04      	ldr	r6, [sp, #16]
 800cac2:	4637      	mov	r7, r6
 800cac4:	2800      	cmp	r0, #0
 800cac6:	f040 8245 	bne.w	800cf54 <_dtoa_r+0x954>
 800caca:	9d00      	ldr	r5, [sp, #0]
 800cacc:	2331      	movs	r3, #49	; 0x31
 800cace:	f805 3b01 	strb.w	r3, [r5], #1
 800cad2:	f10b 0b01 	add.w	fp, fp, #1
 800cad6:	e241      	b.n	800cf5c <_dtoa_r+0x95c>
 800cad8:	07f2      	lsls	r2, r6, #31
 800cada:	d505      	bpl.n	800cae8 <_dtoa_r+0x4e8>
 800cadc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cae0:	f7f3 fd72 	bl	80005c8 <__aeabi_dmul>
 800cae4:	3501      	adds	r5, #1
 800cae6:	2301      	movs	r3, #1
 800cae8:	1076      	asrs	r6, r6, #1
 800caea:	3708      	adds	r7, #8
 800caec:	e773      	b.n	800c9d6 <_dtoa_r+0x3d6>
 800caee:	2502      	movs	r5, #2
 800caf0:	e775      	b.n	800c9de <_dtoa_r+0x3de>
 800caf2:	9e04      	ldr	r6, [sp, #16]
 800caf4:	465f      	mov	r7, fp
 800caf6:	e792      	b.n	800ca1e <_dtoa_r+0x41e>
 800caf8:	9900      	ldr	r1, [sp, #0]
 800cafa:	4b50      	ldr	r3, [pc, #320]	; (800cc3c <_dtoa_r+0x63c>)
 800cafc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cb00:	4431      	add	r1, r6
 800cb02:	9102      	str	r1, [sp, #8]
 800cb04:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cb06:	eeb0 9a47 	vmov.f32	s18, s14
 800cb0a:	eef0 9a67 	vmov.f32	s19, s15
 800cb0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cb12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cb16:	2900      	cmp	r1, #0
 800cb18:	d044      	beq.n	800cba4 <_dtoa_r+0x5a4>
 800cb1a:	494e      	ldr	r1, [pc, #312]	; (800cc54 <_dtoa_r+0x654>)
 800cb1c:	2000      	movs	r0, #0
 800cb1e:	f7f3 fe7d 	bl	800081c <__aeabi_ddiv>
 800cb22:	ec53 2b19 	vmov	r2, r3, d9
 800cb26:	f7f3 fb97 	bl	8000258 <__aeabi_dsub>
 800cb2a:	9d00      	ldr	r5, [sp, #0]
 800cb2c:	ec41 0b19 	vmov	d9, r0, r1
 800cb30:	4649      	mov	r1, r9
 800cb32:	4640      	mov	r0, r8
 800cb34:	f7f3 fff8 	bl	8000b28 <__aeabi_d2iz>
 800cb38:	4606      	mov	r6, r0
 800cb3a:	f7f3 fcdb 	bl	80004f4 <__aeabi_i2d>
 800cb3e:	4602      	mov	r2, r0
 800cb40:	460b      	mov	r3, r1
 800cb42:	4640      	mov	r0, r8
 800cb44:	4649      	mov	r1, r9
 800cb46:	f7f3 fb87 	bl	8000258 <__aeabi_dsub>
 800cb4a:	3630      	adds	r6, #48	; 0x30
 800cb4c:	f805 6b01 	strb.w	r6, [r5], #1
 800cb50:	ec53 2b19 	vmov	r2, r3, d9
 800cb54:	4680      	mov	r8, r0
 800cb56:	4689      	mov	r9, r1
 800cb58:	f7f3 ffa8 	bl	8000aac <__aeabi_dcmplt>
 800cb5c:	2800      	cmp	r0, #0
 800cb5e:	d164      	bne.n	800cc2a <_dtoa_r+0x62a>
 800cb60:	4642      	mov	r2, r8
 800cb62:	464b      	mov	r3, r9
 800cb64:	4937      	ldr	r1, [pc, #220]	; (800cc44 <_dtoa_r+0x644>)
 800cb66:	2000      	movs	r0, #0
 800cb68:	f7f3 fb76 	bl	8000258 <__aeabi_dsub>
 800cb6c:	ec53 2b19 	vmov	r2, r3, d9
 800cb70:	f7f3 ff9c 	bl	8000aac <__aeabi_dcmplt>
 800cb74:	2800      	cmp	r0, #0
 800cb76:	f040 80b6 	bne.w	800cce6 <_dtoa_r+0x6e6>
 800cb7a:	9b02      	ldr	r3, [sp, #8]
 800cb7c:	429d      	cmp	r5, r3
 800cb7e:	f43f af7c 	beq.w	800ca7a <_dtoa_r+0x47a>
 800cb82:	4b31      	ldr	r3, [pc, #196]	; (800cc48 <_dtoa_r+0x648>)
 800cb84:	ec51 0b19 	vmov	r0, r1, d9
 800cb88:	2200      	movs	r2, #0
 800cb8a:	f7f3 fd1d 	bl	80005c8 <__aeabi_dmul>
 800cb8e:	4b2e      	ldr	r3, [pc, #184]	; (800cc48 <_dtoa_r+0x648>)
 800cb90:	ec41 0b19 	vmov	d9, r0, r1
 800cb94:	2200      	movs	r2, #0
 800cb96:	4640      	mov	r0, r8
 800cb98:	4649      	mov	r1, r9
 800cb9a:	f7f3 fd15 	bl	80005c8 <__aeabi_dmul>
 800cb9e:	4680      	mov	r8, r0
 800cba0:	4689      	mov	r9, r1
 800cba2:	e7c5      	b.n	800cb30 <_dtoa_r+0x530>
 800cba4:	ec51 0b17 	vmov	r0, r1, d7
 800cba8:	f7f3 fd0e 	bl	80005c8 <__aeabi_dmul>
 800cbac:	9b02      	ldr	r3, [sp, #8]
 800cbae:	9d00      	ldr	r5, [sp, #0]
 800cbb0:	930f      	str	r3, [sp, #60]	; 0x3c
 800cbb2:	ec41 0b19 	vmov	d9, r0, r1
 800cbb6:	4649      	mov	r1, r9
 800cbb8:	4640      	mov	r0, r8
 800cbba:	f7f3 ffb5 	bl	8000b28 <__aeabi_d2iz>
 800cbbe:	4606      	mov	r6, r0
 800cbc0:	f7f3 fc98 	bl	80004f4 <__aeabi_i2d>
 800cbc4:	3630      	adds	r6, #48	; 0x30
 800cbc6:	4602      	mov	r2, r0
 800cbc8:	460b      	mov	r3, r1
 800cbca:	4640      	mov	r0, r8
 800cbcc:	4649      	mov	r1, r9
 800cbce:	f7f3 fb43 	bl	8000258 <__aeabi_dsub>
 800cbd2:	f805 6b01 	strb.w	r6, [r5], #1
 800cbd6:	9b02      	ldr	r3, [sp, #8]
 800cbd8:	429d      	cmp	r5, r3
 800cbda:	4680      	mov	r8, r0
 800cbdc:	4689      	mov	r9, r1
 800cbde:	f04f 0200 	mov.w	r2, #0
 800cbe2:	d124      	bne.n	800cc2e <_dtoa_r+0x62e>
 800cbe4:	4b1b      	ldr	r3, [pc, #108]	; (800cc54 <_dtoa_r+0x654>)
 800cbe6:	ec51 0b19 	vmov	r0, r1, d9
 800cbea:	f7f3 fb37 	bl	800025c <__adddf3>
 800cbee:	4602      	mov	r2, r0
 800cbf0:	460b      	mov	r3, r1
 800cbf2:	4640      	mov	r0, r8
 800cbf4:	4649      	mov	r1, r9
 800cbf6:	f7f3 ff77 	bl	8000ae8 <__aeabi_dcmpgt>
 800cbfa:	2800      	cmp	r0, #0
 800cbfc:	d173      	bne.n	800cce6 <_dtoa_r+0x6e6>
 800cbfe:	ec53 2b19 	vmov	r2, r3, d9
 800cc02:	4914      	ldr	r1, [pc, #80]	; (800cc54 <_dtoa_r+0x654>)
 800cc04:	2000      	movs	r0, #0
 800cc06:	f7f3 fb27 	bl	8000258 <__aeabi_dsub>
 800cc0a:	4602      	mov	r2, r0
 800cc0c:	460b      	mov	r3, r1
 800cc0e:	4640      	mov	r0, r8
 800cc10:	4649      	mov	r1, r9
 800cc12:	f7f3 ff4b 	bl	8000aac <__aeabi_dcmplt>
 800cc16:	2800      	cmp	r0, #0
 800cc18:	f43f af2f 	beq.w	800ca7a <_dtoa_r+0x47a>
 800cc1c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cc1e:	1e6b      	subs	r3, r5, #1
 800cc20:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cc26:	2b30      	cmp	r3, #48	; 0x30
 800cc28:	d0f8      	beq.n	800cc1c <_dtoa_r+0x61c>
 800cc2a:	46bb      	mov	fp, r7
 800cc2c:	e04a      	b.n	800ccc4 <_dtoa_r+0x6c4>
 800cc2e:	4b06      	ldr	r3, [pc, #24]	; (800cc48 <_dtoa_r+0x648>)
 800cc30:	f7f3 fcca 	bl	80005c8 <__aeabi_dmul>
 800cc34:	4680      	mov	r8, r0
 800cc36:	4689      	mov	r9, r1
 800cc38:	e7bd      	b.n	800cbb6 <_dtoa_r+0x5b6>
 800cc3a:	bf00      	nop
 800cc3c:	0800f010 	.word	0x0800f010
 800cc40:	0800efe8 	.word	0x0800efe8
 800cc44:	3ff00000 	.word	0x3ff00000
 800cc48:	40240000 	.word	0x40240000
 800cc4c:	401c0000 	.word	0x401c0000
 800cc50:	40140000 	.word	0x40140000
 800cc54:	3fe00000 	.word	0x3fe00000
 800cc58:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cc5c:	9d00      	ldr	r5, [sp, #0]
 800cc5e:	4642      	mov	r2, r8
 800cc60:	464b      	mov	r3, r9
 800cc62:	4630      	mov	r0, r6
 800cc64:	4639      	mov	r1, r7
 800cc66:	f7f3 fdd9 	bl	800081c <__aeabi_ddiv>
 800cc6a:	f7f3 ff5d 	bl	8000b28 <__aeabi_d2iz>
 800cc6e:	9001      	str	r0, [sp, #4]
 800cc70:	f7f3 fc40 	bl	80004f4 <__aeabi_i2d>
 800cc74:	4642      	mov	r2, r8
 800cc76:	464b      	mov	r3, r9
 800cc78:	f7f3 fca6 	bl	80005c8 <__aeabi_dmul>
 800cc7c:	4602      	mov	r2, r0
 800cc7e:	460b      	mov	r3, r1
 800cc80:	4630      	mov	r0, r6
 800cc82:	4639      	mov	r1, r7
 800cc84:	f7f3 fae8 	bl	8000258 <__aeabi_dsub>
 800cc88:	9e01      	ldr	r6, [sp, #4]
 800cc8a:	9f04      	ldr	r7, [sp, #16]
 800cc8c:	3630      	adds	r6, #48	; 0x30
 800cc8e:	f805 6b01 	strb.w	r6, [r5], #1
 800cc92:	9e00      	ldr	r6, [sp, #0]
 800cc94:	1bae      	subs	r6, r5, r6
 800cc96:	42b7      	cmp	r7, r6
 800cc98:	4602      	mov	r2, r0
 800cc9a:	460b      	mov	r3, r1
 800cc9c:	d134      	bne.n	800cd08 <_dtoa_r+0x708>
 800cc9e:	f7f3 fadd 	bl	800025c <__adddf3>
 800cca2:	4642      	mov	r2, r8
 800cca4:	464b      	mov	r3, r9
 800cca6:	4606      	mov	r6, r0
 800cca8:	460f      	mov	r7, r1
 800ccaa:	f7f3 ff1d 	bl	8000ae8 <__aeabi_dcmpgt>
 800ccae:	b9c8      	cbnz	r0, 800cce4 <_dtoa_r+0x6e4>
 800ccb0:	4642      	mov	r2, r8
 800ccb2:	464b      	mov	r3, r9
 800ccb4:	4630      	mov	r0, r6
 800ccb6:	4639      	mov	r1, r7
 800ccb8:	f7f3 feee 	bl	8000a98 <__aeabi_dcmpeq>
 800ccbc:	b110      	cbz	r0, 800ccc4 <_dtoa_r+0x6c4>
 800ccbe:	9b01      	ldr	r3, [sp, #4]
 800ccc0:	07db      	lsls	r3, r3, #31
 800ccc2:	d40f      	bmi.n	800cce4 <_dtoa_r+0x6e4>
 800ccc4:	4651      	mov	r1, sl
 800ccc6:	4620      	mov	r0, r4
 800ccc8:	f000 fbcc 	bl	800d464 <_Bfree>
 800cccc:	2300      	movs	r3, #0
 800ccce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ccd0:	702b      	strb	r3, [r5, #0]
 800ccd2:	f10b 0301 	add.w	r3, fp, #1
 800ccd6:	6013      	str	r3, [r2, #0]
 800ccd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	f43f ace2 	beq.w	800c6a4 <_dtoa_r+0xa4>
 800cce0:	601d      	str	r5, [r3, #0]
 800cce2:	e4df      	b.n	800c6a4 <_dtoa_r+0xa4>
 800cce4:	465f      	mov	r7, fp
 800cce6:	462b      	mov	r3, r5
 800cce8:	461d      	mov	r5, r3
 800ccea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ccee:	2a39      	cmp	r2, #57	; 0x39
 800ccf0:	d106      	bne.n	800cd00 <_dtoa_r+0x700>
 800ccf2:	9a00      	ldr	r2, [sp, #0]
 800ccf4:	429a      	cmp	r2, r3
 800ccf6:	d1f7      	bne.n	800cce8 <_dtoa_r+0x6e8>
 800ccf8:	9900      	ldr	r1, [sp, #0]
 800ccfa:	2230      	movs	r2, #48	; 0x30
 800ccfc:	3701      	adds	r7, #1
 800ccfe:	700a      	strb	r2, [r1, #0]
 800cd00:	781a      	ldrb	r2, [r3, #0]
 800cd02:	3201      	adds	r2, #1
 800cd04:	701a      	strb	r2, [r3, #0]
 800cd06:	e790      	b.n	800cc2a <_dtoa_r+0x62a>
 800cd08:	4ba3      	ldr	r3, [pc, #652]	; (800cf98 <_dtoa_r+0x998>)
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	f7f3 fc5c 	bl	80005c8 <__aeabi_dmul>
 800cd10:	2200      	movs	r2, #0
 800cd12:	2300      	movs	r3, #0
 800cd14:	4606      	mov	r6, r0
 800cd16:	460f      	mov	r7, r1
 800cd18:	f7f3 febe 	bl	8000a98 <__aeabi_dcmpeq>
 800cd1c:	2800      	cmp	r0, #0
 800cd1e:	d09e      	beq.n	800cc5e <_dtoa_r+0x65e>
 800cd20:	e7d0      	b.n	800ccc4 <_dtoa_r+0x6c4>
 800cd22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd24:	2a00      	cmp	r2, #0
 800cd26:	f000 80ca 	beq.w	800cebe <_dtoa_r+0x8be>
 800cd2a:	9a07      	ldr	r2, [sp, #28]
 800cd2c:	2a01      	cmp	r2, #1
 800cd2e:	f300 80ad 	bgt.w	800ce8c <_dtoa_r+0x88c>
 800cd32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cd34:	2a00      	cmp	r2, #0
 800cd36:	f000 80a5 	beq.w	800ce84 <_dtoa_r+0x884>
 800cd3a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cd3e:	9e08      	ldr	r6, [sp, #32]
 800cd40:	9d05      	ldr	r5, [sp, #20]
 800cd42:	9a05      	ldr	r2, [sp, #20]
 800cd44:	441a      	add	r2, r3
 800cd46:	9205      	str	r2, [sp, #20]
 800cd48:	9a06      	ldr	r2, [sp, #24]
 800cd4a:	2101      	movs	r1, #1
 800cd4c:	441a      	add	r2, r3
 800cd4e:	4620      	mov	r0, r4
 800cd50:	9206      	str	r2, [sp, #24]
 800cd52:	f000 fc3d 	bl	800d5d0 <__i2b>
 800cd56:	4607      	mov	r7, r0
 800cd58:	b165      	cbz	r5, 800cd74 <_dtoa_r+0x774>
 800cd5a:	9b06      	ldr	r3, [sp, #24]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	dd09      	ble.n	800cd74 <_dtoa_r+0x774>
 800cd60:	42ab      	cmp	r3, r5
 800cd62:	9a05      	ldr	r2, [sp, #20]
 800cd64:	bfa8      	it	ge
 800cd66:	462b      	movge	r3, r5
 800cd68:	1ad2      	subs	r2, r2, r3
 800cd6a:	9205      	str	r2, [sp, #20]
 800cd6c:	9a06      	ldr	r2, [sp, #24]
 800cd6e:	1aed      	subs	r5, r5, r3
 800cd70:	1ad3      	subs	r3, r2, r3
 800cd72:	9306      	str	r3, [sp, #24]
 800cd74:	9b08      	ldr	r3, [sp, #32]
 800cd76:	b1f3      	cbz	r3, 800cdb6 <_dtoa_r+0x7b6>
 800cd78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	f000 80a3 	beq.w	800cec6 <_dtoa_r+0x8c6>
 800cd80:	2e00      	cmp	r6, #0
 800cd82:	dd10      	ble.n	800cda6 <_dtoa_r+0x7a6>
 800cd84:	4639      	mov	r1, r7
 800cd86:	4632      	mov	r2, r6
 800cd88:	4620      	mov	r0, r4
 800cd8a:	f000 fce1 	bl	800d750 <__pow5mult>
 800cd8e:	4652      	mov	r2, sl
 800cd90:	4601      	mov	r1, r0
 800cd92:	4607      	mov	r7, r0
 800cd94:	4620      	mov	r0, r4
 800cd96:	f000 fc31 	bl	800d5fc <__multiply>
 800cd9a:	4651      	mov	r1, sl
 800cd9c:	4680      	mov	r8, r0
 800cd9e:	4620      	mov	r0, r4
 800cda0:	f000 fb60 	bl	800d464 <_Bfree>
 800cda4:	46c2      	mov	sl, r8
 800cda6:	9b08      	ldr	r3, [sp, #32]
 800cda8:	1b9a      	subs	r2, r3, r6
 800cdaa:	d004      	beq.n	800cdb6 <_dtoa_r+0x7b6>
 800cdac:	4651      	mov	r1, sl
 800cdae:	4620      	mov	r0, r4
 800cdb0:	f000 fcce 	bl	800d750 <__pow5mult>
 800cdb4:	4682      	mov	sl, r0
 800cdb6:	2101      	movs	r1, #1
 800cdb8:	4620      	mov	r0, r4
 800cdba:	f000 fc09 	bl	800d5d0 <__i2b>
 800cdbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	4606      	mov	r6, r0
 800cdc4:	f340 8081 	ble.w	800ceca <_dtoa_r+0x8ca>
 800cdc8:	461a      	mov	r2, r3
 800cdca:	4601      	mov	r1, r0
 800cdcc:	4620      	mov	r0, r4
 800cdce:	f000 fcbf 	bl	800d750 <__pow5mult>
 800cdd2:	9b07      	ldr	r3, [sp, #28]
 800cdd4:	2b01      	cmp	r3, #1
 800cdd6:	4606      	mov	r6, r0
 800cdd8:	dd7a      	ble.n	800ced0 <_dtoa_r+0x8d0>
 800cdda:	f04f 0800 	mov.w	r8, #0
 800cdde:	6933      	ldr	r3, [r6, #16]
 800cde0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cde4:	6918      	ldr	r0, [r3, #16]
 800cde6:	f000 fba5 	bl	800d534 <__hi0bits>
 800cdea:	f1c0 0020 	rsb	r0, r0, #32
 800cdee:	9b06      	ldr	r3, [sp, #24]
 800cdf0:	4418      	add	r0, r3
 800cdf2:	f010 001f 	ands.w	r0, r0, #31
 800cdf6:	f000 8094 	beq.w	800cf22 <_dtoa_r+0x922>
 800cdfa:	f1c0 0320 	rsb	r3, r0, #32
 800cdfe:	2b04      	cmp	r3, #4
 800ce00:	f340 8085 	ble.w	800cf0e <_dtoa_r+0x90e>
 800ce04:	9b05      	ldr	r3, [sp, #20]
 800ce06:	f1c0 001c 	rsb	r0, r0, #28
 800ce0a:	4403      	add	r3, r0
 800ce0c:	9305      	str	r3, [sp, #20]
 800ce0e:	9b06      	ldr	r3, [sp, #24]
 800ce10:	4403      	add	r3, r0
 800ce12:	4405      	add	r5, r0
 800ce14:	9306      	str	r3, [sp, #24]
 800ce16:	9b05      	ldr	r3, [sp, #20]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	dd05      	ble.n	800ce28 <_dtoa_r+0x828>
 800ce1c:	4651      	mov	r1, sl
 800ce1e:	461a      	mov	r2, r3
 800ce20:	4620      	mov	r0, r4
 800ce22:	f000 fcef 	bl	800d804 <__lshift>
 800ce26:	4682      	mov	sl, r0
 800ce28:	9b06      	ldr	r3, [sp, #24]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	dd05      	ble.n	800ce3a <_dtoa_r+0x83a>
 800ce2e:	4631      	mov	r1, r6
 800ce30:	461a      	mov	r2, r3
 800ce32:	4620      	mov	r0, r4
 800ce34:	f000 fce6 	bl	800d804 <__lshift>
 800ce38:	4606      	mov	r6, r0
 800ce3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d072      	beq.n	800cf26 <_dtoa_r+0x926>
 800ce40:	4631      	mov	r1, r6
 800ce42:	4650      	mov	r0, sl
 800ce44:	f000 fd4a 	bl	800d8dc <__mcmp>
 800ce48:	2800      	cmp	r0, #0
 800ce4a:	da6c      	bge.n	800cf26 <_dtoa_r+0x926>
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	4651      	mov	r1, sl
 800ce50:	220a      	movs	r2, #10
 800ce52:	4620      	mov	r0, r4
 800ce54:	f000 fb28 	bl	800d4a8 <__multadd>
 800ce58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce5a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ce5e:	4682      	mov	sl, r0
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	f000 81b0 	beq.w	800d1c6 <_dtoa_r+0xbc6>
 800ce66:	2300      	movs	r3, #0
 800ce68:	4639      	mov	r1, r7
 800ce6a:	220a      	movs	r2, #10
 800ce6c:	4620      	mov	r0, r4
 800ce6e:	f000 fb1b 	bl	800d4a8 <__multadd>
 800ce72:	9b01      	ldr	r3, [sp, #4]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	4607      	mov	r7, r0
 800ce78:	f300 8096 	bgt.w	800cfa8 <_dtoa_r+0x9a8>
 800ce7c:	9b07      	ldr	r3, [sp, #28]
 800ce7e:	2b02      	cmp	r3, #2
 800ce80:	dc59      	bgt.n	800cf36 <_dtoa_r+0x936>
 800ce82:	e091      	b.n	800cfa8 <_dtoa_r+0x9a8>
 800ce84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ce86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ce8a:	e758      	b.n	800cd3e <_dtoa_r+0x73e>
 800ce8c:	9b04      	ldr	r3, [sp, #16]
 800ce8e:	1e5e      	subs	r6, r3, #1
 800ce90:	9b08      	ldr	r3, [sp, #32]
 800ce92:	42b3      	cmp	r3, r6
 800ce94:	bfbf      	itttt	lt
 800ce96:	9b08      	ldrlt	r3, [sp, #32]
 800ce98:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ce9a:	9608      	strlt	r6, [sp, #32]
 800ce9c:	1af3      	sublt	r3, r6, r3
 800ce9e:	bfb4      	ite	lt
 800cea0:	18d2      	addlt	r2, r2, r3
 800cea2:	1b9e      	subge	r6, r3, r6
 800cea4:	9b04      	ldr	r3, [sp, #16]
 800cea6:	bfbc      	itt	lt
 800cea8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800ceaa:	2600      	movlt	r6, #0
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	bfb7      	itett	lt
 800ceb0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800ceb4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800ceb8:	1a9d      	sublt	r5, r3, r2
 800ceba:	2300      	movlt	r3, #0
 800cebc:	e741      	b.n	800cd42 <_dtoa_r+0x742>
 800cebe:	9e08      	ldr	r6, [sp, #32]
 800cec0:	9d05      	ldr	r5, [sp, #20]
 800cec2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cec4:	e748      	b.n	800cd58 <_dtoa_r+0x758>
 800cec6:	9a08      	ldr	r2, [sp, #32]
 800cec8:	e770      	b.n	800cdac <_dtoa_r+0x7ac>
 800ceca:	9b07      	ldr	r3, [sp, #28]
 800cecc:	2b01      	cmp	r3, #1
 800cece:	dc19      	bgt.n	800cf04 <_dtoa_r+0x904>
 800ced0:	9b02      	ldr	r3, [sp, #8]
 800ced2:	b9bb      	cbnz	r3, 800cf04 <_dtoa_r+0x904>
 800ced4:	9b03      	ldr	r3, [sp, #12]
 800ced6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ceda:	b99b      	cbnz	r3, 800cf04 <_dtoa_r+0x904>
 800cedc:	9b03      	ldr	r3, [sp, #12]
 800cede:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cee2:	0d1b      	lsrs	r3, r3, #20
 800cee4:	051b      	lsls	r3, r3, #20
 800cee6:	b183      	cbz	r3, 800cf0a <_dtoa_r+0x90a>
 800cee8:	9b05      	ldr	r3, [sp, #20]
 800ceea:	3301      	adds	r3, #1
 800ceec:	9305      	str	r3, [sp, #20]
 800ceee:	9b06      	ldr	r3, [sp, #24]
 800cef0:	3301      	adds	r3, #1
 800cef2:	9306      	str	r3, [sp, #24]
 800cef4:	f04f 0801 	mov.w	r8, #1
 800cef8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	f47f af6f 	bne.w	800cdde <_dtoa_r+0x7de>
 800cf00:	2001      	movs	r0, #1
 800cf02:	e774      	b.n	800cdee <_dtoa_r+0x7ee>
 800cf04:	f04f 0800 	mov.w	r8, #0
 800cf08:	e7f6      	b.n	800cef8 <_dtoa_r+0x8f8>
 800cf0a:	4698      	mov	r8, r3
 800cf0c:	e7f4      	b.n	800cef8 <_dtoa_r+0x8f8>
 800cf0e:	d082      	beq.n	800ce16 <_dtoa_r+0x816>
 800cf10:	9a05      	ldr	r2, [sp, #20]
 800cf12:	331c      	adds	r3, #28
 800cf14:	441a      	add	r2, r3
 800cf16:	9205      	str	r2, [sp, #20]
 800cf18:	9a06      	ldr	r2, [sp, #24]
 800cf1a:	441a      	add	r2, r3
 800cf1c:	441d      	add	r5, r3
 800cf1e:	9206      	str	r2, [sp, #24]
 800cf20:	e779      	b.n	800ce16 <_dtoa_r+0x816>
 800cf22:	4603      	mov	r3, r0
 800cf24:	e7f4      	b.n	800cf10 <_dtoa_r+0x910>
 800cf26:	9b04      	ldr	r3, [sp, #16]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	dc37      	bgt.n	800cf9c <_dtoa_r+0x99c>
 800cf2c:	9b07      	ldr	r3, [sp, #28]
 800cf2e:	2b02      	cmp	r3, #2
 800cf30:	dd34      	ble.n	800cf9c <_dtoa_r+0x99c>
 800cf32:	9b04      	ldr	r3, [sp, #16]
 800cf34:	9301      	str	r3, [sp, #4]
 800cf36:	9b01      	ldr	r3, [sp, #4]
 800cf38:	b963      	cbnz	r3, 800cf54 <_dtoa_r+0x954>
 800cf3a:	4631      	mov	r1, r6
 800cf3c:	2205      	movs	r2, #5
 800cf3e:	4620      	mov	r0, r4
 800cf40:	f000 fab2 	bl	800d4a8 <__multadd>
 800cf44:	4601      	mov	r1, r0
 800cf46:	4606      	mov	r6, r0
 800cf48:	4650      	mov	r0, sl
 800cf4a:	f000 fcc7 	bl	800d8dc <__mcmp>
 800cf4e:	2800      	cmp	r0, #0
 800cf50:	f73f adbb 	bgt.w	800caca <_dtoa_r+0x4ca>
 800cf54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf56:	9d00      	ldr	r5, [sp, #0]
 800cf58:	ea6f 0b03 	mvn.w	fp, r3
 800cf5c:	f04f 0800 	mov.w	r8, #0
 800cf60:	4631      	mov	r1, r6
 800cf62:	4620      	mov	r0, r4
 800cf64:	f000 fa7e 	bl	800d464 <_Bfree>
 800cf68:	2f00      	cmp	r7, #0
 800cf6a:	f43f aeab 	beq.w	800ccc4 <_dtoa_r+0x6c4>
 800cf6e:	f1b8 0f00 	cmp.w	r8, #0
 800cf72:	d005      	beq.n	800cf80 <_dtoa_r+0x980>
 800cf74:	45b8      	cmp	r8, r7
 800cf76:	d003      	beq.n	800cf80 <_dtoa_r+0x980>
 800cf78:	4641      	mov	r1, r8
 800cf7a:	4620      	mov	r0, r4
 800cf7c:	f000 fa72 	bl	800d464 <_Bfree>
 800cf80:	4639      	mov	r1, r7
 800cf82:	4620      	mov	r0, r4
 800cf84:	f000 fa6e 	bl	800d464 <_Bfree>
 800cf88:	e69c      	b.n	800ccc4 <_dtoa_r+0x6c4>
 800cf8a:	2600      	movs	r6, #0
 800cf8c:	4637      	mov	r7, r6
 800cf8e:	e7e1      	b.n	800cf54 <_dtoa_r+0x954>
 800cf90:	46bb      	mov	fp, r7
 800cf92:	4637      	mov	r7, r6
 800cf94:	e599      	b.n	800caca <_dtoa_r+0x4ca>
 800cf96:	bf00      	nop
 800cf98:	40240000 	.word	0x40240000
 800cf9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	f000 80c8 	beq.w	800d134 <_dtoa_r+0xb34>
 800cfa4:	9b04      	ldr	r3, [sp, #16]
 800cfa6:	9301      	str	r3, [sp, #4]
 800cfa8:	2d00      	cmp	r5, #0
 800cfaa:	dd05      	ble.n	800cfb8 <_dtoa_r+0x9b8>
 800cfac:	4639      	mov	r1, r7
 800cfae:	462a      	mov	r2, r5
 800cfb0:	4620      	mov	r0, r4
 800cfb2:	f000 fc27 	bl	800d804 <__lshift>
 800cfb6:	4607      	mov	r7, r0
 800cfb8:	f1b8 0f00 	cmp.w	r8, #0
 800cfbc:	d05b      	beq.n	800d076 <_dtoa_r+0xa76>
 800cfbe:	6879      	ldr	r1, [r7, #4]
 800cfc0:	4620      	mov	r0, r4
 800cfc2:	f000 fa0f 	bl	800d3e4 <_Balloc>
 800cfc6:	4605      	mov	r5, r0
 800cfc8:	b928      	cbnz	r0, 800cfd6 <_dtoa_r+0x9d6>
 800cfca:	4b83      	ldr	r3, [pc, #524]	; (800d1d8 <_dtoa_r+0xbd8>)
 800cfcc:	4602      	mov	r2, r0
 800cfce:	f240 21ef 	movw	r1, #751	; 0x2ef
 800cfd2:	f7ff bb2e 	b.w	800c632 <_dtoa_r+0x32>
 800cfd6:	693a      	ldr	r2, [r7, #16]
 800cfd8:	3202      	adds	r2, #2
 800cfda:	0092      	lsls	r2, r2, #2
 800cfdc:	f107 010c 	add.w	r1, r7, #12
 800cfe0:	300c      	adds	r0, #12
 800cfe2:	f7ff fa74 	bl	800c4ce <memcpy>
 800cfe6:	2201      	movs	r2, #1
 800cfe8:	4629      	mov	r1, r5
 800cfea:	4620      	mov	r0, r4
 800cfec:	f000 fc0a 	bl	800d804 <__lshift>
 800cff0:	9b00      	ldr	r3, [sp, #0]
 800cff2:	3301      	adds	r3, #1
 800cff4:	9304      	str	r3, [sp, #16]
 800cff6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cffa:	4413      	add	r3, r2
 800cffc:	9308      	str	r3, [sp, #32]
 800cffe:	9b02      	ldr	r3, [sp, #8]
 800d000:	f003 0301 	and.w	r3, r3, #1
 800d004:	46b8      	mov	r8, r7
 800d006:	9306      	str	r3, [sp, #24]
 800d008:	4607      	mov	r7, r0
 800d00a:	9b04      	ldr	r3, [sp, #16]
 800d00c:	4631      	mov	r1, r6
 800d00e:	3b01      	subs	r3, #1
 800d010:	4650      	mov	r0, sl
 800d012:	9301      	str	r3, [sp, #4]
 800d014:	f7ff fa69 	bl	800c4ea <quorem>
 800d018:	4641      	mov	r1, r8
 800d01a:	9002      	str	r0, [sp, #8]
 800d01c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d020:	4650      	mov	r0, sl
 800d022:	f000 fc5b 	bl	800d8dc <__mcmp>
 800d026:	463a      	mov	r2, r7
 800d028:	9005      	str	r0, [sp, #20]
 800d02a:	4631      	mov	r1, r6
 800d02c:	4620      	mov	r0, r4
 800d02e:	f000 fc71 	bl	800d914 <__mdiff>
 800d032:	68c2      	ldr	r2, [r0, #12]
 800d034:	4605      	mov	r5, r0
 800d036:	bb02      	cbnz	r2, 800d07a <_dtoa_r+0xa7a>
 800d038:	4601      	mov	r1, r0
 800d03a:	4650      	mov	r0, sl
 800d03c:	f000 fc4e 	bl	800d8dc <__mcmp>
 800d040:	4602      	mov	r2, r0
 800d042:	4629      	mov	r1, r5
 800d044:	4620      	mov	r0, r4
 800d046:	9209      	str	r2, [sp, #36]	; 0x24
 800d048:	f000 fa0c 	bl	800d464 <_Bfree>
 800d04c:	9b07      	ldr	r3, [sp, #28]
 800d04e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d050:	9d04      	ldr	r5, [sp, #16]
 800d052:	ea43 0102 	orr.w	r1, r3, r2
 800d056:	9b06      	ldr	r3, [sp, #24]
 800d058:	4319      	orrs	r1, r3
 800d05a:	d110      	bne.n	800d07e <_dtoa_r+0xa7e>
 800d05c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d060:	d029      	beq.n	800d0b6 <_dtoa_r+0xab6>
 800d062:	9b05      	ldr	r3, [sp, #20]
 800d064:	2b00      	cmp	r3, #0
 800d066:	dd02      	ble.n	800d06e <_dtoa_r+0xa6e>
 800d068:	9b02      	ldr	r3, [sp, #8]
 800d06a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800d06e:	9b01      	ldr	r3, [sp, #4]
 800d070:	f883 9000 	strb.w	r9, [r3]
 800d074:	e774      	b.n	800cf60 <_dtoa_r+0x960>
 800d076:	4638      	mov	r0, r7
 800d078:	e7ba      	b.n	800cff0 <_dtoa_r+0x9f0>
 800d07a:	2201      	movs	r2, #1
 800d07c:	e7e1      	b.n	800d042 <_dtoa_r+0xa42>
 800d07e:	9b05      	ldr	r3, [sp, #20]
 800d080:	2b00      	cmp	r3, #0
 800d082:	db04      	blt.n	800d08e <_dtoa_r+0xa8e>
 800d084:	9907      	ldr	r1, [sp, #28]
 800d086:	430b      	orrs	r3, r1
 800d088:	9906      	ldr	r1, [sp, #24]
 800d08a:	430b      	orrs	r3, r1
 800d08c:	d120      	bne.n	800d0d0 <_dtoa_r+0xad0>
 800d08e:	2a00      	cmp	r2, #0
 800d090:	dded      	ble.n	800d06e <_dtoa_r+0xa6e>
 800d092:	4651      	mov	r1, sl
 800d094:	2201      	movs	r2, #1
 800d096:	4620      	mov	r0, r4
 800d098:	f000 fbb4 	bl	800d804 <__lshift>
 800d09c:	4631      	mov	r1, r6
 800d09e:	4682      	mov	sl, r0
 800d0a0:	f000 fc1c 	bl	800d8dc <__mcmp>
 800d0a4:	2800      	cmp	r0, #0
 800d0a6:	dc03      	bgt.n	800d0b0 <_dtoa_r+0xab0>
 800d0a8:	d1e1      	bne.n	800d06e <_dtoa_r+0xa6e>
 800d0aa:	f019 0f01 	tst.w	r9, #1
 800d0ae:	d0de      	beq.n	800d06e <_dtoa_r+0xa6e>
 800d0b0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d0b4:	d1d8      	bne.n	800d068 <_dtoa_r+0xa68>
 800d0b6:	9a01      	ldr	r2, [sp, #4]
 800d0b8:	2339      	movs	r3, #57	; 0x39
 800d0ba:	7013      	strb	r3, [r2, #0]
 800d0bc:	462b      	mov	r3, r5
 800d0be:	461d      	mov	r5, r3
 800d0c0:	3b01      	subs	r3, #1
 800d0c2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d0c6:	2a39      	cmp	r2, #57	; 0x39
 800d0c8:	d06c      	beq.n	800d1a4 <_dtoa_r+0xba4>
 800d0ca:	3201      	adds	r2, #1
 800d0cc:	701a      	strb	r2, [r3, #0]
 800d0ce:	e747      	b.n	800cf60 <_dtoa_r+0x960>
 800d0d0:	2a00      	cmp	r2, #0
 800d0d2:	dd07      	ble.n	800d0e4 <_dtoa_r+0xae4>
 800d0d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d0d8:	d0ed      	beq.n	800d0b6 <_dtoa_r+0xab6>
 800d0da:	9a01      	ldr	r2, [sp, #4]
 800d0dc:	f109 0301 	add.w	r3, r9, #1
 800d0e0:	7013      	strb	r3, [r2, #0]
 800d0e2:	e73d      	b.n	800cf60 <_dtoa_r+0x960>
 800d0e4:	9b04      	ldr	r3, [sp, #16]
 800d0e6:	9a08      	ldr	r2, [sp, #32]
 800d0e8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800d0ec:	4293      	cmp	r3, r2
 800d0ee:	d043      	beq.n	800d178 <_dtoa_r+0xb78>
 800d0f0:	4651      	mov	r1, sl
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	220a      	movs	r2, #10
 800d0f6:	4620      	mov	r0, r4
 800d0f8:	f000 f9d6 	bl	800d4a8 <__multadd>
 800d0fc:	45b8      	cmp	r8, r7
 800d0fe:	4682      	mov	sl, r0
 800d100:	f04f 0300 	mov.w	r3, #0
 800d104:	f04f 020a 	mov.w	r2, #10
 800d108:	4641      	mov	r1, r8
 800d10a:	4620      	mov	r0, r4
 800d10c:	d107      	bne.n	800d11e <_dtoa_r+0xb1e>
 800d10e:	f000 f9cb 	bl	800d4a8 <__multadd>
 800d112:	4680      	mov	r8, r0
 800d114:	4607      	mov	r7, r0
 800d116:	9b04      	ldr	r3, [sp, #16]
 800d118:	3301      	adds	r3, #1
 800d11a:	9304      	str	r3, [sp, #16]
 800d11c:	e775      	b.n	800d00a <_dtoa_r+0xa0a>
 800d11e:	f000 f9c3 	bl	800d4a8 <__multadd>
 800d122:	4639      	mov	r1, r7
 800d124:	4680      	mov	r8, r0
 800d126:	2300      	movs	r3, #0
 800d128:	220a      	movs	r2, #10
 800d12a:	4620      	mov	r0, r4
 800d12c:	f000 f9bc 	bl	800d4a8 <__multadd>
 800d130:	4607      	mov	r7, r0
 800d132:	e7f0      	b.n	800d116 <_dtoa_r+0xb16>
 800d134:	9b04      	ldr	r3, [sp, #16]
 800d136:	9301      	str	r3, [sp, #4]
 800d138:	9d00      	ldr	r5, [sp, #0]
 800d13a:	4631      	mov	r1, r6
 800d13c:	4650      	mov	r0, sl
 800d13e:	f7ff f9d4 	bl	800c4ea <quorem>
 800d142:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d146:	9b00      	ldr	r3, [sp, #0]
 800d148:	f805 9b01 	strb.w	r9, [r5], #1
 800d14c:	1aea      	subs	r2, r5, r3
 800d14e:	9b01      	ldr	r3, [sp, #4]
 800d150:	4293      	cmp	r3, r2
 800d152:	dd07      	ble.n	800d164 <_dtoa_r+0xb64>
 800d154:	4651      	mov	r1, sl
 800d156:	2300      	movs	r3, #0
 800d158:	220a      	movs	r2, #10
 800d15a:	4620      	mov	r0, r4
 800d15c:	f000 f9a4 	bl	800d4a8 <__multadd>
 800d160:	4682      	mov	sl, r0
 800d162:	e7ea      	b.n	800d13a <_dtoa_r+0xb3a>
 800d164:	9b01      	ldr	r3, [sp, #4]
 800d166:	2b00      	cmp	r3, #0
 800d168:	bfc8      	it	gt
 800d16a:	461d      	movgt	r5, r3
 800d16c:	9b00      	ldr	r3, [sp, #0]
 800d16e:	bfd8      	it	le
 800d170:	2501      	movle	r5, #1
 800d172:	441d      	add	r5, r3
 800d174:	f04f 0800 	mov.w	r8, #0
 800d178:	4651      	mov	r1, sl
 800d17a:	2201      	movs	r2, #1
 800d17c:	4620      	mov	r0, r4
 800d17e:	f000 fb41 	bl	800d804 <__lshift>
 800d182:	4631      	mov	r1, r6
 800d184:	4682      	mov	sl, r0
 800d186:	f000 fba9 	bl	800d8dc <__mcmp>
 800d18a:	2800      	cmp	r0, #0
 800d18c:	dc96      	bgt.n	800d0bc <_dtoa_r+0xabc>
 800d18e:	d102      	bne.n	800d196 <_dtoa_r+0xb96>
 800d190:	f019 0f01 	tst.w	r9, #1
 800d194:	d192      	bne.n	800d0bc <_dtoa_r+0xabc>
 800d196:	462b      	mov	r3, r5
 800d198:	461d      	mov	r5, r3
 800d19a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d19e:	2a30      	cmp	r2, #48	; 0x30
 800d1a0:	d0fa      	beq.n	800d198 <_dtoa_r+0xb98>
 800d1a2:	e6dd      	b.n	800cf60 <_dtoa_r+0x960>
 800d1a4:	9a00      	ldr	r2, [sp, #0]
 800d1a6:	429a      	cmp	r2, r3
 800d1a8:	d189      	bne.n	800d0be <_dtoa_r+0xabe>
 800d1aa:	f10b 0b01 	add.w	fp, fp, #1
 800d1ae:	2331      	movs	r3, #49	; 0x31
 800d1b0:	e796      	b.n	800d0e0 <_dtoa_r+0xae0>
 800d1b2:	4b0a      	ldr	r3, [pc, #40]	; (800d1dc <_dtoa_r+0xbdc>)
 800d1b4:	f7ff ba99 	b.w	800c6ea <_dtoa_r+0xea>
 800d1b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	f47f aa6d 	bne.w	800c69a <_dtoa_r+0x9a>
 800d1c0:	4b07      	ldr	r3, [pc, #28]	; (800d1e0 <_dtoa_r+0xbe0>)
 800d1c2:	f7ff ba92 	b.w	800c6ea <_dtoa_r+0xea>
 800d1c6:	9b01      	ldr	r3, [sp, #4]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	dcb5      	bgt.n	800d138 <_dtoa_r+0xb38>
 800d1cc:	9b07      	ldr	r3, [sp, #28]
 800d1ce:	2b02      	cmp	r3, #2
 800d1d0:	f73f aeb1 	bgt.w	800cf36 <_dtoa_r+0x936>
 800d1d4:	e7b0      	b.n	800d138 <_dtoa_r+0xb38>
 800d1d6:	bf00      	nop
 800d1d8:	0800ef78 	.word	0x0800ef78
 800d1dc:	0800eed8 	.word	0x0800eed8
 800d1e0:	0800eefc 	.word	0x0800eefc

0800d1e4 <_free_r>:
 800d1e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d1e6:	2900      	cmp	r1, #0
 800d1e8:	d044      	beq.n	800d274 <_free_r+0x90>
 800d1ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1ee:	9001      	str	r0, [sp, #4]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	f1a1 0404 	sub.w	r4, r1, #4
 800d1f6:	bfb8      	it	lt
 800d1f8:	18e4      	addlt	r4, r4, r3
 800d1fa:	f000 f8e7 	bl	800d3cc <__malloc_lock>
 800d1fe:	4a1e      	ldr	r2, [pc, #120]	; (800d278 <_free_r+0x94>)
 800d200:	9801      	ldr	r0, [sp, #4]
 800d202:	6813      	ldr	r3, [r2, #0]
 800d204:	b933      	cbnz	r3, 800d214 <_free_r+0x30>
 800d206:	6063      	str	r3, [r4, #4]
 800d208:	6014      	str	r4, [r2, #0]
 800d20a:	b003      	add	sp, #12
 800d20c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d210:	f000 b8e2 	b.w	800d3d8 <__malloc_unlock>
 800d214:	42a3      	cmp	r3, r4
 800d216:	d908      	bls.n	800d22a <_free_r+0x46>
 800d218:	6825      	ldr	r5, [r4, #0]
 800d21a:	1961      	adds	r1, r4, r5
 800d21c:	428b      	cmp	r3, r1
 800d21e:	bf01      	itttt	eq
 800d220:	6819      	ldreq	r1, [r3, #0]
 800d222:	685b      	ldreq	r3, [r3, #4]
 800d224:	1949      	addeq	r1, r1, r5
 800d226:	6021      	streq	r1, [r4, #0]
 800d228:	e7ed      	b.n	800d206 <_free_r+0x22>
 800d22a:	461a      	mov	r2, r3
 800d22c:	685b      	ldr	r3, [r3, #4]
 800d22e:	b10b      	cbz	r3, 800d234 <_free_r+0x50>
 800d230:	42a3      	cmp	r3, r4
 800d232:	d9fa      	bls.n	800d22a <_free_r+0x46>
 800d234:	6811      	ldr	r1, [r2, #0]
 800d236:	1855      	adds	r5, r2, r1
 800d238:	42a5      	cmp	r5, r4
 800d23a:	d10b      	bne.n	800d254 <_free_r+0x70>
 800d23c:	6824      	ldr	r4, [r4, #0]
 800d23e:	4421      	add	r1, r4
 800d240:	1854      	adds	r4, r2, r1
 800d242:	42a3      	cmp	r3, r4
 800d244:	6011      	str	r1, [r2, #0]
 800d246:	d1e0      	bne.n	800d20a <_free_r+0x26>
 800d248:	681c      	ldr	r4, [r3, #0]
 800d24a:	685b      	ldr	r3, [r3, #4]
 800d24c:	6053      	str	r3, [r2, #4]
 800d24e:	440c      	add	r4, r1
 800d250:	6014      	str	r4, [r2, #0]
 800d252:	e7da      	b.n	800d20a <_free_r+0x26>
 800d254:	d902      	bls.n	800d25c <_free_r+0x78>
 800d256:	230c      	movs	r3, #12
 800d258:	6003      	str	r3, [r0, #0]
 800d25a:	e7d6      	b.n	800d20a <_free_r+0x26>
 800d25c:	6825      	ldr	r5, [r4, #0]
 800d25e:	1961      	adds	r1, r4, r5
 800d260:	428b      	cmp	r3, r1
 800d262:	bf04      	itt	eq
 800d264:	6819      	ldreq	r1, [r3, #0]
 800d266:	685b      	ldreq	r3, [r3, #4]
 800d268:	6063      	str	r3, [r4, #4]
 800d26a:	bf04      	itt	eq
 800d26c:	1949      	addeq	r1, r1, r5
 800d26e:	6021      	streq	r1, [r4, #0]
 800d270:	6054      	str	r4, [r2, #4]
 800d272:	e7ca      	b.n	800d20a <_free_r+0x26>
 800d274:	b003      	add	sp, #12
 800d276:	bd30      	pop	{r4, r5, pc}
 800d278:	200018e4 	.word	0x200018e4

0800d27c <malloc>:
 800d27c:	4b02      	ldr	r3, [pc, #8]	; (800d288 <malloc+0xc>)
 800d27e:	4601      	mov	r1, r0
 800d280:	6818      	ldr	r0, [r3, #0]
 800d282:	f000 b823 	b.w	800d2cc <_malloc_r>
 800d286:	bf00      	nop
 800d288:	200000b0 	.word	0x200000b0

0800d28c <sbrk_aligned>:
 800d28c:	b570      	push	{r4, r5, r6, lr}
 800d28e:	4e0e      	ldr	r6, [pc, #56]	; (800d2c8 <sbrk_aligned+0x3c>)
 800d290:	460c      	mov	r4, r1
 800d292:	6831      	ldr	r1, [r6, #0]
 800d294:	4605      	mov	r5, r0
 800d296:	b911      	cbnz	r1, 800d29e <sbrk_aligned+0x12>
 800d298:	f001 f808 	bl	800e2ac <_sbrk_r>
 800d29c:	6030      	str	r0, [r6, #0]
 800d29e:	4621      	mov	r1, r4
 800d2a0:	4628      	mov	r0, r5
 800d2a2:	f001 f803 	bl	800e2ac <_sbrk_r>
 800d2a6:	1c43      	adds	r3, r0, #1
 800d2a8:	d00a      	beq.n	800d2c0 <sbrk_aligned+0x34>
 800d2aa:	1cc4      	adds	r4, r0, #3
 800d2ac:	f024 0403 	bic.w	r4, r4, #3
 800d2b0:	42a0      	cmp	r0, r4
 800d2b2:	d007      	beq.n	800d2c4 <sbrk_aligned+0x38>
 800d2b4:	1a21      	subs	r1, r4, r0
 800d2b6:	4628      	mov	r0, r5
 800d2b8:	f000 fff8 	bl	800e2ac <_sbrk_r>
 800d2bc:	3001      	adds	r0, #1
 800d2be:	d101      	bne.n	800d2c4 <sbrk_aligned+0x38>
 800d2c0:	f04f 34ff 	mov.w	r4, #4294967295
 800d2c4:	4620      	mov	r0, r4
 800d2c6:	bd70      	pop	{r4, r5, r6, pc}
 800d2c8:	200018e8 	.word	0x200018e8

0800d2cc <_malloc_r>:
 800d2cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2d0:	1ccd      	adds	r5, r1, #3
 800d2d2:	f025 0503 	bic.w	r5, r5, #3
 800d2d6:	3508      	adds	r5, #8
 800d2d8:	2d0c      	cmp	r5, #12
 800d2da:	bf38      	it	cc
 800d2dc:	250c      	movcc	r5, #12
 800d2de:	2d00      	cmp	r5, #0
 800d2e0:	4607      	mov	r7, r0
 800d2e2:	db01      	blt.n	800d2e8 <_malloc_r+0x1c>
 800d2e4:	42a9      	cmp	r1, r5
 800d2e6:	d905      	bls.n	800d2f4 <_malloc_r+0x28>
 800d2e8:	230c      	movs	r3, #12
 800d2ea:	603b      	str	r3, [r7, #0]
 800d2ec:	2600      	movs	r6, #0
 800d2ee:	4630      	mov	r0, r6
 800d2f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d3c8 <_malloc_r+0xfc>
 800d2f8:	f000 f868 	bl	800d3cc <__malloc_lock>
 800d2fc:	f8d8 3000 	ldr.w	r3, [r8]
 800d300:	461c      	mov	r4, r3
 800d302:	bb5c      	cbnz	r4, 800d35c <_malloc_r+0x90>
 800d304:	4629      	mov	r1, r5
 800d306:	4638      	mov	r0, r7
 800d308:	f7ff ffc0 	bl	800d28c <sbrk_aligned>
 800d30c:	1c43      	adds	r3, r0, #1
 800d30e:	4604      	mov	r4, r0
 800d310:	d155      	bne.n	800d3be <_malloc_r+0xf2>
 800d312:	f8d8 4000 	ldr.w	r4, [r8]
 800d316:	4626      	mov	r6, r4
 800d318:	2e00      	cmp	r6, #0
 800d31a:	d145      	bne.n	800d3a8 <_malloc_r+0xdc>
 800d31c:	2c00      	cmp	r4, #0
 800d31e:	d048      	beq.n	800d3b2 <_malloc_r+0xe6>
 800d320:	6823      	ldr	r3, [r4, #0]
 800d322:	4631      	mov	r1, r6
 800d324:	4638      	mov	r0, r7
 800d326:	eb04 0903 	add.w	r9, r4, r3
 800d32a:	f000 ffbf 	bl	800e2ac <_sbrk_r>
 800d32e:	4581      	cmp	r9, r0
 800d330:	d13f      	bne.n	800d3b2 <_malloc_r+0xe6>
 800d332:	6821      	ldr	r1, [r4, #0]
 800d334:	1a6d      	subs	r5, r5, r1
 800d336:	4629      	mov	r1, r5
 800d338:	4638      	mov	r0, r7
 800d33a:	f7ff ffa7 	bl	800d28c <sbrk_aligned>
 800d33e:	3001      	adds	r0, #1
 800d340:	d037      	beq.n	800d3b2 <_malloc_r+0xe6>
 800d342:	6823      	ldr	r3, [r4, #0]
 800d344:	442b      	add	r3, r5
 800d346:	6023      	str	r3, [r4, #0]
 800d348:	f8d8 3000 	ldr.w	r3, [r8]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d038      	beq.n	800d3c2 <_malloc_r+0xf6>
 800d350:	685a      	ldr	r2, [r3, #4]
 800d352:	42a2      	cmp	r2, r4
 800d354:	d12b      	bne.n	800d3ae <_malloc_r+0xe2>
 800d356:	2200      	movs	r2, #0
 800d358:	605a      	str	r2, [r3, #4]
 800d35a:	e00f      	b.n	800d37c <_malloc_r+0xb0>
 800d35c:	6822      	ldr	r2, [r4, #0]
 800d35e:	1b52      	subs	r2, r2, r5
 800d360:	d41f      	bmi.n	800d3a2 <_malloc_r+0xd6>
 800d362:	2a0b      	cmp	r2, #11
 800d364:	d917      	bls.n	800d396 <_malloc_r+0xca>
 800d366:	1961      	adds	r1, r4, r5
 800d368:	42a3      	cmp	r3, r4
 800d36a:	6025      	str	r5, [r4, #0]
 800d36c:	bf18      	it	ne
 800d36e:	6059      	strne	r1, [r3, #4]
 800d370:	6863      	ldr	r3, [r4, #4]
 800d372:	bf08      	it	eq
 800d374:	f8c8 1000 	streq.w	r1, [r8]
 800d378:	5162      	str	r2, [r4, r5]
 800d37a:	604b      	str	r3, [r1, #4]
 800d37c:	4638      	mov	r0, r7
 800d37e:	f104 060b 	add.w	r6, r4, #11
 800d382:	f000 f829 	bl	800d3d8 <__malloc_unlock>
 800d386:	f026 0607 	bic.w	r6, r6, #7
 800d38a:	1d23      	adds	r3, r4, #4
 800d38c:	1af2      	subs	r2, r6, r3
 800d38e:	d0ae      	beq.n	800d2ee <_malloc_r+0x22>
 800d390:	1b9b      	subs	r3, r3, r6
 800d392:	50a3      	str	r3, [r4, r2]
 800d394:	e7ab      	b.n	800d2ee <_malloc_r+0x22>
 800d396:	42a3      	cmp	r3, r4
 800d398:	6862      	ldr	r2, [r4, #4]
 800d39a:	d1dd      	bne.n	800d358 <_malloc_r+0x8c>
 800d39c:	f8c8 2000 	str.w	r2, [r8]
 800d3a0:	e7ec      	b.n	800d37c <_malloc_r+0xb0>
 800d3a2:	4623      	mov	r3, r4
 800d3a4:	6864      	ldr	r4, [r4, #4]
 800d3a6:	e7ac      	b.n	800d302 <_malloc_r+0x36>
 800d3a8:	4634      	mov	r4, r6
 800d3aa:	6876      	ldr	r6, [r6, #4]
 800d3ac:	e7b4      	b.n	800d318 <_malloc_r+0x4c>
 800d3ae:	4613      	mov	r3, r2
 800d3b0:	e7cc      	b.n	800d34c <_malloc_r+0x80>
 800d3b2:	230c      	movs	r3, #12
 800d3b4:	603b      	str	r3, [r7, #0]
 800d3b6:	4638      	mov	r0, r7
 800d3b8:	f000 f80e 	bl	800d3d8 <__malloc_unlock>
 800d3bc:	e797      	b.n	800d2ee <_malloc_r+0x22>
 800d3be:	6025      	str	r5, [r4, #0]
 800d3c0:	e7dc      	b.n	800d37c <_malloc_r+0xb0>
 800d3c2:	605b      	str	r3, [r3, #4]
 800d3c4:	deff      	udf	#255	; 0xff
 800d3c6:	bf00      	nop
 800d3c8:	200018e4 	.word	0x200018e4

0800d3cc <__malloc_lock>:
 800d3cc:	4801      	ldr	r0, [pc, #4]	; (800d3d4 <__malloc_lock+0x8>)
 800d3ce:	f7ff b87c 	b.w	800c4ca <__retarget_lock_acquire_recursive>
 800d3d2:	bf00      	nop
 800d3d4:	200018e0 	.word	0x200018e0

0800d3d8 <__malloc_unlock>:
 800d3d8:	4801      	ldr	r0, [pc, #4]	; (800d3e0 <__malloc_unlock+0x8>)
 800d3da:	f7ff b877 	b.w	800c4cc <__retarget_lock_release_recursive>
 800d3de:	bf00      	nop
 800d3e0:	200018e0 	.word	0x200018e0

0800d3e4 <_Balloc>:
 800d3e4:	b570      	push	{r4, r5, r6, lr}
 800d3e6:	69c6      	ldr	r6, [r0, #28]
 800d3e8:	4604      	mov	r4, r0
 800d3ea:	460d      	mov	r5, r1
 800d3ec:	b976      	cbnz	r6, 800d40c <_Balloc+0x28>
 800d3ee:	2010      	movs	r0, #16
 800d3f0:	f7ff ff44 	bl	800d27c <malloc>
 800d3f4:	4602      	mov	r2, r0
 800d3f6:	61e0      	str	r0, [r4, #28]
 800d3f8:	b920      	cbnz	r0, 800d404 <_Balloc+0x20>
 800d3fa:	4b18      	ldr	r3, [pc, #96]	; (800d45c <_Balloc+0x78>)
 800d3fc:	4818      	ldr	r0, [pc, #96]	; (800d460 <_Balloc+0x7c>)
 800d3fe:	216b      	movs	r1, #107	; 0x6b
 800d400:	f000 ff64 	bl	800e2cc <__assert_func>
 800d404:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d408:	6006      	str	r6, [r0, #0]
 800d40a:	60c6      	str	r6, [r0, #12]
 800d40c:	69e6      	ldr	r6, [r4, #28]
 800d40e:	68f3      	ldr	r3, [r6, #12]
 800d410:	b183      	cbz	r3, 800d434 <_Balloc+0x50>
 800d412:	69e3      	ldr	r3, [r4, #28]
 800d414:	68db      	ldr	r3, [r3, #12]
 800d416:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d41a:	b9b8      	cbnz	r0, 800d44c <_Balloc+0x68>
 800d41c:	2101      	movs	r1, #1
 800d41e:	fa01 f605 	lsl.w	r6, r1, r5
 800d422:	1d72      	adds	r2, r6, #5
 800d424:	0092      	lsls	r2, r2, #2
 800d426:	4620      	mov	r0, r4
 800d428:	f000 ff6e 	bl	800e308 <_calloc_r>
 800d42c:	b160      	cbz	r0, 800d448 <_Balloc+0x64>
 800d42e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d432:	e00e      	b.n	800d452 <_Balloc+0x6e>
 800d434:	2221      	movs	r2, #33	; 0x21
 800d436:	2104      	movs	r1, #4
 800d438:	4620      	mov	r0, r4
 800d43a:	f000 ff65 	bl	800e308 <_calloc_r>
 800d43e:	69e3      	ldr	r3, [r4, #28]
 800d440:	60f0      	str	r0, [r6, #12]
 800d442:	68db      	ldr	r3, [r3, #12]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d1e4      	bne.n	800d412 <_Balloc+0x2e>
 800d448:	2000      	movs	r0, #0
 800d44a:	bd70      	pop	{r4, r5, r6, pc}
 800d44c:	6802      	ldr	r2, [r0, #0]
 800d44e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d452:	2300      	movs	r3, #0
 800d454:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d458:	e7f7      	b.n	800d44a <_Balloc+0x66>
 800d45a:	bf00      	nop
 800d45c:	0800ef09 	.word	0x0800ef09
 800d460:	0800ef89 	.word	0x0800ef89

0800d464 <_Bfree>:
 800d464:	b570      	push	{r4, r5, r6, lr}
 800d466:	69c6      	ldr	r6, [r0, #28]
 800d468:	4605      	mov	r5, r0
 800d46a:	460c      	mov	r4, r1
 800d46c:	b976      	cbnz	r6, 800d48c <_Bfree+0x28>
 800d46e:	2010      	movs	r0, #16
 800d470:	f7ff ff04 	bl	800d27c <malloc>
 800d474:	4602      	mov	r2, r0
 800d476:	61e8      	str	r0, [r5, #28]
 800d478:	b920      	cbnz	r0, 800d484 <_Bfree+0x20>
 800d47a:	4b09      	ldr	r3, [pc, #36]	; (800d4a0 <_Bfree+0x3c>)
 800d47c:	4809      	ldr	r0, [pc, #36]	; (800d4a4 <_Bfree+0x40>)
 800d47e:	218f      	movs	r1, #143	; 0x8f
 800d480:	f000 ff24 	bl	800e2cc <__assert_func>
 800d484:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d488:	6006      	str	r6, [r0, #0]
 800d48a:	60c6      	str	r6, [r0, #12]
 800d48c:	b13c      	cbz	r4, 800d49e <_Bfree+0x3a>
 800d48e:	69eb      	ldr	r3, [r5, #28]
 800d490:	6862      	ldr	r2, [r4, #4]
 800d492:	68db      	ldr	r3, [r3, #12]
 800d494:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d498:	6021      	str	r1, [r4, #0]
 800d49a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d49e:	bd70      	pop	{r4, r5, r6, pc}
 800d4a0:	0800ef09 	.word	0x0800ef09
 800d4a4:	0800ef89 	.word	0x0800ef89

0800d4a8 <__multadd>:
 800d4a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4ac:	690d      	ldr	r5, [r1, #16]
 800d4ae:	4607      	mov	r7, r0
 800d4b0:	460c      	mov	r4, r1
 800d4b2:	461e      	mov	r6, r3
 800d4b4:	f101 0c14 	add.w	ip, r1, #20
 800d4b8:	2000      	movs	r0, #0
 800d4ba:	f8dc 3000 	ldr.w	r3, [ip]
 800d4be:	b299      	uxth	r1, r3
 800d4c0:	fb02 6101 	mla	r1, r2, r1, r6
 800d4c4:	0c1e      	lsrs	r6, r3, #16
 800d4c6:	0c0b      	lsrs	r3, r1, #16
 800d4c8:	fb02 3306 	mla	r3, r2, r6, r3
 800d4cc:	b289      	uxth	r1, r1
 800d4ce:	3001      	adds	r0, #1
 800d4d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d4d4:	4285      	cmp	r5, r0
 800d4d6:	f84c 1b04 	str.w	r1, [ip], #4
 800d4da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d4de:	dcec      	bgt.n	800d4ba <__multadd+0x12>
 800d4e0:	b30e      	cbz	r6, 800d526 <__multadd+0x7e>
 800d4e2:	68a3      	ldr	r3, [r4, #8]
 800d4e4:	42ab      	cmp	r3, r5
 800d4e6:	dc19      	bgt.n	800d51c <__multadd+0x74>
 800d4e8:	6861      	ldr	r1, [r4, #4]
 800d4ea:	4638      	mov	r0, r7
 800d4ec:	3101      	adds	r1, #1
 800d4ee:	f7ff ff79 	bl	800d3e4 <_Balloc>
 800d4f2:	4680      	mov	r8, r0
 800d4f4:	b928      	cbnz	r0, 800d502 <__multadd+0x5a>
 800d4f6:	4602      	mov	r2, r0
 800d4f8:	4b0c      	ldr	r3, [pc, #48]	; (800d52c <__multadd+0x84>)
 800d4fa:	480d      	ldr	r0, [pc, #52]	; (800d530 <__multadd+0x88>)
 800d4fc:	21ba      	movs	r1, #186	; 0xba
 800d4fe:	f000 fee5 	bl	800e2cc <__assert_func>
 800d502:	6922      	ldr	r2, [r4, #16]
 800d504:	3202      	adds	r2, #2
 800d506:	f104 010c 	add.w	r1, r4, #12
 800d50a:	0092      	lsls	r2, r2, #2
 800d50c:	300c      	adds	r0, #12
 800d50e:	f7fe ffde 	bl	800c4ce <memcpy>
 800d512:	4621      	mov	r1, r4
 800d514:	4638      	mov	r0, r7
 800d516:	f7ff ffa5 	bl	800d464 <_Bfree>
 800d51a:	4644      	mov	r4, r8
 800d51c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d520:	3501      	adds	r5, #1
 800d522:	615e      	str	r6, [r3, #20]
 800d524:	6125      	str	r5, [r4, #16]
 800d526:	4620      	mov	r0, r4
 800d528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d52c:	0800ef78 	.word	0x0800ef78
 800d530:	0800ef89 	.word	0x0800ef89

0800d534 <__hi0bits>:
 800d534:	0c03      	lsrs	r3, r0, #16
 800d536:	041b      	lsls	r3, r3, #16
 800d538:	b9d3      	cbnz	r3, 800d570 <__hi0bits+0x3c>
 800d53a:	0400      	lsls	r0, r0, #16
 800d53c:	2310      	movs	r3, #16
 800d53e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d542:	bf04      	itt	eq
 800d544:	0200      	lsleq	r0, r0, #8
 800d546:	3308      	addeq	r3, #8
 800d548:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d54c:	bf04      	itt	eq
 800d54e:	0100      	lsleq	r0, r0, #4
 800d550:	3304      	addeq	r3, #4
 800d552:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d556:	bf04      	itt	eq
 800d558:	0080      	lsleq	r0, r0, #2
 800d55a:	3302      	addeq	r3, #2
 800d55c:	2800      	cmp	r0, #0
 800d55e:	db05      	blt.n	800d56c <__hi0bits+0x38>
 800d560:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d564:	f103 0301 	add.w	r3, r3, #1
 800d568:	bf08      	it	eq
 800d56a:	2320      	moveq	r3, #32
 800d56c:	4618      	mov	r0, r3
 800d56e:	4770      	bx	lr
 800d570:	2300      	movs	r3, #0
 800d572:	e7e4      	b.n	800d53e <__hi0bits+0xa>

0800d574 <__lo0bits>:
 800d574:	6803      	ldr	r3, [r0, #0]
 800d576:	f013 0207 	ands.w	r2, r3, #7
 800d57a:	d00c      	beq.n	800d596 <__lo0bits+0x22>
 800d57c:	07d9      	lsls	r1, r3, #31
 800d57e:	d422      	bmi.n	800d5c6 <__lo0bits+0x52>
 800d580:	079a      	lsls	r2, r3, #30
 800d582:	bf49      	itett	mi
 800d584:	085b      	lsrmi	r3, r3, #1
 800d586:	089b      	lsrpl	r3, r3, #2
 800d588:	6003      	strmi	r3, [r0, #0]
 800d58a:	2201      	movmi	r2, #1
 800d58c:	bf5c      	itt	pl
 800d58e:	6003      	strpl	r3, [r0, #0]
 800d590:	2202      	movpl	r2, #2
 800d592:	4610      	mov	r0, r2
 800d594:	4770      	bx	lr
 800d596:	b299      	uxth	r1, r3
 800d598:	b909      	cbnz	r1, 800d59e <__lo0bits+0x2a>
 800d59a:	0c1b      	lsrs	r3, r3, #16
 800d59c:	2210      	movs	r2, #16
 800d59e:	b2d9      	uxtb	r1, r3
 800d5a0:	b909      	cbnz	r1, 800d5a6 <__lo0bits+0x32>
 800d5a2:	3208      	adds	r2, #8
 800d5a4:	0a1b      	lsrs	r3, r3, #8
 800d5a6:	0719      	lsls	r1, r3, #28
 800d5a8:	bf04      	itt	eq
 800d5aa:	091b      	lsreq	r3, r3, #4
 800d5ac:	3204      	addeq	r2, #4
 800d5ae:	0799      	lsls	r1, r3, #30
 800d5b0:	bf04      	itt	eq
 800d5b2:	089b      	lsreq	r3, r3, #2
 800d5b4:	3202      	addeq	r2, #2
 800d5b6:	07d9      	lsls	r1, r3, #31
 800d5b8:	d403      	bmi.n	800d5c2 <__lo0bits+0x4e>
 800d5ba:	085b      	lsrs	r3, r3, #1
 800d5bc:	f102 0201 	add.w	r2, r2, #1
 800d5c0:	d003      	beq.n	800d5ca <__lo0bits+0x56>
 800d5c2:	6003      	str	r3, [r0, #0]
 800d5c4:	e7e5      	b.n	800d592 <__lo0bits+0x1e>
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	e7e3      	b.n	800d592 <__lo0bits+0x1e>
 800d5ca:	2220      	movs	r2, #32
 800d5cc:	e7e1      	b.n	800d592 <__lo0bits+0x1e>
	...

0800d5d0 <__i2b>:
 800d5d0:	b510      	push	{r4, lr}
 800d5d2:	460c      	mov	r4, r1
 800d5d4:	2101      	movs	r1, #1
 800d5d6:	f7ff ff05 	bl	800d3e4 <_Balloc>
 800d5da:	4602      	mov	r2, r0
 800d5dc:	b928      	cbnz	r0, 800d5ea <__i2b+0x1a>
 800d5de:	4b05      	ldr	r3, [pc, #20]	; (800d5f4 <__i2b+0x24>)
 800d5e0:	4805      	ldr	r0, [pc, #20]	; (800d5f8 <__i2b+0x28>)
 800d5e2:	f240 1145 	movw	r1, #325	; 0x145
 800d5e6:	f000 fe71 	bl	800e2cc <__assert_func>
 800d5ea:	2301      	movs	r3, #1
 800d5ec:	6144      	str	r4, [r0, #20]
 800d5ee:	6103      	str	r3, [r0, #16]
 800d5f0:	bd10      	pop	{r4, pc}
 800d5f2:	bf00      	nop
 800d5f4:	0800ef78 	.word	0x0800ef78
 800d5f8:	0800ef89 	.word	0x0800ef89

0800d5fc <__multiply>:
 800d5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d600:	4691      	mov	r9, r2
 800d602:	690a      	ldr	r2, [r1, #16]
 800d604:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d608:	429a      	cmp	r2, r3
 800d60a:	bfb8      	it	lt
 800d60c:	460b      	movlt	r3, r1
 800d60e:	460c      	mov	r4, r1
 800d610:	bfbc      	itt	lt
 800d612:	464c      	movlt	r4, r9
 800d614:	4699      	movlt	r9, r3
 800d616:	6927      	ldr	r7, [r4, #16]
 800d618:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d61c:	68a3      	ldr	r3, [r4, #8]
 800d61e:	6861      	ldr	r1, [r4, #4]
 800d620:	eb07 060a 	add.w	r6, r7, sl
 800d624:	42b3      	cmp	r3, r6
 800d626:	b085      	sub	sp, #20
 800d628:	bfb8      	it	lt
 800d62a:	3101      	addlt	r1, #1
 800d62c:	f7ff feda 	bl	800d3e4 <_Balloc>
 800d630:	b930      	cbnz	r0, 800d640 <__multiply+0x44>
 800d632:	4602      	mov	r2, r0
 800d634:	4b44      	ldr	r3, [pc, #272]	; (800d748 <__multiply+0x14c>)
 800d636:	4845      	ldr	r0, [pc, #276]	; (800d74c <__multiply+0x150>)
 800d638:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d63c:	f000 fe46 	bl	800e2cc <__assert_func>
 800d640:	f100 0514 	add.w	r5, r0, #20
 800d644:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d648:	462b      	mov	r3, r5
 800d64a:	2200      	movs	r2, #0
 800d64c:	4543      	cmp	r3, r8
 800d64e:	d321      	bcc.n	800d694 <__multiply+0x98>
 800d650:	f104 0314 	add.w	r3, r4, #20
 800d654:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d658:	f109 0314 	add.w	r3, r9, #20
 800d65c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d660:	9202      	str	r2, [sp, #8]
 800d662:	1b3a      	subs	r2, r7, r4
 800d664:	3a15      	subs	r2, #21
 800d666:	f022 0203 	bic.w	r2, r2, #3
 800d66a:	3204      	adds	r2, #4
 800d66c:	f104 0115 	add.w	r1, r4, #21
 800d670:	428f      	cmp	r7, r1
 800d672:	bf38      	it	cc
 800d674:	2204      	movcc	r2, #4
 800d676:	9201      	str	r2, [sp, #4]
 800d678:	9a02      	ldr	r2, [sp, #8]
 800d67a:	9303      	str	r3, [sp, #12]
 800d67c:	429a      	cmp	r2, r3
 800d67e:	d80c      	bhi.n	800d69a <__multiply+0x9e>
 800d680:	2e00      	cmp	r6, #0
 800d682:	dd03      	ble.n	800d68c <__multiply+0x90>
 800d684:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d05b      	beq.n	800d744 <__multiply+0x148>
 800d68c:	6106      	str	r6, [r0, #16]
 800d68e:	b005      	add	sp, #20
 800d690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d694:	f843 2b04 	str.w	r2, [r3], #4
 800d698:	e7d8      	b.n	800d64c <__multiply+0x50>
 800d69a:	f8b3 a000 	ldrh.w	sl, [r3]
 800d69e:	f1ba 0f00 	cmp.w	sl, #0
 800d6a2:	d024      	beq.n	800d6ee <__multiply+0xf2>
 800d6a4:	f104 0e14 	add.w	lr, r4, #20
 800d6a8:	46a9      	mov	r9, r5
 800d6aa:	f04f 0c00 	mov.w	ip, #0
 800d6ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d6b2:	f8d9 1000 	ldr.w	r1, [r9]
 800d6b6:	fa1f fb82 	uxth.w	fp, r2
 800d6ba:	b289      	uxth	r1, r1
 800d6bc:	fb0a 110b 	mla	r1, sl, fp, r1
 800d6c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d6c4:	f8d9 2000 	ldr.w	r2, [r9]
 800d6c8:	4461      	add	r1, ip
 800d6ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d6ce:	fb0a c20b 	mla	r2, sl, fp, ip
 800d6d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d6d6:	b289      	uxth	r1, r1
 800d6d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d6dc:	4577      	cmp	r7, lr
 800d6de:	f849 1b04 	str.w	r1, [r9], #4
 800d6e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d6e6:	d8e2      	bhi.n	800d6ae <__multiply+0xb2>
 800d6e8:	9a01      	ldr	r2, [sp, #4]
 800d6ea:	f845 c002 	str.w	ip, [r5, r2]
 800d6ee:	9a03      	ldr	r2, [sp, #12]
 800d6f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d6f4:	3304      	adds	r3, #4
 800d6f6:	f1b9 0f00 	cmp.w	r9, #0
 800d6fa:	d021      	beq.n	800d740 <__multiply+0x144>
 800d6fc:	6829      	ldr	r1, [r5, #0]
 800d6fe:	f104 0c14 	add.w	ip, r4, #20
 800d702:	46ae      	mov	lr, r5
 800d704:	f04f 0a00 	mov.w	sl, #0
 800d708:	f8bc b000 	ldrh.w	fp, [ip]
 800d70c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d710:	fb09 220b 	mla	r2, r9, fp, r2
 800d714:	4452      	add	r2, sl
 800d716:	b289      	uxth	r1, r1
 800d718:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d71c:	f84e 1b04 	str.w	r1, [lr], #4
 800d720:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d724:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d728:	f8be 1000 	ldrh.w	r1, [lr]
 800d72c:	fb09 110a 	mla	r1, r9, sl, r1
 800d730:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d734:	4567      	cmp	r7, ip
 800d736:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d73a:	d8e5      	bhi.n	800d708 <__multiply+0x10c>
 800d73c:	9a01      	ldr	r2, [sp, #4]
 800d73e:	50a9      	str	r1, [r5, r2]
 800d740:	3504      	adds	r5, #4
 800d742:	e799      	b.n	800d678 <__multiply+0x7c>
 800d744:	3e01      	subs	r6, #1
 800d746:	e79b      	b.n	800d680 <__multiply+0x84>
 800d748:	0800ef78 	.word	0x0800ef78
 800d74c:	0800ef89 	.word	0x0800ef89

0800d750 <__pow5mult>:
 800d750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d754:	4615      	mov	r5, r2
 800d756:	f012 0203 	ands.w	r2, r2, #3
 800d75a:	4606      	mov	r6, r0
 800d75c:	460f      	mov	r7, r1
 800d75e:	d007      	beq.n	800d770 <__pow5mult+0x20>
 800d760:	4c25      	ldr	r4, [pc, #148]	; (800d7f8 <__pow5mult+0xa8>)
 800d762:	3a01      	subs	r2, #1
 800d764:	2300      	movs	r3, #0
 800d766:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d76a:	f7ff fe9d 	bl	800d4a8 <__multadd>
 800d76e:	4607      	mov	r7, r0
 800d770:	10ad      	asrs	r5, r5, #2
 800d772:	d03d      	beq.n	800d7f0 <__pow5mult+0xa0>
 800d774:	69f4      	ldr	r4, [r6, #28]
 800d776:	b97c      	cbnz	r4, 800d798 <__pow5mult+0x48>
 800d778:	2010      	movs	r0, #16
 800d77a:	f7ff fd7f 	bl	800d27c <malloc>
 800d77e:	4602      	mov	r2, r0
 800d780:	61f0      	str	r0, [r6, #28]
 800d782:	b928      	cbnz	r0, 800d790 <__pow5mult+0x40>
 800d784:	4b1d      	ldr	r3, [pc, #116]	; (800d7fc <__pow5mult+0xac>)
 800d786:	481e      	ldr	r0, [pc, #120]	; (800d800 <__pow5mult+0xb0>)
 800d788:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d78c:	f000 fd9e 	bl	800e2cc <__assert_func>
 800d790:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d794:	6004      	str	r4, [r0, #0]
 800d796:	60c4      	str	r4, [r0, #12]
 800d798:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d79c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d7a0:	b94c      	cbnz	r4, 800d7b6 <__pow5mult+0x66>
 800d7a2:	f240 2171 	movw	r1, #625	; 0x271
 800d7a6:	4630      	mov	r0, r6
 800d7a8:	f7ff ff12 	bl	800d5d0 <__i2b>
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	f8c8 0008 	str.w	r0, [r8, #8]
 800d7b2:	4604      	mov	r4, r0
 800d7b4:	6003      	str	r3, [r0, #0]
 800d7b6:	f04f 0900 	mov.w	r9, #0
 800d7ba:	07eb      	lsls	r3, r5, #31
 800d7bc:	d50a      	bpl.n	800d7d4 <__pow5mult+0x84>
 800d7be:	4639      	mov	r1, r7
 800d7c0:	4622      	mov	r2, r4
 800d7c2:	4630      	mov	r0, r6
 800d7c4:	f7ff ff1a 	bl	800d5fc <__multiply>
 800d7c8:	4639      	mov	r1, r7
 800d7ca:	4680      	mov	r8, r0
 800d7cc:	4630      	mov	r0, r6
 800d7ce:	f7ff fe49 	bl	800d464 <_Bfree>
 800d7d2:	4647      	mov	r7, r8
 800d7d4:	106d      	asrs	r5, r5, #1
 800d7d6:	d00b      	beq.n	800d7f0 <__pow5mult+0xa0>
 800d7d8:	6820      	ldr	r0, [r4, #0]
 800d7da:	b938      	cbnz	r0, 800d7ec <__pow5mult+0x9c>
 800d7dc:	4622      	mov	r2, r4
 800d7de:	4621      	mov	r1, r4
 800d7e0:	4630      	mov	r0, r6
 800d7e2:	f7ff ff0b 	bl	800d5fc <__multiply>
 800d7e6:	6020      	str	r0, [r4, #0]
 800d7e8:	f8c0 9000 	str.w	r9, [r0]
 800d7ec:	4604      	mov	r4, r0
 800d7ee:	e7e4      	b.n	800d7ba <__pow5mult+0x6a>
 800d7f0:	4638      	mov	r0, r7
 800d7f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7f6:	bf00      	nop
 800d7f8:	0800f0d8 	.word	0x0800f0d8
 800d7fc:	0800ef09 	.word	0x0800ef09
 800d800:	0800ef89 	.word	0x0800ef89

0800d804 <__lshift>:
 800d804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d808:	460c      	mov	r4, r1
 800d80a:	6849      	ldr	r1, [r1, #4]
 800d80c:	6923      	ldr	r3, [r4, #16]
 800d80e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d812:	68a3      	ldr	r3, [r4, #8]
 800d814:	4607      	mov	r7, r0
 800d816:	4691      	mov	r9, r2
 800d818:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d81c:	f108 0601 	add.w	r6, r8, #1
 800d820:	42b3      	cmp	r3, r6
 800d822:	db0b      	blt.n	800d83c <__lshift+0x38>
 800d824:	4638      	mov	r0, r7
 800d826:	f7ff fddd 	bl	800d3e4 <_Balloc>
 800d82a:	4605      	mov	r5, r0
 800d82c:	b948      	cbnz	r0, 800d842 <__lshift+0x3e>
 800d82e:	4602      	mov	r2, r0
 800d830:	4b28      	ldr	r3, [pc, #160]	; (800d8d4 <__lshift+0xd0>)
 800d832:	4829      	ldr	r0, [pc, #164]	; (800d8d8 <__lshift+0xd4>)
 800d834:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d838:	f000 fd48 	bl	800e2cc <__assert_func>
 800d83c:	3101      	adds	r1, #1
 800d83e:	005b      	lsls	r3, r3, #1
 800d840:	e7ee      	b.n	800d820 <__lshift+0x1c>
 800d842:	2300      	movs	r3, #0
 800d844:	f100 0114 	add.w	r1, r0, #20
 800d848:	f100 0210 	add.w	r2, r0, #16
 800d84c:	4618      	mov	r0, r3
 800d84e:	4553      	cmp	r3, sl
 800d850:	db33      	blt.n	800d8ba <__lshift+0xb6>
 800d852:	6920      	ldr	r0, [r4, #16]
 800d854:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d858:	f104 0314 	add.w	r3, r4, #20
 800d85c:	f019 091f 	ands.w	r9, r9, #31
 800d860:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d864:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d868:	d02b      	beq.n	800d8c2 <__lshift+0xbe>
 800d86a:	f1c9 0e20 	rsb	lr, r9, #32
 800d86e:	468a      	mov	sl, r1
 800d870:	2200      	movs	r2, #0
 800d872:	6818      	ldr	r0, [r3, #0]
 800d874:	fa00 f009 	lsl.w	r0, r0, r9
 800d878:	4310      	orrs	r0, r2
 800d87a:	f84a 0b04 	str.w	r0, [sl], #4
 800d87e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d882:	459c      	cmp	ip, r3
 800d884:	fa22 f20e 	lsr.w	r2, r2, lr
 800d888:	d8f3      	bhi.n	800d872 <__lshift+0x6e>
 800d88a:	ebac 0304 	sub.w	r3, ip, r4
 800d88e:	3b15      	subs	r3, #21
 800d890:	f023 0303 	bic.w	r3, r3, #3
 800d894:	3304      	adds	r3, #4
 800d896:	f104 0015 	add.w	r0, r4, #21
 800d89a:	4584      	cmp	ip, r0
 800d89c:	bf38      	it	cc
 800d89e:	2304      	movcc	r3, #4
 800d8a0:	50ca      	str	r2, [r1, r3]
 800d8a2:	b10a      	cbz	r2, 800d8a8 <__lshift+0xa4>
 800d8a4:	f108 0602 	add.w	r6, r8, #2
 800d8a8:	3e01      	subs	r6, #1
 800d8aa:	4638      	mov	r0, r7
 800d8ac:	612e      	str	r6, [r5, #16]
 800d8ae:	4621      	mov	r1, r4
 800d8b0:	f7ff fdd8 	bl	800d464 <_Bfree>
 800d8b4:	4628      	mov	r0, r5
 800d8b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8ba:	f842 0f04 	str.w	r0, [r2, #4]!
 800d8be:	3301      	adds	r3, #1
 800d8c0:	e7c5      	b.n	800d84e <__lshift+0x4a>
 800d8c2:	3904      	subs	r1, #4
 800d8c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8c8:	f841 2f04 	str.w	r2, [r1, #4]!
 800d8cc:	459c      	cmp	ip, r3
 800d8ce:	d8f9      	bhi.n	800d8c4 <__lshift+0xc0>
 800d8d0:	e7ea      	b.n	800d8a8 <__lshift+0xa4>
 800d8d2:	bf00      	nop
 800d8d4:	0800ef78 	.word	0x0800ef78
 800d8d8:	0800ef89 	.word	0x0800ef89

0800d8dc <__mcmp>:
 800d8dc:	b530      	push	{r4, r5, lr}
 800d8de:	6902      	ldr	r2, [r0, #16]
 800d8e0:	690c      	ldr	r4, [r1, #16]
 800d8e2:	1b12      	subs	r2, r2, r4
 800d8e4:	d10e      	bne.n	800d904 <__mcmp+0x28>
 800d8e6:	f100 0314 	add.w	r3, r0, #20
 800d8ea:	3114      	adds	r1, #20
 800d8ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d8f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d8f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d8f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d8fc:	42a5      	cmp	r5, r4
 800d8fe:	d003      	beq.n	800d908 <__mcmp+0x2c>
 800d900:	d305      	bcc.n	800d90e <__mcmp+0x32>
 800d902:	2201      	movs	r2, #1
 800d904:	4610      	mov	r0, r2
 800d906:	bd30      	pop	{r4, r5, pc}
 800d908:	4283      	cmp	r3, r0
 800d90a:	d3f3      	bcc.n	800d8f4 <__mcmp+0x18>
 800d90c:	e7fa      	b.n	800d904 <__mcmp+0x28>
 800d90e:	f04f 32ff 	mov.w	r2, #4294967295
 800d912:	e7f7      	b.n	800d904 <__mcmp+0x28>

0800d914 <__mdiff>:
 800d914:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d918:	460c      	mov	r4, r1
 800d91a:	4606      	mov	r6, r0
 800d91c:	4611      	mov	r1, r2
 800d91e:	4620      	mov	r0, r4
 800d920:	4690      	mov	r8, r2
 800d922:	f7ff ffdb 	bl	800d8dc <__mcmp>
 800d926:	1e05      	subs	r5, r0, #0
 800d928:	d110      	bne.n	800d94c <__mdiff+0x38>
 800d92a:	4629      	mov	r1, r5
 800d92c:	4630      	mov	r0, r6
 800d92e:	f7ff fd59 	bl	800d3e4 <_Balloc>
 800d932:	b930      	cbnz	r0, 800d942 <__mdiff+0x2e>
 800d934:	4b3a      	ldr	r3, [pc, #232]	; (800da20 <__mdiff+0x10c>)
 800d936:	4602      	mov	r2, r0
 800d938:	f240 2137 	movw	r1, #567	; 0x237
 800d93c:	4839      	ldr	r0, [pc, #228]	; (800da24 <__mdiff+0x110>)
 800d93e:	f000 fcc5 	bl	800e2cc <__assert_func>
 800d942:	2301      	movs	r3, #1
 800d944:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d948:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d94c:	bfa4      	itt	ge
 800d94e:	4643      	movge	r3, r8
 800d950:	46a0      	movge	r8, r4
 800d952:	4630      	mov	r0, r6
 800d954:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d958:	bfa6      	itte	ge
 800d95a:	461c      	movge	r4, r3
 800d95c:	2500      	movge	r5, #0
 800d95e:	2501      	movlt	r5, #1
 800d960:	f7ff fd40 	bl	800d3e4 <_Balloc>
 800d964:	b920      	cbnz	r0, 800d970 <__mdiff+0x5c>
 800d966:	4b2e      	ldr	r3, [pc, #184]	; (800da20 <__mdiff+0x10c>)
 800d968:	4602      	mov	r2, r0
 800d96a:	f240 2145 	movw	r1, #581	; 0x245
 800d96e:	e7e5      	b.n	800d93c <__mdiff+0x28>
 800d970:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d974:	6926      	ldr	r6, [r4, #16]
 800d976:	60c5      	str	r5, [r0, #12]
 800d978:	f104 0914 	add.w	r9, r4, #20
 800d97c:	f108 0514 	add.w	r5, r8, #20
 800d980:	f100 0e14 	add.w	lr, r0, #20
 800d984:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d988:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d98c:	f108 0210 	add.w	r2, r8, #16
 800d990:	46f2      	mov	sl, lr
 800d992:	2100      	movs	r1, #0
 800d994:	f859 3b04 	ldr.w	r3, [r9], #4
 800d998:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d99c:	fa11 f88b 	uxtah	r8, r1, fp
 800d9a0:	b299      	uxth	r1, r3
 800d9a2:	0c1b      	lsrs	r3, r3, #16
 800d9a4:	eba8 0801 	sub.w	r8, r8, r1
 800d9a8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d9ac:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d9b0:	fa1f f888 	uxth.w	r8, r8
 800d9b4:	1419      	asrs	r1, r3, #16
 800d9b6:	454e      	cmp	r6, r9
 800d9b8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d9bc:	f84a 3b04 	str.w	r3, [sl], #4
 800d9c0:	d8e8      	bhi.n	800d994 <__mdiff+0x80>
 800d9c2:	1b33      	subs	r3, r6, r4
 800d9c4:	3b15      	subs	r3, #21
 800d9c6:	f023 0303 	bic.w	r3, r3, #3
 800d9ca:	3304      	adds	r3, #4
 800d9cc:	3415      	adds	r4, #21
 800d9ce:	42a6      	cmp	r6, r4
 800d9d0:	bf38      	it	cc
 800d9d2:	2304      	movcc	r3, #4
 800d9d4:	441d      	add	r5, r3
 800d9d6:	4473      	add	r3, lr
 800d9d8:	469e      	mov	lr, r3
 800d9da:	462e      	mov	r6, r5
 800d9dc:	4566      	cmp	r6, ip
 800d9de:	d30e      	bcc.n	800d9fe <__mdiff+0xea>
 800d9e0:	f10c 0203 	add.w	r2, ip, #3
 800d9e4:	1b52      	subs	r2, r2, r5
 800d9e6:	f022 0203 	bic.w	r2, r2, #3
 800d9ea:	3d03      	subs	r5, #3
 800d9ec:	45ac      	cmp	ip, r5
 800d9ee:	bf38      	it	cc
 800d9f0:	2200      	movcc	r2, #0
 800d9f2:	4413      	add	r3, r2
 800d9f4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d9f8:	b17a      	cbz	r2, 800da1a <__mdiff+0x106>
 800d9fa:	6107      	str	r7, [r0, #16]
 800d9fc:	e7a4      	b.n	800d948 <__mdiff+0x34>
 800d9fe:	f856 8b04 	ldr.w	r8, [r6], #4
 800da02:	fa11 f288 	uxtah	r2, r1, r8
 800da06:	1414      	asrs	r4, r2, #16
 800da08:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800da0c:	b292      	uxth	r2, r2
 800da0e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800da12:	f84e 2b04 	str.w	r2, [lr], #4
 800da16:	1421      	asrs	r1, r4, #16
 800da18:	e7e0      	b.n	800d9dc <__mdiff+0xc8>
 800da1a:	3f01      	subs	r7, #1
 800da1c:	e7ea      	b.n	800d9f4 <__mdiff+0xe0>
 800da1e:	bf00      	nop
 800da20:	0800ef78 	.word	0x0800ef78
 800da24:	0800ef89 	.word	0x0800ef89

0800da28 <__d2b>:
 800da28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800da2c:	460f      	mov	r7, r1
 800da2e:	2101      	movs	r1, #1
 800da30:	ec59 8b10 	vmov	r8, r9, d0
 800da34:	4616      	mov	r6, r2
 800da36:	f7ff fcd5 	bl	800d3e4 <_Balloc>
 800da3a:	4604      	mov	r4, r0
 800da3c:	b930      	cbnz	r0, 800da4c <__d2b+0x24>
 800da3e:	4602      	mov	r2, r0
 800da40:	4b24      	ldr	r3, [pc, #144]	; (800dad4 <__d2b+0xac>)
 800da42:	4825      	ldr	r0, [pc, #148]	; (800dad8 <__d2b+0xb0>)
 800da44:	f240 310f 	movw	r1, #783	; 0x30f
 800da48:	f000 fc40 	bl	800e2cc <__assert_func>
 800da4c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800da50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800da54:	bb2d      	cbnz	r5, 800daa2 <__d2b+0x7a>
 800da56:	9301      	str	r3, [sp, #4]
 800da58:	f1b8 0300 	subs.w	r3, r8, #0
 800da5c:	d026      	beq.n	800daac <__d2b+0x84>
 800da5e:	4668      	mov	r0, sp
 800da60:	9300      	str	r3, [sp, #0]
 800da62:	f7ff fd87 	bl	800d574 <__lo0bits>
 800da66:	e9dd 1200 	ldrd	r1, r2, [sp]
 800da6a:	b1e8      	cbz	r0, 800daa8 <__d2b+0x80>
 800da6c:	f1c0 0320 	rsb	r3, r0, #32
 800da70:	fa02 f303 	lsl.w	r3, r2, r3
 800da74:	430b      	orrs	r3, r1
 800da76:	40c2      	lsrs	r2, r0
 800da78:	6163      	str	r3, [r4, #20]
 800da7a:	9201      	str	r2, [sp, #4]
 800da7c:	9b01      	ldr	r3, [sp, #4]
 800da7e:	61a3      	str	r3, [r4, #24]
 800da80:	2b00      	cmp	r3, #0
 800da82:	bf14      	ite	ne
 800da84:	2202      	movne	r2, #2
 800da86:	2201      	moveq	r2, #1
 800da88:	6122      	str	r2, [r4, #16]
 800da8a:	b1bd      	cbz	r5, 800dabc <__d2b+0x94>
 800da8c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800da90:	4405      	add	r5, r0
 800da92:	603d      	str	r5, [r7, #0]
 800da94:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800da98:	6030      	str	r0, [r6, #0]
 800da9a:	4620      	mov	r0, r4
 800da9c:	b003      	add	sp, #12
 800da9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800daa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800daa6:	e7d6      	b.n	800da56 <__d2b+0x2e>
 800daa8:	6161      	str	r1, [r4, #20]
 800daaa:	e7e7      	b.n	800da7c <__d2b+0x54>
 800daac:	a801      	add	r0, sp, #4
 800daae:	f7ff fd61 	bl	800d574 <__lo0bits>
 800dab2:	9b01      	ldr	r3, [sp, #4]
 800dab4:	6163      	str	r3, [r4, #20]
 800dab6:	3020      	adds	r0, #32
 800dab8:	2201      	movs	r2, #1
 800daba:	e7e5      	b.n	800da88 <__d2b+0x60>
 800dabc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dac0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dac4:	6038      	str	r0, [r7, #0]
 800dac6:	6918      	ldr	r0, [r3, #16]
 800dac8:	f7ff fd34 	bl	800d534 <__hi0bits>
 800dacc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dad0:	e7e2      	b.n	800da98 <__d2b+0x70>
 800dad2:	bf00      	nop
 800dad4:	0800ef78 	.word	0x0800ef78
 800dad8:	0800ef89 	.word	0x0800ef89

0800dadc <__ssputs_r>:
 800dadc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dae0:	688e      	ldr	r6, [r1, #8]
 800dae2:	461f      	mov	r7, r3
 800dae4:	42be      	cmp	r6, r7
 800dae6:	680b      	ldr	r3, [r1, #0]
 800dae8:	4682      	mov	sl, r0
 800daea:	460c      	mov	r4, r1
 800daec:	4690      	mov	r8, r2
 800daee:	d82c      	bhi.n	800db4a <__ssputs_r+0x6e>
 800daf0:	898a      	ldrh	r2, [r1, #12]
 800daf2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800daf6:	d026      	beq.n	800db46 <__ssputs_r+0x6a>
 800daf8:	6965      	ldr	r5, [r4, #20]
 800dafa:	6909      	ldr	r1, [r1, #16]
 800dafc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800db00:	eba3 0901 	sub.w	r9, r3, r1
 800db04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800db08:	1c7b      	adds	r3, r7, #1
 800db0a:	444b      	add	r3, r9
 800db0c:	106d      	asrs	r5, r5, #1
 800db0e:	429d      	cmp	r5, r3
 800db10:	bf38      	it	cc
 800db12:	461d      	movcc	r5, r3
 800db14:	0553      	lsls	r3, r2, #21
 800db16:	d527      	bpl.n	800db68 <__ssputs_r+0x8c>
 800db18:	4629      	mov	r1, r5
 800db1a:	f7ff fbd7 	bl	800d2cc <_malloc_r>
 800db1e:	4606      	mov	r6, r0
 800db20:	b360      	cbz	r0, 800db7c <__ssputs_r+0xa0>
 800db22:	6921      	ldr	r1, [r4, #16]
 800db24:	464a      	mov	r2, r9
 800db26:	f7fe fcd2 	bl	800c4ce <memcpy>
 800db2a:	89a3      	ldrh	r3, [r4, #12]
 800db2c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800db30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db34:	81a3      	strh	r3, [r4, #12]
 800db36:	6126      	str	r6, [r4, #16]
 800db38:	6165      	str	r5, [r4, #20]
 800db3a:	444e      	add	r6, r9
 800db3c:	eba5 0509 	sub.w	r5, r5, r9
 800db40:	6026      	str	r6, [r4, #0]
 800db42:	60a5      	str	r5, [r4, #8]
 800db44:	463e      	mov	r6, r7
 800db46:	42be      	cmp	r6, r7
 800db48:	d900      	bls.n	800db4c <__ssputs_r+0x70>
 800db4a:	463e      	mov	r6, r7
 800db4c:	6820      	ldr	r0, [r4, #0]
 800db4e:	4632      	mov	r2, r6
 800db50:	4641      	mov	r1, r8
 800db52:	f000 fb6f 	bl	800e234 <memmove>
 800db56:	68a3      	ldr	r3, [r4, #8]
 800db58:	1b9b      	subs	r3, r3, r6
 800db5a:	60a3      	str	r3, [r4, #8]
 800db5c:	6823      	ldr	r3, [r4, #0]
 800db5e:	4433      	add	r3, r6
 800db60:	6023      	str	r3, [r4, #0]
 800db62:	2000      	movs	r0, #0
 800db64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db68:	462a      	mov	r2, r5
 800db6a:	f000 fbf5 	bl	800e358 <_realloc_r>
 800db6e:	4606      	mov	r6, r0
 800db70:	2800      	cmp	r0, #0
 800db72:	d1e0      	bne.n	800db36 <__ssputs_r+0x5a>
 800db74:	6921      	ldr	r1, [r4, #16]
 800db76:	4650      	mov	r0, sl
 800db78:	f7ff fb34 	bl	800d1e4 <_free_r>
 800db7c:	230c      	movs	r3, #12
 800db7e:	f8ca 3000 	str.w	r3, [sl]
 800db82:	89a3      	ldrh	r3, [r4, #12]
 800db84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db88:	81a3      	strh	r3, [r4, #12]
 800db8a:	f04f 30ff 	mov.w	r0, #4294967295
 800db8e:	e7e9      	b.n	800db64 <__ssputs_r+0x88>

0800db90 <_svfiprintf_r>:
 800db90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db94:	4698      	mov	r8, r3
 800db96:	898b      	ldrh	r3, [r1, #12]
 800db98:	061b      	lsls	r3, r3, #24
 800db9a:	b09d      	sub	sp, #116	; 0x74
 800db9c:	4607      	mov	r7, r0
 800db9e:	460d      	mov	r5, r1
 800dba0:	4614      	mov	r4, r2
 800dba2:	d50e      	bpl.n	800dbc2 <_svfiprintf_r+0x32>
 800dba4:	690b      	ldr	r3, [r1, #16]
 800dba6:	b963      	cbnz	r3, 800dbc2 <_svfiprintf_r+0x32>
 800dba8:	2140      	movs	r1, #64	; 0x40
 800dbaa:	f7ff fb8f 	bl	800d2cc <_malloc_r>
 800dbae:	6028      	str	r0, [r5, #0]
 800dbb0:	6128      	str	r0, [r5, #16]
 800dbb2:	b920      	cbnz	r0, 800dbbe <_svfiprintf_r+0x2e>
 800dbb4:	230c      	movs	r3, #12
 800dbb6:	603b      	str	r3, [r7, #0]
 800dbb8:	f04f 30ff 	mov.w	r0, #4294967295
 800dbbc:	e0d0      	b.n	800dd60 <_svfiprintf_r+0x1d0>
 800dbbe:	2340      	movs	r3, #64	; 0x40
 800dbc0:	616b      	str	r3, [r5, #20]
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	9309      	str	r3, [sp, #36]	; 0x24
 800dbc6:	2320      	movs	r3, #32
 800dbc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dbcc:	f8cd 800c 	str.w	r8, [sp, #12]
 800dbd0:	2330      	movs	r3, #48	; 0x30
 800dbd2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800dd78 <_svfiprintf_r+0x1e8>
 800dbd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dbda:	f04f 0901 	mov.w	r9, #1
 800dbde:	4623      	mov	r3, r4
 800dbe0:	469a      	mov	sl, r3
 800dbe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbe6:	b10a      	cbz	r2, 800dbec <_svfiprintf_r+0x5c>
 800dbe8:	2a25      	cmp	r2, #37	; 0x25
 800dbea:	d1f9      	bne.n	800dbe0 <_svfiprintf_r+0x50>
 800dbec:	ebba 0b04 	subs.w	fp, sl, r4
 800dbf0:	d00b      	beq.n	800dc0a <_svfiprintf_r+0x7a>
 800dbf2:	465b      	mov	r3, fp
 800dbf4:	4622      	mov	r2, r4
 800dbf6:	4629      	mov	r1, r5
 800dbf8:	4638      	mov	r0, r7
 800dbfa:	f7ff ff6f 	bl	800dadc <__ssputs_r>
 800dbfe:	3001      	adds	r0, #1
 800dc00:	f000 80a9 	beq.w	800dd56 <_svfiprintf_r+0x1c6>
 800dc04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc06:	445a      	add	r2, fp
 800dc08:	9209      	str	r2, [sp, #36]	; 0x24
 800dc0a:	f89a 3000 	ldrb.w	r3, [sl]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	f000 80a1 	beq.w	800dd56 <_svfiprintf_r+0x1c6>
 800dc14:	2300      	movs	r3, #0
 800dc16:	f04f 32ff 	mov.w	r2, #4294967295
 800dc1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc1e:	f10a 0a01 	add.w	sl, sl, #1
 800dc22:	9304      	str	r3, [sp, #16]
 800dc24:	9307      	str	r3, [sp, #28]
 800dc26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dc2a:	931a      	str	r3, [sp, #104]	; 0x68
 800dc2c:	4654      	mov	r4, sl
 800dc2e:	2205      	movs	r2, #5
 800dc30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc34:	4850      	ldr	r0, [pc, #320]	; (800dd78 <_svfiprintf_r+0x1e8>)
 800dc36:	f7f2 fab3 	bl	80001a0 <memchr>
 800dc3a:	9a04      	ldr	r2, [sp, #16]
 800dc3c:	b9d8      	cbnz	r0, 800dc76 <_svfiprintf_r+0xe6>
 800dc3e:	06d0      	lsls	r0, r2, #27
 800dc40:	bf44      	itt	mi
 800dc42:	2320      	movmi	r3, #32
 800dc44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc48:	0711      	lsls	r1, r2, #28
 800dc4a:	bf44      	itt	mi
 800dc4c:	232b      	movmi	r3, #43	; 0x2b
 800dc4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc52:	f89a 3000 	ldrb.w	r3, [sl]
 800dc56:	2b2a      	cmp	r3, #42	; 0x2a
 800dc58:	d015      	beq.n	800dc86 <_svfiprintf_r+0xf6>
 800dc5a:	9a07      	ldr	r2, [sp, #28]
 800dc5c:	4654      	mov	r4, sl
 800dc5e:	2000      	movs	r0, #0
 800dc60:	f04f 0c0a 	mov.w	ip, #10
 800dc64:	4621      	mov	r1, r4
 800dc66:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc6a:	3b30      	subs	r3, #48	; 0x30
 800dc6c:	2b09      	cmp	r3, #9
 800dc6e:	d94d      	bls.n	800dd0c <_svfiprintf_r+0x17c>
 800dc70:	b1b0      	cbz	r0, 800dca0 <_svfiprintf_r+0x110>
 800dc72:	9207      	str	r2, [sp, #28]
 800dc74:	e014      	b.n	800dca0 <_svfiprintf_r+0x110>
 800dc76:	eba0 0308 	sub.w	r3, r0, r8
 800dc7a:	fa09 f303 	lsl.w	r3, r9, r3
 800dc7e:	4313      	orrs	r3, r2
 800dc80:	9304      	str	r3, [sp, #16]
 800dc82:	46a2      	mov	sl, r4
 800dc84:	e7d2      	b.n	800dc2c <_svfiprintf_r+0x9c>
 800dc86:	9b03      	ldr	r3, [sp, #12]
 800dc88:	1d19      	adds	r1, r3, #4
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	9103      	str	r1, [sp, #12]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	bfbb      	ittet	lt
 800dc92:	425b      	neglt	r3, r3
 800dc94:	f042 0202 	orrlt.w	r2, r2, #2
 800dc98:	9307      	strge	r3, [sp, #28]
 800dc9a:	9307      	strlt	r3, [sp, #28]
 800dc9c:	bfb8      	it	lt
 800dc9e:	9204      	strlt	r2, [sp, #16]
 800dca0:	7823      	ldrb	r3, [r4, #0]
 800dca2:	2b2e      	cmp	r3, #46	; 0x2e
 800dca4:	d10c      	bne.n	800dcc0 <_svfiprintf_r+0x130>
 800dca6:	7863      	ldrb	r3, [r4, #1]
 800dca8:	2b2a      	cmp	r3, #42	; 0x2a
 800dcaa:	d134      	bne.n	800dd16 <_svfiprintf_r+0x186>
 800dcac:	9b03      	ldr	r3, [sp, #12]
 800dcae:	1d1a      	adds	r2, r3, #4
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	9203      	str	r2, [sp, #12]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	bfb8      	it	lt
 800dcb8:	f04f 33ff 	movlt.w	r3, #4294967295
 800dcbc:	3402      	adds	r4, #2
 800dcbe:	9305      	str	r3, [sp, #20]
 800dcc0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800dd88 <_svfiprintf_r+0x1f8>
 800dcc4:	7821      	ldrb	r1, [r4, #0]
 800dcc6:	2203      	movs	r2, #3
 800dcc8:	4650      	mov	r0, sl
 800dcca:	f7f2 fa69 	bl	80001a0 <memchr>
 800dcce:	b138      	cbz	r0, 800dce0 <_svfiprintf_r+0x150>
 800dcd0:	9b04      	ldr	r3, [sp, #16]
 800dcd2:	eba0 000a 	sub.w	r0, r0, sl
 800dcd6:	2240      	movs	r2, #64	; 0x40
 800dcd8:	4082      	lsls	r2, r0
 800dcda:	4313      	orrs	r3, r2
 800dcdc:	3401      	adds	r4, #1
 800dcde:	9304      	str	r3, [sp, #16]
 800dce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dce4:	4825      	ldr	r0, [pc, #148]	; (800dd7c <_svfiprintf_r+0x1ec>)
 800dce6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dcea:	2206      	movs	r2, #6
 800dcec:	f7f2 fa58 	bl	80001a0 <memchr>
 800dcf0:	2800      	cmp	r0, #0
 800dcf2:	d038      	beq.n	800dd66 <_svfiprintf_r+0x1d6>
 800dcf4:	4b22      	ldr	r3, [pc, #136]	; (800dd80 <_svfiprintf_r+0x1f0>)
 800dcf6:	bb1b      	cbnz	r3, 800dd40 <_svfiprintf_r+0x1b0>
 800dcf8:	9b03      	ldr	r3, [sp, #12]
 800dcfa:	3307      	adds	r3, #7
 800dcfc:	f023 0307 	bic.w	r3, r3, #7
 800dd00:	3308      	adds	r3, #8
 800dd02:	9303      	str	r3, [sp, #12]
 800dd04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd06:	4433      	add	r3, r6
 800dd08:	9309      	str	r3, [sp, #36]	; 0x24
 800dd0a:	e768      	b.n	800dbde <_svfiprintf_r+0x4e>
 800dd0c:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd10:	460c      	mov	r4, r1
 800dd12:	2001      	movs	r0, #1
 800dd14:	e7a6      	b.n	800dc64 <_svfiprintf_r+0xd4>
 800dd16:	2300      	movs	r3, #0
 800dd18:	3401      	adds	r4, #1
 800dd1a:	9305      	str	r3, [sp, #20]
 800dd1c:	4619      	mov	r1, r3
 800dd1e:	f04f 0c0a 	mov.w	ip, #10
 800dd22:	4620      	mov	r0, r4
 800dd24:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd28:	3a30      	subs	r2, #48	; 0x30
 800dd2a:	2a09      	cmp	r2, #9
 800dd2c:	d903      	bls.n	800dd36 <_svfiprintf_r+0x1a6>
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d0c6      	beq.n	800dcc0 <_svfiprintf_r+0x130>
 800dd32:	9105      	str	r1, [sp, #20]
 800dd34:	e7c4      	b.n	800dcc0 <_svfiprintf_r+0x130>
 800dd36:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd3a:	4604      	mov	r4, r0
 800dd3c:	2301      	movs	r3, #1
 800dd3e:	e7f0      	b.n	800dd22 <_svfiprintf_r+0x192>
 800dd40:	ab03      	add	r3, sp, #12
 800dd42:	9300      	str	r3, [sp, #0]
 800dd44:	462a      	mov	r2, r5
 800dd46:	4b0f      	ldr	r3, [pc, #60]	; (800dd84 <_svfiprintf_r+0x1f4>)
 800dd48:	a904      	add	r1, sp, #16
 800dd4a:	4638      	mov	r0, r7
 800dd4c:	f7fd fd42 	bl	800b7d4 <_printf_float>
 800dd50:	1c42      	adds	r2, r0, #1
 800dd52:	4606      	mov	r6, r0
 800dd54:	d1d6      	bne.n	800dd04 <_svfiprintf_r+0x174>
 800dd56:	89ab      	ldrh	r3, [r5, #12]
 800dd58:	065b      	lsls	r3, r3, #25
 800dd5a:	f53f af2d 	bmi.w	800dbb8 <_svfiprintf_r+0x28>
 800dd5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd60:	b01d      	add	sp, #116	; 0x74
 800dd62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd66:	ab03      	add	r3, sp, #12
 800dd68:	9300      	str	r3, [sp, #0]
 800dd6a:	462a      	mov	r2, r5
 800dd6c:	4b05      	ldr	r3, [pc, #20]	; (800dd84 <_svfiprintf_r+0x1f4>)
 800dd6e:	a904      	add	r1, sp, #16
 800dd70:	4638      	mov	r0, r7
 800dd72:	f7fd ffd3 	bl	800bd1c <_printf_i>
 800dd76:	e7eb      	b.n	800dd50 <_svfiprintf_r+0x1c0>
 800dd78:	0800f0e4 	.word	0x0800f0e4
 800dd7c:	0800f0ee 	.word	0x0800f0ee
 800dd80:	0800b7d5 	.word	0x0800b7d5
 800dd84:	0800dadd 	.word	0x0800dadd
 800dd88:	0800f0ea 	.word	0x0800f0ea

0800dd8c <__sfputc_r>:
 800dd8c:	6893      	ldr	r3, [r2, #8]
 800dd8e:	3b01      	subs	r3, #1
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	b410      	push	{r4}
 800dd94:	6093      	str	r3, [r2, #8]
 800dd96:	da08      	bge.n	800ddaa <__sfputc_r+0x1e>
 800dd98:	6994      	ldr	r4, [r2, #24]
 800dd9a:	42a3      	cmp	r3, r4
 800dd9c:	db01      	blt.n	800dda2 <__sfputc_r+0x16>
 800dd9e:	290a      	cmp	r1, #10
 800dda0:	d103      	bne.n	800ddaa <__sfputc_r+0x1e>
 800dda2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dda6:	f7fe ba6e 	b.w	800c286 <__swbuf_r>
 800ddaa:	6813      	ldr	r3, [r2, #0]
 800ddac:	1c58      	adds	r0, r3, #1
 800ddae:	6010      	str	r0, [r2, #0]
 800ddb0:	7019      	strb	r1, [r3, #0]
 800ddb2:	4608      	mov	r0, r1
 800ddb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ddb8:	4770      	bx	lr

0800ddba <__sfputs_r>:
 800ddba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddbc:	4606      	mov	r6, r0
 800ddbe:	460f      	mov	r7, r1
 800ddc0:	4614      	mov	r4, r2
 800ddc2:	18d5      	adds	r5, r2, r3
 800ddc4:	42ac      	cmp	r4, r5
 800ddc6:	d101      	bne.n	800ddcc <__sfputs_r+0x12>
 800ddc8:	2000      	movs	r0, #0
 800ddca:	e007      	b.n	800dddc <__sfputs_r+0x22>
 800ddcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddd0:	463a      	mov	r2, r7
 800ddd2:	4630      	mov	r0, r6
 800ddd4:	f7ff ffda 	bl	800dd8c <__sfputc_r>
 800ddd8:	1c43      	adds	r3, r0, #1
 800ddda:	d1f3      	bne.n	800ddc4 <__sfputs_r+0xa>
 800dddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dde0 <_vfiprintf_r>:
 800dde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dde4:	460d      	mov	r5, r1
 800dde6:	b09d      	sub	sp, #116	; 0x74
 800dde8:	4614      	mov	r4, r2
 800ddea:	4698      	mov	r8, r3
 800ddec:	4606      	mov	r6, r0
 800ddee:	b118      	cbz	r0, 800ddf8 <_vfiprintf_r+0x18>
 800ddf0:	6a03      	ldr	r3, [r0, #32]
 800ddf2:	b90b      	cbnz	r3, 800ddf8 <_vfiprintf_r+0x18>
 800ddf4:	f7fe f940 	bl	800c078 <__sinit>
 800ddf8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ddfa:	07d9      	lsls	r1, r3, #31
 800ddfc:	d405      	bmi.n	800de0a <_vfiprintf_r+0x2a>
 800ddfe:	89ab      	ldrh	r3, [r5, #12]
 800de00:	059a      	lsls	r2, r3, #22
 800de02:	d402      	bmi.n	800de0a <_vfiprintf_r+0x2a>
 800de04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de06:	f7fe fb60 	bl	800c4ca <__retarget_lock_acquire_recursive>
 800de0a:	89ab      	ldrh	r3, [r5, #12]
 800de0c:	071b      	lsls	r3, r3, #28
 800de0e:	d501      	bpl.n	800de14 <_vfiprintf_r+0x34>
 800de10:	692b      	ldr	r3, [r5, #16]
 800de12:	b99b      	cbnz	r3, 800de3c <_vfiprintf_r+0x5c>
 800de14:	4629      	mov	r1, r5
 800de16:	4630      	mov	r0, r6
 800de18:	f7fe fa72 	bl	800c300 <__swsetup_r>
 800de1c:	b170      	cbz	r0, 800de3c <_vfiprintf_r+0x5c>
 800de1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de20:	07dc      	lsls	r4, r3, #31
 800de22:	d504      	bpl.n	800de2e <_vfiprintf_r+0x4e>
 800de24:	f04f 30ff 	mov.w	r0, #4294967295
 800de28:	b01d      	add	sp, #116	; 0x74
 800de2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de2e:	89ab      	ldrh	r3, [r5, #12]
 800de30:	0598      	lsls	r0, r3, #22
 800de32:	d4f7      	bmi.n	800de24 <_vfiprintf_r+0x44>
 800de34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de36:	f7fe fb49 	bl	800c4cc <__retarget_lock_release_recursive>
 800de3a:	e7f3      	b.n	800de24 <_vfiprintf_r+0x44>
 800de3c:	2300      	movs	r3, #0
 800de3e:	9309      	str	r3, [sp, #36]	; 0x24
 800de40:	2320      	movs	r3, #32
 800de42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de46:	f8cd 800c 	str.w	r8, [sp, #12]
 800de4a:	2330      	movs	r3, #48	; 0x30
 800de4c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e000 <_vfiprintf_r+0x220>
 800de50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de54:	f04f 0901 	mov.w	r9, #1
 800de58:	4623      	mov	r3, r4
 800de5a:	469a      	mov	sl, r3
 800de5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de60:	b10a      	cbz	r2, 800de66 <_vfiprintf_r+0x86>
 800de62:	2a25      	cmp	r2, #37	; 0x25
 800de64:	d1f9      	bne.n	800de5a <_vfiprintf_r+0x7a>
 800de66:	ebba 0b04 	subs.w	fp, sl, r4
 800de6a:	d00b      	beq.n	800de84 <_vfiprintf_r+0xa4>
 800de6c:	465b      	mov	r3, fp
 800de6e:	4622      	mov	r2, r4
 800de70:	4629      	mov	r1, r5
 800de72:	4630      	mov	r0, r6
 800de74:	f7ff ffa1 	bl	800ddba <__sfputs_r>
 800de78:	3001      	adds	r0, #1
 800de7a:	f000 80a9 	beq.w	800dfd0 <_vfiprintf_r+0x1f0>
 800de7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de80:	445a      	add	r2, fp
 800de82:	9209      	str	r2, [sp, #36]	; 0x24
 800de84:	f89a 3000 	ldrb.w	r3, [sl]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	f000 80a1 	beq.w	800dfd0 <_vfiprintf_r+0x1f0>
 800de8e:	2300      	movs	r3, #0
 800de90:	f04f 32ff 	mov.w	r2, #4294967295
 800de94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de98:	f10a 0a01 	add.w	sl, sl, #1
 800de9c:	9304      	str	r3, [sp, #16]
 800de9e:	9307      	str	r3, [sp, #28]
 800dea0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dea4:	931a      	str	r3, [sp, #104]	; 0x68
 800dea6:	4654      	mov	r4, sl
 800dea8:	2205      	movs	r2, #5
 800deaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800deae:	4854      	ldr	r0, [pc, #336]	; (800e000 <_vfiprintf_r+0x220>)
 800deb0:	f7f2 f976 	bl	80001a0 <memchr>
 800deb4:	9a04      	ldr	r2, [sp, #16]
 800deb6:	b9d8      	cbnz	r0, 800def0 <_vfiprintf_r+0x110>
 800deb8:	06d1      	lsls	r1, r2, #27
 800deba:	bf44      	itt	mi
 800debc:	2320      	movmi	r3, #32
 800debe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dec2:	0713      	lsls	r3, r2, #28
 800dec4:	bf44      	itt	mi
 800dec6:	232b      	movmi	r3, #43	; 0x2b
 800dec8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800decc:	f89a 3000 	ldrb.w	r3, [sl]
 800ded0:	2b2a      	cmp	r3, #42	; 0x2a
 800ded2:	d015      	beq.n	800df00 <_vfiprintf_r+0x120>
 800ded4:	9a07      	ldr	r2, [sp, #28]
 800ded6:	4654      	mov	r4, sl
 800ded8:	2000      	movs	r0, #0
 800deda:	f04f 0c0a 	mov.w	ip, #10
 800dede:	4621      	mov	r1, r4
 800dee0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dee4:	3b30      	subs	r3, #48	; 0x30
 800dee6:	2b09      	cmp	r3, #9
 800dee8:	d94d      	bls.n	800df86 <_vfiprintf_r+0x1a6>
 800deea:	b1b0      	cbz	r0, 800df1a <_vfiprintf_r+0x13a>
 800deec:	9207      	str	r2, [sp, #28]
 800deee:	e014      	b.n	800df1a <_vfiprintf_r+0x13a>
 800def0:	eba0 0308 	sub.w	r3, r0, r8
 800def4:	fa09 f303 	lsl.w	r3, r9, r3
 800def8:	4313      	orrs	r3, r2
 800defa:	9304      	str	r3, [sp, #16]
 800defc:	46a2      	mov	sl, r4
 800defe:	e7d2      	b.n	800dea6 <_vfiprintf_r+0xc6>
 800df00:	9b03      	ldr	r3, [sp, #12]
 800df02:	1d19      	adds	r1, r3, #4
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	9103      	str	r1, [sp, #12]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	bfbb      	ittet	lt
 800df0c:	425b      	neglt	r3, r3
 800df0e:	f042 0202 	orrlt.w	r2, r2, #2
 800df12:	9307      	strge	r3, [sp, #28]
 800df14:	9307      	strlt	r3, [sp, #28]
 800df16:	bfb8      	it	lt
 800df18:	9204      	strlt	r2, [sp, #16]
 800df1a:	7823      	ldrb	r3, [r4, #0]
 800df1c:	2b2e      	cmp	r3, #46	; 0x2e
 800df1e:	d10c      	bne.n	800df3a <_vfiprintf_r+0x15a>
 800df20:	7863      	ldrb	r3, [r4, #1]
 800df22:	2b2a      	cmp	r3, #42	; 0x2a
 800df24:	d134      	bne.n	800df90 <_vfiprintf_r+0x1b0>
 800df26:	9b03      	ldr	r3, [sp, #12]
 800df28:	1d1a      	adds	r2, r3, #4
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	9203      	str	r2, [sp, #12]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	bfb8      	it	lt
 800df32:	f04f 33ff 	movlt.w	r3, #4294967295
 800df36:	3402      	adds	r4, #2
 800df38:	9305      	str	r3, [sp, #20]
 800df3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e010 <_vfiprintf_r+0x230>
 800df3e:	7821      	ldrb	r1, [r4, #0]
 800df40:	2203      	movs	r2, #3
 800df42:	4650      	mov	r0, sl
 800df44:	f7f2 f92c 	bl	80001a0 <memchr>
 800df48:	b138      	cbz	r0, 800df5a <_vfiprintf_r+0x17a>
 800df4a:	9b04      	ldr	r3, [sp, #16]
 800df4c:	eba0 000a 	sub.w	r0, r0, sl
 800df50:	2240      	movs	r2, #64	; 0x40
 800df52:	4082      	lsls	r2, r0
 800df54:	4313      	orrs	r3, r2
 800df56:	3401      	adds	r4, #1
 800df58:	9304      	str	r3, [sp, #16]
 800df5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df5e:	4829      	ldr	r0, [pc, #164]	; (800e004 <_vfiprintf_r+0x224>)
 800df60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df64:	2206      	movs	r2, #6
 800df66:	f7f2 f91b 	bl	80001a0 <memchr>
 800df6a:	2800      	cmp	r0, #0
 800df6c:	d03f      	beq.n	800dfee <_vfiprintf_r+0x20e>
 800df6e:	4b26      	ldr	r3, [pc, #152]	; (800e008 <_vfiprintf_r+0x228>)
 800df70:	bb1b      	cbnz	r3, 800dfba <_vfiprintf_r+0x1da>
 800df72:	9b03      	ldr	r3, [sp, #12]
 800df74:	3307      	adds	r3, #7
 800df76:	f023 0307 	bic.w	r3, r3, #7
 800df7a:	3308      	adds	r3, #8
 800df7c:	9303      	str	r3, [sp, #12]
 800df7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df80:	443b      	add	r3, r7
 800df82:	9309      	str	r3, [sp, #36]	; 0x24
 800df84:	e768      	b.n	800de58 <_vfiprintf_r+0x78>
 800df86:	fb0c 3202 	mla	r2, ip, r2, r3
 800df8a:	460c      	mov	r4, r1
 800df8c:	2001      	movs	r0, #1
 800df8e:	e7a6      	b.n	800dede <_vfiprintf_r+0xfe>
 800df90:	2300      	movs	r3, #0
 800df92:	3401      	adds	r4, #1
 800df94:	9305      	str	r3, [sp, #20]
 800df96:	4619      	mov	r1, r3
 800df98:	f04f 0c0a 	mov.w	ip, #10
 800df9c:	4620      	mov	r0, r4
 800df9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dfa2:	3a30      	subs	r2, #48	; 0x30
 800dfa4:	2a09      	cmp	r2, #9
 800dfa6:	d903      	bls.n	800dfb0 <_vfiprintf_r+0x1d0>
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d0c6      	beq.n	800df3a <_vfiprintf_r+0x15a>
 800dfac:	9105      	str	r1, [sp, #20]
 800dfae:	e7c4      	b.n	800df3a <_vfiprintf_r+0x15a>
 800dfb0:	fb0c 2101 	mla	r1, ip, r1, r2
 800dfb4:	4604      	mov	r4, r0
 800dfb6:	2301      	movs	r3, #1
 800dfb8:	e7f0      	b.n	800df9c <_vfiprintf_r+0x1bc>
 800dfba:	ab03      	add	r3, sp, #12
 800dfbc:	9300      	str	r3, [sp, #0]
 800dfbe:	462a      	mov	r2, r5
 800dfc0:	4b12      	ldr	r3, [pc, #72]	; (800e00c <_vfiprintf_r+0x22c>)
 800dfc2:	a904      	add	r1, sp, #16
 800dfc4:	4630      	mov	r0, r6
 800dfc6:	f7fd fc05 	bl	800b7d4 <_printf_float>
 800dfca:	4607      	mov	r7, r0
 800dfcc:	1c78      	adds	r0, r7, #1
 800dfce:	d1d6      	bne.n	800df7e <_vfiprintf_r+0x19e>
 800dfd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dfd2:	07d9      	lsls	r1, r3, #31
 800dfd4:	d405      	bmi.n	800dfe2 <_vfiprintf_r+0x202>
 800dfd6:	89ab      	ldrh	r3, [r5, #12]
 800dfd8:	059a      	lsls	r2, r3, #22
 800dfda:	d402      	bmi.n	800dfe2 <_vfiprintf_r+0x202>
 800dfdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dfde:	f7fe fa75 	bl	800c4cc <__retarget_lock_release_recursive>
 800dfe2:	89ab      	ldrh	r3, [r5, #12]
 800dfe4:	065b      	lsls	r3, r3, #25
 800dfe6:	f53f af1d 	bmi.w	800de24 <_vfiprintf_r+0x44>
 800dfea:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dfec:	e71c      	b.n	800de28 <_vfiprintf_r+0x48>
 800dfee:	ab03      	add	r3, sp, #12
 800dff0:	9300      	str	r3, [sp, #0]
 800dff2:	462a      	mov	r2, r5
 800dff4:	4b05      	ldr	r3, [pc, #20]	; (800e00c <_vfiprintf_r+0x22c>)
 800dff6:	a904      	add	r1, sp, #16
 800dff8:	4630      	mov	r0, r6
 800dffa:	f7fd fe8f 	bl	800bd1c <_printf_i>
 800dffe:	e7e4      	b.n	800dfca <_vfiprintf_r+0x1ea>
 800e000:	0800f0e4 	.word	0x0800f0e4
 800e004:	0800f0ee 	.word	0x0800f0ee
 800e008:	0800b7d5 	.word	0x0800b7d5
 800e00c:	0800ddbb 	.word	0x0800ddbb
 800e010:	0800f0ea 	.word	0x0800f0ea

0800e014 <__sflush_r>:
 800e014:	898a      	ldrh	r2, [r1, #12]
 800e016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e01a:	4605      	mov	r5, r0
 800e01c:	0710      	lsls	r0, r2, #28
 800e01e:	460c      	mov	r4, r1
 800e020:	d458      	bmi.n	800e0d4 <__sflush_r+0xc0>
 800e022:	684b      	ldr	r3, [r1, #4]
 800e024:	2b00      	cmp	r3, #0
 800e026:	dc05      	bgt.n	800e034 <__sflush_r+0x20>
 800e028:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	dc02      	bgt.n	800e034 <__sflush_r+0x20>
 800e02e:	2000      	movs	r0, #0
 800e030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e034:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e036:	2e00      	cmp	r6, #0
 800e038:	d0f9      	beq.n	800e02e <__sflush_r+0x1a>
 800e03a:	2300      	movs	r3, #0
 800e03c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e040:	682f      	ldr	r7, [r5, #0]
 800e042:	6a21      	ldr	r1, [r4, #32]
 800e044:	602b      	str	r3, [r5, #0]
 800e046:	d032      	beq.n	800e0ae <__sflush_r+0x9a>
 800e048:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e04a:	89a3      	ldrh	r3, [r4, #12]
 800e04c:	075a      	lsls	r2, r3, #29
 800e04e:	d505      	bpl.n	800e05c <__sflush_r+0x48>
 800e050:	6863      	ldr	r3, [r4, #4]
 800e052:	1ac0      	subs	r0, r0, r3
 800e054:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e056:	b10b      	cbz	r3, 800e05c <__sflush_r+0x48>
 800e058:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e05a:	1ac0      	subs	r0, r0, r3
 800e05c:	2300      	movs	r3, #0
 800e05e:	4602      	mov	r2, r0
 800e060:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e062:	6a21      	ldr	r1, [r4, #32]
 800e064:	4628      	mov	r0, r5
 800e066:	47b0      	blx	r6
 800e068:	1c43      	adds	r3, r0, #1
 800e06a:	89a3      	ldrh	r3, [r4, #12]
 800e06c:	d106      	bne.n	800e07c <__sflush_r+0x68>
 800e06e:	6829      	ldr	r1, [r5, #0]
 800e070:	291d      	cmp	r1, #29
 800e072:	d82b      	bhi.n	800e0cc <__sflush_r+0xb8>
 800e074:	4a29      	ldr	r2, [pc, #164]	; (800e11c <__sflush_r+0x108>)
 800e076:	410a      	asrs	r2, r1
 800e078:	07d6      	lsls	r6, r2, #31
 800e07a:	d427      	bmi.n	800e0cc <__sflush_r+0xb8>
 800e07c:	2200      	movs	r2, #0
 800e07e:	6062      	str	r2, [r4, #4]
 800e080:	04d9      	lsls	r1, r3, #19
 800e082:	6922      	ldr	r2, [r4, #16]
 800e084:	6022      	str	r2, [r4, #0]
 800e086:	d504      	bpl.n	800e092 <__sflush_r+0x7e>
 800e088:	1c42      	adds	r2, r0, #1
 800e08a:	d101      	bne.n	800e090 <__sflush_r+0x7c>
 800e08c:	682b      	ldr	r3, [r5, #0]
 800e08e:	b903      	cbnz	r3, 800e092 <__sflush_r+0x7e>
 800e090:	6560      	str	r0, [r4, #84]	; 0x54
 800e092:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e094:	602f      	str	r7, [r5, #0]
 800e096:	2900      	cmp	r1, #0
 800e098:	d0c9      	beq.n	800e02e <__sflush_r+0x1a>
 800e09a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e09e:	4299      	cmp	r1, r3
 800e0a0:	d002      	beq.n	800e0a8 <__sflush_r+0x94>
 800e0a2:	4628      	mov	r0, r5
 800e0a4:	f7ff f89e 	bl	800d1e4 <_free_r>
 800e0a8:	2000      	movs	r0, #0
 800e0aa:	6360      	str	r0, [r4, #52]	; 0x34
 800e0ac:	e7c0      	b.n	800e030 <__sflush_r+0x1c>
 800e0ae:	2301      	movs	r3, #1
 800e0b0:	4628      	mov	r0, r5
 800e0b2:	47b0      	blx	r6
 800e0b4:	1c41      	adds	r1, r0, #1
 800e0b6:	d1c8      	bne.n	800e04a <__sflush_r+0x36>
 800e0b8:	682b      	ldr	r3, [r5, #0]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d0c5      	beq.n	800e04a <__sflush_r+0x36>
 800e0be:	2b1d      	cmp	r3, #29
 800e0c0:	d001      	beq.n	800e0c6 <__sflush_r+0xb2>
 800e0c2:	2b16      	cmp	r3, #22
 800e0c4:	d101      	bne.n	800e0ca <__sflush_r+0xb6>
 800e0c6:	602f      	str	r7, [r5, #0]
 800e0c8:	e7b1      	b.n	800e02e <__sflush_r+0x1a>
 800e0ca:	89a3      	ldrh	r3, [r4, #12]
 800e0cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0d0:	81a3      	strh	r3, [r4, #12]
 800e0d2:	e7ad      	b.n	800e030 <__sflush_r+0x1c>
 800e0d4:	690f      	ldr	r7, [r1, #16]
 800e0d6:	2f00      	cmp	r7, #0
 800e0d8:	d0a9      	beq.n	800e02e <__sflush_r+0x1a>
 800e0da:	0793      	lsls	r3, r2, #30
 800e0dc:	680e      	ldr	r6, [r1, #0]
 800e0de:	bf08      	it	eq
 800e0e0:	694b      	ldreq	r3, [r1, #20]
 800e0e2:	600f      	str	r7, [r1, #0]
 800e0e4:	bf18      	it	ne
 800e0e6:	2300      	movne	r3, #0
 800e0e8:	eba6 0807 	sub.w	r8, r6, r7
 800e0ec:	608b      	str	r3, [r1, #8]
 800e0ee:	f1b8 0f00 	cmp.w	r8, #0
 800e0f2:	dd9c      	ble.n	800e02e <__sflush_r+0x1a>
 800e0f4:	6a21      	ldr	r1, [r4, #32]
 800e0f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e0f8:	4643      	mov	r3, r8
 800e0fa:	463a      	mov	r2, r7
 800e0fc:	4628      	mov	r0, r5
 800e0fe:	47b0      	blx	r6
 800e100:	2800      	cmp	r0, #0
 800e102:	dc06      	bgt.n	800e112 <__sflush_r+0xfe>
 800e104:	89a3      	ldrh	r3, [r4, #12]
 800e106:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e10a:	81a3      	strh	r3, [r4, #12]
 800e10c:	f04f 30ff 	mov.w	r0, #4294967295
 800e110:	e78e      	b.n	800e030 <__sflush_r+0x1c>
 800e112:	4407      	add	r7, r0
 800e114:	eba8 0800 	sub.w	r8, r8, r0
 800e118:	e7e9      	b.n	800e0ee <__sflush_r+0xda>
 800e11a:	bf00      	nop
 800e11c:	dfbffffe 	.word	0xdfbffffe

0800e120 <_fflush_r>:
 800e120:	b538      	push	{r3, r4, r5, lr}
 800e122:	690b      	ldr	r3, [r1, #16]
 800e124:	4605      	mov	r5, r0
 800e126:	460c      	mov	r4, r1
 800e128:	b913      	cbnz	r3, 800e130 <_fflush_r+0x10>
 800e12a:	2500      	movs	r5, #0
 800e12c:	4628      	mov	r0, r5
 800e12e:	bd38      	pop	{r3, r4, r5, pc}
 800e130:	b118      	cbz	r0, 800e13a <_fflush_r+0x1a>
 800e132:	6a03      	ldr	r3, [r0, #32]
 800e134:	b90b      	cbnz	r3, 800e13a <_fflush_r+0x1a>
 800e136:	f7fd ff9f 	bl	800c078 <__sinit>
 800e13a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d0f3      	beq.n	800e12a <_fflush_r+0xa>
 800e142:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e144:	07d0      	lsls	r0, r2, #31
 800e146:	d404      	bmi.n	800e152 <_fflush_r+0x32>
 800e148:	0599      	lsls	r1, r3, #22
 800e14a:	d402      	bmi.n	800e152 <_fflush_r+0x32>
 800e14c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e14e:	f7fe f9bc 	bl	800c4ca <__retarget_lock_acquire_recursive>
 800e152:	4628      	mov	r0, r5
 800e154:	4621      	mov	r1, r4
 800e156:	f7ff ff5d 	bl	800e014 <__sflush_r>
 800e15a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e15c:	07da      	lsls	r2, r3, #31
 800e15e:	4605      	mov	r5, r0
 800e160:	d4e4      	bmi.n	800e12c <_fflush_r+0xc>
 800e162:	89a3      	ldrh	r3, [r4, #12]
 800e164:	059b      	lsls	r3, r3, #22
 800e166:	d4e1      	bmi.n	800e12c <_fflush_r+0xc>
 800e168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e16a:	f7fe f9af 	bl	800c4cc <__retarget_lock_release_recursive>
 800e16e:	e7dd      	b.n	800e12c <_fflush_r+0xc>

0800e170 <__swhatbuf_r>:
 800e170:	b570      	push	{r4, r5, r6, lr}
 800e172:	460c      	mov	r4, r1
 800e174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e178:	2900      	cmp	r1, #0
 800e17a:	b096      	sub	sp, #88	; 0x58
 800e17c:	4615      	mov	r5, r2
 800e17e:	461e      	mov	r6, r3
 800e180:	da0d      	bge.n	800e19e <__swhatbuf_r+0x2e>
 800e182:	89a3      	ldrh	r3, [r4, #12]
 800e184:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e188:	f04f 0100 	mov.w	r1, #0
 800e18c:	bf0c      	ite	eq
 800e18e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e192:	2340      	movne	r3, #64	; 0x40
 800e194:	2000      	movs	r0, #0
 800e196:	6031      	str	r1, [r6, #0]
 800e198:	602b      	str	r3, [r5, #0]
 800e19a:	b016      	add	sp, #88	; 0x58
 800e19c:	bd70      	pop	{r4, r5, r6, pc}
 800e19e:	466a      	mov	r2, sp
 800e1a0:	f000 f862 	bl	800e268 <_fstat_r>
 800e1a4:	2800      	cmp	r0, #0
 800e1a6:	dbec      	blt.n	800e182 <__swhatbuf_r+0x12>
 800e1a8:	9901      	ldr	r1, [sp, #4]
 800e1aa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e1ae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e1b2:	4259      	negs	r1, r3
 800e1b4:	4159      	adcs	r1, r3
 800e1b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e1ba:	e7eb      	b.n	800e194 <__swhatbuf_r+0x24>

0800e1bc <__smakebuf_r>:
 800e1bc:	898b      	ldrh	r3, [r1, #12]
 800e1be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e1c0:	079d      	lsls	r5, r3, #30
 800e1c2:	4606      	mov	r6, r0
 800e1c4:	460c      	mov	r4, r1
 800e1c6:	d507      	bpl.n	800e1d8 <__smakebuf_r+0x1c>
 800e1c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e1cc:	6023      	str	r3, [r4, #0]
 800e1ce:	6123      	str	r3, [r4, #16]
 800e1d0:	2301      	movs	r3, #1
 800e1d2:	6163      	str	r3, [r4, #20]
 800e1d4:	b002      	add	sp, #8
 800e1d6:	bd70      	pop	{r4, r5, r6, pc}
 800e1d8:	ab01      	add	r3, sp, #4
 800e1da:	466a      	mov	r2, sp
 800e1dc:	f7ff ffc8 	bl	800e170 <__swhatbuf_r>
 800e1e0:	9900      	ldr	r1, [sp, #0]
 800e1e2:	4605      	mov	r5, r0
 800e1e4:	4630      	mov	r0, r6
 800e1e6:	f7ff f871 	bl	800d2cc <_malloc_r>
 800e1ea:	b948      	cbnz	r0, 800e200 <__smakebuf_r+0x44>
 800e1ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1f0:	059a      	lsls	r2, r3, #22
 800e1f2:	d4ef      	bmi.n	800e1d4 <__smakebuf_r+0x18>
 800e1f4:	f023 0303 	bic.w	r3, r3, #3
 800e1f8:	f043 0302 	orr.w	r3, r3, #2
 800e1fc:	81a3      	strh	r3, [r4, #12]
 800e1fe:	e7e3      	b.n	800e1c8 <__smakebuf_r+0xc>
 800e200:	89a3      	ldrh	r3, [r4, #12]
 800e202:	6020      	str	r0, [r4, #0]
 800e204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e208:	81a3      	strh	r3, [r4, #12]
 800e20a:	9b00      	ldr	r3, [sp, #0]
 800e20c:	6163      	str	r3, [r4, #20]
 800e20e:	9b01      	ldr	r3, [sp, #4]
 800e210:	6120      	str	r0, [r4, #16]
 800e212:	b15b      	cbz	r3, 800e22c <__smakebuf_r+0x70>
 800e214:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e218:	4630      	mov	r0, r6
 800e21a:	f000 f837 	bl	800e28c <_isatty_r>
 800e21e:	b128      	cbz	r0, 800e22c <__smakebuf_r+0x70>
 800e220:	89a3      	ldrh	r3, [r4, #12]
 800e222:	f023 0303 	bic.w	r3, r3, #3
 800e226:	f043 0301 	orr.w	r3, r3, #1
 800e22a:	81a3      	strh	r3, [r4, #12]
 800e22c:	89a3      	ldrh	r3, [r4, #12]
 800e22e:	431d      	orrs	r5, r3
 800e230:	81a5      	strh	r5, [r4, #12]
 800e232:	e7cf      	b.n	800e1d4 <__smakebuf_r+0x18>

0800e234 <memmove>:
 800e234:	4288      	cmp	r0, r1
 800e236:	b510      	push	{r4, lr}
 800e238:	eb01 0402 	add.w	r4, r1, r2
 800e23c:	d902      	bls.n	800e244 <memmove+0x10>
 800e23e:	4284      	cmp	r4, r0
 800e240:	4623      	mov	r3, r4
 800e242:	d807      	bhi.n	800e254 <memmove+0x20>
 800e244:	1e43      	subs	r3, r0, #1
 800e246:	42a1      	cmp	r1, r4
 800e248:	d008      	beq.n	800e25c <memmove+0x28>
 800e24a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e24e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e252:	e7f8      	b.n	800e246 <memmove+0x12>
 800e254:	4402      	add	r2, r0
 800e256:	4601      	mov	r1, r0
 800e258:	428a      	cmp	r2, r1
 800e25a:	d100      	bne.n	800e25e <memmove+0x2a>
 800e25c:	bd10      	pop	{r4, pc}
 800e25e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e262:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e266:	e7f7      	b.n	800e258 <memmove+0x24>

0800e268 <_fstat_r>:
 800e268:	b538      	push	{r3, r4, r5, lr}
 800e26a:	4d07      	ldr	r5, [pc, #28]	; (800e288 <_fstat_r+0x20>)
 800e26c:	2300      	movs	r3, #0
 800e26e:	4604      	mov	r4, r0
 800e270:	4608      	mov	r0, r1
 800e272:	4611      	mov	r1, r2
 800e274:	602b      	str	r3, [r5, #0]
 800e276:	f7f4 fd65 	bl	8002d44 <_fstat>
 800e27a:	1c43      	adds	r3, r0, #1
 800e27c:	d102      	bne.n	800e284 <_fstat_r+0x1c>
 800e27e:	682b      	ldr	r3, [r5, #0]
 800e280:	b103      	cbz	r3, 800e284 <_fstat_r+0x1c>
 800e282:	6023      	str	r3, [r4, #0]
 800e284:	bd38      	pop	{r3, r4, r5, pc}
 800e286:	bf00      	nop
 800e288:	200018dc 	.word	0x200018dc

0800e28c <_isatty_r>:
 800e28c:	b538      	push	{r3, r4, r5, lr}
 800e28e:	4d06      	ldr	r5, [pc, #24]	; (800e2a8 <_isatty_r+0x1c>)
 800e290:	2300      	movs	r3, #0
 800e292:	4604      	mov	r4, r0
 800e294:	4608      	mov	r0, r1
 800e296:	602b      	str	r3, [r5, #0]
 800e298:	f7f4 fd64 	bl	8002d64 <_isatty>
 800e29c:	1c43      	adds	r3, r0, #1
 800e29e:	d102      	bne.n	800e2a6 <_isatty_r+0x1a>
 800e2a0:	682b      	ldr	r3, [r5, #0]
 800e2a2:	b103      	cbz	r3, 800e2a6 <_isatty_r+0x1a>
 800e2a4:	6023      	str	r3, [r4, #0]
 800e2a6:	bd38      	pop	{r3, r4, r5, pc}
 800e2a8:	200018dc 	.word	0x200018dc

0800e2ac <_sbrk_r>:
 800e2ac:	b538      	push	{r3, r4, r5, lr}
 800e2ae:	4d06      	ldr	r5, [pc, #24]	; (800e2c8 <_sbrk_r+0x1c>)
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	4604      	mov	r4, r0
 800e2b4:	4608      	mov	r0, r1
 800e2b6:	602b      	str	r3, [r5, #0]
 800e2b8:	f7f4 fd6c 	bl	8002d94 <_sbrk>
 800e2bc:	1c43      	adds	r3, r0, #1
 800e2be:	d102      	bne.n	800e2c6 <_sbrk_r+0x1a>
 800e2c0:	682b      	ldr	r3, [r5, #0]
 800e2c2:	b103      	cbz	r3, 800e2c6 <_sbrk_r+0x1a>
 800e2c4:	6023      	str	r3, [r4, #0]
 800e2c6:	bd38      	pop	{r3, r4, r5, pc}
 800e2c8:	200018dc 	.word	0x200018dc

0800e2cc <__assert_func>:
 800e2cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e2ce:	4614      	mov	r4, r2
 800e2d0:	461a      	mov	r2, r3
 800e2d2:	4b09      	ldr	r3, [pc, #36]	; (800e2f8 <__assert_func+0x2c>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	4605      	mov	r5, r0
 800e2d8:	68d8      	ldr	r0, [r3, #12]
 800e2da:	b14c      	cbz	r4, 800e2f0 <__assert_func+0x24>
 800e2dc:	4b07      	ldr	r3, [pc, #28]	; (800e2fc <__assert_func+0x30>)
 800e2de:	9100      	str	r1, [sp, #0]
 800e2e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e2e4:	4906      	ldr	r1, [pc, #24]	; (800e300 <__assert_func+0x34>)
 800e2e6:	462b      	mov	r3, r5
 800e2e8:	f000 f872 	bl	800e3d0 <fiprintf>
 800e2ec:	f000 f882 	bl	800e3f4 <abort>
 800e2f0:	4b04      	ldr	r3, [pc, #16]	; (800e304 <__assert_func+0x38>)
 800e2f2:	461c      	mov	r4, r3
 800e2f4:	e7f3      	b.n	800e2de <__assert_func+0x12>
 800e2f6:	bf00      	nop
 800e2f8:	200000b0 	.word	0x200000b0
 800e2fc:	0800f0ff 	.word	0x0800f0ff
 800e300:	0800f10c 	.word	0x0800f10c
 800e304:	0800f13a 	.word	0x0800f13a

0800e308 <_calloc_r>:
 800e308:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e30a:	fba1 2402 	umull	r2, r4, r1, r2
 800e30e:	b94c      	cbnz	r4, 800e324 <_calloc_r+0x1c>
 800e310:	4611      	mov	r1, r2
 800e312:	9201      	str	r2, [sp, #4]
 800e314:	f7fe ffda 	bl	800d2cc <_malloc_r>
 800e318:	9a01      	ldr	r2, [sp, #4]
 800e31a:	4605      	mov	r5, r0
 800e31c:	b930      	cbnz	r0, 800e32c <_calloc_r+0x24>
 800e31e:	4628      	mov	r0, r5
 800e320:	b003      	add	sp, #12
 800e322:	bd30      	pop	{r4, r5, pc}
 800e324:	220c      	movs	r2, #12
 800e326:	6002      	str	r2, [r0, #0]
 800e328:	2500      	movs	r5, #0
 800e32a:	e7f8      	b.n	800e31e <_calloc_r+0x16>
 800e32c:	4621      	mov	r1, r4
 800e32e:	f7fe f83f 	bl	800c3b0 <memset>
 800e332:	e7f4      	b.n	800e31e <_calloc_r+0x16>

0800e334 <__ascii_mbtowc>:
 800e334:	b082      	sub	sp, #8
 800e336:	b901      	cbnz	r1, 800e33a <__ascii_mbtowc+0x6>
 800e338:	a901      	add	r1, sp, #4
 800e33a:	b142      	cbz	r2, 800e34e <__ascii_mbtowc+0x1a>
 800e33c:	b14b      	cbz	r3, 800e352 <__ascii_mbtowc+0x1e>
 800e33e:	7813      	ldrb	r3, [r2, #0]
 800e340:	600b      	str	r3, [r1, #0]
 800e342:	7812      	ldrb	r2, [r2, #0]
 800e344:	1e10      	subs	r0, r2, #0
 800e346:	bf18      	it	ne
 800e348:	2001      	movne	r0, #1
 800e34a:	b002      	add	sp, #8
 800e34c:	4770      	bx	lr
 800e34e:	4610      	mov	r0, r2
 800e350:	e7fb      	b.n	800e34a <__ascii_mbtowc+0x16>
 800e352:	f06f 0001 	mvn.w	r0, #1
 800e356:	e7f8      	b.n	800e34a <__ascii_mbtowc+0x16>

0800e358 <_realloc_r>:
 800e358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e35c:	4680      	mov	r8, r0
 800e35e:	4614      	mov	r4, r2
 800e360:	460e      	mov	r6, r1
 800e362:	b921      	cbnz	r1, 800e36e <_realloc_r+0x16>
 800e364:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e368:	4611      	mov	r1, r2
 800e36a:	f7fe bfaf 	b.w	800d2cc <_malloc_r>
 800e36e:	b92a      	cbnz	r2, 800e37c <_realloc_r+0x24>
 800e370:	f7fe ff38 	bl	800d1e4 <_free_r>
 800e374:	4625      	mov	r5, r4
 800e376:	4628      	mov	r0, r5
 800e378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e37c:	f000 f841 	bl	800e402 <_malloc_usable_size_r>
 800e380:	4284      	cmp	r4, r0
 800e382:	4607      	mov	r7, r0
 800e384:	d802      	bhi.n	800e38c <_realloc_r+0x34>
 800e386:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e38a:	d812      	bhi.n	800e3b2 <_realloc_r+0x5a>
 800e38c:	4621      	mov	r1, r4
 800e38e:	4640      	mov	r0, r8
 800e390:	f7fe ff9c 	bl	800d2cc <_malloc_r>
 800e394:	4605      	mov	r5, r0
 800e396:	2800      	cmp	r0, #0
 800e398:	d0ed      	beq.n	800e376 <_realloc_r+0x1e>
 800e39a:	42bc      	cmp	r4, r7
 800e39c:	4622      	mov	r2, r4
 800e39e:	4631      	mov	r1, r6
 800e3a0:	bf28      	it	cs
 800e3a2:	463a      	movcs	r2, r7
 800e3a4:	f7fe f893 	bl	800c4ce <memcpy>
 800e3a8:	4631      	mov	r1, r6
 800e3aa:	4640      	mov	r0, r8
 800e3ac:	f7fe ff1a 	bl	800d1e4 <_free_r>
 800e3b0:	e7e1      	b.n	800e376 <_realloc_r+0x1e>
 800e3b2:	4635      	mov	r5, r6
 800e3b4:	e7df      	b.n	800e376 <_realloc_r+0x1e>

0800e3b6 <__ascii_wctomb>:
 800e3b6:	b149      	cbz	r1, 800e3cc <__ascii_wctomb+0x16>
 800e3b8:	2aff      	cmp	r2, #255	; 0xff
 800e3ba:	bf85      	ittet	hi
 800e3bc:	238a      	movhi	r3, #138	; 0x8a
 800e3be:	6003      	strhi	r3, [r0, #0]
 800e3c0:	700a      	strbls	r2, [r1, #0]
 800e3c2:	f04f 30ff 	movhi.w	r0, #4294967295
 800e3c6:	bf98      	it	ls
 800e3c8:	2001      	movls	r0, #1
 800e3ca:	4770      	bx	lr
 800e3cc:	4608      	mov	r0, r1
 800e3ce:	4770      	bx	lr

0800e3d0 <fiprintf>:
 800e3d0:	b40e      	push	{r1, r2, r3}
 800e3d2:	b503      	push	{r0, r1, lr}
 800e3d4:	4601      	mov	r1, r0
 800e3d6:	ab03      	add	r3, sp, #12
 800e3d8:	4805      	ldr	r0, [pc, #20]	; (800e3f0 <fiprintf+0x20>)
 800e3da:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3de:	6800      	ldr	r0, [r0, #0]
 800e3e0:	9301      	str	r3, [sp, #4]
 800e3e2:	f7ff fcfd 	bl	800dde0 <_vfiprintf_r>
 800e3e6:	b002      	add	sp, #8
 800e3e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e3ec:	b003      	add	sp, #12
 800e3ee:	4770      	bx	lr
 800e3f0:	200000b0 	.word	0x200000b0

0800e3f4 <abort>:
 800e3f4:	b508      	push	{r3, lr}
 800e3f6:	2006      	movs	r0, #6
 800e3f8:	f000 f834 	bl	800e464 <raise>
 800e3fc:	2001      	movs	r0, #1
 800e3fe:	f7f4 fc6e 	bl	8002cde <_exit>

0800e402 <_malloc_usable_size_r>:
 800e402:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e406:	1f18      	subs	r0, r3, #4
 800e408:	2b00      	cmp	r3, #0
 800e40a:	bfbc      	itt	lt
 800e40c:	580b      	ldrlt	r3, [r1, r0]
 800e40e:	18c0      	addlt	r0, r0, r3
 800e410:	4770      	bx	lr

0800e412 <_raise_r>:
 800e412:	291f      	cmp	r1, #31
 800e414:	b538      	push	{r3, r4, r5, lr}
 800e416:	4604      	mov	r4, r0
 800e418:	460d      	mov	r5, r1
 800e41a:	d904      	bls.n	800e426 <_raise_r+0x14>
 800e41c:	2316      	movs	r3, #22
 800e41e:	6003      	str	r3, [r0, #0]
 800e420:	f04f 30ff 	mov.w	r0, #4294967295
 800e424:	bd38      	pop	{r3, r4, r5, pc}
 800e426:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e428:	b112      	cbz	r2, 800e430 <_raise_r+0x1e>
 800e42a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e42e:	b94b      	cbnz	r3, 800e444 <_raise_r+0x32>
 800e430:	4620      	mov	r0, r4
 800e432:	f000 f831 	bl	800e498 <_getpid_r>
 800e436:	462a      	mov	r2, r5
 800e438:	4601      	mov	r1, r0
 800e43a:	4620      	mov	r0, r4
 800e43c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e440:	f000 b818 	b.w	800e474 <_kill_r>
 800e444:	2b01      	cmp	r3, #1
 800e446:	d00a      	beq.n	800e45e <_raise_r+0x4c>
 800e448:	1c59      	adds	r1, r3, #1
 800e44a:	d103      	bne.n	800e454 <_raise_r+0x42>
 800e44c:	2316      	movs	r3, #22
 800e44e:	6003      	str	r3, [r0, #0]
 800e450:	2001      	movs	r0, #1
 800e452:	e7e7      	b.n	800e424 <_raise_r+0x12>
 800e454:	2400      	movs	r4, #0
 800e456:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e45a:	4628      	mov	r0, r5
 800e45c:	4798      	blx	r3
 800e45e:	2000      	movs	r0, #0
 800e460:	e7e0      	b.n	800e424 <_raise_r+0x12>
	...

0800e464 <raise>:
 800e464:	4b02      	ldr	r3, [pc, #8]	; (800e470 <raise+0xc>)
 800e466:	4601      	mov	r1, r0
 800e468:	6818      	ldr	r0, [r3, #0]
 800e46a:	f7ff bfd2 	b.w	800e412 <_raise_r>
 800e46e:	bf00      	nop
 800e470:	200000b0 	.word	0x200000b0

0800e474 <_kill_r>:
 800e474:	b538      	push	{r3, r4, r5, lr}
 800e476:	4d07      	ldr	r5, [pc, #28]	; (800e494 <_kill_r+0x20>)
 800e478:	2300      	movs	r3, #0
 800e47a:	4604      	mov	r4, r0
 800e47c:	4608      	mov	r0, r1
 800e47e:	4611      	mov	r1, r2
 800e480:	602b      	str	r3, [r5, #0]
 800e482:	f7f4 fc1c 	bl	8002cbe <_kill>
 800e486:	1c43      	adds	r3, r0, #1
 800e488:	d102      	bne.n	800e490 <_kill_r+0x1c>
 800e48a:	682b      	ldr	r3, [r5, #0]
 800e48c:	b103      	cbz	r3, 800e490 <_kill_r+0x1c>
 800e48e:	6023      	str	r3, [r4, #0]
 800e490:	bd38      	pop	{r3, r4, r5, pc}
 800e492:	bf00      	nop
 800e494:	200018dc 	.word	0x200018dc

0800e498 <_getpid_r>:
 800e498:	f7f4 bc09 	b.w	8002cae <_getpid>

0800e49c <_init>:
 800e49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e49e:	bf00      	nop
 800e4a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4a2:	bc08      	pop	{r3}
 800e4a4:	469e      	mov	lr, r3
 800e4a6:	4770      	bx	lr

0800e4a8 <_fini>:
 800e4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4aa:	bf00      	nop
 800e4ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4ae:	bc08      	pop	{r3}
 800e4b0:	469e      	mov	lr, r3
 800e4b2:	4770      	bx	lr
