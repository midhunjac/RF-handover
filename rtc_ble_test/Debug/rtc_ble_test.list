
rtc_ble_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008018  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  08008158  08008158  00018158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008488  08008488  00018488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008490  08008490  00018490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008494  08008494  00018494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  20000004  08008498  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000080  08008514  00020080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000035  2000011c  080085ad  0002011c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000154  080085e2  00020154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000003a4  20000168  080085f3  00020168  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000050c  080085f3  0002050c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020165  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 15 MB_MEM2       00000883  200301e4  200301e4  00030000  2**2
                  ALLOC
 16 .comment      00000043  00000000  00000000  00020195  2**0
                  CONTENTS, READONLY
 17 .debug_info   0002a639  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00006087  00000000  00000000  0004a811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 000025f0  00000000  00000000  00050898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00001ce4  00000000  00000000  00052e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00027053  00000000  00000000  00054b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0002a6c4  00000000  00000000  0007bbbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000d3fe7  00000000  00000000  000a6283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_frame  0000a4d8  00000000  00000000  0017a26c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 0000006e  00000000  00000000  00184744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000168 	.word	0x20000168
 800015c:	00000000 	.word	0x00000000
 8000160:	08008140 	.word	0x08008140

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000016c 	.word	0x2000016c
 800017c:	08008140 	.word	0x08008140

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b970 	b.w	8000528 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	460d      	mov	r5, r1
 8000268:	4604      	mov	r4, r0
 800026a:	460f      	mov	r7, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14a      	bne.n	8000306 <__udivmoddi4+0xa6>
 8000270:	428a      	cmp	r2, r1
 8000272:	4694      	mov	ip, r2
 8000274:	d965      	bls.n	8000342 <__udivmoddi4+0xe2>
 8000276:	fab2 f382 	clz	r3, r2
 800027a:	b143      	cbz	r3, 800028e <__udivmoddi4+0x2e>
 800027c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000280:	f1c3 0220 	rsb	r2, r3, #32
 8000284:	409f      	lsls	r7, r3
 8000286:	fa20 f202 	lsr.w	r2, r0, r2
 800028a:	4317      	orrs	r7, r2
 800028c:	409c      	lsls	r4, r3
 800028e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000292:	fa1f f58c 	uxth.w	r5, ip
 8000296:	fbb7 f1fe 	udiv	r1, r7, lr
 800029a:	0c22      	lsrs	r2, r4, #16
 800029c:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002a4:	fb01 f005 	mul.w	r0, r1, r5
 80002a8:	4290      	cmp	r0, r2
 80002aa:	d90a      	bls.n	80002c2 <__udivmoddi4+0x62>
 80002ac:	eb1c 0202 	adds.w	r2, ip, r2
 80002b0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002b4:	f080 811c 	bcs.w	80004f0 <__udivmoddi4+0x290>
 80002b8:	4290      	cmp	r0, r2
 80002ba:	f240 8119 	bls.w	80004f0 <__udivmoddi4+0x290>
 80002be:	3902      	subs	r1, #2
 80002c0:	4462      	add	r2, ip
 80002c2:	1a12      	subs	r2, r2, r0
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ce:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d2:	fb00 f505 	mul.w	r5, r0, r5
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	d90a      	bls.n	80002f0 <__udivmoddi4+0x90>
 80002da:	eb1c 0404 	adds.w	r4, ip, r4
 80002de:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e2:	f080 8107 	bcs.w	80004f4 <__udivmoddi4+0x294>
 80002e6:	42a5      	cmp	r5, r4
 80002e8:	f240 8104 	bls.w	80004f4 <__udivmoddi4+0x294>
 80002ec:	4464      	add	r4, ip
 80002ee:	3802      	subs	r0, #2
 80002f0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f4:	1b64      	subs	r4, r4, r5
 80002f6:	2100      	movs	r1, #0
 80002f8:	b11e      	cbz	r6, 8000302 <__udivmoddi4+0xa2>
 80002fa:	40dc      	lsrs	r4, r3
 80002fc:	2300      	movs	r3, #0
 80002fe:	e9c6 4300 	strd	r4, r3, [r6]
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	428b      	cmp	r3, r1
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0xbc>
 800030a:	2e00      	cmp	r6, #0
 800030c:	f000 80ed 	beq.w	80004ea <__udivmoddi4+0x28a>
 8000310:	2100      	movs	r1, #0
 8000312:	e9c6 0500 	strd	r0, r5, [r6]
 8000316:	4608      	mov	r0, r1
 8000318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031c:	fab3 f183 	clz	r1, r3
 8000320:	2900      	cmp	r1, #0
 8000322:	d149      	bne.n	80003b8 <__udivmoddi4+0x158>
 8000324:	42ab      	cmp	r3, r5
 8000326:	d302      	bcc.n	800032e <__udivmoddi4+0xce>
 8000328:	4282      	cmp	r2, r0
 800032a:	f200 80f8 	bhi.w	800051e <__udivmoddi4+0x2be>
 800032e:	1a84      	subs	r4, r0, r2
 8000330:	eb65 0203 	sbc.w	r2, r5, r3
 8000334:	2001      	movs	r0, #1
 8000336:	4617      	mov	r7, r2
 8000338:	2e00      	cmp	r6, #0
 800033a:	d0e2      	beq.n	8000302 <__udivmoddi4+0xa2>
 800033c:	e9c6 4700 	strd	r4, r7, [r6]
 8000340:	e7df      	b.n	8000302 <__udivmoddi4+0xa2>
 8000342:	b902      	cbnz	r2, 8000346 <__udivmoddi4+0xe6>
 8000344:	deff      	udf	#255	; 0xff
 8000346:	fab2 f382 	clz	r3, r2
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8090 	bne.w	8000470 <__udivmoddi4+0x210>
 8000350:	1a8a      	subs	r2, r1, r2
 8000352:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000356:	fa1f fe8c 	uxth.w	lr, ip
 800035a:	2101      	movs	r1, #1
 800035c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000360:	fb07 2015 	mls	r0, r7, r5, r2
 8000364:	0c22      	lsrs	r2, r4, #16
 8000366:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800036a:	fb0e f005 	mul.w	r0, lr, r5
 800036e:	4290      	cmp	r0, r2
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x124>
 8000372:	eb1c 0202 	adds.w	r2, ip, r2
 8000376:	f105 38ff 	add.w	r8, r5, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x122>
 800037c:	4290      	cmp	r0, r2
 800037e:	f200 80cb 	bhi.w	8000518 <__udivmoddi4+0x2b8>
 8000382:	4645      	mov	r5, r8
 8000384:	1a12      	subs	r2, r2, r0
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb2 f0f7 	udiv	r0, r2, r7
 800038c:	fb07 2210 	mls	r2, r7, r0, r2
 8000390:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000394:	fb0e fe00 	mul.w	lr, lr, r0
 8000398:	45a6      	cmp	lr, r4
 800039a:	d908      	bls.n	80003ae <__udivmoddi4+0x14e>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a4:	d202      	bcs.n	80003ac <__udivmoddi4+0x14c>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f200 80bb 	bhi.w	8000522 <__udivmoddi4+0x2c2>
 80003ac:	4610      	mov	r0, r2
 80003ae:	eba4 040e 	sub.w	r4, r4, lr
 80003b2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003b6:	e79f      	b.n	80002f8 <__udivmoddi4+0x98>
 80003b8:	f1c1 0720 	rsb	r7, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 fc07 	lsr.w	ip, r2, r7
 80003c2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ca:	fa20 f307 	lsr.w	r3, r0, r7
 80003ce:	40fd      	lsrs	r5, r7
 80003d0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003d4:	4323      	orrs	r3, r4
 80003d6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003da:	fa1f fe8c 	uxth.w	lr, ip
 80003de:	fb09 5518 	mls	r5, r9, r8, r5
 80003e2:	0c1c      	lsrs	r4, r3, #16
 80003e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003e8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	fa00 f001 	lsl.w	r0, r0, r1
 80003f6:	d90b      	bls.n	8000410 <__udivmoddi4+0x1b0>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000400:	f080 8088 	bcs.w	8000514 <__udivmoddi4+0x2b4>
 8000404:	42a5      	cmp	r5, r4
 8000406:	f240 8085 	bls.w	8000514 <__udivmoddi4+0x2b4>
 800040a:	f1a8 0802 	sub.w	r8, r8, #2
 800040e:	4464      	add	r4, ip
 8000410:	1b64      	subs	r4, r4, r5
 8000412:	b29d      	uxth	r5, r3
 8000414:	fbb4 f3f9 	udiv	r3, r4, r9
 8000418:	fb09 4413 	mls	r4, r9, r3, r4
 800041c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000420:	fb03 fe0e 	mul.w	lr, r3, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x1da>
 8000428:	eb1c 0404 	adds.w	r4, ip, r4
 800042c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000430:	d26c      	bcs.n	800050c <__udivmoddi4+0x2ac>
 8000432:	45a6      	cmp	lr, r4
 8000434:	d96a      	bls.n	800050c <__udivmoddi4+0x2ac>
 8000436:	3b02      	subs	r3, #2
 8000438:	4464      	add	r4, ip
 800043a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800043e:	fba3 9502 	umull	r9, r5, r3, r2
 8000442:	eba4 040e 	sub.w	r4, r4, lr
 8000446:	42ac      	cmp	r4, r5
 8000448:	46c8      	mov	r8, r9
 800044a:	46ae      	mov	lr, r5
 800044c:	d356      	bcc.n	80004fc <__udivmoddi4+0x29c>
 800044e:	d053      	beq.n	80004f8 <__udivmoddi4+0x298>
 8000450:	b156      	cbz	r6, 8000468 <__udivmoddi4+0x208>
 8000452:	ebb0 0208 	subs.w	r2, r0, r8
 8000456:	eb64 040e 	sbc.w	r4, r4, lr
 800045a:	fa04 f707 	lsl.w	r7, r4, r7
 800045e:	40ca      	lsrs	r2, r1
 8000460:	40cc      	lsrs	r4, r1
 8000462:	4317      	orrs	r7, r2
 8000464:	e9c6 7400 	strd	r7, r4, [r6]
 8000468:	4618      	mov	r0, r3
 800046a:	2100      	movs	r1, #0
 800046c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000470:	f1c3 0120 	rsb	r1, r3, #32
 8000474:	fa02 fc03 	lsl.w	ip, r2, r3
 8000478:	fa20 f201 	lsr.w	r2, r0, r1
 800047c:	fa25 f101 	lsr.w	r1, r5, r1
 8000480:	409d      	lsls	r5, r3
 8000482:	432a      	orrs	r2, r5
 8000484:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000490:	fb07 1510 	mls	r5, r7, r0, r1
 8000494:	0c11      	lsrs	r1, r2, #16
 8000496:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800049a:	fb00 f50e 	mul.w	r5, r0, lr
 800049e:	428d      	cmp	r5, r1
 80004a0:	fa04 f403 	lsl.w	r4, r4, r3
 80004a4:	d908      	bls.n	80004b8 <__udivmoddi4+0x258>
 80004a6:	eb1c 0101 	adds.w	r1, ip, r1
 80004aa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ae:	d22f      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004b0:	428d      	cmp	r5, r1
 80004b2:	d92d      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004b4:	3802      	subs	r0, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1b49      	subs	r1, r1, r5
 80004ba:	b292      	uxth	r2, r2
 80004bc:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c0:	fb07 1115 	mls	r1, r7, r5, r1
 80004c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c8:	fb05 f10e 	mul.w	r1, r5, lr
 80004cc:	4291      	cmp	r1, r2
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x282>
 80004d0:	eb1c 0202 	adds.w	r2, ip, r2
 80004d4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004d8:	d216      	bcs.n	8000508 <__udivmoddi4+0x2a8>
 80004da:	4291      	cmp	r1, r2
 80004dc:	d914      	bls.n	8000508 <__udivmoddi4+0x2a8>
 80004de:	3d02      	subs	r5, #2
 80004e0:	4462      	add	r2, ip
 80004e2:	1a52      	subs	r2, r2, r1
 80004e4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004e8:	e738      	b.n	800035c <__udivmoddi4+0xfc>
 80004ea:	4631      	mov	r1, r6
 80004ec:	4630      	mov	r0, r6
 80004ee:	e708      	b.n	8000302 <__udivmoddi4+0xa2>
 80004f0:	4639      	mov	r1, r7
 80004f2:	e6e6      	b.n	80002c2 <__udivmoddi4+0x62>
 80004f4:	4610      	mov	r0, r2
 80004f6:	e6fb      	b.n	80002f0 <__udivmoddi4+0x90>
 80004f8:	4548      	cmp	r0, r9
 80004fa:	d2a9      	bcs.n	8000450 <__udivmoddi4+0x1f0>
 80004fc:	ebb9 0802 	subs.w	r8, r9, r2
 8000500:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000504:	3b01      	subs	r3, #1
 8000506:	e7a3      	b.n	8000450 <__udivmoddi4+0x1f0>
 8000508:	4645      	mov	r5, r8
 800050a:	e7ea      	b.n	80004e2 <__udivmoddi4+0x282>
 800050c:	462b      	mov	r3, r5
 800050e:	e794      	b.n	800043a <__udivmoddi4+0x1da>
 8000510:	4640      	mov	r0, r8
 8000512:	e7d1      	b.n	80004b8 <__udivmoddi4+0x258>
 8000514:	46d0      	mov	r8, sl
 8000516:	e77b      	b.n	8000410 <__udivmoddi4+0x1b0>
 8000518:	3d02      	subs	r5, #2
 800051a:	4462      	add	r2, ip
 800051c:	e732      	b.n	8000384 <__udivmoddi4+0x124>
 800051e:	4608      	mov	r0, r1
 8000520:	e70a      	b.n	8000338 <__udivmoddi4+0xd8>
 8000522:	4464      	add	r4, ip
 8000524:	3802      	subs	r0, #2
 8000526:	e742      	b.n	80003ae <__udivmoddi4+0x14e>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 800052c:	b5b0      	push	{r4, r5, r7, lr}
 800052e:	b088      	sub	sp, #32
 8000530:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  APPD_GeneralConfig.STBY_DebugGpioaPinList = STBY_DebugGpioaPinList;
 8000532:	4b15      	ldr	r3, [pc, #84]	; (8000588 <APPD_EnableCPU2+0x5c>)
 8000534:	881a      	ldrh	r2, [r3, #0]
 8000536:	4b15      	ldr	r3, [pc, #84]	; (800058c <APPD_EnableCPU2+0x60>)
 8000538:	809a      	strh	r2, [r3, #4]
  APPD_GeneralConfig.STBY_DebugGpiobPinList = STBY_DebugGpiobPinList;
 800053a:	4b15      	ldr	r3, [pc, #84]	; (8000590 <APPD_EnableCPU2+0x64>)
 800053c:	881a      	ldrh	r2, [r3, #0]
 800053e:	4b13      	ldr	r3, [pc, #76]	; (800058c <APPD_EnableCPU2+0x60>)
 8000540:	80da      	strh	r2, [r3, #6]
  APPD_GeneralConfig.STBY_DebugGpiocPinList = STBY_DebugGpiocPinList;
 8000542:	4b14      	ldr	r3, [pc, #80]	; (8000594 <APPD_EnableCPU2+0x68>)
 8000544:	881a      	ldrh	r2, [r3, #0]
 8000546:	4b11      	ldr	r3, [pc, #68]	; (800058c <APPD_EnableCPU2+0x60>)
 8000548:	811a      	strh	r2, [r3, #8]
  APPD_GeneralConfig.STBY_DtbGpioaPinList = STBY_DtbGpioaPinList;
 800054a:	4b13      	ldr	r3, [pc, #76]	; (8000598 <APPD_EnableCPU2+0x6c>)
 800054c:	881a      	ldrh	r2, [r3, #0]
 800054e:	4b0f      	ldr	r3, [pc, #60]	; (800058c <APPD_EnableCPU2+0x60>)
 8000550:	815a      	strh	r2, [r3, #10]
  APPD_GeneralConfig.STBY_DtbGpiobPinList = STBY_DtbGpiobPinList;
 8000552:	4b12      	ldr	r3, [pc, #72]	; (800059c <APPD_EnableCPU2+0x70>)
 8000554:	881a      	ldrh	r2, [r3, #0]
 8000556:	4b0d      	ldr	r3, [pc, #52]	; (800058c <APPD_EnableCPU2+0x60>)
 8000558:	819a      	strh	r2, [r3, #12]

  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800055a:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <APPD_EnableCPU2+0x74>)
 800055c:	1d3c      	adds	r4, r7, #4
 800055e:	461d      	mov	r5, r3
 8000560:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000564:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000568:	c403      	stmia	r4!, {r0, r1}
 800056a:	8022      	strh	r2, [r4, #0]
 800056c:	3402      	adds	r4, #2
 800056e:	0c13      	lsrs	r3, r2, #16
 8000570:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000572:	f005 fd31 	bl	8005fd8 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	4618      	mov	r0, r3
 800057a:	f004 ffcc 	bl	8005516 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800057e:	bf00      	nop
}
 8000580:	3720      	adds	r7, #32
 8000582:	46bd      	mov	sp, r7
 8000584:	bdb0      	pop	{r4, r5, r7, pc}
 8000586:	bf00      	nop
 8000588:	20000004 	.word	0x20000004
 800058c:	200301e8 	.word	0x200301e8
 8000590:	20000006 	.word	0x20000006
 8000594:	20000008 	.word	0x20000008
 8000598:	2000000a 	.word	0x2000000a
 800059c:	2000000c 	.word	0x2000000c
 80005a0:	08008158 	.word	0x08008158

080005a4 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80005ac:	4b07      	ldr	r3, [pc, #28]	; (80005cc <LL_C2_PWR_SetPowerMode+0x28>)
 80005ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005b2:	f023 0207 	bic.w	r2, r3, #7
 80005b6:	4905      	ldr	r1, [pc, #20]	; (80005cc <LL_C2_PWR_SetPowerMode+0x28>)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4313      	orrs	r3, r2
 80005bc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80005c0:	bf00      	nop
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr
 80005cc:	58000400 	.word	0x58000400

080005d0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <LL_EXTI_EnableIT_32_63+0x24>)
 80005da:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80005de:	4905      	ldr	r1, [pc, #20]	; (80005f4 <LL_EXTI_EnableIT_32_63+0x24>)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	4313      	orrs	r3, r2
 80005e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80005e8:	bf00      	nop
 80005ea:	370c      	adds	r7, #12
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr
 80005f4:	58000800 	.word	0x58000800

080005f8 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000600:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000604:	4a0a      	ldr	r2, [pc, #40]	; (8000630 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000606:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800060a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800060e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000612:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	021b      	lsls	r3, r3, #8
 800061a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800061e:	4313      	orrs	r3, r2
 8000620:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000624:	bf00      	nop
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	cafecafe 	.word	0xcafecafe

08000634 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800063c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000640:	689b      	ldr	r3, [r3, #8]
 8000642:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000646:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4313      	orrs	r3, r2
 800064e:	608b      	str	r3, [r1, #8]
}
 8000650:	bf00      	nop
 8000652:	370c      	adds	r7, #12
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr

0800065c <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000660:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000668:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800066c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000670:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr

0800067e <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000682:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800068a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800068e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000692:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000696:	bf00      	nop
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr

080006a0 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80006a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80006ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80006b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80006b4:	d101      	bne.n	80006ba <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80006b6:	2301      	movs	r3, #1
 80006b8:	e000      	b.n	80006bc <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80006ba:	2300      	movs	r3, #0
}
 80006bc:	4618      	mov	r0, r3
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80006c6:	b480      	push	{r7}
 80006c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80006ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80006d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80006da:	d101      	bne.n	80006e0 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80006dc:	2301      	movs	r3, #1
 80006de:	e000      	b.n	80006e2 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80006e0:	2300      	movs	r3, #0
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80006f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80006fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4313      	orrs	r3, r2
 8000702:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000708:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4013      	ands	r3, r2
 800070e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000710:	68fb      	ldr	r3, [r7, #12]
}
 8000712:	bf00      	nop
 8000714:	3714      	adds	r7, #20
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
	...

08000720 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000724:	4b04      	ldr	r3, [pc, #16]	; (8000738 <LL_DBGMCU_GetRevisionID+0x18>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	0c1b      	lsrs	r3, r3, #16
 800072a:	b29b      	uxth	r3, r3
}
 800072c:	4618      	mov	r0, r3
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	e0042000 	.word	0xe0042000

0800073c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	685a      	ldr	r2, [r3, #4]
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	041b      	lsls	r3, r3, #16
 800074e:	431a      	orrs	r2, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	605a      	str	r2, [r3, #4]
}
 8000754:	bf00      	nop
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	685a      	ldr	r2, [r3, #4]
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	431a      	orrs	r2, r3
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	605a      	str	r2, [r3, #4]
}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr

08000782 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000782:	b480      	push	{r7}
 8000784:	b083      	sub	sp, #12
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
 800078a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	695a      	ldr	r2, [r3, #20]
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	041b      	lsls	r3, r3, #16
 8000794:	431a      	orrs	r2, r3
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	615a      	str	r2, [r3, #20]
}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr

080007a6 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80007a6:	b480      	push	{r7}
 80007a8:	b083      	sub	sp, #12
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	6078      	str	r0, [r7, #4]
 80007ae:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	695a      	ldr	r2, [r3, #20]
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	431a      	orrs	r2, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	615a      	str	r2, [r3, #20]
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	683a      	ldr	r2, [r7, #0]
 80007d6:	609a      	str	r2, [r3, #8]
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	683a      	ldr	r2, [r7, #0]
 80007f2:	619a      	str	r2, [r3, #24]
}
 80007f4:	bf00      	nop
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr

08000800 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	22ff      	movs	r2, #255	; 0xff
 800080c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr

0800081a <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800081a:	b480      	push	{r7}
 800081c:	b083      	sub	sp, #12
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	22ca      	movs	r2, #202	; 0xca
 8000826:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2253      	movs	r2, #83	; 0x53
 800082c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr

0800083a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800083a:	b480      	push	{r7}
 800083c:	b083      	sub	sp, #12
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
 8000842:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	689b      	ldr	r3, [r3, #8]
 8000848:	f023 0207 	bic.w	r2, r3, #7
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	431a      	orrs	r2, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	609a      	str	r2, [r3, #8]
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000864:	4b04      	ldr	r3, [pc, #16]	; (8000878 <MX_APPE_Config+0x18>)
 8000866:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800086a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 800086c:	f000 f824 	bl	80008b8 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000870:	f000 f864 	bl	800093c <Config_HSE>

  return;
 8000874:	bf00      	nop
}
 8000876:	bd80      	pop	{r7, pc}
 8000878:	58004000 	.word	0x58004000

0800087c <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000880:	f000 f870 	bl	8000964 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000884:	f000 f888 	bl	8000998 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000888:	4903      	ldr	r1, [pc, #12]	; (8000898 <MX_APPE_Init+0x1c>)
 800088a:	2000      	movs	r0, #0
 800088c:	f000 f9bc 	bl	8000c08 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000890:	f000 f892 	bl	80009b8 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000894:	bf00      	nop
}
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200001cc 	.word	0x200001cc

0800089c <Init_Smps>:

void Init_Smps(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80008a0:	bf00      	nop
}
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <Init_Exti>:

void Init_Exti(void)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80008ae:	2050      	movs	r0, #80	; 0x50
 80008b0:	f7ff fe8e 	bl	80005d0 <LL_EXTI_EnableIT_32_63>

  return;
 80008b4:	bf00      	nop
}
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 80008bc:	f000 f804 	bl	80008c8 <Reset_BackupDomain>

  Reset_IPCC();
 80008c0:	f000 f81a 	bl	80008f8 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80008c4:	bf00      	nop
}
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80008cc:	f7ff fee8 	bl	80006a0 <LL_RCC_IsActiveFlag_PINRST>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d00d      	beq.n	80008f2 <Reset_BackupDomain+0x2a>
 80008d6:	f7ff fef6 	bl	80006c6 <LL_RCC_IsActiveFlag_SFTRST>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d108      	bne.n	80008f2 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80008e0:	f001 fc2e 	bl	8002140 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80008e4:	f001 fc2c 	bl	8002140 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80008e8:	f7ff feb8 	bl	800065c <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80008ec:	f7ff fec7 	bl	800067e <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80008f0:	bf00      	nop
 80008f2:	bf00      	nop
}
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80008fc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000900:	f7ff fef4 	bl	80006ec <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000904:	213f      	movs	r1, #63	; 0x3f
 8000906:	480c      	ldr	r0, [pc, #48]	; (8000938 <Reset_IPCC+0x40>)
 8000908:	f7ff ff5e 	bl	80007c8 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 800090c:	213f      	movs	r1, #63	; 0x3f
 800090e:	480a      	ldr	r0, [pc, #40]	; (8000938 <Reset_IPCC+0x40>)
 8000910:	f7ff ff68 	bl	80007e4 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000914:	213f      	movs	r1, #63	; 0x3f
 8000916:	4808      	ldr	r0, [pc, #32]	; (8000938 <Reset_IPCC+0x40>)
 8000918:	f7ff ff10 	bl	800073c <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 800091c:	213f      	movs	r1, #63	; 0x3f
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <Reset_IPCC+0x40>)
 8000920:	f7ff ff2f 	bl	8000782 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000924:	213f      	movs	r1, #63	; 0x3f
 8000926:	4804      	ldr	r0, [pc, #16]	; (8000938 <Reset_IPCC+0x40>)
 8000928:	f7ff ff1a 	bl	8000760 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 800092c:	213f      	movs	r1, #63	; 0x3f
 800092e:	4802      	ldr	r0, [pc, #8]	; (8000938 <Reset_IPCC+0x40>)
 8000930:	f7ff ff39 	bl	80007a6 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000934:	bf00      	nop
}
 8000936:	bd80      	pop	{r7, pc}
 8000938:	58000c00 	.word	0x58000c00

0800093c <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000942:	2000      	movs	r0, #0
 8000944:	f005 fbd4 	bl	80060f0 <OTP_Read>
 8000948:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d005      	beq.n	800095c <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	799b      	ldrb	r3, [r3, #6]
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fe4f 	bl	80005f8 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800095a:	bf00      	nop
 800095c:	bf00      	nop
}
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <System_Init>:

static void System_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  Init_Smps();
 8000968:	f7ff ff98 	bl	800089c <Init_Smps>

  Init_Exti();
 800096c:	f7ff ff9d 	bl	80008aa <Init_Exti>

  Init_Rtc();
 8000970:	f000 f802 	bl	8000978 <Init_Rtc>

  return;
 8000974:	bf00      	nop
}
 8000976:	bd80      	pop	{r7, pc}

08000978 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 800097c:	4805      	ldr	r0, [pc, #20]	; (8000994 <Init_Rtc+0x1c>)
 800097e:	f7ff ff4c 	bl	800081a <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000982:	2100      	movs	r1, #0
 8000984:	4803      	ldr	r0, [pc, #12]	; (8000994 <Init_Rtc+0x1c>)
 8000986:	f7ff ff58 	bl	800083a <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800098a:	4802      	ldr	r0, [pc, #8]	; (8000994 <Init_Rtc+0x1c>)
 800098c:	f7ff ff38 	bl	8000800 <LL_RTC_EnableWriteProtection>

  return;
 8000990:	bf00      	nop
}
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40002800 	.word	0x40002800

08000998 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 800099c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80009a0:	f7ff fe48 	bl	8000634 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80009a4:	f006 fa06 	bl	8006db4 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80009a8:	2004      	movs	r0, #4
 80009aa:	f7ff fdfb 	bl	80005a4 <LL_C2_PWR_SetPowerMode>
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */
  /**
   * Active SRAM retention for standby support
   */
  HAL_PWREx_EnableSRAMRetention();
 80009ae:	f001 fc1f 	bl	80021f0 <HAL_PWREx_EnableSRAMRetention>

  return;
 80009b2:	bf00      	nop
}
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80009be:	f005 f955 	bl	8005c6c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80009c2:	4a11      	ldr	r2, [pc, #68]	; (8000a08 <appe_Tl_Init+0x50>)
 80009c4:	2100      	movs	r1, #0
 80009c6:	2008      	movs	r0, #8
 80009c8:	f006 fb32 	bl	8007030 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80009cc:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <appe_Tl_Init+0x54>)
 80009ce:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <appe_Tl_Init+0x58>)
 80009d2:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80009d4:	463b      	mov	r3, r7
 80009d6:	4619      	mov	r1, r3
 80009d8:	480e      	ldr	r0, [pc, #56]	; (8000a14 <appe_Tl_Init+0x5c>)
 80009da:	f005 f80d 	bl	80059f8 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80009de:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <appe_Tl_Init+0x60>)
 80009e0:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <appe_Tl_Init+0x64>)
 80009e4:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <appe_Tl_Init+0x68>)
 80009e8:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80009ea:	f240 533c 	movw	r3, #1340	; 0x53c
 80009ee:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80009f0:	f107 0308 	add.w	r3, r7, #8
 80009f4:	4618      	mov	r0, r3
 80009f6:	f005 fa7b 	bl	8005ef0 <TL_MM_Init>

  TL_Enable();
 80009fa:	f005 f931 	bl	8005c60 <TL_Enable>

  return;
 80009fe:	bf00      	nop
}
 8000a00:	3720      	adds	r7, #32
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	08005a31 	.word	0x08005a31
 8000a0c:	20030734 	.word	0x20030734
 8000a10:	08000a25 	.word	0x08000a25
 8000a14:	08000a3d 	.word	0x08000a3d
 8000a18:	2003094c 	.word	0x2003094c
 8000a1c:	20030840 	.word	0x20030840
 8000a20:	200301f8 	.word	0x200301f8

08000a24 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000a2e:	bf00      	nop
}
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
	...

08000a3c <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b088      	sub	sp, #32
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	330b      	adds	r3, #11
 8000a4a:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000a4c:	69fb      	ldr	r3, [r7, #28]
 8000a4e:	881b      	ldrh	r3, [r3, #0]
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8000a56:	2b07      	cmp	r3, #7
 8000a58:	d81f      	bhi.n	8000a9a <APPE_SysUserEvtRx+0x5e>
 8000a5a:	a201      	add	r2, pc, #4	; (adr r2, 8000a60 <APPE_SysUserEvtRx+0x24>)
 8000a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a60:	08000a81 	.word	0x08000a81
 8000a64:	08000a93 	.word	0x08000a93
 8000a68:	08000a9b 	.word	0x08000a9b
 8000a6c:	08000a9b 	.word	0x08000a9b
 8000a70:	08000a9b 	.word	0x08000a9b
 8000a74:	08000a9b 	.word	0x08000a9b
 8000a78:	08000a9b 	.word	0x08000a9b
 8000a7c:	08000a9b 	.word	0x08000a9b
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000a80:	f107 030c 	add.w	r3, r7, #12
 8000a84:	4618      	mov	r0, r3
 8000a86:	f004 fd73 	bl	8005570 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f000 f81b 	bl	8000ac6 <APPE_SysEvtReadyProcessing>
    break;
 8000a90:	e004      	b.n	8000a9c <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f000 f806 	bl	8000aa4 <APPE_SysEvtError>
    break;
 8000a98:	e000      	b.n	8000a9c <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8000a9a:	bf00      	nop
  }

  return;
 8000a9c:	bf00      	nop
}
 8000a9e:	3720      	adds	r7, #32
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	330b      	adds	r3, #11
 8000ab2:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	3302      	adds	r3, #2
 8000ab8:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000aba:	bf00      	nop
}
 8000abc:	3714      	adds	r7, #20
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b08a      	sub	sp, #40	; 0x28
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000ace:	f107 030c 	add.w	r3, r7, #12
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	819a      	strh	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	330b      	adds	r3, #11
 8000ae6:	623b      	str	r3, [r7, #32]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000ae8:	6a3b      	ldr	r3, [r7, #32]
 8000aea:	3302      	adds	r3, #2
 8000aec:	61fb      	str	r3, [r7, #28]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d117      	bne.n	8000b26 <APPE_SysEvtReadyProcessing+0x60>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000af6:	f7ff fd19 	bl	800052c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000afa:	230d      	movs	r3, #13
 8000afc:	733b      	strb	r3, [r7, #12]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000afe:	237f      	movs	r3, #127	; 0x7f
 8000b00:	73bb      	strb	r3, [r7, #14]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000b02:	f7ff fe0d 	bl	8000720 <LL_DBGMCU_GetRevisionID>
 8000b06:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = RevisionID;
 8000b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	833b      	strh	r3, [r7, #24]
    (void)SHCI_C2_Config(&config_param);
 8000b0e:	f107 030c 	add.w	r3, r7, #12
 8000b12:	4618      	mov	r0, r3
 8000b14:	f004 fd16 	bl	8005544 <SHCI_C2_Config>

    APP_BLE_Init();
 8000b18:	f005 fc0a 	bl	8006330 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	2001      	movs	r0, #1
 8000b20:	f006 f95a 	bl	8006dd8 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000b24:	e007      	b.n	8000b36 <APPE_SysEvtReadyProcessing+0x70>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d103      	bne.n	8000b36 <APPE_SysEvtReadyProcessing+0x70>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2200      	movs	r2, #0
 8000b32:	701a      	strb	r2, [r3, #0]
  return;
 8000b34:	bf00      	nop
 8000b36:	bf00      	nop
}
 8000b38:	3728      	adds	r7, #40	; 0x28
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000b42:	f04f 30ff 	mov.w	r0, #4294967295
 8000b46:	f006 f977 	bl	8006e38 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8000b52:	bf00      	nop
}
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000b66:	f04f 30ff 	mov.w	r0, #4294967295
 8000b6a:	f006 f965 	bl	8006e38 <UTIL_SEQ_Run>

  return;
 8000b6e:	bf00      	nop
}
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000b7e:	2100      	movs	r1, #0
 8000b80:	2008      	movs	r0, #8
 8000b82:	f006 fa77 	bl	8007074 <UTIL_SEQ_SetTask>
  return;
 8000b86:	bf00      	nop
}
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b082      	sub	sp, #8
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000b96:	2002      	movs	r0, #2
 8000b98:	f006 fad8 	bl	800714c <UTIL_SEQ_SetEvt>
  return;
 8000b9c:	bf00      	nop
}
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000bac:	2002      	movs	r0, #2
 8000bae:	f006 faed 	bl	800718c <UTIL_SEQ_WaitEvt>
  return;
 8000bb2:	bf00      	nop
}
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <LL_EXTI_EnableIT_0_31>:
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <LL_EXTI_EnableIT_0_31+0x24>)
 8000bc6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000bca:	4905      	ldr	r1, [pc, #20]	; (8000be0 <LL_EXTI_EnableIT_0_31+0x24>)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	58000800 	.word	0x58000800

08000be4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	4904      	ldr	r1, [pc, #16]	; (8000c04 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	600b      	str	r3, [r1, #0]

}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	58000800 	.word	0x58000800

08000c08 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b088      	sub	sp, #32
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	6039      	str	r1, [r7, #0]
 8000c12:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8000c14:	4a64      	ldr	r2, [pc, #400]	; (8000da8 <HW_TS_Init+0x1a0>)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000c1a:	4b63      	ldr	r3, [pc, #396]	; (8000da8 <HW_TS_Init+0x1a0>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	22ca      	movs	r2, #202	; 0xca
 8000c22:	625a      	str	r2, [r3, #36]	; 0x24
 8000c24:	4b60      	ldr	r3, [pc, #384]	; (8000da8 <HW_TS_Init+0x1a0>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2253      	movs	r2, #83	; 0x53
 8000c2c:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000c2e:	4b5f      	ldr	r3, [pc, #380]	; (8000dac <HW_TS_Init+0x1a4>)
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	4a5e      	ldr	r2, [pc, #376]	; (8000dac <HW_TS_Init+0x1a4>)
 8000c34:	f043 0320 	orr.w	r3, r3, #32
 8000c38:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000c3a:	4b5c      	ldr	r3, [pc, #368]	; (8000dac <HW_TS_Init+0x1a4>)
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	f003 0307 	and.w	r3, r3, #7
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	f1c3 0304 	rsb	r3, r3, #4
 8000c4a:	b2da      	uxtb	r2, r3
 8000c4c:	4b58      	ldr	r3, [pc, #352]	; (8000db0 <HW_TS_Init+0x1a8>)
 8000c4e:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000c50:	4b56      	ldr	r3, [pc, #344]	; (8000dac <HW_TS_Init+0x1a4>)
 8000c52:	691b      	ldr	r3, [r3, #16]
 8000c54:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000c58:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8000c5c:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	fa92 f2a2 	rbit	r2, r2
 8000c64:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c66:	68fa      	ldr	r2, [r7, #12]
 8000c68:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000c6a:	697a      	ldr	r2, [r7, #20]
 8000c6c:	2a00      	cmp	r2, #0
 8000c6e:	d101      	bne.n	8000c74 <HW_TS_Init+0x6c>
  {
    return 32U;
 8000c70:	2220      	movs	r2, #32
 8000c72:	e003      	b.n	8000c7c <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8000c74:	697a      	ldr	r2, [r7, #20]
 8000c76:	fab2 f282 	clz	r2, r2
 8000c7a:	b2d2      	uxtb	r2, r2
 8000c7c:	40d3      	lsrs	r3, r2
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	3301      	adds	r3, #1
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	4b4b      	ldr	r3, [pc, #300]	; (8000db4 <HW_TS_Init+0x1ac>)
 8000c86:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000c88:	4b48      	ldr	r3, [pc, #288]	; (8000dac <HW_TS_Init+0x1a4>)
 8000c8a:	691b      	ldr	r3, [r3, #16]
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	3301      	adds	r3, #1
 8000c96:	b29a      	uxth	r2, r3
 8000c98:	4b47      	ldr	r3, [pc, #284]	; (8000db8 <HW_TS_Init+0x1b0>)
 8000c9a:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000c9c:	4b46      	ldr	r3, [pc, #280]	; (8000db8 <HW_TS_Init+0x1b0>)
 8000c9e:	881b      	ldrh	r3, [r3, #0]
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	4a44      	ldr	r2, [pc, #272]	; (8000db4 <HW_TS_Init+0x1ac>)
 8000ca4:	7812      	ldrb	r2, [r2, #0]
 8000ca6:	fb02 f303 	mul.w	r3, r2, r3
 8000caa:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000cae:	4a40      	ldr	r2, [pc, #256]	; (8000db0 <HW_TS_Init+0x1a8>)
 8000cb0:	7812      	ldrb	r2, [r2, #0]
 8000cb2:	40d3      	lsrs	r3, r2
 8000cb4:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000cb6:	69bb      	ldr	r3, [r7, #24]
 8000cb8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d904      	bls.n	8000cca <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000cc0:	4b3e      	ldr	r3, [pc, #248]	; (8000dbc <HW_TS_Init+0x1b4>)
 8000cc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cc6:	801a      	strh	r2, [r3, #0]
 8000cc8:	e003      	b.n	8000cd2 <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	b29a      	uxth	r2, r3
 8000cce:	4b3b      	ldr	r3, [pc, #236]	; (8000dbc <HW_TS_Init+0x1b4>)
 8000cd0:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000cd2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000cd6:	f7ff ff85 	bl	8000be4 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000cda:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000cde:	f7ff ff6d 	bl	8000bbc <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d143      	bne.n	8000d70 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000ce8:	4b35      	ldr	r3, [pc, #212]	; (8000dc0 <HW_TS_Init+0x1b8>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000cee:	4b35      	ldr	r3, [pc, #212]	; (8000dc4 <HW_TS_Init+0x1bc>)
 8000cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf4:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	77fb      	strb	r3, [r7, #31]
 8000cfa:	e00c      	b.n	8000d16 <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000cfc:	7ffa      	ldrb	r2, [r7, #31]
 8000cfe:	4932      	ldr	r1, [pc, #200]	; (8000dc8 <HW_TS_Init+0x1c0>)
 8000d00:	4613      	mov	r3, r2
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	4413      	add	r3, r2
 8000d06:	00db      	lsls	r3, r3, #3
 8000d08:	440b      	add	r3, r1
 8000d0a:	330c      	adds	r3, #12
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000d10:	7ffb      	ldrb	r3, [r7, #31]
 8000d12:	3301      	adds	r3, #1
 8000d14:	77fb      	strb	r3, [r7, #31]
 8000d16:	7ffb      	ldrb	r3, [r7, #31]
 8000d18:	2b05      	cmp	r3, #5
 8000d1a:	d9ef      	bls.n	8000cfc <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000d1c:	4b2b      	ldr	r3, [pc, #172]	; (8000dcc <HW_TS_Init+0x1c4>)
 8000d1e:	2206      	movs	r2, #6
 8000d20:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8000d22:	4b21      	ldr	r3, [pc, #132]	; (8000da8 <HW_TS_Init+0x1a0>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	689a      	ldr	r2, [r3, #8]
 8000d2a:	4b1f      	ldr	r3, [pc, #124]	; (8000da8 <HW_TS_Init+0x1a0>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d34:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000d36:	4b1c      	ldr	r3, [pc, #112]	; (8000da8 <HW_TS_Init+0x1a0>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	68db      	ldr	r3, [r3, #12]
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <HW_TS_Init+0x1a0>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000d4a:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000d4c:	4b20      	ldr	r3, [pc, #128]	; (8000dd0 <HW_TS_Init+0x1c8>)
 8000d4e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000d52:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000d54:	2003      	movs	r0, #3
 8000d56:	f000 fe62 	bl	8001a1e <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8000d5a:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <HW_TS_Init+0x1a0>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	689a      	ldr	r2, [r3, #8]
 8000d62:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <HW_TS_Init+0x1a0>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	e00a      	b.n	8000d86 <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8000d70:	4b0d      	ldr	r3, [pc, #52]	; (8000da8 <HW_TS_Init+0x1a0>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d002      	beq.n	8000d86 <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000d80:	2003      	movs	r0, #3
 8000d82:	f000 fe3e 	bl	8001a02 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000d86:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <HW_TS_Init+0x1a0>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	22ff      	movs	r2, #255	; 0xff
 8000d8e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8000d90:	2200      	movs	r2, #0
 8000d92:	2103      	movs	r1, #3
 8000d94:	2003      	movs	r0, #3
 8000d96:	f000 fe00 	bl	800199a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000d9a:	2003      	movs	r0, #3
 8000d9c:	f000 fe17 	bl	80019ce <HAL_NVIC_EnableIRQ>

  return;
 8000da0:	bf00      	nop
}
 8000da2:	3720      	adds	r7, #32
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000184 	.word	0x20000184
 8000dac:	40002800 	.word	0x40002800
 8000db0:	20000188 	.word	0x20000188
 8000db4:	20000189 	.word	0x20000189
 8000db8:	2000018a 	.word	0x2000018a
 8000dbc:	2000018c 	.word	0x2000018c
 8000dc0:	20000118 	.word	0x20000118
 8000dc4:	20000114 	.word	0x20000114
 8000dc8:	20000080 	.word	0x20000080
 8000dcc:	20000110 	.word	0x20000110
 8000dd0:	58000800 	.word	0x58000800

08000dd4 <LL_RCC_LSE_SetDriveCapability>:
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000de4:	f023 0218 	bic.w	r2, r3, #24
 8000de8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <LL_AHB2_GRP1_EnableClock>:
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4013      	ands	r3, r2
 8000e22:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e24:	68fb      	ldr	r3, [r7, #12]
}
 8000e26:	bf00      	nop
 8000e28:	3714      	adds	r7, #20
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
	...

08000e34 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000e3c:	1d39      	adds	r1, r7, #4
 8000e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e42:	2201      	movs	r2, #1
 8000e44:	4803      	ldr	r0, [pc, #12]	; (8000e54 <__io_putchar+0x20>)
 8000e46:	f002 fffd 	bl	8003e44 <HAL_UART_Transmit>
  return ch;
 8000e4a:	687b      	ldr	r3, [r7, #4]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	200001f0 	.word	0x200001f0

08000e58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e5c:	f000 fbe0 	bl	8001620 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8000e60:	f7ff fcfe 	bl	8000860 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e64:	f000 f81a 	bl	8000e9c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000e68:	f000 f864 	bl	8000f34 <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 8000e6c:	f000 f882 	bl	8000f74 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e70:	f000 f91c 	bl	80010ac <MX_GPIO_Init>
  MX_RTC_Init();
 8000e74:	f000 f89a 	bl	8000fac <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000e78:	f000 f8cc 	bl	8001014 <MX_USART1_UART_Init>
  MX_RF_Init();
 8000e7c:	f000 f88e 	bl	8000f9c <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8000e80:	f7ff fcfc 	bl	800087c <MX_APPE_Init>

  /* Infinite loop */

  /* USER CODE BEGIN WHILE */
  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x7D0, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 8000e84:	2200      	movs	r2, #0
 8000e86:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000e8a:	4803      	ldr	r0, [pc, #12]	; (8000e98 <main+0x40>)
 8000e8c:	f002 fe2a 	bl	8003ae4 <HAL_RTCEx_SetWakeUpTimer_IT>
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8000e90:	f7ff fe55 	bl	8000b3e <MX_APPE_Process>
 8000e94:	e7fc      	b.n	8000e90 <main+0x38>
 8000e96:	bf00      	nop
 8000e98:	200001cc 	.word	0x200001cc

08000e9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b098      	sub	sp, #96	; 0x60
 8000ea0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ea2:	f107 031c 	add.w	r3, r7, #28
 8000ea6:	2244      	movs	r2, #68	; 0x44
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f006 fb19 	bl	80074e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb0:	463b      	mov	r3, r7
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
 8000ebc:	611a      	str	r2, [r3, #16]
 8000ebe:	615a      	str	r2, [r3, #20]
 8000ec0:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ec2:	f001 f93d 	bl	8002140 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f7ff ff84 	bl	8000dd4 <LL_RCC_LSE_SetDriveCapability>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000ecc:	2307      	movs	r3, #7
 8000ece:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ed0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ed4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ede:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ee0:	2340      	movs	r3, #64	; 0x40
 8000ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee8:	f107 031c 	add.w	r3, r7, #28
 8000eec:	4618      	mov	r0, r3
 8000eee:	f001 fd1d 	bl	800292c <HAL_RCC_OscConfig>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000ef8:	f000 f8fa 	bl	80010f0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000efc:	236f      	movs	r3, #111	; 0x6f
 8000efe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000f00:	2302      	movs	r3, #2
 8000f02:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f04:	2300      	movs	r3, #0
 8000f06:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f18:	463b      	mov	r3, r7
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f002 f83b 	bl	8002f98 <HAL_RCC_ClockConfig>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000f28:	f000 f8e2 	bl	80010f0 <Error_Handler>
  }
}
 8000f2c:	bf00      	nop
 8000f2e:	3760      	adds	r7, #96	; 0x60
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08c      	sub	sp, #48	; 0x30
 8000f38:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f3a:	463b      	mov	r3, r7
 8000f3c:	2230      	movs	r2, #48	; 0x30
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4618      	mov	r0, r3
 8000f42:	f006 face 	bl	80074e2 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8000f46:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000f4a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8000f4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000f52:	2300      	movs	r3, #0
 8000f54:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000f56:	2310      	movs	r3, #16
 8000f58:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f5a:	463b      	mov	r3, r7
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f002 fbdd 	bl	800371c <HAL_RCCEx_PeriphCLKConfig>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000f68:	f000 f8c2 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000f6c:	bf00      	nop
 8000f6e:	3730      	adds	r7, #48	; 0x30
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <MX_IPCC_Init+0x20>)
 8000f7a:	4a07      	ldr	r2, [pc, #28]	; (8000f98 <MX_IPCC_Init+0x24>)
 8000f7c:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8000f7e:	4805      	ldr	r0, [pc, #20]	; (8000f94 <MX_IPCC_Init+0x20>)
 8000f80:	f001 f858 	bl	8002034 <HAL_IPCC_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8000f8a:	f000 f8b1 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000190 	.word	0x20000190
 8000f98:	58000c00 	.word	0x58000c00

08000f9c <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
	...

08000fac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000fb0:	4b16      	ldr	r3, [pc, #88]	; (800100c <MX_RTC_Init+0x60>)
 8000fb2:	4a17      	ldr	r2, [pc, #92]	; (8001010 <MX_RTC_Init+0x64>)
 8000fb4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000fb6:	4b15      	ldr	r3, [pc, #84]	; (800100c <MX_RTC_Init+0x60>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8000fbc:	4b13      	ldr	r3, [pc, #76]	; (800100c <MX_RTC_Init+0x60>)
 8000fbe:	220f      	movs	r2, #15
 8000fc0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8000fc2:	4b12      	ldr	r3, [pc, #72]	; (800100c <MX_RTC_Init+0x60>)
 8000fc4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000fc8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000fca:	4b10      	ldr	r3, [pc, #64]	; (800100c <MX_RTC_Init+0x60>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000fd0:	4b0e      	ldr	r3, [pc, #56]	; (800100c <MX_RTC_Init+0x60>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	; (800100c <MX_RTC_Init+0x60>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000fdc:	480b      	ldr	r0, [pc, #44]	; (800100c <MX_RTC_Init+0x60>)
 8000fde:	f002 fc93 	bl	8003908 <HAL_RTC_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_RTC_Init+0x40>
  {
    Error_Handler();
 8000fe8:	f000 f882 	bl	80010f0 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0xFFFF, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000fec:	2200      	movs	r2, #0
 8000fee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ff2:	4806      	ldr	r0, [pc, #24]	; (800100c <MX_RTC_Init+0x60>)
 8000ff4:	f002 fd76 	bl	8003ae4 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8000ffe:	f000 f877 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8001002:	4802      	ldr	r0, [pc, #8]	; (800100c <MX_RTC_Init+0x60>)
 8001004:	f002 fe2a 	bl	8003c5c <HAL_RTCEx_DeactivateWakeUpTimer>
  /* USER CODE END RTC_Init 2 */

}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	200001cc 	.word	0x200001cc
 8001010:	40002800 	.word	0x40002800

08001014 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001018:	4b22      	ldr	r3, [pc, #136]	; (80010a4 <MX_USART1_UART_Init+0x90>)
 800101a:	4a23      	ldr	r2, [pc, #140]	; (80010a8 <MX_USART1_UART_Init+0x94>)
 800101c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800101e:	4b21      	ldr	r3, [pc, #132]	; (80010a4 <MX_USART1_UART_Init+0x90>)
 8001020:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001024:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001026:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <MX_USART1_UART_Init+0x90>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800102c:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <MX_USART1_UART_Init+0x90>)
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001032:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <MX_USART1_UART_Init+0x90>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001038:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <MX_USART1_UART_Init+0x90>)
 800103a:	220c      	movs	r2, #12
 800103c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800103e:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <MX_USART1_UART_Init+0x90>)
 8001040:	2200      	movs	r2, #0
 8001042:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001044:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <MX_USART1_UART_Init+0x90>)
 8001046:	2200      	movs	r2, #0
 8001048:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800104a:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <MX_USART1_UART_Init+0x90>)
 800104c:	2200      	movs	r2, #0
 800104e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <MX_USART1_UART_Init+0x90>)
 8001052:	2200      	movs	r2, #0
 8001054:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <MX_USART1_UART_Init+0x90>)
 8001058:	2200      	movs	r2, #0
 800105a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800105c:	4811      	ldr	r0, [pc, #68]	; (80010a4 <MX_USART1_UART_Init+0x90>)
 800105e:	f002 fea1 	bl	8003da4 <HAL_UART_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001068:	f000 f842 	bl	80010f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800106c:	2100      	movs	r1, #0
 800106e:	480d      	ldr	r0, [pc, #52]	; (80010a4 <MX_USART1_UART_Init+0x90>)
 8001070:	f003 fb92 	bl	8004798 <HAL_UARTEx_SetTxFifoThreshold>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800107a:	f000 f839 	bl	80010f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800107e:	2100      	movs	r1, #0
 8001080:	4808      	ldr	r0, [pc, #32]	; (80010a4 <MX_USART1_UART_Init+0x90>)
 8001082:	f003 fbc7 	bl	8004814 <HAL_UARTEx_SetRxFifoThreshold>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800108c:	f000 f830 	bl	80010f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001090:	4804      	ldr	r0, [pc, #16]	; (80010a4 <MX_USART1_UART_Init+0x90>)
 8001092:	f003 fb48 	bl	8004726 <HAL_UARTEx_DisableFifoMode>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800109c:	f000 f828 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	200001f0 	.word	0x200001f0
 80010a8:	40013800 	.word	0x40013800

080010ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b0:	2004      	movs	r0, #4
 80010b2:	f7ff fea5 	bl	8000e00 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b6:	2001      	movs	r0, #1
 80010b8:	f7ff fea2 	bl	8000e00 <LL_AHB2_GRP1_EnableClock>

}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <HAL_RTCEx_WakeUpTimerEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	SystemClock_Config();
 80010c8:	f7ff fee8 	bl	8000e9c <SystemClock_Config>
	HAL_ResumeTick();
 80010cc:	f000 fb3e 	bl	800174c <HAL_ResumeTick>
	printf("Wake up from RTC\n\r");
 80010d0:	4806      	ldr	r0, [pc, #24]	; (80010ec <HAL_RTCEx_WakeUpTimerEventCallback+0x2c>)
 80010d2:	f006 f9b1 	bl	8007438 <iprintf>
	UTIL_SEQ_SetTask(1<<CFG_TASK_RTC, CFG_SCH_PRIO_0);
 80010d6:	2100      	movs	r1, #0
 80010d8:	2004      	movs	r0, #4
 80010da:	f005 ffcb 	bl	8007074 <UTIL_SEQ_SetTask>
	HAL_PWR_DisableSleepOnExit();
 80010de:	f001 f867 	bl	80021b0 <HAL_PWR_DisableSleepOnExit>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	08008174 	.word	0x08008174

080010f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80010f4:	b672      	cpsid	i
}
 80010f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <Error_Handler+0x8>

080010fa <LL_RCC_EnableRTC>:
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80010fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001106:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800110a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800110e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <LL_AHB2_GRP1_EnableClock>:
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001128:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800112a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4313      	orrs	r3, r2
 8001132:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001138:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4013      	ands	r3, r2
 800113e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001140:	68fb      	ldr	r3, [r7, #12]
}
 8001142:	bf00      	nop
 8001144:	3714      	adds	r7, #20
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <LL_AHB3_GRP1_EnableClock>:
{
 800114e:	b480      	push	{r7}
 8001150:	b085      	sub	sp, #20
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800115a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800115c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4313      	orrs	r3, r2
 8001164:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800116a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4013      	ands	r3, r2
 8001170:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001172:	68fb      	ldr	r3, [r7, #12]
}
 8001174:	bf00      	nop
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800118c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800118e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4313      	orrs	r3, r2
 8001196:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800119c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4013      	ands	r3, r2
 80011a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011a4:	68fb      	ldr	r3, [r7, #12]
}
 80011a6:	bf00      	nop
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80011b2:	b480      	push	{r7}
 80011b4:	b085      	sub	sp, #20
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80011ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80011ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4013      	ands	r3, r2
 80011d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011d6:	68fb      	ldr	r3, [r7, #12]
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80011e8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80011ec:	f7ff ffaf 	bl	800114e <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80011f0:	2200      	movs	r2, #0
 80011f2:	2100      	movs	r1, #0
 80011f4:	202e      	movs	r0, #46	; 0x2e
 80011f6:	f000 fbd0 	bl	800199a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80011fa:	202e      	movs	r0, #46	; 0x2e
 80011fc:	f000 fbe7 	bl	80019ce <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}

08001204 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a0d      	ldr	r2, [pc, #52]	; (8001248 <HAL_IPCC_MspInit+0x44>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d113      	bne.n	800123e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001216:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800121a:	f7ff ff98 	bl	800114e <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800121e:	2200      	movs	r2, #0
 8001220:	2100      	movs	r1, #0
 8001222:	202c      	movs	r0, #44	; 0x2c
 8001224:	f000 fbb9 	bl	800199a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001228:	202c      	movs	r0, #44	; 0x2c
 800122a:	f000 fbd0 	bl	80019ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	2100      	movs	r1, #0
 8001232:	202d      	movs	r0, #45	; 0x2d
 8001234:	f000 fbb1 	bl	800199a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001238:	202d      	movs	r0, #45	; 0x2d
 800123a:	f000 fbc8 	bl	80019ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	58000c00 	.word	0x58000c00

0800124c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08e      	sub	sp, #56	; 0x38
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001254:	f107 0308 	add.w	r3, r7, #8
 8001258:	2230      	movs	r2, #48	; 0x30
 800125a:	2100      	movs	r1, #0
 800125c:	4618      	mov	r0, r3
 800125e:	f006 f940 	bl	80074e2 <memset>
  if(hrtc->Instance==RTC)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a12      	ldr	r2, [pc, #72]	; (80012b0 <HAL_RTC_MspInit+0x64>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d11d      	bne.n	80012a8 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800126c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001270:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001272:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001276:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001278:	f107 0308 	add.w	r3, r7, #8
 800127c:	4618      	mov	r0, r3
 800127e:	f002 fa4d 	bl	800371c <HAL_RCCEx_PeriphCLKConfig>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001288:	f7ff ff32 	bl	80010f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800128c:	f7ff ff35 	bl	80010fa <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001290:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001294:	f7ff ff74 	bl	8001180 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 15, 0);
 8001298:	2200      	movs	r2, #0
 800129a:	210f      	movs	r1, #15
 800129c:	2003      	movs	r0, #3
 800129e:	f000 fb7c 	bl	800199a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80012a2:	2003      	movs	r0, #3
 80012a4:	f000 fb93 	bl	80019ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80012a8:	bf00      	nop
 80012aa:	3738      	adds	r7, #56	; 0x38
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40002800 	.word	0x40002800

080012b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b094      	sub	sp, #80	; 0x50
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012cc:	f107 030c 	add.w	r3, r7, #12
 80012d0:	2230      	movs	r2, #48	; 0x30
 80012d2:	2100      	movs	r1, #0
 80012d4:	4618      	mov	r0, r3
 80012d6:	f006 f904 	bl	80074e2 <memset>
  if(huart->Instance==USART1)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a17      	ldr	r2, [pc, #92]	; (800133c <HAL_UART_MspInit+0x88>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d126      	bne.n	8001332 <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80012e4:	2301      	movs	r3, #1
 80012e6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80012e8:	2300      	movs	r3, #0
 80012ea:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ec:	f107 030c 	add.w	r3, r7, #12
 80012f0:	4618      	mov	r0, r3
 80012f2:	f002 fa13 	bl	800371c <HAL_RCCEx_PeriphCLKConfig>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012fc:	f7ff fef8 	bl	80010f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001300:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001304:	f7ff ff55 	bl	80011b2 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001308:	2001      	movs	r0, #1
 800130a:	f7ff ff07 	bl	800111c <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800130e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001312:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001314:	2302      	movs	r3, #2
 8001316:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131c:	2300      	movs	r3, #0
 800131e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001320:	2307      	movs	r3, #7
 8001322:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001324:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001328:	4619      	mov	r1, r3
 800132a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800132e:	f000 fcf5 	bl	8001d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001332:	bf00      	nop
 8001334:	3750      	adds	r7, #80	; 0x50
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40013800 	.word	0x40013800

08001340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <NMI_Handler+0x4>

08001346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134a:	e7fe      	b.n	800134a <HardFault_Handler+0x4>

0800134c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <MemManage_Handler+0x4>

08001352 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001356:	e7fe      	b.n	8001356 <BusFault_Handler+0x4>

08001358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800135c:	e7fe      	b.n	800135c <UsageFault_Handler+0x4>

0800135e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800138c:	f000 f9a2 	bl	80016d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}

08001394 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001398:	4802      	ldr	r0, [pc, #8]	; (80013a4 <RTC_WKUP_IRQHandler+0x10>)
 800139a:	f002 fcbd 	bl	8003d18 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	200001cc 	.word	0x200001cc

080013a8 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80013ac:	f005 fbc4 	bl	8006b38 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80013b8:	f005 fbf4 	bl	8006ba4 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}

080013c0 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80013c4:	f000 fe12 	bl	8001fec <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}

080013cc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
 80013dc:	e00a      	b.n	80013f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013de:	f3af 8000 	nop.w
 80013e2:	4601      	mov	r1, r0
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	1c5a      	adds	r2, r3, #1
 80013e8:	60ba      	str	r2, [r7, #8]
 80013ea:	b2ca      	uxtb	r2, r1
 80013ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	3301      	adds	r3, #1
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	697a      	ldr	r2, [r7, #20]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	dbf0      	blt.n	80013de <_read+0x12>
	}

return len;
 80013fc:	687b      	ldr	r3, [r7, #4]
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3718      	adds	r7, #24
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b086      	sub	sp, #24
 800140a:	af00      	add	r7, sp, #0
 800140c:	60f8      	str	r0, [r7, #12]
 800140e:	60b9      	str	r1, [r7, #8]
 8001410:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
 8001416:	e009      	b.n	800142c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	1c5a      	adds	r2, r3, #1
 800141c:	60ba      	str	r2, [r7, #8]
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff fd07 	bl	8000e34 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	3301      	adds	r3, #1
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	697a      	ldr	r2, [r7, #20]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	429a      	cmp	r2, r3
 8001432:	dbf1      	blt.n	8001418 <_write+0x12>
	}
	return len;
 8001434:	687b      	ldr	r3, [r7, #4]
}
 8001436:	4618      	mov	r0, r3
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <_close>:

int _close(int file)
{
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
	return -1;
 8001446:	f04f 33ff 	mov.w	r3, #4294967295
}
 800144a:	4618      	mov	r0, r3
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
 800145e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001466:	605a      	str	r2, [r3, #4]
	return 0;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <_isatty>:

int _isatty(int file)
{
 8001476:	b480      	push	{r7}
 8001478:	b083      	sub	sp, #12
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
	return 1;
 800147e:	2301      	movs	r3, #1
}
 8001480:	4618      	mov	r0, r3
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
	return 0;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
	...

080014a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014b0:	4a14      	ldr	r2, [pc, #80]	; (8001504 <_sbrk+0x5c>)
 80014b2:	4b15      	ldr	r3, [pc, #84]	; (8001508 <_sbrk+0x60>)
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014bc:	4b13      	ldr	r3, [pc, #76]	; (800150c <_sbrk+0x64>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d102      	bne.n	80014ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014c4:	4b11      	ldr	r3, [pc, #68]	; (800150c <_sbrk+0x64>)
 80014c6:	4a12      	ldr	r2, [pc, #72]	; (8001510 <_sbrk+0x68>)
 80014c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ca:	4b10      	ldr	r3, [pc, #64]	; (800150c <_sbrk+0x64>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d207      	bcs.n	80014e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014d8:	f006 f852 	bl	8007580 <__errno>
 80014dc:	4603      	mov	r3, r0
 80014de:	220c      	movs	r2, #12
 80014e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014e2:	f04f 33ff 	mov.w	r3, #4294967295
 80014e6:	e009      	b.n	80014fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014e8:	4b08      	ldr	r3, [pc, #32]	; (800150c <_sbrk+0x64>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ee:	4b07      	ldr	r3, [pc, #28]	; (800150c <_sbrk+0x64>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4413      	add	r3, r2
 80014f6:	4a05      	ldr	r2, [pc, #20]	; (800150c <_sbrk+0x64>)
 80014f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014fa:	68fb      	ldr	r3, [r7, #12]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3718      	adds	r7, #24
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20003000 	.word	0x20003000
 8001508:	00000400 	.word	0x00000400
 800150c:	20000280 	.word	0x20000280
 8001510:	20000510 	.word	0x20000510

08001514 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001518:	4b22      	ldr	r3, [pc, #136]	; (80015a4 <SystemInit+0x90>)
 800151a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800151e:	4a21      	ldr	r2, [pc, #132]	; (80015a4 <SystemInit+0x90>)
 8001520:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001524:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800153c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001540:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800154c:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <SystemInit+0x94>)
 800154e:	4013      	ands	r3, r2
 8001550:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001552:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001556:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800155a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800155e:	f023 0305 	bic.w	r3, r3, #5
 8001562:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800156a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800156e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001572:	f023 0301 	bic.w	r3, r3, #1
 8001576:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800157a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800157e:	4a0b      	ldr	r2, [pc, #44]	; (80015ac <SystemInit+0x98>)
 8001580:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800158c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001590:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001596:	2200      	movs	r2, #0
 8001598:	619a      	str	r2, [r3, #24]
}
 800159a:	bf00      	nop
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000ed00 	.word	0xe000ed00
 80015a8:	faf6fefb 	.word	0xfaf6fefb
 80015ac:	22041000 	.word	0x22041000

080015b0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80015b0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015b4:	3304      	adds	r3, #4

080015b6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015b8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80015ba:	d3f9      	bcc.n	80015b0 <CopyDataInit>
  bx lr
 80015bc:	4770      	bx	lr

080015be <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80015be:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80015c0:	3004      	adds	r0, #4

080015c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80015c2:	4288      	cmp	r0, r1
  bcc FillZerobss
 80015c4:	d3fb      	bcc.n	80015be <FillZerobss>
  bx lr
 80015c6:	4770      	bx	lr

080015c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015c8:	480c      	ldr	r0, [pc, #48]	; (80015fc <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80015ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80015cc:	f7ff ffa2 	bl	8001514 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80015d0:	480b      	ldr	r0, [pc, #44]	; (8001600 <LoopForever+0x8>)
 80015d2:	490c      	ldr	r1, [pc, #48]	; (8001604 <LoopForever+0xc>)
 80015d4:	4a0c      	ldr	r2, [pc, #48]	; (8001608 <LoopForever+0x10>)
 80015d6:	2300      	movs	r3, #0
 80015d8:	f7ff ffed 	bl	80015b6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80015dc:	480b      	ldr	r0, [pc, #44]	; (800160c <LoopForever+0x14>)
 80015de:	490c      	ldr	r1, [pc, #48]	; (8001610 <LoopForever+0x18>)
 80015e0:	2300      	movs	r3, #0
 80015e2:	f7ff ffee 	bl	80015c2 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80015e6:	480b      	ldr	r0, [pc, #44]	; (8001614 <LoopForever+0x1c>)
 80015e8:	490b      	ldr	r1, [pc, #44]	; (8001618 <LoopForever+0x20>)
 80015ea:	2300      	movs	r3, #0
 80015ec:	f7ff ffe9 	bl	80015c2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80015f0:	f005 ffcc 	bl	800758c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80015f4:	f7ff fc30 	bl	8000e58 <main>

080015f8 <LoopForever>:

LoopForever:
  b LoopForever
 80015f8:	e7fe      	b.n	80015f8 <LoopForever>
 80015fa:	0000      	.short	0x0000
  ldr   r0, =_estack
 80015fc:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 8001600:	20000004 	.word	0x20000004
 8001604:	20000080 	.word	0x20000080
 8001608:	08008498 	.word	0x08008498
  INIT_BSS _sbss, _ebss
 800160c:	20000168 	.word	0x20000168
 8001610:	2000050c 	.word	0x2000050c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001614:	200301e4 	.word	0x200301e4
 8001618:	20030a67 	.word	0x20030a67

0800161c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800161c:	e7fe      	b.n	800161c <ADC1_IRQHandler>
	...

08001620 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001626:	2300      	movs	r3, #0
 8001628:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800162a:	4b0c      	ldr	r3, [pc, #48]	; (800165c <HAL_Init+0x3c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a0b      	ldr	r2, [pc, #44]	; (800165c <HAL_Init+0x3c>)
 8001630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001634:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001636:	2003      	movs	r0, #3
 8001638:	f000 f9a4 	bl	8001984 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800163c:	200f      	movs	r0, #15
 800163e:	f000 f80f 	bl	8001660 <HAL_InitTick>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d002      	beq.n	800164e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	71fb      	strb	r3, [r7, #7]
 800164c:	e001      	b.n	8001652 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800164e:	f7ff fdc9 	bl	80011e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001652:	79fb      	ldrb	r3, [r7, #7]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	58004000 	.word	0x58004000

08001660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001668:	2300      	movs	r3, #0
 800166a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800166c:	4b17      	ldr	r3, [pc, #92]	; (80016cc <HAL_InitTick+0x6c>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d024      	beq.n	80016be <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001674:	f001 fe3c 	bl	80032f0 <HAL_RCC_GetHCLKFreq>
 8001678:	4602      	mov	r2, r0
 800167a:	4b14      	ldr	r3, [pc, #80]	; (80016cc <HAL_InitTick+0x6c>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	4619      	mov	r1, r3
 8001680:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001684:	fbb3 f3f1 	udiv	r3, r3, r1
 8001688:	fbb2 f3f3 	udiv	r3, r2, r3
 800168c:	4618      	mov	r0, r3
 800168e:	f000 f9ac 	bl	80019ea <HAL_SYSTICK_Config>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d10f      	bne.n	80016b8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b0f      	cmp	r3, #15
 800169c:	d809      	bhi.n	80016b2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800169e:	2200      	movs	r2, #0
 80016a0:	6879      	ldr	r1, [r7, #4]
 80016a2:	f04f 30ff 	mov.w	r0, #4294967295
 80016a6:	f000 f978 	bl	800199a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016aa:	4a09      	ldr	r2, [pc, #36]	; (80016d0 <HAL_InitTick+0x70>)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	e007      	b.n	80016c2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	73fb      	strb	r3, [r7, #15]
 80016b6:	e004      	b.n	80016c2 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	73fb      	strb	r3, [r7, #15]
 80016bc:	e001      	b.n	80016c2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000018 	.word	0x20000018
 80016d0:	20000014 	.word	0x20000014

080016d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_IncTick+0x20>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	461a      	mov	r2, r3
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <HAL_IncTick+0x24>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4413      	add	r3, r2
 80016e4:	4a04      	ldr	r2, [pc, #16]	; (80016f8 <HAL_IncTick+0x24>)
 80016e6:	6013      	str	r3, [r2, #0]
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	20000018 	.word	0x20000018
 80016f8:	20000284 	.word	0x20000284

080016fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001700:	4b03      	ldr	r3, [pc, #12]	; (8001710 <HAL_GetTick+0x14>)
 8001702:	681b      	ldr	r3, [r3, #0]
}
 8001704:	4618      	mov	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	20000284 	.word	0x20000284

08001714 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001718:	4b03      	ldr	r3, [pc, #12]	; (8001728 <HAL_GetTickPrio+0x14>)
 800171a:	681b      	ldr	r3, [r3, #0]
}
 800171c:	4618      	mov	r0, r3
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	20000014 	.word	0x20000014

0800172c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8001730:	4b05      	ldr	r3, [pc, #20]	; (8001748 <HAL_SuspendTick+0x1c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a04      	ldr	r2, [pc, #16]	; (8001748 <HAL_SuspendTick+0x1c>)
 8001736:	f023 0302 	bic.w	r3, r3, #2
 800173a:	6013      	str	r3, [r2, #0]
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	e000e010 	.word	0xe000e010

0800174c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8001750:	4b05      	ldr	r3, [pc, #20]	; (8001768 <HAL_ResumeTick+0x1c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a04      	ldr	r2, [pc, #16]	; (8001768 <HAL_ResumeTick+0x1c>)
 8001756:	f043 0302 	orr.w	r3, r3, #2
 800175a:	6013      	str	r3, [r2, #0]
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	e000e010 	.word	0xe000e010

0800176c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800177c:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <__NVIC_SetPriorityGrouping+0x44>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001788:	4013      	ands	r3, r2
 800178a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001794:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800179c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800179e:	4a04      	ldr	r2, [pc, #16]	; (80017b0 <__NVIC_SetPriorityGrouping+0x44>)
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	60d3      	str	r3, [r2, #12]
}
 80017a4:	bf00      	nop
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b8:	4b04      	ldr	r3, [pc, #16]	; (80017cc <__NVIC_GetPriorityGrouping+0x18>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	0a1b      	lsrs	r3, r3, #8
 80017be:	f003 0307 	and.w	r3, r3, #7
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	db0b      	blt.n	80017fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	f003 021f 	and.w	r2, r3, #31
 80017e8:	4907      	ldr	r1, [pc, #28]	; (8001808 <__NVIC_EnableIRQ+0x38>)
 80017ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ee:	095b      	lsrs	r3, r3, #5
 80017f0:	2001      	movs	r0, #1
 80017f2:	fa00 f202 	lsl.w	r2, r0, r2
 80017f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	e000e100 	.word	0xe000e100

0800180c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	2b00      	cmp	r3, #0
 800181c:	db0c      	blt.n	8001838 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	f003 021f 	and.w	r2, r3, #31
 8001824:	4907      	ldr	r1, [pc, #28]	; (8001844 <__NVIC_SetPendingIRQ+0x38>)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	095b      	lsrs	r3, r3, #5
 800182c:	2001      	movs	r0, #1
 800182e:	fa00 f202 	lsl.w	r2, r0, r2
 8001832:	3340      	adds	r3, #64	; 0x40
 8001834:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	e000e100 	.word	0xe000e100

08001848 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	2b00      	cmp	r3, #0
 8001858:	db0c      	blt.n	8001874 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	f003 021f 	and.w	r2, r3, #31
 8001860:	4907      	ldr	r1, [pc, #28]	; (8001880 <__NVIC_ClearPendingIRQ+0x38>)
 8001862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001866:	095b      	lsrs	r3, r3, #5
 8001868:	2001      	movs	r0, #1
 800186a:	fa00 f202 	lsl.w	r2, r0, r2
 800186e:	3360      	adds	r3, #96	; 0x60
 8001870:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	e000e100 	.word	0xe000e100

08001884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	6039      	str	r1, [r7, #0]
 800188e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001894:	2b00      	cmp	r3, #0
 8001896:	db0a      	blt.n	80018ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	b2da      	uxtb	r2, r3
 800189c:	490c      	ldr	r1, [pc, #48]	; (80018d0 <__NVIC_SetPriority+0x4c>)
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	0112      	lsls	r2, r2, #4
 80018a4:	b2d2      	uxtb	r2, r2
 80018a6:	440b      	add	r3, r1
 80018a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018ac:	e00a      	b.n	80018c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	4908      	ldr	r1, [pc, #32]	; (80018d4 <__NVIC_SetPriority+0x50>)
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	f003 030f 	and.w	r3, r3, #15
 80018ba:	3b04      	subs	r3, #4
 80018bc:	0112      	lsls	r2, r2, #4
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	440b      	add	r3, r1
 80018c2:	761a      	strb	r2, [r3, #24]
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	e000e100 	.word	0xe000e100
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d8:	b480      	push	{r7}
 80018da:	b089      	sub	sp, #36	; 0x24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f1c3 0307 	rsb	r3, r3, #7
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	bf28      	it	cs
 80018f6:	2304      	movcs	r3, #4
 80018f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3304      	adds	r3, #4
 80018fe:	2b06      	cmp	r3, #6
 8001900:	d902      	bls.n	8001908 <NVIC_EncodePriority+0x30>
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3b03      	subs	r3, #3
 8001906:	e000      	b.n	800190a <NVIC_EncodePriority+0x32>
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800190c:	f04f 32ff 	mov.w	r2, #4294967295
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43da      	mvns	r2, r3
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	401a      	ands	r2, r3
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001920:	f04f 31ff 	mov.w	r1, #4294967295
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	fa01 f303 	lsl.w	r3, r1, r3
 800192a:	43d9      	mvns	r1, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001930:	4313      	orrs	r3, r2
         );
}
 8001932:	4618      	mov	r0, r3
 8001934:	3724      	adds	r7, #36	; 0x24
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
	...

08001940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3b01      	subs	r3, #1
 800194c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001950:	d301      	bcc.n	8001956 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001952:	2301      	movs	r3, #1
 8001954:	e00f      	b.n	8001976 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001956:	4a0a      	ldr	r2, [pc, #40]	; (8001980 <SysTick_Config+0x40>)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3b01      	subs	r3, #1
 800195c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800195e:	210f      	movs	r1, #15
 8001960:	f04f 30ff 	mov.w	r0, #4294967295
 8001964:	f7ff ff8e 	bl	8001884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001968:	4b05      	ldr	r3, [pc, #20]	; (8001980 <SysTick_Config+0x40>)
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800196e:	4b04      	ldr	r3, [pc, #16]	; (8001980 <SysTick_Config+0x40>)
 8001970:	2207      	movs	r2, #7
 8001972:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	e000e010 	.word	0xe000e010

08001984 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7ff feed 	bl	800176c <__NVIC_SetPriorityGrouping>
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b086      	sub	sp, #24
 800199e:	af00      	add	r7, sp, #0
 80019a0:	4603      	mov	r3, r0
 80019a2:	60b9      	str	r1, [r7, #8]
 80019a4:	607a      	str	r2, [r7, #4]
 80019a6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019a8:	f7ff ff04 	bl	80017b4 <__NVIC_GetPriorityGrouping>
 80019ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	68b9      	ldr	r1, [r7, #8]
 80019b2:	6978      	ldr	r0, [r7, #20]
 80019b4:	f7ff ff90 	bl	80018d8 <NVIC_EncodePriority>
 80019b8:	4602      	mov	r2, r0
 80019ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019be:	4611      	mov	r1, r2
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff ff5f 	bl	8001884 <__NVIC_SetPriority>
}
 80019c6:	bf00      	nop
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b082      	sub	sp, #8
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4603      	mov	r3, r0
 80019d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff fef7 	bl	80017d0 <__NVIC_EnableIRQ>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff ffa4 	bl	8001940 <SysTick_Config>
 80019f8:	4603      	mov	r3, r0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	4603      	mov	r3, r0
 8001a0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8001a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff fefb 	bl	800180c <__NVIC_SetPendingIRQ>
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	4603      	mov	r3, r0
 8001a26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8001a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ff0b 	bl	8001848 <__NVIC_ClearPendingIRQ>
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001a42:	2300      	movs	r3, #0
 8001a44:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001a46:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <HAL_FLASH_Unlock+0x38>)
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	da0b      	bge.n	8001a66 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001a4e:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <HAL_FLASH_Unlock+0x38>)
 8001a50:	4a09      	ldr	r2, [pc, #36]	; (8001a78 <HAL_FLASH_Unlock+0x3c>)
 8001a52:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001a54:	4b07      	ldr	r3, [pc, #28]	; (8001a74 <HAL_FLASH_Unlock+0x38>)
 8001a56:	4a09      	ldr	r2, [pc, #36]	; (8001a7c <HAL_FLASH_Unlock+0x40>)
 8001a58:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001a5a:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <HAL_FLASH_Unlock+0x38>)
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	da01      	bge.n	8001a66 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001a66:	79fb      	ldrb	r3, [r7, #7]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	58004000 	.word	0x58004000
 8001a78:	45670123 	.word	0x45670123
 8001a7c:	cdef89ab 	.word	0xcdef89ab

08001a80 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001a86:	2300      	movs	r3, #0
 8001a88:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001a8a:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <HAL_FLASH_Lock+0x30>)
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	4a08      	ldr	r2, [pc, #32]	; (8001ab0 <HAL_FLASH_Lock+0x30>)
 8001a90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001a94:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8001a96:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <HAL_FLASH_Lock+0x30>)
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	db01      	blt.n	8001aa2 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	58004000 	.word	0x58004000

08001ab4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8001abc:	f7ff fe1e 	bl	80016fc <HAL_GetTick>
 8001ac0:	60b8      	str	r0, [r7, #8]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001ac2:	e009      	b.n	8001ad8 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8001ac4:	f7ff fe1a 	bl	80016fc <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d801      	bhi.n	8001ad8 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e054      	b.n	8001b82 <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001ad8:	4b2c      	ldr	r3, [pc, #176]	; (8001b8c <FLASH_WaitForLastOperation+0xd8>)
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae4:	d0ee      	beq.n	8001ac4 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = FLASH->SR;
 8001ae6:	4b29      	ldr	r3, [pc, #164]	; (8001b8c <FLASH_WaitForLastOperation+0xd8>)
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	60fb      	str	r3, [r7, #12]

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d002      	beq.n	8001afc <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001af6:	4b25      	ldr	r3, [pc, #148]	; (8001b8c <FLASH_WaitForLastOperation+0xd8>)
 8001af8:	2201      	movs	r2, #1
 8001afa:	611a      	str	r2, [r3, #16]

  /* Workaround for BZ 70309 :
     - OPTVERR is always set at power-up due to failure of engi bytes checking
     - FLASH_WaitForLastOperation() is called at the beginning of erase or program
       operations, so the bit will be clear when performing first operation */
  if ((error & FLASH_FLAG_OPTVERR) != 0U)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d007      	beq.n	8001b16 <FLASH_WaitForLastOperation+0x62>
  {
    /* Clear FLASH OPTVERR bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001b06:	4b21      	ldr	r3, [pc, #132]	; (8001b8c <FLASH_WaitForLastOperation+0xd8>)
 8001b08:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b0c:	611a      	str	r2, [r3, #16]

    /* Clear OPTVERR bit in "error" variable to not treat it as error */
    error &= ~FLASH_FLAG_OPTVERR;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001b14:	60fb      	str	r3, [r7, #12]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	60fb      	str	r3, [r7, #12]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d007      	beq.n	8001b3a <FLASH_WaitForLastOperation+0x86>
 8001b2a:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <FLASH_WaitForLastOperation+0xd8>)
 8001b2c:	699a      	ldr	r2, [r3, #24]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8001b34:	4915      	ldr	r1, [pc, #84]	; (8001b8c <FLASH_WaitForLastOperation+0xd8>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	618b      	str	r3, [r1, #24]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d004      	beq.n	8001b4e <FLASH_WaitForLastOperation+0x9a>
 8001b44:	4a11      	ldr	r2, [pc, #68]	; (8001b8c <FLASH_WaitForLastOperation+0xd8>)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001b4c:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d00e      	beq.n	8001b72 <FLASH_WaitForLastOperation+0xbe>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8001b54:	4a0e      	ldr	r2, [pc, #56]	; (8001b90 <FLASH_WaitForLastOperation+0xdc>)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e011      	b.n	8001b82 <FLASH_WaitForLastOperation+0xce>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8001b5e:	f7ff fdcd 	bl	80016fc <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d801      	bhi.n	8001b72 <FLASH_WaitForLastOperation+0xbe>
    {
      return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e007      	b.n	8001b82 <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <FLASH_WaitForLastOperation+0xd8>)
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001b7e:	d0ee      	beq.n	8001b5e <FLASH_WaitForLastOperation+0xaa>
    }
  }

  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	58004000 	.word	0x58004000
 8001b90:	20000288 	.word	0x20000288

08001b94 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001b9e:	4b24      	ldr	r3, [pc, #144]	; (8001c30 <HAL_FLASHEx_Erase+0x9c>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d101      	bne.n	8001baa <HAL_FLASHEx_Erase+0x16>
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	e03d      	b.n	8001c26 <HAL_FLASHEx_Erase+0x92>
 8001baa:	4b21      	ldr	r3, [pc, #132]	; (8001c30 <HAL_FLASHEx_Erase+0x9c>)
 8001bac:	2201      	movs	r2, #1
 8001bae:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001bb0:	4b1f      	ldr	r3, [pc, #124]	; (8001c30 <HAL_FLASHEx_Erase+0x9c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001bb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bba:	f7ff ff7b 	bl	8001ab4 <FLASH_WaitForLastOperation>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d12a      	bne.n	8001c1e <HAL_FLASHEx_Erase+0x8a>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d124      	bne.n	8001c1a <HAL_FLASHEx_Erase+0x86>
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd6:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	60bb      	str	r3, [r7, #8]
 8001bde:	e012      	b.n	8001c06 <HAL_FLASHEx_Erase+0x72>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8001be0:	68b8      	ldr	r0, [r7, #8]
 8001be2:	f000 f827 	bl	8001c34 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001be6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bea:	f7ff ff63 	bl	8001ab4 <FLASH_WaitForLastOperation>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8001bf2:	7bfb      	ldrb	r3, [r7, #15]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <HAL_FLASHEx_Erase+0x6c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	68ba      	ldr	r2, [r7, #8]
 8001bfc:	601a      	str	r2, [r3, #0]
          break;
 8001bfe:	e00a      	b.n	8001c16 <HAL_FLASHEx_Erase+0x82>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	3301      	adds	r3, #1
 8001c04:	60bb      	str	r3, [r7, #8]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	4413      	add	r3, r2
 8001c10:	68ba      	ldr	r2, [r7, #8]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d3e4      	bcc.n	8001be0 <HAL_FLASHEx_Erase+0x4c>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8001c16:	f000 f86f 	bl	8001cf8 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001c1a:	f000 f825 	bl	8001c68 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001c1e:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <HAL_FLASHEx_Erase+0x9c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	701a      	strb	r2, [r3, #0]

  return status;
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000288 	.word	0x20000288

08001c34 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8001c3c:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <FLASH_PageErase+0x30>)
 8001c3e:	695b      	ldr	r3, [r3, #20]
 8001c40:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	4a06      	ldr	r2, [pc, #24]	; (8001c64 <FLASH_PageErase+0x30>)
 8001c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c50:	f043 0302 	orr.w	r3, r3, #2
 8001c54:	6153      	str	r3, [r2, #20]
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	58004000 	.word	0x58004000

08001c68 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
static void FLASH_FlushCaches(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == FLASH_ACR_ICEN)
 8001c6c:	4b21      	ldr	r3, [pc, #132]	; (8001cf4 <FLASH_FlushCaches+0x8c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c78:	d117      	bne.n	8001caa <FLASH_FlushCaches+0x42>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001c7a:	4b1e      	ldr	r3, [pc, #120]	; (8001cf4 <FLASH_FlushCaches+0x8c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a1d      	ldr	r2, [pc, #116]	; (8001cf4 <FLASH_FlushCaches+0x8c>)
 8001c80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001c84:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001c86:	4b1b      	ldr	r3, [pc, #108]	; (8001cf4 <FLASH_FlushCaches+0x8c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a1a      	ldr	r2, [pc, #104]	; (8001cf4 <FLASH_FlushCaches+0x8c>)
 8001c8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <FLASH_FlushCaches+0x8c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a17      	ldr	r2, [pc, #92]	; (8001cf4 <FLASH_FlushCaches+0x8c>)
 8001c98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001c9c:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c9e:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <FLASH_FlushCaches+0x8c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a14      	ldr	r2, [pc, #80]	; (8001cf4 <FLASH_FlushCaches+0x8c>)
 8001ca4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ca8:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == FLASH_ACR_DCEN)
 8001caa:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <FLASH_FlushCaches+0x8c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cb6:	d117      	bne.n	8001ce8 <FLASH_FlushCaches+0x80>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001cb8:	4b0e      	ldr	r3, [pc, #56]	; (8001cf4 <FLASH_FlushCaches+0x8c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a0d      	ldr	r2, [pc, #52]	; (8001cf4 <FLASH_FlushCaches+0x8c>)
 8001cbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001cc2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <FLASH_FlushCaches+0x8c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a0a      	ldr	r2, [pc, #40]	; (8001cf4 <FLASH_FlushCaches+0x8c>)
 8001cca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cce:	6013      	str	r3, [r2, #0]
 8001cd0:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <FLASH_FlushCaches+0x8c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a07      	ldr	r2, [pc, #28]	; (8001cf4 <FLASH_FlushCaches+0x8c>)
 8001cd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001cda:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cdc:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <FLASH_FlushCaches+0x8c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a04      	ldr	r2, [pc, #16]	; (8001cf4 <FLASH_FlushCaches+0x8c>)
 8001ce2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ce6:	6013      	str	r3, [r2, #0]
  }
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	58004000 	.word	0x58004000

08001cf8 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8001cfc:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <FLASH_AcknowledgePageErase+0x20>)
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	4a05      	ldr	r2, [pc, #20]	; (8001d18 <FLASH_AcknowledgePageErase+0x20>)
 8001d02:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001d06:	f023 0302 	bic.w	r3, r3, #2
 8001d0a:	6153      	str	r3, [r2, #20]
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	58004000 	.word	0x58004000

08001d1c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b087      	sub	sp, #28
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d2a:	e146      	b.n	8001fba <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	2101      	movs	r1, #1
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	fa01 f303 	lsl.w	r3, r1, r3
 8001d38:	4013      	ands	r3, r2
 8001d3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f000 8138 	beq.w	8001fb4 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 0303 	and.w	r3, r3, #3
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d005      	beq.n	8001d5c <HAL_GPIO_Init+0x40>
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 0303 	and.w	r3, r3, #3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d130      	bne.n	8001dbe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	2203      	movs	r2, #3
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	4013      	ands	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	68da      	ldr	r2, [r3, #12]
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d92:	2201      	movs	r2, #1
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	091b      	lsrs	r3, r3, #4
 8001da8:	f003 0201 	and.w	r2, r3, #1
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f003 0303 	and.w	r3, r3, #3
 8001dc6:	2b03      	cmp	r3, #3
 8001dc8:	d017      	beq.n	8001dfa <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	2203      	movs	r2, #3
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	4013      	ands	r3, r2
 8001de0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	689a      	ldr	r2, [r3, #8]
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d123      	bne.n	8001e4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	08da      	lsrs	r2, r3, #3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	3208      	adds	r2, #8
 8001e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	220f      	movs	r2, #15
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43db      	mvns	r3, r3
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	4013      	ands	r3, r2
 8001e28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	691a      	ldr	r2, [r3, #16]
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	08da      	lsrs	r2, r3, #3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3208      	adds	r2, #8
 8001e48:	6939      	ldr	r1, [r7, #16]
 8001e4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	2203      	movs	r2, #3
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	4013      	ands	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f003 0203 	and.w	r2, r3, #3
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 8092 	beq.w	8001fb4 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001e90:	4a51      	ldr	r2, [pc, #324]	; (8001fd8 <HAL_GPIO_Init+0x2bc>)
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	089b      	lsrs	r3, r3, #2
 8001e96:	3302      	adds	r3, #2
 8001e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f003 0303 	and.w	r3, r3, #3
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	220f      	movs	r2, #15
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001eba:	d013      	beq.n	8001ee4 <HAL_GPIO_Init+0x1c8>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a47      	ldr	r2, [pc, #284]	; (8001fdc <HAL_GPIO_Init+0x2c0>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d00d      	beq.n	8001ee0 <HAL_GPIO_Init+0x1c4>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a46      	ldr	r2, [pc, #280]	; (8001fe0 <HAL_GPIO_Init+0x2c4>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d007      	beq.n	8001edc <HAL_GPIO_Init+0x1c0>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a45      	ldr	r2, [pc, #276]	; (8001fe4 <HAL_GPIO_Init+0x2c8>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d101      	bne.n	8001ed8 <HAL_GPIO_Init+0x1bc>
 8001ed4:	2304      	movs	r3, #4
 8001ed6:	e006      	b.n	8001ee6 <HAL_GPIO_Init+0x1ca>
 8001ed8:	2307      	movs	r3, #7
 8001eda:	e004      	b.n	8001ee6 <HAL_GPIO_Init+0x1ca>
 8001edc:	2302      	movs	r3, #2
 8001ede:	e002      	b.n	8001ee6 <HAL_GPIO_Init+0x1ca>
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e000      	b.n	8001ee6 <HAL_GPIO_Init+0x1ca>
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	f002 0203 	and.w	r2, r2, #3
 8001eec:	0092      	lsls	r2, r2, #2
 8001eee:	4093      	lsls	r3, r2
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ef6:	4938      	ldr	r1, [pc, #224]	; (8001fd8 <HAL_GPIO_Init+0x2bc>)
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	089b      	lsrs	r3, r3, #2
 8001efc:	3302      	adds	r3, #2
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f04:	4b38      	ldr	r3, [pc, #224]	; (8001fe8 <HAL_GPIO_Init+0x2cc>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	4013      	ands	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f28:	4a2f      	ldr	r2, [pc, #188]	; (8001fe8 <HAL_GPIO_Init+0x2cc>)
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001f2e:	4b2e      	ldr	r3, [pc, #184]	; (8001fe8 <HAL_GPIO_Init+0x2cc>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	43db      	mvns	r3, r3
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f52:	4a25      	ldr	r2, [pc, #148]	; (8001fe8 <HAL_GPIO_Init+0x2cc>)
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f58:	4b23      	ldr	r3, [pc, #140]	; (8001fe8 <HAL_GPIO_Init+0x2cc>)
 8001f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	43db      	mvns	r3, r3
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	4013      	ands	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f7e:	4a1a      	ldr	r2, [pc, #104]	; (8001fe8 <HAL_GPIO_Init+0x2cc>)
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001f86:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <HAL_GPIO_Init+0x2cc>)
 8001f88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	43db      	mvns	r3, r3
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	4013      	ands	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fac:	4a0e      	ldr	r2, [pc, #56]	; (8001fe8 <HAL_GPIO_Init+0x2cc>)
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f47f aeb1 	bne.w	8001d2c <HAL_GPIO_Init+0x10>
  }
}
 8001fca:	bf00      	nop
 8001fcc:	bf00      	nop
 8001fce:	371c      	adds	r7, #28
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	40010000 	.word	0x40010000
 8001fdc:	48000400 	.word	0x48000400
 8001fe0:	48000800 	.word	0x48000800
 8001fe4:	48001000 	.word	0x48001000
 8001fe8:	58000800 	.word	0x58000800

08001fec <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8001ff2:	4b0a      	ldr	r3, [pc, #40]	; (800201c <HAL_HSEM_IRQHandler+0x30>)
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8001ff8:	4b08      	ldr	r3, [pc, #32]	; (800201c <HAL_HSEM_IRQHandler+0x30>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	43db      	mvns	r3, r3
 8002000:	4906      	ldr	r1, [pc, #24]	; (800201c <HAL_HSEM_IRQHandler+0x30>)
 8002002:	4013      	ands	r3, r2
 8002004:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8002006:	4a05      	ldr	r2, [pc, #20]	; (800201c <HAL_HSEM_IRQHandler+0x30>)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 f807 	bl	8002020 <HAL_HSEM_FreeCallback>
}
 8002012:	bf00      	nop
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	58001500 	.word	0x58001500

08002020 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800203c:	2300      	movs	r3, #0
 800203e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d01e      	beq.n	8002084 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8002046:	4b13      	ldr	r3, [pc, #76]	; (8002094 <HAL_IPCC_Init+0x60>)
 8002048:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d102      	bne.n	800205c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7ff f8d4 	bl	8001204 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800205c:	68b8      	ldr	r0, [r7, #8]
 800205e:	f000 f85b 	bl	8002118 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f82c 	bl	80020cc <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8002082:	e001      	b.n	8002088 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8002088:	7bfb      	ldrb	r3, [r7, #15]
}
 800208a:	4618      	mov	r0, r3
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	58000c00 	.word	0x58000c00

08002098 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	4613      	mov	r3, r2
 80020a4:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80020a6:	bf00      	nop
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b085      	sub	sp, #20
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	60f8      	str	r0, [r7, #12]
 80020ba:	60b9      	str	r1, [r7, #8]
 80020bc:	4613      	mov	r3, r2
 80020be:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80020c0:	bf00      	nop
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80020d4:	2300      	movs	r3, #0
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	e00f      	b.n	80020fa <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	4a0b      	ldr	r2, [pc, #44]	; (8002110 <IPCC_SetDefaultCallbacks+0x44>)
 80020e4:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	3306      	adds	r3, #6
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	4a08      	ldr	r2, [pc, #32]	; (8002114 <IPCC_SetDefaultCallbacks+0x48>)
 80020f2:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	3301      	adds	r3, #1
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2b05      	cmp	r3, #5
 80020fe:	d9ec      	bls.n	80020da <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8002100:	bf00      	nop
 8002102:	bf00      	nop
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	08002099 	.word	0x08002099
 8002114:	080020b3 	.word	0x080020b3

08002118 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 800212c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	223f      	movs	r2, #63	; 0x3f
 8002132:	609a      	str	r2, [r3, #8]
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002144:	4b05      	ldr	r3, [pc, #20]	; (800215c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a04      	ldr	r2, [pc, #16]	; (800215c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800214a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800214e:	6013      	str	r3, [r2, #0]
}
 8002150:	bf00      	nop
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	58000400 	.word	0x58000400

08002160 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  
  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002172:	d104      	bne.n	800217e <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 8002174:	78fb      	ldrb	r3, [r7, #3]
 8002176:	4618      	mov	r0, r3
 8002178:	f000 f86a 	bl	8002250 <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 800217c:	e003      	b.n	8002186 <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 800217e:	78fb      	ldrb	r3, [r7, #3]
 8002180:	4618      	mov	r0, r3
 8002182:	f000 f83b 	bl	80021fc <HAL_PWREx_EnterSTOP0Mode>
}
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
	...

08002190 <HAL_PWR_EnableSleepOnExit>:
  *         Setting this bit is useful when the processor is expected to run only on
  *         interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8002194:	4b05      	ldr	r3, [pc, #20]	; (80021ac <HAL_PWR_EnableSleepOnExit+0x1c>)
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	4a04      	ldr	r2, [pc, #16]	; (80021ac <HAL_PWR_EnableSleepOnExit+0x1c>)
 800219a:	f043 0302 	orr.w	r3, r3, #2
 800219e:	6113      	str	r3, [r2, #16]
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <HAL_PWR_DisableSleepOnExit>:
  * @note   Clear SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
  *         re-enters SLEEP mode when an interruption handling is over.
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 80021b4:	4b05      	ldr	r3, [pc, #20]	; (80021cc <HAL_PWR_DisableSleepOnExit+0x1c>)
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	4a04      	ldr	r2, [pc, #16]	; (80021cc <HAL_PWR_DisableSleepOnExit+0x1c>)
 80021ba:	f023 0302 	bic.w	r3, r3, #2
 80021be:	6113      	str	r3, [r2, #16]
}
 80021c0:	bf00      	nop
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	e000ed00 	.word	0xe000ed00

080021d0 <LL_PWR_EnableSRAM2Retention>:
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 80021d4:	4b05      	ldr	r3, [pc, #20]	; (80021ec <LL_PWR_EnableSRAM2Retention+0x1c>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	4a04      	ldr	r2, [pc, #16]	; (80021ec <LL_PWR_EnableSRAM2Retention+0x1c>)
 80021da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021de:	6093      	str	r3, [r2, #8]
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	58000400 	.word	0x58000400

080021f0 <HAL_PWREx_EnableSRAMRetention>:
  * @note   On devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx retention is extended 
  *         to SRAM1, SRAM2a and SRAM2b.
  * @retval None
  */
void HAL_PWREx_EnableSRAMRetention(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  LL_PWR_EnableSRAM2Retention();
 80021f4:	f7ff ffec 	bl	80021d0 <LL_PWR_EnableSRAM2Retention>
}
 80021f8:	bf00      	nop
 80021fa:	bd80      	pop	{r7, pc}

080021fc <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	4603      	mov	r3, r0
 8002204:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8002206:	4b10      	ldr	r3, [pc, #64]	; (8002248 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a0f      	ldr	r2, [pc, #60]	; (8002248 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 800220c:	f023 0307 	bic.w	r3, r3, #7
 8002210:	6013      	str	r3, [r2, #0]


  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002212:	4b0e      	ldr	r3, [pc, #56]	; (800224c <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	4a0d      	ldr	r2, [pc, #52]	; (800224c <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002218:	f043 0304 	orr.w	r3, r3, #4
 800221c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d101      	bne.n	8002228 <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002224:	bf30      	wfi
 8002226:	e002      	b.n	800222e <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002228:	bf40      	sev
    __WFE();
 800222a:	bf20      	wfe
    __WFE();
 800222c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800222e:	4b07      	ldr	r3, [pc, #28]	; (800224c <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	4a06      	ldr	r2, [pc, #24]	; (800224c <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002234:	f023 0304 	bic.w	r3, r3, #4
 8002238:	6113      	str	r3, [r2, #16]
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	58000400 	.word	0x58000400
 800224c:	e000ed00 	.word	0xe000ed00

08002250 <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
    
  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 800225a:	4b11      	ldr	r3, [pc, #68]	; (80022a0 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f023 0307 	bic.w	r3, r3, #7
 8002262:	4a0f      	ldr	r2, [pc, #60]	; (80022a0 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800226a:	4b0e      	ldr	r3, [pc, #56]	; (80022a4 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	4a0d      	ldr	r2, [pc, #52]	; (80022a4 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002270:	f043 0304 	orr.w	r3, r3, #4
 8002274:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002276:	79fb      	ldrb	r3, [r7, #7]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d101      	bne.n	8002280 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800227c:	bf30      	wfi
 800227e:	e002      	b.n	8002286 <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002280:	bf40      	sev
    __WFE();
 8002282:	bf20      	wfe
    __WFE();
 8002284:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002286:	4b07      	ldr	r3, [pc, #28]	; (80022a4 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	4a06      	ldr	r2, [pc, #24]	; (80022a4 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 800228c:	f023 0304 	bic.w	r3, r3, #4
 8002290:	6113      	str	r3, [r2, #16]
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	58000400 	.word	0x58000400
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80022ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022ba:	d101      	bne.n	80022c0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80022bc:	2301      	movs	r3, #1
 80022be:	e000      	b.n	80022c2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <LL_RCC_HSE_Enable>:
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80022d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022de:	6013      	str	r3, [r2, #0]
}
 80022e0:	bf00      	nop
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <LL_RCC_HSE_Disable>:
{
 80022ea:	b480      	push	{r7}
 80022ec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80022ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022fc:	6013      	str	r3, [r2, #0]
}
 80022fe:	bf00      	nop
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <LL_RCC_HSE_IsReady>:
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800230c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002316:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800231a:	d101      	bne.n	8002320 <LL_RCC_HSE_IsReady+0x18>
 800231c:	2301      	movs	r3, #1
 800231e:	e000      	b.n	8002322 <LL_RCC_HSE_IsReady+0x1a>
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <LL_RCC_HSI_Enable>:
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800233a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800233e:	6013      	str	r3, [r2, #0]
}
 8002340:	bf00      	nop
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <LL_RCC_HSI_Disable>:
{
 800234a:	b480      	push	{r7}
 800234c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800234e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002358:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800235c:	6013      	str	r3, [r2, #0]
}
 800235e:	bf00      	nop
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <LL_RCC_HSI_IsReady>:
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800236c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800237a:	d101      	bne.n	8002380 <LL_RCC_HSI_IsReady+0x18>
 800237c:	2301      	movs	r3, #1
 800237e:	e000      	b.n	8002382 <LL_RCC_HSI_IsReady+0x1a>
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <LL_RCC_HSI_SetCalibTrimming>:
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	061b      	lsls	r3, r3, #24
 80023a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023a6:	4313      	orrs	r3, r2
 80023a8:	604b      	str	r3, [r1, #4]
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <LL_RCC_LSE_Enable>:
{
 80023b6:	b480      	push	{r7}
 80023b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80023ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023c6:	f043 0301 	orr.w	r3, r3, #1
 80023ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80023ce:	bf00      	nop
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <LL_RCC_LSE_Disable>:
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80023dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023e8:	f023 0301 	bic.w	r3, r3, #1
 80023ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80023f0:	bf00      	nop
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <LL_RCC_LSE_EnableBypass>:
{
 80023fa:	b480      	push	{r7}
 80023fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80023fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002406:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800240a:	f043 0304 	orr.w	r3, r3, #4
 800240e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002412:	bf00      	nop
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <LL_RCC_LSE_DisableBypass>:
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002428:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800242c:	f023 0304 	bic.w	r3, r3, #4
 8002430:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <LL_RCC_LSE_IsReady>:
{
 800243e:	b480      	push	{r7}
 8002440:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b02      	cmp	r3, #2
 8002450:	d101      	bne.n	8002456 <LL_RCC_LSE_IsReady+0x18>
 8002452:	2301      	movs	r3, #1
 8002454:	e000      	b.n	8002458 <LL_RCC_LSE_IsReady+0x1a>
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <LL_RCC_LSI1_Enable>:
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002466:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800246a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800246e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002472:	f043 0301 	orr.w	r3, r3, #1
 8002476:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800247a:	bf00      	nop
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <LL_RCC_LSI1_Disable>:
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800248c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002490:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002494:	f023 0301 	bic.w	r3, r3, #1
 8002498:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800249c:	bf00      	nop
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <LL_RCC_LSI1_IsReady>:
{
 80024a6:	b480      	push	{r7}
 80024a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80024aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d101      	bne.n	80024be <LL_RCC_LSI1_IsReady+0x18>
 80024ba:	2301      	movs	r3, #1
 80024bc:	e000      	b.n	80024c0 <LL_RCC_LSI1_IsReady+0x1a>
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <LL_RCC_LSI2_Enable>:
{
 80024ca:	b480      	push	{r7}
 80024cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80024ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024da:	f043 0304 	orr.w	r3, r3, #4
 80024de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80024e2:	bf00      	nop
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <LL_RCC_LSI2_Disable>:
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80024f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024fc:	f023 0304 	bic.w	r3, r3, #4
 8002500:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <LL_RCC_LSI2_IsReady>:
{
 800250e:	b480      	push	{r7}
 8002510:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002516:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b08      	cmp	r3, #8
 8002520:	d101      	bne.n	8002526 <LL_RCC_LSI2_IsReady+0x18>
 8002522:	2301      	movs	r3, #1
 8002524:	e000      	b.n	8002528 <LL_RCC_LSI2_IsReady+0x1a>
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <LL_RCC_LSI2_SetTrimming>:
{
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800253a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800253e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002542:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	021b      	lsls	r3, r3, #8
 800254a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800254e:	4313      	orrs	r3, r2
 8002550:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <LL_RCC_MSI_Enable>:
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800256e:	f043 0301 	orr.w	r3, r3, #1
 8002572:	6013      	str	r3, [r2, #0]
}
 8002574:	bf00      	nop
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <LL_RCC_MSI_Disable>:
{
 800257e:	b480      	push	{r7}
 8002580:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800258c:	f023 0301 	bic.w	r3, r3, #1
 8002590:	6013      	str	r3, [r2, #0]
}
 8002592:	bf00      	nop
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <LL_RCC_MSI_IsReady>:
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80025a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d101      	bne.n	80025b2 <LL_RCC_MSI_IsReady+0x16>
 80025ae:	2301      	movs	r3, #1
 80025b0:	e000      	b.n	80025b4 <LL_RCC_MSI_IsReady+0x18>
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <LL_RCC_MSI_SetRange>:
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80025c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	600b      	str	r3, [r1, #0]
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <LL_RCC_MSI_GetRange>:
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80025ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025f6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2bb0      	cmp	r3, #176	; 0xb0
 80025fc:	d901      	bls.n	8002602 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80025fe:	23b0      	movs	r3, #176	; 0xb0
 8002600:	607b      	str	r3, [r7, #4]
  return msiRange;
 8002602:	687b      	ldr	r3, [r7, #4]
}
 8002604:	4618      	mov	r0, r3
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	021b      	lsls	r3, r3, #8
 8002626:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800262a:	4313      	orrs	r3, r2
 800262c:	604b      	str	r3, [r1, #4]
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <LL_RCC_SetSysClkSource>:
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f023 0203 	bic.w	r2, r3, #3
 800264c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4313      	orrs	r3, r2
 8002654:	608b      	str	r3, [r1, #8]
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <LL_RCC_GetSysClkSource>:
{
 8002662:	b480      	push	{r7}
 8002664:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002666:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f003 030c 	and.w	r3, r3, #12
}
 8002670:	4618      	mov	r0, r3
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <LL_RCC_SetAHBPrescaler>:
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002682:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800268c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4313      	orrs	r3, r2
 8002694:	608b      	str	r3, [r1, #8]
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <LL_C2_RCC_SetAHBPrescaler>:
{
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80026aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80026b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4313      	orrs	r3, r2
 80026be:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <LL_RCC_SetAHB4Prescaler>:
{
 80026ce:	b480      	push	{r7}
 80026d0:	b083      	sub	sp, #12
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80026d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026da:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80026de:	f023 020f 	bic.w	r2, r3, #15
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	091b      	lsrs	r3, r3, #4
 80026e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026ea:	4313      	orrs	r3, r2
 80026ec:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <LL_RCC_SetAPB1Prescaler>:
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800270e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4313      	orrs	r3, r2
 8002716:	608b      	str	r3, [r1, #8]
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <LL_RCC_SetAPB2Prescaler>:
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800272c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002736:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4313      	orrs	r3, r2
 800273e:	608b      	str	r3, [r1, #8]
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <LL_RCC_GetAHBPrescaler>:
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800275a:	4618      	mov	r0, r3
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <LL_RCC_GetAHB4Prescaler>:
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800276c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002770:	011b      	lsls	r3, r3, #4
 8002772:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002776:	4618      	mov	r0, r3
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <LL_RCC_GetAPB1Prescaler>:
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800278e:	4618      	mov	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <LL_RCC_GetAPB2Prescaler>:
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800279c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <LL_RCC_PLL_Enable>:
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80027b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027c2:	6013      	str	r3, [r2, #0]
}
 80027c4:	bf00      	nop
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <LL_RCC_PLL_Disable>:
{
 80027ce:	b480      	push	{r7}
 80027d0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80027d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027e0:	6013      	str	r3, [r2, #0]
}
 80027e2:	bf00      	nop
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <LL_RCC_PLL_IsReady>:
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80027f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027fe:	d101      	bne.n	8002804 <LL_RCC_PLL_IsReady+0x18>
 8002800:	2301      	movs	r3, #1
 8002802:	e000      	b.n	8002806 <LL_RCC_PLL_IsReady+0x1a>
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <LL_RCC_PLL_GetN>:
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	0a1b      	lsrs	r3, r3, #8
 800281c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002820:	4618      	mov	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <LL_RCC_PLL_GetR>:
{
 800282a:	b480      	push	{r7}
 800282c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800282e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002838:	4618      	mov	r0, r3
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <LL_RCC_PLL_GetDivider>:
{
 8002842:	b480      	push	{r7}
 8002844:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002850:	4618      	mov	r0, r3
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <LL_RCC_PLL_GetMainSource>:
{
 800285a:	b480      	push	{r7}
 800285c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800285e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	f003 0303 	and.w	r3, r3, #3
}
 8002868:	4618      	mov	r0, r3
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <LL_RCC_IsActiveFlag_HPRE>:
{
 8002872:	b480      	push	{r7}
 8002874:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002884:	d101      	bne.n	800288a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002886:	2301      	movs	r3, #1
 8002888:	e000      	b.n	800288c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8002896:	b480      	push	{r7}
 8002898:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800289a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800289e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80028a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028aa:	d101      	bne.n	80028b0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80028ac:	2301      	movs	r3, #1
 80028ae:	e000      	b.n	80028b2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80028c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80028c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028d0:	d101      	bne.n	80028d6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80028d2:	2301      	movs	r3, #1
 80028d4:	e000      	b.n	80028d8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <LL_RCC_IsActiveFlag_PPRE1>:
{
 80028e2:	b480      	push	{r7}
 80028e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80028e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028f4:	d101      	bne.n	80028fa <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80028f6:	2301      	movs	r3, #1
 80028f8:	e000      	b.n	80028fc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8002906:	b480      	push	{r7}
 8002908:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800290a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002914:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002918:	d101      	bne.n	800291e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800291a:	2301      	movs	r3, #1
 800291c:	e000      	b.n	8002920 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
	...

0800292c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800292c:	b590      	push	{r4, r7, lr}
 800292e:	b08d      	sub	sp, #52	; 0x34
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e324      	b.n	8002f88 <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0320 	and.w	r3, r3, #32
 8002946:	2b00      	cmp	r3, #0
 8002948:	f000 808d 	beq.w	8002a66 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800294c:	f7ff fe89 	bl	8002662 <LL_RCC_GetSysClkSource>
 8002950:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002952:	f7ff ff82 	bl	800285a <LL_RCC_PLL_GetMainSource>
 8002956:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295a:	2b00      	cmp	r3, #0
 800295c:	d005      	beq.n	800296a <HAL_RCC_OscConfig+0x3e>
 800295e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002960:	2b0c      	cmp	r3, #12
 8002962:	d147      	bne.n	80029f4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002966:	2b01      	cmp	r3, #1
 8002968:	d144      	bne.n	80029f4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	69db      	ldr	r3, [r3, #28]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e308      	b.n	8002f88 <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800297a:	f7ff fe34 	bl	80025e6 <LL_RCC_MSI_GetRange>
 800297e:	4603      	mov	r3, r0
 8002980:	429c      	cmp	r4, r3
 8002982:	d914      	bls.n	80029ae <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	4618      	mov	r0, r3
 800298a:	f000 fcf1 	bl	8003370 <RCC_SetFlashLatencyFromMSIRange>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e2f7      	b.n	8002f88 <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff fe0e 	bl	80025be <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff fe32 	bl	8002610 <LL_RCC_MSI_SetCalibTrimming>
 80029ac:	e013      	b.n	80029d6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff fe03 	bl	80025be <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff fe27 	bl	8002610 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 fcd2 	bl	8003370 <RCC_SetFlashLatencyFromMSIRange>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e2d8      	b.n	8002f88 <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80029d6:	f000 fc8b 	bl	80032f0 <HAL_RCC_GetHCLKFreq>
 80029da:	4603      	mov	r3, r0
 80029dc:	4aa4      	ldr	r2, [pc, #656]	; (8002c70 <HAL_RCC_OscConfig+0x344>)
 80029de:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80029e0:	4ba4      	ldr	r3, [pc, #656]	; (8002c74 <HAL_RCC_OscConfig+0x348>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7fe fe3b 	bl	8001660 <HAL_InitTick>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d039      	beq.n	8002a64 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e2c9      	b.n	8002f88 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	69db      	ldr	r3, [r3, #28]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d01e      	beq.n	8002a3a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029fc:	f7ff fdb0 	bl	8002560 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a00:	f7fe fe7c 	bl	80016fc <HAL_GetTick>
 8002a04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a08:	f7fe fe78 	bl	80016fc <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e2b6      	b.n	8002f88 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002a1a:	f7ff fdbf 	bl	800259c <LL_RCC_MSI_IsReady>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0f1      	beq.n	8002a08 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff fdc8 	bl	80025be <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff fdec 	bl	8002610 <LL_RCC_MSI_SetCalibTrimming>
 8002a38:	e015      	b.n	8002a66 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a3a:	f7ff fda0 	bl	800257e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a3e:	f7fe fe5d 	bl	80016fc <HAL_GetTick>
 8002a42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a46:	f7fe fe59 	bl	80016fc <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e297      	b.n	8002f88 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002a58:	f7ff fda0 	bl	800259c <LL_RCC_MSI_IsReady>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f1      	bne.n	8002a46 <HAL_RCC_OscConfig+0x11a>
 8002a62:	e000      	b.n	8002a66 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002a64:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d047      	beq.n	8002b02 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a72:	f7ff fdf6 	bl	8002662 <LL_RCC_GetSysClkSource>
 8002a76:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a78:	f7ff feef 	bl	800285a <LL_RCC_PLL_GetMainSource>
 8002a7c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002a7e:	6a3b      	ldr	r3, [r7, #32]
 8002a80:	2b08      	cmp	r3, #8
 8002a82:	d005      	beq.n	8002a90 <HAL_RCC_OscConfig+0x164>
 8002a84:	6a3b      	ldr	r3, [r7, #32]
 8002a86:	2b0c      	cmp	r3, #12
 8002a88:	d108      	bne.n	8002a9c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	2b03      	cmp	r3, #3
 8002a8e:	d105      	bne.n	8002a9c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d134      	bne.n	8002b02 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e275      	b.n	8002f88 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa4:	d102      	bne.n	8002aac <HAL_RCC_OscConfig+0x180>
 8002aa6:	f7ff fc11 	bl	80022cc <LL_RCC_HSE_Enable>
 8002aaa:	e001      	b.n	8002ab0 <HAL_RCC_OscConfig+0x184>
 8002aac:	f7ff fc1d 	bl	80022ea <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d012      	beq.n	8002ade <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab8:	f7fe fe20 	bl	80016fc <HAL_GetTick>
 8002abc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ac0:	f7fe fe1c 	bl	80016fc <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b64      	cmp	r3, #100	; 0x64
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e25a      	b.n	8002f88 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002ad2:	f7ff fc19 	bl	8002308 <LL_RCC_HSE_IsReady>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0f1      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x194>
 8002adc:	e011      	b.n	8002b02 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ade:	f7fe fe0d 	bl	80016fc <HAL_GetTick>
 8002ae2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae6:	f7fe fe09 	bl	80016fc <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b64      	cmp	r3, #100	; 0x64
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e247      	b.n	8002f88 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002af8:	f7ff fc06 	bl	8002308 <LL_RCC_HSE_IsReady>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f1      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d04c      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b0e:	f7ff fda8 	bl	8002662 <LL_RCC_GetSysClkSource>
 8002b12:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b14:	f7ff fea1 	bl	800285a <LL_RCC_PLL_GetMainSource>
 8002b18:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d005      	beq.n	8002b2c <HAL_RCC_OscConfig+0x200>
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	2b0c      	cmp	r3, #12
 8002b24:	d10e      	bne.n	8002b44 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d10b      	bne.n	8002b44 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e227      	b.n	8002f88 <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff fc25 	bl	800238c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002b42:	e031      	b.n	8002ba8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d019      	beq.n	8002b80 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b4c:	f7ff fbee 	bl	800232c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b50:	f7fe fdd4 	bl	80016fc <HAL_GetTick>
 8002b54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b58:	f7fe fdd0 	bl	80016fc <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e20e      	b.n	8002f88 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002b6a:	f7ff fbfd 	bl	8002368 <LL_RCC_HSI_IsReady>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0f1      	beq.n	8002b58 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff fc07 	bl	800238c <LL_RCC_HSI_SetCalibTrimming>
 8002b7e:	e013      	b.n	8002ba8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b80:	f7ff fbe3 	bl	800234a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b84:	f7fe fdba 	bl	80016fc <HAL_GetTick>
 8002b88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b8c:	f7fe fdb6 	bl	80016fc <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e1f4      	b.n	8002f88 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002b9e:	f7ff fbe3 	bl	8002368 <LL_RCC_HSI_IsReady>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1f1      	bne.n	8002b8c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0308 	and.w	r3, r3, #8
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d106      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 80a3 	beq.w	8002d08 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d076      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0310 	and.w	r3, r3, #16
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d046      	beq.n	8002c64 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002bd6:	f7ff fc66 	bl	80024a6 <LL_RCC_LSI1_IsReady>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d113      	bne.n	8002c08 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002be0:	f7ff fc3f 	bl	8002462 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002be4:	f7fe fd8a 	bl	80016fc <HAL_GetTick>
 8002be8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002bec:	f7fe fd86 	bl	80016fc <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e1c4      	b.n	8002f88 <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002bfe:	f7ff fc52 	bl	80024a6 <LL_RCC_LSI1_IsReady>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0f1      	beq.n	8002bec <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002c08:	f7ff fc5f 	bl	80024ca <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0c:	f7fe fd76 	bl	80016fc <HAL_GetTick>
 8002c10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002c14:	f7fe fd72 	bl	80016fc <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b03      	cmp	r3, #3
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e1b0      	b.n	8002f88 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002c26:	f7ff fc72 	bl	800250e <LL_RCC_LSI2_IsReady>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0f1      	beq.n	8002c14 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff fc7c 	bl	8002532 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002c3a:	f7ff fc23 	bl	8002484 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3e:	f7fe fd5d 	bl	80016fc <HAL_GetTick>
 8002c42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002c44:	e008      	b.n	8002c58 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002c46:	f7fe fd59 	bl	80016fc <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e197      	b.n	8002f88 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002c58:	f7ff fc25 	bl	80024a6 <LL_RCC_LSI1_IsReady>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f1      	bne.n	8002c46 <HAL_RCC_OscConfig+0x31a>
 8002c62:	e051      	b.n	8002d08 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002c64:	f7ff fbfd 	bl	8002462 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c68:	f7fe fd48 	bl	80016fc <HAL_GetTick>
 8002c6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002c6e:	e00c      	b.n	8002c8a <HAL_RCC_OscConfig+0x35e>
 8002c70:	20000010 	.word	0x20000010
 8002c74:	20000014 	.word	0x20000014
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002c78:	f7fe fd40 	bl	80016fc <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e17e      	b.n	8002f88 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002c8a:	f7ff fc0c 	bl	80024a6 <LL_RCC_LSI1_IsReady>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0f1      	beq.n	8002c78 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002c94:	f7ff fc2a 	bl	80024ec <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002c98:	e008      	b.n	8002cac <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002c9a:	f7fe fd2f 	bl	80016fc <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b03      	cmp	r3, #3
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e16d      	b.n	8002f88 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002cac:	f7ff fc2f 	bl	800250e <LL_RCC_LSI2_IsReady>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f1      	bne.n	8002c9a <HAL_RCC_OscConfig+0x36e>
 8002cb6:	e027      	b.n	8002d08 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002cb8:	f7ff fc18 	bl	80024ec <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cbc:	f7fe fd1e 	bl	80016fc <HAL_GetTick>
 8002cc0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002cc4:	f7fe fd1a 	bl	80016fc <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b03      	cmp	r3, #3
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e158      	b.n	8002f88 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002cd6:	f7ff fc1a 	bl	800250e <LL_RCC_LSI2_IsReady>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1f1      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002ce0:	f7ff fbd0 	bl	8002484 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce4:	f7fe fd0a 	bl	80016fc <HAL_GetTick>
 8002ce8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002cec:	f7fe fd06 	bl	80016fc <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e144      	b.n	8002f88 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002cfe:	f7ff fbd2 	bl	80024a6 <LL_RCC_LSI1_IsReady>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1f1      	bne.n	8002cec <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d05b      	beq.n	8002dcc <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d14:	4b9e      	ldr	r3, [pc, #632]	; (8002f90 <HAL_RCC_OscConfig+0x664>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d114      	bne.n	8002d4a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002d20:	f7ff fa0e 	bl	8002140 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d24:	f7fe fcea 	bl	80016fc <HAL_GetTick>
 8002d28:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d2c:	f7fe fce6 	bl	80016fc <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e124      	b.n	8002f88 <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d3e:	4b94      	ldr	r3, [pc, #592]	; (8002f90 <HAL_RCC_OscConfig+0x664>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0f0      	beq.n	8002d2c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d102      	bne.n	8002d58 <HAL_RCC_OscConfig+0x42c>
 8002d52:	f7ff fb30 	bl	80023b6 <LL_RCC_LSE_Enable>
 8002d56:	e00c      	b.n	8002d72 <HAL_RCC_OscConfig+0x446>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	2b05      	cmp	r3, #5
 8002d5e:	d104      	bne.n	8002d6a <HAL_RCC_OscConfig+0x43e>
 8002d60:	f7ff fb4b 	bl	80023fa <LL_RCC_LSE_EnableBypass>
 8002d64:	f7ff fb27 	bl	80023b6 <LL_RCC_LSE_Enable>
 8002d68:	e003      	b.n	8002d72 <HAL_RCC_OscConfig+0x446>
 8002d6a:	f7ff fb35 	bl	80023d8 <LL_RCC_LSE_Disable>
 8002d6e:	f7ff fb55 	bl	800241c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d014      	beq.n	8002da4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7a:	f7fe fcbf 	bl	80016fc <HAL_GetTick>
 8002d7e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002d80:	e00a      	b.n	8002d98 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d82:	f7fe fcbb 	bl	80016fc <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e0f7      	b.n	8002f88 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002d98:	f7ff fb51 	bl	800243e <LL_RCC_LSE_IsReady>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0ef      	beq.n	8002d82 <HAL_RCC_OscConfig+0x456>
 8002da2:	e013      	b.n	8002dcc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da4:	f7fe fcaa 	bl	80016fc <HAL_GetTick>
 8002da8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002daa:	e00a      	b.n	8002dc2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dac:	f7fe fca6 	bl	80016fc <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e0e2      	b.n	8002f88 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002dc2:	f7ff fb3c 	bl	800243e <LL_RCC_LSE_IsReady>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1ef      	bne.n	8002dac <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 80d8 	beq.w	8002f86 <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dd6:	f7ff fc44 	bl	8002662 <LL_RCC_GetSysClkSource>
 8002dda:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	f040 80a6 	bne.w	8002f3a <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f003 0203 	and.w	r2, r3, #3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d123      	bne.n	8002e44 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d11c      	bne.n	8002e44 <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	0a1b      	lsrs	r3, r3, #8
 8002e0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d114      	bne.n	8002e44 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d10d      	bne.n	8002e44 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d106      	bne.n	8002e44 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d054      	beq.n	8002eee <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	2b0c      	cmp	r3, #12
 8002e48:	d04f      	beq.n	8002eea <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e4a:	f7ff fcc0 	bl	80027ce <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e4e:	f7fe fc55 	bl	80016fc <HAL_GetTick>
 8002e52:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e54:	e008      	b.n	8002e68 <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e56:	f7fe fc51 	bl	80016fc <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e08f      	b.n	8002f88 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1ef      	bne.n	8002e56 <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e7a:	68da      	ldr	r2, [r3, #12]
 8002e7c:	4b45      	ldr	r3, [pc, #276]	; (8002f94 <HAL_RCC_OscConfig+0x668>)
 8002e7e:	4013      	ands	r3, r2
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e88:	4311      	orrs	r1, r2
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e8e:	0212      	lsls	r2, r2, #8
 8002e90:	4311      	orrs	r1, r2
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e96:	4311      	orrs	r1, r2
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e9c:	4311      	orrs	r1, r2
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002eac:	f7ff fc80 	bl	80027b0 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ebe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ec0:	f7fe fc1c 	bl	80016fc <HAL_GetTick>
 8002ec4:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec8:	f7fe fc18 	bl	80016fc <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e056      	b.n	8002f88 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0ef      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ee8:	e04d      	b.n	8002f86 <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e04c      	b.n	8002f88 <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d144      	bne.n	8002f86 <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002efc:	f7ff fc58 	bl	80027b0 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f0e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f10:	f7fe fbf4 	bl	80016fc <HAL_GetTick>
 8002f14:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f18:	f7fe fbf0 	bl	80016fc <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e02e      	b.n	8002f88 <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d0ef      	beq.n	8002f18 <HAL_RCC_OscConfig+0x5ec>
 8002f38:	e025      	b.n	8002f86 <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	2b0c      	cmp	r3, #12
 8002f3e:	d020      	beq.n	8002f82 <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f40:	f7ff fc45 	bl	80027ce <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f44:	f7fe fbda 	bl	80016fc <HAL_GetTick>
 8002f48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f4c:	f7fe fbd6 	bl	80016fc <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e014      	b.n	8002f88 <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1ef      	bne.n	8002f4c <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 8002f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f7a:	f023 0303 	bic.w	r3, r3, #3
 8002f7e:	60d3      	str	r3, [r2, #12]
 8002f80:	e001      	b.n	8002f86 <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e000      	b.n	8002f88 <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3734      	adds	r7, #52	; 0x34
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd90      	pop	{r4, r7, pc}
 8002f90:	58000400 	.word	0x58000400
 8002f94:	11c1808c 	.word	0x11c1808c

08002f98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d101      	bne.n	8002fac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e12d      	b.n	8003208 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fac:	4b98      	ldr	r3, [pc, #608]	; (8003210 <HAL_RCC_ClockConfig+0x278>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0307 	and.w	r3, r3, #7
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d91b      	bls.n	8002ff2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fba:	4b95      	ldr	r3, [pc, #596]	; (8003210 <HAL_RCC_ClockConfig+0x278>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f023 0207 	bic.w	r2, r3, #7
 8002fc2:	4993      	ldr	r1, [pc, #588]	; (8003210 <HAL_RCC_ClockConfig+0x278>)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fca:	f7fe fb97 	bl	80016fc <HAL_GetTick>
 8002fce:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002fd2:	f7fe fb93 	bl	80016fc <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e111      	b.n	8003208 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe4:	4b8a      	ldr	r3, [pc, #552]	; (8003210 <HAL_RCC_ClockConfig+0x278>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d1ef      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d016      	beq.n	800302c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff fb39 	bl	800267a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003008:	f7fe fb78 	bl	80016fc <HAL_GetTick>
 800300c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800300e:	e008      	b.n	8003022 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003010:	f7fe fb74 	bl	80016fc <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e0f2      	b.n	8003208 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003022:	f7ff fc26 	bl	8002872 <LL_RCC_IsActiveFlag_HPRE>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d0f1      	beq.n	8003010 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0320 	and.w	r3, r3, #32
 8003034:	2b00      	cmp	r3, #0
 8003036:	d016      	beq.n	8003066 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	4618      	mov	r0, r3
 800303e:	f7ff fb30 	bl	80026a2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003042:	f7fe fb5b 	bl	80016fc <HAL_GetTick>
 8003046:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003048:	e008      	b.n	800305c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800304a:	f7fe fb57 	bl	80016fc <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d901      	bls.n	800305c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e0d5      	b.n	8003208 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800305c:	f7ff fc1b 	bl	8002896 <LL_RCC_IsActiveFlag_C2HPRE>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0f1      	beq.n	800304a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800306e:	2b00      	cmp	r3, #0
 8003070:	d016      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	4618      	mov	r0, r3
 8003078:	f7ff fb29 	bl	80026ce <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800307c:	f7fe fb3e 	bl	80016fc <HAL_GetTick>
 8003080:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003082:	e008      	b.n	8003096 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003084:	f7fe fb3a 	bl	80016fc <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e0b8      	b.n	8003208 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003096:	f7ff fc11 	bl	80028bc <LL_RCC_IsActiveFlag_SHDHPRE>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0f1      	beq.n	8003084 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0304 	and.w	r3, r3, #4
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d016      	beq.n	80030da <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff fb23 	bl	80026fc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80030b6:	f7fe fb21 	bl	80016fc <HAL_GetTick>
 80030ba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80030bc:	e008      	b.n	80030d0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80030be:	f7fe fb1d 	bl	80016fc <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e09b      	b.n	8003208 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80030d0:	f7ff fc07 	bl	80028e2 <LL_RCC_IsActiveFlag_PPRE1>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0f1      	beq.n	80030be <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0308 	and.w	r3, r3, #8
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d017      	beq.n	8003116 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff fb19 	bl	8002724 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80030f2:	f7fe fb03 	bl	80016fc <HAL_GetTick>
 80030f6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80030f8:	e008      	b.n	800310c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80030fa:	f7fe faff 	bl	80016fc <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d901      	bls.n	800310c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e07d      	b.n	8003208 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800310c:	f7ff fbfb 	bl	8002906 <LL_RCC_IsActiveFlag_PPRE2>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d0f1      	beq.n	80030fa <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d043      	beq.n	80031aa <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b02      	cmp	r3, #2
 8003128:	d106      	bne.n	8003138 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800312a:	f7ff f8ed 	bl	8002308 <LL_RCC_HSE_IsReady>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d11e      	bne.n	8003172 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e067      	b.n	8003208 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2b03      	cmp	r3, #3
 800313e:	d106      	bne.n	800314e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003140:	f7ff fb54 	bl	80027ec <LL_RCC_PLL_IsReady>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d113      	bne.n	8003172 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e05c      	b.n	8003208 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d106      	bne.n	8003164 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003156:	f7ff fa21 	bl	800259c <LL_RCC_MSI_IsReady>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d108      	bne.n	8003172 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e051      	b.n	8003208 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003164:	f7ff f900 	bl	8002368 <LL_RCC_HSI_IsReady>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e04a      	b.n	8003208 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	4618      	mov	r0, r3
 8003178:	f7ff fa5f 	bl	800263a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800317c:	f7fe fabe 	bl	80016fc <HAL_GetTick>
 8003180:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003182:	e00a      	b.n	800319a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003184:	f7fe faba 	bl	80016fc <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003192:	4293      	cmp	r3, r2
 8003194:	d901      	bls.n	800319a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e036      	b.n	8003208 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800319a:	f7ff fa62 	bl	8002662 <LL_RCC_GetSysClkSource>
 800319e:	4602      	mov	r2, r0
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d1ec      	bne.n	8003184 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031aa:	4b19      	ldr	r3, [pc, #100]	; (8003210 <HAL_RCC_ClockConfig+0x278>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d21b      	bcs.n	80031f0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b8:	4b15      	ldr	r3, [pc, #84]	; (8003210 <HAL_RCC_ClockConfig+0x278>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f023 0207 	bic.w	r2, r3, #7
 80031c0:	4913      	ldr	r1, [pc, #76]	; (8003210 <HAL_RCC_ClockConfig+0x278>)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031c8:	f7fe fa98 	bl	80016fc <HAL_GetTick>
 80031cc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80031d0:	f7fe fa94 	bl	80016fc <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e012      	b.n	8003208 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e2:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <HAL_RCC_ClockConfig+0x278>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d1ef      	bne.n	80031d0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80031f0:	f000 f87e 	bl	80032f0 <HAL_RCC_GetHCLKFreq>
 80031f4:	4603      	mov	r3, r0
 80031f6:	4a07      	ldr	r2, [pc, #28]	; (8003214 <HAL_RCC_ClockConfig+0x27c>)
 80031f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80031fa:	f7fe fa8b 	bl	8001714 <HAL_GetTickPrio>
 80031fe:	4603      	mov	r3, r0
 8003200:	4618      	mov	r0, r3
 8003202:	f7fe fa2d 	bl	8001660 <HAL_InitTick>
 8003206:	4603      	mov	r3, r0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	58004000 	.word	0x58004000
 8003214:	20000010 	.word	0x20000010

08003218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003218:	b590      	push	{r4, r7, lr}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800321e:	f7ff fa20 	bl	8002662 <LL_RCC_GetSysClkSource>
 8003222:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10a      	bne.n	8003240 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800322a:	f7ff f9dc 	bl	80025e6 <LL_RCC_MSI_GetRange>
 800322e:	4603      	mov	r3, r0
 8003230:	091b      	lsrs	r3, r3, #4
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	4a2b      	ldr	r2, [pc, #172]	; (80032e4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	e04b      	b.n	80032d8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b04      	cmp	r3, #4
 8003244:	d102      	bne.n	800324c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003246:	4b28      	ldr	r3, [pc, #160]	; (80032e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003248:	60fb      	str	r3, [r7, #12]
 800324a:	e045      	b.n	80032d8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b08      	cmp	r3, #8
 8003250:	d10a      	bne.n	8003268 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003252:	f7ff f829 	bl	80022a8 <LL_RCC_HSE_IsEnabledDiv2>
 8003256:	4603      	mov	r3, r0
 8003258:	2b01      	cmp	r3, #1
 800325a:	d102      	bne.n	8003262 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800325c:	4b22      	ldr	r3, [pc, #136]	; (80032e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	e03a      	b.n	80032d8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003262:	4b22      	ldr	r3, [pc, #136]	; (80032ec <HAL_RCC_GetSysClockFreq+0xd4>)
 8003264:	60fb      	str	r3, [r7, #12]
 8003266:	e037      	b.n	80032d8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003268:	f7ff faf7 	bl	800285a <LL_RCC_PLL_GetMainSource>
 800326c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	2b02      	cmp	r3, #2
 8003272:	d003      	beq.n	800327c <HAL_RCC_GetSysClockFreq+0x64>
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	2b03      	cmp	r3, #3
 8003278:	d003      	beq.n	8003282 <HAL_RCC_GetSysClockFreq+0x6a>
 800327a:	e00d      	b.n	8003298 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800327c:	4b1a      	ldr	r3, [pc, #104]	; (80032e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800327e:	60bb      	str	r3, [r7, #8]
        break;
 8003280:	e015      	b.n	80032ae <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003282:	f7ff f811 	bl	80022a8 <LL_RCC_HSE_IsEnabledDiv2>
 8003286:	4603      	mov	r3, r0
 8003288:	2b01      	cmp	r3, #1
 800328a:	d102      	bne.n	8003292 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800328c:	4b16      	ldr	r3, [pc, #88]	; (80032e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800328e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003290:	e00d      	b.n	80032ae <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003292:	4b16      	ldr	r3, [pc, #88]	; (80032ec <HAL_RCC_GetSysClockFreq+0xd4>)
 8003294:	60bb      	str	r3, [r7, #8]
        break;
 8003296:	e00a      	b.n	80032ae <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003298:	f7ff f9a5 	bl	80025e6 <LL_RCC_MSI_GetRange>
 800329c:	4603      	mov	r3, r0
 800329e:	091b      	lsrs	r3, r3, #4
 80032a0:	f003 030f 	and.w	r3, r3, #15
 80032a4:	4a0f      	ldr	r2, [pc, #60]	; (80032e4 <HAL_RCC_GetSysClockFreq+0xcc>)
 80032a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032aa:	60bb      	str	r3, [r7, #8]
        break;
 80032ac:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80032ae:	f7ff faaf 	bl	8002810 <LL_RCC_PLL_GetN>
 80032b2:	4602      	mov	r2, r0
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	fb03 f402 	mul.w	r4, r3, r2
 80032ba:	f7ff fac2 	bl	8002842 <LL_RCC_PLL_GetDivider>
 80032be:	4603      	mov	r3, r0
 80032c0:	091b      	lsrs	r3, r3, #4
 80032c2:	3301      	adds	r3, #1
 80032c4:	fbb4 f4f3 	udiv	r4, r4, r3
 80032c8:	f7ff faaf 	bl	800282a <LL_RCC_PLL_GetR>
 80032cc:	4603      	mov	r3, r0
 80032ce:	0f5b      	lsrs	r3, r3, #29
 80032d0:	3301      	adds	r3, #1
 80032d2:	fbb4 f3f3 	udiv	r3, r4, r3
 80032d6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80032d8:	68fb      	ldr	r3, [r7, #12]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3714      	adds	r7, #20
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd90      	pop	{r4, r7, pc}
 80032e2:	bf00      	nop
 80032e4:	080083b4 	.word	0x080083b4
 80032e8:	00f42400 	.word	0x00f42400
 80032ec:	01e84800 	.word	0x01e84800

080032f0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032f0:	b598      	push	{r3, r4, r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80032f4:	f7ff ff90 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 80032f8:	4604      	mov	r4, r0
 80032fa:	f7ff fa27 	bl	800274c <LL_RCC_GetAHBPrescaler>
 80032fe:	4603      	mov	r3, r0
 8003300:	091b      	lsrs	r3, r3, #4
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	4a03      	ldr	r2, [pc, #12]	; (8003314 <HAL_RCC_GetHCLKFreq+0x24>)
 8003308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800330c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003310:	4618      	mov	r0, r3
 8003312:	bd98      	pop	{r3, r4, r7, pc}
 8003314:	08008354 	.word	0x08008354

08003318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003318:	b598      	push	{r3, r4, r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800331c:	f7ff ffe8 	bl	80032f0 <HAL_RCC_GetHCLKFreq>
 8003320:	4604      	mov	r4, r0
 8003322:	f7ff fa2d 	bl	8002780 <LL_RCC_GetAPB1Prescaler>
 8003326:	4603      	mov	r3, r0
 8003328:	0a1b      	lsrs	r3, r3, #8
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	4a04      	ldr	r2, [pc, #16]	; (8003340 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003334:	f003 031f 	and.w	r3, r3, #31
 8003338:	fa24 f303 	lsr.w	r3, r4, r3
}
 800333c:	4618      	mov	r0, r3
 800333e:	bd98      	pop	{r3, r4, r7, pc}
 8003340:	08008394 	.word	0x08008394

08003344 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003344:	b598      	push	{r3, r4, r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003348:	f7ff ffd2 	bl	80032f0 <HAL_RCC_GetHCLKFreq>
 800334c:	4604      	mov	r4, r0
 800334e:	f7ff fa23 	bl	8002798 <LL_RCC_GetAPB2Prescaler>
 8003352:	4603      	mov	r3, r0
 8003354:	0adb      	lsrs	r3, r3, #11
 8003356:	f003 0307 	and.w	r3, r3, #7
 800335a:	4a04      	ldr	r2, [pc, #16]	; (800336c <HAL_RCC_GetPCLK2Freq+0x28>)
 800335c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003360:	f003 031f 	and.w	r3, r3, #31
 8003364:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003368:	4618      	mov	r0, r3
 800336a:	bd98      	pop	{r3, r4, r7, pc}
 800336c:	08008394 	.word	0x08008394

08003370 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2bb0      	cmp	r3, #176	; 0xb0
 800337c:	d903      	bls.n	8003386 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800337e:	4b14      	ldr	r3, [pc, #80]	; (80033d0 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8003380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	e007      	b.n	8003396 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	091b      	lsrs	r3, r3, #4
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	4a10      	ldr	r2, [pc, #64]	; (80033d0 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8003390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003394:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003396:	f7ff f9e5 	bl	8002764 <LL_RCC_GetAHB4Prescaler>
 800339a:	4603      	mov	r3, r0
 800339c:	091b      	lsrs	r3, r3, #4
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	4a0c      	ldr	r2, [pc, #48]	; (80033d4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80033a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ae:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	4a09      	ldr	r2, [pc, #36]	; (80033d8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80033b4:	fba2 2303 	umull	r2, r3, r2, r3
 80033b8:	0c9b      	lsrs	r3, r3, #18
 80033ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 f80c 	bl	80033dc <RCC_SetFlashLatency>
 80033c4:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	080083b4 	.word	0x080083b4
 80033d4:	08008354 	.word	0x08008354
 80033d8:	431bde83 	.word	0x431bde83

080033dc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80033dc:	b590      	push	{r4, r7, lr}
 80033de:	b08f      	sub	sp, #60	; 0x3c
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80033e6:	4b24      	ldr	r3, [pc, #144]	; (8003478 <RCC_SetFlashLatency+0x9c>)
 80033e8:	f107 041c 	add.w	r4, r7, #28
 80033ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80033f2:	4b22      	ldr	r3, [pc, #136]	; (800347c <RCC_SetFlashLatency+0xa0>)
 80033f4:	f107 040c 	add.w	r4, r7, #12
 80033f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80033fe:	2300      	movs	r3, #0
 8003400:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003402:	2300      	movs	r3, #0
 8003404:	633b      	str	r3, [r7, #48]	; 0x30
 8003406:	e013      	b.n	8003430 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	3338      	adds	r3, #56	; 0x38
 800340e:	443b      	add	r3, r7
 8003410:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	429a      	cmp	r2, r3
 8003418:	d807      	bhi.n	800342a <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 800341a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	3338      	adds	r3, #56	; 0x38
 8003420:	443b      	add	r3, r7
 8003422:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003426:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8003428:	e005      	b.n	8003436 <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800342a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342c:	3301      	adds	r3, #1
 800342e:	633b      	str	r3, [r7, #48]	; 0x30
 8003430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003432:	2b03      	cmp	r3, #3
 8003434:	d9e8      	bls.n	8003408 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003436:	4b12      	ldr	r3, [pc, #72]	; (8003480 <RCC_SetFlashLatency+0xa4>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f023 0207 	bic.w	r2, r3, #7
 800343e:	4910      	ldr	r1, [pc, #64]	; (8003480 <RCC_SetFlashLatency+0xa4>)
 8003440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003442:	4313      	orrs	r3, r2
 8003444:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003446:	f7fe f959 	bl	80016fc <HAL_GetTick>
 800344a:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800344c:	e008      	b.n	8003460 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800344e:	f7fe f955 	bl	80016fc <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d901      	bls.n	8003460 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e007      	b.n	8003470 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003460:	4b07      	ldr	r3, [pc, #28]	; (8003480 <RCC_SetFlashLatency+0xa4>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0307 	and.w	r3, r3, #7
 8003468:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800346a:	429a      	cmp	r2, r3
 800346c:	d1ef      	bne.n	800344e <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	373c      	adds	r7, #60	; 0x3c
 8003474:	46bd      	mov	sp, r7
 8003476:	bd90      	pop	{r4, r7, pc}
 8003478:	08008188 	.word	0x08008188
 800347c:	08008198 	.word	0x08008198
 8003480:	58004000 	.word	0x58004000

08003484 <LL_RCC_LSE_IsEnabled>:
{
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800348c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b01      	cmp	r3, #1
 8003496:	d101      	bne.n	800349c <LL_RCC_LSE_IsEnabled+0x18>
 8003498:	2301      	movs	r3, #1
 800349a:	e000      	b.n	800349e <LL_RCC_LSE_IsEnabled+0x1a>
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <LL_RCC_LSE_IsReady>:
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80034ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d101      	bne.n	80034c0 <LL_RCC_LSE_IsReady+0x18>
 80034bc:	2301      	movs	r3, #1
 80034be:	e000      	b.n	80034c2 <LL_RCC_LSE_IsReady+0x1a>
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <LL_RCC_SetRFWKPClockSource>:
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80034d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <LL_RCC_SetSMPSClockSource>:
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	f023 0203 	bic.w	r2, r3, #3
 800350a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4313      	orrs	r3, r2
 8003512:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <LL_RCC_SetSMPSPrescaler>:
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003532:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4313      	orrs	r3, r2
 800353a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <LL_RCC_SetUSARTClockSource>:
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003558:	f023 0203 	bic.w	r2, r3, #3
 800355c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4313      	orrs	r3, r2
 8003564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <LL_RCC_SetLPUARTClockSource>:
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800357c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003584:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003588:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4313      	orrs	r3, r2
 8003590:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <LL_RCC_SetI2CClockSource>:
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80035a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	091b      	lsrs	r3, r3, #4
 80035b4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80035b8:	43db      	mvns	r3, r3
 80035ba:	401a      	ands	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	011b      	lsls	r3, r3, #4
 80035c0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80035c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035c8:	4313      	orrs	r3, r2
 80035ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80035ce:	bf00      	nop
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr

080035da <LL_RCC_SetLPTIMClockSource>:
{
 80035da:	b480      	push	{r7}
 80035dc:	b083      	sub	sp, #12
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80035e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	0c1b      	lsrs	r3, r3, #16
 80035ee:	041b      	lsls	r3, r3, #16
 80035f0:	43db      	mvns	r3, r3
 80035f2:	401a      	ands	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	041b      	lsls	r3, r3, #16
 80035f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035fc:	4313      	orrs	r3, r2
 80035fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <LL_RCC_SetRNGClockSource>:
{
 800360e:	b480      	push	{r7}
 8003610:	b083      	sub	sp, #12
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800361a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003622:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4313      	orrs	r3, r2
 800362a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800362e:	bf00      	nop
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <LL_RCC_SetCLK48ClockSource>:
{
 800363a:	b480      	push	{r7}
 800363c:	b083      	sub	sp, #12
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800364e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4313      	orrs	r3, r2
 8003656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <LL_RCC_SetADCClockSource>:
{
 8003666:	b480      	push	{r7}
 8003668:	b083      	sub	sp, #12
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800366e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003676:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800367a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4313      	orrs	r3, r2
 8003682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003686:	bf00      	nop
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <LL_RCC_SetRTCClockSource>:
{
 8003692:	b480      	push	{r7}
 8003694:	b083      	sub	sp, #12
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800369a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800369e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80036b2:	bf00      	nop
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <LL_RCC_GetRTCClockSource>:
{
 80036be:	b480      	push	{r7}
 80036c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80036c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <LL_RCC_ForceBackupDomainReset>:
{
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80036dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80036f0:	bf00      	nop
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <LL_RCC_ReleaseBackupDomainReset>:
{
 80036fa:	b480      	push	{r7}
 80036fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80036fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003706:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800370a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800370e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003712:	bf00      	nop
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b088      	sub	sp, #32
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003724:	2300      	movs	r3, #0
 8003726:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003728:	2300      	movs	r3, #0
 800372a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003734:	2b00      	cmp	r3, #0
 8003736:	d046      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003738:	f7ff ffc1 	bl	80036be <LL_RCC_GetRTCClockSource>
 800373c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	429a      	cmp	r2, r3
 8003746:	d03c      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003748:	f7fe fcfa 	bl	8002140 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d105      	bne.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	4618      	mov	r0, r3
 8003758:	f7ff ff9b 	bl	8003692 <LL_RCC_SetRTCClockSource>
 800375c:	e02e      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800375e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003766:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003768:	f7ff ffb6 	bl	80036d8 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800376c:	f7ff ffc5 	bl	80036fa <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	4313      	orrs	r3, r2
 800377c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800377e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003788:	f7ff fe7c 	bl	8003484 <LL_RCC_LSE_IsEnabled>
 800378c:	4603      	mov	r3, r0
 800378e:	2b01      	cmp	r3, #1
 8003790:	d114      	bne.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003792:	f7fd ffb3 	bl	80016fc <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003798:	e00b      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800379a:	f7fd ffaf 	bl	80016fc <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d902      	bls.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	77fb      	strb	r3, [r7, #31]
              break;
 80037b0:	e004      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 80037b2:	f7ff fe79 	bl	80034a8 <LL_RCC_LSE_IsReady>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d1ee      	bne.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80037bc:	7ffb      	ldrb	r3, [r7, #31]
 80037be:	77bb      	strb	r3, [r7, #30]
 80037c0:	e001      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c2:	7ffb      	ldrb	r3, [r7, #31]
 80037c4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d004      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7ff feb6 	bl	8003548 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d004      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7ff fec1 	bl	8003574 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0310 	and.w	r3, r3, #16
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d004      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	4618      	mov	r0, r3
 8003804:	f7ff fee9 	bl	80035da <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0320 	and.w	r3, r3, #32
 8003810:	2b00      	cmp	r3, #0
 8003812:	d004      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	4618      	mov	r0, r3
 800381a:	f7ff fede 	bl	80035da <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0304 	and.w	r3, r3, #4
 8003826:	2b00      	cmp	r3, #0
 8003828:	d004      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	4618      	mov	r0, r3
 8003830:	f7ff feb6 	bl	80035a0 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800383c:	2b00      	cmp	r3, #0
 800383e:	d02b      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003848:	d008      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x140>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003852:	d003      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x140>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d105      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	4618      	mov	r0, r3
 8003862:	f7ff fed4 	bl	800360e <LL_RCC_SetRNGClockSource>
 8003866:	e00a      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x162>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	2000      	movs	r0, #0
 8003874:	f7ff fecb 	bl	800360e <LL_RCC_SetRNGClockSource>
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f7ff fede 	bl	800363a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003886:	d107      	bne.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003892:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003896:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d011      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	69db      	ldr	r3, [r3, #28]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff fedc 	bl	8003666 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038b6:	d107      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80038b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c6:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d004      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	4618      	mov	r0, r3
 80038da:	f7ff fdf7 	bl	80034cc <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d009      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7ff fe16 	bl	8003520 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7ff fdfd 	bl	80034f8 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80038fe:	7fbb      	ldrb	r3, [r7, #30]
}
 8003900:	4618      	mov	r0, r3
 8003902:	3720      	adds	r7, #32
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e090      	b.n	8003a3c <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d106      	bne.n	8003934 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7fd fc8c 	bl	800124c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2202      	movs	r2, #2
 8003938:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	22ca      	movs	r2, #202	; 0xca
 8003942:	625a      	str	r2, [r3, #36]	; 0x24
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2253      	movs	r2, #83	; 0x53
 800394a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f89f 	bl	8003a90 <RTC_EnterInitMode>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d009      	beq.n	800396c <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	22ff      	movs	r2, #255	; 0xff
 800395e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2204      	movs	r2, #4
 8003964:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e067      	b.n	8003a3c <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	6812      	ldr	r2, [r2, #0]
 8003976:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800397a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800397e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6899      	ldr	r1, [r3, #8]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	431a      	orrs	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	68d2      	ldr	r2, [r2, #12]
 80039a6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6919      	ldr	r1, [r3, #16]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	041a      	lsls	r2, r3, #16
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68da      	ldr	r2, [r3, #12]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039ca:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0202 	bic.w	r2, r2, #2
 80039da:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69da      	ldr	r2, [r3, #28]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	431a      	orrs	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 0320 	and.w	r3, r3, #32
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d113      	bne.n	8003a2a <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f81e 	bl	8003a44 <HAL_RTC_WaitForSynchro>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00d      	beq.n	8003a2a <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	22ff      	movs	r2, #255	; 0xff
 8003a14:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2204      	movs	r2, #4
 8003a1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e008      	b.n	8003a3c <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	22ff      	movs	r2, #255	; 0xff
 8003a30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
  }
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68da      	ldr	r2, [r3, #12]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a5a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003a5c:	f7fd fe4e 	bl	80016fc <HAL_GetTick>
 8003a60:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003a62:	e009      	b.n	8003a78 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003a64:	f7fd fe4a 	bl	80016fc <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a72:	d901      	bls.n	8003a78 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e007      	b.n	8003a88 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f003 0320 	and.w	r3, r3, #32
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0ee      	beq.n	8003a64 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d119      	bne.n	8003ada <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8003aae:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003ab0:	f7fd fe24 	bl	80016fc <HAL_GetTick>
 8003ab4:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003ab6:	e009      	b.n	8003acc <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003ab8:	f7fd fe20 	bl	80016fc <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ac6:	d901      	bls.n	8003acc <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e007      	b.n	8003adc <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d0ee      	beq.n	8003ab8 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d101      	bne.n	8003afe <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8003afa:	2302      	movs	r3, #2
 8003afc:	e0a8      	b.n	8003c50 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2202      	movs	r2, #2
 8003b0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	22ca      	movs	r2, #202	; 0xca
 8003b14:	625a      	str	r2, [r3, #36]	; 0x24
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2253      	movs	r2, #83	; 0x53
 8003b1c:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d020      	beq.n	8003b6e <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8003b2c:	f7fd fde6 	bl	80016fc <HAL_GetTick>
 8003b30:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8003b32:	e015      	b.n	8003b60 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003b34:	f7fd fde2 	bl	80016fc <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b42:	d90d      	bls.n	8003b60 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	22ff      	movs	r2, #255	; 0xff
 8003b4a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2203      	movs	r2, #3
 8003b50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e077      	b.n	8003c50 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	f003 0304 	and.w	r3, r3, #4
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1e2      	bne.n	8003b34 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b7c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003b8e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003b90:	f7fd fdb4 	bl	80016fc <HAL_GetTick>
 8003b94:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003b96:	e015      	b.n	8003bc4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003b98:	f7fd fdb0 	bl	80016fc <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ba6:	d90d      	bls.n	8003bc4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	22ff      	movs	r2, #255	; 0xff
 8003bae:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2203      	movs	r2, #3
 8003bb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e045      	b.n	8003c50 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f003 0304 	and.w	r3, r3, #4
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0e2      	beq.n	8003b98 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0207 	bic.w	r2, r2, #7
 8003be8:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	6899      	ldr	r1, [r3, #8]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003bfa:	4b17      	ldr	r3, [pc, #92]	; (8003c58 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003bfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c00:	4a15      	ldr	r2, [pc, #84]	; (8003c58 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003c02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c06:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8003c0a:	4b13      	ldr	r3, [pc, #76]	; (8003c58 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a12      	ldr	r2, [pc, #72]	; (8003c58 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003c10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c14:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c24:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689a      	ldr	r2, [r3, #8]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c34:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	22ff      	movs	r2, #255	; 0xff
 8003c3c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3718      	adds	r7, #24
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	58000800 	.word	0x58000800

08003c5c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d101      	bne.n	8003c72 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8003c6e:	2302      	movs	r3, #2
 8003c70:	e04d      	b.n	8003d0e <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	22ca      	movs	r2, #202	; 0xca
 8003c88:	625a      	str	r2, [r3, #36]	; 0x24
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2253      	movs	r2, #83	; 0x53
 8003c90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ca0:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003cb0:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8003cb2:	f7fd fd23 	bl	80016fc <HAL_GetTick>
 8003cb6:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003cb8:	e015      	b.n	8003ce6 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003cba:	f7fd fd1f 	bl	80016fc <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cc8:	d90d      	bls.n	8003ce6 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	22ff      	movs	r2, #255	; 0xff
 8003cd0:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2203      	movs	r2, #3
 8003cd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e013      	b.n	8003d0e <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	f003 0304 	and.w	r3, r3, #4
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d0e2      	beq.n	8003cba <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	22ff      	movs	r2, #255	; 0xff
 8003cfa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
	...

08003d18 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00b      	beq.n	8003d46 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7fd f9c6 	bl	80010c0 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	b2da      	uxtb	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003d44:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8003d46:	4b06      	ldr	r3, [pc, #24]	; (8003d60 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8003d48:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003d4c:	60da      	str	r2, [r3, #12]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8003d56:	bf00      	nop
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	58000800 	.word	0x58000800

08003d64 <LL_RCC_GetUSARTClockSource>:
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d70:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4013      	ands	r3, r2
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <LL_RCC_GetLPUARTClockSource>:
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d90:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4013      	ands	r3, r2
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e042      	b.n	8003e3c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d106      	bne.n	8003dce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f7fd fa73 	bl	80012b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2224      	movs	r2, #36	; 0x24
 8003dd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 0201 	bic.w	r2, r2, #1
 8003de4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f8c2 	bl	8003f70 <UART_SetConfig>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d101      	bne.n	8003df6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e022      	b.n	8003e3c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d002      	beq.n	8003e04 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 fadc 	bl	80043bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689a      	ldr	r2, [r3, #8]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f042 0201 	orr.w	r2, r2, #1
 8003e32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 fb63 	bl	8004500 <UART_CheckIdleState>
 8003e3a:	4603      	mov	r3, r0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3708      	adds	r7, #8
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b08a      	sub	sp, #40	; 0x28
 8003e48:	af02      	add	r7, sp, #8
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	603b      	str	r3, [r7, #0]
 8003e50:	4613      	mov	r3, r2
 8003e52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e5a:	2b20      	cmp	r3, #32
 8003e5c:	f040 8083 	bne.w	8003f66 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d002      	beq.n	8003e6c <HAL_UART_Transmit+0x28>
 8003e66:	88fb      	ldrh	r3, [r7, #6]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d101      	bne.n	8003e70 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e07b      	b.n	8003f68 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d101      	bne.n	8003e7e <HAL_UART_Transmit+0x3a>
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	e074      	b.n	8003f68 <HAL_UART_Transmit+0x124>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2221      	movs	r2, #33	; 0x21
 8003e92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e96:	f7fd fc31 	bl	80016fc <HAL_GetTick>
 8003e9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	88fa      	ldrh	r2, [r7, #6]
 8003ea0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	88fa      	ldrh	r2, [r7, #6]
 8003ea8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eb4:	d108      	bne.n	8003ec8 <HAL_UART_Transmit+0x84>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d104      	bne.n	8003ec8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	61bb      	str	r3, [r7, #24]
 8003ec6:	e003      	b.n	8003ed0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003ed8:	e02c      	b.n	8003f34 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	2180      	movs	r1, #128	; 0x80
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f000 fb56 	bl	8004596 <UART_WaitOnFlagUntilTimeout>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d001      	beq.n	8003ef4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e039      	b.n	8003f68 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10b      	bne.n	8003f12 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	881b      	ldrh	r3, [r3, #0]
 8003efe:	461a      	mov	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f08:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	3302      	adds	r3, #2
 8003f0e:	61bb      	str	r3, [r7, #24]
 8003f10:	e007      	b.n	8003f22 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	781a      	ldrb	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	3301      	adds	r3, #1
 8003f20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1cc      	bne.n	8003eda <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	2200      	movs	r2, #0
 8003f48:	2140      	movs	r1, #64	; 0x40
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 fb23 	bl	8004596 <UART_WaitOnFlagUntilTimeout>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e006      	b.n	8003f68 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2220      	movs	r2, #32
 8003f5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003f62:	2300      	movs	r3, #0
 8003f64:	e000      	b.n	8003f68 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003f66:	2302      	movs	r3, #2
  }
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3720      	adds	r7, #32
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f74:	b08c      	sub	sp, #48	; 0x30
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	689a      	ldr	r2, [r3, #8]
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	69db      	ldr	r3, [r3, #28]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	4baf      	ldr	r3, [pc, #700]	; (800425c <UART_SetConfig+0x2ec>)
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	6812      	ldr	r2, [r2, #0]
 8003fa6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fa8:	430b      	orrs	r3, r1
 8003faa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	68da      	ldr	r2, [r3, #12]
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4aa4      	ldr	r2, [pc, #656]	; (8004260 <UART_SetConfig+0x2f0>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d004      	beq.n	8003fdc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003fe6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	6812      	ldr	r2, [r2, #0]
 8003fee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ff0:	430b      	orrs	r3, r1
 8003ff2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffa:	f023 010f 	bic.w	r1, r3, #15
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a95      	ldr	r2, [pc, #596]	; (8004264 <UART_SetConfig+0x2f4>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d125      	bne.n	8004060 <UART_SetConfig+0xf0>
 8004014:	2003      	movs	r0, #3
 8004016:	f7ff fea5 	bl	8003d64 <LL_RCC_GetUSARTClockSource>
 800401a:	4603      	mov	r3, r0
 800401c:	2b03      	cmp	r3, #3
 800401e:	d81b      	bhi.n	8004058 <UART_SetConfig+0xe8>
 8004020:	a201      	add	r2, pc, #4	; (adr r2, 8004028 <UART_SetConfig+0xb8>)
 8004022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004026:	bf00      	nop
 8004028:	08004039 	.word	0x08004039
 800402c:	08004049 	.word	0x08004049
 8004030:	08004041 	.word	0x08004041
 8004034:	08004051 	.word	0x08004051
 8004038:	2301      	movs	r3, #1
 800403a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800403e:	e042      	b.n	80040c6 <UART_SetConfig+0x156>
 8004040:	2302      	movs	r3, #2
 8004042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004046:	e03e      	b.n	80040c6 <UART_SetConfig+0x156>
 8004048:	2304      	movs	r3, #4
 800404a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800404e:	e03a      	b.n	80040c6 <UART_SetConfig+0x156>
 8004050:	2308      	movs	r3, #8
 8004052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004056:	e036      	b.n	80040c6 <UART_SetConfig+0x156>
 8004058:	2310      	movs	r3, #16
 800405a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800405e:	e032      	b.n	80040c6 <UART_SetConfig+0x156>
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a7e      	ldr	r2, [pc, #504]	; (8004260 <UART_SetConfig+0x2f0>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d12a      	bne.n	80040c0 <UART_SetConfig+0x150>
 800406a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800406e:	f7ff fe89 	bl	8003d84 <LL_RCC_GetLPUARTClockSource>
 8004072:	4603      	mov	r3, r0
 8004074:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004078:	d01a      	beq.n	80040b0 <UART_SetConfig+0x140>
 800407a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800407e:	d81b      	bhi.n	80040b8 <UART_SetConfig+0x148>
 8004080:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004084:	d00c      	beq.n	80040a0 <UART_SetConfig+0x130>
 8004086:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800408a:	d815      	bhi.n	80040b8 <UART_SetConfig+0x148>
 800408c:	2b00      	cmp	r3, #0
 800408e:	d003      	beq.n	8004098 <UART_SetConfig+0x128>
 8004090:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004094:	d008      	beq.n	80040a8 <UART_SetConfig+0x138>
 8004096:	e00f      	b.n	80040b8 <UART_SetConfig+0x148>
 8004098:	2300      	movs	r3, #0
 800409a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800409e:	e012      	b.n	80040c6 <UART_SetConfig+0x156>
 80040a0:	2302      	movs	r3, #2
 80040a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040a6:	e00e      	b.n	80040c6 <UART_SetConfig+0x156>
 80040a8:	2304      	movs	r3, #4
 80040aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040ae:	e00a      	b.n	80040c6 <UART_SetConfig+0x156>
 80040b0:	2308      	movs	r3, #8
 80040b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040b6:	e006      	b.n	80040c6 <UART_SetConfig+0x156>
 80040b8:	2310      	movs	r3, #16
 80040ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040be:	e002      	b.n	80040c6 <UART_SetConfig+0x156>
 80040c0:	2310      	movs	r3, #16
 80040c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a65      	ldr	r2, [pc, #404]	; (8004260 <UART_SetConfig+0x2f0>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	f040 8097 	bne.w	8004200 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80040d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80040d6:	2b08      	cmp	r3, #8
 80040d8:	d823      	bhi.n	8004122 <UART_SetConfig+0x1b2>
 80040da:	a201      	add	r2, pc, #4	; (adr r2, 80040e0 <UART_SetConfig+0x170>)
 80040dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e0:	08004105 	.word	0x08004105
 80040e4:	08004123 	.word	0x08004123
 80040e8:	0800410d 	.word	0x0800410d
 80040ec:	08004123 	.word	0x08004123
 80040f0:	08004113 	.word	0x08004113
 80040f4:	08004123 	.word	0x08004123
 80040f8:	08004123 	.word	0x08004123
 80040fc:	08004123 	.word	0x08004123
 8004100:	0800411b 	.word	0x0800411b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004104:	f7ff f908 	bl	8003318 <HAL_RCC_GetPCLK1Freq>
 8004108:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800410a:	e010      	b.n	800412e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800410c:	4b56      	ldr	r3, [pc, #344]	; (8004268 <UART_SetConfig+0x2f8>)
 800410e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004110:	e00d      	b.n	800412e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004112:	f7ff f881 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 8004116:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004118:	e009      	b.n	800412e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800411a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800411e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004120:	e005      	b.n	800412e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8004122:	2300      	movs	r3, #0
 8004124:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800412c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 812a 	beq.w	800438a <UART_SetConfig+0x41a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413a:	4a4c      	ldr	r2, [pc, #304]	; (800426c <UART_SetConfig+0x2fc>)
 800413c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004140:	461a      	mov	r2, r3
 8004142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004144:	fbb3 f3f2 	udiv	r3, r3, r2
 8004148:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	685a      	ldr	r2, [r3, #4]
 800414e:	4613      	mov	r3, r2
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	4413      	add	r3, r2
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	429a      	cmp	r2, r3
 8004158:	d305      	bcc.n	8004166 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	429a      	cmp	r2, r3
 8004164:	d903      	bls.n	800416e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800416c:	e10d      	b.n	800438a <UART_SetConfig+0x41a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004170:	2200      	movs	r2, #0
 8004172:	60bb      	str	r3, [r7, #8]
 8004174:	60fa      	str	r2, [r7, #12]
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	4a3c      	ldr	r2, [pc, #240]	; (800426c <UART_SetConfig+0x2fc>)
 800417c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004180:	b29b      	uxth	r3, r3
 8004182:	2200      	movs	r2, #0
 8004184:	603b      	str	r3, [r7, #0]
 8004186:	607a      	str	r2, [r7, #4]
 8004188:	e9d7 2300 	ldrd	r2, r3, [r7]
 800418c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004190:	f7fc f84e 	bl	8000230 <__aeabi_uldivmod>
 8004194:	4602      	mov	r2, r0
 8004196:	460b      	mov	r3, r1
 8004198:	4610      	mov	r0, r2
 800419a:	4619      	mov	r1, r3
 800419c:	f04f 0200 	mov.w	r2, #0
 80041a0:	f04f 0300 	mov.w	r3, #0
 80041a4:	020b      	lsls	r3, r1, #8
 80041a6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80041aa:	0202      	lsls	r2, r0, #8
 80041ac:	6979      	ldr	r1, [r7, #20]
 80041ae:	6849      	ldr	r1, [r1, #4]
 80041b0:	0849      	lsrs	r1, r1, #1
 80041b2:	2000      	movs	r0, #0
 80041b4:	460c      	mov	r4, r1
 80041b6:	4605      	mov	r5, r0
 80041b8:	eb12 0804 	adds.w	r8, r2, r4
 80041bc:	eb43 0905 	adc.w	r9, r3, r5
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	469a      	mov	sl, r3
 80041c8:	4693      	mov	fp, r2
 80041ca:	4652      	mov	r2, sl
 80041cc:	465b      	mov	r3, fp
 80041ce:	4640      	mov	r0, r8
 80041d0:	4649      	mov	r1, r9
 80041d2:	f7fc f82d 	bl	8000230 <__aeabi_uldivmod>
 80041d6:	4602      	mov	r2, r0
 80041d8:	460b      	mov	r3, r1
 80041da:	4613      	mov	r3, r2
 80041dc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80041de:	6a3b      	ldr	r3, [r7, #32]
 80041e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041e4:	d308      	bcc.n	80041f8 <UART_SetConfig+0x288>
 80041e6:	6a3b      	ldr	r3, [r7, #32]
 80041e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041ec:	d204      	bcs.n	80041f8 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	6a3a      	ldr	r2, [r7, #32]
 80041f4:	60da      	str	r2, [r3, #12]
 80041f6:	e0c8      	b.n	800438a <UART_SetConfig+0x41a>
        }
        else
        {
          ret = HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80041fe:	e0c4      	b.n	800438a <UART_SetConfig+0x41a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	69db      	ldr	r3, [r3, #28]
 8004204:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004208:	d16d      	bne.n	80042e6 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800420a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800420e:	3b01      	subs	r3, #1
 8004210:	2b07      	cmp	r3, #7
 8004212:	d82d      	bhi.n	8004270 <UART_SetConfig+0x300>
 8004214:	a201      	add	r2, pc, #4	; (adr r2, 800421c <UART_SetConfig+0x2ac>)
 8004216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421a:	bf00      	nop
 800421c:	0800423d 	.word	0x0800423d
 8004220:	08004245 	.word	0x08004245
 8004224:	08004271 	.word	0x08004271
 8004228:	0800424b 	.word	0x0800424b
 800422c:	08004271 	.word	0x08004271
 8004230:	08004271 	.word	0x08004271
 8004234:	08004271 	.word	0x08004271
 8004238:	08004253 	.word	0x08004253
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800423c:	f7ff f882 	bl	8003344 <HAL_RCC_GetPCLK2Freq>
 8004240:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004242:	e01b      	b.n	800427c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004244:	4b08      	ldr	r3, [pc, #32]	; (8004268 <UART_SetConfig+0x2f8>)
 8004246:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004248:	e018      	b.n	800427c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800424a:	f7fe ffe5 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 800424e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004250:	e014      	b.n	800427c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004256:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004258:	e010      	b.n	800427c <UART_SetConfig+0x30c>
 800425a:	bf00      	nop
 800425c:	cfff69f3 	.word	0xcfff69f3
 8004260:	40008000 	.word	0x40008000
 8004264:	40013800 	.word	0x40013800
 8004268:	00f42400 	.word	0x00f42400
 800426c:	080083f4 	.word	0x080083f4
      default:
        pclk = 0U;
 8004270:	2300      	movs	r3, #0
 8004272:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800427a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800427c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427e:	2b00      	cmp	r3, #0
 8004280:	f000 8083 	beq.w	800438a <UART_SetConfig+0x41a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004288:	4a4a      	ldr	r2, [pc, #296]	; (80043b4 <UART_SetConfig+0x444>)
 800428a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800428e:	461a      	mov	r2, r3
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	fbb3 f3f2 	udiv	r3, r3, r2
 8004296:	005a      	lsls	r2, r3, #1
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	085b      	lsrs	r3, r3, #1
 800429e:	441a      	add	r2, r3
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	2b0f      	cmp	r3, #15
 80042ae:	d916      	bls.n	80042de <UART_SetConfig+0x36e>
 80042b0:	6a3b      	ldr	r3, [r7, #32]
 80042b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042b6:	d212      	bcs.n	80042de <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	f023 030f 	bic.w	r3, r3, #15
 80042c0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042c2:	6a3b      	ldr	r3, [r7, #32]
 80042c4:	085b      	lsrs	r3, r3, #1
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	8bfb      	ldrh	r3, [r7, #30]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	8bfa      	ldrh	r2, [r7, #30]
 80042da:	60da      	str	r2, [r3, #12]
 80042dc:	e055      	b.n	800438a <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80042e4:	e051      	b.n	800438a <UART_SetConfig+0x41a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80042e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80042ea:	3b01      	subs	r3, #1
 80042ec:	2b07      	cmp	r3, #7
 80042ee:	d822      	bhi.n	8004336 <UART_SetConfig+0x3c6>
 80042f0:	a201      	add	r2, pc, #4	; (adr r2, 80042f8 <UART_SetConfig+0x388>)
 80042f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f6:	bf00      	nop
 80042f8:	08004319 	.word	0x08004319
 80042fc:	08004321 	.word	0x08004321
 8004300:	08004337 	.word	0x08004337
 8004304:	08004327 	.word	0x08004327
 8004308:	08004337 	.word	0x08004337
 800430c:	08004337 	.word	0x08004337
 8004310:	08004337 	.word	0x08004337
 8004314:	0800432f 	.word	0x0800432f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004318:	f7ff f814 	bl	8003344 <HAL_RCC_GetPCLK2Freq>
 800431c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800431e:	e010      	b.n	8004342 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004320:	4b25      	ldr	r3, [pc, #148]	; (80043b8 <UART_SetConfig+0x448>)
 8004322:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004324:	e00d      	b.n	8004342 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004326:	f7fe ff77 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 800432a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800432c:	e009      	b.n	8004342 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800432e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004332:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004334:	e005      	b.n	8004342 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8004336:	2300      	movs	r3, #0
 8004338:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004340:	bf00      	nop
    }

    if (pclk != 0U)
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	2b00      	cmp	r3, #0
 8004346:	d020      	beq.n	800438a <UART_SetConfig+0x41a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434c:	4a19      	ldr	r2, [pc, #100]	; (80043b4 <UART_SetConfig+0x444>)
 800434e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004352:	461a      	mov	r2, r3
 8004354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004356:	fbb3 f2f2 	udiv	r2, r3, r2
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	085b      	lsrs	r3, r3, #1
 8004360:	441a      	add	r2, r3
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	fbb2 f3f3 	udiv	r3, r2, r3
 800436a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800436c:	6a3b      	ldr	r3, [r7, #32]
 800436e:	2b0f      	cmp	r3, #15
 8004370:	d908      	bls.n	8004384 <UART_SetConfig+0x414>
 8004372:	6a3b      	ldr	r3, [r7, #32]
 8004374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004378:	d204      	bcs.n	8004384 <UART_SetConfig+0x414>
      {
        huart->Instance->BRR = usartdiv;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6a3a      	ldr	r2, [r7, #32]
 8004380:	60da      	str	r2, [r3, #12]
 8004382:	e002      	b.n	800438a <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2201      	movs	r2, #1
 800438e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2201      	movs	r2, #1
 8004396:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	2200      	movs	r2, #0
 800439e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	2200      	movs	r2, #0
 80043a4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80043a6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3730      	adds	r7, #48	; 0x30
 80043ae:	46bd      	mov	sp, r7
 80043b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043b4:	080083f4 	.word	0x080083f4
 80043b8:	00f42400 	.word	0x00f42400

080043bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00a      	beq.n	80043e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00a      	beq.n	8004408 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	430a      	orrs	r2, r1
 8004406:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00a      	beq.n	800442a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	430a      	orrs	r2, r1
 8004428:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442e:	f003 0308 	and.w	r3, r3, #8
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00a      	beq.n	800444c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	430a      	orrs	r2, r1
 800444a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004450:	f003 0310 	and.w	r3, r3, #16
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00a      	beq.n	800446e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004472:	f003 0320 	and.w	r3, r3, #32
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00a      	beq.n	8004490 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	430a      	orrs	r2, r1
 800448e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004498:	2b00      	cmp	r3, #0
 800449a:	d01a      	beq.n	80044d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	430a      	orrs	r2, r1
 80044b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044ba:	d10a      	bne.n	80044d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	430a      	orrs	r2, r1
 80044d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00a      	beq.n	80044f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	605a      	str	r2, [r3, #4]
  }
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af02      	add	r7, sp, #8
 8004506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004510:	f7fd f8f4 	bl	80016fc <HAL_GetTick>
 8004514:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0308 	and.w	r3, r3, #8
 8004520:	2b08      	cmp	r3, #8
 8004522:	d10e      	bne.n	8004542 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004524:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f82f 	bl	8004596 <UART_WaitOnFlagUntilTimeout>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e025      	b.n	800458e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0304 	and.w	r3, r3, #4
 800454c:	2b04      	cmp	r3, #4
 800454e:	d10e      	bne.n	800456e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004550:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004554:	9300      	str	r3, [sp, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 f819 	bl	8004596 <UART_WaitOnFlagUntilTimeout>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e00f      	b.n	800458e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2220      	movs	r2, #32
 8004572:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2220      	movs	r2, #32
 800457a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004596:	b580      	push	{r7, lr}
 8004598:	b09c      	sub	sp, #112	; 0x70
 800459a:	af00      	add	r7, sp, #0
 800459c:	60f8      	str	r0, [r7, #12]
 800459e:	60b9      	str	r1, [r7, #8]
 80045a0:	603b      	str	r3, [r7, #0]
 80045a2:	4613      	mov	r3, r2
 80045a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045a6:	e0a9      	b.n	80046fc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ae:	f000 80a5 	beq.w	80046fc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045b2:	f7fd f8a3 	bl	80016fc <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80045be:	429a      	cmp	r2, r3
 80045c0:	d302      	bcc.n	80045c8 <UART_WaitOnFlagUntilTimeout+0x32>
 80045c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d140      	bne.n	800464a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045d0:	e853 3f00 	ldrex	r3, [r3]
 80045d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80045d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045dc:	667b      	str	r3, [r7, #100]	; 0x64
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	461a      	mov	r2, r3
 80045e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045e8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80045ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80045ee:	e841 2300 	strex	r3, r2, [r1]
 80045f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80045f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1e6      	bne.n	80045c8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	3308      	adds	r3, #8
 8004600:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004604:	e853 3f00 	ldrex	r3, [r3]
 8004608:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800460a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800460c:	f023 0301 	bic.w	r3, r3, #1
 8004610:	663b      	str	r3, [r7, #96]	; 0x60
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	3308      	adds	r3, #8
 8004618:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800461a:	64ba      	str	r2, [r7, #72]	; 0x48
 800461c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004620:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004622:	e841 2300 	strex	r3, r2, [r1]
 8004626:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004628:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1e5      	bne.n	80045fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2220      	movs	r2, #32
 8004632:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2220      	movs	r2, #32
 800463a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e069      	b.n	800471e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0304 	and.w	r3, r3, #4
 8004654:	2b00      	cmp	r3, #0
 8004656:	d051      	beq.n	80046fc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004662:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004666:	d149      	bne.n	80046fc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004670:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800467a:	e853 3f00 	ldrex	r3, [r3]
 800467e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004686:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	461a      	mov	r2, r3
 800468e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004690:	637b      	str	r3, [r7, #52]	; 0x34
 8004692:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004694:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004696:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004698:	e841 2300 	strex	r3, r2, [r1]
 800469c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800469e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1e6      	bne.n	8004672 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	3308      	adds	r3, #8
 80046aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	e853 3f00 	ldrex	r3, [r3]
 80046b2:	613b      	str	r3, [r7, #16]
   return(result);
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	f023 0301 	bic.w	r3, r3, #1
 80046ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	3308      	adds	r3, #8
 80046c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80046c4:	623a      	str	r2, [r7, #32]
 80046c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c8:	69f9      	ldr	r1, [r7, #28]
 80046ca:	6a3a      	ldr	r2, [r7, #32]
 80046cc:	e841 2300 	strex	r3, r2, [r1]
 80046d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1e5      	bne.n	80046a4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2220      	movs	r2, #32
 80046dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2220      	movs	r2, #32
 80046e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2220      	movs	r2, #32
 80046ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e010      	b.n	800471e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	69da      	ldr	r2, [r3, #28]
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	4013      	ands	r3, r2
 8004706:	68ba      	ldr	r2, [r7, #8]
 8004708:	429a      	cmp	r2, r3
 800470a:	bf0c      	ite	eq
 800470c:	2301      	moveq	r3, #1
 800470e:	2300      	movne	r3, #0
 8004710:	b2db      	uxtb	r3, r3
 8004712:	461a      	mov	r2, r3
 8004714:	79fb      	ldrb	r3, [r7, #7]
 8004716:	429a      	cmp	r2, r3
 8004718:	f43f af46 	beq.w	80045a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3770      	adds	r7, #112	; 0x70
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004726:	b480      	push	{r7}
 8004728:	b085      	sub	sp, #20
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004734:	2b01      	cmp	r3, #1
 8004736:	d101      	bne.n	800473c <HAL_UARTEx_DisableFifoMode+0x16>
 8004738:	2302      	movs	r3, #2
 800473a:	e027      	b.n	800478c <HAL_UARTEx_DisableFifoMode+0x66>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2224      	movs	r2, #36	; 0x24
 8004748:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f022 0201 	bic.w	r2, r2, #1
 8004762:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800476a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2220      	movs	r2, #32
 800477e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3714      	adds	r7, #20
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d101      	bne.n	80047b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80047ac:	2302      	movs	r3, #2
 80047ae:	e02d      	b.n	800480c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2224      	movs	r2, #36	; 0x24
 80047bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 0201 	bic.w	r2, r2, #1
 80047d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 f84f 	bl	8004890 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2220      	movs	r2, #32
 80047fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004824:	2b01      	cmp	r3, #1
 8004826:	d101      	bne.n	800482c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004828:	2302      	movs	r3, #2
 800482a:	e02d      	b.n	8004888 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2224      	movs	r2, #36	; 0x24
 8004838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 0201 	bic.w	r2, r2, #1
 8004852:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	430a      	orrs	r2, r1
 8004866:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 f811 	bl	8004890 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2220      	movs	r2, #32
 800487a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800489c:	2b00      	cmp	r3, #0
 800489e:	d108      	bne.n	80048b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80048b0:	e031      	b.n	8004916 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80048b2:	2308      	movs	r3, #8
 80048b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80048b6:	2308      	movs	r3, #8
 80048b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	0e5b      	lsrs	r3, r3, #25
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	f003 0307 	and.w	r3, r3, #7
 80048c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	0f5b      	lsrs	r3, r3, #29
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	f003 0307 	and.w	r3, r3, #7
 80048d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80048da:	7bbb      	ldrb	r3, [r7, #14]
 80048dc:	7b3a      	ldrb	r2, [r7, #12]
 80048de:	4911      	ldr	r1, [pc, #68]	; (8004924 <UARTEx_SetNbDataToProcess+0x94>)
 80048e0:	5c8a      	ldrb	r2, [r1, r2]
 80048e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80048e6:	7b3a      	ldrb	r2, [r7, #12]
 80048e8:	490f      	ldr	r1, [pc, #60]	; (8004928 <UARTEx_SetNbDataToProcess+0x98>)
 80048ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80048ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80048f8:	7bfb      	ldrb	r3, [r7, #15]
 80048fa:	7b7a      	ldrb	r2, [r7, #13]
 80048fc:	4909      	ldr	r1, [pc, #36]	; (8004924 <UARTEx_SetNbDataToProcess+0x94>)
 80048fe:	5c8a      	ldrb	r2, [r1, r2]
 8004900:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004904:	7b7a      	ldrb	r2, [r7, #13]
 8004906:	4908      	ldr	r1, [pc, #32]	; (8004928 <UARTEx_SetNbDataToProcess+0x98>)
 8004908:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800490a:	fb93 f3f2 	sdiv	r3, r3, r2
 800490e:	b29a      	uxth	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004916:	bf00      	nop
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	0800840c 	.word	0x0800840c
 8004928:	08008414 	.word	0x08008414

0800492c <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 800492c:	b5b0      	push	{r4, r5, r7, lr}
 800492e:	b0ce      	sub	sp, #312	; 0x138
 8004930:	af00      	add	r7, sp, #0
 8004932:	4605      	mov	r5, r0
 8004934:	460c      	mov	r4, r1
 8004936:	4610      	mov	r0, r2
 8004938:	4619      	mov	r1, r3
 800493a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800493e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8004942:	462a      	mov	r2, r5
 8004944:	701a      	strb	r2, [r3, #0]
 8004946:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800494a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800494e:	4622      	mov	r2, r4
 8004950:	801a      	strh	r2, [r3, #0]
 8004952:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004956:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800495a:	4602      	mov	r2, r0
 800495c:	801a      	strh	r2, [r3, #0]
 800495e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004962:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8004966:	460a      	mov	r2, r1
 8004968:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800496a:	f107 0310 	add.w	r3, r7, #16
 800496e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8004972:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8004976:	3308      	adds	r3, #8
 8004978:	f107 0210 	add.w	r2, r7, #16
 800497c:	4413      	add	r3, r2
 800497e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8004982:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8004986:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800498a:	4413      	add	r3, r2
 800498c:	3309      	adds	r3, #9
 800498e:	f107 0210 	add.w	r2, r7, #16
 8004992:	4413      	add	r3, r2
 8004994:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004998:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800499c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80049a0:	2200      	movs	r2, #0
 80049a2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80049a4:	2300      	movs	r3, #0
 80049a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 80049aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80049ae:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80049b2:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80049b6:	7812      	ldrb	r2, [r2, #0]
 80049b8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80049ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80049be:	3301      	adds	r3, #1
 80049c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 80049c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80049c8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80049cc:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 80049d0:	8812      	ldrh	r2, [r2, #0]
 80049d2:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80049d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80049da:	3302      	adds	r3, #2
 80049dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 80049e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80049e4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80049e8:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 80049ec:	8812      	ldrh	r2, [r2, #0]
 80049ee:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80049f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80049f6:	3302      	adds	r3, #2
 80049f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80049fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004a00:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004a04:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8004a08:	7812      	ldrb	r2, [r2, #0]
 8004a0a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8004a0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004a10:	3301      	adds	r3, #1
 8004a12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8004a16:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004a1a:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8004a1e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8004a20:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004a24:	3301      	adds	r3, #1
 8004a26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8004a2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004a2e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8004a32:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8004a34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004a38:	3301      	adds	r3, #1
 8004a3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8004a3e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004a42:	3308      	adds	r3, #8
 8004a44:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8004a48:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f000 fc21 	bl	8005294 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8004a52:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8004a56:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8004a60:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004a64:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8004a68:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8004a6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004a6e:	3301      	adds	r3, #1
 8004a70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8004a74:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004a78:	3301      	adds	r3, #1
 8004a7a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8004a7e:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 fc06 	bl	8005294 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8004a88:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8004a8c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004a90:	4413      	add	r3, r2
 8004a92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8004a96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a9a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8004a9e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8004aa0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004aa4:	3302      	adds	r3, #2
 8004aa6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8004aaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004aae:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8004ab2:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8004ab4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ab8:	3302      	adds	r3, #2
 8004aba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004abe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004ac2:	2218      	movs	r2, #24
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 fbf4 	bl	80052b4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004acc:	233f      	movs	r3, #63	; 0x3f
 8004ace:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8004ad2:	2383      	movs	r3, #131	; 0x83
 8004ad4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004ad8:	f107 0310 	add.w	r3, r7, #16
 8004adc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004ae0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ae4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004ae8:	f107 030f 	add.w	r3, r7, #15
 8004aec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004af0:	2301      	movs	r3, #1
 8004af2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004af6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004afa:	2100      	movs	r1, #0
 8004afc:	4618      	mov	r0, r3
 8004afe:	f000 fe4f 	bl	80057a0 <hci_send_req>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	da01      	bge.n	8004b0c <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8004b08:	23ff      	movs	r3, #255	; 0xff
 8004b0a:	e004      	b.n	8004b16 <aci_gap_set_discoverable+0x1ea>
  return status;
 8004b0c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004b10:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004b14:	781b      	ldrb	r3, [r3, #0]
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bdb0      	pop	{r4, r5, r7, pc}

08004b20 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8004b20:	b590      	push	{r4, r7, lr}
 8004b22:	b0cd      	sub	sp, #308	; 0x134
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	4604      	mov	r4, r0
 8004b28:	4608      	mov	r0, r1
 8004b2a:	4611      	mov	r1, r2
 8004b2c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004b30:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8004b34:	6013      	str	r3, [r2, #0]
 8004b36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b3a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004b3e:	4622      	mov	r2, r4
 8004b40:	701a      	strb	r2, [r3, #0]
 8004b42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b46:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	701a      	strb	r2, [r3, #0]
 8004b4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b52:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8004b56:	460a      	mov	r2, r1
 8004b58:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8004b5a:	f107 0310 	add.w	r3, r7, #16
 8004b5e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8004b62:	f107 0308 	add.w	r3, r7, #8
 8004b66:	2207      	movs	r2, #7
 8004b68:	2100      	movs	r1, #0
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 fba2 	bl	80052b4 <Osal_MemSet>
  int index_input = 0;
 8004b70:	2300      	movs	r3, #0
 8004b72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8004b76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b7a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004b7e:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8004b82:	7812      	ldrb	r2, [r2, #0]
 8004b84:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004b86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8004b90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b94:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004b98:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8004b9c:	7812      	ldrb	r2, [r2, #0]
 8004b9e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004ba0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8004baa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004bb2:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8004bb6:	7812      	ldrb	r2, [r2, #0]
 8004bb8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8004bba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004bc4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004bc8:	2218      	movs	r2, #24
 8004bca:	2100      	movs	r1, #0
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f000 fb71 	bl	80052b4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004bd2:	233f      	movs	r3, #63	; 0x3f
 8004bd4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8004bd8:	238a      	movs	r3, #138	; 0x8a
 8004bda:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004bde:	f107 0310 	add.w	r3, r7, #16
 8004be2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004be6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004bea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8004bee:	f107 0308 	add.w	r3, r7, #8
 8004bf2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8004bf6:	2307      	movs	r3, #7
 8004bf8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004bfc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004c00:	2100      	movs	r1, #0
 8004c02:	4618      	mov	r0, r3
 8004c04:	f000 fdcc 	bl	80057a0 <hci_send_req>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	da01      	bge.n	8004c12 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8004c0e:	23ff      	movs	r3, #255	; 0xff
 8004c10:	e02e      	b.n	8004c70 <aci_gap_init+0x150>
  if ( resp.Status )
 8004c12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c16:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d005      	beq.n	8004c2c <aci_gap_init+0x10c>
    return resp.Status;
 8004c20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c24:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	e021      	b.n	8004c70 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8004c2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c30:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004c34:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8004c46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c4a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004c4e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004c58:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8004c5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c5e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004c62:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004c6c:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd90      	pop	{r4, r7, pc}

08004c7a <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b0cc      	sub	sp, #304	; 0x130
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	4602      	mov	r2, r0
 8004c82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c8a:	6019      	str	r1, [r3, #0]
 8004c8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c90:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004c94:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8004c96:	f107 0310 	add.w	r3, r7, #16
 8004c9a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004c9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ca2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004caa:	2300      	movs	r3, #0
 8004cac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8004cb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cb4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004cb8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8004cbc:	7812      	ldrb	r2, [r2, #0]
 8004cbe:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004cc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8004cca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cce:	1c58      	adds	r0, r3, #1
 8004cd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cd4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004cd8:	781a      	ldrb	r2, [r3, #0]
 8004cda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ce2:	6819      	ldr	r1, [r3, #0]
 8004ce4:	f000 fad6 	bl	8005294 <Osal_MemCpy>
  index_input += AdvDataLen;
 8004ce8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cec:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004cfc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d00:	2218      	movs	r2, #24
 8004d02:	2100      	movs	r1, #0
 8004d04:	4618      	mov	r0, r3
 8004d06:	f000 fad5 	bl	80052b4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004d0a:	233f      	movs	r3, #63	; 0x3f
 8004d0c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8004d10:	238e      	movs	r3, #142	; 0x8e
 8004d12:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004d16:	f107 0310 	add.w	r3, r7, #16
 8004d1a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004d1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004d22:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004d26:	f107 030f 	add.w	r3, r7, #15
 8004d2a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004d34:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d38:	2100      	movs	r1, #0
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 fd30 	bl	80057a0 <hci_send_req>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	da01      	bge.n	8004d4a <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8004d46:	23ff      	movs	r3, #255	; 0xff
 8004d48:	e004      	b.n	8004d54 <aci_gap_update_adv_data+0xda>
  return status;
 8004d4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d4e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004d52:	781b      	ldrb	r3, [r3, #0]
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <aci_gap_delete_ad_type>:

tBleStatus aci_gap_delete_ad_type( uint8_t ADType )
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b0cc      	sub	sp, #304	; 0x130
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	4602      	mov	r2, r0
 8004d66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d6a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004d6e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_delete_ad_type_cp0 *cp0 = (aci_gap_delete_ad_type_cp0*)(cmd_buffer);
 8004d70:	f107 0310 	add.w	r3, r7, #16
 8004d74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004d78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d7c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004d80:	2200      	movs	r2, #0
 8004d82:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004d84:	2300      	movs	r3, #0
 8004d86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ADType = ADType;
 8004d8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d8e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004d92:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8004d96:	7812      	ldrb	r2, [r2, #0]
 8004d98:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004d9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004d9e:	3301      	adds	r3, #1
 8004da0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004da4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004da8:	2218      	movs	r2, #24
 8004daa:	2100      	movs	r1, #0
 8004dac:	4618      	mov	r0, r3
 8004dae:	f000 fa81 	bl	80052b4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004db2:	233f      	movs	r3, #63	; 0x3f
 8004db4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08f;
 8004db8:	238f      	movs	r3, #143	; 0x8f
 8004dba:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004dbe:	f107 0310 	add.w	r3, r7, #16
 8004dc2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004dc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004dca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004dce:	f107 030f 	add.w	r3, r7, #15
 8004dd2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004ddc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004de0:	2100      	movs	r1, #0
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 fcdc 	bl	80057a0 <hci_send_req>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	da01      	bge.n	8004df2 <aci_gap_delete_ad_type+0x94>
    return BLE_STATUS_TIMEOUT;
 8004dee:	23ff      	movs	r3, #255	; 0xff
 8004df0:	e004      	b.n	8004dfc <aci_gap_delete_ad_type+0x9e>
  return status;
 8004df2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004df6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004dfa:	781b      	ldrb	r3, [r3, #0]
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b088      	sub	sp, #32
 8004e0a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004e10:	f107 0308 	add.w	r3, r7, #8
 8004e14:	2218      	movs	r2, #24
 8004e16:	2100      	movs	r1, #0
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f000 fa4b 	bl	80052b4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004e1e:	233f      	movs	r3, #63	; 0x3f
 8004e20:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8004e22:	f240 1301 	movw	r3, #257	; 0x101
 8004e26:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004e28:	1dfb      	adds	r3, r7, #7
 8004e2a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004e30:	f107 0308 	add.w	r3, r7, #8
 8004e34:	2100      	movs	r1, #0
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 fcb2 	bl	80057a0 <hci_send_req>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	da01      	bge.n	8004e46 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8004e42:	23ff      	movs	r3, #255	; 0xff
 8004e44:	e000      	b.n	8004e48 <aci_gatt_init+0x42>
  return status;
 8004e46:	79fb      	ldrb	r3, [r7, #7]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3720      	adds	r7, #32
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8004e50:	b5b0      	push	{r4, r5, r7, lr}
 8004e52:	b0cc      	sub	sp, #304	; 0x130
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	4605      	mov	r5, r0
 8004e58:	460c      	mov	r4, r1
 8004e5a:	4610      	mov	r0, r2
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e62:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004e66:	462a      	mov	r2, r5
 8004e68:	801a      	strh	r2, [r3, #0]
 8004e6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e72:	4622      	mov	r2, r4
 8004e74:	801a      	strh	r2, [r3, #0]
 8004e76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e7a:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8004e7e:	4602      	mov	r2, r0
 8004e80:	701a      	strb	r2, [r3, #0]
 8004e82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e86:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8004e8a:	460a      	mov	r2, r1
 8004e8c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8004e8e:	f107 0310 	add.w	r3, r7, #16
 8004e92:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004e96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e9a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8004ea8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eac:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004eb0:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8004eb4:	8812      	ldrh	r2, [r2, #0]
 8004eb6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004eb8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ebc:	3302      	adds	r3, #2
 8004ebe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8004ec2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ec6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004eca:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004ece:	8812      	ldrh	r2, [r2, #0]
 8004ed0:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8004ed2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ed6:	3302      	adds	r3, #2
 8004ed8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8004edc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ee0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004ee4:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8004ee8:	7812      	ldrb	r2, [r2, #0]
 8004eea:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8004eec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8004ef6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004efa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004efe:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8004f02:	7812      	ldrb	r2, [r2, #0]
 8004f04:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8004f06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8004f10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f14:	1d98      	adds	r0, r3, #6
 8004f16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f1a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	461a      	mov	r2, r3
 8004f22:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004f26:	f000 f9b5 	bl	8005294 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8004f2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f2e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004f38:	4413      	add	r3, r2
 8004f3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004f3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004f42:	2218      	movs	r2, #24
 8004f44:	2100      	movs	r1, #0
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 f9b4 	bl	80052b4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004f4c:	233f      	movs	r3, #63	; 0x3f
 8004f4e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8004f52:	f44f 7383 	mov.w	r3, #262	; 0x106
 8004f56:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004f5a:	f107 0310 	add.w	r3, r7, #16
 8004f5e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004f62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f66:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004f6a:	f107 030f 	add.w	r3, r7, #15
 8004f6e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004f72:	2301      	movs	r3, #1
 8004f74:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004f78:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004f7c:	2100      	movs	r1, #0
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 fc0e 	bl	80057a0 <hci_send_req>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	da01      	bge.n	8004f8e <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8004f8a:	23ff      	movs	r3, #255	; 0xff
 8004f8c:	e004      	b.n	8004f98 <aci_gatt_update_char_value+0x148>
  return status;
 8004f8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f92:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004f96:	781b      	ldrb	r3, [r3, #0]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bdb0      	pop	{r4, r5, r7, pc}

08004fa2 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b0cc      	sub	sp, #304	; 0x130
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fb0:	601a      	str	r2, [r3, #0]
 8004fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fb6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004fba:	4602      	mov	r2, r0
 8004fbc:	701a      	strb	r2, [r3, #0]
 8004fbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fc2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004fc6:	460a      	mov	r2, r1
 8004fc8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8004fca:	f107 0310 	add.w	r3, r7, #16
 8004fce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004fd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fd6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004fda:	2200      	movs	r2, #0
 8004fdc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8004fe4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fe8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004fec:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8004ff0:	7812      	ldrb	r2, [r2, #0]
 8004ff2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004ff4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8004ffe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005002:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005006:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800500a:	7812      	ldrb	r2, [r2, #0]
 800500c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800500e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005012:	3301      	adds	r3, #1
 8005014:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8005018:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800501c:	1c98      	adds	r0, r3, #2
 800501e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005022:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005026:	781a      	ldrb	r2, [r3, #0]
 8005028:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800502c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005030:	6819      	ldr	r1, [r3, #0]
 8005032:	f000 f92f 	bl	8005294 <Osal_MemCpy>
  index_input += Length;
 8005036:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800503a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005044:	4413      	add	r3, r2
 8005046:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800504a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800504e:	2218      	movs	r2, #24
 8005050:	2100      	movs	r1, #0
 8005052:	4618      	mov	r0, r3
 8005054:	f000 f92e 	bl	80052b4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005058:	233f      	movs	r3, #63	; 0x3f
 800505a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800505e:	230c      	movs	r3, #12
 8005060:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005064:	f107 0310 	add.w	r3, r7, #16
 8005068:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800506c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005070:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005074:	f107 030f 	add.w	r3, r7, #15
 8005078:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800507c:	2301      	movs	r3, #1
 800507e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005082:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005086:	2100      	movs	r1, #0
 8005088:	4618      	mov	r0, r3
 800508a:	f000 fb89 	bl	80057a0 <hci_send_req>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	da01      	bge.n	8005098 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8005094:	23ff      	movs	r3, #255	; 0xff
 8005096:	e004      	b.n	80050a2 <aci_hal_write_config_data+0x100>
  return status;
 8005098:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800509c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80050a0:	781b      	ldrb	r3, [r3, #0]
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b0cc      	sub	sp, #304	; 0x130
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	4602      	mov	r2, r0
 80050b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050b8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80050bc:	701a      	strb	r2, [r3, #0]
 80050be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050c2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80050c6:	460a      	mov	r2, r1
 80050c8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80050ca:	f107 0310 	add.w	r3, r7, #16
 80050ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80050d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050d6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80050da:	2200      	movs	r2, #0
 80050dc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80050de:	2300      	movs	r3, #0
 80050e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 80050e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050e8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80050ec:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80050f0:	7812      	ldrb	r2, [r2, #0]
 80050f2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80050f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80050f8:	3301      	adds	r3, #1
 80050fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 80050fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005102:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005106:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800510a:	7812      	ldrb	r2, [r2, #0]
 800510c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800510e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005112:	3301      	adds	r3, #1
 8005114:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005118:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800511c:	2218      	movs	r2, #24
 800511e:	2100      	movs	r1, #0
 8005120:	4618      	mov	r0, r3
 8005122:	f000 f8c7 	bl	80052b4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005126:	233f      	movs	r3, #63	; 0x3f
 8005128:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800512c:	230f      	movs	r3, #15
 800512e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005132:	f107 0310 	add.w	r3, r7, #16
 8005136:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800513a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800513e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005142:	f107 030f 	add.w	r3, r7, #15
 8005146:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800514a:	2301      	movs	r3, #1
 800514c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005150:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005154:	2100      	movs	r1, #0
 8005156:	4618      	mov	r0, r3
 8005158:	f000 fb22 	bl	80057a0 <hci_send_req>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	da01      	bge.n	8005166 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8005162:	23ff      	movs	r3, #255	; 0xff
 8005164:	e004      	b.n	8005170 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8005166:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800516a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800516e:	781b      	ldrb	r3, [r3, #0]
}
 8005170:	4618      	mov	r0, r3
 8005172:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b088      	sub	sp, #32
 800517e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005180:	2300      	movs	r3, #0
 8005182:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005184:	f107 0308 	add.w	r3, r7, #8
 8005188:	2218      	movs	r2, #24
 800518a:	2100      	movs	r1, #0
 800518c:	4618      	mov	r0, r3
 800518e:	f000 f891 	bl	80052b4 <Osal_MemSet>
  rq.ogf = 0x03;
 8005192:	2303      	movs	r3, #3
 8005194:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8005196:	2303      	movs	r3, #3
 8005198:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800519a:	1dfb      	adds	r3, r7, #7
 800519c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800519e:	2301      	movs	r3, #1
 80051a0:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80051a2:	f107 0308 	add.w	r3, r7, #8
 80051a6:	2100      	movs	r1, #0
 80051a8:	4618      	mov	r0, r3
 80051aa:	f000 faf9 	bl	80057a0 <hci_send_req>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	da01      	bge.n	80051b8 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80051b4:	23ff      	movs	r3, #255	; 0xff
 80051b6:	e000      	b.n	80051ba <hci_reset+0x40>
  return status;
 80051b8:	79fb      	ldrb	r3, [r7, #7]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3720      	adds	r7, #32
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <hci_le_set_scan_response_data>:
  return status;
}

tBleStatus hci_le_set_scan_response_data( uint8_t Scan_Response_Data_Length,
                                          const uint8_t* Scan_Response_Data )
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b0cc      	sub	sp, #304	; 0x130
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	4602      	mov	r2, r0
 80051ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051d2:	6019      	str	r1, [r3, #0]
 80051d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051d8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80051dc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
 80051de:	f107 0310 	add.w	r3, r7, #16
 80051e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80051e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ea:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80051ee:	2200      	movs	r2, #0
 80051f0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80051f2:	2300      	movs	r3, #0
 80051f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Scan_Response_Data_Length = Scan_Response_Data_Length;
 80051f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051fc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005200:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8005204:	7812      	ldrb	r2, [r2, #0]
 8005206:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005208:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800520c:	3301      	adds	r3, #1
 800520e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Scan_Response_Data, (const void*)Scan_Response_Data, 31 );
 8005212:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005216:	1c58      	adds	r0, r3, #1
 8005218:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800521c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005220:	221f      	movs	r2, #31
 8005222:	6819      	ldr	r1, [r3, #0]
 8005224:	f000 f836 	bl	8005294 <Osal_MemCpy>
  index_input += 31;
 8005228:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800522c:	331f      	adds	r3, #31
 800522e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005232:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005236:	2218      	movs	r2, #24
 8005238:	2100      	movs	r1, #0
 800523a:	4618      	mov	r0, r3
 800523c:	f000 f83a 	bl	80052b4 <Osal_MemSet>
  rq.ogf = 0x08;
 8005240:	2308      	movs	r3, #8
 8005242:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x009;
 8005246:	2309      	movs	r3, #9
 8005248:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800524c:	f107 0310 	add.w	r3, r7, #16
 8005250:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005254:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005258:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800525c:	f107 030f 	add.w	r3, r7, #15
 8005260:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005264:	2301      	movs	r3, #1
 8005266:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800526a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800526e:	2100      	movs	r1, #0
 8005270:	4618      	mov	r0, r3
 8005272:	f000 fa95 	bl	80057a0 <hci_send_req>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	da01      	bge.n	8005280 <hci_le_set_scan_response_data+0xbe>
    return BLE_STATUS_TIMEOUT;
 800527c:	23ff      	movs	r3, #255	; 0xff
 800527e:	e004      	b.n	800528a <hci_le_set_scan_response_data+0xc8>
  return status;
 8005280:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005284:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005288:	781b      	ldrb	r3, [r3, #0]
}
 800528a:	4618      	mov	r0, r3
 800528c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	68b9      	ldr	r1, [r7, #8]
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f002 f998 	bl	80075da <memcpy>
 80052aa:	4603      	mov	r3, r0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3710      	adds	r7, #16
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	68b9      	ldr	r1, [r7, #8]
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f002 f90c 	bl	80074e2 <memset>
 80052ca:	4603      	mov	r3, r0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 80052d4:	b480      	push	{r7}
 80052d6:	af00      	add	r7, sp, #0
  return;
 80052d8:	bf00      	nop
}
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr

080052e2 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 80052e2:	b480      	push	{r7}
 80052e4:	af00      	add	r7, sp, #0
  return;
 80052e6:	bf00      	nop
}
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 80052f0:	b480      	push	{r7}
 80052f2:	af00      	add	r7, sp, #0
  return;
 80052f4:	bf00      	nop
}
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <DIS_Init>:
__WEAK void DIS_Init( void )
{
 80052fe:	b480      	push	{r7}
 8005300:	af00      	add	r7, sp, #0
  return;
 8005302:	bf00      	nop
}
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800530c:	b480      	push	{r7}
 800530e:	af00      	add	r7, sp, #0
  return;
 8005310:	bf00      	nop
}
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800531a:	b480      	push	{r7}
 800531c:	af00      	add	r7, sp, #0
  return;
 800531e:	bf00      	nop
}
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8005328:	b480      	push	{r7}
 800532a:	af00      	add	r7, sp, #0
  return;
 800532c:	bf00      	nop
}
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr

08005336 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8005336:	b480      	push	{r7}
 8005338:	af00      	add	r7, sp, #0
  return;
 800533a:	bf00      	nop
}
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8005344:	b480      	push	{r7}
 8005346:	af00      	add	r7, sp, #0
  return;
 8005348:	bf00      	nop
}
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8005352:	b480      	push	{r7}
 8005354:	af00      	add	r7, sp, #0
  return;
 8005356:	bf00      	nop
}
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8005360:	b480      	push	{r7}
 8005362:	af00      	add	r7, sp, #0
  return;
 8005364:	bf00      	nop
}
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr

0800536e <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800536e:	b480      	push	{r7}
 8005370:	af00      	add	r7, sp, #0
  return;
 8005372:	bf00      	nop
}
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800537c:	b480      	push	{r7}
 800537e:	af00      	add	r7, sp, #0
  return;
 8005380:	bf00      	nop
}
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr

0800538a <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800538a:	b480      	push	{r7}
 800538c:	af00      	add	r7, sp, #0
  return;
 800538e:	bf00      	nop
}
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8005398:	b480      	push	{r7}
 800539a:	af00      	add	r7, sp, #0
  return;
 800539c:	bf00      	nop
}
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr

080053a6 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 80053a6:	b480      	push	{r7}
 80053a8:	af00      	add	r7, sp, #0
  return;
 80053aa:	bf00      	nop
}
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 80053b4:	b480      	push	{r7}
 80053b6:	af00      	add	r7, sp, #0
  return;
 80053b8:	bf00      	nop
}
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 80053c2:	b480      	push	{r7}
 80053c4:	af00      	add	r7, sp, #0
  return;
 80053c6:	bf00      	nop
}
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 80053d4:	4b04      	ldr	r3, [pc, #16]	; (80053e8 <SVCCTL_Init+0x18>)
 80053d6:	2200      	movs	r2, #0
 80053d8:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 80053da:	4b04      	ldr	r3, [pc, #16]	; (80053ec <SVCCTL_Init+0x1c>)
 80053dc:	2200      	movs	r2, #0
 80053de:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 80053e0:	f000 f806 	bl	80053f0 <SVCCTL_SvcInit>

  return;
 80053e4:	bf00      	nop
}
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	2000011c 	.word	0x2000011c
 80053ec:	2000013c 	.word	0x2000013c

080053f0 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	af00      	add	r7, sp, #0
  BAS_Init();
 80053f4:	f7ff ff6e 	bl	80052d4 <BAS_Init>

  BLS_Init();
 80053f8:	f7ff ff73 	bl	80052e2 <BLS_Init>

  CRS_STM_Init();
 80053fc:	f7ff ff78 	bl	80052f0 <CRS_STM_Init>

  DIS_Init();
 8005400:	f7ff ff7d 	bl	80052fe <DIS_Init>

  EDS_STM_Init();
 8005404:	f7ff ff82 	bl	800530c <EDS_STM_Init>

  HIDS_Init();
 8005408:	f7ff ff87 	bl	800531a <HIDS_Init>

  HRS_Init();
 800540c:	f7ff ff8c 	bl	8005328 <HRS_Init>

  HTS_Init();
 8005410:	f7ff ff91 	bl	8005336 <HTS_Init>

  IAS_Init();
 8005414:	f7ff ff96 	bl	8005344 <IAS_Init>

  LLS_Init();
 8005418:	f7ff ff9b 	bl	8005352 <LLS_Init>

  TPS_Init();
 800541c:	f7ff ffa0 	bl	8005360 <TPS_Init>

  MOTENV_STM_Init();
 8005420:	f7ff ffa5 	bl	800536e <MOTENV_STM_Init>

  P2PS_STM_Init();
 8005424:	f7ff ffaa 	bl	800537c <P2PS_STM_Init>

  ZDD_STM_Init();
 8005428:	f7ff ffaf 	bl	800538a <ZDD_STM_Init>

  OTAS_STM_Init();
 800542c:	f7ff ffb4 	bl	8005398 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8005430:	f7ff ffc0 	bl	80053b4 <BVOPUS_STM_Init>

  MESH_Init();
 8005434:	f7ff ffb7 	bl	80053a6 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8005438:	f7ff ffc3 	bl	80053c2 <SVCCTL_InitCustomSvc>
  
  return;
 800543c:	bf00      	nop
}
 800543e:	bd80      	pop	{r7, pc}

08005440 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b086      	sub	sp, #24
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	3301      	adds	r3, #1
 800544c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800544e:	2300      	movs	r3, #0
 8005450:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	2bff      	cmp	r3, #255	; 0xff
 8005458:	d125      	bne.n	80054a6 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	3302      	adds	r3, #2
 800545e:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	881b      	ldrh	r3, [r3, #0]
 8005464:	b29b      	uxth	r3, r3
 8005466:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800546a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800546e:	d118      	bne.n	80054a2 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8005470:	2300      	movs	r3, #0
 8005472:	757b      	strb	r3, [r7, #21]
 8005474:	e00d      	b.n	8005492 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8005476:	7d7b      	ldrb	r3, [r7, #21]
 8005478:	4a1a      	ldr	r2, [pc, #104]	; (80054e4 <SVCCTL_UserEvtRx+0xa4>)
 800547a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	4798      	blx	r3
 8005482:	4603      	mov	r3, r0
 8005484:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8005486:	7dfb      	ldrb	r3, [r7, #23]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d108      	bne.n	800549e <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800548c:	7d7b      	ldrb	r3, [r7, #21]
 800548e:	3301      	adds	r3, #1
 8005490:	757b      	strb	r3, [r7, #21]
 8005492:	4b14      	ldr	r3, [pc, #80]	; (80054e4 <SVCCTL_UserEvtRx+0xa4>)
 8005494:	7f1b      	ldrb	r3, [r3, #28]
 8005496:	7d7a      	ldrb	r2, [r7, #21]
 8005498:	429a      	cmp	r2, r3
 800549a:	d3ec      	bcc.n	8005476 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800549c:	e002      	b.n	80054a4 <SVCCTL_UserEvtRx+0x64>
              break;
 800549e:	bf00      	nop
          break;
 80054a0:	e000      	b.n	80054a4 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 80054a2:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 80054a4:	e000      	b.n	80054a8 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 80054a6:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 80054a8:	7dfb      	ldrb	r3, [r7, #23]
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d00f      	beq.n	80054ce <SVCCTL_UserEvtRx+0x8e>
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	dc10      	bgt.n	80054d4 <SVCCTL_UserEvtRx+0x94>
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d002      	beq.n	80054bc <SVCCTL_UserEvtRx+0x7c>
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d006      	beq.n	80054c8 <SVCCTL_UserEvtRx+0x88>
 80054ba:	e00b      	b.n	80054d4 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 ff7f 	bl	80063c0 <SVCCTL_App_Notification>
 80054c2:	4603      	mov	r3, r0
 80054c4:	75bb      	strb	r3, [r7, #22]
      break;
 80054c6:	e008      	b.n	80054da <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80054c8:	2301      	movs	r3, #1
 80054ca:	75bb      	strb	r3, [r7, #22]
      break;
 80054cc:	e005      	b.n	80054da <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80054ce:	2300      	movs	r3, #0
 80054d0:	75bb      	strb	r3, [r7, #22]
      break;
 80054d2:	e002      	b.n	80054da <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80054d4:	2301      	movs	r3, #1
 80054d6:	75bb      	strb	r3, [r7, #22]
      break;
 80054d8:	bf00      	nop
  }

  return (return_status);
 80054da:	7dbb      	ldrb	r3, [r7, #22]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3718      	adds	r7, #24
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	2000011c 	.word	0x2000011c

080054e8 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b088      	sub	sp, #32
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80054f0:	f107 030c 	add.w	r3, r7, #12
 80054f4:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	212c      	movs	r1, #44	; 0x2c
 8005500:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8005504:	f000 fae2 	bl	8005acc <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	330b      	adds	r3, #11
 800550c:	78db      	ldrb	r3, [r3, #3]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3720      	adds	r7, #32
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8005516:	b580      	push	{r7, lr}
 8005518:	b088      	sub	sp, #32
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800551e:	f107 030c 	add.w	r3, r7, #12
 8005522:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	210f      	movs	r1, #15
 800552e:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8005532:	f000 facb 	bl	8005acc <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	330b      	adds	r3, #11
 800553a:	78db      	ldrb	r3, [r3, #3]
}
 800553c:	4618      	mov	r0, r3
 800553e:	3720      	adds	r7, #32
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b088      	sub	sp, #32
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800554c:	f107 030c 	add.w	r3, r7, #12
 8005550:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	210e      	movs	r1, #14
 8005558:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800555c:	f000 fab6 	bl	8005acc <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	330b      	adds	r3, #11
 8005564:	78db      	ldrb	r3, [r3, #3]
}
 8005566:	4618      	mov	r0, r3
 8005568:	3720      	adds	r7, #32
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
	...

08005570 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8005570:	b480      	push	{r7}
 8005572:	b08b      	sub	sp, #44	; 0x2c
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8005578:	2300      	movs	r3, #0
 800557a:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800557c:	2300      	movs	r3, #0
 800557e:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8005580:	2300      	movs	r3, #0
 8005582:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8005584:	2300      	movs	r3, #0
 8005586:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8005588:	2300      	movs	r3, #0
 800558a:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800558c:	2300      	movs	r3, #0
 800558e:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8005590:	2300      	movs	r3, #0
 8005592:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8005594:	2300      	movs	r3, #0
 8005596:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8005598:	4b4a      	ldr	r3, [pc, #296]	; (80056c4 <SHCI_GetWirelessFwInfo+0x154>)
 800559a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800559c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80055a0:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80055aa:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a44      	ldr	r2, [pc, #272]	; (80056c8 <SHCI_GetWirelessFwInfo+0x158>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d10f      	bne.n	80055dc <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	695b      	ldr	r3, [r3, #20]
 80055c0:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	69db      	ldr	r3, [r3, #28]
 80055cc:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	617b      	str	r3, [r7, #20]
 80055da:	e01a      	b.n	8005612 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80055e4:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80055e8:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	695b      	ldr	r3, [r3, #20]
 80055f8:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005614:	0e1b      	lsrs	r3, r3, #24
 8005616:	b2da      	uxtb	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561e:	0c1b      	lsrs	r3, r3, #16
 8005620:	b2da      	uxtb	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8005626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005628:	0a1b      	lsrs	r3, r3, #8
 800562a:	b2da      	uxtb	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8005630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005632:	091b      	lsrs	r3, r3, #4
 8005634:	b2db      	uxtb	r3, r3
 8005636:	f003 030f 	and.w	r3, r3, #15
 800563a:	b2da      	uxtb	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8005640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005642:	b2db      	uxtb	r3, r3
 8005644:	f003 030f 	and.w	r3, r3, #15
 8005648:	b2da      	uxtb	r2, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800564e:	6a3b      	ldr	r3, [r7, #32]
 8005650:	0e1b      	lsrs	r3, r3, #24
 8005652:	b2da      	uxtb	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8005658:	6a3b      	ldr	r3, [r7, #32]
 800565a:	0c1b      	lsrs	r3, r3, #16
 800565c:	b2da      	uxtb	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8005662:	6a3b      	ldr	r3, [r7, #32]
 8005664:	0a1b      	lsrs	r3, r3, #8
 8005666:	b2da      	uxtb	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800566c:	6a3b      	ldr	r3, [r7, #32]
 800566e:	b2da      	uxtb	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	b2da      	uxtb	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	0e1b      	lsrs	r3, r3, #24
 8005680:	b2da      	uxtb	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	0c1b      	lsrs	r3, r3, #16
 800568a:	b2da      	uxtb	r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	0a1b      	lsrs	r3, r3, #8
 8005694:	b2da      	uxtb	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	0e1b      	lsrs	r3, r3, #24
 800569e:	b2da      	uxtb	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	0c1b      	lsrs	r3, r3, #16
 80056a8:	b2da      	uxtb	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	b2da      	uxtb	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	372c      	adds	r7, #44	; 0x2c
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr
 80056c4:	58004000 	.word	0x58004000
 80056c8:	a94656b9 	.word	0xa94656b9

080056cc <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	4a08      	ldr	r2, [pc, #32]	; (80056fc <hci_init+0x30>)
 80056dc:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80056de:	4a08      	ldr	r2, [pc, #32]	; (8005700 <hci_init+0x34>)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80056e4:	4806      	ldr	r0, [pc, #24]	; (8005700 <hci_init+0x34>)
 80056e6:	f000 f973 	bl	80059d0 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4618      	mov	r0, r3
 80056f0:	f000 f8d4 	bl	800589c <TlInit>

  return;
 80056f4:	bf00      	nop
}
 80056f6:	3708      	adds	r7, #8
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	200002c8 	.word	0x200002c8
 8005700:	200002a0 	.word	0x200002a0

08005704 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800570a:	4822      	ldr	r0, [pc, #136]	; (8005794 <hci_user_evt_proc+0x90>)
 800570c:	f000 fd28 	bl	8006160 <LST_is_empty>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d12b      	bne.n	800576e <hci_user_evt_proc+0x6a>
 8005716:	4b20      	ldr	r3, [pc, #128]	; (8005798 <hci_user_evt_proc+0x94>)
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d027      	beq.n	800576e <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800571e:	f107 030c 	add.w	r3, r7, #12
 8005722:	4619      	mov	r1, r3
 8005724:	481b      	ldr	r0, [pc, #108]	; (8005794 <hci_user_evt_proc+0x90>)
 8005726:	f000 fdaa 	bl	800627e <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800572a:	4b1c      	ldr	r3, [pc, #112]	; (800579c <hci_user_evt_proc+0x98>)
 800572c:	69db      	ldr	r3, [r3, #28]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00c      	beq.n	800574c <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8005736:	2301      	movs	r3, #1
 8005738:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800573a:	4b18      	ldr	r3, [pc, #96]	; (800579c <hci_user_evt_proc+0x98>)
 800573c:	69db      	ldr	r3, [r3, #28]
 800573e:	1d3a      	adds	r2, r7, #4
 8005740:	4610      	mov	r0, r2
 8005742:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8005744:	793a      	ldrb	r2, [r7, #4]
 8005746:	4b14      	ldr	r3, [pc, #80]	; (8005798 <hci_user_evt_proc+0x94>)
 8005748:	701a      	strb	r2, [r3, #0]
 800574a:	e002      	b.n	8005752 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800574c:	4b12      	ldr	r3, [pc, #72]	; (8005798 <hci_user_evt_proc+0x94>)
 800574e:	2201      	movs	r2, #1
 8005750:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8005752:	4b11      	ldr	r3, [pc, #68]	; (8005798 <hci_user_evt_proc+0x94>)
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d004      	beq.n	8005764 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	4618      	mov	r0, r3
 800575e:	f000 fc03 	bl	8005f68 <TL_MM_EvtDone>
 8005762:	e004      	b.n	800576e <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	4619      	mov	r1, r3
 8005768:	480a      	ldr	r0, [pc, #40]	; (8005794 <hci_user_evt_proc+0x90>)
 800576a:	f000 fd1b 	bl	80061a4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800576e:	4809      	ldr	r0, [pc, #36]	; (8005794 <hci_user_evt_proc+0x90>)
 8005770:	f000 fcf6 	bl	8006160 <LST_is_empty>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d107      	bne.n	800578a <hci_user_evt_proc+0x86>
 800577a:	4b07      	ldr	r3, [pc, #28]	; (8005798 <hci_user_evt_proc+0x94>)
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d003      	beq.n	800578a <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8005782:	4804      	ldr	r0, [pc, #16]	; (8005794 <hci_user_evt_proc+0x90>)
 8005784:	f000 ff46 	bl	8006614 <hci_notify_asynch_evt>
  }


  return;
 8005788:	bf00      	nop
 800578a:	bf00      	nop
}
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	20000144 	.word	0x20000144
 8005798:	20000150 	.word	0x20000150
 800579c:	200002a0 	.word	0x200002a0

080057a0 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b088      	sub	sp, #32
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	460b      	mov	r3, r1
 80057aa:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80057ac:	2000      	movs	r0, #0
 80057ae:	f000 f8cb 	bl	8005948 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80057b2:	2300      	movs	r3, #0
 80057b4:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	885b      	ldrh	r3, [r3, #2]
 80057ba:	b21b      	sxth	r3, r3
 80057bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057c0:	b21a      	sxth	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	881b      	ldrh	r3, [r3, #0]
 80057c6:	029b      	lsls	r3, r3, #10
 80057c8:	b21b      	sxth	r3, r3
 80057ca:	4313      	orrs	r3, r2
 80057cc:	b21b      	sxth	r3, r3
 80057ce:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	b2d9      	uxtb	r1, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	689a      	ldr	r2, [r3, #8]
 80057da:	8bbb      	ldrh	r3, [r7, #28]
 80057dc:	4618      	mov	r0, r3
 80057de:	f000 f88d 	bl	80058fc <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80057e2:	e04e      	b.n	8005882 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80057e4:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80057e8:	f000 ff2b 	bl	8006642 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80057ec:	e043      	b.n	8005876 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80057ee:	f107 030c 	add.w	r3, r7, #12
 80057f2:	4619      	mov	r1, r3
 80057f4:	4828      	ldr	r0, [pc, #160]	; (8005898 <hci_send_req+0xf8>)
 80057f6:	f000 fd42 	bl	800627e <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	7a5b      	ldrb	r3, [r3, #9]
 80057fe:	2b0f      	cmp	r3, #15
 8005800:	d114      	bne.n	800582c <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	330b      	adds	r3, #11
 8005806:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	885b      	ldrh	r3, [r3, #2]
 800580c:	b29b      	uxth	r3, r3
 800580e:	8bba      	ldrh	r2, [r7, #28]
 8005810:	429a      	cmp	r2, r3
 8005812:	d104      	bne.n	800581e <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	7812      	ldrb	r2, [r2, #0]
 800581c:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	785b      	ldrb	r3, [r3, #1]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d027      	beq.n	8005876 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8005826:	2301      	movs	r3, #1
 8005828:	77fb      	strb	r3, [r7, #31]
 800582a:	e024      	b.n	8005876 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	330b      	adds	r3, #11
 8005830:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005838:	b29b      	uxth	r3, r3
 800583a:	8bba      	ldrh	r2, [r7, #28]
 800583c:	429a      	cmp	r2, r3
 800583e:	d114      	bne.n	800586a <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	7a9b      	ldrb	r3, [r3, #10]
 8005844:	3b03      	subs	r3, #3
 8005846:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	695a      	ldr	r2, [r3, #20]
 800584c:	7dfb      	ldrb	r3, [r7, #23]
 800584e:	429a      	cmp	r2, r3
 8005850:	bfa8      	it	ge
 8005852:	461a      	movge	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6918      	ldr	r0, [r3, #16]
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	1cd9      	adds	r1, r3, #3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	695b      	ldr	r3, [r3, #20]
 8005864:	461a      	mov	r2, r3
 8005866:	f001 feb8 	bl	80075da <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8005872:	2301      	movs	r3, #1
 8005874:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8005876:	4808      	ldr	r0, [pc, #32]	; (8005898 <hci_send_req+0xf8>)
 8005878:	f000 fc72 	bl	8006160 <LST_is_empty>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d0b5      	beq.n	80057ee <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8005882:	7ffb      	ldrb	r3, [r7, #31]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d0ad      	beq.n	80057e4 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8005888:	2001      	movs	r0, #1
 800588a:	f000 f85d 	bl	8005948 <NotifyCmdStatus>

  return 0;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3720      	adds	r7, #32
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	200002c0 	.word	0x200002c0

0800589c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b086      	sub	sp, #24
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80058a4:	480f      	ldr	r0, [pc, #60]	; (80058e4 <TlInit+0x48>)
 80058a6:	f000 fc4b 	bl	8006140 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80058aa:	4a0f      	ldr	r2, [pc, #60]	; (80058e8 <TlInit+0x4c>)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80058b0:	480e      	ldr	r0, [pc, #56]	; (80058ec <TlInit+0x50>)
 80058b2:	f000 fc45 	bl	8006140 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80058b6:	4b0e      	ldr	r3, [pc, #56]	; (80058f0 <TlInit+0x54>)
 80058b8:	2201      	movs	r2, #1
 80058ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80058bc:	4b0d      	ldr	r3, [pc, #52]	; (80058f4 <TlInit+0x58>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00a      	beq.n	80058da <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80058c8:	4b0b      	ldr	r3, [pc, #44]	; (80058f8 <TlInit+0x5c>)
 80058ca:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80058cc:	4b09      	ldr	r3, [pc, #36]	; (80058f4 <TlInit+0x58>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f107 0208 	add.w	r2, r7, #8
 80058d4:	4610      	mov	r0, r2
 80058d6:	4798      	blx	r3
  }

  return;
 80058d8:	bf00      	nop
 80058da:	bf00      	nop
}
 80058dc:	3718      	adds	r7, #24
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	200002c0 	.word	0x200002c0
 80058e8:	2000014c 	.word	0x2000014c
 80058ec:	20000144 	.word	0x20000144
 80058f0:	20000150 	.word	0x20000150
 80058f4:	200002a0 	.word	0x200002a0
 80058f8:	08005989 	.word	0x08005989

080058fc <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	4603      	mov	r3, r0
 8005904:	603a      	str	r2, [r7, #0]
 8005906:	80fb      	strh	r3, [r7, #6]
 8005908:	460b      	mov	r3, r1
 800590a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800590c:	4b0c      	ldr	r3, [pc, #48]	; (8005940 <SendCmd+0x44>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	88fa      	ldrh	r2, [r7, #6]
 8005912:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8005916:	4b0a      	ldr	r3, [pc, #40]	; (8005940 <SendCmd+0x44>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	797a      	ldrb	r2, [r7, #5]
 800591c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800591e:	4b08      	ldr	r3, [pc, #32]	; (8005940 <SendCmd+0x44>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	330c      	adds	r3, #12
 8005924:	797a      	ldrb	r2, [r7, #5]
 8005926:	6839      	ldr	r1, [r7, #0]
 8005928:	4618      	mov	r0, r3
 800592a:	f001 fe56 	bl	80075da <memcpy>

  hciContext.io.Send(0,0);
 800592e:	4b05      	ldr	r3, [pc, #20]	; (8005944 <SendCmd+0x48>)
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	2100      	movs	r1, #0
 8005934:	2000      	movs	r0, #0
 8005936:	4798      	blx	r3

  return;
 8005938:	bf00      	nop
}
 800593a:	3708      	adds	r7, #8
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	2000014c 	.word	0x2000014c
 8005944:	200002a0 	.word	0x200002a0

08005948 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	4603      	mov	r3, r0
 8005950:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8005952:	79fb      	ldrb	r3, [r7, #7]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d108      	bne.n	800596a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8005958:	4b0a      	ldr	r3, [pc, #40]	; (8005984 <NotifyCmdStatus+0x3c>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00d      	beq.n	800597c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8005960:	4b08      	ldr	r3, [pc, #32]	; (8005984 <NotifyCmdStatus+0x3c>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2000      	movs	r0, #0
 8005966:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8005968:	e008      	b.n	800597c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800596a:	4b06      	ldr	r3, [pc, #24]	; (8005984 <NotifyCmdStatus+0x3c>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d004      	beq.n	800597c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8005972:	4b04      	ldr	r3, [pc, #16]	; (8005984 <NotifyCmdStatus+0x3c>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2001      	movs	r0, #1
 8005978:	4798      	blx	r3
  return;
 800597a:	bf00      	nop
 800597c:	bf00      	nop
}
 800597e:	3708      	adds	r7, #8
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	200002c8 	.word	0x200002c8

08005988 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	7a5b      	ldrb	r3, [r3, #9]
 8005994:	2b0f      	cmp	r3, #15
 8005996:	d003      	beq.n	80059a0 <TlEvtReceived+0x18>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	7a5b      	ldrb	r3, [r3, #9]
 800599c:	2b0e      	cmp	r3, #14
 800599e:	d107      	bne.n	80059b0 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80059a0:	6879      	ldr	r1, [r7, #4]
 80059a2:	4809      	ldr	r0, [pc, #36]	; (80059c8 <TlEvtReceived+0x40>)
 80059a4:	f000 fc24 	bl	80061f0 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80059a8:	2000      	movs	r0, #0
 80059aa:	f000 fe3f 	bl	800662c <hci_cmd_resp_release>
 80059ae:	e006      	b.n	80059be <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80059b0:	6879      	ldr	r1, [r7, #4]
 80059b2:	4806      	ldr	r0, [pc, #24]	; (80059cc <TlEvtReceived+0x44>)
 80059b4:	f000 fc1c 	bl	80061f0 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80059b8:	4804      	ldr	r0, [pc, #16]	; (80059cc <TlEvtReceived+0x44>)
 80059ba:	f000 fe2b 	bl	8006614 <hci_notify_asynch_evt>
  }

  return;
 80059be:	bf00      	nop
}
 80059c0:	3708      	adds	r7, #8
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	200002c0 	.word	0x200002c0
 80059cc:	20000144 	.word	0x20000144

080059d0 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a05      	ldr	r2, [pc, #20]	; (80059f0 <hci_register_io_bus+0x20>)
 80059dc:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a04      	ldr	r2, [pc, #16]	; (80059f4 <hci_register_io_bus+0x24>)
 80059e2:	611a      	str	r2, [r3, #16]

  return;
 80059e4:	bf00      	nop
}
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr
 80059f0:	08005ce1 	.word	0x08005ce1
 80059f4:	08005d49 	.word	0x08005d49

080059f8 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	4a08      	ldr	r2, [pc, #32]	; (8005a28 <shci_init+0x30>)
 8005a08:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8005a0a:	4a08      	ldr	r2, [pc, #32]	; (8005a2c <shci_init+0x34>)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8005a10:	4806      	ldr	r0, [pc, #24]	; (8005a2c <shci_init+0x34>)
 8005a12:	f000 f911 	bl	8005c38 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f000 f894 	bl	8005b48 <TlInit>

  return;
 8005a20:	bf00      	nop
}
 8005a22:	3708      	adds	r7, #8
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	200002ec 	.word	0x200002ec
 8005a2c:	200002cc 	.word	0x200002cc

08005a30 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8005a36:	4822      	ldr	r0, [pc, #136]	; (8005ac0 <shci_user_evt_proc+0x90>)
 8005a38:	f000 fb92 	bl	8006160 <LST_is_empty>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d12b      	bne.n	8005a9a <shci_user_evt_proc+0x6a>
 8005a42:	4b20      	ldr	r3, [pc, #128]	; (8005ac4 <shci_user_evt_proc+0x94>)
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d027      	beq.n	8005a9a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8005a4a:	f107 030c 	add.w	r3, r7, #12
 8005a4e:	4619      	mov	r1, r3
 8005a50:	481b      	ldr	r0, [pc, #108]	; (8005ac0 <shci_user_evt_proc+0x90>)
 8005a52:	f000 fc14 	bl	800627e <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8005a56:	4b1c      	ldr	r3, [pc, #112]	; (8005ac8 <shci_user_evt_proc+0x98>)
 8005a58:	69db      	ldr	r3, [r3, #28]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00c      	beq.n	8005a78 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8005a62:	2301      	movs	r3, #1
 8005a64:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8005a66:	4b18      	ldr	r3, [pc, #96]	; (8005ac8 <shci_user_evt_proc+0x98>)
 8005a68:	69db      	ldr	r3, [r3, #28]
 8005a6a:	1d3a      	adds	r2, r7, #4
 8005a6c:	4610      	mov	r0, r2
 8005a6e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8005a70:	793a      	ldrb	r2, [r7, #4]
 8005a72:	4b14      	ldr	r3, [pc, #80]	; (8005ac4 <shci_user_evt_proc+0x94>)
 8005a74:	701a      	strb	r2, [r3, #0]
 8005a76:	e002      	b.n	8005a7e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8005a78:	4b12      	ldr	r3, [pc, #72]	; (8005ac4 <shci_user_evt_proc+0x94>)
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8005a7e:	4b11      	ldr	r3, [pc, #68]	; (8005ac4 <shci_user_evt_proc+0x94>)
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d004      	beq.n	8005a90 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f000 fa6d 	bl	8005f68 <TL_MM_EvtDone>
 8005a8e:	e004      	b.n	8005a9a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	4619      	mov	r1, r3
 8005a94:	480a      	ldr	r0, [pc, #40]	; (8005ac0 <shci_user_evt_proc+0x90>)
 8005a96:	f000 fb85 	bl	80061a4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8005a9a:	4809      	ldr	r0, [pc, #36]	; (8005ac0 <shci_user_evt_proc+0x90>)
 8005a9c:	f000 fb60 	bl	8006160 <LST_is_empty>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d107      	bne.n	8005ab6 <shci_user_evt_proc+0x86>
 8005aa6:	4b07      	ldr	r3, [pc, #28]	; (8005ac4 <shci_user_evt_proc+0x94>)
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d003      	beq.n	8005ab6 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8005aae:	4804      	ldr	r0, [pc, #16]	; (8005ac0 <shci_user_evt_proc+0x90>)
 8005ab0:	f7fb f861 	bl	8000b76 <shci_notify_asynch_evt>
  }


  return;
 8005ab4:	bf00      	nop
 8005ab6:	bf00      	nop
}
 8005ab8:	3710      	adds	r7, #16
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	20000154 	.word	0x20000154
 8005ac4:	20000164 	.word	0x20000164
 8005ac8:	200002cc 	.word	0x200002cc

08005acc <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60ba      	str	r2, [r7, #8]
 8005ad4:	607b      	str	r3, [r7, #4]
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	81fb      	strh	r3, [r7, #14]
 8005ada:	460b      	mov	r3, r1
 8005adc:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8005ade:	2000      	movs	r0, #0
 8005ae0:	f000 f864 	bl	8005bac <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8005ae4:	4b16      	ldr	r3, [pc, #88]	; (8005b40 <shci_send+0x74>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	89fa      	ldrh	r2, [r7, #14]
 8005aea:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8005aee:	4b14      	ldr	r3, [pc, #80]	; (8005b40 <shci_send+0x74>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	7b7a      	ldrb	r2, [r7, #13]
 8005af4:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8005af6:	4b12      	ldr	r3, [pc, #72]	; (8005b40 <shci_send+0x74>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	330c      	adds	r3, #12
 8005afc:	7b7a      	ldrb	r2, [r7, #13]
 8005afe:	68b9      	ldr	r1, [r7, #8]
 8005b00:	4618      	mov	r0, r3
 8005b02:	f001 fd6a 	bl	80075da <memcpy>

  shciContext.io.Send(0,0);
 8005b06:	4b0f      	ldr	r3, [pc, #60]	; (8005b44 <shci_send+0x78>)
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	2000      	movs	r0, #0
 8005b0e:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8005b10:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8005b14:	f7fb f846 	bl	8000ba4 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f103 0008 	add.w	r0, r3, #8
 8005b1e:	4b08      	ldr	r3, [pc, #32]	; (8005b40 <shci_send+0x74>)
 8005b20:	6819      	ldr	r1, [r3, #0]
 8005b22:	4b07      	ldr	r3, [pc, #28]	; (8005b40 <shci_send+0x74>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	789b      	ldrb	r3, [r3, #2]
 8005b28:	3303      	adds	r3, #3
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	f001 fd55 	bl	80075da <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8005b30:	2001      	movs	r0, #1
 8005b32:	f000 f83b 	bl	8005bac <Cmd_SetStatus>

  return;
 8005b36:	bf00      	nop
}
 8005b38:	3710      	adds	r7, #16
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	20000160 	.word	0x20000160
 8005b44:	200002cc 	.word	0x200002cc

08005b48 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b086      	sub	sp, #24
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8005b50:	4a10      	ldr	r2, [pc, #64]	; (8005b94 <TlInit+0x4c>)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8005b56:	4810      	ldr	r0, [pc, #64]	; (8005b98 <TlInit+0x50>)
 8005b58:	f000 faf2 	bl	8006140 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8005b5c:	2001      	movs	r0, #1
 8005b5e:	f000 f825 	bl	8005bac <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8005b62:	4b0e      	ldr	r3, [pc, #56]	; (8005b9c <TlInit+0x54>)
 8005b64:	2201      	movs	r2, #1
 8005b66:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8005b68:	4b0d      	ldr	r3, [pc, #52]	; (8005ba0 <TlInit+0x58>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00c      	beq.n	8005b8a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8005b74:	4b0b      	ldr	r3, [pc, #44]	; (8005ba4 <TlInit+0x5c>)
 8005b76:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8005b78:	4b0b      	ldr	r3, [pc, #44]	; (8005ba8 <TlInit+0x60>)
 8005b7a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8005b7c:	4b08      	ldr	r3, [pc, #32]	; (8005ba0 <TlInit+0x58>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f107 020c 	add.w	r2, r7, #12
 8005b84:	4610      	mov	r0, r2
 8005b86:	4798      	blx	r3
  }

  return;
 8005b88:	bf00      	nop
 8005b8a:	bf00      	nop
}
 8005b8c:	3718      	adds	r7, #24
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	20000160 	.word	0x20000160
 8005b98:	20000154 	.word	0x20000154
 8005b9c:	20000164 	.word	0x20000164
 8005ba0:	200002cc 	.word	0x200002cc
 8005ba4:	08005bfd 	.word	0x08005bfd
 8005ba8:	08005c15 	.word	0x08005c15

08005bac <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8005bb6:	79fb      	ldrb	r3, [r7, #7]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d10b      	bne.n	8005bd4 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8005bbc:	4b0d      	ldr	r3, [pc, #52]	; (8005bf4 <Cmd_SetStatus+0x48>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d003      	beq.n	8005bcc <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8005bc4:	4b0b      	ldr	r3, [pc, #44]	; (8005bf4 <Cmd_SetStatus+0x48>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2000      	movs	r0, #0
 8005bca:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8005bcc:	4b0a      	ldr	r3, [pc, #40]	; (8005bf8 <Cmd_SetStatus+0x4c>)
 8005bce:	2200      	movs	r2, #0
 8005bd0:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8005bd2:	e00b      	b.n	8005bec <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8005bd4:	4b08      	ldr	r3, [pc, #32]	; (8005bf8 <Cmd_SetStatus+0x4c>)
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8005bda:	4b06      	ldr	r3, [pc, #24]	; (8005bf4 <Cmd_SetStatus+0x48>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d004      	beq.n	8005bec <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8005be2:	4b04      	ldr	r3, [pc, #16]	; (8005bf4 <Cmd_SetStatus+0x48>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2001      	movs	r0, #1
 8005be8:	4798      	blx	r3
  return;
 8005bea:	bf00      	nop
 8005bec:	bf00      	nop
}
 8005bee:	3708      	adds	r7, #8
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	200002ec 	.word	0x200002ec
 8005bf8:	2000015c 	.word	0x2000015c

08005bfc <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8005c04:	2000      	movs	r0, #0
 8005c06:	f7fa ffc2 	bl	8000b8e <shci_cmd_resp_release>

  return;
 8005c0a:	bf00      	nop
}
 8005c0c:	3708      	adds	r7, #8
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
	...

08005c14 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8005c1c:	6879      	ldr	r1, [r7, #4]
 8005c1e:	4805      	ldr	r0, [pc, #20]	; (8005c34 <TlUserEvtReceived+0x20>)
 8005c20:	f000 fae6 	bl	80061f0 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8005c24:	4803      	ldr	r0, [pc, #12]	; (8005c34 <TlUserEvtReceived+0x20>)
 8005c26:	f7fa ffa6 	bl	8000b76 <shci_notify_asynch_evt>

  return;
 8005c2a:	bf00      	nop
}
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	20000154 	.word	0x20000154

08005c38 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a05      	ldr	r2, [pc, #20]	; (8005c58 <shci_register_io_bus+0x20>)
 8005c44:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a04      	ldr	r2, [pc, #16]	; (8005c5c <shci_register_io_bus+0x24>)
 8005c4a:	611a      	str	r2, [r3, #16]

  return;
 8005c4c:	bf00      	nop
}
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr
 8005c58:	08005df5 	.word	0x08005df5
 8005c5c:	08005e49 	.word	0x08005e49

08005c60 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8005c64:	f000 ffd4 	bl	8006c10 <HW_IPCC_Enable>

  return;
 8005c68:	bf00      	nop
}
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <TL_Init>:


void TL_Init( void )
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8005c70:	4b10      	ldr	r3, [pc, #64]	; (8005cb4 <TL_Init+0x48>)
 8005c72:	4a11      	ldr	r2, [pc, #68]	; (8005cb8 <TL_Init+0x4c>)
 8005c74:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8005c76:	4b0f      	ldr	r3, [pc, #60]	; (8005cb4 <TL_Init+0x48>)
 8005c78:	4a10      	ldr	r2, [pc, #64]	; (8005cbc <TL_Init+0x50>)
 8005c7a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8005c7c:	4b0d      	ldr	r3, [pc, #52]	; (8005cb4 <TL_Init+0x48>)
 8005c7e:	4a10      	ldr	r2, [pc, #64]	; (8005cc0 <TL_Init+0x54>)
 8005c80:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8005c82:	4b0c      	ldr	r3, [pc, #48]	; (8005cb4 <TL_Init+0x48>)
 8005c84:	4a0f      	ldr	r2, [pc, #60]	; (8005cc4 <TL_Init+0x58>)
 8005c86:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8005c88:	4b0a      	ldr	r3, [pc, #40]	; (8005cb4 <TL_Init+0x48>)
 8005c8a:	4a0f      	ldr	r2, [pc, #60]	; (8005cc8 <TL_Init+0x5c>)
 8005c8c:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8005c8e:	4b09      	ldr	r3, [pc, #36]	; (8005cb4 <TL_Init+0x48>)
 8005c90:	4a0e      	ldr	r2, [pc, #56]	; (8005ccc <TL_Init+0x60>)
 8005c92:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8005c94:	4b07      	ldr	r3, [pc, #28]	; (8005cb4 <TL_Init+0x48>)
 8005c96:	4a0e      	ldr	r2, [pc, #56]	; (8005cd0 <TL_Init+0x64>)
 8005c98:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8005c9a:	4b06      	ldr	r3, [pc, #24]	; (8005cb4 <TL_Init+0x48>)
 8005c9c:	4a0d      	ldr	r2, [pc, #52]	; (8005cd4 <TL_Init+0x68>)
 8005c9e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8005ca0:	4b04      	ldr	r3, [pc, #16]	; (8005cb4 <TL_Init+0x48>)
 8005ca2:	4a0d      	ldr	r2, [pc, #52]	; (8005cd8 <TL_Init+0x6c>)
 8005ca4:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8005ca6:	4b03      	ldr	r3, [pc, #12]	; (8005cb4 <TL_Init+0x48>)
 8005ca8:	4a0c      	ldr	r2, [pc, #48]	; (8005cdc <TL_Init+0x70>)
 8005caa:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8005cac:	f000 ffc4 	bl	8006c38 <HW_IPCC_Init>

  return;
 8005cb0:	bf00      	nop
}
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	20030000 	.word	0x20030000
 8005cb8:	20030028 	.word	0x20030028
 8005cbc:	20030048 	.word	0x20030048
 8005cc0:	20030058 	.word	0x20030058
 8005cc4:	20030068 	.word	0x20030068
 8005cc8:	20030070 	.word	0x20030070
 8005ccc:	20030078 	.word	0x20030078
 8005cd0:	20030080 	.word	0x20030080
 8005cd4:	2003009c 	.word	0x2003009c
 8005cd8:	200300a0 	.word	0x200300a0
 8005cdc:	200300ac 	.word	0x200300ac

08005ce0 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8005cec:	4811      	ldr	r0, [pc, #68]	; (8005d34 <TL_BLE_Init+0x54>)
 8005cee:	f000 fa27 	bl	8006140 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8005cf2:	4b11      	ldr	r3, [pc, #68]	; (8005d38 <TL_BLE_Init+0x58>)
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	689a      	ldr	r2, [r3, #8]
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	68da      	ldr	r2, [r3, #12]
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	4a0c      	ldr	r2, [pc, #48]	; (8005d3c <TL_BLE_Init+0x5c>)
 8005d0c:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	4a08      	ldr	r2, [pc, #32]	; (8005d34 <TL_BLE_Init+0x54>)
 8005d12:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8005d14:	f000 ffa6 	bl	8006c64 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a08      	ldr	r2, [pc, #32]	; (8005d40 <TL_BLE_Init+0x60>)
 8005d1e:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	4a07      	ldr	r2, [pc, #28]	; (8005d44 <TL_BLE_Init+0x64>)
 8005d26:	6013      	str	r3, [r2, #0]

  return 0;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	200300c8 	.word	0x200300c8
 8005d38:	20030000 	.word	0x20030000
 8005d3c:	20030a58 	.word	0x20030a58
 8005d40:	200002f8 	.word	0x200002f8
 8005d44:	200002fc 	.word	0x200002fc

08005d48 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	460b      	mov	r3, r1
 8005d52:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8005d54:	4b09      	ldr	r3, [pc, #36]	; (8005d7c <TL_BLE_SendCmd+0x34>)
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8005d5e:	4b07      	ldr	r3, [pc, #28]	; (8005d7c <TL_BLE_SendCmd+0x34>)
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4619      	mov	r1, r3
 8005d66:	2001      	movs	r0, #1
 8005d68:	f000 f96c 	bl	8006044 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8005d6c:	f000 ff84 	bl	8006c78 <HW_IPCC_BLE_SendCmd>

  return 0;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3708      	adds	r7, #8
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	20030000 	.word	0x20030000

08005d80 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8005d86:	e01c      	b.n	8005dc2 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8005d88:	1d3b      	adds	r3, r7, #4
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	4812      	ldr	r0, [pc, #72]	; (8005dd8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8005d8e:	f000 fa76 	bl	800627e <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	7a5b      	ldrb	r3, [r3, #9]
 8005d96:	2b0f      	cmp	r3, #15
 8005d98:	d003      	beq.n	8005da2 <HW_IPCC_BLE_RxEvtNot+0x22>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	7a5b      	ldrb	r3, [r3, #9]
 8005d9e:	2b0e      	cmp	r3, #14
 8005da0:	d105      	bne.n	8005dae <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4619      	mov	r1, r3
 8005da6:	2002      	movs	r0, #2
 8005da8:	f000 f94c 	bl	8006044 <OutputDbgTrace>
 8005dac:	e004      	b.n	8005db8 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4619      	mov	r1, r3
 8005db2:	2003      	movs	r0, #3
 8005db4:	f000 f946 	bl	8006044 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8005db8:	4b08      	ldr	r3, [pc, #32]	; (8005ddc <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	4610      	mov	r0, r2
 8005dc0:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8005dc2:	4805      	ldr	r0, [pc, #20]	; (8005dd8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8005dc4:	f000 f9cc 	bl	8006160 <LST_is_empty>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d0dc      	beq.n	8005d88 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8005dce:	bf00      	nop
}
 8005dd0:	3708      	adds	r7, #8
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	200300c8 	.word	0x200300c8
 8005ddc:	200002f8 	.word	0x200002f8

08005de0 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8005de4:	4b02      	ldr	r3, [pc, #8]	; (8005df0 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4798      	blx	r3

  return;
 8005dea:	bf00      	nop
}
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	200002fc 	.word	0x200002fc

08005df4 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8005e00:	480d      	ldr	r0, [pc, #52]	; (8005e38 <TL_SYS_Init+0x44>)
 8005e02:	f000 f99d 	bl	8006140 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8005e06:	4b0d      	ldr	r3, [pc, #52]	; (8005e3c <TL_SYS_Init+0x48>)
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	689a      	ldr	r2, [r3, #8]
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	4a08      	ldr	r2, [pc, #32]	; (8005e38 <TL_SYS_Init+0x44>)
 8005e18:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8005e1a:	f000 ff4f 	bl	8006cbc <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a07      	ldr	r2, [pc, #28]	; (8005e40 <TL_SYS_Init+0x4c>)
 8005e24:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	4a06      	ldr	r2, [pc, #24]	; (8005e44 <TL_SYS_Init+0x50>)
 8005e2c:	6013      	str	r3, [r2, #0]

  return 0;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3710      	adds	r7, #16
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	200300d0 	.word	0x200300d0
 8005e3c:	20030000 	.word	0x20030000
 8005e40:	20000300 	.word	0x20000300
 8005e44:	20000304 	.word	0x20000304

08005e48 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	460b      	mov	r3, r1
 8005e52:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8005e54:	4b09      	ldr	r3, [pc, #36]	; (8005e7c <TL_SYS_SendCmd+0x34>)
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2210      	movs	r2, #16
 8005e5c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8005e5e:	4b07      	ldr	r3, [pc, #28]	; (8005e7c <TL_SYS_SendCmd+0x34>)
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4619      	mov	r1, r3
 8005e66:	2004      	movs	r0, #4
 8005e68:	f000 f8ec 	bl	8006044 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8005e6c:	f000 ff30 	bl	8006cd0 <HW_IPCC_SYS_SendCmd>

  return 0;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3708      	adds	r7, #8
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	20030000 	.word	0x20030000

08005e80 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8005e84:	4b07      	ldr	r3, [pc, #28]	; (8005ea4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	2005      	movs	r0, #5
 8005e8e:	f000 f8d9 	bl	8006044 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8005e92:	4b05      	ldr	r3, [pc, #20]	; (8005ea8 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a03      	ldr	r2, [pc, #12]	; (8005ea4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8005e98:	68d2      	ldr	r2, [r2, #12]
 8005e9a:	6812      	ldr	r2, [r2, #0]
 8005e9c:	4610      	mov	r0, r2
 8005e9e:	4798      	blx	r3

  return;
 8005ea0:	bf00      	nop
}
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	20030000 	.word	0x20030000
 8005ea8:	20000300 	.word	0x20000300

08005eac <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8005eb2:	e00e      	b.n	8005ed2 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8005eb4:	1d3b      	adds	r3, r7, #4
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	480b      	ldr	r0, [pc, #44]	; (8005ee8 <HW_IPCC_SYS_EvtNot+0x3c>)
 8005eba:	f000 f9e0 	bl	800627e <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	2006      	movs	r0, #6
 8005ec4:	f000 f8be 	bl	8006044 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8005ec8:	4b08      	ldr	r3, [pc, #32]	; (8005eec <HW_IPCC_SYS_EvtNot+0x40>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	4610      	mov	r0, r2
 8005ed0:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8005ed2:	4805      	ldr	r0, [pc, #20]	; (8005ee8 <HW_IPCC_SYS_EvtNot+0x3c>)
 8005ed4:	f000 f944 	bl	8006160 <LST_is_empty>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d0ea      	beq.n	8005eb4 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8005ede:	bf00      	nop
}
 8005ee0:	3708      	adds	r7, #8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	200300d0 	.word	0x200300d0
 8005eec:	20000304 	.word	0x20000304

08005ef0 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8005ef8:	4817      	ldr	r0, [pc, #92]	; (8005f58 <TL_MM_Init+0x68>)
 8005efa:	f000 f921 	bl	8006140 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8005efe:	4817      	ldr	r0, [pc, #92]	; (8005f5c <TL_MM_Init+0x6c>)
 8005f00:	f000 f91e 	bl	8006140 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8005f04:	4b16      	ldr	r3, [pc, #88]	; (8005f60 <TL_MM_Init+0x70>)
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	4a16      	ldr	r2, [pc, #88]	; (8005f64 <TL_MM_Init+0x74>)
 8005f0a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8005f0c:	4b15      	ldr	r3, [pc, #84]	; (8005f64 <TL_MM_Init+0x74>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	6892      	ldr	r2, [r2, #8]
 8005f14:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8005f16:	4b13      	ldr	r3, [pc, #76]	; (8005f64 <TL_MM_Init+0x74>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	68d2      	ldr	r2, [r2, #12]
 8005f1e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8005f20:	4b10      	ldr	r3, [pc, #64]	; (8005f64 <TL_MM_Init+0x74>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a0c      	ldr	r2, [pc, #48]	; (8005f58 <TL_MM_Init+0x68>)
 8005f26:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8005f28:	4b0e      	ldr	r3, [pc, #56]	; (8005f64 <TL_MM_Init+0x74>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	6812      	ldr	r2, [r2, #0]
 8005f30:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8005f32:	4b0c      	ldr	r3, [pc, #48]	; (8005f64 <TL_MM_Init+0x74>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	6852      	ldr	r2, [r2, #4]
 8005f3a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8005f3c:	4b09      	ldr	r3, [pc, #36]	; (8005f64 <TL_MM_Init+0x74>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	6912      	ldr	r2, [r2, #16]
 8005f44:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8005f46:	4b07      	ldr	r3, [pc, #28]	; (8005f64 <TL_MM_Init+0x74>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	6952      	ldr	r2, [r2, #20]
 8005f4e:	619a      	str	r2, [r3, #24]

  return;
 8005f50:	bf00      	nop
}
 8005f52:	3708      	adds	r7, #8
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	200300b8 	.word	0x200300b8
 8005f5c:	200002f0 	.word	0x200002f0
 8005f60:	20030000 	.word	0x20030000
 8005f64:	20000308 	.word	0x20000308

08005f68 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8005f70:	6879      	ldr	r1, [r7, #4]
 8005f72:	4807      	ldr	r0, [pc, #28]	; (8005f90 <TL_MM_EvtDone+0x28>)
 8005f74:	f000 f93c 	bl	80061f0 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8005f78:	6879      	ldr	r1, [r7, #4]
 8005f7a:	2000      	movs	r0, #0
 8005f7c:	f000 f862 	bl	8006044 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8005f80:	4804      	ldr	r0, [pc, #16]	; (8005f94 <TL_MM_EvtDone+0x2c>)
 8005f82:	f000 fecb 	bl	8006d1c <HW_IPCC_MM_SendFreeBuf>

  return;
 8005f86:	bf00      	nop
}
 8005f88:	3708      	adds	r7, #8
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	200002f0 	.word	0x200002f0
 8005f94:	08005f99 	.word	0x08005f99

08005f98 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8005f9e:	e00c      	b.n	8005fba <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8005fa0:	1d3b      	adds	r3, r7, #4
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	480a      	ldr	r0, [pc, #40]	; (8005fd0 <SendFreeBuf+0x38>)
 8005fa6:	f000 f96a 	bl	800627e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8005faa:	4b0a      	ldr	r3, [pc, #40]	; (8005fd4 <SendFreeBuf+0x3c>)
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	4611      	mov	r1, r2
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f000 f91b 	bl	80061f0 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8005fba:	4805      	ldr	r0, [pc, #20]	; (8005fd0 <SendFreeBuf+0x38>)
 8005fbc:	f000 f8d0 	bl	8006160 <LST_is_empty>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d0ec      	beq.n	8005fa0 <SendFreeBuf+0x8>
  }

  return;
 8005fc6:	bf00      	nop
}
 8005fc8:	3708      	adds	r7, #8
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	200002f0 	.word	0x200002f0
 8005fd4:	20030000 	.word	0x20030000

08005fd8 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8005fdc:	4805      	ldr	r0, [pc, #20]	; (8005ff4 <TL_TRACES_Init+0x1c>)
 8005fde:	f000 f8af 	bl	8006140 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8005fe2:	4b05      	ldr	r3, [pc, #20]	; (8005ff8 <TL_TRACES_Init+0x20>)
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	4a03      	ldr	r2, [pc, #12]	; (8005ff4 <TL_TRACES_Init+0x1c>)
 8005fe8:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8005fea:	f000 fecd 	bl	8006d88 <HW_IPCC_TRACES_Init>

  return;
 8005fee:	bf00      	nop
}
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	200300c0 	.word	0x200300c0
 8005ff8:	20030000 	.word	0x20030000

08005ffc <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8006002:	e008      	b.n	8006016 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8006004:	1d3b      	adds	r3, r7, #4
 8006006:	4619      	mov	r1, r3
 8006008:	4808      	ldr	r0, [pc, #32]	; (800602c <HW_IPCC_TRACES_EvtNot+0x30>)
 800600a:	f000 f938 	bl	800627e <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4618      	mov	r0, r3
 8006012:	f000 f80d 	bl	8006030 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8006016:	4805      	ldr	r0, [pc, #20]	; (800602c <HW_IPCC_TRACES_EvtNot+0x30>)
 8006018:	f000 f8a2 	bl	8006160 <LST_is_empty>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d0f0      	beq.n	8006004 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8006022:	bf00      	nop
}
 8006024:	3708      	adds	r7, #8
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	200300c0 	.word	0x200300c0

08006030 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8006038:	bf00      	nop
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	4603      	mov	r3, r0
 800604c:	6039      	str	r1, [r7, #0]
 800604e:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8006050:	79fb      	ldrb	r3, [r7, #7]
 8006052:	2b06      	cmp	r3, #6
 8006054:	d845      	bhi.n	80060e2 <OutputDbgTrace+0x9e>
 8006056:	a201      	add	r2, pc, #4	; (adr r2, 800605c <OutputDbgTrace+0x18>)
 8006058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605c:	08006079 	.word	0x08006079
 8006060:	0800609d 	.word	0x0800609d
 8006064:	080060a3 	.word	0x080060a3
 8006068:	080060b7 	.word	0x080060b7
 800606c:	080060c3 	.word	0x080060c3
 8006070:	080060c9 	.word	0x080060c9
 8006074:	080060d7 	.word	0x080060d7
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	7a5b      	ldrb	r3, [r3, #9]
 8006080:	2bff      	cmp	r3, #255	; 0xff
 8006082:	d005      	beq.n	8006090 <OutputDbgTrace+0x4c>
 8006084:	2bff      	cmp	r3, #255	; 0xff
 8006086:	dc05      	bgt.n	8006094 <OutputDbgTrace+0x50>
 8006088:	2b0e      	cmp	r3, #14
 800608a:	d005      	beq.n	8006098 <OutputDbgTrace+0x54>
 800608c:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800608e:	e001      	b.n	8006094 <OutputDbgTrace+0x50>
          break;
 8006090:	bf00      	nop
 8006092:	e027      	b.n	80060e4 <OutputDbgTrace+0xa0>
          break;
 8006094:	bf00      	nop
 8006096:	e025      	b.n	80060e4 <OutputDbgTrace+0xa0>
          break;
 8006098:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800609a:	e023      	b.n	80060e4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80060a0:	e020      	b.n	80060e4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	7a5b      	ldrb	r3, [r3, #9]
 80060aa:	2b0e      	cmp	r3, #14
 80060ac:	d001      	beq.n	80060b2 <OutputDbgTrace+0x6e>
 80060ae:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80060b0:	e000      	b.n	80060b4 <OutputDbgTrace+0x70>
          break;
 80060b2:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80060b4:	e016      	b.n	80060e4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	7a5b      	ldrb	r3, [r3, #9]
 80060be:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80060c0:	e010      	b.n	80060e4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80060c6:	e00d      	b.n	80060e4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	7a5b      	ldrb	r3, [r3, #9]
 80060d0:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80060d2:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80060d4:	e006      	b.n	80060e4 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	7a5b      	ldrb	r3, [r3, #9]
 80060de:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80060e0:	e000      	b.n	80060e4 <OutputDbgTrace+0xa0>

    default:
      break;
 80060e2:	bf00      	nop
  }

  return;
 80060e4:	bf00      	nop
}
 80060e6:	3714      	adds	r7, #20
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	4603      	mov	r3, r0
 80060f8:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80060fa:	4b0f      	ldr	r3, [pc, #60]	; (8006138 <OTP_Read+0x48>)
 80060fc:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80060fe:	e002      	b.n	8006106 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	3b08      	subs	r3, #8
 8006104:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	3307      	adds	r3, #7
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	79fa      	ldrb	r2, [r7, #7]
 800610e:	429a      	cmp	r2, r3
 8006110:	d003      	beq.n	800611a <OTP_Read+0x2a>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	4a09      	ldr	r2, [pc, #36]	; (800613c <OTP_Read+0x4c>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d1f2      	bne.n	8006100 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	3307      	adds	r3, #7
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	79fa      	ldrb	r2, [r7, #7]
 8006122:	429a      	cmp	r2, r3
 8006124:	d001      	beq.n	800612a <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8006126:	2300      	movs	r3, #0
 8006128:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800612a:	68fb      	ldr	r3, [r7, #12]
}
 800612c:	4618      	mov	r0, r3
 800612e:	3714      	adds	r7, #20
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr
 8006138:	1fff73f8 	.word	0x1fff73f8
 800613c:	1fff7000 	.word	0x1fff7000

08006140 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	605a      	str	r2, [r3, #4]
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8006160:	b480      	push	{r7}
 8006162:	b087      	sub	sp, #28
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006168:	f3ef 8310 	mrs	r3, PRIMASK
 800616c:	60fb      	str	r3, [r7, #12]
  return(result);
 800616e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006170:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006172:	b672      	cpsid	i
}
 8006174:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	429a      	cmp	r2, r3
 800617e:	d102      	bne.n	8006186 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8006180:	2301      	movs	r3, #1
 8006182:	75fb      	strb	r3, [r7, #23]
 8006184:	e001      	b.n	800618a <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8006186:	2300      	movs	r3, #0
 8006188:	75fb      	strb	r3, [r7, #23]
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	f383 8810 	msr	PRIMASK, r3
}
 8006194:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8006196:	7dfb      	ldrb	r3, [r7, #23]
}
 8006198:	4618      	mov	r0, r3
 800619a:	371c      	adds	r7, #28
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b087      	sub	sp, #28
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061ae:	f3ef 8310 	mrs	r3, PRIMASK
 80061b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80061b4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80061b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80061b8:	b672      	cpsid	i
}
 80061ba:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	683a      	ldr	r2, [r7, #0]
 80061ce:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	683a      	ldr	r2, [r7, #0]
 80061d6:	605a      	str	r2, [r3, #4]
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	f383 8810 	msr	PRIMASK, r3
}
 80061e2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80061e4:	bf00      	nop
 80061e6:	371c      	adds	r7, #28
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b087      	sub	sp, #28
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061fa:	f3ef 8310 	mrs	r3, PRIMASK
 80061fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8006200:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006202:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006204:	b672      	cpsid	i
}
 8006206:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685a      	ldr	r2, [r3, #4]
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	683a      	ldr	r2, [r7, #0]
 800621a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	683a      	ldr	r2, [r7, #0]
 8006222:	601a      	str	r2, [r3, #0]
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	f383 8810 	msr	PRIMASK, r3
}
 800622e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8006230:	bf00      	nop
 8006232:	371c      	adds	r7, #28
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800623c:	b480      	push	{r7}
 800623e:	b087      	sub	sp, #28
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006244:	f3ef 8310 	mrs	r3, PRIMASK
 8006248:	60fb      	str	r3, [r7, #12]
  return(result);
 800624a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800624c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800624e:	b672      	cpsid	i
}
 8006250:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	6812      	ldr	r2, [r2, #0]
 800625a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	6852      	ldr	r2, [r2, #4]
 8006264:	605a      	str	r2, [r3, #4]
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	f383 8810 	msr	PRIMASK, r3
}
 8006270:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8006272:	bf00      	nop
 8006274:	371c      	adds	r7, #28
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr

0800627e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b086      	sub	sp, #24
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
 8006286:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006288:	f3ef 8310 	mrs	r3, PRIMASK
 800628c:	60fb      	str	r3, [r7, #12]
  return(result);
 800628e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006290:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006292:	b672      	cpsid	i
}
 8006294:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7ff ffca 	bl	800623c <LST_remove_node>
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	f383 8810 	msr	PRIMASK, r3
}
 80062b2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80062b4:	bf00      	nop
 80062b6:	3718      	adds	r7, #24
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <__NVIC_SystemReset>:
{
 80062bc:	b480      	push	{r7}
 80062be:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80062c0:	f3bf 8f4f 	dsb	sy
}
 80062c4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80062c6:	4b06      	ldr	r3, [pc, #24]	; (80062e0 <__NVIC_SystemReset+0x24>)
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80062ce:	4904      	ldr	r1, [pc, #16]	; (80062e0 <__NVIC_SystemReset+0x24>)
 80062d0:	4b04      	ldr	r3, [pc, #16]	; (80062e4 <__NVIC_SystemReset+0x28>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80062d6:	f3bf 8f4f 	dsb	sy
}
 80062da:	bf00      	nop
    __NOP();
 80062dc:	bf00      	nop
 80062de:	e7fd      	b.n	80062dc <__NVIC_SystemReset+0x20>
 80062e0:	e000ed00 	.word	0xe000ed00
 80062e4:	05fa0004 	.word	0x05fa0004

080062e8 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80062e8:	b480      	push	{r7}
 80062ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80062ec:	4b03      	ldr	r3, [pc, #12]	; (80062fc <LL_FLASH_GetUDN+0x14>)
 80062ee:	681b      	ldr	r3, [r3, #0]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	1fff7580 	.word	0x1fff7580

08006300 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8006300:	b480      	push	{r7}
 8006302:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8006304:	4b03      	ldr	r3, [pc, #12]	; (8006314 <LL_FLASH_GetDeviceID+0x14>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	b2db      	uxtb	r3, r3
}
 800630a:	4618      	mov	r0, r3
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr
 8006314:	1fff7584 	.word	0x1fff7584

08006318 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8006318:	b480      	push	{r7}
 800631a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 800631c:	4b03      	ldr	r3, [pc, #12]	; (800632c <LL_FLASH_GetSTCompanyID+0x14>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	0a1b      	lsrs	r3, r3, #8
}
 8006322:	4618      	mov	r0, r3
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr
 800632c:	1fff7584 	.word	0x1fff7584

08006330 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8006330:	b5b0      	push	{r4, r5, r7, lr}
 8006332:	b090      	sub	sp, #64	; 0x40
 8006334:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
  /* USER CODE BEGIN APP_BLE_Init_1 */
  UTIL_SEQ_RegTask(1<<CFG_TASK_RTC, UTIL_SEQ_RFU, myRTC);
 8006336:	4a1e      	ldr	r2, [pc, #120]	; (80063b0 <APP_BLE_Init+0x80>)
 8006338:	2100      	movs	r1, #0
 800633a:	2004      	movs	r0, #4
 800633c:	f000 fe78 	bl	8007030 <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask(1<<CFG_TASK_RTC, CFG_SCH_PRIO_0);
 8006340:	2100      	movs	r1, #0
 8006342:	2004      	movs	r0, #4
 8006344:	f000 fe96 	bl	8007074 <UTIL_SEQ_SetTask>
  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8006348:	4b1a      	ldr	r3, [pc, #104]	; (80063b4 <APP_BLE_Init+0x84>)
 800634a:	1d3c      	adds	r4, r7, #4
 800634c:	461d      	mov	r5, r3
 800634e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006350:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006352:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006354:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006356:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006358:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800635a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800635e:	e884 0003 	stmia.w	r4, {r0, r1}
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8006362:	f000 f861 	bl	8006428 <Ble_Tl_Init>

#if (CFG_LPM_STANDBY_SUPPORTED == 0)
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8006366:	2101      	movs	r1, #1
 8006368:	2002      	movs	r0, #2
 800636a:	f000 fd35 	bl	8006dd8 <UTIL_LPM_SetOffMode>
#endif /* CFG_LPM_STANDBY_SUPPORTED == 0 */

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800636e:	4a12      	ldr	r2, [pc, #72]	; (80063b8 <APP_BLE_Init+0x88>)
 8006370:	2100      	movs	r1, #0
 8006372:	2002      	movs	r0, #2
 8006374:	f000 fe5c 	bl	8007030 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8006378:	1d3b      	adds	r3, r7, #4
 800637a:	4618      	mov	r0, r3
 800637c:	f7ff f8b4 	bl	80054e8 <SHCI_C2_BLE_Init>
 8006380:	4603      	mov	r3, r0
 8006382:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (status != SHCI_Success)
 8006386:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <APP_BLE_Init+0x62>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800638e:	f7fa feaf 	bl	80010f0 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8006392:	f000 f85f 	bl	8006454 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8006396:	f7ff f81b 	bl	80053d0 <SVCCTL_Init>

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_BEACON_UPDATE_REQ_ID, UTIL_SEQ_RFU, Beacon_Update);
 800639a:	4a08      	ldr	r2, [pc, #32]	; (80063bc <APP_BLE_Init+0x8c>)
 800639c:	2100      	movs	r1, #0
 800639e:	2001      	movs	r0, #1
 80063a0:	f000 fe46 	bl	8007030 <UTIL_SEQ_RegTask>
    EddystoneTLM_Process();
  }
  else if (CFG_BEACON_TYPE & CFG_IBEACON)
  {
    APP_DBG_MSG("Ibeacon advertise\n\r");
    IBeacon_Process();
 80063a4:	f000 fa6e 	bl	8006884 <IBeacon_Process>
  }
  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 80063a8:	bf00      	nop
}
 80063aa:	3740      	adds	r7, #64	; 0x40
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bdb0      	pop	{r4, r5, r7, pc}
 80063b0:	080068d5 	.word	0x080068d5
 80063b4:	080081a8 	.word	0x080081a8
 80063b8:	08005705 	.word	0x08005705
 80063bc:	08006529 	.word	0x08006529

080063c0 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b087      	sub	sp, #28
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	3301      	adds	r3, #1
 80063cc:	617b      	str	r3, [r7, #20]

  switch (p_event_pckt->evt)
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	2bff      	cmp	r3, #255	; 0xff
 80063d4:	d00e      	beq.n	80063f4 <SVCCTL_App_Notification+0x34>
 80063d6:	2bff      	cmp	r3, #255	; 0xff
 80063d8:	dc19      	bgt.n	800640e <SVCCTL_App_Notification+0x4e>
 80063da:	2b05      	cmp	r3, #5
 80063dc:	d019      	beq.n	8006412 <SVCCTL_App_Notification+0x52>
 80063de:	2b3e      	cmp	r3, #62	; 0x3e
 80063e0:	d000      	beq.n	80063e4 <SVCCTL_App_Notification+0x24>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 80063e2:	e014      	b.n	800640e <SVCCTL_App_Notification+0x4e>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	3302      	adds	r3, #2
 80063e8:	60fb      	str	r3, [r7, #12]
      switch (p_meta_evt->subevent)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	2b01      	cmp	r3, #1
          break;
 80063f0:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 80063f2:	e011      	b.n	8006418 <SVCCTL_App_Notification+0x58>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	3302      	adds	r3, #2
 80063f8:	613b      	str	r3, [r7, #16]
      switch (p_blecore_evt->ecode)
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	881b      	ldrh	r3, [r3, #0]
 80063fe:	b29b      	uxth	r3, r3
 8006400:	461a      	mov	r2, r3
 8006402:	f240 4307 	movw	r3, #1031	; 0x407
 8006406:	429a      	cmp	r2, r3
 8006408:	d105      	bne.n	8006416 <SVCCTL_App_Notification+0x56>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800640a:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800640c:	e003      	b.n	8006416 <SVCCTL_App_Notification+0x56>
      break;
 800640e:	bf00      	nop
 8006410:	e002      	b.n	8006418 <SVCCTL_App_Notification+0x58>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8006412:	bf00      	nop
 8006414:	e000      	b.n	8006418 <SVCCTL_App_Notification+0x58>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8006416:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8006418:	2301      	movs	r3, #1
}
 800641a:	4618      	mov	r0, r3
 800641c:	371c      	adds	r7, #28
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
	...

08006428 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800642e:	4b06      	ldr	r3, [pc, #24]	; (8006448 <Ble_Tl_Init+0x20>)
 8006430:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8006432:	4b06      	ldr	r3, [pc, #24]	; (800644c <Ble_Tl_Init+0x24>)
 8006434:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8006436:	463b      	mov	r3, r7
 8006438:	4619      	mov	r1, r3
 800643a:	4805      	ldr	r0, [pc, #20]	; (8006450 <Ble_Tl_Init+0x28>)
 800643c:	f7ff f946 	bl	80056cc <hci_init>

  return;
 8006440:	bf00      	nop
}
 8006442:	3708      	adds	r7, #8
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	200300d8 	.word	0x200300d8
 800644c:	08006691 	.word	0x08006691
 8006450:	08006659 	.word	0x08006659

08006454 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8006454:	b5b0      	push	{r4, r5, r7, lr}
 8006456:	b088      	sub	sp, #32
 8006458:	af02      	add	r7, sp, #8
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800645a:	2300      	movs	r3, #0
 800645c:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800645e:	2392      	movs	r3, #146	; 0x92
 8006460:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8006462:	f7fe fe8a 	bl	800517a <hci_reset>
 8006466:	4603      	mov	r3, r0
 8006468:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800646a:	f000 f88f 	bl	800658c <BleGetBdAddress>
 800646e:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	2106      	movs	r1, #6
 8006474:	2000      	movs	r0, #0
 8006476:	f7fe fd94 	bl	8004fa2 <aci_hal_write_config_data>
 800647a:	4603      	mov	r3, r0
 800647c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800647e:	4a27      	ldr	r2, [pc, #156]	; (800651c <Ble_Hci_Gap_Gatt_Init+0xc8>)
 8006480:	2110      	movs	r1, #16
 8006482:	2018      	movs	r0, #24
 8006484:	f7fe fd8d 	bl	8004fa2 <aci_hal_write_config_data>
 8006488:	4603      	mov	r3, r0
 800648a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800648c:	4a24      	ldr	r2, [pc, #144]	; (8006520 <Ble_Hci_Gap_Gatt_Init+0xcc>)
 800648e:	2110      	movs	r1, #16
 8006490:	2008      	movs	r0, #8
 8006492:	f7fe fd86 	bl	8004fa2 <aci_hal_write_config_data>
 8006496:	4603      	mov	r3, r0
 8006498:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800649a:	2118      	movs	r1, #24
 800649c:	2001      	movs	r0, #1
 800649e:	f7fe fe05 	bl	80050ac <aci_hal_set_tx_power_level>
 80064a2:	4603      	mov	r3, r0
 80064a4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 80064a6:	f7fe fcae 	bl	8004e06 <aci_gatt_init>
 80064aa:	4603      	mov	r3, r0
 80064ac:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 80064ae:	2300      	movs	r3, #0
 80064b0:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80064b2:	7bfb      	ldrb	r3, [r7, #15]
 80064b4:	f043 0301 	orr.w	r3, r3, #1
 80064b8:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif /* BLE_CFG_CENTRAL == 1 */

  if (role > 0)
 80064ba:	7bfb      	ldrb	r3, [r7, #15]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d01f      	beq.n	8006500 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = "STM32WB";
 80064c0:	4b18      	ldr	r3, [pc, #96]	; (8006524 <Ble_Hci_Gap_Gatt_Init+0xd0>)
 80064c2:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 80064c4:	1dba      	adds	r2, r7, #6
 80064c6:	7bf8      	ldrb	r0, [r7, #15]
 80064c8:	1cbb      	adds	r3, r7, #2
 80064ca:	9301      	str	r3, [sp, #4]
 80064cc:	1d3b      	adds	r3, r7, #4
 80064ce:	9300      	str	r3, [sp, #0]
 80064d0:	4613      	mov	r3, r2
 80064d2:	2207      	movs	r2, #7
 80064d4:	2100      	movs	r1, #0
 80064d6:	f7fe fb23 	bl	8004b20 <aci_gap_init>
 80064da:	4603      	mov	r3, r0
 80064dc:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 80064de:	88fc      	ldrh	r4, [r7, #6]
 80064e0:	88bd      	ldrh	r5, [r7, #4]
 80064e2:	68b8      	ldr	r0, [r7, #8]
 80064e4:	f7f9 fe4c 	bl	8000180 <strlen>
 80064e8:	4603      	mov	r3, r0
 80064ea:	b2da      	uxtb	r2, r3
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	9300      	str	r3, [sp, #0]
 80064f0:	4613      	mov	r3, r2
 80064f2:	2200      	movs	r2, #0
 80064f4:	4629      	mov	r1, r5
 80064f6:	4620      	mov	r0, r4
 80064f8:	f7fe fcaa 	bl	8004e50 <aci_gatt_update_char_value>
 80064fc:	4603      	mov	r3, r0
 80064fe:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8006500:	88f8      	ldrh	r0, [r7, #6]
 8006502:	8879      	ldrh	r1, [r7, #2]
 8006504:	463b      	mov	r3, r7
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	2302      	movs	r3, #2
 800650a:	2200      	movs	r2, #0
 800650c:	f7fe fca0 	bl	8004e50 <aci_gatt_update_char_value>
 8006510:	4603      	mov	r3, r0
 8006512:	75fb      	strb	r3, [r7, #23]
  else
  {
    BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Appearance\n");
  }

}
 8006514:	bf00      	nop
 8006516:	3718      	adds	r7, #24
 8006518:	46bd      	mov	sp, r7
 800651a:	bdb0      	pop	{r4, r5, r7, pc}
 800651c:	08008424 	.word	0x08008424
 8006520:	08008434 	.word	0x08008434
 8006524:	080081e0 	.word	0x080081e0

08006528 <Beacon_Update>:
static void Beacon_Update(void)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
  FLASH_EraseInitTypeDef erase;
  uint32_t pageError = 0;
 800652e:	2300      	movs	r3, #0
 8006530:	603b      	str	r3, [r7, #0]

  if (sector_type != 0)
 8006532:	4b13      	ldr	r3, [pc, #76]	; (8006580 <Beacon_Update+0x58>)
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d01b      	beq.n	8006572 <Beacon_Update+0x4a>
  {
    erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800653a:	2302      	movs	r3, #2
 800653c:	607b      	str	r3, [r7, #4]
    erase.Page      = sector_type;
 800653e:	4b10      	ldr	r3, [pc, #64]	; (8006580 <Beacon_Update+0x58>)
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	60bb      	str	r3, [r7, #8]
    if (sector_type == APP_SECTORS)
 8006544:	4b0e      	ldr	r3, [pc, #56]	; (8006580 <Beacon_Update+0x58>)
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	2b07      	cmp	r3, #7
 800654a:	d102      	bne.n	8006552 <Beacon_Update+0x2a>
    {
      erase.NbPages = 2;  /* 2 sectors for beacon application */
 800654c:	2302      	movs	r3, #2
 800654e:	60fb      	str	r3, [r7, #12]
 8006550:	e001      	b.n	8006556 <Beacon_Update+0x2e>
    }
    else
    {
      erase.NbPages = 1; /* 1 sector for beacon user data */
 8006552:	2301      	movs	r3, #1
 8006554:	60fb      	str	r3, [r7, #12]
    }

    HAL_FLASH_Unlock();
 8006556:	f7fb fa71 	bl	8001a3c <HAL_FLASH_Unlock>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_OPTVERR);
 800655a:	4b0a      	ldr	r3, [pc, #40]	; (8006584 <Beacon_Update+0x5c>)
 800655c:	f248 0211 	movw	r2, #32785	; 0x8011
 8006560:	611a      	str	r2, [r3, #16]

    HAL_FLASHEx_Erase(&erase, &pageError);
 8006562:	463a      	mov	r2, r7
 8006564:	1d3b      	adds	r3, r7, #4
 8006566:	4611      	mov	r1, r2
 8006568:	4618      	mov	r0, r3
 800656a:	f7fb fb13 	bl	8001b94 <HAL_FLASHEx_Erase>

    HAL_FLASH_Lock();
 800656e:	f7fb fa87 	bl	8001a80 <HAL_FLASH_Lock>
  }

  *(uint32_t*) SRAM1_BASE = BOOT_MODE_AND_SECTOR;
 8006572:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8006576:	4a04      	ldr	r2, [pc, #16]	; (8006588 <Beacon_Update+0x60>)
 8006578:	601a      	str	r2, [r3, #0]
  /**
   * Boot Mode:    1 (OTA)
   * Sector Index: 6
   * Nb Sectors  : 1
   */
  NVIC_SystemReset();
 800657a:	f7ff fe9f 	bl	80062bc <__NVIC_SystemReset>
 800657e:	bf00      	nop
 8006580:	20000312 	.word	0x20000312
 8006584:	58004000 	.word	0x58004000
 8006588:	00010601 	.word	0x00010601

0800658c <BleGetBdAddress>:
}

const uint8_t* BleGetBdAddress(void)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b086      	sub	sp, #24
 8006590:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8006592:	f7ff fea9 	bl	80062e8 <LL_FLASH_GetUDN>
 8006596:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800659e:	d023      	beq.n	80065e8 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80065a0:	f7ff feba 	bl	8006318 <LL_FLASH_GetSTCompanyID>
 80065a4:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80065a6:	f7ff feab 	bl	8006300 <LL_FLASH_GetDeviceID>
 80065aa:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	b2da      	uxtb	r2, r3
 80065b0:	4b16      	ldr	r3, [pc, #88]	; (800660c <BleGetBdAddress+0x80>)
 80065b2:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	0a1b      	lsrs	r3, r3, #8
 80065b8:	b2da      	uxtb	r2, r3
 80065ba:	4b14      	ldr	r3, [pc, #80]	; (800660c <BleGetBdAddress+0x80>)
 80065bc:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	b2da      	uxtb	r2, r3
 80065c2:	4b12      	ldr	r3, [pc, #72]	; (800660c <BleGetBdAddress+0x80>)
 80065c4:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	b2da      	uxtb	r2, r3
 80065ca:	4b10      	ldr	r3, [pc, #64]	; (800660c <BleGetBdAddress+0x80>)
 80065cc:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	0a1b      	lsrs	r3, r3, #8
 80065d2:	b2da      	uxtb	r2, r3
 80065d4:	4b0d      	ldr	r3, [pc, #52]	; (800660c <BleGetBdAddress+0x80>)
 80065d6:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	0c1b      	lsrs	r3, r3, #16
 80065dc:	b2da      	uxtb	r2, r3
 80065de:	4b0b      	ldr	r3, [pc, #44]	; (800660c <BleGetBdAddress+0x80>)
 80065e0:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 80065e2:	4b0a      	ldr	r3, [pc, #40]	; (800660c <BleGetBdAddress+0x80>)
 80065e4:	617b      	str	r3, [r7, #20]
 80065e6:	e00b      	b.n	8006600 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 80065e8:	2000      	movs	r0, #0
 80065ea:	f7ff fd81 	bl	80060f0 <OTP_Read>
 80065ee:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d002      	beq.n	80065fc <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	617b      	str	r3, [r7, #20]
 80065fa:	e001      	b.n	8006600 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 80065fc:	4b04      	ldr	r3, [pc, #16]	; (8006610 <BleGetBdAddress+0x84>)
 80065fe:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8006600:	697b      	ldr	r3, [r7, #20]
}
 8006602:	4618      	mov	r0, r3
 8006604:	3718      	adds	r7, #24
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	2000030c 	.word	0x2000030c
 8006610:	0800841c 	.word	0x0800841c

08006614 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800661c:	2100      	movs	r1, #0
 800661e:	2002      	movs	r0, #2
 8006620:	f000 fd28 	bl	8007074 <UTIL_SEQ_SetTask>

  return;
 8006624:	bf00      	nop
}
 8006626:	3708      	adds	r7, #8
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8006634:	2001      	movs	r0, #1
 8006636:	f000 fd89 	bl	800714c <UTIL_SEQ_SetEvt>

  return;
 800663a:	bf00      	nop
}
 800663c:	3708      	adds	r7, #8
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}

08006642 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8006642:	b580      	push	{r7, lr}
 8006644:	b082      	sub	sp, #8
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800664a:	2001      	movs	r0, #1
 800664c:	f000 fd9e 	bl	800718c <UTIL_SEQ_WaitEvt>

  return;
 8006650:	bf00      	nop
}
 8006652:	3708      	adds	r7, #8
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	3308      	adds	r3, #8
 800666a:	4618      	mov	r0, r3
 800666c:	f7fe fee8 	bl	8005440 <SVCCTL_UserEvtRx>
 8006670:	4603      	mov	r3, r0
 8006672:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8006674:	7afb      	ldrb	r3, [r7, #11]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d003      	beq.n	8006682 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2201      	movs	r2, #1
 800667e:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8006680:	e003      	b.n	800668a <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	701a      	strb	r2, [r3, #0]
  return;
 8006688:	bf00      	nop
}
 800668a:	3710      	adds	r7, #16
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	4603      	mov	r3, r0
 8006698:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800669a:	79fb      	ldrb	r3, [r7, #7]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d002      	beq.n	80066a6 <BLE_StatusNot+0x16>
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d006      	beq.n	80066b2 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 80066a4:	e00b      	b.n	80066be <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80066a6:	2307      	movs	r3, #7
 80066a8:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	f000 fd0e 	bl	80070cc <UTIL_SEQ_PauseTask>
      break;
 80066b0:	e005      	b.n	80066be <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80066b2:	2307      	movs	r3, #7
 80066b4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 80066b6:	68f8      	ldr	r0, [r7, #12]
 80066b8:	f000 fd28 	bl	800710c <UTIL_SEQ_ResumeTask>
      break;
 80066bc:	bf00      	nop
  }

  return;
 80066be:	bf00      	nop
}
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
	...

080066c8 <IBeacon_Init>:
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/

static tBleStatus IBeacon_Init(IBeacon_InitTypeDef *IBeacon_Init)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b094      	sub	sp, #80	; 0x50
 80066cc:	af08      	add	r7, sp, #32
 80066ce:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN IBeacon_Init_1 */

/* USER CODE END IBeacon_Init_1 */
  tBleStatus ret = BLE_STATUS_SUCCESS;
 80066d0:	2300      	movs	r3, #0
 80066d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint16_t AdvertisingInterval = (IBeacon_Init->AdvertisingInterval * ADVERTISING_INTERVAL_INCREMENT / 10);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	881b      	ldrh	r3, [r3, #0]
 80066da:	011b      	lsls	r3, r3, #4
 80066dc:	4a67      	ldr	r2, [pc, #412]	; (800687c <IBeacon_Init+0x1b4>)
 80066de:	fb82 1203 	smull	r1, r2, r2, r3
 80066e2:	1092      	asrs	r2, r2, #2
 80066e4:	17db      	asrs	r3, r3, #31
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* Disable scan response. */
  hci_le_set_scan_response_data(0, NULL);
 80066ea:	2100      	movs	r1, #0
 80066ec:	2000      	movs	r0, #0
 80066ee:	f7fe fd68 	bl	80051c2 <hci_le_set_scan_response_data>

  /* Put the device in a non-connectable mode. */
  ret = aci_gap_set_discoverable(ADV_NONCONN_IND,                          /*< Advertise as non-connectable, undirected. */
 80066f2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80066f4:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 80066f6:	2300      	movs	r3, #0
 80066f8:	9306      	str	r3, [sp, #24]
 80066fa:	2300      	movs	r3, #0
 80066fc:	9305      	str	r3, [sp, #20]
 80066fe:	2300      	movs	r3, #0
 8006700:	9304      	str	r3, [sp, #16]
 8006702:	2300      	movs	r3, #0
 8006704:	9303      	str	r3, [sp, #12]
 8006706:	2300      	movs	r3, #0
 8006708:	9302      	str	r3, [sp, #8]
 800670a:	2300      	movs	r3, #0
 800670c:	9301      	str	r3, [sp, #4]
 800670e:	2300      	movs	r3, #0
 8006710:	9300      	str	r3, [sp, #0]
 8006712:	2300      	movs	r3, #0
 8006714:	2003      	movs	r0, #3
 8006716:	f7fe f909 	bl	800492c <aci_gap_set_discoverable>
 800671a:	4603      	mov	r3, r0
 800671c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                 PUBLIC_ADDR, NO_WHITE_LIST_USE,           /*< Use the public address, with no white list. */
                                 0, NULL,                                  /*< Do not use a local name. */
                                 0, NULL,                                  /*< Do not include the service UUID list. */
                                 0, 0);                                    /*< Do not set a slave connection interval. */

  if (ret != BLE_STATUS_SUCCESS)
 8006720:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006724:	2b00      	cmp	r3, #0
 8006726:	d002      	beq.n	800672e <IBeacon_Init+0x66>
  {
    return ret;
 8006728:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800672c:	e0a1      	b.n	8006872 <IBeacon_Init+0x1aa>
  }

  /* Remove the TX power level advertisement (this is done to decrease the packet size). */
  ret = aci_gap_delete_ad_type(AD_TYPE_TX_POWER_LEVEL);
 800672e:	200a      	movs	r0, #10
 8006730:	f7fe fb15 	bl	8004d5e <aci_gap_delete_ad_type>
 8006734:	4603      	mov	r3, r0
 8006736:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 800673a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800673e:	2b00      	cmp	r3, #0
 8006740:	d002      	beq.n	8006748 <IBeacon_Init+0x80>
  {
    return ret;
 8006742:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006746:	e094      	b.n	8006872 <IBeacon_Init+0x1aa>
  }

  uint8_t service_data[] =
 8006748:	231a      	movs	r3, #26
 800674a:	743b      	strb	r3, [r7, #16]
 800674c:	23ff      	movs	r3, #255	; 0xff
 800674e:	747b      	strb	r3, [r7, #17]
 8006750:	234c      	movs	r3, #76	; 0x4c
 8006752:	74bb      	strb	r3, [r7, #18]
 8006754:	2300      	movs	r3, #0
 8006756:	74fb      	strb	r3, [r7, #19]
 8006758:	2302      	movs	r3, #2
 800675a:	753b      	strb	r3, [r7, #20]
 800675c:	2315      	movs	r3, #21
 800675e:	757b      	strb	r3, [r7, #21]
  {
    26,                                                                      /*< Length. */
    AD_TYPE_MANUFACTURER_SPECIFIC_DATA,                                      /*< Manufacturer Specific Data data type value. */
    0x4C, 0x00, 0x02, 0x15,                                                  /*< 32-bit Manufacturer Data. */
    IBeacon_Init->UuID[0],                                                   /*< 16-byte Proximity UUID. */
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	781b      	ldrb	r3, [r3, #0]
  uint8_t service_data[] =
 8006766:	75bb      	strb	r3, [r7, #22]
    IBeacon_Init->UuID[1],
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 800676c:	785b      	ldrb	r3, [r3, #1]
 800676e:	75fb      	strb	r3, [r7, #23]
    IBeacon_Init->UuID[2],
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8006774:	789b      	ldrb	r3, [r3, #2]
 8006776:	763b      	strb	r3, [r7, #24]
    IBeacon_Init->UuID[3],
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 800677c:	78db      	ldrb	r3, [r3, #3]
 800677e:	767b      	strb	r3, [r7, #25]
    IBeacon_Init->UuID[4],
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8006784:	791b      	ldrb	r3, [r3, #4]
 8006786:	76bb      	strb	r3, [r7, #26]
    IBeacon_Init->UuID[5],
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 800678c:	795b      	ldrb	r3, [r3, #5]
 800678e:	76fb      	strb	r3, [r7, #27]
    IBeacon_Init->UuID[6],
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8006794:	799b      	ldrb	r3, [r3, #6]
 8006796:	773b      	strb	r3, [r7, #28]
    IBeacon_Init->UuID[7],
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 800679c:	79db      	ldrb	r3, [r3, #7]
 800679e:	777b      	strb	r3, [r7, #29]
    IBeacon_Init->UuID[8],
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 80067a4:	7a1b      	ldrb	r3, [r3, #8]
 80067a6:	77bb      	strb	r3, [r7, #30]
    IBeacon_Init->UuID[9],
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 80067ac:	7a5b      	ldrb	r3, [r3, #9]
 80067ae:	77fb      	strb	r3, [r7, #31]
    IBeacon_Init->UuID[10],
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 80067b4:	7a9b      	ldrb	r3, [r3, #10]
 80067b6:	f887 3020 	strb.w	r3, [r7, #32]
    IBeacon_Init->UuID[11],
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 80067be:	7adb      	ldrb	r3, [r3, #11]
 80067c0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    IBeacon_Init->UuID[12],
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 80067c8:	7b1b      	ldrb	r3, [r3, #12]
 80067ca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    IBeacon_Init->UuID[13],
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 80067d2:	7b5b      	ldrb	r3, [r3, #13]
 80067d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    IBeacon_Init->UuID[14],
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 80067dc:	7b9b      	ldrb	r3, [r3, #14]
 80067de:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    IBeacon_Init->UuID[15],
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 80067e6:	7bdb      	ldrb	r3, [r3, #15]
 80067e8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    IBeacon_Init->MajorID[0],                                                /*< 2-byte Major. */
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	781b      	ldrb	r3, [r3, #0]
  uint8_t service_data[] =
 80067f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    IBeacon_Init->MajorID[1],
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	689b      	ldr	r3, [r3, #8]
  uint8_t service_data[] =
 80067fa:	785b      	ldrb	r3, [r3, #1]
 80067fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    IBeacon_Init->MinorID[0],                                                /*< 2-byte Minor. */
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	781b      	ldrb	r3, [r3, #0]
  uint8_t service_data[] =
 8006806:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    IBeacon_Init->MinorID[1],
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	68db      	ldr	r3, [r3, #12]
  uint8_t service_data[] =
 800680e:	785b      	ldrb	r3, [r3, #1]
 8006810:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    IBeacon_Init->CalibratedTxPower,                                         /*< Ranging data. */
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	7c1b      	ldrb	r3, [r3, #16]
  uint8_t service_data[] =
 8006818:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  };

  uint8_t flags[] =
 800681c:	4a18      	ldr	r2, [pc, #96]	; (8006880 <IBeacon_Init+0x1b8>)
 800681e:	f107 030c 	add.w	r3, r7, #12
 8006822:	6812      	ldr	r2, [r2, #0]
 8006824:	4611      	mov	r1, r2
 8006826:	8019      	strh	r1, [r3, #0]
 8006828:	3302      	adds	r3, #2
 800682a:	0c12      	lsrs	r2, r2, #16
 800682c:	701a      	strb	r2, [r3, #0]
    AD_TYPE_FLAGS,                                                          /*< Flags data type value. */
    (FLAG_BIT_LE_GENERAL_DISCOVERABLE_MODE | FLAG_BIT_BR_EDR_NOT_SUPPORTED) /*< BLE general discoverable, without BR/EDR support. */
  };

  /* Update the service data. */
  ret = aci_gap_update_adv_data(sizeof(service_data), service_data);
 800682e:	f107 0310 	add.w	r3, r7, #16
 8006832:	4619      	mov	r1, r3
 8006834:	201b      	movs	r0, #27
 8006836:	f7fe fa20 	bl	8004c7a <aci_gap_update_adv_data>
 800683a:	4603      	mov	r3, r0
 800683c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 8006840:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006844:	2b00      	cmp	r3, #0
 8006846:	d002      	beq.n	800684e <IBeacon_Init+0x186>
  {
    return ret;
 8006848:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800684c:	e011      	b.n	8006872 <IBeacon_Init+0x1aa>
  }

  /* Update the adverstising flags. */
  ret = aci_gap_update_adv_data(sizeof(flags), flags);
 800684e:	f107 030c 	add.w	r3, r7, #12
 8006852:	4619      	mov	r1, r3
 8006854:	2003      	movs	r0, #3
 8006856:	f7fe fa10 	bl	8004c7a <aci_gap_update_adv_data>
 800685a:	4603      	mov	r3, r0
 800685c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 8006860:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006864:	2b00      	cmp	r3, #0
 8006866:	d002      	beq.n	800686e <IBeacon_Init+0x1a6>
  {
    return ret;
 8006868:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800686c:	e001      	b.n	8006872 <IBeacon_Init+0x1aa>
  }
/* USER CODE BEGIN IBeacon_Init_2 */

/* USER CODE END IBeacon_Init_2 */
  return ret;
 800686e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006872:	4618      	mov	r0, r3
 8006874:	3730      	adds	r7, #48	; 0x30
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	66666667 	.word	0x66666667
 8006880:	080081e8 	.word	0x080081e8

08006884 <IBeacon_Process>:

void IBeacon_Process(void)
{
 8006884:	b590      	push	{r4, r7, lr}
 8006886:	b08d      	sub	sp, #52	; 0x34
 8006888:	af00      	add	r7, sp, #0
/* USER CODE BEGIN IBeacon_Process_1 */

/* USER CODE END IBeacon_Process_1 */
  /* Default ibeacon */
  uint8_t UuID[]    = { UUID };
 800688a:	4b11      	ldr	r3, [pc, #68]	; (80068d0 <IBeacon_Process+0x4c>)
 800688c:	f107 0420 	add.w	r4, r7, #32
 8006890:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006892:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint8_t MajorID[] = { MAJOR_ID };
 8006896:	f44f 7380 	mov.w	r3, #256	; 0x100
 800689a:	83bb      	strh	r3, [r7, #28]
  uint8_t MinorID[] = { MINOR_ID };
 800689c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068a0:	833b      	strh	r3, [r7, #24]

  IBeacon_InitTypeDef IBeacon_InitStruct =
 80068a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80068a6:	80bb      	strh	r3, [r7, #4]
 80068a8:	f107 0320 	add.w	r3, r7, #32
 80068ac:	60bb      	str	r3, [r7, #8]
 80068ae:	f107 031c 	add.w	r3, r7, #28
 80068b2:	60fb      	str	r3, [r7, #12]
 80068b4:	f107 0318 	add.w	r3, r7, #24
 80068b8:	613b      	str	r3, [r7, #16]
 80068ba:	23c1      	movs	r3, #193	; 0xc1
 80068bc:	753b      	strb	r3, [r7, #20]
    data_address += 2;
    IBeacon_InitStruct.CalibratedTxPower = *(uint8_t *)(data_address);
  }
#endif

  IBeacon_Init(&IBeacon_InitStruct);
 80068be:	1d3b      	adds	r3, r7, #4
 80068c0:	4618      	mov	r0, r3
 80068c2:	f7ff ff01 	bl	80066c8 <IBeacon_Init>
/* USER CODE BEGIN IBeacon_Process_2 */

/* USER CODE END IBeacon_Process_2 */
}
 80068c6:	bf00      	nop
 80068c8:	3734      	adds	r7, #52	; 0x34
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd90      	pop	{r4, r7, pc}
 80068ce:	bf00      	nop
 80068d0:	080081ec 	.word	0x080081ec

080068d4 <myRTC>:
/* USER CODE BEGIN FD */
void myRTC(void) {
 80068d4:	b5b0      	push	{r4, r5, r7, lr}
 80068d6:	b088      	sub	sp, #32
 80068d8:	af00      	add	r7, sp, #0
	printf("Data Sent\n\r");
 80068da:	4810      	ldr	r0, [pc, #64]	; (800691c <myRTC+0x48>)
 80068dc:	f000 fdac 	bl	8007438 <iprintf>
	uint8_t service_data[] =
 80068e0:	4b0f      	ldr	r3, [pc, #60]	; (8006920 <myRTC+0x4c>)
 80068e2:	1d3c      	adds	r4, r7, #4
 80068e4:	461d      	mov	r5, r3
 80068e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80068e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80068ee:	c403      	stmia	r4!, {r0, r1}
 80068f0:	8022      	strh	r2, [r4, #0]
 80068f2:	3402      	adds	r4, #2
 80068f4:	0c13      	lsrs	r3, r2, #16
 80068f6:	7023      	strb	r3, [r4, #0]
	  0x00, 0x02,                                                /*< 2-byte Major. */
	  0x05, 0x0A,                                				/*< 2-byte Minor. */
	  0x01,                                         			   /*< Ranging data. */
	};

	aci_gap_update_adv_data(sizeof(service_data), service_data);
 80068f8:	1d3b      	adds	r3, r7, #4
 80068fa:	4619      	mov	r1, r3
 80068fc:	201b      	movs	r0, #27
 80068fe:	f7fe f9bc 	bl	8004c7a <aci_gap_update_adv_data>


	// Stop Mode //
	HAL_SuspendTick();
 8006902:	f7fa ff13 	bl	800172c <HAL_SuspendTick>
	HAL_PWR_EnableSleepOnExit();
 8006906:	f7fb fc43 	bl	8002190 <HAL_PWR_EnableSleepOnExit>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800690a:	2101      	movs	r1, #1
 800690c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006910:	f7fb fc26 	bl	8002160 <HAL_PWR_EnterSTOPMode>

}
 8006914:	bf00      	nop
 8006916:	3720      	adds	r7, #32
 8006918:	46bd      	mov	sp, r7
 800691a:	bdb0      	pop	{r4, r5, r7, pc}
 800691c:	080081fc 	.word	0x080081fc
 8006920:	08008208 	.word	0x08008208

08006924 <LL_PWR_EnableBootC2>:
{
 8006924:	b480      	push	{r7}
 8006926:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8006928:	4b05      	ldr	r3, [pc, #20]	; (8006940 <LL_PWR_EnableBootC2+0x1c>)
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	4a04      	ldr	r2, [pc, #16]	; (8006940 <LL_PWR_EnableBootC2+0x1c>)
 800692e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006932:	60d3      	str	r3, [r2, #12]
}
 8006934:	bf00      	nop
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	58000400 	.word	0x58000400

08006944 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800694c:	4b06      	ldr	r3, [pc, #24]	; (8006968 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800694e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8006952:	4905      	ldr	r1, [pc, #20]	; (8006968 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4313      	orrs	r3, r2
 8006958:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800695c:	bf00      	nop
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr
 8006968:	58000800 	.word	0x58000800

0800696c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8006974:	4b05      	ldr	r3, [pc, #20]	; (800698c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006976:	6a1a      	ldr	r2, [r3, #32]
 8006978:	4904      	ldr	r1, [pc, #16]	; (800698c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4313      	orrs	r3, r2
 800697e:	620b      	str	r3, [r1, #32]
}
 8006980:	bf00      	nop
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr
 800698c:	58000800 	.word	0x58000800

08006990 <LL_AHB3_GRP1_EnableClock>:
{
 8006990:	b480      	push	{r7}
 8006992:	b085      	sub	sp, #20
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8006998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800699c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800699e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80069a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4013      	ands	r3, r2
 80069b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80069b4:	68fb      	ldr	r3, [r7, #12]
}
 80069b6:	bf00      	nop
 80069b8:	3714      	adds	r7, #20
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr

080069c2 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80069c2:	b480      	push	{r7}
 80069c4:	b085      	sub	sp, #20
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80069ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069ce:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80069d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4313      	orrs	r3, r2
 80069da:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80069de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069e2:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4013      	ands	r3, r2
 80069ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80069ec:	68fb      	ldr	r3, [r7, #12]
}
 80069ee:	bf00      	nop
 80069f0:	3714      	adds	r7, #20
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr

080069fa <LL_C1_IPCC_EnableIT_TXF>:
{
 80069fa:	b480      	push	{r7}
 80069fc:	b083      	sub	sp, #12
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	601a      	str	r2, [r3, #0]
}
 8006a0e:	bf00      	nop
 8006a10:	370c      	adds	r7, #12
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr

08006a1a <LL_C1_IPCC_EnableIT_RXO>:
{
 8006a1a:	b480      	push	{r7}
 8006a1c:	b083      	sub	sp, #12
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f043 0201 	orr.w	r2, r3, #1
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	601a      	str	r2, [r3, #0]
}
 8006a2e:	bf00      	nop
 8006a30:	370c      	adds	r7, #12
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr

08006a3a <LL_C1_IPCC_EnableTransmitChannel>:
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	b083      	sub	sp, #12
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
 8006a42:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	685a      	ldr	r2, [r3, #4]
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	041b      	lsls	r3, r3, #16
 8006a4c:	43db      	mvns	r3, r3
 8006a4e:	401a      	ands	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	605a      	str	r2, [r3, #4]
}
 8006a54:	bf00      	nop
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	685a      	ldr	r2, [r3, #4]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	041b      	lsls	r3, r3, #16
 8006a72:	431a      	orrs	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	605a      	str	r2, [r3, #4]
}
 8006a78:	bf00      	nop
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	685a      	ldr	r2, [r3, #4]
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	43db      	mvns	r3, r3
 8006a96:	401a      	ands	r2, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	605a      	str	r2, [r3, #4]
}
 8006a9c:	bf00      	nop
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	683a      	ldr	r2, [r7, #0]
 8006ab6:	609a      	str	r2, [r3, #8]
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <LL_C1_IPCC_SetFlag_CHx>:
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	041a      	lsls	r2, r3, #16
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	609a      	str	r2, [r3, #8]
}
 8006ad6:	bf00      	nop
 8006ad8:	370c      	adds	r7, #12
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr

08006ae2 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b083      	sub	sp, #12
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
 8006aea:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	68da      	ldr	r2, [r3, #12]
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	4013      	ands	r3, r2
 8006af4:	683a      	ldr	r2, [r7, #0]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d101      	bne.n	8006afe <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8006afa:	2301      	movs	r3, #1
 8006afc:	e000      	b.n	8006b00 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	69da      	ldr	r2, [r3, #28]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	683a      	ldr	r2, [r7, #0]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d101      	bne.n	8006b28 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8006b24:	2301      	movs	r3, #1
 8006b26:	e000      	b.n	8006b2a <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	370c      	adds	r7, #12
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr
	...

08006b38 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8006b3c:	2102      	movs	r1, #2
 8006b3e:	4818      	ldr	r0, [pc, #96]	; (8006ba0 <HW_IPCC_Rx_Handler+0x68>)
 8006b40:	f7ff ffe4 	bl	8006b0c <LL_C2_IPCC_IsActiveFlag_CHx>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d008      	beq.n	8006b5c <HW_IPCC_Rx_Handler+0x24>
 8006b4a:	4b15      	ldr	r3, [pc, #84]	; (8006ba0 <HW_IPCC_Rx_Handler+0x68>)
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	f003 0302 	and.w	r3, r3, #2
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d102      	bne.n	8006b5c <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8006b56:	f000 f8d5 	bl	8006d04 <HW_IPCC_SYS_EvtHandler>
 8006b5a:	e01e      	b.n	8006b9a <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8006b5c:	2101      	movs	r1, #1
 8006b5e:	4810      	ldr	r0, [pc, #64]	; (8006ba0 <HW_IPCC_Rx_Handler+0x68>)
 8006b60:	f7ff ffd4 	bl	8006b0c <LL_C2_IPCC_IsActiveFlag_CHx>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d008      	beq.n	8006b7c <HW_IPCC_Rx_Handler+0x44>
 8006b6a:	4b0d      	ldr	r3, [pc, #52]	; (8006ba0 <HW_IPCC_Rx_Handler+0x68>)
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	f003 0301 	and.w	r3, r3, #1
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d102      	bne.n	8006b7c <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8006b76:	f000 f889 	bl	8006c8c <HW_IPCC_BLE_EvtHandler>
 8006b7a:	e00e      	b.n	8006b9a <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8006b7c:	2108      	movs	r1, #8
 8006b7e:	4808      	ldr	r0, [pc, #32]	; (8006ba0 <HW_IPCC_Rx_Handler+0x68>)
 8006b80:	f7ff ffc4 	bl	8006b0c <LL_C2_IPCC_IsActiveFlag_CHx>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d008      	beq.n	8006b9c <HW_IPCC_Rx_Handler+0x64>
 8006b8a:	4b05      	ldr	r3, [pc, #20]	; (8006ba0 <HW_IPCC_Rx_Handler+0x68>)
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	f003 0308 	and.w	r3, r3, #8
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d102      	bne.n	8006b9c <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8006b96:	f000 f901 	bl	8006d9c <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8006b9a:	bf00      	nop
 8006b9c:	bf00      	nop
}
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	58000c00 	.word	0x58000c00

08006ba4 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8006ba8:	2102      	movs	r1, #2
 8006baa:	4818      	ldr	r0, [pc, #96]	; (8006c0c <HW_IPCC_Tx_Handler+0x68>)
 8006bac:	f7ff ff99 	bl	8006ae2 <LL_C1_IPCC_IsActiveFlag_CHx>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d108      	bne.n	8006bc8 <HW_IPCC_Tx_Handler+0x24>
 8006bb6:	4b15      	ldr	r3, [pc, #84]	; (8006c0c <HW_IPCC_Tx_Handler+0x68>)
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d102      	bne.n	8006bc8 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8006bc2:	f000 f893 	bl	8006cec <HW_IPCC_SYS_CmdEvtHandler>
 8006bc6:	e01e      	b.n	8006c06 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8006bc8:	2108      	movs	r1, #8
 8006bca:	4810      	ldr	r0, [pc, #64]	; (8006c0c <HW_IPCC_Tx_Handler+0x68>)
 8006bcc:	f7ff ff89 	bl	8006ae2 <LL_C1_IPCC_IsActiveFlag_CHx>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d108      	bne.n	8006be8 <HW_IPCC_Tx_Handler+0x44>
 8006bd6:	4b0d      	ldr	r3, [pc, #52]	; (8006c0c <HW_IPCC_Tx_Handler+0x68>)
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d102      	bne.n	8006be8 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8006be2:	f000 f8bd 	bl	8006d60 <HW_IPCC_MM_FreeBufHandler>
 8006be6:	e00e      	b.n	8006c06 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8006be8:	2120      	movs	r1, #32
 8006bea:	4808      	ldr	r0, [pc, #32]	; (8006c0c <HW_IPCC_Tx_Handler+0x68>)
 8006bec:	f7ff ff79 	bl	8006ae2 <LL_C1_IPCC_IsActiveFlag_CHx>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d108      	bne.n	8006c08 <HW_IPCC_Tx_Handler+0x64>
 8006bf6:	4b05      	ldr	r3, [pc, #20]	; (8006c0c <HW_IPCC_Tx_Handler+0x68>)
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d102      	bne.n	8006c08 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8006c02:	f000 f84f 	bl	8006ca4 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8006c06:	bf00      	nop
 8006c08:	bf00      	nop
}
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	58000c00 	.word	0x58000c00

08006c10 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8006c14:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006c18:	f7ff fed3 	bl	80069c2 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8006c1c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006c20:	f7ff fea4 	bl	800696c <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8006c24:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006c28:	f7ff fe8c 	bl	8006944 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8006c2c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8006c2e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8006c30:	f7ff fe78 	bl	8006924 <LL_PWR_EnableBootC2>

  return;
 8006c34:	bf00      	nop
}
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8006c3c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006c40:	f7ff fea6 	bl	8006990 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8006c44:	4806      	ldr	r0, [pc, #24]	; (8006c60 <HW_IPCC_Init+0x28>)
 8006c46:	f7ff fee8 	bl	8006a1a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8006c4a:	4805      	ldr	r0, [pc, #20]	; (8006c60 <HW_IPCC_Init+0x28>)
 8006c4c:	f7ff fed5 	bl	80069fa <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8006c50:	202c      	movs	r0, #44	; 0x2c
 8006c52:	f7fa febc 	bl	80019ce <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8006c56:	202d      	movs	r0, #45	; 0x2d
 8006c58:	f7fa feb9 	bl	80019ce <HAL_NVIC_EnableIRQ>

  return;
 8006c5c:	bf00      	nop
}
 8006c5e:	bd80      	pop	{r7, pc}
 8006c60:	58000c00 	.word	0x58000c00

08006c64 <HW_IPCC_BLE_Init>:
#endif
/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8006c68:	2101      	movs	r1, #1
 8006c6a:	4802      	ldr	r0, [pc, #8]	; (8006c74 <HW_IPCC_BLE_Init+0x10>)
 8006c6c:	f7ff ff0a 	bl	8006a84 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8006c70:	bf00      	nop
}
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	58000c00 	.word	0x58000c00

08006c78 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_BLE_CMD_CHANNEL );
 8006c7c:	2101      	movs	r1, #1
 8006c7e:	4802      	ldr	r0, [pc, #8]	; (8006c88 <HW_IPCC_BLE_SendCmd+0x10>)
 8006c80:	f7ff ff20 	bl	8006ac4 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8006c84:	bf00      	nop
}
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	58000c00 	.word	0x58000c00

08006c8c <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8006c90:	f7ff f876 	bl	8005d80 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8006c94:	2101      	movs	r1, #1
 8006c96:	4802      	ldr	r0, [pc, #8]	; (8006ca0 <HW_IPCC_BLE_EvtHandler+0x14>)
 8006c98:	f7ff ff06 	bl	8006aa8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8006c9c:	bf00      	nop
}
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	58000c00 	.word	0x58000c00

08006ca4 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8006ca8:	2120      	movs	r1, #32
 8006caa:	4803      	ldr	r0, [pc, #12]	; (8006cb8 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8006cac:	f7ff fed8 	bl	8006a60 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8006cb0:	f7ff f896 	bl	8005de0 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8006cb4:	bf00      	nop
}
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	58000c00 	.word	0x58000c00

08006cbc <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8006cc0:	2102      	movs	r1, #2
 8006cc2:	4802      	ldr	r0, [pc, #8]	; (8006ccc <HW_IPCC_SYS_Init+0x10>)
 8006cc4:	f7ff fede 	bl	8006a84 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8006cc8:	bf00      	nop
}
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	58000c00 	.word	0x58000c00

08006cd0 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8006cd4:	2102      	movs	r1, #2
 8006cd6:	4804      	ldr	r0, [pc, #16]	; (8006ce8 <HW_IPCC_SYS_SendCmd+0x18>)
 8006cd8:	f7ff fef4 	bl	8006ac4 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8006cdc:	2102      	movs	r1, #2
 8006cde:	4802      	ldr	r0, [pc, #8]	; (8006ce8 <HW_IPCC_SYS_SendCmd+0x18>)
 8006ce0:	f7ff feab 	bl	8006a3a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8006ce4:	bf00      	nop
}
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	58000c00 	.word	0x58000c00

08006cec <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8006cf0:	2102      	movs	r1, #2
 8006cf2:	4803      	ldr	r0, [pc, #12]	; (8006d00 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8006cf4:	f7ff feb4 	bl	8006a60 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8006cf8:	f7ff f8c2 	bl	8005e80 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8006cfc:	bf00      	nop
}
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	58000c00 	.word	0x58000c00

08006d04 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8006d08:	f7ff f8d0 	bl	8005eac <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8006d0c:	2102      	movs	r1, #2
 8006d0e:	4802      	ldr	r0, [pc, #8]	; (8006d18 <HW_IPCC_SYS_EvtHandler+0x14>)
 8006d10:	f7ff feca 	bl	8006aa8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8006d14:	bf00      	nop
}
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	58000c00 	.word	0x58000c00

08006d1c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8006d24:	2108      	movs	r1, #8
 8006d26:	480c      	ldr	r0, [pc, #48]	; (8006d58 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8006d28:	f7ff fedb 	bl	8006ae2 <LL_C1_IPCC_IsActiveFlag_CHx>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d007      	beq.n	8006d42 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8006d32:	4a0a      	ldr	r2, [pc, #40]	; (8006d5c <HW_IPCC_MM_SendFreeBuf+0x40>)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006d38:	2108      	movs	r1, #8
 8006d3a:	4807      	ldr	r0, [pc, #28]	; (8006d58 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8006d3c:	f7ff fe7d 	bl	8006a3a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8006d40:	e006      	b.n	8006d50 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4798      	blx	r3
    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006d46:	2108      	movs	r1, #8
 8006d48:	4803      	ldr	r0, [pc, #12]	; (8006d58 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8006d4a:	f7ff febb 	bl	8006ac4 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8006d4e:	bf00      	nop
}
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	58000c00 	.word	0x58000c00
 8006d5c:	20000314 	.word	0x20000314

08006d60 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006d64:	2108      	movs	r1, #8
 8006d66:	4806      	ldr	r0, [pc, #24]	; (8006d80 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8006d68:	f7ff fe7a 	bl	8006a60 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8006d6c:	4b05      	ldr	r3, [pc, #20]	; (8006d84 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4798      	blx	r3

  HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006d72:	2108      	movs	r1, #8
 8006d74:	4802      	ldr	r0, [pc, #8]	; (8006d80 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8006d76:	f7ff fea5 	bl	8006ac4 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8006d7a:	bf00      	nop
}
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	58000c00 	.word	0x58000c00
 8006d84:	20000314 	.word	0x20000314

08006d88 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8006d8c:	2108      	movs	r1, #8
 8006d8e:	4802      	ldr	r0, [pc, #8]	; (8006d98 <HW_IPCC_TRACES_Init+0x10>)
 8006d90:	f7ff fe78 	bl	8006a84 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8006d94:	bf00      	nop
}
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	58000c00 	.word	0x58000c00

08006d9c <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8006da0:	f7ff f92c 	bl	8005ffc <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8006da4:	2108      	movs	r1, #8
 8006da6:	4802      	ldr	r0, [pc, #8]	; (8006db0 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8006da8:	f7ff fe7e 	bl	8006aa8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8006dac:	bf00      	nop
}
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	58000c00 	.word	0x58000c00

08006db4 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8006db4:	b480      	push	{r7}
 8006db6:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8006db8:	4b05      	ldr	r3, [pc, #20]	; (8006dd0 <UTIL_LPM_Init+0x1c>)
 8006dba:	2200      	movs	r2, #0
 8006dbc:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8006dbe:	4b05      	ldr	r3, [pc, #20]	; (8006dd4 <UTIL_LPM_Init+0x20>)
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8006dc4:	bf00      	nop
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop
 8006dd0:	20000318 	.word	0x20000318
 8006dd4:	2000031c 	.word	0x2000031c

08006dd8 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b087      	sub	sp, #28
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	460b      	mov	r3, r1
 8006de2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006de4:	f3ef 8310 	mrs	r3, PRIMASK
 8006de8:	613b      	str	r3, [r7, #16]
  return(result);
 8006dea:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8006dec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006dee:	b672      	cpsid	i
}
 8006df0:	bf00      	nop
  
  switch(state)
 8006df2:	78fb      	ldrb	r3, [r7, #3]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d008      	beq.n	8006e0a <UTIL_LPM_SetOffMode+0x32>
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d10e      	bne.n	8006e1a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8006dfc:	4b0d      	ldr	r3, [pc, #52]	; (8006e34 <UTIL_LPM_SetOffMode+0x5c>)
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	4a0b      	ldr	r2, [pc, #44]	; (8006e34 <UTIL_LPM_SetOffMode+0x5c>)
 8006e06:	6013      	str	r3, [r2, #0]
      break;
 8006e08:	e008      	b.n	8006e1c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	43da      	mvns	r2, r3
 8006e0e:	4b09      	ldr	r3, [pc, #36]	; (8006e34 <UTIL_LPM_SetOffMode+0x5c>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4013      	ands	r3, r2
 8006e14:	4a07      	ldr	r2, [pc, #28]	; (8006e34 <UTIL_LPM_SetOffMode+0x5c>)
 8006e16:	6013      	str	r3, [r2, #0]
      break;
 8006e18:	e000      	b.n	8006e1c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8006e1a:	bf00      	nop
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f383 8810 	msr	PRIMASK, r3
}
 8006e26:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8006e28:	bf00      	nop
 8006e2a:	371c      	adds	r7, #28
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr
 8006e34:	2000031c 	.word	0x2000031c

08006e38 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b090      	sub	sp, #64	; 0x40
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8006e40:	4b73      	ldr	r3, [pc, #460]	; (8007010 <UTIL_SEQ_Run+0x1d8>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8006e46:	4b72      	ldr	r3, [pc, #456]	; (8007010 <UTIL_SEQ_Run+0x1d8>)
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	4a70      	ldr	r2, [pc, #448]	; (8007010 <UTIL_SEQ_Run+0x1d8>)
 8006e50:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8006e52:	4b70      	ldr	r3, [pc, #448]	; (8007014 <UTIL_SEQ_Run+0x1dc>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8006e58:	4b6f      	ldr	r3, [pc, #444]	; (8007018 <UTIL_SEQ_Run+0x1e0>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8006e5e:	4b6f      	ldr	r3, [pc, #444]	; (800701c <UTIL_SEQ_Run+0x1e4>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8006e64:	4b6e      	ldr	r3, [pc, #440]	; (8007020 <UTIL_SEQ_Run+0x1e8>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8006e6a:	e08d      	b.n	8006f88 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8006e70:	e002      	b.n	8006e78 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8006e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e74:	3301      	adds	r3, #1
 8006e76:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8006e78:	4a6a      	ldr	r2, [pc, #424]	; (8007024 <UTIL_SEQ_Run+0x1ec>)
 8006e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e7c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8006e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e82:	401a      	ands	r2, r3
 8006e84:	4b62      	ldr	r3, [pc, #392]	; (8007010 <UTIL_SEQ_Run+0x1d8>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4013      	ands	r3, r2
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d0f1      	beq.n	8006e72 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8006e8e:	4a65      	ldr	r2, [pc, #404]	; (8007024 <UTIL_SEQ_Run+0x1ec>)
 8006e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e92:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8006e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e98:	401a      	ands	r2, r3
 8006e9a:	4b5d      	ldr	r3, [pc, #372]	; (8007010 <UTIL_SEQ_Run+0x1d8>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4013      	ands	r3, r2
 8006ea0:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8006ea2:	4a60      	ldr	r2, [pc, #384]	; (8007024 <UTIL_SEQ_Run+0x1ec>)
 8006ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ea6:	00db      	lsls	r3, r3, #3
 8006ea8:	4413      	add	r3, r2
 8006eaa:	685a      	ldr	r2, [r3, #4]
 8006eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eae:	4013      	ands	r3, r2
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d106      	bne.n	8006ec2 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8006eb4:	4a5b      	ldr	r2, [pc, #364]	; (8007024 <UTIL_SEQ_Run+0x1ec>)
 8006eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eb8:	00db      	lsls	r3, r3, #3
 8006eba:	4413      	add	r3, r2
 8006ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ec0:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8006ec2:	4a58      	ldr	r2, [pc, #352]	; (8007024 <UTIL_SEQ_Run+0x1ec>)
 8006ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ec6:	00db      	lsls	r3, r3, #3
 8006ec8:	4413      	add	r3, r2
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ece:	4013      	ands	r3, r2
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f000 f9b3 	bl	800723c <SEQ_BitPosition>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	461a      	mov	r2, r3
 8006eda:	4b53      	ldr	r3, [pc, #332]	; (8007028 <UTIL_SEQ_Run+0x1f0>)
 8006edc:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8006ede:	4a51      	ldr	r2, [pc, #324]	; (8007024 <UTIL_SEQ_Run+0x1ec>)
 8006ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ee2:	00db      	lsls	r3, r3, #3
 8006ee4:	4413      	add	r3, r2
 8006ee6:	685a      	ldr	r2, [r3, #4]
 8006ee8:	4b4f      	ldr	r3, [pc, #316]	; (8007028 <UTIL_SEQ_Run+0x1f0>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2101      	movs	r1, #1
 8006eee:	fa01 f303 	lsl.w	r3, r1, r3
 8006ef2:	43db      	mvns	r3, r3
 8006ef4:	401a      	ands	r2, r3
 8006ef6:	494b      	ldr	r1, [pc, #300]	; (8007024 <UTIL_SEQ_Run+0x1ec>)
 8006ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006efa:	00db      	lsls	r3, r3, #3
 8006efc:	440b      	add	r3, r1
 8006efe:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f00:	f3ef 8310 	mrs	r3, PRIMASK
 8006f04:	61bb      	str	r3, [r7, #24]
  return(result);
 8006f06:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006f08:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8006f0a:	b672      	cpsid	i
}
 8006f0c:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8006f0e:	4b46      	ldr	r3, [pc, #280]	; (8007028 <UTIL_SEQ_Run+0x1f0>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	2201      	movs	r2, #1
 8006f14:	fa02 f303 	lsl.w	r3, r2, r3
 8006f18:	43da      	mvns	r2, r3
 8006f1a:	4b3e      	ldr	r3, [pc, #248]	; (8007014 <UTIL_SEQ_Run+0x1dc>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4013      	ands	r3, r2
 8006f20:	4a3c      	ldr	r2, [pc, #240]	; (8007014 <UTIL_SEQ_Run+0x1dc>)
 8006f22:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8006f24:	2302      	movs	r3, #2
 8006f26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f28:	e013      	b.n	8006f52 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8006f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	4a3d      	ldr	r2, [pc, #244]	; (8007024 <UTIL_SEQ_Run+0x1ec>)
 8006f30:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8006f34:	4b3c      	ldr	r3, [pc, #240]	; (8007028 <UTIL_SEQ_Run+0x1f0>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f3e:	43da      	mvns	r2, r3
 8006f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f42:	3b01      	subs	r3, #1
 8006f44:	400a      	ands	r2, r1
 8006f46:	4937      	ldr	r1, [pc, #220]	; (8007024 <UTIL_SEQ_Run+0x1ec>)
 8006f48:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8006f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d1e8      	bne.n	8006f2a <UTIL_SEQ_Run+0xf2>
 8006f58:	6a3b      	ldr	r3, [r7, #32]
 8006f5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	f383 8810 	msr	PRIMASK, r3
}
 8006f62:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8006f64:	4b30      	ldr	r3, [pc, #192]	; (8007028 <UTIL_SEQ_Run+0x1f0>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a30      	ldr	r2, [pc, #192]	; (800702c <UTIL_SEQ_Run+0x1f4>)
 8006f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f6e:	4798      	blx	r3

    local_taskset = TaskSet;
 8006f70:	4b28      	ldr	r3, [pc, #160]	; (8007014 <UTIL_SEQ_Run+0x1dc>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 8006f76:	4b28      	ldr	r3, [pc, #160]	; (8007018 <UTIL_SEQ_Run+0x1e0>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 8006f7c:	4b27      	ldr	r3, [pc, #156]	; (800701c <UTIL_SEQ_Run+0x1e4>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 8006f82:	4b27      	ldr	r3, [pc, #156]	; (8007020 <UTIL_SEQ_Run+0x1e8>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8006f88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8c:	401a      	ands	r2, r3
 8006f8e:	4b20      	ldr	r3, [pc, #128]	; (8007010 <UTIL_SEQ_Run+0x1d8>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4013      	ands	r3, r2
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d005      	beq.n	8006fa4 <UTIL_SEQ_Run+0x16c>
 8006f98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	f43f af64 	beq.w	8006e6c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8006fa4:	4b20      	ldr	r3, [pc, #128]	; (8007028 <UTIL_SEQ_Run+0x1f0>)
 8006fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8006faa:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8006fac:	f000 f938 	bl	8007220 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fb0:	f3ef 8310 	mrs	r3, PRIMASK
 8006fb4:	613b      	str	r3, [r7, #16]
  return(result);
 8006fb6:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8006fb8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8006fba:	b672      	cpsid	i
}
 8006fbc:	bf00      	nop
  local_taskset = TaskSet;
 8006fbe:	4b15      	ldr	r3, [pc, #84]	; (8007014 <UTIL_SEQ_Run+0x1dc>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8006fc4:	4b14      	ldr	r3, [pc, #80]	; (8007018 <UTIL_SEQ_Run+0x1e0>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8006fca:	4b14      	ldr	r3, [pc, #80]	; (800701c <UTIL_SEQ_Run+0x1e4>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8006fd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd4:	401a      	ands	r2, r3
 8006fd6:	4b0e      	ldr	r3, [pc, #56]	; (8007010 <UTIL_SEQ_Run+0x1d8>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4013      	ands	r3, r2
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d107      	bne.n	8006ff0 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8006fe0:	4b0f      	ldr	r3, [pc, #60]	; (8007020 <UTIL_SEQ_Run+0x1e8>)
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fe6:	4013      	ands	r3, r2
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d101      	bne.n	8006ff0 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8006fec:	f7f9 fdaf 	bl	8000b4e <UTIL_SEQ_Idle>
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f383 8810 	msr	PRIMASK, r3
}
 8006ffa:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8006ffc:	f000 f917 	bl	800722e <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8007000:	4a03      	ldr	r2, [pc, #12]	; (8007010 <UTIL_SEQ_Run+0x1d8>)
 8007002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007004:	6013      	str	r3, [r2, #0]

  return;
 8007006:	bf00      	nop
}
 8007008:	3740      	adds	r7, #64	; 0x40
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	20000020 	.word	0x20000020
 8007014:	20000320 	.word	0x20000320
 8007018:	20000324 	.word	0x20000324
 800701c:	2000001c 	.word	0x2000001c
 8007020:	20000328 	.word	0x20000328
 8007024:	200003b0 	.word	0x200003b0
 8007028:	2000032c 	.word	0x2000032c
 800702c:	20000330 	.word	0x20000330

08007030 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b088      	sub	sp, #32
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800703c:	f3ef 8310 	mrs	r3, PRIMASK
 8007040:	617b      	str	r3, [r7, #20]
  return(result);
 8007042:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8007044:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8007046:	b672      	cpsid	i
}
 8007048:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800704a:	68f8      	ldr	r0, [r7, #12]
 800704c:	f000 f8f6 	bl	800723c <SEQ_BitPosition>
 8007050:	4603      	mov	r3, r0
 8007052:	4619      	mov	r1, r3
 8007054:	4a06      	ldr	r2, [pc, #24]	; (8007070 <UTIL_SEQ_RegTask+0x40>)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	f383 8810 	msr	PRIMASK, r3
}
 8007066:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8007068:	bf00      	nop
}
 800706a:	3720      	adds	r7, #32
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	20000330 	.word	0x20000330

08007074 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8007074:	b480      	push	{r7}
 8007076:	b087      	sub	sp, #28
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800707e:	f3ef 8310 	mrs	r3, PRIMASK
 8007082:	60fb      	str	r3, [r7, #12]
  return(result);
 8007084:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8007086:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007088:	b672      	cpsid	i
}
 800708a:	bf00      	nop

  TaskSet |= TaskId_bm;
 800708c:	4b0d      	ldr	r3, [pc, #52]	; (80070c4 <UTIL_SEQ_SetTask+0x50>)
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4313      	orrs	r3, r2
 8007094:	4a0b      	ldr	r2, [pc, #44]	; (80070c4 <UTIL_SEQ_SetTask+0x50>)
 8007096:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8007098:	4a0b      	ldr	r2, [pc, #44]	; (80070c8 <UTIL_SEQ_SetTask+0x54>)
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	431a      	orrs	r2, r3
 80070a4:	4908      	ldr	r1, [pc, #32]	; (80070c8 <UTIL_SEQ_SetTask+0x54>)
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	f383 8810 	msr	PRIMASK, r3
}
 80070b6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80070b8:	bf00      	nop
}
 80070ba:	371c      	adds	r7, #28
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr
 80070c4:	20000320 	.word	0x20000320
 80070c8:	200003b0 	.word	0x200003b0

080070cc <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80070cc:	b480      	push	{r7}
 80070ce:	b087      	sub	sp, #28
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070d4:	f3ef 8310 	mrs	r3, PRIMASK
 80070d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80070da:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80070dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80070de:	b672      	cpsid	i
}
 80070e0:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	43da      	mvns	r2, r3
 80070e6:	4b08      	ldr	r3, [pc, #32]	; (8007108 <UTIL_SEQ_PauseTask+0x3c>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4013      	ands	r3, r2
 80070ec:	4a06      	ldr	r2, [pc, #24]	; (8007108 <UTIL_SEQ_PauseTask+0x3c>)
 80070ee:	6013      	str	r3, [r2, #0]
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	f383 8810 	msr	PRIMASK, r3
}
 80070fa:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80070fc:	bf00      	nop
}
 80070fe:	371c      	adds	r7, #28
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr
 8007108:	2000001c 	.word	0x2000001c

0800710c <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800710c:	b480      	push	{r7}
 800710e:	b087      	sub	sp, #28
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007114:	f3ef 8310 	mrs	r3, PRIMASK
 8007118:	60fb      	str	r3, [r7, #12]
  return(result);
 800711a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800711c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800711e:	b672      	cpsid	i
}
 8007120:	bf00      	nop

  TaskMask |= TaskId_bm;
 8007122:	4b09      	ldr	r3, [pc, #36]	; (8007148 <UTIL_SEQ_ResumeTask+0x3c>)
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4313      	orrs	r3, r2
 800712a:	4a07      	ldr	r2, [pc, #28]	; (8007148 <UTIL_SEQ_ResumeTask+0x3c>)
 800712c:	6013      	str	r3, [r2, #0]
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	f383 8810 	msr	PRIMASK, r3
}
 8007138:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800713a:	bf00      	nop
}
 800713c:	371c      	adds	r7, #28
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	2000001c 	.word	0x2000001c

0800714c <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800714c:	b480      	push	{r7}
 800714e:	b087      	sub	sp, #28
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007154:	f3ef 8310 	mrs	r3, PRIMASK
 8007158:	60fb      	str	r3, [r7, #12]
  return(result);
 800715a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800715c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800715e:	b672      	cpsid	i
}
 8007160:	bf00      	nop

  EvtSet |= EvtId_bm;
 8007162:	4b09      	ldr	r3, [pc, #36]	; (8007188 <UTIL_SEQ_SetEvt+0x3c>)
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4313      	orrs	r3, r2
 800716a:	4a07      	ldr	r2, [pc, #28]	; (8007188 <UTIL_SEQ_SetEvt+0x3c>)
 800716c:	6013      	str	r3, [r2, #0]
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	f383 8810 	msr	PRIMASK, r3
}
 8007178:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800717a:	bf00      	nop
}
 800717c:	371c      	adds	r7, #28
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop
 8007188:	20000324 	.word	0x20000324

0800718c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b088      	sub	sp, #32
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8007194:	4b1f      	ldr	r3, [pc, #124]	; (8007214 <UTIL_SEQ_WaitEvt+0x88>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800719a:	4b1e      	ldr	r3, [pc, #120]	; (8007214 <UTIL_SEQ_WaitEvt+0x88>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071a2:	d102      	bne.n	80071aa <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 80071a4:	2300      	movs	r3, #0
 80071a6:	61fb      	str	r3, [r7, #28]
 80071a8:	e005      	b.n	80071b6 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 80071aa:	4b1a      	ldr	r3, [pc, #104]	; (8007214 <UTIL_SEQ_WaitEvt+0x88>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2201      	movs	r2, #1
 80071b0:	fa02 f303 	lsl.w	r3, r2, r3
 80071b4:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80071b6:	4b18      	ldr	r3, [pc, #96]	; (8007218 <UTIL_SEQ_WaitEvt+0x8c>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 80071bc:	4a16      	ldr	r2, [pc, #88]	; (8007218 <UTIL_SEQ_WaitEvt+0x8c>)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 80071c2:	e003      	b.n	80071cc <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 80071c4:	6879      	ldr	r1, [r7, #4]
 80071c6:	69f8      	ldr	r0, [r7, #28]
 80071c8:	f7f9 fcc8 	bl	8000b5c <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 80071cc:	4b13      	ldr	r3, [pc, #76]	; (800721c <UTIL_SEQ_WaitEvt+0x90>)
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4013      	ands	r3, r2
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d0f5      	beq.n	80071c4 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 80071d8:	4a0e      	ldr	r2, [pc, #56]	; (8007214 <UTIL_SEQ_WaitEvt+0x88>)
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071de:	f3ef 8310 	mrs	r3, PRIMASK
 80071e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80071e4:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80071e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80071e8:	b672      	cpsid	i
}
 80071ea:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	43da      	mvns	r2, r3
 80071f0:	4b0a      	ldr	r3, [pc, #40]	; (800721c <UTIL_SEQ_WaitEvt+0x90>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4013      	ands	r3, r2
 80071f6:	4a09      	ldr	r2, [pc, #36]	; (800721c <UTIL_SEQ_WaitEvt+0x90>)
 80071f8:	6013      	str	r3, [r2, #0]
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f383 8810 	msr	PRIMASK, r3
}
 8007204:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8007206:	4a04      	ldr	r2, [pc, #16]	; (8007218 <UTIL_SEQ_WaitEvt+0x8c>)
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	6013      	str	r3, [r2, #0]
  return;
 800720c:	bf00      	nop
}
 800720e:	3720      	adds	r7, #32
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	2000032c 	.word	0x2000032c
 8007218:	20000328 	.word	0x20000328
 800721c:	20000324 	.word	0x20000324

08007220 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8007220:	b480      	push	{r7}
 8007222:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8007224:	bf00      	nop
}
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr

0800722e <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800722e:	b480      	push	{r7}
 8007230:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8007232:	bf00      	nop
}
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800723c:	b480      	push	{r7}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8007244:	2300      	movs	r3, #0
 8007246:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	0c1b      	lsrs	r3, r3, #16
 8007250:	041b      	lsls	r3, r3, #16
 8007252:	2b00      	cmp	r3, #0
 8007254:	d104      	bne.n	8007260 <SEQ_BitPosition+0x24>
 8007256:	2310      	movs	r3, #16
 8007258:	73fb      	strb	r3, [r7, #15]
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	041b      	lsls	r3, r3, #16
 800725e:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007266:	2b00      	cmp	r3, #0
 8007268:	d105      	bne.n	8007276 <SEQ_BitPosition+0x3a>
 800726a:	7bfb      	ldrb	r3, [r7, #15]
 800726c:	3308      	adds	r3, #8
 800726e:	73fb      	strb	r3, [r7, #15]
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	021b      	lsls	r3, r3, #8
 8007274:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800727c:	2b00      	cmp	r3, #0
 800727e:	d105      	bne.n	800728c <SEQ_BitPosition+0x50>
 8007280:	7bfb      	ldrb	r3, [r7, #15]
 8007282:	3304      	adds	r3, #4
 8007284:	73fb      	strb	r3, [r7, #15]
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	011b      	lsls	r3, r3, #4
 800728a:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	0f1b      	lsrs	r3, r3, #28
 8007290:	4a07      	ldr	r2, [pc, #28]	; (80072b0 <SEQ_BitPosition+0x74>)
 8007292:	5cd2      	ldrb	r2, [r2, r3]
 8007294:	7bfb      	ldrb	r3, [r7, #15]
 8007296:	4413      	add	r3, r2
 8007298:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800729a:	7bfb      	ldrb	r3, [r7, #15]
 800729c:	f1c3 031f 	rsb	r3, r3, #31
 80072a0:	b2db      	uxtb	r3, r3
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3714      	adds	r7, #20
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	08008444 	.word	0x08008444

080072b4 <std>:
 80072b4:	2300      	movs	r3, #0
 80072b6:	b510      	push	{r4, lr}
 80072b8:	4604      	mov	r4, r0
 80072ba:	e9c0 3300 	strd	r3, r3, [r0]
 80072be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80072c2:	6083      	str	r3, [r0, #8]
 80072c4:	8181      	strh	r1, [r0, #12]
 80072c6:	6643      	str	r3, [r0, #100]	; 0x64
 80072c8:	81c2      	strh	r2, [r0, #14]
 80072ca:	6183      	str	r3, [r0, #24]
 80072cc:	4619      	mov	r1, r3
 80072ce:	2208      	movs	r2, #8
 80072d0:	305c      	adds	r0, #92	; 0x5c
 80072d2:	f000 f906 	bl	80074e2 <memset>
 80072d6:	4b0d      	ldr	r3, [pc, #52]	; (800730c <std+0x58>)
 80072d8:	6263      	str	r3, [r4, #36]	; 0x24
 80072da:	4b0d      	ldr	r3, [pc, #52]	; (8007310 <std+0x5c>)
 80072dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80072de:	4b0d      	ldr	r3, [pc, #52]	; (8007314 <std+0x60>)
 80072e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80072e2:	4b0d      	ldr	r3, [pc, #52]	; (8007318 <std+0x64>)
 80072e4:	6323      	str	r3, [r4, #48]	; 0x30
 80072e6:	4b0d      	ldr	r3, [pc, #52]	; (800731c <std+0x68>)
 80072e8:	6224      	str	r4, [r4, #32]
 80072ea:	429c      	cmp	r4, r3
 80072ec:	d006      	beq.n	80072fc <std+0x48>
 80072ee:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80072f2:	4294      	cmp	r4, r2
 80072f4:	d002      	beq.n	80072fc <std+0x48>
 80072f6:	33d0      	adds	r3, #208	; 0xd0
 80072f8:	429c      	cmp	r4, r3
 80072fa:	d105      	bne.n	8007308 <std+0x54>
 80072fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007304:	f000 b966 	b.w	80075d4 <__retarget_lock_init_recursive>
 8007308:	bd10      	pop	{r4, pc}
 800730a:	bf00      	nop
 800730c:	0800745d 	.word	0x0800745d
 8007310:	0800747f 	.word	0x0800747f
 8007314:	080074b7 	.word	0x080074b7
 8007318:	080074db 	.word	0x080074db
 800731c:	200003c0 	.word	0x200003c0

08007320 <stdio_exit_handler>:
 8007320:	4a02      	ldr	r2, [pc, #8]	; (800732c <stdio_exit_handler+0xc>)
 8007322:	4903      	ldr	r1, [pc, #12]	; (8007330 <stdio_exit_handler+0x10>)
 8007324:	4803      	ldr	r0, [pc, #12]	; (8007334 <stdio_exit_handler+0x14>)
 8007326:	f000 b869 	b.w	80073fc <_fwalk_sglue>
 800732a:	bf00      	nop
 800732c:	20000024 	.word	0x20000024
 8007330:	08007e9d 	.word	0x08007e9d
 8007334:	20000030 	.word	0x20000030

08007338 <cleanup_stdio>:
 8007338:	6841      	ldr	r1, [r0, #4]
 800733a:	4b0c      	ldr	r3, [pc, #48]	; (800736c <cleanup_stdio+0x34>)
 800733c:	4299      	cmp	r1, r3
 800733e:	b510      	push	{r4, lr}
 8007340:	4604      	mov	r4, r0
 8007342:	d001      	beq.n	8007348 <cleanup_stdio+0x10>
 8007344:	f000 fdaa 	bl	8007e9c <_fflush_r>
 8007348:	68a1      	ldr	r1, [r4, #8]
 800734a:	4b09      	ldr	r3, [pc, #36]	; (8007370 <cleanup_stdio+0x38>)
 800734c:	4299      	cmp	r1, r3
 800734e:	d002      	beq.n	8007356 <cleanup_stdio+0x1e>
 8007350:	4620      	mov	r0, r4
 8007352:	f000 fda3 	bl	8007e9c <_fflush_r>
 8007356:	68e1      	ldr	r1, [r4, #12]
 8007358:	4b06      	ldr	r3, [pc, #24]	; (8007374 <cleanup_stdio+0x3c>)
 800735a:	4299      	cmp	r1, r3
 800735c:	d004      	beq.n	8007368 <cleanup_stdio+0x30>
 800735e:	4620      	mov	r0, r4
 8007360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007364:	f000 bd9a 	b.w	8007e9c <_fflush_r>
 8007368:	bd10      	pop	{r4, pc}
 800736a:	bf00      	nop
 800736c:	200003c0 	.word	0x200003c0
 8007370:	20000428 	.word	0x20000428
 8007374:	20000490 	.word	0x20000490

08007378 <global_stdio_init.part.0>:
 8007378:	b510      	push	{r4, lr}
 800737a:	4b0b      	ldr	r3, [pc, #44]	; (80073a8 <global_stdio_init.part.0+0x30>)
 800737c:	4c0b      	ldr	r4, [pc, #44]	; (80073ac <global_stdio_init.part.0+0x34>)
 800737e:	4a0c      	ldr	r2, [pc, #48]	; (80073b0 <global_stdio_init.part.0+0x38>)
 8007380:	601a      	str	r2, [r3, #0]
 8007382:	4620      	mov	r0, r4
 8007384:	2200      	movs	r2, #0
 8007386:	2104      	movs	r1, #4
 8007388:	f7ff ff94 	bl	80072b4 <std>
 800738c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007390:	2201      	movs	r2, #1
 8007392:	2109      	movs	r1, #9
 8007394:	f7ff ff8e 	bl	80072b4 <std>
 8007398:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800739c:	2202      	movs	r2, #2
 800739e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073a2:	2112      	movs	r1, #18
 80073a4:	f7ff bf86 	b.w	80072b4 <std>
 80073a8:	200004f8 	.word	0x200004f8
 80073ac:	200003c0 	.word	0x200003c0
 80073b0:	08007321 	.word	0x08007321

080073b4 <__sfp_lock_acquire>:
 80073b4:	4801      	ldr	r0, [pc, #4]	; (80073bc <__sfp_lock_acquire+0x8>)
 80073b6:	f000 b90e 	b.w	80075d6 <__retarget_lock_acquire_recursive>
 80073ba:	bf00      	nop
 80073bc:	20000501 	.word	0x20000501

080073c0 <__sfp_lock_release>:
 80073c0:	4801      	ldr	r0, [pc, #4]	; (80073c8 <__sfp_lock_release+0x8>)
 80073c2:	f000 b909 	b.w	80075d8 <__retarget_lock_release_recursive>
 80073c6:	bf00      	nop
 80073c8:	20000501 	.word	0x20000501

080073cc <__sinit>:
 80073cc:	b510      	push	{r4, lr}
 80073ce:	4604      	mov	r4, r0
 80073d0:	f7ff fff0 	bl	80073b4 <__sfp_lock_acquire>
 80073d4:	6a23      	ldr	r3, [r4, #32]
 80073d6:	b11b      	cbz	r3, 80073e0 <__sinit+0x14>
 80073d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073dc:	f7ff bff0 	b.w	80073c0 <__sfp_lock_release>
 80073e0:	4b04      	ldr	r3, [pc, #16]	; (80073f4 <__sinit+0x28>)
 80073e2:	6223      	str	r3, [r4, #32]
 80073e4:	4b04      	ldr	r3, [pc, #16]	; (80073f8 <__sinit+0x2c>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d1f5      	bne.n	80073d8 <__sinit+0xc>
 80073ec:	f7ff ffc4 	bl	8007378 <global_stdio_init.part.0>
 80073f0:	e7f2      	b.n	80073d8 <__sinit+0xc>
 80073f2:	bf00      	nop
 80073f4:	08007339 	.word	0x08007339
 80073f8:	200004f8 	.word	0x200004f8

080073fc <_fwalk_sglue>:
 80073fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007400:	4607      	mov	r7, r0
 8007402:	4688      	mov	r8, r1
 8007404:	4614      	mov	r4, r2
 8007406:	2600      	movs	r6, #0
 8007408:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800740c:	f1b9 0901 	subs.w	r9, r9, #1
 8007410:	d505      	bpl.n	800741e <_fwalk_sglue+0x22>
 8007412:	6824      	ldr	r4, [r4, #0]
 8007414:	2c00      	cmp	r4, #0
 8007416:	d1f7      	bne.n	8007408 <_fwalk_sglue+0xc>
 8007418:	4630      	mov	r0, r6
 800741a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800741e:	89ab      	ldrh	r3, [r5, #12]
 8007420:	2b01      	cmp	r3, #1
 8007422:	d907      	bls.n	8007434 <_fwalk_sglue+0x38>
 8007424:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007428:	3301      	adds	r3, #1
 800742a:	d003      	beq.n	8007434 <_fwalk_sglue+0x38>
 800742c:	4629      	mov	r1, r5
 800742e:	4638      	mov	r0, r7
 8007430:	47c0      	blx	r8
 8007432:	4306      	orrs	r6, r0
 8007434:	3568      	adds	r5, #104	; 0x68
 8007436:	e7e9      	b.n	800740c <_fwalk_sglue+0x10>

08007438 <iprintf>:
 8007438:	b40f      	push	{r0, r1, r2, r3}
 800743a:	b507      	push	{r0, r1, r2, lr}
 800743c:	4906      	ldr	r1, [pc, #24]	; (8007458 <iprintf+0x20>)
 800743e:	ab04      	add	r3, sp, #16
 8007440:	6808      	ldr	r0, [r1, #0]
 8007442:	f853 2b04 	ldr.w	r2, [r3], #4
 8007446:	6881      	ldr	r1, [r0, #8]
 8007448:	9301      	str	r3, [sp, #4]
 800744a:	f000 f9f7 	bl	800783c <_vfiprintf_r>
 800744e:	b003      	add	sp, #12
 8007450:	f85d eb04 	ldr.w	lr, [sp], #4
 8007454:	b004      	add	sp, #16
 8007456:	4770      	bx	lr
 8007458:	2000007c 	.word	0x2000007c

0800745c <__sread>:
 800745c:	b510      	push	{r4, lr}
 800745e:	460c      	mov	r4, r1
 8007460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007464:	f000 f868 	bl	8007538 <_read_r>
 8007468:	2800      	cmp	r0, #0
 800746a:	bfab      	itete	ge
 800746c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800746e:	89a3      	ldrhlt	r3, [r4, #12]
 8007470:	181b      	addge	r3, r3, r0
 8007472:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007476:	bfac      	ite	ge
 8007478:	6563      	strge	r3, [r4, #84]	; 0x54
 800747a:	81a3      	strhlt	r3, [r4, #12]
 800747c:	bd10      	pop	{r4, pc}

0800747e <__swrite>:
 800747e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007482:	461f      	mov	r7, r3
 8007484:	898b      	ldrh	r3, [r1, #12]
 8007486:	05db      	lsls	r3, r3, #23
 8007488:	4605      	mov	r5, r0
 800748a:	460c      	mov	r4, r1
 800748c:	4616      	mov	r6, r2
 800748e:	d505      	bpl.n	800749c <__swrite+0x1e>
 8007490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007494:	2302      	movs	r3, #2
 8007496:	2200      	movs	r2, #0
 8007498:	f000 f83c 	bl	8007514 <_lseek_r>
 800749c:	89a3      	ldrh	r3, [r4, #12]
 800749e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074a6:	81a3      	strh	r3, [r4, #12]
 80074a8:	4632      	mov	r2, r6
 80074aa:	463b      	mov	r3, r7
 80074ac:	4628      	mov	r0, r5
 80074ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074b2:	f000 b853 	b.w	800755c <_write_r>

080074b6 <__sseek>:
 80074b6:	b510      	push	{r4, lr}
 80074b8:	460c      	mov	r4, r1
 80074ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074be:	f000 f829 	bl	8007514 <_lseek_r>
 80074c2:	1c43      	adds	r3, r0, #1
 80074c4:	89a3      	ldrh	r3, [r4, #12]
 80074c6:	bf15      	itete	ne
 80074c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80074ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80074ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80074d2:	81a3      	strheq	r3, [r4, #12]
 80074d4:	bf18      	it	ne
 80074d6:	81a3      	strhne	r3, [r4, #12]
 80074d8:	bd10      	pop	{r4, pc}

080074da <__sclose>:
 80074da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074de:	f000 b809 	b.w	80074f4 <_close_r>

080074e2 <memset>:
 80074e2:	4402      	add	r2, r0
 80074e4:	4603      	mov	r3, r0
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d100      	bne.n	80074ec <memset+0xa>
 80074ea:	4770      	bx	lr
 80074ec:	f803 1b01 	strb.w	r1, [r3], #1
 80074f0:	e7f9      	b.n	80074e6 <memset+0x4>
	...

080074f4 <_close_r>:
 80074f4:	b538      	push	{r3, r4, r5, lr}
 80074f6:	4d06      	ldr	r5, [pc, #24]	; (8007510 <_close_r+0x1c>)
 80074f8:	2300      	movs	r3, #0
 80074fa:	4604      	mov	r4, r0
 80074fc:	4608      	mov	r0, r1
 80074fe:	602b      	str	r3, [r5, #0]
 8007500:	f7f9 ff9d 	bl	800143e <_close>
 8007504:	1c43      	adds	r3, r0, #1
 8007506:	d102      	bne.n	800750e <_close_r+0x1a>
 8007508:	682b      	ldr	r3, [r5, #0]
 800750a:	b103      	cbz	r3, 800750e <_close_r+0x1a>
 800750c:	6023      	str	r3, [r4, #0]
 800750e:	bd38      	pop	{r3, r4, r5, pc}
 8007510:	200004fc 	.word	0x200004fc

08007514 <_lseek_r>:
 8007514:	b538      	push	{r3, r4, r5, lr}
 8007516:	4d07      	ldr	r5, [pc, #28]	; (8007534 <_lseek_r+0x20>)
 8007518:	4604      	mov	r4, r0
 800751a:	4608      	mov	r0, r1
 800751c:	4611      	mov	r1, r2
 800751e:	2200      	movs	r2, #0
 8007520:	602a      	str	r2, [r5, #0]
 8007522:	461a      	mov	r2, r3
 8007524:	f7f9 ffb2 	bl	800148c <_lseek>
 8007528:	1c43      	adds	r3, r0, #1
 800752a:	d102      	bne.n	8007532 <_lseek_r+0x1e>
 800752c:	682b      	ldr	r3, [r5, #0]
 800752e:	b103      	cbz	r3, 8007532 <_lseek_r+0x1e>
 8007530:	6023      	str	r3, [r4, #0]
 8007532:	bd38      	pop	{r3, r4, r5, pc}
 8007534:	200004fc 	.word	0x200004fc

08007538 <_read_r>:
 8007538:	b538      	push	{r3, r4, r5, lr}
 800753a:	4d07      	ldr	r5, [pc, #28]	; (8007558 <_read_r+0x20>)
 800753c:	4604      	mov	r4, r0
 800753e:	4608      	mov	r0, r1
 8007540:	4611      	mov	r1, r2
 8007542:	2200      	movs	r2, #0
 8007544:	602a      	str	r2, [r5, #0]
 8007546:	461a      	mov	r2, r3
 8007548:	f7f9 ff40 	bl	80013cc <_read>
 800754c:	1c43      	adds	r3, r0, #1
 800754e:	d102      	bne.n	8007556 <_read_r+0x1e>
 8007550:	682b      	ldr	r3, [r5, #0]
 8007552:	b103      	cbz	r3, 8007556 <_read_r+0x1e>
 8007554:	6023      	str	r3, [r4, #0]
 8007556:	bd38      	pop	{r3, r4, r5, pc}
 8007558:	200004fc 	.word	0x200004fc

0800755c <_write_r>:
 800755c:	b538      	push	{r3, r4, r5, lr}
 800755e:	4d07      	ldr	r5, [pc, #28]	; (800757c <_write_r+0x20>)
 8007560:	4604      	mov	r4, r0
 8007562:	4608      	mov	r0, r1
 8007564:	4611      	mov	r1, r2
 8007566:	2200      	movs	r2, #0
 8007568:	602a      	str	r2, [r5, #0]
 800756a:	461a      	mov	r2, r3
 800756c:	f7f9 ff4b 	bl	8001406 <_write>
 8007570:	1c43      	adds	r3, r0, #1
 8007572:	d102      	bne.n	800757a <_write_r+0x1e>
 8007574:	682b      	ldr	r3, [r5, #0]
 8007576:	b103      	cbz	r3, 800757a <_write_r+0x1e>
 8007578:	6023      	str	r3, [r4, #0]
 800757a:	bd38      	pop	{r3, r4, r5, pc}
 800757c:	200004fc 	.word	0x200004fc

08007580 <__errno>:
 8007580:	4b01      	ldr	r3, [pc, #4]	; (8007588 <__errno+0x8>)
 8007582:	6818      	ldr	r0, [r3, #0]
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	2000007c 	.word	0x2000007c

0800758c <__libc_init_array>:
 800758c:	b570      	push	{r4, r5, r6, lr}
 800758e:	4d0d      	ldr	r5, [pc, #52]	; (80075c4 <__libc_init_array+0x38>)
 8007590:	4c0d      	ldr	r4, [pc, #52]	; (80075c8 <__libc_init_array+0x3c>)
 8007592:	1b64      	subs	r4, r4, r5
 8007594:	10a4      	asrs	r4, r4, #2
 8007596:	2600      	movs	r6, #0
 8007598:	42a6      	cmp	r6, r4
 800759a:	d109      	bne.n	80075b0 <__libc_init_array+0x24>
 800759c:	4d0b      	ldr	r5, [pc, #44]	; (80075cc <__libc_init_array+0x40>)
 800759e:	4c0c      	ldr	r4, [pc, #48]	; (80075d0 <__libc_init_array+0x44>)
 80075a0:	f000 fdce 	bl	8008140 <_init>
 80075a4:	1b64      	subs	r4, r4, r5
 80075a6:	10a4      	asrs	r4, r4, #2
 80075a8:	2600      	movs	r6, #0
 80075aa:	42a6      	cmp	r6, r4
 80075ac:	d105      	bne.n	80075ba <__libc_init_array+0x2e>
 80075ae:	bd70      	pop	{r4, r5, r6, pc}
 80075b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80075b4:	4798      	blx	r3
 80075b6:	3601      	adds	r6, #1
 80075b8:	e7ee      	b.n	8007598 <__libc_init_array+0xc>
 80075ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80075be:	4798      	blx	r3
 80075c0:	3601      	adds	r6, #1
 80075c2:	e7f2      	b.n	80075aa <__libc_init_array+0x1e>
 80075c4:	08008490 	.word	0x08008490
 80075c8:	08008490 	.word	0x08008490
 80075cc:	08008490 	.word	0x08008490
 80075d0:	08008494 	.word	0x08008494

080075d4 <__retarget_lock_init_recursive>:
 80075d4:	4770      	bx	lr

080075d6 <__retarget_lock_acquire_recursive>:
 80075d6:	4770      	bx	lr

080075d8 <__retarget_lock_release_recursive>:
 80075d8:	4770      	bx	lr

080075da <memcpy>:
 80075da:	440a      	add	r2, r1
 80075dc:	4291      	cmp	r1, r2
 80075de:	f100 33ff 	add.w	r3, r0, #4294967295
 80075e2:	d100      	bne.n	80075e6 <memcpy+0xc>
 80075e4:	4770      	bx	lr
 80075e6:	b510      	push	{r4, lr}
 80075e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075f0:	4291      	cmp	r1, r2
 80075f2:	d1f9      	bne.n	80075e8 <memcpy+0xe>
 80075f4:	bd10      	pop	{r4, pc}
	...

080075f8 <_free_r>:
 80075f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075fa:	2900      	cmp	r1, #0
 80075fc:	d044      	beq.n	8007688 <_free_r+0x90>
 80075fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007602:	9001      	str	r0, [sp, #4]
 8007604:	2b00      	cmp	r3, #0
 8007606:	f1a1 0404 	sub.w	r4, r1, #4
 800760a:	bfb8      	it	lt
 800760c:	18e4      	addlt	r4, r4, r3
 800760e:	f000 f8df 	bl	80077d0 <__malloc_lock>
 8007612:	4a1e      	ldr	r2, [pc, #120]	; (800768c <_free_r+0x94>)
 8007614:	9801      	ldr	r0, [sp, #4]
 8007616:	6813      	ldr	r3, [r2, #0]
 8007618:	b933      	cbnz	r3, 8007628 <_free_r+0x30>
 800761a:	6063      	str	r3, [r4, #4]
 800761c:	6014      	str	r4, [r2, #0]
 800761e:	b003      	add	sp, #12
 8007620:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007624:	f000 b8da 	b.w	80077dc <__malloc_unlock>
 8007628:	42a3      	cmp	r3, r4
 800762a:	d908      	bls.n	800763e <_free_r+0x46>
 800762c:	6825      	ldr	r5, [r4, #0]
 800762e:	1961      	adds	r1, r4, r5
 8007630:	428b      	cmp	r3, r1
 8007632:	bf01      	itttt	eq
 8007634:	6819      	ldreq	r1, [r3, #0]
 8007636:	685b      	ldreq	r3, [r3, #4]
 8007638:	1949      	addeq	r1, r1, r5
 800763a:	6021      	streq	r1, [r4, #0]
 800763c:	e7ed      	b.n	800761a <_free_r+0x22>
 800763e:	461a      	mov	r2, r3
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	b10b      	cbz	r3, 8007648 <_free_r+0x50>
 8007644:	42a3      	cmp	r3, r4
 8007646:	d9fa      	bls.n	800763e <_free_r+0x46>
 8007648:	6811      	ldr	r1, [r2, #0]
 800764a:	1855      	adds	r5, r2, r1
 800764c:	42a5      	cmp	r5, r4
 800764e:	d10b      	bne.n	8007668 <_free_r+0x70>
 8007650:	6824      	ldr	r4, [r4, #0]
 8007652:	4421      	add	r1, r4
 8007654:	1854      	adds	r4, r2, r1
 8007656:	42a3      	cmp	r3, r4
 8007658:	6011      	str	r1, [r2, #0]
 800765a:	d1e0      	bne.n	800761e <_free_r+0x26>
 800765c:	681c      	ldr	r4, [r3, #0]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	6053      	str	r3, [r2, #4]
 8007662:	440c      	add	r4, r1
 8007664:	6014      	str	r4, [r2, #0]
 8007666:	e7da      	b.n	800761e <_free_r+0x26>
 8007668:	d902      	bls.n	8007670 <_free_r+0x78>
 800766a:	230c      	movs	r3, #12
 800766c:	6003      	str	r3, [r0, #0]
 800766e:	e7d6      	b.n	800761e <_free_r+0x26>
 8007670:	6825      	ldr	r5, [r4, #0]
 8007672:	1961      	adds	r1, r4, r5
 8007674:	428b      	cmp	r3, r1
 8007676:	bf04      	itt	eq
 8007678:	6819      	ldreq	r1, [r3, #0]
 800767a:	685b      	ldreq	r3, [r3, #4]
 800767c:	6063      	str	r3, [r4, #4]
 800767e:	bf04      	itt	eq
 8007680:	1949      	addeq	r1, r1, r5
 8007682:	6021      	streq	r1, [r4, #0]
 8007684:	6054      	str	r4, [r2, #4]
 8007686:	e7ca      	b.n	800761e <_free_r+0x26>
 8007688:	b003      	add	sp, #12
 800768a:	bd30      	pop	{r4, r5, pc}
 800768c:	20000504 	.word	0x20000504

08007690 <sbrk_aligned>:
 8007690:	b570      	push	{r4, r5, r6, lr}
 8007692:	4e0e      	ldr	r6, [pc, #56]	; (80076cc <sbrk_aligned+0x3c>)
 8007694:	460c      	mov	r4, r1
 8007696:	6831      	ldr	r1, [r6, #0]
 8007698:	4605      	mov	r5, r0
 800769a:	b911      	cbnz	r1, 80076a2 <sbrk_aligned+0x12>
 800769c:	f000 fcbc 	bl	8008018 <_sbrk_r>
 80076a0:	6030      	str	r0, [r6, #0]
 80076a2:	4621      	mov	r1, r4
 80076a4:	4628      	mov	r0, r5
 80076a6:	f000 fcb7 	bl	8008018 <_sbrk_r>
 80076aa:	1c43      	adds	r3, r0, #1
 80076ac:	d00a      	beq.n	80076c4 <sbrk_aligned+0x34>
 80076ae:	1cc4      	adds	r4, r0, #3
 80076b0:	f024 0403 	bic.w	r4, r4, #3
 80076b4:	42a0      	cmp	r0, r4
 80076b6:	d007      	beq.n	80076c8 <sbrk_aligned+0x38>
 80076b8:	1a21      	subs	r1, r4, r0
 80076ba:	4628      	mov	r0, r5
 80076bc:	f000 fcac 	bl	8008018 <_sbrk_r>
 80076c0:	3001      	adds	r0, #1
 80076c2:	d101      	bne.n	80076c8 <sbrk_aligned+0x38>
 80076c4:	f04f 34ff 	mov.w	r4, #4294967295
 80076c8:	4620      	mov	r0, r4
 80076ca:	bd70      	pop	{r4, r5, r6, pc}
 80076cc:	20000508 	.word	0x20000508

080076d0 <_malloc_r>:
 80076d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076d4:	1ccd      	adds	r5, r1, #3
 80076d6:	f025 0503 	bic.w	r5, r5, #3
 80076da:	3508      	adds	r5, #8
 80076dc:	2d0c      	cmp	r5, #12
 80076de:	bf38      	it	cc
 80076e0:	250c      	movcc	r5, #12
 80076e2:	2d00      	cmp	r5, #0
 80076e4:	4607      	mov	r7, r0
 80076e6:	db01      	blt.n	80076ec <_malloc_r+0x1c>
 80076e8:	42a9      	cmp	r1, r5
 80076ea:	d905      	bls.n	80076f8 <_malloc_r+0x28>
 80076ec:	230c      	movs	r3, #12
 80076ee:	603b      	str	r3, [r7, #0]
 80076f0:	2600      	movs	r6, #0
 80076f2:	4630      	mov	r0, r6
 80076f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80077cc <_malloc_r+0xfc>
 80076fc:	f000 f868 	bl	80077d0 <__malloc_lock>
 8007700:	f8d8 3000 	ldr.w	r3, [r8]
 8007704:	461c      	mov	r4, r3
 8007706:	bb5c      	cbnz	r4, 8007760 <_malloc_r+0x90>
 8007708:	4629      	mov	r1, r5
 800770a:	4638      	mov	r0, r7
 800770c:	f7ff ffc0 	bl	8007690 <sbrk_aligned>
 8007710:	1c43      	adds	r3, r0, #1
 8007712:	4604      	mov	r4, r0
 8007714:	d155      	bne.n	80077c2 <_malloc_r+0xf2>
 8007716:	f8d8 4000 	ldr.w	r4, [r8]
 800771a:	4626      	mov	r6, r4
 800771c:	2e00      	cmp	r6, #0
 800771e:	d145      	bne.n	80077ac <_malloc_r+0xdc>
 8007720:	2c00      	cmp	r4, #0
 8007722:	d048      	beq.n	80077b6 <_malloc_r+0xe6>
 8007724:	6823      	ldr	r3, [r4, #0]
 8007726:	4631      	mov	r1, r6
 8007728:	4638      	mov	r0, r7
 800772a:	eb04 0903 	add.w	r9, r4, r3
 800772e:	f000 fc73 	bl	8008018 <_sbrk_r>
 8007732:	4581      	cmp	r9, r0
 8007734:	d13f      	bne.n	80077b6 <_malloc_r+0xe6>
 8007736:	6821      	ldr	r1, [r4, #0]
 8007738:	1a6d      	subs	r5, r5, r1
 800773a:	4629      	mov	r1, r5
 800773c:	4638      	mov	r0, r7
 800773e:	f7ff ffa7 	bl	8007690 <sbrk_aligned>
 8007742:	3001      	adds	r0, #1
 8007744:	d037      	beq.n	80077b6 <_malloc_r+0xe6>
 8007746:	6823      	ldr	r3, [r4, #0]
 8007748:	442b      	add	r3, r5
 800774a:	6023      	str	r3, [r4, #0]
 800774c:	f8d8 3000 	ldr.w	r3, [r8]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d038      	beq.n	80077c6 <_malloc_r+0xf6>
 8007754:	685a      	ldr	r2, [r3, #4]
 8007756:	42a2      	cmp	r2, r4
 8007758:	d12b      	bne.n	80077b2 <_malloc_r+0xe2>
 800775a:	2200      	movs	r2, #0
 800775c:	605a      	str	r2, [r3, #4]
 800775e:	e00f      	b.n	8007780 <_malloc_r+0xb0>
 8007760:	6822      	ldr	r2, [r4, #0]
 8007762:	1b52      	subs	r2, r2, r5
 8007764:	d41f      	bmi.n	80077a6 <_malloc_r+0xd6>
 8007766:	2a0b      	cmp	r2, #11
 8007768:	d917      	bls.n	800779a <_malloc_r+0xca>
 800776a:	1961      	adds	r1, r4, r5
 800776c:	42a3      	cmp	r3, r4
 800776e:	6025      	str	r5, [r4, #0]
 8007770:	bf18      	it	ne
 8007772:	6059      	strne	r1, [r3, #4]
 8007774:	6863      	ldr	r3, [r4, #4]
 8007776:	bf08      	it	eq
 8007778:	f8c8 1000 	streq.w	r1, [r8]
 800777c:	5162      	str	r2, [r4, r5]
 800777e:	604b      	str	r3, [r1, #4]
 8007780:	4638      	mov	r0, r7
 8007782:	f104 060b 	add.w	r6, r4, #11
 8007786:	f000 f829 	bl	80077dc <__malloc_unlock>
 800778a:	f026 0607 	bic.w	r6, r6, #7
 800778e:	1d23      	adds	r3, r4, #4
 8007790:	1af2      	subs	r2, r6, r3
 8007792:	d0ae      	beq.n	80076f2 <_malloc_r+0x22>
 8007794:	1b9b      	subs	r3, r3, r6
 8007796:	50a3      	str	r3, [r4, r2]
 8007798:	e7ab      	b.n	80076f2 <_malloc_r+0x22>
 800779a:	42a3      	cmp	r3, r4
 800779c:	6862      	ldr	r2, [r4, #4]
 800779e:	d1dd      	bne.n	800775c <_malloc_r+0x8c>
 80077a0:	f8c8 2000 	str.w	r2, [r8]
 80077a4:	e7ec      	b.n	8007780 <_malloc_r+0xb0>
 80077a6:	4623      	mov	r3, r4
 80077a8:	6864      	ldr	r4, [r4, #4]
 80077aa:	e7ac      	b.n	8007706 <_malloc_r+0x36>
 80077ac:	4634      	mov	r4, r6
 80077ae:	6876      	ldr	r6, [r6, #4]
 80077b0:	e7b4      	b.n	800771c <_malloc_r+0x4c>
 80077b2:	4613      	mov	r3, r2
 80077b4:	e7cc      	b.n	8007750 <_malloc_r+0x80>
 80077b6:	230c      	movs	r3, #12
 80077b8:	603b      	str	r3, [r7, #0]
 80077ba:	4638      	mov	r0, r7
 80077bc:	f000 f80e 	bl	80077dc <__malloc_unlock>
 80077c0:	e797      	b.n	80076f2 <_malloc_r+0x22>
 80077c2:	6025      	str	r5, [r4, #0]
 80077c4:	e7dc      	b.n	8007780 <_malloc_r+0xb0>
 80077c6:	605b      	str	r3, [r3, #4]
 80077c8:	deff      	udf	#255	; 0xff
 80077ca:	bf00      	nop
 80077cc:	20000504 	.word	0x20000504

080077d0 <__malloc_lock>:
 80077d0:	4801      	ldr	r0, [pc, #4]	; (80077d8 <__malloc_lock+0x8>)
 80077d2:	f7ff bf00 	b.w	80075d6 <__retarget_lock_acquire_recursive>
 80077d6:	bf00      	nop
 80077d8:	20000500 	.word	0x20000500

080077dc <__malloc_unlock>:
 80077dc:	4801      	ldr	r0, [pc, #4]	; (80077e4 <__malloc_unlock+0x8>)
 80077de:	f7ff befb 	b.w	80075d8 <__retarget_lock_release_recursive>
 80077e2:	bf00      	nop
 80077e4:	20000500 	.word	0x20000500

080077e8 <__sfputc_r>:
 80077e8:	6893      	ldr	r3, [r2, #8]
 80077ea:	3b01      	subs	r3, #1
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	b410      	push	{r4}
 80077f0:	6093      	str	r3, [r2, #8]
 80077f2:	da08      	bge.n	8007806 <__sfputc_r+0x1e>
 80077f4:	6994      	ldr	r4, [r2, #24]
 80077f6:	42a3      	cmp	r3, r4
 80077f8:	db01      	blt.n	80077fe <__sfputc_r+0x16>
 80077fa:	290a      	cmp	r1, #10
 80077fc:	d103      	bne.n	8007806 <__sfputc_r+0x1e>
 80077fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007802:	f000 bb73 	b.w	8007eec <__swbuf_r>
 8007806:	6813      	ldr	r3, [r2, #0]
 8007808:	1c58      	adds	r0, r3, #1
 800780a:	6010      	str	r0, [r2, #0]
 800780c:	7019      	strb	r1, [r3, #0]
 800780e:	4608      	mov	r0, r1
 8007810:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007814:	4770      	bx	lr

08007816 <__sfputs_r>:
 8007816:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007818:	4606      	mov	r6, r0
 800781a:	460f      	mov	r7, r1
 800781c:	4614      	mov	r4, r2
 800781e:	18d5      	adds	r5, r2, r3
 8007820:	42ac      	cmp	r4, r5
 8007822:	d101      	bne.n	8007828 <__sfputs_r+0x12>
 8007824:	2000      	movs	r0, #0
 8007826:	e007      	b.n	8007838 <__sfputs_r+0x22>
 8007828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800782c:	463a      	mov	r2, r7
 800782e:	4630      	mov	r0, r6
 8007830:	f7ff ffda 	bl	80077e8 <__sfputc_r>
 8007834:	1c43      	adds	r3, r0, #1
 8007836:	d1f3      	bne.n	8007820 <__sfputs_r+0xa>
 8007838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800783c <_vfiprintf_r>:
 800783c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007840:	460d      	mov	r5, r1
 8007842:	b09d      	sub	sp, #116	; 0x74
 8007844:	4614      	mov	r4, r2
 8007846:	4698      	mov	r8, r3
 8007848:	4606      	mov	r6, r0
 800784a:	b118      	cbz	r0, 8007854 <_vfiprintf_r+0x18>
 800784c:	6a03      	ldr	r3, [r0, #32]
 800784e:	b90b      	cbnz	r3, 8007854 <_vfiprintf_r+0x18>
 8007850:	f7ff fdbc 	bl	80073cc <__sinit>
 8007854:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007856:	07d9      	lsls	r1, r3, #31
 8007858:	d405      	bmi.n	8007866 <_vfiprintf_r+0x2a>
 800785a:	89ab      	ldrh	r3, [r5, #12]
 800785c:	059a      	lsls	r2, r3, #22
 800785e:	d402      	bmi.n	8007866 <_vfiprintf_r+0x2a>
 8007860:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007862:	f7ff feb8 	bl	80075d6 <__retarget_lock_acquire_recursive>
 8007866:	89ab      	ldrh	r3, [r5, #12]
 8007868:	071b      	lsls	r3, r3, #28
 800786a:	d501      	bpl.n	8007870 <_vfiprintf_r+0x34>
 800786c:	692b      	ldr	r3, [r5, #16]
 800786e:	b99b      	cbnz	r3, 8007898 <_vfiprintf_r+0x5c>
 8007870:	4629      	mov	r1, r5
 8007872:	4630      	mov	r0, r6
 8007874:	f000 fb78 	bl	8007f68 <__swsetup_r>
 8007878:	b170      	cbz	r0, 8007898 <_vfiprintf_r+0x5c>
 800787a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800787c:	07dc      	lsls	r4, r3, #31
 800787e:	d504      	bpl.n	800788a <_vfiprintf_r+0x4e>
 8007880:	f04f 30ff 	mov.w	r0, #4294967295
 8007884:	b01d      	add	sp, #116	; 0x74
 8007886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800788a:	89ab      	ldrh	r3, [r5, #12]
 800788c:	0598      	lsls	r0, r3, #22
 800788e:	d4f7      	bmi.n	8007880 <_vfiprintf_r+0x44>
 8007890:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007892:	f7ff fea1 	bl	80075d8 <__retarget_lock_release_recursive>
 8007896:	e7f3      	b.n	8007880 <_vfiprintf_r+0x44>
 8007898:	2300      	movs	r3, #0
 800789a:	9309      	str	r3, [sp, #36]	; 0x24
 800789c:	2320      	movs	r3, #32
 800789e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80078a6:	2330      	movs	r3, #48	; 0x30
 80078a8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007a5c <_vfiprintf_r+0x220>
 80078ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078b0:	f04f 0901 	mov.w	r9, #1
 80078b4:	4623      	mov	r3, r4
 80078b6:	469a      	mov	sl, r3
 80078b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078bc:	b10a      	cbz	r2, 80078c2 <_vfiprintf_r+0x86>
 80078be:	2a25      	cmp	r2, #37	; 0x25
 80078c0:	d1f9      	bne.n	80078b6 <_vfiprintf_r+0x7a>
 80078c2:	ebba 0b04 	subs.w	fp, sl, r4
 80078c6:	d00b      	beq.n	80078e0 <_vfiprintf_r+0xa4>
 80078c8:	465b      	mov	r3, fp
 80078ca:	4622      	mov	r2, r4
 80078cc:	4629      	mov	r1, r5
 80078ce:	4630      	mov	r0, r6
 80078d0:	f7ff ffa1 	bl	8007816 <__sfputs_r>
 80078d4:	3001      	adds	r0, #1
 80078d6:	f000 80a9 	beq.w	8007a2c <_vfiprintf_r+0x1f0>
 80078da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078dc:	445a      	add	r2, fp
 80078de:	9209      	str	r2, [sp, #36]	; 0x24
 80078e0:	f89a 3000 	ldrb.w	r3, [sl]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f000 80a1 	beq.w	8007a2c <_vfiprintf_r+0x1f0>
 80078ea:	2300      	movs	r3, #0
 80078ec:	f04f 32ff 	mov.w	r2, #4294967295
 80078f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078f4:	f10a 0a01 	add.w	sl, sl, #1
 80078f8:	9304      	str	r3, [sp, #16]
 80078fa:	9307      	str	r3, [sp, #28]
 80078fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007900:	931a      	str	r3, [sp, #104]	; 0x68
 8007902:	4654      	mov	r4, sl
 8007904:	2205      	movs	r2, #5
 8007906:	f814 1b01 	ldrb.w	r1, [r4], #1
 800790a:	4854      	ldr	r0, [pc, #336]	; (8007a5c <_vfiprintf_r+0x220>)
 800790c:	f7f8 fc40 	bl	8000190 <memchr>
 8007910:	9a04      	ldr	r2, [sp, #16]
 8007912:	b9d8      	cbnz	r0, 800794c <_vfiprintf_r+0x110>
 8007914:	06d1      	lsls	r1, r2, #27
 8007916:	bf44      	itt	mi
 8007918:	2320      	movmi	r3, #32
 800791a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800791e:	0713      	lsls	r3, r2, #28
 8007920:	bf44      	itt	mi
 8007922:	232b      	movmi	r3, #43	; 0x2b
 8007924:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007928:	f89a 3000 	ldrb.w	r3, [sl]
 800792c:	2b2a      	cmp	r3, #42	; 0x2a
 800792e:	d015      	beq.n	800795c <_vfiprintf_r+0x120>
 8007930:	9a07      	ldr	r2, [sp, #28]
 8007932:	4654      	mov	r4, sl
 8007934:	2000      	movs	r0, #0
 8007936:	f04f 0c0a 	mov.w	ip, #10
 800793a:	4621      	mov	r1, r4
 800793c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007940:	3b30      	subs	r3, #48	; 0x30
 8007942:	2b09      	cmp	r3, #9
 8007944:	d94d      	bls.n	80079e2 <_vfiprintf_r+0x1a6>
 8007946:	b1b0      	cbz	r0, 8007976 <_vfiprintf_r+0x13a>
 8007948:	9207      	str	r2, [sp, #28]
 800794a:	e014      	b.n	8007976 <_vfiprintf_r+0x13a>
 800794c:	eba0 0308 	sub.w	r3, r0, r8
 8007950:	fa09 f303 	lsl.w	r3, r9, r3
 8007954:	4313      	orrs	r3, r2
 8007956:	9304      	str	r3, [sp, #16]
 8007958:	46a2      	mov	sl, r4
 800795a:	e7d2      	b.n	8007902 <_vfiprintf_r+0xc6>
 800795c:	9b03      	ldr	r3, [sp, #12]
 800795e:	1d19      	adds	r1, r3, #4
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	9103      	str	r1, [sp, #12]
 8007964:	2b00      	cmp	r3, #0
 8007966:	bfbb      	ittet	lt
 8007968:	425b      	neglt	r3, r3
 800796a:	f042 0202 	orrlt.w	r2, r2, #2
 800796e:	9307      	strge	r3, [sp, #28]
 8007970:	9307      	strlt	r3, [sp, #28]
 8007972:	bfb8      	it	lt
 8007974:	9204      	strlt	r2, [sp, #16]
 8007976:	7823      	ldrb	r3, [r4, #0]
 8007978:	2b2e      	cmp	r3, #46	; 0x2e
 800797a:	d10c      	bne.n	8007996 <_vfiprintf_r+0x15a>
 800797c:	7863      	ldrb	r3, [r4, #1]
 800797e:	2b2a      	cmp	r3, #42	; 0x2a
 8007980:	d134      	bne.n	80079ec <_vfiprintf_r+0x1b0>
 8007982:	9b03      	ldr	r3, [sp, #12]
 8007984:	1d1a      	adds	r2, r3, #4
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	9203      	str	r2, [sp, #12]
 800798a:	2b00      	cmp	r3, #0
 800798c:	bfb8      	it	lt
 800798e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007992:	3402      	adds	r4, #2
 8007994:	9305      	str	r3, [sp, #20]
 8007996:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007a6c <_vfiprintf_r+0x230>
 800799a:	7821      	ldrb	r1, [r4, #0]
 800799c:	2203      	movs	r2, #3
 800799e:	4650      	mov	r0, sl
 80079a0:	f7f8 fbf6 	bl	8000190 <memchr>
 80079a4:	b138      	cbz	r0, 80079b6 <_vfiprintf_r+0x17a>
 80079a6:	9b04      	ldr	r3, [sp, #16]
 80079a8:	eba0 000a 	sub.w	r0, r0, sl
 80079ac:	2240      	movs	r2, #64	; 0x40
 80079ae:	4082      	lsls	r2, r0
 80079b0:	4313      	orrs	r3, r2
 80079b2:	3401      	adds	r4, #1
 80079b4:	9304      	str	r3, [sp, #16]
 80079b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079ba:	4829      	ldr	r0, [pc, #164]	; (8007a60 <_vfiprintf_r+0x224>)
 80079bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079c0:	2206      	movs	r2, #6
 80079c2:	f7f8 fbe5 	bl	8000190 <memchr>
 80079c6:	2800      	cmp	r0, #0
 80079c8:	d03f      	beq.n	8007a4a <_vfiprintf_r+0x20e>
 80079ca:	4b26      	ldr	r3, [pc, #152]	; (8007a64 <_vfiprintf_r+0x228>)
 80079cc:	bb1b      	cbnz	r3, 8007a16 <_vfiprintf_r+0x1da>
 80079ce:	9b03      	ldr	r3, [sp, #12]
 80079d0:	3307      	adds	r3, #7
 80079d2:	f023 0307 	bic.w	r3, r3, #7
 80079d6:	3308      	adds	r3, #8
 80079d8:	9303      	str	r3, [sp, #12]
 80079da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079dc:	443b      	add	r3, r7
 80079de:	9309      	str	r3, [sp, #36]	; 0x24
 80079e0:	e768      	b.n	80078b4 <_vfiprintf_r+0x78>
 80079e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80079e6:	460c      	mov	r4, r1
 80079e8:	2001      	movs	r0, #1
 80079ea:	e7a6      	b.n	800793a <_vfiprintf_r+0xfe>
 80079ec:	2300      	movs	r3, #0
 80079ee:	3401      	adds	r4, #1
 80079f0:	9305      	str	r3, [sp, #20]
 80079f2:	4619      	mov	r1, r3
 80079f4:	f04f 0c0a 	mov.w	ip, #10
 80079f8:	4620      	mov	r0, r4
 80079fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079fe:	3a30      	subs	r2, #48	; 0x30
 8007a00:	2a09      	cmp	r2, #9
 8007a02:	d903      	bls.n	8007a0c <_vfiprintf_r+0x1d0>
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d0c6      	beq.n	8007996 <_vfiprintf_r+0x15a>
 8007a08:	9105      	str	r1, [sp, #20]
 8007a0a:	e7c4      	b.n	8007996 <_vfiprintf_r+0x15a>
 8007a0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a10:	4604      	mov	r4, r0
 8007a12:	2301      	movs	r3, #1
 8007a14:	e7f0      	b.n	80079f8 <_vfiprintf_r+0x1bc>
 8007a16:	ab03      	add	r3, sp, #12
 8007a18:	9300      	str	r3, [sp, #0]
 8007a1a:	462a      	mov	r2, r5
 8007a1c:	4b12      	ldr	r3, [pc, #72]	; (8007a68 <_vfiprintf_r+0x22c>)
 8007a1e:	a904      	add	r1, sp, #16
 8007a20:	4630      	mov	r0, r6
 8007a22:	f3af 8000 	nop.w
 8007a26:	4607      	mov	r7, r0
 8007a28:	1c78      	adds	r0, r7, #1
 8007a2a:	d1d6      	bne.n	80079da <_vfiprintf_r+0x19e>
 8007a2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a2e:	07d9      	lsls	r1, r3, #31
 8007a30:	d405      	bmi.n	8007a3e <_vfiprintf_r+0x202>
 8007a32:	89ab      	ldrh	r3, [r5, #12]
 8007a34:	059a      	lsls	r2, r3, #22
 8007a36:	d402      	bmi.n	8007a3e <_vfiprintf_r+0x202>
 8007a38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a3a:	f7ff fdcd 	bl	80075d8 <__retarget_lock_release_recursive>
 8007a3e:	89ab      	ldrh	r3, [r5, #12]
 8007a40:	065b      	lsls	r3, r3, #25
 8007a42:	f53f af1d 	bmi.w	8007880 <_vfiprintf_r+0x44>
 8007a46:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a48:	e71c      	b.n	8007884 <_vfiprintf_r+0x48>
 8007a4a:	ab03      	add	r3, sp, #12
 8007a4c:	9300      	str	r3, [sp, #0]
 8007a4e:	462a      	mov	r2, r5
 8007a50:	4b05      	ldr	r3, [pc, #20]	; (8007a68 <_vfiprintf_r+0x22c>)
 8007a52:	a904      	add	r1, sp, #16
 8007a54:	4630      	mov	r0, r6
 8007a56:	f000 f879 	bl	8007b4c <_printf_i>
 8007a5a:	e7e4      	b.n	8007a26 <_vfiprintf_r+0x1ea>
 8007a5c:	08008454 	.word	0x08008454
 8007a60:	0800845e 	.word	0x0800845e
 8007a64:	00000000 	.word	0x00000000
 8007a68:	08007817 	.word	0x08007817
 8007a6c:	0800845a 	.word	0x0800845a

08007a70 <_printf_common>:
 8007a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a74:	4616      	mov	r6, r2
 8007a76:	4699      	mov	r9, r3
 8007a78:	688a      	ldr	r2, [r1, #8]
 8007a7a:	690b      	ldr	r3, [r1, #16]
 8007a7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a80:	4293      	cmp	r3, r2
 8007a82:	bfb8      	it	lt
 8007a84:	4613      	movlt	r3, r2
 8007a86:	6033      	str	r3, [r6, #0]
 8007a88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a8c:	4607      	mov	r7, r0
 8007a8e:	460c      	mov	r4, r1
 8007a90:	b10a      	cbz	r2, 8007a96 <_printf_common+0x26>
 8007a92:	3301      	adds	r3, #1
 8007a94:	6033      	str	r3, [r6, #0]
 8007a96:	6823      	ldr	r3, [r4, #0]
 8007a98:	0699      	lsls	r1, r3, #26
 8007a9a:	bf42      	ittt	mi
 8007a9c:	6833      	ldrmi	r3, [r6, #0]
 8007a9e:	3302      	addmi	r3, #2
 8007aa0:	6033      	strmi	r3, [r6, #0]
 8007aa2:	6825      	ldr	r5, [r4, #0]
 8007aa4:	f015 0506 	ands.w	r5, r5, #6
 8007aa8:	d106      	bne.n	8007ab8 <_printf_common+0x48>
 8007aaa:	f104 0a19 	add.w	sl, r4, #25
 8007aae:	68e3      	ldr	r3, [r4, #12]
 8007ab0:	6832      	ldr	r2, [r6, #0]
 8007ab2:	1a9b      	subs	r3, r3, r2
 8007ab4:	42ab      	cmp	r3, r5
 8007ab6:	dc26      	bgt.n	8007b06 <_printf_common+0x96>
 8007ab8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007abc:	1e13      	subs	r3, r2, #0
 8007abe:	6822      	ldr	r2, [r4, #0]
 8007ac0:	bf18      	it	ne
 8007ac2:	2301      	movne	r3, #1
 8007ac4:	0692      	lsls	r2, r2, #26
 8007ac6:	d42b      	bmi.n	8007b20 <_printf_common+0xb0>
 8007ac8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007acc:	4649      	mov	r1, r9
 8007ace:	4638      	mov	r0, r7
 8007ad0:	47c0      	blx	r8
 8007ad2:	3001      	adds	r0, #1
 8007ad4:	d01e      	beq.n	8007b14 <_printf_common+0xa4>
 8007ad6:	6823      	ldr	r3, [r4, #0]
 8007ad8:	6922      	ldr	r2, [r4, #16]
 8007ada:	f003 0306 	and.w	r3, r3, #6
 8007ade:	2b04      	cmp	r3, #4
 8007ae0:	bf02      	ittt	eq
 8007ae2:	68e5      	ldreq	r5, [r4, #12]
 8007ae4:	6833      	ldreq	r3, [r6, #0]
 8007ae6:	1aed      	subeq	r5, r5, r3
 8007ae8:	68a3      	ldr	r3, [r4, #8]
 8007aea:	bf0c      	ite	eq
 8007aec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007af0:	2500      	movne	r5, #0
 8007af2:	4293      	cmp	r3, r2
 8007af4:	bfc4      	itt	gt
 8007af6:	1a9b      	subgt	r3, r3, r2
 8007af8:	18ed      	addgt	r5, r5, r3
 8007afa:	2600      	movs	r6, #0
 8007afc:	341a      	adds	r4, #26
 8007afe:	42b5      	cmp	r5, r6
 8007b00:	d11a      	bne.n	8007b38 <_printf_common+0xc8>
 8007b02:	2000      	movs	r0, #0
 8007b04:	e008      	b.n	8007b18 <_printf_common+0xa8>
 8007b06:	2301      	movs	r3, #1
 8007b08:	4652      	mov	r2, sl
 8007b0a:	4649      	mov	r1, r9
 8007b0c:	4638      	mov	r0, r7
 8007b0e:	47c0      	blx	r8
 8007b10:	3001      	adds	r0, #1
 8007b12:	d103      	bne.n	8007b1c <_printf_common+0xac>
 8007b14:	f04f 30ff 	mov.w	r0, #4294967295
 8007b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b1c:	3501      	adds	r5, #1
 8007b1e:	e7c6      	b.n	8007aae <_printf_common+0x3e>
 8007b20:	18e1      	adds	r1, r4, r3
 8007b22:	1c5a      	adds	r2, r3, #1
 8007b24:	2030      	movs	r0, #48	; 0x30
 8007b26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b2a:	4422      	add	r2, r4
 8007b2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b34:	3302      	adds	r3, #2
 8007b36:	e7c7      	b.n	8007ac8 <_printf_common+0x58>
 8007b38:	2301      	movs	r3, #1
 8007b3a:	4622      	mov	r2, r4
 8007b3c:	4649      	mov	r1, r9
 8007b3e:	4638      	mov	r0, r7
 8007b40:	47c0      	blx	r8
 8007b42:	3001      	adds	r0, #1
 8007b44:	d0e6      	beq.n	8007b14 <_printf_common+0xa4>
 8007b46:	3601      	adds	r6, #1
 8007b48:	e7d9      	b.n	8007afe <_printf_common+0x8e>
	...

08007b4c <_printf_i>:
 8007b4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b50:	7e0f      	ldrb	r7, [r1, #24]
 8007b52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007b54:	2f78      	cmp	r7, #120	; 0x78
 8007b56:	4691      	mov	r9, r2
 8007b58:	4680      	mov	r8, r0
 8007b5a:	460c      	mov	r4, r1
 8007b5c:	469a      	mov	sl, r3
 8007b5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007b62:	d807      	bhi.n	8007b74 <_printf_i+0x28>
 8007b64:	2f62      	cmp	r7, #98	; 0x62
 8007b66:	d80a      	bhi.n	8007b7e <_printf_i+0x32>
 8007b68:	2f00      	cmp	r7, #0
 8007b6a:	f000 80d4 	beq.w	8007d16 <_printf_i+0x1ca>
 8007b6e:	2f58      	cmp	r7, #88	; 0x58
 8007b70:	f000 80c0 	beq.w	8007cf4 <_printf_i+0x1a8>
 8007b74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b7c:	e03a      	b.n	8007bf4 <_printf_i+0xa8>
 8007b7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b82:	2b15      	cmp	r3, #21
 8007b84:	d8f6      	bhi.n	8007b74 <_printf_i+0x28>
 8007b86:	a101      	add	r1, pc, #4	; (adr r1, 8007b8c <_printf_i+0x40>)
 8007b88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b8c:	08007be5 	.word	0x08007be5
 8007b90:	08007bf9 	.word	0x08007bf9
 8007b94:	08007b75 	.word	0x08007b75
 8007b98:	08007b75 	.word	0x08007b75
 8007b9c:	08007b75 	.word	0x08007b75
 8007ba0:	08007b75 	.word	0x08007b75
 8007ba4:	08007bf9 	.word	0x08007bf9
 8007ba8:	08007b75 	.word	0x08007b75
 8007bac:	08007b75 	.word	0x08007b75
 8007bb0:	08007b75 	.word	0x08007b75
 8007bb4:	08007b75 	.word	0x08007b75
 8007bb8:	08007cfd 	.word	0x08007cfd
 8007bbc:	08007c25 	.word	0x08007c25
 8007bc0:	08007cb7 	.word	0x08007cb7
 8007bc4:	08007b75 	.word	0x08007b75
 8007bc8:	08007b75 	.word	0x08007b75
 8007bcc:	08007d1f 	.word	0x08007d1f
 8007bd0:	08007b75 	.word	0x08007b75
 8007bd4:	08007c25 	.word	0x08007c25
 8007bd8:	08007b75 	.word	0x08007b75
 8007bdc:	08007b75 	.word	0x08007b75
 8007be0:	08007cbf 	.word	0x08007cbf
 8007be4:	682b      	ldr	r3, [r5, #0]
 8007be6:	1d1a      	adds	r2, r3, #4
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	602a      	str	r2, [r5, #0]
 8007bec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e09f      	b.n	8007d38 <_printf_i+0x1ec>
 8007bf8:	6820      	ldr	r0, [r4, #0]
 8007bfa:	682b      	ldr	r3, [r5, #0]
 8007bfc:	0607      	lsls	r7, r0, #24
 8007bfe:	f103 0104 	add.w	r1, r3, #4
 8007c02:	6029      	str	r1, [r5, #0]
 8007c04:	d501      	bpl.n	8007c0a <_printf_i+0xbe>
 8007c06:	681e      	ldr	r6, [r3, #0]
 8007c08:	e003      	b.n	8007c12 <_printf_i+0xc6>
 8007c0a:	0646      	lsls	r6, r0, #25
 8007c0c:	d5fb      	bpl.n	8007c06 <_printf_i+0xba>
 8007c0e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007c12:	2e00      	cmp	r6, #0
 8007c14:	da03      	bge.n	8007c1e <_printf_i+0xd2>
 8007c16:	232d      	movs	r3, #45	; 0x2d
 8007c18:	4276      	negs	r6, r6
 8007c1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c1e:	485a      	ldr	r0, [pc, #360]	; (8007d88 <_printf_i+0x23c>)
 8007c20:	230a      	movs	r3, #10
 8007c22:	e012      	b.n	8007c4a <_printf_i+0xfe>
 8007c24:	682b      	ldr	r3, [r5, #0]
 8007c26:	6820      	ldr	r0, [r4, #0]
 8007c28:	1d19      	adds	r1, r3, #4
 8007c2a:	6029      	str	r1, [r5, #0]
 8007c2c:	0605      	lsls	r5, r0, #24
 8007c2e:	d501      	bpl.n	8007c34 <_printf_i+0xe8>
 8007c30:	681e      	ldr	r6, [r3, #0]
 8007c32:	e002      	b.n	8007c3a <_printf_i+0xee>
 8007c34:	0641      	lsls	r1, r0, #25
 8007c36:	d5fb      	bpl.n	8007c30 <_printf_i+0xe4>
 8007c38:	881e      	ldrh	r6, [r3, #0]
 8007c3a:	4853      	ldr	r0, [pc, #332]	; (8007d88 <_printf_i+0x23c>)
 8007c3c:	2f6f      	cmp	r7, #111	; 0x6f
 8007c3e:	bf0c      	ite	eq
 8007c40:	2308      	moveq	r3, #8
 8007c42:	230a      	movne	r3, #10
 8007c44:	2100      	movs	r1, #0
 8007c46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c4a:	6865      	ldr	r5, [r4, #4]
 8007c4c:	60a5      	str	r5, [r4, #8]
 8007c4e:	2d00      	cmp	r5, #0
 8007c50:	bfa2      	ittt	ge
 8007c52:	6821      	ldrge	r1, [r4, #0]
 8007c54:	f021 0104 	bicge.w	r1, r1, #4
 8007c58:	6021      	strge	r1, [r4, #0]
 8007c5a:	b90e      	cbnz	r6, 8007c60 <_printf_i+0x114>
 8007c5c:	2d00      	cmp	r5, #0
 8007c5e:	d04b      	beq.n	8007cf8 <_printf_i+0x1ac>
 8007c60:	4615      	mov	r5, r2
 8007c62:	fbb6 f1f3 	udiv	r1, r6, r3
 8007c66:	fb03 6711 	mls	r7, r3, r1, r6
 8007c6a:	5dc7      	ldrb	r7, [r0, r7]
 8007c6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007c70:	4637      	mov	r7, r6
 8007c72:	42bb      	cmp	r3, r7
 8007c74:	460e      	mov	r6, r1
 8007c76:	d9f4      	bls.n	8007c62 <_printf_i+0x116>
 8007c78:	2b08      	cmp	r3, #8
 8007c7a:	d10b      	bne.n	8007c94 <_printf_i+0x148>
 8007c7c:	6823      	ldr	r3, [r4, #0]
 8007c7e:	07de      	lsls	r6, r3, #31
 8007c80:	d508      	bpl.n	8007c94 <_printf_i+0x148>
 8007c82:	6923      	ldr	r3, [r4, #16]
 8007c84:	6861      	ldr	r1, [r4, #4]
 8007c86:	4299      	cmp	r1, r3
 8007c88:	bfde      	ittt	le
 8007c8a:	2330      	movle	r3, #48	; 0x30
 8007c8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007c90:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007c94:	1b52      	subs	r2, r2, r5
 8007c96:	6122      	str	r2, [r4, #16]
 8007c98:	f8cd a000 	str.w	sl, [sp]
 8007c9c:	464b      	mov	r3, r9
 8007c9e:	aa03      	add	r2, sp, #12
 8007ca0:	4621      	mov	r1, r4
 8007ca2:	4640      	mov	r0, r8
 8007ca4:	f7ff fee4 	bl	8007a70 <_printf_common>
 8007ca8:	3001      	adds	r0, #1
 8007caa:	d14a      	bne.n	8007d42 <_printf_i+0x1f6>
 8007cac:	f04f 30ff 	mov.w	r0, #4294967295
 8007cb0:	b004      	add	sp, #16
 8007cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cb6:	6823      	ldr	r3, [r4, #0]
 8007cb8:	f043 0320 	orr.w	r3, r3, #32
 8007cbc:	6023      	str	r3, [r4, #0]
 8007cbe:	4833      	ldr	r0, [pc, #204]	; (8007d8c <_printf_i+0x240>)
 8007cc0:	2778      	movs	r7, #120	; 0x78
 8007cc2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007cc6:	6823      	ldr	r3, [r4, #0]
 8007cc8:	6829      	ldr	r1, [r5, #0]
 8007cca:	061f      	lsls	r7, r3, #24
 8007ccc:	f851 6b04 	ldr.w	r6, [r1], #4
 8007cd0:	d402      	bmi.n	8007cd8 <_printf_i+0x18c>
 8007cd2:	065f      	lsls	r7, r3, #25
 8007cd4:	bf48      	it	mi
 8007cd6:	b2b6      	uxthmi	r6, r6
 8007cd8:	07df      	lsls	r7, r3, #31
 8007cda:	bf48      	it	mi
 8007cdc:	f043 0320 	orrmi.w	r3, r3, #32
 8007ce0:	6029      	str	r1, [r5, #0]
 8007ce2:	bf48      	it	mi
 8007ce4:	6023      	strmi	r3, [r4, #0]
 8007ce6:	b91e      	cbnz	r6, 8007cf0 <_printf_i+0x1a4>
 8007ce8:	6823      	ldr	r3, [r4, #0]
 8007cea:	f023 0320 	bic.w	r3, r3, #32
 8007cee:	6023      	str	r3, [r4, #0]
 8007cf0:	2310      	movs	r3, #16
 8007cf2:	e7a7      	b.n	8007c44 <_printf_i+0xf8>
 8007cf4:	4824      	ldr	r0, [pc, #144]	; (8007d88 <_printf_i+0x23c>)
 8007cf6:	e7e4      	b.n	8007cc2 <_printf_i+0x176>
 8007cf8:	4615      	mov	r5, r2
 8007cfa:	e7bd      	b.n	8007c78 <_printf_i+0x12c>
 8007cfc:	682b      	ldr	r3, [r5, #0]
 8007cfe:	6826      	ldr	r6, [r4, #0]
 8007d00:	6961      	ldr	r1, [r4, #20]
 8007d02:	1d18      	adds	r0, r3, #4
 8007d04:	6028      	str	r0, [r5, #0]
 8007d06:	0635      	lsls	r5, r6, #24
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	d501      	bpl.n	8007d10 <_printf_i+0x1c4>
 8007d0c:	6019      	str	r1, [r3, #0]
 8007d0e:	e002      	b.n	8007d16 <_printf_i+0x1ca>
 8007d10:	0670      	lsls	r0, r6, #25
 8007d12:	d5fb      	bpl.n	8007d0c <_printf_i+0x1c0>
 8007d14:	8019      	strh	r1, [r3, #0]
 8007d16:	2300      	movs	r3, #0
 8007d18:	6123      	str	r3, [r4, #16]
 8007d1a:	4615      	mov	r5, r2
 8007d1c:	e7bc      	b.n	8007c98 <_printf_i+0x14c>
 8007d1e:	682b      	ldr	r3, [r5, #0]
 8007d20:	1d1a      	adds	r2, r3, #4
 8007d22:	602a      	str	r2, [r5, #0]
 8007d24:	681d      	ldr	r5, [r3, #0]
 8007d26:	6862      	ldr	r2, [r4, #4]
 8007d28:	2100      	movs	r1, #0
 8007d2a:	4628      	mov	r0, r5
 8007d2c:	f7f8 fa30 	bl	8000190 <memchr>
 8007d30:	b108      	cbz	r0, 8007d36 <_printf_i+0x1ea>
 8007d32:	1b40      	subs	r0, r0, r5
 8007d34:	6060      	str	r0, [r4, #4]
 8007d36:	6863      	ldr	r3, [r4, #4]
 8007d38:	6123      	str	r3, [r4, #16]
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d40:	e7aa      	b.n	8007c98 <_printf_i+0x14c>
 8007d42:	6923      	ldr	r3, [r4, #16]
 8007d44:	462a      	mov	r2, r5
 8007d46:	4649      	mov	r1, r9
 8007d48:	4640      	mov	r0, r8
 8007d4a:	47d0      	blx	sl
 8007d4c:	3001      	adds	r0, #1
 8007d4e:	d0ad      	beq.n	8007cac <_printf_i+0x160>
 8007d50:	6823      	ldr	r3, [r4, #0]
 8007d52:	079b      	lsls	r3, r3, #30
 8007d54:	d413      	bmi.n	8007d7e <_printf_i+0x232>
 8007d56:	68e0      	ldr	r0, [r4, #12]
 8007d58:	9b03      	ldr	r3, [sp, #12]
 8007d5a:	4298      	cmp	r0, r3
 8007d5c:	bfb8      	it	lt
 8007d5e:	4618      	movlt	r0, r3
 8007d60:	e7a6      	b.n	8007cb0 <_printf_i+0x164>
 8007d62:	2301      	movs	r3, #1
 8007d64:	4632      	mov	r2, r6
 8007d66:	4649      	mov	r1, r9
 8007d68:	4640      	mov	r0, r8
 8007d6a:	47d0      	blx	sl
 8007d6c:	3001      	adds	r0, #1
 8007d6e:	d09d      	beq.n	8007cac <_printf_i+0x160>
 8007d70:	3501      	adds	r5, #1
 8007d72:	68e3      	ldr	r3, [r4, #12]
 8007d74:	9903      	ldr	r1, [sp, #12]
 8007d76:	1a5b      	subs	r3, r3, r1
 8007d78:	42ab      	cmp	r3, r5
 8007d7a:	dcf2      	bgt.n	8007d62 <_printf_i+0x216>
 8007d7c:	e7eb      	b.n	8007d56 <_printf_i+0x20a>
 8007d7e:	2500      	movs	r5, #0
 8007d80:	f104 0619 	add.w	r6, r4, #25
 8007d84:	e7f5      	b.n	8007d72 <_printf_i+0x226>
 8007d86:	bf00      	nop
 8007d88:	08008465 	.word	0x08008465
 8007d8c:	08008476 	.word	0x08008476

08007d90 <__sflush_r>:
 8007d90:	898a      	ldrh	r2, [r1, #12]
 8007d92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d96:	4605      	mov	r5, r0
 8007d98:	0710      	lsls	r0, r2, #28
 8007d9a:	460c      	mov	r4, r1
 8007d9c:	d458      	bmi.n	8007e50 <__sflush_r+0xc0>
 8007d9e:	684b      	ldr	r3, [r1, #4]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	dc05      	bgt.n	8007db0 <__sflush_r+0x20>
 8007da4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	dc02      	bgt.n	8007db0 <__sflush_r+0x20>
 8007daa:	2000      	movs	r0, #0
 8007dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007db0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007db2:	2e00      	cmp	r6, #0
 8007db4:	d0f9      	beq.n	8007daa <__sflush_r+0x1a>
 8007db6:	2300      	movs	r3, #0
 8007db8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007dbc:	682f      	ldr	r7, [r5, #0]
 8007dbe:	6a21      	ldr	r1, [r4, #32]
 8007dc0:	602b      	str	r3, [r5, #0]
 8007dc2:	d032      	beq.n	8007e2a <__sflush_r+0x9a>
 8007dc4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007dc6:	89a3      	ldrh	r3, [r4, #12]
 8007dc8:	075a      	lsls	r2, r3, #29
 8007dca:	d505      	bpl.n	8007dd8 <__sflush_r+0x48>
 8007dcc:	6863      	ldr	r3, [r4, #4]
 8007dce:	1ac0      	subs	r0, r0, r3
 8007dd0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007dd2:	b10b      	cbz	r3, 8007dd8 <__sflush_r+0x48>
 8007dd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007dd6:	1ac0      	subs	r0, r0, r3
 8007dd8:	2300      	movs	r3, #0
 8007dda:	4602      	mov	r2, r0
 8007ddc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007dde:	6a21      	ldr	r1, [r4, #32]
 8007de0:	4628      	mov	r0, r5
 8007de2:	47b0      	blx	r6
 8007de4:	1c43      	adds	r3, r0, #1
 8007de6:	89a3      	ldrh	r3, [r4, #12]
 8007de8:	d106      	bne.n	8007df8 <__sflush_r+0x68>
 8007dea:	6829      	ldr	r1, [r5, #0]
 8007dec:	291d      	cmp	r1, #29
 8007dee:	d82b      	bhi.n	8007e48 <__sflush_r+0xb8>
 8007df0:	4a29      	ldr	r2, [pc, #164]	; (8007e98 <__sflush_r+0x108>)
 8007df2:	410a      	asrs	r2, r1
 8007df4:	07d6      	lsls	r6, r2, #31
 8007df6:	d427      	bmi.n	8007e48 <__sflush_r+0xb8>
 8007df8:	2200      	movs	r2, #0
 8007dfa:	6062      	str	r2, [r4, #4]
 8007dfc:	04d9      	lsls	r1, r3, #19
 8007dfe:	6922      	ldr	r2, [r4, #16]
 8007e00:	6022      	str	r2, [r4, #0]
 8007e02:	d504      	bpl.n	8007e0e <__sflush_r+0x7e>
 8007e04:	1c42      	adds	r2, r0, #1
 8007e06:	d101      	bne.n	8007e0c <__sflush_r+0x7c>
 8007e08:	682b      	ldr	r3, [r5, #0]
 8007e0a:	b903      	cbnz	r3, 8007e0e <__sflush_r+0x7e>
 8007e0c:	6560      	str	r0, [r4, #84]	; 0x54
 8007e0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e10:	602f      	str	r7, [r5, #0]
 8007e12:	2900      	cmp	r1, #0
 8007e14:	d0c9      	beq.n	8007daa <__sflush_r+0x1a>
 8007e16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e1a:	4299      	cmp	r1, r3
 8007e1c:	d002      	beq.n	8007e24 <__sflush_r+0x94>
 8007e1e:	4628      	mov	r0, r5
 8007e20:	f7ff fbea 	bl	80075f8 <_free_r>
 8007e24:	2000      	movs	r0, #0
 8007e26:	6360      	str	r0, [r4, #52]	; 0x34
 8007e28:	e7c0      	b.n	8007dac <__sflush_r+0x1c>
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	4628      	mov	r0, r5
 8007e2e:	47b0      	blx	r6
 8007e30:	1c41      	adds	r1, r0, #1
 8007e32:	d1c8      	bne.n	8007dc6 <__sflush_r+0x36>
 8007e34:	682b      	ldr	r3, [r5, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d0c5      	beq.n	8007dc6 <__sflush_r+0x36>
 8007e3a:	2b1d      	cmp	r3, #29
 8007e3c:	d001      	beq.n	8007e42 <__sflush_r+0xb2>
 8007e3e:	2b16      	cmp	r3, #22
 8007e40:	d101      	bne.n	8007e46 <__sflush_r+0xb6>
 8007e42:	602f      	str	r7, [r5, #0]
 8007e44:	e7b1      	b.n	8007daa <__sflush_r+0x1a>
 8007e46:	89a3      	ldrh	r3, [r4, #12]
 8007e48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e4c:	81a3      	strh	r3, [r4, #12]
 8007e4e:	e7ad      	b.n	8007dac <__sflush_r+0x1c>
 8007e50:	690f      	ldr	r7, [r1, #16]
 8007e52:	2f00      	cmp	r7, #0
 8007e54:	d0a9      	beq.n	8007daa <__sflush_r+0x1a>
 8007e56:	0793      	lsls	r3, r2, #30
 8007e58:	680e      	ldr	r6, [r1, #0]
 8007e5a:	bf08      	it	eq
 8007e5c:	694b      	ldreq	r3, [r1, #20]
 8007e5e:	600f      	str	r7, [r1, #0]
 8007e60:	bf18      	it	ne
 8007e62:	2300      	movne	r3, #0
 8007e64:	eba6 0807 	sub.w	r8, r6, r7
 8007e68:	608b      	str	r3, [r1, #8]
 8007e6a:	f1b8 0f00 	cmp.w	r8, #0
 8007e6e:	dd9c      	ble.n	8007daa <__sflush_r+0x1a>
 8007e70:	6a21      	ldr	r1, [r4, #32]
 8007e72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e74:	4643      	mov	r3, r8
 8007e76:	463a      	mov	r2, r7
 8007e78:	4628      	mov	r0, r5
 8007e7a:	47b0      	blx	r6
 8007e7c:	2800      	cmp	r0, #0
 8007e7e:	dc06      	bgt.n	8007e8e <__sflush_r+0xfe>
 8007e80:	89a3      	ldrh	r3, [r4, #12]
 8007e82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e86:	81a3      	strh	r3, [r4, #12]
 8007e88:	f04f 30ff 	mov.w	r0, #4294967295
 8007e8c:	e78e      	b.n	8007dac <__sflush_r+0x1c>
 8007e8e:	4407      	add	r7, r0
 8007e90:	eba8 0800 	sub.w	r8, r8, r0
 8007e94:	e7e9      	b.n	8007e6a <__sflush_r+0xda>
 8007e96:	bf00      	nop
 8007e98:	dfbffffe 	.word	0xdfbffffe

08007e9c <_fflush_r>:
 8007e9c:	b538      	push	{r3, r4, r5, lr}
 8007e9e:	690b      	ldr	r3, [r1, #16]
 8007ea0:	4605      	mov	r5, r0
 8007ea2:	460c      	mov	r4, r1
 8007ea4:	b913      	cbnz	r3, 8007eac <_fflush_r+0x10>
 8007ea6:	2500      	movs	r5, #0
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	bd38      	pop	{r3, r4, r5, pc}
 8007eac:	b118      	cbz	r0, 8007eb6 <_fflush_r+0x1a>
 8007eae:	6a03      	ldr	r3, [r0, #32]
 8007eb0:	b90b      	cbnz	r3, 8007eb6 <_fflush_r+0x1a>
 8007eb2:	f7ff fa8b 	bl	80073cc <__sinit>
 8007eb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d0f3      	beq.n	8007ea6 <_fflush_r+0xa>
 8007ebe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ec0:	07d0      	lsls	r0, r2, #31
 8007ec2:	d404      	bmi.n	8007ece <_fflush_r+0x32>
 8007ec4:	0599      	lsls	r1, r3, #22
 8007ec6:	d402      	bmi.n	8007ece <_fflush_r+0x32>
 8007ec8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007eca:	f7ff fb84 	bl	80075d6 <__retarget_lock_acquire_recursive>
 8007ece:	4628      	mov	r0, r5
 8007ed0:	4621      	mov	r1, r4
 8007ed2:	f7ff ff5d 	bl	8007d90 <__sflush_r>
 8007ed6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ed8:	07da      	lsls	r2, r3, #31
 8007eda:	4605      	mov	r5, r0
 8007edc:	d4e4      	bmi.n	8007ea8 <_fflush_r+0xc>
 8007ede:	89a3      	ldrh	r3, [r4, #12]
 8007ee0:	059b      	lsls	r3, r3, #22
 8007ee2:	d4e1      	bmi.n	8007ea8 <_fflush_r+0xc>
 8007ee4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ee6:	f7ff fb77 	bl	80075d8 <__retarget_lock_release_recursive>
 8007eea:	e7dd      	b.n	8007ea8 <_fflush_r+0xc>

08007eec <__swbuf_r>:
 8007eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eee:	460e      	mov	r6, r1
 8007ef0:	4614      	mov	r4, r2
 8007ef2:	4605      	mov	r5, r0
 8007ef4:	b118      	cbz	r0, 8007efe <__swbuf_r+0x12>
 8007ef6:	6a03      	ldr	r3, [r0, #32]
 8007ef8:	b90b      	cbnz	r3, 8007efe <__swbuf_r+0x12>
 8007efa:	f7ff fa67 	bl	80073cc <__sinit>
 8007efe:	69a3      	ldr	r3, [r4, #24]
 8007f00:	60a3      	str	r3, [r4, #8]
 8007f02:	89a3      	ldrh	r3, [r4, #12]
 8007f04:	071a      	lsls	r2, r3, #28
 8007f06:	d525      	bpl.n	8007f54 <__swbuf_r+0x68>
 8007f08:	6923      	ldr	r3, [r4, #16]
 8007f0a:	b31b      	cbz	r3, 8007f54 <__swbuf_r+0x68>
 8007f0c:	6823      	ldr	r3, [r4, #0]
 8007f0e:	6922      	ldr	r2, [r4, #16]
 8007f10:	1a98      	subs	r0, r3, r2
 8007f12:	6963      	ldr	r3, [r4, #20]
 8007f14:	b2f6      	uxtb	r6, r6
 8007f16:	4283      	cmp	r3, r0
 8007f18:	4637      	mov	r7, r6
 8007f1a:	dc04      	bgt.n	8007f26 <__swbuf_r+0x3a>
 8007f1c:	4621      	mov	r1, r4
 8007f1e:	4628      	mov	r0, r5
 8007f20:	f7ff ffbc 	bl	8007e9c <_fflush_r>
 8007f24:	b9e0      	cbnz	r0, 8007f60 <__swbuf_r+0x74>
 8007f26:	68a3      	ldr	r3, [r4, #8]
 8007f28:	3b01      	subs	r3, #1
 8007f2a:	60a3      	str	r3, [r4, #8]
 8007f2c:	6823      	ldr	r3, [r4, #0]
 8007f2e:	1c5a      	adds	r2, r3, #1
 8007f30:	6022      	str	r2, [r4, #0]
 8007f32:	701e      	strb	r6, [r3, #0]
 8007f34:	6962      	ldr	r2, [r4, #20]
 8007f36:	1c43      	adds	r3, r0, #1
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d004      	beq.n	8007f46 <__swbuf_r+0x5a>
 8007f3c:	89a3      	ldrh	r3, [r4, #12]
 8007f3e:	07db      	lsls	r3, r3, #31
 8007f40:	d506      	bpl.n	8007f50 <__swbuf_r+0x64>
 8007f42:	2e0a      	cmp	r6, #10
 8007f44:	d104      	bne.n	8007f50 <__swbuf_r+0x64>
 8007f46:	4621      	mov	r1, r4
 8007f48:	4628      	mov	r0, r5
 8007f4a:	f7ff ffa7 	bl	8007e9c <_fflush_r>
 8007f4e:	b938      	cbnz	r0, 8007f60 <__swbuf_r+0x74>
 8007f50:	4638      	mov	r0, r7
 8007f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f54:	4621      	mov	r1, r4
 8007f56:	4628      	mov	r0, r5
 8007f58:	f000 f806 	bl	8007f68 <__swsetup_r>
 8007f5c:	2800      	cmp	r0, #0
 8007f5e:	d0d5      	beq.n	8007f0c <__swbuf_r+0x20>
 8007f60:	f04f 37ff 	mov.w	r7, #4294967295
 8007f64:	e7f4      	b.n	8007f50 <__swbuf_r+0x64>
	...

08007f68 <__swsetup_r>:
 8007f68:	b538      	push	{r3, r4, r5, lr}
 8007f6a:	4b2a      	ldr	r3, [pc, #168]	; (8008014 <__swsetup_r+0xac>)
 8007f6c:	4605      	mov	r5, r0
 8007f6e:	6818      	ldr	r0, [r3, #0]
 8007f70:	460c      	mov	r4, r1
 8007f72:	b118      	cbz	r0, 8007f7c <__swsetup_r+0x14>
 8007f74:	6a03      	ldr	r3, [r0, #32]
 8007f76:	b90b      	cbnz	r3, 8007f7c <__swsetup_r+0x14>
 8007f78:	f7ff fa28 	bl	80073cc <__sinit>
 8007f7c:	89a3      	ldrh	r3, [r4, #12]
 8007f7e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f82:	0718      	lsls	r0, r3, #28
 8007f84:	d422      	bmi.n	8007fcc <__swsetup_r+0x64>
 8007f86:	06d9      	lsls	r1, r3, #27
 8007f88:	d407      	bmi.n	8007f9a <__swsetup_r+0x32>
 8007f8a:	2309      	movs	r3, #9
 8007f8c:	602b      	str	r3, [r5, #0]
 8007f8e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007f92:	81a3      	strh	r3, [r4, #12]
 8007f94:	f04f 30ff 	mov.w	r0, #4294967295
 8007f98:	e034      	b.n	8008004 <__swsetup_r+0x9c>
 8007f9a:	0758      	lsls	r0, r3, #29
 8007f9c:	d512      	bpl.n	8007fc4 <__swsetup_r+0x5c>
 8007f9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fa0:	b141      	cbz	r1, 8007fb4 <__swsetup_r+0x4c>
 8007fa2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fa6:	4299      	cmp	r1, r3
 8007fa8:	d002      	beq.n	8007fb0 <__swsetup_r+0x48>
 8007faa:	4628      	mov	r0, r5
 8007fac:	f7ff fb24 	bl	80075f8 <_free_r>
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	6363      	str	r3, [r4, #52]	; 0x34
 8007fb4:	89a3      	ldrh	r3, [r4, #12]
 8007fb6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007fba:	81a3      	strh	r3, [r4, #12]
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	6063      	str	r3, [r4, #4]
 8007fc0:	6923      	ldr	r3, [r4, #16]
 8007fc2:	6023      	str	r3, [r4, #0]
 8007fc4:	89a3      	ldrh	r3, [r4, #12]
 8007fc6:	f043 0308 	orr.w	r3, r3, #8
 8007fca:	81a3      	strh	r3, [r4, #12]
 8007fcc:	6923      	ldr	r3, [r4, #16]
 8007fce:	b94b      	cbnz	r3, 8007fe4 <__swsetup_r+0x7c>
 8007fd0:	89a3      	ldrh	r3, [r4, #12]
 8007fd2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007fd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fda:	d003      	beq.n	8007fe4 <__swsetup_r+0x7c>
 8007fdc:	4621      	mov	r1, r4
 8007fde:	4628      	mov	r0, r5
 8007fe0:	f000 f850 	bl	8008084 <__smakebuf_r>
 8007fe4:	89a0      	ldrh	r0, [r4, #12]
 8007fe6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007fea:	f010 0301 	ands.w	r3, r0, #1
 8007fee:	d00a      	beq.n	8008006 <__swsetup_r+0x9e>
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	60a3      	str	r3, [r4, #8]
 8007ff4:	6963      	ldr	r3, [r4, #20]
 8007ff6:	425b      	negs	r3, r3
 8007ff8:	61a3      	str	r3, [r4, #24]
 8007ffa:	6923      	ldr	r3, [r4, #16]
 8007ffc:	b943      	cbnz	r3, 8008010 <__swsetup_r+0xa8>
 8007ffe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008002:	d1c4      	bne.n	8007f8e <__swsetup_r+0x26>
 8008004:	bd38      	pop	{r3, r4, r5, pc}
 8008006:	0781      	lsls	r1, r0, #30
 8008008:	bf58      	it	pl
 800800a:	6963      	ldrpl	r3, [r4, #20]
 800800c:	60a3      	str	r3, [r4, #8]
 800800e:	e7f4      	b.n	8007ffa <__swsetup_r+0x92>
 8008010:	2000      	movs	r0, #0
 8008012:	e7f7      	b.n	8008004 <__swsetup_r+0x9c>
 8008014:	2000007c 	.word	0x2000007c

08008018 <_sbrk_r>:
 8008018:	b538      	push	{r3, r4, r5, lr}
 800801a:	4d06      	ldr	r5, [pc, #24]	; (8008034 <_sbrk_r+0x1c>)
 800801c:	2300      	movs	r3, #0
 800801e:	4604      	mov	r4, r0
 8008020:	4608      	mov	r0, r1
 8008022:	602b      	str	r3, [r5, #0]
 8008024:	f7f9 fa40 	bl	80014a8 <_sbrk>
 8008028:	1c43      	adds	r3, r0, #1
 800802a:	d102      	bne.n	8008032 <_sbrk_r+0x1a>
 800802c:	682b      	ldr	r3, [r5, #0]
 800802e:	b103      	cbz	r3, 8008032 <_sbrk_r+0x1a>
 8008030:	6023      	str	r3, [r4, #0]
 8008032:	bd38      	pop	{r3, r4, r5, pc}
 8008034:	200004fc 	.word	0x200004fc

08008038 <__swhatbuf_r>:
 8008038:	b570      	push	{r4, r5, r6, lr}
 800803a:	460c      	mov	r4, r1
 800803c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008040:	2900      	cmp	r1, #0
 8008042:	b096      	sub	sp, #88	; 0x58
 8008044:	4615      	mov	r5, r2
 8008046:	461e      	mov	r6, r3
 8008048:	da0d      	bge.n	8008066 <__swhatbuf_r+0x2e>
 800804a:	89a3      	ldrh	r3, [r4, #12]
 800804c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008050:	f04f 0100 	mov.w	r1, #0
 8008054:	bf0c      	ite	eq
 8008056:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800805a:	2340      	movne	r3, #64	; 0x40
 800805c:	2000      	movs	r0, #0
 800805e:	6031      	str	r1, [r6, #0]
 8008060:	602b      	str	r3, [r5, #0]
 8008062:	b016      	add	sp, #88	; 0x58
 8008064:	bd70      	pop	{r4, r5, r6, pc}
 8008066:	466a      	mov	r2, sp
 8008068:	f000 f848 	bl	80080fc <_fstat_r>
 800806c:	2800      	cmp	r0, #0
 800806e:	dbec      	blt.n	800804a <__swhatbuf_r+0x12>
 8008070:	9901      	ldr	r1, [sp, #4]
 8008072:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008076:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800807a:	4259      	negs	r1, r3
 800807c:	4159      	adcs	r1, r3
 800807e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008082:	e7eb      	b.n	800805c <__swhatbuf_r+0x24>

08008084 <__smakebuf_r>:
 8008084:	898b      	ldrh	r3, [r1, #12]
 8008086:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008088:	079d      	lsls	r5, r3, #30
 800808a:	4606      	mov	r6, r0
 800808c:	460c      	mov	r4, r1
 800808e:	d507      	bpl.n	80080a0 <__smakebuf_r+0x1c>
 8008090:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008094:	6023      	str	r3, [r4, #0]
 8008096:	6123      	str	r3, [r4, #16]
 8008098:	2301      	movs	r3, #1
 800809a:	6163      	str	r3, [r4, #20]
 800809c:	b002      	add	sp, #8
 800809e:	bd70      	pop	{r4, r5, r6, pc}
 80080a0:	ab01      	add	r3, sp, #4
 80080a2:	466a      	mov	r2, sp
 80080a4:	f7ff ffc8 	bl	8008038 <__swhatbuf_r>
 80080a8:	9900      	ldr	r1, [sp, #0]
 80080aa:	4605      	mov	r5, r0
 80080ac:	4630      	mov	r0, r6
 80080ae:	f7ff fb0f 	bl	80076d0 <_malloc_r>
 80080b2:	b948      	cbnz	r0, 80080c8 <__smakebuf_r+0x44>
 80080b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080b8:	059a      	lsls	r2, r3, #22
 80080ba:	d4ef      	bmi.n	800809c <__smakebuf_r+0x18>
 80080bc:	f023 0303 	bic.w	r3, r3, #3
 80080c0:	f043 0302 	orr.w	r3, r3, #2
 80080c4:	81a3      	strh	r3, [r4, #12]
 80080c6:	e7e3      	b.n	8008090 <__smakebuf_r+0xc>
 80080c8:	89a3      	ldrh	r3, [r4, #12]
 80080ca:	6020      	str	r0, [r4, #0]
 80080cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080d0:	81a3      	strh	r3, [r4, #12]
 80080d2:	9b00      	ldr	r3, [sp, #0]
 80080d4:	6163      	str	r3, [r4, #20]
 80080d6:	9b01      	ldr	r3, [sp, #4]
 80080d8:	6120      	str	r0, [r4, #16]
 80080da:	b15b      	cbz	r3, 80080f4 <__smakebuf_r+0x70>
 80080dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080e0:	4630      	mov	r0, r6
 80080e2:	f000 f81d 	bl	8008120 <_isatty_r>
 80080e6:	b128      	cbz	r0, 80080f4 <__smakebuf_r+0x70>
 80080e8:	89a3      	ldrh	r3, [r4, #12]
 80080ea:	f023 0303 	bic.w	r3, r3, #3
 80080ee:	f043 0301 	orr.w	r3, r3, #1
 80080f2:	81a3      	strh	r3, [r4, #12]
 80080f4:	89a3      	ldrh	r3, [r4, #12]
 80080f6:	431d      	orrs	r5, r3
 80080f8:	81a5      	strh	r5, [r4, #12]
 80080fa:	e7cf      	b.n	800809c <__smakebuf_r+0x18>

080080fc <_fstat_r>:
 80080fc:	b538      	push	{r3, r4, r5, lr}
 80080fe:	4d07      	ldr	r5, [pc, #28]	; (800811c <_fstat_r+0x20>)
 8008100:	2300      	movs	r3, #0
 8008102:	4604      	mov	r4, r0
 8008104:	4608      	mov	r0, r1
 8008106:	4611      	mov	r1, r2
 8008108:	602b      	str	r3, [r5, #0]
 800810a:	f7f9 f9a4 	bl	8001456 <_fstat>
 800810e:	1c43      	adds	r3, r0, #1
 8008110:	d102      	bne.n	8008118 <_fstat_r+0x1c>
 8008112:	682b      	ldr	r3, [r5, #0]
 8008114:	b103      	cbz	r3, 8008118 <_fstat_r+0x1c>
 8008116:	6023      	str	r3, [r4, #0]
 8008118:	bd38      	pop	{r3, r4, r5, pc}
 800811a:	bf00      	nop
 800811c:	200004fc 	.word	0x200004fc

08008120 <_isatty_r>:
 8008120:	b538      	push	{r3, r4, r5, lr}
 8008122:	4d06      	ldr	r5, [pc, #24]	; (800813c <_isatty_r+0x1c>)
 8008124:	2300      	movs	r3, #0
 8008126:	4604      	mov	r4, r0
 8008128:	4608      	mov	r0, r1
 800812a:	602b      	str	r3, [r5, #0]
 800812c:	f7f9 f9a3 	bl	8001476 <_isatty>
 8008130:	1c43      	adds	r3, r0, #1
 8008132:	d102      	bne.n	800813a <_isatty_r+0x1a>
 8008134:	682b      	ldr	r3, [r5, #0]
 8008136:	b103      	cbz	r3, 800813a <_isatty_r+0x1a>
 8008138:	6023      	str	r3, [r4, #0]
 800813a:	bd38      	pop	{r3, r4, r5, pc}
 800813c:	200004fc 	.word	0x200004fc

08008140 <_init>:
 8008140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008142:	bf00      	nop
 8008144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008146:	bc08      	pop	{r3}
 8008148:	469e      	mov	lr, r3
 800814a:	4770      	bx	lr

0800814c <_fini>:
 800814c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800814e:	bf00      	nop
 8008150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008152:	bc08      	pop	{r3}
 8008154:	469e      	mov	lr, r3
 8008156:	4770      	bx	lr
