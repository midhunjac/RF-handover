
BLE_Beacon_multiTemperature.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ef0  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000294  0800802c  0800802c  0001802c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080082c0  080082c0  000182c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080082c4  080082c4  000182c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  20000004  080082c8  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 BLE_DRIVER_CONTEXT 00000035  20000024  080082e8  00020024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 SYSTEM_DRIVER_CONTEXT 00000011  2000005c  0800831d  0002005c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000002d0  20000070  0800832e  00020070  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000340  0800832e  00020340  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002006d  2**0
                  CONTENTS, READONLY
 11 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 12 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 13 MB_MEM2       00000883  200301e4  200301e4  00030000  2**2
                  ALLOC
 14 .comment      00000043  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY
 15 .debug_info   000293c6  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000061b0  00000000  00000000  000494a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000026c0  00000000  00000000  0004f658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001d74  00000000  00000000  00051d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00026735  00000000  00000000  00053a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002b07d  00000000  00000000  0007a1c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000cf9ba  00000000  00000000  000a523e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000a0d0  00000000  00000000  00174bf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000007d  00000000  00000000  0017ecc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	08008014 	.word	0x08008014

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	08008014 	.word	0x08008014

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <TMP117_get_Temperature>:
   @Description   Function gives to us ambient temperature
   @Parameter     I2C_HandleTypeDef ->  HAL_I2C Handle
   @Return value  Float
 */
uint16_t TMP117_get_Temperature             (I2C_HandleTypeDef i2c, uint8_t TMP117_DeviceID)
{
 800018c:	b084      	sub	sp, #16
 800018e:	b580      	push	{r7, lr}
 8000190:	b082      	sub	sp, #8
 8000192:	af02      	add	r7, sp, #8
 8000194:	f107 0c08 	add.w	ip, r7, #8
 8000198:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      static uint8_t buf[3];
      buf[0]=TMP117_TemperatureRegister;
 800019c:	4b14      	ldr	r3, [pc, #80]	; (80001f0 <TMP117_get_Temperature+0x64>)
 800019e:	2200      	movs	r2, #0
 80001a0:	701a      	strb	r2, [r3, #0]

      HAL_I2C_Master_Transmit(&i2c,TMP117_DeviceID,buf,1,100);
 80001a2:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80001a6:	b299      	uxth	r1, r3
 80001a8:	2364      	movs	r3, #100	; 0x64
 80001aa:	9300      	str	r3, [sp, #0]
 80001ac:	2301      	movs	r3, #1
 80001ae:	4a10      	ldr	r2, [pc, #64]	; (80001f0 <TMP117_get_Temperature+0x64>)
 80001b0:	f107 0008 	add.w	r0, r7, #8
 80001b4:	f002 fd82 	bl	8002cbc <HAL_I2C_Master_Transmit>
      HAL_I2C_Master_Receive(&i2c,TMP117_DeviceID,buf,2,100);
 80001b8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80001bc:	b299      	uxth	r1, r3
 80001be:	2364      	movs	r3, #100	; 0x64
 80001c0:	9300      	str	r3, [sp, #0]
 80001c2:	2302      	movs	r3, #2
 80001c4:	4a0a      	ldr	r2, [pc, #40]	; (80001f0 <TMP117_get_Temperature+0x64>)
 80001c6:	f107 0008 	add.w	r0, r7, #8
 80001ca:	f002 fe8f 	bl	8002eec <HAL_I2C_Master_Receive>

      return (((buf[0]<<8)|buf[1]));
 80001ce:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <TMP117_get_Temperature+0x64>)
 80001d0:	781b      	ldrb	r3, [r3, #0]
 80001d2:	021b      	lsls	r3, r3, #8
 80001d4:	b21a      	sxth	r2, r3
 80001d6:	4b06      	ldr	r3, [pc, #24]	; (80001f0 <TMP117_get_Temperature+0x64>)
 80001d8:	785b      	ldrb	r3, [r3, #1]
 80001da:	b21b      	sxth	r3, r3
 80001dc:	4313      	orrs	r3, r2
 80001de:	b21b      	sxth	r3, r3
 80001e0:	b29b      	uxth	r3, r3
}
 80001e2:	4618      	mov	r0, r3
 80001e4:	46bd      	mov	sp, r7
 80001e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80001ea:	b004      	add	sp, #16
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop
 80001f0:	2000008c 	.word	0x2000008c

080001f4 <TMP117_set_Configuration>:
                  uint8_t first     ->  [15:8]
                  uint8_t second    ->  [7:0]
   @Return value  void
 */
void TMP117_set_Configuration            (I2C_HandleTypeDef i2c,uint8_t first,uint8_t second, uint8_t TMP117_DeviceID)
{
 80001f4:	b084      	sub	sp, #16
 80001f6:	b580      	push	{r7, lr}
 80001f8:	b082      	sub	sp, #8
 80001fa:	af02      	add	r7, sp, #8
 80001fc:	f107 0c08 	add.w	ip, r7, #8
 8000200:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      static uint8_t buf[3];
      buf[0]=TMP117_ConfigurationRegister;
 8000204:	4b0d      	ldr	r3, [pc, #52]	; (800023c <TMP117_set_Configuration+0x48>)
 8000206:	2201      	movs	r2, #1
 8000208:	701a      	strb	r2, [r3, #0]
      buf[1]=first;
 800020a:	4a0c      	ldr	r2, [pc, #48]	; (800023c <TMP117_set_Configuration+0x48>)
 800020c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8000210:	7053      	strb	r3, [r2, #1]
      buf[2]=second;
 8000212:	4a0a      	ldr	r2, [pc, #40]	; (800023c <TMP117_set_Configuration+0x48>)
 8000214:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8000218:	7093      	strb	r3, [r2, #2]
      HAL_I2C_Master_Transmit(&i2c,TMP117_DeviceID,buf,3,100);
 800021a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800021e:	b299      	uxth	r1, r3
 8000220:	2364      	movs	r3, #100	; 0x64
 8000222:	9300      	str	r3, [sp, #0]
 8000224:	2303      	movs	r3, #3
 8000226:	4a05      	ldr	r2, [pc, #20]	; (800023c <TMP117_set_Configuration+0x48>)
 8000228:	f107 0008 	add.w	r0, r7, #8
 800022c:	f002 fd46 	bl	8002cbc <HAL_I2C_Master_Transmit>
}
 8000230:	bf00      	nop
 8000232:	46bd      	mov	sp, r7
 8000234:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000238:	b004      	add	sp, #16
 800023a:	4770      	bx	lr
 800023c:	20000090 	.word	0x20000090

08000240 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000240:	b5b0      	push	{r4, r5, r7, lr}
 8000242:	b088      	sub	sp, #32
 8000244:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  APPD_GeneralConfig.STBY_DebugGpioaPinList = STBY_DebugGpioaPinList;
 8000246:	4b15      	ldr	r3, [pc, #84]	; (800029c <APPD_EnableCPU2+0x5c>)
 8000248:	881a      	ldrh	r2, [r3, #0]
 800024a:	4b15      	ldr	r3, [pc, #84]	; (80002a0 <APPD_EnableCPU2+0x60>)
 800024c:	809a      	strh	r2, [r3, #4]
  APPD_GeneralConfig.STBY_DebugGpiobPinList = STBY_DebugGpiobPinList;
 800024e:	4b15      	ldr	r3, [pc, #84]	; (80002a4 <APPD_EnableCPU2+0x64>)
 8000250:	881a      	ldrh	r2, [r3, #0]
 8000252:	4b13      	ldr	r3, [pc, #76]	; (80002a0 <APPD_EnableCPU2+0x60>)
 8000254:	80da      	strh	r2, [r3, #6]
  APPD_GeneralConfig.STBY_DebugGpiocPinList = STBY_DebugGpiocPinList;
 8000256:	4b14      	ldr	r3, [pc, #80]	; (80002a8 <APPD_EnableCPU2+0x68>)
 8000258:	881a      	ldrh	r2, [r3, #0]
 800025a:	4b11      	ldr	r3, [pc, #68]	; (80002a0 <APPD_EnableCPU2+0x60>)
 800025c:	811a      	strh	r2, [r3, #8]
  APPD_GeneralConfig.STBY_DtbGpioaPinList = STBY_DtbGpioaPinList;
 800025e:	4b13      	ldr	r3, [pc, #76]	; (80002ac <APPD_EnableCPU2+0x6c>)
 8000260:	881a      	ldrh	r2, [r3, #0]
 8000262:	4b0f      	ldr	r3, [pc, #60]	; (80002a0 <APPD_EnableCPU2+0x60>)
 8000264:	815a      	strh	r2, [r3, #10]
  APPD_GeneralConfig.STBY_DtbGpiobPinList = STBY_DtbGpiobPinList;
 8000266:	4b12      	ldr	r3, [pc, #72]	; (80002b0 <APPD_EnableCPU2+0x70>)
 8000268:	881a      	ldrh	r2, [r3, #0]
 800026a:	4b0d      	ldr	r3, [pc, #52]	; (80002a0 <APPD_EnableCPU2+0x60>)
 800026c:	819a      	strh	r2, [r3, #12]

  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800026e:	4b11      	ldr	r3, [pc, #68]	; (80002b4 <APPD_EnableCPU2+0x74>)
 8000270:	1d3c      	adds	r4, r7, #4
 8000272:	461d      	mov	r5, r3
 8000274:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000276:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000278:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800027c:	c403      	stmia	r4!, {r0, r1}
 800027e:	8022      	strh	r2, [r4, #0]
 8000280:	3402      	adds	r4, #2
 8000282:	0c13      	lsrs	r3, r2, #16
 8000284:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000286:	f006 fbd1 	bl	8006a2c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	4618      	mov	r0, r3
 800028e:	f005 fe62 	bl	8005f56 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000292:	bf00      	nop
}
 8000294:	3720      	adds	r7, #32
 8000296:	46bd      	mov	sp, r7
 8000298:	bdb0      	pop	{r4, r5, r7, pc}
 800029a:	bf00      	nop
 800029c:	20000004 	.word	0x20000004
 80002a0:	200301e8 	.word	0x200301e8
 80002a4:	20000006 	.word	0x20000006
 80002a8:	20000008 	.word	0x20000008
 80002ac:	2000000a 	.word	0x2000000a
 80002b0:	2000000c 	.word	0x2000000c
 80002b4:	0800802c 	.word	0x0800802c

080002b8 <LL_PWR_SMPS_Enable>:
  *         @ref LL_PWR_SMPS_SetMode() should be used instead.
  * @rmtoll CR5          SMPSEN        LL_PWR_SMPS_Enable
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_Enable(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR5, PWR_CR5_SMPSEN);
 80002bc:	4b05      	ldr	r3, [pc, #20]	; (80002d4 <LL_PWR_SMPS_Enable+0x1c>)
 80002be:	69db      	ldr	r3, [r3, #28]
 80002c0:	4a04      	ldr	r2, [pc, #16]	; (80002d4 <LL_PWR_SMPS_Enable+0x1c>)
 80002c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002c6:	61d3      	str	r3, [r2, #28]
}
 80002c8:	bf00      	nop
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	58000400 	.word	0x58000400

080002d8 <LL_PWR_SMPS_SetStartupCurrent>:
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_200MA
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_220MA
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetStartupCurrent(uint32_t StartupCurrent)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSSC, StartupCurrent);
 80002e0:	4b06      	ldr	r3, [pc, #24]	; (80002fc <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 80002e2:	69db      	ldr	r3, [r3, #28]
 80002e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80002e8:	4904      	ldr	r1, [pc, #16]	; (80002fc <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4313      	orrs	r3, r2
 80002ee:	61cb      	str	r3, [r1, #28]
}
 80002f0:	bf00      	nop
 80002f2:	370c      	adds	r7, #12
 80002f4:	46bd      	mov	sp, r7
 80002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fa:	4770      	bx	lr
 80002fc:	58000400 	.word	0x58000400

08000300 <LL_PWR_SMPS_SetOutputVoltageLevel>:
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V85
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V90
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetOutputVoltageLevel(uint32_t OutputVoltageLevel)
{
 8000300:	b480      	push	{r7}
 8000302:	b087      	sub	sp, #28
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
  __IO const uint32_t OutputVoltageLevel_calibration = (((*SMPS_VOLTAGE_CAL_ADDR) & SMPS_VOLTAGE_CAL) >> SMPS_VOLTAGE_CAL_POS);  /* SMPS output voltage level calibrated in production */
 8000308:	4b18      	ldr	r3, [pc, #96]	; (800036c <LL_PWR_SMPS_SetOutputVoltageLevel+0x6c>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	0a1b      	lsrs	r3, r3, #8
 800030e:	f003 030f 	and.w	r3, r3, #15
 8000312:	60fb      	str	r3, [r7, #12]
  int32_t TrimmingSteps;                               /* Trimming steps between theoretical output voltage and calibrated output voltage */
  int32_t OutputVoltageLevelTrimmed;                   /* SMPS output voltage level after calibration: trimming value added to required level */

  if (OutputVoltageLevel_calibration == 0UL)
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	2b00      	cmp	r3, #0
 8000318:	d108      	bne.n	800032c <LL_PWR_SMPS_SetOutputVoltageLevel+0x2c>
  {
    /* Device with SMPS output voltage not calibrated in production: Apply output voltage value directly */

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, OutputVoltageLevel);
 800031a:	4b15      	ldr	r3, [pc, #84]	; (8000370 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 800031c:	69db      	ldr	r3, [r3, #28]
 800031e:	f023 020f 	bic.w	r2, r3, #15
 8000322:	4913      	ldr	r1, [pc, #76]	; (8000370 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	4313      	orrs	r3, r2
 8000328:	61cb      	str	r3, [r1, #28]
    }

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
  }
}
 800032a:	e019      	b.n	8000360 <LL_PWR_SMPS_SetOutputVoltageLevel+0x60>
    TrimmingSteps = ((int32_t)OutputVoltageLevel_calibration - (int32_t)(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V50 >> PWR_CR5_SMPSVOS_Pos));
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	3b06      	subs	r3, #6
 8000330:	613b      	str	r3, [r7, #16]
    OutputVoltageLevelTrimmed = ((int32_t)((uint32_t)(OutputVoltageLevel >> PWR_CR5_SMPSVOS_Pos)) + (int32_t)TrimmingSteps);
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	693a      	ldr	r2, [r7, #16]
 8000336:	4413      	add	r3, r2
 8000338:	617b      	str	r3, [r7, #20]
    if (OutputVoltageLevelTrimmed < 0)
 800033a:	697b      	ldr	r3, [r7, #20]
 800033c:	2b00      	cmp	r3, #0
 800033e:	da02      	bge.n	8000346 <LL_PWR_SMPS_SetOutputVoltageLevel+0x46>
      OutputVoltageLevelTrimmed = 0;
 8000340:	2300      	movs	r3, #0
 8000342:	617b      	str	r3, [r7, #20]
 8000344:	e004      	b.n	8000350 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
      if (OutputVoltageLevelTrimmed > (int32_t)PWR_CR5_SMPSVOS)
 8000346:	697b      	ldr	r3, [r7, #20]
 8000348:	2b0f      	cmp	r3, #15
 800034a:	dd01      	ble.n	8000350 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
        OutputVoltageLevelTrimmed = (int32_t)PWR_CR5_SMPSVOS;
 800034c:	230f      	movs	r3, #15
 800034e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
 8000350:	4b07      	ldr	r3, [pc, #28]	; (8000370 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8000352:	69db      	ldr	r3, [r3, #28]
 8000354:	f023 020f 	bic.w	r2, r3, #15
 8000358:	697b      	ldr	r3, [r7, #20]
 800035a:	4905      	ldr	r1, [pc, #20]	; (8000370 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 800035c:	4313      	orrs	r3, r2
 800035e:	61cb      	str	r3, [r1, #28]
}
 8000360:	bf00      	nop
 8000362:	371c      	adds	r7, #28
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr
 800036c:	1fff7558 	.word	0x1fff7558
 8000370:	58000400 	.word	0x58000400

08000374 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 800037c:	4b07      	ldr	r3, [pc, #28]	; (800039c <LL_C2_PWR_SetPowerMode+0x28>)
 800037e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000382:	f023 0207 	bic.w	r2, r3, #7
 8000386:	4905      	ldr	r1, [pc, #20]	; (800039c <LL_C2_PWR_SetPowerMode+0x28>)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	4313      	orrs	r3, r2
 800038c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000390:	bf00      	nop
 8000392:	370c      	adds	r7, #12
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	58000400 	.word	0x58000400

080003a0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80003a8:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <LL_EXTI_EnableIT_32_63+0x24>)
 80003aa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80003ae:	4905      	ldr	r1, [pc, #20]	; (80003c4 <LL_EXTI_EnableIT_32_63+0x24>)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4313      	orrs	r3, r2
 80003b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80003b8:	bf00      	nop
 80003ba:	370c      	adds	r7, #12
 80003bc:	46bd      	mov	sp, r7
 80003be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c2:	4770      	bx	lr
 80003c4:	58000800 	.word	0x58000800

080003c8 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80003d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003d4:	4a0a      	ldr	r2, [pc, #40]	; (8000400 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80003d6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80003da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80003e2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	021b      	lsls	r3, r3, #8
 80003ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80003ee:	4313      	orrs	r3, r2
 80003f0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80003f4:	bf00      	nop
 80003f6:	370c      	adds	r7, #12
 80003f8:	46bd      	mov	sp, r7
 80003fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fe:	4770      	bx	lr
 8000400:	cafecafe 	.word	0xcafecafe

08000404 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800040c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000410:	689b      	ldr	r3, [r3, #8]
 8000412:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000416:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	4313      	orrs	r3, r2
 800041e:	608b      	str	r3, [r1, #8]
}
 8000420:	bf00      	nop
 8000422:	370c      	adds	r7, #12
 8000424:	46bd      	mov	sp, r7
 8000426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042a:	4770      	bx	lr

0800042c <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000438:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800043c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000440:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000444:	bf00      	nop
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr

0800044e <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800044e:	b480      	push	{r7}
 8000450:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800045a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800045e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000462:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000466:	bf00      	nop
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr

08000470 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000478:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800047c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000480:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000484:	d101      	bne.n	800048a <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8000486:	2301      	movs	r3, #1
 8000488:	e000      	b.n	800048c <LL_RCC_IsActiveFlag_PINRST+0x1c>
 800048a:	2300      	movs	r3, #0
}
 800048c:	4618      	mov	r0, r3
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr

08000496 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8000496:	b480      	push	{r7}
 8000498:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800049a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800049e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80004a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80004aa:	d101      	bne.n	80004b0 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80004ac:	2301      	movs	r3, #1
 80004ae:	e000      	b.n	80004b2 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80004b0:	2300      	movs	r3, #0
}
 80004b2:	4618      	mov	r0, r3
 80004b4:	46bd      	mov	sp, r7
 80004b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ba:	4770      	bx	lr

080004bc <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80004bc:	b480      	push	{r7}
 80004be:	b085      	sub	sp, #20
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80004c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80004ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4313      	orrs	r3, r2
 80004d2:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80004d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	4013      	ands	r3, r2
 80004de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004e0:	68fb      	ldr	r3, [r7, #12]
}
 80004e2:	bf00      	nop
 80004e4:	3714      	adds	r7, #20
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
	...

080004f0 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80004f4:	4b04      	ldr	r3, [pc, #16]	; (8000508 <LL_DBGMCU_GetDeviceID+0x18>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	e0042000 	.word	0xe0042000

0800050c <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000510:	4b04      	ldr	r3, [pc, #16]	; (8000524 <LL_DBGMCU_GetRevisionID+0x18>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	0c1b      	lsrs	r3, r3, #16
 8000516:	b29b      	uxth	r3, r3
}
 8000518:	4618      	mov	r0, r3
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	e0042000 	.word	0xe0042000

08000528 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	685a      	ldr	r2, [r3, #4]
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	041b      	lsls	r3, r3, #16
 800053a:	431a      	orrs	r2, r3
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	605a      	str	r2, [r3, #4]
}
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr

0800054c <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	685a      	ldr	r2, [r3, #4]
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	431a      	orrs	r2, r3
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	605a      	str	r2, [r3, #4]
}
 8000562:	bf00      	nop
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr

0800056e <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800056e:	b480      	push	{r7}
 8000570:	b083      	sub	sp, #12
 8000572:	af00      	add	r7, sp, #0
 8000574:	6078      	str	r0, [r7, #4]
 8000576:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	695a      	ldr	r2, [r3, #20]
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	041b      	lsls	r3, r3, #16
 8000580:	431a      	orrs	r2, r3
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	615a      	str	r2, [r3, #20]
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr

08000592 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000592:	b480      	push	{r7}
 8000594:	b083      	sub	sp, #12
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
 800059a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	695a      	ldr	r2, [r3, #20]
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	431a      	orrs	r2, r3
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	615a      	str	r2, [r3, #20]
}
 80005a8:	bf00      	nop
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr

080005b4 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	683a      	ldr	r2, [r7, #0]
 80005c2:	609a      	str	r2, [r3, #8]
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	683a      	ldr	r2, [r7, #0]
 80005de:	619a      	str	r2, [r3, #24]
}
 80005e0:	bf00      	nop
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	22ff      	movs	r2, #255	; 0xff
 80005f8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80005fa:	bf00      	nop
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr

08000606 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000606:	b480      	push	{r7}
 8000608:	b083      	sub	sp, #12
 800060a:	af00      	add	r7, sp, #0
 800060c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	22ca      	movs	r2, #202	; 0xca
 8000612:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2253      	movs	r2, #83	; 0x53
 8000618:	625a      	str	r2, [r3, #36]	; 0x24
}
 800061a:	bf00      	nop
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr

08000626 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000626:	b480      	push	{r7}
 8000628:	b083      	sub	sp, #12
 800062a:	af00      	add	r7, sp, #0
 800062c:	6078      	str	r0, [r7, #4]
 800062e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	689b      	ldr	r3, [r3, #8]
 8000634:	f023 0207 	bic.w	r2, r3, #7
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	431a      	orrs	r2, r3
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	609a      	str	r2, [r3, #8]
}
 8000640:	bf00      	nop
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000650:	4b04      	ldr	r3, [pc, #16]	; (8000664 <MX_APPE_Config+0x18>)
 8000652:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000656:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000658:	f000 f829 	bl	80006ae <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 800065c:	f000 f868 	bl	8000730 <Config_HSE>

  return;
 8000660:	bf00      	nop
}
 8000662:	bd80      	pop	{r7, pc}
 8000664:	58004000 	.word	0x58004000

08000668 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 800066c:	f000 f874 	bl	8000758 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000670:	f000 f88c 	bl	800078c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000674:	4903      	ldr	r1, [pc, #12]	; (8000684 <MX_APPE_Init+0x1c>)
 8000676:	2000      	movs	r0, #0
 8000678:	f000 fdb4 	bl	80011e4 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 800067c:	f000 f896 	bl	80007ac <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8000680:	bf00      	nop
}
 8000682:	bd80      	pop	{r7, pc}
 8000684:	200001c4 	.word	0x200001c4

08000688 <Init_Smps>:

void Init_Smps(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
   *
   *  The SMPS configuration is not yet supported by CubeMx
   *  when SMPS output voltage is set to 1.4V, the RF output power is limited to 3.7dBm
   *  the SMPS output voltage shall be increased for higher RF output power
   */
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
 800068c:	2000      	movs	r0, #0
 800068e:	f7ff fe23 	bl	80002d8 <LL_PWR_SMPS_SetStartupCurrent>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
 8000692:	2004      	movs	r0, #4
 8000694:	f7ff fe34 	bl	8000300 <LL_PWR_SMPS_SetOutputVoltageLevel>
  LL_PWR_SMPS_Enable();
 8000698:	f7ff fe0e 	bl	80002b8 <LL_PWR_SMPS_Enable>
#endif /* CFG_USE_SMPS != 0 */

  return;
 800069c:	bf00      	nop
}
 800069e:	bd80      	pop	{r7, pc}

080006a0 <Init_Exti>:

void Init_Exti(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80006a4:	2050      	movs	r0, #80	; 0x50
 80006a6:	f7ff fe7b 	bl	80003a0 <LL_EXTI_EnableIT_32_63>

  return;
 80006aa:	bf00      	nop
}
 80006ac:	bd80      	pop	{r7, pc}

080006ae <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 80006b2:	f000 f804 	bl	80006be <Reset_BackupDomain>

  Reset_IPCC();
 80006b6:	f000 f819 	bl	80006ec <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80006ba:	bf00      	nop
}
 80006bc:	bd80      	pop	{r7, pc}

080006be <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80006c2:	f7ff fed5 	bl	8000470 <LL_RCC_IsActiveFlag_PINRST>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d00d      	beq.n	80006e8 <Reset_BackupDomain+0x2a>
 80006cc:	f7ff fee3 	bl	8000496 <LL_RCC_IsActiveFlag_SFTRST>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d108      	bne.n	80006e8 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80006d6:	f003 f8af 	bl	8003838 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80006da:	f003 f8ad 	bl	8003838 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80006de:	f7ff fea5 	bl	800042c <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80006e2:	f7ff feb4 	bl	800044e <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80006e6:	bf00      	nop
 80006e8:	bf00      	nop
}
 80006ea:	bd80      	pop	{r7, pc}

080006ec <Reset_IPCC>:

static void Reset_IPCC(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80006f0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80006f4:	f7ff fee2 	bl	80004bc <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 80006f8:	213f      	movs	r1, #63	; 0x3f
 80006fa:	480c      	ldr	r0, [pc, #48]	; (800072c <Reset_IPCC+0x40>)
 80006fc:	f7ff ff5a 	bl	80005b4 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000700:	213f      	movs	r1, #63	; 0x3f
 8000702:	480a      	ldr	r0, [pc, #40]	; (800072c <Reset_IPCC+0x40>)
 8000704:	f7ff ff64 	bl	80005d0 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000708:	213f      	movs	r1, #63	; 0x3f
 800070a:	4808      	ldr	r0, [pc, #32]	; (800072c <Reset_IPCC+0x40>)
 800070c:	f7ff ff0c 	bl	8000528 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000710:	213f      	movs	r1, #63	; 0x3f
 8000712:	4806      	ldr	r0, [pc, #24]	; (800072c <Reset_IPCC+0x40>)
 8000714:	f7ff ff2b 	bl	800056e <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000718:	213f      	movs	r1, #63	; 0x3f
 800071a:	4804      	ldr	r0, [pc, #16]	; (800072c <Reset_IPCC+0x40>)
 800071c:	f7ff ff16 	bl	800054c <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000720:	213f      	movs	r1, #63	; 0x3f
 8000722:	4802      	ldr	r0, [pc, #8]	; (800072c <Reset_IPCC+0x40>)
 8000724:	f7ff ff35 	bl	8000592 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000728:	bf00      	nop
}
 800072a:	bd80      	pop	{r7, pc}
 800072c:	58000c00 	.word	0x58000c00

08000730 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000736:	2000      	movs	r0, #0
 8000738:	f006 fa04 	bl	8006b44 <OTP_Read>
 800073c:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d005      	beq.n	8000750 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	799b      	ldrb	r3, [r3, #6]
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff fe3d 	bl	80003c8 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800074e:	bf00      	nop
 8000750:	bf00      	nop
}
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <System_Init>:

static void System_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  Init_Smps();
 800075c:	f7ff ff94 	bl	8000688 <Init_Smps>

  Init_Exti();
 8000760:	f7ff ff9e 	bl	80006a0 <Init_Exti>

  Init_Rtc();
 8000764:	f000 f802 	bl	800076c <Init_Rtc>

  return;
 8000768:	bf00      	nop
}
 800076a:	bd80      	pop	{r7, pc}

0800076c <Init_Rtc>:

static void Init_Rtc(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000770:	4805      	ldr	r0, [pc, #20]	; (8000788 <Init_Rtc+0x1c>)
 8000772:	f7ff ff48 	bl	8000606 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000776:	2100      	movs	r1, #0
 8000778:	4803      	ldr	r0, [pc, #12]	; (8000788 <Init_Rtc+0x1c>)
 800077a:	f7ff ff54 	bl	8000626 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800077e:	4802      	ldr	r0, [pc, #8]	; (8000788 <Init_Rtc+0x1c>)
 8000780:	f7ff ff34 	bl	80005ec <LL_RTC_EnableWriteProtection>

  return;
 8000784:	bf00      	nop
}
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40002800 	.word	0x40002800

0800078c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000790:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000794:	f7ff fe36 	bl	8000404 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000798:	f007 f94c 	bl	8007a34 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800079c:	2004      	movs	r0, #4
 800079e:	f7ff fde9 	bl	8000374 <LL_C2_PWR_SetPowerMode>
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */
  /**
   * Active SRAM retention for standby support
   */
  HAL_PWREx_EnableSRAMRetention();
 80007a2:	f003 f881 	bl	80038a8 <HAL_PWREx_EnableSRAMRetention>

  return;
 80007a6:	bf00      	nop
}
 80007a8:	bd80      	pop	{r7, pc}
	...

080007ac <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;

  /**< Reference table initialization */
  TL_Init();
 80007b2:	f005 ff85 	bl	80066c0 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80007b6:	4a11      	ldr	r2, [pc, #68]	; (80007fc <appe_Tl_Init+0x50>)
 80007b8:	2100      	movs	r1, #0
 80007ba:	2010      	movs	r0, #16
 80007bc:	f007 faae 	bl	8007d1c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <appe_Tl_Init+0x54>)
 80007c2:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <appe_Tl_Init+0x58>)
 80007c6:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80007c8:	463b      	mov	r3, r7
 80007ca:	4619      	mov	r1, r3
 80007cc:	480e      	ldr	r0, [pc, #56]	; (8000808 <appe_Tl_Init+0x5c>)
 80007ce:	f005 fe39 	bl	8006444 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <appe_Tl_Init+0x60>)
 80007d4:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <appe_Tl_Init+0x64>)
 80007d8:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <appe_Tl_Init+0x68>)
 80007dc:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80007de:	f240 533c 	movw	r3, #1340	; 0x53c
 80007e2:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80007e4:	f107 0308 	add.w	r3, r7, #8
 80007e8:	4618      	mov	r0, r3
 80007ea:	f006 f8ab 	bl	8006944 <TL_MM_Init>

  TL_Enable();
 80007ee:	f005 ff61 	bl	80066b4 <TL_Enable>

  return;
 80007f2:	bf00      	nop
}
 80007f4:	3720      	adds	r7, #32
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	0800647d 	.word	0x0800647d
 8000800:	20030734 	.word	0x20030734
 8000804:	08000819 	.word	0x08000819
 8000808:	08000831 	.word	0x08000831
 800080c:	2003094c 	.word	0x2003094c
 8000810:	20030840 	.word	0x20030840
 8000814:	200301f8 	.word	0x200301f8

08000818 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000822:	bf00      	nop
}
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
	...

08000830 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b088      	sub	sp, #32
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	330b      	adds	r3, #11
 800083e:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000840:	69fb      	ldr	r3, [r7, #28]
 8000842:	881b      	ldrh	r3, [r3, #0]
 8000844:	b29b      	uxth	r3, r3
 8000846:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 800084a:	2b07      	cmp	r3, #7
 800084c:	d81f      	bhi.n	800088e <APPE_SysUserEvtRx+0x5e>
 800084e:	a201      	add	r2, pc, #4	; (adr r2, 8000854 <APPE_SysUserEvtRx+0x24>)
 8000850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000854:	08000875 	.word	0x08000875
 8000858:	08000887 	.word	0x08000887
 800085c:	0800088f 	.word	0x0800088f
 8000860:	0800088f 	.word	0x0800088f
 8000864:	0800088f 	.word	0x0800088f
 8000868:	0800088f 	.word	0x0800088f
 800086c:	0800088f 	.word	0x0800088f
 8000870:	0800088f 	.word	0x0800088f
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	4618      	mov	r0, r3
 800087a:	f005 fb99 	bl	8005fb0 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f000 f81b 	bl	80008ba <APPE_SysEvtReadyProcessing>
    break;
 8000884:	e004      	b.n	8000890 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f000 f806 	bl	8000898 <APPE_SysEvtError>
    break;
 800088c:	e000      	b.n	8000890 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 800088e:	bf00      	nop
  }

  return;
 8000890:	bf00      	nop
}
 8000892:	3720      	adds	r7, #32
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	330b      	adds	r3, #11
 80008a6:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	3302      	adds	r3, #2
 80008ac:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80008ae:	bf00      	nop
}
 80008b0:	3714      	adds	r7, #20
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr

080008ba <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b08a      	sub	sp, #40	; 0x28
 80008be:	af00      	add	r7, sp, #0
 80008c0:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80008c2:	f107 0308 	add.w	r3, r7, #8
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	330b      	adds	r3, #11
 80008de:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80008e0:	69fb      	ldr	r3, [r7, #28]
 80008e2:	3302      	adds	r3, #2
 80008e4:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80008e6:	69bb      	ldr	r3, [r7, #24]
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d11d      	bne.n	800092a <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80008ee:	f7ff fca7 	bl	8000240 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80008f2:	230f      	movs	r3, #15
 80008f4:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80008f6:	237f      	movs	r3, #127	; 0x7f
 80008f8:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80008fa:	f7ff fe07 	bl	800050c <LL_DBGMCU_GetRevisionID>
 80008fe:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000902:	b29b      	uxth	r3, r3
 8000904:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8000906:	f7ff fdf3 	bl	80004f0 <LL_DBGMCU_GetDeviceID>
 800090a:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 800090c:	6a3b      	ldr	r3, [r7, #32]
 800090e:	b29b      	uxth	r3, r3
 8000910:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000912:	f107 0308 	add.w	r3, r7, #8
 8000916:	4618      	mov	r0, r3
 8000918:	f005 fb34 	bl	8005f84 <SHCI_C2_Config>

    APP_BLE_Init();
 800091c:	f006 fa32 	bl	8006d84 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000920:	2100      	movs	r1, #0
 8000922:	2001      	movs	r0, #1
 8000924:	f007 f898 	bl	8007a58 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000928:	e007      	b.n	800093a <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800092a:	69bb      	ldr	r3, [r7, #24]
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2b01      	cmp	r3, #1
 8000930:	d103      	bne.n	800093a <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2200      	movs	r2, #0
 8000936:	701a      	strb	r2, [r3, #0]
  return;
 8000938:	bf00      	nop
 800093a:	bf00      	nop
}
 800093c:	3728      	adds	r7, #40	; 0x28
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000946:	f04f 30ff 	mov.w	r0, #4294967295
 800094a:	f007 f8eb 	bl	8007b24 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}

08000952 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
 8000956:	f007 f8af 	bl	8007ab8 <UTIL_LPM_EnterLowPower>
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800095a:	bf00      	nop
}
 800095c:	bd80      	pop	{r7, pc}

0800095e <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b082      	sub	sp, #8
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
 8000966:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000968:	f04f 30ff 	mov.w	r0, #4294967295
 800096c:	f007 f8da 	bl	8007b24 <UTIL_SEQ_Run>
  return;
 8000970:	bf00      	nop
}
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000980:	2100      	movs	r1, #0
 8000982:	2010      	movs	r0, #16
 8000984:	f007 f9ec 	bl	8007d60 <UTIL_SEQ_SetTask>
  return;
 8000988:	bf00      	nop
}
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000998:	2002      	movs	r0, #2
 800099a:	f007 fa4d 	bl	8007e38 <UTIL_SEQ_SetEvt>
  return;
 800099e:	bf00      	nop
}
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b082      	sub	sp, #8
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80009ae:	2002      	movs	r0, #2
 80009b0:	f007 fa62 	bl	8007e78 <UTIL_SEQ_WaitEvt>
  return;
 80009b4:	bf00      	nop
}
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <LL_EXTI_EnableIT_0_31>:
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <LL_EXTI_EnableIT_0_31+0x24>)
 80009c6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80009ca:	4905      	ldr	r1, [pc, #20]	; (80009e0 <LL_EXTI_EnableIT_0_31+0x24>)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4313      	orrs	r3, r2
 80009d0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80009d4:	bf00      	nop
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	58000800 	.word	0x58000800

080009e4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	4904      	ldr	r1, [pc, #16]	; (8000a04 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	600b      	str	r3, [r1, #0]

}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	58000800 	.word	0x58000800

08000a08 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <ReadRtcSsrValue+0x3c>)
 8000a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <ReadRtcSsrValue+0x3c>)
 8000a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000a1e:	e005      	b.n	8000a2c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a24:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <ReadRtcSsrValue+0x3c>)
 8000a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d1f5      	bne.n	8000a20 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000a34:	683b      	ldr	r3, [r7, #0]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	40002800 	.word	0x40002800

08000a48 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	460a      	mov	r2, r1
 8000a52:	71fb      	strb	r3, [r7, #7]
 8000a54:	4613      	mov	r3, r2
 8000a56:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000a58:	79ba      	ldrb	r2, [r7, #6]
 8000a5a:	491d      	ldr	r1, [pc, #116]	; (8000ad0 <LinkTimerAfter+0x88>)
 8000a5c:	4613      	mov	r3, r2
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	4413      	add	r3, r2
 8000a62:	00db      	lsls	r3, r3, #3
 8000a64:	440b      	add	r3, r1
 8000a66:	3315      	adds	r3, #21
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000a6c:	7bfb      	ldrb	r3, [r7, #15]
 8000a6e:	2b06      	cmp	r3, #6
 8000a70:	d009      	beq.n	8000a86 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000a72:	7bfa      	ldrb	r2, [r7, #15]
 8000a74:	4916      	ldr	r1, [pc, #88]	; (8000ad0 <LinkTimerAfter+0x88>)
 8000a76:	4613      	mov	r3, r2
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	4413      	add	r3, r2
 8000a7c:	00db      	lsls	r3, r3, #3
 8000a7e:	440b      	add	r3, r1
 8000a80:	3314      	adds	r3, #20
 8000a82:	79fa      	ldrb	r2, [r7, #7]
 8000a84:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000a86:	79fa      	ldrb	r2, [r7, #7]
 8000a88:	4911      	ldr	r1, [pc, #68]	; (8000ad0 <LinkTimerAfter+0x88>)
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	4413      	add	r3, r2
 8000a90:	00db      	lsls	r3, r3, #3
 8000a92:	440b      	add	r3, r1
 8000a94:	3315      	adds	r3, #21
 8000a96:	7bfa      	ldrb	r2, [r7, #15]
 8000a98:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000a9a:	79fa      	ldrb	r2, [r7, #7]
 8000a9c:	490c      	ldr	r1, [pc, #48]	; (8000ad0 <LinkTimerAfter+0x88>)
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	4413      	add	r3, r2
 8000aa4:	00db      	lsls	r3, r3, #3
 8000aa6:	440b      	add	r3, r1
 8000aa8:	3314      	adds	r3, #20
 8000aaa:	79ba      	ldrb	r2, [r7, #6]
 8000aac:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000aae:	79ba      	ldrb	r2, [r7, #6]
 8000ab0:	4907      	ldr	r1, [pc, #28]	; (8000ad0 <LinkTimerAfter+0x88>)
 8000ab2:	4613      	mov	r3, r2
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	4413      	add	r3, r2
 8000ab8:	00db      	lsls	r3, r3, #3
 8000aba:	440b      	add	r3, r1
 8000abc:	3315      	adds	r3, #21
 8000abe:	79fa      	ldrb	r2, [r7, #7]
 8000ac0:	701a      	strb	r2, [r3, #0]

  return;
 8000ac2:	bf00      	nop
}
 8000ac4:	3714      	adds	r7, #20
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	20000094 	.word	0x20000094

08000ad4 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	460a      	mov	r2, r1
 8000ade:	71fb      	strb	r3, [r7, #7]
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000ae4:	4b29      	ldr	r3, [pc, #164]	; (8000b8c <LinkTimerBefore+0xb8>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	79ba      	ldrb	r2, [r7, #6]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d032      	beq.n	8000b56 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000af0:	79ba      	ldrb	r2, [r7, #6]
 8000af2:	4927      	ldr	r1, [pc, #156]	; (8000b90 <LinkTimerBefore+0xbc>)
 8000af4:	4613      	mov	r3, r2
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	4413      	add	r3, r2
 8000afa:	00db      	lsls	r3, r3, #3
 8000afc:	440b      	add	r3, r1
 8000afe:	3314      	adds	r3, #20
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000b04:	7bfa      	ldrb	r2, [r7, #15]
 8000b06:	4922      	ldr	r1, [pc, #136]	; (8000b90 <LinkTimerBefore+0xbc>)
 8000b08:	4613      	mov	r3, r2
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	4413      	add	r3, r2
 8000b0e:	00db      	lsls	r3, r3, #3
 8000b10:	440b      	add	r3, r1
 8000b12:	3315      	adds	r3, #21
 8000b14:	79fa      	ldrb	r2, [r7, #7]
 8000b16:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000b18:	79fa      	ldrb	r2, [r7, #7]
 8000b1a:	491d      	ldr	r1, [pc, #116]	; (8000b90 <LinkTimerBefore+0xbc>)
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	4413      	add	r3, r2
 8000b22:	00db      	lsls	r3, r3, #3
 8000b24:	440b      	add	r3, r1
 8000b26:	3315      	adds	r3, #21
 8000b28:	79ba      	ldrb	r2, [r7, #6]
 8000b2a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000b2c:	79fa      	ldrb	r2, [r7, #7]
 8000b2e:	4918      	ldr	r1, [pc, #96]	; (8000b90 <LinkTimerBefore+0xbc>)
 8000b30:	4613      	mov	r3, r2
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	4413      	add	r3, r2
 8000b36:	00db      	lsls	r3, r3, #3
 8000b38:	440b      	add	r3, r1
 8000b3a:	3314      	adds	r3, #20
 8000b3c:	7bfa      	ldrb	r2, [r7, #15]
 8000b3e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000b40:	79ba      	ldrb	r2, [r7, #6]
 8000b42:	4913      	ldr	r1, [pc, #76]	; (8000b90 <LinkTimerBefore+0xbc>)
 8000b44:	4613      	mov	r3, r2
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	4413      	add	r3, r2
 8000b4a:	00db      	lsls	r3, r3, #3
 8000b4c:	440b      	add	r3, r1
 8000b4e:	3314      	adds	r3, #20
 8000b50:	79fa      	ldrb	r2, [r7, #7]
 8000b52:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000b54:	e014      	b.n	8000b80 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000b56:	79fa      	ldrb	r2, [r7, #7]
 8000b58:	490d      	ldr	r1, [pc, #52]	; (8000b90 <LinkTimerBefore+0xbc>)
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	4413      	add	r3, r2
 8000b60:	00db      	lsls	r3, r3, #3
 8000b62:	440b      	add	r3, r1
 8000b64:	3315      	adds	r3, #21
 8000b66:	79ba      	ldrb	r2, [r7, #6]
 8000b68:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000b6a:	79ba      	ldrb	r2, [r7, #6]
 8000b6c:	4908      	ldr	r1, [pc, #32]	; (8000b90 <LinkTimerBefore+0xbc>)
 8000b6e:	4613      	mov	r3, r2
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	4413      	add	r3, r2
 8000b74:	00db      	lsls	r3, r3, #3
 8000b76:	440b      	add	r3, r1
 8000b78:	3314      	adds	r3, #20
 8000b7a:	79fa      	ldrb	r2, [r7, #7]
 8000b7c:	701a      	strb	r2, [r3, #0]
  return;
 8000b7e:	bf00      	nop
}
 8000b80:	3714      	adds	r7, #20
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	20000124 	.word	0x20000124
 8000b90:	20000094 	.word	0x20000094

08000b94 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000b9e:	4b4e      	ldr	r3, [pc, #312]	; (8000cd8 <linkTimer+0x144>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	2b06      	cmp	r3, #6
 8000ba6:	d118      	bne.n	8000bda <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000ba8:	4b4b      	ldr	r3, [pc, #300]	; (8000cd8 <linkTimer+0x144>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	4b4b      	ldr	r3, [pc, #300]	; (8000cdc <linkTimer+0x148>)
 8000bb0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000bb2:	4a49      	ldr	r2, [pc, #292]	; (8000cd8 <linkTimer+0x144>)
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000bb8:	79fa      	ldrb	r2, [r7, #7]
 8000bba:	4949      	ldr	r1, [pc, #292]	; (8000ce0 <linkTimer+0x14c>)
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	4413      	add	r3, r2
 8000bc2:	00db      	lsls	r3, r3, #3
 8000bc4:	440b      	add	r3, r1
 8000bc6:	3315      	adds	r3, #21
 8000bc8:	2206      	movs	r2, #6
 8000bca:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000bcc:	4b45      	ldr	r3, [pc, #276]	; (8000ce4 <linkTimer+0x150>)
 8000bce:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd2:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	81fb      	strh	r3, [r7, #14]
 8000bd8:	e078      	b.n	8000ccc <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000bda:	f000 f909 	bl	8000df0 <ReturnTimeElapsed>
 8000bde:	4603      	mov	r3, r0
 8000be0:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000be2:	79fa      	ldrb	r2, [r7, #7]
 8000be4:	493e      	ldr	r1, [pc, #248]	; (8000ce0 <linkTimer+0x14c>)
 8000be6:	4613      	mov	r3, r2
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	4413      	add	r3, r2
 8000bec:	00db      	lsls	r3, r3, #3
 8000bee:	440b      	add	r3, r1
 8000bf0:	3308      	adds	r3, #8
 8000bf2:	6819      	ldr	r1, [r3, #0]
 8000bf4:	89fb      	ldrh	r3, [r7, #14]
 8000bf6:	79fa      	ldrb	r2, [r7, #7]
 8000bf8:	4419      	add	r1, r3
 8000bfa:	4839      	ldr	r0, [pc, #228]	; (8000ce0 <linkTimer+0x14c>)
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	4413      	add	r3, r2
 8000c02:	00db      	lsls	r3, r3, #3
 8000c04:	4403      	add	r3, r0
 8000c06:	3308      	adds	r3, #8
 8000c08:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000c0a:	79fa      	ldrb	r2, [r7, #7]
 8000c0c:	4934      	ldr	r1, [pc, #208]	; (8000ce0 <linkTimer+0x14c>)
 8000c0e:	4613      	mov	r3, r2
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	4413      	add	r3, r2
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	440b      	add	r3, r1
 8000c18:	3308      	adds	r3, #8
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000c1e:	4b2e      	ldr	r3, [pc, #184]	; (8000cd8 <linkTimer+0x144>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	4619      	mov	r1, r3
 8000c26:	4a2e      	ldr	r2, [pc, #184]	; (8000ce0 <linkTimer+0x14c>)
 8000c28:	460b      	mov	r3, r1
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	440b      	add	r3, r1
 8000c2e:	00db      	lsls	r3, r3, #3
 8000c30:	4413      	add	r3, r2
 8000c32:	3308      	adds	r3, #8
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	68ba      	ldr	r2, [r7, #8]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d337      	bcc.n	8000cac <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000c3c:	4b26      	ldr	r3, [pc, #152]	; (8000cd8 <linkTimer+0x144>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000c42:	7b7a      	ldrb	r2, [r7, #13]
 8000c44:	4926      	ldr	r1, [pc, #152]	; (8000ce0 <linkTimer+0x14c>)
 8000c46:	4613      	mov	r3, r2
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	4413      	add	r3, r2
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	440b      	add	r3, r1
 8000c50:	3315      	adds	r3, #21
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000c56:	e013      	b.n	8000c80 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000c58:	7b7a      	ldrb	r2, [r7, #13]
 8000c5a:	4921      	ldr	r1, [pc, #132]	; (8000ce0 <linkTimer+0x14c>)
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	4413      	add	r3, r2
 8000c62:	00db      	lsls	r3, r3, #3
 8000c64:	440b      	add	r3, r1
 8000c66:	3315      	adds	r3, #21
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000c6c:	7b7a      	ldrb	r2, [r7, #13]
 8000c6e:	491c      	ldr	r1, [pc, #112]	; (8000ce0 <linkTimer+0x14c>)
 8000c70:	4613      	mov	r3, r2
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	4413      	add	r3, r2
 8000c76:	00db      	lsls	r3, r3, #3
 8000c78:	440b      	add	r3, r1
 8000c7a:	3315      	adds	r3, #21
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000c80:	7b3b      	ldrb	r3, [r7, #12]
 8000c82:	2b06      	cmp	r3, #6
 8000c84:	d00b      	beq.n	8000c9e <linkTimer+0x10a>
 8000c86:	7b3a      	ldrb	r2, [r7, #12]
 8000c88:	4915      	ldr	r1, [pc, #84]	; (8000ce0 <linkTimer+0x14c>)
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	4413      	add	r3, r2
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	440b      	add	r3, r1
 8000c94:	3308      	adds	r3, #8
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	68ba      	ldr	r2, [r7, #8]
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	d2dc      	bcs.n	8000c58 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000c9e:	7b7a      	ldrb	r2, [r7, #13]
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	4611      	mov	r1, r2
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff fecf 	bl	8000a48 <LinkTimerAfter>
 8000caa:	e00f      	b.n	8000ccc <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000cac:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <linkTimer+0x144>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	4611      	mov	r1, r2
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff ff0c 	bl	8000ad4 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <linkTimer+0x144>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <linkTimer+0x148>)
 8000cc4:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000cc6:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <linkTimer+0x144>)
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000ccc:	89fb      	ldrh	r3, [r7, #14]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000124 	.word	0x20000124
 8000cdc:	20000125 	.word	0x20000125
 8000ce0:	20000094 	.word	0x20000094
 8000ce4:	20000128 	.word	0x20000128

08000ce8 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	460a      	mov	r2, r1
 8000cf2:	71fb      	strb	r3, [r7, #7]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000cf8:	4b39      	ldr	r3, [pc, #228]	; (8000de0 <UnlinkTimer+0xf8>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	79fa      	ldrb	r2, [r7, #7]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d111      	bne.n	8000d28 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000d04:	4b36      	ldr	r3, [pc, #216]	; (8000de0 <UnlinkTimer+0xf8>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	4b36      	ldr	r3, [pc, #216]	; (8000de4 <UnlinkTimer+0xfc>)
 8000d0c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000d0e:	79fa      	ldrb	r2, [r7, #7]
 8000d10:	4935      	ldr	r1, [pc, #212]	; (8000de8 <UnlinkTimer+0x100>)
 8000d12:	4613      	mov	r3, r2
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	4413      	add	r3, r2
 8000d18:	00db      	lsls	r3, r3, #3
 8000d1a:	440b      	add	r3, r1
 8000d1c:	3315      	adds	r3, #21
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	4b2f      	ldr	r3, [pc, #188]	; (8000de0 <UnlinkTimer+0xf8>)
 8000d24:	701a      	strb	r2, [r3, #0]
 8000d26:	e03e      	b.n	8000da6 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000d28:	79fa      	ldrb	r2, [r7, #7]
 8000d2a:	492f      	ldr	r1, [pc, #188]	; (8000de8 <UnlinkTimer+0x100>)
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	4413      	add	r3, r2
 8000d32:	00db      	lsls	r3, r3, #3
 8000d34:	440b      	add	r3, r1
 8000d36:	3314      	adds	r3, #20
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000d3c:	79fa      	ldrb	r2, [r7, #7]
 8000d3e:	492a      	ldr	r1, [pc, #168]	; (8000de8 <UnlinkTimer+0x100>)
 8000d40:	4613      	mov	r3, r2
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	4413      	add	r3, r2
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	440b      	add	r3, r1
 8000d4a:	3315      	adds	r3, #21
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000d50:	79f9      	ldrb	r1, [r7, #7]
 8000d52:	7bfa      	ldrb	r2, [r7, #15]
 8000d54:	4824      	ldr	r0, [pc, #144]	; (8000de8 <UnlinkTimer+0x100>)
 8000d56:	460b      	mov	r3, r1
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	440b      	add	r3, r1
 8000d5c:	00db      	lsls	r3, r3, #3
 8000d5e:	4403      	add	r3, r0
 8000d60:	3315      	adds	r3, #21
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	b2d8      	uxtb	r0, r3
 8000d66:	4920      	ldr	r1, [pc, #128]	; (8000de8 <UnlinkTimer+0x100>)
 8000d68:	4613      	mov	r3, r2
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	4413      	add	r3, r2
 8000d6e:	00db      	lsls	r3, r3, #3
 8000d70:	440b      	add	r3, r1
 8000d72:	3315      	adds	r3, #21
 8000d74:	4602      	mov	r2, r0
 8000d76:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000d78:	7bbb      	ldrb	r3, [r7, #14]
 8000d7a:	2b06      	cmp	r3, #6
 8000d7c:	d013      	beq.n	8000da6 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000d7e:	79f9      	ldrb	r1, [r7, #7]
 8000d80:	7bba      	ldrb	r2, [r7, #14]
 8000d82:	4819      	ldr	r0, [pc, #100]	; (8000de8 <UnlinkTimer+0x100>)
 8000d84:	460b      	mov	r3, r1
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	440b      	add	r3, r1
 8000d8a:	00db      	lsls	r3, r3, #3
 8000d8c:	4403      	add	r3, r0
 8000d8e:	3314      	adds	r3, #20
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	b2d8      	uxtb	r0, r3
 8000d94:	4914      	ldr	r1, [pc, #80]	; (8000de8 <UnlinkTimer+0x100>)
 8000d96:	4613      	mov	r3, r2
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	4413      	add	r3, r2
 8000d9c:	00db      	lsls	r3, r3, #3
 8000d9e:	440b      	add	r3, r1
 8000da0:	3314      	adds	r3, #20
 8000da2:	4602      	mov	r2, r0
 8000da4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000da6:	79fa      	ldrb	r2, [r7, #7]
 8000da8:	490f      	ldr	r1, [pc, #60]	; (8000de8 <UnlinkTimer+0x100>)
 8000daa:	4613      	mov	r3, r2
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	4413      	add	r3, r2
 8000db0:	00db      	lsls	r3, r3, #3
 8000db2:	440b      	add	r3, r1
 8000db4:	330c      	adds	r3, #12
 8000db6:	2201      	movs	r2, #1
 8000db8:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <UnlinkTimer+0xf8>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	2b06      	cmp	r3, #6
 8000dc2:	d107      	bne.n	8000dd4 <UnlinkTimer+0xec>
 8000dc4:	79bb      	ldrb	r3, [r7, #6]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d104      	bne.n	8000dd4 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000dca:	4b08      	ldr	r3, [pc, #32]	; (8000dec <UnlinkTimer+0x104>)
 8000dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd0:	601a      	str	r2, [r3, #0]
  }

  return;
 8000dd2:	bf00      	nop
 8000dd4:	bf00      	nop
}
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	20000124 	.word	0x20000124
 8000de4:	20000125 	.word	0x20000125
 8000de8:	20000094 	.word	0x20000094
 8000dec:	20000128 	.word	0x20000128

08000df0 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000df6:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <ReturnTimeElapsed+0x70>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dfe:	d026      	beq.n	8000e4e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000e00:	f7ff fe02 	bl	8000a08 <ReadRtcSsrValue>
 8000e04:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000e06:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <ReturnTimeElapsed+0x70>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d805      	bhi.n	8000e1c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000e10:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <ReturnTimeElapsed+0x70>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	e00a      	b.n	8000e32 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <ReturnTimeElapsed+0x74>)
 8000e1e:	881b      	ldrh	r3, [r3, #0]
 8000e20:	461a      	mov	r2, r3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000e28:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <ReturnTimeElapsed+0x70>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	683a      	ldr	r2, [r7, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000e32:	4b0d      	ldr	r3, [pc, #52]	; (8000e68 <ReturnTimeElapsed+0x78>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	461a      	mov	r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	fb02 f303 	mul.w	r3, r2, r3
 8000e3e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000e40:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <ReturnTimeElapsed+0x7c>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	461a      	mov	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	40d3      	lsrs	r3, r2
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	e001      	b.n	8000e52 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	b29b      	uxth	r3, r3
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000128 	.word	0x20000128
 8000e64:	20000130 	.word	0x20000130
 8000e68:	2000012e 	.word	0x2000012e
 8000e6c:	2000012d 	.word	0x2000012d

08000e70 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8000e7a:	88fb      	ldrh	r3, [r7, #6]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d108      	bne.n	8000e92 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000e80:	f7ff fdc2 	bl	8000a08 <ReadRtcSsrValue>
 8000e84:	4603      	mov	r3, r0
 8000e86:	4a21      	ldr	r2, [pc, #132]	; (8000f0c <RestartWakeupCounter+0x9c>)
 8000e88:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000e8a:	2003      	movs	r0, #3
 8000e8c:	f001 fb49 	bl	8002522 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000e90:	e039      	b.n	8000f06 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000e92:	88fb      	ldrh	r3, [r7, #6]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d803      	bhi.n	8000ea0 <RestartWakeupCounter+0x30>
 8000e98:	4b1d      	ldr	r3, [pc, #116]	; (8000f10 <RestartWakeupCounter+0xa0>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d002      	beq.n	8000ea6 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000ea6:	bf00      	nop
 8000ea8:	4b1a      	ldr	r3, [pc, #104]	; (8000f14 <RestartWakeupCounter+0xa4>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	f003 0304 	and.w	r3, r3, #4
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d0f8      	beq.n	8000ea8 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000eb6:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <RestartWakeupCounter+0xa4>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <RestartWakeupCounter+0xa4>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000ec6:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000ec8:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <RestartWakeupCounter+0xa8>)
 8000eca:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ece:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000ed0:	2003      	movs	r0, #3
 8000ed2:	f001 fb34 	bl	800253e <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000ed6:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <RestartWakeupCounter+0xac>)
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	0c1b      	lsrs	r3, r3, #16
 8000edc:	041b      	lsls	r3, r3, #16
 8000ede:	88fa      	ldrh	r2, [r7, #6]
 8000ee0:	490e      	ldr	r1, [pc, #56]	; (8000f1c <RestartWakeupCounter+0xac>)
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000ee6:	f7ff fd8f 	bl	8000a08 <ReadRtcSsrValue>
 8000eea:	4603      	mov	r3, r0
 8000eec:	4a07      	ldr	r2, [pc, #28]	; (8000f0c <RestartWakeupCounter+0x9c>)
 8000eee:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <RestartWakeupCounter+0xa4>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	689a      	ldr	r2, [r3, #8]
 8000ef6:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <RestartWakeupCounter+0xa4>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000efe:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000f00:	f3af 8000 	nop.w
  return ;
 8000f04:	bf00      	nop
}
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000128 	.word	0x20000128
 8000f10:	2000012d 	.word	0x2000012d
 8000f14:	200001c4 	.word	0x200001c4
 8000f18:	58000800 	.word	0x58000800
 8000f1c:	40002800 	.word	0x40002800

08000f20 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000f26:	4b45      	ldr	r3, [pc, #276]	; (800103c <RescheduleTimerList+0x11c>)
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f32:	d107      	bne.n	8000f44 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8000f34:	bf00      	nop
 8000f36:	4b42      	ldr	r3, [pc, #264]	; (8001040 <RescheduleTimerList+0x120>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	f003 0304 	and.w	r3, r3, #4
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d1f8      	bne.n	8000f36 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8000f44:	4b3e      	ldr	r3, [pc, #248]	; (8001040 <RescheduleTimerList+0x120>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	689a      	ldr	r2, [r3, #8]
 8000f4a:	4b3d      	ldr	r3, [pc, #244]	; (8001040 <RescheduleTimerList+0x120>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f52:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000f54:	4b3b      	ldr	r3, [pc, #236]	; (8001044 <RescheduleTimerList+0x124>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000f5a:	7bfa      	ldrb	r2, [r7, #15]
 8000f5c:	493a      	ldr	r1, [pc, #232]	; (8001048 <RescheduleTimerList+0x128>)
 8000f5e:	4613      	mov	r3, r2
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	4413      	add	r3, r2
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	440b      	add	r3, r1
 8000f68:	3308      	adds	r3, #8
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000f6e:	f7ff ff3f 	bl	8000df0 <ReturnTimeElapsed>
 8000f72:	4603      	mov	r3, r0
 8000f74:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000f76:	88fb      	ldrh	r3, [r7, #6]
 8000f78:	68ba      	ldr	r2, [r7, #8]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d205      	bcs.n	8000f8a <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000f82:	4b32      	ldr	r3, [pc, #200]	; (800104c <RescheduleTimerList+0x12c>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	701a      	strb	r2, [r3, #0]
 8000f88:	e04d      	b.n	8001026 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000f8a:	88fb      	ldrh	r3, [r7, #6]
 8000f8c:	4a30      	ldr	r2, [pc, #192]	; (8001050 <RescheduleTimerList+0x130>)
 8000f8e:	8812      	ldrh	r2, [r2, #0]
 8000f90:	b292      	uxth	r2, r2
 8000f92:	4413      	add	r3, r2
 8000f94:	461a      	mov	r2, r3
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d906      	bls.n	8000faa <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000f9c:	4b2c      	ldr	r3, [pc, #176]	; (8001050 <RescheduleTimerList+0x130>)
 8000f9e:	881b      	ldrh	r3, [r3, #0]
 8000fa0:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000fa2:	4b2a      	ldr	r3, [pc, #168]	; (800104c <RescheduleTimerList+0x12c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	701a      	strb	r2, [r3, #0]
 8000fa8:	e03d      	b.n	8001026 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000fb4:	4b25      	ldr	r3, [pc, #148]	; (800104c <RescheduleTimerList+0x12c>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000fba:	e034      	b.n	8001026 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000fbc:	7bfa      	ldrb	r2, [r7, #15]
 8000fbe:	4922      	ldr	r1, [pc, #136]	; (8001048 <RescheduleTimerList+0x128>)
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	4413      	add	r3, r2
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	440b      	add	r3, r1
 8000fca:	3308      	adds	r3, #8
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	88fb      	ldrh	r3, [r7, #6]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d20a      	bcs.n	8000fea <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000fd4:	7bfa      	ldrb	r2, [r7, #15]
 8000fd6:	491c      	ldr	r1, [pc, #112]	; (8001048 <RescheduleTimerList+0x128>)
 8000fd8:	4613      	mov	r3, r2
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	4413      	add	r3, r2
 8000fde:	00db      	lsls	r3, r3, #3
 8000fe0:	440b      	add	r3, r1
 8000fe2:	3308      	adds	r3, #8
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	e013      	b.n	8001012 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000fea:	7bfa      	ldrb	r2, [r7, #15]
 8000fec:	4916      	ldr	r1, [pc, #88]	; (8001048 <RescheduleTimerList+0x128>)
 8000fee:	4613      	mov	r3, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	4413      	add	r3, r2
 8000ff4:	00db      	lsls	r3, r3, #3
 8000ff6:	440b      	add	r3, r1
 8000ff8:	3308      	adds	r3, #8
 8000ffa:	6819      	ldr	r1, [r3, #0]
 8000ffc:	88fb      	ldrh	r3, [r7, #6]
 8000ffe:	7bfa      	ldrb	r2, [r7, #15]
 8001000:	1ac9      	subs	r1, r1, r3
 8001002:	4811      	ldr	r0, [pc, #68]	; (8001048 <RescheduleTimerList+0x128>)
 8001004:	4613      	mov	r3, r2
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	4413      	add	r3, r2
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	4403      	add	r3, r0
 800100e:	3308      	adds	r3, #8
 8001010:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001012:	7bfa      	ldrb	r2, [r7, #15]
 8001014:	490c      	ldr	r1, [pc, #48]	; (8001048 <RescheduleTimerList+0x128>)
 8001016:	4613      	mov	r3, r2
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	4413      	add	r3, r2
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	440b      	add	r3, r1
 8001020:	3315      	adds	r3, #21
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	2b06      	cmp	r3, #6
 800102a:	d1c7      	bne.n	8000fbc <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 800102c:	89bb      	ldrh	r3, [r7, #12]
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff ff1e 	bl	8000e70 <RestartWakeupCounter>

  return ;
 8001034:	bf00      	nop
}
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40002800 	.word	0x40002800
 8001040:	200001c4 	.word	0x200001c4
 8001044:	20000124 	.word	0x20000124
 8001048:	20000094 	.word	0x20000094
 800104c:	2000012c 	.word	0x2000012c
 8001050:	20000132 	.word	0x20000132

08001054 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	; 0x28
 8001058:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800105a:	f3ef 8310 	mrs	r3, PRIMASK
 800105e:	617b      	str	r3, [r7, #20]
  return(result);
 8001060:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001064:	b672      	cpsid	i
}
 8001066:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001068:	4b59      	ldr	r3, [pc, #356]	; (80011d0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	22ca      	movs	r2, #202	; 0xca
 800106e:	625a      	str	r2, [r3, #36]	; 0x24
 8001070:	4b57      	ldr	r3, [pc, #348]	; (80011d0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2253      	movs	r2, #83	; 0x53
 8001076:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001078:	4b55      	ldr	r3, [pc, #340]	; (80011d0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	689a      	ldr	r2, [r3, #8]
 800107e:	4b54      	ldr	r3, [pc, #336]	; (80011d0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001086:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001088:	4b52      	ldr	r3, [pc, #328]	; (80011d4 <HW_TS_RTC_Wakeup_Handler+0x180>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001090:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001094:	4950      	ldr	r1, [pc, #320]	; (80011d8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001096:	4613      	mov	r3, r2
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	4413      	add	r3, r2
 800109c:	00db      	lsls	r3, r3, #3
 800109e:	440b      	add	r3, r1
 80010a0:	330c      	adds	r3, #12
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d16e      	bne.n	8001188 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80010aa:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80010ae:	494a      	ldr	r1, [pc, #296]	; (80011d8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80010b0:	4613      	mov	r3, r2
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	4413      	add	r3, r2
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	440b      	add	r3, r1
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80010be:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80010c2:	4945      	ldr	r1, [pc, #276]	; (80011d8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80010c4:	4613      	mov	r3, r2
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	4413      	add	r3, r2
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	440b      	add	r3, r1
 80010ce:	3310      	adds	r3, #16
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80010d4:	4b41      	ldr	r3, [pc, #260]	; (80011dc <HW_TS_RTC_Wakeup_Handler+0x188>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d04c      	beq.n	8001178 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80010de:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80010e2:	493d      	ldr	r1, [pc, #244]	; (80011d8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80010e4:	4613      	mov	r3, r2
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	4413      	add	r3, r2
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	440b      	add	r3, r1
 80010ee:	330d      	adds	r3, #13
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d124      	bne.n	8001142 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80010f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80010fc:	2101      	movs	r1, #1
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fdf2 	bl	8000ce8 <UnlinkTimer>
 8001104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001106:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	f383 8810 	msr	PRIMASK, r3
}
 800110e:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001110:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001114:	4930      	ldr	r1, [pc, #192]	; (80011d8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001116:	4613      	mov	r3, r2
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	4413      	add	r3, r2
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	440b      	add	r3, r1
 8001120:	3304      	adds	r3, #4
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001128:	4611      	mov	r1, r2
 800112a:	4618      	mov	r0, r3
 800112c:	f000 f9b8 	bl	80014a0 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001130:	4b27      	ldr	r3, [pc, #156]	; (80011d0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	22ca      	movs	r2, #202	; 0xca
 8001136:	625a      	str	r2, [r3, #36]	; 0x24
 8001138:	4b25      	ldr	r3, [pc, #148]	; (80011d0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2253      	movs	r2, #83	; 0x53
 800113e:	625a      	str	r2, [r3, #36]	; 0x24
 8001140:	e012      	b.n	8001168 <HW_TS_RTC_Wakeup_Handler+0x114>
 8001142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001144:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	f383 8810 	msr	PRIMASK, r3
}
 800114c:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800114e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001152:	4618      	mov	r0, r3
 8001154:	f000 f920 	bl	8001398 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001158:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	22ca      	movs	r2, #202	; 0xca
 800115e:	625a      	str	r2, [r3, #36]	; 0x24
 8001160:	4b1b      	ldr	r3, [pc, #108]	; (80011d0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2253      	movs	r2, #83	; 0x53
 8001166:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001168:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800116c:	69fa      	ldr	r2, [r7, #28]
 800116e:	4619      	mov	r1, r3
 8001170:	69b8      	ldr	r0, [r7, #24]
 8001172:	f000 fa1b 	bl	80015ac <HW_TS_RTC_Int_AppNot>
 8001176:	e022      	b.n	80011be <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001178:	f7ff fed2 	bl	8000f20 <RescheduleTimerList>
 800117c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	f383 8810 	msr	PRIMASK, r3
}
 8001186:	e01a      	b.n	80011be <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001188:	bf00      	nop
 800118a:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	f003 0304 	and.w	r3, r3, #4
 8001194:	2b00      	cmp	r3, #0
 8001196:	d0f8      	beq.n	800118a <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001198:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80011a8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80011aa:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80011ac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f383 8810 	msr	PRIMASK, r3
}
 80011bc:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80011be:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	22ff      	movs	r2, #255	; 0xff
 80011c4:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 80011c6:	bf00      	nop
}
 80011c8:	3728      	adds	r7, #40	; 0x28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200001c4 	.word	0x200001c4
 80011d4:	20000124 	.word	0x20000124
 80011d8:	20000094 	.word	0x20000094
 80011dc:	2000012c 	.word	0x2000012c
 80011e0:	58000800 	.word	0x58000800

080011e4 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80011f0:	4b5e      	ldr	r3, [pc, #376]	; (800136c <HW_TS_Init+0x188>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	22ca      	movs	r2, #202	; 0xca
 80011f6:	625a      	str	r2, [r3, #36]	; 0x24
 80011f8:	4b5c      	ldr	r3, [pc, #368]	; (800136c <HW_TS_Init+0x188>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2253      	movs	r2, #83	; 0x53
 80011fe:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001200:	4b5b      	ldr	r3, [pc, #364]	; (8001370 <HW_TS_Init+0x18c>)
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	4a5a      	ldr	r2, [pc, #360]	; (8001370 <HW_TS_Init+0x18c>)
 8001206:	f043 0320 	orr.w	r3, r3, #32
 800120a:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 800120c:	4b58      	ldr	r3, [pc, #352]	; (8001370 <HW_TS_Init+0x18c>)
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	b2db      	uxtb	r3, r3
 8001218:	f1c3 0304 	rsb	r3, r3, #4
 800121c:	b2da      	uxtb	r2, r3
 800121e:	4b55      	ldr	r3, [pc, #340]	; (8001374 <HW_TS_Init+0x190>)
 8001220:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001222:	4b53      	ldr	r3, [pc, #332]	; (8001370 <HW_TS_Init+0x18c>)
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800122a:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 800122e:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	fa92 f2a2 	rbit	r2, r2
 8001236:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001238:	68fa      	ldr	r2, [r7, #12]
 800123a:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800123c:	697a      	ldr	r2, [r7, #20]
 800123e:	2a00      	cmp	r2, #0
 8001240:	d101      	bne.n	8001246 <HW_TS_Init+0x62>
  {
    return 32U;
 8001242:	2220      	movs	r2, #32
 8001244:	e003      	b.n	800124e <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001246:	697a      	ldr	r2, [r7, #20]
 8001248:	fab2 f282 	clz	r2, r2
 800124c:	b2d2      	uxtb	r2, r2
 800124e:	40d3      	lsrs	r3, r2
 8001250:	b2db      	uxtb	r3, r3
 8001252:	3301      	adds	r3, #1
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4b48      	ldr	r3, [pc, #288]	; (8001378 <HW_TS_Init+0x194>)
 8001258:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800125a:	4b45      	ldr	r3, [pc, #276]	; (8001370 <HW_TS_Init+0x18c>)
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	b29b      	uxth	r3, r3
 8001260:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001264:	b29b      	uxth	r3, r3
 8001266:	3301      	adds	r3, #1
 8001268:	b29a      	uxth	r2, r3
 800126a:	4b44      	ldr	r3, [pc, #272]	; (800137c <HW_TS_Init+0x198>)
 800126c:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800126e:	4b43      	ldr	r3, [pc, #268]	; (800137c <HW_TS_Init+0x198>)
 8001270:	881b      	ldrh	r3, [r3, #0]
 8001272:	3b01      	subs	r3, #1
 8001274:	4a40      	ldr	r2, [pc, #256]	; (8001378 <HW_TS_Init+0x194>)
 8001276:	7812      	ldrb	r2, [r2, #0]
 8001278:	fb02 f303 	mul.w	r3, r2, r3
 800127c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001280:	4a3c      	ldr	r2, [pc, #240]	; (8001374 <HW_TS_Init+0x190>)
 8001282:	7812      	ldrb	r2, [r2, #0]
 8001284:	40d3      	lsrs	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800128e:	4293      	cmp	r3, r2
 8001290:	d904      	bls.n	800129c <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001292:	4b3b      	ldr	r3, [pc, #236]	; (8001380 <HW_TS_Init+0x19c>)
 8001294:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001298:	801a      	strh	r2, [r3, #0]
 800129a:	e003      	b.n	80012a4 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	b29a      	uxth	r2, r3
 80012a0:	4b37      	ldr	r3, [pc, #220]	; (8001380 <HW_TS_Init+0x19c>)
 80012a2:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80012a4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80012a8:	f7ff fb9c 	bl	80009e4 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80012ac:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80012b0:	f7ff fb84 	bl	80009bc <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d13d      	bne.n	8001336 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80012ba:	4b32      	ldr	r3, [pc, #200]	; (8001384 <HW_TS_Init+0x1a0>)
 80012bc:	2201      	movs	r2, #1
 80012be:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80012c0:	4b31      	ldr	r3, [pc, #196]	; (8001388 <HW_TS_Init+0x1a4>)
 80012c2:	f04f 32ff 	mov.w	r2, #4294967295
 80012c6:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80012c8:	2300      	movs	r3, #0
 80012ca:	77fb      	strb	r3, [r7, #31]
 80012cc:	e00c      	b.n	80012e8 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80012ce:	7ffa      	ldrb	r2, [r7, #31]
 80012d0:	492e      	ldr	r1, [pc, #184]	; (800138c <HW_TS_Init+0x1a8>)
 80012d2:	4613      	mov	r3, r2
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	4413      	add	r3, r2
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	440b      	add	r3, r1
 80012dc:	330c      	adds	r3, #12
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80012e2:	7ffb      	ldrb	r3, [r7, #31]
 80012e4:	3301      	adds	r3, #1
 80012e6:	77fb      	strb	r3, [r7, #31]
 80012e8:	7ffb      	ldrb	r3, [r7, #31]
 80012ea:	2b05      	cmp	r3, #5
 80012ec:	d9ef      	bls.n	80012ce <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80012ee:	4b28      	ldr	r3, [pc, #160]	; (8001390 <HW_TS_Init+0x1ac>)
 80012f0:	2206      	movs	r2, #6
 80012f2:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 80012f4:	4b1d      	ldr	r3, [pc, #116]	; (800136c <HW_TS_Init+0x188>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	689a      	ldr	r2, [r3, #8]
 80012fa:	4b1c      	ldr	r3, [pc, #112]	; (800136c <HW_TS_Init+0x188>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001302:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001304:	4b19      	ldr	r3, [pc, #100]	; (800136c <HW_TS_Init+0x188>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	b2da      	uxtb	r2, r3
 800130c:	4b17      	ldr	r3, [pc, #92]	; (800136c <HW_TS_Init+0x188>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001314:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001316:	4b1f      	ldr	r3, [pc, #124]	; (8001394 <HW_TS_Init+0x1b0>)
 8001318:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800131c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800131e:	2003      	movs	r0, #3
 8001320:	f001 f90d 	bl	800253e <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001324:	4b11      	ldr	r3, [pc, #68]	; (800136c <HW_TS_Init+0x188>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	689a      	ldr	r2, [r3, #8]
 800132a:	4b10      	ldr	r3, [pc, #64]	; (800136c <HW_TS_Init+0x188>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	e009      	b.n	800134a <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001336:	4b0d      	ldr	r3, [pc, #52]	; (800136c <HW_TS_Init+0x188>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001340:	2b00      	cmp	r3, #0
 8001342:	d002      	beq.n	800134a <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001344:	2003      	movs	r0, #3
 8001346:	f001 f8ec 	bl	8002522 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800134a:	4b08      	ldr	r3, [pc, #32]	; (800136c <HW_TS_Init+0x188>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	22ff      	movs	r2, #255	; 0xff
 8001350:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001352:	2200      	movs	r2, #0
 8001354:	2103      	movs	r1, #3
 8001356:	2003      	movs	r0, #3
 8001358:	f001 f8a1 	bl	800249e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800135c:	2003      	movs	r0, #3
 800135e:	f001 f8b8 	bl	80024d2 <HAL_NVIC_EnableIRQ>

  return;
 8001362:	bf00      	nop
}
 8001364:	3720      	adds	r7, #32
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200001c4 	.word	0x200001c4
 8001370:	40002800 	.word	0x40002800
 8001374:	2000012d 	.word	0x2000012d
 8001378:	2000012e 	.word	0x2000012e
 800137c:	20000130 	.word	0x20000130
 8001380:	20000132 	.word	0x20000132
 8001384:	2000012c 	.word	0x2000012c
 8001388:	20000128 	.word	0x20000128
 800138c:	20000094 	.word	0x20000094
 8001390:	20000124 	.word	0x20000124
 8001394:	58000800 	.word	0x58000800

08001398 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013a2:	f3ef 8310 	mrs	r3, PRIMASK
 80013a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80013a8:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80013aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80013ac:	b672      	cpsid	i
}
 80013ae:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80013b0:	2003      	movs	r0, #3
 80013b2:	f001 f89c 	bl	80024ee <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80013b6:	4b34      	ldr	r3, [pc, #208]	; (8001488 <HW_TS_Stop+0xf0>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	22ca      	movs	r2, #202	; 0xca
 80013bc:	625a      	str	r2, [r3, #36]	; 0x24
 80013be:	4b32      	ldr	r3, [pc, #200]	; (8001488 <HW_TS_Stop+0xf0>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2253      	movs	r2, #83	; 0x53
 80013c4:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80013c6:	79fa      	ldrb	r2, [r7, #7]
 80013c8:	4930      	ldr	r1, [pc, #192]	; (800148c <HW_TS_Stop+0xf4>)
 80013ca:	4613      	mov	r3, r2
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	4413      	add	r3, r2
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	440b      	add	r3, r1
 80013d4:	330c      	adds	r3, #12
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d142      	bne.n	8001464 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff fc80 	bl	8000ce8 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80013e8:	4b29      	ldr	r3, [pc, #164]	; (8001490 <HW_TS_Stop+0xf8>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80013ee:	7cfb      	ldrb	r3, [r7, #19]
 80013f0:	2b06      	cmp	r3, #6
 80013f2:	d12f      	bne.n	8001454 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80013f4:	4b27      	ldr	r3, [pc, #156]	; (8001494 <HW_TS_Stop+0xfc>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001400:	d107      	bne.n	8001412 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001402:	bf00      	nop
 8001404:	4b20      	ldr	r3, [pc, #128]	; (8001488 <HW_TS_Stop+0xf0>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	f003 0304 	and.w	r3, r3, #4
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1f8      	bne.n	8001404 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001412:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <HW_TS_Stop+0xf0>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	689a      	ldr	r2, [r3, #8]
 8001418:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <HW_TS_Stop+0xf0>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001420:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001422:	bf00      	nop
 8001424:	4b18      	ldr	r3, [pc, #96]	; (8001488 <HW_TS_Stop+0xf0>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	f003 0304 	and.w	r3, r3, #4
 800142e:	2b00      	cmp	r3, #0
 8001430:	d0f8      	beq.n	8001424 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <HW_TS_Stop+0xf0>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	b2da      	uxtb	r2, r3
 800143a:	4b13      	ldr	r3, [pc, #76]	; (8001488 <HW_TS_Stop+0xf0>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001442:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001444:	4b14      	ldr	r3, [pc, #80]	; (8001498 <HW_TS_Stop+0x100>)
 8001446:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800144a:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800144c:	2003      	movs	r0, #3
 800144e:	f001 f876 	bl	800253e <HAL_NVIC_ClearPendingIRQ>
 8001452:	e007      	b.n	8001464 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001454:	4b11      	ldr	r3, [pc, #68]	; (800149c <HW_TS_Stop+0x104>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	b2db      	uxtb	r3, r3
 800145a:	7cfa      	ldrb	r2, [r7, #19]
 800145c:	429a      	cmp	r2, r3
 800145e:	d001      	beq.n	8001464 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8001460:	f7ff fd5e 	bl	8000f20 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001464:	4b08      	ldr	r3, [pc, #32]	; (8001488 <HW_TS_Stop+0xf0>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	22ff      	movs	r2, #255	; 0xff
 800146a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800146c:	2003      	movs	r0, #3
 800146e:	f001 f830 	bl	80024d2 <HAL_NVIC_EnableIRQ>
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	f383 8810 	msr	PRIMASK, r3
}
 800147c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800147e:	bf00      	nop
}
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200001c4 	.word	0x200001c4
 800148c:	20000094 	.word	0x20000094
 8001490:	20000124 	.word	0x20000124
 8001494:	40002800 	.word	0x40002800
 8001498:	58000800 	.word	0x58000800
 800149c:	20000125 	.word	0x20000125

080014a0 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	6039      	str	r1, [r7, #0]
 80014aa:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80014ac:	79fa      	ldrb	r2, [r7, #7]
 80014ae:	493b      	ldr	r1, [pc, #236]	; (800159c <HW_TS_Start+0xfc>)
 80014b0:	4613      	mov	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	4413      	add	r3, r2
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	440b      	add	r3, r1
 80014ba:	330c      	adds	r3, #12
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d103      	bne.n	80014cc <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff ff66 	bl	8001398 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014cc:	f3ef 8310 	mrs	r3, PRIMASK
 80014d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80014d2:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80014d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80014d6:	b672      	cpsid	i
}
 80014d8:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80014da:	2003      	movs	r0, #3
 80014dc:	f001 f807 	bl	80024ee <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80014e0:	4b2f      	ldr	r3, [pc, #188]	; (80015a0 <HW_TS_Start+0x100>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	22ca      	movs	r2, #202	; 0xca
 80014e6:	625a      	str	r2, [r3, #36]	; 0x24
 80014e8:	4b2d      	ldr	r3, [pc, #180]	; (80015a0 <HW_TS_Start+0x100>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2253      	movs	r2, #83	; 0x53
 80014ee:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80014f0:	79fa      	ldrb	r2, [r7, #7]
 80014f2:	492a      	ldr	r1, [pc, #168]	; (800159c <HW_TS_Start+0xfc>)
 80014f4:	4613      	mov	r3, r2
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	4413      	add	r3, r2
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	440b      	add	r3, r1
 80014fe:	330c      	adds	r3, #12
 8001500:	2202      	movs	r2, #2
 8001502:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001504:	79fa      	ldrb	r2, [r7, #7]
 8001506:	4925      	ldr	r1, [pc, #148]	; (800159c <HW_TS_Start+0xfc>)
 8001508:	4613      	mov	r3, r2
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	4413      	add	r3, r2
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	440b      	add	r3, r1
 8001512:	3308      	adds	r3, #8
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001518:	79fa      	ldrb	r2, [r7, #7]
 800151a:	4920      	ldr	r1, [pc, #128]	; (800159c <HW_TS_Start+0xfc>)
 800151c:	4613      	mov	r3, r2
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	4413      	add	r3, r2
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	440b      	add	r3, r1
 8001526:	3304      	adds	r3, #4
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fb30 	bl	8000b94 <linkTimer>
 8001534:	4603      	mov	r3, r0
 8001536:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001538:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <HW_TS_Start+0x104>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800153e:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <HW_TS_Start+0x108>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	b2db      	uxtb	r3, r3
 8001544:	7c7a      	ldrb	r2, [r7, #17]
 8001546:	429a      	cmp	r2, r3
 8001548:	d002      	beq.n	8001550 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800154a:	f7ff fce9 	bl	8000f20 <RescheduleTimerList>
 800154e:	e013      	b.n	8001578 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001550:	79fa      	ldrb	r2, [r7, #7]
 8001552:	4912      	ldr	r1, [pc, #72]	; (800159c <HW_TS_Start+0xfc>)
 8001554:	4613      	mov	r3, r2
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	4413      	add	r3, r2
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	440b      	add	r3, r1
 800155e:	3308      	adds	r3, #8
 8001560:	6819      	ldr	r1, [r3, #0]
 8001562:	8a7b      	ldrh	r3, [r7, #18]
 8001564:	79fa      	ldrb	r2, [r7, #7]
 8001566:	1ac9      	subs	r1, r1, r3
 8001568:	480c      	ldr	r0, [pc, #48]	; (800159c <HW_TS_Start+0xfc>)
 800156a:	4613      	mov	r3, r2
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	4413      	add	r3, r2
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	4403      	add	r3, r0
 8001574:	3308      	adds	r3, #8
 8001576:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001578:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <HW_TS_Start+0x100>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	22ff      	movs	r2, #255	; 0xff
 800157e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001580:	2003      	movs	r0, #3
 8001582:	f000 ffa6 	bl	80024d2 <HAL_NVIC_EnableIRQ>
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	f383 8810 	msr	PRIMASK, r3
}
 8001590:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001592:	bf00      	nop
}
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000094 	.word	0x20000094
 80015a0:	200001c4 	.word	0x200001c4
 80015a4:	20000124 	.word	0x20000124
 80015a8:	20000125 	.word	0x20000125

080015ac <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	460b      	mov	r3, r1
 80015b6:	607a      	str	r2, [r7, #4]
 80015b8:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4798      	blx	r3

  return;
 80015be:	bf00      	nop
}
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <LL_RCC_LSE_SetDriveCapability>:
{
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80015ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015d6:	f023 0218 	bic.w	r2, r3, #24
 80015da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <LL_AHB2_GRP1_EnableClock>:
{
 80015f2:	b480      	push	{r7}
 80015f4:	b085      	sub	sp, #20
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80015fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001600:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4313      	orrs	r3, r2
 8001608:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800160a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800160e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4013      	ands	r3, r2
 8001614:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001616:	68fb      	ldr	r3, [r7, #12]
}
 8001618:	bf00      	nop
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001628:	f000 fd58 	bl	80020dc <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 800162c:	f7ff f80e 	bl	800064c <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001630:	f000 f811 	bl	8001656 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001634:	f000 f85b 	bl	80016ee <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001638:	f000 f8ba 	bl	80017b0 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800163c:	f000 f908 	bl	8001850 <MX_GPIO_Init>
  MX_RTC_Init();
 8001640:	f000 f8d2 	bl	80017e8 <MX_RTC_Init>
  MX_I2C1_Init();
 8001644:	f000 f874 	bl	8001730 <MX_I2C1_Init>
  MX_RF_Init();
 8001648:	f000 f8c6 	bl	80017d8 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 800164c:	f7ff f80c 	bl	8000668 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001650:	f7ff f977 	bl	8000942 <MX_APPE_Process>
 8001654:	e7fc      	b.n	8001650 <main+0x2c>

08001656 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b098      	sub	sp, #96	; 0x60
 800165a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800165c:	f107 031c 	add.w	r3, r7, #28
 8001660:	2244      	movs	r2, #68	; 0x44
 8001662:	2100      	movs	r1, #0
 8001664:	4618      	mov	r0, r3
 8001666:	f006 fc9b 	bl	8007fa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800166a:	463b      	mov	r3, r7
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
 8001678:	615a      	str	r2, [r3, #20]
 800167a:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800167c:	f002 f8dc 	bl	8003838 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001680:	2000      	movs	r0, #0
 8001682:	f7ff ffa0 	bl	80015c6 <LL_RCC_LSE_SetDriveCapability>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001686:	2307      	movs	r3, #7
 8001688:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800168a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800168e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001690:	2301      	movs	r3, #1
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001694:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001698:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800169a:	2340      	movs	r3, #64	; 0x40
 800169c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800169e:	2300      	movs	r3, #0
 80016a0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a2:	f107 031c 	add.w	r3, r7, #28
 80016a6:	4618      	mov	r0, r3
 80016a8:	f002 fc84 	bl	8003fb4 <HAL_RCC_OscConfig>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <SystemClock_Config+0x60>
  {
    Error_Handler();
 80016b2:	f000 f981 	bl	80019b8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80016b6:	236f      	movs	r3, #111	; 0x6f
 80016b8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80016ba:	2302      	movs	r3, #2
 80016bc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80016be:	2380      	movs	r3, #128	; 0x80
 80016c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016c6:	2300      	movs	r3, #0
 80016c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80016d2:	463b      	mov	r3, r7
 80016d4:	2101      	movs	r1, #1
 80016d6:	4618      	mov	r0, r3
 80016d8:	f002 ffa2 	bl	8004620 <HAL_RCC_ClockConfig>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80016e2:	f000 f969 	bl	80019b8 <Error_Handler>
  }
}
 80016e6:	bf00      	nop
 80016e8:	3760      	adds	r7, #96	; 0x60
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b08c      	sub	sp, #48	; 0x30
 80016f2:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016f4:	463b      	mov	r3, r7
 80016f6:	2230      	movs	r2, #48	; 0x30
 80016f8:	2100      	movs	r1, #0
 80016fa:	4618      	mov	r0, r3
 80016fc:	f006 fc50 	bl	8007fa0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001700:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001704:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001706:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800170c:	2300      	movs	r3, #0
 800170e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001710:	2310      	movs	r3, #16
 8001712:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001714:	463b      	mov	r3, r7
 8001716:	4618      	mov	r0, r3
 8001718:	f003 fb18 	bl	8004d4c <HAL_RCCEx_PeriphCLKConfig>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001722:	f000 f949 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001726:	bf00      	nop
 8001728:	3730      	adds	r7, #48	; 0x30
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001734:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <MX_I2C1_Init+0x74>)
 8001736:	4a1c      	ldr	r2, [pc, #112]	; (80017a8 <MX_I2C1_Init+0x78>)
 8001738:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800173a:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <MX_I2C1_Init+0x74>)
 800173c:	4a1b      	ldr	r2, [pc, #108]	; (80017ac <MX_I2C1_Init+0x7c>)
 800173e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001740:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <MX_I2C1_Init+0x74>)
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001746:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <MX_I2C1_Init+0x74>)
 8001748:	2201      	movs	r2, #1
 800174a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800174c:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <MX_I2C1_Init+0x74>)
 800174e:	2200      	movs	r2, #0
 8001750:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001752:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <MX_I2C1_Init+0x74>)
 8001754:	2200      	movs	r2, #0
 8001756:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001758:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <MX_I2C1_Init+0x74>)
 800175a:	2200      	movs	r2, #0
 800175c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800175e:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <MX_I2C1_Init+0x74>)
 8001760:	2200      	movs	r2, #0
 8001762:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001764:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <MX_I2C1_Init+0x74>)
 8001766:	2200      	movs	r2, #0
 8001768:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800176a:	480e      	ldr	r0, [pc, #56]	; (80017a4 <MX_I2C1_Init+0x74>)
 800176c:	f001 fa0a 	bl	8002b84 <HAL_I2C_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001776:	f000 f91f 	bl	80019b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800177a:	2100      	movs	r1, #0
 800177c:	4809      	ldr	r0, [pc, #36]	; (80017a4 <MX_I2C1_Init+0x74>)
 800177e:	f001 ff3d 	bl	80035fc <HAL_I2CEx_ConfigAnalogFilter>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001788:	f000 f916 	bl	80019b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800178c:	2100      	movs	r1, #0
 800178e:	4805      	ldr	r0, [pc, #20]	; (80017a4 <MX_I2C1_Init+0x74>)
 8001790:	f001 ff7f 	bl	8003692 <HAL_I2CEx_ConfigDigitalFilter>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800179a:	f000 f90d 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000134 	.word	0x20000134
 80017a8:	40005400 	.word	0x40005400
 80017ac:	00303d5b 	.word	0x00303d5b

080017b0 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <MX_IPCC_Init+0x20>)
 80017b6:	4a07      	ldr	r2, [pc, #28]	; (80017d4 <MX_IPCC_Init+0x24>)
 80017b8:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80017ba:	4805      	ldr	r0, [pc, #20]	; (80017d0 <MX_IPCC_Init+0x20>)
 80017bc:	f001 ffb6 	bl	800372c <HAL_IPCC_Init>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80017c6:	f000 f8f7 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000188 	.word	0x20000188
 80017d4:	58000c00 	.word	0x58000c00

080017d8 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80017ec:	4b16      	ldr	r3, [pc, #88]	; (8001848 <MX_RTC_Init+0x60>)
 80017ee:	4a17      	ldr	r2, [pc, #92]	; (800184c <MX_RTC_Init+0x64>)
 80017f0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80017f2:	4b15      	ldr	r3, [pc, #84]	; (8001848 <MX_RTC_Init+0x60>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80017f8:	4b13      	ldr	r3, [pc, #76]	; (8001848 <MX_RTC_Init+0x60>)
 80017fa:	220f      	movs	r2, #15
 80017fc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80017fe:	4b12      	ldr	r3, [pc, #72]	; (8001848 <MX_RTC_Init+0x60>)
 8001800:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001804:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001806:	4b10      	ldr	r3, [pc, #64]	; (8001848 <MX_RTC_Init+0x60>)
 8001808:	2200      	movs	r2, #0
 800180a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800180c:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <MX_RTC_Init+0x60>)
 800180e:	2200      	movs	r2, #0
 8001810:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001812:	4b0d      	ldr	r3, [pc, #52]	; (8001848 <MX_RTC_Init+0x60>)
 8001814:	2200      	movs	r2, #0
 8001816:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001818:	480b      	ldr	r0, [pc, #44]	; (8001848 <MX_RTC_Init+0x60>)
 800181a:	f003 fb8d 	bl	8004f38 <HAL_RTC_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 8001824:	f000 f8c8 	bl	80019b8 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0xFFFF, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001828:	2200      	movs	r2, #0
 800182a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800182e:	4806      	ldr	r0, [pc, #24]	; (8001848 <MX_RTC_Init+0x60>)
 8001830:	f003 fc82 	bl	8005138 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_RTC_Init+0x56>
  {
    Error_Handler();
 800183a:	f000 f8bd 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800183e:	4802      	ldr	r0, [pc, #8]	; (8001848 <MX_RTC_Init+0x60>)
 8001840:	f003 fd36 	bl	80052b0 <HAL_RTCEx_DeactivateWakeUpTimer>
  /* USER CODE END RTC_Init 2 */

}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}
 8001848:	200001c4 	.word	0x200001c4
 800184c:	40002800 	.word	0x40002800

08001850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001856:	1d3b      	adds	r3, r7, #4
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001864:	2004      	movs	r0, #4
 8001866:	f7ff fec4 	bl	80015f2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800186a:	2080      	movs	r0, #128	; 0x80
 800186c:	f7ff fec1 	bl	80015f2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001870:	2002      	movs	r0, #2
 8001872:	f7ff febe 	bl	80015f2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001876:	2001      	movs	r0, #1
 8001878:	f7ff febb 	bl	80015f2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800187c:	2010      	movs	r0, #16
 800187e:	f7ff feb8 	bl	80015f2 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001882:	2308      	movs	r3, #8
 8001884:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001886:	2303      	movs	r3, #3
 8001888:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	4619      	mov	r1, r3
 8001892:	4823      	ldr	r0, [pc, #140]	; (8001920 <MX_GPIO_Init+0xd0>)
 8001894:	f000 ffd2 	bl	800283c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA13 PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001898:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800189c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800189e:	2303      	movs	r3, #3
 80018a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a6:	1d3b      	adds	r3, r7, #4
 80018a8:	4619      	mov	r1, r3
 80018aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ae:	f000 ffc5 	bl	800283c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB0 PB1 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 80018b2:	230f      	movs	r3, #15
 80018b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018b6:	2303      	movs	r3, #3
 80018b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018be:	1d3b      	adds	r3, r7, #4
 80018c0:	4619      	mov	r1, r3
 80018c2:	4818      	ldr	r0, [pc, #96]	; (8001924 <MX_GPIO_Init+0xd4>)
 80018c4:	f000 ffba 	bl	800283c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018c8:	2310      	movs	r3, #16
 80018ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018cc:	2303      	movs	r3, #3
 80018ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018d4:	1d3b      	adds	r3, r7, #4
 80018d6:	4619      	mov	r1, r3
 80018d8:	4813      	ldr	r0, [pc, #76]	; (8001928 <MX_GPIO_Init+0xd8>)
 80018da:	f000 ffaf 	bl	800283c <HAL_GPIO_Init>

  /*Configure GPIO pins : Data_Ready_1_Pin Data_Ready_2_Pin Data_Ready_3_Pin Data_Ready_4_Pin */
  GPIO_InitStruct.Pin = Data_Ready_1_Pin|Data_Ready_2_Pin|Data_Ready_3_Pin|Data_Ready_4_Pin;
 80018de:	23f0      	movs	r3, #240	; 0xf0
 80018e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018e2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80018e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ec:	1d3b      	adds	r3, r7, #4
 80018ee:	4619      	mov	r1, r3
 80018f0:	480c      	ldr	r0, [pc, #48]	; (8001924 <MX_GPIO_Init+0xd4>)
 80018f2:	f000 ffa3 	bl	800283c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 15, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	210f      	movs	r1, #15
 80018fa:	200a      	movs	r0, #10
 80018fc:	f000 fdcf 	bl	800249e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001900:	200a      	movs	r0, #10
 8001902:	f000 fde6 	bl	80024d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 12, 0);
 8001906:	2200      	movs	r2, #0
 8001908:	210c      	movs	r1, #12
 800190a:	2017      	movs	r0, #23
 800190c:	f000 fdc7 	bl	800249e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001910:	2017      	movs	r0, #23
 8001912:	f000 fdde 	bl	80024d2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001916:	bf00      	nop
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	48001c00 	.word	0x48001c00
 8001924:	48000400 	.word	0x48000400
 8001928:	48001000 	.word	0x48001000

0800192c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Data_Ready_1_Pin) {
 8001936:	88fb      	ldrh	r3, [r7, #6]
 8001938:	2b10      	cmp	r3, #16
 800193a:	d10b      	bne.n	8001954 <HAL_GPIO_EXTI_Callback+0x28>
		SystemClock_Config ();
 800193c:	f7ff fe8b 	bl	8001656 <SystemClock_Config>
		HAL_ResumeTick();
 8001940:	f000 fc62 	bl	8002208 <HAL_ResumeTick>
		deviceToBeRead = 1;
 8001944:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <HAL_GPIO_EXTI_Callback+0x88>)
 8001946:	2201      	movs	r2, #1
 8001948:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1<<CFG_TASK_UPDATE_TEMP, CFG_SCH_PRIO_0);
 800194a:	2100      	movs	r1, #0
 800194c:	2008      	movs	r0, #8
 800194e:	f006 fa07 	bl	8007d60 <UTIL_SEQ_SetTask>
		SystemClock_Config ();
		HAL_ResumeTick();
		deviceToBeRead = 4;
		UTIL_SEQ_SetTask(1<<CFG_TASK_UPDATE_TEMP, CFG_SCH_PRIO_0);
	}
}
 8001952:	e02b      	b.n	80019ac <HAL_GPIO_EXTI_Callback+0x80>
	else if(GPIO_Pin == Data_Ready_2_Pin) {
 8001954:	88fb      	ldrh	r3, [r7, #6]
 8001956:	2b20      	cmp	r3, #32
 8001958:	d10b      	bne.n	8001972 <HAL_GPIO_EXTI_Callback+0x46>
		SystemClock_Config ();
 800195a:	f7ff fe7c 	bl	8001656 <SystemClock_Config>
		HAL_ResumeTick();
 800195e:	f000 fc53 	bl	8002208 <HAL_ResumeTick>
		deviceToBeRead = 2;
 8001962:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <HAL_GPIO_EXTI_Callback+0x88>)
 8001964:	2202      	movs	r2, #2
 8001966:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1<<CFG_TASK_UPDATE_TEMP, CFG_SCH_PRIO_0);
 8001968:	2100      	movs	r1, #0
 800196a:	2008      	movs	r0, #8
 800196c:	f006 f9f8 	bl	8007d60 <UTIL_SEQ_SetTask>
}
 8001970:	e01c      	b.n	80019ac <HAL_GPIO_EXTI_Callback+0x80>
	else if(GPIO_Pin == Data_Ready_3_Pin) {
 8001972:	88fb      	ldrh	r3, [r7, #6]
 8001974:	2b40      	cmp	r3, #64	; 0x40
 8001976:	d10b      	bne.n	8001990 <HAL_GPIO_EXTI_Callback+0x64>
		SystemClock_Config ();
 8001978:	f7ff fe6d 	bl	8001656 <SystemClock_Config>
		HAL_ResumeTick();
 800197c:	f000 fc44 	bl	8002208 <HAL_ResumeTick>
		deviceToBeRead = 3;
 8001980:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <HAL_GPIO_EXTI_Callback+0x88>)
 8001982:	2203      	movs	r2, #3
 8001984:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1<<CFG_TASK_UPDATE_TEMP, CFG_SCH_PRIO_0);
 8001986:	2100      	movs	r1, #0
 8001988:	2008      	movs	r0, #8
 800198a:	f006 f9e9 	bl	8007d60 <UTIL_SEQ_SetTask>
}
 800198e:	e00d      	b.n	80019ac <HAL_GPIO_EXTI_Callback+0x80>
	else if(GPIO_Pin == Data_Ready_4_Pin) {
 8001990:	88fb      	ldrh	r3, [r7, #6]
 8001992:	2b80      	cmp	r3, #128	; 0x80
 8001994:	d10a      	bne.n	80019ac <HAL_GPIO_EXTI_Callback+0x80>
		SystemClock_Config ();
 8001996:	f7ff fe5e 	bl	8001656 <SystemClock_Config>
		HAL_ResumeTick();
 800199a:	f000 fc35 	bl	8002208 <HAL_ResumeTick>
		deviceToBeRead = 4;
 800199e:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <HAL_GPIO_EXTI_Callback+0x88>)
 80019a0:	2204      	movs	r2, #4
 80019a2:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1<<CFG_TASK_UPDATE_TEMP, CFG_SCH_PRIO_0);
 80019a4:	2100      	movs	r1, #0
 80019a6:	2008      	movs	r0, #8
 80019a8:	f006 f9da 	bl	8007d60 <UTIL_SEQ_SetTask>
}
 80019ac:	bf00      	nop
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	200001e8 	.word	0x200001e8

080019b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80019bc:	b672      	cpsid	i
}
 80019be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <Error_Handler+0x8>
	...

080019c4 <LL_PWR_SetPowerMode>:
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 80019cc:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <LL_PWR_SetPowerMode+0x24>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f023 0207 	bic.w	r2, r3, #7
 80019d4:	4904      	ldr	r1, [pc, #16]	; (80019e8 <LL_PWR_SetPowerMode+0x24>)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4313      	orrs	r3, r2
 80019da:	600b      	str	r3, [r1, #0]
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	58000400 	.word	0x58000400

080019ec <LL_PWR_ClearFlag_WU>:
  * @brief  Clear Wake-up Flags
  * @rmtoll SCR          CWUF          LL_PWR_ClearFlag_WU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF);
 80019f0:	4b03      	ldr	r3, [pc, #12]	; (8001a00 <LL_PWR_ClearFlag_WU+0x14>)
 80019f2:	2209      	movs	r2, #9
 80019f4:	619a      	str	r2, [r3, #24]
}
 80019f6:	bf00      	nop
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	58000400 	.word	0x58000400

08001a04 <LL_PWR_IsActiveFlag_C2SB>:
  * @brief  System standby flag for CPU2
  * @rmtoll EXTSCR       C2SBF         LL_PWR_IsActiveFlag_C2SB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2SB(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2SBF) == (PWR_EXTSCR_C2SBF)) ? 1UL : 0UL);
 8001a08:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <LL_PWR_IsActiveFlag_C2SB+0x24>)
 8001a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a16:	d101      	bne.n	8001a1c <LL_PWR_IsActiveFlag_C2SB+0x18>
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e000      	b.n	8001a1e <LL_PWR_IsActiveFlag_C2SB+0x1a>
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	58000400 	.word	0x58000400

08001a2c <LL_PWR_IsActiveFlag_C2DS>:
  * @brief  Get deepsleep mode for CPU2
  * @rmtoll EXTSCR       C2DS          LL_PWR_IsActiveFlag_C2DS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2DS(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2DS) == (PWR_EXTSCR_C2DS)) ? 1UL : 0UL);
 8001a30:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <LL_PWR_IsActiveFlag_C2DS+0x24>)
 8001a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a3e:	d101      	bne.n	8001a44 <LL_PWR_IsActiveFlag_C2DS+0x18>
 8001a40:	2301      	movs	r3, #1
 8001a42:	e000      	b.n	8001a46 <LL_PWR_IsActiveFlag_C2DS+0x1a>
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	58000400 	.word	0x58000400

08001a54 <LL_RCC_HSI_Enable>:
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a66:	6013      	str	r3, [r2, #0]
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <LL_RCC_HSI_IsReady>:
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a84:	d101      	bne.n	8001a8a <LL_RCC_HSI_IsReady+0x18>
 8001a86:	2301      	movs	r3, #1
 8001a88:	e000      	b.n	8001a8c <LL_RCC_HSI_IsReady+0x1a>
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <LL_RCC_SetSysClkSource>:
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f023 0203 	bic.w	r2, r3, #3
 8001aa8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	608b      	str	r3, [r1, #8]
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <LL_RCC_GetSysClkSource>:
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 030c 	and.w	r3, r3, #12
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <LL_RCC_SetSMPSClockSource>:
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8001ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae4:	f023 0203 	bic.w	r2, r3, #3
 8001ae8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <LL_RCC_ClearResetFlags>:
  * @brief  Set RMVF bit to clear the reset flags.
  * @rmtoll CSR          RMVF          LL_RCC_ClearResetFlags
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ClearResetFlags(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8001b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b0e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001b16:	bf00      	nop
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001b24:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <LL_LPM_EnableSleep+0x1c>)
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	4a04      	ldr	r2, [pc, #16]	; (8001b3c <LL_LPM_EnableSleep+0x1c>)
 8001b2a:	f023 0304 	bic.w	r3, r3, #4
 8001b2e:	6113      	str	r3, [r2, #16]
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001b44:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <LL_LPM_EnableDeepSleep+0x1c>)
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	4a04      	ldr	r2, [pc, #16]	; (8001b5c <LL_LPM_EnableDeepSleep+0x1c>)
 8001b4a:	f043 0304 	orr.w	r3, r3, #4
 8001b4e:	6113      	str	r3, [r2, #16]
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	3220      	adds	r2, #32
 8001b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b74:	4a05      	ldr	r2, [pc, #20]	; (8001b8c <LL_HSEM_1StepLock+0x2c>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d001      	beq.n	8001b7e <LL_HSEM_1StepLock+0x1e>
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e000      	b.n	8001b80 <LL_HSEM_1StepLock+0x20>
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	80000400 	.word	0x80000400

08001b90 <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	68ba      	ldr	r2, [r7, #8]
 8001ba6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001baa:	bf00      	nop
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode(void)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	af00      	add	r7, sp, #0
/* USER CODE END PWR_EnterOffMode_1 */
  /**
   * The systick should be disabled for the same reason than when the device enters stop mode because
   * at this time, the device may enter either OffMode or StopMode.
   */
  HAL_SuspendTick();
 8001bba:	f000 fb15 	bl	80021e8 <HAL_SuspendTick>
  __HAL_RCC_CLEAR_RESET_FLAGS();
 8001bbe:	f7ff ff9e 	bl	8001afe <LL_RCC_ClearResetFlags>

  EnterLowPower();
 8001bc2:	f000 f835 	bl	8001c30 <EnterLowPower>
   * in critical section. If an interrupt occurs while in that critical section before that point,
   * the flag is set and will be cleared here but the system will not enter Off Mode
   * because an interrupt is pending in the NVIC. The ISR will be executed when moving out
   * of this critical section
   */
  LL_PWR_ClearFlag_WU();
 8001bc6:	f7ff ff11 	bl	80019ec <LL_PWR_ClearFlag_WU>

  LL_PWR_SetPowerMode(LL_PWR_MODE_STANDBY);
 8001bca:	2003      	movs	r0, #3
 8001bcc:	f7ff fefa 	bl	80019c4 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8001bd0:	f7ff ffb6 	bl	8001b40 <LL_LPM_EnableDeepSleep>
#endif

/* USER CODE BEGIN PWR_EnterOffMode_2 */

/* USER CODE END PWR_EnterOffMode_2 */
  return;
 8001bd4:	bf00      	nop
}
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  }
#endif
/* USER CODE BEGIN PWR_ExitOffMode_2 */

/* USER CODE END PWR_ExitOffMode_2 */
  return;
 8001bdc:	bf00      	nop
}
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode(void)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	af00      	add	r7, sp, #0
   *
   * When in production, the HAL_DBGMCU_EnableDBGStopMode() is not called so that the device can reach best power consumption
   * However, the systick should be disabled anyway to avoid the case when it is about to expire at the same time the device enters
   * stop mode (this will abort the Stop Mode entry).
   */
  HAL_SuspendTick();
 8001bea:	f000 fafd 	bl	80021e8 <HAL_SuspendTick>

  /**
   * This function is called from CRITICAL SECTION
   */
  EnterLowPower();
 8001bee:	f000 f81f 	bl	8001c30 <EnterLowPower>

  /************************************************************************************
   * ENTER STOP MODE
   ***********************************************************************************/
  LL_PWR_SetPowerMode(LL_PWR_MODE_STOP1);
 8001bf2:	2001      	movs	r0, #1
 8001bf4:	f7ff fee6 	bl	80019c4 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8001bf8:	f7ff ffa2 	bl	8001b40 <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 8001bfc:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterStopMode_2 */

/* USER CODE END PWR_EnterStopMode_2 */
  return;
 8001bfe:	bf00      	nop
}
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode(void)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	af00      	add	r7, sp, #0

/* USER CODE END PWR_ExitStopMode_1 */
  /**
   * This function is called from CRITICAL SECTION
   */
  ExitLowPower();
 8001c06:	f000 f84f 	bl	8001ca8 <ExitLowPower>

  HAL_ResumeTick();
 8001c0a:	f000 fafd 	bl	8002208 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitStopMode_2 */

/* USER CODE END PWR_ExitStopMode_2 */
  return;
 8001c0e:	bf00      	nop
}
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode(void)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode_1 */

/* USER CODE END PWR_EnterSleepMode_1 */

  HAL_SuspendTick();
 8001c16:	f000 fae7 	bl	80021e8 <HAL_SuspendTick>

  /************************************************************************************
   * ENTER SLEEP MODE
   ***********************************************************************************/
  LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001c1a:	f7ff ff81 	bl	8001b20 <LL_LPM_EnableSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 8001c1e:	bf30      	wfi
/* USER CODE BEGIN PWR_EnterSleepMode_2 */

/* USER CODE END PWR_EnterSleepMode_2 */
  return;
 8001c20:	bf00      	nop
}
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode_1 */

/* USER CODE END PWR_ExitSleepMode_1 */
  HAL_ResumeTick();
 8001c28:	f000 faee 	bl	8002208 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitSleepMode_2 */

/* USER CODE END PWR_ExitSleepMode_2 */
  return;
 8001c2c:	bf00      	nop
}
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <EnterLowPower>:
  * @brief Setup the system to enter either stop or off mode
  * @param none
  * @retval none
  */
static void EnterLowPower(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /**
   * This function is called from CRITICAL SECTION
   */

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8001c34:	bf00      	nop
 8001c36:	2103      	movs	r1, #3
 8001c38:	4819      	ldr	r0, [pc, #100]	; (8001ca0 <EnterLowPower+0x70>)
 8001c3a:	f7ff ff91 	bl	8001b60 <LL_HSEM_1StepLock>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d1f8      	bne.n	8001c36 <EnterLowPower+0x6>

  if (! LL_HSEM_1StepLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID))
 8001c44:	2104      	movs	r1, #4
 8001c46:	4816      	ldr	r0, [pc, #88]	; (8001ca0 <EnterLowPower+0x70>)
 8001c48:	f7ff ff8a 	bl	8001b60 <LL_HSEM_1StepLock>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d117      	bne.n	8001c82 <EnterLowPower+0x52>
  {
    if(LL_PWR_IsActiveFlag_C2DS() || LL_PWR_IsActiveFlag_C2SB())
 8001c52:	f7ff feeb 	bl	8001a2c <LL_PWR_IsActiveFlag_C2DS>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d104      	bne.n	8001c66 <EnterLowPower+0x36>
 8001c5c:	f7ff fed2 	bl	8001a04 <LL_PWR_IsActiveFlag_C2SB>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d015      	beq.n	8001c92 <EnterLowPower+0x62>
    {
      /* Release ENTRY_STOP_MODE semaphore */
      LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 8001c66:	2200      	movs	r2, #0
 8001c68:	2104      	movs	r1, #4
 8001c6a:	480d      	ldr	r0, [pc, #52]	; (8001ca0 <EnterLowPower+0x70>)
 8001c6c:	f7ff ff90 	bl	8001b90 <LL_HSEM_ReleaseLock>

      Switch_On_HSI();
 8001c70:	f000 f834 	bl	8001cdc <Switch_On_HSI>
      __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8001c74:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <EnterLowPower+0x74>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a0a      	ldr	r2, [pc, #40]	; (8001ca4 <EnterLowPower+0x74>)
 8001c7a:	f023 0307 	bic.w	r3, r3, #7
 8001c7e:	6013      	str	r3, [r2, #0]
 8001c80:	e007      	b.n	8001c92 <EnterLowPower+0x62>
    }
  }
  else
  {
    Switch_On_HSI();
 8001c82:	f000 f82b 	bl	8001cdc <Switch_On_HSI>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8001c86:	4b07      	ldr	r3, [pc, #28]	; (8001ca4 <EnterLowPower+0x74>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a06      	ldr	r2, [pc, #24]	; (8001ca4 <EnterLowPower+0x74>)
 8001c8c:	f023 0307 	bic.w	r3, r3, #7
 8001c90:	6013      	str	r3, [r2, #0]
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8001c92:	2200      	movs	r2, #0
 8001c94:	2103      	movs	r1, #3
 8001c96:	4802      	ldr	r0, [pc, #8]	; (8001ca0 <EnterLowPower+0x70>)
 8001c98:	f7ff ff7a 	bl	8001b90 <LL_HSEM_ReleaseLock>

  return;
 8001c9c:	bf00      	nop
}
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	58001400 	.word	0x58001400
 8001ca4:	58004000 	.word	0x58004000

08001ca8 <ExitLowPower>:
  * @brief Restore the system to exit stop mode
  * @param none
  * @retval none
  */
static void ExitLowPower(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* Release ENTRY_STOP_MODE semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 8001cac:	2200      	movs	r2, #0
 8001cae:	2104      	movs	r1, #4
 8001cb0:	4809      	ldr	r0, [pc, #36]	; (8001cd8 <ExitLowPower+0x30>)
 8001cb2:	f7ff ff6d 	bl	8001b90 <LL_HSEM_ReleaseLock>

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8001cb6:	bf00      	nop
 8001cb8:	2103      	movs	r1, #3
 8001cba:	4807      	ldr	r0, [pc, #28]	; (8001cd8 <ExitLowPower+0x30>)
 8001cbc:	f7ff ff50 	bl	8001b60 <LL_HSEM_1StepLock>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f8      	bne.n	8001cb8 <ExitLowPower+0x10>

  if(LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001cc6:	f7ff fefa 	bl	8001abe <LL_RCC_GetSysClkSource>

  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
#endif

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2103      	movs	r1, #3
 8001cce:	4802      	ldr	r0, [pc, #8]	; (8001cd8 <ExitLowPower+0x30>)
 8001cd0:	f7ff ff5e 	bl	8001b90 <LL_HSEM_ReleaseLock>

  return;
 8001cd4:	bf00      	nop
}
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	58001400 	.word	0x58001400

08001cdc <Switch_On_HSI>:
  * @brief Switch the system clock on HSI
  * @param none
  * @retval none
  */
static void Switch_On_HSI(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  LL_RCC_HSI_Enable();
 8001ce0:	f7ff feb8 	bl	8001a54 <LL_RCC_HSI_Enable>
  while(!LL_RCC_HSI_IsReady());
 8001ce4:	bf00      	nop
 8001ce6:	f7ff fec4 	bl	8001a72 <LL_RCC_HSI_IsReady>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0fa      	beq.n	8001ce6 <Switch_On_HSI+0xa>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	f7ff fed0 	bl	8001a96 <LL_RCC_SetSysClkSource>
  LL_RCC_SetSMPSClockSource(LL_RCC_SMPS_CLKSOURCE_HSI);
 8001cf6:	2000      	movs	r0, #0
 8001cf8:	f7ff feed 	bl	8001ad6 <LL_RCC_SetSMPSClockSource>
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 8001cfc:	bf00      	nop
 8001cfe:	f7ff fede 	bl	8001abe <LL_RCC_GetSysClkSource>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b04      	cmp	r3, #4
 8001d06:	d1fa      	bne.n	8001cfe <Switch_On_HSI+0x22>
  return;
 8001d08:	bf00      	nop
}
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <LL_RCC_EnableRTC>:
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <LL_AHB2_GRP1_EnableClock>:
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b085      	sub	sp, #20
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d52:	68fb      	ldr	r3, [r7, #12]
}
 8001d54:	bf00      	nop
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <LL_AHB3_GRP1_EnableClock>:
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001d68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4013      	ands	r3, r2
 8001d82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d84:	68fb      	ldr	r3, [r7, #12]
}
 8001d86:	bf00      	nop
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b085      	sub	sp, #20
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001d9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d9e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001da0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4013      	ands	r3, r2
 8001db4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001db6:	68fb      	ldr	r3, [r7, #12]
}
 8001db8:	bf00      	nop
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001dc8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001dcc:	f7ff ffc8 	bl	8001d60 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	202e      	movs	r0, #46	; 0x2e
 8001dd6:	f000 fb62 	bl	800249e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001dda:	202e      	movs	r0, #46	; 0x2e
 8001ddc:	f000 fb79 	bl	80024d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001de0:	bf00      	nop
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b094      	sub	sp, #80	; 0x50
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dfc:	f107 030c 	add.w	r3, r7, #12
 8001e00:	2230      	movs	r2, #48	; 0x30
 8001e02:	2100      	movs	r1, #0
 8001e04:	4618      	mov	r0, r3
 8001e06:	f006 f8cb 	bl	8007fa0 <memset>
  if(hi2c->Instance==I2C1)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a17      	ldr	r2, [pc, #92]	; (8001e6c <HAL_I2C_MspInit+0x88>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d126      	bne.n	8001e62 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e14:	2304      	movs	r3, #4
 8001e16:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001e18:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001e1c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e1e:	f107 030c 	add.w	r3, r7, #12
 8001e22:	4618      	mov	r0, r3
 8001e24:	f002 ff92 	bl	8004d4c <HAL_RCCEx_PeriphCLKConfig>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001e2e:	f7ff fdc3 	bl	80019b8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e32:	2002      	movs	r0, #2
 8001e34:	f7ff ff7b 	bl	8001d2e <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e38:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e3e:	2312      	movs	r3, #18
 8001e40:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e46:	2300      	movs	r3, #0
 8001e48:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e4a:	2304      	movs	r3, #4
 8001e4c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e52:	4619      	mov	r1, r3
 8001e54:	4806      	ldr	r0, [pc, #24]	; (8001e70 <HAL_I2C_MspInit+0x8c>)
 8001e56:	f000 fcf1 	bl	800283c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e5a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001e5e:	f7ff ff98 	bl	8001d92 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e62:	bf00      	nop
 8001e64:	3750      	adds	r7, #80	; 0x50
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40005400 	.word	0x40005400
 8001e70:	48000400 	.word	0x48000400

08001e74 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a0d      	ldr	r2, [pc, #52]	; (8001eb8 <HAL_IPCC_MspInit+0x44>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d113      	bne.n	8001eae <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001e86:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001e8a:	f7ff ff69 	bl	8001d60 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2100      	movs	r1, #0
 8001e92:	202c      	movs	r0, #44	; 0x2c
 8001e94:	f000 fb03 	bl	800249e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001e98:	202c      	movs	r0, #44	; 0x2c
 8001e9a:	f000 fb1a 	bl	80024d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	202d      	movs	r0, #45	; 0x2d
 8001ea4:	f000 fafb 	bl	800249e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001ea8:	202d      	movs	r0, #45	; 0x2d
 8001eaa:	f000 fb12 	bl	80024d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	58000c00 	.word	0x58000c00

08001ebc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08e      	sub	sp, #56	; 0x38
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ec4:	f107 0308 	add.w	r3, r7, #8
 8001ec8:	2230      	movs	r2, #48	; 0x30
 8001eca:	2100      	movs	r1, #0
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f006 f867 	bl	8007fa0 <memset>
  if(hrtc->Instance==RTC)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a12      	ldr	r2, [pc, #72]	; (8001f20 <HAL_RTC_MspInit+0x64>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d11d      	bne.n	8001f18 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001edc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ee0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001ee2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ee6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ee8:	f107 0308 	add.w	r3, r7, #8
 8001eec:	4618      	mov	r0, r3
 8001eee:	f002 ff2d 	bl	8004d4c <HAL_RCCEx_PeriphCLKConfig>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001ef8:	f7ff fd5e 	bl	80019b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001efc:	f7ff ff06 	bl	8001d0c <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001f00:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001f04:	f7ff ff45 	bl	8001d92 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 15, 0);
 8001f08:	2200      	movs	r2, #0
 8001f0a:	210f      	movs	r1, #15
 8001f0c:	2003      	movs	r0, #3
 8001f0e:	f000 fac6 	bl	800249e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001f12:	2003      	movs	r0, #3
 8001f14:	f000 fadd 	bl	80024d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001f18:	bf00      	nop
 8001f1a:	3738      	adds	r7, #56	; 0x38
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40002800 	.word	0x40002800

08001f24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f28:	e7fe      	b.n	8001f28 <NMI_Handler+0x4>

08001f2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f2e:	e7fe      	b.n	8001f2e <HardFault_Handler+0x4>

08001f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f34:	e7fe      	b.n	8001f34 <MemManage_Handler+0x4>

08001f36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f3a:	e7fe      	b.n	8001f3a <BusFault_Handler+0x4>

08001f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f40:	e7fe      	b.n	8001f40 <UsageFault_Handler+0x4>

08001f42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f54:	bf00      	nop
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f62:	bf00      	nop
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f70:	f000 f90e 	bl	8002190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f74:	bf00      	nop
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001f7c:	f7ff f86a 	bl	8001054 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001f80:	bf00      	nop
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Data_Ready_1_Pin);
 8001f88:	2010      	movs	r0, #16
 8001f8a:	f000 fdbf 	bl	8002b0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Data_Ready_2_Pin);
 8001f96:	2020      	movs	r0, #32
 8001f98:	f000 fdb8 	bl	8002b0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Data_Ready_3_Pin);
 8001f9c:	2040      	movs	r0, #64	; 0x40
 8001f9e:	f000 fdb5 	bl	8002b0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Data_Ready_4_Pin);
 8001fa2:	2080      	movs	r0, #128	; 0x80
 8001fa4:	f000 fdb2 	bl	8002b0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001fa8:	bf00      	nop
 8001faa:	bd80      	pop	{r7, pc}

08001fac <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001fb0:	f005 fc02 	bl	80077b8 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001fb4:	bf00      	nop
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001fbc:	f005 fc32 	bl	8007824 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001fc0:	bf00      	nop
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001fc8:	f000 fdb8 	bl	8002b3c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001fcc:	bf00      	nop
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001fd4:	4b22      	ldr	r3, [pc, #136]	; (8002060 <SystemInit+0x90>)
 8001fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fda:	4a21      	ldr	r2, [pc, #132]	; (8002060 <SystemInit+0x90>)
 8001fdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fe0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fee:	f043 0301 	orr.w	r3, r3, #1
 8001ff2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001ffc:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002008:	4b16      	ldr	r3, [pc, #88]	; (8002064 <SystemInit+0x94>)
 800200a:	4013      	ands	r3, r2
 800200c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800200e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002012:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002016:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800201a:	f023 0305 	bic.w	r3, r3, #5
 800201e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002026:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800202a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800202e:	f023 0301 	bic.w	r3, r3, #1
 8002032:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800203a:	4a0b      	ldr	r2, [pc, #44]	; (8002068 <SystemInit+0x98>)
 800203c:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800203e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002048:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800204c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800204e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002052:	2200      	movs	r2, #0
 8002054:	619a      	str	r2, [r3, #24]
}
 8002056:	bf00      	nop
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	e000ed00 	.word	0xe000ed00
 8002064:	faf6fefb 	.word	0xfaf6fefb
 8002068:	22041000 	.word	0x22041000

0800206c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800206c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800206e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002070:	3304      	adds	r3, #4

08002072 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002072:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002074:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002076:	d3f9      	bcc.n	800206c <CopyDataInit>
  bx lr
 8002078:	4770      	bx	lr

0800207a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800207a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800207c:	3004      	adds	r0, #4

0800207e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800207e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002080:	d3fb      	bcc.n	800207a <FillZerobss>
  bx lr
 8002082:	4770      	bx	lr

08002084 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002084:	480c      	ldr	r0, [pc, #48]	; (80020b8 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002086:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002088:	f7ff ffa2 	bl	8001fd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800208c:	480b      	ldr	r0, [pc, #44]	; (80020bc <LoopForever+0x8>)
 800208e:	490c      	ldr	r1, [pc, #48]	; (80020c0 <LoopForever+0xc>)
 8002090:	4a0c      	ldr	r2, [pc, #48]	; (80020c4 <LoopForever+0x10>)
 8002092:	2300      	movs	r3, #0
 8002094:	f7ff ffed 	bl	8002072 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002098:	480b      	ldr	r0, [pc, #44]	; (80020c8 <LoopForever+0x14>)
 800209a:	490c      	ldr	r1, [pc, #48]	; (80020cc <LoopForever+0x18>)
 800209c:	2300      	movs	r3, #0
 800209e:	f7ff ffee 	bl	800207e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80020a2:	480b      	ldr	r0, [pc, #44]	; (80020d0 <LoopForever+0x1c>)
 80020a4:	490b      	ldr	r1, [pc, #44]	; (80020d4 <LoopForever+0x20>)
 80020a6:	2300      	movs	r3, #0
 80020a8:	f7ff ffe9 	bl	800207e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80020ac:	f005 ff80 	bl	8007fb0 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80020b0:	f7ff fab8 	bl	8001624 <main>

080020b4 <LoopForever>:

LoopForever:
  b LoopForever
 80020b4:	e7fe      	b.n	80020b4 <LoopForever>
 80020b6:	0000      	.short	0x0000
  ldr   r0, =_estack
 80020b8:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 80020bc:	20000004 	.word	0x20000004
 80020c0:	20000024 	.word	0x20000024
 80020c4:	080082c8 	.word	0x080082c8
  INIT_BSS _sbss, _ebss
 80020c8:	20000070 	.word	0x20000070
 80020cc:	20000340 	.word	0x20000340
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80020d0:	200301e4 	.word	0x200301e4
 80020d4:	20030a67 	.word	0x20030a67

080020d8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020d8:	e7fe      	b.n	80020d8 <ADC1_IRQHandler>
	...

080020dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020e2:	2300      	movs	r3, #0
 80020e4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020e6:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <HAL_Init+0x3c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a0b      	ldr	r2, [pc, #44]	; (8002118 <HAL_Init+0x3c>)
 80020ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020f2:	2003      	movs	r0, #3
 80020f4:	f000 f9c8 	bl	8002488 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020f8:	200f      	movs	r0, #15
 80020fa:	f000 f80f 	bl	800211c <HAL_InitTick>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d002      	beq.n	800210a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	71fb      	strb	r3, [r7, #7]
 8002108:	e001      	b.n	800210e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800210a:	f7ff fe5b 	bl	8001dc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800210e:	79fb      	ldrb	r3, [r7, #7]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	58004000 	.word	0x58004000

0800211c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002124:	2300      	movs	r3, #0
 8002126:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002128:	4b17      	ldr	r3, [pc, #92]	; (8002188 <HAL_InitTick+0x6c>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d024      	beq.n	800217a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002130:	f002 fc22 	bl	8004978 <HAL_RCC_GetHCLKFreq>
 8002134:	4602      	mov	r2, r0
 8002136:	4b14      	ldr	r3, [pc, #80]	; (8002188 <HAL_InitTick+0x6c>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	4619      	mov	r1, r3
 800213c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002140:	fbb3 f3f1 	udiv	r3, r3, r1
 8002144:	fbb2 f3f3 	udiv	r3, r2, r3
 8002148:	4618      	mov	r0, r3
 800214a:	f000 f9de 	bl	800250a <HAL_SYSTICK_Config>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d10f      	bne.n	8002174 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b0f      	cmp	r3, #15
 8002158:	d809      	bhi.n	800216e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800215a:	2200      	movs	r2, #0
 800215c:	6879      	ldr	r1, [r7, #4]
 800215e:	f04f 30ff 	mov.w	r0, #4294967295
 8002162:	f000 f99c 	bl	800249e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002166:	4a09      	ldr	r2, [pc, #36]	; (800218c <HAL_InitTick+0x70>)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6013      	str	r3, [r2, #0]
 800216c:	e007      	b.n	800217e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	73fb      	strb	r3, [r7, #15]
 8002172:	e004      	b.n	800217e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	73fb      	strb	r3, [r7, #15]
 8002178:	e001      	b.n	800217e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800217e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002180:	4618      	mov	r0, r3
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	20000018 	.word	0x20000018
 800218c:	20000014 	.word	0x20000014

08002190 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002194:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <HAL_IncTick+0x20>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	461a      	mov	r2, r3
 800219a:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <HAL_IncTick+0x24>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4413      	add	r3, r2
 80021a0:	4a04      	ldr	r2, [pc, #16]	; (80021b4 <HAL_IncTick+0x24>)
 80021a2:	6013      	str	r3, [r2, #0]
}
 80021a4:	bf00      	nop
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	20000018 	.word	0x20000018
 80021b4:	200001ec 	.word	0x200001ec

080021b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  return uwTick;
 80021bc:	4b03      	ldr	r3, [pc, #12]	; (80021cc <HAL_GetTick+0x14>)
 80021be:	681b      	ldr	r3, [r3, #0]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	200001ec 	.word	0x200001ec

080021d0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80021d4:	4b03      	ldr	r3, [pc, #12]	; (80021e4 <HAL_GetTickPrio+0x14>)
 80021d6:	681b      	ldr	r3, [r3, #0]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	20000014 	.word	0x20000014

080021e8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80021ec:	4b05      	ldr	r3, [pc, #20]	; (8002204 <HAL_SuspendTick+0x1c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a04      	ldr	r2, [pc, #16]	; (8002204 <HAL_SuspendTick+0x1c>)
 80021f2:	f023 0302 	bic.w	r3, r3, #2
 80021f6:	6013      	str	r3, [r2, #0]
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	e000e010 	.word	0xe000e010

08002208 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800220c:	4b05      	ldr	r3, [pc, #20]	; (8002224 <HAL_ResumeTick+0x1c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a04      	ldr	r2, [pc, #16]	; (8002224 <HAL_ResumeTick+0x1c>)
 8002212:	f043 0302 	orr.w	r3, r3, #2
 8002216:	6013      	str	r3, [r2, #0]
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	e000e010 	.word	0xe000e010

08002228 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002238:	4b0c      	ldr	r3, [pc, #48]	; (800226c <__NVIC_SetPriorityGrouping+0x44>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002244:	4013      	ands	r3, r2
 8002246:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002250:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800225a:	4a04      	ldr	r2, [pc, #16]	; (800226c <__NVIC_SetPriorityGrouping+0x44>)
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	60d3      	str	r3, [r2, #12]
}
 8002260:	bf00      	nop
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002274:	4b04      	ldr	r3, [pc, #16]	; (8002288 <__NVIC_GetPriorityGrouping+0x18>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	0a1b      	lsrs	r3, r3, #8
 800227a:	f003 0307 	and.w	r3, r3, #7
}
 800227e:	4618      	mov	r0, r3
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	e000ed00 	.word	0xe000ed00

0800228c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229a:	2b00      	cmp	r3, #0
 800229c:	db0b      	blt.n	80022b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	f003 021f 	and.w	r2, r3, #31
 80022a4:	4907      	ldr	r1, [pc, #28]	; (80022c4 <__NVIC_EnableIRQ+0x38>)
 80022a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022aa:	095b      	lsrs	r3, r3, #5
 80022ac:	2001      	movs	r0, #1
 80022ae:	fa00 f202 	lsl.w	r2, r0, r2
 80022b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	e000e100 	.word	0xe000e100

080022c8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	db12      	blt.n	8002300 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	f003 021f 	and.w	r2, r3, #31
 80022e0:	490a      	ldr	r1, [pc, #40]	; (800230c <__NVIC_DisableIRQ+0x44>)
 80022e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e6:	095b      	lsrs	r3, r3, #5
 80022e8:	2001      	movs	r0, #1
 80022ea:	fa00 f202 	lsl.w	r2, r0, r2
 80022ee:	3320      	adds	r3, #32
 80022f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80022f4:	f3bf 8f4f 	dsb	sy
}
 80022f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80022fa:	f3bf 8f6f 	isb	sy
}
 80022fe:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	e000e100 	.word	0xe000e100

08002310 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	4603      	mov	r3, r0
 8002318:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800231a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231e:	2b00      	cmp	r3, #0
 8002320:	db0c      	blt.n	800233c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	f003 021f 	and.w	r2, r3, #31
 8002328:	4907      	ldr	r1, [pc, #28]	; (8002348 <__NVIC_SetPendingIRQ+0x38>)
 800232a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232e:	095b      	lsrs	r3, r3, #5
 8002330:	2001      	movs	r0, #1
 8002332:	fa00 f202 	lsl.w	r2, r0, r2
 8002336:	3340      	adds	r3, #64	; 0x40
 8002338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	e000e100 	.word	0xe000e100

0800234c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235a:	2b00      	cmp	r3, #0
 800235c:	db0c      	blt.n	8002378 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	f003 021f 	and.w	r2, r3, #31
 8002364:	4907      	ldr	r1, [pc, #28]	; (8002384 <__NVIC_ClearPendingIRQ+0x38>)
 8002366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236a:	095b      	lsrs	r3, r3, #5
 800236c:	2001      	movs	r0, #1
 800236e:	fa00 f202 	lsl.w	r2, r0, r2
 8002372:	3360      	adds	r3, #96	; 0x60
 8002374:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	e000e100 	.word	0xe000e100

08002388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	6039      	str	r1, [r7, #0]
 8002392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002398:	2b00      	cmp	r3, #0
 800239a:	db0a      	blt.n	80023b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	490c      	ldr	r1, [pc, #48]	; (80023d4 <__NVIC_SetPriority+0x4c>)
 80023a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a6:	0112      	lsls	r2, r2, #4
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	440b      	add	r3, r1
 80023ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023b0:	e00a      	b.n	80023c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	4908      	ldr	r1, [pc, #32]	; (80023d8 <__NVIC_SetPriority+0x50>)
 80023b8:	79fb      	ldrb	r3, [r7, #7]
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	3b04      	subs	r3, #4
 80023c0:	0112      	lsls	r2, r2, #4
 80023c2:	b2d2      	uxtb	r2, r2
 80023c4:	440b      	add	r3, r1
 80023c6:	761a      	strb	r2, [r3, #24]
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	e000e100 	.word	0xe000e100
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023dc:	b480      	push	{r7}
 80023de:	b089      	sub	sp, #36	; 0x24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	f1c3 0307 	rsb	r3, r3, #7
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	bf28      	it	cs
 80023fa:	2304      	movcs	r3, #4
 80023fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	3304      	adds	r3, #4
 8002402:	2b06      	cmp	r3, #6
 8002404:	d902      	bls.n	800240c <NVIC_EncodePriority+0x30>
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	3b03      	subs	r3, #3
 800240a:	e000      	b.n	800240e <NVIC_EncodePriority+0x32>
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002410:	f04f 32ff 	mov.w	r2, #4294967295
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43da      	mvns	r2, r3
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	401a      	ands	r2, r3
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002424:	f04f 31ff 	mov.w	r1, #4294967295
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	fa01 f303 	lsl.w	r3, r1, r3
 800242e:	43d9      	mvns	r1, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002434:	4313      	orrs	r3, r2
         );
}
 8002436:	4618      	mov	r0, r3
 8002438:	3724      	adds	r7, #36	; 0x24
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
	...

08002444 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3b01      	subs	r3, #1
 8002450:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002454:	d301      	bcc.n	800245a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002456:	2301      	movs	r3, #1
 8002458:	e00f      	b.n	800247a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800245a:	4a0a      	ldr	r2, [pc, #40]	; (8002484 <SysTick_Config+0x40>)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3b01      	subs	r3, #1
 8002460:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002462:	210f      	movs	r1, #15
 8002464:	f04f 30ff 	mov.w	r0, #4294967295
 8002468:	f7ff ff8e 	bl	8002388 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800246c:	4b05      	ldr	r3, [pc, #20]	; (8002484 <SysTick_Config+0x40>)
 800246e:	2200      	movs	r2, #0
 8002470:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002472:	4b04      	ldr	r3, [pc, #16]	; (8002484 <SysTick_Config+0x40>)
 8002474:	2207      	movs	r2, #7
 8002476:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	e000e010 	.word	0xe000e010

08002488 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f7ff fec9 	bl	8002228 <__NVIC_SetPriorityGrouping>
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b086      	sub	sp, #24
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	4603      	mov	r3, r0
 80024a6:	60b9      	str	r1, [r7, #8]
 80024a8:	607a      	str	r2, [r7, #4]
 80024aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024ac:	f7ff fee0 	bl	8002270 <__NVIC_GetPriorityGrouping>
 80024b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	68b9      	ldr	r1, [r7, #8]
 80024b6:	6978      	ldr	r0, [r7, #20]
 80024b8:	f7ff ff90 	bl	80023dc <NVIC_EncodePriority>
 80024bc:	4602      	mov	r2, r0
 80024be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024c2:	4611      	mov	r1, r2
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff ff5f 	bl	8002388 <__NVIC_SetPriority>
}
 80024ca:	bf00      	nop
 80024cc:	3718      	adds	r7, #24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	4603      	mov	r3, r0
 80024da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff fed3 	bl	800228c <__NVIC_EnableIRQ>
}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b082      	sub	sp, #8
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	4603      	mov	r3, r0
 80024f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80024f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff fee3 	bl	80022c8 <__NVIC_DisableIRQ>
}
 8002502:	bf00      	nop
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7ff ff96 	bl	8002444 <SysTick_Config>
 8002518:	4603      	mov	r3, r0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b082      	sub	sp, #8
 8002526:	af00      	add	r7, sp, #0
 8002528:	4603      	mov	r3, r0
 800252a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800252c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff feed 	bl	8002310 <__NVIC_SetPendingIRQ>
}
 8002536:	bf00      	nop
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b082      	sub	sp, #8
 8002542:	af00      	add	r7, sp, #0
 8002544:	4603      	mov	r3, r0
 8002546:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff fefd 	bl	800234c <__NVIC_ClearPendingIRQ>
}
 8002552:	bf00      	nop
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002562:	2300      	movs	r3, #0
 8002564:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002566:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <HAL_FLASH_Unlock+0x38>)
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	2b00      	cmp	r3, #0
 800256c:	da0b      	bge.n	8002586 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800256e:	4b09      	ldr	r3, [pc, #36]	; (8002594 <HAL_FLASH_Unlock+0x38>)
 8002570:	4a09      	ldr	r2, [pc, #36]	; (8002598 <HAL_FLASH_Unlock+0x3c>)
 8002572:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002574:	4b07      	ldr	r3, [pc, #28]	; (8002594 <HAL_FLASH_Unlock+0x38>)
 8002576:	4a09      	ldr	r2, [pc, #36]	; (800259c <HAL_FLASH_Unlock+0x40>)
 8002578:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800257a:	4b06      	ldr	r3, [pc, #24]	; (8002594 <HAL_FLASH_Unlock+0x38>)
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	2b00      	cmp	r3, #0
 8002580:	da01      	bge.n	8002586 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002586:	79fb      	ldrb	r3, [r7, #7]
}
 8002588:	4618      	mov	r0, r3
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	58004000 	.word	0x58004000
 8002598:	45670123 	.word	0x45670123
 800259c:	cdef89ab 	.word	0xcdef89ab

080025a0 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80025aa:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <HAL_FLASH_Lock+0x30>)
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	4a08      	ldr	r2, [pc, #32]	; (80025d0 <HAL_FLASH_Lock+0x30>)
 80025b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025b4:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 80025b6:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <HAL_FLASH_Lock+0x30>)
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	db01      	blt.n	80025c2 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80025c2:	79fb      	ldrb	r3, [r7, #7]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	58004000 	.word	0x58004000

080025d4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 80025dc:	f7ff fdec 	bl	80021b8 <HAL_GetTick>
 80025e0:	60b8      	str	r0, [r7, #8]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80025e2:	e009      	b.n	80025f8 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80025e4:	f7ff fde8 	bl	80021b8 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d801      	bhi.n	80025f8 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e054      	b.n	80026a2 <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80025f8:	4b2c      	ldr	r3, [pc, #176]	; (80026ac <FLASH_WaitForLastOperation+0xd8>)
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002604:	d0ee      	beq.n	80025e4 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = FLASH->SR;
 8002606:	4b29      	ldr	r3, [pc, #164]	; (80026ac <FLASH_WaitForLastOperation+0xd8>)
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	60fb      	str	r3, [r7, #12]

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d002      	beq.n	800261c <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002616:	4b25      	ldr	r3, [pc, #148]	; (80026ac <FLASH_WaitForLastOperation+0xd8>)
 8002618:	2201      	movs	r2, #1
 800261a:	611a      	str	r2, [r3, #16]

  /* Workaround for BZ 70309 :
     - OPTVERR is always set at power-up due to failure of engi bytes checking
     - FLASH_WaitForLastOperation() is called at the beginning of erase or program
       operations, so the bit will be clear when performing first operation */
  if ((error & FLASH_FLAG_OPTVERR) != 0U)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d007      	beq.n	8002636 <FLASH_WaitForLastOperation+0x62>
  {
    /* Clear FLASH OPTVERR bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002626:	4b21      	ldr	r3, [pc, #132]	; (80026ac <FLASH_WaitForLastOperation+0xd8>)
 8002628:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800262c:	611a      	str	r2, [r3, #16]

    /* Clear OPTVERR bit in "error" variable to not treat it as error */
    error &= ~FLASH_FLAG_OPTVERR;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002634:	60fb      	str	r3, [r7, #12]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800263c:	4013      	ands	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d007      	beq.n	800265a <FLASH_WaitForLastOperation+0x86>
 800264a:	4b18      	ldr	r3, [pc, #96]	; (80026ac <FLASH_WaitForLastOperation+0xd8>)
 800264c:	699a      	ldr	r2, [r3, #24]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8002654:	4915      	ldr	r1, [pc, #84]	; (80026ac <FLASH_WaitForLastOperation+0xd8>)
 8002656:	4313      	orrs	r3, r2
 8002658:	618b      	str	r3, [r1, #24]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d004      	beq.n	800266e <FLASH_WaitForLastOperation+0x9a>
 8002664:	4a11      	ldr	r2, [pc, #68]	; (80026ac <FLASH_WaitForLastOperation+0xd8>)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800266c:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00e      	beq.n	8002692 <FLASH_WaitForLastOperation+0xbe>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8002674:	4a0e      	ldr	r2, [pc, #56]	; (80026b0 <FLASH_WaitForLastOperation+0xdc>)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e011      	b.n	80026a2 <FLASH_WaitForLastOperation+0xce>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800267e:	f7ff fd9b 	bl	80021b8 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	429a      	cmp	r2, r3
 800268c:	d801      	bhi.n	8002692 <FLASH_WaitForLastOperation+0xbe>
    {
      return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e007      	b.n	80026a2 <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8002692:	4b06      	ldr	r3, [pc, #24]	; (80026ac <FLASH_WaitForLastOperation+0xd8>)
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800269a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800269e:	d0ee      	beq.n	800267e <FLASH_WaitForLastOperation+0xaa>
    }
  }

  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	58004000 	.word	0x58004000
 80026b0:	200001f0 	.word	0x200001f0

080026b4 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80026be:	4b24      	ldr	r3, [pc, #144]	; (8002750 <HAL_FLASHEx_Erase+0x9c>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d101      	bne.n	80026ca <HAL_FLASHEx_Erase+0x16>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e03d      	b.n	8002746 <HAL_FLASHEx_Erase+0x92>
 80026ca:	4b21      	ldr	r3, [pc, #132]	; (8002750 <HAL_FLASHEx_Erase+0x9c>)
 80026cc:	2201      	movs	r2, #1
 80026ce:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80026d0:	4b1f      	ldr	r3, [pc, #124]	; (8002750 <HAL_FLASHEx_Erase+0x9c>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80026d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026da:	f7ff ff7b 	bl	80025d4 <FLASH_WaitForLastOperation>
 80026de:	4603      	mov	r3, r0
 80026e0:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80026e2:	7bfb      	ldrb	r3, [r7, #15]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d12a      	bne.n	800273e <HAL_FLASHEx_Erase+0x8a>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d124      	bne.n	800273a <HAL_FLASHEx_Erase+0x86>
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	f04f 32ff 	mov.w	r2, #4294967295
 80026f6:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	e012      	b.n	8002726 <HAL_FLASHEx_Erase+0x72>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8002700:	68b8      	ldr	r0, [r7, #8]
 8002702:	f000 f827 	bl	8002754 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002706:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800270a:	f7ff ff63 	bl	80025d4 <FLASH_WaitForLastOperation>
 800270e:	4603      	mov	r3, r0
 8002710:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8002712:	7bfb      	ldrb	r3, [r7, #15]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d003      	beq.n	8002720 <HAL_FLASHEx_Erase+0x6c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	601a      	str	r2, [r3, #0]
          break;
 800271e:	e00a      	b.n	8002736 <HAL_FLASHEx_Erase+0x82>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	3301      	adds	r3, #1
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	4413      	add	r3, r2
 8002730:	68ba      	ldr	r2, [r7, #8]
 8002732:	429a      	cmp	r2, r3
 8002734:	d3e4      	bcc.n	8002700 <HAL_FLASHEx_Erase+0x4c>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8002736:	f000 f86f 	bl	8002818 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800273a:	f000 f825 	bl	8002788 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800273e:	4b04      	ldr	r3, [pc, #16]	; (8002750 <HAL_FLASHEx_Erase+0x9c>)
 8002740:	2200      	movs	r2, #0
 8002742:	701a      	strb	r2, [r3, #0]

  return status;
 8002744:	7bfb      	ldrb	r3, [r7, #15]
}
 8002746:	4618      	mov	r0, r3
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	200001f0 	.word	0x200001f0

08002754 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 800275c:	4b09      	ldr	r3, [pc, #36]	; (8002784 <FLASH_PageErase+0x30>)
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	4313      	orrs	r3, r2
 800276a:	4a06      	ldr	r2, [pc, #24]	; (8002784 <FLASH_PageErase+0x30>)
 800276c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002770:	f043 0302 	orr.w	r3, r3, #2
 8002774:	6153      	str	r3, [r2, #20]
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	58004000 	.word	0x58004000

08002788 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
static void FLASH_FlushCaches(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == FLASH_ACR_ICEN)
 800278c:	4b21      	ldr	r3, [pc, #132]	; (8002814 <FLASH_FlushCaches+0x8c>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002798:	d117      	bne.n	80027ca <FLASH_FlushCaches+0x42>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800279a:	4b1e      	ldr	r3, [pc, #120]	; (8002814 <FLASH_FlushCaches+0x8c>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a1d      	ldr	r2, [pc, #116]	; (8002814 <FLASH_FlushCaches+0x8c>)
 80027a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80027a4:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80027a6:	4b1b      	ldr	r3, [pc, #108]	; (8002814 <FLASH_FlushCaches+0x8c>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a1a      	ldr	r2, [pc, #104]	; (8002814 <FLASH_FlushCaches+0x8c>)
 80027ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	4b18      	ldr	r3, [pc, #96]	; (8002814 <FLASH_FlushCaches+0x8c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a17      	ldr	r2, [pc, #92]	; (8002814 <FLASH_FlushCaches+0x8c>)
 80027b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027bc:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027be:	4b15      	ldr	r3, [pc, #84]	; (8002814 <FLASH_FlushCaches+0x8c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a14      	ldr	r2, [pc, #80]	; (8002814 <FLASH_FlushCaches+0x8c>)
 80027c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027c8:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == FLASH_ACR_DCEN)
 80027ca:	4b12      	ldr	r3, [pc, #72]	; (8002814 <FLASH_FlushCaches+0x8c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027d6:	d117      	bne.n	8002808 <FLASH_FlushCaches+0x80>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80027d8:	4b0e      	ldr	r3, [pc, #56]	; (8002814 <FLASH_FlushCaches+0x8c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a0d      	ldr	r2, [pc, #52]	; (8002814 <FLASH_FlushCaches+0x8c>)
 80027de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027e2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80027e4:	4b0b      	ldr	r3, [pc, #44]	; (8002814 <FLASH_FlushCaches+0x8c>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a0a      	ldr	r2, [pc, #40]	; (8002814 <FLASH_FlushCaches+0x8c>)
 80027ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027ee:	6013      	str	r3, [r2, #0]
 80027f0:	4b08      	ldr	r3, [pc, #32]	; (8002814 <FLASH_FlushCaches+0x8c>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a07      	ldr	r2, [pc, #28]	; (8002814 <FLASH_FlushCaches+0x8c>)
 80027f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027fa:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80027fc:	4b05      	ldr	r3, [pc, #20]	; (8002814 <FLASH_FlushCaches+0x8c>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a04      	ldr	r2, [pc, #16]	; (8002814 <FLASH_FlushCaches+0x8c>)
 8002802:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002806:	6013      	str	r3, [r2, #0]
  }
}
 8002808:	bf00      	nop
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	58004000 	.word	0x58004000

08002818 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800281c:	4b06      	ldr	r3, [pc, #24]	; (8002838 <FLASH_AcknowledgePageErase+0x20>)
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	4a05      	ldr	r2, [pc, #20]	; (8002838 <FLASH_AcknowledgePageErase+0x20>)
 8002822:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002826:	f023 0302 	bic.w	r3, r3, #2
 800282a:	6153      	str	r3, [r2, #20]
}
 800282c:	bf00      	nop
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	58004000 	.word	0x58004000

0800283c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800283c:	b480      	push	{r7}
 800283e:	b087      	sub	sp, #28
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002846:	2300      	movs	r3, #0
 8002848:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800284a:	e146      	b.n	8002ada <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	2101      	movs	r1, #1
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	fa01 f303 	lsl.w	r3, r1, r3
 8002858:	4013      	ands	r3, r2
 800285a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 8138 	beq.w	8002ad4 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f003 0303 	and.w	r3, r3, #3
 800286c:	2b01      	cmp	r3, #1
 800286e:	d005      	beq.n	800287c <HAL_GPIO_Init+0x40>
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f003 0303 	and.w	r3, r3, #3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d130      	bne.n	80028de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	2203      	movs	r2, #3
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	43db      	mvns	r3, r3
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	4013      	ands	r3, r2
 8002892:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	68da      	ldr	r2, [r3, #12]
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028b2:	2201      	movs	r2, #1
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	43db      	mvns	r3, r3
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	4013      	ands	r3, r2
 80028c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	091b      	lsrs	r3, r3, #4
 80028c8:	f003 0201 	and.w	r2, r3, #1
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	2b03      	cmp	r3, #3
 80028e8:	d017      	beq.n	800291a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	2203      	movs	r2, #3
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43db      	mvns	r3, r3
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	4013      	ands	r3, r2
 8002900:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	4313      	orrs	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d123      	bne.n	800296e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	08da      	lsrs	r2, r3, #3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	3208      	adds	r2, #8
 800292e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002932:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	220f      	movs	r2, #15
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43db      	mvns	r3, r3
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	4013      	ands	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	691a      	ldr	r2, [r3, #16]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	4313      	orrs	r3, r2
 800295e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	08da      	lsrs	r2, r3, #3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3208      	adds	r2, #8
 8002968:	6939      	ldr	r1, [r7, #16]
 800296a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	2203      	movs	r2, #3
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43db      	mvns	r3, r3
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	4013      	ands	r3, r2
 8002984:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f003 0203 	and.w	r2, r3, #3
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	4313      	orrs	r3, r2
 800299a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 8092 	beq.w	8002ad4 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80029b0:	4a51      	ldr	r2, [pc, #324]	; (8002af8 <HAL_GPIO_Init+0x2bc>)
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	089b      	lsrs	r3, r3, #2
 80029b6:	3302      	adds	r3, #2
 80029b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f003 0303 	and.w	r3, r3, #3
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	220f      	movs	r2, #15
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	43db      	mvns	r3, r3
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	4013      	ands	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80029da:	d013      	beq.n	8002a04 <HAL_GPIO_Init+0x1c8>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a47      	ldr	r2, [pc, #284]	; (8002afc <HAL_GPIO_Init+0x2c0>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d00d      	beq.n	8002a00 <HAL_GPIO_Init+0x1c4>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a46      	ldr	r2, [pc, #280]	; (8002b00 <HAL_GPIO_Init+0x2c4>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d007      	beq.n	80029fc <HAL_GPIO_Init+0x1c0>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a45      	ldr	r2, [pc, #276]	; (8002b04 <HAL_GPIO_Init+0x2c8>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d101      	bne.n	80029f8 <HAL_GPIO_Init+0x1bc>
 80029f4:	2304      	movs	r3, #4
 80029f6:	e006      	b.n	8002a06 <HAL_GPIO_Init+0x1ca>
 80029f8:	2307      	movs	r3, #7
 80029fa:	e004      	b.n	8002a06 <HAL_GPIO_Init+0x1ca>
 80029fc:	2302      	movs	r3, #2
 80029fe:	e002      	b.n	8002a06 <HAL_GPIO_Init+0x1ca>
 8002a00:	2301      	movs	r3, #1
 8002a02:	e000      	b.n	8002a06 <HAL_GPIO_Init+0x1ca>
 8002a04:	2300      	movs	r3, #0
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	f002 0203 	and.w	r2, r2, #3
 8002a0c:	0092      	lsls	r2, r2, #2
 8002a0e:	4093      	lsls	r3, r2
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a16:	4938      	ldr	r1, [pc, #224]	; (8002af8 <HAL_GPIO_Init+0x2bc>)
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	089b      	lsrs	r3, r3, #2
 8002a1c:	3302      	adds	r3, #2
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a24:	4b38      	ldr	r3, [pc, #224]	; (8002b08 <HAL_GPIO_Init+0x2cc>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	4013      	ands	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d003      	beq.n	8002a48 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a48:	4a2f      	ldr	r2, [pc, #188]	; (8002b08 <HAL_GPIO_Init+0x2cc>)
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002a4e:	4b2e      	ldr	r3, [pc, #184]	; (8002b08 <HAL_GPIO_Init+0x2cc>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	43db      	mvns	r3, r3
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a72:	4a25      	ldr	r2, [pc, #148]	; (8002b08 <HAL_GPIO_Init+0x2cc>)
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a78:	4b23      	ldr	r3, [pc, #140]	; (8002b08 <HAL_GPIO_Init+0x2cc>)
 8002a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	43db      	mvns	r3, r3
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	4013      	ands	r3, r2
 8002a88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a9e:	4a1a      	ldr	r2, [pc, #104]	; (8002b08 <HAL_GPIO_Init+0x2cc>)
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002aa6:	4b18      	ldr	r3, [pc, #96]	; (8002b08 <HAL_GPIO_Init+0x2cc>)
 8002aa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d003      	beq.n	8002acc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002acc:	4a0e      	ldr	r2, [pc, #56]	; (8002b08 <HAL_GPIO_Init+0x2cc>)
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f47f aeb1 	bne.w	800284c <HAL_GPIO_Init+0x10>
  }
}
 8002aea:	bf00      	nop
 8002aec:	bf00      	nop
 8002aee:	371c      	adds	r7, #28
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	40010000 	.word	0x40010000
 8002afc:	48000400 	.word	0x48000400
 8002b00:	48000800 	.word	0x48000800
 8002b04:	48001000 	.word	0x48001000
 8002b08:	58000800 	.word	0x58000800

08002b0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b16:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b18:	68da      	ldr	r2, [r3, #12]
 8002b1a:	88fb      	ldrh	r3, [r7, #6]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d006      	beq.n	8002b30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b22:	4a05      	ldr	r2, [pc, #20]	; (8002b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b24:	88fb      	ldrh	r3, [r7, #6]
 8002b26:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b28:	88fb      	ldrh	r3, [r7, #6]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fe fefe 	bl	800192c <HAL_GPIO_EXTI_Callback>
  }
}
 8002b30:	bf00      	nop
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	58000800 	.word	0x58000800

08002b3c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8002b42:	4b0a      	ldr	r3, [pc, #40]	; (8002b6c <HAL_HSEM_IRQHandler+0x30>)
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8002b48:	4b08      	ldr	r3, [pc, #32]	; (8002b6c <HAL_HSEM_IRQHandler+0x30>)
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	4906      	ldr	r1, [pc, #24]	; (8002b6c <HAL_HSEM_IRQHandler+0x30>)
 8002b52:	4013      	ands	r3, r2
 8002b54:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8002b56:	4a05      	ldr	r2, [pc, #20]	; (8002b6c <HAL_HSEM_IRQHandler+0x30>)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 f807 	bl	8002b70 <HAL_HSEM_FreeCallback>
}
 8002b62:	bf00      	nop
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	58001500 	.word	0x58001500

08002b70 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e08d      	b.n	8002cb2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d106      	bne.n	8002bb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7ff f91a 	bl	8001de4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2224      	movs	r2, #36	; 0x24
 8002bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 0201 	bic.w	r2, r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bd4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002be4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d107      	bne.n	8002bfe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	689a      	ldr	r2, [r3, #8]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	e006      	b.n	8002c0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	689a      	ldr	r2, [r3, #8]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002c0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d108      	bne.n	8002c26 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c22:	605a      	str	r2, [r3, #4]
 8002c24:	e007      	b.n	8002c36 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	6812      	ldr	r2, [r2, #0]
 8002c40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c48:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68da      	ldr	r2, [r3, #12]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c58:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	691a      	ldr	r2, [r3, #16]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	69d9      	ldr	r1, [r3, #28]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a1a      	ldr	r2, [r3, #32]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f042 0201 	orr.w	r2, r2, #1
 8002c92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
	...

08002cbc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af02      	add	r7, sp, #8
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	607a      	str	r2, [r7, #4]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	460b      	mov	r3, r1
 8002cca:	817b      	strh	r3, [r7, #10]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b20      	cmp	r3, #32
 8002cda:	f040 80fd 	bne.w	8002ed8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d101      	bne.n	8002cec <HAL_I2C_Master_Transmit+0x30>
 8002ce8:	2302      	movs	r3, #2
 8002cea:	e0f6      	b.n	8002eda <HAL_I2C_Master_Transmit+0x21e>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002cf4:	f7ff fa60 	bl	80021b8 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	2319      	movs	r3, #25
 8002d00:	2201      	movs	r2, #1
 8002d02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 fa0a 	bl	8003120 <I2C_WaitOnFlagUntilTimeout>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e0e1      	b.n	8002eda <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2221      	movs	r2, #33	; 0x21
 8002d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2210      	movs	r2, #16
 8002d22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	893a      	ldrh	r2, [r7, #8]
 8002d36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	2bff      	cmp	r3, #255	; 0xff
 8002d46:	d906      	bls.n	8002d56 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	22ff      	movs	r2, #255	; 0xff
 8002d4c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002d4e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	e007      	b.n	8002d66 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002d60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d64:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d024      	beq.n	8002db8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	781a      	ldrb	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	1c5a      	adds	r2, r3, #1
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d96:	3b01      	subs	r3, #1
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	3301      	adds	r3, #1
 8002da6:	b2da      	uxtb	r2, r3
 8002da8:	8979      	ldrh	r1, [r7, #10]
 8002daa:	4b4e      	ldr	r3, [pc, #312]	; (8002ee4 <HAL_I2C_Master_Transmit+0x228>)
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 fbf1 	bl	8003598 <I2C_TransferConfig>
 8002db6:	e066      	b.n	8002e86 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	8979      	ldrh	r1, [r7, #10]
 8002dc0:	4b48      	ldr	r3, [pc, #288]	; (8002ee4 <HAL_I2C_Master_Transmit+0x228>)
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f000 fbe6 	bl	8003598 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002dcc:	e05b      	b.n	8002e86 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	6a39      	ldr	r1, [r7, #32]
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 f9f3 	bl	80031be <I2C_WaitOnTXISFlagUntilTimeout>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e07b      	b.n	8002eda <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	781a      	ldrb	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df2:	1c5a      	adds	r2, r3, #1
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d034      	beq.n	8002e86 <HAL_I2C_Master_Transmit+0x1ca>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d130      	bne.n	8002e86 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	6a3b      	ldr	r3, [r7, #32]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	2180      	movs	r1, #128	; 0x80
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 f976 	bl	8003120 <I2C_WaitOnFlagUntilTimeout>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e04d      	b.n	8002eda <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	2bff      	cmp	r3, #255	; 0xff
 8002e46:	d90e      	bls.n	8002e66 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	22ff      	movs	r2, #255	; 0xff
 8002e4c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e52:	b2da      	uxtb	r2, r3
 8002e54:	8979      	ldrh	r1, [r7, #10]
 8002e56:	2300      	movs	r3, #0
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 fb9a 	bl	8003598 <I2C_TransferConfig>
 8002e64:	e00f      	b.n	8002e86 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	8979      	ldrh	r1, [r7, #10]
 8002e78:	2300      	movs	r3, #0
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 fb89 	bl	8003598 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d19e      	bne.n	8002dce <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	6a39      	ldr	r1, [r7, #32]
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f000 f9d9 	bl	800324c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e01a      	b.n	8002eda <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6859      	ldr	r1, [r3, #4]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <HAL_I2C_Master_Transmit+0x22c>)
 8002eb8:	400b      	ands	r3, r1
 8002eba:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	e000      	b.n	8002eda <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002ed8:	2302      	movs	r3, #2
  }
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	80002000 	.word	0x80002000
 8002ee8:	fe00e800 	.word	0xfe00e800

08002eec <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b088      	sub	sp, #32
 8002ef0:	af02      	add	r7, sp, #8
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	607a      	str	r2, [r7, #4]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	460b      	mov	r3, r1
 8002efa:	817b      	strh	r3, [r7, #10]
 8002efc:	4613      	mov	r3, r2
 8002efe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b20      	cmp	r3, #32
 8002f0a:	f040 80db 	bne.w	80030c4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d101      	bne.n	8002f1c <HAL_I2C_Master_Receive+0x30>
 8002f18:	2302      	movs	r3, #2
 8002f1a:	e0d4      	b.n	80030c6 <HAL_I2C_Master_Receive+0x1da>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f24:	f7ff f948 	bl	80021b8 <HAL_GetTick>
 8002f28:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	2319      	movs	r3, #25
 8002f30:	2201      	movs	r2, #1
 8002f32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 f8f2 	bl	8003120 <I2C_WaitOnFlagUntilTimeout>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e0bf      	b.n	80030c6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2222      	movs	r2, #34	; 0x22
 8002f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2210      	movs	r2, #16
 8002f52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	893a      	ldrh	r2, [r7, #8]
 8002f66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	2bff      	cmp	r3, #255	; 0xff
 8002f76:	d90e      	bls.n	8002f96 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	22ff      	movs	r2, #255	; 0xff
 8002f7c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f82:	b2da      	uxtb	r2, r3
 8002f84:	8979      	ldrh	r1, [r7, #10]
 8002f86:	4b52      	ldr	r3, [pc, #328]	; (80030d0 <HAL_I2C_Master_Receive+0x1e4>)
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f000 fb02 	bl	8003598 <I2C_TransferConfig>
 8002f94:	e06d      	b.n	8003072 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa4:	b2da      	uxtb	r2, r3
 8002fa6:	8979      	ldrh	r1, [r7, #10]
 8002fa8:	4b49      	ldr	r3, [pc, #292]	; (80030d0 <HAL_I2C_Master_Receive+0x1e4>)
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f000 faf1 	bl	8003598 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002fb6:	e05c      	b.n	8003072 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	6a39      	ldr	r1, [r7, #32]
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 f989 	bl	80032d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e07c      	b.n	80030c6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd6:	b2d2      	uxtb	r2, r2
 8002fd8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fde:	1c5a      	adds	r2, r3, #1
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003002:	b29b      	uxth	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	d034      	beq.n	8003072 <HAL_I2C_Master_Receive+0x186>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800300c:	2b00      	cmp	r3, #0
 800300e:	d130      	bne.n	8003072 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	2200      	movs	r2, #0
 8003018:	2180      	movs	r1, #128	; 0x80
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 f880 	bl	8003120 <I2C_WaitOnFlagUntilTimeout>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e04d      	b.n	80030c6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302e:	b29b      	uxth	r3, r3
 8003030:	2bff      	cmp	r3, #255	; 0xff
 8003032:	d90e      	bls.n	8003052 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	22ff      	movs	r2, #255	; 0xff
 8003038:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303e:	b2da      	uxtb	r2, r3
 8003040:	8979      	ldrh	r1, [r7, #10]
 8003042:	2300      	movs	r3, #0
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f000 faa4 	bl	8003598 <I2C_TransferConfig>
 8003050:	e00f      	b.n	8003072 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003056:	b29a      	uxth	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003060:	b2da      	uxtb	r2, r3
 8003062:	8979      	ldrh	r1, [r7, #10]
 8003064:	2300      	movs	r3, #0
 8003066:	9300      	str	r3, [sp, #0]
 8003068:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f000 fa93 	bl	8003598 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003076:	b29b      	uxth	r3, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	d19d      	bne.n	8002fb8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	6a39      	ldr	r1, [r7, #32]
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f000 f8e3 	bl	800324c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e01a      	b.n	80030c6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2220      	movs	r2, #32
 8003096:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6859      	ldr	r1, [r3, #4]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	4b0c      	ldr	r3, [pc, #48]	; (80030d4 <HAL_I2C_Master_Receive+0x1e8>)
 80030a4:	400b      	ands	r3, r1
 80030a6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2220      	movs	r2, #32
 80030ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030c0:	2300      	movs	r3, #0
 80030c2:	e000      	b.n	80030c6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80030c4:	2302      	movs	r3, #2
  }
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	80002400 	.word	0x80002400
 80030d4:	fe00e800 	.word	0xfe00e800

080030d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d103      	bne.n	80030f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2200      	movs	r2, #0
 80030f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	2b01      	cmp	r3, #1
 8003102:	d007      	beq.n	8003114 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	699a      	ldr	r2, [r3, #24]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0201 	orr.w	r2, r2, #1
 8003112:	619a      	str	r2, [r3, #24]
  }
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	603b      	str	r3, [r7, #0]
 800312c:	4613      	mov	r3, r2
 800312e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003130:	e031      	b.n	8003196 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003138:	d02d      	beq.n	8003196 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800313a:	f7ff f83d 	bl	80021b8 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	429a      	cmp	r2, r3
 8003148:	d302      	bcc.n	8003150 <I2C_WaitOnFlagUntilTimeout+0x30>
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d122      	bne.n	8003196 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	699a      	ldr	r2, [r3, #24]
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	4013      	ands	r3, r2
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	429a      	cmp	r2, r3
 800315e:	bf0c      	ite	eq
 8003160:	2301      	moveq	r3, #1
 8003162:	2300      	movne	r3, #0
 8003164:	b2db      	uxtb	r3, r3
 8003166:	461a      	mov	r2, r3
 8003168:	79fb      	ldrb	r3, [r7, #7]
 800316a:	429a      	cmp	r2, r3
 800316c:	d113      	bne.n	8003196 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003172:	f043 0220 	orr.w	r2, r3, #32
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2220      	movs	r2, #32
 800317e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e00f      	b.n	80031b6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	699a      	ldr	r2, [r3, #24]
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	4013      	ands	r3, r2
 80031a0:	68ba      	ldr	r2, [r7, #8]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	bf0c      	ite	eq
 80031a6:	2301      	moveq	r3, #1
 80031a8:	2300      	movne	r3, #0
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	461a      	mov	r2, r3
 80031ae:	79fb      	ldrb	r3, [r7, #7]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d0be      	beq.n	8003132 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b084      	sub	sp, #16
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	60f8      	str	r0, [r7, #12]
 80031c6:	60b9      	str	r1, [r7, #8]
 80031c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031ca:	e033      	b.n	8003234 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	68b9      	ldr	r1, [r7, #8]
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f000 f901 	bl	80033d8 <I2C_IsErrorOccurred>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e031      	b.n	8003244 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e6:	d025      	beq.n	8003234 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e8:	f7fe ffe6 	bl	80021b8 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	68ba      	ldr	r2, [r7, #8]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d302      	bcc.n	80031fe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d11a      	bne.n	8003234 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b02      	cmp	r3, #2
 800320a:	d013      	beq.n	8003234 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003210:	f043 0220 	orr.w	r2, r3, #32
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2220      	movs	r2, #32
 800321c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e007      	b.n	8003244 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b02      	cmp	r3, #2
 8003240:	d1c4      	bne.n	80031cc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003258:	e02f      	b.n	80032ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	68b9      	ldr	r1, [r7, #8]
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f000 f8ba 	bl	80033d8 <I2C_IsErrorOccurred>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e02d      	b.n	80032ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800326e:	f7fe ffa3 	bl	80021b8 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	429a      	cmp	r2, r3
 800327c:	d302      	bcc.n	8003284 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d11a      	bne.n	80032ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	f003 0320 	and.w	r3, r3, #32
 800328e:	2b20      	cmp	r3, #32
 8003290:	d013      	beq.n	80032ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003296:	f043 0220 	orr.w	r2, r3, #32
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2220      	movs	r2, #32
 80032a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e007      	b.n	80032ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	f003 0320 	and.w	r3, r3, #32
 80032c4:	2b20      	cmp	r3, #32
 80032c6:	d1c8      	bne.n	800325a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
	...

080032d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032e0:	e06b      	b.n	80033ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	68b9      	ldr	r1, [r7, #8]
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 f876 	bl	80033d8 <I2C_IsErrorOccurred>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e069      	b.n	80033ca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	f003 0320 	and.w	r3, r3, #32
 8003300:	2b20      	cmp	r3, #32
 8003302:	d138      	bne.n	8003376 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	f003 0304 	and.w	r3, r3, #4
 800330e:	2b04      	cmp	r3, #4
 8003310:	d105      	bne.n	800331e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800331a:	2300      	movs	r3, #0
 800331c:	e055      	b.n	80033ca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	f003 0310 	and.w	r3, r3, #16
 8003328:	2b10      	cmp	r3, #16
 800332a:	d107      	bne.n	800333c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2210      	movs	r2, #16
 8003332:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2204      	movs	r2, #4
 8003338:	645a      	str	r2, [r3, #68]	; 0x44
 800333a:	e002      	b.n	8003342 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2220      	movs	r2, #32
 8003348:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6859      	ldr	r1, [r3, #4]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	4b1f      	ldr	r3, [pc, #124]	; (80033d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8003356:	400b      	ands	r3, r1
 8003358:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2220      	movs	r2, #32
 800335e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e029      	b.n	80033ca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003376:	f7fe ff1f 	bl	80021b8 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	429a      	cmp	r2, r3
 8003384:	d302      	bcc.n	800338c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d116      	bne.n	80033ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	f003 0304 	and.w	r3, r3, #4
 8003396:	2b04      	cmp	r3, #4
 8003398:	d00f      	beq.n	80033ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339e:	f043 0220 	orr.w	r2, r3, #32
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2220      	movs	r2, #32
 80033aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e007      	b.n	80033ca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d18c      	bne.n	80032e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	fe00e800 	.word	0xfe00e800

080033d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b08a      	sub	sp, #40	; 0x28
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033e4:	2300      	movs	r3, #0
 80033e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80033f2:	2300      	movs	r3, #0
 80033f4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	f003 0310 	and.w	r3, r3, #16
 8003400:	2b00      	cmp	r3, #0
 8003402:	d068      	beq.n	80034d6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2210      	movs	r2, #16
 800340a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800340c:	e049      	b.n	80034a2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003414:	d045      	beq.n	80034a2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003416:	f7fe fecf 	bl	80021b8 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	68ba      	ldr	r2, [r7, #8]
 8003422:	429a      	cmp	r2, r3
 8003424:	d302      	bcc.n	800342c <I2C_IsErrorOccurred+0x54>
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d13a      	bne.n	80034a2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003436:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800343e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800344a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800344e:	d121      	bne.n	8003494 <I2C_IsErrorOccurred+0xbc>
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003456:	d01d      	beq.n	8003494 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003458:	7cfb      	ldrb	r3, [r7, #19]
 800345a:	2b20      	cmp	r3, #32
 800345c:	d01a      	beq.n	8003494 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800346c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800346e:	f7fe fea3 	bl	80021b8 <HAL_GetTick>
 8003472:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003474:	e00e      	b.n	8003494 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003476:	f7fe fe9f 	bl	80021b8 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b19      	cmp	r3, #25
 8003482:	d907      	bls.n	8003494 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	f043 0320 	orr.w	r3, r3, #32
 800348a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003492:	e006      	b.n	80034a2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	f003 0320 	and.w	r3, r3, #32
 800349e:	2b20      	cmp	r3, #32
 80034a0:	d1e9      	bne.n	8003476 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	f003 0320 	and.w	r3, r3, #32
 80034ac:	2b20      	cmp	r3, #32
 80034ae:	d003      	beq.n	80034b8 <I2C_IsErrorOccurred+0xe0>
 80034b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0aa      	beq.n	800340e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80034b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d103      	bne.n	80034c8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2220      	movs	r2, #32
 80034c6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	f043 0304 	orr.w	r3, r3, #4
 80034ce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00b      	beq.n	8003500 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80034e8:	6a3b      	ldr	r3, [r7, #32]
 80034ea:	f043 0301 	orr.w	r3, r3, #1
 80034ee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00b      	beq.n	8003522 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800350a:	6a3b      	ldr	r3, [r7, #32]
 800350c:	f043 0308 	orr.w	r3, r3, #8
 8003510:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800351a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00b      	beq.n	8003544 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800352c:	6a3b      	ldr	r3, [r7, #32]
 800352e:	f043 0302 	orr.w	r3, r3, #2
 8003532:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f44f 7200 	mov.w	r2, #512	; 0x200
 800353c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003544:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003548:	2b00      	cmp	r3, #0
 800354a:	d01c      	beq.n	8003586 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f7ff fdc3 	bl	80030d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6859      	ldr	r1, [r3, #4]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	4b0d      	ldr	r3, [pc, #52]	; (8003594 <I2C_IsErrorOccurred+0x1bc>)
 800355e:	400b      	ands	r3, r1
 8003560:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	431a      	orrs	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2220      	movs	r2, #32
 8003572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003586:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800358a:	4618      	mov	r0, r3
 800358c:	3728      	adds	r7, #40	; 0x28
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	fe00e800 	.word	0xfe00e800

08003598 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003598:	b480      	push	{r7}
 800359a:	b087      	sub	sp, #28
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	607b      	str	r3, [r7, #4]
 80035a2:	460b      	mov	r3, r1
 80035a4:	817b      	strh	r3, [r7, #10]
 80035a6:	4613      	mov	r3, r2
 80035a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035aa:	897b      	ldrh	r3, [r7, #10]
 80035ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035b0:	7a7b      	ldrb	r3, [r7, #9]
 80035b2:	041b      	lsls	r3, r3, #16
 80035b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035b8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80035c6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	6a3b      	ldr	r3, [r7, #32]
 80035d0:	0d5b      	lsrs	r3, r3, #21
 80035d2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80035d6:	4b08      	ldr	r3, [pc, #32]	; (80035f8 <I2C_TransferConfig+0x60>)
 80035d8:	430b      	orrs	r3, r1
 80035da:	43db      	mvns	r3, r3
 80035dc:	ea02 0103 	and.w	r1, r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80035ea:	bf00      	nop
 80035ec:	371c      	adds	r7, #28
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	03ff63ff 	.word	0x03ff63ff

080035fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b20      	cmp	r3, #32
 8003610:	d138      	bne.n	8003684 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003618:	2b01      	cmp	r3, #1
 800361a:	d101      	bne.n	8003620 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800361c:	2302      	movs	r3, #2
 800361e:	e032      	b.n	8003686 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2224      	movs	r2, #36	; 0x24
 800362c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0201 	bic.w	r2, r2, #1
 800363e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800364e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6819      	ldr	r1, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	430a      	orrs	r2, r1
 800365e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0201 	orr.w	r2, r2, #1
 800366e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2220      	movs	r2, #32
 8003674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003680:	2300      	movs	r3, #0
 8003682:	e000      	b.n	8003686 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003684:	2302      	movs	r3, #2
  }
}
 8003686:	4618      	mov	r0, r3
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003692:	b480      	push	{r7}
 8003694:	b085      	sub	sp, #20
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
 800369a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	2b20      	cmp	r3, #32
 80036a6:	d139      	bne.n	800371c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d101      	bne.n	80036b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80036b2:	2302      	movs	r3, #2
 80036b4:	e033      	b.n	800371e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2224      	movs	r2, #36	; 0x24
 80036c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 0201 	bic.w	r2, r2, #1
 80036d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80036e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	021b      	lsls	r3, r3, #8
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f042 0201 	orr.w	r2, r2, #1
 8003706:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003718:	2300      	movs	r3, #0
 800371a:	e000      	b.n	800371e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800371c:	2302      	movs	r3, #2
  }
}
 800371e:	4618      	mov	r0, r3
 8003720:	3714      	adds	r7, #20
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
	...

0800372c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8003734:	2300      	movs	r3, #0
 8003736:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d01e      	beq.n	800377c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800373e:	4b13      	ldr	r3, [pc, #76]	; (800378c <HAL_IPCC_Init+0x60>)
 8003740:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d102      	bne.n	8003754 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7fe fb90 	bl	8001e74 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8003754:	68b8      	ldr	r0, [r7, #8]
 8003756:	f000 f85b 	bl	8003810 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f82c 	bl	80037c4 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800377a:	e001      	b.n	8003780 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8003780:	7bfb      	ldrb	r3, [r7, #15]
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	58000c00 	.word	0x58000c00

08003790 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	4613      	mov	r3, r2
 800379c:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800379e:	bf00      	nop
 80037a0:	3714      	adds	r7, #20
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80037aa:	b480      	push	{r7}
 80037ac:	b085      	sub	sp, #20
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	60f8      	str	r0, [r7, #12]
 80037b2:	60b9      	str	r1, [r7, #8]
 80037b4:	4613      	mov	r3, r2
 80037b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80037b8:	bf00      	nop
 80037ba:	3714      	adds	r7, #20
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80037cc:	2300      	movs	r3, #0
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	e00f      	b.n	80037f2 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4413      	add	r3, r2
 80037da:	4a0b      	ldr	r2, [pc, #44]	; (8003808 <IPCC_SetDefaultCallbacks+0x44>)
 80037dc:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	3306      	adds	r3, #6
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4413      	add	r3, r2
 80037e8:	4a08      	ldr	r2, [pc, #32]	; (800380c <IPCC_SetDefaultCallbacks+0x48>)
 80037ea:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	3301      	adds	r3, #1
 80037f0:	60fb      	str	r3, [r7, #12]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2b05      	cmp	r3, #5
 80037f6:	d9ec      	bls.n	80037d2 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80037f8:	bf00      	nop
 80037fa:	bf00      	nop
 80037fc:	3714      	adds	r7, #20
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	08003791 	.word	0x08003791
 800380c:	080037ab 	.word	0x080037ab

08003810 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8003824:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	223f      	movs	r2, #63	; 0x3f
 800382a:	609a      	str	r2, [r3, #8]
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800383c:	4b05      	ldr	r3, [pc, #20]	; (8003854 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a04      	ldr	r2, [pc, #16]	; (8003854 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003846:	6013      	str	r3, [r2, #0]
}
 8003848:	bf00      	nop
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	58000400 	.word	0x58000400

08003858 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	460b      	mov	r3, r1
 8003862:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if (Regulator == PWR_LOWPOWERREGULATOR_ON)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800386a:	d104      	bne.n	8003876 <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 800386c:	78fb      	ldrb	r3, [r7, #3]
 800386e:	4618      	mov	r0, r3
 8003870:	f000 f84a 	bl	8003908 <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 8003874:	e003      	b.n	800387e <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 8003876:	78fb      	ldrb	r3, [r7, #3]
 8003878:	4618      	mov	r0, r3
 800387a:	f000 f81b 	bl	80038b4 <HAL_PWREx_EnterSTOP0Mode>
}
 800387e:	bf00      	nop
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
	...

08003888 <LL_PWR_EnableSRAM2Retention>:
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 800388c:	4b05      	ldr	r3, [pc, #20]	; (80038a4 <LL_PWR_EnableSRAM2Retention+0x1c>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	4a04      	ldr	r2, [pc, #16]	; (80038a4 <LL_PWR_EnableSRAM2Retention+0x1c>)
 8003892:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003896:	6093      	str	r3, [r2, #8]
}
 8003898:	bf00      	nop
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	58000400 	.word	0x58000400

080038a8 <HAL_PWREx_EnableSRAMRetention>:
  * @note   On devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx retention is extended
  *         to SRAM1, SRAM2a and SRAM2b.
  * @retval None
  */
void HAL_PWREx_EnableSRAMRetention(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  LL_PWR_EnableSRAM2Retention();
 80038ac:	f7ff ffec 	bl	8003888 <LL_PWR_EnableSRAM2Retention>
}
 80038b0:	bf00      	nop
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	4603      	mov	r3, r0
 80038bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 80038be:	4b10      	ldr	r3, [pc, #64]	; (8003900 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a0f      	ldr	r2, [pc, #60]	; (8003900 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 80038c4:	f023 0307 	bic.w	r3, r3, #7
 80038c8:	6013      	str	r3, [r2, #0]


  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80038ca:	4b0e      	ldr	r3, [pc, #56]	; (8003904 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	4a0d      	ldr	r2, [pc, #52]	; (8003904 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 80038d0:	f043 0304 	orr.w	r3, r3, #4
 80038d4:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80038d6:	79fb      	ldrb	r3, [r7, #7]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d101      	bne.n	80038e0 <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80038dc:	bf30      	wfi
 80038de:	e002      	b.n	80038e6 <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80038e0:	bf40      	sev
    __WFE();
 80038e2:	bf20      	wfe
    __WFE();
 80038e4:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80038e6:	4b07      	ldr	r3, [pc, #28]	; (8003904 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	4a06      	ldr	r2, [pc, #24]	; (8003904 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 80038ec:	f023 0304 	bic.w	r3, r3, #4
 80038f0:	6113      	str	r3, [r2, #16]
}
 80038f2:	bf00      	nop
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	58000400 	.word	0x58000400
 8003904:	e000ed00 	.word	0xe000ed00

08003908 <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	4603      	mov	r3, r0
 8003910:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8003912:	4b11      	ldr	r3, [pc, #68]	; (8003958 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f023 0307 	bic.w	r3, r3, #7
 800391a:	4a0f      	ldr	r2, [pc, #60]	; (8003958 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 800391c:	f043 0301 	orr.w	r3, r3, #1
 8003920:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003922:	4b0e      	ldr	r3, [pc, #56]	; (800395c <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	4a0d      	ldr	r2, [pc, #52]	; (800395c <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8003928:	f043 0304 	orr.w	r3, r3, #4
 800392c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800392e:	79fb      	ldrb	r3, [r7, #7]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d101      	bne.n	8003938 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003934:	bf30      	wfi
 8003936:	e002      	b.n	800393e <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003938:	bf40      	sev
    __WFE();
 800393a:	bf20      	wfe
    __WFE();
 800393c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800393e:	4b07      	ldr	r3, [pc, #28]	; (800395c <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	4a06      	ldr	r2, [pc, #24]	; (800395c <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8003944:	f023 0304 	bic.w	r3, r3, #4
 8003948:	6113      	str	r3, [r2, #16]
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	58000400 	.word	0x58000400
 800395c:	e000ed00 	.word	0xe000ed00

08003960 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800396e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003972:	d101      	bne.n	8003978 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003974:	2301      	movs	r3, #1
 8003976:	e000      	b.n	800397a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <LL_RCC_HSE_Enable>:
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003996:	6013      	str	r3, [r2, #0]
}
 8003998:	bf00      	nop
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <LL_RCC_HSE_Disable>:
{
 80039a2:	b480      	push	{r7}
 80039a4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80039a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039b4:	6013      	str	r3, [r2, #0]
}
 80039b6:	bf00      	nop
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <LL_RCC_HSE_IsReady>:
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80039c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039d2:	d101      	bne.n	80039d8 <LL_RCC_HSE_IsReady+0x18>
 80039d4:	2301      	movs	r3, #1
 80039d6:	e000      	b.n	80039da <LL_RCC_HSE_IsReady+0x1a>
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <LL_RCC_HSI_Enable>:
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80039e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039f6:	6013      	str	r3, [r2, #0]
}
 80039f8:	bf00      	nop
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <LL_RCC_HSI_Disable>:
{
 8003a02:	b480      	push	{r7}
 8003a04:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a14:	6013      	str	r3, [r2, #0]
}
 8003a16:	bf00      	nop
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <LL_RCC_HSI_IsReady>:
{
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a32:	d101      	bne.n	8003a38 <LL_RCC_HSI_IsReady+0x18>
 8003a34:	2301      	movs	r3, #1
 8003a36:	e000      	b.n	8003a3a <LL_RCC_HSI_IsReady+0x1a>
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	061b      	lsls	r3, r3, #24
 8003a5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	604b      	str	r3, [r1, #4]
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <LL_RCC_LSE_Enable>:
{
 8003a6e:	b480      	push	{r7}
 8003a70:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003a72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a7e:	f043 0301 	orr.w	r3, r3, #1
 8003a82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003a86:	bf00      	nop
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <LL_RCC_LSE_Disable>:
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003a94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003aa0:	f023 0301 	bic.w	r3, r3, #1
 8003aa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003aa8:	bf00      	nop
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr

08003ab2 <LL_RCC_LSE_EnableBypass>:
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003abe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ac2:	f043 0304 	orr.w	r3, r3, #4
 8003ac6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003aca:	bf00      	nop
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <LL_RCC_LSE_DisableBypass>:
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ae4:	f023 0304 	bic.w	r3, r3, #4
 8003ae8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003aec:	bf00      	nop
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr

08003af6 <LL_RCC_LSE_IsReady>:
{
 8003af6:	b480      	push	{r7}
 8003af8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d101      	bne.n	8003b0e <LL_RCC_LSE_IsReady+0x18>
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e000      	b.n	8003b10 <LL_RCC_LSE_IsReady+0x1a>
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <LL_RCC_LSI1_Enable>:
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b2a:	f043 0301 	orr.w	r3, r3, #1
 8003b2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003b32:	bf00      	nop
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <LL_RCC_LSI1_Disable>:
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b4c:	f023 0301 	bic.w	r3, r3, #1
 8003b50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003b54:	bf00      	nop
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <LL_RCC_LSI1_IsReady>:
{
 8003b5e:	b480      	push	{r7}
 8003b60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d101      	bne.n	8003b76 <LL_RCC_LSI1_IsReady+0x18>
 8003b72:	2301      	movs	r3, #1
 8003b74:	e000      	b.n	8003b78 <LL_RCC_LSI1_IsReady+0x1a>
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <LL_RCC_LSI2_Enable>:
{
 8003b82:	b480      	push	{r7}
 8003b84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b92:	f043 0304 	orr.w	r3, r3, #4
 8003b96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003b9a:	bf00      	nop
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <LL_RCC_LSI2_Disable>:
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bb4:	f023 0304 	bic.w	r3, r3, #4
 8003bb8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003bbc:	bf00      	nop
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr

08003bc6 <LL_RCC_LSI2_IsReady>:
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bd2:	f003 0308 	and.w	r3, r3, #8
 8003bd6:	2b08      	cmp	r3, #8
 8003bd8:	d101      	bne.n	8003bde <LL_RCC_LSI2_IsReady+0x18>
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e000      	b.n	8003be0 <LL_RCC_LSI2_IsReady+0x1a>
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr

08003bea <LL_RCC_LSI2_SetTrimming>:
{
 8003bea:	b480      	push	{r7}
 8003bec:	b083      	sub	sp, #12
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bfa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	021b      	lsls	r3, r3, #8
 8003c02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c06:	4313      	orrs	r3, r2
 8003c08:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <LL_RCC_MSI_Enable>:
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c26:	f043 0301 	orr.w	r3, r3, #1
 8003c2a:	6013      	str	r3, [r2, #0]
}
 8003c2c:	bf00      	nop
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <LL_RCC_MSI_Disable>:
{
 8003c36:	b480      	push	{r7}
 8003c38:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c44:	f023 0301 	bic.w	r3, r3, #1
 8003c48:	6013      	str	r3, [r2, #0]
}
 8003c4a:	bf00      	nop
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <LL_RCC_MSI_IsReady>:
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d101      	bne.n	8003c6a <LL_RCC_MSI_IsReady+0x16>
 8003c66:	2301      	movs	r3, #1
 8003c68:	e000      	b.n	8003c6c <LL_RCC_MSI_IsReady+0x18>
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <LL_RCC_MSI_SetRange>:
{
 8003c76:	b480      	push	{r7}
 8003c78:	b083      	sub	sp, #12
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	600b      	str	r3, [r1, #0]
}
 8003c92:	bf00      	nop
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <LL_RCC_MSI_GetRange>:
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cae:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2bb0      	cmp	r3, #176	; 0xb0
 8003cb4:	d901      	bls.n	8003cba <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003cb6:	23b0      	movs	r3, #176	; 0xb0
 8003cb8:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003cba:	687b      	ldr	r3, [r7, #4]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <LL_RCC_MSI_SetCalibTrimming>:
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	021b      	lsls	r3, r3, #8
 8003cde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	604b      	str	r3, [r1, #4]
}
 8003ce6:	bf00      	nop
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <LL_RCC_SetSysClkSource>:
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003cfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f023 0203 	bic.w	r2, r3, #3
 8003d04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	608b      	str	r3, [r1, #8]
}
 8003d0e:	bf00      	nop
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <LL_RCC_GetSysClkSource>:
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f003 030c 	and.w	r3, r3, #12
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <LL_RCC_SetAHBPrescaler>:
{
 8003d32:	b480      	push	{r7}
 8003d34:	b083      	sub	sp, #12
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	608b      	str	r3, [r1, #8]
}
 8003d4e:	bf00      	nop
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr

08003d5a <LL_C2_RCC_SetAHBPrescaler>:
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d66:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003d6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003d7a:	bf00      	nop
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <LL_RCC_SetAHB4Prescaler>:
{
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d92:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003d96:	f023 020f 	bic.w	r2, r3, #15
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	091b      	lsrs	r3, r3, #4
 8003d9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003da2:	4313      	orrs	r3, r2
 8003da4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <LL_RCC_SetAPB1Prescaler>:
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003dc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	608b      	str	r3, [r1, #8]
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <LL_RCC_SetAPB2Prescaler>:
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003dee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	608b      	str	r3, [r1, #8]
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <LL_RCC_GetAHBPrescaler>:
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <LL_RCC_GetAHB4Prescaler>:
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e24:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <LL_RCC_PLL_Enable>:
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e4a:	6013      	str	r3, [r2, #0]
}
 8003e4c:	bf00      	nop
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <LL_RCC_PLL_Disable>:
{
 8003e56:	b480      	push	{r7}
 8003e58:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003e5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e68:	6013      	str	r3, [r2, #0]
}
 8003e6a:	bf00      	nop
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <LL_RCC_PLL_IsReady>:
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e86:	d101      	bne.n	8003e8c <LL_RCC_PLL_IsReady+0x18>
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e000      	b.n	8003e8e <LL_RCC_PLL_IsReady+0x1a>
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <LL_RCC_PLL_GetN>:
{
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	0a1b      	lsrs	r3, r3, #8
 8003ea4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <LL_RCC_PLL_GetR>:
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <LL_RCC_PLL_GetDivider>:
{
 8003eca:	b480      	push	{r7}
 8003ecc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <LL_RCC_PLL_GetMainSource>:
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f003 0303 	and.w	r3, r3, #3
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <LL_RCC_IsActiveFlag_HPRE>:
{
 8003efa:	b480      	push	{r7}
 8003efc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f0c:	d101      	bne.n	8003f12 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e000      	b.n	8003f14 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8003f1e:	b480      	push	{r7}
 8003f20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f26:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f32:	d101      	bne.n	8003f38 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003f34:	2301      	movs	r3, #1
 8003f36:	e000      	b.n	8003f3a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f4c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f58:	d101      	bne.n	8003f5e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e000      	b.n	8003f60 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <LL_RCC_IsActiveFlag_PPRE1>:
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f7c:	d101      	bne.n	8003f82 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e000      	b.n	8003f84 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <LL_RCC_IsActiveFlag_PPRE2>:
{
 8003f8e:	b480      	push	{r7}
 8003f90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003fa0:	d101      	bne.n	8003fa6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e000      	b.n	8003fa8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
	...

08003fb4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fb4:	b590      	push	{r4, r7, lr}
 8003fb6:	b08d      	sub	sp, #52	; 0x34
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e324      	b.n	8004610 <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0320 	and.w	r3, r3, #32
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f000 808d 	beq.w	80040ee <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fd4:	f7ff fea1 	bl	8003d1a <LL_RCC_GetSysClkSource>
 8003fd8:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fda:	f7ff ff82 	bl	8003ee2 <LL_RCC_PLL_GetMainSource>
 8003fde:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d005      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x3e>
 8003fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe8:	2b0c      	cmp	r3, #12
 8003fea:	d147      	bne.n	800407c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d144      	bne.n	800407c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e308      	b.n	8004610 <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004002:	f7ff fe4c 	bl	8003c9e <LL_RCC_MSI_GetRange>
 8004006:	4603      	mov	r3, r0
 8004008:	429c      	cmp	r4, r3
 800400a:	d914      	bls.n	8004036 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004010:	4618      	mov	r0, r3
 8004012:	f000 fcc5 	bl	80049a0 <RCC_SetFlashLatencyFromMSIRange>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d001      	beq.n	8004020 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e2f7      	b.n	8004610 <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004024:	4618      	mov	r0, r3
 8004026:	f7ff fe26 	bl	8003c76 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	4618      	mov	r0, r3
 8004030:	f7ff fe4a 	bl	8003cc8 <LL_RCC_MSI_SetCalibTrimming>
 8004034:	e013      	b.n	800405e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403a:	4618      	mov	r0, r3
 800403c:	f7ff fe1b 	bl	8003c76 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	4618      	mov	r0, r3
 8004046:	f7ff fe3f 	bl	8003cc8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	4618      	mov	r0, r3
 8004050:	f000 fca6 	bl	80049a0 <RCC_SetFlashLatencyFromMSIRange>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e2d8      	b.n	8004610 <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800405e:	f000 fc8b 	bl	8004978 <HAL_RCC_GetHCLKFreq>
 8004062:	4603      	mov	r3, r0
 8004064:	4aa4      	ldr	r2, [pc, #656]	; (80042f8 <HAL_RCC_OscConfig+0x344>)
 8004066:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004068:	4ba4      	ldr	r3, [pc, #656]	; (80042fc <HAL_RCC_OscConfig+0x348>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4618      	mov	r0, r3
 800406e:	f7fe f855 	bl	800211c <HAL_InitTick>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d039      	beq.n	80040ec <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e2c9      	b.n	8004610 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	69db      	ldr	r3, [r3, #28]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d01e      	beq.n	80040c2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004084:	f7ff fdc8 	bl	8003c18 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004088:	f7fe f896 	bl	80021b8 <HAL_GetTick>
 800408c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004090:	f7fe f892 	bl	80021b8 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e2b6      	b.n	8004610 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 80040a2:	f7ff fdd7 	bl	8003c54 <LL_RCC_MSI_IsReady>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d0f1      	beq.n	8004090 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7ff fde0 	bl	8003c76 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7ff fe04 	bl	8003cc8 <LL_RCC_MSI_SetCalibTrimming>
 80040c0:	e015      	b.n	80040ee <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80040c2:	f7ff fdb8 	bl	8003c36 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80040c6:	f7fe f877 	bl	80021b8 <HAL_GetTick>
 80040ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80040cc:	e008      	b.n	80040e0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040ce:	f7fe f873 	bl	80021b8 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d901      	bls.n	80040e0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e297      	b.n	8004610 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 80040e0:	f7ff fdb8 	bl	8003c54 <LL_RCC_MSI_IsReady>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1f1      	bne.n	80040ce <HAL_RCC_OscConfig+0x11a>
 80040ea:	e000      	b.n	80040ee <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80040ec:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d047      	beq.n	800418a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040fa:	f7ff fe0e 	bl	8003d1a <LL_RCC_GetSysClkSource>
 80040fe:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004100:	f7ff feef 	bl	8003ee2 <LL_RCC_PLL_GetMainSource>
 8004104:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004106:	6a3b      	ldr	r3, [r7, #32]
 8004108:	2b08      	cmp	r3, #8
 800410a:	d005      	beq.n	8004118 <HAL_RCC_OscConfig+0x164>
 800410c:	6a3b      	ldr	r3, [r7, #32]
 800410e:	2b0c      	cmp	r3, #12
 8004110:	d108      	bne.n	8004124 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	2b03      	cmp	r3, #3
 8004116:	d105      	bne.n	8004124 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d134      	bne.n	800418a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e275      	b.n	8004610 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800412c:	d102      	bne.n	8004134 <HAL_RCC_OscConfig+0x180>
 800412e:	f7ff fc29 	bl	8003984 <LL_RCC_HSE_Enable>
 8004132:	e001      	b.n	8004138 <HAL_RCC_OscConfig+0x184>
 8004134:	f7ff fc35 	bl	80039a2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d012      	beq.n	8004166 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004140:	f7fe f83a 	bl	80021b8 <HAL_GetTick>
 8004144:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004146:	e008      	b.n	800415a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004148:	f7fe f836 	bl	80021b8 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b64      	cmp	r3, #100	; 0x64
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e25a      	b.n	8004610 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 800415a:	f7ff fc31 	bl	80039c0 <LL_RCC_HSE_IsReady>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d0f1      	beq.n	8004148 <HAL_RCC_OscConfig+0x194>
 8004164:	e011      	b.n	800418a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004166:	f7fe f827 	bl	80021b8 <HAL_GetTick>
 800416a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800416c:	e008      	b.n	8004180 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800416e:	f7fe f823 	bl	80021b8 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b64      	cmp	r3, #100	; 0x64
 800417a:	d901      	bls.n	8004180 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e247      	b.n	8004610 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004180:	f7ff fc1e 	bl	80039c0 <LL_RCC_HSE_IsReady>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1f1      	bne.n	800416e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d04c      	beq.n	8004230 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004196:	f7ff fdc0 	bl	8003d1a <LL_RCC_GetSysClkSource>
 800419a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800419c:	f7ff fea1 	bl	8003ee2 <LL_RCC_PLL_GetMainSource>
 80041a0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	2b04      	cmp	r3, #4
 80041a6:	d005      	beq.n	80041b4 <HAL_RCC_OscConfig+0x200>
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	2b0c      	cmp	r3, #12
 80041ac:	d10e      	bne.n	80041cc <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d10b      	bne.n	80041cc <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d101      	bne.n	80041c0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e227      	b.n	8004610 <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7ff fc3d 	bl	8003a44 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80041ca:	e031      	b.n	8004230 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d019      	beq.n	8004208 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041d4:	f7ff fc06 	bl	80039e4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d8:	f7fd ffee 	bl	80021b8 <HAL_GetTick>
 80041dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80041de:	e008      	b.n	80041f2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041e0:	f7fd ffea 	bl	80021b8 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e20e      	b.n	8004610 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 80041f2:	f7ff fc15 	bl	8003a20 <LL_RCC_HSI_IsReady>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d0f1      	beq.n	80041e0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	4618      	mov	r0, r3
 8004202:	f7ff fc1f 	bl	8003a44 <LL_RCC_HSI_SetCalibTrimming>
 8004206:	e013      	b.n	8004230 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004208:	f7ff fbfb 	bl	8003a02 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800420c:	f7fd ffd4 	bl	80021b8 <HAL_GetTick>
 8004210:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004212:	e008      	b.n	8004226 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004214:	f7fd ffd0 	bl	80021b8 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e1f4      	b.n	8004610 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004226:	f7ff fbfb 	bl	8003a20 <LL_RCC_HSI_IsReady>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1f1      	bne.n	8004214 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0308 	and.w	r3, r3, #8
 8004238:	2b00      	cmp	r3, #0
 800423a:	d106      	bne.n	800424a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 80a3 	beq.w	8004390 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d076      	beq.n	8004340 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0310 	and.w	r3, r3, #16
 800425a:	2b00      	cmp	r3, #0
 800425c:	d046      	beq.n	80042ec <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800425e:	f7ff fc7e 	bl	8003b5e <LL_RCC_LSI1_IsReady>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d113      	bne.n	8004290 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004268:	f7ff fc57 	bl	8003b1a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800426c:	f7fd ffa4 	bl	80021b8 <HAL_GetTick>
 8004270:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004272:	e008      	b.n	8004286 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004274:	f7fd ffa0 	bl	80021b8 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b02      	cmp	r3, #2
 8004280:	d901      	bls.n	8004286 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e1c4      	b.n	8004610 <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004286:	f7ff fc6a 	bl	8003b5e <LL_RCC_LSI1_IsReady>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d0f1      	beq.n	8004274 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004290:	f7ff fc77 	bl	8003b82 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004294:	f7fd ff90 	bl	80021b8 <HAL_GetTick>
 8004298:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800429c:	f7fd ff8c 	bl	80021b8 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b03      	cmp	r3, #3
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e1b0      	b.n	8004610 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80042ae:	f7ff fc8a 	bl	8003bc6 <LL_RCC_LSI2_IsReady>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d0f1      	beq.n	800429c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	4618      	mov	r0, r3
 80042be:	f7ff fc94 	bl	8003bea <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80042c2:	f7ff fc3b 	bl	8003b3c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c6:	f7fd ff77 	bl	80021b8 <HAL_GetTick>
 80042ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80042cc:	e008      	b.n	80042e0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80042ce:	f7fd ff73 	bl	80021b8 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d901      	bls.n	80042e0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e197      	b.n	8004610 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80042e0:	f7ff fc3d 	bl	8003b5e <LL_RCC_LSI1_IsReady>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1f1      	bne.n	80042ce <HAL_RCC_OscConfig+0x31a>
 80042ea:	e051      	b.n	8004390 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80042ec:	f7ff fc15 	bl	8003b1a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f0:	f7fd ff62 	bl	80021b8 <HAL_GetTick>
 80042f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80042f6:	e00c      	b.n	8004312 <HAL_RCC_OscConfig+0x35e>
 80042f8:	20000010 	.word	0x20000010
 80042fc:	20000014 	.word	0x20000014
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004300:	f7fd ff5a 	bl	80021b8 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b02      	cmp	r3, #2
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e17e      	b.n	8004610 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004312:	f7ff fc24 	bl	8003b5e <LL_RCC_LSI1_IsReady>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d0f1      	beq.n	8004300 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800431c:	f7ff fc42 	bl	8003ba4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004320:	e008      	b.n	8004334 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004322:	f7fd ff49 	bl	80021b8 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b03      	cmp	r3, #3
 800432e:	d901      	bls.n	8004334 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e16d      	b.n	8004610 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004334:	f7ff fc47 	bl	8003bc6 <LL_RCC_LSI2_IsReady>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1f1      	bne.n	8004322 <HAL_RCC_OscConfig+0x36e>
 800433e:	e027      	b.n	8004390 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004340:	f7ff fc30 	bl	8003ba4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004344:	f7fd ff38 	bl	80021b8 <HAL_GetTick>
 8004348:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800434c:	f7fd ff34 	bl	80021b8 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b03      	cmp	r3, #3
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e158      	b.n	8004610 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800435e:	f7ff fc32 	bl	8003bc6 <LL_RCC_LSI2_IsReady>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1f1      	bne.n	800434c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004368:	f7ff fbe8 	bl	8003b3c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800436c:	f7fd ff24 	bl	80021b8 <HAL_GetTick>
 8004370:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004374:	f7fd ff20 	bl	80021b8 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b02      	cmp	r3, #2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e144      	b.n	8004610 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004386:	f7ff fbea 	bl	8003b5e <LL_RCC_LSI1_IsReady>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1f1      	bne.n	8004374 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0304 	and.w	r3, r3, #4
 8004398:	2b00      	cmp	r3, #0
 800439a:	d05b      	beq.n	8004454 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800439c:	4b9e      	ldr	r3, [pc, #632]	; (8004618 <HAL_RCC_OscConfig+0x664>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d114      	bne.n	80043d2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80043a8:	f7ff fa46 	bl	8003838 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043ac:	f7fd ff04 	bl	80021b8 <HAL_GetTick>
 80043b0:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043b2:	e008      	b.n	80043c6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043b4:	f7fd ff00 	bl	80021b8 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e124      	b.n	8004610 <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043c6:	4b94      	ldr	r3, [pc, #592]	; (8004618 <HAL_RCC_OscConfig+0x664>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d0f0      	beq.n	80043b4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d102      	bne.n	80043e0 <HAL_RCC_OscConfig+0x42c>
 80043da:	f7ff fb48 	bl	8003a6e <LL_RCC_LSE_Enable>
 80043de:	e00c      	b.n	80043fa <HAL_RCC_OscConfig+0x446>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	2b05      	cmp	r3, #5
 80043e6:	d104      	bne.n	80043f2 <HAL_RCC_OscConfig+0x43e>
 80043e8:	f7ff fb63 	bl	8003ab2 <LL_RCC_LSE_EnableBypass>
 80043ec:	f7ff fb3f 	bl	8003a6e <LL_RCC_LSE_Enable>
 80043f0:	e003      	b.n	80043fa <HAL_RCC_OscConfig+0x446>
 80043f2:	f7ff fb4d 	bl	8003a90 <LL_RCC_LSE_Disable>
 80043f6:	f7ff fb6d 	bl	8003ad4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d014      	beq.n	800442c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004402:	f7fd fed9 	bl	80021b8 <HAL_GetTick>
 8004406:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004408:	e00a      	b.n	8004420 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800440a:	f7fd fed5 	bl	80021b8 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	f241 3288 	movw	r2, #5000	; 0x1388
 8004418:	4293      	cmp	r3, r2
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e0f7      	b.n	8004610 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004420:	f7ff fb69 	bl	8003af6 <LL_RCC_LSE_IsReady>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d0ef      	beq.n	800440a <HAL_RCC_OscConfig+0x456>
 800442a:	e013      	b.n	8004454 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800442c:	f7fd fec4 	bl	80021b8 <HAL_GetTick>
 8004430:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004432:	e00a      	b.n	800444a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004434:	f7fd fec0 	bl	80021b8 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004442:	4293      	cmp	r3, r2
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e0e2      	b.n	8004610 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 800444a:	f7ff fb54 	bl	8003af6 <LL_RCC_LSE_IsReady>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1ef      	bne.n	8004434 <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 80d8 	beq.w	800460e <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800445e:	f7ff fc5c 	bl	8003d1a <LL_RCC_GetSysClkSource>
 8004462:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004470:	2b02      	cmp	r3, #2
 8004472:	f040 80a6 	bne.w	80045c2 <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f003 0203 	and.w	r2, r3, #3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004480:	429a      	cmp	r2, r3
 8004482:	d123      	bne.n	80044cc <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800448e:	429a      	cmp	r2, r3
 8004490:	d11c      	bne.n	80044cc <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	0a1b      	lsrs	r3, r3, #8
 8004496:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800449e:	429a      	cmp	r2, r3
 80044a0:	d114      	bne.n	80044cc <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d10d      	bne.n	80044cc <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d106      	bne.n	80044cc <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d054      	beq.n	8004576 <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	2b0c      	cmp	r3, #12
 80044d0:	d04f      	beq.n	8004572 <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80044d2:	f7ff fcc0 	bl	8003e56 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80044d6:	f7fd fe6f 	bl	80021b8 <HAL_GetTick>
 80044da:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044dc:	e008      	b.n	80044f0 <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044de:	f7fd fe6b 	bl	80021b8 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d901      	bls.n	80044f0 <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e08f      	b.n	8004610 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1ef      	bne.n	80044de <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004502:	68da      	ldr	r2, [r3, #12]
 8004504:	4b45      	ldr	r3, [pc, #276]	; (800461c <HAL_RCC_OscConfig+0x668>)
 8004506:	4013      	ands	r3, r2
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004510:	4311      	orrs	r1, r2
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004516:	0212      	lsls	r2, r2, #8
 8004518:	4311      	orrs	r1, r2
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800451e:	4311      	orrs	r1, r2
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004524:	4311      	orrs	r1, r2
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800452a:	430a      	orrs	r2, r1
 800452c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004530:	4313      	orrs	r3, r2
 8004532:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004534:	f7ff fc80 	bl	8003e38 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004546:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004548:	f7fd fe36 	bl	80021b8 <HAL_GetTick>
 800454c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800454e:	e008      	b.n	8004562 <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004550:	f7fd fe32 	bl	80021b8 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b02      	cmp	r3, #2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e056      	b.n	8004610 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d0ef      	beq.n	8004550 <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004570:	e04d      	b.n	800460e <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e04c      	b.n	8004610 <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004576:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d144      	bne.n	800460e <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004584:	f7ff fc58 	bl	8003e38 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004596:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004598:	f7fd fe0e 	bl	80021b8 <HAL_GetTick>
 800459c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045a0:	f7fd fe0a 	bl	80021b8 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e02e      	b.n	8004610 <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d0ef      	beq.n	80045a0 <HAL_RCC_OscConfig+0x5ec>
 80045c0:	e025      	b.n	800460e <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	2b0c      	cmp	r3, #12
 80045c6:	d020      	beq.n	800460a <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045c8:	f7ff fc45 	bl	8003e56 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045cc:	f7fd fdf4 	bl	80021b8 <HAL_GetTick>
 80045d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045d4:	f7fd fdf0 	bl	80021b8 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e014      	b.n	8004610 <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1ef      	bne.n	80045d4 <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 80045f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004602:	f023 0303 	bic.w	r3, r3, #3
 8004606:	60d3      	str	r3, [r2, #12]
 8004608:	e001      	b.n	800460e <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e000      	b.n	8004610 <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3734      	adds	r7, #52	; 0x34
 8004614:	46bd      	mov	sp, r7
 8004616:	bd90      	pop	{r4, r7, pc}
 8004618:	58000400 	.word	0x58000400
 800461c:	11c1808c 	.word	0x11c1808c

08004620 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d101      	bne.n	8004634 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e12d      	b.n	8004890 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004634:	4b98      	ldr	r3, [pc, #608]	; (8004898 <HAL_RCC_ClockConfig+0x278>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0307 	and.w	r3, r3, #7
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	429a      	cmp	r2, r3
 8004640:	d91b      	bls.n	800467a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004642:	4b95      	ldr	r3, [pc, #596]	; (8004898 <HAL_RCC_ClockConfig+0x278>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f023 0207 	bic.w	r2, r3, #7
 800464a:	4993      	ldr	r1, [pc, #588]	; (8004898 <HAL_RCC_ClockConfig+0x278>)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	4313      	orrs	r3, r2
 8004650:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004652:	f7fd fdb1 	bl	80021b8 <HAL_GetTick>
 8004656:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004658:	e008      	b.n	800466c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800465a:	f7fd fdad 	bl	80021b8 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d901      	bls.n	800466c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e111      	b.n	8004890 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800466c:	4b8a      	ldr	r3, [pc, #552]	; (8004898 <HAL_RCC_ClockConfig+0x278>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0307 	and.w	r3, r3, #7
 8004674:	683a      	ldr	r2, [r7, #0]
 8004676:	429a      	cmp	r2, r3
 8004678:	d1ef      	bne.n	800465a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d016      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	4618      	mov	r0, r3
 800468c:	f7ff fb51 	bl	8003d32 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004690:	f7fd fd92 	bl	80021b8 <HAL_GetTick>
 8004694:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004696:	e008      	b.n	80046aa <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004698:	f7fd fd8e 	bl	80021b8 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e0f2      	b.n	8004890 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80046aa:	f7ff fc26 	bl	8003efa <LL_RCC_IsActiveFlag_HPRE>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0f1      	beq.n	8004698 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0320 	and.w	r3, r3, #32
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d016      	beq.n	80046ee <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7ff fb48 	bl	8003d5a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80046ca:	f7fd fd75 	bl	80021b8 <HAL_GetTick>
 80046ce:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80046d2:	f7fd fd71 	bl	80021b8 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e0d5      	b.n	8004890 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80046e4:	f7ff fc1b 	bl	8003f1e <LL_RCC_IsActiveFlag_C2HPRE>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d0f1      	beq.n	80046d2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d016      	beq.n	8004728 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	4618      	mov	r0, r3
 8004700:	f7ff fb41 	bl	8003d86 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004704:	f7fd fd58 	bl	80021b8 <HAL_GetTick>
 8004708:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800470a:	e008      	b.n	800471e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800470c:	f7fd fd54 	bl	80021b8 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d901      	bls.n	800471e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e0b8      	b.n	8004890 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800471e:	f7ff fc11 	bl	8003f44 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d0f1      	beq.n	800470c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0304 	and.w	r3, r3, #4
 8004730:	2b00      	cmp	r3, #0
 8004732:	d016      	beq.n	8004762 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	4618      	mov	r0, r3
 800473a:	f7ff fb3b 	bl	8003db4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800473e:	f7fd fd3b 	bl	80021b8 <HAL_GetTick>
 8004742:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004744:	e008      	b.n	8004758 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004746:	f7fd fd37 	bl	80021b8 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b02      	cmp	r3, #2
 8004752:	d901      	bls.n	8004758 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e09b      	b.n	8004890 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004758:	f7ff fc07 	bl	8003f6a <LL_RCC_IsActiveFlag_PPRE1>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d0f1      	beq.n	8004746 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0308 	and.w	r3, r3, #8
 800476a:	2b00      	cmp	r3, #0
 800476c:	d017      	beq.n	800479e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	4618      	mov	r0, r3
 8004776:	f7ff fb31 	bl	8003ddc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800477a:	f7fd fd1d 	bl	80021b8 <HAL_GetTick>
 800477e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004780:	e008      	b.n	8004794 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004782:	f7fd fd19 	bl	80021b8 <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	2b02      	cmp	r3, #2
 800478e:	d901      	bls.n	8004794 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e07d      	b.n	8004890 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004794:	f7ff fbfb 	bl	8003f8e <LL_RCC_IsActiveFlag_PPRE2>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d0f1      	beq.n	8004782 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d043      	beq.n	8004832 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d106      	bne.n	80047c0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80047b2:	f7ff f905 	bl	80039c0 <LL_RCC_HSE_IsReady>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d11e      	bne.n	80047fa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e067      	b.n	8004890 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	2b03      	cmp	r3, #3
 80047c6:	d106      	bne.n	80047d6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80047c8:	f7ff fb54 	bl	8003e74 <LL_RCC_PLL_IsReady>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d113      	bne.n	80047fa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e05c      	b.n	8004890 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d106      	bne.n	80047ec <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80047de:	f7ff fa39 	bl	8003c54 <LL_RCC_MSI_IsReady>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d108      	bne.n	80047fa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e051      	b.n	8004890 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80047ec:	f7ff f918 	bl	8003a20 <LL_RCC_HSI_IsReady>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e04a      	b.n	8004890 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	4618      	mov	r0, r3
 8004800:	f7ff fa77 	bl	8003cf2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004804:	f7fd fcd8 	bl	80021b8 <HAL_GetTick>
 8004808:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800480a:	e00a      	b.n	8004822 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800480c:	f7fd fcd4 	bl	80021b8 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	f241 3288 	movw	r2, #5000	; 0x1388
 800481a:	4293      	cmp	r3, r2
 800481c:	d901      	bls.n	8004822 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e036      	b.n	8004890 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004822:	f7ff fa7a 	bl	8003d1a <LL_RCC_GetSysClkSource>
 8004826:	4602      	mov	r2, r0
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	429a      	cmp	r2, r3
 8004830:	d1ec      	bne.n	800480c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004832:	4b19      	ldr	r3, [pc, #100]	; (8004898 <HAL_RCC_ClockConfig+0x278>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0307 	and.w	r3, r3, #7
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	429a      	cmp	r2, r3
 800483e:	d21b      	bcs.n	8004878 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004840:	4b15      	ldr	r3, [pc, #84]	; (8004898 <HAL_RCC_ClockConfig+0x278>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f023 0207 	bic.w	r2, r3, #7
 8004848:	4913      	ldr	r1, [pc, #76]	; (8004898 <HAL_RCC_ClockConfig+0x278>)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	4313      	orrs	r3, r2
 800484e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004850:	f7fd fcb2 	bl	80021b8 <HAL_GetTick>
 8004854:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004856:	e008      	b.n	800486a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004858:	f7fd fcae 	bl	80021b8 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b02      	cmp	r3, #2
 8004864:	d901      	bls.n	800486a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e012      	b.n	8004890 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800486a:	4b0b      	ldr	r3, [pc, #44]	; (8004898 <HAL_RCC_ClockConfig+0x278>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0307 	and.w	r3, r3, #7
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	429a      	cmp	r2, r3
 8004876:	d1ef      	bne.n	8004858 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004878:	f000 f87e 	bl	8004978 <HAL_RCC_GetHCLKFreq>
 800487c:	4603      	mov	r3, r0
 800487e:	4a07      	ldr	r2, [pc, #28]	; (800489c <HAL_RCC_ClockConfig+0x27c>)
 8004880:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004882:	f7fd fca5 	bl	80021d0 <HAL_GetTickPrio>
 8004886:	4603      	mov	r3, r0
 8004888:	4618      	mov	r0, r3
 800488a:	f7fd fc47 	bl	800211c <HAL_InitTick>
 800488e:	4603      	mov	r3, r0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	58004000 	.word	0x58004000
 800489c:	20000010 	.word	0x20000010

080048a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048a0:	b590      	push	{r4, r7, lr}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048a6:	f7ff fa38 	bl	8003d1a <LL_RCC_GetSysClkSource>
 80048aa:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10a      	bne.n	80048c8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80048b2:	f7ff f9f4 	bl	8003c9e <LL_RCC_MSI_GetRange>
 80048b6:	4603      	mov	r3, r0
 80048b8:	091b      	lsrs	r3, r3, #4
 80048ba:	f003 030f 	and.w	r3, r3, #15
 80048be:	4a2b      	ldr	r2, [pc, #172]	; (800496c <HAL_RCC_GetSysClockFreq+0xcc>)
 80048c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048c4:	60fb      	str	r3, [r7, #12]
 80048c6:	e04b      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b04      	cmp	r3, #4
 80048cc:	d102      	bne.n	80048d4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80048ce:	4b28      	ldr	r3, [pc, #160]	; (8004970 <HAL_RCC_GetSysClockFreq+0xd0>)
 80048d0:	60fb      	str	r3, [r7, #12]
 80048d2:	e045      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b08      	cmp	r3, #8
 80048d8:	d10a      	bne.n	80048f0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80048da:	f7ff f841 	bl	8003960 <LL_RCC_HSE_IsEnabledDiv2>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d102      	bne.n	80048ea <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80048e4:	4b22      	ldr	r3, [pc, #136]	; (8004970 <HAL_RCC_GetSysClockFreq+0xd0>)
 80048e6:	60fb      	str	r3, [r7, #12]
 80048e8:	e03a      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80048ea:	4b22      	ldr	r3, [pc, #136]	; (8004974 <HAL_RCC_GetSysClockFreq+0xd4>)
 80048ec:	60fb      	str	r3, [r7, #12]
 80048ee:	e037      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80048f0:	f7ff faf7 	bl	8003ee2 <LL_RCC_PLL_GetMainSource>
 80048f4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d003      	beq.n	8004904 <HAL_RCC_GetSysClockFreq+0x64>
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	2b03      	cmp	r3, #3
 8004900:	d003      	beq.n	800490a <HAL_RCC_GetSysClockFreq+0x6a>
 8004902:	e00d      	b.n	8004920 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004904:	4b1a      	ldr	r3, [pc, #104]	; (8004970 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004906:	60bb      	str	r3, [r7, #8]
        break;
 8004908:	e015      	b.n	8004936 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800490a:	f7ff f829 	bl	8003960 <LL_RCC_HSE_IsEnabledDiv2>
 800490e:	4603      	mov	r3, r0
 8004910:	2b01      	cmp	r3, #1
 8004912:	d102      	bne.n	800491a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004914:	4b16      	ldr	r3, [pc, #88]	; (8004970 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004916:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004918:	e00d      	b.n	8004936 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800491a:	4b16      	ldr	r3, [pc, #88]	; (8004974 <HAL_RCC_GetSysClockFreq+0xd4>)
 800491c:	60bb      	str	r3, [r7, #8]
        break;
 800491e:	e00a      	b.n	8004936 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004920:	f7ff f9bd 	bl	8003c9e <LL_RCC_MSI_GetRange>
 8004924:	4603      	mov	r3, r0
 8004926:	091b      	lsrs	r3, r3, #4
 8004928:	f003 030f 	and.w	r3, r3, #15
 800492c:	4a0f      	ldr	r2, [pc, #60]	; (800496c <HAL_RCC_GetSysClockFreq+0xcc>)
 800492e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004932:	60bb      	str	r3, [r7, #8]
        break;
 8004934:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004936:	f7ff faaf 	bl	8003e98 <LL_RCC_PLL_GetN>
 800493a:	4602      	mov	r2, r0
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	fb03 f402 	mul.w	r4, r3, r2
 8004942:	f7ff fac2 	bl	8003eca <LL_RCC_PLL_GetDivider>
 8004946:	4603      	mov	r3, r0
 8004948:	091b      	lsrs	r3, r3, #4
 800494a:	3301      	adds	r3, #1
 800494c:	fbb4 f4f3 	udiv	r4, r4, r3
 8004950:	f7ff faaf 	bl	8003eb2 <LL_RCC_PLL_GetR>
 8004954:	4603      	mov	r3, r0
 8004956:	0f5b      	lsrs	r3, r3, #29
 8004958:	3301      	adds	r3, #1
 800495a:	fbb4 f3f3 	udiv	r3, r4, r3
 800495e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004960:	68fb      	ldr	r3, [r7, #12]
}
 8004962:	4618      	mov	r0, r3
 8004964:	3714      	adds	r7, #20
 8004966:	46bd      	mov	sp, r7
 8004968:	bd90      	pop	{r4, r7, pc}
 800496a:	bf00      	nop
 800496c:	08008248 	.word	0x08008248
 8004970:	00f42400 	.word	0x00f42400
 8004974:	01e84800 	.word	0x01e84800

08004978 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004978:	b598      	push	{r3, r4, r7, lr}
 800497a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800497c:	f7ff ff90 	bl	80048a0 <HAL_RCC_GetSysClockFreq>
 8004980:	4604      	mov	r4, r0
 8004982:	f7ff fa3f 	bl	8003e04 <LL_RCC_GetAHBPrescaler>
 8004986:	4603      	mov	r3, r0
 8004988:	091b      	lsrs	r3, r3, #4
 800498a:	f003 030f 	and.w	r3, r3, #15
 800498e:	4a03      	ldr	r2, [pc, #12]	; (800499c <HAL_RCC_GetHCLKFreq+0x24>)
 8004990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004994:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004998:	4618      	mov	r0, r3
 800499a:	bd98      	pop	{r3, r4, r7, pc}
 800499c:	08008208 	.word	0x08008208

080049a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2bb0      	cmp	r3, #176	; 0xb0
 80049ac:	d903      	bls.n	80049b6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80049ae:	4b14      	ldr	r3, [pc, #80]	; (8004a00 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 80049b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	e007      	b.n	80049c6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	091b      	lsrs	r3, r3, #4
 80049ba:	f003 030f 	and.w	r3, r3, #15
 80049be:	4a10      	ldr	r2, [pc, #64]	; (8004a00 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 80049c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049c4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80049c6:	f7ff fa29 	bl	8003e1c <LL_RCC_GetAHB4Prescaler>
 80049ca:	4603      	mov	r3, r0
 80049cc:	091b      	lsrs	r3, r3, #4
 80049ce:	f003 030f 	and.w	r3, r3, #15
 80049d2:	4a0c      	ldr	r2, [pc, #48]	; (8004a04 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80049d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	fbb2 f3f3 	udiv	r3, r2, r3
 80049de:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	4a09      	ldr	r2, [pc, #36]	; (8004a08 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80049e4:	fba2 2303 	umull	r2, r3, r2, r3
 80049e8:	0c9b      	lsrs	r3, r3, #18
 80049ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80049ee:	4618      	mov	r0, r3
 80049f0:	f000 f80c 	bl	8004a0c <RCC_SetFlashLatency>
 80049f4:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	08008248 	.word	0x08008248
 8004a04:	08008208 	.word	0x08008208
 8004a08:	431bde83 	.word	0x431bde83

08004a0c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004a0c:	b590      	push	{r4, r7, lr}
 8004a0e:	b08f      	sub	sp, #60	; 0x3c
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004a16:	4b24      	ldr	r3, [pc, #144]	; (8004aa8 <RCC_SetFlashLatency+0x9c>)
 8004a18:	f107 041c 	add.w	r4, r7, #28
 8004a1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004a22:	4b22      	ldr	r3, [pc, #136]	; (8004aac <RCC_SetFlashLatency+0xa0>)
 8004a24:	f107 040c 	add.w	r4, r7, #12
 8004a28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004a2e:	2300      	movs	r3, #0
 8004a30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004a32:	2300      	movs	r3, #0
 8004a34:	633b      	str	r3, [r7, #48]	; 0x30
 8004a36:	e013      	b.n	8004a60 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	3338      	adds	r3, #56	; 0x38
 8004a3e:	443b      	add	r3, r7
 8004a40:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d807      	bhi.n	8004a5a <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 8004a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	3338      	adds	r3, #56	; 0x38
 8004a50:	443b      	add	r3, r7
 8004a52:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004a56:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8004a58:	e005      	b.n	8004a66 <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	633b      	str	r3, [r7, #48]	; 0x30
 8004a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a62:	2b03      	cmp	r3, #3
 8004a64:	d9e8      	bls.n	8004a38 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004a66:	4b12      	ldr	r3, [pc, #72]	; (8004ab0 <RCC_SetFlashLatency+0xa4>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f023 0207 	bic.w	r2, r3, #7
 8004a6e:	4910      	ldr	r1, [pc, #64]	; (8004ab0 <RCC_SetFlashLatency+0xa4>)
 8004a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a72:	4313      	orrs	r3, r2
 8004a74:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004a76:	f7fd fb9f 	bl	80021b8 <HAL_GetTick>
 8004a7a:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004a7c:	e008      	b.n	8004a90 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004a7e:	f7fd fb9b 	bl	80021b8 <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d901      	bls.n	8004a90 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e007      	b.n	8004aa0 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004a90:	4b07      	ldr	r3, [pc, #28]	; (8004ab0 <RCC_SetFlashLatency+0xa4>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0307 	and.w	r3, r3, #7
 8004a98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d1ef      	bne.n	8004a7e <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	373c      	adds	r7, #60	; 0x3c
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd90      	pop	{r4, r7, pc}
 8004aa8:	08008048 	.word	0x08008048
 8004aac:	08008058 	.word	0x08008058
 8004ab0:	58004000 	.word	0x58004000

08004ab4 <LL_RCC_LSE_IsEnabled>:
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac0:	f003 0301 	and.w	r3, r3, #1
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d101      	bne.n	8004acc <LL_RCC_LSE_IsEnabled+0x18>
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e000      	b.n	8004ace <LL_RCC_LSE_IsEnabled+0x1a>
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <LL_RCC_LSE_IsReady>:
{
 8004ad8:	b480      	push	{r7}
 8004ada:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d101      	bne.n	8004af0 <LL_RCC_LSE_IsReady+0x18>
 8004aec:	2301      	movs	r3, #1
 8004aee:	e000      	b.n	8004af2 <LL_RCC_LSE_IsReady+0x1a>
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <LL_RCC_SetRFWKPClockSource>:
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b0c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <LL_RCC_SetSMPSClockSource>:
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b36:	f023 0203 	bic.w	r2, r3, #3
 8004b3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <LL_RCC_SetSMPSPrescaler>:
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004b58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004b6c:	bf00      	nop
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <LL_RCC_SetUSARTClockSource>:
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b88:	f023 0203 	bic.w	r2, r3, #3
 8004b8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004b98:	bf00      	nop
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <LL_RCC_SetLPUARTClockSource>:
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004bb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <LL_RCC_SetI2CClockSource>:
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bdc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	091b      	lsrs	r3, r3, #4
 8004be4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004be8:	43db      	mvns	r3, r3
 8004bea:	401a      	ands	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	011b      	lsls	r3, r3, #4
 8004bf0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004bf4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004bfe:	bf00      	nop
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <LL_RCC_SetLPTIMClockSource>:
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	b083      	sub	sp, #12
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004c12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c16:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	0c1b      	lsrs	r3, r3, #16
 8004c1e:	041b      	lsls	r3, r3, #16
 8004c20:	43db      	mvns	r3, r3
 8004c22:	401a      	ands	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	041b      	lsls	r3, r3, #16
 8004c28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004c32:	bf00      	nop
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <LL_RCC_SetRNGClockSource>:
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b083      	sub	sp, #12
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c4e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004c52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004c5e:	bf00      	nop
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <LL_RCC_SetCLK48ClockSource>:
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	b083      	sub	sp, #12
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004c8a:	bf00      	nop
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <LL_RCC_SetADCClockSource>:
{
 8004c96:	b480      	push	{r7}
 8004c98:	b083      	sub	sp, #12
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004caa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004cb6:	bf00      	nop
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <LL_RCC_SetRTCClockSource>:
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b083      	sub	sp, #12
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004ce2:	bf00      	nop
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <LL_RCC_GetRTCClockSource>:
{
 8004cee:	b480      	push	{r7}
 8004cf0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <LL_RCC_ForceBackupDomainReset>:
{
 8004d08:	b480      	push	{r7}
 8004d0a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004d20:	bf00      	nop
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <LL_RCC_ReleaseBackupDomainReset>:
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004d42:	bf00      	nop
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b088      	sub	sp, #32
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004d54:	2300      	movs	r3, #0
 8004d56:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004d58:	2300      	movs	r3, #0
 8004d5a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d046      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004d68:	f7ff ffc1 	bl	8004cee <LL_RCC_GetRTCClockSource>
 8004d6c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	69ba      	ldr	r2, [r7, #24]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d03c      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004d78:	f7fe fd5e 	bl	8003838 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d105      	bne.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7ff ff9b 	bl	8004cc2 <LL_RCC_SetRTCClockSource>
 8004d8c:	e02e      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d96:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004d98:	f7ff ffb6 	bl	8004d08 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004d9c:	f7ff ffc5 	bl	8004d2a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004dae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004db8:	f7ff fe7c 	bl	8004ab4 <LL_RCC_LSE_IsEnabled>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d114      	bne.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004dc2:	f7fd f9f9 	bl	80021b8 <HAL_GetTick>
 8004dc6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004dc8:	e00b      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dca:	f7fd f9f5 	bl	80021b8 <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d902      	bls.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	77fb      	strb	r3, [r7, #31]
              break;
 8004de0:	e004      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004de2:	f7ff fe79 	bl	8004ad8 <LL_RCC_LSE_IsReady>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d1ee      	bne.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004dec:	7ffb      	ldrb	r3, [r7, #31]
 8004dee:	77bb      	strb	r3, [r7, #30]
 8004df0:	e001      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004df2:	7ffb      	ldrb	r3, [r7, #31]
 8004df4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d004      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7ff feb6 	bl	8004b78 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0302 	and.w	r3, r3, #2
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d004      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7ff fec1 	bl	8004ba4 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0310 	and.w	r3, r3, #16
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d004      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7ff fee9 	bl	8004c0a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0320 	and.w	r3, r3, #32
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d004      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	695b      	ldr	r3, [r3, #20]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7ff fede 	bl	8004c0a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0304 	and.w	r3, r3, #4
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d004      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7ff feb6 	bl	8004bd0 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d02b      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e78:	d008      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x140>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e82:	d003      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x140>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d105      	bne.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7ff fed4 	bl	8004c3e <LL_RCC_SetRNGClockSource>
 8004e96:	e00a      	b.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x162>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ea0:	60fb      	str	r3, [r7, #12]
 8004ea2:	2000      	movs	r0, #0
 8004ea4:	f7ff fecb 	bl	8004c3e <LL_RCC_SetRNGClockSource>
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f7ff fede 	bl	8004c6a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004eb6:	d107      	bne.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ec2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ec6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d011      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	69db      	ldr	r3, [r3, #28]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7ff fedc 	bl	8004c96 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	69db      	ldr	r3, [r3, #28]
 8004ee2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ee6:	d107      	bne.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ef2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ef6:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d004      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7ff fdf7 	bl	8004afc <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d009      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7ff fe16 	bl	8004b50 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7ff fdfd 	bl	8004b28 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8004f2e:	7fbb      	ldrb	r3, [r7, #30]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3720      	adds	r7, #32
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e09f      	b.n	800508a <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d106      	bne.n	8004f64 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f7fc ffac 	bl	8001ebc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2202      	movs	r2, #2
 8004f68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004f6c:	4b49      	ldr	r3, [pc, #292]	; (8005094 <HAL_RTC_Init+0x15c>)
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	f003 0310 	and.w	r3, r3, #16
 8004f74:	2b10      	cmp	r3, #16
 8004f76:	d07e      	beq.n	8005076 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	22ca      	movs	r2, #202	; 0xca
 8004f7e:	625a      	str	r2, [r3, #36]	; 0x24
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2253      	movs	r2, #83	; 0x53
 8004f86:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 f8ab 	bl	80050e4 <RTC_EnterInitMode>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00a      	beq.n	8004faa <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	22ff      	movs	r2, #255	; 0xff
 8004f9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2204      	movs	r2, #4
 8004fa0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	73fb      	strb	r3, [r7, #15]
 8004fa8:	e067      	b.n	800507a <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	6812      	ldr	r2, [r2, #0]
 8004fb4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004fb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fbc:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6899      	ldr	r1, [r3, #8]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	68d2      	ldr	r2, [r2, #12]
 8004fe4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	6919      	ldr	r1, [r3, #16]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	041a      	lsls	r2, r3, #16
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68da      	ldr	r2, [r3, #12]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005008:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f022 0202 	bic.w	r2, r2, #2
 8005018:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	69da      	ldr	r2, [r3, #28]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	431a      	orrs	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	430a      	orrs	r2, r1
 8005030:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f003 0320 	and.w	r3, r3, #32
 800503c:	2b00      	cmp	r3, #0
 800503e:	d113      	bne.n	8005068 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 f829 	bl	8005098 <HAL_RTC_WaitForSynchro>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00d      	beq.n	8005068 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	22ff      	movs	r2, #255	; 0xff
 8005052:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2204      	movs	r2, #4
 8005058:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e010      	b.n	800508a <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	22ff      	movs	r2, #255	; 0xff
 800506e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8005070:	2300      	movs	r3, #0
 8005072:	73fb      	strb	r3, [r7, #15]
 8005074:	e001      	b.n	800507a <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8005076:	2300      	movs	r3, #0
 8005078:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800507a:	7bfb      	ldrb	r3, [r7, #15]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d103      	bne.n	8005088 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8005088:	7bfb      	ldrb	r3, [r7, #15]
}
 800508a:	4618      	mov	r0, r3
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	40002800 	.word	0x40002800

08005098 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68da      	ldr	r2, [r3, #12]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80050ae:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80050b0:	f7fd f882 	bl	80021b8 <HAL_GetTick>
 80050b4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80050b6:	e009      	b.n	80050cc <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80050b8:	f7fd f87e 	bl	80021b8 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050c6:	d901      	bls.n	80050cc <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e007      	b.n	80050dc <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	f003 0320 	and.w	r3, r3, #32
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d0ee      	beq.n	80050b8 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d119      	bne.n	800512e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005102:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005104:	f7fd f858 	bl	80021b8 <HAL_GetTick>
 8005108:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800510a:	e009      	b.n	8005120 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800510c:	f7fd f854 	bl	80021b8 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800511a:	d901      	bls.n	8005120 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e007      	b.n	8005130 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800512a:	2b00      	cmp	r3, #0
 800512c:	d0ee      	beq.n	800510c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3710      	adds	r7, #16
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b086      	sub	sp, #24
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f893 3020 	ldrb.w	r3, [r3, #32]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d101      	bne.n	8005152 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800514e:	2302      	movs	r3, #2
 8005150:	e0a8      	b.n	80052a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2201      	movs	r2, #1
 8005156:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2202      	movs	r2, #2
 800515e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	22ca      	movs	r2, #202	; 0xca
 8005168:	625a      	str	r2, [r3, #36]	; 0x24
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2253      	movs	r2, #83	; 0x53
 8005170:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800517c:	2b00      	cmp	r3, #0
 800517e:	d020      	beq.n	80051c2 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8005180:	f7fd f81a 	bl	80021b8 <HAL_GetTick>
 8005184:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005186:	e015      	b.n	80051b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005188:	f7fd f816 	bl	80021b8 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005196:	d90d      	bls.n	80051b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	22ff      	movs	r2, #255	; 0xff
 800519e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2203      	movs	r2, #3
 80051a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e077      	b.n	80052a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	f003 0304 	and.w	r3, r3, #4
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1e2      	bne.n	8005188 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	689a      	ldr	r2, [r3, #8]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051d0:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	b2da      	uxtb	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80051e2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80051e4:	f7fc ffe8 	bl	80021b8 <HAL_GetTick>
 80051e8:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80051ea:	e015      	b.n	8005218 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80051ec:	f7fc ffe4 	bl	80021b8 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051fa:	d90d      	bls.n	8005218 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	22ff      	movs	r2, #255	; 0xff
 8005202:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2203      	movs	r2, #3
 8005208:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e045      	b.n	80052a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	f003 0304 	and.w	r3, r3, #4
 8005222:	2b00      	cmp	r3, #0
 8005224:	d0e2      	beq.n	80051ec <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68ba      	ldr	r2, [r7, #8]
 800522c:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	689a      	ldr	r2, [r3, #8]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f022 0207 	bic.w	r2, r2, #7
 800523c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	6899      	ldr	r1, [r3, #8]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	430a      	orrs	r2, r1
 800524c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800524e:	4b17      	ldr	r3, [pc, #92]	; (80052ac <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005250:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005254:	4a15      	ldr	r2, [pc, #84]	; (80052ac <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005256:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800525a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800525e:	4b13      	ldr	r3, [pc, #76]	; (80052ac <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a12      	ldr	r2, [pc, #72]	; (80052ac <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005264:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005268:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	689a      	ldr	r2, [r3, #8]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005278:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	689a      	ldr	r2, [r3, #8]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005288:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	22ff      	movs	r2, #255	; 0xff
 8005290:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3718      	adds	r7, #24
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	58000800 	.word	0x58000800

080052b0 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d101      	bne.n	80052c6 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 80052c2:	2302      	movs	r3, #2
 80052c4:	e04d      	b.n	8005362 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2202      	movs	r2, #2
 80052d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	22ca      	movs	r2, #202	; 0xca
 80052dc:	625a      	str	r2, [r3, #36]	; 0x24
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2253      	movs	r2, #83	; 0x53
 80052e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	689a      	ldr	r2, [r3, #8]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052f4:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	689a      	ldr	r2, [r3, #8]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005304:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8005306:	f7fc ff57 	bl	80021b8 <HAL_GetTick>
 800530a:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800530c:	e015      	b.n	800533a <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800530e:	f7fc ff53 	bl	80021b8 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800531c:	d90d      	bls.n	800533a <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	22ff      	movs	r2, #255	; 0xff
 8005324:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2203      	movs	r2, #3
 800532a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e013      	b.n	8005362 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	f003 0304 	and.w	r3, r3, #4
 8005344:	2b00      	cmp	r3, #0
 8005346:	d0e2      	beq.n	800530e <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	22ff      	movs	r2, #255	; 0xff
 800534e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}

0800536a <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800536a:	b5b0      	push	{r4, r5, r7, lr}
 800536c:	b0ce      	sub	sp, #312	; 0x138
 800536e:	af00      	add	r7, sp, #0
 8005370:	4605      	mov	r5, r0
 8005372:	460c      	mov	r4, r1
 8005374:	4610      	mov	r0, r2
 8005376:	4619      	mov	r1, r3
 8005378:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800537c:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8005380:	462a      	mov	r2, r5
 8005382:	701a      	strb	r2, [r3, #0]
 8005384:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005388:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800538c:	4622      	mov	r2, r4
 800538e:	801a      	strh	r2, [r3, #0]
 8005390:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005394:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8005398:	4602      	mov	r2, r0
 800539a:	801a      	strh	r2, [r3, #0]
 800539c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80053a0:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80053a4:	460a      	mov	r2, r1
 80053a6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80053a8:	f107 0310 	add.w	r3, r7, #16
 80053ac:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80053b0:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80053b4:	3308      	adds	r3, #8
 80053b6:	f107 0210 	add.w	r2, r7, #16
 80053ba:	4413      	add	r3, r2
 80053bc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80053c0:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80053c4:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80053c8:	4413      	add	r3, r2
 80053ca:	3309      	adds	r3, #9
 80053cc:	f107 0210 	add.w	r2, r7, #16
 80053d0:	4413      	add	r3, r2
 80053d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80053d6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80053da:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80053de:	2200      	movs	r2, #0
 80053e0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80053e2:	2300      	movs	r3, #0
 80053e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 80053e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80053ec:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80053f0:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80053f4:	7812      	ldrb	r2, [r2, #0]
 80053f6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80053f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80053fc:	3301      	adds	r3, #1
 80053fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8005402:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005406:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800540a:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800540e:	8812      	ldrh	r2, [r2, #0]
 8005410:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8005414:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005418:	3302      	adds	r3, #2
 800541a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800541e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005422:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005426:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 800542a:	8812      	ldrh	r2, [r2, #0]
 800542c:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8005430:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005434:	3302      	adds	r3, #2
 8005436:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800543a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800543e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005442:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8005446:	7812      	ldrb	r2, [r2, #0]
 8005448:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800544a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800544e:	3301      	adds	r3, #1
 8005450:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8005454:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005458:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800545c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800545e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005462:	3301      	adds	r3, #1
 8005464:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8005468:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800546c:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8005470:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8005472:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005476:	3301      	adds	r3, #1
 8005478:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800547c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005480:	3308      	adds	r3, #8
 8005482:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8005486:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800548a:	4618      	mov	r0, r3
 800548c:	f000 fc21 	bl	8005cd2 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8005490:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8005494:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005498:	4413      	add	r3, r2
 800549a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800549e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80054a2:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80054a6:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80054a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80054ac:	3301      	adds	r3, #1
 80054ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80054b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80054b6:	3301      	adds	r3, #1
 80054b8:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80054bc:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80054c0:	4618      	mov	r0, r3
 80054c2:	f000 fc06 	bl	8005cd2 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80054c6:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80054ca:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80054ce:	4413      	add	r3, r2
 80054d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 80054d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054d8:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 80054dc:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80054de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80054e2:	3302      	adds	r3, #2
 80054e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 80054e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054ec:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 80054f0:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 80054f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80054f6:	3302      	adds	r3, #2
 80054f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80054fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005500:	2218      	movs	r2, #24
 8005502:	2100      	movs	r1, #0
 8005504:	4618      	mov	r0, r3
 8005506:	f000 fbf4 	bl	8005cf2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800550a:	233f      	movs	r3, #63	; 0x3f
 800550c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8005510:	2383      	movs	r3, #131	; 0x83
 8005512:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005516:	f107 0310 	add.w	r3, r7, #16
 800551a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800551e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005522:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005526:	f107 030f 	add.w	r3, r7, #15
 800552a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800552e:	2301      	movs	r3, #1
 8005530:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005534:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005538:	2100      	movs	r1, #0
 800553a:	4618      	mov	r0, r3
 800553c:	f000 fe50 	bl	80061e0 <hci_send_req>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	da01      	bge.n	800554a <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8005546:	23ff      	movs	r3, #255	; 0xff
 8005548:	e004      	b.n	8005554 <aci_gap_set_discoverable+0x1ea>
  return status;
 800554a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800554e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005552:	781b      	ldrb	r3, [r3, #0]
}
 8005554:	4618      	mov	r0, r3
 8005556:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800555a:	46bd      	mov	sp, r7
 800555c:	bdb0      	pop	{r4, r5, r7, pc}

0800555e <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800555e:	b590      	push	{r4, r7, lr}
 8005560:	b0cd      	sub	sp, #308	; 0x134
 8005562:	af00      	add	r7, sp, #0
 8005564:	4604      	mov	r4, r0
 8005566:	4608      	mov	r0, r1
 8005568:	4611      	mov	r1, r2
 800556a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800556e:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8005572:	6013      	str	r3, [r2, #0]
 8005574:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005578:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800557c:	4622      	mov	r2, r4
 800557e:	701a      	strb	r2, [r3, #0]
 8005580:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005584:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005588:	4602      	mov	r2, r0
 800558a:	701a      	strb	r2, [r3, #0]
 800558c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005590:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8005594:	460a      	mov	r2, r1
 8005596:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8005598:	f107 0310 	add.w	r3, r7, #16
 800559c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80055a0:	f107 0308 	add.w	r3, r7, #8
 80055a4:	2207      	movs	r2, #7
 80055a6:	2100      	movs	r1, #0
 80055a8:	4618      	mov	r0, r3
 80055aa:	f000 fba2 	bl	8005cf2 <Osal_MemSet>
  int index_input = 0;
 80055ae:	2300      	movs	r3, #0
 80055b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 80055b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055b8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80055bc:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80055c0:	7812      	ldrb	r2, [r2, #0]
 80055c2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80055c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80055c8:	3301      	adds	r3, #1
 80055ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 80055ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055d2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80055d6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80055da:	7812      	ldrb	r2, [r2, #0]
 80055dc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80055de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80055e2:	3301      	adds	r3, #1
 80055e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 80055e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055ec:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80055f0:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80055f4:	7812      	ldrb	r2, [r2, #0]
 80055f6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80055f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80055fc:	3301      	adds	r3, #1
 80055fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005602:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005606:	2218      	movs	r2, #24
 8005608:	2100      	movs	r1, #0
 800560a:	4618      	mov	r0, r3
 800560c:	f000 fb71 	bl	8005cf2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005610:	233f      	movs	r3, #63	; 0x3f
 8005612:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8005616:	238a      	movs	r3, #138	; 0x8a
 8005618:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800561c:	f107 0310 	add.w	r3, r7, #16
 8005620:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005624:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005628:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800562c:	f107 0308 	add.w	r3, r7, #8
 8005630:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8005634:	2307      	movs	r3, #7
 8005636:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800563a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800563e:	2100      	movs	r1, #0
 8005640:	4618      	mov	r0, r3
 8005642:	f000 fdcd 	bl	80061e0 <hci_send_req>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	da01      	bge.n	8005650 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800564c:	23ff      	movs	r3, #255	; 0xff
 800564e:	e02e      	b.n	80056ae <aci_gap_init+0x150>
  if ( resp.Status )
 8005650:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005654:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d005      	beq.n	800566a <aci_gap_init+0x10c>
    return resp.Status;
 800565e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005662:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	e021      	b.n	80056ae <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800566a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800566e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005672:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005676:	b29a      	uxth	r2, r3
 8005678:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800567c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8005684:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005688:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800568c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8005690:	b29a      	uxth	r2, r3
 8005692:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005696:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8005698:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800569c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80056a0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80056aa:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd90      	pop	{r4, r7, pc}

080056b8 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b0cc      	sub	sp, #304	; 0x130
 80056bc:	af00      	add	r7, sp, #0
 80056be:	4602      	mov	r2, r0
 80056c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056c8:	6019      	str	r1, [r3, #0]
 80056ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ce:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80056d2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 80056d4:	f107 0310 	add.w	r3, r7, #16
 80056d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80056dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056e0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80056e4:	2200      	movs	r2, #0
 80056e6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80056e8:	2300      	movs	r3, #0
 80056ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 80056ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056f2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80056f6:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80056fa:	7812      	ldrb	r2, [r2, #0]
 80056fc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80056fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005702:	3301      	adds	r3, #1
 8005704:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8005708:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800570c:	1c58      	adds	r0, r3, #1
 800570e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005712:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005716:	781a      	ldrb	r2, [r3, #0]
 8005718:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800571c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005720:	6819      	ldr	r1, [r3, #0]
 8005722:	f000 fad6 	bl	8005cd2 <Osal_MemCpy>
  index_input += AdvDataLen;
 8005726:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800572a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005734:	4413      	add	r3, r2
 8005736:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800573a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800573e:	2218      	movs	r2, #24
 8005740:	2100      	movs	r1, #0
 8005742:	4618      	mov	r0, r3
 8005744:	f000 fad5 	bl	8005cf2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005748:	233f      	movs	r3, #63	; 0x3f
 800574a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800574e:	238e      	movs	r3, #142	; 0x8e
 8005750:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005754:	f107 0310 	add.w	r3, r7, #16
 8005758:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800575c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005760:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005764:	f107 030f 	add.w	r3, r7, #15
 8005768:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800576c:	2301      	movs	r3, #1
 800576e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005772:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005776:	2100      	movs	r1, #0
 8005778:	4618      	mov	r0, r3
 800577a:	f000 fd31 	bl	80061e0 <hci_send_req>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	da01      	bge.n	8005788 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8005784:	23ff      	movs	r3, #255	; 0xff
 8005786:	e004      	b.n	8005792 <aci_gap_update_adv_data+0xda>
  return status;
 8005788:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800578c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005790:	781b      	ldrb	r3, [r3, #0]
}
 8005792:	4618      	mov	r0, r3
 8005794:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <aci_gap_delete_ad_type>:

tBleStatus aci_gap_delete_ad_type( uint8_t ADType )
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b0cc      	sub	sp, #304	; 0x130
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	4602      	mov	r2, r0
 80057a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057a8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80057ac:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_delete_ad_type_cp0 *cp0 = (aci_gap_delete_ad_type_cp0*)(cmd_buffer);
 80057ae:	f107 0310 	add.w	r3, r7, #16
 80057b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80057b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ba:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80057be:	2200      	movs	r2, #0
 80057c0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80057c2:	2300      	movs	r3, #0
 80057c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ADType = ADType;
 80057c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057cc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80057d0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80057d4:	7812      	ldrb	r2, [r2, #0]
 80057d6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80057d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057dc:	3301      	adds	r3, #1
 80057de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80057e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80057e6:	2218      	movs	r2, #24
 80057e8:	2100      	movs	r1, #0
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 fa81 	bl	8005cf2 <Osal_MemSet>
  rq.ogf = 0x3f;
 80057f0:	233f      	movs	r3, #63	; 0x3f
 80057f2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08f;
 80057f6:	238f      	movs	r3, #143	; 0x8f
 80057f8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80057fc:	f107 0310 	add.w	r3, r7, #16
 8005800:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005804:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005808:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800580c:	f107 030f 	add.w	r3, r7, #15
 8005810:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005814:	2301      	movs	r3, #1
 8005816:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800581a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800581e:	2100      	movs	r1, #0
 8005820:	4618      	mov	r0, r3
 8005822:	f000 fcdd 	bl	80061e0 <hci_send_req>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	da01      	bge.n	8005830 <aci_gap_delete_ad_type+0x94>
    return BLE_STATUS_TIMEOUT;
 800582c:	23ff      	movs	r3, #255	; 0xff
 800582e:	e004      	b.n	800583a <aci_gap_delete_ad_type+0x9e>
  return status;
 8005830:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005834:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005838:	781b      	ldrb	r3, [r3, #0]
}
 800583a:	4618      	mov	r0, r3
 800583c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b088      	sub	sp, #32
 8005848:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800584a:	2300      	movs	r3, #0
 800584c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800584e:	f107 0308 	add.w	r3, r7, #8
 8005852:	2218      	movs	r2, #24
 8005854:	2100      	movs	r1, #0
 8005856:	4618      	mov	r0, r3
 8005858:	f000 fa4b 	bl	8005cf2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800585c:	233f      	movs	r3, #63	; 0x3f
 800585e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8005860:	f240 1301 	movw	r3, #257	; 0x101
 8005864:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005866:	1dfb      	adds	r3, r7, #7
 8005868:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800586a:	2301      	movs	r3, #1
 800586c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800586e:	f107 0308 	add.w	r3, r7, #8
 8005872:	2100      	movs	r1, #0
 8005874:	4618      	mov	r0, r3
 8005876:	f000 fcb3 	bl	80061e0 <hci_send_req>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	da01      	bge.n	8005884 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8005880:	23ff      	movs	r3, #255	; 0xff
 8005882:	e000      	b.n	8005886 <aci_gatt_init+0x42>
  return status;
 8005884:	79fb      	ldrb	r3, [r7, #7]
}
 8005886:	4618      	mov	r0, r3
 8005888:	3720      	adds	r7, #32
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800588e:	b5b0      	push	{r4, r5, r7, lr}
 8005890:	b0cc      	sub	sp, #304	; 0x130
 8005892:	af00      	add	r7, sp, #0
 8005894:	4605      	mov	r5, r0
 8005896:	460c      	mov	r4, r1
 8005898:	4610      	mov	r0, r2
 800589a:	4619      	mov	r1, r3
 800589c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058a0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80058a4:	462a      	mov	r2, r5
 80058a6:	801a      	strh	r2, [r3, #0]
 80058a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058b0:	4622      	mov	r2, r4
 80058b2:	801a      	strh	r2, [r3, #0]
 80058b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058b8:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80058bc:	4602      	mov	r2, r0
 80058be:	701a      	strb	r2, [r3, #0]
 80058c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058c4:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80058c8:	460a      	mov	r2, r1
 80058ca:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80058cc:	f107 0310 	add.w	r3, r7, #16
 80058d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80058d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058d8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80058dc:	2200      	movs	r2, #0
 80058de:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80058e0:	2300      	movs	r3, #0
 80058e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 80058e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80058ee:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80058f2:	8812      	ldrh	r2, [r2, #0]
 80058f4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80058f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80058fa:	3302      	adds	r3, #2
 80058fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8005900:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005904:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005908:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800590c:	8812      	ldrh	r2, [r2, #0]
 800590e:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8005910:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005914:	3302      	adds	r3, #2
 8005916:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800591a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800591e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005922:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8005926:	7812      	ldrb	r2, [r2, #0]
 8005928:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800592a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800592e:	3301      	adds	r3, #1
 8005930:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8005934:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005938:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800593c:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8005940:	7812      	ldrb	r2, [r2, #0]
 8005942:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005944:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005948:	3301      	adds	r3, #1
 800594a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800594e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005952:	1d98      	adds	r0, r3, #6
 8005954:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005958:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	461a      	mov	r2, r3
 8005960:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005964:	f000 f9b5 	bl	8005cd2 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8005968:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800596c:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005976:	4413      	add	r3, r2
 8005978:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800597c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005980:	2218      	movs	r2, #24
 8005982:	2100      	movs	r1, #0
 8005984:	4618      	mov	r0, r3
 8005986:	f000 f9b4 	bl	8005cf2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800598a:	233f      	movs	r3, #63	; 0x3f
 800598c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8005990:	f44f 7383 	mov.w	r3, #262	; 0x106
 8005994:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005998:	f107 0310 	add.w	r3, r7, #16
 800599c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80059a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80059a4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80059a8:	f107 030f 	add.w	r3, r7, #15
 80059ac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80059b0:	2301      	movs	r3, #1
 80059b2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80059b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80059ba:	2100      	movs	r1, #0
 80059bc:	4618      	mov	r0, r3
 80059be:	f000 fc0f 	bl	80061e0 <hci_send_req>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	da01      	bge.n	80059cc <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 80059c8:	23ff      	movs	r3, #255	; 0xff
 80059ca:	e004      	b.n	80059d6 <aci_gatt_update_char_value+0x148>
  return status;
 80059cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059d0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80059d4:	781b      	ldrb	r3, [r3, #0]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80059dc:	46bd      	mov	sp, r7
 80059de:	bdb0      	pop	{r4, r5, r7, pc}

080059e0 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b0cc      	sub	sp, #304	; 0x130
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059ee:	601a      	str	r2, [r3, #0]
 80059f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059f4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80059f8:	4602      	mov	r2, r0
 80059fa:	701a      	strb	r2, [r3, #0]
 80059fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a00:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005a04:	460a      	mov	r2, r1
 8005a06:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8005a08:	f107 0310 	add.w	r3, r7, #16
 8005a0c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005a10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a14:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005a18:	2200      	movs	r2, #0
 8005a1a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8005a22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a26:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005a2a:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8005a2e:	7812      	ldrb	r2, [r2, #0]
 8005a30:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005a32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005a36:	3301      	adds	r3, #1
 8005a38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8005a3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a40:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005a44:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005a48:	7812      	ldrb	r2, [r2, #0]
 8005a4a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005a4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005a50:	3301      	adds	r3, #1
 8005a52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8005a56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a5a:	1c98      	adds	r0, r3, #2
 8005a5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a60:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005a64:	781a      	ldrb	r2, [r3, #0]
 8005a66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a6e:	6819      	ldr	r1, [r3, #0]
 8005a70:	f000 f92f 	bl	8005cd2 <Osal_MemCpy>
  index_input += Length;
 8005a74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a78:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005a82:	4413      	add	r3, r2
 8005a84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005a88:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a8c:	2218      	movs	r2, #24
 8005a8e:	2100      	movs	r1, #0
 8005a90:	4618      	mov	r0, r3
 8005a92:	f000 f92e 	bl	8005cf2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005a96:	233f      	movs	r3, #63	; 0x3f
 8005a98:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8005a9c:	230c      	movs	r3, #12
 8005a9e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005aa2:	f107 0310 	add.w	r3, r7, #16
 8005aa6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005aaa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005aae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005ab2:	f107 030f 	add.w	r3, r7, #15
 8005ab6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005aba:	2301      	movs	r3, #1
 8005abc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005ac0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005ac4:	2100      	movs	r1, #0
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f000 fb8a 	bl	80061e0 <hci_send_req>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	da01      	bge.n	8005ad6 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8005ad2:	23ff      	movs	r3, #255	; 0xff
 8005ad4:	e004      	b.n	8005ae0 <aci_hal_write_config_data+0x100>
  return status;
 8005ad6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ada:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005ade:	781b      	ldrb	r3, [r3, #0]
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b0cc      	sub	sp, #304	; 0x130
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	4602      	mov	r2, r0
 8005af2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005af6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005afa:	701a      	strb	r2, [r3, #0]
 8005afc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b00:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005b04:	460a      	mov	r2, r1
 8005b06:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8005b08:	f107 0310 	add.w	r3, r7, #16
 8005b0c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005b10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b14:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005b18:	2200      	movs	r2, #0
 8005b1a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8005b22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b26:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005b2a:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8005b2e:	7812      	ldrb	r2, [r2, #0]
 8005b30:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005b32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005b36:	3301      	adds	r3, #1
 8005b38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8005b3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b40:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005b44:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005b48:	7812      	ldrb	r2, [r2, #0]
 8005b4a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005b4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005b50:	3301      	adds	r3, #1
 8005b52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005b56:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b5a:	2218      	movs	r2, #24
 8005b5c:	2100      	movs	r1, #0
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f000 f8c7 	bl	8005cf2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005b64:	233f      	movs	r3, #63	; 0x3f
 8005b66:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8005b6a:	230f      	movs	r3, #15
 8005b6c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005b70:	f107 0310 	add.w	r3, r7, #16
 8005b74:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005b78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005b7c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005b80:	f107 030f 	add.w	r3, r7, #15
 8005b84:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005b8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b92:	2100      	movs	r1, #0
 8005b94:	4618      	mov	r0, r3
 8005b96:	f000 fb23 	bl	80061e0 <hci_send_req>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	da01      	bge.n	8005ba4 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8005ba0:	23ff      	movs	r3, #255	; 0xff
 8005ba2:	e004      	b.n	8005bae <aci_hal_set_tx_power_level+0xc4>
  return status;
 8005ba4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ba8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005bac:	781b      	ldrb	r3, [r3, #0]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b088      	sub	sp, #32
 8005bbc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005bc2:	f107 0308 	add.w	r3, r7, #8
 8005bc6:	2218      	movs	r2, #24
 8005bc8:	2100      	movs	r1, #0
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f000 f891 	bl	8005cf2 <Osal_MemSet>
  rq.ogf = 0x03;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005bd8:	1dfb      	adds	r3, r7, #7
 8005bda:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005be0:	f107 0308 	add.w	r3, r7, #8
 8005be4:	2100      	movs	r1, #0
 8005be6:	4618      	mov	r0, r3
 8005be8:	f000 fafa 	bl	80061e0 <hci_send_req>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	da01      	bge.n	8005bf6 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8005bf2:	23ff      	movs	r3, #255	; 0xff
 8005bf4:	e000      	b.n	8005bf8 <hci_reset+0x40>
  return status;
 8005bf6:	79fb      	ldrb	r3, [r7, #7]
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3720      	adds	r7, #32
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <hci_le_set_scan_response_data>:
  return status;
}

tBleStatus hci_le_set_scan_response_data( uint8_t Scan_Response_Data_Length,
                                          const uint8_t* Scan_Response_Data )
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b0cc      	sub	sp, #304	; 0x130
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	4602      	mov	r2, r0
 8005c08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c10:	6019      	str	r1, [r3, #0]
 8005c12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c16:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005c1a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
 8005c1c:	f107 0310 	add.w	r3, r7, #16
 8005c20:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005c24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c28:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005c30:	2300      	movs	r3, #0
 8005c32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Scan_Response_Data_Length = Scan_Response_Data_Length;
 8005c36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c3a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c3e:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8005c42:	7812      	ldrb	r2, [r2, #0]
 8005c44:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005c46:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Scan_Response_Data, (const void*)Scan_Response_Data, 31 );
 8005c50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c54:	1c58      	adds	r0, r3, #1
 8005c56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c5e:	221f      	movs	r2, #31
 8005c60:	6819      	ldr	r1, [r3, #0]
 8005c62:	f000 f836 	bl	8005cd2 <Osal_MemCpy>
  index_input += 31;
 8005c66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005c6a:	331f      	adds	r3, #31
 8005c6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005c70:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c74:	2218      	movs	r2, #24
 8005c76:	2100      	movs	r1, #0
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f000 f83a 	bl	8005cf2 <Osal_MemSet>
  rq.ogf = 0x08;
 8005c7e:	2308      	movs	r3, #8
 8005c80:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x009;
 8005c84:	2309      	movs	r3, #9
 8005c86:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005c8a:	f107 0310 	add.w	r3, r7, #16
 8005c8e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005c92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005c96:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005c9a:	f107 030f 	add.w	r3, r7, #15
 8005c9e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005ca8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005cac:	2100      	movs	r1, #0
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f000 fa96 	bl	80061e0 <hci_send_req>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	da01      	bge.n	8005cbe <hci_le_set_scan_response_data+0xbe>
    return BLE_STATUS_TIMEOUT;
 8005cba:	23ff      	movs	r3, #255	; 0xff
 8005cbc:	e004      	b.n	8005cc8 <hci_le_set_scan_response_data+0xc8>
  return status;
 8005cbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cc2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005cc6:	781b      	ldrb	r3, [r3, #0]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b084      	sub	sp, #16
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	60f8      	str	r0, [r7, #12]
 8005cda:	60b9      	str	r1, [r7, #8]
 8005cdc:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	68b9      	ldr	r1, [r7, #8]
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f002 f988 	bl	8007ff8 <memcpy>
 8005ce8:	4603      	mov	r3, r0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b084      	sub	sp, #16
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	60f8      	str	r0, [r7, #12]
 8005cfa:	60b9      	str	r1, [r7, #8]
 8005cfc:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	68b9      	ldr	r1, [r7, #8]
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	f002 f94c 	bl	8007fa0 <memset>
 8005d08:	4603      	mov	r3, r0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8005d12:	b480      	push	{r7}
 8005d14:	af00      	add	r7, sp, #0
  return;
 8005d16:	bf00      	nop
}
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8005d20:	b480      	push	{r7}
 8005d22:	af00      	add	r7, sp, #0
  return;
 8005d24:	bf00      	nop
}
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8005d2e:	b480      	push	{r7}
 8005d30:	af00      	add	r7, sp, #0
  return;
 8005d32:	bf00      	nop
}
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	af00      	add	r7, sp, #0
  return;
 8005d40:	bf00      	nop
}
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr

08005d4a <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	af00      	add	r7, sp, #0
  return;
 8005d4e:	bf00      	nop
}
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8005d58:	b480      	push	{r7}
 8005d5a:	af00      	add	r7, sp, #0
  return;
 8005d5c:	bf00      	nop
}
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8005d66:	b480      	push	{r7}
 8005d68:	af00      	add	r7, sp, #0
  return;
 8005d6a:	bf00      	nop
}
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8005d74:	b480      	push	{r7}
 8005d76:	af00      	add	r7, sp, #0
  return;
 8005d78:	bf00      	nop
}
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8005d82:	b480      	push	{r7}
 8005d84:	af00      	add	r7, sp, #0
  return;
 8005d86:	bf00      	nop
}
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8005d90:	b480      	push	{r7}
 8005d92:	af00      	add	r7, sp, #0
  return;
 8005d94:	bf00      	nop
}
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8005d9e:	b480      	push	{r7}
 8005da0:	af00      	add	r7, sp, #0
  return;
 8005da2:	bf00      	nop
}
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8005dac:	b480      	push	{r7}
 8005dae:	af00      	add	r7, sp, #0
  return;
 8005db0:	bf00      	nop
}
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr

08005dba <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8005dba:	b480      	push	{r7}
 8005dbc:	af00      	add	r7, sp, #0
  return;
 8005dbe:	bf00      	nop
}
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8005dc8:	b480      	push	{r7}
 8005dca:	af00      	add	r7, sp, #0
  return;
 8005dcc:	bf00      	nop
}
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr

08005dd6 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8005dd6:	b480      	push	{r7}
 8005dd8:	af00      	add	r7, sp, #0
  return;
 8005dda:	bf00      	nop
}
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8005de4:	b480      	push	{r7}
 8005de6:	af00      	add	r7, sp, #0
  return;
 8005de8:	bf00      	nop
}
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8005df2:	b480      	push	{r7}
 8005df4:	af00      	add	r7, sp, #0
  return;
 8005df6:	bf00      	nop
}
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 8005e00:	b480      	push	{r7}
 8005e02:	af00      	add	r7, sp, #0
  return;
 8005e04:	bf00      	nop
}
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
	...

08005e10 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8005e14:	4b04      	ldr	r3, [pc, #16]	; (8005e28 <SVCCTL_Init+0x18>)
 8005e16:	2200      	movs	r2, #0
 8005e18:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8005e1a:	4b04      	ldr	r3, [pc, #16]	; (8005e2c <SVCCTL_Init+0x1c>)
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8005e20:	f000 f806 	bl	8005e30 <SVCCTL_SvcInit>

  return;
 8005e24:	bf00      	nop
}
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	20000024 	.word	0x20000024
 8005e2c:	20000044 	.word	0x20000044

08005e30 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	af00      	add	r7, sp, #0
  BAS_Init();
 8005e34:	f7ff ff6d 	bl	8005d12 <BAS_Init>

  BLS_Init();
 8005e38:	f7ff ff72 	bl	8005d20 <BLS_Init>

  CRS_STM_Init();
 8005e3c:	f7ff ff77 	bl	8005d2e <CRS_STM_Init>

  DIS_Init();
 8005e40:	f7ff ff7c 	bl	8005d3c <DIS_Init>

  EDS_STM_Init();
 8005e44:	f7ff ff81 	bl	8005d4a <EDS_STM_Init>

  HIDS_Init();
 8005e48:	f7ff ff86 	bl	8005d58 <HIDS_Init>

  HRS_Init();
 8005e4c:	f7ff ff8b 	bl	8005d66 <HRS_Init>

  HTS_Init();
 8005e50:	f7ff ff90 	bl	8005d74 <HTS_Init>

  IAS_Init();
 8005e54:	f7ff ff95 	bl	8005d82 <IAS_Init>

  LLS_Init();
 8005e58:	f7ff ff9a 	bl	8005d90 <LLS_Init>

  TPS_Init();
 8005e5c:	f7ff ff9f 	bl	8005d9e <TPS_Init>

  MOTENV_STM_Init();
 8005e60:	f7ff ffa4 	bl	8005dac <MOTENV_STM_Init>

  P2PS_STM_Init();
 8005e64:	f7ff ffa9 	bl	8005dba <P2PS_STM_Init>

  ZDD_STM_Init();
 8005e68:	f7ff ffae 	bl	8005dc8 <ZDD_STM_Init>

  OTAS_STM_Init();
 8005e6c:	f7ff ffb3 	bl	8005dd6 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8005e70:	f7ff ffbf 	bl	8005df2 <BVOPUS_STM_Init>

  MESH_Init();
 8005e74:	f7ff ffb6 	bl	8005de4 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8005e78:	f7ff ffc2 	bl	8005e00 <SVCCTL_InitCustomSvc>
  
  return;
 8005e7c:	bf00      	nop
}
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	2bff      	cmp	r3, #255	; 0xff
 8005e98:	d125      	bne.n	8005ee6 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	3302      	adds	r3, #2
 8005e9e:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	881b      	ldrh	r3, [r3, #0]
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005eaa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005eae:	d118      	bne.n	8005ee2 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	757b      	strb	r3, [r7, #21]
 8005eb4:	e00d      	b.n	8005ed2 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8005eb6:	7d7b      	ldrb	r3, [r7, #21]
 8005eb8:	4a1a      	ldr	r2, [pc, #104]	; (8005f24 <SVCCTL_UserEvtRx+0xa4>)
 8005eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	4798      	blx	r3
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8005ec6:	7dfb      	ldrb	r3, [r7, #23]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d108      	bne.n	8005ede <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8005ecc:	7d7b      	ldrb	r3, [r7, #21]
 8005ece:	3301      	adds	r3, #1
 8005ed0:	757b      	strb	r3, [r7, #21]
 8005ed2:	4b14      	ldr	r3, [pc, #80]	; (8005f24 <SVCCTL_UserEvtRx+0xa4>)
 8005ed4:	7f1b      	ldrb	r3, [r3, #28]
 8005ed6:	7d7a      	ldrb	r2, [r7, #21]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d3ec      	bcc.n	8005eb6 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8005edc:	e002      	b.n	8005ee4 <SVCCTL_UserEvtRx+0x64>
              break;
 8005ede:	bf00      	nop
          break;
 8005ee0:	e000      	b.n	8005ee4 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8005ee2:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8005ee4:	e000      	b.n	8005ee8 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8005ee6:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8005ee8:	7dfb      	ldrb	r3, [r7, #23]
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d00f      	beq.n	8005f0e <SVCCTL_UserEvtRx+0x8e>
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	dc10      	bgt.n	8005f14 <SVCCTL_UserEvtRx+0x94>
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d002      	beq.n	8005efc <SVCCTL_UserEvtRx+0x7c>
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d006      	beq.n	8005f08 <SVCCTL_UserEvtRx+0x88>
 8005efa:	e00b      	b.n	8005f14 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 ff91 	bl	8006e24 <SVCCTL_App_Notification>
 8005f02:	4603      	mov	r3, r0
 8005f04:	75bb      	strb	r3, [r7, #22]
      break;
 8005f06:	e008      	b.n	8005f1a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	75bb      	strb	r3, [r7, #22]
      break;
 8005f0c:	e005      	b.n	8005f1a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	75bb      	strb	r3, [r7, #22]
      break;
 8005f12:	e002      	b.n	8005f1a <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8005f14:	2301      	movs	r3, #1
 8005f16:	75bb      	strb	r3, [r7, #22]
      break;
 8005f18:	bf00      	nop
  }

  return (return_status);
 8005f1a:	7dbb      	ldrb	r3, [r7, #22]
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3718      	adds	r7, #24
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	20000024 	.word	0x20000024

08005f28 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b088      	sub	sp, #32
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8005f30:	f107 030c 	add.w	r3, r7, #12
 8005f34:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	212e      	movs	r1, #46	; 0x2e
 8005f40:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8005f44:	f000 fae8 	bl	8006518 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	330b      	adds	r3, #11
 8005f4c:	78db      	ldrb	r3, [r3, #3]
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3720      	adds	r7, #32
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b088      	sub	sp, #32
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8005f5e:	f107 030c 	add.w	r3, r7, #12
 8005f62:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	210f      	movs	r1, #15
 8005f6e:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8005f72:	f000 fad1 	bl	8006518 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	330b      	adds	r3, #11
 8005f7a:	78db      	ldrb	r3, [r3, #3]
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3720      	adds	r7, #32
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b088      	sub	sp, #32
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8005f8c:	f107 030c 	add.w	r3, r7, #12
 8005f90:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	2110      	movs	r1, #16
 8005f98:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8005f9c:	f000 fabc 	bl	8006518 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	330b      	adds	r3, #11
 8005fa4:	78db      	ldrb	r3, [r3, #3]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3720      	adds	r7, #32
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
	...

08005fb0 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b08b      	sub	sp, #44	; 0x2c
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8005fd8:	4b4a      	ldr	r3, [pc, #296]	; (8006104 <SHCI_GetWirelessFwInfo+0x154>)
 8005fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fdc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005fe0:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005fea:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a44      	ldr	r2, [pc, #272]	; (8006108 <SHCI_GetWirelessFwInfo+0x158>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d10f      	bne.n	800601c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	695b      	ldr	r3, [r3, #20]
 8006000:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	69db      	ldr	r3, [r3, #28]
 800600c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	617b      	str	r3, [r7, #20]
 800601a:	e01a      	b.n	8006052 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8006024:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8006028:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	695b      	ldr	r3, [r3, #20]
 8006038:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	699b      	ldr	r3, [r3, #24]
 8006040:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8006052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006054:	0e1b      	lsrs	r3, r3, #24
 8006056:	b2da      	uxtb	r2, r3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800605c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605e:	0c1b      	lsrs	r3, r3, #16
 8006060:	b2da      	uxtb	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8006066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006068:	0a1b      	lsrs	r3, r3, #8
 800606a:	b2da      	uxtb	r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8006070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006072:	091b      	lsrs	r3, r3, #4
 8006074:	b2db      	uxtb	r3, r3
 8006076:	f003 030f 	and.w	r3, r3, #15
 800607a:	b2da      	uxtb	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8006080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006082:	b2db      	uxtb	r3, r3
 8006084:	f003 030f 	and.w	r3, r3, #15
 8006088:	b2da      	uxtb	r2, r3
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800608e:	6a3b      	ldr	r3, [r7, #32]
 8006090:	0e1b      	lsrs	r3, r3, #24
 8006092:	b2da      	uxtb	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8006098:	6a3b      	ldr	r3, [r7, #32]
 800609a:	0c1b      	lsrs	r3, r3, #16
 800609c:	b2da      	uxtb	r2, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 80060a2:	6a3b      	ldr	r3, [r7, #32]
 80060a4:	0a1b      	lsrs	r3, r3, #8
 80060a6:	b2da      	uxtb	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80060ac:	6a3b      	ldr	r3, [r7, #32]
 80060ae:	b2da      	uxtb	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	b2da      	uxtb	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	0e1b      	lsrs	r3, r3, #24
 80060c0:	b2da      	uxtb	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	0c1b      	lsrs	r3, r3, #16
 80060ca:	b2da      	uxtb	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	0a1b      	lsrs	r3, r3, #8
 80060d4:	b2da      	uxtb	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	0e1b      	lsrs	r3, r3, #24
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	0c1b      	lsrs	r3, r3, #16
 80060e8:	b2da      	uxtb	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	b2da      	uxtb	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	372c      	adds	r7, #44	; 0x2c
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr
 8006104:	58004000 	.word	0x58004000
 8006108:	a94656b9 	.word	0xa94656b9

0800610c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	4a08      	ldr	r2, [pc, #32]	; (800613c <hci_init+0x30>)
 800611c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800611e:	4a08      	ldr	r2, [pc, #32]	; (8006140 <hci_init+0x34>)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8006124:	4806      	ldr	r0, [pc, #24]	; (8006140 <hci_init+0x34>)
 8006126:	f000 f979 	bl	800641c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4618      	mov	r0, r3
 8006130:	f000 f8da 	bl	80062e8 <TlInit>

  return;
 8006134:	bf00      	nop
}
 8006136:	3708      	adds	r7, #8
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	20000230 	.word	0x20000230
 8006140:	20000208 	.word	0x20000208

08006144 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800614a:	4822      	ldr	r0, [pc, #136]	; (80061d4 <hci_user_evt_proc+0x90>)
 800614c:	f000 fd32 	bl	8006bb4 <LST_is_empty>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d12b      	bne.n	80061ae <hci_user_evt_proc+0x6a>
 8006156:	4b20      	ldr	r3, [pc, #128]	; (80061d8 <hci_user_evt_proc+0x94>)
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d027      	beq.n	80061ae <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800615e:	f107 030c 	add.w	r3, r7, #12
 8006162:	4619      	mov	r1, r3
 8006164:	481b      	ldr	r0, [pc, #108]	; (80061d4 <hci_user_evt_proc+0x90>)
 8006166:	f000 fdb4 	bl	8006cd2 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800616a:	4b1c      	ldr	r3, [pc, #112]	; (80061dc <hci_user_evt_proc+0x98>)
 800616c:	69db      	ldr	r3, [r3, #28]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00c      	beq.n	800618c <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8006176:	2301      	movs	r3, #1
 8006178:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800617a:	4b18      	ldr	r3, [pc, #96]	; (80061dc <hci_user_evt_proc+0x98>)
 800617c:	69db      	ldr	r3, [r3, #28]
 800617e:	1d3a      	adds	r2, r7, #4
 8006180:	4610      	mov	r0, r2
 8006182:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8006184:	793a      	ldrb	r2, [r7, #4]
 8006186:	4b14      	ldr	r3, [pc, #80]	; (80061d8 <hci_user_evt_proc+0x94>)
 8006188:	701a      	strb	r2, [r3, #0]
 800618a:	e002      	b.n	8006192 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800618c:	4b12      	ldr	r3, [pc, #72]	; (80061d8 <hci_user_evt_proc+0x94>)
 800618e:	2201      	movs	r2, #1
 8006190:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8006192:	4b11      	ldr	r3, [pc, #68]	; (80061d8 <hci_user_evt_proc+0x94>)
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d004      	beq.n	80061a4 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	4618      	mov	r0, r3
 800619e:	f000 fc0d 	bl	80069bc <TL_MM_EvtDone>
 80061a2:	e004      	b.n	80061ae <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	4619      	mov	r1, r3
 80061a8:	480a      	ldr	r0, [pc, #40]	; (80061d4 <hci_user_evt_proc+0x90>)
 80061aa:	f000 fd25 	bl	8006bf8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80061ae:	4809      	ldr	r0, [pc, #36]	; (80061d4 <hci_user_evt_proc+0x90>)
 80061b0:	f000 fd00 	bl	8006bb4 <LST_is_empty>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d107      	bne.n	80061ca <hci_user_evt_proc+0x86>
 80061ba:	4b07      	ldr	r3, [pc, #28]	; (80061d8 <hci_user_evt_proc+0x94>)
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d003      	beq.n	80061ca <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80061c2:	4804      	ldr	r0, [pc, #16]	; (80061d4 <hci_user_evt_proc+0x90>)
 80061c4:	f000 ff58 	bl	8007078 <hci_notify_asynch_evt>
  }


  return;
 80061c8:	bf00      	nop
 80061ca:	bf00      	nop
}
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	2000004c 	.word	0x2000004c
 80061d8:	20000058 	.word	0x20000058
 80061dc:	20000208 	.word	0x20000208

080061e0 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b088      	sub	sp, #32
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	460b      	mov	r3, r1
 80061ea:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80061ec:	2000      	movs	r0, #0
 80061ee:	f000 f8d1 	bl	8006394 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80061f2:	2300      	movs	r3, #0
 80061f4:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	885b      	ldrh	r3, [r3, #2]
 80061fa:	b21b      	sxth	r3, r3
 80061fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006200:	b21a      	sxth	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	881b      	ldrh	r3, [r3, #0]
 8006206:	029b      	lsls	r3, r3, #10
 8006208:	b21b      	sxth	r3, r3
 800620a:	4313      	orrs	r3, r2
 800620c:	b21b      	sxth	r3, r3
 800620e:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8006210:	4b33      	ldr	r3, [pc, #204]	; (80062e0 <hci_send_req+0x100>)
 8006212:	2201      	movs	r2, #1
 8006214:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	b2d9      	uxtb	r1, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	689a      	ldr	r2, [r3, #8]
 8006220:	8bbb      	ldrh	r3, [r7, #28]
 8006222:	4618      	mov	r0, r3
 8006224:	f000 f890 	bl	8006348 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8006228:	e04e      	b.n	80062c8 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800622a:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800622e:	f000 ff3a 	bl	80070a6 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8006232:	e043      	b.n	80062bc <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8006234:	f107 030c 	add.w	r3, r7, #12
 8006238:	4619      	mov	r1, r3
 800623a:	482a      	ldr	r0, [pc, #168]	; (80062e4 <hci_send_req+0x104>)
 800623c:	f000 fd49 	bl	8006cd2 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	7a5b      	ldrb	r3, [r3, #9]
 8006244:	2b0f      	cmp	r3, #15
 8006246:	d114      	bne.n	8006272 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	330b      	adds	r3, #11
 800624c:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	885b      	ldrh	r3, [r3, #2]
 8006252:	b29b      	uxth	r3, r3
 8006254:	8bba      	ldrh	r2, [r7, #28]
 8006256:	429a      	cmp	r2, r3
 8006258:	d104      	bne.n	8006264 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	7812      	ldrb	r2, [r2, #0]
 8006262:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	785b      	ldrb	r3, [r3, #1]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d027      	beq.n	80062bc <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800626c:	2301      	movs	r3, #1
 800626e:	77fb      	strb	r3, [r7, #31]
 8006270:	e024      	b.n	80062bc <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	330b      	adds	r3, #11
 8006276:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800627e:	b29b      	uxth	r3, r3
 8006280:	8bba      	ldrh	r2, [r7, #28]
 8006282:	429a      	cmp	r2, r3
 8006284:	d114      	bne.n	80062b0 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	7a9b      	ldrb	r3, [r3, #10]
 800628a:	3b03      	subs	r3, #3
 800628c:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	695a      	ldr	r2, [r3, #20]
 8006292:	7dfb      	ldrb	r3, [r7, #23]
 8006294:	429a      	cmp	r2, r3
 8006296:	bfa8      	it	ge
 8006298:	461a      	movge	r2, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6918      	ldr	r0, [r3, #16]
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	1cd9      	adds	r1, r3, #3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	461a      	mov	r2, r3
 80062ac:	f001 fea4 	bl	8007ff8 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d001      	beq.n	80062bc <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80062b8:	2301      	movs	r3, #1
 80062ba:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80062bc:	4809      	ldr	r0, [pc, #36]	; (80062e4 <hci_send_req+0x104>)
 80062be:	f000 fc79 	bl	8006bb4 <LST_is_empty>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d0b5      	beq.n	8006234 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80062c8:	7ffb      	ldrb	r3, [r7, #31]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d0ad      	beq.n	800622a <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80062ce:	2001      	movs	r0, #1
 80062d0:	f000 f860 	bl	8006394 <NotifyCmdStatus>

  return 0;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3720      	adds	r7, #32
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	20000234 	.word	0x20000234
 80062e4:	20000228 	.word	0x20000228

080062e8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b086      	sub	sp, #24
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80062f0:	480f      	ldr	r0, [pc, #60]	; (8006330 <TlInit+0x48>)
 80062f2:	f000 fc4f 	bl	8006b94 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80062f6:	4a0f      	ldr	r2, [pc, #60]	; (8006334 <TlInit+0x4c>)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80062fc:	480e      	ldr	r0, [pc, #56]	; (8006338 <TlInit+0x50>)
 80062fe:	f000 fc49 	bl	8006b94 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8006302:	4b0e      	ldr	r3, [pc, #56]	; (800633c <TlInit+0x54>)
 8006304:	2201      	movs	r2, #1
 8006306:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8006308:	4b0d      	ldr	r3, [pc, #52]	; (8006340 <TlInit+0x58>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00a      	beq.n	8006326 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8006314:	4b0b      	ldr	r3, [pc, #44]	; (8006344 <TlInit+0x5c>)
 8006316:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8006318:	4b09      	ldr	r3, [pc, #36]	; (8006340 <TlInit+0x58>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f107 0208 	add.w	r2, r7, #8
 8006320:	4610      	mov	r0, r2
 8006322:	4798      	blx	r3
  }

  return;
 8006324:	bf00      	nop
 8006326:	bf00      	nop
}
 8006328:	3718      	adds	r7, #24
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	20000228 	.word	0x20000228
 8006334:	20000054 	.word	0x20000054
 8006338:	2000004c 	.word	0x2000004c
 800633c:	20000058 	.word	0x20000058
 8006340:	20000208 	.word	0x20000208
 8006344:	080063d5 	.word	0x080063d5

08006348 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	4603      	mov	r3, r0
 8006350:	603a      	str	r2, [r7, #0]
 8006352:	80fb      	strh	r3, [r7, #6]
 8006354:	460b      	mov	r3, r1
 8006356:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8006358:	4b0c      	ldr	r3, [pc, #48]	; (800638c <SendCmd+0x44>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	88fa      	ldrh	r2, [r7, #6]
 800635e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8006362:	4b0a      	ldr	r3, [pc, #40]	; (800638c <SendCmd+0x44>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	797a      	ldrb	r2, [r7, #5]
 8006368:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800636a:	4b08      	ldr	r3, [pc, #32]	; (800638c <SendCmd+0x44>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	330c      	adds	r3, #12
 8006370:	797a      	ldrb	r2, [r7, #5]
 8006372:	6839      	ldr	r1, [r7, #0]
 8006374:	4618      	mov	r0, r3
 8006376:	f001 fe3f 	bl	8007ff8 <memcpy>

  hciContext.io.Send(0,0);
 800637a:	4b05      	ldr	r3, [pc, #20]	; (8006390 <SendCmd+0x48>)
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	2100      	movs	r1, #0
 8006380:	2000      	movs	r0, #0
 8006382:	4798      	blx	r3

  return;
 8006384:	bf00      	nop
}
 8006386:	3708      	adds	r7, #8
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	20000054 	.word	0x20000054
 8006390:	20000208 	.word	0x20000208

08006394 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	4603      	mov	r3, r0
 800639c:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800639e:	79fb      	ldrb	r3, [r7, #7]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d108      	bne.n	80063b6 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80063a4:	4b0a      	ldr	r3, [pc, #40]	; (80063d0 <NotifyCmdStatus+0x3c>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d00d      	beq.n	80063c8 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80063ac:	4b08      	ldr	r3, [pc, #32]	; (80063d0 <NotifyCmdStatus+0x3c>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2000      	movs	r0, #0
 80063b2:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80063b4:	e008      	b.n	80063c8 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80063b6:	4b06      	ldr	r3, [pc, #24]	; (80063d0 <NotifyCmdStatus+0x3c>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d004      	beq.n	80063c8 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80063be:	4b04      	ldr	r3, [pc, #16]	; (80063d0 <NotifyCmdStatus+0x3c>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2001      	movs	r0, #1
 80063c4:	4798      	blx	r3
  return;
 80063c6:	bf00      	nop
 80063c8:	bf00      	nop
}
 80063ca:	3708      	adds	r7, #8
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	20000230 	.word	0x20000230

080063d4 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	7a5b      	ldrb	r3, [r3, #9]
 80063e0:	2b0f      	cmp	r3, #15
 80063e2:	d003      	beq.n	80063ec <TlEvtReceived+0x18>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	7a5b      	ldrb	r3, [r3, #9]
 80063e8:	2b0e      	cmp	r3, #14
 80063ea:	d107      	bne.n	80063fc <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80063ec:	6879      	ldr	r1, [r7, #4]
 80063ee:	4809      	ldr	r0, [pc, #36]	; (8006414 <TlEvtReceived+0x40>)
 80063f0:	f000 fc28 	bl	8006c44 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80063f4:	2000      	movs	r0, #0
 80063f6:	f000 fe4b 	bl	8007090 <hci_cmd_resp_release>
 80063fa:	e006      	b.n	800640a <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80063fc:	6879      	ldr	r1, [r7, #4]
 80063fe:	4806      	ldr	r0, [pc, #24]	; (8006418 <TlEvtReceived+0x44>)
 8006400:	f000 fc20 	bl	8006c44 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8006404:	4804      	ldr	r0, [pc, #16]	; (8006418 <TlEvtReceived+0x44>)
 8006406:	f000 fe37 	bl	8007078 <hci_notify_asynch_evt>
  }

  return;
 800640a:	bf00      	nop
}
 800640c:	3708      	adds	r7, #8
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	20000228 	.word	0x20000228
 8006418:	2000004c 	.word	0x2000004c

0800641c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a05      	ldr	r2, [pc, #20]	; (800643c <hci_register_io_bus+0x20>)
 8006428:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a04      	ldr	r2, [pc, #16]	; (8006440 <hci_register_io_bus+0x24>)
 800642e:	611a      	str	r2, [r3, #16]

  return;
 8006430:	bf00      	nop
}
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr
 800643c:	08006735 	.word	0x08006735
 8006440:	0800679d 	.word	0x0800679d

08006444 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	4a08      	ldr	r2, [pc, #32]	; (8006474 <shci_init+0x30>)
 8006454:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8006456:	4a08      	ldr	r2, [pc, #32]	; (8006478 <shci_init+0x34>)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800645c:	4806      	ldr	r0, [pc, #24]	; (8006478 <shci_init+0x34>)
 800645e:	f000 f915 	bl	800668c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4618      	mov	r0, r3
 8006468:	f000 f898 	bl	800659c <TlInit>

  return;
 800646c:	bf00      	nop
}
 800646e:	3708      	adds	r7, #8
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	20000258 	.word	0x20000258
 8006478:	20000238 	.word	0x20000238

0800647c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8006482:	4822      	ldr	r0, [pc, #136]	; (800650c <shci_user_evt_proc+0x90>)
 8006484:	f000 fb96 	bl	8006bb4 <LST_is_empty>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d12b      	bne.n	80064e6 <shci_user_evt_proc+0x6a>
 800648e:	4b20      	ldr	r3, [pc, #128]	; (8006510 <shci_user_evt_proc+0x94>)
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d027      	beq.n	80064e6 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8006496:	f107 030c 	add.w	r3, r7, #12
 800649a:	4619      	mov	r1, r3
 800649c:	481b      	ldr	r0, [pc, #108]	; (800650c <shci_user_evt_proc+0x90>)
 800649e:	f000 fc18 	bl	8006cd2 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80064a2:	4b1c      	ldr	r3, [pc, #112]	; (8006514 <shci_user_evt_proc+0x98>)
 80064a4:	69db      	ldr	r3, [r3, #28]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00c      	beq.n	80064c4 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80064ae:	2301      	movs	r3, #1
 80064b0:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80064b2:	4b18      	ldr	r3, [pc, #96]	; (8006514 <shci_user_evt_proc+0x98>)
 80064b4:	69db      	ldr	r3, [r3, #28]
 80064b6:	1d3a      	adds	r2, r7, #4
 80064b8:	4610      	mov	r0, r2
 80064ba:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80064bc:	793a      	ldrb	r2, [r7, #4]
 80064be:	4b14      	ldr	r3, [pc, #80]	; (8006510 <shci_user_evt_proc+0x94>)
 80064c0:	701a      	strb	r2, [r3, #0]
 80064c2:	e002      	b.n	80064ca <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80064c4:	4b12      	ldr	r3, [pc, #72]	; (8006510 <shci_user_evt_proc+0x94>)
 80064c6:	2201      	movs	r2, #1
 80064c8:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80064ca:	4b11      	ldr	r3, [pc, #68]	; (8006510 <shci_user_evt_proc+0x94>)
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d004      	beq.n	80064dc <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	4618      	mov	r0, r3
 80064d6:	f000 fa71 	bl	80069bc <TL_MM_EvtDone>
 80064da:	e004      	b.n	80064e6 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	4619      	mov	r1, r3
 80064e0:	480a      	ldr	r0, [pc, #40]	; (800650c <shci_user_evt_proc+0x90>)
 80064e2:	f000 fb89 	bl	8006bf8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80064e6:	4809      	ldr	r0, [pc, #36]	; (800650c <shci_user_evt_proc+0x90>)
 80064e8:	f000 fb64 	bl	8006bb4 <LST_is_empty>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d107      	bne.n	8006502 <shci_user_evt_proc+0x86>
 80064f2:	4b07      	ldr	r3, [pc, #28]	; (8006510 <shci_user_evt_proc+0x94>)
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d003      	beq.n	8006502 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80064fa:	4804      	ldr	r0, [pc, #16]	; (800650c <shci_user_evt_proc+0x90>)
 80064fc:	f7fa fa3c 	bl	8000978 <shci_notify_asynch_evt>
  }


  return;
 8006500:	bf00      	nop
 8006502:	bf00      	nop
}
 8006504:	3710      	adds	r7, #16
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	2000005c 	.word	0x2000005c
 8006510:	2000006c 	.word	0x2000006c
 8006514:	20000238 	.word	0x20000238

08006518 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	60ba      	str	r2, [r7, #8]
 8006520:	607b      	str	r3, [r7, #4]
 8006522:	4603      	mov	r3, r0
 8006524:	81fb      	strh	r3, [r7, #14]
 8006526:	460b      	mov	r3, r1
 8006528:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800652a:	2000      	movs	r0, #0
 800652c:	f000 f868 	bl	8006600 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8006530:	4b17      	ldr	r3, [pc, #92]	; (8006590 <shci_send+0x78>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	89fa      	ldrh	r2, [r7, #14]
 8006536:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800653a:	4b15      	ldr	r3, [pc, #84]	; (8006590 <shci_send+0x78>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	7b7a      	ldrb	r2, [r7, #13]
 8006540:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8006542:	4b13      	ldr	r3, [pc, #76]	; (8006590 <shci_send+0x78>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	330c      	adds	r3, #12
 8006548:	7b7a      	ldrb	r2, [r7, #13]
 800654a:	68b9      	ldr	r1, [r7, #8]
 800654c:	4618      	mov	r0, r3
 800654e:	f001 fd53 	bl	8007ff8 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8006552:	4b10      	ldr	r3, [pc, #64]	; (8006594 <shci_send+0x7c>)
 8006554:	2201      	movs	r2, #1
 8006556:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8006558:	4b0f      	ldr	r3, [pc, #60]	; (8006598 <shci_send+0x80>)
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	2100      	movs	r1, #0
 800655e:	2000      	movs	r0, #0
 8006560:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8006562:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8006566:	f7fa fa1e 	bl	80009a6 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f103 0008 	add.w	r0, r3, #8
 8006570:	4b07      	ldr	r3, [pc, #28]	; (8006590 <shci_send+0x78>)
 8006572:	6819      	ldr	r1, [r3, #0]
 8006574:	4b06      	ldr	r3, [pc, #24]	; (8006590 <shci_send+0x78>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	789b      	ldrb	r3, [r3, #2]
 800657a:	3303      	adds	r3, #3
 800657c:	461a      	mov	r2, r3
 800657e:	f001 fd3b 	bl	8007ff8 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8006582:	2001      	movs	r0, #1
 8006584:	f000 f83c 	bl	8006600 <Cmd_SetStatus>

  return;
 8006588:	bf00      	nop
}
 800658a:	3710      	adds	r7, #16
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}
 8006590:	20000068 	.word	0x20000068
 8006594:	2000025c 	.word	0x2000025c
 8006598:	20000238 	.word	0x20000238

0800659c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b086      	sub	sp, #24
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80065a4:	4a10      	ldr	r2, [pc, #64]	; (80065e8 <TlInit+0x4c>)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80065aa:	4810      	ldr	r0, [pc, #64]	; (80065ec <TlInit+0x50>)
 80065ac:	f000 faf2 	bl	8006b94 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80065b0:	2001      	movs	r0, #1
 80065b2:	f000 f825 	bl	8006600 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80065b6:	4b0e      	ldr	r3, [pc, #56]	; (80065f0 <TlInit+0x54>)
 80065b8:	2201      	movs	r2, #1
 80065ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80065bc:	4b0d      	ldr	r3, [pc, #52]	; (80065f4 <TlInit+0x58>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00c      	beq.n	80065de <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80065c8:	4b0b      	ldr	r3, [pc, #44]	; (80065f8 <TlInit+0x5c>)
 80065ca:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80065cc:	4b0b      	ldr	r3, [pc, #44]	; (80065fc <TlInit+0x60>)
 80065ce:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80065d0:	4b08      	ldr	r3, [pc, #32]	; (80065f4 <TlInit+0x58>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f107 020c 	add.w	r2, r7, #12
 80065d8:	4610      	mov	r0, r2
 80065da:	4798      	blx	r3
  }

  return;
 80065dc:	bf00      	nop
 80065de:	bf00      	nop
}
 80065e0:	3718      	adds	r7, #24
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	20000068 	.word	0x20000068
 80065ec:	2000005c 	.word	0x2000005c
 80065f0:	2000006c 	.word	0x2000006c
 80065f4:	20000238 	.word	0x20000238
 80065f8:	08006651 	.word	0x08006651
 80065fc:	08006669 	.word	0x08006669

08006600 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
 8006606:	4603      	mov	r3, r0
 8006608:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800660a:	79fb      	ldrb	r3, [r7, #7]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d10b      	bne.n	8006628 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8006610:	4b0d      	ldr	r3, [pc, #52]	; (8006648 <Cmd_SetStatus+0x48>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d003      	beq.n	8006620 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8006618:	4b0b      	ldr	r3, [pc, #44]	; (8006648 <Cmd_SetStatus+0x48>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2000      	movs	r0, #0
 800661e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8006620:	4b0a      	ldr	r3, [pc, #40]	; (800664c <Cmd_SetStatus+0x4c>)
 8006622:	2200      	movs	r2, #0
 8006624:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8006626:	e00b      	b.n	8006640 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8006628:	4b08      	ldr	r3, [pc, #32]	; (800664c <Cmd_SetStatus+0x4c>)
 800662a:	2201      	movs	r2, #1
 800662c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800662e:	4b06      	ldr	r3, [pc, #24]	; (8006648 <Cmd_SetStatus+0x48>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d004      	beq.n	8006640 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8006636:	4b04      	ldr	r3, [pc, #16]	; (8006648 <Cmd_SetStatus+0x48>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2001      	movs	r0, #1
 800663c:	4798      	blx	r3
  return;
 800663e:	bf00      	nop
 8006640:	bf00      	nop
}
 8006642:	3708      	adds	r7, #8
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	20000258 	.word	0x20000258
 800664c:	20000064 	.word	0x20000064

08006650 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8006658:	2000      	movs	r0, #0
 800665a:	f7fa f999 	bl	8000990 <shci_cmd_resp_release>

  return;
 800665e:	bf00      	nop
}
 8006660:	3708      	adds	r7, #8
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
	...

08006668 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8006670:	6879      	ldr	r1, [r7, #4]
 8006672:	4805      	ldr	r0, [pc, #20]	; (8006688 <TlUserEvtReceived+0x20>)
 8006674:	f000 fae6 	bl	8006c44 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8006678:	4803      	ldr	r0, [pc, #12]	; (8006688 <TlUserEvtReceived+0x20>)
 800667a:	f7fa f97d 	bl	8000978 <shci_notify_asynch_evt>

  return;
 800667e:	bf00      	nop
}
 8006680:	3708      	adds	r7, #8
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	2000005c 	.word	0x2000005c

0800668c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a05      	ldr	r2, [pc, #20]	; (80066ac <shci_register_io_bus+0x20>)
 8006698:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a04      	ldr	r2, [pc, #16]	; (80066b0 <shci_register_io_bus+0x24>)
 800669e:	611a      	str	r2, [r3, #16]

  return;
 80066a0:	bf00      	nop
}
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr
 80066ac:	08006849 	.word	0x08006849
 80066b0:	0800689d 	.word	0x0800689d

080066b4 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80066b8:	f001 f8ea 	bl	8007890 <HW_IPCC_Enable>

  return;
 80066bc:	bf00      	nop
}
 80066be:	bd80      	pop	{r7, pc}

080066c0 <TL_Init>:


void TL_Init( void )
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80066c4:	4b10      	ldr	r3, [pc, #64]	; (8006708 <TL_Init+0x48>)
 80066c6:	4a11      	ldr	r2, [pc, #68]	; (800670c <TL_Init+0x4c>)
 80066c8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80066ca:	4b0f      	ldr	r3, [pc, #60]	; (8006708 <TL_Init+0x48>)
 80066cc:	4a10      	ldr	r2, [pc, #64]	; (8006710 <TL_Init+0x50>)
 80066ce:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80066d0:	4b0d      	ldr	r3, [pc, #52]	; (8006708 <TL_Init+0x48>)
 80066d2:	4a10      	ldr	r2, [pc, #64]	; (8006714 <TL_Init+0x54>)
 80066d4:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80066d6:	4b0c      	ldr	r3, [pc, #48]	; (8006708 <TL_Init+0x48>)
 80066d8:	4a0f      	ldr	r2, [pc, #60]	; (8006718 <TL_Init+0x58>)
 80066da:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 80066dc:	4b0a      	ldr	r3, [pc, #40]	; (8006708 <TL_Init+0x48>)
 80066de:	4a0f      	ldr	r2, [pc, #60]	; (800671c <TL_Init+0x5c>)
 80066e0:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80066e2:	4b09      	ldr	r3, [pc, #36]	; (8006708 <TL_Init+0x48>)
 80066e4:	4a0e      	ldr	r2, [pc, #56]	; (8006720 <TL_Init+0x60>)
 80066e6:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80066e8:	4b07      	ldr	r3, [pc, #28]	; (8006708 <TL_Init+0x48>)
 80066ea:	4a0e      	ldr	r2, [pc, #56]	; (8006724 <TL_Init+0x64>)
 80066ec:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80066ee:	4b06      	ldr	r3, [pc, #24]	; (8006708 <TL_Init+0x48>)
 80066f0:	4a0d      	ldr	r2, [pc, #52]	; (8006728 <TL_Init+0x68>)
 80066f2:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80066f4:	4b04      	ldr	r3, [pc, #16]	; (8006708 <TL_Init+0x48>)
 80066f6:	4a0d      	ldr	r2, [pc, #52]	; (800672c <TL_Init+0x6c>)
 80066f8:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80066fa:	4b03      	ldr	r3, [pc, #12]	; (8006708 <TL_Init+0x48>)
 80066fc:	4a0c      	ldr	r2, [pc, #48]	; (8006730 <TL_Init+0x70>)
 80066fe:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8006700:	f001 f8da 	bl	80078b8 <HW_IPCC_Init>

  return;
 8006704:	bf00      	nop
}
 8006706:	bd80      	pop	{r7, pc}
 8006708:	20030000 	.word	0x20030000
 800670c:	20030028 	.word	0x20030028
 8006710:	20030048 	.word	0x20030048
 8006714:	20030058 	.word	0x20030058
 8006718:	20030068 	.word	0x20030068
 800671c:	20030070 	.word	0x20030070
 8006720:	20030078 	.word	0x20030078
 8006724:	20030080 	.word	0x20030080
 8006728:	2003009c 	.word	0x2003009c
 800672c:	200300a0 	.word	0x200300a0
 8006730:	200300ac 	.word	0x200300ac

08006734 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8006740:	4811      	ldr	r0, [pc, #68]	; (8006788 <TL_BLE_Init+0x54>)
 8006742:	f000 fa27 	bl	8006b94 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8006746:	4b11      	ldr	r3, [pc, #68]	; (800678c <TL_BLE_Init+0x58>)
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	689a      	ldr	r2, [r3, #8]
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	68da      	ldr	r2, [r3, #12]
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	4a0c      	ldr	r2, [pc, #48]	; (8006790 <TL_BLE_Init+0x5c>)
 8006760:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	4a08      	ldr	r2, [pc, #32]	; (8006788 <TL_BLE_Init+0x54>)
 8006766:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8006768:	f001 f8bc 	bl	80078e4 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a08      	ldr	r2, [pc, #32]	; (8006794 <TL_BLE_Init+0x60>)
 8006772:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	4a07      	ldr	r2, [pc, #28]	; (8006798 <TL_BLE_Init+0x64>)
 800677a:	6013      	str	r3, [r2, #0]

  return 0;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3710      	adds	r7, #16
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	200300c8 	.word	0x200300c8
 800678c:	20030000 	.word	0x20030000
 8006790:	20030a58 	.word	0x20030a58
 8006794:	20000268 	.word	0x20000268
 8006798:	2000026c 	.word	0x2000026c

0800679c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	460b      	mov	r3, r1
 80067a6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80067a8:	4b09      	ldr	r3, [pc, #36]	; (80067d0 <TL_BLE_SendCmd+0x34>)
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2201      	movs	r2, #1
 80067b0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 80067b2:	4b07      	ldr	r3, [pc, #28]	; (80067d0 <TL_BLE_SendCmd+0x34>)
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4619      	mov	r1, r3
 80067ba:	2001      	movs	r0, #1
 80067bc:	f000 f96c 	bl	8006a98 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 80067c0:	f001 f89a 	bl	80078f8 <HW_IPCC_BLE_SendCmd>

  return 0;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3708      	adds	r7, #8
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	20030000 	.word	0x20030000

080067d4 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80067da:	e01c      	b.n	8006816 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80067dc:	1d3b      	adds	r3, r7, #4
 80067de:	4619      	mov	r1, r3
 80067e0:	4812      	ldr	r0, [pc, #72]	; (800682c <HW_IPCC_BLE_RxEvtNot+0x58>)
 80067e2:	f000 fa76 	bl	8006cd2 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	7a5b      	ldrb	r3, [r3, #9]
 80067ea:	2b0f      	cmp	r3, #15
 80067ec:	d003      	beq.n	80067f6 <HW_IPCC_BLE_RxEvtNot+0x22>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	7a5b      	ldrb	r3, [r3, #9]
 80067f2:	2b0e      	cmp	r3, #14
 80067f4:	d105      	bne.n	8006802 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4619      	mov	r1, r3
 80067fa:	2002      	movs	r0, #2
 80067fc:	f000 f94c 	bl	8006a98 <OutputDbgTrace>
 8006800:	e004      	b.n	800680c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4619      	mov	r1, r3
 8006806:	2003      	movs	r0, #3
 8006808:	f000 f946 	bl	8006a98 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800680c:	4b08      	ldr	r3, [pc, #32]	; (8006830 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	4610      	mov	r0, r2
 8006814:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8006816:	4805      	ldr	r0, [pc, #20]	; (800682c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8006818:	f000 f9cc 	bl	8006bb4 <LST_is_empty>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d0dc      	beq.n	80067dc <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8006822:	bf00      	nop
}
 8006824:	3708      	adds	r7, #8
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	200300c8 	.word	0x200300c8
 8006830:	20000268 	.word	0x20000268

08006834 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8006838:	4b02      	ldr	r3, [pc, #8]	; (8006844 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4798      	blx	r3

  return;
 800683e:	bf00      	nop
}
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	2000026c 	.word	0x2000026c

08006848 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8006854:	480d      	ldr	r0, [pc, #52]	; (800688c <TL_SYS_Init+0x44>)
 8006856:	f000 f99d 	bl	8006b94 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800685a:	4b0d      	ldr	r3, [pc, #52]	; (8006890 <TL_SYS_Init+0x48>)
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	689a      	ldr	r2, [r3, #8]
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	4a08      	ldr	r2, [pc, #32]	; (800688c <TL_SYS_Init+0x44>)
 800686c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800686e:	f001 f865 	bl	800793c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a07      	ldr	r2, [pc, #28]	; (8006894 <TL_SYS_Init+0x4c>)
 8006878:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	4a06      	ldr	r2, [pc, #24]	; (8006898 <TL_SYS_Init+0x50>)
 8006880:	6013      	str	r3, [r2, #0]

  return 0;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3710      	adds	r7, #16
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	200300d0 	.word	0x200300d0
 8006890:	20030000 	.word	0x20030000
 8006894:	20000270 	.word	0x20000270
 8006898:	20000274 	.word	0x20000274

0800689c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	460b      	mov	r3, r1
 80068a6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80068a8:	4b09      	ldr	r3, [pc, #36]	; (80068d0 <TL_SYS_SendCmd+0x34>)
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2210      	movs	r2, #16
 80068b0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 80068b2:	4b07      	ldr	r3, [pc, #28]	; (80068d0 <TL_SYS_SendCmd+0x34>)
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4619      	mov	r1, r3
 80068ba:	2004      	movs	r0, #4
 80068bc:	f000 f8ec 	bl	8006a98 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 80068c0:	f001 f846 	bl	8007950 <HW_IPCC_SYS_SendCmd>

  return 0;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3708      	adds	r7, #8
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	20030000 	.word	0x20030000

080068d4 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80068d8:	4b07      	ldr	r3, [pc, #28]	; (80068f8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4619      	mov	r1, r3
 80068e0:	2005      	movs	r0, #5
 80068e2:	f000 f8d9 	bl	8006a98 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80068e6:	4b05      	ldr	r3, [pc, #20]	; (80068fc <HW_IPCC_SYS_CmdEvtNot+0x28>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a03      	ldr	r2, [pc, #12]	; (80068f8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80068ec:	68d2      	ldr	r2, [r2, #12]
 80068ee:	6812      	ldr	r2, [r2, #0]
 80068f0:	4610      	mov	r0, r2
 80068f2:	4798      	blx	r3

  return;
 80068f4:	bf00      	nop
}
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	20030000 	.word	0x20030000
 80068fc:	20000270 	.word	0x20000270

08006900 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8006906:	e00e      	b.n	8006926 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8006908:	1d3b      	adds	r3, r7, #4
 800690a:	4619      	mov	r1, r3
 800690c:	480b      	ldr	r0, [pc, #44]	; (800693c <HW_IPCC_SYS_EvtNot+0x3c>)
 800690e:	f000 f9e0 	bl	8006cd2 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4619      	mov	r1, r3
 8006916:	2006      	movs	r0, #6
 8006918:	f000 f8be 	bl	8006a98 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800691c:	4b08      	ldr	r3, [pc, #32]	; (8006940 <HW_IPCC_SYS_EvtNot+0x40>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	4610      	mov	r0, r2
 8006924:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8006926:	4805      	ldr	r0, [pc, #20]	; (800693c <HW_IPCC_SYS_EvtNot+0x3c>)
 8006928:	f000 f944 	bl	8006bb4 <LST_is_empty>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d0ea      	beq.n	8006908 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8006932:	bf00      	nop
}
 8006934:	3708      	adds	r7, #8
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	200300d0 	.word	0x200300d0
 8006940:	20000274 	.word	0x20000274

08006944 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800694c:	4817      	ldr	r0, [pc, #92]	; (80069ac <TL_MM_Init+0x68>)
 800694e:	f000 f921 	bl	8006b94 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8006952:	4817      	ldr	r0, [pc, #92]	; (80069b0 <TL_MM_Init+0x6c>)
 8006954:	f000 f91e 	bl	8006b94 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8006958:	4b16      	ldr	r3, [pc, #88]	; (80069b4 <TL_MM_Init+0x70>)
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	4a16      	ldr	r2, [pc, #88]	; (80069b8 <TL_MM_Init+0x74>)
 800695e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8006960:	4b15      	ldr	r3, [pc, #84]	; (80069b8 <TL_MM_Init+0x74>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	6892      	ldr	r2, [r2, #8]
 8006968:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800696a:	4b13      	ldr	r3, [pc, #76]	; (80069b8 <TL_MM_Init+0x74>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	68d2      	ldr	r2, [r2, #12]
 8006972:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8006974:	4b10      	ldr	r3, [pc, #64]	; (80069b8 <TL_MM_Init+0x74>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a0c      	ldr	r2, [pc, #48]	; (80069ac <TL_MM_Init+0x68>)
 800697a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800697c:	4b0e      	ldr	r3, [pc, #56]	; (80069b8 <TL_MM_Init+0x74>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	6812      	ldr	r2, [r2, #0]
 8006984:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8006986:	4b0c      	ldr	r3, [pc, #48]	; (80069b8 <TL_MM_Init+0x74>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	6852      	ldr	r2, [r2, #4]
 800698e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8006990:	4b09      	ldr	r3, [pc, #36]	; (80069b8 <TL_MM_Init+0x74>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	6912      	ldr	r2, [r2, #16]
 8006998:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800699a:	4b07      	ldr	r3, [pc, #28]	; (80069b8 <TL_MM_Init+0x74>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	6952      	ldr	r2, [r2, #20]
 80069a2:	619a      	str	r2, [r3, #24]

  return;
 80069a4:	bf00      	nop
}
 80069a6:	3708      	adds	r7, #8
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	200300b8 	.word	0x200300b8
 80069b0:	20000260 	.word	0x20000260
 80069b4:	20030000 	.word	0x20030000
 80069b8:	20000278 	.word	0x20000278

080069bc <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80069c4:	6879      	ldr	r1, [r7, #4]
 80069c6:	4807      	ldr	r0, [pc, #28]	; (80069e4 <TL_MM_EvtDone+0x28>)
 80069c8:	f000 f93c 	bl	8006c44 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80069cc:	6879      	ldr	r1, [r7, #4]
 80069ce:	2000      	movs	r0, #0
 80069d0:	f000 f862 	bl	8006a98 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80069d4:	4804      	ldr	r0, [pc, #16]	; (80069e8 <TL_MM_EvtDone+0x2c>)
 80069d6:	f000 ffe1 	bl	800799c <HW_IPCC_MM_SendFreeBuf>

  return;
 80069da:	bf00      	nop
}
 80069dc:	3708      	adds	r7, #8
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	20000260 	.word	0x20000260
 80069e8:	080069ed 	.word	0x080069ed

080069ec <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b082      	sub	sp, #8
 80069f0:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80069f2:	e00c      	b.n	8006a0e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80069f4:	1d3b      	adds	r3, r7, #4
 80069f6:	4619      	mov	r1, r3
 80069f8:	480a      	ldr	r0, [pc, #40]	; (8006a24 <SendFreeBuf+0x38>)
 80069fa:	f000 f96a 	bl	8006cd2 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80069fe:	4b0a      	ldr	r3, [pc, #40]	; (8006a28 <SendFreeBuf+0x3c>)
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	4611      	mov	r1, r2
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f000 f91b 	bl	8006c44 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8006a0e:	4805      	ldr	r0, [pc, #20]	; (8006a24 <SendFreeBuf+0x38>)
 8006a10:	f000 f8d0 	bl	8006bb4 <LST_is_empty>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d0ec      	beq.n	80069f4 <SendFreeBuf+0x8>
  }

  return;
 8006a1a:	bf00      	nop
}
 8006a1c:	3708      	adds	r7, #8
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	20000260 	.word	0x20000260
 8006a28:	20030000 	.word	0x20030000

08006a2c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8006a30:	4805      	ldr	r0, [pc, #20]	; (8006a48 <TL_TRACES_Init+0x1c>)
 8006a32:	f000 f8af 	bl	8006b94 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8006a36:	4b05      	ldr	r3, [pc, #20]	; (8006a4c <TL_TRACES_Init+0x20>)
 8006a38:	695b      	ldr	r3, [r3, #20]
 8006a3a:	4a03      	ldr	r2, [pc, #12]	; (8006a48 <TL_TRACES_Init+0x1c>)
 8006a3c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8006a3e:	f000 ffe3 	bl	8007a08 <HW_IPCC_TRACES_Init>

  return;
 8006a42:	bf00      	nop
}
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	200300c0 	.word	0x200300c0
 8006a4c:	20030000 	.word	0x20030000

08006a50 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8006a56:	e008      	b.n	8006a6a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8006a58:	1d3b      	adds	r3, r7, #4
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	4808      	ldr	r0, [pc, #32]	; (8006a80 <HW_IPCC_TRACES_EvtNot+0x30>)
 8006a5e:	f000 f938 	bl	8006cd2 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4618      	mov	r0, r3
 8006a66:	f000 f80d 	bl	8006a84 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8006a6a:	4805      	ldr	r0, [pc, #20]	; (8006a80 <HW_IPCC_TRACES_EvtNot+0x30>)
 8006a6c:	f000 f8a2 	bl	8006bb4 <LST_is_empty>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d0f0      	beq.n	8006a58 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8006a76:	bf00      	nop
}
 8006a78:	3708      	adds	r7, #8
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	200300c0 	.word	0x200300c0

08006a84 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8006a8c:	bf00      	nop
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b085      	sub	sp, #20
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	6039      	str	r1, [r7, #0]
 8006aa2:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8006aa4:	79fb      	ldrb	r3, [r7, #7]
 8006aa6:	2b06      	cmp	r3, #6
 8006aa8:	d845      	bhi.n	8006b36 <OutputDbgTrace+0x9e>
 8006aaa:	a201      	add	r2, pc, #4	; (adr r2, 8006ab0 <OutputDbgTrace+0x18>)
 8006aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab0:	08006acd 	.word	0x08006acd
 8006ab4:	08006af1 	.word	0x08006af1
 8006ab8:	08006af7 	.word	0x08006af7
 8006abc:	08006b0b 	.word	0x08006b0b
 8006ac0:	08006b17 	.word	0x08006b17
 8006ac4:	08006b1d 	.word	0x08006b1d
 8006ac8:	08006b2b 	.word	0x08006b2b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	7a5b      	ldrb	r3, [r3, #9]
 8006ad4:	2bff      	cmp	r3, #255	; 0xff
 8006ad6:	d005      	beq.n	8006ae4 <OutputDbgTrace+0x4c>
 8006ad8:	2bff      	cmp	r3, #255	; 0xff
 8006ada:	dc05      	bgt.n	8006ae8 <OutputDbgTrace+0x50>
 8006adc:	2b0e      	cmp	r3, #14
 8006ade:	d005      	beq.n	8006aec <OutputDbgTrace+0x54>
 8006ae0:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8006ae2:	e001      	b.n	8006ae8 <OutputDbgTrace+0x50>
          break;
 8006ae4:	bf00      	nop
 8006ae6:	e027      	b.n	8006b38 <OutputDbgTrace+0xa0>
          break;
 8006ae8:	bf00      	nop
 8006aea:	e025      	b.n	8006b38 <OutputDbgTrace+0xa0>
          break;
 8006aec:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8006aee:	e023      	b.n	8006b38 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8006af4:	e020      	b.n	8006b38 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	7a5b      	ldrb	r3, [r3, #9]
 8006afe:	2b0e      	cmp	r3, #14
 8006b00:	d001      	beq.n	8006b06 <OutputDbgTrace+0x6e>
 8006b02:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8006b04:	e000      	b.n	8006b08 <OutputDbgTrace+0x70>
          break;
 8006b06:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8006b08:	e016      	b.n	8006b38 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	7a5b      	ldrb	r3, [r3, #9]
 8006b12:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8006b14:	e010      	b.n	8006b38 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8006b1a:	e00d      	b.n	8006b38 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	7a5b      	ldrb	r3, [r3, #9]
 8006b24:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8006b26:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8006b28:	e006      	b.n	8006b38 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	7a5b      	ldrb	r3, [r3, #9]
 8006b32:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8006b34:	e000      	b.n	8006b38 <OutputDbgTrace+0xa0>

    default:
      break;
 8006b36:	bf00      	nop
  }

  return;
 8006b38:	bf00      	nop
}
 8006b3a:	3714      	adds	r7, #20
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8006b44:	b480      	push	{r7}
 8006b46:	b085      	sub	sp, #20
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8006b4e:	4b0f      	ldr	r3, [pc, #60]	; (8006b8c <OTP_Read+0x48>)
 8006b50:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8006b52:	e002      	b.n	8006b5a <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	3b08      	subs	r3, #8
 8006b58:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	3307      	adds	r3, #7
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	79fa      	ldrb	r2, [r7, #7]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d003      	beq.n	8006b6e <OTP_Read+0x2a>
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	4a09      	ldr	r2, [pc, #36]	; (8006b90 <OTP_Read+0x4c>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d1f2      	bne.n	8006b54 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	3307      	adds	r3, #7
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	79fa      	ldrb	r2, [r7, #7]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d001      	beq.n	8006b7e <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3714      	adds	r7, #20
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr
 8006b8c:	1fff73f8 	.word	0x1fff73f8
 8006b90:	1fff7000 	.word	0x1fff7000

08006b94 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	605a      	str	r2, [r3, #4]
}
 8006ba8:	bf00      	nop
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b087      	sub	sp, #28
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bbc:	f3ef 8310 	mrs	r3, PRIMASK
 8006bc0:	60fb      	str	r3, [r7, #12]
  return(result);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006bc4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006bc6:	b672      	cpsid	i
}
 8006bc8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d102      	bne.n	8006bda <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	75fb      	strb	r3, [r7, #23]
 8006bd8:	e001      	b.n	8006bde <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	75fb      	strb	r3, [r7, #23]
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	f383 8810 	msr	PRIMASK, r3
}
 8006be8:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8006bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	371c      	adds	r7, #28
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b087      	sub	sp, #28
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c02:	f3ef 8310 	mrs	r3, PRIMASK
 8006c06:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c08:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006c0a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006c0c:	b672      	cpsid	i
}
 8006c0e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	683a      	ldr	r2, [r7, #0]
 8006c22:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	683a      	ldr	r2, [r7, #0]
 8006c2a:	605a      	str	r2, [r3, #4]
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	f383 8810 	msr	PRIMASK, r3
}
 8006c36:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8006c38:	bf00      	nop
 8006c3a:	371c      	adds	r7, #28
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b087      	sub	sp, #28
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c4e:	f3ef 8310 	mrs	r3, PRIMASK
 8006c52:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c54:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006c56:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006c58:	b672      	cpsid	i
}
 8006c5a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	685a      	ldr	r2, [r3, #4]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	683a      	ldr	r2, [r7, #0]
 8006c6e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	683a      	ldr	r2, [r7, #0]
 8006c76:	601a      	str	r2, [r3, #0]
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	f383 8810 	msr	PRIMASK, r3
}
 8006c82:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8006c84:	bf00      	nop
 8006c86:	371c      	adds	r7, #28
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b087      	sub	sp, #28
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c98:	f3ef 8310 	mrs	r3, PRIMASK
 8006c9c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006ca0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006ca2:	b672      	cpsid	i
}
 8006ca4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	6812      	ldr	r2, [r2, #0]
 8006cae:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	6852      	ldr	r2, [r2, #4]
 8006cb8:	605a      	str	r2, [r3, #4]
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	f383 8810 	msr	PRIMASK, r3
}
 8006cc4:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8006cc6:	bf00      	nop
 8006cc8:	371c      	adds	r7, #28
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr

08006cd2 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b086      	sub	sp, #24
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
 8006cda:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cdc:	f3ef 8310 	mrs	r3, PRIMASK
 8006ce0:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006ce4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006ce6:	b672      	cpsid	i
}
 8006ce8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7ff ffca 	bl	8006c90 <LST_remove_node>
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	f383 8810 	msr	PRIMASK, r3
}
 8006d06:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8006d08:	bf00      	nop
 8006d0a:	3718      	adds	r7, #24
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <__NVIC_SystemReset>:
{
 8006d10:	b480      	push	{r7}
 8006d12:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8006d14:	f3bf 8f4f 	dsb	sy
}
 8006d18:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006d1a:	4b06      	ldr	r3, [pc, #24]	; (8006d34 <__NVIC_SystemReset+0x24>)
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006d22:	4904      	ldr	r1, [pc, #16]	; (8006d34 <__NVIC_SystemReset+0x24>)
 8006d24:	4b04      	ldr	r3, [pc, #16]	; (8006d38 <__NVIC_SystemReset+0x28>)
 8006d26:	4313      	orrs	r3, r2
 8006d28:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006d2a:	f3bf 8f4f 	dsb	sy
}
 8006d2e:	bf00      	nop
    __NOP();
 8006d30:	bf00      	nop
 8006d32:	e7fd      	b.n	8006d30 <__NVIC_SystemReset+0x20>
 8006d34:	e000ed00 	.word	0xe000ed00
 8006d38:	05fa0004 	.word	0x05fa0004

08006d3c <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8006d40:	4b03      	ldr	r3, [pc, #12]	; (8006d50 <LL_FLASH_GetUDN+0x14>)
 8006d42:	681b      	ldr	r3, [r3, #0]
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	1fff7580 	.word	0x1fff7580

08006d54 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8006d54:	b480      	push	{r7}
 8006d56:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8006d58:	4b03      	ldr	r3, [pc, #12]	; (8006d68 <LL_FLASH_GetDeviceID+0x14>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	b2db      	uxtb	r3, r3
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr
 8006d68:	1fff7584 	.word	0x1fff7584

08006d6c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8006d70:	4b03      	ldr	r3, [pc, #12]	; (8006d80 <LL_FLASH_GetSTCompanyID+0x14>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	0a1b      	lsrs	r3, r3, #8
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr
 8006d80:	1fff7584 	.word	0x1fff7584

08006d84 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8006d84:	b5b0      	push	{r4, r5, r7, lr}
 8006d86:	b090      	sub	sp, #64	; 0x40
 8006d88:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
  /* USER CODE BEGIN APP_BLE_Init_1 */
  UTIL_SEQ_RegTask(1<<CFG_TASK_INIT_TEMP, UTIL_SEQ_RFU, initTemp);
 8006d8a:	4a21      	ldr	r2, [pc, #132]	; (8006e10 <APP_BLE_Init+0x8c>)
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	2004      	movs	r0, #4
 8006d90:	f000 ffc4 	bl	8007d1c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1<<CFG_TASK_UPDATE_TEMP, UTIL_SEQ_RFU, updateTemp);
 8006d94:	4a1f      	ldr	r2, [pc, #124]	; (8006e14 <APP_BLE_Init+0x90>)
 8006d96:	2100      	movs	r1, #0
 8006d98:	2008      	movs	r0, #8
 8006d9a:	f000 ffbf 	bl	8007d1c <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask(1<<CFG_TASK_INIT_TEMP, CFG_SCH_PRIO_0);
 8006d9e:	2100      	movs	r1, #0
 8006da0:	2004      	movs	r0, #4
 8006da2:	f000 ffdd 	bl	8007d60 <UTIL_SEQ_SetTask>
  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8006da6:	4b1c      	ldr	r3, [pc, #112]	; (8006e18 <APP_BLE_Init+0x94>)
 8006da8:	1d3c      	adds	r4, r7, #4
 8006daa:	461d      	mov	r5, r3
 8006dac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006dae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006db0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006db2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006db4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006db6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006db8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006dbc:	c403      	stmia	r4!, {r0, r1}
 8006dbe:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8006dc0:	f000 f864 	bl	8006e8c <Ble_Tl_Init>

#if (CFG_LPM_STANDBY_SUPPORTED == 0)
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8006dc4:	2101      	movs	r1, #1
 8006dc6:	2002      	movs	r0, #2
 8006dc8:	f000 fe46 	bl	8007a58 <UTIL_LPM_SetOffMode>
#endif /* CFG_LPM_STANDBY_SUPPORTED == 0 */

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8006dcc:	4a13      	ldr	r2, [pc, #76]	; (8006e1c <APP_BLE_Init+0x98>)
 8006dce:	2100      	movs	r1, #0
 8006dd0:	2002      	movs	r0, #2
 8006dd2:	f000 ffa3 	bl	8007d1c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8006dd6:	1d3b      	adds	r3, r7, #4
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7ff f8a5 	bl	8005f28 <SHCI_C2_BLE_Init>
 8006dde:	4603      	mov	r3, r0
 8006de0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (status != SHCI_Success)
 8006de4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d001      	beq.n	8006df0 <APP_BLE_Init+0x6c>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8006dec:	f7fa fde4 	bl	80019b8 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8006df0:	f000 f862 	bl	8006eb8 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8006df4:	f7ff f80c 	bl	8005e10 <SVCCTL_Init>

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_BEACON_UPDATE_REQ_ID, UTIL_SEQ_RFU, Beacon_Update);
 8006df8:	4a09      	ldr	r2, [pc, #36]	; (8006e20 <APP_BLE_Init+0x9c>)
 8006dfa:	2100      	movs	r1, #0
 8006dfc:	2001      	movs	r0, #1
 8006dfe:	f000 ff8d 	bl	8007d1c <UTIL_SEQ_RegTask>
    EddystoneTLM_Process();
  }
  else if (CFG_BEACON_TYPE & CFG_IBEACON)
  {
    APP_DBG_MSG("Ibeacon advertise\n\r");
    IBeacon_Process();
 8006e02:	f000 fa71 	bl	80072e8 <IBeacon_Process>
  }
  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8006e06:	bf00      	nop
}
 8006e08:	3740      	adds	r7, #64	; 0x40
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bdb0      	pop	{r4, r5, r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	08007339 	.word	0x08007339
 8006e14:	080073dd 	.word	0x080073dd
 8006e18:	08008068 	.word	0x08008068
 8006e1c:	08006145 	.word	0x08006145
 8006e20:	08006f8d 	.word	0x08006f8d

08006e24 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b087      	sub	sp, #28
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	3301      	adds	r3, #1
 8006e30:	617b      	str	r3, [r7, #20]

  switch (p_event_pckt->evt)
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	2bff      	cmp	r3, #255	; 0xff
 8006e38:	d00e      	beq.n	8006e58 <SVCCTL_App_Notification+0x34>
 8006e3a:	2bff      	cmp	r3, #255	; 0xff
 8006e3c:	dc19      	bgt.n	8006e72 <SVCCTL_App_Notification+0x4e>
 8006e3e:	2b05      	cmp	r3, #5
 8006e40:	d019      	beq.n	8006e76 <SVCCTL_App_Notification+0x52>
 8006e42:	2b3e      	cmp	r3, #62	; 0x3e
 8006e44:	d000      	beq.n	8006e48 <SVCCTL_App_Notification+0x24>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8006e46:	e014      	b.n	8006e72 <SVCCTL_App_Notification+0x4e>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	3302      	adds	r3, #2
 8006e4c:	60fb      	str	r3, [r7, #12]
      switch (p_meta_evt->subevent)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	2b01      	cmp	r3, #1
          break;
 8006e54:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8006e56:	e011      	b.n	8006e7c <SVCCTL_App_Notification+0x58>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	3302      	adds	r3, #2
 8006e5c:	613b      	str	r3, [r7, #16]
      switch (p_blecore_evt->ecode)
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	881b      	ldrh	r3, [r3, #0]
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	461a      	mov	r2, r3
 8006e66:	f240 4307 	movw	r3, #1031	; 0x407
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d105      	bne.n	8006e7a <SVCCTL_App_Notification+0x56>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8006e6e:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8006e70:	e003      	b.n	8006e7a <SVCCTL_App_Notification+0x56>
      break;
 8006e72:	bf00      	nop
 8006e74:	e002      	b.n	8006e7c <SVCCTL_App_Notification+0x58>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8006e76:	bf00      	nop
 8006e78:	e000      	b.n	8006e7c <SVCCTL_App_Notification+0x58>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8006e7a:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8006e7c:	2301      	movs	r3, #1
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	371c      	adds	r7, #28
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr
	...

08006e8c <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8006e92:	4b06      	ldr	r3, [pc, #24]	; (8006eac <Ble_Tl_Init+0x20>)
 8006e94:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8006e96:	4b06      	ldr	r3, [pc, #24]	; (8006eb0 <Ble_Tl_Init+0x24>)
 8006e98:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8006e9a:	463b      	mov	r3, r7
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	4805      	ldr	r0, [pc, #20]	; (8006eb4 <Ble_Tl_Init+0x28>)
 8006ea0:	f7ff f934 	bl	800610c <hci_init>

  return;
 8006ea4:	bf00      	nop
}
 8006ea6:	3708      	adds	r7, #8
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	200300d8 	.word	0x200300d8
 8006eb0:	080070f5 	.word	0x080070f5
 8006eb4:	080070bd 	.word	0x080070bd

08006eb8 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8006eb8:	b5b0      	push	{r4, r5, r7, lr}
 8006eba:	b088      	sub	sp, #32
 8006ebc:	af02      	add	r7, sp, #8
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8006ec2:	2392      	movs	r3, #146	; 0x92
 8006ec4:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8006ec6:	f7fe fe77 	bl	8005bb8 <hci_reset>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8006ece:	f000 f88f 	bl	8006ff0 <BleGetBdAddress>
 8006ed2:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8006ed4:	693a      	ldr	r2, [r7, #16]
 8006ed6:	2106      	movs	r1, #6
 8006ed8:	2000      	movs	r0, #0
 8006eda:	f7fe fd81 	bl	80059e0 <aci_hal_write_config_data>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8006ee2:	4a27      	ldr	r2, [pc, #156]	; (8006f80 <Ble_Hci_Gap_Gatt_Init+0xc8>)
 8006ee4:	2110      	movs	r1, #16
 8006ee6:	2018      	movs	r0, #24
 8006ee8:	f7fe fd7a 	bl	80059e0 <aci_hal_write_config_data>
 8006eec:	4603      	mov	r3, r0
 8006eee:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8006ef0:	4a24      	ldr	r2, [pc, #144]	; (8006f84 <Ble_Hci_Gap_Gatt_Init+0xcc>)
 8006ef2:	2110      	movs	r1, #16
 8006ef4:	2008      	movs	r0, #8
 8006ef6:	f7fe fd73 	bl	80059e0 <aci_hal_write_config_data>
 8006efa:	4603      	mov	r3, r0
 8006efc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8006efe:	2119      	movs	r1, #25
 8006f00:	2001      	movs	r0, #1
 8006f02:	f7fe fdf2 	bl	8005aea <aci_hal_set_tx_power_level>
 8006f06:	4603      	mov	r3, r0
 8006f08:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8006f0a:	f7fe fc9b 	bl	8005844 <aci_gatt_init>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8006f12:	2300      	movs	r3, #0
 8006f14:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8006f16:	7bfb      	ldrb	r3, [r7, #15]
 8006f18:	f043 0301 	orr.w	r3, r3, #1
 8006f1c:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8006f1e:	7bfb      	ldrb	r3, [r7, #15]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d01f      	beq.n	8006f64 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = "STM32WB";
 8006f24:	4b18      	ldr	r3, [pc, #96]	; (8006f88 <Ble_Hci_Gap_Gatt_Init+0xd0>)
 8006f26:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8006f28:	1dba      	adds	r2, r7, #6
 8006f2a:	7bf8      	ldrb	r0, [r7, #15]
 8006f2c:	1cbb      	adds	r3, r7, #2
 8006f2e:	9301      	str	r3, [sp, #4]
 8006f30:	1d3b      	adds	r3, r7, #4
 8006f32:	9300      	str	r3, [sp, #0]
 8006f34:	4613      	mov	r3, r2
 8006f36:	2207      	movs	r2, #7
 8006f38:	2100      	movs	r1, #0
 8006f3a:	f7fe fb10 	bl	800555e <aci_gap_init>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8006f42:	88fc      	ldrh	r4, [r7, #6]
 8006f44:	88bd      	ldrh	r5, [r7, #4]
 8006f46:	68b8      	ldr	r0, [r7, #8]
 8006f48:	f7f9 f918 	bl	800017c <strlen>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	b2da      	uxtb	r2, r3
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	9300      	str	r3, [sp, #0]
 8006f54:	4613      	mov	r3, r2
 8006f56:	2200      	movs	r2, #0
 8006f58:	4629      	mov	r1, r5
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	f7fe fc97 	bl	800588e <aci_gatt_update_char_value>
 8006f60:	4603      	mov	r3, r0
 8006f62:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8006f64:	88f8      	ldrh	r0, [r7, #6]
 8006f66:	8879      	ldrh	r1, [r7, #2]
 8006f68:	463b      	mov	r3, r7
 8006f6a:	9300      	str	r3, [sp, #0]
 8006f6c:	2302      	movs	r3, #2
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f7fe fc8d 	bl	800588e <aci_gatt_update_char_value>
 8006f74:	4603      	mov	r3, r0
 8006f76:	75fb      	strb	r3, [r7, #23]
  else
  {
    BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Appearance\n");
  }

}
 8006f78:	bf00      	nop
 8006f7a:	3718      	adds	r7, #24
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bdb0      	pop	{r4, r5, r7, pc}
 8006f80:	08008290 	.word	0x08008290
 8006f84:	080082a0 	.word	0x080082a0
 8006f88:	080080a4 	.word	0x080080a4

08006f8c <Beacon_Update>:
static void Beacon_Update(void)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
  FLASH_EraseInitTypeDef erase;
  uint32_t pageError = 0;
 8006f92:	2300      	movs	r3, #0
 8006f94:	603b      	str	r3, [r7, #0]

  if (sector_type != 0)
 8006f96:	4b13      	ldr	r3, [pc, #76]	; (8006fe4 <Beacon_Update+0x58>)
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d01b      	beq.n	8006fd6 <Beacon_Update+0x4a>
  {
    erase.TypeErase = FLASH_TYPEERASE_PAGES;
 8006f9e:	2302      	movs	r3, #2
 8006fa0:	607b      	str	r3, [r7, #4]
    erase.Page      = sector_type;
 8006fa2:	4b10      	ldr	r3, [pc, #64]	; (8006fe4 <Beacon_Update+0x58>)
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	60bb      	str	r3, [r7, #8]
    if (sector_type == APP_SECTORS)
 8006fa8:	4b0e      	ldr	r3, [pc, #56]	; (8006fe4 <Beacon_Update+0x58>)
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	2b07      	cmp	r3, #7
 8006fae:	d102      	bne.n	8006fb6 <Beacon_Update+0x2a>
    {
      erase.NbPages = 2;  /* 2 sectors for beacon application */
 8006fb0:	2302      	movs	r3, #2
 8006fb2:	60fb      	str	r3, [r7, #12]
 8006fb4:	e001      	b.n	8006fba <Beacon_Update+0x2e>
    }
    else
    {
      erase.NbPages = 1; /* 1 sector for beacon user data */
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	60fb      	str	r3, [r7, #12]
    }

    HAL_FLASH_Unlock();
 8006fba:	f7fb facf 	bl	800255c <HAL_FLASH_Unlock>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_OPTVERR);
 8006fbe:	4b0a      	ldr	r3, [pc, #40]	; (8006fe8 <Beacon_Update+0x5c>)
 8006fc0:	f248 0211 	movw	r2, #32785	; 0x8011
 8006fc4:	611a      	str	r2, [r3, #16]

    HAL_FLASHEx_Erase(&erase, &pageError);
 8006fc6:	463a      	mov	r2, r7
 8006fc8:	1d3b      	adds	r3, r7, #4
 8006fca:	4611      	mov	r1, r2
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f7fb fb71 	bl	80026b4 <HAL_FLASHEx_Erase>

    HAL_FLASH_Lock();
 8006fd2:	f7fb fae5 	bl	80025a0 <HAL_FLASH_Lock>
  }

  *(uint32_t*) SRAM1_BASE = BOOT_MODE_AND_SECTOR;
 8006fd6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8006fda:	4a04      	ldr	r2, [pc, #16]	; (8006fec <Beacon_Update+0x60>)
 8006fdc:	601a      	str	r2, [r3, #0]
  /**
   * Boot Mode:    1 (OTA)
   * Sector Index: 6
   * Nb Sectors  : 1
   */
  NVIC_SystemReset();
 8006fde:	f7ff fe97 	bl	8006d10 <__NVIC_SystemReset>
 8006fe2:	bf00      	nop
 8006fe4:	20000282 	.word	0x20000282
 8006fe8:	58004000 	.word	0x58004000
 8006fec:	00010601 	.word	0x00010601

08006ff0 <BleGetBdAddress>:
}

const uint8_t* BleGetBdAddress(void)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b086      	sub	sp, #24
 8006ff4:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8006ff6:	f7ff fea1 	bl	8006d3c <LL_FLASH_GetUDN>
 8006ffa:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007002:	d023      	beq.n	800704c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8007004:	f7ff feb2 	bl	8006d6c <LL_FLASH_GetSTCompanyID>
 8007008:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800700a:	f7ff fea3 	bl	8006d54 <LL_FLASH_GetDeviceID>
 800700e:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	b2da      	uxtb	r2, r3
 8007014:	4b16      	ldr	r3, [pc, #88]	; (8007070 <BleGetBdAddress+0x80>)
 8007016:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	0a1b      	lsrs	r3, r3, #8
 800701c:	b2da      	uxtb	r2, r3
 800701e:	4b14      	ldr	r3, [pc, #80]	; (8007070 <BleGetBdAddress+0x80>)
 8007020:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	b2da      	uxtb	r2, r3
 8007026:	4b12      	ldr	r3, [pc, #72]	; (8007070 <BleGetBdAddress+0x80>)
 8007028:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	b2da      	uxtb	r2, r3
 800702e:	4b10      	ldr	r3, [pc, #64]	; (8007070 <BleGetBdAddress+0x80>)
 8007030:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	0a1b      	lsrs	r3, r3, #8
 8007036:	b2da      	uxtb	r2, r3
 8007038:	4b0d      	ldr	r3, [pc, #52]	; (8007070 <BleGetBdAddress+0x80>)
 800703a:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	0c1b      	lsrs	r3, r3, #16
 8007040:	b2da      	uxtb	r2, r3
 8007042:	4b0b      	ldr	r3, [pc, #44]	; (8007070 <BleGetBdAddress+0x80>)
 8007044:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8007046:	4b0a      	ldr	r3, [pc, #40]	; (8007070 <BleGetBdAddress+0x80>)
 8007048:	617b      	str	r3, [r7, #20]
 800704a:	e00b      	b.n	8007064 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800704c:	2000      	movs	r0, #0
 800704e:	f7ff fd79 	bl	8006b44 <OTP_Read>
 8007052:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d002      	beq.n	8007060 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	617b      	str	r3, [r7, #20]
 800705e:	e001      	b.n	8007064 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8007060:	4b04      	ldr	r3, [pc, #16]	; (8007074 <BleGetBdAddress+0x84>)
 8007062:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8007064:	697b      	ldr	r3, [r7, #20]
}
 8007066:	4618      	mov	r0, r3
 8007068:	3718      	adds	r7, #24
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	2000027c 	.word	0x2000027c
 8007074:	08008288 	.word	0x08008288

08007078 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8007080:	2100      	movs	r1, #0
 8007082:	2002      	movs	r0, #2
 8007084:	f000 fe6c 	bl	8007d60 <UTIL_SEQ_SetTask>

  return;
 8007088:	bf00      	nop
}
 800708a:	3708      	adds	r7, #8
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8007098:	2001      	movs	r0, #1
 800709a:	f000 fecd 	bl	8007e38 <UTIL_SEQ_SetEvt>

  return;
 800709e:	bf00      	nop
}
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b082      	sub	sp, #8
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80070ae:	2001      	movs	r0, #1
 80070b0:	f000 fee2 	bl	8007e78 <UTIL_SEQ_WaitEvt>

  return;
 80070b4:	bf00      	nop
}
 80070b6:	3708      	adds	r7, #8
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	3308      	adds	r3, #8
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7fe fed6 	bl	8005e80 <SVCCTL_UserEvtRx>
 80070d4:	4603      	mov	r3, r0
 80070d6:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 80070d8:	7afb      	ldrb	r3, [r7, #11]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d003      	beq.n	80070e6 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2201      	movs	r2, #1
 80070e2:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 80070e4:	e003      	b.n	80070ee <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2200      	movs	r2, #0
 80070ea:	701a      	strb	r2, [r3, #0]
  return;
 80070ec:	bf00      	nop
}
 80070ee:	3710      	adds	r7, #16
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	4603      	mov	r3, r0
 80070fc:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 80070fe:	79fb      	ldrb	r3, [r7, #7]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d002      	beq.n	800710a <BLE_StatusNot+0x16>
 8007104:	2b01      	cmp	r3, #1
 8007106:	d006      	beq.n	8007116 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8007108:	e00b      	b.n	8007122 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800710a:	230f      	movs	r3, #15
 800710c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800710e:	68f8      	ldr	r0, [r7, #12]
 8007110:	f000 fe52 	bl	8007db8 <UTIL_SEQ_PauseTask>
      break;
 8007114:	e005      	b.n	8007122 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8007116:	230f      	movs	r3, #15
 8007118:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	f000 fe6c 	bl	8007df8 <UTIL_SEQ_ResumeTask>
      break;
 8007120:	bf00      	nop
  }

  return;
 8007122:	bf00      	nop
}
 8007124:	3710      	adds	r7, #16
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
	...

0800712c <IBeacon_Init>:
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/

static tBleStatus IBeacon_Init(IBeacon_InitTypeDef *IBeacon_Init)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b094      	sub	sp, #80	; 0x50
 8007130:	af08      	add	r7, sp, #32
 8007132:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN IBeacon_Init_1 */

/* USER CODE END IBeacon_Init_1 */
  tBleStatus ret = BLE_STATUS_SUCCESS;
 8007134:	2300      	movs	r3, #0
 8007136:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint16_t AdvertisingInterval = (IBeacon_Init->AdvertisingInterval * ADVERTISING_INTERVAL_INCREMENT / 10);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	881b      	ldrh	r3, [r3, #0]
 800713e:	011b      	lsls	r3, r3, #4
 8007140:	4a67      	ldr	r2, [pc, #412]	; (80072e0 <IBeacon_Init+0x1b4>)
 8007142:	fb82 1203 	smull	r1, r2, r2, r3
 8007146:	1092      	asrs	r2, r2, #2
 8007148:	17db      	asrs	r3, r3, #31
 800714a:	1ad3      	subs	r3, r2, r3
 800714c:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* Disable scan response. */
  hci_le_set_scan_response_data(0, NULL);
 800714e:	2100      	movs	r1, #0
 8007150:	2000      	movs	r0, #0
 8007152:	f7fe fd55 	bl	8005c00 <hci_le_set_scan_response_data>

  /* Put the device in a non-connectable mode. */
  ret = aci_gap_set_discoverable(ADV_NONCONN_IND,                          /*< Advertise as non-connectable, undirected. */
 8007156:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8007158:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 800715a:	2300      	movs	r3, #0
 800715c:	9306      	str	r3, [sp, #24]
 800715e:	2300      	movs	r3, #0
 8007160:	9305      	str	r3, [sp, #20]
 8007162:	2300      	movs	r3, #0
 8007164:	9304      	str	r3, [sp, #16]
 8007166:	2300      	movs	r3, #0
 8007168:	9303      	str	r3, [sp, #12]
 800716a:	2300      	movs	r3, #0
 800716c:	9302      	str	r3, [sp, #8]
 800716e:	2300      	movs	r3, #0
 8007170:	9301      	str	r3, [sp, #4]
 8007172:	2300      	movs	r3, #0
 8007174:	9300      	str	r3, [sp, #0]
 8007176:	2300      	movs	r3, #0
 8007178:	2003      	movs	r0, #3
 800717a:	f7fe f8f6 	bl	800536a <aci_gap_set_discoverable>
 800717e:	4603      	mov	r3, r0
 8007180:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                 GAP_PUBLIC_ADDR, NO_WHITE_LIST_USE,           /*< Use the public address, with no white list. */
                                 0, NULL,                                  /*< Do not use a local name. */
                                 0, NULL,                                  /*< Do not include the service UUID list. */
                                 0, 0);                                    /*< Do not set a slave connection interval. */

  if (ret != BLE_STATUS_SUCCESS)
 8007184:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007188:	2b00      	cmp	r3, #0
 800718a:	d002      	beq.n	8007192 <IBeacon_Init+0x66>
  {
    return ret;
 800718c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007190:	e0a1      	b.n	80072d6 <IBeacon_Init+0x1aa>
  }

  /* Remove the TX power level advertisement (this is done to decrease the packet size). */
  ret = aci_gap_delete_ad_type(AD_TYPE_TX_POWER_LEVEL);
 8007192:	200a      	movs	r0, #10
 8007194:	f7fe fb02 	bl	800579c <aci_gap_delete_ad_type>
 8007198:	4603      	mov	r3, r0
 800719a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 800719e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d002      	beq.n	80071ac <IBeacon_Init+0x80>
  {
    return ret;
 80071a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80071aa:	e094      	b.n	80072d6 <IBeacon_Init+0x1aa>
  }

  uint8_t service_data[] =
 80071ac:	231a      	movs	r3, #26
 80071ae:	743b      	strb	r3, [r7, #16]
 80071b0:	23ff      	movs	r3, #255	; 0xff
 80071b2:	747b      	strb	r3, [r7, #17]
 80071b4:	234c      	movs	r3, #76	; 0x4c
 80071b6:	74bb      	strb	r3, [r7, #18]
 80071b8:	2300      	movs	r3, #0
 80071ba:	74fb      	strb	r3, [r7, #19]
 80071bc:	2302      	movs	r3, #2
 80071be:	753b      	strb	r3, [r7, #20]
 80071c0:	2315      	movs	r3, #21
 80071c2:	757b      	strb	r3, [r7, #21]
  {
    26,                                                                      /*< Length. */
    AD_TYPE_MANUFACTURER_SPECIFIC_DATA,                                      /*< Manufacturer Specific Data data type value. */
    0x4C, 0x00, 0x02, 0x15,                                                  /*< 32-bit Manufacturer Data. */
    IBeacon_Init->UuID[0],                                                   /*< 16-byte Proximity UUID. */
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	781b      	ldrb	r3, [r3, #0]
  uint8_t service_data[] =
 80071ca:	75bb      	strb	r3, [r7, #22]
    IBeacon_Init->UuID[1],
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 80071d0:	785b      	ldrb	r3, [r3, #1]
 80071d2:	75fb      	strb	r3, [r7, #23]
    IBeacon_Init->UuID[2],
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 80071d8:	789b      	ldrb	r3, [r3, #2]
 80071da:	763b      	strb	r3, [r7, #24]
    IBeacon_Init->UuID[3],
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 80071e0:	78db      	ldrb	r3, [r3, #3]
 80071e2:	767b      	strb	r3, [r7, #25]
    IBeacon_Init->UuID[4],
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 80071e8:	791b      	ldrb	r3, [r3, #4]
 80071ea:	76bb      	strb	r3, [r7, #26]
    IBeacon_Init->UuID[5],
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 80071f0:	795b      	ldrb	r3, [r3, #5]
 80071f2:	76fb      	strb	r3, [r7, #27]
    IBeacon_Init->UuID[6],
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 80071f8:	799b      	ldrb	r3, [r3, #6]
 80071fa:	773b      	strb	r3, [r7, #28]
    IBeacon_Init->UuID[7],
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8007200:	79db      	ldrb	r3, [r3, #7]
 8007202:	777b      	strb	r3, [r7, #29]
    IBeacon_Init->UuID[8],
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8007208:	7a1b      	ldrb	r3, [r3, #8]
 800720a:	77bb      	strb	r3, [r7, #30]
    IBeacon_Init->UuID[9],
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8007210:	7a5b      	ldrb	r3, [r3, #9]
 8007212:	77fb      	strb	r3, [r7, #31]
    IBeacon_Init->UuID[10],
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8007218:	7a9b      	ldrb	r3, [r3, #10]
 800721a:	f887 3020 	strb.w	r3, [r7, #32]
    IBeacon_Init->UuID[11],
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8007222:	7adb      	ldrb	r3, [r3, #11]
 8007224:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    IBeacon_Init->UuID[12],
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 800722c:	7b1b      	ldrb	r3, [r3, #12]
 800722e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    IBeacon_Init->UuID[13],
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8007236:	7b5b      	ldrb	r3, [r3, #13]
 8007238:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    IBeacon_Init->UuID[14],
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8007240:	7b9b      	ldrb	r3, [r3, #14]
 8007242:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    IBeacon_Init->UuID[15],
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 800724a:	7bdb      	ldrb	r3, [r3, #15]
 800724c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    IBeacon_Init->MajorID[0],                                                /*< 2-byte Major. */
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	781b      	ldrb	r3, [r3, #0]
  uint8_t service_data[] =
 8007256:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    IBeacon_Init->MajorID[1],
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	689b      	ldr	r3, [r3, #8]
  uint8_t service_data[] =
 800725e:	785b      	ldrb	r3, [r3, #1]
 8007260:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    IBeacon_Init->MinorID[0],                                                /*< 2-byte Minor. */
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	781b      	ldrb	r3, [r3, #0]
  uint8_t service_data[] =
 800726a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    IBeacon_Init->MinorID[1],
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	68db      	ldr	r3, [r3, #12]
  uint8_t service_data[] =
 8007272:	785b      	ldrb	r3, [r3, #1]
 8007274:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    IBeacon_Init->CalibratedTxPower,                                         /*< Ranging data. */
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	7c1b      	ldrb	r3, [r3, #16]
  uint8_t service_data[] =
 800727c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  };

  uint8_t flags[] =
 8007280:	4a18      	ldr	r2, [pc, #96]	; (80072e4 <IBeacon_Init+0x1b8>)
 8007282:	f107 030c 	add.w	r3, r7, #12
 8007286:	6812      	ldr	r2, [r2, #0]
 8007288:	4611      	mov	r1, r2
 800728a:	8019      	strh	r1, [r3, #0]
 800728c:	3302      	adds	r3, #2
 800728e:	0c12      	lsrs	r2, r2, #16
 8007290:	701a      	strb	r2, [r3, #0]
    AD_TYPE_FLAGS,                                                          /*< Flags data type value. */
    (FLAG_BIT_LE_GENERAL_DISCOVERABLE_MODE | FLAG_BIT_BR_EDR_NOT_SUPPORTED) /*< BLE general discoverable, without BR/EDR support. */
  };

  /* Update the service data. */
  ret = aci_gap_update_adv_data(sizeof(service_data), service_data);
 8007292:	f107 0310 	add.w	r3, r7, #16
 8007296:	4619      	mov	r1, r3
 8007298:	201b      	movs	r0, #27
 800729a:	f7fe fa0d 	bl	80056b8 <aci_gap_update_adv_data>
 800729e:	4603      	mov	r3, r0
 80072a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 80072a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d002      	beq.n	80072b2 <IBeacon_Init+0x186>
  {
    return ret;
 80072ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80072b0:	e011      	b.n	80072d6 <IBeacon_Init+0x1aa>
  }

  /* Update the adverstising flags. */
  ret = aci_gap_update_adv_data(sizeof(flags), flags);
 80072b2:	f107 030c 	add.w	r3, r7, #12
 80072b6:	4619      	mov	r1, r3
 80072b8:	2003      	movs	r0, #3
 80072ba:	f7fe f9fd 	bl	80056b8 <aci_gap_update_adv_data>
 80072be:	4603      	mov	r3, r0
 80072c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 80072c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d002      	beq.n	80072d2 <IBeacon_Init+0x1a6>
  {
    return ret;
 80072cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80072d0:	e001      	b.n	80072d6 <IBeacon_Init+0x1aa>
  }
/* USER CODE BEGIN IBeacon_Init_2 */

/* USER CODE END IBeacon_Init_2 */
  return ret;
 80072d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3730      	adds	r7, #48	; 0x30
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	66666667 	.word	0x66666667
 80072e4:	080080ac 	.word	0x080080ac

080072e8 <IBeacon_Process>:

void IBeacon_Process(void)
{
 80072e8:	b590      	push	{r4, r7, lr}
 80072ea:	b08d      	sub	sp, #52	; 0x34
 80072ec:	af00      	add	r7, sp, #0
/* USER CODE BEGIN IBeacon_Process_1 */

/* USER CODE END IBeacon_Process_1 */
  /* Default ibeacon */
  uint8_t UuID[]    = { UUID };
 80072ee:	4b11      	ldr	r3, [pc, #68]	; (8007334 <IBeacon_Process+0x4c>)
 80072f0:	f107 0420 	add.w	r4, r7, #32
 80072f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80072f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint8_t MajorID[] = { MAJOR_ID };
 80072fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072fe:	83bb      	strh	r3, [r7, #28]
  uint8_t MinorID[] = { MINOR_ID };
 8007300:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007304:	833b      	strh	r3, [r7, #24]

  IBeacon_InitTypeDef IBeacon_InitStruct =
 8007306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800730a:	80bb      	strh	r3, [r7, #4]
 800730c:	f107 0320 	add.w	r3, r7, #32
 8007310:	60bb      	str	r3, [r7, #8]
 8007312:	f107 031c 	add.w	r3, r7, #28
 8007316:	60fb      	str	r3, [r7, #12]
 8007318:	f107 0318 	add.w	r3, r7, #24
 800731c:	613b      	str	r3, [r7, #16]
 800731e:	23c1      	movs	r3, #193	; 0xc1
 8007320:	753b      	strb	r3, [r7, #20]
    data_address += 2;
    IBeacon_InitStruct.CalibratedTxPower = *(uint8_t *)(data_address);
  }
#endif

  IBeacon_Init(&IBeacon_InitStruct);
 8007322:	1d3b      	adds	r3, r7, #4
 8007324:	4618      	mov	r0, r3
 8007326:	f7ff ff01 	bl	800712c <IBeacon_Init>
/* USER CODE BEGIN IBeacon_Process_2 */

/* USER CODE END IBeacon_Process_2 */
}
 800732a:	bf00      	nop
 800732c:	3734      	adds	r7, #52	; 0x34
 800732e:	46bd      	mov	sp, r7
 8007330:	bd90      	pop	{r4, r7, pc}
 8007332:	bf00      	nop
 8007334:	080080b0 	.word	0x080080b0

08007338 <initTemp>:
/* USER CODE BEGIN FD */
void initTemp(void) {
 8007338:	b590      	push	{r4, r7, lr}
 800733a:	b095      	sub	sp, #84	; 0x54
 800733c:	af14      	add	r7, sp, #80	; 0x50
	  TMP117_set_Configuration(hi2c1,0x03, 0xA4, Device_ID_2);			// 16s Continous
 800733e:	4c26      	ldr	r4, [pc, #152]	; (80073d8 <initTemp+0xa0>)
 8007340:	2392      	movs	r3, #146	; 0x92
 8007342:	9313      	str	r3, [sp, #76]	; 0x4c
 8007344:	23a4      	movs	r3, #164	; 0xa4
 8007346:	9312      	str	r3, [sp, #72]	; 0x48
 8007348:	2303      	movs	r3, #3
 800734a:	9311      	str	r3, [sp, #68]	; 0x44
 800734c:	4668      	mov	r0, sp
 800734e:	f104 0310 	add.w	r3, r4, #16
 8007352:	2244      	movs	r2, #68	; 0x44
 8007354:	4619      	mov	r1, r3
 8007356:	f000 fe4f 	bl	8007ff8 <memcpy>
 800735a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800735e:	f7f8 ff49 	bl	80001f4 <TMP117_set_Configuration>
	  TMP117_set_Configuration(hi2c1,0x03, 0x24, Device_ID_1);			// 8s continous
 8007362:	4c1d      	ldr	r4, [pc, #116]	; (80073d8 <initTemp+0xa0>)
 8007364:	2390      	movs	r3, #144	; 0x90
 8007366:	9313      	str	r3, [sp, #76]	; 0x4c
 8007368:	2324      	movs	r3, #36	; 0x24
 800736a:	9312      	str	r3, [sp, #72]	; 0x48
 800736c:	2303      	movs	r3, #3
 800736e:	9311      	str	r3, [sp, #68]	; 0x44
 8007370:	4668      	mov	r0, sp
 8007372:	f104 0310 	add.w	r3, r4, #16
 8007376:	2244      	movs	r2, #68	; 0x44
 8007378:	4619      	mov	r1, r3
 800737a:	f000 fe3d 	bl	8007ff8 <memcpy>
 800737e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007382:	f7f8 ff37 	bl	80001f4 <TMP117_set_Configuration>
	  TMP117_set_Configuration(hi2c1,0x03, 0x24, Device_ID_3);			// 8s continous
 8007386:	4c14      	ldr	r4, [pc, #80]	; (80073d8 <initTemp+0xa0>)
 8007388:	2394      	movs	r3, #148	; 0x94
 800738a:	9313      	str	r3, [sp, #76]	; 0x4c
 800738c:	2324      	movs	r3, #36	; 0x24
 800738e:	9312      	str	r3, [sp, #72]	; 0x48
 8007390:	2303      	movs	r3, #3
 8007392:	9311      	str	r3, [sp, #68]	; 0x44
 8007394:	4668      	mov	r0, sp
 8007396:	f104 0310 	add.w	r3, r4, #16
 800739a:	2244      	movs	r2, #68	; 0x44
 800739c:	4619      	mov	r1, r3
 800739e:	f000 fe2b 	bl	8007ff8 <memcpy>
 80073a2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80073a6:	f7f8 ff25 	bl	80001f4 <TMP117_set_Configuration>
	  TMP117_set_Configuration(hi2c1,0x03, 0x24, Device_ID_4);			// 8s continous
 80073aa:	4c0b      	ldr	r4, [pc, #44]	; (80073d8 <initTemp+0xa0>)
 80073ac:	2396      	movs	r3, #150	; 0x96
 80073ae:	9313      	str	r3, [sp, #76]	; 0x4c
 80073b0:	2324      	movs	r3, #36	; 0x24
 80073b2:	9312      	str	r3, [sp, #72]	; 0x48
 80073b4:	2303      	movs	r3, #3
 80073b6:	9311      	str	r3, [sp, #68]	; 0x44
 80073b8:	4668      	mov	r0, sp
 80073ba:	f104 0310 	add.w	r3, r4, #16
 80073be:	2244      	movs	r2, #68	; 0x44
 80073c0:	4619      	mov	r1, r3
 80073c2:	f000 fe19 	bl	8007ff8 <memcpy>
 80073c6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80073ca:	f7f8 ff13 	bl	80001f4 <TMP117_set_Configuration>


}
 80073ce:	bf00      	nop
 80073d0:	3704      	adds	r7, #4
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd90      	pop	{r4, r7, pc}
 80073d6:	bf00      	nop
 80073d8:	20000134 	.word	0x20000134

080073dc <updateTemp>:

void updateTemp(void) {
 80073dc:	b590      	push	{r4, r7, lr}
 80073de:	b09b      	sub	sp, #108	; 0x6c
 80073e0:	af12      	add	r7, sp, #72	; 0x48

	temperature_val[0] = TMP117_get_Temperature(hi2c1, Device_ID_1);
 80073e2:	4c65      	ldr	r4, [pc, #404]	; (8007578 <updateTemp+0x19c>)
 80073e4:	2390      	movs	r3, #144	; 0x90
 80073e6:	9311      	str	r3, [sp, #68]	; 0x44
 80073e8:	4668      	mov	r0, sp
 80073ea:	f104 0310 	add.w	r3, r4, #16
 80073ee:	2244      	movs	r2, #68	; 0x44
 80073f0:	4619      	mov	r1, r3
 80073f2:	f000 fe01 	bl	8007ff8 <memcpy>
 80073f6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80073fa:	f7f8 fec7 	bl	800018c <TMP117_get_Temperature>
 80073fe:	4603      	mov	r3, r0
 8007400:	461a      	mov	r2, r3
 8007402:	4b5e      	ldr	r3, [pc, #376]	; (800757c <updateTemp+0x1a0>)
 8007404:	801a      	strh	r2, [r3, #0]
	temperature_val[1] = TMP117_get_Temperature(hi2c1, Device_ID_2);
 8007406:	4c5c      	ldr	r4, [pc, #368]	; (8007578 <updateTemp+0x19c>)
 8007408:	2392      	movs	r3, #146	; 0x92
 800740a:	9311      	str	r3, [sp, #68]	; 0x44
 800740c:	4668      	mov	r0, sp
 800740e:	f104 0310 	add.w	r3, r4, #16
 8007412:	2244      	movs	r2, #68	; 0x44
 8007414:	4619      	mov	r1, r3
 8007416:	f000 fdef 	bl	8007ff8 <memcpy>
 800741a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800741e:	f7f8 feb5 	bl	800018c <TMP117_get_Temperature>
 8007422:	4603      	mov	r3, r0
 8007424:	461a      	mov	r2, r3
 8007426:	4b55      	ldr	r3, [pc, #340]	; (800757c <updateTemp+0x1a0>)
 8007428:	805a      	strh	r2, [r3, #2]
	temperature_val[2] = TMP117_get_Temperature(hi2c1, Device_ID_3);
 800742a:	4c53      	ldr	r4, [pc, #332]	; (8007578 <updateTemp+0x19c>)
 800742c:	2394      	movs	r3, #148	; 0x94
 800742e:	9311      	str	r3, [sp, #68]	; 0x44
 8007430:	4668      	mov	r0, sp
 8007432:	f104 0310 	add.w	r3, r4, #16
 8007436:	2244      	movs	r2, #68	; 0x44
 8007438:	4619      	mov	r1, r3
 800743a:	f000 fddd 	bl	8007ff8 <memcpy>
 800743e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007442:	f7f8 fea3 	bl	800018c <TMP117_get_Temperature>
 8007446:	4603      	mov	r3, r0
 8007448:	461a      	mov	r2, r3
 800744a:	4b4c      	ldr	r3, [pc, #304]	; (800757c <updateTemp+0x1a0>)
 800744c:	809a      	strh	r2, [r3, #4]
	temperature_val[3] = TMP117_get_Temperature(hi2c1, Device_ID_4);
 800744e:	4c4a      	ldr	r4, [pc, #296]	; (8007578 <updateTemp+0x19c>)
 8007450:	2396      	movs	r3, #150	; 0x96
 8007452:	9311      	str	r3, [sp, #68]	; 0x44
 8007454:	4668      	mov	r0, sp
 8007456:	f104 0310 	add.w	r3, r4, #16
 800745a:	2244      	movs	r2, #68	; 0x44
 800745c:	4619      	mov	r1, r3
 800745e:	f000 fdcb 	bl	8007ff8 <memcpy>
 8007462:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007466:	f7f8 fe91 	bl	800018c <TMP117_get_Temperature>
 800746a:	4603      	mov	r3, r0
 800746c:	461a      	mov	r2, r3
 800746e:	4b43      	ldr	r3, [pc, #268]	; (800757c <updateTemp+0x1a0>)
 8007470:	80da      	strh	r2, [r3, #6]
	tempMSB_1 = temperature_val[0] >> 8;
 8007472:	4b42      	ldr	r3, [pc, #264]	; (800757c <updateTemp+0x1a0>)
 8007474:	881b      	ldrh	r3, [r3, #0]
 8007476:	0a1b      	lsrs	r3, r3, #8
 8007478:	b29b      	uxth	r3, r3
 800747a:	b2da      	uxtb	r2, r3
 800747c:	4b40      	ldr	r3, [pc, #256]	; (8007580 <updateTemp+0x1a4>)
 800747e:	701a      	strb	r2, [r3, #0]
	tempLSB_1 = temperature_val[0] & 0xFF;
 8007480:	4b3e      	ldr	r3, [pc, #248]	; (800757c <updateTemp+0x1a0>)
 8007482:	881b      	ldrh	r3, [r3, #0]
 8007484:	b2da      	uxtb	r2, r3
 8007486:	4b3f      	ldr	r3, [pc, #252]	; (8007584 <updateTemp+0x1a8>)
 8007488:	701a      	strb	r2, [r3, #0]
	tempMSB_2 = temperature_val[1] >> 8;
 800748a:	4b3c      	ldr	r3, [pc, #240]	; (800757c <updateTemp+0x1a0>)
 800748c:	885b      	ldrh	r3, [r3, #2]
 800748e:	0a1b      	lsrs	r3, r3, #8
 8007490:	b29b      	uxth	r3, r3
 8007492:	b2da      	uxtb	r2, r3
 8007494:	4b3c      	ldr	r3, [pc, #240]	; (8007588 <updateTemp+0x1ac>)
 8007496:	701a      	strb	r2, [r3, #0]
	tempLSB_2 = temperature_val[1] & 0xFF;
 8007498:	4b38      	ldr	r3, [pc, #224]	; (800757c <updateTemp+0x1a0>)
 800749a:	885b      	ldrh	r3, [r3, #2]
 800749c:	b2da      	uxtb	r2, r3
 800749e:	4b3b      	ldr	r3, [pc, #236]	; (800758c <updateTemp+0x1b0>)
 80074a0:	701a      	strb	r2, [r3, #0]
	tempMSB_3 = temperature_val[2] >> 8;
 80074a2:	4b36      	ldr	r3, [pc, #216]	; (800757c <updateTemp+0x1a0>)
 80074a4:	889b      	ldrh	r3, [r3, #4]
 80074a6:	0a1b      	lsrs	r3, r3, #8
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	b2da      	uxtb	r2, r3
 80074ac:	4b38      	ldr	r3, [pc, #224]	; (8007590 <updateTemp+0x1b4>)
 80074ae:	701a      	strb	r2, [r3, #0]
	tempLSB_3 = temperature_val[2] & 0xFF;
 80074b0:	4b32      	ldr	r3, [pc, #200]	; (800757c <updateTemp+0x1a0>)
 80074b2:	889b      	ldrh	r3, [r3, #4]
 80074b4:	b2da      	uxtb	r2, r3
 80074b6:	4b37      	ldr	r3, [pc, #220]	; (8007594 <updateTemp+0x1b8>)
 80074b8:	701a      	strb	r2, [r3, #0]
	tempMSB_4 = temperature_val[3] >> 8;
 80074ba:	4b30      	ldr	r3, [pc, #192]	; (800757c <updateTemp+0x1a0>)
 80074bc:	88db      	ldrh	r3, [r3, #6]
 80074be:	0a1b      	lsrs	r3, r3, #8
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	b2da      	uxtb	r2, r3
 80074c4:	4b34      	ldr	r3, [pc, #208]	; (8007598 <updateTemp+0x1bc>)
 80074c6:	701a      	strb	r2, [r3, #0]
	tempLSB_4 = temperature_val[3] & 0xFF;
 80074c8:	4b2c      	ldr	r3, [pc, #176]	; (800757c <updateTemp+0x1a0>)
 80074ca:	88db      	ldrh	r3, [r3, #6]
 80074cc:	b2da      	uxtb	r2, r3
 80074ce:	4b33      	ldr	r3, [pc, #204]	; (800759c <updateTemp+0x1c0>)
 80074d0:	701a      	strb	r2, [r3, #0]
			break;
		default:
			break;
	}*/

	uint8_t service_data[] =
 80074d2:	231b      	movs	r3, #27
 80074d4:	713b      	strb	r3, [r7, #4]
 80074d6:	23ff      	movs	r3, #255	; 0xff
 80074d8:	717b      	strb	r3, [r7, #5]
 80074da:	234c      	movs	r3, #76	; 0x4c
 80074dc:	71bb      	strb	r3, [r7, #6]
 80074de:	2300      	movs	r3, #0
 80074e0:	71fb      	strb	r3, [r7, #7]
 80074e2:	4b27      	ldr	r3, [pc, #156]	; (8007580 <updateTemp+0x1a4>)
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	723b      	strb	r3, [r7, #8]
 80074e8:	4b26      	ldr	r3, [pc, #152]	; (8007584 <updateTemp+0x1a8>)
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	727b      	strb	r3, [r7, #9]
 80074ee:	2300      	movs	r3, #0
 80074f0:	72bb      	strb	r3, [r7, #10]
 80074f2:	2300      	movs	r3, #0
 80074f4:	72fb      	strb	r3, [r7, #11]
 80074f6:	2300      	movs	r3, #0
 80074f8:	733b      	strb	r3, [r7, #12]
 80074fa:	230e      	movs	r3, #14
 80074fc:	737b      	strb	r3, [r7, #13]
 80074fe:	238e      	movs	r3, #142	; 0x8e
 8007500:	73bb      	strb	r3, [r7, #14]
 8007502:	2322      	movs	r3, #34	; 0x22
 8007504:	73fb      	strb	r3, [r7, #15]
 8007506:	2345      	movs	r3, #69	; 0x45
 8007508:	743b      	strb	r3, [r7, #16]
 800750a:	2341      	movs	r3, #65	; 0x41
 800750c:	747b      	strb	r3, [r7, #17]
 800750e:	239d      	movs	r3, #157	; 0x9d
 8007510:	74bb      	strb	r3, [r7, #18]
 8007512:	234c      	movs	r3, #76	; 0x4c
 8007514:	74fb      	strb	r3, [r7, #19]
 8007516:	2321      	movs	r3, #33	; 0x21
 8007518:	753b      	strb	r3, [r7, #20]
 800751a:	23ed      	movs	r3, #237	; 0xed
 800751c:	757b      	strb	r3, [r7, #21]
 800751e:	23ae      	movs	r3, #174	; 0xae
 8007520:	75bb      	strb	r3, [r7, #22]
 8007522:	2382      	movs	r3, #130	; 0x82
 8007524:	75fb      	strb	r3, [r7, #23]
 8007526:	23ed      	movs	r3, #237	; 0xed
 8007528:	763b      	strb	r3, [r7, #24]
 800752a:	2319      	movs	r3, #25
 800752c:	767b      	strb	r3, [r7, #25]
 800752e:	4b16      	ldr	r3, [pc, #88]	; (8007588 <updateTemp+0x1ac>)
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	76bb      	strb	r3, [r7, #26]
 8007534:	4b15      	ldr	r3, [pc, #84]	; (800758c <updateTemp+0x1b0>)
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	76fb      	strb	r3, [r7, #27]
 800753a:	4b15      	ldr	r3, [pc, #84]	; (8007590 <updateTemp+0x1b4>)
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	773b      	strb	r3, [r7, #28]
 8007540:	4b14      	ldr	r3, [pc, #80]	; (8007594 <updateTemp+0x1b8>)
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	777b      	strb	r3, [r7, #29]
 8007546:	4b14      	ldr	r3, [pc, #80]	; (8007598 <updateTemp+0x1bc>)
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	77bb      	strb	r3, [r7, #30]
 800754c:	4b13      	ldr	r3, [pc, #76]	; (800759c <updateTemp+0x1c0>)
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	77fb      	strb	r3, [r7, #31]
		  tempMSB_2, tempLSB_2,					 	 	 					 /*< 2-byte Major */
		  tempMSB_3, tempLSB_3,					 		     			 /*< 2-byte Temperature Data */
		  tempMSB_4, tempLSB_4,						     					         /*< 1-byte Power */
		};

    aci_gap_update_adv_data(sizeof(service_data), service_data);
 8007552:	1d3b      	adds	r3, r7, #4
 8007554:	4619      	mov	r1, r3
 8007556:	201c      	movs	r0, #28
 8007558:	f7fe f8ae 	bl	80056b8 <aci_gap_update_adv_data>
    deviceToBeRead = 0;
 800755c:	4b10      	ldr	r3, [pc, #64]	; (80075a0 <updateTemp+0x1c4>)
 800755e:	2200      	movs	r2, #0
 8007560:	701a      	strb	r2, [r3, #0]

	// Enter STOP MODE //
	HAL_SuspendTick();
 8007562:	f7fa fe41 	bl	80021e8 <HAL_SuspendTick>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8007566:	2101      	movs	r1, #1
 8007568:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800756c:	f7fc f974 	bl	8003858 <HAL_PWR_EnterSTOPMode>
}
 8007570:	bf00      	nop
 8007572:	3724      	adds	r7, #36	; 0x24
 8007574:	46bd      	mov	sp, r7
 8007576:	bd90      	pop	{r4, r7, pc}
 8007578:	20000134 	.word	0x20000134
 800757c:	20000284 	.word	0x20000284
 8007580:	2000028c 	.word	0x2000028c
 8007584:	2000028d 	.word	0x2000028d
 8007588:	2000028e 	.word	0x2000028e
 800758c:	2000028f 	.word	0x2000028f
 8007590:	20000290 	.word	0x20000290
 8007594:	20000291 	.word	0x20000291
 8007598:	20000292 	.word	0x20000292
 800759c:	20000293 	.word	0x20000293
 80075a0:	200001e8 	.word	0x200001e8

080075a4 <LL_PWR_EnableBootC2>:
{
 80075a4:	b480      	push	{r7}
 80075a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80075a8:	4b05      	ldr	r3, [pc, #20]	; (80075c0 <LL_PWR_EnableBootC2+0x1c>)
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	4a04      	ldr	r2, [pc, #16]	; (80075c0 <LL_PWR_EnableBootC2+0x1c>)
 80075ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075b2:	60d3      	str	r3, [r2, #12]
}
 80075b4:	bf00      	nop
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop
 80075c0:	58000400 	.word	0x58000400

080075c4 <LL_C2_EXTI_EnableEvent_32_63>:
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80075cc:	4b06      	ldr	r3, [pc, #24]	; (80075e8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80075ce:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80075d2:	4905      	ldr	r1, [pc, #20]	; (80075e8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 80075dc:	bf00      	nop
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr
 80075e8:	58000800 	.word	0x58000800

080075ec <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80075f4:	4b05      	ldr	r3, [pc, #20]	; (800760c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80075f6:	6a1a      	ldr	r2, [r3, #32]
 80075f8:	4904      	ldr	r1, [pc, #16]	; (800760c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	620b      	str	r3, [r1, #32]
}
 8007600:	bf00      	nop
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr
 800760c:	58000800 	.word	0x58000800

08007610 <LL_AHB3_GRP1_EnableClock>:
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8007618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800761c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800761e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4313      	orrs	r3, r2
 8007626:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8007628:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800762c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4013      	ands	r3, r2
 8007632:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007634:	68fb      	ldr	r3, [r7, #12]
}
 8007636:	bf00      	nop
 8007638:	3714      	adds	r7, #20
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr

08007642 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8007642:	b480      	push	{r7}
 8007644:	b085      	sub	sp, #20
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800764a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800764e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8007652:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	4313      	orrs	r3, r2
 800765a:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800765e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007662:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4013      	ands	r3, r2
 800766a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800766c:	68fb      	ldr	r3, [r7, #12]
}
 800766e:	bf00      	nop
 8007670:	3714      	adds	r7, #20
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr

0800767a <LL_C1_IPCC_EnableIT_TXF>:
{
 800767a:	b480      	push	{r7}
 800767c:	b083      	sub	sp, #12
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	601a      	str	r2, [r3, #0]
}
 800768e:	bf00      	nop
 8007690:	370c      	adds	r7, #12
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr

0800769a <LL_C1_IPCC_EnableIT_RXO>:
{
 800769a:	b480      	push	{r7}
 800769c:	b083      	sub	sp, #12
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f043 0201 	orr.w	r2, r3, #1
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	601a      	str	r2, [r3, #0]
}
 80076ae:	bf00      	nop
 80076b0:	370c      	adds	r7, #12
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr

080076ba <LL_C1_IPCC_EnableTransmitChannel>:
{
 80076ba:	b480      	push	{r7}
 80076bc:	b083      	sub	sp, #12
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
 80076c2:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	685a      	ldr	r2, [r3, #4]
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	041b      	lsls	r3, r3, #16
 80076cc:	43db      	mvns	r3, r3
 80076ce:	401a      	ands	r2, r3
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	605a      	str	r2, [r3, #4]
}
 80076d4:	bf00      	nop
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <LL_C1_IPCC_DisableTransmitChannel>:
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	685a      	ldr	r2, [r3, #4]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	041b      	lsls	r3, r3, #16
 80076f2:	431a      	orrs	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	605a      	str	r2, [r3, #4]
}
 80076f8:	bf00      	nop
 80076fa:	370c      	adds	r7, #12
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	685a      	ldr	r2, [r3, #4]
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	43db      	mvns	r3, r3
 8007716:	401a      	ands	r2, r3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	605a      	str	r2, [r3, #4]
}
 800771c:	bf00      	nop
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	683a      	ldr	r2, [r7, #0]
 8007736:	609a      	str	r2, [r3, #8]
}
 8007738:	bf00      	nop
 800773a:	370c      	adds	r7, #12
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <LL_C1_IPCC_SetFlag_CHx>:
{
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	041a      	lsls	r2, r3, #16
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	609a      	str	r2, [r3, #8]
}
 8007756:	bf00      	nop
 8007758:	370c      	adds	r7, #12
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr

08007762 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8007762:	b480      	push	{r7}
 8007764:	b083      	sub	sp, #12
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
 800776a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	68da      	ldr	r2, [r3, #12]
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	4013      	ands	r3, r2
 8007774:	683a      	ldr	r2, [r7, #0]
 8007776:	429a      	cmp	r2, r3
 8007778:	d101      	bne.n	800777e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800777a:	2301      	movs	r3, #1
 800777c:	e000      	b.n	8007780 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800777e:	2300      	movs	r3, #0
}
 8007780:	4618      	mov	r0, r3
 8007782:	370c      	adds	r7, #12
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	69da      	ldr	r2, [r3, #28]
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	4013      	ands	r3, r2
 800779e:	683a      	ldr	r2, [r7, #0]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d101      	bne.n	80077a8 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80077a4:	2301      	movs	r3, #1
 80077a6:	e000      	b.n	80077aa <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	370c      	adds	r7, #12
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr
	...

080077b8 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80077bc:	2102      	movs	r1, #2
 80077be:	4818      	ldr	r0, [pc, #96]	; (8007820 <HW_IPCC_Rx_Handler+0x68>)
 80077c0:	f7ff ffe4 	bl	800778c <LL_C2_IPCC_IsActiveFlag_CHx>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d008      	beq.n	80077dc <HW_IPCC_Rx_Handler+0x24>
 80077ca:	4b15      	ldr	r3, [pc, #84]	; (8007820 <HW_IPCC_Rx_Handler+0x68>)
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	f003 0302 	and.w	r3, r3, #2
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d102      	bne.n	80077dc <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 80077d6:	f000 f8d5 	bl	8007984 <HW_IPCC_SYS_EvtHandler>
 80077da:	e01e      	b.n	800781a <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80077dc:	2101      	movs	r1, #1
 80077de:	4810      	ldr	r0, [pc, #64]	; (8007820 <HW_IPCC_Rx_Handler+0x68>)
 80077e0:	f7ff ffd4 	bl	800778c <LL_C2_IPCC_IsActiveFlag_CHx>
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d008      	beq.n	80077fc <HW_IPCC_Rx_Handler+0x44>
 80077ea:	4b0d      	ldr	r3, [pc, #52]	; (8007820 <HW_IPCC_Rx_Handler+0x68>)
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	f003 0301 	and.w	r3, r3, #1
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d102      	bne.n	80077fc <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 80077f6:	f000 f889 	bl	800790c <HW_IPCC_BLE_EvtHandler>
 80077fa:	e00e      	b.n	800781a <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80077fc:	2108      	movs	r1, #8
 80077fe:	4808      	ldr	r0, [pc, #32]	; (8007820 <HW_IPCC_Rx_Handler+0x68>)
 8007800:	f7ff ffc4 	bl	800778c <LL_C2_IPCC_IsActiveFlag_CHx>
 8007804:	4603      	mov	r3, r0
 8007806:	2b00      	cmp	r3, #0
 8007808:	d008      	beq.n	800781c <HW_IPCC_Rx_Handler+0x64>
 800780a:	4b05      	ldr	r3, [pc, #20]	; (8007820 <HW_IPCC_Rx_Handler+0x68>)
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	f003 0308 	and.w	r3, r3, #8
 8007812:	2b00      	cmp	r3, #0
 8007814:	d102      	bne.n	800781c <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8007816:	f000 f901 	bl	8007a1c <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800781a:	bf00      	nop
 800781c:	bf00      	nop
}
 800781e:	bd80      	pop	{r7, pc}
 8007820:	58000c00 	.word	0x58000c00

08007824 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8007824:	b580      	push	{r7, lr}
 8007826:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8007828:	2102      	movs	r1, #2
 800782a:	4818      	ldr	r0, [pc, #96]	; (800788c <HW_IPCC_Tx_Handler+0x68>)
 800782c:	f7ff ff99 	bl	8007762 <LL_C1_IPCC_IsActiveFlag_CHx>
 8007830:	4603      	mov	r3, r0
 8007832:	2b00      	cmp	r3, #0
 8007834:	d108      	bne.n	8007848 <HW_IPCC_Tx_Handler+0x24>
 8007836:	4b15      	ldr	r3, [pc, #84]	; (800788c <HW_IPCC_Tx_Handler+0x68>)
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800783e:	2b00      	cmp	r3, #0
 8007840:	d102      	bne.n	8007848 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8007842:	f000 f893 	bl	800796c <HW_IPCC_SYS_CmdEvtHandler>
 8007846:	e01e      	b.n	8007886 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8007848:	2108      	movs	r1, #8
 800784a:	4810      	ldr	r0, [pc, #64]	; (800788c <HW_IPCC_Tx_Handler+0x68>)
 800784c:	f7ff ff89 	bl	8007762 <LL_C1_IPCC_IsActiveFlag_CHx>
 8007850:	4603      	mov	r3, r0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d108      	bne.n	8007868 <HW_IPCC_Tx_Handler+0x44>
 8007856:	4b0d      	ldr	r3, [pc, #52]	; (800788c <HW_IPCC_Tx_Handler+0x68>)
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800785e:	2b00      	cmp	r3, #0
 8007860:	d102      	bne.n	8007868 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8007862:	f000 f8bd 	bl	80079e0 <HW_IPCC_MM_FreeBufHandler>
 8007866:	e00e      	b.n	8007886 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8007868:	2120      	movs	r1, #32
 800786a:	4808      	ldr	r0, [pc, #32]	; (800788c <HW_IPCC_Tx_Handler+0x68>)
 800786c:	f7ff ff79 	bl	8007762 <LL_C1_IPCC_IsActiveFlag_CHx>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d108      	bne.n	8007888 <HW_IPCC_Tx_Handler+0x64>
 8007876:	4b05      	ldr	r3, [pc, #20]	; (800788c <HW_IPCC_Tx_Handler+0x68>)
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800787e:	2b00      	cmp	r3, #0
 8007880:	d102      	bne.n	8007888 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8007882:	f000 f84f 	bl	8007924 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8007886:	bf00      	nop
 8007888:	bf00      	nop
}
 800788a:	bd80      	pop	{r7, pc}
 800788c:	58000c00 	.word	0x58000c00

08007890 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8007890:	b580      	push	{r7, lr}
 8007892:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8007894:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007898:	f7ff fed3 	bl	8007642 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800789c:	f44f 7000 	mov.w	r0, #512	; 0x200
 80078a0:	f7ff fea4 	bl	80075ec <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80078a4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80078a8:	f7ff fe8c 	bl	80075c4 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80078ac:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80078ae:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80078b0:	f7ff fe78 	bl	80075a4 <LL_PWR_EnableBootC2>

  return;
 80078b4:	bf00      	nop
}
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80078bc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80078c0:	f7ff fea6 	bl	8007610 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80078c4:	4806      	ldr	r0, [pc, #24]	; (80078e0 <HW_IPCC_Init+0x28>)
 80078c6:	f7ff fee8 	bl	800769a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80078ca:	4805      	ldr	r0, [pc, #20]	; (80078e0 <HW_IPCC_Init+0x28>)
 80078cc:	f7ff fed5 	bl	800767a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80078d0:	202c      	movs	r0, #44	; 0x2c
 80078d2:	f7fa fdfe 	bl	80024d2 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80078d6:	202d      	movs	r0, #45	; 0x2d
 80078d8:	f7fa fdfb 	bl	80024d2 <HAL_NVIC_EnableIRQ>

  return;
 80078dc:	bf00      	nop
}
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	58000c00 	.word	0x58000c00

080078e4 <HW_IPCC_BLE_Init>:
#endif
/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80078e8:	2101      	movs	r1, #1
 80078ea:	4802      	ldr	r0, [pc, #8]	; (80078f4 <HW_IPCC_BLE_Init+0x10>)
 80078ec:	f7ff ff0a 	bl	8007704 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80078f0:	bf00      	nop
}
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	58000c00 	.word	0x58000c00

080078f8 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_BLE_CMD_CHANNEL );
 80078fc:	2101      	movs	r1, #1
 80078fe:	4802      	ldr	r0, [pc, #8]	; (8007908 <HW_IPCC_BLE_SendCmd+0x10>)
 8007900:	f7ff ff20 	bl	8007744 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8007904:	bf00      	nop
}
 8007906:	bd80      	pop	{r7, pc}
 8007908:	58000c00 	.word	0x58000c00

0800790c <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800790c:	b580      	push	{r7, lr}
 800790e:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8007910:	f7fe ff60 	bl	80067d4 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8007914:	2101      	movs	r1, #1
 8007916:	4802      	ldr	r0, [pc, #8]	; (8007920 <HW_IPCC_BLE_EvtHandler+0x14>)
 8007918:	f7ff ff06 	bl	8007728 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800791c:	bf00      	nop
}
 800791e:	bd80      	pop	{r7, pc}
 8007920:	58000c00 	.word	0x58000c00

08007924 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8007924:	b580      	push	{r7, lr}
 8007926:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8007928:	2120      	movs	r1, #32
 800792a:	4803      	ldr	r0, [pc, #12]	; (8007938 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800792c:	f7ff fed8 	bl	80076e0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8007930:	f7fe ff80 	bl	8006834 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8007934:	bf00      	nop
}
 8007936:	bd80      	pop	{r7, pc}
 8007938:	58000c00 	.word	0x58000c00

0800793c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800793c:	b580      	push	{r7, lr}
 800793e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8007940:	2102      	movs	r1, #2
 8007942:	4802      	ldr	r0, [pc, #8]	; (800794c <HW_IPCC_SYS_Init+0x10>)
 8007944:	f7ff fede 	bl	8007704 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8007948:	bf00      	nop
}
 800794a:	bd80      	pop	{r7, pc}
 800794c:	58000c00 	.word	0x58000c00

08007950 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8007950:	b580      	push	{r7, lr}
 8007952:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8007954:	2102      	movs	r1, #2
 8007956:	4804      	ldr	r0, [pc, #16]	; (8007968 <HW_IPCC_SYS_SendCmd+0x18>)
 8007958:	f7ff fef4 	bl	8007744 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800795c:	2102      	movs	r1, #2
 800795e:	4802      	ldr	r0, [pc, #8]	; (8007968 <HW_IPCC_SYS_SendCmd+0x18>)
 8007960:	f7ff feab 	bl	80076ba <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8007964:	bf00      	nop
}
 8007966:	bd80      	pop	{r7, pc}
 8007968:	58000c00 	.word	0x58000c00

0800796c <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800796c:	b580      	push	{r7, lr}
 800796e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8007970:	2102      	movs	r1, #2
 8007972:	4803      	ldr	r0, [pc, #12]	; (8007980 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8007974:	f7ff feb4 	bl	80076e0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8007978:	f7fe ffac 	bl	80068d4 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800797c:	bf00      	nop
}
 800797e:	bd80      	pop	{r7, pc}
 8007980:	58000c00 	.word	0x58000c00

08007984 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8007984:	b580      	push	{r7, lr}
 8007986:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8007988:	f7fe ffba 	bl	8006900 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800798c:	2102      	movs	r1, #2
 800798e:	4802      	ldr	r0, [pc, #8]	; (8007998 <HW_IPCC_SYS_EvtHandler+0x14>)
 8007990:	f7ff feca 	bl	8007728 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8007994:	bf00      	nop
}
 8007996:	bd80      	pop	{r7, pc}
 8007998:	58000c00 	.word	0x58000c00

0800799c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80079a4:	2108      	movs	r1, #8
 80079a6:	480c      	ldr	r0, [pc, #48]	; (80079d8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80079a8:	f7ff fedb 	bl	8007762 <LL_C1_IPCC_IsActiveFlag_CHx>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d007      	beq.n	80079c2 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 80079b2:	4a0a      	ldr	r2, [pc, #40]	; (80079dc <HW_IPCC_MM_SendFreeBuf+0x40>)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80079b8:	2108      	movs	r1, #8
 80079ba:	4807      	ldr	r0, [pc, #28]	; (80079d8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80079bc:	f7ff fe7d 	bl	80076ba <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80079c0:	e006      	b.n	80079d0 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	4798      	blx	r3
    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80079c6:	2108      	movs	r1, #8
 80079c8:	4803      	ldr	r0, [pc, #12]	; (80079d8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80079ca:	f7ff febb 	bl	8007744 <LL_C1_IPCC_SetFlag_CHx>
  return;
 80079ce:	bf00      	nop
}
 80079d0:	3708      	adds	r7, #8
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	58000c00 	.word	0x58000c00
 80079dc:	20000294 	.word	0x20000294

080079e0 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80079e4:	2108      	movs	r1, #8
 80079e6:	4806      	ldr	r0, [pc, #24]	; (8007a00 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80079e8:	f7ff fe7a 	bl	80076e0 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80079ec:	4b05      	ldr	r3, [pc, #20]	; (8007a04 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4798      	blx	r3

  HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80079f2:	2108      	movs	r1, #8
 80079f4:	4802      	ldr	r0, [pc, #8]	; (8007a00 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80079f6:	f7ff fea5 	bl	8007744 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80079fa:	bf00      	nop
}
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	58000c00 	.word	0x58000c00
 8007a04:	20000294 	.word	0x20000294

08007a08 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8007a0c:	2108      	movs	r1, #8
 8007a0e:	4802      	ldr	r0, [pc, #8]	; (8007a18 <HW_IPCC_TRACES_Init+0x10>)
 8007a10:	f7ff fe78 	bl	8007704 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8007a14:	bf00      	nop
}
 8007a16:	bd80      	pop	{r7, pc}
 8007a18:	58000c00 	.word	0x58000c00

08007a1c <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8007a20:	f7ff f816 	bl	8006a50 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8007a24:	2108      	movs	r1, #8
 8007a26:	4802      	ldr	r0, [pc, #8]	; (8007a30 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8007a28:	f7ff fe7e 	bl	8007728 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8007a2c:	bf00      	nop
}
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	58000c00 	.word	0x58000c00

08007a34 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8007a34:	b480      	push	{r7}
 8007a36:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8007a38:	4b05      	ldr	r3, [pc, #20]	; (8007a50 <UTIL_LPM_Init+0x1c>)
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8007a3e:	4b05      	ldr	r3, [pc, #20]	; (8007a54 <UTIL_LPM_Init+0x20>)
 8007a40:	2200      	movs	r2, #0
 8007a42:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8007a44:	bf00      	nop
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	20000298 	.word	0x20000298
 8007a54:	2000029c 	.word	0x2000029c

08007a58 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b087      	sub	sp, #28
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	460b      	mov	r3, r1
 8007a62:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a64:	f3ef 8310 	mrs	r3, PRIMASK
 8007a68:	613b      	str	r3, [r7, #16]
  return(result);
 8007a6a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8007a6c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007a6e:	b672      	cpsid	i
}
 8007a70:	bf00      	nop
  
  switch(state)
 8007a72:	78fb      	ldrb	r3, [r7, #3]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d008      	beq.n	8007a8a <UTIL_LPM_SetOffMode+0x32>
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d10e      	bne.n	8007a9a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8007a7c:	4b0d      	ldr	r3, [pc, #52]	; (8007ab4 <UTIL_LPM_SetOffMode+0x5c>)
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	4a0b      	ldr	r2, [pc, #44]	; (8007ab4 <UTIL_LPM_SetOffMode+0x5c>)
 8007a86:	6013      	str	r3, [r2, #0]
      break;
 8007a88:	e008      	b.n	8007a9c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	43da      	mvns	r2, r3
 8007a8e:	4b09      	ldr	r3, [pc, #36]	; (8007ab4 <UTIL_LPM_SetOffMode+0x5c>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4013      	ands	r3, r2
 8007a94:	4a07      	ldr	r2, [pc, #28]	; (8007ab4 <UTIL_LPM_SetOffMode+0x5c>)
 8007a96:	6013      	str	r3, [r2, #0]
      break;
 8007a98:	e000      	b.n	8007a9c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8007a9a:	bf00      	nop
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f383 8810 	msr	PRIMASK, r3
}
 8007aa6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8007aa8:	bf00      	nop
 8007aaa:	371c      	adds	r7, #28
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr
 8007ab4:	2000029c 	.word	0x2000029c

08007ab8 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007abe:	f3ef 8310 	mrs	r3, PRIMASK
 8007ac2:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ac4:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 8007ac6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8007ac8:	b672      	cpsid	i
}
 8007aca:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8007acc:	4b12      	ldr	r3, [pc, #72]	; (8007b18 <UTIL_LPM_EnterLowPower+0x60>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d006      	beq.n	8007ae2 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8007ad4:	4b11      	ldr	r3, [pc, #68]	; (8007b1c <UTIL_LPM_EnterLowPower+0x64>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8007ada:	4b10      	ldr	r3, [pc, #64]	; (8007b1c <UTIL_LPM_EnterLowPower+0x64>)
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	4798      	blx	r3
 8007ae0:	e010      	b.n	8007b04 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8007ae2:	4b0f      	ldr	r3, [pc, #60]	; (8007b20 <UTIL_LPM_EnterLowPower+0x68>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d006      	beq.n	8007af8 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 8007aea:	4b0c      	ldr	r3, [pc, #48]	; (8007b1c <UTIL_LPM_EnterLowPower+0x64>)
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8007af0:	4b0a      	ldr	r3, [pc, #40]	; (8007b1c <UTIL_LPM_EnterLowPower+0x64>)
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	4798      	blx	r3
 8007af6:	e005      	b.n	8007b04 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 8007af8:	4b08      	ldr	r3, [pc, #32]	; (8007b1c <UTIL_LPM_EnterLowPower+0x64>)
 8007afa:	691b      	ldr	r3, [r3, #16]
 8007afc:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8007afe:	4b07      	ldr	r3, [pc, #28]	; (8007b1c <UTIL_LPM_EnterLowPower+0x64>)
 8007b00:	695b      	ldr	r3, [r3, #20]
 8007b02:	4798      	blx	r3
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f383 8810 	msr	PRIMASK, r3
}
 8007b0e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8007b10:	bf00      	nop
 8007b12:	3710      	adds	r7, #16
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	20000298 	.word	0x20000298
 8007b1c:	080081f0 	.word	0x080081f0
 8007b20:	2000029c 	.word	0x2000029c

08007b24 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b090      	sub	sp, #64	; 0x40
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8007b2c:	4b73      	ldr	r3, [pc, #460]	; (8007cfc <UTIL_SEQ_Run+0x1d8>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8007b32:	4b72      	ldr	r3, [pc, #456]	; (8007cfc <UTIL_SEQ_Run+0x1d8>)
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4013      	ands	r3, r2
 8007b3a:	4a70      	ldr	r2, [pc, #448]	; (8007cfc <UTIL_SEQ_Run+0x1d8>)
 8007b3c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8007b3e:	4b70      	ldr	r3, [pc, #448]	; (8007d00 <UTIL_SEQ_Run+0x1dc>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8007b44:	4b6f      	ldr	r3, [pc, #444]	; (8007d04 <UTIL_SEQ_Run+0x1e0>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8007b4a:	4b6f      	ldr	r3, [pc, #444]	; (8007d08 <UTIL_SEQ_Run+0x1e4>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8007b50:	4b6e      	ldr	r3, [pc, #440]	; (8007d0c <UTIL_SEQ_Run+0x1e8>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8007b56:	e08d      	b.n	8007c74 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8007b5c:	e002      	b.n	8007b64 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8007b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b60:	3301      	adds	r3, #1
 8007b62:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8007b64:	4a6a      	ldr	r2, [pc, #424]	; (8007d10 <UTIL_SEQ_Run+0x1ec>)
 8007b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b68:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6e:	401a      	ands	r2, r3
 8007b70:	4b62      	ldr	r3, [pc, #392]	; (8007cfc <UTIL_SEQ_Run+0x1d8>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4013      	ands	r3, r2
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d0f1      	beq.n	8007b5e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8007b7a:	4a65      	ldr	r2, [pc, #404]	; (8007d10 <UTIL_SEQ_Run+0x1ec>)
 8007b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b7e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b84:	401a      	ands	r2, r3
 8007b86:	4b5d      	ldr	r3, [pc, #372]	; (8007cfc <UTIL_SEQ_Run+0x1d8>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8007b8e:	4a60      	ldr	r2, [pc, #384]	; (8007d10 <UTIL_SEQ_Run+0x1ec>)
 8007b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b92:	00db      	lsls	r3, r3, #3
 8007b94:	4413      	add	r3, r2
 8007b96:	685a      	ldr	r2, [r3, #4]
 8007b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9a:	4013      	ands	r3, r2
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d106      	bne.n	8007bae <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8007ba0:	4a5b      	ldr	r2, [pc, #364]	; (8007d10 <UTIL_SEQ_Run+0x1ec>)
 8007ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ba4:	00db      	lsls	r3, r3, #3
 8007ba6:	4413      	add	r3, r2
 8007ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8007bac:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8007bae:	4a58      	ldr	r2, [pc, #352]	; (8007d10 <UTIL_SEQ_Run+0x1ec>)
 8007bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bb2:	00db      	lsls	r3, r3, #3
 8007bb4:	4413      	add	r3, r2
 8007bb6:	685a      	ldr	r2, [r3, #4]
 8007bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bba:	4013      	ands	r3, r2
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f000 f9b3 	bl	8007f28 <SEQ_BitPosition>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	4b53      	ldr	r3, [pc, #332]	; (8007d14 <UTIL_SEQ_Run+0x1f0>)
 8007bc8:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8007bca:	4a51      	ldr	r2, [pc, #324]	; (8007d10 <UTIL_SEQ_Run+0x1ec>)
 8007bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bce:	00db      	lsls	r3, r3, #3
 8007bd0:	4413      	add	r3, r2
 8007bd2:	685a      	ldr	r2, [r3, #4]
 8007bd4:	4b4f      	ldr	r3, [pc, #316]	; (8007d14 <UTIL_SEQ_Run+0x1f0>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	2101      	movs	r1, #1
 8007bda:	fa01 f303 	lsl.w	r3, r1, r3
 8007bde:	43db      	mvns	r3, r3
 8007be0:	401a      	ands	r2, r3
 8007be2:	494b      	ldr	r1, [pc, #300]	; (8007d10 <UTIL_SEQ_Run+0x1ec>)
 8007be4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007be6:	00db      	lsls	r3, r3, #3
 8007be8:	440b      	add	r3, r1
 8007bea:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bec:	f3ef 8310 	mrs	r3, PRIMASK
 8007bf0:	61bb      	str	r3, [r7, #24]
  return(result);
 8007bf2:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8007bf4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8007bf6:	b672      	cpsid	i
}
 8007bf8:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8007bfa:	4b46      	ldr	r3, [pc, #280]	; (8007d14 <UTIL_SEQ_Run+0x1f0>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	fa02 f303 	lsl.w	r3, r2, r3
 8007c04:	43da      	mvns	r2, r3
 8007c06:	4b3e      	ldr	r3, [pc, #248]	; (8007d00 <UTIL_SEQ_Run+0x1dc>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4013      	ands	r3, r2
 8007c0c:	4a3c      	ldr	r2, [pc, #240]	; (8007d00 <UTIL_SEQ_Run+0x1dc>)
 8007c0e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8007c10:	2302      	movs	r3, #2
 8007c12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c14:	e013      	b.n	8007c3e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8007c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c18:	3b01      	subs	r3, #1
 8007c1a:	4a3d      	ldr	r2, [pc, #244]	; (8007d10 <UTIL_SEQ_Run+0x1ec>)
 8007c1c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8007c20:	4b3c      	ldr	r3, [pc, #240]	; (8007d14 <UTIL_SEQ_Run+0x1f0>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	2201      	movs	r2, #1
 8007c26:	fa02 f303 	lsl.w	r3, r2, r3
 8007c2a:	43da      	mvns	r2, r3
 8007c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	400a      	ands	r2, r1
 8007c32:	4937      	ldr	r1, [pc, #220]	; (8007d10 <UTIL_SEQ_Run+0x1ec>)
 8007c34:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8007c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c3a:	3b01      	subs	r3, #1
 8007c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d1e8      	bne.n	8007c16 <UTIL_SEQ_Run+0xf2>
 8007c44:	6a3b      	ldr	r3, [r7, #32]
 8007c46:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	f383 8810 	msr	PRIMASK, r3
}
 8007c4e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8007c50:	4b30      	ldr	r3, [pc, #192]	; (8007d14 <UTIL_SEQ_Run+0x1f0>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a30      	ldr	r2, [pc, #192]	; (8007d18 <UTIL_SEQ_Run+0x1f4>)
 8007c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c5a:	4798      	blx	r3

    local_taskset = TaskSet;
 8007c5c:	4b28      	ldr	r3, [pc, #160]	; (8007d00 <UTIL_SEQ_Run+0x1dc>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 8007c62:	4b28      	ldr	r3, [pc, #160]	; (8007d04 <UTIL_SEQ_Run+0x1e0>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 8007c68:	4b27      	ldr	r3, [pc, #156]	; (8007d08 <UTIL_SEQ_Run+0x1e4>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 8007c6e:	4b27      	ldr	r3, [pc, #156]	; (8007d0c <UTIL_SEQ_Run+0x1e8>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8007c74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c78:	401a      	ands	r2, r3
 8007c7a:	4b20      	ldr	r3, [pc, #128]	; (8007cfc <UTIL_SEQ_Run+0x1d8>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4013      	ands	r3, r2
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d005      	beq.n	8007c90 <UTIL_SEQ_Run+0x16c>
 8007c84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c88:	4013      	ands	r3, r2
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	f43f af64 	beq.w	8007b58 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8007c90:	4b20      	ldr	r3, [pc, #128]	; (8007d14 <UTIL_SEQ_Run+0x1f0>)
 8007c92:	f04f 32ff 	mov.w	r2, #4294967295
 8007c96:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8007c98:	f000 f938 	bl	8007f0c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c9c:	f3ef 8310 	mrs	r3, PRIMASK
 8007ca0:	613b      	str	r3, [r7, #16]
  return(result);
 8007ca2:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8007ca4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8007ca6:	b672      	cpsid	i
}
 8007ca8:	bf00      	nop
  local_taskset = TaskSet;
 8007caa:	4b15      	ldr	r3, [pc, #84]	; (8007d00 <UTIL_SEQ_Run+0x1dc>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8007cb0:	4b14      	ldr	r3, [pc, #80]	; (8007d04 <UTIL_SEQ_Run+0x1e0>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8007cb6:	4b14      	ldr	r3, [pc, #80]	; (8007d08 <UTIL_SEQ_Run+0x1e4>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8007cbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc0:	401a      	ands	r2, r3
 8007cc2:	4b0e      	ldr	r3, [pc, #56]	; (8007cfc <UTIL_SEQ_Run+0x1d8>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4013      	ands	r3, r2
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d107      	bne.n	8007cdc <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8007ccc:	4b0f      	ldr	r3, [pc, #60]	; (8007d0c <UTIL_SEQ_Run+0x1e8>)
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cd2:	4013      	ands	r3, r2
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d101      	bne.n	8007cdc <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8007cd8:	f7f8 fe3b 	bl	8000952 <UTIL_SEQ_Idle>
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f383 8810 	msr	PRIMASK, r3
}
 8007ce6:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8007ce8:	f000 f917 	bl	8007f1a <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8007cec:	4a03      	ldr	r2, [pc, #12]	; (8007cfc <UTIL_SEQ_Run+0x1d8>)
 8007cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf0:	6013      	str	r3, [r2, #0]

  return;
 8007cf2:	bf00      	nop
}
 8007cf4:	3740      	adds	r7, #64	; 0x40
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	20000020 	.word	0x20000020
 8007d00:	200002a0 	.word	0x200002a0
 8007d04:	200002a4 	.word	0x200002a4
 8007d08:	2000001c 	.word	0x2000001c
 8007d0c:	200002a8 	.word	0x200002a8
 8007d10:	20000330 	.word	0x20000330
 8007d14:	200002ac 	.word	0x200002ac
 8007d18:	200002b0 	.word	0x200002b0

08007d1c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b088      	sub	sp, #32
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d28:	f3ef 8310 	mrs	r3, PRIMASK
 8007d2c:	617b      	str	r3, [r7, #20]
  return(result);
 8007d2e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8007d30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8007d32:	b672      	cpsid	i
}
 8007d34:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	f000 f8f6 	bl	8007f28 <SEQ_BitPosition>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	4619      	mov	r1, r3
 8007d40:	4a06      	ldr	r2, [pc, #24]	; (8007d5c <UTIL_SEQ_RegTask+0x40>)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	f383 8810 	msr	PRIMASK, r3
}
 8007d52:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8007d54:	bf00      	nop
}
 8007d56:	3720      	adds	r7, #32
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	200002b0 	.word	0x200002b0

08007d60 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8007d60:	b480      	push	{r7}
 8007d62:	b087      	sub	sp, #28
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d6a:	f3ef 8310 	mrs	r3, PRIMASK
 8007d6e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007d70:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8007d72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007d74:	b672      	cpsid	i
}
 8007d76:	bf00      	nop

  TaskSet |= TaskId_bm;
 8007d78:	4b0d      	ldr	r3, [pc, #52]	; (8007db0 <UTIL_SEQ_SetTask+0x50>)
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	4a0b      	ldr	r2, [pc, #44]	; (8007db0 <UTIL_SEQ_SetTask+0x50>)
 8007d82:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8007d84:	4a0b      	ldr	r2, [pc, #44]	; (8007db4 <UTIL_SEQ_SetTask+0x54>)
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	431a      	orrs	r2, r3
 8007d90:	4908      	ldr	r1, [pc, #32]	; (8007db4 <UTIL_SEQ_SetTask+0x54>)
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	f383 8810 	msr	PRIMASK, r3
}
 8007da2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8007da4:	bf00      	nop
}
 8007da6:	371c      	adds	r7, #28
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr
 8007db0:	200002a0 	.word	0x200002a0
 8007db4:	20000330 	.word	0x20000330

08007db8 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8007db8:	b480      	push	{r7}
 8007dba:	b087      	sub	sp, #28
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007dc0:	f3ef 8310 	mrs	r3, PRIMASK
 8007dc4:	60fb      	str	r3, [r7, #12]
  return(result);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8007dc8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007dca:	b672      	cpsid	i
}
 8007dcc:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	43da      	mvns	r2, r3
 8007dd2:	4b08      	ldr	r3, [pc, #32]	; (8007df4 <UTIL_SEQ_PauseTask+0x3c>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4013      	ands	r3, r2
 8007dd8:	4a06      	ldr	r2, [pc, #24]	; (8007df4 <UTIL_SEQ_PauseTask+0x3c>)
 8007dda:	6013      	str	r3, [r2, #0]
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	f383 8810 	msr	PRIMASK, r3
}
 8007de6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8007de8:	bf00      	nop
}
 8007dea:	371c      	adds	r7, #28
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr
 8007df4:	2000001c 	.word	0x2000001c

08007df8 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b087      	sub	sp, #28
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e00:	f3ef 8310 	mrs	r3, PRIMASK
 8007e04:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e06:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8007e08:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007e0a:	b672      	cpsid	i
}
 8007e0c:	bf00      	nop

  TaskMask |= TaskId_bm;
 8007e0e:	4b09      	ldr	r3, [pc, #36]	; (8007e34 <UTIL_SEQ_ResumeTask+0x3c>)
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4313      	orrs	r3, r2
 8007e16:	4a07      	ldr	r2, [pc, #28]	; (8007e34 <UTIL_SEQ_ResumeTask+0x3c>)
 8007e18:	6013      	str	r3, [r2, #0]
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	f383 8810 	msr	PRIMASK, r3
}
 8007e24:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8007e26:	bf00      	nop
}
 8007e28:	371c      	adds	r7, #28
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop
 8007e34:	2000001c 	.word	0x2000001c

08007e38 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b087      	sub	sp, #28
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e40:	f3ef 8310 	mrs	r3, PRIMASK
 8007e44:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e46:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8007e48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007e4a:	b672      	cpsid	i
}
 8007e4c:	bf00      	nop

  EvtSet |= EvtId_bm;
 8007e4e:	4b09      	ldr	r3, [pc, #36]	; (8007e74 <UTIL_SEQ_SetEvt+0x3c>)
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	4a07      	ldr	r2, [pc, #28]	; (8007e74 <UTIL_SEQ_SetEvt+0x3c>)
 8007e58:	6013      	str	r3, [r2, #0]
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	f383 8810 	msr	PRIMASK, r3
}
 8007e64:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8007e66:	bf00      	nop
}
 8007e68:	371c      	adds	r7, #28
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	200002a4 	.word	0x200002a4

08007e78 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b088      	sub	sp, #32
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8007e80:	4b1f      	ldr	r3, [pc, #124]	; (8007f00 <UTIL_SEQ_WaitEvt+0x88>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8007e86:	4b1e      	ldr	r3, [pc, #120]	; (8007f00 <UTIL_SEQ_WaitEvt+0x88>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e8e:	d102      	bne.n	8007e96 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8007e90:	2300      	movs	r3, #0
 8007e92:	61fb      	str	r3, [r7, #28]
 8007e94:	e005      	b.n	8007ea2 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8007e96:	4b1a      	ldr	r3, [pc, #104]	; (8007f00 <UTIL_SEQ_WaitEvt+0x88>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea0:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8007ea2:	4b18      	ldr	r3, [pc, #96]	; (8007f04 <UTIL_SEQ_WaitEvt+0x8c>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8007ea8:	4a16      	ldr	r2, [pc, #88]	; (8007f04 <UTIL_SEQ_WaitEvt+0x8c>)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8007eae:	e003      	b.n	8007eb8 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8007eb0:	6879      	ldr	r1, [r7, #4]
 8007eb2:	69f8      	ldr	r0, [r7, #28]
 8007eb4:	f7f8 fd53 	bl	800095e <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8007eb8:	4b13      	ldr	r3, [pc, #76]	; (8007f08 <UTIL_SEQ_WaitEvt+0x90>)
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	4013      	ands	r3, r2
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d0f5      	beq.n	8007eb0 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8007ec4:	4a0e      	ldr	r2, [pc, #56]	; (8007f00 <UTIL_SEQ_WaitEvt+0x88>)
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007eca:	f3ef 8310 	mrs	r3, PRIMASK
 8007ece:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ed0:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8007ed2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007ed4:	b672      	cpsid	i
}
 8007ed6:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	43da      	mvns	r2, r3
 8007edc:	4b0a      	ldr	r3, [pc, #40]	; (8007f08 <UTIL_SEQ_WaitEvt+0x90>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4013      	ands	r3, r2
 8007ee2:	4a09      	ldr	r2, [pc, #36]	; (8007f08 <UTIL_SEQ_WaitEvt+0x90>)
 8007ee4:	6013      	str	r3, [r2, #0]
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f383 8810 	msr	PRIMASK, r3
}
 8007ef0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8007ef2:	4a04      	ldr	r2, [pc, #16]	; (8007f04 <UTIL_SEQ_WaitEvt+0x8c>)
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	6013      	str	r3, [r2, #0]
  return;
 8007ef8:	bf00      	nop
}
 8007efa:	3720      	adds	r7, #32
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	200002ac 	.word	0x200002ac
 8007f04:	200002a8 	.word	0x200002a8
 8007f08:	200002a4 	.word	0x200002a4

08007f0c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8007f10:	bf00      	nop
}
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr

08007f1a <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8007f1a:	b480      	push	{r7}
 8007f1c:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8007f1e:	bf00      	nop
}
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b085      	sub	sp, #20
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8007f30:	2300      	movs	r3, #0
 8007f32:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	0c1b      	lsrs	r3, r3, #16
 8007f3c:	041b      	lsls	r3, r3, #16
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d104      	bne.n	8007f4c <SEQ_BitPosition+0x24>
 8007f42:	2310      	movs	r3, #16
 8007f44:	73fb      	strb	r3, [r7, #15]
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	041b      	lsls	r3, r3, #16
 8007f4a:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d105      	bne.n	8007f62 <SEQ_BitPosition+0x3a>
 8007f56:	7bfb      	ldrb	r3, [r7, #15]
 8007f58:	3308      	adds	r3, #8
 8007f5a:	73fb      	strb	r3, [r7, #15]
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	021b      	lsls	r3, r3, #8
 8007f60:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d105      	bne.n	8007f78 <SEQ_BitPosition+0x50>
 8007f6c:	7bfb      	ldrb	r3, [r7, #15]
 8007f6e:	3304      	adds	r3, #4
 8007f70:	73fb      	strb	r3, [r7, #15]
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	011b      	lsls	r3, r3, #4
 8007f76:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	0f1b      	lsrs	r3, r3, #28
 8007f7c:	4a07      	ldr	r2, [pc, #28]	; (8007f9c <SEQ_BitPosition+0x74>)
 8007f7e:	5cd2      	ldrb	r2, [r2, r3]
 8007f80:	7bfb      	ldrb	r3, [r7, #15]
 8007f82:	4413      	add	r3, r2
 8007f84:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8007f86:	7bfb      	ldrb	r3, [r7, #15]
 8007f88:	f1c3 031f 	rsb	r3, r3, #31
 8007f8c:	b2db      	uxtb	r3, r3
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3714      	adds	r7, #20
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr
 8007f9a:	bf00      	nop
 8007f9c:	080082b0 	.word	0x080082b0

08007fa0 <memset>:
 8007fa0:	4402      	add	r2, r0
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d100      	bne.n	8007faa <memset+0xa>
 8007fa8:	4770      	bx	lr
 8007faa:	f803 1b01 	strb.w	r1, [r3], #1
 8007fae:	e7f9      	b.n	8007fa4 <memset+0x4>

08007fb0 <__libc_init_array>:
 8007fb0:	b570      	push	{r4, r5, r6, lr}
 8007fb2:	4d0d      	ldr	r5, [pc, #52]	; (8007fe8 <__libc_init_array+0x38>)
 8007fb4:	4c0d      	ldr	r4, [pc, #52]	; (8007fec <__libc_init_array+0x3c>)
 8007fb6:	1b64      	subs	r4, r4, r5
 8007fb8:	10a4      	asrs	r4, r4, #2
 8007fba:	2600      	movs	r6, #0
 8007fbc:	42a6      	cmp	r6, r4
 8007fbe:	d109      	bne.n	8007fd4 <__libc_init_array+0x24>
 8007fc0:	4d0b      	ldr	r5, [pc, #44]	; (8007ff0 <__libc_init_array+0x40>)
 8007fc2:	4c0c      	ldr	r4, [pc, #48]	; (8007ff4 <__libc_init_array+0x44>)
 8007fc4:	f000 f826 	bl	8008014 <_init>
 8007fc8:	1b64      	subs	r4, r4, r5
 8007fca:	10a4      	asrs	r4, r4, #2
 8007fcc:	2600      	movs	r6, #0
 8007fce:	42a6      	cmp	r6, r4
 8007fd0:	d105      	bne.n	8007fde <__libc_init_array+0x2e>
 8007fd2:	bd70      	pop	{r4, r5, r6, pc}
 8007fd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fd8:	4798      	blx	r3
 8007fda:	3601      	adds	r6, #1
 8007fdc:	e7ee      	b.n	8007fbc <__libc_init_array+0xc>
 8007fde:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fe2:	4798      	blx	r3
 8007fe4:	3601      	adds	r6, #1
 8007fe6:	e7f2      	b.n	8007fce <__libc_init_array+0x1e>
 8007fe8:	080082c0 	.word	0x080082c0
 8007fec:	080082c0 	.word	0x080082c0
 8007ff0:	080082c0 	.word	0x080082c0
 8007ff4:	080082c4 	.word	0x080082c4

08007ff8 <memcpy>:
 8007ff8:	440a      	add	r2, r1
 8007ffa:	4291      	cmp	r1, r2
 8007ffc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008000:	d100      	bne.n	8008004 <memcpy+0xc>
 8008002:	4770      	bx	lr
 8008004:	b510      	push	{r4, lr}
 8008006:	f811 4b01 	ldrb.w	r4, [r1], #1
 800800a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800800e:	4291      	cmp	r1, r2
 8008010:	d1f9      	bne.n	8008006 <memcpy+0xe>
 8008012:	bd10      	pop	{r4, pc}

08008014 <_init>:
 8008014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008016:	bf00      	nop
 8008018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800801a:	bc08      	pop	{r3}
 800801c:	469e      	mov	lr, r3
 800801e:	4770      	bx	lr

08008020 <_fini>:
 8008020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008022:	bf00      	nop
 8008024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008026:	bc08      	pop	{r3}
 8008028:	469e      	mov	lr, r3
 800802a:	4770      	bx	lr
