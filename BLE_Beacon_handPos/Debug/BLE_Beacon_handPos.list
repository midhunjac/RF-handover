
BLE_Beacon_handPos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aec0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c4  0800b000  0800b000  0001b000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800b7c4  0800b7c4  0001b7c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800b7c8  0800b7c8  0001b7c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f0  20000004  0800b7cc  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 TIMERSERVER_CONTEXT 00000099  200001f4  0800b9bc  000201f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000290  0800ba55  00020290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200002c8  0800ba8a  000202c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  200002dc  0800ba9b  000202dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000518  0800ba9b  00020518  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202d9  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 14 MB_MEM2       00000883  200301e4  200301e4  00030000  2**2
                  ALLOC
 15 .debug_info   0002c177  00000000  00000000  00020309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000628a  00000000  00000000  0004c480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002768  00000000  00000000  00052710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00002480  00000000  00000000  00054e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002845e  00000000  00000000  000572f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002af44  00000000  00000000  0007f756  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000d1cea  00000000  00000000  000aa69a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  0017c384  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000b3d4  00000000  00000000  0017c3d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002dc 	.word	0x200002dc
 800015c:	00000000 	.word	0x00000000
 8000160:	0800afe8 	.word	0x0800afe8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002e0 	.word	0x200002e0
 800017c:	0800afe8 	.word	0x0800afe8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <LSM6DSM_start_gyro>:
//	HAL_I2C_Master_Transmit(&i2c,LSM6DSM_DeviceID,buf,2,100);

	return;
}

void LSM6DSM_start_gyro(I2C_HandleTypeDef i2c, uint8_t Gscale, uint8_t GODR) {
 8000b58:	b084      	sub	sp, #16
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b084      	sub	sp, #16
 8000b5e:	af02      	add	r7, sp, #8
 8000b60:	f107 0c10 	add.w	ip, r7, #16
 8000b64:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// Control Register 2 Angular Rate Sensor //
	uint8_t buf[2];
	buf[0]  = LSM6DSM_CTRL2_G;
 8000b68:	2311      	movs	r3, #17
 8000b6a:	713b      	strb	r3, [r7, #4]
	if(Gscale == GFS_125DPS){
 8000b6c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000b70:	2bff      	cmp	r3, #255	; 0xff
 8000b72:	d109      	bne.n	8000b88 <LSM6DSM_start_gyro+0x30>
			buf[1]  = (GODR << 4) | 0b10;				// Set Gyroscope data rate | Sensitivity is 125dps
 8000b74:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000b78:	011b      	lsls	r3, r3, #4
 8000b7a:	b25b      	sxtb	r3, r3
 8000b7c:	f043 0302 	orr.w	r3, r3, #2
 8000b80:	b25b      	sxtb	r3, r3
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	717b      	strb	r3, [r7, #5]
 8000b86:	e00b      	b.n	8000ba0 <LSM6DSM_start_gyro+0x48>
		}else{
			buf[1]  = (GODR << 4) | (Gscale << 2);		// Set Gyroscope data rate | Sensitivity more than 125dps
 8000b88:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000b8c:	011b      	lsls	r3, r3, #4
 8000b8e:	b25a      	sxtb	r2, r3
 8000b90:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	b25b      	sxtb	r3, r3
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	b25b      	sxtb	r3, r3
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	717b      	strb	r3, [r7, #5]
		}
	HAL_I2C_Master_Transmit(&i2c,LSM6DSM_DeviceID,buf,2,100);
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <LSM6DSM_start_gyro+0x94>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	b299      	uxth	r1, r3
 8000ba6:	1d3a      	adds	r2, r7, #4
 8000ba8:	2364      	movs	r3, #100	; 0x64
 8000baa:	9300      	str	r3, [sp, #0]
 8000bac:	2302      	movs	r3, #2
 8000bae:	f107 0010 	add.w	r0, r7, #16
 8000bb2:	f002 fbfd 	bl	80033b0 <HAL_I2C_Master_Transmit>

	// Control Register 7//
	uint8_t G_HM_MODE = 0b1;						// Disable High performance mode for gyroscope
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	71fb      	strb	r3, [r7, #7]
	buf[0]  = LSM6DSM_CTRL7_G;
 8000bba:	2316      	movs	r3, #22
 8000bbc:	713b      	strb	r3, [r7, #4]
	buf[1]  = (G_HM_MODE << 7);
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	01db      	lsls	r3, r3, #7
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&i2c,LSM6DSM_DeviceID,buf,2,100);
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <LSM6DSM_start_gyro+0x94>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	b299      	uxth	r1, r3
 8000bcc:	1d3a      	adds	r2, r7, #4
 8000bce:	2364      	movs	r3, #100	; 0x64
 8000bd0:	9300      	str	r3, [sp, #0]
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	f107 0010 	add.w	r0, r7, #16
 8000bd8:	f002 fbea 	bl	80033b0 <HAL_I2C_Master_Transmit>

	return;
 8000bdc:	bf00      	nop
}
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000be6:	b004      	add	sp, #16
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	20000004 	.word	0x20000004

08000bf0 <LSM6DSM_stop_acc>:
	HAL_I2C_Master_Transmit(&i2c,LSM6DSM_DeviceID,buf,2,100);

	return;
}

void LSM6DSM_stop_acc(I2C_HandleTypeDef i2c, uint8_t AODR) {
 8000bf0:	b084      	sub	sp, #16
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b084      	sub	sp, #16
 8000bf6:	af02      	add	r7, sp, #8
 8000bf8:	f107 0c10 	add.w	ip, r7, #16
 8000bfc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// Control Register 1 Linear Acceleration Sensor //
	uint8_t buf[2];
	buf[0]  = LSM6DSM_CTRL1_XL;
 8000c00:	2310      	movs	r3, #16
 8000c02:	713b      	strb	r3, [r7, #4]
	buf[1]  = (AODR << 4);					// Set Accelerometer data rate
 8000c04:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000c08:	011b      	lsls	r3, r3, #4
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&i2c,LSM6DSM_DeviceID,buf,2,100);
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <LSM6DSM_stop_acc+0x44>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	b299      	uxth	r1, r3
 8000c14:	1d3a      	adds	r2, r7, #4
 8000c16:	2364      	movs	r3, #100	; 0x64
 8000c18:	9300      	str	r3, [sp, #0]
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	f107 0010 	add.w	r0, r7, #16
 8000c20:	f002 fbc6 	bl	80033b0 <HAL_I2C_Master_Transmit>

	return;
 8000c24:	bf00      	nop
}
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c2e:	b004      	add	sp, #16
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	20000004 	.word	0x20000004

08000c38 <LSM6DSM_getGscale>:
   @Brief         Get Sensitivity of Gyroscope
   @Description   Check Sensitivity range of Gyroscope
   @Parameter     I2C_HandleTypeDef ->  HAL_I2C Handle
   @Return value  uint16_t
 */
uint16_t LSM6DSM_getGscale(I2C_HandleTypeDef i2c){
 8000c38:	b084      	sub	sp, #16
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b084      	sub	sp, #16
 8000c3e:	af02      	add	r7, sp, #8
 8000c40:	f107 0c10 	add.w	ip, r7, #16
 8000c44:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	uint8_t buf = LSM6DSM_CTRL2_G;				// Read CTRL2_G
 8000c48:	2311      	movs	r3, #17
 8000c4a:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&i2c,LSM6DSM_DeviceID,&buf,1,100);
 8000c4c:	4b24      	ldr	r3, [pc, #144]	; (8000ce0 <LSM6DSM_getGscale+0xa8>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	b299      	uxth	r1, r3
 8000c52:	1dba      	adds	r2, r7, #6
 8000c54:	2364      	movs	r3, #100	; 0x64
 8000c56:	9300      	str	r3, [sp, #0]
 8000c58:	2301      	movs	r3, #1
 8000c5a:	f107 0010 	add.w	r0, r7, #16
 8000c5e:	f002 fba7 	bl	80033b0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2c,LSM6DSM_DeviceID,&buf,1,100);
 8000c62:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <LSM6DSM_getGscale+0xa8>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	b299      	uxth	r1, r3
 8000c68:	1dba      	adds	r2, r7, #6
 8000c6a:	2364      	movs	r3, #100	; 0x64
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	2301      	movs	r3, #1
 8000c70:	f107 0010 	add.w	r0, r7, #16
 8000c74:	f002 fc90 	bl	8003598 <HAL_I2C_Master_Receive>

	uint8_t Gscale = (buf >> 1) % 8;	// Extract Full-scale sensitivity selection
 8000c78:	79bb      	ldrb	r3, [r7, #6]
 8000c7a:	085b      	lsrs	r3, r3, #1
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	71fb      	strb	r3, [r7, #7]
	if((Gscale % 2)){					// Check for FS_125 bit
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <LSM6DSM_getGscale+0x5c>
		return 125;
 8000c90:	237d      	movs	r3, #125	; 0x7d
 8000c92:	e01d      	b.n	8000cd0 <LSM6DSM_getGscale+0x98>
	}else{
		Gscale = Gscale >> 1;
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	085b      	lsrs	r3, r3, #1
 8000c98:	71fb      	strb	r3, [r7, #7]
	}

	switch(Gscale){
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	2b03      	cmp	r3, #3
 8000c9e:	d816      	bhi.n	8000cce <LSM6DSM_getGscale+0x96>
 8000ca0:	a201      	add	r2, pc, #4	; (adr r2, 8000ca8 <LSM6DSM_getGscale+0x70>)
 8000ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ca6:	bf00      	nop
 8000ca8:	08000cb9 	.word	0x08000cb9
 8000cac:	08000cbd 	.word	0x08000cbd
 8000cb0:	08000cc3 	.word	0x08000cc3
 8000cb4:	08000cc9 	.word	0x08000cc9
		case GFS_250DPS  : return 250;
 8000cb8:	23fa      	movs	r3, #250	; 0xfa
 8000cba:	e009      	b.n	8000cd0 <LSM6DSM_getGscale+0x98>
		case GFS_500DPS  : return 500;
 8000cbc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000cc0:	e006      	b.n	8000cd0 <LSM6DSM_getGscale+0x98>
		case GFS_1000DPS : return 1000;
 8000cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cc6:	e003      	b.n	8000cd0 <LSM6DSM_getGscale+0x98>
		case GFS_2000DPS : return 2000;
 8000cc8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000ccc:	e000      	b.n	8000cd0 <LSM6DSM_getGscale+0x98>
		default : return 0;
 8000cce:	2300      	movs	r3, #0
	}
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000cda:	b004      	add	sp, #16
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	20000004 	.word	0x20000004

08000ce4 <LSM6DSM_readGyro>:
   @Description   Read Angular acceleration from each axis
   @Parameter     I2C_HandleTypeDef ->  HAL_I2C Handle
   @Parameter     destination ->  pointer to array to store values
   @Return value  void
 */
void LSM6DSM_readGyro(I2C_HandleTypeDef i2c, float * destination){
 8000ce4:	b084      	sub	sp, #16
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b096      	sub	sp, #88	; 0x58
 8000cea:	af12      	add	r7, sp, #72	; 0x48
 8000cec:	f107 0c18 	add.w	ip, r7, #24
 8000cf0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	uint8_t buf = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	727b      	strb	r3, [r7, #9]
	uint8_t high = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	723b      	strb	r3, [r7, #8]
	uint8_t low = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	71fb      	strb	r3, [r7, #7]
	int16_t value[3];

	float scale = 0.0f;
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
	uint16_t Gscale = LSM6DSM_getGscale(i2c);
 8000d06:	4668      	mov	r0, sp
 8000d08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d0c:	2244      	movs	r2, #68	; 0x44
 8000d0e:	4619      	mov	r1, r3
 8000d10:	f007 fbd6 	bl	80084c0 <memcpy>
 8000d14:	f107 0318 	add.w	r3, r7, #24
 8000d18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d1a:	f7ff ff8d 	bl	8000c38 <LSM6DSM_getGscale>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	817b      	strh	r3, [r7, #10]
	switch (Gscale){
 8000d22:	897b      	ldrh	r3, [r7, #10]
 8000d24:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000d28:	d01f      	beq.n	8000d6a <LSM6DSM_readGyro+0x86>
 8000d2a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000d2e:	dc1f      	bgt.n	8000d70 <LSM6DSM_readGyro+0x8c>
 8000d30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d34:	d016      	beq.n	8000d64 <LSM6DSM_readGyro+0x80>
 8000d36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d3a:	dc19      	bgt.n	8000d70 <LSM6DSM_readGyro+0x8c>
 8000d3c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d40:	d00d      	beq.n	8000d5e <LSM6DSM_readGyro+0x7a>
 8000d42:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d46:	dc13      	bgt.n	8000d70 <LSM6DSM_readGyro+0x8c>
 8000d48:	2b7d      	cmp	r3, #125	; 0x7d
 8000d4a:	d002      	beq.n	8000d52 <LSM6DSM_readGyro+0x6e>
 8000d4c:	2bfa      	cmp	r3, #250	; 0xfa
 8000d4e:	d003      	beq.n	8000d58 <LSM6DSM_readGyro+0x74>
 8000d50:	e00e      	b.n	8000d70 <LSM6DSM_readGyro+0x8c>
		case 125  :	scale = LSM6DSM_SCALE_125DPS;
 8000d52:	4b7a      	ldr	r3, [pc, #488]	; (8000f3c <LSM6DSM_readGyro+0x258>)
 8000d54:	60fb      	str	r3, [r7, #12]
					break;
 8000d56:	e00f      	b.n	8000d78 <LSM6DSM_readGyro+0x94>
		case 250  : scale = LSM6DSM_SCALE_250DPS;
 8000d58:	4b79      	ldr	r3, [pc, #484]	; (8000f40 <LSM6DSM_readGyro+0x25c>)
 8000d5a:	60fb      	str	r3, [r7, #12]
					break;
 8000d5c:	e00c      	b.n	8000d78 <LSM6DSM_readGyro+0x94>
		case 500  : scale = LSM6DSM_SCALE_500DPS;
 8000d5e:	4b79      	ldr	r3, [pc, #484]	; (8000f44 <LSM6DSM_readGyro+0x260>)
 8000d60:	60fb      	str	r3, [r7, #12]
					break;
 8000d62:	e009      	b.n	8000d78 <LSM6DSM_readGyro+0x94>
		case 1000 : scale = LSM6DSM_SCALE_1000DPS;
 8000d64:	4b78      	ldr	r3, [pc, #480]	; (8000f48 <LSM6DSM_readGyro+0x264>)
 8000d66:	60fb      	str	r3, [r7, #12]
					break;
 8000d68:	e006      	b.n	8000d78 <LSM6DSM_readGyro+0x94>
		case 2000 : scale = LSM6DSM_SCALE_2000DPS;
 8000d6a:	4b78      	ldr	r3, [pc, #480]	; (8000f4c <LSM6DSM_readGyro+0x268>)
 8000d6c:	60fb      	str	r3, [r7, #12]
					break;
 8000d6e:	e003      	b.n	8000d78 <LSM6DSM_readGyro+0x94>
		default : 	printf("Error in Gscale\r\n");
 8000d70:	4877      	ldr	r0, [pc, #476]	; (8000f50 <LSM6DSM_readGyro+0x26c>)
 8000d72:	f008 f893 	bl	8008e9c <puts>
					return;
 8000d76:	e0da      	b.n	8000f2e <LSM6DSM_readGyro+0x24a>
	}


	// Get X Axis Value -> Pitch axis
	buf = LSM6DSM_OUTX_L_G;
 8000d78:	2322      	movs	r3, #34	; 0x22
 8000d7a:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(&i2c,LSM6DSM_DeviceID,&buf,1,100);
 8000d7c:	4b75      	ldr	r3, [pc, #468]	; (8000f54 <LSM6DSM_readGyro+0x270>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	b299      	uxth	r1, r3
 8000d82:	f107 0209 	add.w	r2, r7, #9
 8000d86:	2364      	movs	r3, #100	; 0x64
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	f107 0018 	add.w	r0, r7, #24
 8000d90:	f002 fb0e 	bl	80033b0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2c,LSM6DSM_DeviceID,&low,1,100);
 8000d94:	4b6f      	ldr	r3, [pc, #444]	; (8000f54 <LSM6DSM_readGyro+0x270>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	b299      	uxth	r1, r3
 8000d9a:	1dfa      	adds	r2, r7, #7
 8000d9c:	2364      	movs	r3, #100	; 0x64
 8000d9e:	9300      	str	r3, [sp, #0]
 8000da0:	2301      	movs	r3, #1
 8000da2:	f107 0018 	add.w	r0, r7, #24
 8000da6:	f002 fbf7 	bl	8003598 <HAL_I2C_Master_Receive>

	buf = LSM6DSM_OUTX_H_G;
 8000daa:	2323      	movs	r3, #35	; 0x23
 8000dac:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(&i2c,LSM6DSM_DeviceID,&buf,1,100);
 8000dae:	4b69      	ldr	r3, [pc, #420]	; (8000f54 <LSM6DSM_readGyro+0x270>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	b299      	uxth	r1, r3
 8000db4:	f107 0209 	add.w	r2, r7, #9
 8000db8:	2364      	movs	r3, #100	; 0x64
 8000dba:	9300      	str	r3, [sp, #0]
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	f107 0018 	add.w	r0, r7, #24
 8000dc2:	f002 faf5 	bl	80033b0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2c,LSM6DSM_DeviceID,&high,1,100);
 8000dc6:	4b63      	ldr	r3, [pc, #396]	; (8000f54 <LSM6DSM_readGyro+0x270>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	b299      	uxth	r1, r3
 8000dcc:	f107 0208 	add.w	r2, r7, #8
 8000dd0:	2364      	movs	r3, #100	; 0x64
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	f107 0018 	add.w	r0, r7, #24
 8000dda:	f002 fbdd 	bl	8003598 <HAL_I2C_Master_Receive>

	value[0] = (int16_t) ((high << 8) | low);
 8000dde:	7a3b      	ldrb	r3, [r7, #8]
 8000de0:	021b      	lsls	r3, r3, #8
 8000de2:	b21a      	sxth	r2, r3
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	b21b      	sxth	r3, r3
 8000de8:	4313      	orrs	r3, r2
 8000dea:	b21b      	sxth	r3, r3
 8000dec:	803b      	strh	r3, [r7, #0]
	destination[0] = (value[0] * scale);
 8000dee:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000df2:	ee07 3a90 	vmov	s15, r3
 8000df6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dfa:	edd7 7a03 	vldr	s15, [r7, #12]
 8000dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e04:	edc3 7a00 	vstr	s15, [r3]



	//Get Y Axis Value -> Roll axis
	buf = LSM6DSM_OUTY_L_G;
 8000e08:	2324      	movs	r3, #36	; 0x24
 8000e0a:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(&i2c,LSM6DSM_DeviceID,&buf,1,100);
 8000e0c:	4b51      	ldr	r3, [pc, #324]	; (8000f54 <LSM6DSM_readGyro+0x270>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	b299      	uxth	r1, r3
 8000e12:	f107 0209 	add.w	r2, r7, #9
 8000e16:	2364      	movs	r3, #100	; 0x64
 8000e18:	9300      	str	r3, [sp, #0]
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	f107 0018 	add.w	r0, r7, #24
 8000e20:	f002 fac6 	bl	80033b0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2c,LSM6DSM_DeviceID,&low,1,100);
 8000e24:	4b4b      	ldr	r3, [pc, #300]	; (8000f54 <LSM6DSM_readGyro+0x270>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	b299      	uxth	r1, r3
 8000e2a:	1dfa      	adds	r2, r7, #7
 8000e2c:	2364      	movs	r3, #100	; 0x64
 8000e2e:	9300      	str	r3, [sp, #0]
 8000e30:	2301      	movs	r3, #1
 8000e32:	f107 0018 	add.w	r0, r7, #24
 8000e36:	f002 fbaf 	bl	8003598 <HAL_I2C_Master_Receive>

	buf = LSM6DSM_OUTY_H_G;
 8000e3a:	2325      	movs	r3, #37	; 0x25
 8000e3c:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(&i2c,LSM6DSM_DeviceID,&buf,1,100);
 8000e3e:	4b45      	ldr	r3, [pc, #276]	; (8000f54 <LSM6DSM_readGyro+0x270>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	b299      	uxth	r1, r3
 8000e44:	f107 0209 	add.w	r2, r7, #9
 8000e48:	2364      	movs	r3, #100	; 0x64
 8000e4a:	9300      	str	r3, [sp, #0]
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	f107 0018 	add.w	r0, r7, #24
 8000e52:	f002 faad 	bl	80033b0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2c,LSM6DSM_DeviceID,&high,1,100);
 8000e56:	4b3f      	ldr	r3, [pc, #252]	; (8000f54 <LSM6DSM_readGyro+0x270>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	b299      	uxth	r1, r3
 8000e5c:	f107 0208 	add.w	r2, r7, #8
 8000e60:	2364      	movs	r3, #100	; 0x64
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	2301      	movs	r3, #1
 8000e66:	f107 0018 	add.w	r0, r7, #24
 8000e6a:	f002 fb95 	bl	8003598 <HAL_I2C_Master_Receive>

	value[1] = (int16_t) ((high << 8) | low);
 8000e6e:	7a3b      	ldrb	r3, [r7, #8]
 8000e70:	021b      	lsls	r3, r3, #8
 8000e72:	b21a      	sxth	r2, r3
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	b21b      	sxth	r3, r3
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	b21b      	sxth	r3, r3
 8000e7c:	807b      	strh	r3, [r7, #2]
	destination[1] = (value[1] * scale);
 8000e7e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e82:	ee07 3a90 	vmov	s15, r3
 8000e86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e96:	edc3 7a00 	vstr	s15, [r3]



	//Get Z Axis Value -> Yaw axis
	buf = LSM6DSM_OUTZ_L_G;
 8000e9a:	2326      	movs	r3, #38	; 0x26
 8000e9c:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(&i2c,LSM6DSM_DeviceID,&buf,1,100);
 8000e9e:	4b2d      	ldr	r3, [pc, #180]	; (8000f54 <LSM6DSM_readGyro+0x270>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	b299      	uxth	r1, r3
 8000ea4:	f107 0209 	add.w	r2, r7, #9
 8000ea8:	2364      	movs	r3, #100	; 0x64
 8000eaa:	9300      	str	r3, [sp, #0]
 8000eac:	2301      	movs	r3, #1
 8000eae:	f107 0018 	add.w	r0, r7, #24
 8000eb2:	f002 fa7d 	bl	80033b0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2c,LSM6DSM_DeviceID,&low,1,100);
 8000eb6:	4b27      	ldr	r3, [pc, #156]	; (8000f54 <LSM6DSM_readGyro+0x270>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	b299      	uxth	r1, r3
 8000ebc:	1dfa      	adds	r2, r7, #7
 8000ebe:	2364      	movs	r3, #100	; 0x64
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	f107 0018 	add.w	r0, r7, #24
 8000ec8:	f002 fb66 	bl	8003598 <HAL_I2C_Master_Receive>

	buf = LSM6DSM_OUTZ_H_G;
 8000ecc:	2327      	movs	r3, #39	; 0x27
 8000ece:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(&i2c,LSM6DSM_DeviceID,&buf,1,100);
 8000ed0:	4b20      	ldr	r3, [pc, #128]	; (8000f54 <LSM6DSM_readGyro+0x270>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	b299      	uxth	r1, r3
 8000ed6:	f107 0209 	add.w	r2, r7, #9
 8000eda:	2364      	movs	r3, #100	; 0x64
 8000edc:	9300      	str	r3, [sp, #0]
 8000ede:	2301      	movs	r3, #1
 8000ee0:	f107 0018 	add.w	r0, r7, #24
 8000ee4:	f002 fa64 	bl	80033b0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2c,LSM6DSM_DeviceID,&high,1,100);
 8000ee8:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <LSM6DSM_readGyro+0x270>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	b299      	uxth	r1, r3
 8000eee:	f107 0208 	add.w	r2, r7, #8
 8000ef2:	2364      	movs	r3, #100	; 0x64
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	f107 0018 	add.w	r0, r7, #24
 8000efc:	f002 fb4c 	bl	8003598 <HAL_I2C_Master_Receive>

	value[2] = (int16_t) ((high << 8) | low);
 8000f00:	7a3b      	ldrb	r3, [r7, #8]
 8000f02:	021b      	lsls	r3, r3, #8
 8000f04:	b21a      	sxth	r2, r3
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	b21b      	sxth	r3, r3
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	b21b      	sxth	r3, r3
 8000f0e:	80bb      	strh	r3, [r7, #4]
	destination[2] = (value[2] * scale);
 8000f10:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f14:	ee07 3a90 	vmov	s15, r3
 8000f18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f1e:	3308      	adds	r3, #8
 8000f20:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f28:	edc3 7a00 	vstr	s15, [r3]


	return;
 8000f2c:	bf00      	nop
}
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f36:	b004      	add	sp, #16
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	3b8f5c29 	.word	0x3b8f5c29
 8000f40:	3c0f5c29 	.word	0x3c0f5c29
 8000f44:	3c8f5c29 	.word	0x3c8f5c29
 8000f48:	3d0f5c29 	.word	0x3d0f5c29
 8000f4c:	3d99999a 	.word	0x3d99999a
 8000f50:	0800b000 	.word	0x0800b000
 8000f54:	20000004 	.word	0x20000004

08000f58 <LSM6DSM_wait_for_Data>:
   @Brief         Wait until next set of Gyro data is ready
   @Description   Wait for status
   @Parameter     I2C_HandleTypeDef ->  HAL_I2C Handle
   @Return value  void
 */
void LSM6DSM_wait_for_Data(I2C_HandleTypeDef i2c){
 8000f58:	b084      	sub	sp, #16
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b094      	sub	sp, #80	; 0x50
 8000f5e:	af12      	add	r7, sp, #72	; 0x48
 8000f60:	f107 0c10 	add.w	ip, r7, #16
 8000f64:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	uint8_t data = LSM6DSM_read_status(i2c);
 8000f68:	4668      	mov	r0, sp
 8000f6a:	f107 0320 	add.w	r3, r7, #32
 8000f6e:	2244      	movs	r2, #68	; 0x44
 8000f70:	4619      	mov	r1, r3
 8000f72:	f007 faa5 	bl	80084c0 <memcpy>
 8000f76:	f107 0310 	add.w	r3, r7, #16
 8000f7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f7c:	f000 f81e 	bl	8000fbc <LSM6DSM_read_status>
 8000f80:	4603      	mov	r3, r0
 8000f82:	71fb      	strb	r3, [r7, #7]
	while(!(data & 0b010)){
 8000f84:	e00d      	b.n	8000fa2 <LSM6DSM_wait_for_Data+0x4a>
		data = LSM6DSM_read_status(i2c);
 8000f86:	4668      	mov	r0, sp
 8000f88:	f107 0320 	add.w	r3, r7, #32
 8000f8c:	2244      	movs	r2, #68	; 0x44
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f007 fa96 	bl	80084c0 <memcpy>
 8000f94:	f107 0310 	add.w	r3, r7, #16
 8000f98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f9a:	f000 f80f 	bl	8000fbc <LSM6DSM_read_status>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
	while(!(data & 0b010)){
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	f003 0302 	and.w	r3, r3, #2
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d0ec      	beq.n	8000f86 <LSM6DSM_wait_for_Data+0x2e>
	}
	return;
 8000fac:	bf00      	nop
}
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fb6:	b004      	add	sp, #16
 8000fb8:	4770      	bx	lr
	...

08000fbc <LSM6DSM_read_status>:

uint8_t LSM6DSM_read_status(I2C_HandleTypeDef i2c){
 8000fbc:	b084      	sub	sp, #16
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b084      	sub	sp, #16
 8000fc2:	af02      	add	r7, sp, #8
 8000fc4:	f107 0c10 	add.w	ip, r7, #16
 8000fc8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	uint8_t buf = LSM6DSM_STATUS_REG;
 8000fcc:	231e      	movs	r3, #30
 8000fce:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Master_Transmit(&i2c,LSM6DSM_DeviceID,&buf,1,100);
 8000fd4:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <LSM6DSM_read_status+0x54>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	b299      	uxth	r1, r3
 8000fda:	1dfa      	adds	r2, r7, #7
 8000fdc:	2364      	movs	r3, #100	; 0x64
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	f107 0010 	add.w	r0, r7, #16
 8000fe6:	f002 f9e3 	bl	80033b0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2c,LSM6DSM_DeviceID,&data,1,100);
 8000fea:	4b09      	ldr	r3, [pc, #36]	; (8001010 <LSM6DSM_read_status+0x54>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	b299      	uxth	r1, r3
 8000ff0:	1dba      	adds	r2, r7, #6
 8000ff2:	2364      	movs	r3, #100	; 0x64
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	f107 0010 	add.w	r0, r7, #16
 8000ffc:	f002 facc 	bl	8003598 <HAL_I2C_Master_Receive>

	return data;
 8001000:	79bb      	ldrb	r3, [r7, #6]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800100c:	b004      	add	sp, #16
 800100e:	4770      	bx	lr
 8001010:	20000004 	.word	0x20000004

08001014 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8001014:	b5b0      	push	{r4, r5, r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  APPD_GeneralConfig.STBY_DebugGpioaPinList = STBY_DebugGpioaPinList;
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <APPD_EnableCPU2+0x5c>)
 800101c:	881a      	ldrh	r2, [r3, #0]
 800101e:	4b15      	ldr	r3, [pc, #84]	; (8001074 <APPD_EnableCPU2+0x60>)
 8001020:	809a      	strh	r2, [r3, #4]
  APPD_GeneralConfig.STBY_DebugGpiobPinList = STBY_DebugGpiobPinList;
 8001022:	4b15      	ldr	r3, [pc, #84]	; (8001078 <APPD_EnableCPU2+0x64>)
 8001024:	881a      	ldrh	r2, [r3, #0]
 8001026:	4b13      	ldr	r3, [pc, #76]	; (8001074 <APPD_EnableCPU2+0x60>)
 8001028:	80da      	strh	r2, [r3, #6]
  APPD_GeneralConfig.STBY_DebugGpiocPinList = STBY_DebugGpiocPinList;
 800102a:	4b14      	ldr	r3, [pc, #80]	; (800107c <APPD_EnableCPU2+0x68>)
 800102c:	881a      	ldrh	r2, [r3, #0]
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <APPD_EnableCPU2+0x60>)
 8001030:	811a      	strh	r2, [r3, #8]
  APPD_GeneralConfig.STBY_DtbGpioaPinList = STBY_DtbGpioaPinList;
 8001032:	4b13      	ldr	r3, [pc, #76]	; (8001080 <APPD_EnableCPU2+0x6c>)
 8001034:	881a      	ldrh	r2, [r3, #0]
 8001036:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <APPD_EnableCPU2+0x60>)
 8001038:	815a      	strh	r2, [r3, #10]
  APPD_GeneralConfig.STBY_DtbGpiobPinList = STBY_DtbGpiobPinList;
 800103a:	4b12      	ldr	r3, [pc, #72]	; (8001084 <APPD_EnableCPU2+0x70>)
 800103c:	881a      	ldrh	r2, [r3, #0]
 800103e:	4b0d      	ldr	r3, [pc, #52]	; (8001074 <APPD_EnableCPU2+0x60>)
 8001040:	819a      	strh	r2, [r3, #12]

  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <APPD_EnableCPU2+0x74>)
 8001044:	1d3c      	adds	r4, r7, #4
 8001046:	461d      	mov	r5, r3
 8001048:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800104a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800104c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001050:	c403      	stmia	r4!, {r0, r1}
 8001052:	8022      	strh	r2, [r4, #0]
 8001054:	3402      	adds	r4, #2
 8001056:	0c13      	lsrs	r3, r2, #16
 8001058:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800105a:	f006 f82d 	bl	80070b8 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	4618      	mov	r0, r3
 8001062:	f005 fac8 	bl	80065f6 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8001066:	bf00      	nop
}
 8001068:	3720      	adds	r7, #32
 800106a:	46bd      	mov	sp, r7
 800106c:	bdb0      	pop	{r4, r5, r7, pc}
 800106e:	bf00      	nop
 8001070:	20000006 	.word	0x20000006
 8001074:	200301e8 	.word	0x200301e8
 8001078:	20000008 	.word	0x20000008
 800107c:	2000000a 	.word	0x2000000a
 8001080:	2000000c 	.word	0x2000000c
 8001084:	2000000e 	.word	0x2000000e
 8001088:	0800b13c 	.word	0x0800b13c

0800108c <LL_PWR_SMPS_Enable>:
  *         @ref LL_PWR_SMPS_SetMode() should be used instead.
  * @rmtoll CR5          SMPSEN        LL_PWR_SMPS_Enable
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_Enable(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR5, PWR_CR5_SMPSEN);
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <LL_PWR_SMPS_Enable+0x1c>)
 8001092:	69db      	ldr	r3, [r3, #28]
 8001094:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <LL_PWR_SMPS_Enable+0x1c>)
 8001096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800109a:	61d3      	str	r3, [r2, #28]
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	58000400 	.word	0x58000400

080010ac <LL_PWR_SMPS_SetStartupCurrent>:
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_200MA
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_220MA
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetStartupCurrent(uint32_t StartupCurrent)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSSC, StartupCurrent);
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 80010b6:	69db      	ldr	r3, [r3, #28]
 80010b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80010bc:	4904      	ldr	r1, [pc, #16]	; (80010d0 <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61cb      	str	r3, [r1, #28]
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	58000400 	.word	0x58000400

080010d4 <LL_PWR_SMPS_SetOutputVoltageLevel>:
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V85
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V90
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetOutputVoltageLevel(uint32_t OutputVoltageLevel)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b087      	sub	sp, #28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  __IO const uint32_t OutputVoltageLevel_calibration = (((*SMPS_VOLTAGE_CAL_ADDR) & SMPS_VOLTAGE_CAL) >> SMPS_VOLTAGE_CAL_POS);  /* SMPS output voltage level calibrated in production */
 80010dc:	4b18      	ldr	r3, [pc, #96]	; (8001140 <LL_PWR_SMPS_SetOutputVoltageLevel+0x6c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	0a1b      	lsrs	r3, r3, #8
 80010e2:	f003 030f 	and.w	r3, r3, #15
 80010e6:	60fb      	str	r3, [r7, #12]
  int32_t TrimmingSteps;                               /* Trimming steps between theoretical output voltage and calibrated output voltage */
  int32_t OutputVoltageLevelTrimmed;                   /* SMPS output voltage level after calibration: trimming value added to required level */

  if(OutputVoltageLevel_calibration == 0UL)
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d108      	bne.n	8001100 <LL_PWR_SMPS_SetOutputVoltageLevel+0x2c>
  {
    /* Device with SMPS output voltage not calibrated in production: Apply output voltage value directly */
    
    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, OutputVoltageLevel);
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	f023 020f 	bic.w	r2, r3, #15
 80010f6:	4913      	ldr	r1, [pc, #76]	; (8001144 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61cb      	str	r3, [r1, #28]
    }

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
  }
}
 80010fe:	e019      	b.n	8001134 <LL_PWR_SMPS_SetOutputVoltageLevel+0x60>
    TrimmingSteps = ((int32_t)OutputVoltageLevel_calibration - (int32_t)(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V50 >> PWR_CR5_SMPSVOS_Pos));
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	3b06      	subs	r3, #6
 8001104:	613b      	str	r3, [r7, #16]
    OutputVoltageLevelTrimmed = ((int32_t)((uint32_t)(OutputVoltageLevel >> PWR_CR5_SMPSVOS_Pos)) + (int32_t)TrimmingSteps);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	4413      	add	r3, r2
 800110c:	617b      	str	r3, [r7, #20]
    if(OutputVoltageLevelTrimmed < 0)
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	2b00      	cmp	r3, #0
 8001112:	da02      	bge.n	800111a <LL_PWR_SMPS_SetOutputVoltageLevel+0x46>
      OutputVoltageLevelTrimmed = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
 8001118:	e004      	b.n	8001124 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
      if(OutputVoltageLevelTrimmed > (int32_t)PWR_CR5_SMPSVOS)
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	2b0f      	cmp	r3, #15
 800111e:	dd01      	ble.n	8001124 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
        OutputVoltageLevelTrimmed = (int32_t)PWR_CR5_SMPSVOS;
 8001120:	230f      	movs	r3, #15
 8001122:	617b      	str	r3, [r7, #20]
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
 8001124:	4b07      	ldr	r3, [pc, #28]	; (8001144 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8001126:	69db      	ldr	r3, [r3, #28]
 8001128:	f023 020f 	bic.w	r2, r3, #15
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	4905      	ldr	r1, [pc, #20]	; (8001144 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8001130:	4313      	orrs	r3, r2
 8001132:	61cb      	str	r3, [r1, #28]
}
 8001134:	bf00      	nop
 8001136:	371c      	adds	r7, #28
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	1fff7558 	.word	0x1fff7558
 8001144:	58000400 	.word	0x58000400

08001148 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8001150:	4b07      	ldr	r3, [pc, #28]	; (8001170 <LL_C2_PWR_SetPowerMode+0x28>)
 8001152:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001156:	f023 0207 	bic.w	r2, r3, #7
 800115a:	4905      	ldr	r1, [pc, #20]	; (8001170 <LL_C2_PWR_SetPowerMode+0x28>)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4313      	orrs	r3, r2
 8001160:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	58000400 	.word	0x58000400

08001174 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <LL_EXTI_EnableIT_32_63+0x24>)
 800117e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001182:	4905      	ldr	r1, [pc, #20]	; (8001198 <LL_EXTI_EnableIT_32_63+0x24>)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4313      	orrs	r3, r2
 8001188:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	58000800 	.word	0x58000800

0800119c <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80011a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011a8:	4a0a      	ldr	r2, [pc, #40]	; (80011d4 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80011aa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80011ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80011b6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	021b      	lsls	r3, r3, #8
 80011be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011c2:	4313      	orrs	r3, r2
 80011c4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	cafecafe 	.word	0xcafecafe

080011d8 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80011e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80011ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	608b      	str	r3, [r1, #8]
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800120c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001214:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800122a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800122e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001236:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800123a:	bf00      	nop
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8001248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800124c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001250:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001254:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001258:	d101      	bne.n	800125e <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800125a:	2301      	movs	r3, #1
 800125c:	e000      	b.n	8001260 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 800125e:	2300      	movs	r3, #0
}
 8001260:	4618      	mov	r0, r3
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800126e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001272:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800127e:	d101      	bne.n	8001284 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8001280:	2301      	movs	r3, #1
 8001282:	e000      	b.n	8001286 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800129c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800129e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80012a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4013      	ands	r3, r2
 80012b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012b4:	68fb      	ldr	r3, [r7, #12]
}
 80012b6:	bf00      	nop
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
	...

080012c4 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80012c8:	4b04      	ldr	r3, [pc, #16]	; (80012dc <LL_DBGMCU_GetRevisionID+0x18>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	0c1b      	lsrs	r3, r3, #16
 80012ce:	b29b      	uxth	r3, r3
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	e0042000 	.word	0xe0042000

080012e0 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685a      	ldr	r2, [r3, #4]
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	041b      	lsls	r3, r3, #16
 80012f2:	431a      	orrs	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	605a      	str	r2, [r3, #4]
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685a      	ldr	r2, [r3, #4]
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	431a      	orrs	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	605a      	str	r2, [r3, #4]
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
 800132e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	695a      	ldr	r2, [r3, #20]
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	041b      	lsls	r3, r3, #16
 8001338:	431a      	orrs	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	615a      	str	r2, [r3, #20]
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800134a:	b480      	push	{r7}
 800134c:	b083      	sub	sp, #12
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
 8001352:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	695a      	ldr	r2, [r3, #20]
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	431a      	orrs	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	615a      	str	r2, [r3, #20]
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	609a      	str	r2, [r3, #8]
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	619a      	str	r2, [r3, #24]
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	22ff      	movs	r2, #255	; 0xff
 80013b0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80013be:	b480      	push	{r7}
 80013c0:	b083      	sub	sp, #12
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	22ca      	movs	r2, #202	; 0xca
 80013ca:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2253      	movs	r2, #83	; 0x53
 80013d0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
 80013e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	f023 0207 	bic.w	r2, r3, #7
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	431a      	orrs	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	609a      	str	r2, [r3, #8]
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001408:	4b04      	ldr	r3, [pc, #16]	; (800141c <MX_APPE_Config+0x18>)
 800140a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800140e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8001410:	f000 f829 	bl	8001466 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001414:	f000 f868 	bl	80014e8 <Config_HSE>

  return;
 8001418:	bf00      	nop
}
 800141a:	bd80      	pop	{r7, pc}
 800141c:	58004000 	.word	0x58004000

08001420 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001424:	f000 f874 	bl	8001510 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001428:	f000 f88c 	bl	8001544 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800142c:	4903      	ldr	r1, [pc, #12]	; (800143c <MX_APPE_Init+0x1c>)
 800142e:	2000      	movs	r0, #0
 8001430:	f000 f9be 	bl	80017b0 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001434:	f000 f896 	bl	8001564 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8001438:	bf00      	nop
}
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000394 	.word	0x20000394

08001440 <Init_Smps>:

void Init_Smps(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
   *
   *  The SMPS configuration is not yet supported by CubeMx
   *  when SMPS output voltage is set to 1.4V, the RF output power is limited to 3.7dBm
   *  the SMPS output voltage shall be increased for higher RF output power
   */
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
 8001444:	2000      	movs	r0, #0
 8001446:	f7ff fe31 	bl	80010ac <LL_PWR_SMPS_SetStartupCurrent>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
 800144a:	2004      	movs	r0, #4
 800144c:	f7ff fe42 	bl	80010d4 <LL_PWR_SMPS_SetOutputVoltageLevel>
  LL_PWR_SMPS_Enable();
 8001450:	f7ff fe1c 	bl	800108c <LL_PWR_SMPS_Enable>
#endif /* CFG_USE_SMPS != 0 */

  return;
 8001454:	bf00      	nop
}
 8001456:	bd80      	pop	{r7, pc}

08001458 <Init_Exti>:

void Init_Exti(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800145c:	2050      	movs	r0, #80	; 0x50
 800145e:	f7ff fe89 	bl	8001174 <LL_EXTI_EnableIT_32_63>

  return;
 8001462:	bf00      	nop
}
 8001464:	bd80      	pop	{r7, pc}

08001466 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 800146a:	f000 f804 	bl	8001476 <Reset_BackupDomain>

  Reset_IPCC();
 800146e:	f000 f819 	bl	80014a4 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001472:	bf00      	nop
}
 8001474:	bd80      	pop	{r7, pc}

08001476 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 800147a:	f7ff fee3 	bl	8001244 <LL_RCC_IsActiveFlag_PINRST>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d00d      	beq.n	80014a0 <Reset_BackupDomain+0x2a>
 8001484:	f7ff fef1 	bl	800126a <LL_RCC_IsActiveFlag_SFTRST>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d108      	bne.n	80014a0 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 800148e:	f002 fd0f 	bl	8003eb0 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8001492:	f002 fd0d 	bl	8003eb0 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8001496:	f7ff feb3 	bl	8001200 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 800149a:	f7ff fec2 	bl	8001222 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 800149e:	bf00      	nop
 80014a0:	bf00      	nop
}
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80014a8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80014ac:	f7ff fef0 	bl	8001290 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 80014b0:	213f      	movs	r1, #63	; 0x3f
 80014b2:	480c      	ldr	r0, [pc, #48]	; (80014e4 <Reset_IPCC+0x40>)
 80014b4:	f7ff ff5a 	bl	800136c <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80014b8:	213f      	movs	r1, #63	; 0x3f
 80014ba:	480a      	ldr	r0, [pc, #40]	; (80014e4 <Reset_IPCC+0x40>)
 80014bc:	f7ff ff64 	bl	8001388 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 80014c0:	213f      	movs	r1, #63	; 0x3f
 80014c2:	4808      	ldr	r0, [pc, #32]	; (80014e4 <Reset_IPCC+0x40>)
 80014c4:	f7ff ff0c 	bl	80012e0 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 80014c8:	213f      	movs	r1, #63	; 0x3f
 80014ca:	4806      	ldr	r0, [pc, #24]	; (80014e4 <Reset_IPCC+0x40>)
 80014cc:	f7ff ff2b 	bl	8001326 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 80014d0:	213f      	movs	r1, #63	; 0x3f
 80014d2:	4804      	ldr	r0, [pc, #16]	; (80014e4 <Reset_IPCC+0x40>)
 80014d4:	f7ff ff16 	bl	8001304 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 80014d8:	213f      	movs	r1, #63	; 0x3f
 80014da:	4802      	ldr	r0, [pc, #8]	; (80014e4 <Reset_IPCC+0x40>)
 80014dc:	f7ff ff35 	bl	800134a <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 80014e0:	bf00      	nop
}
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	58000c00 	.word	0x58000c00

080014e8 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80014ee:	2000      	movs	r0, #0
 80014f0:	f005 fe6e 	bl	80071d0 <OTP_Read>
 80014f4:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d005      	beq.n	8001508 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	799b      	ldrb	r3, [r3, #6]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff fe4b 	bl	800119c <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001506:	bf00      	nop
 8001508:	bf00      	nop
}
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <System_Init>:

static void System_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  Init_Smps();
 8001514:	f7ff ff94 	bl	8001440 <Init_Smps>

  Init_Exti();
 8001518:	f7ff ff9e 	bl	8001458 <Init_Exti>

  Init_Rtc();
 800151c:	f000 f802 	bl	8001524 <Init_Rtc>

  return;
 8001520:	bf00      	nop
}
 8001522:	bd80      	pop	{r7, pc}

08001524 <Init_Rtc>:

static void Init_Rtc(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001528:	4805      	ldr	r0, [pc, #20]	; (8001540 <Init_Rtc+0x1c>)
 800152a:	f7ff ff48 	bl	80013be <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800152e:	2100      	movs	r1, #0
 8001530:	4803      	ldr	r0, [pc, #12]	; (8001540 <Init_Rtc+0x1c>)
 8001532:	f7ff ff54 	bl	80013de <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001536:	4802      	ldr	r0, [pc, #8]	; (8001540 <Init_Rtc+0x1c>)
 8001538:	f7ff ff34 	bl	80013a4 <LL_RTC_EnableWriteProtection>

  return;
 800153c:	bf00      	nop
}
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40002800 	.word	0x40002800

08001544 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001548:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800154c:	f7ff fe44 	bl	80011d8 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001550:	f006 fcd6 	bl	8007f00 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001554:	2004      	movs	r0, #4
 8001556:	f7ff fdf7 	bl	8001148 <LL_C2_PWR_SetPowerMode>
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */
  /**
   * Active SRAM retention for standby support
   */
  HAL_PWREx_EnableSRAMRetention();
 800155a:	f002 fce1 	bl	8003f20 <HAL_PWREx_EnableSRAMRetention>

  return;
 800155e:	bf00      	nop
}
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b088      	sub	sp, #32
 8001568:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800156a:	f005 fbef 	bl	8006d4c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 800156e:	4a11      	ldr	r2, [pc, #68]	; (80015b4 <appe_Tl_Init+0x50>)
 8001570:	2100      	movs	r1, #0
 8001572:	2010      	movs	r0, #16
 8001574:	f006 fe38 	bl	80081e8 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001578:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <appe_Tl_Init+0x54>)
 800157a:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 800157c:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <appe_Tl_Init+0x58>)
 800157e:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001580:	463b      	mov	r3, r7
 8001582:	4619      	mov	r1, r3
 8001584:	480e      	ldr	r0, [pc, #56]	; (80015c0 <appe_Tl_Init+0x5c>)
 8001586:	f005 faa7 	bl	8006ad8 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <appe_Tl_Init+0x60>)
 800158c:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <appe_Tl_Init+0x64>)
 8001590:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001592:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <appe_Tl_Init+0x68>)
 8001594:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001596:	f240 533c 	movw	r3, #1340	; 0x53c
 800159a:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 800159c:	f107 0308 	add.w	r3, r7, #8
 80015a0:	4618      	mov	r0, r3
 80015a2:	f005 fd15 	bl	8006fd0 <TL_MM_Init>

  TL_Enable();
 80015a6:	f005 fbcb 	bl	8006d40 <TL_Enable>

  return;
 80015aa:	bf00      	nop
}
 80015ac:	3720      	adds	r7, #32
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	08006b11 	.word	0x08006b11
 80015b8:	20030734 	.word	0x20030734
 80015bc:	080015d1 	.word	0x080015d1
 80015c0:	080015e9 	.word	0x080015e9
 80015c4:	2003094c 	.word	0x2003094c
 80015c8:	20030840 	.word	0x20030840
 80015cc:	200301f8 	.word	0x200301f8

080015d0 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80015da:	bf00      	nop
}
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
	...

080015e8 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	330b      	adds	r3, #11
 80015f6:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8001602:	2b07      	cmp	r3, #7
 8001604:	d81f      	bhi.n	8001646 <APPE_SysUserEvtRx+0x5e>
 8001606:	a201      	add	r2, pc, #4	; (adr r2, 800160c <APPE_SysUserEvtRx+0x24>)
 8001608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800160c:	0800162d 	.word	0x0800162d
 8001610:	0800163f 	.word	0x0800163f
 8001614:	08001647 	.word	0x08001647
 8001618:	08001647 	.word	0x08001647
 800161c:	08001647 	.word	0x08001647
 8001620:	08001647 	.word	0x08001647
 8001624:	08001647 	.word	0x08001647
 8001628:	08001647 	.word	0x08001647
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 800162c:	f107 030c 	add.w	r3, r7, #12
 8001630:	4618      	mov	r0, r3
 8001632:	f005 f80d 	bl	8006650 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 f81b 	bl	8001672 <APPE_SysEvtReadyProcessing>
    break;
 800163c:	e004      	b.n	8001648 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 f806 	bl	8001650 <APPE_SysEvtError>
    break;
 8001644:	e000      	b.n	8001648 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8001646:	bf00      	nop
  }

  return;
 8001648:	bf00      	nop
}
 800164a:	3720      	adds	r7, #32
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	330b      	adds	r3, #11
 800165e:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	3302      	adds	r3, #2
 8001664:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001666:	bf00      	nop
}
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b08a      	sub	sp, #40	; 0x28
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 800167a:	f107 030c 	add.w	r3, r7, #12
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]
 8001684:	609a      	str	r2, [r3, #8]
 8001686:	819a      	strh	r2, [r3, #12]
  uint32_t RevisionID=0;
 8001688:	2300      	movs	r3, #0
 800168a:	627b      	str	r3, [r7, #36]	; 0x24

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	330b      	adds	r3, #11
 8001692:	623b      	str	r3, [r7, #32]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8001694:	6a3b      	ldr	r3, [r7, #32]
 8001696:	3302      	adds	r3, #2
 8001698:	61fb      	str	r3, [r7, #28]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d117      	bne.n	80016d2 <APPE_SysEvtReadyProcessing+0x60>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80016a2:	f7ff fcb7 	bl	8001014 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80016a6:	230d      	movs	r3, #13
 80016a8:	733b      	strb	r3, [r7, #12]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80016aa:	237f      	movs	r3, #127	; 0x7f
 80016ac:	73bb      	strb	r3, [r7, #14]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80016ae:	f7ff fe09 	bl	80012c4 <LL_DBGMCU_GetRevisionID>
 80016b2:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = RevisionID;
 80016b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	833b      	strh	r3, [r7, #24]
    (void)SHCI_C2_Config(&config_param);
 80016ba:	f107 030c 	add.w	r3, r7, #12
 80016be:	4618      	mov	r0, r3
 80016c0:	f004 ffb0 	bl	8006624 <SHCI_C2_Config>

    APP_BLE_Init();
 80016c4:	f005 fea4 	bl	8007410 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80016c8:	2100      	movs	r1, #0
 80016ca:	2001      	movs	r0, #1
 80016cc:	f006 fc2a 	bl	8007f24 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80016d0:	e007      	b.n	80016e2 <APPE_SysEvtReadyProcessing+0x70>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d103      	bne.n	80016e2 <APPE_SysEvtReadyProcessing+0x70>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	701a      	strb	r2, [r3, #0]
  return;
 80016e0:	bf00      	nop
 80016e2:	bf00      	nop
}
 80016e4:	3728      	adds	r7, #40	; 0x28
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80016ee:	f04f 30ff 	mov.w	r0, #4294967295
 80016f2:	f006 fc7d 	bl	8007ff0 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}

080016fa <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
 80016fe:	f006 fc41 	bl	8007f84 <UTIL_LPM_EnterLowPower>
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001702:	bf00      	nop
}
 8001704:	bd80      	pop	{r7, pc}

08001706 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001710:	f04f 30ff 	mov.w	r0, #4294967295
 8001714:	f006 fc6c 	bl	8007ff0 <UTIL_SEQ_Run>

  return;
 8001718:	bf00      	nop
}
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001728:	2100      	movs	r1, #0
 800172a:	2010      	movs	r0, #16
 800172c:	f006 fd7e 	bl	800822c <UTIL_SEQ_SetTask>
  return;
 8001730:	bf00      	nop
}
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001740:	2002      	movs	r0, #2
 8001742:	f006 fddf 	bl	8008304 <UTIL_SEQ_SetEvt>
  return;
 8001746:	bf00      	nop
}
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001756:	2002      	movs	r0, #2
 8001758:	f006 fdf4 	bl	8008344 <UTIL_SEQ_WaitEvt>
  return;
 800175c:	bf00      	nop
}
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <LL_EXTI_EnableIT_0_31>:
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <LL_EXTI_EnableIT_0_31+0x24>)
 800176e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001772:	4905      	ldr	r1, [pc, #20]	; (8001788 <LL_EXTI_EnableIT_0_31+0x24>)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4313      	orrs	r3, r2
 8001778:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	58000800 	.word	0x58000800

0800178c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001794:	4b05      	ldr	r3, [pc, #20]	; (80017ac <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4904      	ldr	r1, [pc, #16]	; (80017ac <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4313      	orrs	r3, r2
 800179e:	600b      	str	r3, [r1, #0]

}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	58000800 	.word	0x58000800

080017b0 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b088      	sub	sp, #32
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	6039      	str	r1, [r7, #0]
 80017ba:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 80017bc:	4a64      	ldr	r2, [pc, #400]	; (8001950 <HW_TS_Init+0x1a0>)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80017c2:	4b63      	ldr	r3, [pc, #396]	; (8001950 <HW_TS_Init+0x1a0>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	22ca      	movs	r2, #202	; 0xca
 80017ca:	625a      	str	r2, [r3, #36]	; 0x24
 80017cc:	4b60      	ldr	r3, [pc, #384]	; (8001950 <HW_TS_Init+0x1a0>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2253      	movs	r2, #83	; 0x53
 80017d4:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80017d6:	4b5f      	ldr	r3, [pc, #380]	; (8001954 <HW_TS_Init+0x1a4>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	4a5e      	ldr	r2, [pc, #376]	; (8001954 <HW_TS_Init+0x1a4>)
 80017dc:	f043 0320 	orr.w	r3, r3, #32
 80017e0:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80017e2:	4b5c      	ldr	r3, [pc, #368]	; (8001954 <HW_TS_Init+0x1a4>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	f003 0307 	and.w	r3, r3, #7
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	f1c3 0304 	rsb	r3, r3, #4
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	4b58      	ldr	r3, [pc, #352]	; (8001958 <HW_TS_Init+0x1a8>)
 80017f6:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80017f8:	4b56      	ldr	r3, [pc, #344]	; (8001954 <HW_TS_Init+0x1a4>)
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001800:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001804:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	fa92 f2a2 	rbit	r2, r2
 800180c:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	2a00      	cmp	r2, #0
 8001816:	d101      	bne.n	800181c <HW_TS_Init+0x6c>
  {
    return 32U;
 8001818:	2220      	movs	r2, #32
 800181a:	e003      	b.n	8001824 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 800181c:	697a      	ldr	r2, [r7, #20]
 800181e:	fab2 f282 	clz	r2, r2
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	40d3      	lsrs	r3, r2
 8001826:	b2db      	uxtb	r3, r3
 8001828:	3301      	adds	r3, #1
 800182a:	b2da      	uxtb	r2, r3
 800182c:	4b4b      	ldr	r3, [pc, #300]	; (800195c <HW_TS_Init+0x1ac>)
 800182e:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001830:	4b48      	ldr	r3, [pc, #288]	; (8001954 <HW_TS_Init+0x1a4>)
 8001832:	691b      	ldr	r3, [r3, #16]
 8001834:	b29b      	uxth	r3, r3
 8001836:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800183a:	b29b      	uxth	r3, r3
 800183c:	3301      	adds	r3, #1
 800183e:	b29a      	uxth	r2, r3
 8001840:	4b47      	ldr	r3, [pc, #284]	; (8001960 <HW_TS_Init+0x1b0>)
 8001842:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001844:	4b46      	ldr	r3, [pc, #280]	; (8001960 <HW_TS_Init+0x1b0>)
 8001846:	881b      	ldrh	r3, [r3, #0]
 8001848:	3b01      	subs	r3, #1
 800184a:	4a44      	ldr	r2, [pc, #272]	; (800195c <HW_TS_Init+0x1ac>)
 800184c:	7812      	ldrb	r2, [r2, #0]
 800184e:	fb02 f303 	mul.w	r3, r2, r3
 8001852:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001856:	4a40      	ldr	r2, [pc, #256]	; (8001958 <HW_TS_Init+0x1a8>)
 8001858:	7812      	ldrb	r2, [r2, #0]
 800185a:	40d3      	lsrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001864:	4293      	cmp	r3, r2
 8001866:	d904      	bls.n	8001872 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001868:	4b3e      	ldr	r3, [pc, #248]	; (8001964 <HW_TS_Init+0x1b4>)
 800186a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800186e:	801a      	strh	r2, [r3, #0]
 8001870:	e003      	b.n	800187a <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	b29a      	uxth	r2, r3
 8001876:	4b3b      	ldr	r3, [pc, #236]	; (8001964 <HW_TS_Init+0x1b4>)
 8001878:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800187a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800187e:	f7ff ff85 	bl	800178c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001882:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001886:	f7ff ff6d 	bl	8001764 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d143      	bne.n	8001918 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001890:	4b35      	ldr	r3, [pc, #212]	; (8001968 <HW_TS_Init+0x1b8>)
 8001892:	2201      	movs	r2, #1
 8001894:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001896:	4b35      	ldr	r3, [pc, #212]	; (800196c <HW_TS_Init+0x1bc>)
 8001898:	f04f 32ff 	mov.w	r2, #4294967295
 800189c:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800189e:	2300      	movs	r3, #0
 80018a0:	77fb      	strb	r3, [r7, #31]
 80018a2:	e00c      	b.n	80018be <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80018a4:	7ffa      	ldrb	r2, [r7, #31]
 80018a6:	4932      	ldr	r1, [pc, #200]	; (8001970 <HW_TS_Init+0x1c0>)
 80018a8:	4613      	mov	r3, r2
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	4413      	add	r3, r2
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	440b      	add	r3, r1
 80018b2:	330c      	adds	r3, #12
 80018b4:	2200      	movs	r2, #0
 80018b6:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80018b8:	7ffb      	ldrb	r3, [r7, #31]
 80018ba:	3301      	adds	r3, #1
 80018bc:	77fb      	strb	r3, [r7, #31]
 80018be:	7ffb      	ldrb	r3, [r7, #31]
 80018c0:	2b05      	cmp	r3, #5
 80018c2:	d9ef      	bls.n	80018a4 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80018c4:	4b2b      	ldr	r3, [pc, #172]	; (8001974 <HW_TS_Init+0x1c4>)
 80018c6:	2206      	movs	r2, #6
 80018c8:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 80018ca:	4b21      	ldr	r3, [pc, #132]	; (8001950 <HW_TS_Init+0x1a0>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	689a      	ldr	r2, [r3, #8]
 80018d2:	4b1f      	ldr	r3, [pc, #124]	; (8001950 <HW_TS_Init+0x1a0>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018dc:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80018de:	4b1c      	ldr	r3, [pc, #112]	; (8001950 <HW_TS_Init+0x1a0>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	4b19      	ldr	r3, [pc, #100]	; (8001950 <HW_TS_Init+0x1a0>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80018f2:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80018f4:	4b20      	ldr	r3, [pc, #128]	; (8001978 <HW_TS_Init+0x1c8>)
 80018f6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80018fa:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80018fc:	2003      	movs	r0, #3
 80018fe:	f001 f9bc 	bl	8002c7a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001902:	4b13      	ldr	r3, [pc, #76]	; (8001950 <HW_TS_Init+0x1a0>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	689a      	ldr	r2, [r3, #8]
 800190a:	4b11      	ldr	r3, [pc, #68]	; (8001950 <HW_TS_Init+0x1a0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	e00a      	b.n	800192e <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8001918:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <HW_TS_Init+0x1a0>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001924:	2b00      	cmp	r3, #0
 8001926:	d002      	beq.n	800192e <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001928:	2003      	movs	r0, #3
 800192a:	f001 f998 	bl	8002c5e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800192e:	4b08      	ldr	r3, [pc, #32]	; (8001950 <HW_TS_Init+0x1a0>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	22ff      	movs	r2, #255	; 0xff
 8001936:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001938:	2200      	movs	r2, #0
 800193a:	2103      	movs	r1, #3
 800193c:	2003      	movs	r0, #3
 800193e:	f001 f95a 	bl	8002bf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001942:	2003      	movs	r0, #3
 8001944:	f001 f971 	bl	8002c2a <HAL_NVIC_EnableIRQ>

  return;
 8001948:	bf00      	nop
}
 800194a:	3720      	adds	r7, #32
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	200002f8 	.word	0x200002f8
 8001954:	40002800 	.word	0x40002800
 8001958:	200002fc 	.word	0x200002fc
 800195c:	200002fd 	.word	0x200002fd
 8001960:	200002fe 	.word	0x200002fe
 8001964:	20000300 	.word	0x20000300
 8001968:	2000028c 	.word	0x2000028c
 800196c:	20000288 	.word	0x20000288
 8001970:	200001f4 	.word	0x200001f4
 8001974:	20000284 	.word	0x20000284
 8001978:	58000800 	.word	0x58000800

0800197c <LL_RCC_LSE_SetDriveCapability>:
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800198c:	f023 0218 	bic.w	r2, r3, #24
 8001990:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4313      	orrs	r3, r2
 8001998:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <LL_AHB2_GRP1_EnableClock>:
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80019b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4313      	orrs	r3, r2
 80019be:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80019c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4013      	ands	r3, r2
 80019ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019cc:	68fb      	ldr	r3, [r7, #12]
}
 80019ce:	bf00      	nop
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
	...

080019dc <runAlgo>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t pos = Tops;
uint8_t runAlgo() {
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0

	if((data[0] <= -10) || (data [0] >= 10) || (data[1] <= -10) || (data[1] >= 10) || (data[2] <= -10) || (data[2] >= 10)){ 		// Is rotation happening
 80019e0:	4bb4      	ldr	r3, [pc, #720]	; (8001cb4 <runAlgo+0x2d8>)
 80019e2:	edd3 7a00 	vldr	s15, [r3]
 80019e6:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80019ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f2:	d932      	bls.n	8001a5a <runAlgo+0x7e>
 80019f4:	4baf      	ldr	r3, [pc, #700]	; (8001cb4 <runAlgo+0x2d8>)
 80019f6:	edd3 7a00 	vldr	s15, [r3]
 80019fa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80019fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a06:	da28      	bge.n	8001a5a <runAlgo+0x7e>
 8001a08:	4baa      	ldr	r3, [pc, #680]	; (8001cb4 <runAlgo+0x2d8>)
 8001a0a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a0e:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8001a12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a1a:	d91e      	bls.n	8001a5a <runAlgo+0x7e>
 8001a1c:	4ba5      	ldr	r3, [pc, #660]	; (8001cb4 <runAlgo+0x2d8>)
 8001a1e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a22:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001a26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a2e:	da14      	bge.n	8001a5a <runAlgo+0x7e>
 8001a30:	4ba0      	ldr	r3, [pc, #640]	; (8001cb4 <runAlgo+0x2d8>)
 8001a32:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a36:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8001a3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a42:	d90a      	bls.n	8001a5a <runAlgo+0x7e>
 8001a44:	4b9b      	ldr	r3, [pc, #620]	; (8001cb4 <runAlgo+0x2d8>)
 8001a46:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a4a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001a4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a56:	f2c0 8115 	blt.w	8001c84 <runAlgo+0x2a8>
		switch(position) {
 8001a5a:	4b97      	ldr	r3, [pc, #604]	; (8001cb8 <runAlgo+0x2dc>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2b03      	cmp	r3, #3
 8001a60:	f200 8110 	bhi.w	8001c84 <runAlgo+0x2a8>
 8001a64:	a201      	add	r2, pc, #4	; (adr r2, 8001a6c <runAlgo+0x90>)
 8001a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a6a:	bf00      	nop
 8001a6c:	08001a7d 	.word	0x08001a7d
 8001a70:	08001aff 	.word	0x08001aff
 8001a74:	08001b81 	.word	0x08001b81
 8001a78:	08001c03 	.word	0x08001c03
			case Tops:
				if(data[1] >= 135) {
 8001a7c:	4b8d      	ldr	r3, [pc, #564]	; (8001cb4 <runAlgo+0x2d8>)
 8001a7e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a82:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8001cbc <runAlgo+0x2e0>
 8001a86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a8e:	db03      	blt.n	8001a98 <runAlgo+0xbc>
					pos = Drops;
 8001a90:	4b8b      	ldr	r3, [pc, #556]	; (8001cc0 <runAlgo+0x2e4>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	701a      	strb	r2, [r3, #0]
				}else if(data[2] <= -135) {
					pos = RoadSignal_tops;
				}else if((data[0] > 100) && (data[1] > 50) && (data[2] < -100)) {
					pos = RoadSignal_drops;
				}break;
 8001a96:	e0f5      	b.n	8001c84 <runAlgo+0x2a8>
				}else if(data[2] <= -135) {
 8001a98:	4b86      	ldr	r3, [pc, #536]	; (8001cb4 <runAlgo+0x2d8>)
 8001a9a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a9e:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8001cc4 <runAlgo+0x2e8>
 8001aa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aaa:	d803      	bhi.n	8001ab4 <runAlgo+0xd8>
					pos = RoadSignal_tops;
 8001aac:	4b84      	ldr	r3, [pc, #528]	; (8001cc0 <runAlgo+0x2e4>)
 8001aae:	2202      	movs	r2, #2
 8001ab0:	701a      	strb	r2, [r3, #0]
				}break;
 8001ab2:	e0e7      	b.n	8001c84 <runAlgo+0x2a8>
				}else if((data[0] > 100) && (data[1] > 50) && (data[2] < -100)) {
 8001ab4:	4b7f      	ldr	r3, [pc, #508]	; (8001cb4 <runAlgo+0x2d8>)
 8001ab6:	edd3 7a00 	vldr	s15, [r3]
 8001aba:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8001cc8 <runAlgo+0x2ec>
 8001abe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac6:	dc00      	bgt.n	8001aca <runAlgo+0xee>
				}break;
 8001ac8:	e0dc      	b.n	8001c84 <runAlgo+0x2a8>
				}else if((data[0] > 100) && (data[1] > 50) && (data[2] < -100)) {
 8001aca:	4b7a      	ldr	r3, [pc, #488]	; (8001cb4 <runAlgo+0x2d8>)
 8001acc:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ad0:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8001ccc <runAlgo+0x2f0>
 8001ad4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001adc:	dc00      	bgt.n	8001ae0 <runAlgo+0x104>
				}break;
 8001ade:	e0d1      	b.n	8001c84 <runAlgo+0x2a8>
				}else if((data[0] > 100) && (data[1] > 50) && (data[2] < -100)) {
 8001ae0:	4b74      	ldr	r3, [pc, #464]	; (8001cb4 <runAlgo+0x2d8>)
 8001ae2:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ae6:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8001cd0 <runAlgo+0x2f4>
 8001aea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af2:	d400      	bmi.n	8001af6 <runAlgo+0x11a>
				}break;
 8001af4:	e0c6      	b.n	8001c84 <runAlgo+0x2a8>
					pos = RoadSignal_drops;
 8001af6:	4b72      	ldr	r3, [pc, #456]	; (8001cc0 <runAlgo+0x2e4>)
 8001af8:	2203      	movs	r2, #3
 8001afa:	701a      	strb	r2, [r3, #0]
				}break;
 8001afc:	e0c2      	b.n	8001c84 <runAlgo+0x2a8>
			case Drops:
				if(data[1] <= -135) {
 8001afe:	4b6d      	ldr	r3, [pc, #436]	; (8001cb4 <runAlgo+0x2d8>)
 8001b00:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b04:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8001cc4 <runAlgo+0x2e8>
 8001b08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b10:	d803      	bhi.n	8001b1a <runAlgo+0x13e>
					pos = Tops;
 8001b12:	4b6b      	ldr	r3, [pc, #428]	; (8001cc0 <runAlgo+0x2e4>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
				}else if(data[0] >= 135) {
					pos = RoadSignal_drops;
				}else if((data[0] >= 100) && (data[1] <= -100) && (data[2] <= -50)) {
					pos = RoadSignal_tops;
				}break;
 8001b18:	e0b4      	b.n	8001c84 <runAlgo+0x2a8>
				}else if(data[0] >= 135) {
 8001b1a:	4b66      	ldr	r3, [pc, #408]	; (8001cb4 <runAlgo+0x2d8>)
 8001b1c:	edd3 7a00 	vldr	s15, [r3]
 8001b20:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001cbc <runAlgo+0x2e0>
 8001b24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b2c:	db03      	blt.n	8001b36 <runAlgo+0x15a>
					pos = RoadSignal_drops;
 8001b2e:	4b64      	ldr	r3, [pc, #400]	; (8001cc0 <runAlgo+0x2e4>)
 8001b30:	2203      	movs	r2, #3
 8001b32:	701a      	strb	r2, [r3, #0]
				}break;
 8001b34:	e0a6      	b.n	8001c84 <runAlgo+0x2a8>
				}else if((data[0] >= 100) && (data[1] <= -100) && (data[2] <= -50)) {
 8001b36:	4b5f      	ldr	r3, [pc, #380]	; (8001cb4 <runAlgo+0x2d8>)
 8001b38:	edd3 7a00 	vldr	s15, [r3]
 8001b3c:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8001cc8 <runAlgo+0x2ec>
 8001b40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b48:	da00      	bge.n	8001b4c <runAlgo+0x170>
				}break;
 8001b4a:	e09b      	b.n	8001c84 <runAlgo+0x2a8>
				}else if((data[0] >= 100) && (data[1] <= -100) && (data[2] <= -50)) {
 8001b4c:	4b59      	ldr	r3, [pc, #356]	; (8001cb4 <runAlgo+0x2d8>)
 8001b4e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b52:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001cd0 <runAlgo+0x2f4>
 8001b56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b5e:	d900      	bls.n	8001b62 <runAlgo+0x186>
				}break;
 8001b60:	e090      	b.n	8001c84 <runAlgo+0x2a8>
				}else if((data[0] >= 100) && (data[1] <= -100) && (data[2] <= -50)) {
 8001b62:	4b54      	ldr	r3, [pc, #336]	; (8001cb4 <runAlgo+0x2d8>)
 8001b64:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b68:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8001cd4 <runAlgo+0x2f8>
 8001b6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b74:	d900      	bls.n	8001b78 <runAlgo+0x19c>
				}break;
 8001b76:	e085      	b.n	8001c84 <runAlgo+0x2a8>
					pos = RoadSignal_tops;
 8001b78:	4b51      	ldr	r3, [pc, #324]	; (8001cc0 <runAlgo+0x2e4>)
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	701a      	strb	r2, [r3, #0]
				}break;
 8001b7e:	e081      	b.n	8001c84 <runAlgo+0x2a8>
			case RoadSignal_tops:
				if(data[1] >= 100) {
 8001b80:	4b4c      	ldr	r3, [pc, #304]	; (8001cb4 <runAlgo+0x2d8>)
 8001b82:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b86:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8001cc8 <runAlgo+0x2ec>
 8001b8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b92:	db03      	blt.n	8001b9c <runAlgo+0x1c0>
					pos = RoadSignal_drops;
 8001b94:	4b4a      	ldr	r3, [pc, #296]	; (8001cc0 <runAlgo+0x2e4>)
 8001b96:	2203      	movs	r2, #3
 8001b98:	701a      	strb	r2, [r3, #0]
				}else if(data[2] >= 135) {
					pos = Tops;
				}else if((data[0] <= -100) && (data[1] >= 100) && (data[2] >= 50)) {
					pos = Drops;
				}break;
 8001b9a:	e073      	b.n	8001c84 <runAlgo+0x2a8>
				}else if(data[2] >= 135) {
 8001b9c:	4b45      	ldr	r3, [pc, #276]	; (8001cb4 <runAlgo+0x2d8>)
 8001b9e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ba2:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8001cbc <runAlgo+0x2e0>
 8001ba6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bae:	db03      	blt.n	8001bb8 <runAlgo+0x1dc>
					pos = Tops;
 8001bb0:	4b43      	ldr	r3, [pc, #268]	; (8001cc0 <runAlgo+0x2e4>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	701a      	strb	r2, [r3, #0]
				}break;
 8001bb6:	e065      	b.n	8001c84 <runAlgo+0x2a8>
				}else if((data[0] <= -100) && (data[1] >= 100) && (data[2] >= 50)) {
 8001bb8:	4b3e      	ldr	r3, [pc, #248]	; (8001cb4 <runAlgo+0x2d8>)
 8001bba:	edd3 7a00 	vldr	s15, [r3]
 8001bbe:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8001cd0 <runAlgo+0x2f4>
 8001bc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bca:	d900      	bls.n	8001bce <runAlgo+0x1f2>
				}break;
 8001bcc:	e05a      	b.n	8001c84 <runAlgo+0x2a8>
				}else if((data[0] <= -100) && (data[1] >= 100) && (data[2] >= 50)) {
 8001bce:	4b39      	ldr	r3, [pc, #228]	; (8001cb4 <runAlgo+0x2d8>)
 8001bd0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bd4:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001cc8 <runAlgo+0x2ec>
 8001bd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be0:	da00      	bge.n	8001be4 <runAlgo+0x208>
				}break;
 8001be2:	e04f      	b.n	8001c84 <runAlgo+0x2a8>
				}else if((data[0] <= -100) && (data[1] >= 100) && (data[2] >= 50)) {
 8001be4:	4b33      	ldr	r3, [pc, #204]	; (8001cb4 <runAlgo+0x2d8>)
 8001be6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bea:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8001ccc <runAlgo+0x2f0>
 8001bee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf6:	da00      	bge.n	8001bfa <runAlgo+0x21e>
				}break;
 8001bf8:	e044      	b.n	8001c84 <runAlgo+0x2a8>
					pos = Drops;
 8001bfa:	4b31      	ldr	r3, [pc, #196]	; (8001cc0 <runAlgo+0x2e4>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	701a      	strb	r2, [r3, #0]
				}break;
 8001c00:	e040      	b.n	8001c84 <runAlgo+0x2a8>
			case RoadSignal_drops:
				if(data[1] <= -100) {
 8001c02:	4b2c      	ldr	r3, [pc, #176]	; (8001cb4 <runAlgo+0x2d8>)
 8001c04:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c08:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001cd0 <runAlgo+0x2f4>
 8001c0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c14:	d803      	bhi.n	8001c1e <runAlgo+0x242>
					pos = RoadSignal_tops;
 8001c16:	4b2a      	ldr	r3, [pc, #168]	; (8001cc0 <runAlgo+0x2e4>)
 8001c18:	2202      	movs	r2, #2
 8001c1a:	701a      	strb	r2, [r3, #0]
				}else if(data[0] <= -135) {
					pos = Drops;
				}else if((data[0] <= -100) && (data[1] <= -50) && (data[2] >= 100)) {
					pos = Tops;
				}break;
 8001c1c:	e031      	b.n	8001c82 <runAlgo+0x2a6>
				}else if(data[0] <= -135) {
 8001c1e:	4b25      	ldr	r3, [pc, #148]	; (8001cb4 <runAlgo+0x2d8>)
 8001c20:	edd3 7a00 	vldr	s15, [r3]
 8001c24:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001cc4 <runAlgo+0x2e8>
 8001c28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c30:	d803      	bhi.n	8001c3a <runAlgo+0x25e>
					pos = Drops;
 8001c32:	4b23      	ldr	r3, [pc, #140]	; (8001cc0 <runAlgo+0x2e4>)
 8001c34:	2201      	movs	r2, #1
 8001c36:	701a      	strb	r2, [r3, #0]
				}break;
 8001c38:	e023      	b.n	8001c82 <runAlgo+0x2a6>
				}else if((data[0] <= -100) && (data[1] <= -50) && (data[2] >= 100)) {
 8001c3a:	4b1e      	ldr	r3, [pc, #120]	; (8001cb4 <runAlgo+0x2d8>)
 8001c3c:	edd3 7a00 	vldr	s15, [r3]
 8001c40:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001cd0 <runAlgo+0x2f4>
 8001c44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4c:	d900      	bls.n	8001c50 <runAlgo+0x274>
				}break;
 8001c4e:	e018      	b.n	8001c82 <runAlgo+0x2a6>
				}else if((data[0] <= -100) && (data[1] <= -50) && (data[2] >= 100)) {
 8001c50:	4b18      	ldr	r3, [pc, #96]	; (8001cb4 <runAlgo+0x2d8>)
 8001c52:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c56:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001cd4 <runAlgo+0x2f8>
 8001c5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c62:	d900      	bls.n	8001c66 <runAlgo+0x28a>
				}break;
 8001c64:	e00d      	b.n	8001c82 <runAlgo+0x2a6>
				}else if((data[0] <= -100) && (data[1] <= -50) && (data[2] >= 100)) {
 8001c66:	4b13      	ldr	r3, [pc, #76]	; (8001cb4 <runAlgo+0x2d8>)
 8001c68:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c6c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001cc8 <runAlgo+0x2ec>
 8001c70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c78:	da00      	bge.n	8001c7c <runAlgo+0x2a0>
				}break;
 8001c7a:	e002      	b.n	8001c82 <runAlgo+0x2a6>
					pos = Tops;
 8001c7c:	4b10      	ldr	r3, [pc, #64]	; (8001cc0 <runAlgo+0x2e4>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	701a      	strb	r2, [r3, #0]
				}break;
 8001c82:	bf00      	nop
		}
	}
	//printf("$%f %f %f %d;", data[0], data[1], data[2], pos);
	if(position == pos) {
 8001c84:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <runAlgo+0x2dc>)
 8001c86:	781a      	ldrb	r2, [r3, #0]
 8001c88:	4b0d      	ldr	r3, [pc, #52]	; (8001cc0 <runAlgo+0x2e4>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d101      	bne.n	8001c94 <runAlgo+0x2b8>
		return 0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	e02c      	b.n	8001cee <runAlgo+0x312>
	}else {
		position = pos;
 8001c94:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <runAlgo+0x2e4>)
 8001c96:	781a      	ldrb	r2, [r3, #0]
 8001c98:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <runAlgo+0x2dc>)
 8001c9a:	701a      	strb	r2, [r3, #0]
		if(pos == Tops) 		{return 1;}
 8001c9c:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <runAlgo+0x2e4>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <runAlgo+0x2cc>
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e022      	b.n	8001cee <runAlgo+0x312>
		else if(pos == Drops) 	{return 2;}
 8001ca8:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <runAlgo+0x2e4>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d113      	bne.n	8001cd8 <runAlgo+0x2fc>
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	e01c      	b.n	8001cee <runAlgo+0x312>
 8001cb4:	200003b8 	.word	0x200003b8
 8001cb8:	200003c4 	.word	0x200003c4
 8001cbc:	43070000 	.word	0x43070000
 8001cc0:	200003c5 	.word	0x200003c5
 8001cc4:	c3070000 	.word	0xc3070000
 8001cc8:	42c80000 	.word	0x42c80000
 8001ccc:	42480000 	.word	0x42480000
 8001cd0:	c2c80000 	.word	0xc2c80000
 8001cd4:	c2480000 	.word	0xc2480000
		else if((pos == RoadSignal_tops) || (pos == RoadSignal_drops)) {return 3;}
 8001cd8:	4b07      	ldr	r3, [pc, #28]	; (8001cf8 <runAlgo+0x31c>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d003      	beq.n	8001ce8 <runAlgo+0x30c>
 8001ce0:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <runAlgo+0x31c>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b03      	cmp	r3, #3
 8001ce6:	d101      	bne.n	8001cec <runAlgo+0x310>
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e000      	b.n	8001cee <runAlgo+0x312>
		else {return 0;}
 8001cec:	2300      	movs	r3, #0
	}
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	200003c5 	.word	0x200003c5

08001cfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d00:	f000 fdbc 	bl	800287c <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001d04:	f7ff fb7e 	bl	8001404 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d08:	f000 f811 	bl	8001d2e <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001d0c:	f000 f85b 	bl	8001dc6 <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 8001d10:	f000 f8ba 	bl	8001e88 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d14:	f000 f908 	bl	8001f28 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001d18:	f000 f876 	bl	8001e08 <MX_I2C1_Init>
  MX_RTC_Init();
 8001d1c:	f000 f8d0 	bl	8001ec0 <MX_RTC_Init>
  MX_RF_Init();
 8001d20:	f000 f8c6 	bl	8001eb0 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001d24:	f7ff fb7c 	bl	8001420 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001d28:	f7ff fcdf 	bl	80016ea <MX_APPE_Process>
 8001d2c:	e7fc      	b.n	8001d28 <main+0x2c>

08001d2e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b098      	sub	sp, #96	; 0x60
 8001d32:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d34:	f107 031c 	add.w	r3, r7, #28
 8001d38:	2244      	movs	r2, #68	; 0x44
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f006 fbcd 	bl	80084dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d42:	463b      	mov	r3, r7
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	605a      	str	r2, [r3, #4]
 8001d4a:	609a      	str	r2, [r3, #8]
 8001d4c:	60da      	str	r2, [r3, #12]
 8001d4e:	611a      	str	r2, [r3, #16]
 8001d50:	615a      	str	r2, [r3, #20]
 8001d52:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001d54:	f002 f8ac 	bl	8003eb0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001d58:	2000      	movs	r0, #0
 8001d5a:	f7ff fe0f 	bl	800197c <LL_RCC_LSE_SetDriveCapability>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001d5e:	2307      	movs	r3, #7
 8001d60:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d70:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d72:	2340      	movs	r3, #64	; 0x40
 8001d74:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d76:	2300      	movs	r3, #0
 8001d78:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d7a:	f107 031c 	add.w	r3, r7, #28
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f002 fc54 	bl	800462c <HAL_RCC_OscConfig>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <SystemClock_Config+0x60>
  {
    Error_Handler();
 8001d8a:	f000 f92f 	bl	8001fec <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001d8e:	236f      	movs	r3, #111	; 0x6f
 8001d90:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001d92:	2302      	movs	r3, #2
 8001d94:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001d96:	2380      	movs	r3, #128	; 0x80
 8001d98:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001da6:	2300      	movs	r3, #0
 8001da8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001daa:	463b      	mov	r3, r7
 8001dac:	2101      	movs	r1, #1
 8001dae:	4618      	mov	r0, r3
 8001db0:	f002 ff72 	bl	8004c98 <HAL_RCC_ClockConfig>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001dba:	f000 f917 	bl	8001fec <Error_Handler>
  }
}
 8001dbe:	bf00      	nop
 8001dc0:	3760      	adds	r7, #96	; 0x60
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b08c      	sub	sp, #48	; 0x30
 8001dca:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dcc:	463b      	mov	r3, r7
 8001dce:	2230      	movs	r2, #48	; 0x30
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f006 fb82 	bl	80084dc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001dd8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001ddc:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001dde:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001de4:	2300      	movs	r3, #0
 8001de6:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001de8:	2310      	movs	r3, #16
 8001dea:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dec:	463b      	mov	r3, r7
 8001dee:	4618      	mov	r0, r3
 8001df0:	f003 fae8 	bl	80053c4 <HAL_RCCEx_PeriphCLKConfig>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001dfa:	f000 f8f7 	bl	8001fec <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001dfe:	bf00      	nop
 8001e00:	3730      	adds	r7, #48	; 0x30
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
	...

08001e08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e0c:	4b1b      	ldr	r3, [pc, #108]	; (8001e7c <MX_I2C1_Init+0x74>)
 8001e0e:	4a1c      	ldr	r2, [pc, #112]	; (8001e80 <MX_I2C1_Init+0x78>)
 8001e10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8001e12:	4b1a      	ldr	r3, [pc, #104]	; (8001e7c <MX_I2C1_Init+0x74>)
 8001e14:	4a1b      	ldr	r2, [pc, #108]	; (8001e84 <MX_I2C1_Init+0x7c>)
 8001e16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001e18:	4b18      	ldr	r3, [pc, #96]	; (8001e7c <MX_I2C1_Init+0x74>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e1e:	4b17      	ldr	r3, [pc, #92]	; (8001e7c <MX_I2C1_Init+0x74>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e24:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <MX_I2C1_Init+0x74>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001e2a:	4b14      	ldr	r3, [pc, #80]	; (8001e7c <MX_I2C1_Init+0x74>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e30:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <MX_I2C1_Init+0x74>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e36:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <MX_I2C1_Init+0x74>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e3c:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <MX_I2C1_Init+0x74>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e42:	480e      	ldr	r0, [pc, #56]	; (8001e7c <MX_I2C1_Init+0x74>)
 8001e44:	f001 fa24 	bl	8003290 <HAL_I2C_Init>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001e4e:	f000 f8cd 	bl	8001fec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e52:	2100      	movs	r1, #0
 8001e54:	4809      	ldr	r0, [pc, #36]	; (8001e7c <MX_I2C1_Init+0x74>)
 8001e56:	f001 ff0d 	bl	8003c74 <HAL_I2CEx_ConfigAnalogFilter>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001e60:	f000 f8c4 	bl	8001fec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001e64:	2100      	movs	r1, #0
 8001e66:	4805      	ldr	r0, [pc, #20]	; (8001e7c <MX_I2C1_Init+0x74>)
 8001e68:	f001 ff4f 	bl	8003d0a <HAL_I2CEx_ConfigDigitalFilter>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001e72:	f000 f8bb 	bl	8001fec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000304 	.word	0x20000304
 8001e80:	40005400 	.word	0x40005400
 8001e84:	00303d5b 	.word	0x00303d5b

08001e88 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <MX_IPCC_Init+0x20>)
 8001e8e:	4a07      	ldr	r2, [pc, #28]	; (8001eac <MX_IPCC_Init+0x24>)
 8001e90:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001e92:	4805      	ldr	r0, [pc, #20]	; (8001ea8 <MX_IPCC_Init+0x20>)
 8001e94:	f001 ff86 	bl	8003da4 <HAL_IPCC_Init>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001e9e:	f000 f8a5 	bl	8001fec <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20000358 	.word	0x20000358
 8001eac:	58000c00 	.word	0x58000c00

08001eb0 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001eb4:	bf00      	nop
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
	...

08001ec0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001ec4:	4b16      	ldr	r3, [pc, #88]	; (8001f20 <MX_RTC_Init+0x60>)
 8001ec6:	4a17      	ldr	r2, [pc, #92]	; (8001f24 <MX_RTC_Init+0x64>)
 8001ec8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001eca:	4b15      	ldr	r3, [pc, #84]	; (8001f20 <MX_RTC_Init+0x60>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001ed0:	4b13      	ldr	r3, [pc, #76]	; (8001f20 <MX_RTC_Init+0x60>)
 8001ed2:	220f      	movs	r2, #15
 8001ed4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001ed6:	4b12      	ldr	r3, [pc, #72]	; (8001f20 <MX_RTC_Init+0x60>)
 8001ed8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001edc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ede:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <MX_RTC_Init+0x60>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ee4:	4b0e      	ldr	r3, [pc, #56]	; (8001f20 <MX_RTC_Init+0x60>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001eea:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <MX_RTC_Init+0x60>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ef0:	480b      	ldr	r0, [pc, #44]	; (8001f20 <MX_RTC_Init+0x60>)
 8001ef2:	f003 fb5d 	bl	80055b0 <HAL_RTC_Init>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 8001efc:	f000 f876 	bl	8001fec <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0xFFFF, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001f00:	2200      	movs	r2, #0
 8001f02:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001f06:	4806      	ldr	r0, [pc, #24]	; (8001f20 <MX_RTC_Init+0x60>)
 8001f08:	f003 fc40 	bl	800578c <HAL_RTCEx_SetWakeUpTimer_IT>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001f12:	f000 f86b 	bl	8001fec <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8001f16:	4802      	ldr	r0, [pc, #8]	; (8001f20 <MX_RTC_Init+0x60>)
 8001f18:	f003 fcf4 	bl	8005904 <HAL_RTCEx_DeactivateWakeUpTimer>
  /* USER CODE END RTC_Init 2 */

}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20000394 	.word	0x20000394
 8001f24:	40002800 	.word	0x40002800

08001f28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2e:	1d3b      	adds	r3, r7, #4
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]
 8001f3a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f3c:	2004      	movs	r0, #4
 8001f3e:	f7ff fd33 	bl	80019a8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f42:	2080      	movs	r0, #128	; 0x80
 8001f44:	f7ff fd30 	bl	80019a8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f48:	2002      	movs	r0, #2
 8001f4a:	f7ff fd2d 	bl	80019a8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4e:	2001      	movs	r0, #1
 8001f50:	f7ff fd2a 	bl	80019a8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f54:	2010      	movs	r0, #16
 8001f56:	f7ff fd27 	bl	80019a8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f5a:	2308      	movs	r3, #8
 8001f5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f66:	1d3b      	adds	r3, r7, #4
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4815      	ldr	r0, [pc, #84]	; (8001fc0 <MX_GPIO_Init+0x98>)
 8001f6c:	f001 f804 	bl	8002f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA13 PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001f70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f74:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f76:	2303      	movs	r3, #3
 8001f78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f7e:	1d3b      	adds	r3, r7, #4
 8001f80:	4619      	mov	r1, r3
 8001f82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f86:	f000 fff7 	bl	8002f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB0 PB1 PB3
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3
 8001f8a:	23ff      	movs	r3, #255	; 0xff
 8001f8c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f96:	1d3b      	adds	r3, r7, #4
 8001f98:	4619      	mov	r1, r3
 8001f9a:	480a      	ldr	r0, [pc, #40]	; (8001fc4 <MX_GPIO_Init+0x9c>)
 8001f9c:	f000 ffec 	bl	8002f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001fa0:	2310      	movs	r3, #16
 8001fa2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fac:	1d3b      	adds	r3, r7, #4
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4805      	ldr	r0, [pc, #20]	; (8001fc8 <MX_GPIO_Init+0xa0>)
 8001fb2:	f000 ffe1 	bl	8002f78 <HAL_GPIO_Init>

}
 8001fb6:	bf00      	nop
 8001fb8:	3718      	adds	r7, #24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	48001c00 	.word	0x48001c00
 8001fc4:	48000400 	.word	0x48000400
 8001fc8:	48001000 	.word	0x48001000

08001fcc <HAL_RTCEx_WakeUpTimerEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc) {
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
	SystemClock_Config ();
 8001fd4:	f7ff feab 	bl	8001d2e <SystemClock_Config>
	HAL_ResumeTick();
 8001fd8:	f000 fce6 	bl	80029a8 <HAL_ResumeTick>
	UTIL_SEQ_SetTask(1<<CFG_TASK_GET_HAND_POS, CFG_SCH_PRIO_0);
 8001fdc:	2100      	movs	r1, #0
 8001fde:	2008      	movs	r0, #8
 8001fe0:	f006 f924 	bl	800822c <UTIL_SEQ_SetTask>
}
 8001fe4:	bf00      	nop
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001ff0:	b672      	cpsid	i
}
 8001ff2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ff4:	e7fe      	b.n	8001ff4 <Error_Handler+0x8>
	...

08001ff8 <LL_PWR_SetPowerMode>:
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 8002000:	4b06      	ldr	r3, [pc, #24]	; (800201c <LL_PWR_SetPowerMode+0x24>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f023 0207 	bic.w	r2, r3, #7
 8002008:	4904      	ldr	r1, [pc, #16]	; (800201c <LL_PWR_SetPowerMode+0x24>)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4313      	orrs	r3, r2
 800200e:	600b      	str	r3, [r1, #0]
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	58000400 	.word	0x58000400

08002020 <LL_PWR_ClearFlag_WU>:
  * @brief  Clear Wake-up Flags
  * @rmtoll SCR          CWUF          LL_PWR_ClearFlag_WU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF);
 8002024:	4b03      	ldr	r3, [pc, #12]	; (8002034 <LL_PWR_ClearFlag_WU+0x14>)
 8002026:	2209      	movs	r2, #9
 8002028:	619a      	str	r2, [r3, #24]
}
 800202a:	bf00      	nop
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	58000400 	.word	0x58000400

08002038 <LL_PWR_IsActiveFlag_C2SB>:
  * @brief  System standby flag for CPU2
  * @rmtoll EXTSCR       C2SBF         LL_PWR_IsActiveFlag_C2SB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2SB(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2SBF) == (PWR_EXTSCR_C2SBF)) ? 1UL : 0UL);
 800203c:	4b07      	ldr	r3, [pc, #28]	; (800205c <LL_PWR_IsActiveFlag_C2SB+0x24>)
 800203e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002046:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800204a:	d101      	bne.n	8002050 <LL_PWR_IsActiveFlag_C2SB+0x18>
 800204c:	2301      	movs	r3, #1
 800204e:	e000      	b.n	8002052 <LL_PWR_IsActiveFlag_C2SB+0x1a>
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	58000400 	.word	0x58000400

08002060 <LL_PWR_IsActiveFlag_C2DS>:
  * @brief  Get deepsleep mode for CPU2
  * @rmtoll EXTSCR       C2DS          LL_PWR_IsActiveFlag_C2DS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2DS(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2DS) == (PWR_EXTSCR_C2DS)) ? 1UL : 0UL);
 8002064:	4b07      	ldr	r3, [pc, #28]	; (8002084 <LL_PWR_IsActiveFlag_C2DS+0x24>)
 8002066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800206e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002072:	d101      	bne.n	8002078 <LL_PWR_IsActiveFlag_C2DS+0x18>
 8002074:	2301      	movs	r3, #1
 8002076:	e000      	b.n	800207a <LL_PWR_IsActiveFlag_C2DS+0x1a>
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	58000400 	.word	0x58000400

08002088 <LL_RCC_HSI_Enable>:
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800208c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800209a:	6013      	str	r3, [r2, #0]
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <LL_RCC_HSI_IsReady>:
{
 80020a6:	b480      	push	{r7}
 80020a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80020aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020b8:	d101      	bne.n	80020be <LL_RCC_HSI_IsReady+0x18>
 80020ba:	2301      	movs	r3, #1
 80020bc:	e000      	b.n	80020c0 <LL_RCC_HSI_IsReady+0x1a>
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <LL_RCC_SetSysClkSource>:
{
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80020d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f023 0203 	bic.w	r2, r3, #3
 80020dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	608b      	str	r3, [r1, #8]
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <LL_RCC_GetSysClkSource>:
{
 80020f2:	b480      	push	{r7}
 80020f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80020f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f003 030c 	and.w	r3, r3, #12
}
 8002100:	4618      	mov	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <LL_RCC_SetSMPSClockSource>:
{
 800210a:	b480      	push	{r7}
 800210c:	b083      	sub	sp, #12
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002118:	f023 0203 	bic.w	r2, r3, #3
 800211c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4313      	orrs	r3, r2
 8002124:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <LL_RCC_ClearResetFlags>:
  * @brief  Set RMVF bit to clear the reset flags.
  * @rmtoll CSR          RMVF          LL_RCC_ClearResetFlags
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ClearResetFlags(void)
{
 8002132:	b480      	push	{r7}
 8002134:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8002136:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800213a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800213e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002142:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002146:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800214a:	bf00      	nop
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002158:	4b05      	ldr	r3, [pc, #20]	; (8002170 <LL_LPM_EnableSleep+0x1c>)
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	4a04      	ldr	r2, [pc, #16]	; (8002170 <LL_LPM_EnableSleep+0x1c>)
 800215e:	f023 0304 	bic.w	r3, r3, #4
 8002162:	6113      	str	r3, [r2, #16]
}
 8002164:	bf00      	nop
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002178:	4b05      	ldr	r3, [pc, #20]	; (8002190 <LL_LPM_EnableDeepSleep+0x1c>)
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	4a04      	ldr	r2, [pc, #16]	; (8002190 <LL_LPM_EnableDeepSleep+0x1c>)
 800217e:	f043 0304 	orr.w	r3, r3, #4
 8002182:	6113      	str	r3, [r2, #16]
}
 8002184:	bf00      	nop
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	3220      	adds	r2, #32
 80021a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021a8:	4a05      	ldr	r2, [pc, #20]	; (80021c0 <LL_HSEM_1StepLock+0x2c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d001      	beq.n	80021b2 <LL_HSEM_1StepLock+0x1e>
 80021ae:	2301      	movs	r3, #1
 80021b0:	e000      	b.n	80021b4 <LL_HSEM_1StepLock+0x20>
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	80000400 	.word	0x80000400

080021c4 <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	68ba      	ldr	r2, [r7, #8]
 80021da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80021de:	bf00      	nop
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode(void)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	af00      	add	r7, sp, #0
/* USER CODE END PWR_EnterOffMode_1 */
  /**
   * The systick should be disabled for the same reason than when the device enters stop mode because
   * at this time, the device may enter either OffMode or StopMode.
   */
  HAL_SuspendTick();
 80021ee:	f000 fbcb 	bl	8002988 <HAL_SuspendTick>
  __HAL_RCC_CLEAR_RESET_FLAGS();
 80021f2:	f7ff ff9e 	bl	8002132 <LL_RCC_ClearResetFlags>

  EnterLowPower();
 80021f6:	f000 f835 	bl	8002264 <EnterLowPower>
   * in critical section. If an interrupt occurs while in that critical section before that point,
   * the flag is set and will be cleared here but the system will not enter Off Mode
   * because an interrupt is pending in the NVIC. The ISR will be executed when moving out
   * of this critical section
   */
  LL_PWR_ClearFlag_WU();
 80021fa:	f7ff ff11 	bl	8002020 <LL_PWR_ClearFlag_WU>

  LL_PWR_SetPowerMode(LL_PWR_MODE_STANDBY);
 80021fe:	2003      	movs	r0, #3
 8002200:	f7ff fefa 	bl	8001ff8 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8002204:	f7ff ffb6 	bl	8002174 <LL_LPM_EnableDeepSleep>
#endif

/* USER CODE BEGIN PWR_EnterOffMode_2 */

/* USER CODE END PWR_EnterOffMode_2 */
  return;
 8002208:	bf00      	nop
}
 800220a:	bd80      	pop	{r7, pc}

0800220c <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  }
#endif
/* USER CODE BEGIN PWR_ExitOffMode_2 */

/* USER CODE END PWR_ExitOffMode_2 */
  return;
 8002210:	bf00      	nop
}
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode(void)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	af00      	add	r7, sp, #0
   *
   * When in production, the HAL_DBGMCU_EnableDBGStopMode() is not called so that the device can reach best power consumption
   * However, the systick should be disabled anyway to avoid the case when it is about to expire at the same time the device enters
   * stop mode (this will abort the Stop Mode entry).
   */
  HAL_SuspendTick();
 800221e:	f000 fbb3 	bl	8002988 <HAL_SuspendTick>

  /**
   * This function is called from CRITICAL SECTION
   */
  EnterLowPower();
 8002222:	f000 f81f 	bl	8002264 <EnterLowPower>

  /************************************************************************************
   * ENTER STOP MODE
   ***********************************************************************************/
  LL_PWR_SetPowerMode(LL_PWR_MODE_STOP1);
 8002226:	2001      	movs	r0, #1
 8002228:	f7ff fee6 	bl	8001ff8 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 800222c:	f7ff ffa2 	bl	8002174 <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 8002230:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterStopMode_2 */

/* USER CODE END PWR_EnterStopMode_2 */
  return;
 8002232:	bf00      	nop
}
 8002234:	bd80      	pop	{r7, pc}

08002236 <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode(void)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	af00      	add	r7, sp, #0

/* USER CODE END PWR_ExitStopMode_1 */
  /**
   * This function is called from CRITICAL SECTION
   */
  ExitLowPower();
 800223a:	f000 f84f 	bl	80022dc <ExitLowPower>

  HAL_ResumeTick();
 800223e:	f000 fbb3 	bl	80029a8 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitStopMode_2 */

/* USER CODE END PWR_ExitStopMode_2 */
  return;
 8002242:	bf00      	nop
}
 8002244:	bd80      	pop	{r7, pc}

08002246 <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode(void)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode_1 */

/* USER CODE END PWR_EnterSleepMode_1 */

  HAL_SuspendTick();
 800224a:	f000 fb9d 	bl	8002988 <HAL_SuspendTick>

  /************************************************************************************
   * ENTER SLEEP MODE
   ***********************************************************************************/
  LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 800224e:	f7ff ff81 	bl	8002154 <LL_LPM_EnableSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 8002252:	bf30      	wfi
/* USER CODE BEGIN PWR_EnterSleepMode_2 */

/* USER CODE END PWR_EnterSleepMode_2 */
  return;
 8002254:	bf00      	nop
}
 8002256:	bd80      	pop	{r7, pc}

08002258 <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode_1 */

/* USER CODE END PWR_ExitSleepMode_1 */
  HAL_ResumeTick();
 800225c:	f000 fba4 	bl	80029a8 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitSleepMode_2 */

/* USER CODE END PWR_ExitSleepMode_2 */
  return;
 8002260:	bf00      	nop
}
 8002262:	bd80      	pop	{r7, pc}

08002264 <EnterLowPower>:
  * @brief Setup the system to enter either stop or off mode
  * @param none
  * @retval none
  */
static void EnterLowPower(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /**
   * This function is called from CRITICAL SECTION
   */

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8002268:	bf00      	nop
 800226a:	2103      	movs	r1, #3
 800226c:	4819      	ldr	r0, [pc, #100]	; (80022d4 <EnterLowPower+0x70>)
 800226e:	f7ff ff91 	bl	8002194 <LL_HSEM_1StepLock>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1f8      	bne.n	800226a <EnterLowPower+0x6>

  if (! LL_HSEM_1StepLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID))
 8002278:	2104      	movs	r1, #4
 800227a:	4816      	ldr	r0, [pc, #88]	; (80022d4 <EnterLowPower+0x70>)
 800227c:	f7ff ff8a 	bl	8002194 <LL_HSEM_1StepLock>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d117      	bne.n	80022b6 <EnterLowPower+0x52>
  {
    if(LL_PWR_IsActiveFlag_C2DS() || LL_PWR_IsActiveFlag_C2SB())
 8002286:	f7ff feeb 	bl	8002060 <LL_PWR_IsActiveFlag_C2DS>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d104      	bne.n	800229a <EnterLowPower+0x36>
 8002290:	f7ff fed2 	bl	8002038 <LL_PWR_IsActiveFlag_C2SB>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d015      	beq.n	80022c6 <EnterLowPower+0x62>
    {
      /* Release ENTRY_STOP_MODE semaphore */
      LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 800229a:	2200      	movs	r2, #0
 800229c:	2104      	movs	r1, #4
 800229e:	480d      	ldr	r0, [pc, #52]	; (80022d4 <EnterLowPower+0x70>)
 80022a0:	f7ff ff90 	bl	80021c4 <LL_HSEM_ReleaseLock>

      Switch_On_HSI();
 80022a4:	f000 f834 	bl	8002310 <Switch_On_HSI>
      __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 80022a8:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <EnterLowPower+0x74>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a0a      	ldr	r2, [pc, #40]	; (80022d8 <EnterLowPower+0x74>)
 80022ae:	f023 0307 	bic.w	r3, r3, #7
 80022b2:	6013      	str	r3, [r2, #0]
 80022b4:	e007      	b.n	80022c6 <EnterLowPower+0x62>
    }
  }
  else
  {
    Switch_On_HSI();
 80022b6:	f000 f82b 	bl	8002310 <Switch_On_HSI>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 80022ba:	4b07      	ldr	r3, [pc, #28]	; (80022d8 <EnterLowPower+0x74>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a06      	ldr	r2, [pc, #24]	; (80022d8 <EnterLowPower+0x74>)
 80022c0:	f023 0307 	bic.w	r3, r3, #7
 80022c4:	6013      	str	r3, [r2, #0]
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 80022c6:	2200      	movs	r2, #0
 80022c8:	2103      	movs	r1, #3
 80022ca:	4802      	ldr	r0, [pc, #8]	; (80022d4 <EnterLowPower+0x70>)
 80022cc:	f7ff ff7a 	bl	80021c4 <LL_HSEM_ReleaseLock>

  return;
 80022d0:	bf00      	nop
}
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	58001400 	.word	0x58001400
 80022d8:	58004000 	.word	0x58004000

080022dc <ExitLowPower>:
  * @brief Restore the system to exit stop mode
  * @param none
  * @retval none
  */
static void ExitLowPower(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* Release ENTRY_STOP_MODE semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 80022e0:	2200      	movs	r2, #0
 80022e2:	2104      	movs	r1, #4
 80022e4:	4809      	ldr	r0, [pc, #36]	; (800230c <ExitLowPower+0x30>)
 80022e6:	f7ff ff6d 	bl	80021c4 <LL_HSEM_ReleaseLock>

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 80022ea:	bf00      	nop
 80022ec:	2103      	movs	r1, #3
 80022ee:	4807      	ldr	r0, [pc, #28]	; (800230c <ExitLowPower+0x30>)
 80022f0:	f7ff ff50 	bl	8002194 <LL_HSEM_1StepLock>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f8      	bne.n	80022ec <ExitLowPower+0x10>

  if(LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80022fa:	f7ff fefa 	bl	80020f2 <LL_RCC_GetSysClkSource>

  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
#endif

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 80022fe:	2200      	movs	r2, #0
 8002300:	2103      	movs	r1, #3
 8002302:	4802      	ldr	r0, [pc, #8]	; (800230c <ExitLowPower+0x30>)
 8002304:	f7ff ff5e 	bl	80021c4 <LL_HSEM_ReleaseLock>

  return;
 8002308:	bf00      	nop
}
 800230a:	bd80      	pop	{r7, pc}
 800230c:	58001400 	.word	0x58001400

08002310 <Switch_On_HSI>:
  * @brief Switch the system clock on HSI
  * @param none
  * @retval none
  */
static void Switch_On_HSI(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  LL_RCC_HSI_Enable();
 8002314:	f7ff feb8 	bl	8002088 <LL_RCC_HSI_Enable>
  while(!LL_RCC_HSI_IsReady());
 8002318:	bf00      	nop
 800231a:	f7ff fec4 	bl	80020a6 <LL_RCC_HSI_IsReady>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0fa      	beq.n	800231a <Switch_On_HSI+0xa>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8002324:	2001      	movs	r0, #1
 8002326:	f7ff fed0 	bl	80020ca <LL_RCC_SetSysClkSource>
  LL_RCC_SetSMPSClockSource(LL_RCC_SMPS_CLKSOURCE_HSI);
 800232a:	2000      	movs	r0, #0
 800232c:	f7ff feed 	bl	800210a <LL_RCC_SetSMPSClockSource>
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 8002330:	bf00      	nop
 8002332:	f7ff fede 	bl	80020f2 <LL_RCC_GetSysClkSource>
 8002336:	4603      	mov	r3, r0
 8002338:	2b04      	cmp	r3, #4
 800233a:	d1fa      	bne.n	8002332 <Switch_On_HSI+0x22>
  return;
 800233c:	bf00      	nop
}
 800233e:	bd80      	pop	{r7, pc}

08002340 <LL_RCC_EnableRTC>:
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002350:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002354:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <LL_AHB2_GRP1_EnableClock>:
{
 8002362:	b480      	push	{r7}
 8002364:	b085      	sub	sp, #20
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800236a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800236e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002370:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4313      	orrs	r3, r2
 8002378:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800237a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800237e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4013      	ands	r3, r2
 8002384:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002386:	68fb      	ldr	r3, [r7, #12]
}
 8002388:	bf00      	nop
 800238a:	3714      	adds	r7, #20
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <LL_AHB3_GRP1_EnableClock>:
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800239c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80023ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4013      	ands	r3, r2
 80023b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023b8:	68fb      	ldr	r3, [r7, #12]
}
 80023ba:	bf00      	nop
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b085      	sub	sp, #20
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80023ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80023d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4313      	orrs	r3, r2
 80023dc:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80023de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4013      	ands	r3, r2
 80023e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023ea:	68fb      	ldr	r3, [r7, #12]
}
 80023ec:	bf00      	nop
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80023fc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002400:	f7ff ffc8 	bl	8002394 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002404:	2200      	movs	r2, #0
 8002406:	2100      	movs	r1, #0
 8002408:	202e      	movs	r0, #46	; 0x2e
 800240a:	f000 fbf4 	bl	8002bf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800240e:	202e      	movs	r0, #46	; 0x2e
 8002410:	f000 fc0b 	bl	8002c2a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002414:	bf00      	nop
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b094      	sub	sp, #80	; 0x50
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002420:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	60da      	str	r2, [r3, #12]
 800242e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002430:	f107 030c 	add.w	r3, r7, #12
 8002434:	2230      	movs	r2, #48	; 0x30
 8002436:	2100      	movs	r1, #0
 8002438:	4618      	mov	r0, r3
 800243a:	f006 f84f 	bl	80084dc <memset>
  if(hi2c->Instance==I2C1)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a17      	ldr	r2, [pc, #92]	; (80024a0 <HAL_I2C_MspInit+0x88>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d126      	bne.n	8002496 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002448:	2304      	movs	r3, #4
 800244a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800244c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002450:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002452:	f107 030c 	add.w	r3, r7, #12
 8002456:	4618      	mov	r0, r3
 8002458:	f002 ffb4 	bl	80053c4 <HAL_RCCEx_PeriphCLKConfig>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002462:	f7ff fdc3 	bl	8001fec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002466:	2002      	movs	r0, #2
 8002468:	f7ff ff7b 	bl	8002362 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800246c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002470:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002472:	2312      	movs	r3, #18
 8002474:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002476:	2300      	movs	r3, #0
 8002478:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247a:	2300      	movs	r3, #0
 800247c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800247e:	2304      	movs	r3, #4
 8002480:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002482:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002486:	4619      	mov	r1, r3
 8002488:	4806      	ldr	r0, [pc, #24]	; (80024a4 <HAL_I2C_MspInit+0x8c>)
 800248a:	f000 fd75 	bl	8002f78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800248e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002492:	f7ff ff98 	bl	80023c6 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002496:	bf00      	nop
 8002498:	3750      	adds	r7, #80	; 0x50
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40005400 	.word	0x40005400
 80024a4:	48000400 	.word	0x48000400

080024a8 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a0d      	ldr	r2, [pc, #52]	; (80024ec <HAL_IPCC_MspInit+0x44>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d113      	bne.n	80024e2 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80024ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80024be:	f7ff ff69 	bl	8002394 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80024c2:	2200      	movs	r2, #0
 80024c4:	2100      	movs	r1, #0
 80024c6:	202c      	movs	r0, #44	; 0x2c
 80024c8:	f000 fb95 	bl	8002bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80024cc:	202c      	movs	r0, #44	; 0x2c
 80024ce:	f000 fbac 	bl	8002c2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80024d2:	2200      	movs	r2, #0
 80024d4:	2100      	movs	r1, #0
 80024d6:	202d      	movs	r0, #45	; 0x2d
 80024d8:	f000 fb8d 	bl	8002bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80024dc:	202d      	movs	r0, #45	; 0x2d
 80024de:	f000 fba4 	bl	8002c2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 80024e2:	bf00      	nop
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	58000c00 	.word	0x58000c00

080024f0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b08e      	sub	sp, #56	; 0x38
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024f8:	f107 0308 	add.w	r3, r7, #8
 80024fc:	2230      	movs	r2, #48	; 0x30
 80024fe:	2100      	movs	r1, #0
 8002500:	4618      	mov	r0, r3
 8002502:	f005 ffeb 	bl	80084dc <memset>
  if(hrtc->Instance==RTC)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a12      	ldr	r2, [pc, #72]	; (8002554 <HAL_RTC_MspInit+0x64>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d11d      	bne.n	800254c <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002510:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002514:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002516:	f44f 7380 	mov.w	r3, #256	; 0x100
 800251a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800251c:	f107 0308 	add.w	r3, r7, #8
 8002520:	4618      	mov	r0, r3
 8002522:	f002 ff4f 	bl	80053c4 <HAL_RCCEx_PeriphCLKConfig>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800252c:	f7ff fd5e 	bl	8001fec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002530:	f7ff ff06 	bl	8002340 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002534:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002538:	f7ff ff45 	bl	80023c6 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 15, 0);
 800253c:	2200      	movs	r2, #0
 800253e:	210f      	movs	r1, #15
 8002540:	2003      	movs	r0, #3
 8002542:	f000 fb58 	bl	8002bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002546:	2003      	movs	r0, #3
 8002548:	f000 fb6f 	bl	8002c2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800254c:	bf00      	nop
 800254e:	3738      	adds	r7, #56	; 0x38
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40002800 	.word	0x40002800

08002558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800255c:	e7fe      	b.n	800255c <NMI_Handler+0x4>

0800255e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800255e:	b480      	push	{r7}
 8002560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002562:	e7fe      	b.n	8002562 <HardFault_Handler+0x4>

08002564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002568:	e7fe      	b.n	8002568 <MemManage_Handler+0x4>

0800256a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800256a:	b480      	push	{r7}
 800256c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800256e:	e7fe      	b.n	800256e <BusFault_Handler+0x4>

08002570 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002574:	e7fe      	b.n	8002574 <UsageFault_Handler+0x4>

08002576 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002576:	b480      	push	{r7}
 8002578:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800257a:	bf00      	nop
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002592:	b480      	push	{r7}
 8002594:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025a4:	f000 f9c4 	bl	8002930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025a8:	bf00      	nop
 80025aa:	bd80      	pop	{r7, pc}

080025ac <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80025b0:	4802      	ldr	r0, [pc, #8]	; (80025bc <RTC_WKUP_IRQHandler+0x10>)
 80025b2:	f003 fa05 	bl	80059c0 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80025b6:	bf00      	nop
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	20000394 	.word	0x20000394

080025c0 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80025c4:	f005 fb58 	bl	8007c78 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80025c8:	bf00      	nop
 80025ca:	bd80      	pop	{r7, pc}

080025cc <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80025d0:	f005 fb8a 	bl	8007ce8 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80025d4:	bf00      	nop
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80025dc:	f000 fe34 	bl	8003248 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80025e0:	bf00      	nop
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
	return 1;
 80025e8:	2301      	movs	r3, #1
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <_kill>:

int _kill(int pid, int sig)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80025fe:	f005 ff35 	bl	800846c <__errno>
 8002602:	4603      	mov	r3, r0
 8002604:	2216      	movs	r2, #22
 8002606:	601a      	str	r2, [r3, #0]
	return -1;
 8002608:	f04f 33ff 	mov.w	r3, #4294967295
}
 800260c:	4618      	mov	r0, r3
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <_exit>:

void _exit (int status)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800261c:	f04f 31ff 	mov.w	r1, #4294967295
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7ff ffe7 	bl	80025f4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002626:	e7fe      	b.n	8002626 <_exit+0x12>

08002628 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]
 8002638:	e00a      	b.n	8002650 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800263a:	f3af 8000 	nop.w
 800263e:	4601      	mov	r1, r0
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	1c5a      	adds	r2, r3, #1
 8002644:	60ba      	str	r2, [r7, #8]
 8002646:	b2ca      	uxtb	r2, r1
 8002648:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	3301      	adds	r3, #1
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	429a      	cmp	r2, r3
 8002656:	dbf0      	blt.n	800263a <_read+0x12>
	}

return len;
 8002658:	687b      	ldr	r3, [r7, #4]
}
 800265a:	4618      	mov	r0, r3
 800265c:	3718      	adds	r7, #24
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b086      	sub	sp, #24
 8002666:	af00      	add	r7, sp, #0
 8002668:	60f8      	str	r0, [r7, #12]
 800266a:	60b9      	str	r1, [r7, #8]
 800266c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
 8002672:	e009      	b.n	8002688 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	1c5a      	adds	r2, r3, #1
 8002678:	60ba      	str	r2, [r7, #8]
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	3301      	adds	r3, #1
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	429a      	cmp	r2, r3
 800268e:	dbf1      	blt.n	8002674 <_write+0x12>
	}
	return len;
 8002690:	687b      	ldr	r3, [r7, #4]
}
 8002692:	4618      	mov	r0, r3
 8002694:	3718      	adds	r7, #24
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <_close>:

int _close(int file)
{
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
	return -1;
 80026a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b083      	sub	sp, #12
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
 80026ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026c2:	605a      	str	r2, [r3, #4]
	return 0;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr

080026d2 <_isatty>:

int _isatty(int file)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
	return 1;
 80026da:	2301      	movs	r3, #1
}
 80026dc:	4618      	mov	r0, r3
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
	return 0;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3714      	adds	r7, #20
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
	...

08002704 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800270c:	4a14      	ldr	r2, [pc, #80]	; (8002760 <_sbrk+0x5c>)
 800270e:	4b15      	ldr	r3, [pc, #84]	; (8002764 <_sbrk+0x60>)
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002718:	4b13      	ldr	r3, [pc, #76]	; (8002768 <_sbrk+0x64>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d102      	bne.n	8002726 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002720:	4b11      	ldr	r3, [pc, #68]	; (8002768 <_sbrk+0x64>)
 8002722:	4a12      	ldr	r2, [pc, #72]	; (800276c <_sbrk+0x68>)
 8002724:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002726:	4b10      	ldr	r3, [pc, #64]	; (8002768 <_sbrk+0x64>)
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4413      	add	r3, r2
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	429a      	cmp	r2, r3
 8002732:	d207      	bcs.n	8002744 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002734:	f005 fe9a 	bl	800846c <__errno>
 8002738:	4603      	mov	r3, r0
 800273a:	220c      	movs	r2, #12
 800273c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800273e:	f04f 33ff 	mov.w	r3, #4294967295
 8002742:	e009      	b.n	8002758 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002744:	4b08      	ldr	r3, [pc, #32]	; (8002768 <_sbrk+0x64>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800274a:	4b07      	ldr	r3, [pc, #28]	; (8002768 <_sbrk+0x64>)
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4413      	add	r3, r2
 8002752:	4a05      	ldr	r2, [pc, #20]	; (8002768 <_sbrk+0x64>)
 8002754:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002756:	68fb      	ldr	r3, [r7, #12]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	20003000 	.word	0x20003000
 8002764:	00000400 	.word	0x00000400
 8002768:	200003c8 	.word	0x200003c8
 800276c:	20000518 	.word	0x20000518

08002770 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002774:	4b22      	ldr	r3, [pc, #136]	; (8002800 <SystemInit+0x90>)
 8002776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277a:	4a21      	ldr	r2, [pc, #132]	; (8002800 <SystemInit+0x90>)
 800277c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002780:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002794:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002798:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800279c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800279e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027a8:	4b16      	ldr	r3, [pc, #88]	; (8002804 <SystemInit+0x94>)
 80027aa:	4013      	ands	r3, r2
 80027ac:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80027ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027ba:	f023 0305 	bic.w	r3, r3, #5
 80027be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80027c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027ce:	f023 0301 	bic.w	r3, r3, #1
 80027d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80027d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027da:	4a0b      	ldr	r2, [pc, #44]	; (8002808 <SystemInit+0x98>)
 80027dc:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80027de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80027ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027f2:	2200      	movs	r2, #0
 80027f4:	619a      	str	r2, [r3, #24]
}
 80027f6:	bf00      	nop
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	e000ed00 	.word	0xe000ed00
 8002804:	faf6fefb 	.word	0xfaf6fefb
 8002808:	22041000 	.word	0x22041000

0800280c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800280c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800280e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002810:	3304      	adds	r3, #4

08002812 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002812:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002814:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002816:	d3f9      	bcc.n	800280c <CopyDataInit>
  bx lr
 8002818:	4770      	bx	lr

0800281a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800281a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800281c:	3004      	adds	r0, #4

0800281e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800281e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002820:	d3fb      	bcc.n	800281a <FillZerobss>
  bx lr
 8002822:	4770      	bx	lr

08002824 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002824:	480c      	ldr	r0, [pc, #48]	; (8002858 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002826:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002828:	f7ff ffa2 	bl	8002770 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800282c:	480b      	ldr	r0, [pc, #44]	; (800285c <LoopForever+0x8>)
 800282e:	490c      	ldr	r1, [pc, #48]	; (8002860 <LoopForever+0xc>)
 8002830:	4a0c      	ldr	r2, [pc, #48]	; (8002864 <LoopForever+0x10>)
 8002832:	2300      	movs	r3, #0
 8002834:	f7ff ffed 	bl	8002812 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002838:	480b      	ldr	r0, [pc, #44]	; (8002868 <LoopForever+0x14>)
 800283a:	490c      	ldr	r1, [pc, #48]	; (800286c <LoopForever+0x18>)
 800283c:	2300      	movs	r3, #0
 800283e:	f7ff ffee 	bl	800281e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002842:	480b      	ldr	r0, [pc, #44]	; (8002870 <LoopForever+0x1c>)
 8002844:	490b      	ldr	r1, [pc, #44]	; (8002874 <LoopForever+0x20>)
 8002846:	2300      	movs	r3, #0
 8002848:	f7ff ffe9 	bl	800281e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800284c:	f005 fe14 	bl	8008478 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002850:	f7ff fa54 	bl	8001cfc <main>

08002854 <LoopForever>:

LoopForever:
  b LoopForever
 8002854:	e7fe      	b.n	8002854 <LoopForever>
 8002856:	0000      	.short	0x0000
  ldr   r0, =_estack
 8002858:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 800285c:	20000004 	.word	0x20000004
 8002860:	200001f4 	.word	0x200001f4
 8002864:	0800b7cc 	.word	0x0800b7cc
  INIT_BSS _sbss, _ebss
 8002868:	200002dc 	.word	0x200002dc
 800286c:	20000518 	.word	0x20000518
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002870:	200301e4 	.word	0x200301e4
 8002874:	20030a67 	.word	0x20030a67

08002878 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002878:	e7fe      	b.n	8002878 <ADC1_IRQHandler>
	...

0800287c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002882:	2300      	movs	r3, #0
 8002884:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002886:	4b0c      	ldr	r3, [pc, #48]	; (80028b8 <HAL_Init+0x3c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a0b      	ldr	r2, [pc, #44]	; (80028b8 <HAL_Init+0x3c>)
 800288c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002890:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002892:	2003      	movs	r0, #3
 8002894:	f000 f9a4 	bl	8002be0 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002898:	200f      	movs	r0, #15
 800289a:	f000 f80f 	bl	80028bc <HAL_InitTick>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d002      	beq.n	80028aa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	71fb      	strb	r3, [r7, #7]
 80028a8:	e001      	b.n	80028ae <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028aa:	f7ff fda5 	bl	80023f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028ae:	79fb      	ldrb	r3, [r7, #7]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	58004000 	.word	0x58004000

080028bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80028c4:	2300      	movs	r3, #0
 80028c6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80028c8:	4b17      	ldr	r3, [pc, #92]	; (8002928 <HAL_InitTick+0x6c>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d024      	beq.n	800291a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80028d0:	f002 fb8e 	bl	8004ff0 <HAL_RCC_GetHCLKFreq>
 80028d4:	4602      	mov	r2, r0
 80028d6:	4b14      	ldr	r3, [pc, #80]	; (8002928 <HAL_InitTick+0x6c>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	4619      	mov	r1, r3
 80028dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028e0:	fbb3 f3f1 	udiv	r3, r3, r1
 80028e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 f9ac 	bl	8002c46 <HAL_SYSTICK_Config>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10f      	bne.n	8002914 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b0f      	cmp	r3, #15
 80028f8:	d809      	bhi.n	800290e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028fa:	2200      	movs	r2, #0
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	f04f 30ff 	mov.w	r0, #4294967295
 8002902:	f000 f978 	bl	8002bf6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002906:	4a09      	ldr	r2, [pc, #36]	; (800292c <HAL_InitTick+0x70>)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	e007      	b.n	800291e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	73fb      	strb	r3, [r7, #15]
 8002912:	e004      	b.n	800291e <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	73fb      	strb	r3, [r7, #15]
 8002918:	e001      	b.n	800291e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800291e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	20000018 	.word	0x20000018
 800292c:	20000014 	.word	0x20000014

08002930 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002934:	4b06      	ldr	r3, [pc, #24]	; (8002950 <HAL_IncTick+0x20>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	461a      	mov	r2, r3
 800293a:	4b06      	ldr	r3, [pc, #24]	; (8002954 <HAL_IncTick+0x24>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4413      	add	r3, r2
 8002940:	4a04      	ldr	r2, [pc, #16]	; (8002954 <HAL_IncTick+0x24>)
 8002942:	6013      	str	r3, [r2, #0]
}
 8002944:	bf00      	nop
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	20000018 	.word	0x20000018
 8002954:	200003cc 	.word	0x200003cc

08002958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  return uwTick;
 800295c:	4b03      	ldr	r3, [pc, #12]	; (800296c <HAL_GetTick+0x14>)
 800295e:	681b      	ldr	r3, [r3, #0]
}
 8002960:	4618      	mov	r0, r3
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	200003cc 	.word	0x200003cc

08002970 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002974:	4b03      	ldr	r3, [pc, #12]	; (8002984 <HAL_GetTickPrio+0x14>)
 8002976:	681b      	ldr	r3, [r3, #0]
}
 8002978:	4618      	mov	r0, r3
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	20000014 	.word	0x20000014

08002988 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 800298c:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <HAL_SuspendTick+0x1c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a04      	ldr	r2, [pc, #16]	; (80029a4 <HAL_SuspendTick+0x1c>)
 8002992:	f023 0302 	bic.w	r3, r3, #2
 8002996:	6013      	str	r3, [r2, #0]
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	e000e010 	.word	0xe000e010

080029a8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 80029ac:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <HAL_ResumeTick+0x1c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a04      	ldr	r2, [pc, #16]	; (80029c4 <HAL_ResumeTick+0x1c>)
 80029b2:	f043 0302 	orr.w	r3, r3, #2
 80029b6:	6013      	str	r3, [r2, #0]
}
 80029b8:	bf00      	nop
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	e000e010 	.word	0xe000e010

080029c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029d8:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <__NVIC_SetPriorityGrouping+0x44>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029e4:	4013      	ands	r3, r2
 80029e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029fa:	4a04      	ldr	r2, [pc, #16]	; (8002a0c <__NVIC_SetPriorityGrouping+0x44>)
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	60d3      	str	r3, [r2, #12]
}
 8002a00:	bf00      	nop
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	e000ed00 	.word	0xe000ed00

08002a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a14:	4b04      	ldr	r3, [pc, #16]	; (8002a28 <__NVIC_GetPriorityGrouping+0x18>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	0a1b      	lsrs	r3, r3, #8
 8002a1a:	f003 0307 	and.w	r3, r3, #7
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	e000ed00 	.word	0xe000ed00

08002a2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	4603      	mov	r3, r0
 8002a34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	db0b      	blt.n	8002a56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a3e:	79fb      	ldrb	r3, [r7, #7]
 8002a40:	f003 021f 	and.w	r2, r3, #31
 8002a44:	4907      	ldr	r1, [pc, #28]	; (8002a64 <__NVIC_EnableIRQ+0x38>)
 8002a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4a:	095b      	lsrs	r3, r3, #5
 8002a4c:	2001      	movs	r0, #1
 8002a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	e000e100 	.word	0xe000e100

08002a68 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	db0c      	blt.n	8002a94 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a7a:	79fb      	ldrb	r3, [r7, #7]
 8002a7c:	f003 021f 	and.w	r2, r3, #31
 8002a80:	4907      	ldr	r1, [pc, #28]	; (8002aa0 <__NVIC_SetPendingIRQ+0x38>)
 8002a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a86:	095b      	lsrs	r3, r3, #5
 8002a88:	2001      	movs	r0, #1
 8002a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a8e:	3340      	adds	r3, #64	; 0x40
 8002a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	e000e100 	.word	0xe000e100

08002aa4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4603      	mov	r3, r0
 8002aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	db0c      	blt.n	8002ad0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ab6:	79fb      	ldrb	r3, [r7, #7]
 8002ab8:	f003 021f 	and.w	r2, r3, #31
 8002abc:	4907      	ldr	r1, [pc, #28]	; (8002adc <__NVIC_ClearPendingIRQ+0x38>)
 8002abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac2:	095b      	lsrs	r3, r3, #5
 8002ac4:	2001      	movs	r0, #1
 8002ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8002aca:	3360      	adds	r3, #96	; 0x60
 8002acc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	e000e100 	.word	0xe000e100

08002ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	6039      	str	r1, [r7, #0]
 8002aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	db0a      	blt.n	8002b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	490c      	ldr	r1, [pc, #48]	; (8002b2c <__NVIC_SetPriority+0x4c>)
 8002afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afe:	0112      	lsls	r2, r2, #4
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	440b      	add	r3, r1
 8002b04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b08:	e00a      	b.n	8002b20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	4908      	ldr	r1, [pc, #32]	; (8002b30 <__NVIC_SetPriority+0x50>)
 8002b10:	79fb      	ldrb	r3, [r7, #7]
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	3b04      	subs	r3, #4
 8002b18:	0112      	lsls	r2, r2, #4
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	761a      	strb	r2, [r3, #24]
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	e000e100 	.word	0xe000e100
 8002b30:	e000ed00 	.word	0xe000ed00

08002b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b089      	sub	sp, #36	; 0x24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	f1c3 0307 	rsb	r3, r3, #7
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	bf28      	it	cs
 8002b52:	2304      	movcs	r3, #4
 8002b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	3304      	adds	r3, #4
 8002b5a:	2b06      	cmp	r3, #6
 8002b5c:	d902      	bls.n	8002b64 <NVIC_EncodePriority+0x30>
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	3b03      	subs	r3, #3
 8002b62:	e000      	b.n	8002b66 <NVIC_EncodePriority+0x32>
 8002b64:	2300      	movs	r3, #0
 8002b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b68:	f04f 32ff 	mov.w	r2, #4294967295
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	43da      	mvns	r2, r3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	401a      	ands	r2, r3
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	fa01 f303 	lsl.w	r3, r1, r3
 8002b86:	43d9      	mvns	r1, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b8c:	4313      	orrs	r3, r2
         );
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3724      	adds	r7, #36	; 0x24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
	...

08002b9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bac:	d301      	bcc.n	8002bb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e00f      	b.n	8002bd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bb2:	4a0a      	ldr	r2, [pc, #40]	; (8002bdc <SysTick_Config+0x40>)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bba:	210f      	movs	r1, #15
 8002bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc0:	f7ff ff8e 	bl	8002ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bc4:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <SysTick_Config+0x40>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bca:	4b04      	ldr	r3, [pc, #16]	; (8002bdc <SysTick_Config+0x40>)
 8002bcc:	2207      	movs	r2, #7
 8002bce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	e000e010 	.word	0xe000e010

08002be0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f7ff feed 	bl	80029c8 <__NVIC_SetPriorityGrouping>
}
 8002bee:	bf00      	nop
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b086      	sub	sp, #24
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	60b9      	str	r1, [r7, #8]
 8002c00:	607a      	str	r2, [r7, #4]
 8002c02:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c04:	f7ff ff04 	bl	8002a10 <__NVIC_GetPriorityGrouping>
 8002c08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	68b9      	ldr	r1, [r7, #8]
 8002c0e:	6978      	ldr	r0, [r7, #20]
 8002c10:	f7ff ff90 	bl	8002b34 <NVIC_EncodePriority>
 8002c14:	4602      	mov	r2, r0
 8002c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c1a:	4611      	mov	r1, r2
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff ff5f 	bl	8002ae0 <__NVIC_SetPriority>
}
 8002c22:	bf00      	nop
 8002c24:	3718      	adds	r7, #24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b082      	sub	sp, #8
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	4603      	mov	r3, r0
 8002c32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff fef7 	bl	8002a2c <__NVIC_EnableIRQ>
}
 8002c3e:	bf00      	nop
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b082      	sub	sp, #8
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7ff ffa4 	bl	8002b9c <SysTick_Config>
 8002c54:	4603      	mov	r3, r0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b082      	sub	sp, #8
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	4603      	mov	r3, r0
 8002c66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff fefb 	bl	8002a68 <__NVIC_SetPendingIRQ>
}
 8002c72:	bf00      	nop
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b082      	sub	sp, #8
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	4603      	mov	r3, r0
 8002c82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff ff0b 	bl	8002aa4 <__NVIC_ClearPendingIRQ>
}
 8002c8e:	bf00      	nop
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
	...

08002c98 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002ca2:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <HAL_FLASH_Unlock+0x38>)
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	da0b      	bge.n	8002cc2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002caa:	4b09      	ldr	r3, [pc, #36]	; (8002cd0 <HAL_FLASH_Unlock+0x38>)
 8002cac:	4a09      	ldr	r2, [pc, #36]	; (8002cd4 <HAL_FLASH_Unlock+0x3c>)
 8002cae:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002cb0:	4b07      	ldr	r3, [pc, #28]	; (8002cd0 <HAL_FLASH_Unlock+0x38>)
 8002cb2:	4a09      	ldr	r2, [pc, #36]	; (8002cd8 <HAL_FLASH_Unlock+0x40>)
 8002cb4:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002cb6:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <HAL_FLASH_Unlock+0x38>)
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	da01      	bge.n	8002cc2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002cc2:	79fb      	ldrb	r3, [r7, #7]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	58004000 	.word	0x58004000
 8002cd4:	45670123 	.word	0x45670123
 8002cd8:	cdef89ab 	.word	0xcdef89ab

08002cdc <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002ce6:	4b09      	ldr	r3, [pc, #36]	; (8002d0c <HAL_FLASH_Lock+0x30>)
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	4a08      	ldr	r2, [pc, #32]	; (8002d0c <HAL_FLASH_Lock+0x30>)
 8002cec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cf0:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8002cf2:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <HAL_FLASH_Lock+0x30>)
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	db01      	blt.n	8002cfe <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8002cfe:	79fb      	ldrb	r3, [r7, #7]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	58004000 	.word	0x58004000

08002d10 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8002d18:	f7ff fe1e 	bl	8002958 <HAL_GetTick>
 8002d1c:	60b8      	str	r0, [r7, #8]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002d1e:	e009      	b.n	8002d34 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8002d20:	f7ff fe1a 	bl	8002958 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d801      	bhi.n	8002d34 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e054      	b.n	8002dde <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002d34:	4b2c      	ldr	r3, [pc, #176]	; (8002de8 <FLASH_WaitForLastOperation+0xd8>)
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d40:	d0ee      	beq.n	8002d20 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = FLASH->SR;
 8002d42:	4b29      	ldr	r3, [pc, #164]	; (8002de8 <FLASH_WaitForLastOperation+0xd8>)
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	60fb      	str	r3, [r7, #12]

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d002      	beq.n	8002d58 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002d52:	4b25      	ldr	r3, [pc, #148]	; (8002de8 <FLASH_WaitForLastOperation+0xd8>)
 8002d54:	2201      	movs	r2, #1
 8002d56:	611a      	str	r2, [r3, #16]

  /* Workaround for BZ 70309 :
     - OPTVERR is always set at power-up due to failure of engi bytes checking
     - FLASH_WaitForLastOperation() is called at the beginning of erase or program
       operations, so the bit will be clear when performing first operation */
  if ((error & FLASH_FLAG_OPTVERR) != 0U)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d007      	beq.n	8002d72 <FLASH_WaitForLastOperation+0x62>
  {
    /* Clear FLASH OPTVERR bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002d62:	4b21      	ldr	r3, [pc, #132]	; (8002de8 <FLASH_WaitForLastOperation+0xd8>)
 8002d64:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002d68:	611a      	str	r2, [r3, #16]

    /* Clear OPTVERR bit in "error" variable to not treat it as error */
    error &= ~FLASH_FLAG_OPTVERR;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002d70:	60fb      	str	r3, [r7, #12]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8002d78:	4013      	ands	r3, r2
 8002d7a:	60fb      	str	r3, [r7, #12]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d007      	beq.n	8002d96 <FLASH_WaitForLastOperation+0x86>
 8002d86:	4b18      	ldr	r3, [pc, #96]	; (8002de8 <FLASH_WaitForLastOperation+0xd8>)
 8002d88:	699a      	ldr	r2, [r3, #24]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8002d90:	4915      	ldr	r1, [pc, #84]	; (8002de8 <FLASH_WaitForLastOperation+0xd8>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	618b      	str	r3, [r1, #24]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d004      	beq.n	8002daa <FLASH_WaitForLastOperation+0x9a>
 8002da0:	4a11      	ldr	r2, [pc, #68]	; (8002de8 <FLASH_WaitForLastOperation+0xd8>)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002da8:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00e      	beq.n	8002dce <FLASH_WaitForLastOperation+0xbe>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8002db0:	4a0e      	ldr	r2, [pc, #56]	; (8002dec <FLASH_WaitForLastOperation+0xdc>)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e011      	b.n	8002dde <FLASH_WaitForLastOperation+0xce>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8002dba:	f7ff fdcd 	bl	8002958 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d801      	bhi.n	8002dce <FLASH_WaitForLastOperation+0xbe>
    {
      return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e007      	b.n	8002dde <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8002dce:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <FLASH_WaitForLastOperation+0xd8>)
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dd6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002dda:	d0ee      	beq.n	8002dba <FLASH_WaitForLastOperation+0xaa>
    }
  }

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	58004000 	.word	0x58004000
 8002dec:	200003d0 	.word	0x200003d0

08002df0 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002dfa:	4b24      	ldr	r3, [pc, #144]	; (8002e8c <HAL_FLASHEx_Erase+0x9c>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d101      	bne.n	8002e06 <HAL_FLASHEx_Erase+0x16>
 8002e02:	2302      	movs	r3, #2
 8002e04:	e03d      	b.n	8002e82 <HAL_FLASHEx_Erase+0x92>
 8002e06:	4b21      	ldr	r3, [pc, #132]	; (8002e8c <HAL_FLASHEx_Erase+0x9c>)
 8002e08:	2201      	movs	r2, #1
 8002e0a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002e0c:	4b1f      	ldr	r3, [pc, #124]	; (8002e8c <HAL_FLASHEx_Erase+0x9c>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002e12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e16:	f7ff ff7b 	bl	8002d10 <FLASH_WaitForLastOperation>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002e1e:	7bfb      	ldrb	r3, [r7, #15]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d12a      	bne.n	8002e7a <HAL_FLASHEx_Erase+0x8a>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d124      	bne.n	8002e76 <HAL_FLASHEx_Erase+0x86>
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8002e32:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	60bb      	str	r3, [r7, #8]
 8002e3a:	e012      	b.n	8002e62 <HAL_FLASHEx_Erase+0x72>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8002e3c:	68b8      	ldr	r0, [r7, #8]
 8002e3e:	f000 f827 	bl	8002e90 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002e42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e46:	f7ff ff63 	bl	8002d10 <FLASH_WaitForLastOperation>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <HAL_FLASHEx_Erase+0x6c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	601a      	str	r2, [r3, #0]
          break;
 8002e5a:	e00a      	b.n	8002e72 <HAL_FLASHEx_Erase+0x82>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	3301      	adds	r3, #1
 8002e60:	60bb      	str	r3, [r7, #8]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	68ba      	ldr	r2, [r7, #8]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d3e4      	bcc.n	8002e3c <HAL_FLASHEx_Erase+0x4c>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8002e72:	f000 f86f 	bl	8002f54 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002e76:	f000 f825 	bl	8002ec4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002e7a:	4b04      	ldr	r3, [pc, #16]	; (8002e8c <HAL_FLASHEx_Erase+0x9c>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	701a      	strb	r2, [r3, #0]

  return status;
 8002e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	200003d0 	.word	0x200003d0

08002e90 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8002e98:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <FLASH_PageErase+0x30>)
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	4a06      	ldr	r2, [pc, #24]	; (8002ec0 <FLASH_PageErase+0x30>)
 8002ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eac:	f043 0302 	orr.w	r3, r3, #2
 8002eb0:	6153      	str	r3, [r2, #20]
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	58004000 	.word	0x58004000

08002ec4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
static void FLASH_FlushCaches(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == FLASH_ACR_ICEN)
 8002ec8:	4b21      	ldr	r3, [pc, #132]	; (8002f50 <FLASH_FlushCaches+0x8c>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ed0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ed4:	d117      	bne.n	8002f06 <FLASH_FlushCaches+0x42>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002ed6:	4b1e      	ldr	r3, [pc, #120]	; (8002f50 <FLASH_FlushCaches+0x8c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a1d      	ldr	r2, [pc, #116]	; (8002f50 <FLASH_FlushCaches+0x8c>)
 8002edc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ee0:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002ee2:	4b1b      	ldr	r3, [pc, #108]	; (8002f50 <FLASH_FlushCaches+0x8c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a1a      	ldr	r2, [pc, #104]	; (8002f50 <FLASH_FlushCaches+0x8c>)
 8002ee8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	4b18      	ldr	r3, [pc, #96]	; (8002f50 <FLASH_FlushCaches+0x8c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a17      	ldr	r2, [pc, #92]	; (8002f50 <FLASH_FlushCaches+0x8c>)
 8002ef4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ef8:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002efa:	4b15      	ldr	r3, [pc, #84]	; (8002f50 <FLASH_FlushCaches+0x8c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a14      	ldr	r2, [pc, #80]	; (8002f50 <FLASH_FlushCaches+0x8c>)
 8002f00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f04:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == FLASH_ACR_DCEN)
 8002f06:	4b12      	ldr	r3, [pc, #72]	; (8002f50 <FLASH_FlushCaches+0x8c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f12:	d117      	bne.n	8002f44 <FLASH_FlushCaches+0x80>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002f14:	4b0e      	ldr	r3, [pc, #56]	; (8002f50 <FLASH_FlushCaches+0x8c>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a0d      	ldr	r2, [pc, #52]	; (8002f50 <FLASH_FlushCaches+0x8c>)
 8002f1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f1e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002f20:	4b0b      	ldr	r3, [pc, #44]	; (8002f50 <FLASH_FlushCaches+0x8c>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a0a      	ldr	r2, [pc, #40]	; (8002f50 <FLASH_FlushCaches+0x8c>)
 8002f26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f2a:	6013      	str	r3, [r2, #0]
 8002f2c:	4b08      	ldr	r3, [pc, #32]	; (8002f50 <FLASH_FlushCaches+0x8c>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a07      	ldr	r2, [pc, #28]	; (8002f50 <FLASH_FlushCaches+0x8c>)
 8002f32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f36:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f38:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <FLASH_FlushCaches+0x8c>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a04      	ldr	r2, [pc, #16]	; (8002f50 <FLASH_FlushCaches+0x8c>)
 8002f3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f42:	6013      	str	r3, [r2, #0]
  }
}
 8002f44:	bf00      	nop
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	58004000 	.word	0x58004000

08002f54 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8002f58:	4b06      	ldr	r3, [pc, #24]	; (8002f74 <FLASH_AcknowledgePageErase+0x20>)
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	4a05      	ldr	r2, [pc, #20]	; (8002f74 <FLASH_AcknowledgePageErase+0x20>)
 8002f5e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002f62:	f023 0302 	bic.w	r3, r3, #2
 8002f66:	6153      	str	r3, [r2, #20]
}
 8002f68:	bf00      	nop
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	58004000 	.word	0x58004000

08002f78 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b087      	sub	sp, #28
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f82:	2300      	movs	r3, #0
 8002f84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f86:	e146      	b.n	8003216 <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	fa01 f303 	lsl.w	r3, r1, r3
 8002f94:	4013      	ands	r3, r2
 8002f96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 8138 	beq.w	8003210 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f003 0303 	and.w	r3, r3, #3
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d005      	beq.n	8002fb8 <HAL_GPIO_Init+0x40>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f003 0303 	and.w	r3, r3, #3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d130      	bne.n	800301a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	2203      	movs	r2, #3
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	68da      	ldr	r2, [r3, #12]
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fee:	2201      	movs	r2, #1
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	091b      	lsrs	r3, r3, #4
 8003004:	f003 0201 	and.w	r2, r3, #1
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	4313      	orrs	r3, r2
 8003012:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f003 0303 	and.w	r3, r3, #3
 8003022:	2b03      	cmp	r3, #3
 8003024:	d017      	beq.n	8003056 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	2203      	movs	r2, #3
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	43db      	mvns	r3, r3
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	4013      	ands	r3, r2
 800303c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	4313      	orrs	r3, r2
 800304e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d123      	bne.n	80030aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	08da      	lsrs	r2, r3, #3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	3208      	adds	r2, #8
 800306a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800306e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	220f      	movs	r2, #15
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	43db      	mvns	r3, r3
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	4013      	ands	r3, r2
 8003084:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	691a      	ldr	r2, [r3, #16]
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f003 0307 	and.w	r3, r3, #7
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	4313      	orrs	r3, r2
 800309a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	08da      	lsrs	r2, r3, #3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	3208      	adds	r2, #8
 80030a4:	6939      	ldr	r1, [r7, #16]
 80030a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	2203      	movs	r2, #3
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	43db      	mvns	r3, r3
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	4013      	ands	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f003 0203 	and.w	r2, r3, #3
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 8092 	beq.w	8003210 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80030ec:	4a51      	ldr	r2, [pc, #324]	; (8003234 <HAL_GPIO_Init+0x2bc>)
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	089b      	lsrs	r3, r3, #2
 80030f2:	3302      	adds	r3, #2
 80030f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f003 0303 	and.w	r3, r3, #3
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	220f      	movs	r2, #15
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	43db      	mvns	r3, r3
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	4013      	ands	r3, r2
 800310e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003116:	d013      	beq.n	8003140 <HAL_GPIO_Init+0x1c8>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a47      	ldr	r2, [pc, #284]	; (8003238 <HAL_GPIO_Init+0x2c0>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d00d      	beq.n	800313c <HAL_GPIO_Init+0x1c4>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a46      	ldr	r2, [pc, #280]	; (800323c <HAL_GPIO_Init+0x2c4>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d007      	beq.n	8003138 <HAL_GPIO_Init+0x1c0>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a45      	ldr	r2, [pc, #276]	; (8003240 <HAL_GPIO_Init+0x2c8>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d101      	bne.n	8003134 <HAL_GPIO_Init+0x1bc>
 8003130:	2304      	movs	r3, #4
 8003132:	e006      	b.n	8003142 <HAL_GPIO_Init+0x1ca>
 8003134:	2307      	movs	r3, #7
 8003136:	e004      	b.n	8003142 <HAL_GPIO_Init+0x1ca>
 8003138:	2302      	movs	r3, #2
 800313a:	e002      	b.n	8003142 <HAL_GPIO_Init+0x1ca>
 800313c:	2301      	movs	r3, #1
 800313e:	e000      	b.n	8003142 <HAL_GPIO_Init+0x1ca>
 8003140:	2300      	movs	r3, #0
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	f002 0203 	and.w	r2, r2, #3
 8003148:	0092      	lsls	r2, r2, #2
 800314a:	4093      	lsls	r3, r2
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	4313      	orrs	r3, r2
 8003150:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003152:	4938      	ldr	r1, [pc, #224]	; (8003234 <HAL_GPIO_Init+0x2bc>)
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	089b      	lsrs	r3, r3, #2
 8003158:	3302      	adds	r3, #2
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003160:	4b38      	ldr	r3, [pc, #224]	; (8003244 <HAL_GPIO_Init+0x2cc>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	43db      	mvns	r3, r3
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	4013      	ands	r3, r2
 800316e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d003      	beq.n	8003184 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	4313      	orrs	r3, r2
 8003182:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003184:	4a2f      	ldr	r2, [pc, #188]	; (8003244 <HAL_GPIO_Init+0x2cc>)
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800318a:	4b2e      	ldr	r3, [pc, #184]	; (8003244 <HAL_GPIO_Init+0x2cc>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	43db      	mvns	r3, r3
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	4013      	ands	r3, r2
 8003198:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031ae:	4a25      	ldr	r2, [pc, #148]	; (8003244 <HAL_GPIO_Init+0x2cc>)
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80031b4:	4b23      	ldr	r3, [pc, #140]	; (8003244 <HAL_GPIO_Init+0x2cc>)
 80031b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	43db      	mvns	r3, r3
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	4013      	ands	r3, r2
 80031c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80031da:	4a1a      	ldr	r2, [pc, #104]	; (8003244 <HAL_GPIO_Init+0x2cc>)
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80031e2:	4b18      	ldr	r3, [pc, #96]	; (8003244 <HAL_GPIO_Init+0x2cc>)
 80031e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	43db      	mvns	r3, r3
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	4013      	ands	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d003      	beq.n	8003208 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	4313      	orrs	r3, r2
 8003206:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003208:	4a0e      	ldr	r2, [pc, #56]	; (8003244 <HAL_GPIO_Init+0x2cc>)
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	3301      	adds	r3, #1
 8003214:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	fa22 f303 	lsr.w	r3, r2, r3
 8003220:	2b00      	cmp	r3, #0
 8003222:	f47f aeb1 	bne.w	8002f88 <HAL_GPIO_Init+0x10>
  }
}
 8003226:	bf00      	nop
 8003228:	bf00      	nop
 800322a:	371c      	adds	r7, #28
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	40010000 	.word	0x40010000
 8003238:	48000400 	.word	0x48000400
 800323c:	48000800 	.word	0x48000800
 8003240:	48001000 	.word	0x48001000
 8003244:	58000800 	.word	0x58000800

08003248 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800324e:	4b0a      	ldr	r3, [pc, #40]	; (8003278 <HAL_HSEM_IRQHandler+0x30>)
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003254:	4b08      	ldr	r3, [pc, #32]	; (8003278 <HAL_HSEM_IRQHandler+0x30>)
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	43db      	mvns	r3, r3
 800325c:	4906      	ldr	r1, [pc, #24]	; (8003278 <HAL_HSEM_IRQHandler+0x30>)
 800325e:	4013      	ands	r3, r2
 8003260:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003262:	4a05      	ldr	r2, [pc, #20]	; (8003278 <HAL_HSEM_IRQHandler+0x30>)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 f807 	bl	800327c <HAL_HSEM_FreeCallback>
}
 800326e:	bf00      	nop
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	58001500 	.word	0x58001500

0800327c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e081      	b.n	80033a6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d106      	bne.n	80032bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7ff f8ae 	bl	8002418 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2224      	movs	r2, #36	; 0x24
 80032c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0201 	bic.w	r2, r2, #1
 80032d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d107      	bne.n	800330a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003306:	609a      	str	r2, [r3, #8]
 8003308:	e006      	b.n	8003318 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003316:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	2b02      	cmp	r3, #2
 800331e:	d104      	bne.n	800332a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003328:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	6812      	ldr	r2, [r2, #0]
 8003334:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003338:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800333c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68da      	ldr	r2, [r3, #12]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800334c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691a      	ldr	r2, [r3, #16]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	69d9      	ldr	r1, [r3, #28]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a1a      	ldr	r2, [r3, #32]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	430a      	orrs	r2, r1
 8003376:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0201 	orr.w	r2, r2, #1
 8003386:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2220      	movs	r2, #32
 8003392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
	...

080033b0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b088      	sub	sp, #32
 80033b4:	af02      	add	r7, sp, #8
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	607a      	str	r2, [r7, #4]
 80033ba:	461a      	mov	r2, r3
 80033bc:	460b      	mov	r3, r1
 80033be:	817b      	strh	r3, [r7, #10]
 80033c0:	4613      	mov	r3, r2
 80033c2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b20      	cmp	r3, #32
 80033ce:	f040 80da 	bne.w	8003586 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d101      	bne.n	80033e0 <HAL_I2C_Master_Transmit+0x30>
 80033dc:	2302      	movs	r3, #2
 80033de:	e0d3      	b.n	8003588 <HAL_I2C_Master_Transmit+0x1d8>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80033e8:	f7ff fab6 	bl	8002958 <HAL_GetTick>
 80033ec:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	2319      	movs	r3, #25
 80033f4:	2201      	movs	r2, #1
 80033f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f000 f9e6 	bl	80037cc <I2C_WaitOnFlagUntilTimeout>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e0be      	b.n	8003588 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2221      	movs	r2, #33	; 0x21
 800340e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2210      	movs	r2, #16
 8003416:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	893a      	ldrh	r2, [r7, #8]
 800342a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003436:	b29b      	uxth	r3, r3
 8003438:	2bff      	cmp	r3, #255	; 0xff
 800343a:	d90e      	bls.n	800345a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	22ff      	movs	r2, #255	; 0xff
 8003440:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003446:	b2da      	uxtb	r2, r3
 8003448:	8979      	ldrh	r1, [r7, #10]
 800344a:	4b51      	ldr	r3, [pc, #324]	; (8003590 <HAL_I2C_Master_Transmit+0x1e0>)
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 fbdc 	bl	8003c10 <I2C_TransferConfig>
 8003458:	e06c      	b.n	8003534 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345e:	b29a      	uxth	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003468:	b2da      	uxtb	r2, r3
 800346a:	8979      	ldrh	r1, [r7, #10]
 800346c:	4b48      	ldr	r3, [pc, #288]	; (8003590 <HAL_I2C_Master_Transmit+0x1e0>)
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 fbcb 	bl	8003c10 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800347a:	e05b      	b.n	8003534 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	6a39      	ldr	r1, [r7, #32]
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f000 f9e3 	bl	800384c <I2C_WaitOnTXISFlagUntilTimeout>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e07b      	b.n	8003588 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	781a      	ldrb	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	1c5a      	adds	r2, r3, #1
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	3b01      	subs	r3, #1
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b8:	3b01      	subs	r3, #1
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d034      	beq.n	8003534 <HAL_I2C_Master_Transmit+0x184>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d130      	bne.n	8003534 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	6a3b      	ldr	r3, [r7, #32]
 80034d8:	2200      	movs	r2, #0
 80034da:	2180      	movs	r1, #128	; 0x80
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	f000 f975 	bl	80037cc <I2C_WaitOnFlagUntilTimeout>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e04d      	b.n	8003588 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	2bff      	cmp	r3, #255	; 0xff
 80034f4:	d90e      	bls.n	8003514 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	22ff      	movs	r2, #255	; 0xff
 80034fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003500:	b2da      	uxtb	r2, r3
 8003502:	8979      	ldrh	r1, [r7, #10]
 8003504:	2300      	movs	r3, #0
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 fb7f 	bl	8003c10 <I2C_TransferConfig>
 8003512:	e00f      	b.n	8003534 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003518:	b29a      	uxth	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003522:	b2da      	uxtb	r2, r3
 8003524:	8979      	ldrh	r1, [r7, #10]
 8003526:	2300      	movs	r3, #0
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f000 fb6e 	bl	8003c10 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003538:	b29b      	uxth	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d19e      	bne.n	800347c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	6a39      	ldr	r1, [r7, #32]
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 f9c2 	bl	80038cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e01a      	b.n	8003588 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2220      	movs	r2, #32
 8003558:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6859      	ldr	r1, [r3, #4]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	4b0b      	ldr	r3, [pc, #44]	; (8003594 <HAL_I2C_Master_Transmit+0x1e4>)
 8003566:	400b      	ands	r3, r1
 8003568:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2220      	movs	r2, #32
 800356e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003582:	2300      	movs	r3, #0
 8003584:	e000      	b.n	8003588 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003586:	2302      	movs	r3, #2
  }
}
 8003588:	4618      	mov	r0, r3
 800358a:	3718      	adds	r7, #24
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	80002000 	.word	0x80002000
 8003594:	fe00e800 	.word	0xfe00e800

08003598 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b088      	sub	sp, #32
 800359c:	af02      	add	r7, sp, #8
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	607a      	str	r2, [r7, #4]
 80035a2:	461a      	mov	r2, r3
 80035a4:	460b      	mov	r3, r1
 80035a6:	817b      	strh	r3, [r7, #10]
 80035a8:	4613      	mov	r3, r2
 80035aa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b20      	cmp	r3, #32
 80035b6:	f040 80db 	bne.w	8003770 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d101      	bne.n	80035c8 <HAL_I2C_Master_Receive+0x30>
 80035c4:	2302      	movs	r3, #2
 80035c6:	e0d4      	b.n	8003772 <HAL_I2C_Master_Receive+0x1da>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80035d0:	f7ff f9c2 	bl	8002958 <HAL_GetTick>
 80035d4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	2319      	movs	r3, #25
 80035dc:	2201      	movs	r2, #1
 80035de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f000 f8f2 	bl	80037cc <I2C_WaitOnFlagUntilTimeout>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e0bf      	b.n	8003772 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2222      	movs	r2, #34	; 0x22
 80035f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2210      	movs	r2, #16
 80035fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	893a      	ldrh	r2, [r7, #8]
 8003612:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800361e:	b29b      	uxth	r3, r3
 8003620:	2bff      	cmp	r3, #255	; 0xff
 8003622:	d90e      	bls.n	8003642 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	22ff      	movs	r2, #255	; 0xff
 8003628:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800362e:	b2da      	uxtb	r2, r3
 8003630:	8979      	ldrh	r1, [r7, #10]
 8003632:	4b52      	ldr	r3, [pc, #328]	; (800377c <HAL_I2C_Master_Receive+0x1e4>)
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f000 fae8 	bl	8003c10 <I2C_TransferConfig>
 8003640:	e06d      	b.n	800371e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003646:	b29a      	uxth	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003650:	b2da      	uxtb	r2, r3
 8003652:	8979      	ldrh	r1, [r7, #10]
 8003654:	4b49      	ldr	r3, [pc, #292]	; (800377c <HAL_I2C_Master_Receive+0x1e4>)
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f000 fad7 	bl	8003c10 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003662:	e05c      	b.n	800371e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	6a39      	ldr	r1, [r7, #32]
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f000 f96b 	bl	8003944 <I2C_WaitOnRXNEFlagUntilTimeout>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e07c      	b.n	8003772 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	b2d2      	uxtb	r2, r2
 8003684:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	1c5a      	adds	r2, r3, #1
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003694:	3b01      	subs	r3, #1
 8003696:	b29a      	uxth	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	3b01      	subs	r3, #1
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d034      	beq.n	800371e <HAL_I2C_Master_Receive+0x186>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d130      	bne.n	800371e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	6a3b      	ldr	r3, [r7, #32]
 80036c2:	2200      	movs	r2, #0
 80036c4:	2180      	movs	r1, #128	; 0x80
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 f880 	bl	80037cc <I2C_WaitOnFlagUntilTimeout>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e04d      	b.n	8003772 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036da:	b29b      	uxth	r3, r3
 80036dc:	2bff      	cmp	r3, #255	; 0xff
 80036de:	d90e      	bls.n	80036fe <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	22ff      	movs	r2, #255	; 0xff
 80036e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ea:	b2da      	uxtb	r2, r3
 80036ec:	8979      	ldrh	r1, [r7, #10]
 80036ee:	2300      	movs	r3, #0
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 fa8a 	bl	8003c10 <I2C_TransferConfig>
 80036fc:	e00f      	b.n	800371e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003702:	b29a      	uxth	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370c:	b2da      	uxtb	r2, r3
 800370e:	8979      	ldrh	r1, [r7, #10]
 8003710:	2300      	movs	r3, #0
 8003712:	9300      	str	r3, [sp, #0]
 8003714:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f000 fa79 	bl	8003c10 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003722:	b29b      	uxth	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	d19d      	bne.n	8003664 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	6a39      	ldr	r1, [r7, #32]
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f000 f8cd 	bl	80038cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e01a      	b.n	8003772 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2220      	movs	r2, #32
 8003742:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6859      	ldr	r1, [r3, #4]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	4b0c      	ldr	r3, [pc, #48]	; (8003780 <HAL_I2C_Master_Receive+0x1e8>)
 8003750:	400b      	ands	r3, r1
 8003752:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2220      	movs	r2, #32
 8003758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800376c:	2300      	movs	r3, #0
 800376e:	e000      	b.n	8003772 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003770:	2302      	movs	r3, #2
  }
}
 8003772:	4618      	mov	r0, r3
 8003774:	3718      	adds	r7, #24
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	80002400 	.word	0x80002400
 8003780:	fe00e800 	.word	0xfe00e800

08003784 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b02      	cmp	r3, #2
 8003798:	d103      	bne.n	80037a2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2200      	movs	r2, #0
 80037a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d007      	beq.n	80037c0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	699a      	ldr	r2, [r3, #24]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f042 0201 	orr.w	r2, r2, #1
 80037be:	619a      	str	r2, [r3, #24]
  }
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	603b      	str	r3, [r7, #0]
 80037d8:	4613      	mov	r3, r2
 80037da:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037dc:	e022      	b.n	8003824 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e4:	d01e      	beq.n	8003824 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037e6:	f7ff f8b7 	bl	8002958 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d302      	bcc.n	80037fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d113      	bne.n	8003824 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003800:	f043 0220 	orr.w	r2, r3, #32
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2220      	movs	r2, #32
 800380c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e00f      	b.n	8003844 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	699a      	ldr	r2, [r3, #24]
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	4013      	ands	r3, r2
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	429a      	cmp	r2, r3
 8003832:	bf0c      	ite	eq
 8003834:	2301      	moveq	r3, #1
 8003836:	2300      	movne	r3, #0
 8003838:	b2db      	uxtb	r3, r3
 800383a:	461a      	mov	r2, r3
 800383c:	79fb      	ldrb	r3, [r7, #7]
 800383e:	429a      	cmp	r2, r3
 8003840:	d0cd      	beq.n	80037de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003858:	e02c      	b.n	80038b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	68b9      	ldr	r1, [r7, #8]
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f000 f8ea 	bl	8003a38 <I2C_IsErrorOccurred>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e02a      	b.n	80038c4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003874:	d01e      	beq.n	80038b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003876:	f7ff f86f 	bl	8002958 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	68ba      	ldr	r2, [r7, #8]
 8003882:	429a      	cmp	r2, r3
 8003884:	d302      	bcc.n	800388c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d113      	bne.n	80038b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003890:	f043 0220 	orr.w	r2, r3, #32
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2220      	movs	r2, #32
 800389c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e007      	b.n	80038c4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d1cb      	bne.n	800385a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038d8:	e028      	b.n	800392c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	68b9      	ldr	r1, [r7, #8]
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 f8aa 	bl	8003a38 <I2C_IsErrorOccurred>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e026      	b.n	800393c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ee:	f7ff f833 	bl	8002958 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d302      	bcc.n	8003904 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d113      	bne.n	800392c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003908:	f043 0220 	orr.w	r2, r3, #32
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2220      	movs	r2, #32
 8003914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e007      	b.n	800393c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	f003 0320 	and.w	r3, r3, #32
 8003936:	2b20      	cmp	r3, #32
 8003938:	d1cf      	bne.n	80038da <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003950:	e064      	b.n	8003a1c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	68b9      	ldr	r1, [r7, #8]
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f000 f86e 	bl	8003a38 <I2C_IsErrorOccurred>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e062      	b.n	8003a2c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	f003 0320 	and.w	r3, r3, #32
 8003970:	2b20      	cmp	r3, #32
 8003972:	d138      	bne.n	80039e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	f003 0304 	and.w	r3, r3, #4
 800397e:	2b04      	cmp	r3, #4
 8003980:	d105      	bne.n	800398e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800398a:	2300      	movs	r3, #0
 800398c:	e04e      	b.n	8003a2c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	f003 0310 	and.w	r3, r3, #16
 8003998:	2b10      	cmp	r3, #16
 800399a:	d107      	bne.n	80039ac <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2210      	movs	r2, #16
 80039a2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2204      	movs	r2, #4
 80039a8:	645a      	str	r2, [r3, #68]	; 0x44
 80039aa:	e002      	b.n	80039b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2220      	movs	r2, #32
 80039b8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6859      	ldr	r1, [r3, #4]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	4b1b      	ldr	r3, [pc, #108]	; (8003a34 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80039c6:	400b      	ands	r3, r1
 80039c8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2220      	movs	r2, #32
 80039ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e022      	b.n	8003a2c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039e6:	f7fe ffb7 	bl	8002958 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	68ba      	ldr	r2, [r7, #8]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d302      	bcc.n	80039fc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10f      	bne.n	8003a1c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a00:	f043 0220 	orr.w	r2, r3, #32
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e007      	b.n	8003a2c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	f003 0304 	and.w	r3, r3, #4
 8003a26:	2b04      	cmp	r3, #4
 8003a28:	d193      	bne.n	8003952 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	fe00e800 	.word	0xfe00e800

08003a38 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b08a      	sub	sp, #40	; 0x28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a44:	2300      	movs	r3, #0
 8003a46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003a52:	2300      	movs	r3, #0
 8003a54:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	f003 0310 	and.w	r3, r3, #16
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d075      	beq.n	8003b50 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2210      	movs	r2, #16
 8003a6a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a6c:	e056      	b.n	8003b1c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a74:	d052      	beq.n	8003b1c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a76:	f7fe ff6f 	bl	8002958 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	68ba      	ldr	r2, [r7, #8]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d302      	bcc.n	8003a8c <I2C_IsErrorOccurred+0x54>
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d147      	bne.n	8003b1c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a96:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a9e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003aaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aae:	d12e      	bne.n	8003b0e <I2C_IsErrorOccurred+0xd6>
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ab6:	d02a      	beq.n	8003b0e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003ab8:	7cfb      	ldrb	r3, [r7, #19]
 8003aba:	2b20      	cmp	r3, #32
 8003abc:	d027      	beq.n	8003b0e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003acc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003ace:	f7fe ff43 	bl	8002958 <HAL_GetTick>
 8003ad2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ad4:	e01b      	b.n	8003b0e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003ad6:	f7fe ff3f 	bl	8002958 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b19      	cmp	r3, #25
 8003ae2:	d914      	bls.n	8003b0e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae8:	f043 0220 	orr.w	r2, r3, #32
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2220      	movs	r2, #32
 8003af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	f003 0320 	and.w	r3, r3, #32
 8003b18:	2b20      	cmp	r3, #32
 8003b1a:	d1dc      	bne.n	8003ad6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	f003 0320 	and.w	r3, r3, #32
 8003b26:	2b20      	cmp	r3, #32
 8003b28:	d003      	beq.n	8003b32 <I2C_IsErrorOccurred+0xfa>
 8003b2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d09d      	beq.n	8003a6e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003b32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d103      	bne.n	8003b42 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003b42:	6a3b      	ldr	r3, [r7, #32]
 8003b44:	f043 0304 	orr.w	r3, r3, #4
 8003b48:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00b      	beq.n	8003b7a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003b62:	6a3b      	ldr	r3, [r7, #32]
 8003b64:	f043 0301 	orr.w	r3, r3, #1
 8003b68:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b72:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00b      	beq.n	8003b9c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003b84:	6a3b      	ldr	r3, [r7, #32]
 8003b86:	f043 0308 	orr.w	r3, r3, #8
 8003b8a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00b      	beq.n	8003bbe <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003ba6:	6a3b      	ldr	r3, [r7, #32]
 8003ba8:	f043 0302 	orr.w	r3, r3, #2
 8003bac:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bb6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003bbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d01c      	beq.n	8003c00 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f7ff fddc 	bl	8003784 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6859      	ldr	r1, [r3, #4]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	4b0d      	ldr	r3, [pc, #52]	; (8003c0c <I2C_IsErrorOccurred+0x1d4>)
 8003bd8:	400b      	ands	r3, r1
 8003bda:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	431a      	orrs	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2220      	movs	r2, #32
 8003bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003c00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3728      	adds	r7, #40	; 0x28
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	fe00e800 	.word	0xfe00e800

08003c10 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b087      	sub	sp, #28
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	607b      	str	r3, [r7, #4]
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	817b      	strh	r3, [r7, #10]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c22:	897b      	ldrh	r3, [r7, #10]
 8003c24:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c28:	7a7b      	ldrb	r3, [r7, #9]
 8003c2a:	041b      	lsls	r3, r3, #16
 8003c2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c30:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c3e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	6a3b      	ldr	r3, [r7, #32]
 8003c48:	0d5b      	lsrs	r3, r3, #21
 8003c4a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003c4e:	4b08      	ldr	r3, [pc, #32]	; (8003c70 <I2C_TransferConfig+0x60>)
 8003c50:	430b      	orrs	r3, r1
 8003c52:	43db      	mvns	r3, r3
 8003c54:	ea02 0103 	and.w	r1, r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003c62:	bf00      	nop
 8003c64:	371c      	adds	r7, #28
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	03ff63ff 	.word	0x03ff63ff

08003c74 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b20      	cmp	r3, #32
 8003c88:	d138      	bne.n	8003cfc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d101      	bne.n	8003c98 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c94:	2302      	movs	r3, #2
 8003c96:	e032      	b.n	8003cfe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2224      	movs	r2, #36	; 0x24
 8003ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 0201 	bic.w	r2, r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003cc6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6819      	ldr	r1, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f042 0201 	orr.w	r2, r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2220      	movs	r2, #32
 8003cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	e000      	b.n	8003cfe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003cfc:	2302      	movs	r3, #2
  }
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b085      	sub	sp, #20
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
 8003d12:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	2b20      	cmp	r3, #32
 8003d1e:	d139      	bne.n	8003d94 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d101      	bne.n	8003d2e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	e033      	b.n	8003d96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2224      	movs	r2, #36	; 0x24
 8003d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 0201 	bic.w	r2, r2, #1
 8003d4c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d5c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	021b      	lsls	r3, r3, #8
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f042 0201 	orr.w	r2, r2, #1
 8003d7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2220      	movs	r2, #32
 8003d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d90:	2300      	movs	r3, #0
 8003d92:	e000      	b.n	8003d96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d94:	2302      	movs	r3, #2
  }
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
	...

08003da4 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8003dac:	2300      	movs	r3, #0
 8003dae:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d01e      	beq.n	8003df4 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8003db6:	4b13      	ldr	r3, [pc, #76]	; (8003e04 <HAL_IPCC_Init+0x60>)
 8003db8:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d102      	bne.n	8003dcc <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f7fe fb6e 	bl	80024a8 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8003dcc:	68b8      	ldr	r0, [r7, #8]
 8003dce:	f000 f85b 	bl	8003e88 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f82c 	bl	8003e3c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8003df2:	e001      	b.n	8003df8 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8003df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	58000c00 	.word	0x58000c00

08003e08 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	4613      	mov	r3, r2
 8003e14:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8003e16:	bf00      	nop
 8003e18:	3714      	adds	r7, #20
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr

08003e22 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b085      	sub	sp, #20
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	60f8      	str	r0, [r7, #12]
 8003e2a:	60b9      	str	r1, [r7, #8]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8003e30:	bf00      	nop
 8003e32:	3714      	adds	r7, #20
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003e44:	2300      	movs	r3, #0
 8003e46:	60fb      	str	r3, [r7, #12]
 8003e48:	e00f      	b.n	8003e6a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4413      	add	r3, r2
 8003e52:	4a0b      	ldr	r2, [pc, #44]	; (8003e80 <IPCC_SetDefaultCallbacks+0x44>)
 8003e54:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	3306      	adds	r3, #6
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	4413      	add	r3, r2
 8003e60:	4a08      	ldr	r2, [pc, #32]	; (8003e84 <IPCC_SetDefaultCallbacks+0x48>)
 8003e62:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	3301      	adds	r3, #1
 8003e68:	60fb      	str	r3, [r7, #12]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2b05      	cmp	r3, #5
 8003e6e:	d9ec      	bls.n	8003e4a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8003e70:	bf00      	nop
 8003e72:	bf00      	nop
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	08003e09 	.word	0x08003e09
 8003e84:	08003e23 	.word	0x08003e23

08003e88 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8003e9c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	223f      	movs	r2, #63	; 0x3f
 8003ea2:	609a      	str	r2, [r3, #8]
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003eb4:	4b05      	ldr	r3, [pc, #20]	; (8003ecc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a04      	ldr	r2, [pc, #16]	; (8003ecc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ebe:	6013      	str	r3, [r2, #0]
}
 8003ec0:	bf00      	nop
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	58000400 	.word	0x58000400

08003ed0 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	460b      	mov	r3, r1
 8003eda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  
  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ee2:	d104      	bne.n	8003eee <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 8003ee4:	78fb      	ldrb	r3, [r7, #3]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 f84a 	bl	8003f80 <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 8003eec:	e003      	b.n	8003ef6 <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 8003eee:	78fb      	ldrb	r3, [r7, #3]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 f81b 	bl	8003f2c <HAL_PWREx_EnterSTOP0Mode>
}
 8003ef6:	bf00      	nop
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
	...

08003f00 <LL_PWR_EnableSRAM2Retention>:
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 8003f04:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <LL_PWR_EnableSRAM2Retention+0x1c>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	4a04      	ldr	r2, [pc, #16]	; (8003f1c <LL_PWR_EnableSRAM2Retention+0x1c>)
 8003f0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f0e:	6093      	str	r3, [r2, #8]
}
 8003f10:	bf00      	nop
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	58000400 	.word	0x58000400

08003f20 <HAL_PWREx_EnableSRAMRetention>:
  * @note   On devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx retention is extended 
  *         to SRAM1, SRAM2a and SRAM2b.
  * @retval None
  */
void HAL_PWREx_EnableSRAMRetention(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0
  LL_PWR_EnableSRAM2Retention();
 8003f24:	f7ff ffec 	bl	8003f00 <LL_PWR_EnableSRAM2Retention>
}
 8003f28:	bf00      	nop
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	4603      	mov	r3, r0
 8003f34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8003f36:	4b10      	ldr	r3, [pc, #64]	; (8003f78 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a0f      	ldr	r2, [pc, #60]	; (8003f78 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8003f3c:	f023 0307 	bic.w	r3, r3, #7
 8003f40:	6013      	str	r3, [r2, #0]


  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003f42:	4b0e      	ldr	r3, [pc, #56]	; (8003f7c <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	4a0d      	ldr	r2, [pc, #52]	; (8003f7c <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8003f48:	f043 0304 	orr.w	r3, r3, #4
 8003f4c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003f4e:	79fb      	ldrb	r3, [r7, #7]
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d101      	bne.n	8003f58 <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003f54:	bf30      	wfi
 8003f56:	e002      	b.n	8003f5e <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003f58:	bf40      	sev
    __WFE();
 8003f5a:	bf20      	wfe
    __WFE();
 8003f5c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003f5e:	4b07      	ldr	r3, [pc, #28]	; (8003f7c <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	4a06      	ldr	r2, [pc, #24]	; (8003f7c <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8003f64:	f023 0304 	bic.w	r3, r3, #4
 8003f68:	6113      	str	r3, [r2, #16]
}
 8003f6a:	bf00      	nop
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	58000400 	.word	0x58000400
 8003f7c:	e000ed00 	.word	0xe000ed00

08003f80 <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	4603      	mov	r3, r0
 8003f88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
    
  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8003f8a:	4b11      	ldr	r3, [pc, #68]	; (8003fd0 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f023 0307 	bic.w	r3, r3, #7
 8003f92:	4a0f      	ldr	r2, [pc, #60]	; (8003fd0 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8003f94:	f043 0301 	orr.w	r3, r3, #1
 8003f98:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003f9a:	4b0e      	ldr	r3, [pc, #56]	; (8003fd4 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	4a0d      	ldr	r2, [pc, #52]	; (8003fd4 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8003fa0:	f043 0304 	orr.w	r3, r3, #4
 8003fa4:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003fa6:	79fb      	ldrb	r3, [r7, #7]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d101      	bne.n	8003fb0 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003fac:	bf30      	wfi
 8003fae:	e002      	b.n	8003fb6 <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003fb0:	bf40      	sev
    __WFE();
 8003fb2:	bf20      	wfe
    __WFE();
 8003fb4:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003fb6:	4b07      	ldr	r3, [pc, #28]	; (8003fd4 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	4a06      	ldr	r2, [pc, #24]	; (8003fd4 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8003fbc:	f023 0304 	bic.w	r3, r3, #4
 8003fc0:	6113      	str	r3, [r2, #16]
}
 8003fc2:	bf00      	nop
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	58000400 	.word	0x58000400
 8003fd4:	e000ed00 	.word	0xe000ed00

08003fd8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003fdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fe6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fea:	d101      	bne.n	8003ff0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003fec:	2301      	movs	r3, #1
 8003fee:	e000      	b.n	8003ff2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <LL_RCC_HSE_Enable>:
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800400a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800400e:	6013      	str	r3, [r2, #0]
}
 8004010:	bf00      	nop
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <LL_RCC_HSE_Disable>:
{
 800401a:	b480      	push	{r7}
 800401c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800401e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004028:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800402c:	6013      	str	r3, [r2, #0]
}
 800402e:	bf00      	nop
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <LL_RCC_HSE_IsReady>:
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800403c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004046:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800404a:	d101      	bne.n	8004050 <LL_RCC_HSE_IsReady+0x18>
 800404c:	2301      	movs	r3, #1
 800404e:	e000      	b.n	8004052 <LL_RCC_HSE_IsReady+0x1a>
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <LL_RCC_HSI_Enable>:
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800406a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800406e:	6013      	str	r3, [r2, #0]
}
 8004070:	bf00      	nop
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <LL_RCC_HSI_Disable>:
{
 800407a:	b480      	push	{r7}
 800407c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800407e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800408c:	6013      	str	r3, [r2, #0]
}
 800408e:	bf00      	nop
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <LL_RCC_HSI_IsReady>:
{
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800409c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040aa:	d101      	bne.n	80040b0 <LL_RCC_HSI_IsReady+0x18>
 80040ac:	2301      	movs	r3, #1
 80040ae:	e000      	b.n	80040b2 <LL_RCC_HSI_IsReady+0x1a>
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <LL_RCC_HSI_SetCalibTrimming>:
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80040c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	061b      	lsls	r3, r3, #24
 80040d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040d6:	4313      	orrs	r3, r2
 80040d8:	604b      	str	r3, [r1, #4]
}
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <LL_RCC_LSE_Enable>:
{
 80040e6:	b480      	push	{r7}
 80040e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80040ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040f6:	f043 0301 	orr.w	r3, r3, #1
 80040fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80040fe:	bf00      	nop
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <LL_RCC_LSE_Disable>:
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800410c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004114:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004118:	f023 0301 	bic.w	r3, r3, #1
 800411c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004120:	bf00      	nop
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <LL_RCC_LSE_EnableBypass>:
{
 800412a:	b480      	push	{r7}
 800412c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800412e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004136:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800413a:	f043 0304 	orr.w	r3, r3, #4
 800413e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004142:	bf00      	nop
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <LL_RCC_LSE_DisableBypass>:
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004158:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800415c:	f023 0304 	bic.w	r3, r3, #4
 8004160:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004164:	bf00      	nop
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <LL_RCC_LSE_IsReady>:
{
 800416e:	b480      	push	{r7}
 8004170:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b02      	cmp	r3, #2
 8004180:	d101      	bne.n	8004186 <LL_RCC_LSE_IsReady+0x18>
 8004182:	2301      	movs	r3, #1
 8004184:	e000      	b.n	8004188 <LL_RCC_LSE_IsReady+0x1a>
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <LL_RCC_LSI1_Enable>:
{
 8004192:	b480      	push	{r7}
 8004194:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800419a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800419e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041a2:	f043 0301 	orr.w	r3, r3, #1
 80041a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80041aa:	bf00      	nop
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <LL_RCC_LSI1_Disable>:
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80041b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041c4:	f023 0301 	bic.w	r3, r3, #1
 80041c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80041cc:	bf00      	nop
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <LL_RCC_LSI1_IsReady>:
{
 80041d6:	b480      	push	{r7}
 80041d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80041da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d101      	bne.n	80041ee <LL_RCC_LSI1_IsReady+0x18>
 80041ea:	2301      	movs	r3, #1
 80041ec:	e000      	b.n	80041f0 <LL_RCC_LSI1_IsReady+0x1a>
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <LL_RCC_LSI2_Enable>:
{
 80041fa:	b480      	push	{r7}
 80041fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80041fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004202:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004206:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800420a:	f043 0304 	orr.w	r3, r3, #4
 800420e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004212:	bf00      	nop
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <LL_RCC_LSI2_Disable>:
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004224:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004228:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800422c:	f023 0304 	bic.w	r3, r3, #4
 8004230:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004234:	bf00      	nop
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <LL_RCC_LSI2_IsReady>:
{
 800423e:	b480      	push	{r7}
 8004240:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004246:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800424a:	f003 0308 	and.w	r3, r3, #8
 800424e:	2b08      	cmp	r3, #8
 8004250:	d101      	bne.n	8004256 <LL_RCC_LSI2_IsReady+0x18>
 8004252:	2301      	movs	r3, #1
 8004254:	e000      	b.n	8004258 <LL_RCC_LSI2_IsReady+0x1a>
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <LL_RCC_LSI2_SetTrimming>:
{
 8004262:	b480      	push	{r7}
 8004264:	b083      	sub	sp, #12
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800426a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800426e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004272:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	021b      	lsls	r3, r3, #8
 800427a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800427e:	4313      	orrs	r3, r2
 8004280:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <LL_RCC_MSI_Enable>:
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004294:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800429e:	f043 0301 	orr.w	r3, r3, #1
 80042a2:	6013      	str	r3, [r2, #0]
}
 80042a4:	bf00      	nop
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <LL_RCC_MSI_Disable>:
{
 80042ae:	b480      	push	{r7}
 80042b0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80042b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042bc:	f023 0301 	bic.w	r3, r3, #1
 80042c0:	6013      	str	r3, [r2, #0]
}
 80042c2:	bf00      	nop
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <LL_RCC_MSI_IsReady>:
{
 80042cc:	b480      	push	{r7}
 80042ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80042d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d101      	bne.n	80042e2 <LL_RCC_MSI_IsReady+0x16>
 80042de:	2301      	movs	r3, #1
 80042e0:	e000      	b.n	80042e4 <LL_RCC_MSI_IsReady+0x18>
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr

080042ee <LL_RCC_MSI_SetRange>:
{
 80042ee:	b480      	push	{r7}
 80042f0:	b083      	sub	sp, #12
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80042f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004300:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4313      	orrs	r3, r2
 8004308:	600b      	str	r3, [r1, #0]
}
 800430a:	bf00      	nop
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr

08004316 <LL_RCC_MSI_GetRange>:
{
 8004316:	b480      	push	{r7}
 8004318:	b083      	sub	sp, #12
 800431a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800431c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004326:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2bb0      	cmp	r3, #176	; 0xb0
 800432c:	d901      	bls.n	8004332 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800432e:	23b0      	movs	r3, #176	; 0xb0
 8004330:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004332:	687b      	ldr	r3, [r7, #4]
}
 8004334:	4618      	mov	r0, r3
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004348:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	021b      	lsls	r3, r3, #8
 8004356:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800435a:	4313      	orrs	r3, r2
 800435c:	604b      	str	r3, [r1, #4]
}
 800435e:	bf00      	nop
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <LL_RCC_SetSysClkSource>:
{
 800436a:	b480      	push	{r7}
 800436c:	b083      	sub	sp, #12
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004372:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f023 0203 	bic.w	r2, r3, #3
 800437c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4313      	orrs	r3, r2
 8004384:	608b      	str	r3, [r1, #8]
}
 8004386:	bf00      	nop
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <LL_RCC_GetSysClkSource>:
{
 8004392:	b480      	push	{r7}
 8004394:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f003 030c 	and.w	r3, r3, #12
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <LL_RCC_SetAHBPrescaler>:
{
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80043b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	608b      	str	r3, [r1, #8]
}
 80043c6:	bf00      	nop
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <LL_C2_RCC_SetAHBPrescaler>:
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80043da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043de:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80043e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80043f2:	bf00      	nop
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <LL_RCC_SetAHB4Prescaler>:
{
 80043fe:	b480      	push	{r7}
 8004400:	b083      	sub	sp, #12
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800440a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800440e:	f023 020f 	bic.w	r2, r3, #15
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	091b      	lsrs	r3, r3, #4
 8004416:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800441a:	4313      	orrs	r3, r2
 800441c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <LL_RCC_SetAPB1Prescaler>:
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800443e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4313      	orrs	r3, r2
 8004446:	608b      	str	r3, [r1, #8]
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <LL_RCC_SetAPB2Prescaler>:
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800445c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004466:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4313      	orrs	r3, r2
 800446e:	608b      	str	r3, [r1, #8]
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <LL_RCC_GetAHBPrescaler>:
{
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800448a:	4618      	mov	r0, r3
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <LL_RCC_GetAHB4Prescaler>:
{
 8004494:	b480      	push	{r7}
 8004496:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800449c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80044a0:	011b      	lsls	r3, r3, #4
 80044a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <LL_RCC_PLL_Enable>:
{
 80044b0:	b480      	push	{r7}
 80044b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80044b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044c2:	6013      	str	r3, [r2, #0]
}
 80044c4:	bf00      	nop
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <LL_RCC_PLL_Disable>:
{
 80044ce:	b480      	push	{r7}
 80044d0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80044d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044e0:	6013      	str	r3, [r2, #0]
}
 80044e2:	bf00      	nop
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <LL_RCC_PLL_IsReady>:
{
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80044f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044fe:	d101      	bne.n	8004504 <LL_RCC_PLL_IsReady+0x18>
 8004500:	2301      	movs	r3, #1
 8004502:	e000      	b.n	8004506 <LL_RCC_PLL_IsReady+0x1a>
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <LL_RCC_PLL_GetN>:
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004514:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	0a1b      	lsrs	r3, r3, #8
 800451c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004520:	4618      	mov	r0, r3
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr

0800452a <LL_RCC_PLL_GetR>:
{
 800452a:	b480      	push	{r7}
 800452c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800452e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004538:	4618      	mov	r0, r3
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <LL_RCC_PLL_GetDivider>:
{
 8004542:	b480      	push	{r7}
 8004544:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004550:	4618      	mov	r0, r3
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <LL_RCC_PLL_GetMainSource>:
{
 800455a:	b480      	push	{r7}
 800455c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800455e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	f003 0303 	and.w	r3, r3, #3
}
 8004568:	4618      	mov	r0, r3
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <LL_RCC_IsActiveFlag_HPRE>:
{
 8004572:	b480      	push	{r7}
 8004574:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004576:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004584:	d101      	bne.n	800458a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004586:	2301      	movs	r3, #1
 8004588:	e000      	b.n	800458c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr

08004596 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8004596:	b480      	push	{r7}
 8004598:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800459a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800459e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80045a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045aa:	d101      	bne.n	80045b0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80045ac:	2301      	movs	r3, #1
 80045ae:	e000      	b.n	80045b2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80045c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045c4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80045c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045d0:	d101      	bne.n	80045d6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80045d2:	2301      	movs	r3, #1
 80045d4:	e000      	b.n	80045d8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <LL_RCC_IsActiveFlag_PPRE1>:
{
 80045e2:	b480      	push	{r7}
 80045e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80045e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045f4:	d101      	bne.n	80045fa <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80045f6:	2301      	movs	r3, #1
 80045f8:	e000      	b.n	80045fc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr

08004606 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8004606:	b480      	push	{r7}
 8004608:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800460a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004614:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004618:	d101      	bne.n	800461e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800461a:	2301      	movs	r3, #1
 800461c:	e000      	b.n	8004620 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
	...

0800462c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800462c:	b590      	push	{r4, r7, lr}
 800462e:	b08d      	sub	sp, #52	; 0x34
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e324      	b.n	8004c88 <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0320 	and.w	r3, r3, #32
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 808d 	beq.w	8004766 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800464c:	f7ff fea1 	bl	8004392 <LL_RCC_GetSysClkSource>
 8004650:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004652:	f7ff ff82 	bl	800455a <LL_RCC_PLL_GetMainSource>
 8004656:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800465a:	2b00      	cmp	r3, #0
 800465c:	d005      	beq.n	800466a <HAL_RCC_OscConfig+0x3e>
 800465e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004660:	2b0c      	cmp	r3, #12
 8004662:	d147      	bne.n	80046f4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004666:	2b01      	cmp	r3, #1
 8004668:	d144      	bne.n	80046f4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e308      	b.n	8004c88 <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800467a:	f7ff fe4c 	bl	8004316 <LL_RCC_MSI_GetRange>
 800467e:	4603      	mov	r3, r0
 8004680:	429c      	cmp	r4, r3
 8004682:	d914      	bls.n	80046ae <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	4618      	mov	r0, r3
 800468a:	f000 fcc5 	bl	8005018 <RCC_SetFlashLatencyFromMSIRange>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e2f7      	b.n	8004c88 <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	4618      	mov	r0, r3
 800469e:	f7ff fe26 	bl	80042ee <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7ff fe4a 	bl	8004340 <LL_RCC_MSI_SetCalibTrimming>
 80046ac:	e013      	b.n	80046d6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7ff fe1b 	bl	80042ee <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a1b      	ldr	r3, [r3, #32]
 80046bc:	4618      	mov	r0, r3
 80046be:	f7ff fe3f 	bl	8004340 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 fca6 	bl	8005018 <RCC_SetFlashLatencyFromMSIRange>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d001      	beq.n	80046d6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e2d8      	b.n	8004c88 <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80046d6:	f000 fc8b 	bl	8004ff0 <HAL_RCC_GetHCLKFreq>
 80046da:	4603      	mov	r3, r0
 80046dc:	4aa4      	ldr	r2, [pc, #656]	; (8004970 <HAL_RCC_OscConfig+0x344>)
 80046de:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80046e0:	4ba4      	ldr	r3, [pc, #656]	; (8004974 <HAL_RCC_OscConfig+0x348>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7fe f8e9 	bl	80028bc <HAL_InitTick>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d039      	beq.n	8004764 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e2c9      	b.n	8004c88 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	69db      	ldr	r3, [r3, #28]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d01e      	beq.n	800473a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80046fc:	f7ff fdc8 	bl	8004290 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004700:	f7fe f92a 	bl	8002958 <HAL_GetTick>
 8004704:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004706:	e008      	b.n	800471a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004708:	f7fe f926 	bl	8002958 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b02      	cmp	r3, #2
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e2b6      	b.n	8004c88 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 800471a:	f7ff fdd7 	bl	80042cc <LL_RCC_MSI_IsReady>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d0f1      	beq.n	8004708 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004728:	4618      	mov	r0, r3
 800472a:	f7ff fde0 	bl	80042ee <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	4618      	mov	r0, r3
 8004734:	f7ff fe04 	bl	8004340 <LL_RCC_MSI_SetCalibTrimming>
 8004738:	e015      	b.n	8004766 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800473a:	f7ff fdb8 	bl	80042ae <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800473e:	f7fe f90b 	bl	8002958 <HAL_GetTick>
 8004742:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004744:	e008      	b.n	8004758 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004746:	f7fe f907 	bl	8002958 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b02      	cmp	r3, #2
 8004752:	d901      	bls.n	8004758 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e297      	b.n	8004c88 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004758:	f7ff fdb8 	bl	80042cc <LL_RCC_MSI_IsReady>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1f1      	bne.n	8004746 <HAL_RCC_OscConfig+0x11a>
 8004762:	e000      	b.n	8004766 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004764:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b00      	cmp	r3, #0
 8004770:	d047      	beq.n	8004802 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004772:	f7ff fe0e 	bl	8004392 <LL_RCC_GetSysClkSource>
 8004776:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004778:	f7ff feef 	bl	800455a <LL_RCC_PLL_GetMainSource>
 800477c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800477e:	6a3b      	ldr	r3, [r7, #32]
 8004780:	2b08      	cmp	r3, #8
 8004782:	d005      	beq.n	8004790 <HAL_RCC_OscConfig+0x164>
 8004784:	6a3b      	ldr	r3, [r7, #32]
 8004786:	2b0c      	cmp	r3, #12
 8004788:	d108      	bne.n	800479c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	2b03      	cmp	r3, #3
 800478e:	d105      	bne.n	800479c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d134      	bne.n	8004802 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e275      	b.n	8004c88 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047a4:	d102      	bne.n	80047ac <HAL_RCC_OscConfig+0x180>
 80047a6:	f7ff fc29 	bl	8003ffc <LL_RCC_HSE_Enable>
 80047aa:	e001      	b.n	80047b0 <HAL_RCC_OscConfig+0x184>
 80047ac:	f7ff fc35 	bl	800401a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d012      	beq.n	80047de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b8:	f7fe f8ce 	bl	8002958 <HAL_GetTick>
 80047bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80047be:	e008      	b.n	80047d2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047c0:	f7fe f8ca 	bl	8002958 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b64      	cmp	r3, #100	; 0x64
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e25a      	b.n	8004c88 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 80047d2:	f7ff fc31 	bl	8004038 <LL_RCC_HSE_IsReady>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d0f1      	beq.n	80047c0 <HAL_RCC_OscConfig+0x194>
 80047dc:	e011      	b.n	8004802 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047de:	f7fe f8bb 	bl	8002958 <HAL_GetTick>
 80047e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80047e4:	e008      	b.n	80047f8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047e6:	f7fe f8b7 	bl	8002958 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b64      	cmp	r3, #100	; 0x64
 80047f2:	d901      	bls.n	80047f8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e247      	b.n	8004c88 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 80047f8:	f7ff fc1e 	bl	8004038 <LL_RCC_HSE_IsReady>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1f1      	bne.n	80047e6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d04c      	beq.n	80048a8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800480e:	f7ff fdc0 	bl	8004392 <LL_RCC_GetSysClkSource>
 8004812:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004814:	f7ff fea1 	bl	800455a <LL_RCC_PLL_GetMainSource>
 8004818:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	2b04      	cmp	r3, #4
 800481e:	d005      	beq.n	800482c <HAL_RCC_OscConfig+0x200>
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	2b0c      	cmp	r3, #12
 8004824:	d10e      	bne.n	8004844 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	2b02      	cmp	r3, #2
 800482a:	d10b      	bne.n	8004844 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e227      	b.n	8004c88 <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	4618      	mov	r0, r3
 800483e:	f7ff fc3d 	bl	80040bc <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004842:	e031      	b.n	80048a8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d019      	beq.n	8004880 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800484c:	f7ff fc06 	bl	800405c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004850:	f7fe f882 	bl	8002958 <HAL_GetTick>
 8004854:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004856:	e008      	b.n	800486a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004858:	f7fe f87e 	bl	8002958 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b02      	cmp	r3, #2
 8004864:	d901      	bls.n	800486a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e20e      	b.n	8004c88 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 800486a:	f7ff fc15 	bl	8004098 <LL_RCC_HSI_IsReady>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d0f1      	beq.n	8004858 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	4618      	mov	r0, r3
 800487a:	f7ff fc1f 	bl	80040bc <LL_RCC_HSI_SetCalibTrimming>
 800487e:	e013      	b.n	80048a8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004880:	f7ff fbfb 	bl	800407a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004884:	f7fe f868 	bl	8002958 <HAL_GetTick>
 8004888:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800488a:	e008      	b.n	800489e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800488c:	f7fe f864 	bl	8002958 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	2b02      	cmp	r3, #2
 8004898:	d901      	bls.n	800489e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e1f4      	b.n	8004c88 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 800489e:	f7ff fbfb 	bl	8004098 <LL_RCC_HSI_IsReady>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d1f1      	bne.n	800488c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0308 	and.w	r3, r3, #8
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d106      	bne.n	80048c2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f000 80a3 	beq.w	8004a08 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d076      	beq.n	80049b8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0310 	and.w	r3, r3, #16
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d046      	beq.n	8004964 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80048d6:	f7ff fc7e 	bl	80041d6 <LL_RCC_LSI1_IsReady>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d113      	bne.n	8004908 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80048e0:	f7ff fc57 	bl	8004192 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80048e4:	f7fe f838 	bl	8002958 <HAL_GetTick>
 80048e8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80048ec:	f7fe f834 	bl	8002958 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e1c4      	b.n	8004c88 <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80048fe:	f7ff fc6a 	bl	80041d6 <LL_RCC_LSI1_IsReady>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d0f1      	beq.n	80048ec <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004908:	f7ff fc77 	bl	80041fa <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800490c:	f7fe f824 	bl	8002958 <HAL_GetTick>
 8004910:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004912:	e008      	b.n	8004926 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004914:	f7fe f820 	bl	8002958 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b03      	cmp	r3, #3
 8004920:	d901      	bls.n	8004926 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e1b0      	b.n	8004c88 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004926:	f7ff fc8a 	bl	800423e <LL_RCC_LSI2_IsReady>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d0f1      	beq.n	8004914 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	4618      	mov	r0, r3
 8004936:	f7ff fc94 	bl	8004262 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800493a:	f7ff fc3b 	bl	80041b4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800493e:	f7fe f80b 	bl	8002958 <HAL_GetTick>
 8004942:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004944:	e008      	b.n	8004958 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004946:	f7fe f807 	bl	8002958 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b02      	cmp	r3, #2
 8004952:	d901      	bls.n	8004958 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e197      	b.n	8004c88 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004958:	f7ff fc3d 	bl	80041d6 <LL_RCC_LSI1_IsReady>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1f1      	bne.n	8004946 <HAL_RCC_OscConfig+0x31a>
 8004962:	e051      	b.n	8004a08 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004964:	f7ff fc15 	bl	8004192 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004968:	f7fd fff6 	bl	8002958 <HAL_GetTick>
 800496c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800496e:	e00c      	b.n	800498a <HAL_RCC_OscConfig+0x35e>
 8004970:	20000010 	.word	0x20000010
 8004974:	20000014 	.word	0x20000014
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004978:	f7fd ffee 	bl	8002958 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b02      	cmp	r3, #2
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e17e      	b.n	8004c88 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800498a:	f7ff fc24 	bl	80041d6 <LL_RCC_LSI1_IsReady>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d0f1      	beq.n	8004978 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004994:	f7ff fc42 	bl	800421c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004998:	e008      	b.n	80049ac <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800499a:	f7fd ffdd 	bl	8002958 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	2b03      	cmp	r3, #3
 80049a6:	d901      	bls.n	80049ac <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e16d      	b.n	8004c88 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80049ac:	f7ff fc47 	bl	800423e <LL_RCC_LSI2_IsReady>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1f1      	bne.n	800499a <HAL_RCC_OscConfig+0x36e>
 80049b6:	e027      	b.n	8004a08 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80049b8:	f7ff fc30 	bl	800421c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049bc:	f7fd ffcc 	bl	8002958 <HAL_GetTick>
 80049c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80049c2:	e008      	b.n	80049d6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80049c4:	f7fd ffc8 	bl	8002958 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b03      	cmp	r3, #3
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e158      	b.n	8004c88 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80049d6:	f7ff fc32 	bl	800423e <LL_RCC_LSI2_IsReady>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1f1      	bne.n	80049c4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80049e0:	f7ff fbe8 	bl	80041b4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e4:	f7fd ffb8 	bl	8002958 <HAL_GetTick>
 80049e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80049ea:	e008      	b.n	80049fe <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80049ec:	f7fd ffb4 	bl	8002958 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e144      	b.n	8004c88 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80049fe:	f7ff fbea 	bl	80041d6 <LL_RCC_LSI1_IsReady>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1f1      	bne.n	80049ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0304 	and.w	r3, r3, #4
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d05b      	beq.n	8004acc <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a14:	4b9e      	ldr	r3, [pc, #632]	; (8004c90 <HAL_RCC_OscConfig+0x664>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d114      	bne.n	8004a4a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004a20:	f7ff fa46 	bl	8003eb0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a24:	f7fd ff98 	bl	8002958 <HAL_GetTick>
 8004a28:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a2a:	e008      	b.n	8004a3e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a2c:	f7fd ff94 	bl	8002958 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e124      	b.n	8004c88 <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a3e:	4b94      	ldr	r3, [pc, #592]	; (8004c90 <HAL_RCC_OscConfig+0x664>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d0f0      	beq.n	8004a2c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d102      	bne.n	8004a58 <HAL_RCC_OscConfig+0x42c>
 8004a52:	f7ff fb48 	bl	80040e6 <LL_RCC_LSE_Enable>
 8004a56:	e00c      	b.n	8004a72 <HAL_RCC_OscConfig+0x446>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	2b05      	cmp	r3, #5
 8004a5e:	d104      	bne.n	8004a6a <HAL_RCC_OscConfig+0x43e>
 8004a60:	f7ff fb63 	bl	800412a <LL_RCC_LSE_EnableBypass>
 8004a64:	f7ff fb3f 	bl	80040e6 <LL_RCC_LSE_Enable>
 8004a68:	e003      	b.n	8004a72 <HAL_RCC_OscConfig+0x446>
 8004a6a:	f7ff fb4d 	bl	8004108 <LL_RCC_LSE_Disable>
 8004a6e:	f7ff fb6d 	bl	800414c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d014      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a7a:	f7fd ff6d 	bl	8002958 <HAL_GetTick>
 8004a7e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004a80:	e00a      	b.n	8004a98 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a82:	f7fd ff69 	bl	8002958 <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d901      	bls.n	8004a98 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e0f7      	b.n	8004c88 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004a98:	f7ff fb69 	bl	800416e <LL_RCC_LSE_IsReady>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d0ef      	beq.n	8004a82 <HAL_RCC_OscConfig+0x456>
 8004aa2:	e013      	b.n	8004acc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa4:	f7fd ff58 	bl	8002958 <HAL_GetTick>
 8004aa8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004aaa:	e00a      	b.n	8004ac2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aac:	f7fd ff54 	bl	8002958 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e0e2      	b.n	8004c88 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004ac2:	f7ff fb54 	bl	800416e <LL_RCC_LSE_IsReady>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1ef      	bne.n	8004aac <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f000 80d8 	beq.w	8004c86 <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ad6:	f7ff fc5c 	bl	8004392 <LL_RCC_GetSysClkSource>
 8004ada:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	f040 80a6 	bne.w	8004c3a <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f003 0203 	and.w	r2, r3, #3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d123      	bne.n	8004b44 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d11c      	bne.n	8004b44 <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	0a1b      	lsrs	r3, r3, #8
 8004b0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d114      	bne.n	8004b44 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d10d      	bne.n	8004b44 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d106      	bne.n	8004b44 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d054      	beq.n	8004bee <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	2b0c      	cmp	r3, #12
 8004b48:	d04f      	beq.n	8004bea <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004b4a:	f7ff fcc0 	bl	80044ce <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b4e:	f7fd ff03 	bl	8002958 <HAL_GetTick>
 8004b52:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b54:	e008      	b.n	8004b68 <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b56:	f7fd feff 	bl	8002958 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d901      	bls.n	8004b68 <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e08f      	b.n	8004c88 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1ef      	bne.n	8004b56 <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b7a:	68da      	ldr	r2, [r3, #12]
 8004b7c:	4b45      	ldr	r3, [pc, #276]	; (8004c94 <HAL_RCC_OscConfig+0x668>)
 8004b7e:	4013      	ands	r3, r2
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b88:	4311      	orrs	r1, r2
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b8e:	0212      	lsls	r2, r2, #8
 8004b90:	4311      	orrs	r1, r2
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b96:	4311      	orrs	r1, r2
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b9c:	4311      	orrs	r1, r2
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004bac:	f7ff fc80 	bl	80044b0 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bbe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004bc0:	f7fd feca 	bl	8002958 <HAL_GetTick>
 8004bc4:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bc6:	e008      	b.n	8004bda <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bc8:	f7fd fec6 	bl	8002958 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d901      	bls.n	8004bda <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e056      	b.n	8004c88 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d0ef      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004be8:	e04d      	b.n	8004c86 <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e04c      	b.n	8004c88 <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d144      	bne.n	8004c86 <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004bfc:	f7ff fc58 	bl	80044b0 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c0e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c10:	f7fd fea2 	bl	8002958 <HAL_GetTick>
 8004c14:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c16:	e008      	b.n	8004c2a <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c18:	f7fd fe9e 	bl	8002958 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e02e      	b.n	8004c88 <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d0ef      	beq.n	8004c18 <HAL_RCC_OscConfig+0x5ec>
 8004c38:	e025      	b.n	8004c86 <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	2b0c      	cmp	r3, #12
 8004c3e:	d020      	beq.n	8004c82 <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c40:	f7ff fc45 	bl	80044ce <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c44:	f7fd fe88 	bl	8002958 <HAL_GetTick>
 8004c48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c4c:	f7fd fe84 	bl	8002958 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e014      	b.n	8004c88 <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1ef      	bne.n	8004c4c <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 8004c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c7a:	f023 0303 	bic.w	r3, r3, #3
 8004c7e:	60d3      	str	r3, [r2, #12]
 8004c80:	e001      	b.n	8004c86 <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e000      	b.n	8004c88 <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3734      	adds	r7, #52	; 0x34
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd90      	pop	{r4, r7, pc}
 8004c90:	58000400 	.word	0x58000400
 8004c94:	11c1808c 	.word	0x11c1808c

08004c98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d101      	bne.n	8004cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e12d      	b.n	8004f08 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cac:	4b98      	ldr	r3, [pc, #608]	; (8004f10 <HAL_RCC_ClockConfig+0x278>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0307 	and.w	r3, r3, #7
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d91b      	bls.n	8004cf2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cba:	4b95      	ldr	r3, [pc, #596]	; (8004f10 <HAL_RCC_ClockConfig+0x278>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f023 0207 	bic.w	r2, r3, #7
 8004cc2:	4993      	ldr	r1, [pc, #588]	; (8004f10 <HAL_RCC_ClockConfig+0x278>)
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cca:	f7fd fe45 	bl	8002958 <HAL_GetTick>
 8004cce:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cd0:	e008      	b.n	8004ce4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004cd2:	f7fd fe41 	bl	8002958 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d901      	bls.n	8004ce4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e111      	b.n	8004f08 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ce4:	4b8a      	ldr	r3, [pc, #552]	; (8004f10 <HAL_RCC_ClockConfig+0x278>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0307 	and.w	r3, r3, #7
 8004cec:	683a      	ldr	r2, [r7, #0]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d1ef      	bne.n	8004cd2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d016      	beq.n	8004d2c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7ff fb51 	bl	80043aa <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d08:	f7fd fe26 	bl	8002958 <HAL_GetTick>
 8004d0c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004d0e:	e008      	b.n	8004d22 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d10:	f7fd fe22 	bl	8002958 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e0f2      	b.n	8004f08 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004d22:	f7ff fc26 	bl	8004572 <LL_RCC_IsActiveFlag_HPRE>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d0f1      	beq.n	8004d10 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0320 	and.w	r3, r3, #32
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d016      	beq.n	8004d66 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7ff fb48 	bl	80043d2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d42:	f7fd fe09 	bl	8002958 <HAL_GetTick>
 8004d46:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004d48:	e008      	b.n	8004d5c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d4a:	f7fd fe05 	bl	8002958 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d901      	bls.n	8004d5c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e0d5      	b.n	8004f08 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004d5c:	f7ff fc1b 	bl	8004596 <LL_RCC_IsActiveFlag_C2HPRE>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0f1      	beq.n	8004d4a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d016      	beq.n	8004da0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7ff fb41 	bl	80043fe <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d7c:	f7fd fdec 	bl	8002958 <HAL_GetTick>
 8004d80:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004d82:	e008      	b.n	8004d96 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d84:	f7fd fde8 	bl	8002958 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e0b8      	b.n	8004f08 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004d96:	f7ff fc11 	bl	80045bc <LL_RCC_IsActiveFlag_SHDHPRE>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0f1      	beq.n	8004d84 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d016      	beq.n	8004dda <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7ff fb3b 	bl	800442c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004db6:	f7fd fdcf 	bl	8002958 <HAL_GetTick>
 8004dba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004dbc:	e008      	b.n	8004dd0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004dbe:	f7fd fdcb 	bl	8002958 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d901      	bls.n	8004dd0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e09b      	b.n	8004f08 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004dd0:	f7ff fc07 	bl	80045e2 <LL_RCC_IsActiveFlag_PPRE1>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d0f1      	beq.n	8004dbe <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0308 	and.w	r3, r3, #8
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d017      	beq.n	8004e16 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7ff fb31 	bl	8004454 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004df2:	f7fd fdb1 	bl	8002958 <HAL_GetTick>
 8004df6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004df8:	e008      	b.n	8004e0c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004dfa:	f7fd fdad 	bl	8002958 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d901      	bls.n	8004e0c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e07d      	b.n	8004f08 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004e0c:	f7ff fbfb 	bl	8004606 <LL_RCC_IsActiveFlag_PPRE2>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d0f1      	beq.n	8004dfa <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d043      	beq.n	8004eaa <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d106      	bne.n	8004e38 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004e2a:	f7ff f905 	bl	8004038 <LL_RCC_HSE_IsReady>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d11e      	bne.n	8004e72 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e067      	b.n	8004f08 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	2b03      	cmp	r3, #3
 8004e3e:	d106      	bne.n	8004e4e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004e40:	f7ff fb54 	bl	80044ec <LL_RCC_PLL_IsReady>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d113      	bne.n	8004e72 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e05c      	b.n	8004f08 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d106      	bne.n	8004e64 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004e56:	f7ff fa39 	bl	80042cc <LL_RCC_MSI_IsReady>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d108      	bne.n	8004e72 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e051      	b.n	8004f08 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004e64:	f7ff f918 	bl	8004098 <LL_RCC_HSI_IsReady>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d101      	bne.n	8004e72 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e04a      	b.n	8004f08 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7ff fa77 	bl	800436a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e7c:	f7fd fd6c 	bl	8002958 <HAL_GetTick>
 8004e80:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e82:	e00a      	b.n	8004e9a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e84:	f7fd fd68 	bl	8002958 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e036      	b.n	8004f08 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e9a:	f7ff fa7a 	bl	8004392 <LL_RCC_GetSysClkSource>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d1ec      	bne.n	8004e84 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004eaa:	4b19      	ldr	r3, [pc, #100]	; (8004f10 <HAL_RCC_ClockConfig+0x278>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0307 	and.w	r3, r3, #7
 8004eb2:	683a      	ldr	r2, [r7, #0]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d21b      	bcs.n	8004ef0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eb8:	4b15      	ldr	r3, [pc, #84]	; (8004f10 <HAL_RCC_ClockConfig+0x278>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f023 0207 	bic.w	r2, r3, #7
 8004ec0:	4913      	ldr	r1, [pc, #76]	; (8004f10 <HAL_RCC_ClockConfig+0x278>)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ec8:	f7fd fd46 	bl	8002958 <HAL_GetTick>
 8004ecc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ece:	e008      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004ed0:	f7fd fd42 	bl	8002958 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e012      	b.n	8004f08 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ee2:	4b0b      	ldr	r3, [pc, #44]	; (8004f10 <HAL_RCC_ClockConfig+0x278>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0307 	and.w	r3, r3, #7
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d1ef      	bne.n	8004ed0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004ef0:	f000 f87e 	bl	8004ff0 <HAL_RCC_GetHCLKFreq>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	4a07      	ldr	r2, [pc, #28]	; (8004f14 <HAL_RCC_ClockConfig+0x27c>)
 8004ef8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004efa:	f7fd fd39 	bl	8002970 <HAL_GetTickPrio>
 8004efe:	4603      	mov	r3, r0
 8004f00:	4618      	mov	r0, r3
 8004f02:	f7fd fcdb 	bl	80028bc <HAL_InitTick>
 8004f06:	4603      	mov	r3, r0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	58004000 	.word	0x58004000
 8004f14:	20000010 	.word	0x20000010

08004f18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f18:	b590      	push	{r4, r7, lr}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f1e:	f7ff fa38 	bl	8004392 <LL_RCC_GetSysClkSource>
 8004f22:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10a      	bne.n	8004f40 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004f2a:	f7ff f9f4 	bl	8004316 <LL_RCC_MSI_GetRange>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	091b      	lsrs	r3, r3, #4
 8004f32:	f003 030f 	and.w	r3, r3, #15
 8004f36:	4a2b      	ldr	r2, [pc, #172]	; (8004fe4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f3c:	60fb      	str	r3, [r7, #12]
 8004f3e:	e04b      	b.n	8004fd8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b04      	cmp	r3, #4
 8004f44:	d102      	bne.n	8004f4c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f46:	4b28      	ldr	r3, [pc, #160]	; (8004fe8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004f48:	60fb      	str	r3, [r7, #12]
 8004f4a:	e045      	b.n	8004fd8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2b08      	cmp	r3, #8
 8004f50:	d10a      	bne.n	8004f68 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004f52:	f7ff f841 	bl	8003fd8 <LL_RCC_HSE_IsEnabledDiv2>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d102      	bne.n	8004f62 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004f5c:	4b22      	ldr	r3, [pc, #136]	; (8004fe8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004f5e:	60fb      	str	r3, [r7, #12]
 8004f60:	e03a      	b.n	8004fd8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004f62:	4b22      	ldr	r3, [pc, #136]	; (8004fec <HAL_RCC_GetSysClockFreq+0xd4>)
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	e037      	b.n	8004fd8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004f68:	f7ff faf7 	bl	800455a <LL_RCC_PLL_GetMainSource>
 8004f6c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d003      	beq.n	8004f7c <HAL_RCC_GetSysClockFreq+0x64>
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	2b03      	cmp	r3, #3
 8004f78:	d003      	beq.n	8004f82 <HAL_RCC_GetSysClockFreq+0x6a>
 8004f7a:	e00d      	b.n	8004f98 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004f7c:	4b1a      	ldr	r3, [pc, #104]	; (8004fe8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004f7e:	60bb      	str	r3, [r7, #8]
        break;
 8004f80:	e015      	b.n	8004fae <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004f82:	f7ff f829 	bl	8003fd8 <LL_RCC_HSE_IsEnabledDiv2>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d102      	bne.n	8004f92 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004f8c:	4b16      	ldr	r3, [pc, #88]	; (8004fe8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004f8e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004f90:	e00d      	b.n	8004fae <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004f92:	4b16      	ldr	r3, [pc, #88]	; (8004fec <HAL_RCC_GetSysClockFreq+0xd4>)
 8004f94:	60bb      	str	r3, [r7, #8]
        break;
 8004f96:	e00a      	b.n	8004fae <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004f98:	f7ff f9bd 	bl	8004316 <LL_RCC_MSI_GetRange>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	091b      	lsrs	r3, r3, #4
 8004fa0:	f003 030f 	and.w	r3, r3, #15
 8004fa4:	4a0f      	ldr	r2, [pc, #60]	; (8004fe4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004faa:	60bb      	str	r3, [r7, #8]
        break;
 8004fac:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004fae:	f7ff faaf 	bl	8004510 <LL_RCC_PLL_GetN>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	fb03 f402 	mul.w	r4, r3, r2
 8004fba:	f7ff fac2 	bl	8004542 <LL_RCC_PLL_GetDivider>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	091b      	lsrs	r3, r3, #4
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	fbb4 f4f3 	udiv	r4, r4, r3
 8004fc8:	f7ff faaf 	bl	800452a <LL_RCC_PLL_GetR>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	0f5b      	lsrs	r3, r3, #29
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	fbb4 f3f3 	udiv	r3, r4, r3
 8004fd6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3714      	adds	r7, #20
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd90      	pop	{r4, r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	0800b370 	.word	0x0800b370
 8004fe8:	00f42400 	.word	0x00f42400
 8004fec:	01e84800 	.word	0x01e84800

08004ff0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ff0:	b598      	push	{r3, r4, r7, lr}
 8004ff2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004ff4:	f7ff ff90 	bl	8004f18 <HAL_RCC_GetSysClockFreq>
 8004ff8:	4604      	mov	r4, r0
 8004ffa:	f7ff fa3f 	bl	800447c <LL_RCC_GetAHBPrescaler>
 8004ffe:	4603      	mov	r3, r0
 8005000:	091b      	lsrs	r3, r3, #4
 8005002:	f003 030f 	and.w	r3, r3, #15
 8005006:	4a03      	ldr	r2, [pc, #12]	; (8005014 <HAL_RCC_GetHCLKFreq+0x24>)
 8005008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800500c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005010:	4618      	mov	r0, r3
 8005012:	bd98      	pop	{r3, r4, r7, pc}
 8005014:	0800b330 	.word	0x0800b330

08005018 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2bb0      	cmp	r3, #176	; 0xb0
 8005024:	d903      	bls.n	800502e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005026:	4b14      	ldr	r3, [pc, #80]	; (8005078 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8005028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502a:	60fb      	str	r3, [r7, #12]
 800502c:	e007      	b.n	800503e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	091b      	lsrs	r3, r3, #4
 8005032:	f003 030f 	and.w	r3, r3, #15
 8005036:	4a10      	ldr	r2, [pc, #64]	; (8005078 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8005038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800503c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800503e:	f7ff fa29 	bl	8004494 <LL_RCC_GetAHB4Prescaler>
 8005042:	4603      	mov	r3, r0
 8005044:	091b      	lsrs	r3, r3, #4
 8005046:	f003 030f 	and.w	r3, r3, #15
 800504a:	4a0c      	ldr	r2, [pc, #48]	; (800507c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800504c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	fbb2 f3f3 	udiv	r3, r2, r3
 8005056:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	4a09      	ldr	r2, [pc, #36]	; (8005080 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800505c:	fba2 2303 	umull	r2, r3, r2, r3
 8005060:	0c9b      	lsrs	r3, r3, #18
 8005062:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005066:	4618      	mov	r0, r3
 8005068:	f000 f80c 	bl	8005084 <RCC_SetFlashLatency>
 800506c:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 800506e:	4618      	mov	r0, r3
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	0800b370 	.word	0x0800b370
 800507c:	0800b330 	.word	0x0800b330
 8005080:	431bde83 	.word	0x431bde83

08005084 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005084:	b590      	push	{r4, r7, lr}
 8005086:	b08f      	sub	sp, #60	; 0x3c
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800508e:	4b24      	ldr	r3, [pc, #144]	; (8005120 <RCC_SetFlashLatency+0x9c>)
 8005090:	f107 041c 	add.w	r4, r7, #28
 8005094:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005096:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800509a:	4b22      	ldr	r3, [pc, #136]	; (8005124 <RCC_SetFlashLatency+0xa0>)
 800509c:	f107 040c 	add.w	r4, r7, #12
 80050a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80050a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80050a6:	2300      	movs	r3, #0
 80050a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80050aa:	2300      	movs	r3, #0
 80050ac:	633b      	str	r3, [r7, #48]	; 0x30
 80050ae:	e013      	b.n	80050d8 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80050b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	3338      	adds	r3, #56	; 0x38
 80050b6:	443b      	add	r3, r7
 80050b8:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d807      	bhi.n	80050d2 <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 80050c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	3338      	adds	r3, #56	; 0x38
 80050c8:	443b      	add	r3, r7
 80050ca:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80050ce:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 80050d0:	e005      	b.n	80050de <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80050d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d4:	3301      	adds	r3, #1
 80050d6:	633b      	str	r3, [r7, #48]	; 0x30
 80050d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050da:	2b03      	cmp	r3, #3
 80050dc:	d9e8      	bls.n	80050b0 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80050de:	4b12      	ldr	r3, [pc, #72]	; (8005128 <RCC_SetFlashLatency+0xa4>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f023 0207 	bic.w	r2, r3, #7
 80050e6:	4910      	ldr	r1, [pc, #64]	; (8005128 <RCC_SetFlashLatency+0xa4>)
 80050e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ea:	4313      	orrs	r3, r2
 80050ec:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80050ee:	f7fd fc33 	bl	8002958 <HAL_GetTick>
 80050f2:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80050f4:	e008      	b.n	8005108 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80050f6:	f7fd fc2f 	bl	8002958 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	2b02      	cmp	r3, #2
 8005102:	d901      	bls.n	8005108 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e007      	b.n	8005118 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005108:	4b07      	ldr	r3, [pc, #28]	; (8005128 <RCC_SetFlashLatency+0xa4>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0307 	and.w	r3, r3, #7
 8005110:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005112:	429a      	cmp	r2, r3
 8005114:	d1ef      	bne.n	80050f6 <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	373c      	adds	r7, #60	; 0x3c
 800511c:	46bd      	mov	sp, r7
 800511e:	bd90      	pop	{r4, r7, pc}
 8005120:	0800b158 	.word	0x0800b158
 8005124:	0800b168 	.word	0x0800b168
 8005128:	58004000 	.word	0x58004000

0800512c <LL_RCC_LSE_IsEnabled>:
{
 800512c:	b480      	push	{r7}
 800512e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005130:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005138:	f003 0301 	and.w	r3, r3, #1
 800513c:	2b01      	cmp	r3, #1
 800513e:	d101      	bne.n	8005144 <LL_RCC_LSE_IsEnabled+0x18>
 8005140:	2301      	movs	r3, #1
 8005142:	e000      	b.n	8005146 <LL_RCC_LSE_IsEnabled+0x1a>
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <LL_RCC_LSE_IsReady>:
{
 8005150:	b480      	push	{r7}
 8005152:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b02      	cmp	r3, #2
 8005162:	d101      	bne.n	8005168 <LL_RCC_LSE_IsReady+0x18>
 8005164:	2301      	movs	r3, #1
 8005166:	e000      	b.n	800516a <LL_RCC_LSE_IsReady+0x1a>
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <LL_RCC_SetRFWKPClockSource>:
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800517c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005180:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005184:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005188:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4313      	orrs	r3, r2
 8005190:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <LL_RCC_SetSMPSClockSource>:
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80051a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ae:	f023 0203 	bic.w	r2, r3, #3
 80051b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	624b      	str	r3, [r1, #36]	; 0x24
}
 80051bc:	bf00      	nop
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <LL_RCC_SetSMPSPrescaler>:
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80051d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80051da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	624b      	str	r3, [r1, #36]	; 0x24
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <LL_RCC_SetUSARTClockSource>:
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80051f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005200:	f023 0203 	bic.w	r2, r3, #3
 8005204:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4313      	orrs	r3, r2
 800520c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <LL_RCC_SetLPUARTClockSource>:
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800522c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005230:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4313      	orrs	r3, r2
 8005238:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <LL_RCC_SetI2CClockSource>:
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005254:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	091b      	lsrs	r3, r3, #4
 800525c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005260:	43db      	mvns	r3, r3
 8005262:	401a      	ands	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	011b      	lsls	r3, r3, #4
 8005268:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800526c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005270:	4313      	orrs	r3, r2
 8005272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005276:	bf00      	nop
 8005278:	370c      	adds	r7, #12
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr

08005282 <LL_RCC_SetLPTIMClockSource>:
{
 8005282:	b480      	push	{r7}
 8005284:	b083      	sub	sp, #12
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800528a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800528e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	0c1b      	lsrs	r3, r3, #16
 8005296:	041b      	lsls	r3, r3, #16
 8005298:	43db      	mvns	r3, r3
 800529a:	401a      	ands	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	041b      	lsls	r3, r3, #16
 80052a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052a4:	4313      	orrs	r3, r2
 80052a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80052aa:	bf00      	nop
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <LL_RCC_SetRNGClockSource>:
{
 80052b6:	b480      	push	{r7}
 80052b8:	b083      	sub	sp, #12
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80052be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80052ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80052d6:	bf00      	nop
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr

080052e2 <LL_RCC_SetCLK48ClockSource>:
{
 80052e2:	b480      	push	{r7}
 80052e4:	b083      	sub	sp, #12
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80052ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005302:	bf00      	nop
 8005304:	370c      	adds	r7, #12
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <LL_RCC_SetADCClockSource>:
{
 800530e:	b480      	push	{r7}
 8005310:	b083      	sub	sp, #12
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800531a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800531e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005322:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4313      	orrs	r3, r2
 800532a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800532e:	bf00      	nop
 8005330:	370c      	adds	r7, #12
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <LL_RCC_SetRTCClockSource>:
{
 800533a:	b480      	push	{r7}
 800533c:	b083      	sub	sp, #12
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800534a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800534e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4313      	orrs	r3, r2
 8005356:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800535a:	bf00      	nop
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <LL_RCC_GetRTCClockSource>:
{
 8005366:	b480      	push	{r7}
 8005368:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800536a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800536e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005372:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005376:	4618      	mov	r0, r3
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <LL_RCC_ForceBackupDomainReset>:
{
 8005380:	b480      	push	{r7}
 8005382:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800538c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005394:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005398:	bf00      	nop
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <LL_RCC_ReleaseBackupDomainReset>:
{
 80053a2:	b480      	push	{r7}
 80053a4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80053a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80053ba:	bf00      	nop
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b088      	sub	sp, #32
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80053cc:	2300      	movs	r3, #0
 80053ce:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80053d0:	2300      	movs	r3, #0
 80053d2:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d046      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80053e0:	f7ff ffc1 	bl	8005366 <LL_RCC_GetRTCClockSource>
 80053e4:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	69ba      	ldr	r2, [r7, #24]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d03c      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80053f0:	f7fe fd5e 	bl	8003eb0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d105      	bne.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	4618      	mov	r0, r3
 8005400:	f7ff ff9b 	bl	800533a <LL_RCC_SetRTCClockSource>
 8005404:	e02e      	b.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800540a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005410:	f7ff ffb6 	bl	8005380 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005414:	f7ff ffc5 	bl	80053a2 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	4313      	orrs	r3, r2
 8005424:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005426:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005430:	f7ff fe7c 	bl	800512c <LL_RCC_LSE_IsEnabled>
 8005434:	4603      	mov	r3, r0
 8005436:	2b01      	cmp	r3, #1
 8005438:	d114      	bne.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800543a:	f7fd fa8d 	bl	8002958 <HAL_GetTick>
 800543e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005440:	e00b      	b.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005442:	f7fd fa89 	bl	8002958 <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005450:	4293      	cmp	r3, r2
 8005452:	d902      	bls.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	77fb      	strb	r3, [r7, #31]
              break;
 8005458:	e004      	b.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 800545a:	f7ff fe79 	bl	8005150 <LL_RCC_LSE_IsReady>
 800545e:	4603      	mov	r3, r0
 8005460:	2b01      	cmp	r3, #1
 8005462:	d1ee      	bne.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005464:	7ffb      	ldrb	r3, [r7, #31]
 8005466:	77bb      	strb	r3, [r7, #30]
 8005468:	e001      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800546a:	7ffb      	ldrb	r3, [r7, #31]
 800546c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	2b00      	cmp	r3, #0
 8005478:	d004      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	4618      	mov	r0, r3
 8005480:	f7ff feb6 	bl	80051f0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0302 	and.w	r3, r3, #2
 800548c:	2b00      	cmp	r3, #0
 800548e:	d004      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	4618      	mov	r0, r3
 8005496:	f7ff fec1 	bl	800521c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0310 	and.w	r3, r3, #16
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d004      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7ff fee9 	bl	8005282 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0320 	and.w	r3, r3, #32
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d004      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	695b      	ldr	r3, [r3, #20]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7ff fede 	bl	8005282 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0304 	and.w	r3, r3, #4
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d004      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7ff feb6 	bl	8005248 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d02b      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054f0:	d008      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x140>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054fa:	d003      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x140>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d105      	bne.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	4618      	mov	r0, r3
 800550a:	f7ff fed4 	bl	80052b6 <LL_RCC_SetRNGClockSource>
 800550e:	e00a      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005518:	60fb      	str	r3, [r7, #12]
 800551a:	2000      	movs	r0, #0
 800551c:	f7ff fecb 	bl	80052b6 <LL_RCC_SetRNGClockSource>
 8005520:	68f8      	ldr	r0, [r7, #12]
 8005522:	f7ff fede 	bl	80052e2 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800552e:	d107      	bne.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800553a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800553e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005548:	2b00      	cmp	r3, #0
 800554a:	d011      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	69db      	ldr	r3, [r3, #28]
 8005550:	4618      	mov	r0, r3
 8005552:	f7ff fedc 	bl	800530e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800555e:	d107      	bne.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800556a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800556e:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d004      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005580:	4618      	mov	r0, r3
 8005582:	f7ff fdf7 	bl	8005174 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d009      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005596:	4618      	mov	r0, r3
 8005598:	f7ff fe16 	bl	80051c8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a0:	4618      	mov	r0, r3
 80055a2:	f7ff fdfd 	bl	80051a0 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80055a6:	7fbb      	ldrb	r3, [r7, #30]
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3720      	adds	r7, #32
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d101      	bne.n	80055c2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e090      	b.n	80056e4 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d106      	bne.n	80055dc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f7fc ff8a 	bl	80024f0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2202      	movs	r2, #2
 80055e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	22ca      	movs	r2, #202	; 0xca
 80055ea:	625a      	str	r2, [r3, #36]	; 0x24
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2253      	movs	r2, #83	; 0x53
 80055f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 f89f 	bl	8005738 <RTC_EnterInitMode>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d009      	beq.n	8005614 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	22ff      	movs	r2, #255	; 0xff
 8005606:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2204      	movs	r2, #4
 800560c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e067      	b.n	80056e4 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	6812      	ldr	r2, [r2, #0]
 800561e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005622:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005626:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	6899      	ldr	r1, [r3, #8]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	431a      	orrs	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	431a      	orrs	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	68d2      	ldr	r2, [r2, #12]
 800564e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6919      	ldr	r1, [r3, #16]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	041a      	lsls	r2, r3, #16
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	430a      	orrs	r2, r1
 8005662:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68da      	ldr	r2, [r3, #12]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005672:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f022 0202 	bic.w	r2, r2, #2
 8005682:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	69da      	ldr	r2, [r3, #28]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	695b      	ldr	r3, [r3, #20]
 8005692:	431a      	orrs	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	430a      	orrs	r2, r1
 800569a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f003 0320 	and.w	r3, r3, #32
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d113      	bne.n	80056d2 <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 f81e 	bl	80056ec <HAL_RTC_WaitForSynchro>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00d      	beq.n	80056d2 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	22ff      	movs	r2, #255	; 0xff
 80056bc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2204      	movs	r2, #4
 80056c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e008      	b.n	80056e4 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	22ff      	movs	r2, #255	; 0xff
 80056d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 80056e2:	2300      	movs	r3, #0
  }
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3708      	adds	r7, #8
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68da      	ldr	r2, [r3, #12]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005702:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005704:	f7fd f928 	bl	8002958 <HAL_GetTick>
 8005708:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800570a:	e009      	b.n	8005720 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800570c:	f7fd f924 	bl	8002958 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800571a:	d901      	bls.n	8005720 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e007      	b.n	8005730 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	f003 0320 	and.w	r3, r3, #32
 800572a:	2b00      	cmp	r3, #0
 800572c:	d0ee      	beq.n	800570c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800574a:	2b00      	cmp	r3, #0
 800574c:	d119      	bne.n	8005782 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f04f 32ff 	mov.w	r2, #4294967295
 8005756:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005758:	f7fd f8fe 	bl	8002958 <HAL_GetTick>
 800575c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800575e:	e009      	b.n	8005774 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005760:	f7fd f8fa 	bl	8002958 <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800576e:	d901      	bls.n	8005774 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	e007      	b.n	8005784 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800577e:	2b00      	cmp	r3, #0
 8005780:	d0ee      	beq.n	8005760 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	3710      	adds	r7, #16
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b086      	sub	sp, #24
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d101      	bne.n	80057a6 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80057a2:	2302      	movs	r3, #2
 80057a4:	e0a8      	b.n	80058f8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2202      	movs	r2, #2
 80057b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	22ca      	movs	r2, #202	; 0xca
 80057bc:	625a      	str	r2, [r3, #36]	; 0x24
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2253      	movs	r2, #83	; 0x53
 80057c4:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d020      	beq.n	8005816 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80057d4:	f7fd f8c0 	bl	8002958 <HAL_GetTick>
 80057d8:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80057da:	e015      	b.n	8005808 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80057dc:	f7fd f8bc 	bl	8002958 <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057ea:	d90d      	bls.n	8005808 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	22ff      	movs	r2, #255	; 0xff
 80057f2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2203      	movs	r2, #3
 80057f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e077      	b.n	80058f8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	f003 0304 	and.w	r3, r3, #4
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1e2      	bne.n	80057dc <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	689a      	ldr	r2, [r3, #8]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005824:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	b2da      	uxtb	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005836:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005838:	f7fd f88e 	bl	8002958 <HAL_GetTick>
 800583c:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800583e:	e015      	b.n	800586c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005840:	f7fd f88a 	bl	8002958 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800584e:	d90d      	bls.n	800586c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	22ff      	movs	r2, #255	; 0xff
 8005856:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2203      	movs	r2, #3
 800585c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e045      	b.n	80058f8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	f003 0304 	and.w	r3, r3, #4
 8005876:	2b00      	cmp	r3, #0
 8005878:	d0e2      	beq.n	8005840 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68ba      	ldr	r2, [r7, #8]
 8005880:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	689a      	ldr	r2, [r3, #8]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f022 0207 	bic.w	r2, r2, #7
 8005890:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	6899      	ldr	r1, [r3, #8]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	430a      	orrs	r2, r1
 80058a0:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80058a2:	4b17      	ldr	r3, [pc, #92]	; (8005900 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80058a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058a8:	4a15      	ldr	r2, [pc, #84]	; (8005900 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80058aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058ae:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80058b2:	4b13      	ldr	r3, [pc, #76]	; (8005900 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a12      	ldr	r2, [pc, #72]	; (8005900 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80058b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058bc:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	689a      	ldr	r2, [r3, #8]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058cc:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	689a      	ldr	r2, [r3, #8]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80058dc:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	22ff      	movs	r2, #255	; 0xff
 80058e4:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3718      	adds	r7, #24
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	58000800 	.word	0x58000800

08005904 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d101      	bne.n	800591a <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8005916:	2302      	movs	r3, #2
 8005918:	e04d      	b.n	80059b6 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2202      	movs	r2, #2
 8005926:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	22ca      	movs	r2, #202	; 0xca
 8005930:	625a      	str	r2, [r3, #36]	; 0x24
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2253      	movs	r2, #83	; 0x53
 8005938:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689a      	ldr	r2, [r3, #8]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005948:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	689a      	ldr	r2, [r3, #8]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005958:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 800595a:	f7fc fffd 	bl	8002958 <HAL_GetTick>
 800595e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005960:	e015      	b.n	800598e <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005962:	f7fc fff9 	bl	8002958 <HAL_GetTick>
 8005966:	4602      	mov	r2, r0
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005970:	d90d      	bls.n	800598e <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	22ff      	movs	r2, #255	; 0xff
 8005978:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2203      	movs	r2, #3
 800597e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e013      	b.n	80059b6 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	f003 0304 	and.w	r3, r3, #4
 8005998:	2b00      	cmp	r3, #0
 800599a:	d0e2      	beq.n	8005962 <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	22ff      	movs	r2, #255	; 0xff
 80059a2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3710      	adds	r7, #16
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
	...

080059c0 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00b      	beq.n	80059ee <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f7fc faf8 	bl	8001fcc <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	b2da      	uxtb	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80059ec:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80059ee:	4b06      	ldr	r3, [pc, #24]	; (8005a08 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 80059f0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80059f4:	60da      	str	r2, [r3, #12]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80059fe:	bf00      	nop
 8005a00:	3708      	adds	r7, #8
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	58000800 	.word	0x58000800

08005a0c <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8005a0c:	b5b0      	push	{r4, r5, r7, lr}
 8005a0e:	b0ce      	sub	sp, #312	; 0x138
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	4605      	mov	r5, r0
 8005a14:	460c      	mov	r4, r1
 8005a16:	4610      	mov	r0, r2
 8005a18:	4619      	mov	r1, r3
 8005a1a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005a1e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8005a22:	462a      	mov	r2, r5
 8005a24:	701a      	strb	r2, [r3, #0]
 8005a26:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005a2a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005a2e:	4622      	mov	r2, r4
 8005a30:	801a      	strh	r2, [r3, #0]
 8005a32:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005a36:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	801a      	strh	r2, [r3, #0]
 8005a3e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005a42:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8005a46:	460a      	mov	r2, r1
 8005a48:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8005a4a:	f107 0310 	add.w	r3, r7, #16
 8005a4e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8005a52:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8005a56:	3308      	adds	r3, #8
 8005a58:	f107 0210 	add.w	r2, r7, #16
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8005a62:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8005a66:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8005a6a:	4413      	add	r3, r2
 8005a6c:	3309      	adds	r3, #9
 8005a6e:	f107 0210 	add.w	r2, r7, #16
 8005a72:	4413      	add	r3, r2
 8005a74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005a78:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005a7c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005a80:	2200      	movs	r2, #0
 8005a82:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005a84:	2300      	movs	r3, #0
 8005a86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8005a8a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a8e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005a92:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8005a96:	7812      	ldrb	r2, [r2, #0]
 8005a98:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005a9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8005aa4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005aa8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005aac:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8005ab0:	8812      	ldrh	r2, [r2, #0]
 8005ab2:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8005ab6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005aba:	3302      	adds	r3, #2
 8005abc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8005ac0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ac4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005ac8:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8005acc:	8812      	ldrh	r2, [r2, #0]
 8005ace:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8005ad2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005ad6:	3302      	adds	r3, #2
 8005ad8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8005adc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ae0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005ae4:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8005ae8:	7812      	ldrb	r2, [r2, #0]
 8005aea:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005aec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005af0:	3301      	adds	r3, #1
 8005af2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8005af6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005afa:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8005afe:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8005b00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005b04:	3301      	adds	r3, #1
 8005b06:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8005b0a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b0e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8005b12:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8005b14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005b18:	3301      	adds	r3, #1
 8005b1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8005b1e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b22:	3308      	adds	r3, #8
 8005b24:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8005b28:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f000 fc21 	bl	8006374 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8005b32:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8005b36:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8005b40:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005b44:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8005b48:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8005b4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005b4e:	3301      	adds	r3, #1
 8005b50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8005b54:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005b58:	3301      	adds	r3, #1
 8005b5a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8005b5e:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8005b62:	4618      	mov	r0, r3
 8005b64:	f000 fc06 	bl	8006374 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8005b68:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8005b6c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005b70:	4413      	add	r3, r2
 8005b72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8005b76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b7a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8005b7e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8005b80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005b84:	3302      	adds	r3, #2
 8005b86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8005b8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b8e:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8005b92:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8005b94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005b98:	3302      	adds	r3, #2
 8005b9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005b9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005ba2:	2218      	movs	r2, #24
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f000 fbf4 	bl	8006394 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005bac:	233f      	movs	r3, #63	; 0x3f
 8005bae:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8005bb2:	2383      	movs	r3, #131	; 0x83
 8005bb4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005bb8:	f107 0310 	add.w	r3, r7, #16
 8005bbc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005bc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005bc4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005bc8:	f107 030f 	add.w	r3, r7, #15
 8005bcc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005bd6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005bda:	2100      	movs	r1, #0
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f000 fe4f 	bl	8006880 <hci_send_req>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	da01      	bge.n	8005bec <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8005be8:	23ff      	movs	r3, #255	; 0xff
 8005bea:	e004      	b.n	8005bf6 <aci_gap_set_discoverable+0x1ea>
  return status;
 8005bec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005bf0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005bf4:	781b      	ldrb	r3, [r3, #0]
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bdb0      	pop	{r4, r5, r7, pc}

08005c00 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8005c00:	b590      	push	{r4, r7, lr}
 8005c02:	b0cd      	sub	sp, #308	; 0x134
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	4604      	mov	r4, r0
 8005c08:	4608      	mov	r0, r1
 8005c0a:	4611      	mov	r1, r2
 8005c0c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c10:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8005c14:	6013      	str	r3, [r2, #0]
 8005c16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c1a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005c1e:	4622      	mov	r2, r4
 8005c20:	701a      	strb	r2, [r3, #0]
 8005c22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c26:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	701a      	strb	r2, [r3, #0]
 8005c2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c32:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8005c36:	460a      	mov	r2, r1
 8005c38:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8005c3a:	f107 0310 	add.w	r3, r7, #16
 8005c3e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8005c42:	f107 0308 	add.w	r3, r7, #8
 8005c46:	2207      	movs	r2, #7
 8005c48:	2100      	movs	r1, #0
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f000 fba2 	bl	8006394 <Osal_MemSet>
  int index_input = 0;
 8005c50:	2300      	movs	r3, #0
 8005c52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8005c56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c5a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c5e:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8005c62:	7812      	ldrb	r2, [r2, #0]
 8005c64:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005c66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8005c70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c74:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c78:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005c7c:	7812      	ldrb	r2, [r2, #0]
 8005c7e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005c80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005c84:	3301      	adds	r3, #1
 8005c86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8005c8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c8e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c92:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8005c96:	7812      	ldrb	r2, [r2, #0]
 8005c98:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005c9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005ca4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005ca8:	2218      	movs	r2, #24
 8005caa:	2100      	movs	r1, #0
 8005cac:	4618      	mov	r0, r3
 8005cae:	f000 fb71 	bl	8006394 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005cb2:	233f      	movs	r3, #63	; 0x3f
 8005cb4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8005cb8:	238a      	movs	r3, #138	; 0x8a
 8005cba:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005cbe:	f107 0310 	add.w	r3, r7, #16
 8005cc2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005cc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005cca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8005cce:	f107 0308 	add.w	r3, r7, #8
 8005cd2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8005cd6:	2307      	movs	r3, #7
 8005cd8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005cdc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 fdcc 	bl	8006880 <hci_send_req>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	da01      	bge.n	8005cf2 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8005cee:	23ff      	movs	r3, #255	; 0xff
 8005cf0:	e02e      	b.n	8005d50 <aci_gap_init+0x150>
  if ( resp.Status )
 8005cf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cf6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d005      	beq.n	8005d0c <aci_gap_init+0x10c>
    return resp.Status;
 8005d00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d04:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	e021      	b.n	8005d50 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8005d0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d10:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005d14:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8005d26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d2a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005d2e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005d38:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8005d3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d3e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005d42:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8005d46:	b29a      	uxth	r2, r3
 8005d48:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8005d4c:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd90      	pop	{r4, r7, pc}

08005d5a <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b0cc      	sub	sp, #304	; 0x130
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	4602      	mov	r2, r0
 8005d62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d6a:	6019      	str	r1, [r3, #0]
 8005d6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d70:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005d74:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8005d76:	f107 0310 	add.w	r3, r7, #16
 8005d7a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005d7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d82:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005d86:	2200      	movs	r2, #0
 8005d88:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8005d90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d94:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005d98:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8005d9c:	7812      	ldrb	r2, [r2, #0]
 8005d9e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005da0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005da4:	3301      	adds	r3, #1
 8005da6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8005daa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dae:	1c58      	adds	r0, r3, #1
 8005db0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005db4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005db8:	781a      	ldrb	r2, [r3, #0]
 8005dba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dc2:	6819      	ldr	r1, [r3, #0]
 8005dc4:	f000 fad6 	bl	8006374 <Osal_MemCpy>
  index_input += AdvDataLen;
 8005dc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dcc:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005ddc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005de0:	2218      	movs	r2, #24
 8005de2:	2100      	movs	r1, #0
 8005de4:	4618      	mov	r0, r3
 8005de6:	f000 fad5 	bl	8006394 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005dea:	233f      	movs	r3, #63	; 0x3f
 8005dec:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8005df0:	238e      	movs	r3, #142	; 0x8e
 8005df2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005df6:	f107 0310 	add.w	r3, r7, #16
 8005dfa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005dfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e02:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005e06:	f107 030f 	add.w	r3, r7, #15
 8005e0a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005e14:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005e18:	2100      	movs	r1, #0
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f000 fd30 	bl	8006880 <hci_send_req>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	da01      	bge.n	8005e2a <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8005e26:	23ff      	movs	r3, #255	; 0xff
 8005e28:	e004      	b.n	8005e34 <aci_gap_update_adv_data+0xda>
  return status;
 8005e2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e2e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005e32:	781b      	ldrb	r3, [r3, #0]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}

08005e3e <aci_gap_delete_ad_type>:

tBleStatus aci_gap_delete_ad_type( uint8_t ADType )
{
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b0cc      	sub	sp, #304	; 0x130
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	4602      	mov	r2, r0
 8005e46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e4a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005e4e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_delete_ad_type_cp0 *cp0 = (aci_gap_delete_ad_type_cp0*)(cmd_buffer);
 8005e50:	f107 0310 	add.w	r3, r7, #16
 8005e54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005e58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e5c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005e60:	2200      	movs	r2, #0
 8005e62:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005e64:	2300      	movs	r3, #0
 8005e66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ADType = ADType;
 8005e6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e6e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005e72:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8005e76:	7812      	ldrb	r2, [r2, #0]
 8005e78:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005e7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e7e:	3301      	adds	r3, #1
 8005e80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005e84:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005e88:	2218      	movs	r2, #24
 8005e8a:	2100      	movs	r1, #0
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f000 fa81 	bl	8006394 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005e92:	233f      	movs	r3, #63	; 0x3f
 8005e94:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08f;
 8005e98:	238f      	movs	r3, #143	; 0x8f
 8005e9a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005e9e:	f107 0310 	add.w	r3, r7, #16
 8005ea2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005ea6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005eaa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005eae:	f107 030f 	add.w	r3, r7, #15
 8005eb2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005ebc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005ec0:	2100      	movs	r1, #0
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f000 fcdc 	bl	8006880 <hci_send_req>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	da01      	bge.n	8005ed2 <aci_gap_delete_ad_type+0x94>
    return BLE_STATUS_TIMEOUT;
 8005ece:	23ff      	movs	r3, #255	; 0xff
 8005ed0:	e004      	b.n	8005edc <aci_gap_delete_ad_type+0x9e>
  return status;
 8005ed2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ed6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005eda:	781b      	ldrb	r3, [r3, #0]
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	b088      	sub	sp, #32
 8005eea:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005eec:	2300      	movs	r3, #0
 8005eee:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005ef0:	f107 0308 	add.w	r3, r7, #8
 8005ef4:	2218      	movs	r2, #24
 8005ef6:	2100      	movs	r1, #0
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f000 fa4b 	bl	8006394 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005efe:	233f      	movs	r3, #63	; 0x3f
 8005f00:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8005f02:	f240 1301 	movw	r3, #257	; 0x101
 8005f06:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005f08:	1dfb      	adds	r3, r7, #7
 8005f0a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005f10:	f107 0308 	add.w	r3, r7, #8
 8005f14:	2100      	movs	r1, #0
 8005f16:	4618      	mov	r0, r3
 8005f18:	f000 fcb2 	bl	8006880 <hci_send_req>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	da01      	bge.n	8005f26 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8005f22:	23ff      	movs	r3, #255	; 0xff
 8005f24:	e000      	b.n	8005f28 <aci_gatt_init+0x42>
  return status;
 8005f26:	79fb      	ldrb	r3, [r7, #7]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3720      	adds	r7, #32
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8005f30:	b5b0      	push	{r4, r5, r7, lr}
 8005f32:	b0cc      	sub	sp, #304	; 0x130
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	4605      	mov	r5, r0
 8005f38:	460c      	mov	r4, r1
 8005f3a:	4610      	mov	r0, r2
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f42:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005f46:	462a      	mov	r2, r5
 8005f48:	801a      	strh	r2, [r3, #0]
 8005f4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f52:	4622      	mov	r2, r4
 8005f54:	801a      	strh	r2, [r3, #0]
 8005f56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f5a:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8005f5e:	4602      	mov	r2, r0
 8005f60:	701a      	strb	r2, [r3, #0]
 8005f62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f66:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8005f6a:	460a      	mov	r2, r1
 8005f6c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8005f6e:	f107 0310 	add.w	r3, r7, #16
 8005f72:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005f76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f7a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005f7e:	2200      	movs	r2, #0
 8005f80:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005f82:	2300      	movs	r3, #0
 8005f84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8005f88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f8c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005f90:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005f94:	8812      	ldrh	r2, [r2, #0]
 8005f96:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005f98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005f9c:	3302      	adds	r3, #2
 8005f9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8005fa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fa6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005faa:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005fae:	8812      	ldrh	r2, [r2, #0]
 8005fb0:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8005fb2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005fb6:	3302      	adds	r3, #2
 8005fb8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8005fbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fc0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005fc4:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8005fc8:	7812      	ldrb	r2, [r2, #0]
 8005fca:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8005fcc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8005fd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fda:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005fde:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8005fe2:	7812      	ldrb	r2, [r2, #0]
 8005fe4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005fe6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005fea:	3301      	adds	r3, #1
 8005fec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8005ff0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ff4:	1d98      	adds	r0, r3, #6
 8005ff6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ffa:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	461a      	mov	r2, r3
 8006002:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006006:	f000 f9b5 	bl	8006374 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800600a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800600e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006018:	4413      	add	r3, r2
 800601a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800601e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006022:	2218      	movs	r2, #24
 8006024:	2100      	movs	r1, #0
 8006026:	4618      	mov	r0, r3
 8006028:	f000 f9b4 	bl	8006394 <Osal_MemSet>
  rq.ogf = 0x3f;
 800602c:	233f      	movs	r3, #63	; 0x3f
 800602e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8006032:	f44f 7383 	mov.w	r3, #262	; 0x106
 8006036:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800603a:	f107 0310 	add.w	r3, r7, #16
 800603e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006042:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006046:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800604a:	f107 030f 	add.w	r3, r7, #15
 800604e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006052:	2301      	movs	r3, #1
 8006054:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006058:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800605c:	2100      	movs	r1, #0
 800605e:	4618      	mov	r0, r3
 8006060:	f000 fc0e 	bl	8006880 <hci_send_req>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	da01      	bge.n	800606e <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800606a:	23ff      	movs	r3, #255	; 0xff
 800606c:	e004      	b.n	8006078 <aci_gatt_update_char_value+0x148>
  return status;
 800606e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006072:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006076:	781b      	ldrb	r3, [r3, #0]
}
 8006078:	4618      	mov	r0, r3
 800607a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800607e:	46bd      	mov	sp, r7
 8006080:	bdb0      	pop	{r4, r5, r7, pc}

08006082 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b0cc      	sub	sp, #304	; 0x130
 8006086:	af00      	add	r7, sp, #0
 8006088:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800608c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006090:	601a      	str	r2, [r3, #0]
 8006092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006096:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800609a:	4602      	mov	r2, r0
 800609c:	701a      	strb	r2, [r3, #0]
 800609e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060a2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80060a6:	460a      	mov	r2, r1
 80060a8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80060aa:	f107 0310 	add.w	r3, r7, #16
 80060ae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80060b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060b6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80060ba:	2200      	movs	r2, #0
 80060bc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80060be:	2300      	movs	r3, #0
 80060c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 80060c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060c8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80060cc:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80060d0:	7812      	ldrb	r2, [r2, #0]
 80060d2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80060d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80060d8:	3301      	adds	r3, #1
 80060da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 80060de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060e2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80060e6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80060ea:	7812      	ldrb	r2, [r2, #0]
 80060ec:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80060ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80060f2:	3301      	adds	r3, #1
 80060f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80060f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060fc:	1c98      	adds	r0, r3, #2
 80060fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006102:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006106:	781a      	ldrb	r2, [r3, #0]
 8006108:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800610c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006110:	6819      	ldr	r1, [r3, #0]
 8006112:	f000 f92f 	bl	8006374 <Osal_MemCpy>
  index_input += Length;
 8006116:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800611a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006124:	4413      	add	r3, r2
 8006126:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800612a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800612e:	2218      	movs	r2, #24
 8006130:	2100      	movs	r1, #0
 8006132:	4618      	mov	r0, r3
 8006134:	f000 f92e 	bl	8006394 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006138:	233f      	movs	r3, #63	; 0x3f
 800613a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800613e:	230c      	movs	r3, #12
 8006140:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006144:	f107 0310 	add.w	r3, r7, #16
 8006148:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800614c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006150:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006154:	f107 030f 	add.w	r3, r7, #15
 8006158:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800615c:	2301      	movs	r3, #1
 800615e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006162:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006166:	2100      	movs	r1, #0
 8006168:	4618      	mov	r0, r3
 800616a:	f000 fb89 	bl	8006880 <hci_send_req>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	da01      	bge.n	8006178 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8006174:	23ff      	movs	r3, #255	; 0xff
 8006176:	e004      	b.n	8006182 <aci_hal_write_config_data+0x100>
  return status;
 8006178:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800617c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006180:	781b      	ldrb	r3, [r3, #0]
}
 8006182:	4618      	mov	r0, r3
 8006184:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b0cc      	sub	sp, #304	; 0x130
 8006190:	af00      	add	r7, sp, #0
 8006192:	4602      	mov	r2, r0
 8006194:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006198:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800619c:	701a      	strb	r2, [r3, #0]
 800619e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061a2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80061a6:	460a      	mov	r2, r1
 80061a8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80061aa:	f107 0310 	add.w	r3, r7, #16
 80061ae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80061b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061b6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80061ba:	2200      	movs	r2, #0
 80061bc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80061be:	2300      	movs	r3, #0
 80061c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 80061c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061c8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80061cc:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80061d0:	7812      	ldrb	r2, [r2, #0]
 80061d2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80061d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80061d8:	3301      	adds	r3, #1
 80061da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 80061de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061e2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80061e6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80061ea:	7812      	ldrb	r2, [r2, #0]
 80061ec:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80061ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80061f2:	3301      	adds	r3, #1
 80061f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80061f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80061fc:	2218      	movs	r2, #24
 80061fe:	2100      	movs	r1, #0
 8006200:	4618      	mov	r0, r3
 8006202:	f000 f8c7 	bl	8006394 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006206:	233f      	movs	r3, #63	; 0x3f
 8006208:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800620c:	230f      	movs	r3, #15
 800620e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006212:	f107 0310 	add.w	r3, r7, #16
 8006216:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800621a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800621e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006222:	f107 030f 	add.w	r3, r7, #15
 8006226:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800622a:	2301      	movs	r3, #1
 800622c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006230:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006234:	2100      	movs	r1, #0
 8006236:	4618      	mov	r0, r3
 8006238:	f000 fb22 	bl	8006880 <hci_send_req>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	da01      	bge.n	8006246 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8006242:	23ff      	movs	r3, #255	; 0xff
 8006244:	e004      	b.n	8006250 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8006246:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800624a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800624e:	781b      	ldrb	r3, [r3, #0]
}
 8006250:	4618      	mov	r0, r3
 8006252:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800625a:	b580      	push	{r7, lr}
 800625c:	b088      	sub	sp, #32
 800625e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006260:	2300      	movs	r3, #0
 8006262:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006264:	f107 0308 	add.w	r3, r7, #8
 8006268:	2218      	movs	r2, #24
 800626a:	2100      	movs	r1, #0
 800626c:	4618      	mov	r0, r3
 800626e:	f000 f891 	bl	8006394 <Osal_MemSet>
  rq.ogf = 0x03;
 8006272:	2303      	movs	r3, #3
 8006274:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8006276:	2303      	movs	r3, #3
 8006278:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800627a:	1dfb      	adds	r3, r7, #7
 800627c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800627e:	2301      	movs	r3, #1
 8006280:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006282:	f107 0308 	add.w	r3, r7, #8
 8006286:	2100      	movs	r1, #0
 8006288:	4618      	mov	r0, r3
 800628a:	f000 faf9 	bl	8006880 <hci_send_req>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	da01      	bge.n	8006298 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006294:	23ff      	movs	r3, #255	; 0xff
 8006296:	e000      	b.n	800629a <hci_reset+0x40>
  return status;
 8006298:	79fb      	ldrb	r3, [r7, #7]
}
 800629a:	4618      	mov	r0, r3
 800629c:	3720      	adds	r7, #32
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <hci_le_set_scan_response_data>:
  return status;
}

tBleStatus hci_le_set_scan_response_data( uint8_t Scan_Response_Data_Length,
                                          const uint8_t* Scan_Response_Data )
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b0cc      	sub	sp, #304	; 0x130
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	4602      	mov	r2, r0
 80062aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062b2:	6019      	str	r1, [r3, #0]
 80062b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062b8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80062bc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
 80062be:	f107 0310 	add.w	r3, r7, #16
 80062c2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80062c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ca:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80062ce:	2200      	movs	r2, #0
 80062d0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80062d2:	2300      	movs	r3, #0
 80062d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Scan_Response_Data_Length = Scan_Response_Data_Length;
 80062d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062dc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80062e0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80062e4:	7812      	ldrb	r2, [r2, #0]
 80062e6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80062e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80062ec:	3301      	adds	r3, #1
 80062ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Scan_Response_Data, (const void*)Scan_Response_Data, 31 );
 80062f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062f6:	1c58      	adds	r0, r3, #1
 80062f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006300:	221f      	movs	r2, #31
 8006302:	6819      	ldr	r1, [r3, #0]
 8006304:	f000 f836 	bl	8006374 <Osal_MemCpy>
  index_input += 31;
 8006308:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800630c:	331f      	adds	r3, #31
 800630e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006312:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006316:	2218      	movs	r2, #24
 8006318:	2100      	movs	r1, #0
 800631a:	4618      	mov	r0, r3
 800631c:	f000 f83a 	bl	8006394 <Osal_MemSet>
  rq.ogf = 0x08;
 8006320:	2308      	movs	r3, #8
 8006322:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x009;
 8006326:	2309      	movs	r3, #9
 8006328:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800632c:	f107 0310 	add.w	r3, r7, #16
 8006330:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006334:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006338:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800633c:	f107 030f 	add.w	r3, r7, #15
 8006340:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006344:	2301      	movs	r3, #1
 8006346:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800634a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800634e:	2100      	movs	r1, #0
 8006350:	4618      	mov	r0, r3
 8006352:	f000 fa95 	bl	8006880 <hci_send_req>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	da01      	bge.n	8006360 <hci_le_set_scan_response_data+0xbe>
    return BLE_STATUS_TIMEOUT;
 800635c:	23ff      	movs	r3, #255	; 0xff
 800635e:	e004      	b.n	800636a <hci_le_set_scan_response_data+0xc8>
  return status;
 8006360:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006364:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006368:	781b      	ldrb	r3, [r3, #0]
}
 800636a:	4618      	mov	r0, r3
 800636c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	68b9      	ldr	r1, [r7, #8]
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	f002 f89b 	bl	80084c0 <memcpy>
 800638a:	4603      	mov	r3, r0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3710      	adds	r7, #16
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	68b9      	ldr	r1, [r7, #8]
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f002 f899 	bl	80084dc <memset>
 80063aa:	4603      	mov	r3, r0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 80063b4:	b480      	push	{r7}
 80063b6:	af00      	add	r7, sp, #0
  return;
 80063b8:	bf00      	nop
}
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 80063c2:	b480      	push	{r7}
 80063c4:	af00      	add	r7, sp, #0
  return;
 80063c6:	bf00      	nop
}
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 80063d0:	b480      	push	{r7}
 80063d2:	af00      	add	r7, sp, #0
  return;
 80063d4:	bf00      	nop
}
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr

080063de <DIS_Init>:
__WEAK void DIS_Init( void )
{
 80063de:	b480      	push	{r7}
 80063e0:	af00      	add	r7, sp, #0
  return;
 80063e2:	bf00      	nop
}
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 80063ec:	b480      	push	{r7}
 80063ee:	af00      	add	r7, sp, #0
  return;
 80063f0:	bf00      	nop
}
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr

080063fa <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 80063fa:	b480      	push	{r7}
 80063fc:	af00      	add	r7, sp, #0
  return;
 80063fe:	bf00      	nop
}
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8006408:	b480      	push	{r7}
 800640a:	af00      	add	r7, sp, #0
  return;
 800640c:	bf00      	nop
}
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr

08006416 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8006416:	b480      	push	{r7}
 8006418:	af00      	add	r7, sp, #0
  return;
 800641a:	bf00      	nop
}
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8006424:	b480      	push	{r7}
 8006426:	af00      	add	r7, sp, #0
  return;
 8006428:	bf00      	nop
}
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8006432:	b480      	push	{r7}
 8006434:	af00      	add	r7, sp, #0
  return;
 8006436:	bf00      	nop
}
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8006440:	b480      	push	{r7}
 8006442:	af00      	add	r7, sp, #0
  return;
 8006444:	bf00      	nop
}
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr

0800644e <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800644e:	b480      	push	{r7}
 8006450:	af00      	add	r7, sp, #0
  return;
 8006452:	bf00      	nop
}
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800645c:	b480      	push	{r7}
 800645e:	af00      	add	r7, sp, #0
  return;
 8006460:	bf00      	nop
}
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr

0800646a <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800646a:	b480      	push	{r7}
 800646c:	af00      	add	r7, sp, #0
  return;
 800646e:	bf00      	nop
}
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8006478:	b480      	push	{r7}
 800647a:	af00      	add	r7, sp, #0
  return;
 800647c:	bf00      	nop
}
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr

08006486 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8006486:	b480      	push	{r7}
 8006488:	af00      	add	r7, sp, #0
  return;
 800648a:	bf00      	nop
}
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8006494:	b480      	push	{r7}
 8006496:	af00      	add	r7, sp, #0
  return;
 8006498:	bf00      	nop
}
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr

080064a2 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 80064a2:	b480      	push	{r7}
 80064a4:	af00      	add	r7, sp, #0
  return;
 80064a6:	bf00      	nop
}
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 80064b4:	4b04      	ldr	r3, [pc, #16]	; (80064c8 <SVCCTL_Init+0x18>)
 80064b6:	2200      	movs	r2, #0
 80064b8:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 80064ba:	4b04      	ldr	r3, [pc, #16]	; (80064cc <SVCCTL_Init+0x1c>)
 80064bc:	2200      	movs	r2, #0
 80064be:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 80064c0:	f000 f806 	bl	80064d0 <SVCCTL_SvcInit>

  return;
 80064c4:	bf00      	nop
}
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	20000290 	.word	0x20000290
 80064cc:	200002b0 	.word	0x200002b0

080064d0 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	af00      	add	r7, sp, #0
  BAS_Init();
 80064d4:	f7ff ff6e 	bl	80063b4 <BAS_Init>

  BLS_Init();
 80064d8:	f7ff ff73 	bl	80063c2 <BLS_Init>

  CRS_STM_Init();
 80064dc:	f7ff ff78 	bl	80063d0 <CRS_STM_Init>

  DIS_Init();
 80064e0:	f7ff ff7d 	bl	80063de <DIS_Init>

  EDS_STM_Init();
 80064e4:	f7ff ff82 	bl	80063ec <EDS_STM_Init>

  HIDS_Init();
 80064e8:	f7ff ff87 	bl	80063fa <HIDS_Init>

  HRS_Init();
 80064ec:	f7ff ff8c 	bl	8006408 <HRS_Init>

  HTS_Init();
 80064f0:	f7ff ff91 	bl	8006416 <HTS_Init>

  IAS_Init();
 80064f4:	f7ff ff96 	bl	8006424 <IAS_Init>

  LLS_Init();
 80064f8:	f7ff ff9b 	bl	8006432 <LLS_Init>

  TPS_Init();
 80064fc:	f7ff ffa0 	bl	8006440 <TPS_Init>

  MOTENV_STM_Init();
 8006500:	f7ff ffa5 	bl	800644e <MOTENV_STM_Init>

  P2PS_STM_Init();
 8006504:	f7ff ffaa 	bl	800645c <P2PS_STM_Init>

  ZDD_STM_Init();
 8006508:	f7ff ffaf 	bl	800646a <ZDD_STM_Init>

  OTAS_STM_Init();
 800650c:	f7ff ffb4 	bl	8006478 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8006510:	f7ff ffc0 	bl	8006494 <BVOPUS_STM_Init>

  MESH_Init();
 8006514:	f7ff ffb7 	bl	8006486 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8006518:	f7ff ffc3 	bl	80064a2 <SVCCTL_InitCustomSvc>
  
  return;
 800651c:	bf00      	nop
}
 800651e:	bd80      	pop	{r7, pc}

08006520 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b086      	sub	sp, #24
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	3301      	adds	r3, #1
 800652c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800652e:	2300      	movs	r3, #0
 8006530:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	2bff      	cmp	r3, #255	; 0xff
 8006538:	d125      	bne.n	8006586 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	3302      	adds	r3, #2
 800653e:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	881b      	ldrh	r3, [r3, #0]
 8006544:	b29b      	uxth	r3, r3
 8006546:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800654a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800654e:	d118      	bne.n	8006582 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8006550:	2300      	movs	r3, #0
 8006552:	757b      	strb	r3, [r7, #21]
 8006554:	e00d      	b.n	8006572 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8006556:	7d7b      	ldrb	r3, [r7, #21]
 8006558:	4a1a      	ldr	r2, [pc, #104]	; (80065c4 <SVCCTL_UserEvtRx+0xa4>)
 800655a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	4798      	blx	r3
 8006562:	4603      	mov	r3, r0
 8006564:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8006566:	7dfb      	ldrb	r3, [r7, #23]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d108      	bne.n	800657e <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800656c:	7d7b      	ldrb	r3, [r7, #21]
 800656e:	3301      	adds	r3, #1
 8006570:	757b      	strb	r3, [r7, #21]
 8006572:	4b14      	ldr	r3, [pc, #80]	; (80065c4 <SVCCTL_UserEvtRx+0xa4>)
 8006574:	7f1b      	ldrb	r3, [r3, #28]
 8006576:	7d7a      	ldrb	r2, [r7, #21]
 8006578:	429a      	cmp	r2, r3
 800657a:	d3ec      	bcc.n	8006556 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800657c:	e002      	b.n	8006584 <SVCCTL_UserEvtRx+0x64>
              break;
 800657e:	bf00      	nop
          break;
 8006580:	e000      	b.n	8006584 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8006582:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8006584:	e000      	b.n	8006588 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8006586:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8006588:	7dfb      	ldrb	r3, [r7, #23]
 800658a:	2b02      	cmp	r3, #2
 800658c:	d00f      	beq.n	80065ae <SVCCTL_UserEvtRx+0x8e>
 800658e:	2b02      	cmp	r3, #2
 8006590:	dc10      	bgt.n	80065b4 <SVCCTL_UserEvtRx+0x94>
 8006592:	2b00      	cmp	r3, #0
 8006594:	d002      	beq.n	800659c <SVCCTL_UserEvtRx+0x7c>
 8006596:	2b01      	cmp	r3, #1
 8006598:	d006      	beq.n	80065a8 <SVCCTL_UserEvtRx+0x88>
 800659a:	e00b      	b.n	80065b4 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 ff87 	bl	80074b0 <SVCCTL_App_Notification>
 80065a2:	4603      	mov	r3, r0
 80065a4:	75bb      	strb	r3, [r7, #22]
      break;
 80065a6:	e008      	b.n	80065ba <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80065a8:	2301      	movs	r3, #1
 80065aa:	75bb      	strb	r3, [r7, #22]
      break;
 80065ac:	e005      	b.n	80065ba <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80065ae:	2300      	movs	r3, #0
 80065b0:	75bb      	strb	r3, [r7, #22]
      break;
 80065b2:	e002      	b.n	80065ba <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80065b4:	2301      	movs	r3, #1
 80065b6:	75bb      	strb	r3, [r7, #22]
      break;
 80065b8:	bf00      	nop
  }

  return (return_status);
 80065ba:	7dbb      	ldrb	r3, [r7, #22]
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3718      	adds	r7, #24
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}
 80065c4:	20000290 	.word	0x20000290

080065c8 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b088      	sub	sp, #32
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80065d0:	f107 030c 	add.w	r3, r7, #12
 80065d4:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	212c      	movs	r1, #44	; 0x2c
 80065e0:	f64f 4066 	movw	r0, #64614	; 0xfc66
 80065e4:	f000 fae2 	bl	8006bac <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	330b      	adds	r3, #11
 80065ec:	78db      	ldrb	r3, [r3, #3]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3720      	adds	r7, #32
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b088      	sub	sp, #32
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80065fe:	f107 030c 	add.w	r3, r7, #12
 8006602:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	210f      	movs	r1, #15
 800660e:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8006612:	f000 facb 	bl	8006bac <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	330b      	adds	r3, #11
 800661a:	78db      	ldrb	r3, [r3, #3]
}
 800661c:	4618      	mov	r0, r3
 800661e:	3720      	adds	r7, #32
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b088      	sub	sp, #32
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800662c:	f107 030c 	add.w	r3, r7, #12
 8006630:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	210e      	movs	r1, #14
 8006638:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800663c:	f000 fab6 	bl	8006bac <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	330b      	adds	r3, #11
 8006644:	78db      	ldrb	r3, [r3, #3]
}
 8006646:	4618      	mov	r0, r3
 8006648:	3720      	adds	r7, #32
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
	...

08006650 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8006650:	b480      	push	{r7}
 8006652:	b08b      	sub	sp, #44	; 0x2c
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8006658:	2300      	movs	r3, #0
 800665a:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800665c:	2300      	movs	r3, #0
 800665e:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8006660:	2300      	movs	r3, #0
 8006662:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8006664:	2300      	movs	r3, #0
 8006666:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8006668:	2300      	movs	r3, #0
 800666a:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800666c:	2300      	movs	r3, #0
 800666e:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8006670:	2300      	movs	r3, #0
 8006672:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8006674:	2300      	movs	r3, #0
 8006676:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8006678:	4b4a      	ldr	r3, [pc, #296]	; (80067a4 <SHCI_GetWirelessFwInfo+0x154>)
 800667a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800667c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006680:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800668a:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a44      	ldr	r2, [pc, #272]	; (80067a8 <SHCI_GetWirelessFwInfo+0x158>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d10f      	bne.n	80066bc <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	695b      	ldr	r3, [r3, #20]
 80066a0:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	69db      	ldr	r3, [r3, #28]
 80066ac:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	617b      	str	r3, [r7, #20]
 80066ba:	e01a      	b.n	80066f2 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80066c4:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80066c8:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	695b      	ldr	r3, [r3, #20]
 80066d8:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80066f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f4:	0e1b      	lsrs	r3, r3, #24
 80066f6:	b2da      	uxtb	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80066fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fe:	0c1b      	lsrs	r3, r3, #16
 8006700:	b2da      	uxtb	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8006706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006708:	0a1b      	lsrs	r3, r3, #8
 800670a:	b2da      	uxtb	r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8006710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006712:	091b      	lsrs	r3, r3, #4
 8006714:	b2db      	uxtb	r3, r3
 8006716:	f003 030f 	and.w	r3, r3, #15
 800671a:	b2da      	uxtb	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006722:	b2db      	uxtb	r3, r3
 8006724:	f003 030f 	and.w	r3, r3, #15
 8006728:	b2da      	uxtb	r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800672e:	6a3b      	ldr	r3, [r7, #32]
 8006730:	0e1b      	lsrs	r3, r3, #24
 8006732:	b2da      	uxtb	r2, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8006738:	6a3b      	ldr	r3, [r7, #32]
 800673a:	0c1b      	lsrs	r3, r3, #16
 800673c:	b2da      	uxtb	r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8006742:	6a3b      	ldr	r3, [r7, #32]
 8006744:	0a1b      	lsrs	r3, r3, #8
 8006746:	b2da      	uxtb	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800674c:	6a3b      	ldr	r3, [r7, #32]
 800674e:	b2da      	uxtb	r2, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	b2da      	uxtb	r2, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	0e1b      	lsrs	r3, r3, #24
 8006760:	b2da      	uxtb	r2, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	0c1b      	lsrs	r3, r3, #16
 800676a:	b2da      	uxtb	r2, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	0a1b      	lsrs	r3, r3, #8
 8006774:	b2da      	uxtb	r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	0e1b      	lsrs	r3, r3, #24
 800677e:	b2da      	uxtb	r2, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	0c1b      	lsrs	r3, r3, #16
 8006788:	b2da      	uxtb	r2, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	b2da      	uxtb	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	372c      	adds	r7, #44	; 0x2c
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr
 80067a4:	58004000 	.word	0x58004000
 80067a8:	a94656b9 	.word	0xa94656b9

080067ac <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	4a08      	ldr	r2, [pc, #32]	; (80067dc <hci_init+0x30>)
 80067bc:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80067be:	4a08      	ldr	r2, [pc, #32]	; (80067e0 <hci_init+0x34>)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80067c4:	4806      	ldr	r0, [pc, #24]	; (80067e0 <hci_init+0x34>)
 80067c6:	f000 f973 	bl	8006ab0 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4618      	mov	r0, r3
 80067d0:	f000 f8d4 	bl	800697c <TlInit>

  return;
 80067d4:	bf00      	nop
}
 80067d6:	3708      	adds	r7, #8
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	20000410 	.word	0x20000410
 80067e0:	200003e8 	.word	0x200003e8

080067e4 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80067ea:	4822      	ldr	r0, [pc, #136]	; (8006874 <hci_user_evt_proc+0x90>)
 80067ec:	f000 fd28 	bl	8007240 <LST_is_empty>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d12b      	bne.n	800684e <hci_user_evt_proc+0x6a>
 80067f6:	4b20      	ldr	r3, [pc, #128]	; (8006878 <hci_user_evt_proc+0x94>)
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d027      	beq.n	800684e <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80067fe:	f107 030c 	add.w	r3, r7, #12
 8006802:	4619      	mov	r1, r3
 8006804:	481b      	ldr	r0, [pc, #108]	; (8006874 <hci_user_evt_proc+0x90>)
 8006806:	f000 fdaa 	bl	800735e <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800680a:	4b1c      	ldr	r3, [pc, #112]	; (800687c <hci_user_evt_proc+0x98>)
 800680c:	69db      	ldr	r3, [r3, #28]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00c      	beq.n	800682c <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8006816:	2301      	movs	r3, #1
 8006818:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800681a:	4b18      	ldr	r3, [pc, #96]	; (800687c <hci_user_evt_proc+0x98>)
 800681c:	69db      	ldr	r3, [r3, #28]
 800681e:	1d3a      	adds	r2, r7, #4
 8006820:	4610      	mov	r0, r2
 8006822:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8006824:	793a      	ldrb	r2, [r7, #4]
 8006826:	4b14      	ldr	r3, [pc, #80]	; (8006878 <hci_user_evt_proc+0x94>)
 8006828:	701a      	strb	r2, [r3, #0]
 800682a:	e002      	b.n	8006832 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800682c:	4b12      	ldr	r3, [pc, #72]	; (8006878 <hci_user_evt_proc+0x94>)
 800682e:	2201      	movs	r2, #1
 8006830:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8006832:	4b11      	ldr	r3, [pc, #68]	; (8006878 <hci_user_evt_proc+0x94>)
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d004      	beq.n	8006844 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	4618      	mov	r0, r3
 800683e:	f000 fc03 	bl	8007048 <TL_MM_EvtDone>
 8006842:	e004      	b.n	800684e <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	4619      	mov	r1, r3
 8006848:	480a      	ldr	r0, [pc, #40]	; (8006874 <hci_user_evt_proc+0x90>)
 800684a:	f000 fd1b 	bl	8007284 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800684e:	4809      	ldr	r0, [pc, #36]	; (8006874 <hci_user_evt_proc+0x90>)
 8006850:	f000 fcf6 	bl	8007240 <LST_is_empty>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d107      	bne.n	800686a <hci_user_evt_proc+0x86>
 800685a:	4b07      	ldr	r3, [pc, #28]	; (8006878 <hci_user_evt_proc+0x94>)
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d003      	beq.n	800686a <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8006862:	4804      	ldr	r0, [pc, #16]	; (8006874 <hci_user_evt_proc+0x90>)
 8006864:	f000 ff4e 	bl	8007704 <hci_notify_asynch_evt>
  }


  return;
 8006868:	bf00      	nop
 800686a:	bf00      	nop
}
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	200002b8 	.word	0x200002b8
 8006878:	200002c4 	.word	0x200002c4
 800687c:	200003e8 	.word	0x200003e8

08006880 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b088      	sub	sp, #32
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	460b      	mov	r3, r1
 800688a:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800688c:	2000      	movs	r0, #0
 800688e:	f000 f8cb 	bl	8006a28 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8006892:	2300      	movs	r3, #0
 8006894:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	885b      	ldrh	r3, [r3, #2]
 800689a:	b21b      	sxth	r3, r3
 800689c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068a0:	b21a      	sxth	r2, r3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	881b      	ldrh	r3, [r3, #0]
 80068a6:	029b      	lsls	r3, r3, #10
 80068a8:	b21b      	sxth	r3, r3
 80068aa:	4313      	orrs	r3, r2
 80068ac:	b21b      	sxth	r3, r3
 80068ae:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	b2d9      	uxtb	r1, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	689a      	ldr	r2, [r3, #8]
 80068ba:	8bbb      	ldrh	r3, [r7, #28]
 80068bc:	4618      	mov	r0, r3
 80068be:	f000 f88d 	bl	80069dc <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80068c2:	e04e      	b.n	8006962 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80068c4:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80068c8:	f000 ff33 	bl	8007732 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80068cc:	e043      	b.n	8006956 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80068ce:	f107 030c 	add.w	r3, r7, #12
 80068d2:	4619      	mov	r1, r3
 80068d4:	4828      	ldr	r0, [pc, #160]	; (8006978 <hci_send_req+0xf8>)
 80068d6:	f000 fd42 	bl	800735e <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	7a5b      	ldrb	r3, [r3, #9]
 80068de:	2b0f      	cmp	r3, #15
 80068e0:	d114      	bne.n	800690c <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	330b      	adds	r3, #11
 80068e6:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	885b      	ldrh	r3, [r3, #2]
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	8bba      	ldrh	r2, [r7, #28]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d104      	bne.n	80068fe <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	693a      	ldr	r2, [r7, #16]
 80068fa:	7812      	ldrb	r2, [r2, #0]
 80068fc:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	785b      	ldrb	r3, [r3, #1]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d027      	beq.n	8006956 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8006906:	2301      	movs	r3, #1
 8006908:	77fb      	strb	r3, [r7, #31]
 800690a:	e024      	b.n	8006956 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	330b      	adds	r3, #11
 8006910:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006918:	b29b      	uxth	r3, r3
 800691a:	8bba      	ldrh	r2, [r7, #28]
 800691c:	429a      	cmp	r2, r3
 800691e:	d114      	bne.n	800694a <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	7a9b      	ldrb	r3, [r3, #10]
 8006924:	3b03      	subs	r3, #3
 8006926:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	695a      	ldr	r2, [r3, #20]
 800692c:	7dfb      	ldrb	r3, [r7, #23]
 800692e:	429a      	cmp	r2, r3
 8006930:	bfa8      	it	ge
 8006932:	461a      	movge	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6918      	ldr	r0, [r3, #16]
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	1cd9      	adds	r1, r3, #3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	695b      	ldr	r3, [r3, #20]
 8006944:	461a      	mov	r2, r3
 8006946:	f001 fdbb 	bl	80084c0 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d001      	beq.n	8006956 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8006952:	2301      	movs	r3, #1
 8006954:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8006956:	4808      	ldr	r0, [pc, #32]	; (8006978 <hci_send_req+0xf8>)
 8006958:	f000 fc72 	bl	8007240 <LST_is_empty>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d0b5      	beq.n	80068ce <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8006962:	7ffb      	ldrb	r3, [r7, #31]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d0ad      	beq.n	80068c4 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8006968:	2001      	movs	r0, #1
 800696a:	f000 f85d 	bl	8006a28 <NotifyCmdStatus>

  return 0;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3720      	adds	r7, #32
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}
 8006978:	20000408 	.word	0x20000408

0800697c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b086      	sub	sp, #24
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8006984:	480f      	ldr	r0, [pc, #60]	; (80069c4 <TlInit+0x48>)
 8006986:	f000 fc4b 	bl	8007220 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800698a:	4a0f      	ldr	r2, [pc, #60]	; (80069c8 <TlInit+0x4c>)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8006990:	480e      	ldr	r0, [pc, #56]	; (80069cc <TlInit+0x50>)
 8006992:	f000 fc45 	bl	8007220 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8006996:	4b0e      	ldr	r3, [pc, #56]	; (80069d0 <TlInit+0x54>)
 8006998:	2201      	movs	r2, #1
 800699a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800699c:	4b0d      	ldr	r3, [pc, #52]	; (80069d4 <TlInit+0x58>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00a      	beq.n	80069ba <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80069a8:	4b0b      	ldr	r3, [pc, #44]	; (80069d8 <TlInit+0x5c>)
 80069aa:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80069ac:	4b09      	ldr	r3, [pc, #36]	; (80069d4 <TlInit+0x58>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f107 0208 	add.w	r2, r7, #8
 80069b4:	4610      	mov	r0, r2
 80069b6:	4798      	blx	r3
  }

  return;
 80069b8:	bf00      	nop
 80069ba:	bf00      	nop
}
 80069bc:	3718      	adds	r7, #24
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	20000408 	.word	0x20000408
 80069c8:	200002c0 	.word	0x200002c0
 80069cc:	200002b8 	.word	0x200002b8
 80069d0:	200002c4 	.word	0x200002c4
 80069d4:	200003e8 	.word	0x200003e8
 80069d8:	08006a69 	.word	0x08006a69

080069dc <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	4603      	mov	r3, r0
 80069e4:	603a      	str	r2, [r7, #0]
 80069e6:	80fb      	strh	r3, [r7, #6]
 80069e8:	460b      	mov	r3, r1
 80069ea:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80069ec:	4b0c      	ldr	r3, [pc, #48]	; (8006a20 <SendCmd+0x44>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	88fa      	ldrh	r2, [r7, #6]
 80069f2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80069f6:	4b0a      	ldr	r3, [pc, #40]	; (8006a20 <SendCmd+0x44>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	797a      	ldrb	r2, [r7, #5]
 80069fc:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80069fe:	4b08      	ldr	r3, [pc, #32]	; (8006a20 <SendCmd+0x44>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	330c      	adds	r3, #12
 8006a04:	797a      	ldrb	r2, [r7, #5]
 8006a06:	6839      	ldr	r1, [r7, #0]
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f001 fd59 	bl	80084c0 <memcpy>

  hciContext.io.Send(0,0);
 8006a0e:	4b05      	ldr	r3, [pc, #20]	; (8006a24 <SendCmd+0x48>)
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	2100      	movs	r1, #0
 8006a14:	2000      	movs	r0, #0
 8006a16:	4798      	blx	r3

  return;
 8006a18:	bf00      	nop
}
 8006a1a:	3708      	adds	r7, #8
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	200002c0 	.word	0x200002c0
 8006a24:	200003e8 	.word	0x200003e8

08006a28 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	4603      	mov	r3, r0
 8006a30:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8006a32:	79fb      	ldrb	r3, [r7, #7]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d108      	bne.n	8006a4a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8006a38:	4b0a      	ldr	r3, [pc, #40]	; (8006a64 <NotifyCmdStatus+0x3c>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00d      	beq.n	8006a5c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8006a40:	4b08      	ldr	r3, [pc, #32]	; (8006a64 <NotifyCmdStatus+0x3c>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2000      	movs	r0, #0
 8006a46:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8006a48:	e008      	b.n	8006a5c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8006a4a:	4b06      	ldr	r3, [pc, #24]	; (8006a64 <NotifyCmdStatus+0x3c>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d004      	beq.n	8006a5c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8006a52:	4b04      	ldr	r3, [pc, #16]	; (8006a64 <NotifyCmdStatus+0x3c>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2001      	movs	r0, #1
 8006a58:	4798      	blx	r3
  return;
 8006a5a:	bf00      	nop
 8006a5c:	bf00      	nop
}
 8006a5e:	3708      	adds	r7, #8
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	20000410 	.word	0x20000410

08006a68 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	7a5b      	ldrb	r3, [r3, #9]
 8006a74:	2b0f      	cmp	r3, #15
 8006a76:	d003      	beq.n	8006a80 <TlEvtReceived+0x18>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	7a5b      	ldrb	r3, [r3, #9]
 8006a7c:	2b0e      	cmp	r3, #14
 8006a7e:	d107      	bne.n	8006a90 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8006a80:	6879      	ldr	r1, [r7, #4]
 8006a82:	4809      	ldr	r0, [pc, #36]	; (8006aa8 <TlEvtReceived+0x40>)
 8006a84:	f000 fc24 	bl	80072d0 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8006a88:	2000      	movs	r0, #0
 8006a8a:	f000 fe47 	bl	800771c <hci_cmd_resp_release>
 8006a8e:	e006      	b.n	8006a9e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8006a90:	6879      	ldr	r1, [r7, #4]
 8006a92:	4806      	ldr	r0, [pc, #24]	; (8006aac <TlEvtReceived+0x44>)
 8006a94:	f000 fc1c 	bl	80072d0 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8006a98:	4804      	ldr	r0, [pc, #16]	; (8006aac <TlEvtReceived+0x44>)
 8006a9a:	f000 fe33 	bl	8007704 <hci_notify_asynch_evt>
  }

  return;
 8006a9e:	bf00      	nop
}
 8006aa0:	3708      	adds	r7, #8
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	20000408 	.word	0x20000408
 8006aac:	200002b8 	.word	0x200002b8

08006ab0 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a05      	ldr	r2, [pc, #20]	; (8006ad0 <hci_register_io_bus+0x20>)
 8006abc:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a04      	ldr	r2, [pc, #16]	; (8006ad4 <hci_register_io_bus+0x24>)
 8006ac2:	611a      	str	r2, [r3, #16]

  return;
 8006ac4:	bf00      	nop
}
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr
 8006ad0:	08006dc1 	.word	0x08006dc1
 8006ad4:	08006e29 	.word	0x08006e29

08006ad8 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	4a08      	ldr	r2, [pc, #32]	; (8006b08 <shci_init+0x30>)
 8006ae8:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8006aea:	4a08      	ldr	r2, [pc, #32]	; (8006b0c <shci_init+0x34>)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8006af0:	4806      	ldr	r0, [pc, #24]	; (8006b0c <shci_init+0x34>)
 8006af2:	f000 f911 	bl	8006d18 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4618      	mov	r0, r3
 8006afc:	f000 f894 	bl	8006c28 <TlInit>

  return;
 8006b00:	bf00      	nop
}
 8006b02:	3708      	adds	r7, #8
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	20000434 	.word	0x20000434
 8006b0c:	20000414 	.word	0x20000414

08006b10 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8006b16:	4822      	ldr	r0, [pc, #136]	; (8006ba0 <shci_user_evt_proc+0x90>)
 8006b18:	f000 fb92 	bl	8007240 <LST_is_empty>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d12b      	bne.n	8006b7a <shci_user_evt_proc+0x6a>
 8006b22:	4b20      	ldr	r3, [pc, #128]	; (8006ba4 <shci_user_evt_proc+0x94>)
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d027      	beq.n	8006b7a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8006b2a:	f107 030c 	add.w	r3, r7, #12
 8006b2e:	4619      	mov	r1, r3
 8006b30:	481b      	ldr	r0, [pc, #108]	; (8006ba0 <shci_user_evt_proc+0x90>)
 8006b32:	f000 fc14 	bl	800735e <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8006b36:	4b1c      	ldr	r3, [pc, #112]	; (8006ba8 <shci_user_evt_proc+0x98>)
 8006b38:	69db      	ldr	r3, [r3, #28]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00c      	beq.n	8006b58 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8006b42:	2301      	movs	r3, #1
 8006b44:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8006b46:	4b18      	ldr	r3, [pc, #96]	; (8006ba8 <shci_user_evt_proc+0x98>)
 8006b48:	69db      	ldr	r3, [r3, #28]
 8006b4a:	1d3a      	adds	r2, r7, #4
 8006b4c:	4610      	mov	r0, r2
 8006b4e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8006b50:	793a      	ldrb	r2, [r7, #4]
 8006b52:	4b14      	ldr	r3, [pc, #80]	; (8006ba4 <shci_user_evt_proc+0x94>)
 8006b54:	701a      	strb	r2, [r3, #0]
 8006b56:	e002      	b.n	8006b5e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8006b58:	4b12      	ldr	r3, [pc, #72]	; (8006ba4 <shci_user_evt_proc+0x94>)
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8006b5e:	4b11      	ldr	r3, [pc, #68]	; (8006ba4 <shci_user_evt_proc+0x94>)
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d004      	beq.n	8006b70 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f000 fa6d 	bl	8007048 <TL_MM_EvtDone>
 8006b6e:	e004      	b.n	8006b7a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	4619      	mov	r1, r3
 8006b74:	480a      	ldr	r0, [pc, #40]	; (8006ba0 <shci_user_evt_proc+0x90>)
 8006b76:	f000 fb85 	bl	8007284 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8006b7a:	4809      	ldr	r0, [pc, #36]	; (8006ba0 <shci_user_evt_proc+0x90>)
 8006b7c:	f000 fb60 	bl	8007240 <LST_is_empty>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d107      	bne.n	8006b96 <shci_user_evt_proc+0x86>
 8006b86:	4b07      	ldr	r3, [pc, #28]	; (8006ba4 <shci_user_evt_proc+0x94>)
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d003      	beq.n	8006b96 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8006b8e:	4804      	ldr	r0, [pc, #16]	; (8006ba0 <shci_user_evt_proc+0x90>)
 8006b90:	f7fa fdc6 	bl	8001720 <shci_notify_asynch_evt>
  }


  return;
 8006b94:	bf00      	nop
 8006b96:	bf00      	nop
}
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	200002c8 	.word	0x200002c8
 8006ba4:	200002d8 	.word	0x200002d8
 8006ba8:	20000414 	.word	0x20000414

08006bac <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60ba      	str	r2, [r7, #8]
 8006bb4:	607b      	str	r3, [r7, #4]
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	81fb      	strh	r3, [r7, #14]
 8006bba:	460b      	mov	r3, r1
 8006bbc:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8006bbe:	2000      	movs	r0, #0
 8006bc0:	f000 f864 	bl	8006c8c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8006bc4:	4b16      	ldr	r3, [pc, #88]	; (8006c20 <shci_send+0x74>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	89fa      	ldrh	r2, [r7, #14]
 8006bca:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8006bce:	4b14      	ldr	r3, [pc, #80]	; (8006c20 <shci_send+0x74>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	7b7a      	ldrb	r2, [r7, #13]
 8006bd4:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8006bd6:	4b12      	ldr	r3, [pc, #72]	; (8006c20 <shci_send+0x74>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	330c      	adds	r3, #12
 8006bdc:	7b7a      	ldrb	r2, [r7, #13]
 8006bde:	68b9      	ldr	r1, [r7, #8]
 8006be0:	4618      	mov	r0, r3
 8006be2:	f001 fc6d 	bl	80084c0 <memcpy>

  shciContext.io.Send(0,0);
 8006be6:	4b0f      	ldr	r3, [pc, #60]	; (8006c24 <shci_send+0x78>)
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	2100      	movs	r1, #0
 8006bec:	2000      	movs	r0, #0
 8006bee:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8006bf0:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8006bf4:	f7fa fdab 	bl	800174e <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f103 0008 	add.w	r0, r3, #8
 8006bfe:	4b08      	ldr	r3, [pc, #32]	; (8006c20 <shci_send+0x74>)
 8006c00:	6819      	ldr	r1, [r3, #0]
 8006c02:	4b07      	ldr	r3, [pc, #28]	; (8006c20 <shci_send+0x74>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	789b      	ldrb	r3, [r3, #2]
 8006c08:	3303      	adds	r3, #3
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	f001 fc58 	bl	80084c0 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8006c10:	2001      	movs	r0, #1
 8006c12:	f000 f83b 	bl	8006c8c <Cmd_SetStatus>

  return;
 8006c16:	bf00      	nop
}
 8006c18:	3710      	adds	r7, #16
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	200002d4 	.word	0x200002d4
 8006c24:	20000414 	.word	0x20000414

08006c28 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b086      	sub	sp, #24
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8006c30:	4a10      	ldr	r2, [pc, #64]	; (8006c74 <TlInit+0x4c>)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8006c36:	4810      	ldr	r0, [pc, #64]	; (8006c78 <TlInit+0x50>)
 8006c38:	f000 faf2 	bl	8007220 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8006c3c:	2001      	movs	r0, #1
 8006c3e:	f000 f825 	bl	8006c8c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8006c42:	4b0e      	ldr	r3, [pc, #56]	; (8006c7c <TlInit+0x54>)
 8006c44:	2201      	movs	r2, #1
 8006c46:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8006c48:	4b0d      	ldr	r3, [pc, #52]	; (8006c80 <TlInit+0x58>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d00c      	beq.n	8006c6a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8006c54:	4b0b      	ldr	r3, [pc, #44]	; (8006c84 <TlInit+0x5c>)
 8006c56:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8006c58:	4b0b      	ldr	r3, [pc, #44]	; (8006c88 <TlInit+0x60>)
 8006c5a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8006c5c:	4b08      	ldr	r3, [pc, #32]	; (8006c80 <TlInit+0x58>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f107 020c 	add.w	r2, r7, #12
 8006c64:	4610      	mov	r0, r2
 8006c66:	4798      	blx	r3
  }

  return;
 8006c68:	bf00      	nop
 8006c6a:	bf00      	nop
}
 8006c6c:	3718      	adds	r7, #24
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	200002d4 	.word	0x200002d4
 8006c78:	200002c8 	.word	0x200002c8
 8006c7c:	200002d8 	.word	0x200002d8
 8006c80:	20000414 	.word	0x20000414
 8006c84:	08006cdd 	.word	0x08006cdd
 8006c88:	08006cf5 	.word	0x08006cf5

08006c8c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	4603      	mov	r3, r0
 8006c94:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8006c96:	79fb      	ldrb	r3, [r7, #7]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d10b      	bne.n	8006cb4 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8006c9c:	4b0d      	ldr	r3, [pc, #52]	; (8006cd4 <Cmd_SetStatus+0x48>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d003      	beq.n	8006cac <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8006ca4:	4b0b      	ldr	r3, [pc, #44]	; (8006cd4 <Cmd_SetStatus+0x48>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2000      	movs	r0, #0
 8006caa:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8006cac:	4b0a      	ldr	r3, [pc, #40]	; (8006cd8 <Cmd_SetStatus+0x4c>)
 8006cae:	2200      	movs	r2, #0
 8006cb0:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8006cb2:	e00b      	b.n	8006ccc <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8006cb4:	4b08      	ldr	r3, [pc, #32]	; (8006cd8 <Cmd_SetStatus+0x4c>)
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8006cba:	4b06      	ldr	r3, [pc, #24]	; (8006cd4 <Cmd_SetStatus+0x48>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d004      	beq.n	8006ccc <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8006cc2:	4b04      	ldr	r3, [pc, #16]	; (8006cd4 <Cmd_SetStatus+0x48>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2001      	movs	r0, #1
 8006cc8:	4798      	blx	r3
  return;
 8006cca:	bf00      	nop
 8006ccc:	bf00      	nop
}
 8006cce:	3708      	adds	r7, #8
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	20000434 	.word	0x20000434
 8006cd8:	200002d0 	.word	0x200002d0

08006cdc <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8006ce4:	2000      	movs	r0, #0
 8006ce6:	f7fa fd27 	bl	8001738 <shci_cmd_resp_release>

  return;
 8006cea:	bf00      	nop
}
 8006cec:	3708      	adds	r7, #8
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
	...

08006cf4 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8006cfc:	6879      	ldr	r1, [r7, #4]
 8006cfe:	4805      	ldr	r0, [pc, #20]	; (8006d14 <TlUserEvtReceived+0x20>)
 8006d00:	f000 fae6 	bl	80072d0 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8006d04:	4803      	ldr	r0, [pc, #12]	; (8006d14 <TlUserEvtReceived+0x20>)
 8006d06:	f7fa fd0b 	bl	8001720 <shci_notify_asynch_evt>

  return;
 8006d0a:	bf00      	nop
}
 8006d0c:	3708      	adds	r7, #8
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	200002c8 	.word	0x200002c8

08006d18 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a05      	ldr	r2, [pc, #20]	; (8006d38 <shci_register_io_bus+0x20>)
 8006d24:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a04      	ldr	r2, [pc, #16]	; (8006d3c <shci_register_io_bus+0x24>)
 8006d2a:	611a      	str	r2, [r3, #16]

  return;
 8006d2c:	bf00      	nop
}
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr
 8006d38:	08006ed5 	.word	0x08006ed5
 8006d3c:	08006f29 	.word	0x08006f29

08006d40 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8006d44:	f001 f80a 	bl	8007d5c <HW_IPCC_Enable>

  return;
 8006d48:	bf00      	nop
}
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <TL_Init>:


void TL_Init( void )
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8006d50:	4b10      	ldr	r3, [pc, #64]	; (8006d94 <TL_Init+0x48>)
 8006d52:	4a11      	ldr	r2, [pc, #68]	; (8006d98 <TL_Init+0x4c>)
 8006d54:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8006d56:	4b0f      	ldr	r3, [pc, #60]	; (8006d94 <TL_Init+0x48>)
 8006d58:	4a10      	ldr	r2, [pc, #64]	; (8006d9c <TL_Init+0x50>)
 8006d5a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8006d5c:	4b0d      	ldr	r3, [pc, #52]	; (8006d94 <TL_Init+0x48>)
 8006d5e:	4a10      	ldr	r2, [pc, #64]	; (8006da0 <TL_Init+0x54>)
 8006d60:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8006d62:	4b0c      	ldr	r3, [pc, #48]	; (8006d94 <TL_Init+0x48>)
 8006d64:	4a0f      	ldr	r2, [pc, #60]	; (8006da4 <TL_Init+0x58>)
 8006d66:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8006d68:	4b0a      	ldr	r3, [pc, #40]	; (8006d94 <TL_Init+0x48>)
 8006d6a:	4a0f      	ldr	r2, [pc, #60]	; (8006da8 <TL_Init+0x5c>)
 8006d6c:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8006d6e:	4b09      	ldr	r3, [pc, #36]	; (8006d94 <TL_Init+0x48>)
 8006d70:	4a0e      	ldr	r2, [pc, #56]	; (8006dac <TL_Init+0x60>)
 8006d72:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8006d74:	4b07      	ldr	r3, [pc, #28]	; (8006d94 <TL_Init+0x48>)
 8006d76:	4a0e      	ldr	r2, [pc, #56]	; (8006db0 <TL_Init+0x64>)
 8006d78:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8006d7a:	4b06      	ldr	r3, [pc, #24]	; (8006d94 <TL_Init+0x48>)
 8006d7c:	4a0d      	ldr	r2, [pc, #52]	; (8006db4 <TL_Init+0x68>)
 8006d7e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8006d80:	4b04      	ldr	r3, [pc, #16]	; (8006d94 <TL_Init+0x48>)
 8006d82:	4a0d      	ldr	r2, [pc, #52]	; (8006db8 <TL_Init+0x6c>)
 8006d84:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8006d86:	4b03      	ldr	r3, [pc, #12]	; (8006d94 <TL_Init+0x48>)
 8006d88:	4a0c      	ldr	r2, [pc, #48]	; (8006dbc <TL_Init+0x70>)
 8006d8a:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8006d8c:	f000 fffa 	bl	8007d84 <HW_IPCC_Init>

  return;
 8006d90:	bf00      	nop
}
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	20030000 	.word	0x20030000
 8006d98:	20030028 	.word	0x20030028
 8006d9c:	20030048 	.word	0x20030048
 8006da0:	20030058 	.word	0x20030058
 8006da4:	20030068 	.word	0x20030068
 8006da8:	20030070 	.word	0x20030070
 8006dac:	20030078 	.word	0x20030078
 8006db0:	20030080 	.word	0x20030080
 8006db4:	2003009c 	.word	0x2003009c
 8006db8:	200300a0 	.word	0x200300a0
 8006dbc:	200300ac 	.word	0x200300ac

08006dc0 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8006dcc:	4811      	ldr	r0, [pc, #68]	; (8006e14 <TL_BLE_Init+0x54>)
 8006dce:	f000 fa27 	bl	8007220 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8006dd2:	4b11      	ldr	r3, [pc, #68]	; (8006e18 <TL_BLE_Init+0x58>)
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	689a      	ldr	r2, [r3, #8]
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	68da      	ldr	r2, [r3, #12]
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	4a0c      	ldr	r2, [pc, #48]	; (8006e1c <TL_BLE_Init+0x5c>)
 8006dec:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	4a08      	ldr	r2, [pc, #32]	; (8006e14 <TL_BLE_Init+0x54>)
 8006df2:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8006df4:	f000 ffdc 	bl	8007db0 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a08      	ldr	r2, [pc, #32]	; (8006e20 <TL_BLE_Init+0x60>)
 8006dfe:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	4a07      	ldr	r2, [pc, #28]	; (8006e24 <TL_BLE_Init+0x64>)
 8006e06:	6013      	str	r3, [r2, #0]

  return 0;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	200300c8 	.word	0x200300c8
 8006e18:	20030000 	.word	0x20030000
 8006e1c:	20030a58 	.word	0x20030a58
 8006e20:	20000440 	.word	0x20000440
 8006e24:	20000444 	.word	0x20000444

08006e28 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	460b      	mov	r3, r1
 8006e32:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8006e34:	4b09      	ldr	r3, [pc, #36]	; (8006e5c <TL_BLE_SendCmd+0x34>)
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8006e3e:	4b07      	ldr	r3, [pc, #28]	; (8006e5c <TL_BLE_SendCmd+0x34>)
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4619      	mov	r1, r3
 8006e46:	2001      	movs	r0, #1
 8006e48:	f000 f96c 	bl	8007124 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8006e4c:	f000 ffba 	bl	8007dc4 <HW_IPCC_BLE_SendCmd>

  return 0;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3708      	adds	r7, #8
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	20030000 	.word	0x20030000

08006e60 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b082      	sub	sp, #8
 8006e64:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8006e66:	e01c      	b.n	8006ea2 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8006e68:	1d3b      	adds	r3, r7, #4
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	4812      	ldr	r0, [pc, #72]	; (8006eb8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8006e6e:	f000 fa76 	bl	800735e <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	7a5b      	ldrb	r3, [r3, #9]
 8006e76:	2b0f      	cmp	r3, #15
 8006e78:	d003      	beq.n	8006e82 <HW_IPCC_BLE_RxEvtNot+0x22>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	7a5b      	ldrb	r3, [r3, #9]
 8006e7e:	2b0e      	cmp	r3, #14
 8006e80:	d105      	bne.n	8006e8e <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4619      	mov	r1, r3
 8006e86:	2002      	movs	r0, #2
 8006e88:	f000 f94c 	bl	8007124 <OutputDbgTrace>
 8006e8c:	e004      	b.n	8006e98 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4619      	mov	r1, r3
 8006e92:	2003      	movs	r0, #3
 8006e94:	f000 f946 	bl	8007124 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8006e98:	4b08      	ldr	r3, [pc, #32]	; (8006ebc <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	4610      	mov	r0, r2
 8006ea0:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8006ea2:	4805      	ldr	r0, [pc, #20]	; (8006eb8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8006ea4:	f000 f9cc 	bl	8007240 <LST_is_empty>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d0dc      	beq.n	8006e68 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8006eae:	bf00      	nop
}
 8006eb0:	3708      	adds	r7, #8
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	200300c8 	.word	0x200300c8
 8006ebc:	20000440 	.word	0x20000440

08006ec0 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8006ec4:	4b02      	ldr	r3, [pc, #8]	; (8006ed0 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4798      	blx	r3

  return;
 8006eca:	bf00      	nop
}
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	20000444 	.word	0x20000444

08006ed4 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8006ee0:	480d      	ldr	r0, [pc, #52]	; (8006f18 <TL_SYS_Init+0x44>)
 8006ee2:	f000 f99d 	bl	8007220 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8006ee6:	4b0d      	ldr	r3, [pc, #52]	; (8006f1c <TL_SYS_Init+0x48>)
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	689a      	ldr	r2, [r3, #8]
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	4a08      	ldr	r2, [pc, #32]	; (8006f18 <TL_SYS_Init+0x44>)
 8006ef8:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8006efa:	f000 ff85 	bl	8007e08 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a07      	ldr	r2, [pc, #28]	; (8006f20 <TL_SYS_Init+0x4c>)
 8006f04:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	4a06      	ldr	r2, [pc, #24]	; (8006f24 <TL_SYS_Init+0x50>)
 8006f0c:	6013      	str	r3, [r2, #0]

  return 0;
 8006f0e:	2300      	movs	r3, #0
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3710      	adds	r7, #16
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	200300d0 	.word	0x200300d0
 8006f1c:	20030000 	.word	0x20030000
 8006f20:	20000448 	.word	0x20000448
 8006f24:	2000044c 	.word	0x2000044c

08006f28 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	460b      	mov	r3, r1
 8006f32:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8006f34:	4b09      	ldr	r3, [pc, #36]	; (8006f5c <TL_SYS_SendCmd+0x34>)
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2210      	movs	r2, #16
 8006f3c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8006f3e:	4b07      	ldr	r3, [pc, #28]	; (8006f5c <TL_SYS_SendCmd+0x34>)
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4619      	mov	r1, r3
 8006f46:	2004      	movs	r0, #4
 8006f48:	f000 f8ec 	bl	8007124 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8006f4c:	f000 ff66 	bl	8007e1c <HW_IPCC_SYS_SendCmd>

  return 0;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3708      	adds	r7, #8
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	20030000 	.word	0x20030000

08006f60 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8006f64:	4b07      	ldr	r3, [pc, #28]	; (8006f84 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	2005      	movs	r0, #5
 8006f6e:	f000 f8d9 	bl	8007124 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8006f72:	4b05      	ldr	r3, [pc, #20]	; (8006f88 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a03      	ldr	r2, [pc, #12]	; (8006f84 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8006f78:	68d2      	ldr	r2, [r2, #12]
 8006f7a:	6812      	ldr	r2, [r2, #0]
 8006f7c:	4610      	mov	r0, r2
 8006f7e:	4798      	blx	r3

  return;
 8006f80:	bf00      	nop
}
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	20030000 	.word	0x20030000
 8006f88:	20000448 	.word	0x20000448

08006f8c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8006f92:	e00e      	b.n	8006fb2 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8006f94:	1d3b      	adds	r3, r7, #4
 8006f96:	4619      	mov	r1, r3
 8006f98:	480b      	ldr	r0, [pc, #44]	; (8006fc8 <HW_IPCC_SYS_EvtNot+0x3c>)
 8006f9a:	f000 f9e0 	bl	800735e <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	2006      	movs	r0, #6
 8006fa4:	f000 f8be 	bl	8007124 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8006fa8:	4b08      	ldr	r3, [pc, #32]	; (8006fcc <HW_IPCC_SYS_EvtNot+0x40>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	4610      	mov	r0, r2
 8006fb0:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8006fb2:	4805      	ldr	r0, [pc, #20]	; (8006fc8 <HW_IPCC_SYS_EvtNot+0x3c>)
 8006fb4:	f000 f944 	bl	8007240 <LST_is_empty>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d0ea      	beq.n	8006f94 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8006fbe:	bf00      	nop
}
 8006fc0:	3708      	adds	r7, #8
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	200300d0 	.word	0x200300d0
 8006fcc:	2000044c 	.word	0x2000044c

08006fd0 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8006fd8:	4817      	ldr	r0, [pc, #92]	; (8007038 <TL_MM_Init+0x68>)
 8006fda:	f000 f921 	bl	8007220 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8006fde:	4817      	ldr	r0, [pc, #92]	; (800703c <TL_MM_Init+0x6c>)
 8006fe0:	f000 f91e 	bl	8007220 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8006fe4:	4b16      	ldr	r3, [pc, #88]	; (8007040 <TL_MM_Init+0x70>)
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	4a16      	ldr	r2, [pc, #88]	; (8007044 <TL_MM_Init+0x74>)
 8006fea:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8006fec:	4b15      	ldr	r3, [pc, #84]	; (8007044 <TL_MM_Init+0x74>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	6892      	ldr	r2, [r2, #8]
 8006ff4:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8006ff6:	4b13      	ldr	r3, [pc, #76]	; (8007044 <TL_MM_Init+0x74>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	68d2      	ldr	r2, [r2, #12]
 8006ffe:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8007000:	4b10      	ldr	r3, [pc, #64]	; (8007044 <TL_MM_Init+0x74>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a0c      	ldr	r2, [pc, #48]	; (8007038 <TL_MM_Init+0x68>)
 8007006:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8007008:	4b0e      	ldr	r3, [pc, #56]	; (8007044 <TL_MM_Init+0x74>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	6812      	ldr	r2, [r2, #0]
 8007010:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8007012:	4b0c      	ldr	r3, [pc, #48]	; (8007044 <TL_MM_Init+0x74>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	6852      	ldr	r2, [r2, #4]
 800701a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800701c:	4b09      	ldr	r3, [pc, #36]	; (8007044 <TL_MM_Init+0x74>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	6912      	ldr	r2, [r2, #16]
 8007024:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8007026:	4b07      	ldr	r3, [pc, #28]	; (8007044 <TL_MM_Init+0x74>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	6952      	ldr	r2, [r2, #20]
 800702e:	619a      	str	r2, [r3, #24]

  return;
 8007030:	bf00      	nop
}
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	200300b8 	.word	0x200300b8
 800703c:	20000438 	.word	0x20000438
 8007040:	20030000 	.word	0x20030000
 8007044:	20000450 	.word	0x20000450

08007048 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8007050:	6879      	ldr	r1, [r7, #4]
 8007052:	4807      	ldr	r0, [pc, #28]	; (8007070 <TL_MM_EvtDone+0x28>)
 8007054:	f000 f93c 	bl	80072d0 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8007058:	6879      	ldr	r1, [r7, #4]
 800705a:	2000      	movs	r0, #0
 800705c:	f000 f862 	bl	8007124 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8007060:	4804      	ldr	r0, [pc, #16]	; (8007074 <TL_MM_EvtDone+0x2c>)
 8007062:	f000 ff01 	bl	8007e68 <HW_IPCC_MM_SendFreeBuf>

  return;
 8007066:	bf00      	nop
}
 8007068:	3708      	adds	r7, #8
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	20000438 	.word	0x20000438
 8007074:	08007079 	.word	0x08007079

08007078 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800707e:	e00c      	b.n	800709a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8007080:	1d3b      	adds	r3, r7, #4
 8007082:	4619      	mov	r1, r3
 8007084:	480a      	ldr	r0, [pc, #40]	; (80070b0 <SendFreeBuf+0x38>)
 8007086:	f000 f96a 	bl	800735e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800708a:	4b0a      	ldr	r3, [pc, #40]	; (80070b4 <SendFreeBuf+0x3c>)
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	4611      	mov	r1, r2
 8007094:	4618      	mov	r0, r3
 8007096:	f000 f91b 	bl	80072d0 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800709a:	4805      	ldr	r0, [pc, #20]	; (80070b0 <SendFreeBuf+0x38>)
 800709c:	f000 f8d0 	bl	8007240 <LST_is_empty>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d0ec      	beq.n	8007080 <SendFreeBuf+0x8>
  }

  return;
 80070a6:	bf00      	nop
}
 80070a8:	3708      	adds	r7, #8
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop
 80070b0:	20000438 	.word	0x20000438
 80070b4:	20030000 	.word	0x20030000

080070b8 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 80070bc:	4805      	ldr	r0, [pc, #20]	; (80070d4 <TL_TRACES_Init+0x1c>)
 80070be:	f000 f8af 	bl	8007220 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80070c2:	4b05      	ldr	r3, [pc, #20]	; (80070d8 <TL_TRACES_Init+0x20>)
 80070c4:	695b      	ldr	r3, [r3, #20]
 80070c6:	4a03      	ldr	r2, [pc, #12]	; (80070d4 <TL_TRACES_Init+0x1c>)
 80070c8:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80070ca:	f000 ff03 	bl	8007ed4 <HW_IPCC_TRACES_Init>

  return;
 80070ce:	bf00      	nop
}
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	200300c0 	.word	0x200300c0
 80070d8:	20030000 	.word	0x20030000

080070dc <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80070e2:	e008      	b.n	80070f6 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80070e4:	1d3b      	adds	r3, r7, #4
 80070e6:	4619      	mov	r1, r3
 80070e8:	4808      	ldr	r0, [pc, #32]	; (800710c <HW_IPCC_TRACES_EvtNot+0x30>)
 80070ea:	f000 f938 	bl	800735e <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4618      	mov	r0, r3
 80070f2:	f000 f80d 	bl	8007110 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80070f6:	4805      	ldr	r0, [pc, #20]	; (800710c <HW_IPCC_TRACES_EvtNot+0x30>)
 80070f8:	f000 f8a2 	bl	8007240 <LST_is_empty>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d0f0      	beq.n	80070e4 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8007102:	bf00      	nop
}
 8007104:	3708      	adds	r7, #8
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	200300c0 	.word	0x200300c0

08007110 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8007118:	bf00      	nop
 800711a:	370c      	adds	r7, #12
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8007124:	b480      	push	{r7}
 8007126:	b085      	sub	sp, #20
 8007128:	af00      	add	r7, sp, #0
 800712a:	4603      	mov	r3, r0
 800712c:	6039      	str	r1, [r7, #0]
 800712e:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8007130:	79fb      	ldrb	r3, [r7, #7]
 8007132:	2b06      	cmp	r3, #6
 8007134:	d845      	bhi.n	80071c2 <OutputDbgTrace+0x9e>
 8007136:	a201      	add	r2, pc, #4	; (adr r2, 800713c <OutputDbgTrace+0x18>)
 8007138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800713c:	08007159 	.word	0x08007159
 8007140:	0800717d 	.word	0x0800717d
 8007144:	08007183 	.word	0x08007183
 8007148:	08007197 	.word	0x08007197
 800714c:	080071a3 	.word	0x080071a3
 8007150:	080071a9 	.word	0x080071a9
 8007154:	080071b7 	.word	0x080071b7
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	7a5b      	ldrb	r3, [r3, #9]
 8007160:	2bff      	cmp	r3, #255	; 0xff
 8007162:	d005      	beq.n	8007170 <OutputDbgTrace+0x4c>
 8007164:	2bff      	cmp	r3, #255	; 0xff
 8007166:	dc05      	bgt.n	8007174 <OutputDbgTrace+0x50>
 8007168:	2b0e      	cmp	r3, #14
 800716a:	d005      	beq.n	8007178 <OutputDbgTrace+0x54>
 800716c:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800716e:	e001      	b.n	8007174 <OutputDbgTrace+0x50>
          break;
 8007170:	bf00      	nop
 8007172:	e027      	b.n	80071c4 <OutputDbgTrace+0xa0>
          break;
 8007174:	bf00      	nop
 8007176:	e025      	b.n	80071c4 <OutputDbgTrace+0xa0>
          break;
 8007178:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800717a:	e023      	b.n	80071c4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8007180:	e020      	b.n	80071c4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	7a5b      	ldrb	r3, [r3, #9]
 800718a:	2b0e      	cmp	r3, #14
 800718c:	d001      	beq.n	8007192 <OutputDbgTrace+0x6e>
 800718e:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8007190:	e000      	b.n	8007194 <OutputDbgTrace+0x70>
          break;
 8007192:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007194:	e016      	b.n	80071c4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	7a5b      	ldrb	r3, [r3, #9]
 800719e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80071a0:	e010      	b.n	80071c4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80071a6:	e00d      	b.n	80071c4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	7a5b      	ldrb	r3, [r3, #9]
 80071b0:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80071b2:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80071b4:	e006      	b.n	80071c4 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	7a5b      	ldrb	r3, [r3, #9]
 80071be:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80071c0:	e000      	b.n	80071c4 <OutputDbgTrace+0xa0>

    default:
      break;
 80071c2:	bf00      	nop
  }

  return;
 80071c4:	bf00      	nop
}
 80071c6:	3714      	adds	r7, #20
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	4603      	mov	r3, r0
 80071d8:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80071da:	4b0f      	ldr	r3, [pc, #60]	; (8007218 <OTP_Read+0x48>)
 80071dc:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80071de:	e002      	b.n	80071e6 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	3b08      	subs	r3, #8
 80071e4:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	3307      	adds	r3, #7
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	79fa      	ldrb	r2, [r7, #7]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d003      	beq.n	80071fa <OTP_Read+0x2a>
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	4a09      	ldr	r2, [pc, #36]	; (800721c <OTP_Read+0x4c>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d1f2      	bne.n	80071e0 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	3307      	adds	r3, #7
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	79fa      	ldrb	r2, [r7, #7]
 8007202:	429a      	cmp	r2, r3
 8007204:	d001      	beq.n	800720a <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8007206:	2300      	movs	r3, #0
 8007208:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800720a:	68fb      	ldr	r3, [r7, #12]
}
 800720c:	4618      	mov	r0, r3
 800720e:	3714      	adds	r7, #20
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr
 8007218:	1fff73f8 	.word	0x1fff73f8
 800721c:	1fff7000 	.word	0x1fff7000

08007220 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	605a      	str	r2, [r3, #4]
}
 8007234:	bf00      	nop
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8007240:	b480      	push	{r7}
 8007242:	b087      	sub	sp, #28
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007248:	f3ef 8310 	mrs	r3, PRIMASK
 800724c:	60fb      	str	r3, [r7, #12]
  return(result);
 800724e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007250:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007252:	b672      	cpsid	i
}
 8007254:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	429a      	cmp	r2, r3
 800725e:	d102      	bne.n	8007266 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8007260:	2301      	movs	r3, #1
 8007262:	75fb      	strb	r3, [r7, #23]
 8007264:	e001      	b.n	800726a <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8007266:	2300      	movs	r3, #0
 8007268:	75fb      	strb	r3, [r7, #23]
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	f383 8810 	msr	PRIMASK, r3
}
 8007274:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8007276:	7dfb      	ldrb	r3, [r7, #23]
}
 8007278:	4618      	mov	r0, r3
 800727a:	371c      	adds	r7, #28
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8007284:	b480      	push	{r7}
 8007286:	b087      	sub	sp, #28
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800728e:	f3ef 8310 	mrs	r3, PRIMASK
 8007292:	60fb      	str	r3, [r7, #12]
  return(result);
 8007294:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007296:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007298:	b672      	cpsid	i
}
 800729a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	683a      	ldr	r2, [r7, #0]
 80072ae:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	683a      	ldr	r2, [r7, #0]
 80072b6:	605a      	str	r2, [r3, #4]
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	f383 8810 	msr	PRIMASK, r3
}
 80072c2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80072c4:	bf00      	nop
 80072c6:	371c      	adds	r7, #28
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b087      	sub	sp, #28
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072da:	f3ef 8310 	mrs	r3, PRIMASK
 80072de:	60fb      	str	r3, [r7, #12]
  return(result);
 80072e0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80072e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80072e4:	b672      	cpsid	i
}
 80072e6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	685a      	ldr	r2, [r3, #4]
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	683a      	ldr	r2, [r7, #0]
 80072fa:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	683a      	ldr	r2, [r7, #0]
 8007302:	601a      	str	r2, [r3, #0]
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	f383 8810 	msr	PRIMASK, r3
}
 800730e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007310:	bf00      	nop
 8007312:	371c      	adds	r7, #28
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800731c:	b480      	push	{r7}
 800731e:	b087      	sub	sp, #28
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007324:	f3ef 8310 	mrs	r3, PRIMASK
 8007328:	60fb      	str	r3, [r7, #12]
  return(result);
 800732a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800732c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800732e:	b672      	cpsid	i
}
 8007330:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	6812      	ldr	r2, [r2, #0]
 800733a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	6852      	ldr	r2, [r2, #4]
 8007344:	605a      	str	r2, [r3, #4]
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	f383 8810 	msr	PRIMASK, r3
}
 8007350:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007352:	bf00      	nop
 8007354:	371c      	adds	r7, #28
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr

0800735e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b086      	sub	sp, #24
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
 8007366:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007368:	f3ef 8310 	mrs	r3, PRIMASK
 800736c:	60fb      	str	r3, [r7, #12]
  return(result);
 800736e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007370:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007372:	b672      	cpsid	i
}
 8007374:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4618      	mov	r0, r3
 8007384:	f7ff ffca 	bl	800731c <LST_remove_node>
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	f383 8810 	msr	PRIMASK, r3
}
 8007392:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007394:	bf00      	nop
 8007396:	3718      	adds	r7, #24
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <__NVIC_SystemReset>:
{
 800739c:	b480      	push	{r7}
 800739e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80073a0:	f3bf 8f4f 	dsb	sy
}
 80073a4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80073a6:	4b06      	ldr	r3, [pc, #24]	; (80073c0 <__NVIC_SystemReset+0x24>)
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80073ae:	4904      	ldr	r1, [pc, #16]	; (80073c0 <__NVIC_SystemReset+0x24>)
 80073b0:	4b04      	ldr	r3, [pc, #16]	; (80073c4 <__NVIC_SystemReset+0x28>)
 80073b2:	4313      	orrs	r3, r2
 80073b4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80073b6:	f3bf 8f4f 	dsb	sy
}
 80073ba:	bf00      	nop
    __NOP();
 80073bc:	bf00      	nop
 80073be:	e7fd      	b.n	80073bc <__NVIC_SystemReset+0x20>
 80073c0:	e000ed00 	.word	0xe000ed00
 80073c4:	05fa0004 	.word	0x05fa0004

080073c8 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80073c8:	b480      	push	{r7}
 80073ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80073cc:	4b03      	ldr	r3, [pc, #12]	; (80073dc <LL_FLASH_GetUDN+0x14>)
 80073ce:	681b      	ldr	r3, [r3, #0]
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr
 80073da:	bf00      	nop
 80073dc:	1fff7580 	.word	0x1fff7580

080073e0 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80073e0:	b480      	push	{r7}
 80073e2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80073e4:	4b03      	ldr	r3, [pc, #12]	; (80073f4 <LL_FLASH_GetDeviceID+0x14>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	b2db      	uxtb	r3, r3
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr
 80073f4:	1fff7584 	.word	0x1fff7584

080073f8 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80073f8:	b480      	push	{r7}
 80073fa:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 80073fc:	4b03      	ldr	r3, [pc, #12]	; (800740c <LL_FLASH_GetSTCompanyID+0x14>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	0a1b      	lsrs	r3, r3, #8
}
 8007402:	4618      	mov	r0, r3
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr
 800740c:	1fff7584 	.word	0x1fff7584

08007410 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8007410:	b5b0      	push	{r4, r5, r7, lr}
 8007412:	b090      	sub	sp, #64	; 0x40
 8007414:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
  /* USER CODE BEGIN APP_BLE_Init_1 */
  UTIL_SEQ_RegTask(1<<CFG_TASK_INIT_HAND_POS, UTIL_SEQ_RFU, initHandPosition);
 8007416:	4a21      	ldr	r2, [pc, #132]	; (800749c <APP_BLE_Init+0x8c>)
 8007418:	2100      	movs	r1, #0
 800741a:	2004      	movs	r0, #4
 800741c:	f000 fee4 	bl	80081e8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1<<CFG_TASK_GET_HAND_POS, UTIL_SEQ_RFU, getHandPosition);
 8007420:	4a1f      	ldr	r2, [pc, #124]	; (80074a0 <APP_BLE_Init+0x90>)
 8007422:	2100      	movs	r1, #0
 8007424:	2008      	movs	r0, #8
 8007426:	f000 fedf 	bl	80081e8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask(1<<CFG_TASK_INIT_HAND_POS, CFG_SCH_PRIO_0);
 800742a:	2100      	movs	r1, #0
 800742c:	2004      	movs	r0, #4
 800742e:	f000 fefd 	bl	800822c <UTIL_SEQ_SetTask>
  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8007432:	4b1c      	ldr	r3, [pc, #112]	; (80074a4 <APP_BLE_Init+0x94>)
 8007434:	1d3c      	adds	r4, r7, #4
 8007436:	461d      	mov	r5, r3
 8007438:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800743a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800743c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800743e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007440:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007442:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007444:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007448:	e884 0003 	stmia.w	r4, {r0, r1}
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800744c:	f000 f864 	bl	8007518 <Ble_Tl_Init>

#if (CFG_LPM_STANDBY_SUPPORTED == 0)
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8007450:	2101      	movs	r1, #1
 8007452:	2002      	movs	r0, #2
 8007454:	f000 fd66 	bl	8007f24 <UTIL_LPM_SetOffMode>
#endif /* CFG_LPM_STANDBY_SUPPORTED == 0 */

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8007458:	4a13      	ldr	r2, [pc, #76]	; (80074a8 <APP_BLE_Init+0x98>)
 800745a:	2100      	movs	r1, #0
 800745c:	2002      	movs	r0, #2
 800745e:	f000 fec3 	bl	80081e8 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8007462:	1d3b      	adds	r3, r7, #4
 8007464:	4618      	mov	r0, r3
 8007466:	f7ff f8af 	bl	80065c8 <SHCI_C2_BLE_Init>
 800746a:	4603      	mov	r3, r0
 800746c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (status != SHCI_Success)
 8007470:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007474:	2b00      	cmp	r3, #0
 8007476:	d001      	beq.n	800747c <APP_BLE_Init+0x6c>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8007478:	f7fa fdb8 	bl	8001fec <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800747c:	f000 f862 	bl	8007544 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8007480:	f7ff f816 	bl	80064b0 <SVCCTL_Init>

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_BEACON_UPDATE_REQ_ID, UTIL_SEQ_RFU, Beacon_Update);
 8007484:	4a09      	ldr	r2, [pc, #36]	; (80074ac <APP_BLE_Init+0x9c>)
 8007486:	2100      	movs	r1, #0
 8007488:	2001      	movs	r0, #1
 800748a:	f000 fead 	bl	80081e8 <UTIL_SEQ_RegTask>
    EddystoneTLM_Process();
  }
  else if (CFG_BEACON_TYPE & CFG_IBEACON)
  {
    APP_DBG_MSG("Ibeacon advertise\n\r");
    IBeacon_Process();
 800748e:	f000 fa15 	bl	80078bc <IBeacon_Process>
  }
  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8007492:	bf00      	nop
}
 8007494:	3740      	adds	r7, #64	; 0x40
 8007496:	46bd      	mov	sp, r7
 8007498:	bdb0      	pop	{r4, r5, r7, pc}
 800749a:	bf00      	nop
 800749c:	0800790d 	.word	0x0800790d
 80074a0:	08007965 	.word	0x08007965
 80074a4:	0800b178 	.word	0x0800b178
 80074a8:	080067e5 	.word	0x080067e5
 80074ac:	08007619 	.word	0x08007619

080074b0 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b087      	sub	sp, #28
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	3301      	adds	r3, #1
 80074bc:	617b      	str	r3, [r7, #20]

  switch (p_event_pckt->evt)
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	2bff      	cmp	r3, #255	; 0xff
 80074c4:	d00e      	beq.n	80074e4 <SVCCTL_App_Notification+0x34>
 80074c6:	2bff      	cmp	r3, #255	; 0xff
 80074c8:	dc19      	bgt.n	80074fe <SVCCTL_App_Notification+0x4e>
 80074ca:	2b05      	cmp	r3, #5
 80074cc:	d019      	beq.n	8007502 <SVCCTL_App_Notification+0x52>
 80074ce:	2b3e      	cmp	r3, #62	; 0x3e
 80074d0:	d000      	beq.n	80074d4 <SVCCTL_App_Notification+0x24>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 80074d2:	e014      	b.n	80074fe <SVCCTL_App_Notification+0x4e>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	3302      	adds	r3, #2
 80074d8:	60fb      	str	r3, [r7, #12]
      switch (p_meta_evt->subevent)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	2b01      	cmp	r3, #1
          break;
 80074e0:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 80074e2:	e011      	b.n	8007508 <SVCCTL_App_Notification+0x58>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	3302      	adds	r3, #2
 80074e8:	613b      	str	r3, [r7, #16]
      switch (p_blecore_evt->ecode)
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	881b      	ldrh	r3, [r3, #0]
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	461a      	mov	r2, r3
 80074f2:	f240 4307 	movw	r3, #1031	; 0x407
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d105      	bne.n	8007506 <SVCCTL_App_Notification+0x56>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 80074fa:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80074fc:	e003      	b.n	8007506 <SVCCTL_App_Notification+0x56>
      break;
 80074fe:	bf00      	nop
 8007500:	e002      	b.n	8007508 <SVCCTL_App_Notification+0x58>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8007502:	bf00      	nop
 8007504:	e000      	b.n	8007508 <SVCCTL_App_Notification+0x58>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007506:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8007508:	2301      	movs	r3, #1
}
 800750a:	4618      	mov	r0, r3
 800750c:	371c      	adds	r7, #28
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
	...

08007518 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800751e:	4b06      	ldr	r3, [pc, #24]	; (8007538 <Ble_Tl_Init+0x20>)
 8007520:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8007522:	4b06      	ldr	r3, [pc, #24]	; (800753c <Ble_Tl_Init+0x24>)
 8007524:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8007526:	463b      	mov	r3, r7
 8007528:	4619      	mov	r1, r3
 800752a:	4805      	ldr	r0, [pc, #20]	; (8007540 <Ble_Tl_Init+0x28>)
 800752c:	f7ff f93e 	bl	80067ac <hci_init>

  return;
 8007530:	bf00      	nop
}
 8007532:	3708      	adds	r7, #8
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}
 8007538:	200300d8 	.word	0x200300d8
 800753c:	08007781 	.word	0x08007781
 8007540:	08007749 	.word	0x08007749

08007544 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8007544:	b5b0      	push	{r4, r5, r7, lr}
 8007546:	b088      	sub	sp, #32
 8007548:	af02      	add	r7, sp, #8
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800754a:	2300      	movs	r3, #0
 800754c:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800754e:	2392      	movs	r3, #146	; 0x92
 8007550:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8007552:	f7fe fe82 	bl	800625a <hci_reset>
 8007556:	4603      	mov	r3, r0
 8007558:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800755a:	f000 f88f 	bl	800767c <BleGetBdAddress>
 800755e:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8007560:	693a      	ldr	r2, [r7, #16]
 8007562:	2106      	movs	r1, #6
 8007564:	2000      	movs	r0, #0
 8007566:	f7fe fd8c 	bl	8006082 <aci_hal_write_config_data>
 800756a:	4603      	mov	r3, r0
 800756c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800756e:	4a27      	ldr	r2, [pc, #156]	; (800760c <Ble_Hci_Gap_Gatt_Init+0xc8>)
 8007570:	2110      	movs	r1, #16
 8007572:	2018      	movs	r0, #24
 8007574:	f7fe fd85 	bl	8006082 <aci_hal_write_config_data>
 8007578:	4603      	mov	r3, r0
 800757a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800757c:	4a24      	ldr	r2, [pc, #144]	; (8007610 <Ble_Hci_Gap_Gatt_Init+0xcc>)
 800757e:	2110      	movs	r1, #16
 8007580:	2008      	movs	r0, #8
 8007582:	f7fe fd7e 	bl	8006082 <aci_hal_write_config_data>
 8007586:	4603      	mov	r3, r0
 8007588:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800758a:	2119      	movs	r1, #25
 800758c:	2001      	movs	r0, #1
 800758e:	f7fe fdfd 	bl	800618c <aci_hal_set_tx_power_level>
 8007592:	4603      	mov	r3, r0
 8007594:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8007596:	f7fe fca6 	bl	8005ee6 <aci_gatt_init>
 800759a:	4603      	mov	r3, r0
 800759c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800759e:	2300      	movs	r3, #0
 80075a0:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80075a2:	7bfb      	ldrb	r3, [r7, #15]
 80075a4:	f043 0301 	orr.w	r3, r3, #1
 80075a8:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif /* BLE_CFG_CENTRAL == 1 */

  if (role > 0)
 80075aa:	7bfb      	ldrb	r3, [r7, #15]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d01f      	beq.n	80075f0 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = "STM32WB";
 80075b0:	4b18      	ldr	r3, [pc, #96]	; (8007614 <Ble_Hci_Gap_Gatt_Init+0xd0>)
 80075b2:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 80075b4:	1dba      	adds	r2, r7, #6
 80075b6:	7bf8      	ldrb	r0, [r7, #15]
 80075b8:	1cbb      	adds	r3, r7, #2
 80075ba:	9301      	str	r3, [sp, #4]
 80075bc:	1d3b      	adds	r3, r7, #4
 80075be:	9300      	str	r3, [sp, #0]
 80075c0:	4613      	mov	r3, r2
 80075c2:	2207      	movs	r2, #7
 80075c4:	2100      	movs	r1, #0
 80075c6:	f7fe fb1b 	bl	8005c00 <aci_gap_init>
 80075ca:	4603      	mov	r3, r0
 80075cc:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 80075ce:	88fc      	ldrh	r4, [r7, #6]
 80075d0:	88bd      	ldrh	r5, [r7, #4]
 80075d2:	68b8      	ldr	r0, [r7, #8]
 80075d4:	f7f8 fdd4 	bl	8000180 <strlen>
 80075d8:	4603      	mov	r3, r0
 80075da:	b2da      	uxtb	r2, r3
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	9300      	str	r3, [sp, #0]
 80075e0:	4613      	mov	r3, r2
 80075e2:	2200      	movs	r2, #0
 80075e4:	4629      	mov	r1, r5
 80075e6:	4620      	mov	r0, r4
 80075e8:	f7fe fca2 	bl	8005f30 <aci_gatt_update_char_value>
 80075ec:	4603      	mov	r3, r0
 80075ee:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 80075f0:	88f8      	ldrh	r0, [r7, #6]
 80075f2:	8879      	ldrh	r1, [r7, #2]
 80075f4:	463b      	mov	r3, r7
 80075f6:	9300      	str	r3, [sp, #0]
 80075f8:	2302      	movs	r3, #2
 80075fa:	2200      	movs	r2, #0
 80075fc:	f7fe fc98 	bl	8005f30 <aci_gatt_update_char_value>
 8007600:	4603      	mov	r3, r0
 8007602:	75fb      	strb	r3, [r7, #23]
  else
  {
    BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Appearance\n");
  }

}
 8007604:	bf00      	nop
 8007606:	3718      	adds	r7, #24
 8007608:	46bd      	mov	sp, r7
 800760a:	bdb0      	pop	{r4, r5, r7, pc}
 800760c:	0800b3b8 	.word	0x0800b3b8
 8007610:	0800b3c8 	.word	0x0800b3c8
 8007614:	0800b1b0 	.word	0x0800b1b0

08007618 <Beacon_Update>:
static void Beacon_Update(void)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
  FLASH_EraseInitTypeDef erase;
  uint32_t pageError = 0;
 800761e:	2300      	movs	r3, #0
 8007620:	603b      	str	r3, [r7, #0]

  if (sector_type != 0)
 8007622:	4b13      	ldr	r3, [pc, #76]	; (8007670 <Beacon_Update+0x58>)
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d01b      	beq.n	8007662 <Beacon_Update+0x4a>
  {
    erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800762a:	2302      	movs	r3, #2
 800762c:	607b      	str	r3, [r7, #4]
    erase.Page      = sector_type;
 800762e:	4b10      	ldr	r3, [pc, #64]	; (8007670 <Beacon_Update+0x58>)
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	60bb      	str	r3, [r7, #8]
    if (sector_type == APP_SECTORS)
 8007634:	4b0e      	ldr	r3, [pc, #56]	; (8007670 <Beacon_Update+0x58>)
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	2b07      	cmp	r3, #7
 800763a:	d102      	bne.n	8007642 <Beacon_Update+0x2a>
    {
      erase.NbPages = 2;  /* 2 sectors for beacon application */
 800763c:	2302      	movs	r3, #2
 800763e:	60fb      	str	r3, [r7, #12]
 8007640:	e001      	b.n	8007646 <Beacon_Update+0x2e>
    }
    else
    {
      erase.NbPages = 1; /* 1 sector for beacon user data */
 8007642:	2301      	movs	r3, #1
 8007644:	60fb      	str	r3, [r7, #12]
    }

    HAL_FLASH_Unlock();
 8007646:	f7fb fb27 	bl	8002c98 <HAL_FLASH_Unlock>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_OPTVERR);
 800764a:	4b0a      	ldr	r3, [pc, #40]	; (8007674 <Beacon_Update+0x5c>)
 800764c:	f248 0211 	movw	r2, #32785	; 0x8011
 8007650:	611a      	str	r2, [r3, #16]

    HAL_FLASHEx_Erase(&erase, &pageError);
 8007652:	463a      	mov	r2, r7
 8007654:	1d3b      	adds	r3, r7, #4
 8007656:	4611      	mov	r1, r2
 8007658:	4618      	mov	r0, r3
 800765a:	f7fb fbc9 	bl	8002df0 <HAL_FLASHEx_Erase>

    HAL_FLASH_Lock();
 800765e:	f7fb fb3d 	bl	8002cdc <HAL_FLASH_Lock>
  }

  *(uint32_t*) SRAM1_BASE = BOOT_MODE_AND_SECTOR;
 8007662:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8007666:	4a04      	ldr	r2, [pc, #16]	; (8007678 <Beacon_Update+0x60>)
 8007668:	601a      	str	r2, [r3, #0]
  /**
   * Boot Mode:    1 (OTA)
   * Sector Index: 6
   * Nb Sectors  : 1
   */
  NVIC_SystemReset();
 800766a:	f7ff fe97 	bl	800739c <__NVIC_SystemReset>
 800766e:	bf00      	nop
 8007670:	2000045a 	.word	0x2000045a
 8007674:	58004000 	.word	0x58004000
 8007678:	00010601 	.word	0x00010601

0800767c <BleGetBdAddress>:
}

const uint8_t* BleGetBdAddress(void)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b086      	sub	sp, #24
 8007680:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8007682:	f7ff fea1 	bl	80073c8 <LL_FLASH_GetUDN>
 8007686:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800768e:	d023      	beq.n	80076d8 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8007690:	f7ff feb2 	bl	80073f8 <LL_FLASH_GetSTCompanyID>
 8007694:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8007696:	f7ff fea3 	bl	80073e0 <LL_FLASH_GetDeviceID>
 800769a:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	b2da      	uxtb	r2, r3
 80076a0:	4b16      	ldr	r3, [pc, #88]	; (80076fc <BleGetBdAddress+0x80>)
 80076a2:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	0a1b      	lsrs	r3, r3, #8
 80076a8:	b2da      	uxtb	r2, r3
 80076aa:	4b14      	ldr	r3, [pc, #80]	; (80076fc <BleGetBdAddress+0x80>)
 80076ac:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	b2da      	uxtb	r2, r3
 80076b2:	4b12      	ldr	r3, [pc, #72]	; (80076fc <BleGetBdAddress+0x80>)
 80076b4:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	b2da      	uxtb	r2, r3
 80076ba:	4b10      	ldr	r3, [pc, #64]	; (80076fc <BleGetBdAddress+0x80>)
 80076bc:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	0a1b      	lsrs	r3, r3, #8
 80076c2:	b2da      	uxtb	r2, r3
 80076c4:	4b0d      	ldr	r3, [pc, #52]	; (80076fc <BleGetBdAddress+0x80>)
 80076c6:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	0c1b      	lsrs	r3, r3, #16
 80076cc:	b2da      	uxtb	r2, r3
 80076ce:	4b0b      	ldr	r3, [pc, #44]	; (80076fc <BleGetBdAddress+0x80>)
 80076d0:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 80076d2:	4b0a      	ldr	r3, [pc, #40]	; (80076fc <BleGetBdAddress+0x80>)
 80076d4:	617b      	str	r3, [r7, #20]
 80076d6:	e00b      	b.n	80076f0 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 80076d8:	2000      	movs	r0, #0
 80076da:	f7ff fd79 	bl	80071d0 <OTP_Read>
 80076de:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d002      	beq.n	80076ec <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	617b      	str	r3, [r7, #20]
 80076ea:	e001      	b.n	80076f0 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 80076ec:	4b04      	ldr	r3, [pc, #16]	; (8007700 <BleGetBdAddress+0x84>)
 80076ee:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 80076f0:	697b      	ldr	r3, [r7, #20]
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3718      	adds	r7, #24
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	bf00      	nop
 80076fc:	20000454 	.word	0x20000454
 8007700:	0800b3b0 	.word	0x0800b3b0

08007704 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800770c:	2100      	movs	r1, #0
 800770e:	2002      	movs	r0, #2
 8007710:	f000 fd8c 	bl	800822c <UTIL_SEQ_SetTask>

  return;
 8007714:	bf00      	nop
}
 8007716:	3708      	adds	r7, #8
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8007724:	2001      	movs	r0, #1
 8007726:	f000 fded 	bl	8008304 <UTIL_SEQ_SetEvt>

  return;
 800772a:	bf00      	nop
}
 800772c:	3708      	adds	r7, #8
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b082      	sub	sp, #8
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800773a:	2001      	movs	r0, #1
 800773c:	f000 fe02 	bl	8008344 <UTIL_SEQ_WaitEvt>

  return;
 8007740:	bf00      	nop
}
 8007742:	3708      	adds	r7, #8
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	3308      	adds	r3, #8
 800775a:	4618      	mov	r0, r3
 800775c:	f7fe fee0 	bl	8006520 <SVCCTL_UserEvtRx>
 8007760:	4603      	mov	r3, r0
 8007762:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8007764:	7afb      	ldrb	r3, [r7, #11]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d003      	beq.n	8007772 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2201      	movs	r2, #1
 800776e:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8007770:	e003      	b.n	800777a <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2200      	movs	r2, #0
 8007776:	701a      	strb	r2, [r3, #0]
  return;
 8007778:	bf00      	nop
}
 800777a:	3710      	adds	r7, #16
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	4603      	mov	r3, r0
 8007788:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800778a:	79fb      	ldrb	r3, [r7, #7]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d002      	beq.n	8007796 <BLE_StatusNot+0x16>
 8007790:	2b01      	cmp	r3, #1
 8007792:	d006      	beq.n	80077a2 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8007794:	e00b      	b.n	80077ae <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8007796:	230f      	movs	r3, #15
 8007798:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	f000 fd72 	bl	8008284 <UTIL_SEQ_PauseTask>
      break;
 80077a0:	e005      	b.n	80077ae <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80077a2:	230f      	movs	r3, #15
 80077a4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	f000 fd8c 	bl	80082c4 <UTIL_SEQ_ResumeTask>
      break;
 80077ac:	bf00      	nop
  }

  return;
 80077ae:	bf00      	nop
}
 80077b0:	3710      	adds	r7, #16
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
	...

080077b8 <IBeacon_Init>:
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/

static tBleStatus IBeacon_Init(IBeacon_InitTypeDef *IBeacon_Init)
{
 80077b8:	b5b0      	push	{r4, r5, r7, lr}
 80077ba:	b094      	sub	sp, #80	; 0x50
 80077bc:	af08      	add	r7, sp, #32
 80077be:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN IBeacon_Init_1 */

/* USER CODE END IBeacon_Init_1 */
  tBleStatus ret = BLE_STATUS_SUCCESS;
 80077c0:	2300      	movs	r3, #0
 80077c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint16_t AdvertisingInterval = (IBeacon_Init->AdvertisingInterval * ADVERTISING_INTERVAL_INCREMENT / 10);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	881b      	ldrh	r3, [r3, #0]
 80077ca:	011b      	lsls	r3, r3, #4
 80077cc:	4a38      	ldr	r2, [pc, #224]	; (80078b0 <IBeacon_Init+0xf8>)
 80077ce:	fb82 1203 	smull	r1, r2, r2, r3
 80077d2:	1092      	asrs	r2, r2, #2
 80077d4:	17db      	asrs	r3, r3, #31
 80077d6:	1ad3      	subs	r3, r2, r3
 80077d8:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* Disable scan response. */
  hci_le_set_scan_response_data(0, NULL);
 80077da:	2100      	movs	r1, #0
 80077dc:	2000      	movs	r0, #0
 80077de:	f7fe fd60 	bl	80062a2 <hci_le_set_scan_response_data>

  /* Put the device in a non-connectable mode. */
  ret = aci_gap_set_discoverable(ADV_NONCONN_IND,                          /*< Advertise as non-connectable, undirected. */
 80077e2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80077e4:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 80077e6:	2300      	movs	r3, #0
 80077e8:	9306      	str	r3, [sp, #24]
 80077ea:	2300      	movs	r3, #0
 80077ec:	9305      	str	r3, [sp, #20]
 80077ee:	2300      	movs	r3, #0
 80077f0:	9304      	str	r3, [sp, #16]
 80077f2:	2300      	movs	r3, #0
 80077f4:	9303      	str	r3, [sp, #12]
 80077f6:	2300      	movs	r3, #0
 80077f8:	9302      	str	r3, [sp, #8]
 80077fa:	2300      	movs	r3, #0
 80077fc:	9301      	str	r3, [sp, #4]
 80077fe:	2300      	movs	r3, #0
 8007800:	9300      	str	r3, [sp, #0]
 8007802:	2300      	movs	r3, #0
 8007804:	2003      	movs	r0, #3
 8007806:	f7fe f901 	bl	8005a0c <aci_gap_set_discoverable>
 800780a:	4603      	mov	r3, r0
 800780c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                 PUBLIC_ADDR, NO_WHITE_LIST_USE,           /*< Use the public address, with no white list. */
                                 0, NULL,                                  /*< Do not use a local name. */
                                 0, NULL,                                  /*< Do not include the service UUID list. */
                                 0, 0);                                    /*< Do not set a slave connection interval. */

  if (ret != BLE_STATUS_SUCCESS)
 8007810:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007814:	2b00      	cmp	r3, #0
 8007816:	d002      	beq.n	800781e <IBeacon_Init+0x66>
  {
    return ret;
 8007818:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800781c:	e044      	b.n	80078a8 <IBeacon_Init+0xf0>
  }

  /* Remove the TX power level advertisement (this is done to decrease the packet size). */
  ret = aci_gap_delete_ad_type(AD_TYPE_TX_POWER_LEVEL);
 800781e:	200a      	movs	r0, #10
 8007820:	f7fe fb0d 	bl	8005e3e <aci_gap_delete_ad_type>
 8007824:	4603      	mov	r3, r0
 8007826:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 800782a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800782e:	2b00      	cmp	r3, #0
 8007830:	d002      	beq.n	8007838 <IBeacon_Init+0x80>
  {
    return ret;
 8007832:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007836:	e037      	b.n	80078a8 <IBeacon_Init+0xf0>
  }

	 uint8_t service_data[] =
 8007838:	4b1e      	ldr	r3, [pc, #120]	; (80078b4 <IBeacon_Init+0xfc>)
 800783a:	f107 0410 	add.w	r4, r7, #16
 800783e:	461d      	mov	r5, r3
 8007840:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007842:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007844:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007848:	c403      	stmia	r4!, {r0, r1}
 800784a:	8022      	strh	r2, [r4, #0]
 800784c:	3402      	adds	r4, #2
 800784e:	0c13      	lsrs	r3, r2, #16
 8007850:	7023      	strb	r3, [r4, #0]
	   0x00, 0x02,					 	 	 					 /*< 2-byte Major */
	   0x00, 0x01,					 		 			 		 /*< 2-byte Hand Position */
	   0x01,						     		 				 /*< 1-byte Power*/
	 };

  uint8_t flags[] =
 8007852:	4a19      	ldr	r2, [pc, #100]	; (80078b8 <IBeacon_Init+0x100>)
 8007854:	f107 030c 	add.w	r3, r7, #12
 8007858:	6812      	ldr	r2, [r2, #0]
 800785a:	4611      	mov	r1, r2
 800785c:	8019      	strh	r1, [r3, #0]
 800785e:	3302      	adds	r3, #2
 8007860:	0c12      	lsrs	r2, r2, #16
 8007862:	701a      	strb	r2, [r3, #0]
    AD_TYPE_FLAGS,                                                          /*< Flags data type value. */
    (FLAG_BIT_LE_GENERAL_DISCOVERABLE_MODE | FLAG_BIT_BR_EDR_NOT_SUPPORTED) /*< BLE general discoverable, without BR/EDR support. */
  };

  /* Update the service data. */
  ret = aci_gap_update_adv_data(sizeof(service_data), service_data);
 8007864:	f107 0310 	add.w	r3, r7, #16
 8007868:	4619      	mov	r1, r3
 800786a:	201b      	movs	r0, #27
 800786c:	f7fe fa75 	bl	8005d5a <aci_gap_update_adv_data>
 8007870:	4603      	mov	r3, r0
 8007872:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 8007876:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800787a:	2b00      	cmp	r3, #0
 800787c:	d002      	beq.n	8007884 <IBeacon_Init+0xcc>
  {
    return ret;
 800787e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007882:	e011      	b.n	80078a8 <IBeacon_Init+0xf0>
  }

  /* Update the adverstising flags. */
  ret = aci_gap_update_adv_data(sizeof(flags), flags);
 8007884:	f107 030c 	add.w	r3, r7, #12
 8007888:	4619      	mov	r1, r3
 800788a:	2003      	movs	r0, #3
 800788c:	f7fe fa65 	bl	8005d5a <aci_gap_update_adv_data>
 8007890:	4603      	mov	r3, r0
 8007892:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 8007896:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800789a:	2b00      	cmp	r3, #0
 800789c:	d002      	beq.n	80078a4 <IBeacon_Init+0xec>
  {
    return ret;
 800789e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80078a2:	e001      	b.n	80078a8 <IBeacon_Init+0xf0>
  }
/* USER CODE BEGIN IBeacon_Init_2 */

/* USER CODE END IBeacon_Init_2 */
  return ret;
 80078a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3730      	adds	r7, #48	; 0x30
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bdb0      	pop	{r4, r5, r7, pc}
 80078b0:	66666667 	.word	0x66666667
 80078b4:	0800b1b8 	.word	0x0800b1b8
 80078b8:	0800b1d4 	.word	0x0800b1d4

080078bc <IBeacon_Process>:

void IBeacon_Process(void)
{
 80078bc:	b590      	push	{r4, r7, lr}
 80078be:	b08d      	sub	sp, #52	; 0x34
 80078c0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN IBeacon_Process_1 */

/* USER CODE END IBeacon_Process_1 */
  /* Default ibeacon */
  uint8_t UuID[]    = { UUID };
 80078c2:	4b11      	ldr	r3, [pc, #68]	; (8007908 <IBeacon_Process+0x4c>)
 80078c4:	f107 0420 	add.w	r4, r7, #32
 80078c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80078ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint8_t MajorID[] = { MAJOR_ID };
 80078ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078d2:	83bb      	strh	r3, [r7, #28]
  uint8_t MinorID[] = { MINOR_ID };
 80078d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078d8:	833b      	strh	r3, [r7, #24]

  IBeacon_InitTypeDef IBeacon_InitStruct =
 80078da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80078de:	80bb      	strh	r3, [r7, #4]
 80078e0:	f107 0320 	add.w	r3, r7, #32
 80078e4:	60bb      	str	r3, [r7, #8]
 80078e6:	f107 031c 	add.w	r3, r7, #28
 80078ea:	60fb      	str	r3, [r7, #12]
 80078ec:	f107 0318 	add.w	r3, r7, #24
 80078f0:	613b      	str	r3, [r7, #16]
 80078f2:	23c1      	movs	r3, #193	; 0xc1
 80078f4:	753b      	strb	r3, [r7, #20]
    data_address += 2;
    IBeacon_InitStruct.CalibratedTxPower = *(uint8_t *)(data_address);
  }
#endif

  IBeacon_Init(&IBeacon_InitStruct);
 80078f6:	1d3b      	adds	r3, r7, #4
 80078f8:	4618      	mov	r0, r3
 80078fa:	f7ff ff5d 	bl	80077b8 <IBeacon_Init>
/* USER CODE BEGIN IBeacon_Process_2 */

/* USER CODE END IBeacon_Process_2 */
}
 80078fe:	bf00      	nop
 8007900:	3734      	adds	r7, #52	; 0x34
 8007902:	46bd      	mov	sp, r7
 8007904:	bd90      	pop	{r4, r7, pc}
 8007906:	bf00      	nop
 8007908:	0800b1d8 	.word	0x0800b1d8

0800790c <initHandPosition>:
/* USER CODE BEGIN FD */
void initHandPosition(void) {
 800790c:	b590      	push	{r4, r7, lr}
 800790e:	b095      	sub	sp, #84	; 0x54
 8007910:	af14      	add	r7, sp, #80	; 0x50
	  LSM6DSM_stop_acc(hi2c1,AODR_POWER_DOWN);
 8007912:	4c13      	ldr	r4, [pc, #76]	; (8007960 <initHandPosition+0x54>)
 8007914:	2300      	movs	r3, #0
 8007916:	9311      	str	r3, [sp, #68]	; 0x44
 8007918:	4668      	mov	r0, sp
 800791a:	f104 0310 	add.w	r3, r4, #16
 800791e:	2244      	movs	r2, #68	; 0x44
 8007920:	4619      	mov	r1, r3
 8007922:	f000 fdcd 	bl	80084c0 <memcpy>
 8007926:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800792a:	f7f9 f961 	bl	8000bf0 <LSM6DSM_stop_acc>
	  LSM6DSM_start_gyro(hi2c1, GFS_500DPS, GODR_26Hz);
 800792e:	4c0c      	ldr	r4, [pc, #48]	; (8007960 <initHandPosition+0x54>)
 8007930:	2302      	movs	r3, #2
 8007932:	9312      	str	r3, [sp, #72]	; 0x48
 8007934:	2301      	movs	r3, #1
 8007936:	9311      	str	r3, [sp, #68]	; 0x44
 8007938:	4668      	mov	r0, sp
 800793a:	f104 0310 	add.w	r3, r4, #16
 800793e:	2244      	movs	r2, #68	; 0x44
 8007940:	4619      	mov	r1, r3
 8007942:	f000 fdbd 	bl	80084c0 <memcpy>
 8007946:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800794a:	f7f9 f905 	bl	8000b58 <LSM6DSM_start_gyro>
	  UTIL_SEQ_SetTask(1<<CFG_TASK_GET_HAND_POS, CFG_SCH_PRIO_0);
 800794e:	2100      	movs	r1, #0
 8007950:	2008      	movs	r0, #8
 8007952:	f000 fc6b 	bl	800822c <UTIL_SEQ_SetTask>
}
 8007956:	bf00      	nop
 8007958:	3704      	adds	r7, #4
 800795a:	46bd      	mov	sp, r7
 800795c:	bd90      	pop	{r4, r7, pc}
 800795e:	bf00      	nop
 8007960:	20000304 	.word	0x20000304

08007964 <getHandPosition>:

void getHandPosition(void) {
 8007964:	b590      	push	{r4, r7, lr}
 8007966:	b09b      	sub	sp, #108	; 0x6c
 8007968:	af12      	add	r7, sp, #72	; 0x48
	 HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800796a:	483a      	ldr	r0, [pc, #232]	; (8007a54 <getHandPosition+0xf0>)
 800796c:	f7fd ffca 	bl	8005904 <HAL_RTCEx_DeactivateWakeUpTimer>
	 LSM6DSM_wait_for_Data(hi2c1);
 8007970:	4c39      	ldr	r4, [pc, #228]	; (8007a58 <getHandPosition+0xf4>)
 8007972:	4668      	mov	r0, sp
 8007974:	f104 0310 	add.w	r3, r4, #16
 8007978:	2244      	movs	r2, #68	; 0x44
 800797a:	4619      	mov	r1, r3
 800797c:	f000 fda0 	bl	80084c0 <memcpy>
 8007980:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007984:	f7f9 fae8 	bl	8000f58 <LSM6DSM_wait_for_Data>
     LSM6DSM_readGyro(hi2c1, data);
 8007988:	4c33      	ldr	r4, [pc, #204]	; (8007a58 <getHandPosition+0xf4>)
 800798a:	4b34      	ldr	r3, [pc, #208]	; (8007a5c <getHandPosition+0xf8>)
 800798c:	9311      	str	r3, [sp, #68]	; 0x44
 800798e:	4668      	mov	r0, sp
 8007990:	f104 0310 	add.w	r3, r4, #16
 8007994:	2244      	movs	r2, #68	; 0x44
 8007996:	4619      	mov	r1, r3
 8007998:	f000 fd92 	bl	80084c0 <memcpy>
 800799c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80079a0:	f7f9 f9a0 	bl	8000ce4 <LSM6DSM_readGyro>
	 handPos_state = runAlgo();
 80079a4:	f7fa f81a 	bl	80019dc <runAlgo>
 80079a8:	4603      	mov	r3, r0
 80079aa:	461a      	mov	r2, r3
 80079ac:	4b2c      	ldr	r3, [pc, #176]	; (8007a60 <getHandPosition+0xfc>)
 80079ae:	701a      	strb	r2, [r3, #0]
	 if(handPos_state) {
 80079b0:	4b2b      	ldr	r3, [pc, #172]	; (8007a60 <getHandPosition+0xfc>)
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d03b      	beq.n	8007a30 <getHandPosition+0xcc>
		 uint8_t service_data[] =
 80079b8:	231a      	movs	r3, #26
 80079ba:	713b      	strb	r3, [r7, #4]
 80079bc:	23ff      	movs	r3, #255	; 0xff
 80079be:	717b      	strb	r3, [r7, #5]
 80079c0:	234c      	movs	r3, #76	; 0x4c
 80079c2:	71bb      	strb	r3, [r7, #6]
 80079c4:	2300      	movs	r3, #0
 80079c6:	71fb      	strb	r3, [r7, #7]
 80079c8:	2302      	movs	r3, #2
 80079ca:	723b      	strb	r3, [r7, #8]
 80079cc:	2315      	movs	r3, #21
 80079ce:	727b      	strb	r3, [r7, #9]
 80079d0:	2300      	movs	r3, #0
 80079d2:	72bb      	strb	r3, [r7, #10]
 80079d4:	2300      	movs	r3, #0
 80079d6:	72fb      	strb	r3, [r7, #11]
 80079d8:	2300      	movs	r3, #0
 80079da:	733b      	strb	r3, [r7, #12]
 80079dc:	2309      	movs	r3, #9
 80079de:	737b      	strb	r3, [r7, #13]
 80079e0:	238e      	movs	r3, #142	; 0x8e
 80079e2:	73bb      	strb	r3, [r7, #14]
 80079e4:	2322      	movs	r3, #34	; 0x22
 80079e6:	73fb      	strb	r3, [r7, #15]
 80079e8:	2345      	movs	r3, #69	; 0x45
 80079ea:	743b      	strb	r3, [r7, #16]
 80079ec:	2341      	movs	r3, #65	; 0x41
 80079ee:	747b      	strb	r3, [r7, #17]
 80079f0:	239d      	movs	r3, #157	; 0x9d
 80079f2:	74bb      	strb	r3, [r7, #18]
 80079f4:	234c      	movs	r3, #76	; 0x4c
 80079f6:	74fb      	strb	r3, [r7, #19]
 80079f8:	2321      	movs	r3, #33	; 0x21
 80079fa:	753b      	strb	r3, [r7, #20]
 80079fc:	23ed      	movs	r3, #237	; 0xed
 80079fe:	757b      	strb	r3, [r7, #21]
 8007a00:	23ae      	movs	r3, #174	; 0xae
 8007a02:	75bb      	strb	r3, [r7, #22]
 8007a04:	2382      	movs	r3, #130	; 0x82
 8007a06:	75fb      	strb	r3, [r7, #23]
 8007a08:	23ed      	movs	r3, #237	; 0xed
 8007a0a:	763b      	strb	r3, [r7, #24]
 8007a0c:	2319      	movs	r3, #25
 8007a0e:	767b      	strb	r3, [r7, #25]
 8007a10:	2300      	movs	r3, #0
 8007a12:	76bb      	strb	r3, [r7, #26]
 8007a14:	2302      	movs	r3, #2
 8007a16:	76fb      	strb	r3, [r7, #27]
 8007a18:	2300      	movs	r3, #0
 8007a1a:	773b      	strb	r3, [r7, #28]
 8007a1c:	4b10      	ldr	r3, [pc, #64]	; (8007a60 <getHandPosition+0xfc>)
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	777b      	strb	r3, [r7, #29]
 8007a22:	2301      	movs	r3, #1
 8007a24:	77bb      	strb	r3, [r7, #30]
		   0x9d, 0x4c, 0x21, 0xed, 0xae, 0x82, 0xed, 0x19,			 /*< 16-byte Proximity UUID. */
		   0x00, 0x02,					 	 	 					 /*< 2-byte Major */
		   0x00, handPos_state,					 		 			 /*< 2-byte Hand Position */
		   0x01,						     		 				 /*< 1-byte Power*/
		 };
	    aci_gap_update_adv_data(sizeof(service_data), service_data);
 8007a26:	1d3b      	adds	r3, r7, #4
 8007a28:	4619      	mov	r1, r3
 8007a2a:	201b      	movs	r0, #27
 8007a2c:	f7fe f995 	bl	8005d5a <aci_gap_update_adv_data>
	 }
	 HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x01F4, RTC_WAKEUPCLOCK_RTCCLK_DIV16);		//325ms wake up = 0x028A		250ms = 1F4
 8007a30:	2200      	movs	r2, #0
 8007a32:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8007a36:	4807      	ldr	r0, [pc, #28]	; (8007a54 <getHandPosition+0xf0>)
 8007a38:	f7fd fea8 	bl	800578c <HAL_RTCEx_SetWakeUpTimer_IT>
	 HAL_SuspendTick();
 8007a3c:	f7fa ffa4 	bl	8002988 <HAL_SuspendTick>
	 HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8007a40:	2101      	movs	r1, #1
 8007a42:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007a46:	f7fc fa43 	bl	8003ed0 <HAL_PWR_EnterSTOPMode>
}
 8007a4a:	bf00      	nop
 8007a4c:	3724      	adds	r7, #36	; 0x24
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd90      	pop	{r4, r7, pc}
 8007a52:	bf00      	nop
 8007a54:	20000394 	.word	0x20000394
 8007a58:	20000304 	.word	0x20000304
 8007a5c:	200003b8 	.word	0x200003b8
 8007a60:	20000019 	.word	0x20000019

08007a64 <LL_PWR_EnableBootC2>:
{
 8007a64:	b480      	push	{r7}
 8007a66:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8007a68:	4b05      	ldr	r3, [pc, #20]	; (8007a80 <LL_PWR_EnableBootC2+0x1c>)
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	4a04      	ldr	r2, [pc, #16]	; (8007a80 <LL_PWR_EnableBootC2+0x1c>)
 8007a6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a72:	60d3      	str	r3, [r2, #12]
}
 8007a74:	bf00      	nop
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr
 8007a7e:	bf00      	nop
 8007a80:	58000400 	.word	0x58000400

08007a84 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8007a8c:	4b06      	ldr	r3, [pc, #24]	; (8007aa8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8007a8e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8007a92:	4905      	ldr	r1, [pc, #20]	; (8007aa8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8007a9c:	bf00      	nop
 8007a9e:	370c      	adds	r7, #12
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr
 8007aa8:	58000800 	.word	0x58000800

08007aac <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8007ab4:	4b05      	ldr	r3, [pc, #20]	; (8007acc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007ab6:	6a1a      	ldr	r2, [r3, #32]
 8007ab8:	4904      	ldr	r1, [pc, #16]	; (8007acc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	620b      	str	r3, [r1, #32]
}
 8007ac0:	bf00      	nop
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr
 8007acc:	58000800 	.word	0x58000800

08007ad0 <LL_AHB3_GRP1_EnableClock>:
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8007ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007adc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ade:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8007ae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007aec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4013      	ands	r3, r2
 8007af2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007af4:	68fb      	ldr	r3, [r7, #12]
}
 8007af6:	bf00      	nop
 8007af8:	3714      	adds	r7, #20
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr

08007b02 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8007b02:	b480      	push	{r7}
 8007b04:	b085      	sub	sp, #20
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8007b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b0e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8007b12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8007b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b22:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4013      	ands	r3, r2
 8007b2a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
}
 8007b2e:	bf00      	nop
 8007b30:	3714      	adds	r7, #20
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr

08007b3a <LL_C1_IPCC_EnableIT_TXF>:
{
 8007b3a:	b480      	push	{r7}
 8007b3c:	b083      	sub	sp, #12
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	601a      	str	r2, [r3, #0]
}
 8007b4e:	bf00      	nop
 8007b50:	370c      	adds	r7, #12
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr

08007b5a <LL_C1_IPCC_EnableIT_RXO>:
{
 8007b5a:	b480      	push	{r7}
 8007b5c:	b083      	sub	sp, #12
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f043 0201 	orr.w	r2, r3, #1
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	601a      	str	r2, [r3, #0]
}
 8007b6e:	bf00      	nop
 8007b70:	370c      	adds	r7, #12
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr

08007b7a <LL_C1_IPCC_EnableTransmitChannel>:
{
 8007b7a:	b480      	push	{r7}
 8007b7c:	b083      	sub	sp, #12
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
 8007b82:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	685a      	ldr	r2, [r3, #4]
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	041b      	lsls	r3, r3, #16
 8007b8c:	43db      	mvns	r3, r3
 8007b8e:	401a      	ands	r2, r3
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	605a      	str	r2, [r3, #4]
}
 8007b94:	bf00      	nop
 8007b96:	370c      	adds	r7, #12
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	685a      	ldr	r2, [r3, #4]
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	041b      	lsls	r3, r3, #16
 8007bb2:	431a      	orrs	r2, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	605a      	str	r2, [r3, #4]
}
 8007bb8:	bf00      	nop
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	685a      	ldr	r2, [r3, #4]
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	43db      	mvns	r3, r3
 8007bd6:	401a      	ands	r2, r3
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	605a      	str	r2, [r3, #4]
}
 8007bdc:	bf00      	nop
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr

08007be8 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	683a      	ldr	r2, [r7, #0]
 8007bf6:	609a      	str	r2, [r3, #8]
}
 8007bf8:	bf00      	nop
 8007bfa:	370c      	adds	r7, #12
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr

08007c04 <LL_C1_IPCC_SetFlag_CHx>:
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	041a      	lsls	r2, r3, #16
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	609a      	str	r2, [r3, #8]
}
 8007c16:	bf00      	nop
 8007c18:	370c      	adds	r7, #12
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr

08007c22 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8007c22:	b480      	push	{r7}
 8007c24:	b083      	sub	sp, #12
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
 8007c2a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	68da      	ldr	r2, [r3, #12]
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	4013      	ands	r3, r2
 8007c34:	683a      	ldr	r2, [r7, #0]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d101      	bne.n	8007c3e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e000      	b.n	8007c40 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	69da      	ldr	r2, [r3, #28]
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	4013      	ands	r3, r2
 8007c5e:	683a      	ldr	r2, [r7, #0]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d101      	bne.n	8007c68 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8007c64:	2301      	movs	r3, #1
 8007c66:	e000      	b.n	8007c6a <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	370c      	adds	r7, #12
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
	...

08007c78 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8007c7c:	2102      	movs	r1, #2
 8007c7e:	4819      	ldr	r0, [pc, #100]	; (8007ce4 <HW_IPCC_Rx_Handler+0x6c>)
 8007c80:	f7ff ffe4 	bl	8007c4c <LL_C2_IPCC_IsActiveFlag_CHx>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d009      	beq.n	8007c9e <HW_IPCC_Rx_Handler+0x26>
 8007c8a:	4b16      	ldr	r3, [pc, #88]	; (8007ce4 <HW_IPCC_Rx_Handler+0x6c>)
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	43db      	mvns	r3, r3
 8007c90:	f003 0302 	and.w	r3, r3, #2
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d002      	beq.n	8007c9e <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8007c98:	f000 f8da 	bl	8007e50 <HW_IPCC_SYS_EvtHandler>
 8007c9c:	e01f      	b.n	8007cde <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8007c9e:	2101      	movs	r1, #1
 8007ca0:	4810      	ldr	r0, [pc, #64]	; (8007ce4 <HW_IPCC_Rx_Handler+0x6c>)
 8007ca2:	f7ff ffd3 	bl	8007c4c <LL_C2_IPCC_IsActiveFlag_CHx>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d008      	beq.n	8007cbe <HW_IPCC_Rx_Handler+0x46>
 8007cac:	4b0d      	ldr	r3, [pc, #52]	; (8007ce4 <HW_IPCC_Rx_Handler+0x6c>)
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	f003 0301 	and.w	r3, r3, #1
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d102      	bne.n	8007cbe <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8007cb8:	f000 f88e 	bl	8007dd8 <HW_IPCC_BLE_EvtHandler>
 8007cbc:	e00f      	b.n	8007cde <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8007cbe:	2108      	movs	r1, #8
 8007cc0:	4808      	ldr	r0, [pc, #32]	; (8007ce4 <HW_IPCC_Rx_Handler+0x6c>)
 8007cc2:	f7ff ffc3 	bl	8007c4c <LL_C2_IPCC_IsActiveFlag_CHx>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d009      	beq.n	8007ce0 <HW_IPCC_Rx_Handler+0x68>
 8007ccc:	4b05      	ldr	r3, [pc, #20]	; (8007ce4 <HW_IPCC_Rx_Handler+0x6c>)
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	43db      	mvns	r3, r3
 8007cd2:	f003 0308 	and.w	r3, r3, #8
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d002      	beq.n	8007ce0 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8007cda:	f000 f905 	bl	8007ee8 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8007cde:	bf00      	nop
 8007ce0:	bf00      	nop
}
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	58000c00 	.word	0x58000c00

08007ce8 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8007cec:	2102      	movs	r1, #2
 8007cee:	481a      	ldr	r0, [pc, #104]	; (8007d58 <HW_IPCC_Tx_Handler+0x70>)
 8007cf0:	f7ff ff97 	bl	8007c22 <LL_C1_IPCC_IsActiveFlag_CHx>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d109      	bne.n	8007d0e <HW_IPCC_Tx_Handler+0x26>
 8007cfa:	4b17      	ldr	r3, [pc, #92]	; (8007d58 <HW_IPCC_Tx_Handler+0x70>)
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	43db      	mvns	r3, r3
 8007d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d002      	beq.n	8007d0e <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8007d08:	f000 f896 	bl	8007e38 <HW_IPCC_SYS_CmdEvtHandler>
 8007d0c:	e020      	b.n	8007d50 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8007d0e:	2108      	movs	r1, #8
 8007d10:	4811      	ldr	r0, [pc, #68]	; (8007d58 <HW_IPCC_Tx_Handler+0x70>)
 8007d12:	f7ff ff86 	bl	8007c22 <LL_C1_IPCC_IsActiveFlag_CHx>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d109      	bne.n	8007d30 <HW_IPCC_Tx_Handler+0x48>
 8007d1c:	4b0e      	ldr	r3, [pc, #56]	; (8007d58 <HW_IPCC_Tx_Handler+0x70>)
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	43db      	mvns	r3, r3
 8007d22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d002      	beq.n	8007d30 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 8007d2a:	f000 f8bf 	bl	8007eac <HW_IPCC_MM_FreeBufHandler>
 8007d2e:	e00f      	b.n	8007d50 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8007d30:	2120      	movs	r1, #32
 8007d32:	4809      	ldr	r0, [pc, #36]	; (8007d58 <HW_IPCC_Tx_Handler+0x70>)
 8007d34:	f7ff ff75 	bl	8007c22 <LL_C1_IPCC_IsActiveFlag_CHx>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d109      	bne.n	8007d52 <HW_IPCC_Tx_Handler+0x6a>
 8007d3e:	4b06      	ldr	r3, [pc, #24]	; (8007d58 <HW_IPCC_Tx_Handler+0x70>)
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	43db      	mvns	r3, r3
 8007d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d002      	beq.n	8007d52 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8007d4c:	f000 f850 	bl	8007df0 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8007d50:	bf00      	nop
 8007d52:	bf00      	nop
}
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop
 8007d58:	58000c00 	.word	0x58000c00

08007d5c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8007d60:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007d64:	f7ff fecd 	bl	8007b02 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8007d68:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007d6c:	f7ff fe9e 	bl	8007aac <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8007d70:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007d74:	f7ff fe86 	bl	8007a84 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8007d78:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8007d7a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8007d7c:	f7ff fe72 	bl	8007a64 <LL_PWR_EnableBootC2>

  return;
 8007d80:	bf00      	nop
}
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8007d88:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007d8c:	f7ff fea0 	bl	8007ad0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8007d90:	4806      	ldr	r0, [pc, #24]	; (8007dac <HW_IPCC_Init+0x28>)
 8007d92:	f7ff fee2 	bl	8007b5a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8007d96:	4805      	ldr	r0, [pc, #20]	; (8007dac <HW_IPCC_Init+0x28>)
 8007d98:	f7ff fecf 	bl	8007b3a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8007d9c:	202c      	movs	r0, #44	; 0x2c
 8007d9e:	f7fa ff44 	bl	8002c2a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8007da2:	202d      	movs	r0, #45	; 0x2d
 8007da4:	f7fa ff41 	bl	8002c2a <HAL_NVIC_EnableIRQ>

  return;
 8007da8:	bf00      	nop
}
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	58000c00 	.word	0x58000c00

08007db0 <HW_IPCC_BLE_Init>:
#endif
/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8007db4:	2101      	movs	r1, #1
 8007db6:	4802      	ldr	r0, [pc, #8]	; (8007dc0 <HW_IPCC_BLE_Init+0x10>)
 8007db8:	f7ff ff04 	bl	8007bc4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8007dbc:	bf00      	nop
}
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	58000c00 	.word	0x58000c00

08007dc4 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_BLE_CMD_CHANNEL );
 8007dc8:	2101      	movs	r1, #1
 8007dca:	4802      	ldr	r0, [pc, #8]	; (8007dd4 <HW_IPCC_BLE_SendCmd+0x10>)
 8007dcc:	f7ff ff1a 	bl	8007c04 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8007dd0:	bf00      	nop
}
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	58000c00 	.word	0x58000c00

08007dd8 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8007ddc:	f7ff f840 	bl	8006e60 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8007de0:	2101      	movs	r1, #1
 8007de2:	4802      	ldr	r0, [pc, #8]	; (8007dec <HW_IPCC_BLE_EvtHandler+0x14>)
 8007de4:	f7ff ff00 	bl	8007be8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8007de8:	bf00      	nop
}
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	58000c00 	.word	0x58000c00

08007df0 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8007df4:	2120      	movs	r1, #32
 8007df6:	4803      	ldr	r0, [pc, #12]	; (8007e04 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8007df8:	f7ff fed2 	bl	8007ba0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8007dfc:	f7ff f860 	bl	8006ec0 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8007e00:	bf00      	nop
}
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	58000c00 	.word	0x58000c00

08007e08 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8007e0c:	2102      	movs	r1, #2
 8007e0e:	4802      	ldr	r0, [pc, #8]	; (8007e18 <HW_IPCC_SYS_Init+0x10>)
 8007e10:	f7ff fed8 	bl	8007bc4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8007e14:	bf00      	nop
}
 8007e16:	bd80      	pop	{r7, pc}
 8007e18:	58000c00 	.word	0x58000c00

08007e1c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8007e20:	2102      	movs	r1, #2
 8007e22:	4804      	ldr	r0, [pc, #16]	; (8007e34 <HW_IPCC_SYS_SendCmd+0x18>)
 8007e24:	f7ff feee 	bl	8007c04 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8007e28:	2102      	movs	r1, #2
 8007e2a:	4802      	ldr	r0, [pc, #8]	; (8007e34 <HW_IPCC_SYS_SendCmd+0x18>)
 8007e2c:	f7ff fea5 	bl	8007b7a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8007e30:	bf00      	nop
}
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	58000c00 	.word	0x58000c00

08007e38 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8007e3c:	2102      	movs	r1, #2
 8007e3e:	4803      	ldr	r0, [pc, #12]	; (8007e4c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8007e40:	f7ff feae 	bl	8007ba0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8007e44:	f7ff f88c 	bl	8006f60 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8007e48:	bf00      	nop
}
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	58000c00 	.word	0x58000c00

08007e50 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8007e54:	f7ff f89a 	bl	8006f8c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8007e58:	2102      	movs	r1, #2
 8007e5a:	4802      	ldr	r0, [pc, #8]	; (8007e64 <HW_IPCC_SYS_EvtHandler+0x14>)
 8007e5c:	f7ff fec4 	bl	8007be8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8007e60:	bf00      	nop
}
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	58000c00 	.word	0x58000c00

08007e68 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8007e70:	2108      	movs	r1, #8
 8007e72:	480c      	ldr	r0, [pc, #48]	; (8007ea4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8007e74:	f7ff fed5 	bl	8007c22 <LL_C1_IPCC_IsActiveFlag_CHx>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d007      	beq.n	8007e8e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8007e7e:	4a0a      	ldr	r2, [pc, #40]	; (8007ea8 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8007e84:	2108      	movs	r1, #8
 8007e86:	4807      	ldr	r0, [pc, #28]	; (8007ea4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8007e88:	f7ff fe77 	bl	8007b7a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8007e8c:	e006      	b.n	8007e9c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4798      	blx	r3
    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8007e92:	2108      	movs	r1, #8
 8007e94:	4803      	ldr	r0, [pc, #12]	; (8007ea4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8007e96:	f7ff feb5 	bl	8007c04 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8007e9a:	bf00      	nop
}
 8007e9c:	3708      	adds	r7, #8
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	bf00      	nop
 8007ea4:	58000c00 	.word	0x58000c00
 8007ea8:	2000045c 	.word	0x2000045c

08007eac <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8007eb0:	2108      	movs	r1, #8
 8007eb2:	4806      	ldr	r0, [pc, #24]	; (8007ecc <HW_IPCC_MM_FreeBufHandler+0x20>)
 8007eb4:	f7ff fe74 	bl	8007ba0 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8007eb8:	4b05      	ldr	r3, [pc, #20]	; (8007ed0 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4798      	blx	r3

  HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8007ebe:	2108      	movs	r1, #8
 8007ec0:	4802      	ldr	r0, [pc, #8]	; (8007ecc <HW_IPCC_MM_FreeBufHandler+0x20>)
 8007ec2:	f7ff fe9f 	bl	8007c04 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8007ec6:	bf00      	nop
}
 8007ec8:	bd80      	pop	{r7, pc}
 8007eca:	bf00      	nop
 8007ecc:	58000c00 	.word	0x58000c00
 8007ed0:	2000045c 	.word	0x2000045c

08007ed4 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8007ed8:	2108      	movs	r1, #8
 8007eda:	4802      	ldr	r0, [pc, #8]	; (8007ee4 <HW_IPCC_TRACES_Init+0x10>)
 8007edc:	f7ff fe72 	bl	8007bc4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8007ee0:	bf00      	nop
}
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	58000c00 	.word	0x58000c00

08007ee8 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8007eec:	f7ff f8f6 	bl	80070dc <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8007ef0:	2108      	movs	r1, #8
 8007ef2:	4802      	ldr	r0, [pc, #8]	; (8007efc <HW_IPCC_TRACES_EvtHandler+0x14>)
 8007ef4:	f7ff fe78 	bl	8007be8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8007ef8:	bf00      	nop
}
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	58000c00 	.word	0x58000c00

08007f00 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8007f00:	b480      	push	{r7}
 8007f02:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8007f04:	4b05      	ldr	r3, [pc, #20]	; (8007f1c <UTIL_LPM_Init+0x1c>)
 8007f06:	2200      	movs	r2, #0
 8007f08:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8007f0a:	4b05      	ldr	r3, [pc, #20]	; (8007f20 <UTIL_LPM_Init+0x20>)
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8007f10:	bf00      	nop
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop
 8007f1c:	20000460 	.word	0x20000460
 8007f20:	20000464 	.word	0x20000464

08007f24 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8007f24:	b480      	push	{r7}
 8007f26:	b087      	sub	sp, #28
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f30:	f3ef 8310 	mrs	r3, PRIMASK
 8007f34:	613b      	str	r3, [r7, #16]
  return(result);
 8007f36:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8007f38:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007f3a:	b672      	cpsid	i
}
 8007f3c:	bf00      	nop
  
  switch(state)
 8007f3e:	78fb      	ldrb	r3, [r7, #3]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d008      	beq.n	8007f56 <UTIL_LPM_SetOffMode+0x32>
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d10e      	bne.n	8007f66 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8007f48:	4b0d      	ldr	r3, [pc, #52]	; (8007f80 <UTIL_LPM_SetOffMode+0x5c>)
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	4a0b      	ldr	r2, [pc, #44]	; (8007f80 <UTIL_LPM_SetOffMode+0x5c>)
 8007f52:	6013      	str	r3, [r2, #0]
      break;
 8007f54:	e008      	b.n	8007f68 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	43da      	mvns	r2, r3
 8007f5a:	4b09      	ldr	r3, [pc, #36]	; (8007f80 <UTIL_LPM_SetOffMode+0x5c>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4013      	ands	r3, r2
 8007f60:	4a07      	ldr	r2, [pc, #28]	; (8007f80 <UTIL_LPM_SetOffMode+0x5c>)
 8007f62:	6013      	str	r3, [r2, #0]
      break;
 8007f64:	e000      	b.n	8007f68 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8007f66:	bf00      	nop
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f383 8810 	msr	PRIMASK, r3
}
 8007f72:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8007f74:	bf00      	nop
 8007f76:	371c      	adds	r7, #28
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr
 8007f80:	20000464 	.word	0x20000464

08007f84 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f8a:	f3ef 8310 	mrs	r3, PRIMASK
 8007f8e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f90:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 8007f92:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8007f94:	b672      	cpsid	i
}
 8007f96:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8007f98:	4b12      	ldr	r3, [pc, #72]	; (8007fe4 <UTIL_LPM_EnterLowPower+0x60>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d006      	beq.n	8007fae <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8007fa0:	4b11      	ldr	r3, [pc, #68]	; (8007fe8 <UTIL_LPM_EnterLowPower+0x64>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8007fa6:	4b10      	ldr	r3, [pc, #64]	; (8007fe8 <UTIL_LPM_EnterLowPower+0x64>)
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	4798      	blx	r3
 8007fac:	e010      	b.n	8007fd0 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8007fae:	4b0f      	ldr	r3, [pc, #60]	; (8007fec <UTIL_LPM_EnterLowPower+0x68>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d006      	beq.n	8007fc4 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 8007fb6:	4b0c      	ldr	r3, [pc, #48]	; (8007fe8 <UTIL_LPM_EnterLowPower+0x64>)
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8007fbc:	4b0a      	ldr	r3, [pc, #40]	; (8007fe8 <UTIL_LPM_EnterLowPower+0x64>)
 8007fbe:	68db      	ldr	r3, [r3, #12]
 8007fc0:	4798      	blx	r3
 8007fc2:	e005      	b.n	8007fd0 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 8007fc4:	4b08      	ldr	r3, [pc, #32]	; (8007fe8 <UTIL_LPM_EnterLowPower+0x64>)
 8007fc6:	691b      	ldr	r3, [r3, #16]
 8007fc8:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8007fca:	4b07      	ldr	r3, [pc, #28]	; (8007fe8 <UTIL_LPM_EnterLowPower+0x64>)
 8007fcc:	695b      	ldr	r3, [r3, #20]
 8007fce:	4798      	blx	r3
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f383 8810 	msr	PRIMASK, r3
}
 8007fda:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8007fdc:	bf00      	nop
 8007fde:	3710      	adds	r7, #16
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	20000460 	.word	0x20000460
 8007fe8:	0800b318 	.word	0x0800b318
 8007fec:	20000464 	.word	0x20000464

08007ff0 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b090      	sub	sp, #64	; 0x40
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8007ff8:	4b73      	ldr	r3, [pc, #460]	; (80081c8 <UTIL_SEQ_Run+0x1d8>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8007ffe:	4b72      	ldr	r3, [pc, #456]	; (80081c8 <UTIL_SEQ_Run+0x1d8>)
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	4013      	ands	r3, r2
 8008006:	4a70      	ldr	r2, [pc, #448]	; (80081c8 <UTIL_SEQ_Run+0x1d8>)
 8008008:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800800a:	4b70      	ldr	r3, [pc, #448]	; (80081cc <UTIL_SEQ_Run+0x1dc>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8008010:	4b6f      	ldr	r3, [pc, #444]	; (80081d0 <UTIL_SEQ_Run+0x1e0>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8008016:	4b6f      	ldr	r3, [pc, #444]	; (80081d4 <UTIL_SEQ_Run+0x1e4>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800801c:	4b6e      	ldr	r3, [pc, #440]	; (80081d8 <UTIL_SEQ_Run+0x1e8>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8008022:	e08d      	b.n	8008140 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8008024:	2300      	movs	r3, #0
 8008026:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8008028:	e002      	b.n	8008030 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800802a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800802c:	3301      	adds	r3, #1
 800802e:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8008030:	4a6a      	ldr	r2, [pc, #424]	; (80081dc <UTIL_SEQ_Run+0x1ec>)
 8008032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008034:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803a:	401a      	ands	r2, r3
 800803c:	4b62      	ldr	r3, [pc, #392]	; (80081c8 <UTIL_SEQ_Run+0x1d8>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4013      	ands	r3, r2
 8008042:	2b00      	cmp	r3, #0
 8008044:	d0f1      	beq.n	800802a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8008046:	4a65      	ldr	r2, [pc, #404]	; (80081dc <UTIL_SEQ_Run+0x1ec>)
 8008048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800804a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800804e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008050:	401a      	ands	r2, r3
 8008052:	4b5d      	ldr	r3, [pc, #372]	; (80081c8 <UTIL_SEQ_Run+0x1d8>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4013      	ands	r3, r2
 8008058:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800805a:	4a60      	ldr	r2, [pc, #384]	; (80081dc <UTIL_SEQ_Run+0x1ec>)
 800805c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800805e:	00db      	lsls	r3, r3, #3
 8008060:	4413      	add	r3, r2
 8008062:	685a      	ldr	r2, [r3, #4]
 8008064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008066:	4013      	ands	r3, r2
 8008068:	2b00      	cmp	r3, #0
 800806a:	d106      	bne.n	800807a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800806c:	4a5b      	ldr	r2, [pc, #364]	; (80081dc <UTIL_SEQ_Run+0x1ec>)
 800806e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008070:	00db      	lsls	r3, r3, #3
 8008072:	4413      	add	r3, r2
 8008074:	f04f 32ff 	mov.w	r2, #4294967295
 8008078:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800807a:	4a58      	ldr	r2, [pc, #352]	; (80081dc <UTIL_SEQ_Run+0x1ec>)
 800807c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800807e:	00db      	lsls	r3, r3, #3
 8008080:	4413      	add	r3, r2
 8008082:	685a      	ldr	r2, [r3, #4]
 8008084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008086:	4013      	ands	r3, r2
 8008088:	4618      	mov	r0, r3
 800808a:	f000 f9b3 	bl	80083f4 <SEQ_BitPosition>
 800808e:	4603      	mov	r3, r0
 8008090:	461a      	mov	r2, r3
 8008092:	4b53      	ldr	r3, [pc, #332]	; (80081e0 <UTIL_SEQ_Run+0x1f0>)
 8008094:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8008096:	4a51      	ldr	r2, [pc, #324]	; (80081dc <UTIL_SEQ_Run+0x1ec>)
 8008098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800809a:	00db      	lsls	r3, r3, #3
 800809c:	4413      	add	r3, r2
 800809e:	685a      	ldr	r2, [r3, #4]
 80080a0:	4b4f      	ldr	r3, [pc, #316]	; (80081e0 <UTIL_SEQ_Run+0x1f0>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2101      	movs	r1, #1
 80080a6:	fa01 f303 	lsl.w	r3, r1, r3
 80080aa:	43db      	mvns	r3, r3
 80080ac:	401a      	ands	r2, r3
 80080ae:	494b      	ldr	r1, [pc, #300]	; (80081dc <UTIL_SEQ_Run+0x1ec>)
 80080b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080b2:	00db      	lsls	r3, r3, #3
 80080b4:	440b      	add	r3, r1
 80080b6:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080b8:	f3ef 8310 	mrs	r3, PRIMASK
 80080bc:	61bb      	str	r3, [r7, #24]
  return(result);
 80080be:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80080c0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80080c2:	b672      	cpsid	i
}
 80080c4:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 80080c6:	4b46      	ldr	r3, [pc, #280]	; (80081e0 <UTIL_SEQ_Run+0x1f0>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	2201      	movs	r2, #1
 80080cc:	fa02 f303 	lsl.w	r3, r2, r3
 80080d0:	43da      	mvns	r2, r3
 80080d2:	4b3e      	ldr	r3, [pc, #248]	; (80081cc <UTIL_SEQ_Run+0x1dc>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4013      	ands	r3, r2
 80080d8:	4a3c      	ldr	r2, [pc, #240]	; (80081cc <UTIL_SEQ_Run+0x1dc>)
 80080da:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80080dc:	2302      	movs	r3, #2
 80080de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080e0:	e013      	b.n	800810a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80080e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080e4:	3b01      	subs	r3, #1
 80080e6:	4a3d      	ldr	r2, [pc, #244]	; (80081dc <UTIL_SEQ_Run+0x1ec>)
 80080e8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80080ec:	4b3c      	ldr	r3, [pc, #240]	; (80081e0 <UTIL_SEQ_Run+0x1f0>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	2201      	movs	r2, #1
 80080f2:	fa02 f303 	lsl.w	r3, r2, r3
 80080f6:	43da      	mvns	r2, r3
 80080f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080fa:	3b01      	subs	r3, #1
 80080fc:	400a      	ands	r2, r1
 80080fe:	4937      	ldr	r1, [pc, #220]	; (80081dc <UTIL_SEQ_Run+0x1ec>)
 8008100:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8008104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008106:	3b01      	subs	r3, #1
 8008108:	63fb      	str	r3, [r7, #60]	; 0x3c
 800810a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800810c:	2b00      	cmp	r3, #0
 800810e:	d1e8      	bne.n	80080e2 <UTIL_SEQ_Run+0xf2>
 8008110:	6a3b      	ldr	r3, [r7, #32]
 8008112:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	f383 8810 	msr	PRIMASK, r3
}
 800811a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800811c:	4b30      	ldr	r3, [pc, #192]	; (80081e0 <UTIL_SEQ_Run+0x1f0>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a30      	ldr	r2, [pc, #192]	; (80081e4 <UTIL_SEQ_Run+0x1f4>)
 8008122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008126:	4798      	blx	r3

    local_taskset = TaskSet;
 8008128:	4b28      	ldr	r3, [pc, #160]	; (80081cc <UTIL_SEQ_Run+0x1dc>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800812e:	4b28      	ldr	r3, [pc, #160]	; (80081d0 <UTIL_SEQ_Run+0x1e0>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 8008134:	4b27      	ldr	r3, [pc, #156]	; (80081d4 <UTIL_SEQ_Run+0x1e4>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800813a:	4b27      	ldr	r3, [pc, #156]	; (80081d8 <UTIL_SEQ_Run+0x1e8>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8008140:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008144:	401a      	ands	r2, r3
 8008146:	4b20      	ldr	r3, [pc, #128]	; (80081c8 <UTIL_SEQ_Run+0x1d8>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4013      	ands	r3, r2
 800814c:	2b00      	cmp	r3, #0
 800814e:	d005      	beq.n	800815c <UTIL_SEQ_Run+0x16c>
 8008150:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008154:	4013      	ands	r3, r2
 8008156:	2b00      	cmp	r3, #0
 8008158:	f43f af64 	beq.w	8008024 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800815c:	4b20      	ldr	r3, [pc, #128]	; (80081e0 <UTIL_SEQ_Run+0x1f0>)
 800815e:	f04f 32ff 	mov.w	r2, #4294967295
 8008162:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8008164:	f000 f938 	bl	80083d8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008168:	f3ef 8310 	mrs	r3, PRIMASK
 800816c:	613b      	str	r3, [r7, #16]
  return(result);
 800816e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8008170:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8008172:	b672      	cpsid	i
}
 8008174:	bf00      	nop
  local_taskset = TaskSet;
 8008176:	4b15      	ldr	r3, [pc, #84]	; (80081cc <UTIL_SEQ_Run+0x1dc>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800817c:	4b14      	ldr	r3, [pc, #80]	; (80081d0 <UTIL_SEQ_Run+0x1e0>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8008182:	4b14      	ldr	r3, [pc, #80]	; (80081d4 <UTIL_SEQ_Run+0x1e4>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8008188:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800818a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818c:	401a      	ands	r2, r3
 800818e:	4b0e      	ldr	r3, [pc, #56]	; (80081c8 <UTIL_SEQ_Run+0x1d8>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4013      	ands	r3, r2
 8008194:	2b00      	cmp	r3, #0
 8008196:	d107      	bne.n	80081a8 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8008198:	4b0f      	ldr	r3, [pc, #60]	; (80081d8 <UTIL_SEQ_Run+0x1e8>)
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800819e:	4013      	ands	r3, r2
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d101      	bne.n	80081a8 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 80081a4:	f7f9 faa9 	bl	80016fa <UTIL_SEQ_Idle>
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f383 8810 	msr	PRIMASK, r3
}
 80081b2:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 80081b4:	f000 f917 	bl	80083e6 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 80081b8:	4a03      	ldr	r2, [pc, #12]	; (80081c8 <UTIL_SEQ_Run+0x1d8>)
 80081ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081bc:	6013      	str	r3, [r2, #0]

  return;
 80081be:	bf00      	nop
}
 80081c0:	3740      	adds	r7, #64	; 0x40
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	20000020 	.word	0x20000020
 80081cc:	20000468 	.word	0x20000468
 80081d0:	2000046c 	.word	0x2000046c
 80081d4:	2000001c 	.word	0x2000001c
 80081d8:	20000470 	.word	0x20000470
 80081dc:	200004f8 	.word	0x200004f8
 80081e0:	20000474 	.word	0x20000474
 80081e4:	20000478 	.word	0x20000478

080081e8 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b088      	sub	sp, #32
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	60b9      	str	r1, [r7, #8]
 80081f2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081f4:	f3ef 8310 	mrs	r3, PRIMASK
 80081f8:	617b      	str	r3, [r7, #20]
  return(result);
 80081fa:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80081fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80081fe:	b672      	cpsid	i
}
 8008200:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8008202:	68f8      	ldr	r0, [r7, #12]
 8008204:	f000 f8f6 	bl	80083f4 <SEQ_BitPosition>
 8008208:	4603      	mov	r3, r0
 800820a:	4619      	mov	r1, r3
 800820c:	4a06      	ldr	r2, [pc, #24]	; (8008228 <UTIL_SEQ_RegTask+0x40>)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	f383 8810 	msr	PRIMASK, r3
}
 800821e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8008220:	bf00      	nop
}
 8008222:	3720      	adds	r7, #32
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	20000478 	.word	0x20000478

0800822c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800822c:	b480      	push	{r7}
 800822e:	b087      	sub	sp, #28
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008236:	f3ef 8310 	mrs	r3, PRIMASK
 800823a:	60fb      	str	r3, [r7, #12]
  return(result);
 800823c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800823e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008240:	b672      	cpsid	i
}
 8008242:	bf00      	nop

  TaskSet |= TaskId_bm;
 8008244:	4b0d      	ldr	r3, [pc, #52]	; (800827c <UTIL_SEQ_SetTask+0x50>)
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	4313      	orrs	r3, r2
 800824c:	4a0b      	ldr	r2, [pc, #44]	; (800827c <UTIL_SEQ_SetTask+0x50>)
 800824e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8008250:	4a0b      	ldr	r2, [pc, #44]	; (8008280 <UTIL_SEQ_SetTask+0x54>)
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	431a      	orrs	r2, r3
 800825c:	4908      	ldr	r1, [pc, #32]	; (8008280 <UTIL_SEQ_SetTask+0x54>)
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	f383 8810 	msr	PRIMASK, r3
}
 800826e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008270:	bf00      	nop
}
 8008272:	371c      	adds	r7, #28
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr
 800827c:	20000468 	.word	0x20000468
 8008280:	200004f8 	.word	0x200004f8

08008284 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8008284:	b480      	push	{r7}
 8008286:	b087      	sub	sp, #28
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800828c:	f3ef 8310 	mrs	r3, PRIMASK
 8008290:	60fb      	str	r3, [r7, #12]
  return(result);
 8008292:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008294:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008296:	b672      	cpsid	i
}
 8008298:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	43da      	mvns	r2, r3
 800829e:	4b08      	ldr	r3, [pc, #32]	; (80082c0 <UTIL_SEQ_PauseTask+0x3c>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4013      	ands	r3, r2
 80082a4:	4a06      	ldr	r2, [pc, #24]	; (80082c0 <UTIL_SEQ_PauseTask+0x3c>)
 80082a6:	6013      	str	r3, [r2, #0]
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	f383 8810 	msr	PRIMASK, r3
}
 80082b2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80082b4:	bf00      	nop
}
 80082b6:	371c      	adds	r7, #28
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr
 80082c0:	2000001c 	.word	0x2000001c

080082c4 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80082c4:	b480      	push	{r7}
 80082c6:	b087      	sub	sp, #28
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082cc:	f3ef 8310 	mrs	r3, PRIMASK
 80082d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80082d2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80082d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80082d6:	b672      	cpsid	i
}
 80082d8:	bf00      	nop

  TaskMask |= TaskId_bm;
 80082da:	4b09      	ldr	r3, [pc, #36]	; (8008300 <UTIL_SEQ_ResumeTask+0x3c>)
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4313      	orrs	r3, r2
 80082e2:	4a07      	ldr	r2, [pc, #28]	; (8008300 <UTIL_SEQ_ResumeTask+0x3c>)
 80082e4:	6013      	str	r3, [r2, #0]
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	f383 8810 	msr	PRIMASK, r3
}
 80082f0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80082f2:	bf00      	nop
}
 80082f4:	371c      	adds	r7, #28
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr
 80082fe:	bf00      	nop
 8008300:	2000001c 	.word	0x2000001c

08008304 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8008304:	b480      	push	{r7}
 8008306:	b087      	sub	sp, #28
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800830c:	f3ef 8310 	mrs	r3, PRIMASK
 8008310:	60fb      	str	r3, [r7, #12]
  return(result);
 8008312:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008314:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008316:	b672      	cpsid	i
}
 8008318:	bf00      	nop

  EvtSet |= EvtId_bm;
 800831a:	4b09      	ldr	r3, [pc, #36]	; (8008340 <UTIL_SEQ_SetEvt+0x3c>)
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	4313      	orrs	r3, r2
 8008322:	4a07      	ldr	r2, [pc, #28]	; (8008340 <UTIL_SEQ_SetEvt+0x3c>)
 8008324:	6013      	str	r3, [r2, #0]
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	f383 8810 	msr	PRIMASK, r3
}
 8008330:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008332:	bf00      	nop
}
 8008334:	371c      	adds	r7, #28
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr
 800833e:	bf00      	nop
 8008340:	2000046c 	.word	0x2000046c

08008344 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b088      	sub	sp, #32
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800834c:	4b1f      	ldr	r3, [pc, #124]	; (80083cc <UTIL_SEQ_WaitEvt+0x88>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8008352:	4b1e      	ldr	r3, [pc, #120]	; (80083cc <UTIL_SEQ_WaitEvt+0x88>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800835a:	d102      	bne.n	8008362 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800835c:	2300      	movs	r3, #0
 800835e:	61fb      	str	r3, [r7, #28]
 8008360:	e005      	b.n	800836e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8008362:	4b1a      	ldr	r3, [pc, #104]	; (80083cc <UTIL_SEQ_WaitEvt+0x88>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	2201      	movs	r2, #1
 8008368:	fa02 f303 	lsl.w	r3, r2, r3
 800836c:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800836e:	4b18      	ldr	r3, [pc, #96]	; (80083d0 <UTIL_SEQ_WaitEvt+0x8c>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8008374:	4a16      	ldr	r2, [pc, #88]	; (80083d0 <UTIL_SEQ_WaitEvt+0x8c>)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800837a:	e003      	b.n	8008384 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800837c:	6879      	ldr	r1, [r7, #4]
 800837e:	69f8      	ldr	r0, [r7, #28]
 8008380:	f7f9 f9c1 	bl	8001706 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8008384:	4b13      	ldr	r3, [pc, #76]	; (80083d4 <UTIL_SEQ_WaitEvt+0x90>)
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	4013      	ands	r3, r2
 800838c:	2b00      	cmp	r3, #0
 800838e:	d0f5      	beq.n	800837c <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8008390:	4a0e      	ldr	r2, [pc, #56]	; (80083cc <UTIL_SEQ_WaitEvt+0x88>)
 8008392:	69bb      	ldr	r3, [r7, #24]
 8008394:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008396:	f3ef 8310 	mrs	r3, PRIMASK
 800839a:	60bb      	str	r3, [r7, #8]
  return(result);
 800839c:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800839e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80083a0:	b672      	cpsid	i
}
 80083a2:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	43da      	mvns	r2, r3
 80083a8:	4b0a      	ldr	r3, [pc, #40]	; (80083d4 <UTIL_SEQ_WaitEvt+0x90>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4013      	ands	r3, r2
 80083ae:	4a09      	ldr	r2, [pc, #36]	; (80083d4 <UTIL_SEQ_WaitEvt+0x90>)
 80083b0:	6013      	str	r3, [r2, #0]
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f383 8810 	msr	PRIMASK, r3
}
 80083bc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 80083be:	4a04      	ldr	r2, [pc, #16]	; (80083d0 <UTIL_SEQ_WaitEvt+0x8c>)
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	6013      	str	r3, [r2, #0]
  return;
 80083c4:	bf00      	nop
}
 80083c6:	3720      	adds	r7, #32
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	20000474 	.word	0x20000474
 80083d0:	20000470 	.word	0x20000470
 80083d4:	2000046c 	.word	0x2000046c

080083d8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80083d8:	b480      	push	{r7}
 80083da:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80083dc:	bf00      	nop
}
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr

080083e6 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 80083e6:	b480      	push	{r7}
 80083e8:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80083ea:	bf00      	nop
}
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 80083fc:	2300      	movs	r3, #0
 80083fe:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	0c1b      	lsrs	r3, r3, #16
 8008408:	041b      	lsls	r3, r3, #16
 800840a:	2b00      	cmp	r3, #0
 800840c:	d104      	bne.n	8008418 <SEQ_BitPosition+0x24>
 800840e:	2310      	movs	r3, #16
 8008410:	73fb      	strb	r3, [r7, #15]
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	041b      	lsls	r3, r3, #16
 8008416:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800841e:	2b00      	cmp	r3, #0
 8008420:	d105      	bne.n	800842e <SEQ_BitPosition+0x3a>
 8008422:	7bfb      	ldrb	r3, [r7, #15]
 8008424:	3308      	adds	r3, #8
 8008426:	73fb      	strb	r3, [r7, #15]
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	021b      	lsls	r3, r3, #8
 800842c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008434:	2b00      	cmp	r3, #0
 8008436:	d105      	bne.n	8008444 <SEQ_BitPosition+0x50>
 8008438:	7bfb      	ldrb	r3, [r7, #15]
 800843a:	3304      	adds	r3, #4
 800843c:	73fb      	strb	r3, [r7, #15]
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	011b      	lsls	r3, r3, #4
 8008442:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	0f1b      	lsrs	r3, r3, #28
 8008448:	4a07      	ldr	r2, [pc, #28]	; (8008468 <SEQ_BitPosition+0x74>)
 800844a:	5cd2      	ldrb	r2, [r2, r3]
 800844c:	7bfb      	ldrb	r3, [r7, #15]
 800844e:	4413      	add	r3, r2
 8008450:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8008452:	7bfb      	ldrb	r3, [r7, #15]
 8008454:	f1c3 031f 	rsb	r3, r3, #31
 8008458:	b2db      	uxtb	r3, r3
}
 800845a:	4618      	mov	r0, r3
 800845c:	3714      	adds	r7, #20
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr
 8008466:	bf00      	nop
 8008468:	0800b3d8 	.word	0x0800b3d8

0800846c <__errno>:
 800846c:	4b01      	ldr	r3, [pc, #4]	; (8008474 <__errno+0x8>)
 800846e:	6818      	ldr	r0, [r3, #0]
 8008470:	4770      	bx	lr
 8008472:	bf00      	nop
 8008474:	20000024 	.word	0x20000024

08008478 <__libc_init_array>:
 8008478:	b570      	push	{r4, r5, r6, lr}
 800847a:	4d0d      	ldr	r5, [pc, #52]	; (80084b0 <__libc_init_array+0x38>)
 800847c:	4c0d      	ldr	r4, [pc, #52]	; (80084b4 <__libc_init_array+0x3c>)
 800847e:	1b64      	subs	r4, r4, r5
 8008480:	10a4      	asrs	r4, r4, #2
 8008482:	2600      	movs	r6, #0
 8008484:	42a6      	cmp	r6, r4
 8008486:	d109      	bne.n	800849c <__libc_init_array+0x24>
 8008488:	4d0b      	ldr	r5, [pc, #44]	; (80084b8 <__libc_init_array+0x40>)
 800848a:	4c0c      	ldr	r4, [pc, #48]	; (80084bc <__libc_init_array+0x44>)
 800848c:	f002 fdac 	bl	800afe8 <_init>
 8008490:	1b64      	subs	r4, r4, r5
 8008492:	10a4      	asrs	r4, r4, #2
 8008494:	2600      	movs	r6, #0
 8008496:	42a6      	cmp	r6, r4
 8008498:	d105      	bne.n	80084a6 <__libc_init_array+0x2e>
 800849a:	bd70      	pop	{r4, r5, r6, pc}
 800849c:	f855 3b04 	ldr.w	r3, [r5], #4
 80084a0:	4798      	blx	r3
 80084a2:	3601      	adds	r6, #1
 80084a4:	e7ee      	b.n	8008484 <__libc_init_array+0xc>
 80084a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80084aa:	4798      	blx	r3
 80084ac:	3601      	adds	r6, #1
 80084ae:	e7f2      	b.n	8008496 <__libc_init_array+0x1e>
 80084b0:	0800b7c4 	.word	0x0800b7c4
 80084b4:	0800b7c4 	.word	0x0800b7c4
 80084b8:	0800b7c4 	.word	0x0800b7c4
 80084bc:	0800b7c8 	.word	0x0800b7c8

080084c0 <memcpy>:
 80084c0:	440a      	add	r2, r1
 80084c2:	4291      	cmp	r1, r2
 80084c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80084c8:	d100      	bne.n	80084cc <memcpy+0xc>
 80084ca:	4770      	bx	lr
 80084cc:	b510      	push	{r4, lr}
 80084ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084d6:	4291      	cmp	r1, r2
 80084d8:	d1f9      	bne.n	80084ce <memcpy+0xe>
 80084da:	bd10      	pop	{r4, pc}

080084dc <memset>:
 80084dc:	4402      	add	r2, r0
 80084de:	4603      	mov	r3, r0
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d100      	bne.n	80084e6 <memset+0xa>
 80084e4:	4770      	bx	lr
 80084e6:	f803 1b01 	strb.w	r1, [r3], #1
 80084ea:	e7f9      	b.n	80084e0 <memset+0x4>

080084ec <__cvt>:
 80084ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084f0:	ec55 4b10 	vmov	r4, r5, d0
 80084f4:	2d00      	cmp	r5, #0
 80084f6:	460e      	mov	r6, r1
 80084f8:	4619      	mov	r1, r3
 80084fa:	462b      	mov	r3, r5
 80084fc:	bfbb      	ittet	lt
 80084fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008502:	461d      	movlt	r5, r3
 8008504:	2300      	movge	r3, #0
 8008506:	232d      	movlt	r3, #45	; 0x2d
 8008508:	700b      	strb	r3, [r1, #0]
 800850a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800850c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008510:	4691      	mov	r9, r2
 8008512:	f023 0820 	bic.w	r8, r3, #32
 8008516:	bfbc      	itt	lt
 8008518:	4622      	movlt	r2, r4
 800851a:	4614      	movlt	r4, r2
 800851c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008520:	d005      	beq.n	800852e <__cvt+0x42>
 8008522:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008526:	d100      	bne.n	800852a <__cvt+0x3e>
 8008528:	3601      	adds	r6, #1
 800852a:	2102      	movs	r1, #2
 800852c:	e000      	b.n	8008530 <__cvt+0x44>
 800852e:	2103      	movs	r1, #3
 8008530:	ab03      	add	r3, sp, #12
 8008532:	9301      	str	r3, [sp, #4]
 8008534:	ab02      	add	r3, sp, #8
 8008536:	9300      	str	r3, [sp, #0]
 8008538:	ec45 4b10 	vmov	d0, r4, r5
 800853c:	4653      	mov	r3, sl
 800853e:	4632      	mov	r2, r6
 8008540:	f000 fe02 	bl	8009148 <_dtoa_r>
 8008544:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008548:	4607      	mov	r7, r0
 800854a:	d102      	bne.n	8008552 <__cvt+0x66>
 800854c:	f019 0f01 	tst.w	r9, #1
 8008550:	d022      	beq.n	8008598 <__cvt+0xac>
 8008552:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008556:	eb07 0906 	add.w	r9, r7, r6
 800855a:	d110      	bne.n	800857e <__cvt+0x92>
 800855c:	783b      	ldrb	r3, [r7, #0]
 800855e:	2b30      	cmp	r3, #48	; 0x30
 8008560:	d10a      	bne.n	8008578 <__cvt+0x8c>
 8008562:	2200      	movs	r2, #0
 8008564:	2300      	movs	r3, #0
 8008566:	4620      	mov	r0, r4
 8008568:	4629      	mov	r1, r5
 800856a:	f7f8 fa85 	bl	8000a78 <__aeabi_dcmpeq>
 800856e:	b918      	cbnz	r0, 8008578 <__cvt+0x8c>
 8008570:	f1c6 0601 	rsb	r6, r6, #1
 8008574:	f8ca 6000 	str.w	r6, [sl]
 8008578:	f8da 3000 	ldr.w	r3, [sl]
 800857c:	4499      	add	r9, r3
 800857e:	2200      	movs	r2, #0
 8008580:	2300      	movs	r3, #0
 8008582:	4620      	mov	r0, r4
 8008584:	4629      	mov	r1, r5
 8008586:	f7f8 fa77 	bl	8000a78 <__aeabi_dcmpeq>
 800858a:	b108      	cbz	r0, 8008590 <__cvt+0xa4>
 800858c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008590:	2230      	movs	r2, #48	; 0x30
 8008592:	9b03      	ldr	r3, [sp, #12]
 8008594:	454b      	cmp	r3, r9
 8008596:	d307      	bcc.n	80085a8 <__cvt+0xbc>
 8008598:	9b03      	ldr	r3, [sp, #12]
 800859a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800859c:	1bdb      	subs	r3, r3, r7
 800859e:	4638      	mov	r0, r7
 80085a0:	6013      	str	r3, [r2, #0]
 80085a2:	b004      	add	sp, #16
 80085a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085a8:	1c59      	adds	r1, r3, #1
 80085aa:	9103      	str	r1, [sp, #12]
 80085ac:	701a      	strb	r2, [r3, #0]
 80085ae:	e7f0      	b.n	8008592 <__cvt+0xa6>

080085b0 <__exponent>:
 80085b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085b2:	4603      	mov	r3, r0
 80085b4:	2900      	cmp	r1, #0
 80085b6:	bfb8      	it	lt
 80085b8:	4249      	neglt	r1, r1
 80085ba:	f803 2b02 	strb.w	r2, [r3], #2
 80085be:	bfb4      	ite	lt
 80085c0:	222d      	movlt	r2, #45	; 0x2d
 80085c2:	222b      	movge	r2, #43	; 0x2b
 80085c4:	2909      	cmp	r1, #9
 80085c6:	7042      	strb	r2, [r0, #1]
 80085c8:	dd2a      	ble.n	8008620 <__exponent+0x70>
 80085ca:	f10d 0407 	add.w	r4, sp, #7
 80085ce:	46a4      	mov	ip, r4
 80085d0:	270a      	movs	r7, #10
 80085d2:	46a6      	mov	lr, r4
 80085d4:	460a      	mov	r2, r1
 80085d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80085da:	fb07 1516 	mls	r5, r7, r6, r1
 80085de:	3530      	adds	r5, #48	; 0x30
 80085e0:	2a63      	cmp	r2, #99	; 0x63
 80085e2:	f104 34ff 	add.w	r4, r4, #4294967295
 80085e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80085ea:	4631      	mov	r1, r6
 80085ec:	dcf1      	bgt.n	80085d2 <__exponent+0x22>
 80085ee:	3130      	adds	r1, #48	; 0x30
 80085f0:	f1ae 0502 	sub.w	r5, lr, #2
 80085f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80085f8:	1c44      	adds	r4, r0, #1
 80085fa:	4629      	mov	r1, r5
 80085fc:	4561      	cmp	r1, ip
 80085fe:	d30a      	bcc.n	8008616 <__exponent+0x66>
 8008600:	f10d 0209 	add.w	r2, sp, #9
 8008604:	eba2 020e 	sub.w	r2, r2, lr
 8008608:	4565      	cmp	r5, ip
 800860a:	bf88      	it	hi
 800860c:	2200      	movhi	r2, #0
 800860e:	4413      	add	r3, r2
 8008610:	1a18      	subs	r0, r3, r0
 8008612:	b003      	add	sp, #12
 8008614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008616:	f811 2b01 	ldrb.w	r2, [r1], #1
 800861a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800861e:	e7ed      	b.n	80085fc <__exponent+0x4c>
 8008620:	2330      	movs	r3, #48	; 0x30
 8008622:	3130      	adds	r1, #48	; 0x30
 8008624:	7083      	strb	r3, [r0, #2]
 8008626:	70c1      	strb	r1, [r0, #3]
 8008628:	1d03      	adds	r3, r0, #4
 800862a:	e7f1      	b.n	8008610 <__exponent+0x60>

0800862c <_printf_float>:
 800862c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008630:	ed2d 8b02 	vpush	{d8}
 8008634:	b08d      	sub	sp, #52	; 0x34
 8008636:	460c      	mov	r4, r1
 8008638:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800863c:	4616      	mov	r6, r2
 800863e:	461f      	mov	r7, r3
 8008640:	4605      	mov	r5, r0
 8008642:	f001 fd27 	bl	800a094 <_localeconv_r>
 8008646:	f8d0 a000 	ldr.w	sl, [r0]
 800864a:	4650      	mov	r0, sl
 800864c:	f7f7 fd98 	bl	8000180 <strlen>
 8008650:	2300      	movs	r3, #0
 8008652:	930a      	str	r3, [sp, #40]	; 0x28
 8008654:	6823      	ldr	r3, [r4, #0]
 8008656:	9305      	str	r3, [sp, #20]
 8008658:	f8d8 3000 	ldr.w	r3, [r8]
 800865c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008660:	3307      	adds	r3, #7
 8008662:	f023 0307 	bic.w	r3, r3, #7
 8008666:	f103 0208 	add.w	r2, r3, #8
 800866a:	f8c8 2000 	str.w	r2, [r8]
 800866e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008672:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008676:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800867a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800867e:	9307      	str	r3, [sp, #28]
 8008680:	f8cd 8018 	str.w	r8, [sp, #24]
 8008684:	ee08 0a10 	vmov	s16, r0
 8008688:	4b9f      	ldr	r3, [pc, #636]	; (8008908 <_printf_float+0x2dc>)
 800868a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800868e:	f04f 32ff 	mov.w	r2, #4294967295
 8008692:	f7f8 fa23 	bl	8000adc <__aeabi_dcmpun>
 8008696:	bb88      	cbnz	r0, 80086fc <_printf_float+0xd0>
 8008698:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800869c:	4b9a      	ldr	r3, [pc, #616]	; (8008908 <_printf_float+0x2dc>)
 800869e:	f04f 32ff 	mov.w	r2, #4294967295
 80086a2:	f7f8 f9fd 	bl	8000aa0 <__aeabi_dcmple>
 80086a6:	bb48      	cbnz	r0, 80086fc <_printf_float+0xd0>
 80086a8:	2200      	movs	r2, #0
 80086aa:	2300      	movs	r3, #0
 80086ac:	4640      	mov	r0, r8
 80086ae:	4649      	mov	r1, r9
 80086b0:	f7f8 f9ec 	bl	8000a8c <__aeabi_dcmplt>
 80086b4:	b110      	cbz	r0, 80086bc <_printf_float+0x90>
 80086b6:	232d      	movs	r3, #45	; 0x2d
 80086b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086bc:	4b93      	ldr	r3, [pc, #588]	; (800890c <_printf_float+0x2e0>)
 80086be:	4894      	ldr	r0, [pc, #592]	; (8008910 <_printf_float+0x2e4>)
 80086c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80086c4:	bf94      	ite	ls
 80086c6:	4698      	movls	r8, r3
 80086c8:	4680      	movhi	r8, r0
 80086ca:	2303      	movs	r3, #3
 80086cc:	6123      	str	r3, [r4, #16]
 80086ce:	9b05      	ldr	r3, [sp, #20]
 80086d0:	f023 0204 	bic.w	r2, r3, #4
 80086d4:	6022      	str	r2, [r4, #0]
 80086d6:	f04f 0900 	mov.w	r9, #0
 80086da:	9700      	str	r7, [sp, #0]
 80086dc:	4633      	mov	r3, r6
 80086de:	aa0b      	add	r2, sp, #44	; 0x2c
 80086e0:	4621      	mov	r1, r4
 80086e2:	4628      	mov	r0, r5
 80086e4:	f000 f9d8 	bl	8008a98 <_printf_common>
 80086e8:	3001      	adds	r0, #1
 80086ea:	f040 8090 	bne.w	800880e <_printf_float+0x1e2>
 80086ee:	f04f 30ff 	mov.w	r0, #4294967295
 80086f2:	b00d      	add	sp, #52	; 0x34
 80086f4:	ecbd 8b02 	vpop	{d8}
 80086f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086fc:	4642      	mov	r2, r8
 80086fe:	464b      	mov	r3, r9
 8008700:	4640      	mov	r0, r8
 8008702:	4649      	mov	r1, r9
 8008704:	f7f8 f9ea 	bl	8000adc <__aeabi_dcmpun>
 8008708:	b140      	cbz	r0, 800871c <_printf_float+0xf0>
 800870a:	464b      	mov	r3, r9
 800870c:	2b00      	cmp	r3, #0
 800870e:	bfbc      	itt	lt
 8008710:	232d      	movlt	r3, #45	; 0x2d
 8008712:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008716:	487f      	ldr	r0, [pc, #508]	; (8008914 <_printf_float+0x2e8>)
 8008718:	4b7f      	ldr	r3, [pc, #508]	; (8008918 <_printf_float+0x2ec>)
 800871a:	e7d1      	b.n	80086c0 <_printf_float+0x94>
 800871c:	6863      	ldr	r3, [r4, #4]
 800871e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008722:	9206      	str	r2, [sp, #24]
 8008724:	1c5a      	adds	r2, r3, #1
 8008726:	d13f      	bne.n	80087a8 <_printf_float+0x17c>
 8008728:	2306      	movs	r3, #6
 800872a:	6063      	str	r3, [r4, #4]
 800872c:	9b05      	ldr	r3, [sp, #20]
 800872e:	6861      	ldr	r1, [r4, #4]
 8008730:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008734:	2300      	movs	r3, #0
 8008736:	9303      	str	r3, [sp, #12]
 8008738:	ab0a      	add	r3, sp, #40	; 0x28
 800873a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800873e:	ab09      	add	r3, sp, #36	; 0x24
 8008740:	ec49 8b10 	vmov	d0, r8, r9
 8008744:	9300      	str	r3, [sp, #0]
 8008746:	6022      	str	r2, [r4, #0]
 8008748:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800874c:	4628      	mov	r0, r5
 800874e:	f7ff fecd 	bl	80084ec <__cvt>
 8008752:	9b06      	ldr	r3, [sp, #24]
 8008754:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008756:	2b47      	cmp	r3, #71	; 0x47
 8008758:	4680      	mov	r8, r0
 800875a:	d108      	bne.n	800876e <_printf_float+0x142>
 800875c:	1cc8      	adds	r0, r1, #3
 800875e:	db02      	blt.n	8008766 <_printf_float+0x13a>
 8008760:	6863      	ldr	r3, [r4, #4]
 8008762:	4299      	cmp	r1, r3
 8008764:	dd41      	ble.n	80087ea <_printf_float+0x1be>
 8008766:	f1ab 0b02 	sub.w	fp, fp, #2
 800876a:	fa5f fb8b 	uxtb.w	fp, fp
 800876e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008772:	d820      	bhi.n	80087b6 <_printf_float+0x18a>
 8008774:	3901      	subs	r1, #1
 8008776:	465a      	mov	r2, fp
 8008778:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800877c:	9109      	str	r1, [sp, #36]	; 0x24
 800877e:	f7ff ff17 	bl	80085b0 <__exponent>
 8008782:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008784:	1813      	adds	r3, r2, r0
 8008786:	2a01      	cmp	r2, #1
 8008788:	4681      	mov	r9, r0
 800878a:	6123      	str	r3, [r4, #16]
 800878c:	dc02      	bgt.n	8008794 <_printf_float+0x168>
 800878e:	6822      	ldr	r2, [r4, #0]
 8008790:	07d2      	lsls	r2, r2, #31
 8008792:	d501      	bpl.n	8008798 <_printf_float+0x16c>
 8008794:	3301      	adds	r3, #1
 8008796:	6123      	str	r3, [r4, #16]
 8008798:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800879c:	2b00      	cmp	r3, #0
 800879e:	d09c      	beq.n	80086da <_printf_float+0xae>
 80087a0:	232d      	movs	r3, #45	; 0x2d
 80087a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087a6:	e798      	b.n	80086da <_printf_float+0xae>
 80087a8:	9a06      	ldr	r2, [sp, #24]
 80087aa:	2a47      	cmp	r2, #71	; 0x47
 80087ac:	d1be      	bne.n	800872c <_printf_float+0x100>
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d1bc      	bne.n	800872c <_printf_float+0x100>
 80087b2:	2301      	movs	r3, #1
 80087b4:	e7b9      	b.n	800872a <_printf_float+0xfe>
 80087b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80087ba:	d118      	bne.n	80087ee <_printf_float+0x1c2>
 80087bc:	2900      	cmp	r1, #0
 80087be:	6863      	ldr	r3, [r4, #4]
 80087c0:	dd0b      	ble.n	80087da <_printf_float+0x1ae>
 80087c2:	6121      	str	r1, [r4, #16]
 80087c4:	b913      	cbnz	r3, 80087cc <_printf_float+0x1a0>
 80087c6:	6822      	ldr	r2, [r4, #0]
 80087c8:	07d0      	lsls	r0, r2, #31
 80087ca:	d502      	bpl.n	80087d2 <_printf_float+0x1a6>
 80087cc:	3301      	adds	r3, #1
 80087ce:	440b      	add	r3, r1
 80087d0:	6123      	str	r3, [r4, #16]
 80087d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80087d4:	f04f 0900 	mov.w	r9, #0
 80087d8:	e7de      	b.n	8008798 <_printf_float+0x16c>
 80087da:	b913      	cbnz	r3, 80087e2 <_printf_float+0x1b6>
 80087dc:	6822      	ldr	r2, [r4, #0]
 80087de:	07d2      	lsls	r2, r2, #31
 80087e0:	d501      	bpl.n	80087e6 <_printf_float+0x1ba>
 80087e2:	3302      	adds	r3, #2
 80087e4:	e7f4      	b.n	80087d0 <_printf_float+0x1a4>
 80087e6:	2301      	movs	r3, #1
 80087e8:	e7f2      	b.n	80087d0 <_printf_float+0x1a4>
 80087ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80087ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087f0:	4299      	cmp	r1, r3
 80087f2:	db05      	blt.n	8008800 <_printf_float+0x1d4>
 80087f4:	6823      	ldr	r3, [r4, #0]
 80087f6:	6121      	str	r1, [r4, #16]
 80087f8:	07d8      	lsls	r0, r3, #31
 80087fa:	d5ea      	bpl.n	80087d2 <_printf_float+0x1a6>
 80087fc:	1c4b      	adds	r3, r1, #1
 80087fe:	e7e7      	b.n	80087d0 <_printf_float+0x1a4>
 8008800:	2900      	cmp	r1, #0
 8008802:	bfd4      	ite	le
 8008804:	f1c1 0202 	rsble	r2, r1, #2
 8008808:	2201      	movgt	r2, #1
 800880a:	4413      	add	r3, r2
 800880c:	e7e0      	b.n	80087d0 <_printf_float+0x1a4>
 800880e:	6823      	ldr	r3, [r4, #0]
 8008810:	055a      	lsls	r2, r3, #21
 8008812:	d407      	bmi.n	8008824 <_printf_float+0x1f8>
 8008814:	6923      	ldr	r3, [r4, #16]
 8008816:	4642      	mov	r2, r8
 8008818:	4631      	mov	r1, r6
 800881a:	4628      	mov	r0, r5
 800881c:	47b8      	blx	r7
 800881e:	3001      	adds	r0, #1
 8008820:	d12c      	bne.n	800887c <_printf_float+0x250>
 8008822:	e764      	b.n	80086ee <_printf_float+0xc2>
 8008824:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008828:	f240 80e0 	bls.w	80089ec <_printf_float+0x3c0>
 800882c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008830:	2200      	movs	r2, #0
 8008832:	2300      	movs	r3, #0
 8008834:	f7f8 f920 	bl	8000a78 <__aeabi_dcmpeq>
 8008838:	2800      	cmp	r0, #0
 800883a:	d034      	beq.n	80088a6 <_printf_float+0x27a>
 800883c:	4a37      	ldr	r2, [pc, #220]	; (800891c <_printf_float+0x2f0>)
 800883e:	2301      	movs	r3, #1
 8008840:	4631      	mov	r1, r6
 8008842:	4628      	mov	r0, r5
 8008844:	47b8      	blx	r7
 8008846:	3001      	adds	r0, #1
 8008848:	f43f af51 	beq.w	80086ee <_printf_float+0xc2>
 800884c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008850:	429a      	cmp	r2, r3
 8008852:	db02      	blt.n	800885a <_printf_float+0x22e>
 8008854:	6823      	ldr	r3, [r4, #0]
 8008856:	07d8      	lsls	r0, r3, #31
 8008858:	d510      	bpl.n	800887c <_printf_float+0x250>
 800885a:	ee18 3a10 	vmov	r3, s16
 800885e:	4652      	mov	r2, sl
 8008860:	4631      	mov	r1, r6
 8008862:	4628      	mov	r0, r5
 8008864:	47b8      	blx	r7
 8008866:	3001      	adds	r0, #1
 8008868:	f43f af41 	beq.w	80086ee <_printf_float+0xc2>
 800886c:	f04f 0800 	mov.w	r8, #0
 8008870:	f104 091a 	add.w	r9, r4, #26
 8008874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008876:	3b01      	subs	r3, #1
 8008878:	4543      	cmp	r3, r8
 800887a:	dc09      	bgt.n	8008890 <_printf_float+0x264>
 800887c:	6823      	ldr	r3, [r4, #0]
 800887e:	079b      	lsls	r3, r3, #30
 8008880:	f100 8105 	bmi.w	8008a8e <_printf_float+0x462>
 8008884:	68e0      	ldr	r0, [r4, #12]
 8008886:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008888:	4298      	cmp	r0, r3
 800888a:	bfb8      	it	lt
 800888c:	4618      	movlt	r0, r3
 800888e:	e730      	b.n	80086f2 <_printf_float+0xc6>
 8008890:	2301      	movs	r3, #1
 8008892:	464a      	mov	r2, r9
 8008894:	4631      	mov	r1, r6
 8008896:	4628      	mov	r0, r5
 8008898:	47b8      	blx	r7
 800889a:	3001      	adds	r0, #1
 800889c:	f43f af27 	beq.w	80086ee <_printf_float+0xc2>
 80088a0:	f108 0801 	add.w	r8, r8, #1
 80088a4:	e7e6      	b.n	8008874 <_printf_float+0x248>
 80088a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	dc39      	bgt.n	8008920 <_printf_float+0x2f4>
 80088ac:	4a1b      	ldr	r2, [pc, #108]	; (800891c <_printf_float+0x2f0>)
 80088ae:	2301      	movs	r3, #1
 80088b0:	4631      	mov	r1, r6
 80088b2:	4628      	mov	r0, r5
 80088b4:	47b8      	blx	r7
 80088b6:	3001      	adds	r0, #1
 80088b8:	f43f af19 	beq.w	80086ee <_printf_float+0xc2>
 80088bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088c0:	4313      	orrs	r3, r2
 80088c2:	d102      	bne.n	80088ca <_printf_float+0x29e>
 80088c4:	6823      	ldr	r3, [r4, #0]
 80088c6:	07d9      	lsls	r1, r3, #31
 80088c8:	d5d8      	bpl.n	800887c <_printf_float+0x250>
 80088ca:	ee18 3a10 	vmov	r3, s16
 80088ce:	4652      	mov	r2, sl
 80088d0:	4631      	mov	r1, r6
 80088d2:	4628      	mov	r0, r5
 80088d4:	47b8      	blx	r7
 80088d6:	3001      	adds	r0, #1
 80088d8:	f43f af09 	beq.w	80086ee <_printf_float+0xc2>
 80088dc:	f04f 0900 	mov.w	r9, #0
 80088e0:	f104 0a1a 	add.w	sl, r4, #26
 80088e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088e6:	425b      	negs	r3, r3
 80088e8:	454b      	cmp	r3, r9
 80088ea:	dc01      	bgt.n	80088f0 <_printf_float+0x2c4>
 80088ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088ee:	e792      	b.n	8008816 <_printf_float+0x1ea>
 80088f0:	2301      	movs	r3, #1
 80088f2:	4652      	mov	r2, sl
 80088f4:	4631      	mov	r1, r6
 80088f6:	4628      	mov	r0, r5
 80088f8:	47b8      	blx	r7
 80088fa:	3001      	adds	r0, #1
 80088fc:	f43f aef7 	beq.w	80086ee <_printf_float+0xc2>
 8008900:	f109 0901 	add.w	r9, r9, #1
 8008904:	e7ee      	b.n	80088e4 <_printf_float+0x2b8>
 8008906:	bf00      	nop
 8008908:	7fefffff 	.word	0x7fefffff
 800890c:	0800b3ec 	.word	0x0800b3ec
 8008910:	0800b3f0 	.word	0x0800b3f0
 8008914:	0800b3f8 	.word	0x0800b3f8
 8008918:	0800b3f4 	.word	0x0800b3f4
 800891c:	0800b3fc 	.word	0x0800b3fc
 8008920:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008922:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008924:	429a      	cmp	r2, r3
 8008926:	bfa8      	it	ge
 8008928:	461a      	movge	r2, r3
 800892a:	2a00      	cmp	r2, #0
 800892c:	4691      	mov	r9, r2
 800892e:	dc37      	bgt.n	80089a0 <_printf_float+0x374>
 8008930:	f04f 0b00 	mov.w	fp, #0
 8008934:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008938:	f104 021a 	add.w	r2, r4, #26
 800893c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800893e:	9305      	str	r3, [sp, #20]
 8008940:	eba3 0309 	sub.w	r3, r3, r9
 8008944:	455b      	cmp	r3, fp
 8008946:	dc33      	bgt.n	80089b0 <_printf_float+0x384>
 8008948:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800894c:	429a      	cmp	r2, r3
 800894e:	db3b      	blt.n	80089c8 <_printf_float+0x39c>
 8008950:	6823      	ldr	r3, [r4, #0]
 8008952:	07da      	lsls	r2, r3, #31
 8008954:	d438      	bmi.n	80089c8 <_printf_float+0x39c>
 8008956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008958:	9a05      	ldr	r2, [sp, #20]
 800895a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800895c:	1a9a      	subs	r2, r3, r2
 800895e:	eba3 0901 	sub.w	r9, r3, r1
 8008962:	4591      	cmp	r9, r2
 8008964:	bfa8      	it	ge
 8008966:	4691      	movge	r9, r2
 8008968:	f1b9 0f00 	cmp.w	r9, #0
 800896c:	dc35      	bgt.n	80089da <_printf_float+0x3ae>
 800896e:	f04f 0800 	mov.w	r8, #0
 8008972:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008976:	f104 0a1a 	add.w	sl, r4, #26
 800897a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800897e:	1a9b      	subs	r3, r3, r2
 8008980:	eba3 0309 	sub.w	r3, r3, r9
 8008984:	4543      	cmp	r3, r8
 8008986:	f77f af79 	ble.w	800887c <_printf_float+0x250>
 800898a:	2301      	movs	r3, #1
 800898c:	4652      	mov	r2, sl
 800898e:	4631      	mov	r1, r6
 8008990:	4628      	mov	r0, r5
 8008992:	47b8      	blx	r7
 8008994:	3001      	adds	r0, #1
 8008996:	f43f aeaa 	beq.w	80086ee <_printf_float+0xc2>
 800899a:	f108 0801 	add.w	r8, r8, #1
 800899e:	e7ec      	b.n	800897a <_printf_float+0x34e>
 80089a0:	4613      	mov	r3, r2
 80089a2:	4631      	mov	r1, r6
 80089a4:	4642      	mov	r2, r8
 80089a6:	4628      	mov	r0, r5
 80089a8:	47b8      	blx	r7
 80089aa:	3001      	adds	r0, #1
 80089ac:	d1c0      	bne.n	8008930 <_printf_float+0x304>
 80089ae:	e69e      	b.n	80086ee <_printf_float+0xc2>
 80089b0:	2301      	movs	r3, #1
 80089b2:	4631      	mov	r1, r6
 80089b4:	4628      	mov	r0, r5
 80089b6:	9205      	str	r2, [sp, #20]
 80089b8:	47b8      	blx	r7
 80089ba:	3001      	adds	r0, #1
 80089bc:	f43f ae97 	beq.w	80086ee <_printf_float+0xc2>
 80089c0:	9a05      	ldr	r2, [sp, #20]
 80089c2:	f10b 0b01 	add.w	fp, fp, #1
 80089c6:	e7b9      	b.n	800893c <_printf_float+0x310>
 80089c8:	ee18 3a10 	vmov	r3, s16
 80089cc:	4652      	mov	r2, sl
 80089ce:	4631      	mov	r1, r6
 80089d0:	4628      	mov	r0, r5
 80089d2:	47b8      	blx	r7
 80089d4:	3001      	adds	r0, #1
 80089d6:	d1be      	bne.n	8008956 <_printf_float+0x32a>
 80089d8:	e689      	b.n	80086ee <_printf_float+0xc2>
 80089da:	9a05      	ldr	r2, [sp, #20]
 80089dc:	464b      	mov	r3, r9
 80089de:	4442      	add	r2, r8
 80089e0:	4631      	mov	r1, r6
 80089e2:	4628      	mov	r0, r5
 80089e4:	47b8      	blx	r7
 80089e6:	3001      	adds	r0, #1
 80089e8:	d1c1      	bne.n	800896e <_printf_float+0x342>
 80089ea:	e680      	b.n	80086ee <_printf_float+0xc2>
 80089ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089ee:	2a01      	cmp	r2, #1
 80089f0:	dc01      	bgt.n	80089f6 <_printf_float+0x3ca>
 80089f2:	07db      	lsls	r3, r3, #31
 80089f4:	d538      	bpl.n	8008a68 <_printf_float+0x43c>
 80089f6:	2301      	movs	r3, #1
 80089f8:	4642      	mov	r2, r8
 80089fa:	4631      	mov	r1, r6
 80089fc:	4628      	mov	r0, r5
 80089fe:	47b8      	blx	r7
 8008a00:	3001      	adds	r0, #1
 8008a02:	f43f ae74 	beq.w	80086ee <_printf_float+0xc2>
 8008a06:	ee18 3a10 	vmov	r3, s16
 8008a0a:	4652      	mov	r2, sl
 8008a0c:	4631      	mov	r1, r6
 8008a0e:	4628      	mov	r0, r5
 8008a10:	47b8      	blx	r7
 8008a12:	3001      	adds	r0, #1
 8008a14:	f43f ae6b 	beq.w	80086ee <_printf_float+0xc2>
 8008a18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	2300      	movs	r3, #0
 8008a20:	f7f8 f82a 	bl	8000a78 <__aeabi_dcmpeq>
 8008a24:	b9d8      	cbnz	r0, 8008a5e <_printf_float+0x432>
 8008a26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a28:	f108 0201 	add.w	r2, r8, #1
 8008a2c:	3b01      	subs	r3, #1
 8008a2e:	4631      	mov	r1, r6
 8008a30:	4628      	mov	r0, r5
 8008a32:	47b8      	blx	r7
 8008a34:	3001      	adds	r0, #1
 8008a36:	d10e      	bne.n	8008a56 <_printf_float+0x42a>
 8008a38:	e659      	b.n	80086ee <_printf_float+0xc2>
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	4652      	mov	r2, sl
 8008a3e:	4631      	mov	r1, r6
 8008a40:	4628      	mov	r0, r5
 8008a42:	47b8      	blx	r7
 8008a44:	3001      	adds	r0, #1
 8008a46:	f43f ae52 	beq.w	80086ee <_printf_float+0xc2>
 8008a4a:	f108 0801 	add.w	r8, r8, #1
 8008a4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a50:	3b01      	subs	r3, #1
 8008a52:	4543      	cmp	r3, r8
 8008a54:	dcf1      	bgt.n	8008a3a <_printf_float+0x40e>
 8008a56:	464b      	mov	r3, r9
 8008a58:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008a5c:	e6dc      	b.n	8008818 <_printf_float+0x1ec>
 8008a5e:	f04f 0800 	mov.w	r8, #0
 8008a62:	f104 0a1a 	add.w	sl, r4, #26
 8008a66:	e7f2      	b.n	8008a4e <_printf_float+0x422>
 8008a68:	2301      	movs	r3, #1
 8008a6a:	4642      	mov	r2, r8
 8008a6c:	e7df      	b.n	8008a2e <_printf_float+0x402>
 8008a6e:	2301      	movs	r3, #1
 8008a70:	464a      	mov	r2, r9
 8008a72:	4631      	mov	r1, r6
 8008a74:	4628      	mov	r0, r5
 8008a76:	47b8      	blx	r7
 8008a78:	3001      	adds	r0, #1
 8008a7a:	f43f ae38 	beq.w	80086ee <_printf_float+0xc2>
 8008a7e:	f108 0801 	add.w	r8, r8, #1
 8008a82:	68e3      	ldr	r3, [r4, #12]
 8008a84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a86:	1a5b      	subs	r3, r3, r1
 8008a88:	4543      	cmp	r3, r8
 8008a8a:	dcf0      	bgt.n	8008a6e <_printf_float+0x442>
 8008a8c:	e6fa      	b.n	8008884 <_printf_float+0x258>
 8008a8e:	f04f 0800 	mov.w	r8, #0
 8008a92:	f104 0919 	add.w	r9, r4, #25
 8008a96:	e7f4      	b.n	8008a82 <_printf_float+0x456>

08008a98 <_printf_common>:
 8008a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a9c:	4616      	mov	r6, r2
 8008a9e:	4699      	mov	r9, r3
 8008aa0:	688a      	ldr	r2, [r1, #8]
 8008aa2:	690b      	ldr	r3, [r1, #16]
 8008aa4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	bfb8      	it	lt
 8008aac:	4613      	movlt	r3, r2
 8008aae:	6033      	str	r3, [r6, #0]
 8008ab0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ab4:	4607      	mov	r7, r0
 8008ab6:	460c      	mov	r4, r1
 8008ab8:	b10a      	cbz	r2, 8008abe <_printf_common+0x26>
 8008aba:	3301      	adds	r3, #1
 8008abc:	6033      	str	r3, [r6, #0]
 8008abe:	6823      	ldr	r3, [r4, #0]
 8008ac0:	0699      	lsls	r1, r3, #26
 8008ac2:	bf42      	ittt	mi
 8008ac4:	6833      	ldrmi	r3, [r6, #0]
 8008ac6:	3302      	addmi	r3, #2
 8008ac8:	6033      	strmi	r3, [r6, #0]
 8008aca:	6825      	ldr	r5, [r4, #0]
 8008acc:	f015 0506 	ands.w	r5, r5, #6
 8008ad0:	d106      	bne.n	8008ae0 <_printf_common+0x48>
 8008ad2:	f104 0a19 	add.w	sl, r4, #25
 8008ad6:	68e3      	ldr	r3, [r4, #12]
 8008ad8:	6832      	ldr	r2, [r6, #0]
 8008ada:	1a9b      	subs	r3, r3, r2
 8008adc:	42ab      	cmp	r3, r5
 8008ade:	dc26      	bgt.n	8008b2e <_printf_common+0x96>
 8008ae0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ae4:	1e13      	subs	r3, r2, #0
 8008ae6:	6822      	ldr	r2, [r4, #0]
 8008ae8:	bf18      	it	ne
 8008aea:	2301      	movne	r3, #1
 8008aec:	0692      	lsls	r2, r2, #26
 8008aee:	d42b      	bmi.n	8008b48 <_printf_common+0xb0>
 8008af0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008af4:	4649      	mov	r1, r9
 8008af6:	4638      	mov	r0, r7
 8008af8:	47c0      	blx	r8
 8008afa:	3001      	adds	r0, #1
 8008afc:	d01e      	beq.n	8008b3c <_printf_common+0xa4>
 8008afe:	6823      	ldr	r3, [r4, #0]
 8008b00:	68e5      	ldr	r5, [r4, #12]
 8008b02:	6832      	ldr	r2, [r6, #0]
 8008b04:	f003 0306 	and.w	r3, r3, #6
 8008b08:	2b04      	cmp	r3, #4
 8008b0a:	bf08      	it	eq
 8008b0c:	1aad      	subeq	r5, r5, r2
 8008b0e:	68a3      	ldr	r3, [r4, #8]
 8008b10:	6922      	ldr	r2, [r4, #16]
 8008b12:	bf0c      	ite	eq
 8008b14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b18:	2500      	movne	r5, #0
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	bfc4      	itt	gt
 8008b1e:	1a9b      	subgt	r3, r3, r2
 8008b20:	18ed      	addgt	r5, r5, r3
 8008b22:	2600      	movs	r6, #0
 8008b24:	341a      	adds	r4, #26
 8008b26:	42b5      	cmp	r5, r6
 8008b28:	d11a      	bne.n	8008b60 <_printf_common+0xc8>
 8008b2a:	2000      	movs	r0, #0
 8008b2c:	e008      	b.n	8008b40 <_printf_common+0xa8>
 8008b2e:	2301      	movs	r3, #1
 8008b30:	4652      	mov	r2, sl
 8008b32:	4649      	mov	r1, r9
 8008b34:	4638      	mov	r0, r7
 8008b36:	47c0      	blx	r8
 8008b38:	3001      	adds	r0, #1
 8008b3a:	d103      	bne.n	8008b44 <_printf_common+0xac>
 8008b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b44:	3501      	adds	r5, #1
 8008b46:	e7c6      	b.n	8008ad6 <_printf_common+0x3e>
 8008b48:	18e1      	adds	r1, r4, r3
 8008b4a:	1c5a      	adds	r2, r3, #1
 8008b4c:	2030      	movs	r0, #48	; 0x30
 8008b4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b52:	4422      	add	r2, r4
 8008b54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b5c:	3302      	adds	r3, #2
 8008b5e:	e7c7      	b.n	8008af0 <_printf_common+0x58>
 8008b60:	2301      	movs	r3, #1
 8008b62:	4622      	mov	r2, r4
 8008b64:	4649      	mov	r1, r9
 8008b66:	4638      	mov	r0, r7
 8008b68:	47c0      	blx	r8
 8008b6a:	3001      	adds	r0, #1
 8008b6c:	d0e6      	beq.n	8008b3c <_printf_common+0xa4>
 8008b6e:	3601      	adds	r6, #1
 8008b70:	e7d9      	b.n	8008b26 <_printf_common+0x8e>
	...

08008b74 <_printf_i>:
 8008b74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b78:	7e0f      	ldrb	r7, [r1, #24]
 8008b7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b7c:	2f78      	cmp	r7, #120	; 0x78
 8008b7e:	4691      	mov	r9, r2
 8008b80:	4680      	mov	r8, r0
 8008b82:	460c      	mov	r4, r1
 8008b84:	469a      	mov	sl, r3
 8008b86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b8a:	d807      	bhi.n	8008b9c <_printf_i+0x28>
 8008b8c:	2f62      	cmp	r7, #98	; 0x62
 8008b8e:	d80a      	bhi.n	8008ba6 <_printf_i+0x32>
 8008b90:	2f00      	cmp	r7, #0
 8008b92:	f000 80d8 	beq.w	8008d46 <_printf_i+0x1d2>
 8008b96:	2f58      	cmp	r7, #88	; 0x58
 8008b98:	f000 80a3 	beq.w	8008ce2 <_printf_i+0x16e>
 8008b9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ba0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ba4:	e03a      	b.n	8008c1c <_printf_i+0xa8>
 8008ba6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008baa:	2b15      	cmp	r3, #21
 8008bac:	d8f6      	bhi.n	8008b9c <_printf_i+0x28>
 8008bae:	a101      	add	r1, pc, #4	; (adr r1, 8008bb4 <_printf_i+0x40>)
 8008bb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008bb4:	08008c0d 	.word	0x08008c0d
 8008bb8:	08008c21 	.word	0x08008c21
 8008bbc:	08008b9d 	.word	0x08008b9d
 8008bc0:	08008b9d 	.word	0x08008b9d
 8008bc4:	08008b9d 	.word	0x08008b9d
 8008bc8:	08008b9d 	.word	0x08008b9d
 8008bcc:	08008c21 	.word	0x08008c21
 8008bd0:	08008b9d 	.word	0x08008b9d
 8008bd4:	08008b9d 	.word	0x08008b9d
 8008bd8:	08008b9d 	.word	0x08008b9d
 8008bdc:	08008b9d 	.word	0x08008b9d
 8008be0:	08008d2d 	.word	0x08008d2d
 8008be4:	08008c51 	.word	0x08008c51
 8008be8:	08008d0f 	.word	0x08008d0f
 8008bec:	08008b9d 	.word	0x08008b9d
 8008bf0:	08008b9d 	.word	0x08008b9d
 8008bf4:	08008d4f 	.word	0x08008d4f
 8008bf8:	08008b9d 	.word	0x08008b9d
 8008bfc:	08008c51 	.word	0x08008c51
 8008c00:	08008b9d 	.word	0x08008b9d
 8008c04:	08008b9d 	.word	0x08008b9d
 8008c08:	08008d17 	.word	0x08008d17
 8008c0c:	682b      	ldr	r3, [r5, #0]
 8008c0e:	1d1a      	adds	r2, r3, #4
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	602a      	str	r2, [r5, #0]
 8008c14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	e0a3      	b.n	8008d68 <_printf_i+0x1f4>
 8008c20:	6820      	ldr	r0, [r4, #0]
 8008c22:	6829      	ldr	r1, [r5, #0]
 8008c24:	0606      	lsls	r6, r0, #24
 8008c26:	f101 0304 	add.w	r3, r1, #4
 8008c2a:	d50a      	bpl.n	8008c42 <_printf_i+0xce>
 8008c2c:	680e      	ldr	r6, [r1, #0]
 8008c2e:	602b      	str	r3, [r5, #0]
 8008c30:	2e00      	cmp	r6, #0
 8008c32:	da03      	bge.n	8008c3c <_printf_i+0xc8>
 8008c34:	232d      	movs	r3, #45	; 0x2d
 8008c36:	4276      	negs	r6, r6
 8008c38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c3c:	485e      	ldr	r0, [pc, #376]	; (8008db8 <_printf_i+0x244>)
 8008c3e:	230a      	movs	r3, #10
 8008c40:	e019      	b.n	8008c76 <_printf_i+0x102>
 8008c42:	680e      	ldr	r6, [r1, #0]
 8008c44:	602b      	str	r3, [r5, #0]
 8008c46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008c4a:	bf18      	it	ne
 8008c4c:	b236      	sxthne	r6, r6
 8008c4e:	e7ef      	b.n	8008c30 <_printf_i+0xbc>
 8008c50:	682b      	ldr	r3, [r5, #0]
 8008c52:	6820      	ldr	r0, [r4, #0]
 8008c54:	1d19      	adds	r1, r3, #4
 8008c56:	6029      	str	r1, [r5, #0]
 8008c58:	0601      	lsls	r1, r0, #24
 8008c5a:	d501      	bpl.n	8008c60 <_printf_i+0xec>
 8008c5c:	681e      	ldr	r6, [r3, #0]
 8008c5e:	e002      	b.n	8008c66 <_printf_i+0xf2>
 8008c60:	0646      	lsls	r6, r0, #25
 8008c62:	d5fb      	bpl.n	8008c5c <_printf_i+0xe8>
 8008c64:	881e      	ldrh	r6, [r3, #0]
 8008c66:	4854      	ldr	r0, [pc, #336]	; (8008db8 <_printf_i+0x244>)
 8008c68:	2f6f      	cmp	r7, #111	; 0x6f
 8008c6a:	bf0c      	ite	eq
 8008c6c:	2308      	moveq	r3, #8
 8008c6e:	230a      	movne	r3, #10
 8008c70:	2100      	movs	r1, #0
 8008c72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c76:	6865      	ldr	r5, [r4, #4]
 8008c78:	60a5      	str	r5, [r4, #8]
 8008c7a:	2d00      	cmp	r5, #0
 8008c7c:	bfa2      	ittt	ge
 8008c7e:	6821      	ldrge	r1, [r4, #0]
 8008c80:	f021 0104 	bicge.w	r1, r1, #4
 8008c84:	6021      	strge	r1, [r4, #0]
 8008c86:	b90e      	cbnz	r6, 8008c8c <_printf_i+0x118>
 8008c88:	2d00      	cmp	r5, #0
 8008c8a:	d04d      	beq.n	8008d28 <_printf_i+0x1b4>
 8008c8c:	4615      	mov	r5, r2
 8008c8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008c92:	fb03 6711 	mls	r7, r3, r1, r6
 8008c96:	5dc7      	ldrb	r7, [r0, r7]
 8008c98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008c9c:	4637      	mov	r7, r6
 8008c9e:	42bb      	cmp	r3, r7
 8008ca0:	460e      	mov	r6, r1
 8008ca2:	d9f4      	bls.n	8008c8e <_printf_i+0x11a>
 8008ca4:	2b08      	cmp	r3, #8
 8008ca6:	d10b      	bne.n	8008cc0 <_printf_i+0x14c>
 8008ca8:	6823      	ldr	r3, [r4, #0]
 8008caa:	07de      	lsls	r6, r3, #31
 8008cac:	d508      	bpl.n	8008cc0 <_printf_i+0x14c>
 8008cae:	6923      	ldr	r3, [r4, #16]
 8008cb0:	6861      	ldr	r1, [r4, #4]
 8008cb2:	4299      	cmp	r1, r3
 8008cb4:	bfde      	ittt	le
 8008cb6:	2330      	movle	r3, #48	; 0x30
 8008cb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008cbc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008cc0:	1b52      	subs	r2, r2, r5
 8008cc2:	6122      	str	r2, [r4, #16]
 8008cc4:	f8cd a000 	str.w	sl, [sp]
 8008cc8:	464b      	mov	r3, r9
 8008cca:	aa03      	add	r2, sp, #12
 8008ccc:	4621      	mov	r1, r4
 8008cce:	4640      	mov	r0, r8
 8008cd0:	f7ff fee2 	bl	8008a98 <_printf_common>
 8008cd4:	3001      	adds	r0, #1
 8008cd6:	d14c      	bne.n	8008d72 <_printf_i+0x1fe>
 8008cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cdc:	b004      	add	sp, #16
 8008cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ce2:	4835      	ldr	r0, [pc, #212]	; (8008db8 <_printf_i+0x244>)
 8008ce4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008ce8:	6829      	ldr	r1, [r5, #0]
 8008cea:	6823      	ldr	r3, [r4, #0]
 8008cec:	f851 6b04 	ldr.w	r6, [r1], #4
 8008cf0:	6029      	str	r1, [r5, #0]
 8008cf2:	061d      	lsls	r5, r3, #24
 8008cf4:	d514      	bpl.n	8008d20 <_printf_i+0x1ac>
 8008cf6:	07df      	lsls	r7, r3, #31
 8008cf8:	bf44      	itt	mi
 8008cfa:	f043 0320 	orrmi.w	r3, r3, #32
 8008cfe:	6023      	strmi	r3, [r4, #0]
 8008d00:	b91e      	cbnz	r6, 8008d0a <_printf_i+0x196>
 8008d02:	6823      	ldr	r3, [r4, #0]
 8008d04:	f023 0320 	bic.w	r3, r3, #32
 8008d08:	6023      	str	r3, [r4, #0]
 8008d0a:	2310      	movs	r3, #16
 8008d0c:	e7b0      	b.n	8008c70 <_printf_i+0xfc>
 8008d0e:	6823      	ldr	r3, [r4, #0]
 8008d10:	f043 0320 	orr.w	r3, r3, #32
 8008d14:	6023      	str	r3, [r4, #0]
 8008d16:	2378      	movs	r3, #120	; 0x78
 8008d18:	4828      	ldr	r0, [pc, #160]	; (8008dbc <_printf_i+0x248>)
 8008d1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d1e:	e7e3      	b.n	8008ce8 <_printf_i+0x174>
 8008d20:	0659      	lsls	r1, r3, #25
 8008d22:	bf48      	it	mi
 8008d24:	b2b6      	uxthmi	r6, r6
 8008d26:	e7e6      	b.n	8008cf6 <_printf_i+0x182>
 8008d28:	4615      	mov	r5, r2
 8008d2a:	e7bb      	b.n	8008ca4 <_printf_i+0x130>
 8008d2c:	682b      	ldr	r3, [r5, #0]
 8008d2e:	6826      	ldr	r6, [r4, #0]
 8008d30:	6961      	ldr	r1, [r4, #20]
 8008d32:	1d18      	adds	r0, r3, #4
 8008d34:	6028      	str	r0, [r5, #0]
 8008d36:	0635      	lsls	r5, r6, #24
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	d501      	bpl.n	8008d40 <_printf_i+0x1cc>
 8008d3c:	6019      	str	r1, [r3, #0]
 8008d3e:	e002      	b.n	8008d46 <_printf_i+0x1d2>
 8008d40:	0670      	lsls	r0, r6, #25
 8008d42:	d5fb      	bpl.n	8008d3c <_printf_i+0x1c8>
 8008d44:	8019      	strh	r1, [r3, #0]
 8008d46:	2300      	movs	r3, #0
 8008d48:	6123      	str	r3, [r4, #16]
 8008d4a:	4615      	mov	r5, r2
 8008d4c:	e7ba      	b.n	8008cc4 <_printf_i+0x150>
 8008d4e:	682b      	ldr	r3, [r5, #0]
 8008d50:	1d1a      	adds	r2, r3, #4
 8008d52:	602a      	str	r2, [r5, #0]
 8008d54:	681d      	ldr	r5, [r3, #0]
 8008d56:	6862      	ldr	r2, [r4, #4]
 8008d58:	2100      	movs	r1, #0
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	f7f7 fa18 	bl	8000190 <memchr>
 8008d60:	b108      	cbz	r0, 8008d66 <_printf_i+0x1f2>
 8008d62:	1b40      	subs	r0, r0, r5
 8008d64:	6060      	str	r0, [r4, #4]
 8008d66:	6863      	ldr	r3, [r4, #4]
 8008d68:	6123      	str	r3, [r4, #16]
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d70:	e7a8      	b.n	8008cc4 <_printf_i+0x150>
 8008d72:	6923      	ldr	r3, [r4, #16]
 8008d74:	462a      	mov	r2, r5
 8008d76:	4649      	mov	r1, r9
 8008d78:	4640      	mov	r0, r8
 8008d7a:	47d0      	blx	sl
 8008d7c:	3001      	adds	r0, #1
 8008d7e:	d0ab      	beq.n	8008cd8 <_printf_i+0x164>
 8008d80:	6823      	ldr	r3, [r4, #0]
 8008d82:	079b      	lsls	r3, r3, #30
 8008d84:	d413      	bmi.n	8008dae <_printf_i+0x23a>
 8008d86:	68e0      	ldr	r0, [r4, #12]
 8008d88:	9b03      	ldr	r3, [sp, #12]
 8008d8a:	4298      	cmp	r0, r3
 8008d8c:	bfb8      	it	lt
 8008d8e:	4618      	movlt	r0, r3
 8008d90:	e7a4      	b.n	8008cdc <_printf_i+0x168>
 8008d92:	2301      	movs	r3, #1
 8008d94:	4632      	mov	r2, r6
 8008d96:	4649      	mov	r1, r9
 8008d98:	4640      	mov	r0, r8
 8008d9a:	47d0      	blx	sl
 8008d9c:	3001      	adds	r0, #1
 8008d9e:	d09b      	beq.n	8008cd8 <_printf_i+0x164>
 8008da0:	3501      	adds	r5, #1
 8008da2:	68e3      	ldr	r3, [r4, #12]
 8008da4:	9903      	ldr	r1, [sp, #12]
 8008da6:	1a5b      	subs	r3, r3, r1
 8008da8:	42ab      	cmp	r3, r5
 8008daa:	dcf2      	bgt.n	8008d92 <_printf_i+0x21e>
 8008dac:	e7eb      	b.n	8008d86 <_printf_i+0x212>
 8008dae:	2500      	movs	r5, #0
 8008db0:	f104 0619 	add.w	r6, r4, #25
 8008db4:	e7f5      	b.n	8008da2 <_printf_i+0x22e>
 8008db6:	bf00      	nop
 8008db8:	0800b3fe 	.word	0x0800b3fe
 8008dbc:	0800b40f 	.word	0x0800b40f

08008dc0 <_puts_r>:
 8008dc0:	b570      	push	{r4, r5, r6, lr}
 8008dc2:	460e      	mov	r6, r1
 8008dc4:	4605      	mov	r5, r0
 8008dc6:	b118      	cbz	r0, 8008dd0 <_puts_r+0x10>
 8008dc8:	6983      	ldr	r3, [r0, #24]
 8008dca:	b90b      	cbnz	r3, 8008dd0 <_puts_r+0x10>
 8008dcc:	f001 f8c4 	bl	8009f58 <__sinit>
 8008dd0:	69ab      	ldr	r3, [r5, #24]
 8008dd2:	68ac      	ldr	r4, [r5, #8]
 8008dd4:	b913      	cbnz	r3, 8008ddc <_puts_r+0x1c>
 8008dd6:	4628      	mov	r0, r5
 8008dd8:	f001 f8be 	bl	8009f58 <__sinit>
 8008ddc:	4b2c      	ldr	r3, [pc, #176]	; (8008e90 <_puts_r+0xd0>)
 8008dde:	429c      	cmp	r4, r3
 8008de0:	d120      	bne.n	8008e24 <_puts_r+0x64>
 8008de2:	686c      	ldr	r4, [r5, #4]
 8008de4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008de6:	07db      	lsls	r3, r3, #31
 8008de8:	d405      	bmi.n	8008df6 <_puts_r+0x36>
 8008dea:	89a3      	ldrh	r3, [r4, #12]
 8008dec:	0598      	lsls	r0, r3, #22
 8008dee:	d402      	bmi.n	8008df6 <_puts_r+0x36>
 8008df0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008df2:	f001 f954 	bl	800a09e <__retarget_lock_acquire_recursive>
 8008df6:	89a3      	ldrh	r3, [r4, #12]
 8008df8:	0719      	lsls	r1, r3, #28
 8008dfa:	d51d      	bpl.n	8008e38 <_puts_r+0x78>
 8008dfc:	6923      	ldr	r3, [r4, #16]
 8008dfe:	b1db      	cbz	r3, 8008e38 <_puts_r+0x78>
 8008e00:	3e01      	subs	r6, #1
 8008e02:	68a3      	ldr	r3, [r4, #8]
 8008e04:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008e08:	3b01      	subs	r3, #1
 8008e0a:	60a3      	str	r3, [r4, #8]
 8008e0c:	bb39      	cbnz	r1, 8008e5e <_puts_r+0x9e>
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	da38      	bge.n	8008e84 <_puts_r+0xc4>
 8008e12:	4622      	mov	r2, r4
 8008e14:	210a      	movs	r1, #10
 8008e16:	4628      	mov	r0, r5
 8008e18:	f000 f848 	bl	8008eac <__swbuf_r>
 8008e1c:	3001      	adds	r0, #1
 8008e1e:	d011      	beq.n	8008e44 <_puts_r+0x84>
 8008e20:	250a      	movs	r5, #10
 8008e22:	e011      	b.n	8008e48 <_puts_r+0x88>
 8008e24:	4b1b      	ldr	r3, [pc, #108]	; (8008e94 <_puts_r+0xd4>)
 8008e26:	429c      	cmp	r4, r3
 8008e28:	d101      	bne.n	8008e2e <_puts_r+0x6e>
 8008e2a:	68ac      	ldr	r4, [r5, #8]
 8008e2c:	e7da      	b.n	8008de4 <_puts_r+0x24>
 8008e2e:	4b1a      	ldr	r3, [pc, #104]	; (8008e98 <_puts_r+0xd8>)
 8008e30:	429c      	cmp	r4, r3
 8008e32:	bf08      	it	eq
 8008e34:	68ec      	ldreq	r4, [r5, #12]
 8008e36:	e7d5      	b.n	8008de4 <_puts_r+0x24>
 8008e38:	4621      	mov	r1, r4
 8008e3a:	4628      	mov	r0, r5
 8008e3c:	f000 f888 	bl	8008f50 <__swsetup_r>
 8008e40:	2800      	cmp	r0, #0
 8008e42:	d0dd      	beq.n	8008e00 <_puts_r+0x40>
 8008e44:	f04f 35ff 	mov.w	r5, #4294967295
 8008e48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e4a:	07da      	lsls	r2, r3, #31
 8008e4c:	d405      	bmi.n	8008e5a <_puts_r+0x9a>
 8008e4e:	89a3      	ldrh	r3, [r4, #12]
 8008e50:	059b      	lsls	r3, r3, #22
 8008e52:	d402      	bmi.n	8008e5a <_puts_r+0x9a>
 8008e54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e56:	f001 f923 	bl	800a0a0 <__retarget_lock_release_recursive>
 8008e5a:	4628      	mov	r0, r5
 8008e5c:	bd70      	pop	{r4, r5, r6, pc}
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	da04      	bge.n	8008e6c <_puts_r+0xac>
 8008e62:	69a2      	ldr	r2, [r4, #24]
 8008e64:	429a      	cmp	r2, r3
 8008e66:	dc06      	bgt.n	8008e76 <_puts_r+0xb6>
 8008e68:	290a      	cmp	r1, #10
 8008e6a:	d004      	beq.n	8008e76 <_puts_r+0xb6>
 8008e6c:	6823      	ldr	r3, [r4, #0]
 8008e6e:	1c5a      	adds	r2, r3, #1
 8008e70:	6022      	str	r2, [r4, #0]
 8008e72:	7019      	strb	r1, [r3, #0]
 8008e74:	e7c5      	b.n	8008e02 <_puts_r+0x42>
 8008e76:	4622      	mov	r2, r4
 8008e78:	4628      	mov	r0, r5
 8008e7a:	f000 f817 	bl	8008eac <__swbuf_r>
 8008e7e:	3001      	adds	r0, #1
 8008e80:	d1bf      	bne.n	8008e02 <_puts_r+0x42>
 8008e82:	e7df      	b.n	8008e44 <_puts_r+0x84>
 8008e84:	6823      	ldr	r3, [r4, #0]
 8008e86:	250a      	movs	r5, #10
 8008e88:	1c5a      	adds	r2, r3, #1
 8008e8a:	6022      	str	r2, [r4, #0]
 8008e8c:	701d      	strb	r5, [r3, #0]
 8008e8e:	e7db      	b.n	8008e48 <_puts_r+0x88>
 8008e90:	0800b4d0 	.word	0x0800b4d0
 8008e94:	0800b4f0 	.word	0x0800b4f0
 8008e98:	0800b4b0 	.word	0x0800b4b0

08008e9c <puts>:
 8008e9c:	4b02      	ldr	r3, [pc, #8]	; (8008ea8 <puts+0xc>)
 8008e9e:	4601      	mov	r1, r0
 8008ea0:	6818      	ldr	r0, [r3, #0]
 8008ea2:	f7ff bf8d 	b.w	8008dc0 <_puts_r>
 8008ea6:	bf00      	nop
 8008ea8:	20000024 	.word	0x20000024

08008eac <__swbuf_r>:
 8008eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eae:	460e      	mov	r6, r1
 8008eb0:	4614      	mov	r4, r2
 8008eb2:	4605      	mov	r5, r0
 8008eb4:	b118      	cbz	r0, 8008ebe <__swbuf_r+0x12>
 8008eb6:	6983      	ldr	r3, [r0, #24]
 8008eb8:	b90b      	cbnz	r3, 8008ebe <__swbuf_r+0x12>
 8008eba:	f001 f84d 	bl	8009f58 <__sinit>
 8008ebe:	4b21      	ldr	r3, [pc, #132]	; (8008f44 <__swbuf_r+0x98>)
 8008ec0:	429c      	cmp	r4, r3
 8008ec2:	d12b      	bne.n	8008f1c <__swbuf_r+0x70>
 8008ec4:	686c      	ldr	r4, [r5, #4]
 8008ec6:	69a3      	ldr	r3, [r4, #24]
 8008ec8:	60a3      	str	r3, [r4, #8]
 8008eca:	89a3      	ldrh	r3, [r4, #12]
 8008ecc:	071a      	lsls	r2, r3, #28
 8008ece:	d52f      	bpl.n	8008f30 <__swbuf_r+0x84>
 8008ed0:	6923      	ldr	r3, [r4, #16]
 8008ed2:	b36b      	cbz	r3, 8008f30 <__swbuf_r+0x84>
 8008ed4:	6923      	ldr	r3, [r4, #16]
 8008ed6:	6820      	ldr	r0, [r4, #0]
 8008ed8:	1ac0      	subs	r0, r0, r3
 8008eda:	6963      	ldr	r3, [r4, #20]
 8008edc:	b2f6      	uxtb	r6, r6
 8008ede:	4283      	cmp	r3, r0
 8008ee0:	4637      	mov	r7, r6
 8008ee2:	dc04      	bgt.n	8008eee <__swbuf_r+0x42>
 8008ee4:	4621      	mov	r1, r4
 8008ee6:	4628      	mov	r0, r5
 8008ee8:	f000 ffa2 	bl	8009e30 <_fflush_r>
 8008eec:	bb30      	cbnz	r0, 8008f3c <__swbuf_r+0x90>
 8008eee:	68a3      	ldr	r3, [r4, #8]
 8008ef0:	3b01      	subs	r3, #1
 8008ef2:	60a3      	str	r3, [r4, #8]
 8008ef4:	6823      	ldr	r3, [r4, #0]
 8008ef6:	1c5a      	adds	r2, r3, #1
 8008ef8:	6022      	str	r2, [r4, #0]
 8008efa:	701e      	strb	r6, [r3, #0]
 8008efc:	6963      	ldr	r3, [r4, #20]
 8008efe:	3001      	adds	r0, #1
 8008f00:	4283      	cmp	r3, r0
 8008f02:	d004      	beq.n	8008f0e <__swbuf_r+0x62>
 8008f04:	89a3      	ldrh	r3, [r4, #12]
 8008f06:	07db      	lsls	r3, r3, #31
 8008f08:	d506      	bpl.n	8008f18 <__swbuf_r+0x6c>
 8008f0a:	2e0a      	cmp	r6, #10
 8008f0c:	d104      	bne.n	8008f18 <__swbuf_r+0x6c>
 8008f0e:	4621      	mov	r1, r4
 8008f10:	4628      	mov	r0, r5
 8008f12:	f000 ff8d 	bl	8009e30 <_fflush_r>
 8008f16:	b988      	cbnz	r0, 8008f3c <__swbuf_r+0x90>
 8008f18:	4638      	mov	r0, r7
 8008f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f1c:	4b0a      	ldr	r3, [pc, #40]	; (8008f48 <__swbuf_r+0x9c>)
 8008f1e:	429c      	cmp	r4, r3
 8008f20:	d101      	bne.n	8008f26 <__swbuf_r+0x7a>
 8008f22:	68ac      	ldr	r4, [r5, #8]
 8008f24:	e7cf      	b.n	8008ec6 <__swbuf_r+0x1a>
 8008f26:	4b09      	ldr	r3, [pc, #36]	; (8008f4c <__swbuf_r+0xa0>)
 8008f28:	429c      	cmp	r4, r3
 8008f2a:	bf08      	it	eq
 8008f2c:	68ec      	ldreq	r4, [r5, #12]
 8008f2e:	e7ca      	b.n	8008ec6 <__swbuf_r+0x1a>
 8008f30:	4621      	mov	r1, r4
 8008f32:	4628      	mov	r0, r5
 8008f34:	f000 f80c 	bl	8008f50 <__swsetup_r>
 8008f38:	2800      	cmp	r0, #0
 8008f3a:	d0cb      	beq.n	8008ed4 <__swbuf_r+0x28>
 8008f3c:	f04f 37ff 	mov.w	r7, #4294967295
 8008f40:	e7ea      	b.n	8008f18 <__swbuf_r+0x6c>
 8008f42:	bf00      	nop
 8008f44:	0800b4d0 	.word	0x0800b4d0
 8008f48:	0800b4f0 	.word	0x0800b4f0
 8008f4c:	0800b4b0 	.word	0x0800b4b0

08008f50 <__swsetup_r>:
 8008f50:	4b32      	ldr	r3, [pc, #200]	; (800901c <__swsetup_r+0xcc>)
 8008f52:	b570      	push	{r4, r5, r6, lr}
 8008f54:	681d      	ldr	r5, [r3, #0]
 8008f56:	4606      	mov	r6, r0
 8008f58:	460c      	mov	r4, r1
 8008f5a:	b125      	cbz	r5, 8008f66 <__swsetup_r+0x16>
 8008f5c:	69ab      	ldr	r3, [r5, #24]
 8008f5e:	b913      	cbnz	r3, 8008f66 <__swsetup_r+0x16>
 8008f60:	4628      	mov	r0, r5
 8008f62:	f000 fff9 	bl	8009f58 <__sinit>
 8008f66:	4b2e      	ldr	r3, [pc, #184]	; (8009020 <__swsetup_r+0xd0>)
 8008f68:	429c      	cmp	r4, r3
 8008f6a:	d10f      	bne.n	8008f8c <__swsetup_r+0x3c>
 8008f6c:	686c      	ldr	r4, [r5, #4]
 8008f6e:	89a3      	ldrh	r3, [r4, #12]
 8008f70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f74:	0719      	lsls	r1, r3, #28
 8008f76:	d42c      	bmi.n	8008fd2 <__swsetup_r+0x82>
 8008f78:	06dd      	lsls	r5, r3, #27
 8008f7a:	d411      	bmi.n	8008fa0 <__swsetup_r+0x50>
 8008f7c:	2309      	movs	r3, #9
 8008f7e:	6033      	str	r3, [r6, #0]
 8008f80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008f84:	81a3      	strh	r3, [r4, #12]
 8008f86:	f04f 30ff 	mov.w	r0, #4294967295
 8008f8a:	e03e      	b.n	800900a <__swsetup_r+0xba>
 8008f8c:	4b25      	ldr	r3, [pc, #148]	; (8009024 <__swsetup_r+0xd4>)
 8008f8e:	429c      	cmp	r4, r3
 8008f90:	d101      	bne.n	8008f96 <__swsetup_r+0x46>
 8008f92:	68ac      	ldr	r4, [r5, #8]
 8008f94:	e7eb      	b.n	8008f6e <__swsetup_r+0x1e>
 8008f96:	4b24      	ldr	r3, [pc, #144]	; (8009028 <__swsetup_r+0xd8>)
 8008f98:	429c      	cmp	r4, r3
 8008f9a:	bf08      	it	eq
 8008f9c:	68ec      	ldreq	r4, [r5, #12]
 8008f9e:	e7e6      	b.n	8008f6e <__swsetup_r+0x1e>
 8008fa0:	0758      	lsls	r0, r3, #29
 8008fa2:	d512      	bpl.n	8008fca <__swsetup_r+0x7a>
 8008fa4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fa6:	b141      	cbz	r1, 8008fba <__swsetup_r+0x6a>
 8008fa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fac:	4299      	cmp	r1, r3
 8008fae:	d002      	beq.n	8008fb6 <__swsetup_r+0x66>
 8008fb0:	4630      	mov	r0, r6
 8008fb2:	f001 fc7d 	bl	800a8b0 <_free_r>
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	6363      	str	r3, [r4, #52]	; 0x34
 8008fba:	89a3      	ldrh	r3, [r4, #12]
 8008fbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008fc0:	81a3      	strh	r3, [r4, #12]
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	6063      	str	r3, [r4, #4]
 8008fc6:	6923      	ldr	r3, [r4, #16]
 8008fc8:	6023      	str	r3, [r4, #0]
 8008fca:	89a3      	ldrh	r3, [r4, #12]
 8008fcc:	f043 0308 	orr.w	r3, r3, #8
 8008fd0:	81a3      	strh	r3, [r4, #12]
 8008fd2:	6923      	ldr	r3, [r4, #16]
 8008fd4:	b94b      	cbnz	r3, 8008fea <__swsetup_r+0x9a>
 8008fd6:	89a3      	ldrh	r3, [r4, #12]
 8008fd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008fdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fe0:	d003      	beq.n	8008fea <__swsetup_r+0x9a>
 8008fe2:	4621      	mov	r1, r4
 8008fe4:	4630      	mov	r0, r6
 8008fe6:	f001 f881 	bl	800a0ec <__smakebuf_r>
 8008fea:	89a0      	ldrh	r0, [r4, #12]
 8008fec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ff0:	f010 0301 	ands.w	r3, r0, #1
 8008ff4:	d00a      	beq.n	800900c <__swsetup_r+0xbc>
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	60a3      	str	r3, [r4, #8]
 8008ffa:	6963      	ldr	r3, [r4, #20]
 8008ffc:	425b      	negs	r3, r3
 8008ffe:	61a3      	str	r3, [r4, #24]
 8009000:	6923      	ldr	r3, [r4, #16]
 8009002:	b943      	cbnz	r3, 8009016 <__swsetup_r+0xc6>
 8009004:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009008:	d1ba      	bne.n	8008f80 <__swsetup_r+0x30>
 800900a:	bd70      	pop	{r4, r5, r6, pc}
 800900c:	0781      	lsls	r1, r0, #30
 800900e:	bf58      	it	pl
 8009010:	6963      	ldrpl	r3, [r4, #20]
 8009012:	60a3      	str	r3, [r4, #8]
 8009014:	e7f4      	b.n	8009000 <__swsetup_r+0xb0>
 8009016:	2000      	movs	r0, #0
 8009018:	e7f7      	b.n	800900a <__swsetup_r+0xba>
 800901a:	bf00      	nop
 800901c:	20000024 	.word	0x20000024
 8009020:	0800b4d0 	.word	0x0800b4d0
 8009024:	0800b4f0 	.word	0x0800b4f0
 8009028:	0800b4b0 	.word	0x0800b4b0

0800902c <quorem>:
 800902c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009030:	6903      	ldr	r3, [r0, #16]
 8009032:	690c      	ldr	r4, [r1, #16]
 8009034:	42a3      	cmp	r3, r4
 8009036:	4607      	mov	r7, r0
 8009038:	f2c0 8081 	blt.w	800913e <quorem+0x112>
 800903c:	3c01      	subs	r4, #1
 800903e:	f101 0814 	add.w	r8, r1, #20
 8009042:	f100 0514 	add.w	r5, r0, #20
 8009046:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800904a:	9301      	str	r3, [sp, #4]
 800904c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009050:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009054:	3301      	adds	r3, #1
 8009056:	429a      	cmp	r2, r3
 8009058:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800905c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009060:	fbb2 f6f3 	udiv	r6, r2, r3
 8009064:	d331      	bcc.n	80090ca <quorem+0x9e>
 8009066:	f04f 0e00 	mov.w	lr, #0
 800906a:	4640      	mov	r0, r8
 800906c:	46ac      	mov	ip, r5
 800906e:	46f2      	mov	sl, lr
 8009070:	f850 2b04 	ldr.w	r2, [r0], #4
 8009074:	b293      	uxth	r3, r2
 8009076:	fb06 e303 	mla	r3, r6, r3, lr
 800907a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800907e:	b29b      	uxth	r3, r3
 8009080:	ebaa 0303 	sub.w	r3, sl, r3
 8009084:	f8dc a000 	ldr.w	sl, [ip]
 8009088:	0c12      	lsrs	r2, r2, #16
 800908a:	fa13 f38a 	uxtah	r3, r3, sl
 800908e:	fb06 e202 	mla	r2, r6, r2, lr
 8009092:	9300      	str	r3, [sp, #0]
 8009094:	9b00      	ldr	r3, [sp, #0]
 8009096:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800909a:	b292      	uxth	r2, r2
 800909c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80090a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80090a4:	f8bd 3000 	ldrh.w	r3, [sp]
 80090a8:	4581      	cmp	r9, r0
 80090aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090ae:	f84c 3b04 	str.w	r3, [ip], #4
 80090b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80090b6:	d2db      	bcs.n	8009070 <quorem+0x44>
 80090b8:	f855 300b 	ldr.w	r3, [r5, fp]
 80090bc:	b92b      	cbnz	r3, 80090ca <quorem+0x9e>
 80090be:	9b01      	ldr	r3, [sp, #4]
 80090c0:	3b04      	subs	r3, #4
 80090c2:	429d      	cmp	r5, r3
 80090c4:	461a      	mov	r2, r3
 80090c6:	d32e      	bcc.n	8009126 <quorem+0xfa>
 80090c8:	613c      	str	r4, [r7, #16]
 80090ca:	4638      	mov	r0, r7
 80090cc:	f001 fad8 	bl	800a680 <__mcmp>
 80090d0:	2800      	cmp	r0, #0
 80090d2:	db24      	blt.n	800911e <quorem+0xf2>
 80090d4:	3601      	adds	r6, #1
 80090d6:	4628      	mov	r0, r5
 80090d8:	f04f 0c00 	mov.w	ip, #0
 80090dc:	f858 2b04 	ldr.w	r2, [r8], #4
 80090e0:	f8d0 e000 	ldr.w	lr, [r0]
 80090e4:	b293      	uxth	r3, r2
 80090e6:	ebac 0303 	sub.w	r3, ip, r3
 80090ea:	0c12      	lsrs	r2, r2, #16
 80090ec:	fa13 f38e 	uxtah	r3, r3, lr
 80090f0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80090f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80090f8:	b29b      	uxth	r3, r3
 80090fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090fe:	45c1      	cmp	r9, r8
 8009100:	f840 3b04 	str.w	r3, [r0], #4
 8009104:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009108:	d2e8      	bcs.n	80090dc <quorem+0xb0>
 800910a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800910e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009112:	b922      	cbnz	r2, 800911e <quorem+0xf2>
 8009114:	3b04      	subs	r3, #4
 8009116:	429d      	cmp	r5, r3
 8009118:	461a      	mov	r2, r3
 800911a:	d30a      	bcc.n	8009132 <quorem+0x106>
 800911c:	613c      	str	r4, [r7, #16]
 800911e:	4630      	mov	r0, r6
 8009120:	b003      	add	sp, #12
 8009122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009126:	6812      	ldr	r2, [r2, #0]
 8009128:	3b04      	subs	r3, #4
 800912a:	2a00      	cmp	r2, #0
 800912c:	d1cc      	bne.n	80090c8 <quorem+0x9c>
 800912e:	3c01      	subs	r4, #1
 8009130:	e7c7      	b.n	80090c2 <quorem+0x96>
 8009132:	6812      	ldr	r2, [r2, #0]
 8009134:	3b04      	subs	r3, #4
 8009136:	2a00      	cmp	r2, #0
 8009138:	d1f0      	bne.n	800911c <quorem+0xf0>
 800913a:	3c01      	subs	r4, #1
 800913c:	e7eb      	b.n	8009116 <quorem+0xea>
 800913e:	2000      	movs	r0, #0
 8009140:	e7ee      	b.n	8009120 <quorem+0xf4>
 8009142:	0000      	movs	r0, r0
 8009144:	0000      	movs	r0, r0
	...

08009148 <_dtoa_r>:
 8009148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800914c:	ed2d 8b04 	vpush	{d8-d9}
 8009150:	ec57 6b10 	vmov	r6, r7, d0
 8009154:	b093      	sub	sp, #76	; 0x4c
 8009156:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009158:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800915c:	9106      	str	r1, [sp, #24]
 800915e:	ee10 aa10 	vmov	sl, s0
 8009162:	4604      	mov	r4, r0
 8009164:	9209      	str	r2, [sp, #36]	; 0x24
 8009166:	930c      	str	r3, [sp, #48]	; 0x30
 8009168:	46bb      	mov	fp, r7
 800916a:	b975      	cbnz	r5, 800918a <_dtoa_r+0x42>
 800916c:	2010      	movs	r0, #16
 800916e:	f000 fffd 	bl	800a16c <malloc>
 8009172:	4602      	mov	r2, r0
 8009174:	6260      	str	r0, [r4, #36]	; 0x24
 8009176:	b920      	cbnz	r0, 8009182 <_dtoa_r+0x3a>
 8009178:	4ba7      	ldr	r3, [pc, #668]	; (8009418 <_dtoa_r+0x2d0>)
 800917a:	21ea      	movs	r1, #234	; 0xea
 800917c:	48a7      	ldr	r0, [pc, #668]	; (800941c <_dtoa_r+0x2d4>)
 800917e:	f001 fe37 	bl	800adf0 <__assert_func>
 8009182:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009186:	6005      	str	r5, [r0, #0]
 8009188:	60c5      	str	r5, [r0, #12]
 800918a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800918c:	6819      	ldr	r1, [r3, #0]
 800918e:	b151      	cbz	r1, 80091a6 <_dtoa_r+0x5e>
 8009190:	685a      	ldr	r2, [r3, #4]
 8009192:	604a      	str	r2, [r1, #4]
 8009194:	2301      	movs	r3, #1
 8009196:	4093      	lsls	r3, r2
 8009198:	608b      	str	r3, [r1, #8]
 800919a:	4620      	mov	r0, r4
 800919c:	f001 f82e 	bl	800a1fc <_Bfree>
 80091a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091a2:	2200      	movs	r2, #0
 80091a4:	601a      	str	r2, [r3, #0]
 80091a6:	1e3b      	subs	r3, r7, #0
 80091a8:	bfaa      	itet	ge
 80091aa:	2300      	movge	r3, #0
 80091ac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80091b0:	f8c8 3000 	strge.w	r3, [r8]
 80091b4:	4b9a      	ldr	r3, [pc, #616]	; (8009420 <_dtoa_r+0x2d8>)
 80091b6:	bfbc      	itt	lt
 80091b8:	2201      	movlt	r2, #1
 80091ba:	f8c8 2000 	strlt.w	r2, [r8]
 80091be:	ea33 030b 	bics.w	r3, r3, fp
 80091c2:	d11b      	bne.n	80091fc <_dtoa_r+0xb4>
 80091c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091c6:	f242 730f 	movw	r3, #9999	; 0x270f
 80091ca:	6013      	str	r3, [r2, #0]
 80091cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80091d0:	4333      	orrs	r3, r6
 80091d2:	f000 8592 	beq.w	8009cfa <_dtoa_r+0xbb2>
 80091d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091d8:	b963      	cbnz	r3, 80091f4 <_dtoa_r+0xac>
 80091da:	4b92      	ldr	r3, [pc, #584]	; (8009424 <_dtoa_r+0x2dc>)
 80091dc:	e022      	b.n	8009224 <_dtoa_r+0xdc>
 80091de:	4b92      	ldr	r3, [pc, #584]	; (8009428 <_dtoa_r+0x2e0>)
 80091e0:	9301      	str	r3, [sp, #4]
 80091e2:	3308      	adds	r3, #8
 80091e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80091e6:	6013      	str	r3, [r2, #0]
 80091e8:	9801      	ldr	r0, [sp, #4]
 80091ea:	b013      	add	sp, #76	; 0x4c
 80091ec:	ecbd 8b04 	vpop	{d8-d9}
 80091f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091f4:	4b8b      	ldr	r3, [pc, #556]	; (8009424 <_dtoa_r+0x2dc>)
 80091f6:	9301      	str	r3, [sp, #4]
 80091f8:	3303      	adds	r3, #3
 80091fa:	e7f3      	b.n	80091e4 <_dtoa_r+0x9c>
 80091fc:	2200      	movs	r2, #0
 80091fe:	2300      	movs	r3, #0
 8009200:	4650      	mov	r0, sl
 8009202:	4659      	mov	r1, fp
 8009204:	f7f7 fc38 	bl	8000a78 <__aeabi_dcmpeq>
 8009208:	ec4b ab19 	vmov	d9, sl, fp
 800920c:	4680      	mov	r8, r0
 800920e:	b158      	cbz	r0, 8009228 <_dtoa_r+0xe0>
 8009210:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009212:	2301      	movs	r3, #1
 8009214:	6013      	str	r3, [r2, #0]
 8009216:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009218:	2b00      	cmp	r3, #0
 800921a:	f000 856b 	beq.w	8009cf4 <_dtoa_r+0xbac>
 800921e:	4883      	ldr	r0, [pc, #524]	; (800942c <_dtoa_r+0x2e4>)
 8009220:	6018      	str	r0, [r3, #0]
 8009222:	1e43      	subs	r3, r0, #1
 8009224:	9301      	str	r3, [sp, #4]
 8009226:	e7df      	b.n	80091e8 <_dtoa_r+0xa0>
 8009228:	ec4b ab10 	vmov	d0, sl, fp
 800922c:	aa10      	add	r2, sp, #64	; 0x40
 800922e:	a911      	add	r1, sp, #68	; 0x44
 8009230:	4620      	mov	r0, r4
 8009232:	f001 facb 	bl	800a7cc <__d2b>
 8009236:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800923a:	ee08 0a10 	vmov	s16, r0
 800923e:	2d00      	cmp	r5, #0
 8009240:	f000 8084 	beq.w	800934c <_dtoa_r+0x204>
 8009244:	ee19 3a90 	vmov	r3, s19
 8009248:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800924c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009250:	4656      	mov	r6, sl
 8009252:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009256:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800925a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800925e:	4b74      	ldr	r3, [pc, #464]	; (8009430 <_dtoa_r+0x2e8>)
 8009260:	2200      	movs	r2, #0
 8009262:	4630      	mov	r0, r6
 8009264:	4639      	mov	r1, r7
 8009266:	f7f6 ffe7 	bl	8000238 <__aeabi_dsub>
 800926a:	a365      	add	r3, pc, #404	; (adr r3, 8009400 <_dtoa_r+0x2b8>)
 800926c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009270:	f7f7 f99a 	bl	80005a8 <__aeabi_dmul>
 8009274:	a364      	add	r3, pc, #400	; (adr r3, 8009408 <_dtoa_r+0x2c0>)
 8009276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800927a:	f7f6 ffdf 	bl	800023c <__adddf3>
 800927e:	4606      	mov	r6, r0
 8009280:	4628      	mov	r0, r5
 8009282:	460f      	mov	r7, r1
 8009284:	f7f7 f926 	bl	80004d4 <__aeabi_i2d>
 8009288:	a361      	add	r3, pc, #388	; (adr r3, 8009410 <_dtoa_r+0x2c8>)
 800928a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928e:	f7f7 f98b 	bl	80005a8 <__aeabi_dmul>
 8009292:	4602      	mov	r2, r0
 8009294:	460b      	mov	r3, r1
 8009296:	4630      	mov	r0, r6
 8009298:	4639      	mov	r1, r7
 800929a:	f7f6 ffcf 	bl	800023c <__adddf3>
 800929e:	4606      	mov	r6, r0
 80092a0:	460f      	mov	r7, r1
 80092a2:	f7f7 fc31 	bl	8000b08 <__aeabi_d2iz>
 80092a6:	2200      	movs	r2, #0
 80092a8:	9000      	str	r0, [sp, #0]
 80092aa:	2300      	movs	r3, #0
 80092ac:	4630      	mov	r0, r6
 80092ae:	4639      	mov	r1, r7
 80092b0:	f7f7 fbec 	bl	8000a8c <__aeabi_dcmplt>
 80092b4:	b150      	cbz	r0, 80092cc <_dtoa_r+0x184>
 80092b6:	9800      	ldr	r0, [sp, #0]
 80092b8:	f7f7 f90c 	bl	80004d4 <__aeabi_i2d>
 80092bc:	4632      	mov	r2, r6
 80092be:	463b      	mov	r3, r7
 80092c0:	f7f7 fbda 	bl	8000a78 <__aeabi_dcmpeq>
 80092c4:	b910      	cbnz	r0, 80092cc <_dtoa_r+0x184>
 80092c6:	9b00      	ldr	r3, [sp, #0]
 80092c8:	3b01      	subs	r3, #1
 80092ca:	9300      	str	r3, [sp, #0]
 80092cc:	9b00      	ldr	r3, [sp, #0]
 80092ce:	2b16      	cmp	r3, #22
 80092d0:	d85a      	bhi.n	8009388 <_dtoa_r+0x240>
 80092d2:	9a00      	ldr	r2, [sp, #0]
 80092d4:	4b57      	ldr	r3, [pc, #348]	; (8009434 <_dtoa_r+0x2ec>)
 80092d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092de:	ec51 0b19 	vmov	r0, r1, d9
 80092e2:	f7f7 fbd3 	bl	8000a8c <__aeabi_dcmplt>
 80092e6:	2800      	cmp	r0, #0
 80092e8:	d050      	beq.n	800938c <_dtoa_r+0x244>
 80092ea:	9b00      	ldr	r3, [sp, #0]
 80092ec:	3b01      	subs	r3, #1
 80092ee:	9300      	str	r3, [sp, #0]
 80092f0:	2300      	movs	r3, #0
 80092f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80092f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80092f6:	1b5d      	subs	r5, r3, r5
 80092f8:	1e6b      	subs	r3, r5, #1
 80092fa:	9305      	str	r3, [sp, #20]
 80092fc:	bf45      	ittet	mi
 80092fe:	f1c5 0301 	rsbmi	r3, r5, #1
 8009302:	9304      	strmi	r3, [sp, #16]
 8009304:	2300      	movpl	r3, #0
 8009306:	2300      	movmi	r3, #0
 8009308:	bf4c      	ite	mi
 800930a:	9305      	strmi	r3, [sp, #20]
 800930c:	9304      	strpl	r3, [sp, #16]
 800930e:	9b00      	ldr	r3, [sp, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	db3d      	blt.n	8009390 <_dtoa_r+0x248>
 8009314:	9b05      	ldr	r3, [sp, #20]
 8009316:	9a00      	ldr	r2, [sp, #0]
 8009318:	920a      	str	r2, [sp, #40]	; 0x28
 800931a:	4413      	add	r3, r2
 800931c:	9305      	str	r3, [sp, #20]
 800931e:	2300      	movs	r3, #0
 8009320:	9307      	str	r3, [sp, #28]
 8009322:	9b06      	ldr	r3, [sp, #24]
 8009324:	2b09      	cmp	r3, #9
 8009326:	f200 8089 	bhi.w	800943c <_dtoa_r+0x2f4>
 800932a:	2b05      	cmp	r3, #5
 800932c:	bfc4      	itt	gt
 800932e:	3b04      	subgt	r3, #4
 8009330:	9306      	strgt	r3, [sp, #24]
 8009332:	9b06      	ldr	r3, [sp, #24]
 8009334:	f1a3 0302 	sub.w	r3, r3, #2
 8009338:	bfcc      	ite	gt
 800933a:	2500      	movgt	r5, #0
 800933c:	2501      	movle	r5, #1
 800933e:	2b03      	cmp	r3, #3
 8009340:	f200 8087 	bhi.w	8009452 <_dtoa_r+0x30a>
 8009344:	e8df f003 	tbb	[pc, r3]
 8009348:	59383a2d 	.word	0x59383a2d
 800934c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009350:	441d      	add	r5, r3
 8009352:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009356:	2b20      	cmp	r3, #32
 8009358:	bfc1      	itttt	gt
 800935a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800935e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009362:	fa0b f303 	lslgt.w	r3, fp, r3
 8009366:	fa26 f000 	lsrgt.w	r0, r6, r0
 800936a:	bfda      	itte	le
 800936c:	f1c3 0320 	rsble	r3, r3, #32
 8009370:	fa06 f003 	lslle.w	r0, r6, r3
 8009374:	4318      	orrgt	r0, r3
 8009376:	f7f7 f89d 	bl	80004b4 <__aeabi_ui2d>
 800937a:	2301      	movs	r3, #1
 800937c:	4606      	mov	r6, r0
 800937e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009382:	3d01      	subs	r5, #1
 8009384:	930e      	str	r3, [sp, #56]	; 0x38
 8009386:	e76a      	b.n	800925e <_dtoa_r+0x116>
 8009388:	2301      	movs	r3, #1
 800938a:	e7b2      	b.n	80092f2 <_dtoa_r+0x1aa>
 800938c:	900b      	str	r0, [sp, #44]	; 0x2c
 800938e:	e7b1      	b.n	80092f4 <_dtoa_r+0x1ac>
 8009390:	9b04      	ldr	r3, [sp, #16]
 8009392:	9a00      	ldr	r2, [sp, #0]
 8009394:	1a9b      	subs	r3, r3, r2
 8009396:	9304      	str	r3, [sp, #16]
 8009398:	4253      	negs	r3, r2
 800939a:	9307      	str	r3, [sp, #28]
 800939c:	2300      	movs	r3, #0
 800939e:	930a      	str	r3, [sp, #40]	; 0x28
 80093a0:	e7bf      	b.n	8009322 <_dtoa_r+0x1da>
 80093a2:	2300      	movs	r3, #0
 80093a4:	9308      	str	r3, [sp, #32]
 80093a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	dc55      	bgt.n	8009458 <_dtoa_r+0x310>
 80093ac:	2301      	movs	r3, #1
 80093ae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80093b2:	461a      	mov	r2, r3
 80093b4:	9209      	str	r2, [sp, #36]	; 0x24
 80093b6:	e00c      	b.n	80093d2 <_dtoa_r+0x28a>
 80093b8:	2301      	movs	r3, #1
 80093ba:	e7f3      	b.n	80093a4 <_dtoa_r+0x25c>
 80093bc:	2300      	movs	r3, #0
 80093be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093c0:	9308      	str	r3, [sp, #32]
 80093c2:	9b00      	ldr	r3, [sp, #0]
 80093c4:	4413      	add	r3, r2
 80093c6:	9302      	str	r3, [sp, #8]
 80093c8:	3301      	adds	r3, #1
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	9303      	str	r3, [sp, #12]
 80093ce:	bfb8      	it	lt
 80093d0:	2301      	movlt	r3, #1
 80093d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80093d4:	2200      	movs	r2, #0
 80093d6:	6042      	str	r2, [r0, #4]
 80093d8:	2204      	movs	r2, #4
 80093da:	f102 0614 	add.w	r6, r2, #20
 80093de:	429e      	cmp	r6, r3
 80093e0:	6841      	ldr	r1, [r0, #4]
 80093e2:	d93d      	bls.n	8009460 <_dtoa_r+0x318>
 80093e4:	4620      	mov	r0, r4
 80093e6:	f000 fec9 	bl	800a17c <_Balloc>
 80093ea:	9001      	str	r0, [sp, #4]
 80093ec:	2800      	cmp	r0, #0
 80093ee:	d13b      	bne.n	8009468 <_dtoa_r+0x320>
 80093f0:	4b11      	ldr	r3, [pc, #68]	; (8009438 <_dtoa_r+0x2f0>)
 80093f2:	4602      	mov	r2, r0
 80093f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80093f8:	e6c0      	b.n	800917c <_dtoa_r+0x34>
 80093fa:	2301      	movs	r3, #1
 80093fc:	e7df      	b.n	80093be <_dtoa_r+0x276>
 80093fe:	bf00      	nop
 8009400:	636f4361 	.word	0x636f4361
 8009404:	3fd287a7 	.word	0x3fd287a7
 8009408:	8b60c8b3 	.word	0x8b60c8b3
 800940c:	3fc68a28 	.word	0x3fc68a28
 8009410:	509f79fb 	.word	0x509f79fb
 8009414:	3fd34413 	.word	0x3fd34413
 8009418:	0800b42d 	.word	0x0800b42d
 800941c:	0800b444 	.word	0x0800b444
 8009420:	7ff00000 	.word	0x7ff00000
 8009424:	0800b429 	.word	0x0800b429
 8009428:	0800b420 	.word	0x0800b420
 800942c:	0800b3fd 	.word	0x0800b3fd
 8009430:	3ff80000 	.word	0x3ff80000
 8009434:	0800b598 	.word	0x0800b598
 8009438:	0800b49f 	.word	0x0800b49f
 800943c:	2501      	movs	r5, #1
 800943e:	2300      	movs	r3, #0
 8009440:	9306      	str	r3, [sp, #24]
 8009442:	9508      	str	r5, [sp, #32]
 8009444:	f04f 33ff 	mov.w	r3, #4294967295
 8009448:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800944c:	2200      	movs	r2, #0
 800944e:	2312      	movs	r3, #18
 8009450:	e7b0      	b.n	80093b4 <_dtoa_r+0x26c>
 8009452:	2301      	movs	r3, #1
 8009454:	9308      	str	r3, [sp, #32]
 8009456:	e7f5      	b.n	8009444 <_dtoa_r+0x2fc>
 8009458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800945a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800945e:	e7b8      	b.n	80093d2 <_dtoa_r+0x28a>
 8009460:	3101      	adds	r1, #1
 8009462:	6041      	str	r1, [r0, #4]
 8009464:	0052      	lsls	r2, r2, #1
 8009466:	e7b8      	b.n	80093da <_dtoa_r+0x292>
 8009468:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800946a:	9a01      	ldr	r2, [sp, #4]
 800946c:	601a      	str	r2, [r3, #0]
 800946e:	9b03      	ldr	r3, [sp, #12]
 8009470:	2b0e      	cmp	r3, #14
 8009472:	f200 809d 	bhi.w	80095b0 <_dtoa_r+0x468>
 8009476:	2d00      	cmp	r5, #0
 8009478:	f000 809a 	beq.w	80095b0 <_dtoa_r+0x468>
 800947c:	9b00      	ldr	r3, [sp, #0]
 800947e:	2b00      	cmp	r3, #0
 8009480:	dd32      	ble.n	80094e8 <_dtoa_r+0x3a0>
 8009482:	4ab7      	ldr	r2, [pc, #732]	; (8009760 <_dtoa_r+0x618>)
 8009484:	f003 030f 	and.w	r3, r3, #15
 8009488:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800948c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009490:	9b00      	ldr	r3, [sp, #0]
 8009492:	05d8      	lsls	r0, r3, #23
 8009494:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009498:	d516      	bpl.n	80094c8 <_dtoa_r+0x380>
 800949a:	4bb2      	ldr	r3, [pc, #712]	; (8009764 <_dtoa_r+0x61c>)
 800949c:	ec51 0b19 	vmov	r0, r1, d9
 80094a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80094a4:	f7f7 f9aa 	bl	80007fc <__aeabi_ddiv>
 80094a8:	f007 070f 	and.w	r7, r7, #15
 80094ac:	4682      	mov	sl, r0
 80094ae:	468b      	mov	fp, r1
 80094b0:	2503      	movs	r5, #3
 80094b2:	4eac      	ldr	r6, [pc, #688]	; (8009764 <_dtoa_r+0x61c>)
 80094b4:	b957      	cbnz	r7, 80094cc <_dtoa_r+0x384>
 80094b6:	4642      	mov	r2, r8
 80094b8:	464b      	mov	r3, r9
 80094ba:	4650      	mov	r0, sl
 80094bc:	4659      	mov	r1, fp
 80094be:	f7f7 f99d 	bl	80007fc <__aeabi_ddiv>
 80094c2:	4682      	mov	sl, r0
 80094c4:	468b      	mov	fp, r1
 80094c6:	e028      	b.n	800951a <_dtoa_r+0x3d2>
 80094c8:	2502      	movs	r5, #2
 80094ca:	e7f2      	b.n	80094b2 <_dtoa_r+0x36a>
 80094cc:	07f9      	lsls	r1, r7, #31
 80094ce:	d508      	bpl.n	80094e2 <_dtoa_r+0x39a>
 80094d0:	4640      	mov	r0, r8
 80094d2:	4649      	mov	r1, r9
 80094d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80094d8:	f7f7 f866 	bl	80005a8 <__aeabi_dmul>
 80094dc:	3501      	adds	r5, #1
 80094de:	4680      	mov	r8, r0
 80094e0:	4689      	mov	r9, r1
 80094e2:	107f      	asrs	r7, r7, #1
 80094e4:	3608      	adds	r6, #8
 80094e6:	e7e5      	b.n	80094b4 <_dtoa_r+0x36c>
 80094e8:	f000 809b 	beq.w	8009622 <_dtoa_r+0x4da>
 80094ec:	9b00      	ldr	r3, [sp, #0]
 80094ee:	4f9d      	ldr	r7, [pc, #628]	; (8009764 <_dtoa_r+0x61c>)
 80094f0:	425e      	negs	r6, r3
 80094f2:	4b9b      	ldr	r3, [pc, #620]	; (8009760 <_dtoa_r+0x618>)
 80094f4:	f006 020f 	and.w	r2, r6, #15
 80094f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009500:	ec51 0b19 	vmov	r0, r1, d9
 8009504:	f7f7 f850 	bl	80005a8 <__aeabi_dmul>
 8009508:	1136      	asrs	r6, r6, #4
 800950a:	4682      	mov	sl, r0
 800950c:	468b      	mov	fp, r1
 800950e:	2300      	movs	r3, #0
 8009510:	2502      	movs	r5, #2
 8009512:	2e00      	cmp	r6, #0
 8009514:	d17a      	bne.n	800960c <_dtoa_r+0x4c4>
 8009516:	2b00      	cmp	r3, #0
 8009518:	d1d3      	bne.n	80094c2 <_dtoa_r+0x37a>
 800951a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800951c:	2b00      	cmp	r3, #0
 800951e:	f000 8082 	beq.w	8009626 <_dtoa_r+0x4de>
 8009522:	4b91      	ldr	r3, [pc, #580]	; (8009768 <_dtoa_r+0x620>)
 8009524:	2200      	movs	r2, #0
 8009526:	4650      	mov	r0, sl
 8009528:	4659      	mov	r1, fp
 800952a:	f7f7 faaf 	bl	8000a8c <__aeabi_dcmplt>
 800952e:	2800      	cmp	r0, #0
 8009530:	d079      	beq.n	8009626 <_dtoa_r+0x4de>
 8009532:	9b03      	ldr	r3, [sp, #12]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d076      	beq.n	8009626 <_dtoa_r+0x4de>
 8009538:	9b02      	ldr	r3, [sp, #8]
 800953a:	2b00      	cmp	r3, #0
 800953c:	dd36      	ble.n	80095ac <_dtoa_r+0x464>
 800953e:	9b00      	ldr	r3, [sp, #0]
 8009540:	4650      	mov	r0, sl
 8009542:	4659      	mov	r1, fp
 8009544:	1e5f      	subs	r7, r3, #1
 8009546:	2200      	movs	r2, #0
 8009548:	4b88      	ldr	r3, [pc, #544]	; (800976c <_dtoa_r+0x624>)
 800954a:	f7f7 f82d 	bl	80005a8 <__aeabi_dmul>
 800954e:	9e02      	ldr	r6, [sp, #8]
 8009550:	4682      	mov	sl, r0
 8009552:	468b      	mov	fp, r1
 8009554:	3501      	adds	r5, #1
 8009556:	4628      	mov	r0, r5
 8009558:	f7f6 ffbc 	bl	80004d4 <__aeabi_i2d>
 800955c:	4652      	mov	r2, sl
 800955e:	465b      	mov	r3, fp
 8009560:	f7f7 f822 	bl	80005a8 <__aeabi_dmul>
 8009564:	4b82      	ldr	r3, [pc, #520]	; (8009770 <_dtoa_r+0x628>)
 8009566:	2200      	movs	r2, #0
 8009568:	f7f6 fe68 	bl	800023c <__adddf3>
 800956c:	46d0      	mov	r8, sl
 800956e:	46d9      	mov	r9, fp
 8009570:	4682      	mov	sl, r0
 8009572:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009576:	2e00      	cmp	r6, #0
 8009578:	d158      	bne.n	800962c <_dtoa_r+0x4e4>
 800957a:	4b7e      	ldr	r3, [pc, #504]	; (8009774 <_dtoa_r+0x62c>)
 800957c:	2200      	movs	r2, #0
 800957e:	4640      	mov	r0, r8
 8009580:	4649      	mov	r1, r9
 8009582:	f7f6 fe59 	bl	8000238 <__aeabi_dsub>
 8009586:	4652      	mov	r2, sl
 8009588:	465b      	mov	r3, fp
 800958a:	4680      	mov	r8, r0
 800958c:	4689      	mov	r9, r1
 800958e:	f7f7 fa9b 	bl	8000ac8 <__aeabi_dcmpgt>
 8009592:	2800      	cmp	r0, #0
 8009594:	f040 8295 	bne.w	8009ac2 <_dtoa_r+0x97a>
 8009598:	4652      	mov	r2, sl
 800959a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800959e:	4640      	mov	r0, r8
 80095a0:	4649      	mov	r1, r9
 80095a2:	f7f7 fa73 	bl	8000a8c <__aeabi_dcmplt>
 80095a6:	2800      	cmp	r0, #0
 80095a8:	f040 8289 	bne.w	8009abe <_dtoa_r+0x976>
 80095ac:	ec5b ab19 	vmov	sl, fp, d9
 80095b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	f2c0 8148 	blt.w	8009848 <_dtoa_r+0x700>
 80095b8:	9a00      	ldr	r2, [sp, #0]
 80095ba:	2a0e      	cmp	r2, #14
 80095bc:	f300 8144 	bgt.w	8009848 <_dtoa_r+0x700>
 80095c0:	4b67      	ldr	r3, [pc, #412]	; (8009760 <_dtoa_r+0x618>)
 80095c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80095ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	f280 80d5 	bge.w	800977c <_dtoa_r+0x634>
 80095d2:	9b03      	ldr	r3, [sp, #12]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	f300 80d1 	bgt.w	800977c <_dtoa_r+0x634>
 80095da:	f040 826f 	bne.w	8009abc <_dtoa_r+0x974>
 80095de:	4b65      	ldr	r3, [pc, #404]	; (8009774 <_dtoa_r+0x62c>)
 80095e0:	2200      	movs	r2, #0
 80095e2:	4640      	mov	r0, r8
 80095e4:	4649      	mov	r1, r9
 80095e6:	f7f6 ffdf 	bl	80005a8 <__aeabi_dmul>
 80095ea:	4652      	mov	r2, sl
 80095ec:	465b      	mov	r3, fp
 80095ee:	f7f7 fa61 	bl	8000ab4 <__aeabi_dcmpge>
 80095f2:	9e03      	ldr	r6, [sp, #12]
 80095f4:	4637      	mov	r7, r6
 80095f6:	2800      	cmp	r0, #0
 80095f8:	f040 8245 	bne.w	8009a86 <_dtoa_r+0x93e>
 80095fc:	9d01      	ldr	r5, [sp, #4]
 80095fe:	2331      	movs	r3, #49	; 0x31
 8009600:	f805 3b01 	strb.w	r3, [r5], #1
 8009604:	9b00      	ldr	r3, [sp, #0]
 8009606:	3301      	adds	r3, #1
 8009608:	9300      	str	r3, [sp, #0]
 800960a:	e240      	b.n	8009a8e <_dtoa_r+0x946>
 800960c:	07f2      	lsls	r2, r6, #31
 800960e:	d505      	bpl.n	800961c <_dtoa_r+0x4d4>
 8009610:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009614:	f7f6 ffc8 	bl	80005a8 <__aeabi_dmul>
 8009618:	3501      	adds	r5, #1
 800961a:	2301      	movs	r3, #1
 800961c:	1076      	asrs	r6, r6, #1
 800961e:	3708      	adds	r7, #8
 8009620:	e777      	b.n	8009512 <_dtoa_r+0x3ca>
 8009622:	2502      	movs	r5, #2
 8009624:	e779      	b.n	800951a <_dtoa_r+0x3d2>
 8009626:	9f00      	ldr	r7, [sp, #0]
 8009628:	9e03      	ldr	r6, [sp, #12]
 800962a:	e794      	b.n	8009556 <_dtoa_r+0x40e>
 800962c:	9901      	ldr	r1, [sp, #4]
 800962e:	4b4c      	ldr	r3, [pc, #304]	; (8009760 <_dtoa_r+0x618>)
 8009630:	4431      	add	r1, r6
 8009632:	910d      	str	r1, [sp, #52]	; 0x34
 8009634:	9908      	ldr	r1, [sp, #32]
 8009636:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800963a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800963e:	2900      	cmp	r1, #0
 8009640:	d043      	beq.n	80096ca <_dtoa_r+0x582>
 8009642:	494d      	ldr	r1, [pc, #308]	; (8009778 <_dtoa_r+0x630>)
 8009644:	2000      	movs	r0, #0
 8009646:	f7f7 f8d9 	bl	80007fc <__aeabi_ddiv>
 800964a:	4652      	mov	r2, sl
 800964c:	465b      	mov	r3, fp
 800964e:	f7f6 fdf3 	bl	8000238 <__aeabi_dsub>
 8009652:	9d01      	ldr	r5, [sp, #4]
 8009654:	4682      	mov	sl, r0
 8009656:	468b      	mov	fp, r1
 8009658:	4649      	mov	r1, r9
 800965a:	4640      	mov	r0, r8
 800965c:	f7f7 fa54 	bl	8000b08 <__aeabi_d2iz>
 8009660:	4606      	mov	r6, r0
 8009662:	f7f6 ff37 	bl	80004d4 <__aeabi_i2d>
 8009666:	4602      	mov	r2, r0
 8009668:	460b      	mov	r3, r1
 800966a:	4640      	mov	r0, r8
 800966c:	4649      	mov	r1, r9
 800966e:	f7f6 fde3 	bl	8000238 <__aeabi_dsub>
 8009672:	3630      	adds	r6, #48	; 0x30
 8009674:	f805 6b01 	strb.w	r6, [r5], #1
 8009678:	4652      	mov	r2, sl
 800967a:	465b      	mov	r3, fp
 800967c:	4680      	mov	r8, r0
 800967e:	4689      	mov	r9, r1
 8009680:	f7f7 fa04 	bl	8000a8c <__aeabi_dcmplt>
 8009684:	2800      	cmp	r0, #0
 8009686:	d163      	bne.n	8009750 <_dtoa_r+0x608>
 8009688:	4642      	mov	r2, r8
 800968a:	464b      	mov	r3, r9
 800968c:	4936      	ldr	r1, [pc, #216]	; (8009768 <_dtoa_r+0x620>)
 800968e:	2000      	movs	r0, #0
 8009690:	f7f6 fdd2 	bl	8000238 <__aeabi_dsub>
 8009694:	4652      	mov	r2, sl
 8009696:	465b      	mov	r3, fp
 8009698:	f7f7 f9f8 	bl	8000a8c <__aeabi_dcmplt>
 800969c:	2800      	cmp	r0, #0
 800969e:	f040 80b5 	bne.w	800980c <_dtoa_r+0x6c4>
 80096a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096a4:	429d      	cmp	r5, r3
 80096a6:	d081      	beq.n	80095ac <_dtoa_r+0x464>
 80096a8:	4b30      	ldr	r3, [pc, #192]	; (800976c <_dtoa_r+0x624>)
 80096aa:	2200      	movs	r2, #0
 80096ac:	4650      	mov	r0, sl
 80096ae:	4659      	mov	r1, fp
 80096b0:	f7f6 ff7a 	bl	80005a8 <__aeabi_dmul>
 80096b4:	4b2d      	ldr	r3, [pc, #180]	; (800976c <_dtoa_r+0x624>)
 80096b6:	4682      	mov	sl, r0
 80096b8:	468b      	mov	fp, r1
 80096ba:	4640      	mov	r0, r8
 80096bc:	4649      	mov	r1, r9
 80096be:	2200      	movs	r2, #0
 80096c0:	f7f6 ff72 	bl	80005a8 <__aeabi_dmul>
 80096c4:	4680      	mov	r8, r0
 80096c6:	4689      	mov	r9, r1
 80096c8:	e7c6      	b.n	8009658 <_dtoa_r+0x510>
 80096ca:	4650      	mov	r0, sl
 80096cc:	4659      	mov	r1, fp
 80096ce:	f7f6 ff6b 	bl	80005a8 <__aeabi_dmul>
 80096d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096d4:	9d01      	ldr	r5, [sp, #4]
 80096d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80096d8:	4682      	mov	sl, r0
 80096da:	468b      	mov	fp, r1
 80096dc:	4649      	mov	r1, r9
 80096de:	4640      	mov	r0, r8
 80096e0:	f7f7 fa12 	bl	8000b08 <__aeabi_d2iz>
 80096e4:	4606      	mov	r6, r0
 80096e6:	f7f6 fef5 	bl	80004d4 <__aeabi_i2d>
 80096ea:	3630      	adds	r6, #48	; 0x30
 80096ec:	4602      	mov	r2, r0
 80096ee:	460b      	mov	r3, r1
 80096f0:	4640      	mov	r0, r8
 80096f2:	4649      	mov	r1, r9
 80096f4:	f7f6 fda0 	bl	8000238 <__aeabi_dsub>
 80096f8:	f805 6b01 	strb.w	r6, [r5], #1
 80096fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096fe:	429d      	cmp	r5, r3
 8009700:	4680      	mov	r8, r0
 8009702:	4689      	mov	r9, r1
 8009704:	f04f 0200 	mov.w	r2, #0
 8009708:	d124      	bne.n	8009754 <_dtoa_r+0x60c>
 800970a:	4b1b      	ldr	r3, [pc, #108]	; (8009778 <_dtoa_r+0x630>)
 800970c:	4650      	mov	r0, sl
 800970e:	4659      	mov	r1, fp
 8009710:	f7f6 fd94 	bl	800023c <__adddf3>
 8009714:	4602      	mov	r2, r0
 8009716:	460b      	mov	r3, r1
 8009718:	4640      	mov	r0, r8
 800971a:	4649      	mov	r1, r9
 800971c:	f7f7 f9d4 	bl	8000ac8 <__aeabi_dcmpgt>
 8009720:	2800      	cmp	r0, #0
 8009722:	d173      	bne.n	800980c <_dtoa_r+0x6c4>
 8009724:	4652      	mov	r2, sl
 8009726:	465b      	mov	r3, fp
 8009728:	4913      	ldr	r1, [pc, #76]	; (8009778 <_dtoa_r+0x630>)
 800972a:	2000      	movs	r0, #0
 800972c:	f7f6 fd84 	bl	8000238 <__aeabi_dsub>
 8009730:	4602      	mov	r2, r0
 8009732:	460b      	mov	r3, r1
 8009734:	4640      	mov	r0, r8
 8009736:	4649      	mov	r1, r9
 8009738:	f7f7 f9a8 	bl	8000a8c <__aeabi_dcmplt>
 800973c:	2800      	cmp	r0, #0
 800973e:	f43f af35 	beq.w	80095ac <_dtoa_r+0x464>
 8009742:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009744:	1e6b      	subs	r3, r5, #1
 8009746:	930f      	str	r3, [sp, #60]	; 0x3c
 8009748:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800974c:	2b30      	cmp	r3, #48	; 0x30
 800974e:	d0f8      	beq.n	8009742 <_dtoa_r+0x5fa>
 8009750:	9700      	str	r7, [sp, #0]
 8009752:	e049      	b.n	80097e8 <_dtoa_r+0x6a0>
 8009754:	4b05      	ldr	r3, [pc, #20]	; (800976c <_dtoa_r+0x624>)
 8009756:	f7f6 ff27 	bl	80005a8 <__aeabi_dmul>
 800975a:	4680      	mov	r8, r0
 800975c:	4689      	mov	r9, r1
 800975e:	e7bd      	b.n	80096dc <_dtoa_r+0x594>
 8009760:	0800b598 	.word	0x0800b598
 8009764:	0800b570 	.word	0x0800b570
 8009768:	3ff00000 	.word	0x3ff00000
 800976c:	40240000 	.word	0x40240000
 8009770:	401c0000 	.word	0x401c0000
 8009774:	40140000 	.word	0x40140000
 8009778:	3fe00000 	.word	0x3fe00000
 800977c:	9d01      	ldr	r5, [sp, #4]
 800977e:	4656      	mov	r6, sl
 8009780:	465f      	mov	r7, fp
 8009782:	4642      	mov	r2, r8
 8009784:	464b      	mov	r3, r9
 8009786:	4630      	mov	r0, r6
 8009788:	4639      	mov	r1, r7
 800978a:	f7f7 f837 	bl	80007fc <__aeabi_ddiv>
 800978e:	f7f7 f9bb 	bl	8000b08 <__aeabi_d2iz>
 8009792:	4682      	mov	sl, r0
 8009794:	f7f6 fe9e 	bl	80004d4 <__aeabi_i2d>
 8009798:	4642      	mov	r2, r8
 800979a:	464b      	mov	r3, r9
 800979c:	f7f6 ff04 	bl	80005a8 <__aeabi_dmul>
 80097a0:	4602      	mov	r2, r0
 80097a2:	460b      	mov	r3, r1
 80097a4:	4630      	mov	r0, r6
 80097a6:	4639      	mov	r1, r7
 80097a8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80097ac:	f7f6 fd44 	bl	8000238 <__aeabi_dsub>
 80097b0:	f805 6b01 	strb.w	r6, [r5], #1
 80097b4:	9e01      	ldr	r6, [sp, #4]
 80097b6:	9f03      	ldr	r7, [sp, #12]
 80097b8:	1bae      	subs	r6, r5, r6
 80097ba:	42b7      	cmp	r7, r6
 80097bc:	4602      	mov	r2, r0
 80097be:	460b      	mov	r3, r1
 80097c0:	d135      	bne.n	800982e <_dtoa_r+0x6e6>
 80097c2:	f7f6 fd3b 	bl	800023c <__adddf3>
 80097c6:	4642      	mov	r2, r8
 80097c8:	464b      	mov	r3, r9
 80097ca:	4606      	mov	r6, r0
 80097cc:	460f      	mov	r7, r1
 80097ce:	f7f7 f97b 	bl	8000ac8 <__aeabi_dcmpgt>
 80097d2:	b9d0      	cbnz	r0, 800980a <_dtoa_r+0x6c2>
 80097d4:	4642      	mov	r2, r8
 80097d6:	464b      	mov	r3, r9
 80097d8:	4630      	mov	r0, r6
 80097da:	4639      	mov	r1, r7
 80097dc:	f7f7 f94c 	bl	8000a78 <__aeabi_dcmpeq>
 80097e0:	b110      	cbz	r0, 80097e8 <_dtoa_r+0x6a0>
 80097e2:	f01a 0f01 	tst.w	sl, #1
 80097e6:	d110      	bne.n	800980a <_dtoa_r+0x6c2>
 80097e8:	4620      	mov	r0, r4
 80097ea:	ee18 1a10 	vmov	r1, s16
 80097ee:	f000 fd05 	bl	800a1fc <_Bfree>
 80097f2:	2300      	movs	r3, #0
 80097f4:	9800      	ldr	r0, [sp, #0]
 80097f6:	702b      	strb	r3, [r5, #0]
 80097f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80097fa:	3001      	adds	r0, #1
 80097fc:	6018      	str	r0, [r3, #0]
 80097fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009800:	2b00      	cmp	r3, #0
 8009802:	f43f acf1 	beq.w	80091e8 <_dtoa_r+0xa0>
 8009806:	601d      	str	r5, [r3, #0]
 8009808:	e4ee      	b.n	80091e8 <_dtoa_r+0xa0>
 800980a:	9f00      	ldr	r7, [sp, #0]
 800980c:	462b      	mov	r3, r5
 800980e:	461d      	mov	r5, r3
 8009810:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009814:	2a39      	cmp	r2, #57	; 0x39
 8009816:	d106      	bne.n	8009826 <_dtoa_r+0x6de>
 8009818:	9a01      	ldr	r2, [sp, #4]
 800981a:	429a      	cmp	r2, r3
 800981c:	d1f7      	bne.n	800980e <_dtoa_r+0x6c6>
 800981e:	9901      	ldr	r1, [sp, #4]
 8009820:	2230      	movs	r2, #48	; 0x30
 8009822:	3701      	adds	r7, #1
 8009824:	700a      	strb	r2, [r1, #0]
 8009826:	781a      	ldrb	r2, [r3, #0]
 8009828:	3201      	adds	r2, #1
 800982a:	701a      	strb	r2, [r3, #0]
 800982c:	e790      	b.n	8009750 <_dtoa_r+0x608>
 800982e:	4ba6      	ldr	r3, [pc, #664]	; (8009ac8 <_dtoa_r+0x980>)
 8009830:	2200      	movs	r2, #0
 8009832:	f7f6 feb9 	bl	80005a8 <__aeabi_dmul>
 8009836:	2200      	movs	r2, #0
 8009838:	2300      	movs	r3, #0
 800983a:	4606      	mov	r6, r0
 800983c:	460f      	mov	r7, r1
 800983e:	f7f7 f91b 	bl	8000a78 <__aeabi_dcmpeq>
 8009842:	2800      	cmp	r0, #0
 8009844:	d09d      	beq.n	8009782 <_dtoa_r+0x63a>
 8009846:	e7cf      	b.n	80097e8 <_dtoa_r+0x6a0>
 8009848:	9a08      	ldr	r2, [sp, #32]
 800984a:	2a00      	cmp	r2, #0
 800984c:	f000 80d7 	beq.w	80099fe <_dtoa_r+0x8b6>
 8009850:	9a06      	ldr	r2, [sp, #24]
 8009852:	2a01      	cmp	r2, #1
 8009854:	f300 80ba 	bgt.w	80099cc <_dtoa_r+0x884>
 8009858:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800985a:	2a00      	cmp	r2, #0
 800985c:	f000 80b2 	beq.w	80099c4 <_dtoa_r+0x87c>
 8009860:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009864:	9e07      	ldr	r6, [sp, #28]
 8009866:	9d04      	ldr	r5, [sp, #16]
 8009868:	9a04      	ldr	r2, [sp, #16]
 800986a:	441a      	add	r2, r3
 800986c:	9204      	str	r2, [sp, #16]
 800986e:	9a05      	ldr	r2, [sp, #20]
 8009870:	2101      	movs	r1, #1
 8009872:	441a      	add	r2, r3
 8009874:	4620      	mov	r0, r4
 8009876:	9205      	str	r2, [sp, #20]
 8009878:	f000 fd78 	bl	800a36c <__i2b>
 800987c:	4607      	mov	r7, r0
 800987e:	2d00      	cmp	r5, #0
 8009880:	dd0c      	ble.n	800989c <_dtoa_r+0x754>
 8009882:	9b05      	ldr	r3, [sp, #20]
 8009884:	2b00      	cmp	r3, #0
 8009886:	dd09      	ble.n	800989c <_dtoa_r+0x754>
 8009888:	42ab      	cmp	r3, r5
 800988a:	9a04      	ldr	r2, [sp, #16]
 800988c:	bfa8      	it	ge
 800988e:	462b      	movge	r3, r5
 8009890:	1ad2      	subs	r2, r2, r3
 8009892:	9204      	str	r2, [sp, #16]
 8009894:	9a05      	ldr	r2, [sp, #20]
 8009896:	1aed      	subs	r5, r5, r3
 8009898:	1ad3      	subs	r3, r2, r3
 800989a:	9305      	str	r3, [sp, #20]
 800989c:	9b07      	ldr	r3, [sp, #28]
 800989e:	b31b      	cbz	r3, 80098e8 <_dtoa_r+0x7a0>
 80098a0:	9b08      	ldr	r3, [sp, #32]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	f000 80af 	beq.w	8009a06 <_dtoa_r+0x8be>
 80098a8:	2e00      	cmp	r6, #0
 80098aa:	dd13      	ble.n	80098d4 <_dtoa_r+0x78c>
 80098ac:	4639      	mov	r1, r7
 80098ae:	4632      	mov	r2, r6
 80098b0:	4620      	mov	r0, r4
 80098b2:	f000 fe1b 	bl	800a4ec <__pow5mult>
 80098b6:	ee18 2a10 	vmov	r2, s16
 80098ba:	4601      	mov	r1, r0
 80098bc:	4607      	mov	r7, r0
 80098be:	4620      	mov	r0, r4
 80098c0:	f000 fd6a 	bl	800a398 <__multiply>
 80098c4:	ee18 1a10 	vmov	r1, s16
 80098c8:	4680      	mov	r8, r0
 80098ca:	4620      	mov	r0, r4
 80098cc:	f000 fc96 	bl	800a1fc <_Bfree>
 80098d0:	ee08 8a10 	vmov	s16, r8
 80098d4:	9b07      	ldr	r3, [sp, #28]
 80098d6:	1b9a      	subs	r2, r3, r6
 80098d8:	d006      	beq.n	80098e8 <_dtoa_r+0x7a0>
 80098da:	ee18 1a10 	vmov	r1, s16
 80098de:	4620      	mov	r0, r4
 80098e0:	f000 fe04 	bl	800a4ec <__pow5mult>
 80098e4:	ee08 0a10 	vmov	s16, r0
 80098e8:	2101      	movs	r1, #1
 80098ea:	4620      	mov	r0, r4
 80098ec:	f000 fd3e 	bl	800a36c <__i2b>
 80098f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	4606      	mov	r6, r0
 80098f6:	f340 8088 	ble.w	8009a0a <_dtoa_r+0x8c2>
 80098fa:	461a      	mov	r2, r3
 80098fc:	4601      	mov	r1, r0
 80098fe:	4620      	mov	r0, r4
 8009900:	f000 fdf4 	bl	800a4ec <__pow5mult>
 8009904:	9b06      	ldr	r3, [sp, #24]
 8009906:	2b01      	cmp	r3, #1
 8009908:	4606      	mov	r6, r0
 800990a:	f340 8081 	ble.w	8009a10 <_dtoa_r+0x8c8>
 800990e:	f04f 0800 	mov.w	r8, #0
 8009912:	6933      	ldr	r3, [r6, #16]
 8009914:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009918:	6918      	ldr	r0, [r3, #16]
 800991a:	f000 fcd7 	bl	800a2cc <__hi0bits>
 800991e:	f1c0 0020 	rsb	r0, r0, #32
 8009922:	9b05      	ldr	r3, [sp, #20]
 8009924:	4418      	add	r0, r3
 8009926:	f010 001f 	ands.w	r0, r0, #31
 800992a:	f000 8092 	beq.w	8009a52 <_dtoa_r+0x90a>
 800992e:	f1c0 0320 	rsb	r3, r0, #32
 8009932:	2b04      	cmp	r3, #4
 8009934:	f340 808a 	ble.w	8009a4c <_dtoa_r+0x904>
 8009938:	f1c0 001c 	rsb	r0, r0, #28
 800993c:	9b04      	ldr	r3, [sp, #16]
 800993e:	4403      	add	r3, r0
 8009940:	9304      	str	r3, [sp, #16]
 8009942:	9b05      	ldr	r3, [sp, #20]
 8009944:	4403      	add	r3, r0
 8009946:	4405      	add	r5, r0
 8009948:	9305      	str	r3, [sp, #20]
 800994a:	9b04      	ldr	r3, [sp, #16]
 800994c:	2b00      	cmp	r3, #0
 800994e:	dd07      	ble.n	8009960 <_dtoa_r+0x818>
 8009950:	ee18 1a10 	vmov	r1, s16
 8009954:	461a      	mov	r2, r3
 8009956:	4620      	mov	r0, r4
 8009958:	f000 fe22 	bl	800a5a0 <__lshift>
 800995c:	ee08 0a10 	vmov	s16, r0
 8009960:	9b05      	ldr	r3, [sp, #20]
 8009962:	2b00      	cmp	r3, #0
 8009964:	dd05      	ble.n	8009972 <_dtoa_r+0x82a>
 8009966:	4631      	mov	r1, r6
 8009968:	461a      	mov	r2, r3
 800996a:	4620      	mov	r0, r4
 800996c:	f000 fe18 	bl	800a5a0 <__lshift>
 8009970:	4606      	mov	r6, r0
 8009972:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009974:	2b00      	cmp	r3, #0
 8009976:	d06e      	beq.n	8009a56 <_dtoa_r+0x90e>
 8009978:	ee18 0a10 	vmov	r0, s16
 800997c:	4631      	mov	r1, r6
 800997e:	f000 fe7f 	bl	800a680 <__mcmp>
 8009982:	2800      	cmp	r0, #0
 8009984:	da67      	bge.n	8009a56 <_dtoa_r+0x90e>
 8009986:	9b00      	ldr	r3, [sp, #0]
 8009988:	3b01      	subs	r3, #1
 800998a:	ee18 1a10 	vmov	r1, s16
 800998e:	9300      	str	r3, [sp, #0]
 8009990:	220a      	movs	r2, #10
 8009992:	2300      	movs	r3, #0
 8009994:	4620      	mov	r0, r4
 8009996:	f000 fc53 	bl	800a240 <__multadd>
 800999a:	9b08      	ldr	r3, [sp, #32]
 800999c:	ee08 0a10 	vmov	s16, r0
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	f000 81b1 	beq.w	8009d08 <_dtoa_r+0xbc0>
 80099a6:	2300      	movs	r3, #0
 80099a8:	4639      	mov	r1, r7
 80099aa:	220a      	movs	r2, #10
 80099ac:	4620      	mov	r0, r4
 80099ae:	f000 fc47 	bl	800a240 <__multadd>
 80099b2:	9b02      	ldr	r3, [sp, #8]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	4607      	mov	r7, r0
 80099b8:	f300 808e 	bgt.w	8009ad8 <_dtoa_r+0x990>
 80099bc:	9b06      	ldr	r3, [sp, #24]
 80099be:	2b02      	cmp	r3, #2
 80099c0:	dc51      	bgt.n	8009a66 <_dtoa_r+0x91e>
 80099c2:	e089      	b.n	8009ad8 <_dtoa_r+0x990>
 80099c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80099c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80099ca:	e74b      	b.n	8009864 <_dtoa_r+0x71c>
 80099cc:	9b03      	ldr	r3, [sp, #12]
 80099ce:	1e5e      	subs	r6, r3, #1
 80099d0:	9b07      	ldr	r3, [sp, #28]
 80099d2:	42b3      	cmp	r3, r6
 80099d4:	bfbf      	itttt	lt
 80099d6:	9b07      	ldrlt	r3, [sp, #28]
 80099d8:	9607      	strlt	r6, [sp, #28]
 80099da:	1af2      	sublt	r2, r6, r3
 80099dc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80099de:	bfb6      	itet	lt
 80099e0:	189b      	addlt	r3, r3, r2
 80099e2:	1b9e      	subge	r6, r3, r6
 80099e4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80099e6:	9b03      	ldr	r3, [sp, #12]
 80099e8:	bfb8      	it	lt
 80099ea:	2600      	movlt	r6, #0
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	bfb7      	itett	lt
 80099f0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80099f4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80099f8:	1a9d      	sublt	r5, r3, r2
 80099fa:	2300      	movlt	r3, #0
 80099fc:	e734      	b.n	8009868 <_dtoa_r+0x720>
 80099fe:	9e07      	ldr	r6, [sp, #28]
 8009a00:	9d04      	ldr	r5, [sp, #16]
 8009a02:	9f08      	ldr	r7, [sp, #32]
 8009a04:	e73b      	b.n	800987e <_dtoa_r+0x736>
 8009a06:	9a07      	ldr	r2, [sp, #28]
 8009a08:	e767      	b.n	80098da <_dtoa_r+0x792>
 8009a0a:	9b06      	ldr	r3, [sp, #24]
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	dc18      	bgt.n	8009a42 <_dtoa_r+0x8fa>
 8009a10:	f1ba 0f00 	cmp.w	sl, #0
 8009a14:	d115      	bne.n	8009a42 <_dtoa_r+0x8fa>
 8009a16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a1a:	b993      	cbnz	r3, 8009a42 <_dtoa_r+0x8fa>
 8009a1c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009a20:	0d1b      	lsrs	r3, r3, #20
 8009a22:	051b      	lsls	r3, r3, #20
 8009a24:	b183      	cbz	r3, 8009a48 <_dtoa_r+0x900>
 8009a26:	9b04      	ldr	r3, [sp, #16]
 8009a28:	3301      	adds	r3, #1
 8009a2a:	9304      	str	r3, [sp, #16]
 8009a2c:	9b05      	ldr	r3, [sp, #20]
 8009a2e:	3301      	adds	r3, #1
 8009a30:	9305      	str	r3, [sp, #20]
 8009a32:	f04f 0801 	mov.w	r8, #1
 8009a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	f47f af6a 	bne.w	8009912 <_dtoa_r+0x7ca>
 8009a3e:	2001      	movs	r0, #1
 8009a40:	e76f      	b.n	8009922 <_dtoa_r+0x7da>
 8009a42:	f04f 0800 	mov.w	r8, #0
 8009a46:	e7f6      	b.n	8009a36 <_dtoa_r+0x8ee>
 8009a48:	4698      	mov	r8, r3
 8009a4a:	e7f4      	b.n	8009a36 <_dtoa_r+0x8ee>
 8009a4c:	f43f af7d 	beq.w	800994a <_dtoa_r+0x802>
 8009a50:	4618      	mov	r0, r3
 8009a52:	301c      	adds	r0, #28
 8009a54:	e772      	b.n	800993c <_dtoa_r+0x7f4>
 8009a56:	9b03      	ldr	r3, [sp, #12]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	dc37      	bgt.n	8009acc <_dtoa_r+0x984>
 8009a5c:	9b06      	ldr	r3, [sp, #24]
 8009a5e:	2b02      	cmp	r3, #2
 8009a60:	dd34      	ble.n	8009acc <_dtoa_r+0x984>
 8009a62:	9b03      	ldr	r3, [sp, #12]
 8009a64:	9302      	str	r3, [sp, #8]
 8009a66:	9b02      	ldr	r3, [sp, #8]
 8009a68:	b96b      	cbnz	r3, 8009a86 <_dtoa_r+0x93e>
 8009a6a:	4631      	mov	r1, r6
 8009a6c:	2205      	movs	r2, #5
 8009a6e:	4620      	mov	r0, r4
 8009a70:	f000 fbe6 	bl	800a240 <__multadd>
 8009a74:	4601      	mov	r1, r0
 8009a76:	4606      	mov	r6, r0
 8009a78:	ee18 0a10 	vmov	r0, s16
 8009a7c:	f000 fe00 	bl	800a680 <__mcmp>
 8009a80:	2800      	cmp	r0, #0
 8009a82:	f73f adbb 	bgt.w	80095fc <_dtoa_r+0x4b4>
 8009a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a88:	9d01      	ldr	r5, [sp, #4]
 8009a8a:	43db      	mvns	r3, r3
 8009a8c:	9300      	str	r3, [sp, #0]
 8009a8e:	f04f 0800 	mov.w	r8, #0
 8009a92:	4631      	mov	r1, r6
 8009a94:	4620      	mov	r0, r4
 8009a96:	f000 fbb1 	bl	800a1fc <_Bfree>
 8009a9a:	2f00      	cmp	r7, #0
 8009a9c:	f43f aea4 	beq.w	80097e8 <_dtoa_r+0x6a0>
 8009aa0:	f1b8 0f00 	cmp.w	r8, #0
 8009aa4:	d005      	beq.n	8009ab2 <_dtoa_r+0x96a>
 8009aa6:	45b8      	cmp	r8, r7
 8009aa8:	d003      	beq.n	8009ab2 <_dtoa_r+0x96a>
 8009aaa:	4641      	mov	r1, r8
 8009aac:	4620      	mov	r0, r4
 8009aae:	f000 fba5 	bl	800a1fc <_Bfree>
 8009ab2:	4639      	mov	r1, r7
 8009ab4:	4620      	mov	r0, r4
 8009ab6:	f000 fba1 	bl	800a1fc <_Bfree>
 8009aba:	e695      	b.n	80097e8 <_dtoa_r+0x6a0>
 8009abc:	2600      	movs	r6, #0
 8009abe:	4637      	mov	r7, r6
 8009ac0:	e7e1      	b.n	8009a86 <_dtoa_r+0x93e>
 8009ac2:	9700      	str	r7, [sp, #0]
 8009ac4:	4637      	mov	r7, r6
 8009ac6:	e599      	b.n	80095fc <_dtoa_r+0x4b4>
 8009ac8:	40240000 	.word	0x40240000
 8009acc:	9b08      	ldr	r3, [sp, #32]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	f000 80ca 	beq.w	8009c68 <_dtoa_r+0xb20>
 8009ad4:	9b03      	ldr	r3, [sp, #12]
 8009ad6:	9302      	str	r3, [sp, #8]
 8009ad8:	2d00      	cmp	r5, #0
 8009ada:	dd05      	ble.n	8009ae8 <_dtoa_r+0x9a0>
 8009adc:	4639      	mov	r1, r7
 8009ade:	462a      	mov	r2, r5
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	f000 fd5d 	bl	800a5a0 <__lshift>
 8009ae6:	4607      	mov	r7, r0
 8009ae8:	f1b8 0f00 	cmp.w	r8, #0
 8009aec:	d05b      	beq.n	8009ba6 <_dtoa_r+0xa5e>
 8009aee:	6879      	ldr	r1, [r7, #4]
 8009af0:	4620      	mov	r0, r4
 8009af2:	f000 fb43 	bl	800a17c <_Balloc>
 8009af6:	4605      	mov	r5, r0
 8009af8:	b928      	cbnz	r0, 8009b06 <_dtoa_r+0x9be>
 8009afa:	4b87      	ldr	r3, [pc, #540]	; (8009d18 <_dtoa_r+0xbd0>)
 8009afc:	4602      	mov	r2, r0
 8009afe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009b02:	f7ff bb3b 	b.w	800917c <_dtoa_r+0x34>
 8009b06:	693a      	ldr	r2, [r7, #16]
 8009b08:	3202      	adds	r2, #2
 8009b0a:	0092      	lsls	r2, r2, #2
 8009b0c:	f107 010c 	add.w	r1, r7, #12
 8009b10:	300c      	adds	r0, #12
 8009b12:	f7fe fcd5 	bl	80084c0 <memcpy>
 8009b16:	2201      	movs	r2, #1
 8009b18:	4629      	mov	r1, r5
 8009b1a:	4620      	mov	r0, r4
 8009b1c:	f000 fd40 	bl	800a5a0 <__lshift>
 8009b20:	9b01      	ldr	r3, [sp, #4]
 8009b22:	f103 0901 	add.w	r9, r3, #1
 8009b26:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009b2a:	4413      	add	r3, r2
 8009b2c:	9305      	str	r3, [sp, #20]
 8009b2e:	f00a 0301 	and.w	r3, sl, #1
 8009b32:	46b8      	mov	r8, r7
 8009b34:	9304      	str	r3, [sp, #16]
 8009b36:	4607      	mov	r7, r0
 8009b38:	4631      	mov	r1, r6
 8009b3a:	ee18 0a10 	vmov	r0, s16
 8009b3e:	f7ff fa75 	bl	800902c <quorem>
 8009b42:	4641      	mov	r1, r8
 8009b44:	9002      	str	r0, [sp, #8]
 8009b46:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009b4a:	ee18 0a10 	vmov	r0, s16
 8009b4e:	f000 fd97 	bl	800a680 <__mcmp>
 8009b52:	463a      	mov	r2, r7
 8009b54:	9003      	str	r0, [sp, #12]
 8009b56:	4631      	mov	r1, r6
 8009b58:	4620      	mov	r0, r4
 8009b5a:	f000 fdad 	bl	800a6b8 <__mdiff>
 8009b5e:	68c2      	ldr	r2, [r0, #12]
 8009b60:	f109 3bff 	add.w	fp, r9, #4294967295
 8009b64:	4605      	mov	r5, r0
 8009b66:	bb02      	cbnz	r2, 8009baa <_dtoa_r+0xa62>
 8009b68:	4601      	mov	r1, r0
 8009b6a:	ee18 0a10 	vmov	r0, s16
 8009b6e:	f000 fd87 	bl	800a680 <__mcmp>
 8009b72:	4602      	mov	r2, r0
 8009b74:	4629      	mov	r1, r5
 8009b76:	4620      	mov	r0, r4
 8009b78:	9207      	str	r2, [sp, #28]
 8009b7a:	f000 fb3f 	bl	800a1fc <_Bfree>
 8009b7e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009b82:	ea43 0102 	orr.w	r1, r3, r2
 8009b86:	9b04      	ldr	r3, [sp, #16]
 8009b88:	430b      	orrs	r3, r1
 8009b8a:	464d      	mov	r5, r9
 8009b8c:	d10f      	bne.n	8009bae <_dtoa_r+0xa66>
 8009b8e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009b92:	d02a      	beq.n	8009bea <_dtoa_r+0xaa2>
 8009b94:	9b03      	ldr	r3, [sp, #12]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	dd02      	ble.n	8009ba0 <_dtoa_r+0xa58>
 8009b9a:	9b02      	ldr	r3, [sp, #8]
 8009b9c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009ba0:	f88b a000 	strb.w	sl, [fp]
 8009ba4:	e775      	b.n	8009a92 <_dtoa_r+0x94a>
 8009ba6:	4638      	mov	r0, r7
 8009ba8:	e7ba      	b.n	8009b20 <_dtoa_r+0x9d8>
 8009baa:	2201      	movs	r2, #1
 8009bac:	e7e2      	b.n	8009b74 <_dtoa_r+0xa2c>
 8009bae:	9b03      	ldr	r3, [sp, #12]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	db04      	blt.n	8009bbe <_dtoa_r+0xa76>
 8009bb4:	9906      	ldr	r1, [sp, #24]
 8009bb6:	430b      	orrs	r3, r1
 8009bb8:	9904      	ldr	r1, [sp, #16]
 8009bba:	430b      	orrs	r3, r1
 8009bbc:	d122      	bne.n	8009c04 <_dtoa_r+0xabc>
 8009bbe:	2a00      	cmp	r2, #0
 8009bc0:	ddee      	ble.n	8009ba0 <_dtoa_r+0xa58>
 8009bc2:	ee18 1a10 	vmov	r1, s16
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	4620      	mov	r0, r4
 8009bca:	f000 fce9 	bl	800a5a0 <__lshift>
 8009bce:	4631      	mov	r1, r6
 8009bd0:	ee08 0a10 	vmov	s16, r0
 8009bd4:	f000 fd54 	bl	800a680 <__mcmp>
 8009bd8:	2800      	cmp	r0, #0
 8009bda:	dc03      	bgt.n	8009be4 <_dtoa_r+0xa9c>
 8009bdc:	d1e0      	bne.n	8009ba0 <_dtoa_r+0xa58>
 8009bde:	f01a 0f01 	tst.w	sl, #1
 8009be2:	d0dd      	beq.n	8009ba0 <_dtoa_r+0xa58>
 8009be4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009be8:	d1d7      	bne.n	8009b9a <_dtoa_r+0xa52>
 8009bea:	2339      	movs	r3, #57	; 0x39
 8009bec:	f88b 3000 	strb.w	r3, [fp]
 8009bf0:	462b      	mov	r3, r5
 8009bf2:	461d      	mov	r5, r3
 8009bf4:	3b01      	subs	r3, #1
 8009bf6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009bfa:	2a39      	cmp	r2, #57	; 0x39
 8009bfc:	d071      	beq.n	8009ce2 <_dtoa_r+0xb9a>
 8009bfe:	3201      	adds	r2, #1
 8009c00:	701a      	strb	r2, [r3, #0]
 8009c02:	e746      	b.n	8009a92 <_dtoa_r+0x94a>
 8009c04:	2a00      	cmp	r2, #0
 8009c06:	dd07      	ble.n	8009c18 <_dtoa_r+0xad0>
 8009c08:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009c0c:	d0ed      	beq.n	8009bea <_dtoa_r+0xaa2>
 8009c0e:	f10a 0301 	add.w	r3, sl, #1
 8009c12:	f88b 3000 	strb.w	r3, [fp]
 8009c16:	e73c      	b.n	8009a92 <_dtoa_r+0x94a>
 8009c18:	9b05      	ldr	r3, [sp, #20]
 8009c1a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009c1e:	4599      	cmp	r9, r3
 8009c20:	d047      	beq.n	8009cb2 <_dtoa_r+0xb6a>
 8009c22:	ee18 1a10 	vmov	r1, s16
 8009c26:	2300      	movs	r3, #0
 8009c28:	220a      	movs	r2, #10
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	f000 fb08 	bl	800a240 <__multadd>
 8009c30:	45b8      	cmp	r8, r7
 8009c32:	ee08 0a10 	vmov	s16, r0
 8009c36:	f04f 0300 	mov.w	r3, #0
 8009c3a:	f04f 020a 	mov.w	r2, #10
 8009c3e:	4641      	mov	r1, r8
 8009c40:	4620      	mov	r0, r4
 8009c42:	d106      	bne.n	8009c52 <_dtoa_r+0xb0a>
 8009c44:	f000 fafc 	bl	800a240 <__multadd>
 8009c48:	4680      	mov	r8, r0
 8009c4a:	4607      	mov	r7, r0
 8009c4c:	f109 0901 	add.w	r9, r9, #1
 8009c50:	e772      	b.n	8009b38 <_dtoa_r+0x9f0>
 8009c52:	f000 faf5 	bl	800a240 <__multadd>
 8009c56:	4639      	mov	r1, r7
 8009c58:	4680      	mov	r8, r0
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	220a      	movs	r2, #10
 8009c5e:	4620      	mov	r0, r4
 8009c60:	f000 faee 	bl	800a240 <__multadd>
 8009c64:	4607      	mov	r7, r0
 8009c66:	e7f1      	b.n	8009c4c <_dtoa_r+0xb04>
 8009c68:	9b03      	ldr	r3, [sp, #12]
 8009c6a:	9302      	str	r3, [sp, #8]
 8009c6c:	9d01      	ldr	r5, [sp, #4]
 8009c6e:	ee18 0a10 	vmov	r0, s16
 8009c72:	4631      	mov	r1, r6
 8009c74:	f7ff f9da 	bl	800902c <quorem>
 8009c78:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009c7c:	9b01      	ldr	r3, [sp, #4]
 8009c7e:	f805 ab01 	strb.w	sl, [r5], #1
 8009c82:	1aea      	subs	r2, r5, r3
 8009c84:	9b02      	ldr	r3, [sp, #8]
 8009c86:	4293      	cmp	r3, r2
 8009c88:	dd09      	ble.n	8009c9e <_dtoa_r+0xb56>
 8009c8a:	ee18 1a10 	vmov	r1, s16
 8009c8e:	2300      	movs	r3, #0
 8009c90:	220a      	movs	r2, #10
 8009c92:	4620      	mov	r0, r4
 8009c94:	f000 fad4 	bl	800a240 <__multadd>
 8009c98:	ee08 0a10 	vmov	s16, r0
 8009c9c:	e7e7      	b.n	8009c6e <_dtoa_r+0xb26>
 8009c9e:	9b02      	ldr	r3, [sp, #8]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	bfc8      	it	gt
 8009ca4:	461d      	movgt	r5, r3
 8009ca6:	9b01      	ldr	r3, [sp, #4]
 8009ca8:	bfd8      	it	le
 8009caa:	2501      	movle	r5, #1
 8009cac:	441d      	add	r5, r3
 8009cae:	f04f 0800 	mov.w	r8, #0
 8009cb2:	ee18 1a10 	vmov	r1, s16
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	4620      	mov	r0, r4
 8009cba:	f000 fc71 	bl	800a5a0 <__lshift>
 8009cbe:	4631      	mov	r1, r6
 8009cc0:	ee08 0a10 	vmov	s16, r0
 8009cc4:	f000 fcdc 	bl	800a680 <__mcmp>
 8009cc8:	2800      	cmp	r0, #0
 8009cca:	dc91      	bgt.n	8009bf0 <_dtoa_r+0xaa8>
 8009ccc:	d102      	bne.n	8009cd4 <_dtoa_r+0xb8c>
 8009cce:	f01a 0f01 	tst.w	sl, #1
 8009cd2:	d18d      	bne.n	8009bf0 <_dtoa_r+0xaa8>
 8009cd4:	462b      	mov	r3, r5
 8009cd6:	461d      	mov	r5, r3
 8009cd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009cdc:	2a30      	cmp	r2, #48	; 0x30
 8009cde:	d0fa      	beq.n	8009cd6 <_dtoa_r+0xb8e>
 8009ce0:	e6d7      	b.n	8009a92 <_dtoa_r+0x94a>
 8009ce2:	9a01      	ldr	r2, [sp, #4]
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d184      	bne.n	8009bf2 <_dtoa_r+0xaaa>
 8009ce8:	9b00      	ldr	r3, [sp, #0]
 8009cea:	3301      	adds	r3, #1
 8009cec:	9300      	str	r3, [sp, #0]
 8009cee:	2331      	movs	r3, #49	; 0x31
 8009cf0:	7013      	strb	r3, [r2, #0]
 8009cf2:	e6ce      	b.n	8009a92 <_dtoa_r+0x94a>
 8009cf4:	4b09      	ldr	r3, [pc, #36]	; (8009d1c <_dtoa_r+0xbd4>)
 8009cf6:	f7ff ba95 	b.w	8009224 <_dtoa_r+0xdc>
 8009cfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	f47f aa6e 	bne.w	80091de <_dtoa_r+0x96>
 8009d02:	4b07      	ldr	r3, [pc, #28]	; (8009d20 <_dtoa_r+0xbd8>)
 8009d04:	f7ff ba8e 	b.w	8009224 <_dtoa_r+0xdc>
 8009d08:	9b02      	ldr	r3, [sp, #8]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	dcae      	bgt.n	8009c6c <_dtoa_r+0xb24>
 8009d0e:	9b06      	ldr	r3, [sp, #24]
 8009d10:	2b02      	cmp	r3, #2
 8009d12:	f73f aea8 	bgt.w	8009a66 <_dtoa_r+0x91e>
 8009d16:	e7a9      	b.n	8009c6c <_dtoa_r+0xb24>
 8009d18:	0800b49f 	.word	0x0800b49f
 8009d1c:	0800b3fc 	.word	0x0800b3fc
 8009d20:	0800b420 	.word	0x0800b420

08009d24 <__sflush_r>:
 8009d24:	898a      	ldrh	r2, [r1, #12]
 8009d26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d2a:	4605      	mov	r5, r0
 8009d2c:	0710      	lsls	r0, r2, #28
 8009d2e:	460c      	mov	r4, r1
 8009d30:	d458      	bmi.n	8009de4 <__sflush_r+0xc0>
 8009d32:	684b      	ldr	r3, [r1, #4]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	dc05      	bgt.n	8009d44 <__sflush_r+0x20>
 8009d38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	dc02      	bgt.n	8009d44 <__sflush_r+0x20>
 8009d3e:	2000      	movs	r0, #0
 8009d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d46:	2e00      	cmp	r6, #0
 8009d48:	d0f9      	beq.n	8009d3e <__sflush_r+0x1a>
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d50:	682f      	ldr	r7, [r5, #0]
 8009d52:	602b      	str	r3, [r5, #0]
 8009d54:	d032      	beq.n	8009dbc <__sflush_r+0x98>
 8009d56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d58:	89a3      	ldrh	r3, [r4, #12]
 8009d5a:	075a      	lsls	r2, r3, #29
 8009d5c:	d505      	bpl.n	8009d6a <__sflush_r+0x46>
 8009d5e:	6863      	ldr	r3, [r4, #4]
 8009d60:	1ac0      	subs	r0, r0, r3
 8009d62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d64:	b10b      	cbz	r3, 8009d6a <__sflush_r+0x46>
 8009d66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d68:	1ac0      	subs	r0, r0, r3
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d70:	6a21      	ldr	r1, [r4, #32]
 8009d72:	4628      	mov	r0, r5
 8009d74:	47b0      	blx	r6
 8009d76:	1c43      	adds	r3, r0, #1
 8009d78:	89a3      	ldrh	r3, [r4, #12]
 8009d7a:	d106      	bne.n	8009d8a <__sflush_r+0x66>
 8009d7c:	6829      	ldr	r1, [r5, #0]
 8009d7e:	291d      	cmp	r1, #29
 8009d80:	d82c      	bhi.n	8009ddc <__sflush_r+0xb8>
 8009d82:	4a2a      	ldr	r2, [pc, #168]	; (8009e2c <__sflush_r+0x108>)
 8009d84:	40ca      	lsrs	r2, r1
 8009d86:	07d6      	lsls	r6, r2, #31
 8009d88:	d528      	bpl.n	8009ddc <__sflush_r+0xb8>
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	6062      	str	r2, [r4, #4]
 8009d8e:	04d9      	lsls	r1, r3, #19
 8009d90:	6922      	ldr	r2, [r4, #16]
 8009d92:	6022      	str	r2, [r4, #0]
 8009d94:	d504      	bpl.n	8009da0 <__sflush_r+0x7c>
 8009d96:	1c42      	adds	r2, r0, #1
 8009d98:	d101      	bne.n	8009d9e <__sflush_r+0x7a>
 8009d9a:	682b      	ldr	r3, [r5, #0]
 8009d9c:	b903      	cbnz	r3, 8009da0 <__sflush_r+0x7c>
 8009d9e:	6560      	str	r0, [r4, #84]	; 0x54
 8009da0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009da2:	602f      	str	r7, [r5, #0]
 8009da4:	2900      	cmp	r1, #0
 8009da6:	d0ca      	beq.n	8009d3e <__sflush_r+0x1a>
 8009da8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009dac:	4299      	cmp	r1, r3
 8009dae:	d002      	beq.n	8009db6 <__sflush_r+0x92>
 8009db0:	4628      	mov	r0, r5
 8009db2:	f000 fd7d 	bl	800a8b0 <_free_r>
 8009db6:	2000      	movs	r0, #0
 8009db8:	6360      	str	r0, [r4, #52]	; 0x34
 8009dba:	e7c1      	b.n	8009d40 <__sflush_r+0x1c>
 8009dbc:	6a21      	ldr	r1, [r4, #32]
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	4628      	mov	r0, r5
 8009dc2:	47b0      	blx	r6
 8009dc4:	1c41      	adds	r1, r0, #1
 8009dc6:	d1c7      	bne.n	8009d58 <__sflush_r+0x34>
 8009dc8:	682b      	ldr	r3, [r5, #0]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d0c4      	beq.n	8009d58 <__sflush_r+0x34>
 8009dce:	2b1d      	cmp	r3, #29
 8009dd0:	d001      	beq.n	8009dd6 <__sflush_r+0xb2>
 8009dd2:	2b16      	cmp	r3, #22
 8009dd4:	d101      	bne.n	8009dda <__sflush_r+0xb6>
 8009dd6:	602f      	str	r7, [r5, #0]
 8009dd8:	e7b1      	b.n	8009d3e <__sflush_r+0x1a>
 8009dda:	89a3      	ldrh	r3, [r4, #12]
 8009ddc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009de0:	81a3      	strh	r3, [r4, #12]
 8009de2:	e7ad      	b.n	8009d40 <__sflush_r+0x1c>
 8009de4:	690f      	ldr	r7, [r1, #16]
 8009de6:	2f00      	cmp	r7, #0
 8009de8:	d0a9      	beq.n	8009d3e <__sflush_r+0x1a>
 8009dea:	0793      	lsls	r3, r2, #30
 8009dec:	680e      	ldr	r6, [r1, #0]
 8009dee:	bf08      	it	eq
 8009df0:	694b      	ldreq	r3, [r1, #20]
 8009df2:	600f      	str	r7, [r1, #0]
 8009df4:	bf18      	it	ne
 8009df6:	2300      	movne	r3, #0
 8009df8:	eba6 0807 	sub.w	r8, r6, r7
 8009dfc:	608b      	str	r3, [r1, #8]
 8009dfe:	f1b8 0f00 	cmp.w	r8, #0
 8009e02:	dd9c      	ble.n	8009d3e <__sflush_r+0x1a>
 8009e04:	6a21      	ldr	r1, [r4, #32]
 8009e06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009e08:	4643      	mov	r3, r8
 8009e0a:	463a      	mov	r2, r7
 8009e0c:	4628      	mov	r0, r5
 8009e0e:	47b0      	blx	r6
 8009e10:	2800      	cmp	r0, #0
 8009e12:	dc06      	bgt.n	8009e22 <__sflush_r+0xfe>
 8009e14:	89a3      	ldrh	r3, [r4, #12]
 8009e16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e1a:	81a3      	strh	r3, [r4, #12]
 8009e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e20:	e78e      	b.n	8009d40 <__sflush_r+0x1c>
 8009e22:	4407      	add	r7, r0
 8009e24:	eba8 0800 	sub.w	r8, r8, r0
 8009e28:	e7e9      	b.n	8009dfe <__sflush_r+0xda>
 8009e2a:	bf00      	nop
 8009e2c:	20400001 	.word	0x20400001

08009e30 <_fflush_r>:
 8009e30:	b538      	push	{r3, r4, r5, lr}
 8009e32:	690b      	ldr	r3, [r1, #16]
 8009e34:	4605      	mov	r5, r0
 8009e36:	460c      	mov	r4, r1
 8009e38:	b913      	cbnz	r3, 8009e40 <_fflush_r+0x10>
 8009e3a:	2500      	movs	r5, #0
 8009e3c:	4628      	mov	r0, r5
 8009e3e:	bd38      	pop	{r3, r4, r5, pc}
 8009e40:	b118      	cbz	r0, 8009e4a <_fflush_r+0x1a>
 8009e42:	6983      	ldr	r3, [r0, #24]
 8009e44:	b90b      	cbnz	r3, 8009e4a <_fflush_r+0x1a>
 8009e46:	f000 f887 	bl	8009f58 <__sinit>
 8009e4a:	4b14      	ldr	r3, [pc, #80]	; (8009e9c <_fflush_r+0x6c>)
 8009e4c:	429c      	cmp	r4, r3
 8009e4e:	d11b      	bne.n	8009e88 <_fflush_r+0x58>
 8009e50:	686c      	ldr	r4, [r5, #4]
 8009e52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d0ef      	beq.n	8009e3a <_fflush_r+0xa>
 8009e5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009e5c:	07d0      	lsls	r0, r2, #31
 8009e5e:	d404      	bmi.n	8009e6a <_fflush_r+0x3a>
 8009e60:	0599      	lsls	r1, r3, #22
 8009e62:	d402      	bmi.n	8009e6a <_fflush_r+0x3a>
 8009e64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e66:	f000 f91a 	bl	800a09e <__retarget_lock_acquire_recursive>
 8009e6a:	4628      	mov	r0, r5
 8009e6c:	4621      	mov	r1, r4
 8009e6e:	f7ff ff59 	bl	8009d24 <__sflush_r>
 8009e72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e74:	07da      	lsls	r2, r3, #31
 8009e76:	4605      	mov	r5, r0
 8009e78:	d4e0      	bmi.n	8009e3c <_fflush_r+0xc>
 8009e7a:	89a3      	ldrh	r3, [r4, #12]
 8009e7c:	059b      	lsls	r3, r3, #22
 8009e7e:	d4dd      	bmi.n	8009e3c <_fflush_r+0xc>
 8009e80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e82:	f000 f90d 	bl	800a0a0 <__retarget_lock_release_recursive>
 8009e86:	e7d9      	b.n	8009e3c <_fflush_r+0xc>
 8009e88:	4b05      	ldr	r3, [pc, #20]	; (8009ea0 <_fflush_r+0x70>)
 8009e8a:	429c      	cmp	r4, r3
 8009e8c:	d101      	bne.n	8009e92 <_fflush_r+0x62>
 8009e8e:	68ac      	ldr	r4, [r5, #8]
 8009e90:	e7df      	b.n	8009e52 <_fflush_r+0x22>
 8009e92:	4b04      	ldr	r3, [pc, #16]	; (8009ea4 <_fflush_r+0x74>)
 8009e94:	429c      	cmp	r4, r3
 8009e96:	bf08      	it	eq
 8009e98:	68ec      	ldreq	r4, [r5, #12]
 8009e9a:	e7da      	b.n	8009e52 <_fflush_r+0x22>
 8009e9c:	0800b4d0 	.word	0x0800b4d0
 8009ea0:	0800b4f0 	.word	0x0800b4f0
 8009ea4:	0800b4b0 	.word	0x0800b4b0

08009ea8 <std>:
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	b510      	push	{r4, lr}
 8009eac:	4604      	mov	r4, r0
 8009eae:	e9c0 3300 	strd	r3, r3, [r0]
 8009eb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009eb6:	6083      	str	r3, [r0, #8]
 8009eb8:	8181      	strh	r1, [r0, #12]
 8009eba:	6643      	str	r3, [r0, #100]	; 0x64
 8009ebc:	81c2      	strh	r2, [r0, #14]
 8009ebe:	6183      	str	r3, [r0, #24]
 8009ec0:	4619      	mov	r1, r3
 8009ec2:	2208      	movs	r2, #8
 8009ec4:	305c      	adds	r0, #92	; 0x5c
 8009ec6:	f7fe fb09 	bl	80084dc <memset>
 8009eca:	4b05      	ldr	r3, [pc, #20]	; (8009ee0 <std+0x38>)
 8009ecc:	6263      	str	r3, [r4, #36]	; 0x24
 8009ece:	4b05      	ldr	r3, [pc, #20]	; (8009ee4 <std+0x3c>)
 8009ed0:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ed2:	4b05      	ldr	r3, [pc, #20]	; (8009ee8 <std+0x40>)
 8009ed4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ed6:	4b05      	ldr	r3, [pc, #20]	; (8009eec <std+0x44>)
 8009ed8:	6224      	str	r4, [r4, #32]
 8009eda:	6323      	str	r3, [r4, #48]	; 0x30
 8009edc:	bd10      	pop	{r4, pc}
 8009ede:	bf00      	nop
 8009ee0:	0800ad45 	.word	0x0800ad45
 8009ee4:	0800ad67 	.word	0x0800ad67
 8009ee8:	0800ad9f 	.word	0x0800ad9f
 8009eec:	0800adc3 	.word	0x0800adc3

08009ef0 <_cleanup_r>:
 8009ef0:	4901      	ldr	r1, [pc, #4]	; (8009ef8 <_cleanup_r+0x8>)
 8009ef2:	f000 b8af 	b.w	800a054 <_fwalk_reent>
 8009ef6:	bf00      	nop
 8009ef8:	08009e31 	.word	0x08009e31

08009efc <__sfmoreglue>:
 8009efc:	b570      	push	{r4, r5, r6, lr}
 8009efe:	2268      	movs	r2, #104	; 0x68
 8009f00:	1e4d      	subs	r5, r1, #1
 8009f02:	4355      	muls	r5, r2
 8009f04:	460e      	mov	r6, r1
 8009f06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009f0a:	f000 fd3d 	bl	800a988 <_malloc_r>
 8009f0e:	4604      	mov	r4, r0
 8009f10:	b140      	cbz	r0, 8009f24 <__sfmoreglue+0x28>
 8009f12:	2100      	movs	r1, #0
 8009f14:	e9c0 1600 	strd	r1, r6, [r0]
 8009f18:	300c      	adds	r0, #12
 8009f1a:	60a0      	str	r0, [r4, #8]
 8009f1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009f20:	f7fe fadc 	bl	80084dc <memset>
 8009f24:	4620      	mov	r0, r4
 8009f26:	bd70      	pop	{r4, r5, r6, pc}

08009f28 <__sfp_lock_acquire>:
 8009f28:	4801      	ldr	r0, [pc, #4]	; (8009f30 <__sfp_lock_acquire+0x8>)
 8009f2a:	f000 b8b8 	b.w	800a09e <__retarget_lock_acquire_recursive>
 8009f2e:	bf00      	nop
 8009f30:	20000509 	.word	0x20000509

08009f34 <__sfp_lock_release>:
 8009f34:	4801      	ldr	r0, [pc, #4]	; (8009f3c <__sfp_lock_release+0x8>)
 8009f36:	f000 b8b3 	b.w	800a0a0 <__retarget_lock_release_recursive>
 8009f3a:	bf00      	nop
 8009f3c:	20000509 	.word	0x20000509

08009f40 <__sinit_lock_acquire>:
 8009f40:	4801      	ldr	r0, [pc, #4]	; (8009f48 <__sinit_lock_acquire+0x8>)
 8009f42:	f000 b8ac 	b.w	800a09e <__retarget_lock_acquire_recursive>
 8009f46:	bf00      	nop
 8009f48:	2000050a 	.word	0x2000050a

08009f4c <__sinit_lock_release>:
 8009f4c:	4801      	ldr	r0, [pc, #4]	; (8009f54 <__sinit_lock_release+0x8>)
 8009f4e:	f000 b8a7 	b.w	800a0a0 <__retarget_lock_release_recursive>
 8009f52:	bf00      	nop
 8009f54:	2000050a 	.word	0x2000050a

08009f58 <__sinit>:
 8009f58:	b510      	push	{r4, lr}
 8009f5a:	4604      	mov	r4, r0
 8009f5c:	f7ff fff0 	bl	8009f40 <__sinit_lock_acquire>
 8009f60:	69a3      	ldr	r3, [r4, #24]
 8009f62:	b11b      	cbz	r3, 8009f6c <__sinit+0x14>
 8009f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f68:	f7ff bff0 	b.w	8009f4c <__sinit_lock_release>
 8009f6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009f70:	6523      	str	r3, [r4, #80]	; 0x50
 8009f72:	4b13      	ldr	r3, [pc, #76]	; (8009fc0 <__sinit+0x68>)
 8009f74:	4a13      	ldr	r2, [pc, #76]	; (8009fc4 <__sinit+0x6c>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	62a2      	str	r2, [r4, #40]	; 0x28
 8009f7a:	42a3      	cmp	r3, r4
 8009f7c:	bf04      	itt	eq
 8009f7e:	2301      	moveq	r3, #1
 8009f80:	61a3      	streq	r3, [r4, #24]
 8009f82:	4620      	mov	r0, r4
 8009f84:	f000 f820 	bl	8009fc8 <__sfp>
 8009f88:	6060      	str	r0, [r4, #4]
 8009f8a:	4620      	mov	r0, r4
 8009f8c:	f000 f81c 	bl	8009fc8 <__sfp>
 8009f90:	60a0      	str	r0, [r4, #8]
 8009f92:	4620      	mov	r0, r4
 8009f94:	f000 f818 	bl	8009fc8 <__sfp>
 8009f98:	2200      	movs	r2, #0
 8009f9a:	60e0      	str	r0, [r4, #12]
 8009f9c:	2104      	movs	r1, #4
 8009f9e:	6860      	ldr	r0, [r4, #4]
 8009fa0:	f7ff ff82 	bl	8009ea8 <std>
 8009fa4:	68a0      	ldr	r0, [r4, #8]
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	2109      	movs	r1, #9
 8009faa:	f7ff ff7d 	bl	8009ea8 <std>
 8009fae:	68e0      	ldr	r0, [r4, #12]
 8009fb0:	2202      	movs	r2, #2
 8009fb2:	2112      	movs	r1, #18
 8009fb4:	f7ff ff78 	bl	8009ea8 <std>
 8009fb8:	2301      	movs	r3, #1
 8009fba:	61a3      	str	r3, [r4, #24]
 8009fbc:	e7d2      	b.n	8009f64 <__sinit+0xc>
 8009fbe:	bf00      	nop
 8009fc0:	0800b3e8 	.word	0x0800b3e8
 8009fc4:	08009ef1 	.word	0x08009ef1

08009fc8 <__sfp>:
 8009fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fca:	4607      	mov	r7, r0
 8009fcc:	f7ff ffac 	bl	8009f28 <__sfp_lock_acquire>
 8009fd0:	4b1e      	ldr	r3, [pc, #120]	; (800a04c <__sfp+0x84>)
 8009fd2:	681e      	ldr	r6, [r3, #0]
 8009fd4:	69b3      	ldr	r3, [r6, #24]
 8009fd6:	b913      	cbnz	r3, 8009fde <__sfp+0x16>
 8009fd8:	4630      	mov	r0, r6
 8009fda:	f7ff ffbd 	bl	8009f58 <__sinit>
 8009fde:	3648      	adds	r6, #72	; 0x48
 8009fe0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009fe4:	3b01      	subs	r3, #1
 8009fe6:	d503      	bpl.n	8009ff0 <__sfp+0x28>
 8009fe8:	6833      	ldr	r3, [r6, #0]
 8009fea:	b30b      	cbz	r3, 800a030 <__sfp+0x68>
 8009fec:	6836      	ldr	r6, [r6, #0]
 8009fee:	e7f7      	b.n	8009fe0 <__sfp+0x18>
 8009ff0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009ff4:	b9d5      	cbnz	r5, 800a02c <__sfp+0x64>
 8009ff6:	4b16      	ldr	r3, [pc, #88]	; (800a050 <__sfp+0x88>)
 8009ff8:	60e3      	str	r3, [r4, #12]
 8009ffa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009ffe:	6665      	str	r5, [r4, #100]	; 0x64
 800a000:	f000 f84c 	bl	800a09c <__retarget_lock_init_recursive>
 800a004:	f7ff ff96 	bl	8009f34 <__sfp_lock_release>
 800a008:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a00c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a010:	6025      	str	r5, [r4, #0]
 800a012:	61a5      	str	r5, [r4, #24]
 800a014:	2208      	movs	r2, #8
 800a016:	4629      	mov	r1, r5
 800a018:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a01c:	f7fe fa5e 	bl	80084dc <memset>
 800a020:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a024:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a028:	4620      	mov	r0, r4
 800a02a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a02c:	3468      	adds	r4, #104	; 0x68
 800a02e:	e7d9      	b.n	8009fe4 <__sfp+0x1c>
 800a030:	2104      	movs	r1, #4
 800a032:	4638      	mov	r0, r7
 800a034:	f7ff ff62 	bl	8009efc <__sfmoreglue>
 800a038:	4604      	mov	r4, r0
 800a03a:	6030      	str	r0, [r6, #0]
 800a03c:	2800      	cmp	r0, #0
 800a03e:	d1d5      	bne.n	8009fec <__sfp+0x24>
 800a040:	f7ff ff78 	bl	8009f34 <__sfp_lock_release>
 800a044:	230c      	movs	r3, #12
 800a046:	603b      	str	r3, [r7, #0]
 800a048:	e7ee      	b.n	800a028 <__sfp+0x60>
 800a04a:	bf00      	nop
 800a04c:	0800b3e8 	.word	0x0800b3e8
 800a050:	ffff0001 	.word	0xffff0001

0800a054 <_fwalk_reent>:
 800a054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a058:	4606      	mov	r6, r0
 800a05a:	4688      	mov	r8, r1
 800a05c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a060:	2700      	movs	r7, #0
 800a062:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a066:	f1b9 0901 	subs.w	r9, r9, #1
 800a06a:	d505      	bpl.n	800a078 <_fwalk_reent+0x24>
 800a06c:	6824      	ldr	r4, [r4, #0]
 800a06e:	2c00      	cmp	r4, #0
 800a070:	d1f7      	bne.n	800a062 <_fwalk_reent+0xe>
 800a072:	4638      	mov	r0, r7
 800a074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a078:	89ab      	ldrh	r3, [r5, #12]
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	d907      	bls.n	800a08e <_fwalk_reent+0x3a>
 800a07e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a082:	3301      	adds	r3, #1
 800a084:	d003      	beq.n	800a08e <_fwalk_reent+0x3a>
 800a086:	4629      	mov	r1, r5
 800a088:	4630      	mov	r0, r6
 800a08a:	47c0      	blx	r8
 800a08c:	4307      	orrs	r7, r0
 800a08e:	3568      	adds	r5, #104	; 0x68
 800a090:	e7e9      	b.n	800a066 <_fwalk_reent+0x12>
	...

0800a094 <_localeconv_r>:
 800a094:	4800      	ldr	r0, [pc, #0]	; (800a098 <_localeconv_r+0x4>)
 800a096:	4770      	bx	lr
 800a098:	20000178 	.word	0x20000178

0800a09c <__retarget_lock_init_recursive>:
 800a09c:	4770      	bx	lr

0800a09e <__retarget_lock_acquire_recursive>:
 800a09e:	4770      	bx	lr

0800a0a0 <__retarget_lock_release_recursive>:
 800a0a0:	4770      	bx	lr

0800a0a2 <__swhatbuf_r>:
 800a0a2:	b570      	push	{r4, r5, r6, lr}
 800a0a4:	460e      	mov	r6, r1
 800a0a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0aa:	2900      	cmp	r1, #0
 800a0ac:	b096      	sub	sp, #88	; 0x58
 800a0ae:	4614      	mov	r4, r2
 800a0b0:	461d      	mov	r5, r3
 800a0b2:	da08      	bge.n	800a0c6 <__swhatbuf_r+0x24>
 800a0b4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	602a      	str	r2, [r5, #0]
 800a0bc:	061a      	lsls	r2, r3, #24
 800a0be:	d410      	bmi.n	800a0e2 <__swhatbuf_r+0x40>
 800a0c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0c4:	e00e      	b.n	800a0e4 <__swhatbuf_r+0x42>
 800a0c6:	466a      	mov	r2, sp
 800a0c8:	f000 fed2 	bl	800ae70 <_fstat_r>
 800a0cc:	2800      	cmp	r0, #0
 800a0ce:	dbf1      	blt.n	800a0b4 <__swhatbuf_r+0x12>
 800a0d0:	9a01      	ldr	r2, [sp, #4]
 800a0d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a0d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a0da:	425a      	negs	r2, r3
 800a0dc:	415a      	adcs	r2, r3
 800a0de:	602a      	str	r2, [r5, #0]
 800a0e0:	e7ee      	b.n	800a0c0 <__swhatbuf_r+0x1e>
 800a0e2:	2340      	movs	r3, #64	; 0x40
 800a0e4:	2000      	movs	r0, #0
 800a0e6:	6023      	str	r3, [r4, #0]
 800a0e8:	b016      	add	sp, #88	; 0x58
 800a0ea:	bd70      	pop	{r4, r5, r6, pc}

0800a0ec <__smakebuf_r>:
 800a0ec:	898b      	ldrh	r3, [r1, #12]
 800a0ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a0f0:	079d      	lsls	r5, r3, #30
 800a0f2:	4606      	mov	r6, r0
 800a0f4:	460c      	mov	r4, r1
 800a0f6:	d507      	bpl.n	800a108 <__smakebuf_r+0x1c>
 800a0f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a0fc:	6023      	str	r3, [r4, #0]
 800a0fe:	6123      	str	r3, [r4, #16]
 800a100:	2301      	movs	r3, #1
 800a102:	6163      	str	r3, [r4, #20]
 800a104:	b002      	add	sp, #8
 800a106:	bd70      	pop	{r4, r5, r6, pc}
 800a108:	ab01      	add	r3, sp, #4
 800a10a:	466a      	mov	r2, sp
 800a10c:	f7ff ffc9 	bl	800a0a2 <__swhatbuf_r>
 800a110:	9900      	ldr	r1, [sp, #0]
 800a112:	4605      	mov	r5, r0
 800a114:	4630      	mov	r0, r6
 800a116:	f000 fc37 	bl	800a988 <_malloc_r>
 800a11a:	b948      	cbnz	r0, 800a130 <__smakebuf_r+0x44>
 800a11c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a120:	059a      	lsls	r2, r3, #22
 800a122:	d4ef      	bmi.n	800a104 <__smakebuf_r+0x18>
 800a124:	f023 0303 	bic.w	r3, r3, #3
 800a128:	f043 0302 	orr.w	r3, r3, #2
 800a12c:	81a3      	strh	r3, [r4, #12]
 800a12e:	e7e3      	b.n	800a0f8 <__smakebuf_r+0xc>
 800a130:	4b0d      	ldr	r3, [pc, #52]	; (800a168 <__smakebuf_r+0x7c>)
 800a132:	62b3      	str	r3, [r6, #40]	; 0x28
 800a134:	89a3      	ldrh	r3, [r4, #12]
 800a136:	6020      	str	r0, [r4, #0]
 800a138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a13c:	81a3      	strh	r3, [r4, #12]
 800a13e:	9b00      	ldr	r3, [sp, #0]
 800a140:	6163      	str	r3, [r4, #20]
 800a142:	9b01      	ldr	r3, [sp, #4]
 800a144:	6120      	str	r0, [r4, #16]
 800a146:	b15b      	cbz	r3, 800a160 <__smakebuf_r+0x74>
 800a148:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a14c:	4630      	mov	r0, r6
 800a14e:	f000 fea1 	bl	800ae94 <_isatty_r>
 800a152:	b128      	cbz	r0, 800a160 <__smakebuf_r+0x74>
 800a154:	89a3      	ldrh	r3, [r4, #12]
 800a156:	f023 0303 	bic.w	r3, r3, #3
 800a15a:	f043 0301 	orr.w	r3, r3, #1
 800a15e:	81a3      	strh	r3, [r4, #12]
 800a160:	89a0      	ldrh	r0, [r4, #12]
 800a162:	4305      	orrs	r5, r0
 800a164:	81a5      	strh	r5, [r4, #12]
 800a166:	e7cd      	b.n	800a104 <__smakebuf_r+0x18>
 800a168:	08009ef1 	.word	0x08009ef1

0800a16c <malloc>:
 800a16c:	4b02      	ldr	r3, [pc, #8]	; (800a178 <malloc+0xc>)
 800a16e:	4601      	mov	r1, r0
 800a170:	6818      	ldr	r0, [r3, #0]
 800a172:	f000 bc09 	b.w	800a988 <_malloc_r>
 800a176:	bf00      	nop
 800a178:	20000024 	.word	0x20000024

0800a17c <_Balloc>:
 800a17c:	b570      	push	{r4, r5, r6, lr}
 800a17e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a180:	4604      	mov	r4, r0
 800a182:	460d      	mov	r5, r1
 800a184:	b976      	cbnz	r6, 800a1a4 <_Balloc+0x28>
 800a186:	2010      	movs	r0, #16
 800a188:	f7ff fff0 	bl	800a16c <malloc>
 800a18c:	4602      	mov	r2, r0
 800a18e:	6260      	str	r0, [r4, #36]	; 0x24
 800a190:	b920      	cbnz	r0, 800a19c <_Balloc+0x20>
 800a192:	4b18      	ldr	r3, [pc, #96]	; (800a1f4 <_Balloc+0x78>)
 800a194:	4818      	ldr	r0, [pc, #96]	; (800a1f8 <_Balloc+0x7c>)
 800a196:	2166      	movs	r1, #102	; 0x66
 800a198:	f000 fe2a 	bl	800adf0 <__assert_func>
 800a19c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1a0:	6006      	str	r6, [r0, #0]
 800a1a2:	60c6      	str	r6, [r0, #12]
 800a1a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a1a6:	68f3      	ldr	r3, [r6, #12]
 800a1a8:	b183      	cbz	r3, 800a1cc <_Balloc+0x50>
 800a1aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1ac:	68db      	ldr	r3, [r3, #12]
 800a1ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a1b2:	b9b8      	cbnz	r0, 800a1e4 <_Balloc+0x68>
 800a1b4:	2101      	movs	r1, #1
 800a1b6:	fa01 f605 	lsl.w	r6, r1, r5
 800a1ba:	1d72      	adds	r2, r6, #5
 800a1bc:	0092      	lsls	r2, r2, #2
 800a1be:	4620      	mov	r0, r4
 800a1c0:	f000 fb60 	bl	800a884 <_calloc_r>
 800a1c4:	b160      	cbz	r0, 800a1e0 <_Balloc+0x64>
 800a1c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a1ca:	e00e      	b.n	800a1ea <_Balloc+0x6e>
 800a1cc:	2221      	movs	r2, #33	; 0x21
 800a1ce:	2104      	movs	r1, #4
 800a1d0:	4620      	mov	r0, r4
 800a1d2:	f000 fb57 	bl	800a884 <_calloc_r>
 800a1d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1d8:	60f0      	str	r0, [r6, #12]
 800a1da:	68db      	ldr	r3, [r3, #12]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d1e4      	bne.n	800a1aa <_Balloc+0x2e>
 800a1e0:	2000      	movs	r0, #0
 800a1e2:	bd70      	pop	{r4, r5, r6, pc}
 800a1e4:	6802      	ldr	r2, [r0, #0]
 800a1e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a1f0:	e7f7      	b.n	800a1e2 <_Balloc+0x66>
 800a1f2:	bf00      	nop
 800a1f4:	0800b42d 	.word	0x0800b42d
 800a1f8:	0800b510 	.word	0x0800b510

0800a1fc <_Bfree>:
 800a1fc:	b570      	push	{r4, r5, r6, lr}
 800a1fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a200:	4605      	mov	r5, r0
 800a202:	460c      	mov	r4, r1
 800a204:	b976      	cbnz	r6, 800a224 <_Bfree+0x28>
 800a206:	2010      	movs	r0, #16
 800a208:	f7ff ffb0 	bl	800a16c <malloc>
 800a20c:	4602      	mov	r2, r0
 800a20e:	6268      	str	r0, [r5, #36]	; 0x24
 800a210:	b920      	cbnz	r0, 800a21c <_Bfree+0x20>
 800a212:	4b09      	ldr	r3, [pc, #36]	; (800a238 <_Bfree+0x3c>)
 800a214:	4809      	ldr	r0, [pc, #36]	; (800a23c <_Bfree+0x40>)
 800a216:	218a      	movs	r1, #138	; 0x8a
 800a218:	f000 fdea 	bl	800adf0 <__assert_func>
 800a21c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a220:	6006      	str	r6, [r0, #0]
 800a222:	60c6      	str	r6, [r0, #12]
 800a224:	b13c      	cbz	r4, 800a236 <_Bfree+0x3a>
 800a226:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a228:	6862      	ldr	r2, [r4, #4]
 800a22a:	68db      	ldr	r3, [r3, #12]
 800a22c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a230:	6021      	str	r1, [r4, #0]
 800a232:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a236:	bd70      	pop	{r4, r5, r6, pc}
 800a238:	0800b42d 	.word	0x0800b42d
 800a23c:	0800b510 	.word	0x0800b510

0800a240 <__multadd>:
 800a240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a244:	690d      	ldr	r5, [r1, #16]
 800a246:	4607      	mov	r7, r0
 800a248:	460c      	mov	r4, r1
 800a24a:	461e      	mov	r6, r3
 800a24c:	f101 0c14 	add.w	ip, r1, #20
 800a250:	2000      	movs	r0, #0
 800a252:	f8dc 3000 	ldr.w	r3, [ip]
 800a256:	b299      	uxth	r1, r3
 800a258:	fb02 6101 	mla	r1, r2, r1, r6
 800a25c:	0c1e      	lsrs	r6, r3, #16
 800a25e:	0c0b      	lsrs	r3, r1, #16
 800a260:	fb02 3306 	mla	r3, r2, r6, r3
 800a264:	b289      	uxth	r1, r1
 800a266:	3001      	adds	r0, #1
 800a268:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a26c:	4285      	cmp	r5, r0
 800a26e:	f84c 1b04 	str.w	r1, [ip], #4
 800a272:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a276:	dcec      	bgt.n	800a252 <__multadd+0x12>
 800a278:	b30e      	cbz	r6, 800a2be <__multadd+0x7e>
 800a27a:	68a3      	ldr	r3, [r4, #8]
 800a27c:	42ab      	cmp	r3, r5
 800a27e:	dc19      	bgt.n	800a2b4 <__multadd+0x74>
 800a280:	6861      	ldr	r1, [r4, #4]
 800a282:	4638      	mov	r0, r7
 800a284:	3101      	adds	r1, #1
 800a286:	f7ff ff79 	bl	800a17c <_Balloc>
 800a28a:	4680      	mov	r8, r0
 800a28c:	b928      	cbnz	r0, 800a29a <__multadd+0x5a>
 800a28e:	4602      	mov	r2, r0
 800a290:	4b0c      	ldr	r3, [pc, #48]	; (800a2c4 <__multadd+0x84>)
 800a292:	480d      	ldr	r0, [pc, #52]	; (800a2c8 <__multadd+0x88>)
 800a294:	21b5      	movs	r1, #181	; 0xb5
 800a296:	f000 fdab 	bl	800adf0 <__assert_func>
 800a29a:	6922      	ldr	r2, [r4, #16]
 800a29c:	3202      	adds	r2, #2
 800a29e:	f104 010c 	add.w	r1, r4, #12
 800a2a2:	0092      	lsls	r2, r2, #2
 800a2a4:	300c      	adds	r0, #12
 800a2a6:	f7fe f90b 	bl	80084c0 <memcpy>
 800a2aa:	4621      	mov	r1, r4
 800a2ac:	4638      	mov	r0, r7
 800a2ae:	f7ff ffa5 	bl	800a1fc <_Bfree>
 800a2b2:	4644      	mov	r4, r8
 800a2b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a2b8:	3501      	adds	r5, #1
 800a2ba:	615e      	str	r6, [r3, #20]
 800a2bc:	6125      	str	r5, [r4, #16]
 800a2be:	4620      	mov	r0, r4
 800a2c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2c4:	0800b49f 	.word	0x0800b49f
 800a2c8:	0800b510 	.word	0x0800b510

0800a2cc <__hi0bits>:
 800a2cc:	0c03      	lsrs	r3, r0, #16
 800a2ce:	041b      	lsls	r3, r3, #16
 800a2d0:	b9d3      	cbnz	r3, 800a308 <__hi0bits+0x3c>
 800a2d2:	0400      	lsls	r0, r0, #16
 800a2d4:	2310      	movs	r3, #16
 800a2d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a2da:	bf04      	itt	eq
 800a2dc:	0200      	lsleq	r0, r0, #8
 800a2de:	3308      	addeq	r3, #8
 800a2e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a2e4:	bf04      	itt	eq
 800a2e6:	0100      	lsleq	r0, r0, #4
 800a2e8:	3304      	addeq	r3, #4
 800a2ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a2ee:	bf04      	itt	eq
 800a2f0:	0080      	lsleq	r0, r0, #2
 800a2f2:	3302      	addeq	r3, #2
 800a2f4:	2800      	cmp	r0, #0
 800a2f6:	db05      	blt.n	800a304 <__hi0bits+0x38>
 800a2f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a2fc:	f103 0301 	add.w	r3, r3, #1
 800a300:	bf08      	it	eq
 800a302:	2320      	moveq	r3, #32
 800a304:	4618      	mov	r0, r3
 800a306:	4770      	bx	lr
 800a308:	2300      	movs	r3, #0
 800a30a:	e7e4      	b.n	800a2d6 <__hi0bits+0xa>

0800a30c <__lo0bits>:
 800a30c:	6803      	ldr	r3, [r0, #0]
 800a30e:	f013 0207 	ands.w	r2, r3, #7
 800a312:	4601      	mov	r1, r0
 800a314:	d00b      	beq.n	800a32e <__lo0bits+0x22>
 800a316:	07da      	lsls	r2, r3, #31
 800a318:	d423      	bmi.n	800a362 <__lo0bits+0x56>
 800a31a:	0798      	lsls	r0, r3, #30
 800a31c:	bf49      	itett	mi
 800a31e:	085b      	lsrmi	r3, r3, #1
 800a320:	089b      	lsrpl	r3, r3, #2
 800a322:	2001      	movmi	r0, #1
 800a324:	600b      	strmi	r3, [r1, #0]
 800a326:	bf5c      	itt	pl
 800a328:	600b      	strpl	r3, [r1, #0]
 800a32a:	2002      	movpl	r0, #2
 800a32c:	4770      	bx	lr
 800a32e:	b298      	uxth	r0, r3
 800a330:	b9a8      	cbnz	r0, 800a35e <__lo0bits+0x52>
 800a332:	0c1b      	lsrs	r3, r3, #16
 800a334:	2010      	movs	r0, #16
 800a336:	b2da      	uxtb	r2, r3
 800a338:	b90a      	cbnz	r2, 800a33e <__lo0bits+0x32>
 800a33a:	3008      	adds	r0, #8
 800a33c:	0a1b      	lsrs	r3, r3, #8
 800a33e:	071a      	lsls	r2, r3, #28
 800a340:	bf04      	itt	eq
 800a342:	091b      	lsreq	r3, r3, #4
 800a344:	3004      	addeq	r0, #4
 800a346:	079a      	lsls	r2, r3, #30
 800a348:	bf04      	itt	eq
 800a34a:	089b      	lsreq	r3, r3, #2
 800a34c:	3002      	addeq	r0, #2
 800a34e:	07da      	lsls	r2, r3, #31
 800a350:	d403      	bmi.n	800a35a <__lo0bits+0x4e>
 800a352:	085b      	lsrs	r3, r3, #1
 800a354:	f100 0001 	add.w	r0, r0, #1
 800a358:	d005      	beq.n	800a366 <__lo0bits+0x5a>
 800a35a:	600b      	str	r3, [r1, #0]
 800a35c:	4770      	bx	lr
 800a35e:	4610      	mov	r0, r2
 800a360:	e7e9      	b.n	800a336 <__lo0bits+0x2a>
 800a362:	2000      	movs	r0, #0
 800a364:	4770      	bx	lr
 800a366:	2020      	movs	r0, #32
 800a368:	4770      	bx	lr
	...

0800a36c <__i2b>:
 800a36c:	b510      	push	{r4, lr}
 800a36e:	460c      	mov	r4, r1
 800a370:	2101      	movs	r1, #1
 800a372:	f7ff ff03 	bl	800a17c <_Balloc>
 800a376:	4602      	mov	r2, r0
 800a378:	b928      	cbnz	r0, 800a386 <__i2b+0x1a>
 800a37a:	4b05      	ldr	r3, [pc, #20]	; (800a390 <__i2b+0x24>)
 800a37c:	4805      	ldr	r0, [pc, #20]	; (800a394 <__i2b+0x28>)
 800a37e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a382:	f000 fd35 	bl	800adf0 <__assert_func>
 800a386:	2301      	movs	r3, #1
 800a388:	6144      	str	r4, [r0, #20]
 800a38a:	6103      	str	r3, [r0, #16]
 800a38c:	bd10      	pop	{r4, pc}
 800a38e:	bf00      	nop
 800a390:	0800b49f 	.word	0x0800b49f
 800a394:	0800b510 	.word	0x0800b510

0800a398 <__multiply>:
 800a398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a39c:	4691      	mov	r9, r2
 800a39e:	690a      	ldr	r2, [r1, #16]
 800a3a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	bfb8      	it	lt
 800a3a8:	460b      	movlt	r3, r1
 800a3aa:	460c      	mov	r4, r1
 800a3ac:	bfbc      	itt	lt
 800a3ae:	464c      	movlt	r4, r9
 800a3b0:	4699      	movlt	r9, r3
 800a3b2:	6927      	ldr	r7, [r4, #16]
 800a3b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a3b8:	68a3      	ldr	r3, [r4, #8]
 800a3ba:	6861      	ldr	r1, [r4, #4]
 800a3bc:	eb07 060a 	add.w	r6, r7, sl
 800a3c0:	42b3      	cmp	r3, r6
 800a3c2:	b085      	sub	sp, #20
 800a3c4:	bfb8      	it	lt
 800a3c6:	3101      	addlt	r1, #1
 800a3c8:	f7ff fed8 	bl	800a17c <_Balloc>
 800a3cc:	b930      	cbnz	r0, 800a3dc <__multiply+0x44>
 800a3ce:	4602      	mov	r2, r0
 800a3d0:	4b44      	ldr	r3, [pc, #272]	; (800a4e4 <__multiply+0x14c>)
 800a3d2:	4845      	ldr	r0, [pc, #276]	; (800a4e8 <__multiply+0x150>)
 800a3d4:	f240 115d 	movw	r1, #349	; 0x15d
 800a3d8:	f000 fd0a 	bl	800adf0 <__assert_func>
 800a3dc:	f100 0514 	add.w	r5, r0, #20
 800a3e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a3e4:	462b      	mov	r3, r5
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	4543      	cmp	r3, r8
 800a3ea:	d321      	bcc.n	800a430 <__multiply+0x98>
 800a3ec:	f104 0314 	add.w	r3, r4, #20
 800a3f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a3f4:	f109 0314 	add.w	r3, r9, #20
 800a3f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a3fc:	9202      	str	r2, [sp, #8]
 800a3fe:	1b3a      	subs	r2, r7, r4
 800a400:	3a15      	subs	r2, #21
 800a402:	f022 0203 	bic.w	r2, r2, #3
 800a406:	3204      	adds	r2, #4
 800a408:	f104 0115 	add.w	r1, r4, #21
 800a40c:	428f      	cmp	r7, r1
 800a40e:	bf38      	it	cc
 800a410:	2204      	movcc	r2, #4
 800a412:	9201      	str	r2, [sp, #4]
 800a414:	9a02      	ldr	r2, [sp, #8]
 800a416:	9303      	str	r3, [sp, #12]
 800a418:	429a      	cmp	r2, r3
 800a41a:	d80c      	bhi.n	800a436 <__multiply+0x9e>
 800a41c:	2e00      	cmp	r6, #0
 800a41e:	dd03      	ble.n	800a428 <__multiply+0x90>
 800a420:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a424:	2b00      	cmp	r3, #0
 800a426:	d05a      	beq.n	800a4de <__multiply+0x146>
 800a428:	6106      	str	r6, [r0, #16]
 800a42a:	b005      	add	sp, #20
 800a42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a430:	f843 2b04 	str.w	r2, [r3], #4
 800a434:	e7d8      	b.n	800a3e8 <__multiply+0x50>
 800a436:	f8b3 a000 	ldrh.w	sl, [r3]
 800a43a:	f1ba 0f00 	cmp.w	sl, #0
 800a43e:	d024      	beq.n	800a48a <__multiply+0xf2>
 800a440:	f104 0e14 	add.w	lr, r4, #20
 800a444:	46a9      	mov	r9, r5
 800a446:	f04f 0c00 	mov.w	ip, #0
 800a44a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a44e:	f8d9 1000 	ldr.w	r1, [r9]
 800a452:	fa1f fb82 	uxth.w	fp, r2
 800a456:	b289      	uxth	r1, r1
 800a458:	fb0a 110b 	mla	r1, sl, fp, r1
 800a45c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a460:	f8d9 2000 	ldr.w	r2, [r9]
 800a464:	4461      	add	r1, ip
 800a466:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a46a:	fb0a c20b 	mla	r2, sl, fp, ip
 800a46e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a472:	b289      	uxth	r1, r1
 800a474:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a478:	4577      	cmp	r7, lr
 800a47a:	f849 1b04 	str.w	r1, [r9], #4
 800a47e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a482:	d8e2      	bhi.n	800a44a <__multiply+0xb2>
 800a484:	9a01      	ldr	r2, [sp, #4]
 800a486:	f845 c002 	str.w	ip, [r5, r2]
 800a48a:	9a03      	ldr	r2, [sp, #12]
 800a48c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a490:	3304      	adds	r3, #4
 800a492:	f1b9 0f00 	cmp.w	r9, #0
 800a496:	d020      	beq.n	800a4da <__multiply+0x142>
 800a498:	6829      	ldr	r1, [r5, #0]
 800a49a:	f104 0c14 	add.w	ip, r4, #20
 800a49e:	46ae      	mov	lr, r5
 800a4a0:	f04f 0a00 	mov.w	sl, #0
 800a4a4:	f8bc b000 	ldrh.w	fp, [ip]
 800a4a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a4ac:	fb09 220b 	mla	r2, r9, fp, r2
 800a4b0:	4492      	add	sl, r2
 800a4b2:	b289      	uxth	r1, r1
 800a4b4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a4b8:	f84e 1b04 	str.w	r1, [lr], #4
 800a4bc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a4c0:	f8be 1000 	ldrh.w	r1, [lr]
 800a4c4:	0c12      	lsrs	r2, r2, #16
 800a4c6:	fb09 1102 	mla	r1, r9, r2, r1
 800a4ca:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a4ce:	4567      	cmp	r7, ip
 800a4d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a4d4:	d8e6      	bhi.n	800a4a4 <__multiply+0x10c>
 800a4d6:	9a01      	ldr	r2, [sp, #4]
 800a4d8:	50a9      	str	r1, [r5, r2]
 800a4da:	3504      	adds	r5, #4
 800a4dc:	e79a      	b.n	800a414 <__multiply+0x7c>
 800a4de:	3e01      	subs	r6, #1
 800a4e0:	e79c      	b.n	800a41c <__multiply+0x84>
 800a4e2:	bf00      	nop
 800a4e4:	0800b49f 	.word	0x0800b49f
 800a4e8:	0800b510 	.word	0x0800b510

0800a4ec <__pow5mult>:
 800a4ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4f0:	4615      	mov	r5, r2
 800a4f2:	f012 0203 	ands.w	r2, r2, #3
 800a4f6:	4606      	mov	r6, r0
 800a4f8:	460f      	mov	r7, r1
 800a4fa:	d007      	beq.n	800a50c <__pow5mult+0x20>
 800a4fc:	4c25      	ldr	r4, [pc, #148]	; (800a594 <__pow5mult+0xa8>)
 800a4fe:	3a01      	subs	r2, #1
 800a500:	2300      	movs	r3, #0
 800a502:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a506:	f7ff fe9b 	bl	800a240 <__multadd>
 800a50a:	4607      	mov	r7, r0
 800a50c:	10ad      	asrs	r5, r5, #2
 800a50e:	d03d      	beq.n	800a58c <__pow5mult+0xa0>
 800a510:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a512:	b97c      	cbnz	r4, 800a534 <__pow5mult+0x48>
 800a514:	2010      	movs	r0, #16
 800a516:	f7ff fe29 	bl	800a16c <malloc>
 800a51a:	4602      	mov	r2, r0
 800a51c:	6270      	str	r0, [r6, #36]	; 0x24
 800a51e:	b928      	cbnz	r0, 800a52c <__pow5mult+0x40>
 800a520:	4b1d      	ldr	r3, [pc, #116]	; (800a598 <__pow5mult+0xac>)
 800a522:	481e      	ldr	r0, [pc, #120]	; (800a59c <__pow5mult+0xb0>)
 800a524:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a528:	f000 fc62 	bl	800adf0 <__assert_func>
 800a52c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a530:	6004      	str	r4, [r0, #0]
 800a532:	60c4      	str	r4, [r0, #12]
 800a534:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a538:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a53c:	b94c      	cbnz	r4, 800a552 <__pow5mult+0x66>
 800a53e:	f240 2171 	movw	r1, #625	; 0x271
 800a542:	4630      	mov	r0, r6
 800a544:	f7ff ff12 	bl	800a36c <__i2b>
 800a548:	2300      	movs	r3, #0
 800a54a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a54e:	4604      	mov	r4, r0
 800a550:	6003      	str	r3, [r0, #0]
 800a552:	f04f 0900 	mov.w	r9, #0
 800a556:	07eb      	lsls	r3, r5, #31
 800a558:	d50a      	bpl.n	800a570 <__pow5mult+0x84>
 800a55a:	4639      	mov	r1, r7
 800a55c:	4622      	mov	r2, r4
 800a55e:	4630      	mov	r0, r6
 800a560:	f7ff ff1a 	bl	800a398 <__multiply>
 800a564:	4639      	mov	r1, r7
 800a566:	4680      	mov	r8, r0
 800a568:	4630      	mov	r0, r6
 800a56a:	f7ff fe47 	bl	800a1fc <_Bfree>
 800a56e:	4647      	mov	r7, r8
 800a570:	106d      	asrs	r5, r5, #1
 800a572:	d00b      	beq.n	800a58c <__pow5mult+0xa0>
 800a574:	6820      	ldr	r0, [r4, #0]
 800a576:	b938      	cbnz	r0, 800a588 <__pow5mult+0x9c>
 800a578:	4622      	mov	r2, r4
 800a57a:	4621      	mov	r1, r4
 800a57c:	4630      	mov	r0, r6
 800a57e:	f7ff ff0b 	bl	800a398 <__multiply>
 800a582:	6020      	str	r0, [r4, #0]
 800a584:	f8c0 9000 	str.w	r9, [r0]
 800a588:	4604      	mov	r4, r0
 800a58a:	e7e4      	b.n	800a556 <__pow5mult+0x6a>
 800a58c:	4638      	mov	r0, r7
 800a58e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a592:	bf00      	nop
 800a594:	0800b660 	.word	0x0800b660
 800a598:	0800b42d 	.word	0x0800b42d
 800a59c:	0800b510 	.word	0x0800b510

0800a5a0 <__lshift>:
 800a5a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5a4:	460c      	mov	r4, r1
 800a5a6:	6849      	ldr	r1, [r1, #4]
 800a5a8:	6923      	ldr	r3, [r4, #16]
 800a5aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a5ae:	68a3      	ldr	r3, [r4, #8]
 800a5b0:	4607      	mov	r7, r0
 800a5b2:	4691      	mov	r9, r2
 800a5b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a5b8:	f108 0601 	add.w	r6, r8, #1
 800a5bc:	42b3      	cmp	r3, r6
 800a5be:	db0b      	blt.n	800a5d8 <__lshift+0x38>
 800a5c0:	4638      	mov	r0, r7
 800a5c2:	f7ff fddb 	bl	800a17c <_Balloc>
 800a5c6:	4605      	mov	r5, r0
 800a5c8:	b948      	cbnz	r0, 800a5de <__lshift+0x3e>
 800a5ca:	4602      	mov	r2, r0
 800a5cc:	4b2a      	ldr	r3, [pc, #168]	; (800a678 <__lshift+0xd8>)
 800a5ce:	482b      	ldr	r0, [pc, #172]	; (800a67c <__lshift+0xdc>)
 800a5d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a5d4:	f000 fc0c 	bl	800adf0 <__assert_func>
 800a5d8:	3101      	adds	r1, #1
 800a5da:	005b      	lsls	r3, r3, #1
 800a5dc:	e7ee      	b.n	800a5bc <__lshift+0x1c>
 800a5de:	2300      	movs	r3, #0
 800a5e0:	f100 0114 	add.w	r1, r0, #20
 800a5e4:	f100 0210 	add.w	r2, r0, #16
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	4553      	cmp	r3, sl
 800a5ec:	db37      	blt.n	800a65e <__lshift+0xbe>
 800a5ee:	6920      	ldr	r0, [r4, #16]
 800a5f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a5f4:	f104 0314 	add.w	r3, r4, #20
 800a5f8:	f019 091f 	ands.w	r9, r9, #31
 800a5fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a600:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a604:	d02f      	beq.n	800a666 <__lshift+0xc6>
 800a606:	f1c9 0e20 	rsb	lr, r9, #32
 800a60a:	468a      	mov	sl, r1
 800a60c:	f04f 0c00 	mov.w	ip, #0
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	fa02 f209 	lsl.w	r2, r2, r9
 800a616:	ea42 020c 	orr.w	r2, r2, ip
 800a61a:	f84a 2b04 	str.w	r2, [sl], #4
 800a61e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a622:	4298      	cmp	r0, r3
 800a624:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a628:	d8f2      	bhi.n	800a610 <__lshift+0x70>
 800a62a:	1b03      	subs	r3, r0, r4
 800a62c:	3b15      	subs	r3, #21
 800a62e:	f023 0303 	bic.w	r3, r3, #3
 800a632:	3304      	adds	r3, #4
 800a634:	f104 0215 	add.w	r2, r4, #21
 800a638:	4290      	cmp	r0, r2
 800a63a:	bf38      	it	cc
 800a63c:	2304      	movcc	r3, #4
 800a63e:	f841 c003 	str.w	ip, [r1, r3]
 800a642:	f1bc 0f00 	cmp.w	ip, #0
 800a646:	d001      	beq.n	800a64c <__lshift+0xac>
 800a648:	f108 0602 	add.w	r6, r8, #2
 800a64c:	3e01      	subs	r6, #1
 800a64e:	4638      	mov	r0, r7
 800a650:	612e      	str	r6, [r5, #16]
 800a652:	4621      	mov	r1, r4
 800a654:	f7ff fdd2 	bl	800a1fc <_Bfree>
 800a658:	4628      	mov	r0, r5
 800a65a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a65e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a662:	3301      	adds	r3, #1
 800a664:	e7c1      	b.n	800a5ea <__lshift+0x4a>
 800a666:	3904      	subs	r1, #4
 800a668:	f853 2b04 	ldr.w	r2, [r3], #4
 800a66c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a670:	4298      	cmp	r0, r3
 800a672:	d8f9      	bhi.n	800a668 <__lshift+0xc8>
 800a674:	e7ea      	b.n	800a64c <__lshift+0xac>
 800a676:	bf00      	nop
 800a678:	0800b49f 	.word	0x0800b49f
 800a67c:	0800b510 	.word	0x0800b510

0800a680 <__mcmp>:
 800a680:	b530      	push	{r4, r5, lr}
 800a682:	6902      	ldr	r2, [r0, #16]
 800a684:	690c      	ldr	r4, [r1, #16]
 800a686:	1b12      	subs	r2, r2, r4
 800a688:	d10e      	bne.n	800a6a8 <__mcmp+0x28>
 800a68a:	f100 0314 	add.w	r3, r0, #20
 800a68e:	3114      	adds	r1, #20
 800a690:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a694:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a698:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a69c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a6a0:	42a5      	cmp	r5, r4
 800a6a2:	d003      	beq.n	800a6ac <__mcmp+0x2c>
 800a6a4:	d305      	bcc.n	800a6b2 <__mcmp+0x32>
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	4610      	mov	r0, r2
 800a6aa:	bd30      	pop	{r4, r5, pc}
 800a6ac:	4283      	cmp	r3, r0
 800a6ae:	d3f3      	bcc.n	800a698 <__mcmp+0x18>
 800a6b0:	e7fa      	b.n	800a6a8 <__mcmp+0x28>
 800a6b2:	f04f 32ff 	mov.w	r2, #4294967295
 800a6b6:	e7f7      	b.n	800a6a8 <__mcmp+0x28>

0800a6b8 <__mdiff>:
 800a6b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6bc:	460c      	mov	r4, r1
 800a6be:	4606      	mov	r6, r0
 800a6c0:	4611      	mov	r1, r2
 800a6c2:	4620      	mov	r0, r4
 800a6c4:	4690      	mov	r8, r2
 800a6c6:	f7ff ffdb 	bl	800a680 <__mcmp>
 800a6ca:	1e05      	subs	r5, r0, #0
 800a6cc:	d110      	bne.n	800a6f0 <__mdiff+0x38>
 800a6ce:	4629      	mov	r1, r5
 800a6d0:	4630      	mov	r0, r6
 800a6d2:	f7ff fd53 	bl	800a17c <_Balloc>
 800a6d6:	b930      	cbnz	r0, 800a6e6 <__mdiff+0x2e>
 800a6d8:	4b3a      	ldr	r3, [pc, #232]	; (800a7c4 <__mdiff+0x10c>)
 800a6da:	4602      	mov	r2, r0
 800a6dc:	f240 2132 	movw	r1, #562	; 0x232
 800a6e0:	4839      	ldr	r0, [pc, #228]	; (800a7c8 <__mdiff+0x110>)
 800a6e2:	f000 fb85 	bl	800adf0 <__assert_func>
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a6ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6f0:	bfa4      	itt	ge
 800a6f2:	4643      	movge	r3, r8
 800a6f4:	46a0      	movge	r8, r4
 800a6f6:	4630      	mov	r0, r6
 800a6f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a6fc:	bfa6      	itte	ge
 800a6fe:	461c      	movge	r4, r3
 800a700:	2500      	movge	r5, #0
 800a702:	2501      	movlt	r5, #1
 800a704:	f7ff fd3a 	bl	800a17c <_Balloc>
 800a708:	b920      	cbnz	r0, 800a714 <__mdiff+0x5c>
 800a70a:	4b2e      	ldr	r3, [pc, #184]	; (800a7c4 <__mdiff+0x10c>)
 800a70c:	4602      	mov	r2, r0
 800a70e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a712:	e7e5      	b.n	800a6e0 <__mdiff+0x28>
 800a714:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a718:	6926      	ldr	r6, [r4, #16]
 800a71a:	60c5      	str	r5, [r0, #12]
 800a71c:	f104 0914 	add.w	r9, r4, #20
 800a720:	f108 0514 	add.w	r5, r8, #20
 800a724:	f100 0e14 	add.w	lr, r0, #20
 800a728:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a72c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a730:	f108 0210 	add.w	r2, r8, #16
 800a734:	46f2      	mov	sl, lr
 800a736:	2100      	movs	r1, #0
 800a738:	f859 3b04 	ldr.w	r3, [r9], #4
 800a73c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a740:	fa1f f883 	uxth.w	r8, r3
 800a744:	fa11 f18b 	uxtah	r1, r1, fp
 800a748:	0c1b      	lsrs	r3, r3, #16
 800a74a:	eba1 0808 	sub.w	r8, r1, r8
 800a74e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a752:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a756:	fa1f f888 	uxth.w	r8, r8
 800a75a:	1419      	asrs	r1, r3, #16
 800a75c:	454e      	cmp	r6, r9
 800a75e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a762:	f84a 3b04 	str.w	r3, [sl], #4
 800a766:	d8e7      	bhi.n	800a738 <__mdiff+0x80>
 800a768:	1b33      	subs	r3, r6, r4
 800a76a:	3b15      	subs	r3, #21
 800a76c:	f023 0303 	bic.w	r3, r3, #3
 800a770:	3304      	adds	r3, #4
 800a772:	3415      	adds	r4, #21
 800a774:	42a6      	cmp	r6, r4
 800a776:	bf38      	it	cc
 800a778:	2304      	movcc	r3, #4
 800a77a:	441d      	add	r5, r3
 800a77c:	4473      	add	r3, lr
 800a77e:	469e      	mov	lr, r3
 800a780:	462e      	mov	r6, r5
 800a782:	4566      	cmp	r6, ip
 800a784:	d30e      	bcc.n	800a7a4 <__mdiff+0xec>
 800a786:	f10c 0203 	add.w	r2, ip, #3
 800a78a:	1b52      	subs	r2, r2, r5
 800a78c:	f022 0203 	bic.w	r2, r2, #3
 800a790:	3d03      	subs	r5, #3
 800a792:	45ac      	cmp	ip, r5
 800a794:	bf38      	it	cc
 800a796:	2200      	movcc	r2, #0
 800a798:	441a      	add	r2, r3
 800a79a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a79e:	b17b      	cbz	r3, 800a7c0 <__mdiff+0x108>
 800a7a0:	6107      	str	r7, [r0, #16]
 800a7a2:	e7a3      	b.n	800a6ec <__mdiff+0x34>
 800a7a4:	f856 8b04 	ldr.w	r8, [r6], #4
 800a7a8:	fa11 f288 	uxtah	r2, r1, r8
 800a7ac:	1414      	asrs	r4, r2, #16
 800a7ae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a7b2:	b292      	uxth	r2, r2
 800a7b4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a7b8:	f84e 2b04 	str.w	r2, [lr], #4
 800a7bc:	1421      	asrs	r1, r4, #16
 800a7be:	e7e0      	b.n	800a782 <__mdiff+0xca>
 800a7c0:	3f01      	subs	r7, #1
 800a7c2:	e7ea      	b.n	800a79a <__mdiff+0xe2>
 800a7c4:	0800b49f 	.word	0x0800b49f
 800a7c8:	0800b510 	.word	0x0800b510

0800a7cc <__d2b>:
 800a7cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a7d0:	4689      	mov	r9, r1
 800a7d2:	2101      	movs	r1, #1
 800a7d4:	ec57 6b10 	vmov	r6, r7, d0
 800a7d8:	4690      	mov	r8, r2
 800a7da:	f7ff fccf 	bl	800a17c <_Balloc>
 800a7de:	4604      	mov	r4, r0
 800a7e0:	b930      	cbnz	r0, 800a7f0 <__d2b+0x24>
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	4b25      	ldr	r3, [pc, #148]	; (800a87c <__d2b+0xb0>)
 800a7e6:	4826      	ldr	r0, [pc, #152]	; (800a880 <__d2b+0xb4>)
 800a7e8:	f240 310a 	movw	r1, #778	; 0x30a
 800a7ec:	f000 fb00 	bl	800adf0 <__assert_func>
 800a7f0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a7f4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a7f8:	bb35      	cbnz	r5, 800a848 <__d2b+0x7c>
 800a7fa:	2e00      	cmp	r6, #0
 800a7fc:	9301      	str	r3, [sp, #4]
 800a7fe:	d028      	beq.n	800a852 <__d2b+0x86>
 800a800:	4668      	mov	r0, sp
 800a802:	9600      	str	r6, [sp, #0]
 800a804:	f7ff fd82 	bl	800a30c <__lo0bits>
 800a808:	9900      	ldr	r1, [sp, #0]
 800a80a:	b300      	cbz	r0, 800a84e <__d2b+0x82>
 800a80c:	9a01      	ldr	r2, [sp, #4]
 800a80e:	f1c0 0320 	rsb	r3, r0, #32
 800a812:	fa02 f303 	lsl.w	r3, r2, r3
 800a816:	430b      	orrs	r3, r1
 800a818:	40c2      	lsrs	r2, r0
 800a81a:	6163      	str	r3, [r4, #20]
 800a81c:	9201      	str	r2, [sp, #4]
 800a81e:	9b01      	ldr	r3, [sp, #4]
 800a820:	61a3      	str	r3, [r4, #24]
 800a822:	2b00      	cmp	r3, #0
 800a824:	bf14      	ite	ne
 800a826:	2202      	movne	r2, #2
 800a828:	2201      	moveq	r2, #1
 800a82a:	6122      	str	r2, [r4, #16]
 800a82c:	b1d5      	cbz	r5, 800a864 <__d2b+0x98>
 800a82e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a832:	4405      	add	r5, r0
 800a834:	f8c9 5000 	str.w	r5, [r9]
 800a838:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a83c:	f8c8 0000 	str.w	r0, [r8]
 800a840:	4620      	mov	r0, r4
 800a842:	b003      	add	sp, #12
 800a844:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a848:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a84c:	e7d5      	b.n	800a7fa <__d2b+0x2e>
 800a84e:	6161      	str	r1, [r4, #20]
 800a850:	e7e5      	b.n	800a81e <__d2b+0x52>
 800a852:	a801      	add	r0, sp, #4
 800a854:	f7ff fd5a 	bl	800a30c <__lo0bits>
 800a858:	9b01      	ldr	r3, [sp, #4]
 800a85a:	6163      	str	r3, [r4, #20]
 800a85c:	2201      	movs	r2, #1
 800a85e:	6122      	str	r2, [r4, #16]
 800a860:	3020      	adds	r0, #32
 800a862:	e7e3      	b.n	800a82c <__d2b+0x60>
 800a864:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a868:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a86c:	f8c9 0000 	str.w	r0, [r9]
 800a870:	6918      	ldr	r0, [r3, #16]
 800a872:	f7ff fd2b 	bl	800a2cc <__hi0bits>
 800a876:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a87a:	e7df      	b.n	800a83c <__d2b+0x70>
 800a87c:	0800b49f 	.word	0x0800b49f
 800a880:	0800b510 	.word	0x0800b510

0800a884 <_calloc_r>:
 800a884:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a886:	fba1 2402 	umull	r2, r4, r1, r2
 800a88a:	b94c      	cbnz	r4, 800a8a0 <_calloc_r+0x1c>
 800a88c:	4611      	mov	r1, r2
 800a88e:	9201      	str	r2, [sp, #4]
 800a890:	f000 f87a 	bl	800a988 <_malloc_r>
 800a894:	9a01      	ldr	r2, [sp, #4]
 800a896:	4605      	mov	r5, r0
 800a898:	b930      	cbnz	r0, 800a8a8 <_calloc_r+0x24>
 800a89a:	4628      	mov	r0, r5
 800a89c:	b003      	add	sp, #12
 800a89e:	bd30      	pop	{r4, r5, pc}
 800a8a0:	220c      	movs	r2, #12
 800a8a2:	6002      	str	r2, [r0, #0]
 800a8a4:	2500      	movs	r5, #0
 800a8a6:	e7f8      	b.n	800a89a <_calloc_r+0x16>
 800a8a8:	4621      	mov	r1, r4
 800a8aa:	f7fd fe17 	bl	80084dc <memset>
 800a8ae:	e7f4      	b.n	800a89a <_calloc_r+0x16>

0800a8b0 <_free_r>:
 800a8b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8b2:	2900      	cmp	r1, #0
 800a8b4:	d044      	beq.n	800a940 <_free_r+0x90>
 800a8b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8ba:	9001      	str	r0, [sp, #4]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	f1a1 0404 	sub.w	r4, r1, #4
 800a8c2:	bfb8      	it	lt
 800a8c4:	18e4      	addlt	r4, r4, r3
 800a8c6:	f000 fb19 	bl	800aefc <__malloc_lock>
 800a8ca:	4a1e      	ldr	r2, [pc, #120]	; (800a944 <_free_r+0x94>)
 800a8cc:	9801      	ldr	r0, [sp, #4]
 800a8ce:	6813      	ldr	r3, [r2, #0]
 800a8d0:	b933      	cbnz	r3, 800a8e0 <_free_r+0x30>
 800a8d2:	6063      	str	r3, [r4, #4]
 800a8d4:	6014      	str	r4, [r2, #0]
 800a8d6:	b003      	add	sp, #12
 800a8d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a8dc:	f000 bb14 	b.w	800af08 <__malloc_unlock>
 800a8e0:	42a3      	cmp	r3, r4
 800a8e2:	d908      	bls.n	800a8f6 <_free_r+0x46>
 800a8e4:	6825      	ldr	r5, [r4, #0]
 800a8e6:	1961      	adds	r1, r4, r5
 800a8e8:	428b      	cmp	r3, r1
 800a8ea:	bf01      	itttt	eq
 800a8ec:	6819      	ldreq	r1, [r3, #0]
 800a8ee:	685b      	ldreq	r3, [r3, #4]
 800a8f0:	1949      	addeq	r1, r1, r5
 800a8f2:	6021      	streq	r1, [r4, #0]
 800a8f4:	e7ed      	b.n	800a8d2 <_free_r+0x22>
 800a8f6:	461a      	mov	r2, r3
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	b10b      	cbz	r3, 800a900 <_free_r+0x50>
 800a8fc:	42a3      	cmp	r3, r4
 800a8fe:	d9fa      	bls.n	800a8f6 <_free_r+0x46>
 800a900:	6811      	ldr	r1, [r2, #0]
 800a902:	1855      	adds	r5, r2, r1
 800a904:	42a5      	cmp	r5, r4
 800a906:	d10b      	bne.n	800a920 <_free_r+0x70>
 800a908:	6824      	ldr	r4, [r4, #0]
 800a90a:	4421      	add	r1, r4
 800a90c:	1854      	adds	r4, r2, r1
 800a90e:	42a3      	cmp	r3, r4
 800a910:	6011      	str	r1, [r2, #0]
 800a912:	d1e0      	bne.n	800a8d6 <_free_r+0x26>
 800a914:	681c      	ldr	r4, [r3, #0]
 800a916:	685b      	ldr	r3, [r3, #4]
 800a918:	6053      	str	r3, [r2, #4]
 800a91a:	4421      	add	r1, r4
 800a91c:	6011      	str	r1, [r2, #0]
 800a91e:	e7da      	b.n	800a8d6 <_free_r+0x26>
 800a920:	d902      	bls.n	800a928 <_free_r+0x78>
 800a922:	230c      	movs	r3, #12
 800a924:	6003      	str	r3, [r0, #0]
 800a926:	e7d6      	b.n	800a8d6 <_free_r+0x26>
 800a928:	6825      	ldr	r5, [r4, #0]
 800a92a:	1961      	adds	r1, r4, r5
 800a92c:	428b      	cmp	r3, r1
 800a92e:	bf04      	itt	eq
 800a930:	6819      	ldreq	r1, [r3, #0]
 800a932:	685b      	ldreq	r3, [r3, #4]
 800a934:	6063      	str	r3, [r4, #4]
 800a936:	bf04      	itt	eq
 800a938:	1949      	addeq	r1, r1, r5
 800a93a:	6021      	streq	r1, [r4, #0]
 800a93c:	6054      	str	r4, [r2, #4]
 800a93e:	e7ca      	b.n	800a8d6 <_free_r+0x26>
 800a940:	b003      	add	sp, #12
 800a942:	bd30      	pop	{r4, r5, pc}
 800a944:	2000050c 	.word	0x2000050c

0800a948 <sbrk_aligned>:
 800a948:	b570      	push	{r4, r5, r6, lr}
 800a94a:	4e0e      	ldr	r6, [pc, #56]	; (800a984 <sbrk_aligned+0x3c>)
 800a94c:	460c      	mov	r4, r1
 800a94e:	6831      	ldr	r1, [r6, #0]
 800a950:	4605      	mov	r5, r0
 800a952:	b911      	cbnz	r1, 800a95a <sbrk_aligned+0x12>
 800a954:	f000 f9e6 	bl	800ad24 <_sbrk_r>
 800a958:	6030      	str	r0, [r6, #0]
 800a95a:	4621      	mov	r1, r4
 800a95c:	4628      	mov	r0, r5
 800a95e:	f000 f9e1 	bl	800ad24 <_sbrk_r>
 800a962:	1c43      	adds	r3, r0, #1
 800a964:	d00a      	beq.n	800a97c <sbrk_aligned+0x34>
 800a966:	1cc4      	adds	r4, r0, #3
 800a968:	f024 0403 	bic.w	r4, r4, #3
 800a96c:	42a0      	cmp	r0, r4
 800a96e:	d007      	beq.n	800a980 <sbrk_aligned+0x38>
 800a970:	1a21      	subs	r1, r4, r0
 800a972:	4628      	mov	r0, r5
 800a974:	f000 f9d6 	bl	800ad24 <_sbrk_r>
 800a978:	3001      	adds	r0, #1
 800a97a:	d101      	bne.n	800a980 <sbrk_aligned+0x38>
 800a97c:	f04f 34ff 	mov.w	r4, #4294967295
 800a980:	4620      	mov	r0, r4
 800a982:	bd70      	pop	{r4, r5, r6, pc}
 800a984:	20000510 	.word	0x20000510

0800a988 <_malloc_r>:
 800a988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a98c:	1ccd      	adds	r5, r1, #3
 800a98e:	f025 0503 	bic.w	r5, r5, #3
 800a992:	3508      	adds	r5, #8
 800a994:	2d0c      	cmp	r5, #12
 800a996:	bf38      	it	cc
 800a998:	250c      	movcc	r5, #12
 800a99a:	2d00      	cmp	r5, #0
 800a99c:	4607      	mov	r7, r0
 800a99e:	db01      	blt.n	800a9a4 <_malloc_r+0x1c>
 800a9a0:	42a9      	cmp	r1, r5
 800a9a2:	d905      	bls.n	800a9b0 <_malloc_r+0x28>
 800a9a4:	230c      	movs	r3, #12
 800a9a6:	603b      	str	r3, [r7, #0]
 800a9a8:	2600      	movs	r6, #0
 800a9aa:	4630      	mov	r0, r6
 800a9ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9b0:	4e2e      	ldr	r6, [pc, #184]	; (800aa6c <_malloc_r+0xe4>)
 800a9b2:	f000 faa3 	bl	800aefc <__malloc_lock>
 800a9b6:	6833      	ldr	r3, [r6, #0]
 800a9b8:	461c      	mov	r4, r3
 800a9ba:	bb34      	cbnz	r4, 800aa0a <_malloc_r+0x82>
 800a9bc:	4629      	mov	r1, r5
 800a9be:	4638      	mov	r0, r7
 800a9c0:	f7ff ffc2 	bl	800a948 <sbrk_aligned>
 800a9c4:	1c43      	adds	r3, r0, #1
 800a9c6:	4604      	mov	r4, r0
 800a9c8:	d14d      	bne.n	800aa66 <_malloc_r+0xde>
 800a9ca:	6834      	ldr	r4, [r6, #0]
 800a9cc:	4626      	mov	r6, r4
 800a9ce:	2e00      	cmp	r6, #0
 800a9d0:	d140      	bne.n	800aa54 <_malloc_r+0xcc>
 800a9d2:	6823      	ldr	r3, [r4, #0]
 800a9d4:	4631      	mov	r1, r6
 800a9d6:	4638      	mov	r0, r7
 800a9d8:	eb04 0803 	add.w	r8, r4, r3
 800a9dc:	f000 f9a2 	bl	800ad24 <_sbrk_r>
 800a9e0:	4580      	cmp	r8, r0
 800a9e2:	d13a      	bne.n	800aa5a <_malloc_r+0xd2>
 800a9e4:	6821      	ldr	r1, [r4, #0]
 800a9e6:	3503      	adds	r5, #3
 800a9e8:	1a6d      	subs	r5, r5, r1
 800a9ea:	f025 0503 	bic.w	r5, r5, #3
 800a9ee:	3508      	adds	r5, #8
 800a9f0:	2d0c      	cmp	r5, #12
 800a9f2:	bf38      	it	cc
 800a9f4:	250c      	movcc	r5, #12
 800a9f6:	4629      	mov	r1, r5
 800a9f8:	4638      	mov	r0, r7
 800a9fa:	f7ff ffa5 	bl	800a948 <sbrk_aligned>
 800a9fe:	3001      	adds	r0, #1
 800aa00:	d02b      	beq.n	800aa5a <_malloc_r+0xd2>
 800aa02:	6823      	ldr	r3, [r4, #0]
 800aa04:	442b      	add	r3, r5
 800aa06:	6023      	str	r3, [r4, #0]
 800aa08:	e00e      	b.n	800aa28 <_malloc_r+0xa0>
 800aa0a:	6822      	ldr	r2, [r4, #0]
 800aa0c:	1b52      	subs	r2, r2, r5
 800aa0e:	d41e      	bmi.n	800aa4e <_malloc_r+0xc6>
 800aa10:	2a0b      	cmp	r2, #11
 800aa12:	d916      	bls.n	800aa42 <_malloc_r+0xba>
 800aa14:	1961      	adds	r1, r4, r5
 800aa16:	42a3      	cmp	r3, r4
 800aa18:	6025      	str	r5, [r4, #0]
 800aa1a:	bf18      	it	ne
 800aa1c:	6059      	strne	r1, [r3, #4]
 800aa1e:	6863      	ldr	r3, [r4, #4]
 800aa20:	bf08      	it	eq
 800aa22:	6031      	streq	r1, [r6, #0]
 800aa24:	5162      	str	r2, [r4, r5]
 800aa26:	604b      	str	r3, [r1, #4]
 800aa28:	4638      	mov	r0, r7
 800aa2a:	f104 060b 	add.w	r6, r4, #11
 800aa2e:	f000 fa6b 	bl	800af08 <__malloc_unlock>
 800aa32:	f026 0607 	bic.w	r6, r6, #7
 800aa36:	1d23      	adds	r3, r4, #4
 800aa38:	1af2      	subs	r2, r6, r3
 800aa3a:	d0b6      	beq.n	800a9aa <_malloc_r+0x22>
 800aa3c:	1b9b      	subs	r3, r3, r6
 800aa3e:	50a3      	str	r3, [r4, r2]
 800aa40:	e7b3      	b.n	800a9aa <_malloc_r+0x22>
 800aa42:	6862      	ldr	r2, [r4, #4]
 800aa44:	42a3      	cmp	r3, r4
 800aa46:	bf0c      	ite	eq
 800aa48:	6032      	streq	r2, [r6, #0]
 800aa4a:	605a      	strne	r2, [r3, #4]
 800aa4c:	e7ec      	b.n	800aa28 <_malloc_r+0xa0>
 800aa4e:	4623      	mov	r3, r4
 800aa50:	6864      	ldr	r4, [r4, #4]
 800aa52:	e7b2      	b.n	800a9ba <_malloc_r+0x32>
 800aa54:	4634      	mov	r4, r6
 800aa56:	6876      	ldr	r6, [r6, #4]
 800aa58:	e7b9      	b.n	800a9ce <_malloc_r+0x46>
 800aa5a:	230c      	movs	r3, #12
 800aa5c:	603b      	str	r3, [r7, #0]
 800aa5e:	4638      	mov	r0, r7
 800aa60:	f000 fa52 	bl	800af08 <__malloc_unlock>
 800aa64:	e7a1      	b.n	800a9aa <_malloc_r+0x22>
 800aa66:	6025      	str	r5, [r4, #0]
 800aa68:	e7de      	b.n	800aa28 <_malloc_r+0xa0>
 800aa6a:	bf00      	nop
 800aa6c:	2000050c 	.word	0x2000050c

0800aa70 <__sfputc_r>:
 800aa70:	6893      	ldr	r3, [r2, #8]
 800aa72:	3b01      	subs	r3, #1
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	b410      	push	{r4}
 800aa78:	6093      	str	r3, [r2, #8]
 800aa7a:	da08      	bge.n	800aa8e <__sfputc_r+0x1e>
 800aa7c:	6994      	ldr	r4, [r2, #24]
 800aa7e:	42a3      	cmp	r3, r4
 800aa80:	db01      	blt.n	800aa86 <__sfputc_r+0x16>
 800aa82:	290a      	cmp	r1, #10
 800aa84:	d103      	bne.n	800aa8e <__sfputc_r+0x1e>
 800aa86:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa8a:	f7fe ba0f 	b.w	8008eac <__swbuf_r>
 800aa8e:	6813      	ldr	r3, [r2, #0]
 800aa90:	1c58      	adds	r0, r3, #1
 800aa92:	6010      	str	r0, [r2, #0]
 800aa94:	7019      	strb	r1, [r3, #0]
 800aa96:	4608      	mov	r0, r1
 800aa98:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa9c:	4770      	bx	lr

0800aa9e <__sfputs_r>:
 800aa9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaa0:	4606      	mov	r6, r0
 800aaa2:	460f      	mov	r7, r1
 800aaa4:	4614      	mov	r4, r2
 800aaa6:	18d5      	adds	r5, r2, r3
 800aaa8:	42ac      	cmp	r4, r5
 800aaaa:	d101      	bne.n	800aab0 <__sfputs_r+0x12>
 800aaac:	2000      	movs	r0, #0
 800aaae:	e007      	b.n	800aac0 <__sfputs_r+0x22>
 800aab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aab4:	463a      	mov	r2, r7
 800aab6:	4630      	mov	r0, r6
 800aab8:	f7ff ffda 	bl	800aa70 <__sfputc_r>
 800aabc:	1c43      	adds	r3, r0, #1
 800aabe:	d1f3      	bne.n	800aaa8 <__sfputs_r+0xa>
 800aac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aac4 <_vfiprintf_r>:
 800aac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aac8:	460d      	mov	r5, r1
 800aaca:	b09d      	sub	sp, #116	; 0x74
 800aacc:	4614      	mov	r4, r2
 800aace:	4698      	mov	r8, r3
 800aad0:	4606      	mov	r6, r0
 800aad2:	b118      	cbz	r0, 800aadc <_vfiprintf_r+0x18>
 800aad4:	6983      	ldr	r3, [r0, #24]
 800aad6:	b90b      	cbnz	r3, 800aadc <_vfiprintf_r+0x18>
 800aad8:	f7ff fa3e 	bl	8009f58 <__sinit>
 800aadc:	4b89      	ldr	r3, [pc, #548]	; (800ad04 <_vfiprintf_r+0x240>)
 800aade:	429d      	cmp	r5, r3
 800aae0:	d11b      	bne.n	800ab1a <_vfiprintf_r+0x56>
 800aae2:	6875      	ldr	r5, [r6, #4]
 800aae4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aae6:	07d9      	lsls	r1, r3, #31
 800aae8:	d405      	bmi.n	800aaf6 <_vfiprintf_r+0x32>
 800aaea:	89ab      	ldrh	r3, [r5, #12]
 800aaec:	059a      	lsls	r2, r3, #22
 800aaee:	d402      	bmi.n	800aaf6 <_vfiprintf_r+0x32>
 800aaf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aaf2:	f7ff fad4 	bl	800a09e <__retarget_lock_acquire_recursive>
 800aaf6:	89ab      	ldrh	r3, [r5, #12]
 800aaf8:	071b      	lsls	r3, r3, #28
 800aafa:	d501      	bpl.n	800ab00 <_vfiprintf_r+0x3c>
 800aafc:	692b      	ldr	r3, [r5, #16]
 800aafe:	b9eb      	cbnz	r3, 800ab3c <_vfiprintf_r+0x78>
 800ab00:	4629      	mov	r1, r5
 800ab02:	4630      	mov	r0, r6
 800ab04:	f7fe fa24 	bl	8008f50 <__swsetup_r>
 800ab08:	b1c0      	cbz	r0, 800ab3c <_vfiprintf_r+0x78>
 800ab0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab0c:	07dc      	lsls	r4, r3, #31
 800ab0e:	d50e      	bpl.n	800ab2e <_vfiprintf_r+0x6a>
 800ab10:	f04f 30ff 	mov.w	r0, #4294967295
 800ab14:	b01d      	add	sp, #116	; 0x74
 800ab16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab1a:	4b7b      	ldr	r3, [pc, #492]	; (800ad08 <_vfiprintf_r+0x244>)
 800ab1c:	429d      	cmp	r5, r3
 800ab1e:	d101      	bne.n	800ab24 <_vfiprintf_r+0x60>
 800ab20:	68b5      	ldr	r5, [r6, #8]
 800ab22:	e7df      	b.n	800aae4 <_vfiprintf_r+0x20>
 800ab24:	4b79      	ldr	r3, [pc, #484]	; (800ad0c <_vfiprintf_r+0x248>)
 800ab26:	429d      	cmp	r5, r3
 800ab28:	bf08      	it	eq
 800ab2a:	68f5      	ldreq	r5, [r6, #12]
 800ab2c:	e7da      	b.n	800aae4 <_vfiprintf_r+0x20>
 800ab2e:	89ab      	ldrh	r3, [r5, #12]
 800ab30:	0598      	lsls	r0, r3, #22
 800ab32:	d4ed      	bmi.n	800ab10 <_vfiprintf_r+0x4c>
 800ab34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab36:	f7ff fab3 	bl	800a0a0 <__retarget_lock_release_recursive>
 800ab3a:	e7e9      	b.n	800ab10 <_vfiprintf_r+0x4c>
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	9309      	str	r3, [sp, #36]	; 0x24
 800ab40:	2320      	movs	r3, #32
 800ab42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab46:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab4a:	2330      	movs	r3, #48	; 0x30
 800ab4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ad10 <_vfiprintf_r+0x24c>
 800ab50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab54:	f04f 0901 	mov.w	r9, #1
 800ab58:	4623      	mov	r3, r4
 800ab5a:	469a      	mov	sl, r3
 800ab5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab60:	b10a      	cbz	r2, 800ab66 <_vfiprintf_r+0xa2>
 800ab62:	2a25      	cmp	r2, #37	; 0x25
 800ab64:	d1f9      	bne.n	800ab5a <_vfiprintf_r+0x96>
 800ab66:	ebba 0b04 	subs.w	fp, sl, r4
 800ab6a:	d00b      	beq.n	800ab84 <_vfiprintf_r+0xc0>
 800ab6c:	465b      	mov	r3, fp
 800ab6e:	4622      	mov	r2, r4
 800ab70:	4629      	mov	r1, r5
 800ab72:	4630      	mov	r0, r6
 800ab74:	f7ff ff93 	bl	800aa9e <__sfputs_r>
 800ab78:	3001      	adds	r0, #1
 800ab7a:	f000 80aa 	beq.w	800acd2 <_vfiprintf_r+0x20e>
 800ab7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab80:	445a      	add	r2, fp
 800ab82:	9209      	str	r2, [sp, #36]	; 0x24
 800ab84:	f89a 3000 	ldrb.w	r3, [sl]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	f000 80a2 	beq.w	800acd2 <_vfiprintf_r+0x20e>
 800ab8e:	2300      	movs	r3, #0
 800ab90:	f04f 32ff 	mov.w	r2, #4294967295
 800ab94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab98:	f10a 0a01 	add.w	sl, sl, #1
 800ab9c:	9304      	str	r3, [sp, #16]
 800ab9e:	9307      	str	r3, [sp, #28]
 800aba0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aba4:	931a      	str	r3, [sp, #104]	; 0x68
 800aba6:	4654      	mov	r4, sl
 800aba8:	2205      	movs	r2, #5
 800abaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abae:	4858      	ldr	r0, [pc, #352]	; (800ad10 <_vfiprintf_r+0x24c>)
 800abb0:	f7f5 faee 	bl	8000190 <memchr>
 800abb4:	9a04      	ldr	r2, [sp, #16]
 800abb6:	b9d8      	cbnz	r0, 800abf0 <_vfiprintf_r+0x12c>
 800abb8:	06d1      	lsls	r1, r2, #27
 800abba:	bf44      	itt	mi
 800abbc:	2320      	movmi	r3, #32
 800abbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abc2:	0713      	lsls	r3, r2, #28
 800abc4:	bf44      	itt	mi
 800abc6:	232b      	movmi	r3, #43	; 0x2b
 800abc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abcc:	f89a 3000 	ldrb.w	r3, [sl]
 800abd0:	2b2a      	cmp	r3, #42	; 0x2a
 800abd2:	d015      	beq.n	800ac00 <_vfiprintf_r+0x13c>
 800abd4:	9a07      	ldr	r2, [sp, #28]
 800abd6:	4654      	mov	r4, sl
 800abd8:	2000      	movs	r0, #0
 800abda:	f04f 0c0a 	mov.w	ip, #10
 800abde:	4621      	mov	r1, r4
 800abe0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abe4:	3b30      	subs	r3, #48	; 0x30
 800abe6:	2b09      	cmp	r3, #9
 800abe8:	d94e      	bls.n	800ac88 <_vfiprintf_r+0x1c4>
 800abea:	b1b0      	cbz	r0, 800ac1a <_vfiprintf_r+0x156>
 800abec:	9207      	str	r2, [sp, #28]
 800abee:	e014      	b.n	800ac1a <_vfiprintf_r+0x156>
 800abf0:	eba0 0308 	sub.w	r3, r0, r8
 800abf4:	fa09 f303 	lsl.w	r3, r9, r3
 800abf8:	4313      	orrs	r3, r2
 800abfa:	9304      	str	r3, [sp, #16]
 800abfc:	46a2      	mov	sl, r4
 800abfe:	e7d2      	b.n	800aba6 <_vfiprintf_r+0xe2>
 800ac00:	9b03      	ldr	r3, [sp, #12]
 800ac02:	1d19      	adds	r1, r3, #4
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	9103      	str	r1, [sp, #12]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	bfbb      	ittet	lt
 800ac0c:	425b      	neglt	r3, r3
 800ac0e:	f042 0202 	orrlt.w	r2, r2, #2
 800ac12:	9307      	strge	r3, [sp, #28]
 800ac14:	9307      	strlt	r3, [sp, #28]
 800ac16:	bfb8      	it	lt
 800ac18:	9204      	strlt	r2, [sp, #16]
 800ac1a:	7823      	ldrb	r3, [r4, #0]
 800ac1c:	2b2e      	cmp	r3, #46	; 0x2e
 800ac1e:	d10c      	bne.n	800ac3a <_vfiprintf_r+0x176>
 800ac20:	7863      	ldrb	r3, [r4, #1]
 800ac22:	2b2a      	cmp	r3, #42	; 0x2a
 800ac24:	d135      	bne.n	800ac92 <_vfiprintf_r+0x1ce>
 800ac26:	9b03      	ldr	r3, [sp, #12]
 800ac28:	1d1a      	adds	r2, r3, #4
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	9203      	str	r2, [sp, #12]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	bfb8      	it	lt
 800ac32:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac36:	3402      	adds	r4, #2
 800ac38:	9305      	str	r3, [sp, #20]
 800ac3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ad20 <_vfiprintf_r+0x25c>
 800ac3e:	7821      	ldrb	r1, [r4, #0]
 800ac40:	2203      	movs	r2, #3
 800ac42:	4650      	mov	r0, sl
 800ac44:	f7f5 faa4 	bl	8000190 <memchr>
 800ac48:	b140      	cbz	r0, 800ac5c <_vfiprintf_r+0x198>
 800ac4a:	2340      	movs	r3, #64	; 0x40
 800ac4c:	eba0 000a 	sub.w	r0, r0, sl
 800ac50:	fa03 f000 	lsl.w	r0, r3, r0
 800ac54:	9b04      	ldr	r3, [sp, #16]
 800ac56:	4303      	orrs	r3, r0
 800ac58:	3401      	adds	r4, #1
 800ac5a:	9304      	str	r3, [sp, #16]
 800ac5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac60:	482c      	ldr	r0, [pc, #176]	; (800ad14 <_vfiprintf_r+0x250>)
 800ac62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac66:	2206      	movs	r2, #6
 800ac68:	f7f5 fa92 	bl	8000190 <memchr>
 800ac6c:	2800      	cmp	r0, #0
 800ac6e:	d03f      	beq.n	800acf0 <_vfiprintf_r+0x22c>
 800ac70:	4b29      	ldr	r3, [pc, #164]	; (800ad18 <_vfiprintf_r+0x254>)
 800ac72:	bb1b      	cbnz	r3, 800acbc <_vfiprintf_r+0x1f8>
 800ac74:	9b03      	ldr	r3, [sp, #12]
 800ac76:	3307      	adds	r3, #7
 800ac78:	f023 0307 	bic.w	r3, r3, #7
 800ac7c:	3308      	adds	r3, #8
 800ac7e:	9303      	str	r3, [sp, #12]
 800ac80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac82:	443b      	add	r3, r7
 800ac84:	9309      	str	r3, [sp, #36]	; 0x24
 800ac86:	e767      	b.n	800ab58 <_vfiprintf_r+0x94>
 800ac88:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac8c:	460c      	mov	r4, r1
 800ac8e:	2001      	movs	r0, #1
 800ac90:	e7a5      	b.n	800abde <_vfiprintf_r+0x11a>
 800ac92:	2300      	movs	r3, #0
 800ac94:	3401      	adds	r4, #1
 800ac96:	9305      	str	r3, [sp, #20]
 800ac98:	4619      	mov	r1, r3
 800ac9a:	f04f 0c0a 	mov.w	ip, #10
 800ac9e:	4620      	mov	r0, r4
 800aca0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aca4:	3a30      	subs	r2, #48	; 0x30
 800aca6:	2a09      	cmp	r2, #9
 800aca8:	d903      	bls.n	800acb2 <_vfiprintf_r+0x1ee>
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d0c5      	beq.n	800ac3a <_vfiprintf_r+0x176>
 800acae:	9105      	str	r1, [sp, #20]
 800acb0:	e7c3      	b.n	800ac3a <_vfiprintf_r+0x176>
 800acb2:	fb0c 2101 	mla	r1, ip, r1, r2
 800acb6:	4604      	mov	r4, r0
 800acb8:	2301      	movs	r3, #1
 800acba:	e7f0      	b.n	800ac9e <_vfiprintf_r+0x1da>
 800acbc:	ab03      	add	r3, sp, #12
 800acbe:	9300      	str	r3, [sp, #0]
 800acc0:	462a      	mov	r2, r5
 800acc2:	4b16      	ldr	r3, [pc, #88]	; (800ad1c <_vfiprintf_r+0x258>)
 800acc4:	a904      	add	r1, sp, #16
 800acc6:	4630      	mov	r0, r6
 800acc8:	f7fd fcb0 	bl	800862c <_printf_float>
 800accc:	4607      	mov	r7, r0
 800acce:	1c78      	adds	r0, r7, #1
 800acd0:	d1d6      	bne.n	800ac80 <_vfiprintf_r+0x1bc>
 800acd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800acd4:	07d9      	lsls	r1, r3, #31
 800acd6:	d405      	bmi.n	800ace4 <_vfiprintf_r+0x220>
 800acd8:	89ab      	ldrh	r3, [r5, #12]
 800acda:	059a      	lsls	r2, r3, #22
 800acdc:	d402      	bmi.n	800ace4 <_vfiprintf_r+0x220>
 800acde:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ace0:	f7ff f9de 	bl	800a0a0 <__retarget_lock_release_recursive>
 800ace4:	89ab      	ldrh	r3, [r5, #12]
 800ace6:	065b      	lsls	r3, r3, #25
 800ace8:	f53f af12 	bmi.w	800ab10 <_vfiprintf_r+0x4c>
 800acec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800acee:	e711      	b.n	800ab14 <_vfiprintf_r+0x50>
 800acf0:	ab03      	add	r3, sp, #12
 800acf2:	9300      	str	r3, [sp, #0]
 800acf4:	462a      	mov	r2, r5
 800acf6:	4b09      	ldr	r3, [pc, #36]	; (800ad1c <_vfiprintf_r+0x258>)
 800acf8:	a904      	add	r1, sp, #16
 800acfa:	4630      	mov	r0, r6
 800acfc:	f7fd ff3a 	bl	8008b74 <_printf_i>
 800ad00:	e7e4      	b.n	800accc <_vfiprintf_r+0x208>
 800ad02:	bf00      	nop
 800ad04:	0800b4d0 	.word	0x0800b4d0
 800ad08:	0800b4f0 	.word	0x0800b4f0
 800ad0c:	0800b4b0 	.word	0x0800b4b0
 800ad10:	0800b66c 	.word	0x0800b66c
 800ad14:	0800b676 	.word	0x0800b676
 800ad18:	0800862d 	.word	0x0800862d
 800ad1c:	0800aa9f 	.word	0x0800aa9f
 800ad20:	0800b672 	.word	0x0800b672

0800ad24 <_sbrk_r>:
 800ad24:	b538      	push	{r3, r4, r5, lr}
 800ad26:	4d06      	ldr	r5, [pc, #24]	; (800ad40 <_sbrk_r+0x1c>)
 800ad28:	2300      	movs	r3, #0
 800ad2a:	4604      	mov	r4, r0
 800ad2c:	4608      	mov	r0, r1
 800ad2e:	602b      	str	r3, [r5, #0]
 800ad30:	f7f7 fce8 	bl	8002704 <_sbrk>
 800ad34:	1c43      	adds	r3, r0, #1
 800ad36:	d102      	bne.n	800ad3e <_sbrk_r+0x1a>
 800ad38:	682b      	ldr	r3, [r5, #0]
 800ad3a:	b103      	cbz	r3, 800ad3e <_sbrk_r+0x1a>
 800ad3c:	6023      	str	r3, [r4, #0]
 800ad3e:	bd38      	pop	{r3, r4, r5, pc}
 800ad40:	20000514 	.word	0x20000514

0800ad44 <__sread>:
 800ad44:	b510      	push	{r4, lr}
 800ad46:	460c      	mov	r4, r1
 800ad48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad4c:	f000 f8e2 	bl	800af14 <_read_r>
 800ad50:	2800      	cmp	r0, #0
 800ad52:	bfab      	itete	ge
 800ad54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ad56:	89a3      	ldrhlt	r3, [r4, #12]
 800ad58:	181b      	addge	r3, r3, r0
 800ad5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ad5e:	bfac      	ite	ge
 800ad60:	6563      	strge	r3, [r4, #84]	; 0x54
 800ad62:	81a3      	strhlt	r3, [r4, #12]
 800ad64:	bd10      	pop	{r4, pc}

0800ad66 <__swrite>:
 800ad66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad6a:	461f      	mov	r7, r3
 800ad6c:	898b      	ldrh	r3, [r1, #12]
 800ad6e:	05db      	lsls	r3, r3, #23
 800ad70:	4605      	mov	r5, r0
 800ad72:	460c      	mov	r4, r1
 800ad74:	4616      	mov	r6, r2
 800ad76:	d505      	bpl.n	800ad84 <__swrite+0x1e>
 800ad78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad7c:	2302      	movs	r3, #2
 800ad7e:	2200      	movs	r2, #0
 800ad80:	f000 f898 	bl	800aeb4 <_lseek_r>
 800ad84:	89a3      	ldrh	r3, [r4, #12]
 800ad86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad8e:	81a3      	strh	r3, [r4, #12]
 800ad90:	4632      	mov	r2, r6
 800ad92:	463b      	mov	r3, r7
 800ad94:	4628      	mov	r0, r5
 800ad96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad9a:	f000 b817 	b.w	800adcc <_write_r>

0800ad9e <__sseek>:
 800ad9e:	b510      	push	{r4, lr}
 800ada0:	460c      	mov	r4, r1
 800ada2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ada6:	f000 f885 	bl	800aeb4 <_lseek_r>
 800adaa:	1c43      	adds	r3, r0, #1
 800adac:	89a3      	ldrh	r3, [r4, #12]
 800adae:	bf15      	itete	ne
 800adb0:	6560      	strne	r0, [r4, #84]	; 0x54
 800adb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800adb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800adba:	81a3      	strheq	r3, [r4, #12]
 800adbc:	bf18      	it	ne
 800adbe:	81a3      	strhne	r3, [r4, #12]
 800adc0:	bd10      	pop	{r4, pc}

0800adc2 <__sclose>:
 800adc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adc6:	f000 b831 	b.w	800ae2c <_close_r>
	...

0800adcc <_write_r>:
 800adcc:	b538      	push	{r3, r4, r5, lr}
 800adce:	4d07      	ldr	r5, [pc, #28]	; (800adec <_write_r+0x20>)
 800add0:	4604      	mov	r4, r0
 800add2:	4608      	mov	r0, r1
 800add4:	4611      	mov	r1, r2
 800add6:	2200      	movs	r2, #0
 800add8:	602a      	str	r2, [r5, #0]
 800adda:	461a      	mov	r2, r3
 800addc:	f7f7 fc41 	bl	8002662 <_write>
 800ade0:	1c43      	adds	r3, r0, #1
 800ade2:	d102      	bne.n	800adea <_write_r+0x1e>
 800ade4:	682b      	ldr	r3, [r5, #0]
 800ade6:	b103      	cbz	r3, 800adea <_write_r+0x1e>
 800ade8:	6023      	str	r3, [r4, #0]
 800adea:	bd38      	pop	{r3, r4, r5, pc}
 800adec:	20000514 	.word	0x20000514

0800adf0 <__assert_func>:
 800adf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800adf2:	4614      	mov	r4, r2
 800adf4:	461a      	mov	r2, r3
 800adf6:	4b09      	ldr	r3, [pc, #36]	; (800ae1c <__assert_func+0x2c>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	4605      	mov	r5, r0
 800adfc:	68d8      	ldr	r0, [r3, #12]
 800adfe:	b14c      	cbz	r4, 800ae14 <__assert_func+0x24>
 800ae00:	4b07      	ldr	r3, [pc, #28]	; (800ae20 <__assert_func+0x30>)
 800ae02:	9100      	str	r1, [sp, #0]
 800ae04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae08:	4906      	ldr	r1, [pc, #24]	; (800ae24 <__assert_func+0x34>)
 800ae0a:	462b      	mov	r3, r5
 800ae0c:	f000 f81e 	bl	800ae4c <fiprintf>
 800ae10:	f000 f89f 	bl	800af52 <abort>
 800ae14:	4b04      	ldr	r3, [pc, #16]	; (800ae28 <__assert_func+0x38>)
 800ae16:	461c      	mov	r4, r3
 800ae18:	e7f3      	b.n	800ae02 <__assert_func+0x12>
 800ae1a:	bf00      	nop
 800ae1c:	20000024 	.word	0x20000024
 800ae20:	0800b67d 	.word	0x0800b67d
 800ae24:	0800b68a 	.word	0x0800b68a
 800ae28:	0800b6b8 	.word	0x0800b6b8

0800ae2c <_close_r>:
 800ae2c:	b538      	push	{r3, r4, r5, lr}
 800ae2e:	4d06      	ldr	r5, [pc, #24]	; (800ae48 <_close_r+0x1c>)
 800ae30:	2300      	movs	r3, #0
 800ae32:	4604      	mov	r4, r0
 800ae34:	4608      	mov	r0, r1
 800ae36:	602b      	str	r3, [r5, #0]
 800ae38:	f7f7 fc2f 	bl	800269a <_close>
 800ae3c:	1c43      	adds	r3, r0, #1
 800ae3e:	d102      	bne.n	800ae46 <_close_r+0x1a>
 800ae40:	682b      	ldr	r3, [r5, #0]
 800ae42:	b103      	cbz	r3, 800ae46 <_close_r+0x1a>
 800ae44:	6023      	str	r3, [r4, #0]
 800ae46:	bd38      	pop	{r3, r4, r5, pc}
 800ae48:	20000514 	.word	0x20000514

0800ae4c <fiprintf>:
 800ae4c:	b40e      	push	{r1, r2, r3}
 800ae4e:	b503      	push	{r0, r1, lr}
 800ae50:	4601      	mov	r1, r0
 800ae52:	ab03      	add	r3, sp, #12
 800ae54:	4805      	ldr	r0, [pc, #20]	; (800ae6c <fiprintf+0x20>)
 800ae56:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae5a:	6800      	ldr	r0, [r0, #0]
 800ae5c:	9301      	str	r3, [sp, #4]
 800ae5e:	f7ff fe31 	bl	800aac4 <_vfiprintf_r>
 800ae62:	b002      	add	sp, #8
 800ae64:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae68:	b003      	add	sp, #12
 800ae6a:	4770      	bx	lr
 800ae6c:	20000024 	.word	0x20000024

0800ae70 <_fstat_r>:
 800ae70:	b538      	push	{r3, r4, r5, lr}
 800ae72:	4d07      	ldr	r5, [pc, #28]	; (800ae90 <_fstat_r+0x20>)
 800ae74:	2300      	movs	r3, #0
 800ae76:	4604      	mov	r4, r0
 800ae78:	4608      	mov	r0, r1
 800ae7a:	4611      	mov	r1, r2
 800ae7c:	602b      	str	r3, [r5, #0]
 800ae7e:	f7f7 fc18 	bl	80026b2 <_fstat>
 800ae82:	1c43      	adds	r3, r0, #1
 800ae84:	d102      	bne.n	800ae8c <_fstat_r+0x1c>
 800ae86:	682b      	ldr	r3, [r5, #0]
 800ae88:	b103      	cbz	r3, 800ae8c <_fstat_r+0x1c>
 800ae8a:	6023      	str	r3, [r4, #0]
 800ae8c:	bd38      	pop	{r3, r4, r5, pc}
 800ae8e:	bf00      	nop
 800ae90:	20000514 	.word	0x20000514

0800ae94 <_isatty_r>:
 800ae94:	b538      	push	{r3, r4, r5, lr}
 800ae96:	4d06      	ldr	r5, [pc, #24]	; (800aeb0 <_isatty_r+0x1c>)
 800ae98:	2300      	movs	r3, #0
 800ae9a:	4604      	mov	r4, r0
 800ae9c:	4608      	mov	r0, r1
 800ae9e:	602b      	str	r3, [r5, #0]
 800aea0:	f7f7 fc17 	bl	80026d2 <_isatty>
 800aea4:	1c43      	adds	r3, r0, #1
 800aea6:	d102      	bne.n	800aeae <_isatty_r+0x1a>
 800aea8:	682b      	ldr	r3, [r5, #0]
 800aeaa:	b103      	cbz	r3, 800aeae <_isatty_r+0x1a>
 800aeac:	6023      	str	r3, [r4, #0]
 800aeae:	bd38      	pop	{r3, r4, r5, pc}
 800aeb0:	20000514 	.word	0x20000514

0800aeb4 <_lseek_r>:
 800aeb4:	b538      	push	{r3, r4, r5, lr}
 800aeb6:	4d07      	ldr	r5, [pc, #28]	; (800aed4 <_lseek_r+0x20>)
 800aeb8:	4604      	mov	r4, r0
 800aeba:	4608      	mov	r0, r1
 800aebc:	4611      	mov	r1, r2
 800aebe:	2200      	movs	r2, #0
 800aec0:	602a      	str	r2, [r5, #0]
 800aec2:	461a      	mov	r2, r3
 800aec4:	f7f7 fc10 	bl	80026e8 <_lseek>
 800aec8:	1c43      	adds	r3, r0, #1
 800aeca:	d102      	bne.n	800aed2 <_lseek_r+0x1e>
 800aecc:	682b      	ldr	r3, [r5, #0]
 800aece:	b103      	cbz	r3, 800aed2 <_lseek_r+0x1e>
 800aed0:	6023      	str	r3, [r4, #0]
 800aed2:	bd38      	pop	{r3, r4, r5, pc}
 800aed4:	20000514 	.word	0x20000514

0800aed8 <__ascii_mbtowc>:
 800aed8:	b082      	sub	sp, #8
 800aeda:	b901      	cbnz	r1, 800aede <__ascii_mbtowc+0x6>
 800aedc:	a901      	add	r1, sp, #4
 800aede:	b142      	cbz	r2, 800aef2 <__ascii_mbtowc+0x1a>
 800aee0:	b14b      	cbz	r3, 800aef6 <__ascii_mbtowc+0x1e>
 800aee2:	7813      	ldrb	r3, [r2, #0]
 800aee4:	600b      	str	r3, [r1, #0]
 800aee6:	7812      	ldrb	r2, [r2, #0]
 800aee8:	1e10      	subs	r0, r2, #0
 800aeea:	bf18      	it	ne
 800aeec:	2001      	movne	r0, #1
 800aeee:	b002      	add	sp, #8
 800aef0:	4770      	bx	lr
 800aef2:	4610      	mov	r0, r2
 800aef4:	e7fb      	b.n	800aeee <__ascii_mbtowc+0x16>
 800aef6:	f06f 0001 	mvn.w	r0, #1
 800aefa:	e7f8      	b.n	800aeee <__ascii_mbtowc+0x16>

0800aefc <__malloc_lock>:
 800aefc:	4801      	ldr	r0, [pc, #4]	; (800af04 <__malloc_lock+0x8>)
 800aefe:	f7ff b8ce 	b.w	800a09e <__retarget_lock_acquire_recursive>
 800af02:	bf00      	nop
 800af04:	20000508 	.word	0x20000508

0800af08 <__malloc_unlock>:
 800af08:	4801      	ldr	r0, [pc, #4]	; (800af10 <__malloc_unlock+0x8>)
 800af0a:	f7ff b8c9 	b.w	800a0a0 <__retarget_lock_release_recursive>
 800af0e:	bf00      	nop
 800af10:	20000508 	.word	0x20000508

0800af14 <_read_r>:
 800af14:	b538      	push	{r3, r4, r5, lr}
 800af16:	4d07      	ldr	r5, [pc, #28]	; (800af34 <_read_r+0x20>)
 800af18:	4604      	mov	r4, r0
 800af1a:	4608      	mov	r0, r1
 800af1c:	4611      	mov	r1, r2
 800af1e:	2200      	movs	r2, #0
 800af20:	602a      	str	r2, [r5, #0]
 800af22:	461a      	mov	r2, r3
 800af24:	f7f7 fb80 	bl	8002628 <_read>
 800af28:	1c43      	adds	r3, r0, #1
 800af2a:	d102      	bne.n	800af32 <_read_r+0x1e>
 800af2c:	682b      	ldr	r3, [r5, #0]
 800af2e:	b103      	cbz	r3, 800af32 <_read_r+0x1e>
 800af30:	6023      	str	r3, [r4, #0]
 800af32:	bd38      	pop	{r3, r4, r5, pc}
 800af34:	20000514 	.word	0x20000514

0800af38 <__ascii_wctomb>:
 800af38:	b149      	cbz	r1, 800af4e <__ascii_wctomb+0x16>
 800af3a:	2aff      	cmp	r2, #255	; 0xff
 800af3c:	bf85      	ittet	hi
 800af3e:	238a      	movhi	r3, #138	; 0x8a
 800af40:	6003      	strhi	r3, [r0, #0]
 800af42:	700a      	strbls	r2, [r1, #0]
 800af44:	f04f 30ff 	movhi.w	r0, #4294967295
 800af48:	bf98      	it	ls
 800af4a:	2001      	movls	r0, #1
 800af4c:	4770      	bx	lr
 800af4e:	4608      	mov	r0, r1
 800af50:	4770      	bx	lr

0800af52 <abort>:
 800af52:	b508      	push	{r3, lr}
 800af54:	2006      	movs	r0, #6
 800af56:	f000 f82b 	bl	800afb0 <raise>
 800af5a:	2001      	movs	r0, #1
 800af5c:	f7f7 fb5a 	bl	8002614 <_exit>

0800af60 <_raise_r>:
 800af60:	291f      	cmp	r1, #31
 800af62:	b538      	push	{r3, r4, r5, lr}
 800af64:	4604      	mov	r4, r0
 800af66:	460d      	mov	r5, r1
 800af68:	d904      	bls.n	800af74 <_raise_r+0x14>
 800af6a:	2316      	movs	r3, #22
 800af6c:	6003      	str	r3, [r0, #0]
 800af6e:	f04f 30ff 	mov.w	r0, #4294967295
 800af72:	bd38      	pop	{r3, r4, r5, pc}
 800af74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800af76:	b112      	cbz	r2, 800af7e <_raise_r+0x1e>
 800af78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af7c:	b94b      	cbnz	r3, 800af92 <_raise_r+0x32>
 800af7e:	4620      	mov	r0, r4
 800af80:	f000 f830 	bl	800afe4 <_getpid_r>
 800af84:	462a      	mov	r2, r5
 800af86:	4601      	mov	r1, r0
 800af88:	4620      	mov	r0, r4
 800af8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af8e:	f000 b817 	b.w	800afc0 <_kill_r>
 800af92:	2b01      	cmp	r3, #1
 800af94:	d00a      	beq.n	800afac <_raise_r+0x4c>
 800af96:	1c59      	adds	r1, r3, #1
 800af98:	d103      	bne.n	800afa2 <_raise_r+0x42>
 800af9a:	2316      	movs	r3, #22
 800af9c:	6003      	str	r3, [r0, #0]
 800af9e:	2001      	movs	r0, #1
 800afa0:	e7e7      	b.n	800af72 <_raise_r+0x12>
 800afa2:	2400      	movs	r4, #0
 800afa4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800afa8:	4628      	mov	r0, r5
 800afaa:	4798      	blx	r3
 800afac:	2000      	movs	r0, #0
 800afae:	e7e0      	b.n	800af72 <_raise_r+0x12>

0800afb0 <raise>:
 800afb0:	4b02      	ldr	r3, [pc, #8]	; (800afbc <raise+0xc>)
 800afb2:	4601      	mov	r1, r0
 800afb4:	6818      	ldr	r0, [r3, #0]
 800afb6:	f7ff bfd3 	b.w	800af60 <_raise_r>
 800afba:	bf00      	nop
 800afbc:	20000024 	.word	0x20000024

0800afc0 <_kill_r>:
 800afc0:	b538      	push	{r3, r4, r5, lr}
 800afc2:	4d07      	ldr	r5, [pc, #28]	; (800afe0 <_kill_r+0x20>)
 800afc4:	2300      	movs	r3, #0
 800afc6:	4604      	mov	r4, r0
 800afc8:	4608      	mov	r0, r1
 800afca:	4611      	mov	r1, r2
 800afcc:	602b      	str	r3, [r5, #0]
 800afce:	f7f7 fb11 	bl	80025f4 <_kill>
 800afd2:	1c43      	adds	r3, r0, #1
 800afd4:	d102      	bne.n	800afdc <_kill_r+0x1c>
 800afd6:	682b      	ldr	r3, [r5, #0]
 800afd8:	b103      	cbz	r3, 800afdc <_kill_r+0x1c>
 800afda:	6023      	str	r3, [r4, #0]
 800afdc:	bd38      	pop	{r3, r4, r5, pc}
 800afde:	bf00      	nop
 800afe0:	20000514 	.word	0x20000514

0800afe4 <_getpid_r>:
 800afe4:	f7f7 bafe 	b.w	80025e4 <_getpid>

0800afe8 <_init>:
 800afe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afea:	bf00      	nop
 800afec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afee:	bc08      	pop	{r3}
 800aff0:	469e      	mov	lr, r3
 800aff2:	4770      	bx	lr

0800aff4 <_fini>:
 800aff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aff6:	bf00      	nop
 800aff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800affa:	bc08      	pop	{r3}
 800affc:	469e      	mov	lr, r3
 800affe:	4770      	bx	lr
