
BLE_Beacon_Cadence.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcb0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c4  0800bdf0  0800bdf0  0001bdf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c4b4  0800c4b4  0001c4b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c4bc  0800c4bc  0001c4bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c4c0  0800c4c0  0001c4c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f0  20000004  0800c4c4  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  200001f4  0800c6b4  000201f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000035  20000290  0800c74d  00020290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  200002c8  0800c782  000202c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000330  200002dc  0800c793  000202dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000060c  0800c793  0002060c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202d9  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 15 MB_MEM2       00000883  200301e4  200301e4  00030000  2**2
                  ALLOC
 16 .debug_info   0003225f  00000000  00000000  00020309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00006848  00000000  00000000  00052568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002ac0  00000000  00000000  00058db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 000027e8  00000000  00000000  0005b870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00029286  00000000  00000000  0005e058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   000301b1  00000000  00000000  000872de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000d7b5a  00000000  00000000  000b748f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000050  00000000  00000000  0018efe9  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000c400  00000000  00000000  0018f03c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002dc 	.word	0x200002dc
 800015c:	00000000 	.word	0x00000000
 8000160:	0800bdd8 	.word	0x0800bdd8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002e0 	.word	0x200002e0
 800017c:	0800bdd8 	.word	0x0800bdd8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <LIS2DW12_Initialization>:
   @Description   Custom Parameters for Sensor
   @Parameter     I2C_HandleTypeDef ->  HAL_I2C Handle
   @Return value  void
 */
void LIS2DW12_Initialization               (I2C_HandleTypeDef i2c)
{
 8000efc:	b084      	sub	sp, #16
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b086      	sub	sp, #24
 8000f02:	af02      	add	r7, sp, #8
 8000f04:	f107 0c18 	add.w	ip, r7, #24
 8000f08:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t buf[5];

	// Control Register 1 //
	buf[0]  = LIS2DW12_CTRL1;
 8000f0c:	2320      	movs	r3, #32
 8000f0e:	703b      	strb	r3, [r7, #0]
	uint8_t ODR = 0b0010;								// Low Power Mode 12.5Hz
 8000f10:	2302      	movs	r3, #2
 8000f12:	73fb      	strb	r3, [r7, #15]
	uint8_t MODE = 0b00;								// Low-Power Mode (12/14bit reso)
 8000f14:	2300      	movs	r3, #0
 8000f16:	73bb      	strb	r3, [r7, #14]
	uint8_t LP_MODE = 0b11;								// Low-Power Mode 4 (14-bit reso)
 8000f18:	2303      	movs	r3, #3
 8000f1a:	737b      	strb	r3, [r7, #13]
	buf[1]  = (ODR << 4) | (MODE << 2) | LP_MODE;
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
 8000f1e:	011b      	lsls	r3, r3, #4
 8000f20:	b25a      	sxtb	r2, r3
 8000f22:	7bbb      	ldrb	r3, [r7, #14]
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	b25b      	sxtb	r3, r3
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	b25a      	sxtb	r2, r3
 8000f2c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	b25b      	sxtb	r3, r3
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	707b      	strb	r3, [r7, #1]
	HAL_I2C_Master_Transmit(&i2c,LIS2DW12_DeviceID,buf,2,100);
 8000f38:	4b3d      	ldr	r3, [pc, #244]	; (8001030 <LIS2DW12_Initialization+0x134>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	b299      	uxth	r1, r3
 8000f3e:	463a      	mov	r2, r7
 8000f40:	2364      	movs	r3, #100	; 0x64
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	2302      	movs	r3, #2
 8000f46:	f107 0018 	add.w	r0, r7, #24
 8000f4a:	f002 fba3 	bl	8003694 <HAL_I2C_Master_Transmit>

	// Control Register 6 //
	buf[0] = LIS2DW12_CTRL6;
 8000f4e:	2325      	movs	r3, #37	; 0x25
 8000f50:	703b      	strb	r3, [r7, #0]
    uint8_t BW_FILT = 0b01;								// ODR/4
 8000f52:	2301      	movs	r3, #1
 8000f54:	733b      	strb	r3, [r7, #12]
    uint8_t FS = 0b01;									// +-4g
 8000f56:	2301      	movs	r3, #1
 8000f58:	72fb      	strb	r3, [r7, #11]
    uint8_t FDS = 0b0;									// Low Pass Filter
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	72bb      	strb	r3, [r7, #10]
	uint8_t LOW_NOISE = 0b1;							// Enable Low Noise Configuration
 8000f5e:	2301      	movs	r3, #1
 8000f60:	727b      	strb	r3, [r7, #9]
	buf[1] = (BW_FILT << 6) | (FS << 4) | (FDS << 3) | (LOW_NOISE << 2);
 8000f62:	7b3b      	ldrb	r3, [r7, #12]
 8000f64:	019b      	lsls	r3, r3, #6
 8000f66:	b25a      	sxtb	r2, r3
 8000f68:	7afb      	ldrb	r3, [r7, #11]
 8000f6a:	011b      	lsls	r3, r3, #4
 8000f6c:	b25b      	sxtb	r3, r3
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	b25a      	sxtb	r2, r3
 8000f72:	7abb      	ldrb	r3, [r7, #10]
 8000f74:	00db      	lsls	r3, r3, #3
 8000f76:	b25b      	sxtb	r3, r3
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	b25a      	sxtb	r2, r3
 8000f7c:	7a7b      	ldrb	r3, [r7, #9]
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	b25b      	sxtb	r3, r3
 8000f82:	4313      	orrs	r3, r2
 8000f84:	b25b      	sxtb	r3, r3
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	707b      	strb	r3, [r7, #1]
	HAL_I2C_Master_Transmit(&i2c,LIS2DW12_DeviceID,buf,2,100);
 8000f8a:	4b29      	ldr	r3, [pc, #164]	; (8001030 <LIS2DW12_Initialization+0x134>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	b299      	uxth	r1, r3
 8000f90:	463a      	mov	r2, r7
 8000f92:	2364      	movs	r3, #100	; 0x64
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	2302      	movs	r3, #2
 8000f98:	f107 0018 	add.w	r0, r7, #24
 8000f9c:	f002 fb7a 	bl	8003694 <HAL_I2C_Master_Transmit>

    // FIFO CTRL //
    buf[0] = LIS2DW12_FIFO_CTRL;
 8000fa0:	232e      	movs	r3, #46	; 0x2e
 8000fa2:	703b      	strb	r3, [r7, #0]
    uint8_t FMode = 0b001;								// Set to FIFO mode: Stop collecting data when FIFO is full
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	723b      	strb	r3, [r7, #8]
    uint8_t FTH = 0b11000;								// FIFO threshold (0-31) -> set to be 24 -> to get 1s
 8000fa8:	2318      	movs	r3, #24
 8000faa:	71fb      	strb	r3, [r7, #7]
    buf[1] = (FMode << 5) | FTH;
 8000fac:	7a3b      	ldrb	r3, [r7, #8]
 8000fae:	015b      	lsls	r3, r3, #5
 8000fb0:	b25a      	sxtb	r2, r3
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	b25b      	sxtb	r3, r3
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	707b      	strb	r3, [r7, #1]
    HAL_I2C_Master_Transmit(&i2c,LIS2DW12_DeviceID,buf,2,100);
 8000fbe:	4b1c      	ldr	r3, [pc, #112]	; (8001030 <LIS2DW12_Initialization+0x134>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	b299      	uxth	r1, r3
 8000fc4:	463a      	mov	r2, r7
 8000fc6:	2364      	movs	r3, #100	; 0x64
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	2302      	movs	r3, #2
 8000fcc:	f107 0018 	add.w	r0, r7, #24
 8000fd0:	f002 fb60 	bl	8003694 <HAL_I2C_Master_Transmit>

    // Control Register 4 INT1_PAD_CTRL//
    buf[0] = LIS2DW12_CTRL4_INT1_PAD_CTRL;
 8000fd4:	2323      	movs	r3, #35	; 0x23
 8000fd6:	703b      	strb	r3, [r7, #0]
    uint8_t INT1_FTH = 0b1;								// FIFO threshold interrupt routed to INT1
 8000fd8:	2301      	movs	r3, #1
 8000fda:	71bb      	strb	r3, [r7, #6]
    buf[1] = (INT1_FTH << 1);
 8000fdc:	79bb      	ldrb	r3, [r7, #6]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	707b      	strb	r3, [r7, #1]
    HAL_I2C_Master_Transmit(&i2c,LIS2DW12_DeviceID,buf,2,100);
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <LIS2DW12_Initialization+0x134>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	b299      	uxth	r1, r3
 8000fea:	463a      	mov	r2, r7
 8000fec:	2364      	movs	r3, #100	; 0x64
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	f107 0018 	add.w	r0, r7, #24
 8000ff6:	f002 fb4d 	bl	8003694 <HAL_I2C_Master_Transmit>

    // Control Register 7 //
    buf[0] = LIS2DW12_CTRL7;
 8000ffa:	233f      	movs	r3, #63	; 0x3f
 8000ffc:	703b      	strb	r3, [r7, #0]
    uint8_t INT_EN = 0b1;								// Enable interrupts
 8000ffe:	2301      	movs	r3, #1
 8001000:	717b      	strb	r3, [r7, #5]
    buf[1] = (INT_EN << 5);
 8001002:	797b      	ldrb	r3, [r7, #5]
 8001004:	015b      	lsls	r3, r3, #5
 8001006:	b2db      	uxtb	r3, r3
 8001008:	707b      	strb	r3, [r7, #1]
    HAL_I2C_Master_Transmit(&i2c,LIS2DW12_DeviceID,buf,2,100);
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <LIS2DW12_Initialization+0x134>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	b299      	uxth	r1, r3
 8001010:	463a      	mov	r2, r7
 8001012:	2364      	movs	r3, #100	; 0x64
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	2302      	movs	r3, #2
 8001018:	f107 0018 	add.w	r0, r7, #24
 800101c:	f002 fb3a 	bl	8003694 <HAL_I2C_Master_Transmit>

	return;
 8001020:	bf00      	nop

}
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800102a:	b004      	add	sp, #16
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	20000004 	.word	0x20000004
 8001034:	00000000 	.word	0x00000000

08001038 <LIS2DW12_ReadZ>:
	float acceleration = ((value / 4) * LIS2DW12_scale_4g) * 9.806;

	return acceleration;
}

float LIS2DW12_ReadZ					    (I2C_HandleTypeDef i2c){
 8001038:	b084      	sub	sp, #16
 800103a:	b580      	push	{r7, lr}
 800103c:	b086      	sub	sp, #24
 800103e:	af02      	add	r7, sp, #8
 8001040:	f107 0c18 	add.w	ip, r7, #24
 8001044:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	uint8_t buf;
	uint8_t high = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	71bb      	strb	r3, [r7, #6]
	uint8_t low = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	717b      	strb	r3, [r7, #5]

	buf = LIS2DW12_OUT_Z_LOW;
 8001050:	232c      	movs	r3, #44	; 0x2c
 8001052:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&i2c,LIS2DW12_DeviceID,&buf,1,100);
 8001054:	4b32      	ldr	r3, [pc, #200]	; (8001120 <LIS2DW12_ReadZ+0xe8>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	b299      	uxth	r1, r3
 800105a:	1dfa      	adds	r2, r7, #7
 800105c:	2364      	movs	r3, #100	; 0x64
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	2301      	movs	r3, #1
 8001062:	f107 0018 	add.w	r0, r7, #24
 8001066:	f002 fb15 	bl	8003694 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2c,LIS2DW12_DeviceID,&low,1,100);
 800106a:	4b2d      	ldr	r3, [pc, #180]	; (8001120 <LIS2DW12_ReadZ+0xe8>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	b299      	uxth	r1, r3
 8001070:	1d7a      	adds	r2, r7, #5
 8001072:	2364      	movs	r3, #100	; 0x64
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2301      	movs	r3, #1
 8001078:	f107 0018 	add.w	r0, r7, #24
 800107c:	f002 fbfe 	bl	800387c <HAL_I2C_Master_Receive>

	buf = LIS2DW12_OUT_Z_HIGH;
 8001080:	232d      	movs	r3, #45	; 0x2d
 8001082:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&i2c,LIS2DW12_DeviceID,&buf,1,100);
 8001084:	4b26      	ldr	r3, [pc, #152]	; (8001120 <LIS2DW12_ReadZ+0xe8>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	b299      	uxth	r1, r3
 800108a:	1dfa      	adds	r2, r7, #7
 800108c:	2364      	movs	r3, #100	; 0x64
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2301      	movs	r3, #1
 8001092:	f107 0018 	add.w	r0, r7, #24
 8001096:	f002 fafd 	bl	8003694 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2c,LIS2DW12_DeviceID,&high,1,100);
 800109a:	4b21      	ldr	r3, [pc, #132]	; (8001120 <LIS2DW12_ReadZ+0xe8>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	b299      	uxth	r1, r3
 80010a0:	1dba      	adds	r2, r7, #6
 80010a2:	2364      	movs	r3, #100	; 0x64
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	2301      	movs	r3, #1
 80010a8:	f107 0018 	add.w	r0, r7, #24
 80010ac:	f002 fbe6 	bl	800387c <HAL_I2C_Master_Receive>

	int16_t value = (int16_t) (high << 8) | low;
 80010b0:	79bb      	ldrb	r3, [r7, #6]
 80010b2:	021b      	lsls	r3, r3, #8
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	797b      	ldrb	r3, [r7, #5]
 80010b8:	b21b      	sxth	r3, r3
 80010ba:	4313      	orrs	r3, r2
 80010bc:	81fb      	strh	r3, [r7, #14]

	float acceleration = ((value / 4) * LIS2DW12_scale_4g) * 9.806;
 80010be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	da00      	bge.n	80010c8 <LIS2DW12_ReadZ+0x90>
 80010c6:	3303      	adds	r3, #3
 80010c8:	109b      	asrs	r3, r3, #2
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	ee07 3a90 	vmov	s15, r3
 80010d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010d4:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001124 <LIS2DW12_ReadZ+0xec>
 80010d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010dc:	ee17 0a90 	vmov	r0, s15
 80010e0:	f7ff fa0a 	bl	80004f8 <__aeabi_f2d>
 80010e4:	a30c      	add	r3, pc, #48	; (adr r3, 8001118 <LIS2DW12_ReadZ+0xe0>)
 80010e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ea:	f7ff fa5d 	bl	80005a8 <__aeabi_dmul>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	4610      	mov	r0, r2
 80010f4:	4619      	mov	r1, r3
 80010f6:	f7ff fd2f 	bl	8000b58 <__aeabi_d2f>
 80010fa:	4603      	mov	r3, r0
 80010fc:	60bb      	str	r3, [r7, #8]

	return acceleration;
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	ee07 3a90 	vmov	s15, r3
}
 8001104:	eeb0 0a67 	vmov.f32	s0, s15
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001110:	b004      	add	sp, #16
 8001112:	4770      	bx	lr
 8001114:	f3af 8000 	nop.w
 8001118:	083126e9 	.word	0x083126e9
 800111c:	40239cac 	.word	0x40239cac
 8001120:	20000004 	.word	0x20000004
 8001124:	39ffda40 	.word	0x39ffda40

08001128 <LIS2DW12_Reset_FIFO>:



void LIS2DW12_Reset_FIFO (I2C_HandleTypeDef i2c){
 8001128:	b084      	sub	sp, #16
 800112a:	b580      	push	{r7, lr}
 800112c:	b084      	sub	sp, #16
 800112e:	af02      	add	r7, sp, #8
 8001130:	f107 0c10 	add.w	ip, r7, #16
 8001134:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	uint8_t buf[5];
	buf[0] = LIS2DW12_FIFO_CTRL;
 8001138:	232e      	movs	r3, #46	; 0x2e
 800113a:	703b      	strb	r3, [r7, #0]
    buf[1] = 0x00;											// Bypass mode: Reset FIFO
 800113c:	2300      	movs	r3, #0
 800113e:	707b      	strb	r3, [r7, #1]
    HAL_I2C_Master_Transmit(&i2c,LIS2DW12_DeviceID,buf,2,100);
 8001140:	4b14      	ldr	r3, [pc, #80]	; (8001194 <LIS2DW12_Reset_FIFO+0x6c>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	b299      	uxth	r1, r3
 8001146:	463a      	mov	r2, r7
 8001148:	2364      	movs	r3, #100	; 0x64
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	2302      	movs	r3, #2
 800114e:	f107 0010 	add.w	r0, r7, #16
 8001152:	f002 fa9f 	bl	8003694 <HAL_I2C_Master_Transmit>

    uint8_t FMode = 0b001;									// FIFO mode
 8001156:	2301      	movs	r3, #1
 8001158:	71fb      	strb	r3, [r7, #7]
    uint8_t FTH = 0b11000;									// FIFO threshold (0-31) -> set to be 24 -> to get 1s
 800115a:	2318      	movs	r3, #24
 800115c:	71bb      	strb	r3, [r7, #6]
    buf[1] = (FMode << 5) | FTH;
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	015b      	lsls	r3, r3, #5
 8001162:	b25a      	sxtb	r2, r3
 8001164:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001168:	4313      	orrs	r3, r2
 800116a:	b25b      	sxtb	r3, r3
 800116c:	b2db      	uxtb	r3, r3
 800116e:	707b      	strb	r3, [r7, #1]
    HAL_I2C_Master_Transmit(&i2c,LIS2DW12_DeviceID,buf,2,100);
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <LIS2DW12_Reset_FIFO+0x6c>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	b299      	uxth	r1, r3
 8001176:	463a      	mov	r2, r7
 8001178:	2364      	movs	r3, #100	; 0x64
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	2302      	movs	r3, #2
 800117e:	f107 0010 	add.w	r0, r7, #16
 8001182:	f002 fa87 	bl	8003694 <HAL_I2C_Master_Transmit>

	return;
 8001186:	bf00      	nop
}
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001190:	b004      	add	sp, #16
 8001192:	4770      	bx	lr
 8001194:	20000004 	.word	0x20000004

08001198 <LIS2DW12_Get_FIFO_FTH>:
	DIFF = DIFF & 0b00011111;

	return DIFF;
}

uint8_t LIS2DW12_Get_FIFO_FTH (I2C_HandleTypeDef i2c) {
 8001198:	b084      	sub	sp, #16
 800119a:	b580      	push	{r7, lr}
 800119c:	b084      	sub	sp, #16
 800119e:	af02      	add	r7, sp, #8
 80011a0:	f107 0c10 	add.w	ip, r7, #16
 80011a4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	uint8_t buf = LIS2DW12_FIFO_SAMPLES;
 80011a8:	232f      	movs	r3, #47	; 0x2f
 80011aa:	71fb      	strb	r3, [r7, #7]
    uint8_t FTH = 0;													// FIFO threshold status flag
 80011ac:	2300      	movs	r3, #0
 80011ae:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Master_Transmit(&i2c,LIS2DW12_DeviceID,&buf,1,100);
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <LIS2DW12_Get_FIFO_FTH+0x60>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	b299      	uxth	r1, r3
 80011b6:	1dfa      	adds	r2, r7, #7
 80011b8:	2364      	movs	r3, #100	; 0x64
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2301      	movs	r3, #1
 80011be:	f107 0010 	add.w	r0, r7, #16
 80011c2:	f002 fa67 	bl	8003694 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2c,LIS2DW12_DeviceID,&FTH,1,100);
 80011c6:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <LIS2DW12_Get_FIFO_FTH+0x60>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	b299      	uxth	r1, r3
 80011cc:	1dba      	adds	r2, r7, #6
 80011ce:	2364      	movs	r3, #100	; 0x64
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	2301      	movs	r3, #1
 80011d4:	f107 0010 	add.w	r0, r7, #16
 80011d8:	f002 fb50 	bl	800387c <HAL_I2C_Master_Receive>

	FTH = FTH & 0x80;
 80011dc:	79bb      	ldrb	r3, [r7, #6]
 80011de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	71bb      	strb	r3, [r7, #6]

	return FTH;
 80011e6:	79bb      	ldrb	r3, [r7, #6]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011f2:	b004      	add	sp, #16
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	20000004 	.word	0x20000004

080011fc <LIS2DW12_Get_FIFO_Z>:

void LIS2DW12_Get_FIFO_Z (I2C_HandleTypeDef i2c, float * z_array) {
 80011fc:	b084      	sub	sp, #16
 80011fe:	b590      	push	{r4, r7, lr}
 8001200:	b095      	sub	sp, #84	; 0x54
 8001202:	af12      	add	r7, sp, #72	; 0x48
 8001204:	f107 0418 	add.w	r4, r7, #24
 8001208:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	for (int i = 0; i < 25; i++) {
 800120c:	2300      	movs	r3, #0
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	e016      	b.n	8001240 <LIS2DW12_Get_FIFO_Z+0x44>
		z_array[i] = LIS2DW12_ReadZ(i2c);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001218:	18d4      	adds	r4, r2, r3
 800121a:	4668      	mov	r0, sp
 800121c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001220:	2244      	movs	r2, #68	; 0x44
 8001222:	4619      	mov	r1, r3
 8001224:	f008 f8a2 	bl	800936c <memcpy>
 8001228:	f107 0318 	add.w	r3, r7, #24
 800122c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800122e:	f7ff ff03 	bl	8001038 <LIS2DW12_ReadZ>
 8001232:	eef0 7a40 	vmov.f32	s15, s0
 8001236:	edc4 7a00 	vstr	s15, [r4]
	for (int i = 0; i < 25; i++) {
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	3301      	adds	r3, #1
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b18      	cmp	r3, #24
 8001244:	dde5      	ble.n	8001212 <LIS2DW12_Get_FIFO_Z+0x16>
	}
	return;
 8001246:	bf00      	nop
}
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001250:	b004      	add	sp, #16
 8001252:	4770      	bx	lr

08001254 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8001254:	b5b0      	push	{r4, r5, r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  APPD_GeneralConfig.STBY_DebugGpioaPinList = STBY_DebugGpioaPinList;
 800125a:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <APPD_EnableCPU2+0x5c>)
 800125c:	881a      	ldrh	r2, [r3, #0]
 800125e:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <APPD_EnableCPU2+0x60>)
 8001260:	809a      	strh	r2, [r3, #4]
  APPD_GeneralConfig.STBY_DebugGpiobPinList = STBY_DebugGpiobPinList;
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <APPD_EnableCPU2+0x64>)
 8001264:	881a      	ldrh	r2, [r3, #0]
 8001266:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <APPD_EnableCPU2+0x60>)
 8001268:	80da      	strh	r2, [r3, #6]
  APPD_GeneralConfig.STBY_DebugGpiocPinList = STBY_DebugGpiocPinList;
 800126a:	4b14      	ldr	r3, [pc, #80]	; (80012bc <APPD_EnableCPU2+0x68>)
 800126c:	881a      	ldrh	r2, [r3, #0]
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <APPD_EnableCPU2+0x60>)
 8001270:	811a      	strh	r2, [r3, #8]
  APPD_GeneralConfig.STBY_DtbGpioaPinList = STBY_DtbGpioaPinList;
 8001272:	4b13      	ldr	r3, [pc, #76]	; (80012c0 <APPD_EnableCPU2+0x6c>)
 8001274:	881a      	ldrh	r2, [r3, #0]
 8001276:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <APPD_EnableCPU2+0x60>)
 8001278:	815a      	strh	r2, [r3, #10]
  APPD_GeneralConfig.STBY_DtbGpiobPinList = STBY_DtbGpiobPinList;
 800127a:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <APPD_EnableCPU2+0x70>)
 800127c:	881a      	ldrh	r2, [r3, #0]
 800127e:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <APPD_EnableCPU2+0x60>)
 8001280:	819a      	strh	r2, [r3, #12]

  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <APPD_EnableCPU2+0x74>)
 8001284:	1d3c      	adds	r4, r7, #4
 8001286:	461d      	mov	r5, r3
 8001288:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800128a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800128c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001290:	c403      	stmia	r4!, {r0, r1}
 8001292:	8022      	strh	r2, [r4, #0]
 8001294:	3402      	adds	r4, #2
 8001296:	0c13      	lsrs	r3, r2, #16
 8001298:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800129a:	f006 fe5f 	bl	8007f5c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	4618      	mov	r0, r3
 80012a2:	f006 f8fa 	bl	800749a <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80012a6:	bf00      	nop
}
 80012a8:	3720      	adds	r7, #32
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bdb0      	pop	{r4, r5, r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000006 	.word	0x20000006
 80012b4:	200301e8 	.word	0x200301e8
 80012b8:	20000008 	.word	0x20000008
 80012bc:	2000000a 	.word	0x2000000a
 80012c0:	2000000c 	.word	0x2000000c
 80012c4:	2000000e 	.word	0x2000000e
 80012c8:	0800bdf0 	.word	0x0800bdf0

080012cc <LL_PWR_SMPS_Enable>:
  *         @ref LL_PWR_SMPS_SetMode() should be used instead.
  * @rmtoll CR5          SMPSEN        LL_PWR_SMPS_Enable
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_Enable(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR5, PWR_CR5_SMPSEN);
 80012d0:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <LL_PWR_SMPS_Enable+0x1c>)
 80012d2:	69db      	ldr	r3, [r3, #28]
 80012d4:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <LL_PWR_SMPS_Enable+0x1c>)
 80012d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012da:	61d3      	str	r3, [r2, #28]
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	58000400 	.word	0x58000400

080012ec <LL_PWR_SMPS_SetStartupCurrent>:
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_200MA
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_220MA
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetStartupCurrent(uint32_t StartupCurrent)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSSC, StartupCurrent);
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 80012f6:	69db      	ldr	r3, [r3, #28]
 80012f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80012fc:	4904      	ldr	r1, [pc, #16]	; (8001310 <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4313      	orrs	r3, r2
 8001302:	61cb      	str	r3, [r1, #28]
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	58000400 	.word	0x58000400

08001314 <LL_PWR_SMPS_SetOutputVoltageLevel>:
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V85
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V90
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetOutputVoltageLevel(uint32_t OutputVoltageLevel)
{
 8001314:	b480      	push	{r7}
 8001316:	b087      	sub	sp, #28
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  __IO const uint32_t OutputVoltageLevel_calibration = (((*SMPS_VOLTAGE_CAL_ADDR) & SMPS_VOLTAGE_CAL) >> SMPS_VOLTAGE_CAL_POS);  /* SMPS output voltage level calibrated in production */
 800131c:	4b18      	ldr	r3, [pc, #96]	; (8001380 <LL_PWR_SMPS_SetOutputVoltageLevel+0x6c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	0a1b      	lsrs	r3, r3, #8
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	60fb      	str	r3, [r7, #12]
  int32_t TrimmingSteps;                               /* Trimming steps between theoretical output voltage and calibrated output voltage */
  int32_t OutputVoltageLevelTrimmed;                   /* SMPS output voltage level after calibration: trimming value added to required level */

  if(OutputVoltageLevel_calibration == 0UL)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d108      	bne.n	8001340 <LL_PWR_SMPS_SetOutputVoltageLevel+0x2c>
  {
    /* Device with SMPS output voltage not calibrated in production: Apply output voltage value directly */
    
    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, OutputVoltageLevel);
 800132e:	4b15      	ldr	r3, [pc, #84]	; (8001384 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	f023 020f 	bic.w	r2, r3, #15
 8001336:	4913      	ldr	r1, [pc, #76]	; (8001384 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4313      	orrs	r3, r2
 800133c:	61cb      	str	r3, [r1, #28]
    }

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
  }
}
 800133e:	e019      	b.n	8001374 <LL_PWR_SMPS_SetOutputVoltageLevel+0x60>
    TrimmingSteps = ((int32_t)OutputVoltageLevel_calibration - (int32_t)(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V50 >> PWR_CR5_SMPSVOS_Pos));
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	3b06      	subs	r3, #6
 8001344:	613b      	str	r3, [r7, #16]
    OutputVoltageLevelTrimmed = ((int32_t)((uint32_t)(OutputVoltageLevel >> PWR_CR5_SMPSVOS_Pos)) + (int32_t)TrimmingSteps);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	4413      	add	r3, r2
 800134c:	617b      	str	r3, [r7, #20]
    if(OutputVoltageLevelTrimmed < 0)
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	2b00      	cmp	r3, #0
 8001352:	da02      	bge.n	800135a <LL_PWR_SMPS_SetOutputVoltageLevel+0x46>
      OutputVoltageLevelTrimmed = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	e004      	b.n	8001364 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
      if(OutputVoltageLevelTrimmed > (int32_t)PWR_CR5_SMPSVOS)
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	2b0f      	cmp	r3, #15
 800135e:	dd01      	ble.n	8001364 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
        OutputVoltageLevelTrimmed = (int32_t)PWR_CR5_SMPSVOS;
 8001360:	230f      	movs	r3, #15
 8001362:	617b      	str	r3, [r7, #20]
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
 8001364:	4b07      	ldr	r3, [pc, #28]	; (8001384 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8001366:	69db      	ldr	r3, [r3, #28]
 8001368:	f023 020f 	bic.w	r2, r3, #15
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	4905      	ldr	r1, [pc, #20]	; (8001384 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8001370:	4313      	orrs	r3, r2
 8001372:	61cb      	str	r3, [r1, #28]
}
 8001374:	bf00      	nop
 8001376:	371c      	adds	r7, #28
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	1fff7558 	.word	0x1fff7558
 8001384:	58000400 	.word	0x58000400

08001388 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8001390:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <LL_C2_PWR_SetPowerMode+0x28>)
 8001392:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001396:	f023 0207 	bic.w	r2, r3, #7
 800139a:	4905      	ldr	r1, [pc, #20]	; (80013b0 <LL_C2_PWR_SetPowerMode+0x28>)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4313      	orrs	r3, r2
 80013a0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	58000400 	.word	0x58000400

080013b4 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <LL_EXTI_EnableIT_32_63+0x24>)
 80013be:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80013c2:	4905      	ldr	r1, [pc, #20]	; (80013d8 <LL_EXTI_EnableIT_32_63+0x24>)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	58000800 	.word	0x58000800

080013dc <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80013e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013e8:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80013ea:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80013ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80013f6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	021b      	lsls	r3, r3, #8
 80013fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001402:	4313      	orrs	r3, r2
 8001404:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	cafecafe 	.word	0xcafecafe

08001418 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800142a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4313      	orrs	r3, r2
 8001432:	608b      	str	r3, [r1, #8]
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800144c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001454:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001466:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800146a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800146e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001472:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001476:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800147a:	bf00      	nop
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8001488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800148c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001490:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001494:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001498:	d101      	bne.n	800149e <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800149a:	2301      	movs	r3, #1
 800149c:	e000      	b.n	80014a0 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80014ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80014be:	d101      	bne.n	80014c4 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80014c0:	2301      	movs	r3, #1
 80014c2:	e000      	b.n	80014c6 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80014d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80014e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4013      	ands	r3, r2
 80014f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014f4:	68fb      	ldr	r3, [r7, #12]
}
 80014f6:	bf00      	nop
 80014f8:	3714      	adds	r7, #20
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
	...

08001504 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001508:	4b04      	ldr	r3, [pc, #16]	; (800151c <LL_DBGMCU_GetRevisionID+0x18>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	0c1b      	lsrs	r3, r3, #16
 800150e:	b29b      	uxth	r3, r3
}
 8001510:	4618      	mov	r0, r3
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	e0042000 	.word	0xe0042000

08001520 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	041b      	lsls	r3, r3, #16
 8001532:	431a      	orrs	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	605a      	str	r2, [r3, #4]
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685a      	ldr	r2, [r3, #4]
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	431a      	orrs	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	605a      	str	r2, [r3, #4]
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001566:	b480      	push	{r7}
 8001568:	b083      	sub	sp, #12
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
 800156e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	695a      	ldr	r2, [r3, #20]
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	041b      	lsls	r3, r3, #16
 8001578:	431a      	orrs	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	615a      	str	r2, [r3, #20]
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
 8001592:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	695a      	ldr	r2, [r3, #20]
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	431a      	orrs	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	615a      	str	r2, [r3, #20]
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	609a      	str	r2, [r3, #8]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	619a      	str	r2, [r3, #24]
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	22ff      	movs	r2, #255	; 0xff
 80015f0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	22ca      	movs	r2, #202	; 0xca
 800160a:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2253      	movs	r2, #83	; 0x53
 8001610:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800161e:	b480      	push	{r7}
 8001620:	b083      	sub	sp, #12
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
 8001626:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f023 0207 	bic.w	r2, r3, #7
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	609a      	str	r2, [r3, #8]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001648:	4b04      	ldr	r3, [pc, #16]	; (800165c <MX_APPE_Config+0x18>)
 800164a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800164e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8001650:	f000 f829 	bl	80016a6 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001654:	f000 f868 	bl	8001728 <Config_HSE>

  return;
 8001658:	bf00      	nop
}
 800165a:	bd80      	pop	{r7, pc}
 800165c:	58004000 	.word	0x58004000

08001660 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001664:	f000 f874 	bl	8001750 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001668:	f000 f88c 	bl	8001784 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800166c:	4903      	ldr	r1, [pc, #12]	; (800167c <MX_APPE_Init+0x1c>)
 800166e:	2000      	movs	r0, #0
 8001670:	f000 f9be 	bl	80019f0 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001674:	f000 f896 	bl	80017a4 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8001678:	bf00      	nop
}
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000394 	.word	0x20000394

08001680 <Init_Smps>:

void Init_Smps(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
   *
   *  The SMPS configuration is not yet supported by CubeMx
   *  when SMPS output voltage is set to 1.4V, the RF output power is limited to 3.7dBm
   *  the SMPS output voltage shall be increased for higher RF output power
   */
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
 8001684:	2000      	movs	r0, #0
 8001686:	f7ff fe31 	bl	80012ec <LL_PWR_SMPS_SetStartupCurrent>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
 800168a:	2004      	movs	r0, #4
 800168c:	f7ff fe42 	bl	8001314 <LL_PWR_SMPS_SetOutputVoltageLevel>
  LL_PWR_SMPS_Enable();
 8001690:	f7ff fe1c 	bl	80012cc <LL_PWR_SMPS_Enable>
#endif /* CFG_USE_SMPS != 0 */

  return;
 8001694:	bf00      	nop
}
 8001696:	bd80      	pop	{r7, pc}

08001698 <Init_Exti>:

void Init_Exti(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800169c:	2050      	movs	r0, #80	; 0x50
 800169e:	f7ff fe89 	bl	80013b4 <LL_EXTI_EnableIT_32_63>

  return;
 80016a2:	bf00      	nop
}
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 80016aa:	f000 f804 	bl	80016b6 <Reset_BackupDomain>

  Reset_IPCC();
 80016ae:	f000 f819 	bl	80016e4 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80016b2:	bf00      	nop
}
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80016ba:	f7ff fee3 	bl	8001484 <LL_RCC_IsActiveFlag_PINRST>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d00d      	beq.n	80016e0 <Reset_BackupDomain+0x2a>
 80016c4:	f7ff fef1 	bl	80014aa <LL_RCC_IsActiveFlag_SFTRST>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d108      	bne.n	80016e0 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80016ce:	f002 fd61 	bl	8004194 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80016d2:	f002 fd5f 	bl	8004194 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80016d6:	f7ff feb3 	bl	8001440 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80016da:	f7ff fec2 	bl	8001462 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80016de:	bf00      	nop
 80016e0:	bf00      	nop
}
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80016e8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80016ec:	f7ff fef0 	bl	80014d0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 80016f0:	213f      	movs	r1, #63	; 0x3f
 80016f2:	480c      	ldr	r0, [pc, #48]	; (8001724 <Reset_IPCC+0x40>)
 80016f4:	f7ff ff5a 	bl	80015ac <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80016f8:	213f      	movs	r1, #63	; 0x3f
 80016fa:	480a      	ldr	r0, [pc, #40]	; (8001724 <Reset_IPCC+0x40>)
 80016fc:	f7ff ff64 	bl	80015c8 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8001700:	213f      	movs	r1, #63	; 0x3f
 8001702:	4808      	ldr	r0, [pc, #32]	; (8001724 <Reset_IPCC+0x40>)
 8001704:	f7ff ff0c 	bl	8001520 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8001708:	213f      	movs	r1, #63	; 0x3f
 800170a:	4806      	ldr	r0, [pc, #24]	; (8001724 <Reset_IPCC+0x40>)
 800170c:	f7ff ff2b 	bl	8001566 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8001710:	213f      	movs	r1, #63	; 0x3f
 8001712:	4804      	ldr	r0, [pc, #16]	; (8001724 <Reset_IPCC+0x40>)
 8001714:	f7ff ff16 	bl	8001544 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8001718:	213f      	movs	r1, #63	; 0x3f
 800171a:	4802      	ldr	r0, [pc, #8]	; (8001724 <Reset_IPCC+0x40>)
 800171c:	f7ff ff35 	bl	800158a <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8001720:	bf00      	nop
}
 8001722:	bd80      	pop	{r7, pc}
 8001724:	58000c00 	.word	0x58000c00

08001728 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800172e:	2000      	movs	r0, #0
 8001730:	f006 fca0 	bl	8008074 <OTP_Read>
 8001734:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d005      	beq.n	8001748 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	799b      	ldrb	r3, [r3, #6]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff fe4b 	bl	80013dc <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001746:	bf00      	nop
 8001748:	bf00      	nop
}
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <System_Init>:

static void System_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  Init_Smps();
 8001754:	f7ff ff94 	bl	8001680 <Init_Smps>

  Init_Exti();
 8001758:	f7ff ff9e 	bl	8001698 <Init_Exti>

  Init_Rtc();
 800175c:	f000 f802 	bl	8001764 <Init_Rtc>

  return;
 8001760:	bf00      	nop
}
 8001762:	bd80      	pop	{r7, pc}

08001764 <Init_Rtc>:

static void Init_Rtc(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001768:	4805      	ldr	r0, [pc, #20]	; (8001780 <Init_Rtc+0x1c>)
 800176a:	f7ff ff48 	bl	80015fe <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800176e:	2100      	movs	r1, #0
 8001770:	4803      	ldr	r0, [pc, #12]	; (8001780 <Init_Rtc+0x1c>)
 8001772:	f7ff ff54 	bl	800161e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001776:	4802      	ldr	r0, [pc, #8]	; (8001780 <Init_Rtc+0x1c>)
 8001778:	f7ff ff34 	bl	80015e4 <LL_RTC_EnableWriteProtection>

  return;
 800177c:	bf00      	nop
}
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40002800 	.word	0x40002800

08001784 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001788:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800178c:	f7ff fe44 	bl	8001418 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001790:	f007 fb0c 	bl	8008dac <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001794:	2004      	movs	r0, #4
 8001796:	f7ff fdf7 	bl	8001388 <LL_C2_PWR_SetPowerMode>
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */
  /**
   * Active SRAM retention for standby support
   */
  HAL_PWREx_EnableSRAMRetention();
 800179a:	f002 fd33 	bl	8004204 <HAL_PWREx_EnableSRAMRetention>

  return;
 800179e:	bf00      	nop
}
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b088      	sub	sp, #32
 80017a8:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80017aa:	f006 fa21 	bl	8007bf0 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80017ae:	4a11      	ldr	r2, [pc, #68]	; (80017f4 <appe_Tl_Init+0x50>)
 80017b0:	2100      	movs	r1, #0
 80017b2:	2010      	movs	r0, #16
 80017b4:	f007 fc6e 	bl	8009094 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80017b8:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <appe_Tl_Init+0x54>)
 80017ba:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80017bc:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <appe_Tl_Init+0x58>)
 80017be:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80017c0:	463b      	mov	r3, r7
 80017c2:	4619      	mov	r1, r3
 80017c4:	480e      	ldr	r0, [pc, #56]	; (8001800 <appe_Tl_Init+0x5c>)
 80017c6:	f006 f8d9 	bl	800797c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80017ca:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <appe_Tl_Init+0x60>)
 80017cc:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <appe_Tl_Init+0x64>)
 80017d0:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80017d2:	4b0e      	ldr	r3, [pc, #56]	; (800180c <appe_Tl_Init+0x68>)
 80017d4:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80017d6:	f240 533c 	movw	r3, #1340	; 0x53c
 80017da:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80017dc:	f107 0308 	add.w	r3, r7, #8
 80017e0:	4618      	mov	r0, r3
 80017e2:	f006 fb47 	bl	8007e74 <TL_MM_Init>

  TL_Enable();
 80017e6:	f006 f9fd 	bl	8007be4 <TL_Enable>

  return;
 80017ea:	bf00      	nop
}
 80017ec:	3720      	adds	r7, #32
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	080079b5 	.word	0x080079b5
 80017f8:	20030734 	.word	0x20030734
 80017fc:	08001811 	.word	0x08001811
 8001800:	08001829 	.word	0x08001829
 8001804:	2003094c 	.word	0x2003094c
 8001808:	20030840 	.word	0x20030840
 800180c:	200301f8 	.word	0x200301f8

08001810 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800181a:	bf00      	nop
}
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
	...

08001828 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	330b      	adds	r3, #11
 8001836:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	881b      	ldrh	r3, [r3, #0]
 800183c:	b29b      	uxth	r3, r3
 800183e:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8001842:	2b07      	cmp	r3, #7
 8001844:	d81f      	bhi.n	8001886 <APPE_SysUserEvtRx+0x5e>
 8001846:	a201      	add	r2, pc, #4	; (adr r2, 800184c <APPE_SysUserEvtRx+0x24>)
 8001848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800184c:	0800186d 	.word	0x0800186d
 8001850:	0800187f 	.word	0x0800187f
 8001854:	08001887 	.word	0x08001887
 8001858:	08001887 	.word	0x08001887
 800185c:	08001887 	.word	0x08001887
 8001860:	08001887 	.word	0x08001887
 8001864:	08001887 	.word	0x08001887
 8001868:	08001887 	.word	0x08001887
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 800186c:	f107 030c 	add.w	r3, r7, #12
 8001870:	4618      	mov	r0, r3
 8001872:	f005 fe3f 	bl	80074f4 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 f81b 	bl	80018b2 <APPE_SysEvtReadyProcessing>
    break;
 800187c:	e004      	b.n	8001888 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 f806 	bl	8001890 <APPE_SysEvtError>
    break;
 8001884:	e000      	b.n	8001888 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8001886:	bf00      	nop
  }

  return;
 8001888:	bf00      	nop
}
 800188a:	3720      	adds	r7, #32
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	330b      	adds	r3, #11
 800189e:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	3302      	adds	r3, #2
 80018a4:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80018a6:	bf00      	nop
}
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b08a      	sub	sp, #40	; 0x28
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80018ba:	f107 030c 	add.w	r3, r7, #12
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	819a      	strh	r2, [r3, #12]
  uint32_t RevisionID=0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	627b      	str	r3, [r7, #36]	; 0x24

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	330b      	adds	r3, #11
 80018d2:	623b      	str	r3, [r7, #32]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80018d4:	6a3b      	ldr	r3, [r7, #32]
 80018d6:	3302      	adds	r3, #2
 80018d8:	61fb      	str	r3, [r7, #28]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d117      	bne.n	8001912 <APPE_SysEvtReadyProcessing+0x60>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80018e2:	f7ff fcb7 	bl	8001254 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80018e6:	230d      	movs	r3, #13
 80018e8:	733b      	strb	r3, [r7, #12]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80018ea:	237f      	movs	r3, #127	; 0x7f
 80018ec:	73bb      	strb	r3, [r7, #14]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80018ee:	f7ff fe09 	bl	8001504 <LL_DBGMCU_GetRevisionID>
 80018f2:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = RevisionID;
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	833b      	strh	r3, [r7, #24]
    (void)SHCI_C2_Config(&config_param);
 80018fa:	f107 030c 	add.w	r3, r7, #12
 80018fe:	4618      	mov	r0, r3
 8001900:	f005 fde2 	bl	80074c8 <SHCI_C2_Config>

    APP_BLE_Init();
 8001904:	f006 fcd6 	bl	80082b4 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001908:	2100      	movs	r1, #0
 800190a:	2001      	movs	r0, #1
 800190c:	f007 fa60 	bl	8008dd0 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001910:	e007      	b.n	8001922 <APPE_SysEvtReadyProcessing+0x70>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d103      	bne.n	8001922 <APPE_SysEvtReadyProcessing+0x70>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	701a      	strb	r2, [r3, #0]
  return;
 8001920:	bf00      	nop
 8001922:	bf00      	nop
}
 8001924:	3728      	adds	r7, #40	; 0x28
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800192e:	f04f 30ff 	mov.w	r0, #4294967295
 8001932:	f007 fab3 	bl	8008e9c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}

0800193a <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
 800193e:	f007 fa77 	bl	8008e30 <UTIL_LPM_EnterLowPower>
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001942:	bf00      	nop
}
 8001944:	bd80      	pop	{r7, pc}

08001946 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
 800194e:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001950:	f04f 30ff 	mov.w	r0, #4294967295
 8001954:	f007 faa2 	bl	8008e9c <UTIL_SEQ_Run>

  return;
 8001958:	bf00      	nop
}
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001968:	2100      	movs	r1, #0
 800196a:	2010      	movs	r0, #16
 800196c:	f007 fbb4 	bl	80090d8 <UTIL_SEQ_SetTask>
  return;
 8001970:	bf00      	nop
}
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001980:	2002      	movs	r0, #2
 8001982:	f007 fc15 	bl	80091b0 <UTIL_SEQ_SetEvt>
  return;
 8001986:	bf00      	nop
}
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001996:	2002      	movs	r0, #2
 8001998:	f007 fc2a 	bl	80091f0 <UTIL_SEQ_WaitEvt>
  return;
 800199c:	bf00      	nop
}
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <LL_EXTI_EnableIT_0_31>:
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <LL_EXTI_EnableIT_0_31+0x24>)
 80019ae:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80019b2:	4905      	ldr	r1, [pc, #20]	; (80019c8 <LL_EXTI_EnableIT_0_31+0x24>)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	58000800 	.word	0x58000800

080019cc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80019d4:	4b05      	ldr	r3, [pc, #20]	; (80019ec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4904      	ldr	r1, [pc, #16]	; (80019ec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4313      	orrs	r3, r2
 80019de:	600b      	str	r3, [r1, #0]

}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	58000800 	.word	0x58000800

080019f0 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b088      	sub	sp, #32
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	6039      	str	r1, [r7, #0]
 80019fa:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 80019fc:	4a64      	ldr	r2, [pc, #400]	; (8001b90 <HW_TS_Init+0x1a0>)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001a02:	4b63      	ldr	r3, [pc, #396]	; (8001b90 <HW_TS_Init+0x1a0>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	22ca      	movs	r2, #202	; 0xca
 8001a0a:	625a      	str	r2, [r3, #36]	; 0x24
 8001a0c:	4b60      	ldr	r3, [pc, #384]	; (8001b90 <HW_TS_Init+0x1a0>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2253      	movs	r2, #83	; 0x53
 8001a14:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001a16:	4b5f      	ldr	r3, [pc, #380]	; (8001b94 <HW_TS_Init+0x1a4>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	4a5e      	ldr	r2, [pc, #376]	; (8001b94 <HW_TS_Init+0x1a4>)
 8001a1c:	f043 0320 	orr.w	r3, r3, #32
 8001a20:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001a22:	4b5c      	ldr	r3, [pc, #368]	; (8001b94 <HW_TS_Init+0x1a4>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	f003 0307 	and.w	r3, r3, #7
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	f1c3 0304 	rsb	r3, r3, #4
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	4b58      	ldr	r3, [pc, #352]	; (8001b98 <HW_TS_Init+0x1a8>)
 8001a36:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001a38:	4b56      	ldr	r3, [pc, #344]	; (8001b94 <HW_TS_Init+0x1a4>)
 8001a3a:	691b      	ldr	r3, [r3, #16]
 8001a3c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001a40:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001a44:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	fa92 f2a2 	rbit	r2, r2
 8001a4c:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	2a00      	cmp	r2, #0
 8001a56:	d101      	bne.n	8001a5c <HW_TS_Init+0x6c>
  {
    return 32U;
 8001a58:	2220      	movs	r2, #32
 8001a5a:	e003      	b.n	8001a64 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8001a5c:	697a      	ldr	r2, [r7, #20]
 8001a5e:	fab2 f282 	clz	r2, r2
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	40d3      	lsrs	r3, r2
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	3301      	adds	r3, #1
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	4b4b      	ldr	r3, [pc, #300]	; (8001b9c <HW_TS_Init+0x1ac>)
 8001a6e:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001a70:	4b48      	ldr	r3, [pc, #288]	; (8001b94 <HW_TS_Init+0x1a4>)
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	4b47      	ldr	r3, [pc, #284]	; (8001ba0 <HW_TS_Init+0x1b0>)
 8001a82:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001a84:	4b46      	ldr	r3, [pc, #280]	; (8001ba0 <HW_TS_Init+0x1b0>)
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	4a44      	ldr	r2, [pc, #272]	; (8001b9c <HW_TS_Init+0x1ac>)
 8001a8c:	7812      	ldrb	r2, [r2, #0]
 8001a8e:	fb02 f303 	mul.w	r3, r2, r3
 8001a92:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001a96:	4a40      	ldr	r2, [pc, #256]	; (8001b98 <HW_TS_Init+0x1a8>)
 8001a98:	7812      	ldrb	r2, [r2, #0]
 8001a9a:	40d3      	lsrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d904      	bls.n	8001ab2 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001aa8:	4b3e      	ldr	r3, [pc, #248]	; (8001ba4 <HW_TS_Init+0x1b4>)
 8001aaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001aae:	801a      	strh	r2, [r3, #0]
 8001ab0:	e003      	b.n	8001aba <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	4b3b      	ldr	r3, [pc, #236]	; (8001ba4 <HW_TS_Init+0x1b4>)
 8001ab8:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001aba:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001abe:	f7ff ff85 	bl	80019cc <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001ac2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001ac6:	f7ff ff6d 	bl	80019a4 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d143      	bne.n	8001b58 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001ad0:	4b35      	ldr	r3, [pc, #212]	; (8001ba8 <HW_TS_Init+0x1b8>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001ad6:	4b35      	ldr	r3, [pc, #212]	; (8001bac <HW_TS_Init+0x1bc>)
 8001ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8001adc:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001ade:	2300      	movs	r3, #0
 8001ae0:	77fb      	strb	r3, [r7, #31]
 8001ae2:	e00c      	b.n	8001afe <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001ae4:	7ffa      	ldrb	r2, [r7, #31]
 8001ae6:	4932      	ldr	r1, [pc, #200]	; (8001bb0 <HW_TS_Init+0x1c0>)
 8001ae8:	4613      	mov	r3, r2
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	4413      	add	r3, r2
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	440b      	add	r3, r1
 8001af2:	330c      	adds	r3, #12
 8001af4:	2200      	movs	r2, #0
 8001af6:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001af8:	7ffb      	ldrb	r3, [r7, #31]
 8001afa:	3301      	adds	r3, #1
 8001afc:	77fb      	strb	r3, [r7, #31]
 8001afe:	7ffb      	ldrb	r3, [r7, #31]
 8001b00:	2b05      	cmp	r3, #5
 8001b02:	d9ef      	bls.n	8001ae4 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001b04:	4b2b      	ldr	r3, [pc, #172]	; (8001bb4 <HW_TS_Init+0x1c4>)
 8001b06:	2206      	movs	r2, #6
 8001b08:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8001b0a:	4b21      	ldr	r3, [pc, #132]	; (8001b90 <HW_TS_Init+0x1a0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	689a      	ldr	r2, [r3, #8]
 8001b12:	4b1f      	ldr	r3, [pc, #124]	; (8001b90 <HW_TS_Init+0x1a0>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b1c:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001b1e:	4b1c      	ldr	r3, [pc, #112]	; (8001b90 <HW_TS_Init+0x1a0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	4b19      	ldr	r3, [pc, #100]	; (8001b90 <HW_TS_Init+0x1a0>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001b32:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001b34:	4b20      	ldr	r3, [pc, #128]	; (8001bb8 <HW_TS_Init+0x1c8>)
 8001b36:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001b3a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001b3c:	2003      	movs	r0, #3
 8001b3e:	f001 f9f6 	bl	8002f2e <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001b42:	4b13      	ldr	r3, [pc, #76]	; (8001b90 <HW_TS_Init+0x1a0>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	689a      	ldr	r2, [r3, #8]
 8001b4a:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <HW_TS_Init+0x1a0>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b54:	609a      	str	r2, [r3, #8]
 8001b56:	e00a      	b.n	8001b6e <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8001b58:	4b0d      	ldr	r3, [pc, #52]	; (8001b90 <HW_TS_Init+0x1a0>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d002      	beq.n	8001b6e <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001b68:	2003      	movs	r0, #3
 8001b6a:	f001 f9d2 	bl	8002f12 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001b6e:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <HW_TS_Init+0x1a0>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	22ff      	movs	r2, #255	; 0xff
 8001b76:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001b78:	2200      	movs	r2, #0
 8001b7a:	2103      	movs	r1, #3
 8001b7c:	2003      	movs	r0, #3
 8001b7e:	f001 f994 	bl	8002eaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001b82:	2003      	movs	r0, #3
 8001b84:	f001 f9ab 	bl	8002ede <HAL_NVIC_EnableIRQ>

  return;
 8001b88:	bf00      	nop
}
 8001b8a:	3720      	adds	r7, #32
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	200002f8 	.word	0x200002f8
 8001b94:	40002800 	.word	0x40002800
 8001b98:	200002fc 	.word	0x200002fc
 8001b9c:	200002fd 	.word	0x200002fd
 8001ba0:	200002fe 	.word	0x200002fe
 8001ba4:	20000300 	.word	0x20000300
 8001ba8:	2000028c 	.word	0x2000028c
 8001bac:	20000288 	.word	0x20000288
 8001bb0:	200001f4 	.word	0x200001f4
 8001bb4:	20000284 	.word	0x20000284
 8001bb8:	58000800 	.word	0x58000800

08001bbc <LL_RCC_LSE_SetDriveCapability>:
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bcc:	f023 0218 	bic.w	r2, r3, #24
 8001bd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <LL_AHB2_GRP1_EnableClock>:
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bf6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
}
 8001c0e:	bf00      	nop
 8001c10:	3714      	adds	r7, #20
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
	...

08001c1c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001c24:	1d39      	adds	r1, r7, #4
 8001c26:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	4803      	ldr	r0, [pc, #12]	; (8001c3c <__io_putchar+0x20>)
 8001c2e:	f004 f8cb 	bl	8005dc8 <HAL_UART_Transmit>
  return ch;
 8001c32:	687b      	ldr	r3, [r7, #4]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	200003b8 	.word	0x200003b8

08001c40 <runAlgo>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t runAlgo(void) {
 8001c40:	b590      	push	{r4, r7, lr}
 8001c42:	b095      	sub	sp, #84	; 0x54
 8001c44:	af12      	add	r7, sp, #72	; 0x48
	if(LIS2DW12_Get_FIFO_FTH(hi2c1) == 0x80) {
 8001c46:	4c72      	ldr	r4, [pc, #456]	; (8001e10 <runAlgo+0x1d0>)
 8001c48:	4668      	mov	r0, sp
 8001c4a:	f104 0310 	add.w	r3, r4, #16
 8001c4e:	2244      	movs	r2, #68	; 0x44
 8001c50:	4619      	mov	r1, r3
 8001c52:	f007 fb8b 	bl	800936c <memcpy>
 8001c56:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c5a:	f7ff fa9d 	bl	8001198 <LIS2DW12_Get_FIFO_FTH>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b80      	cmp	r3, #128	; 0x80
 8001c62:	f040 80cf 	bne.w	8001e04 <runAlgo+0x1c4>
		LIS2DW12_Get_FIFO_Z(hi2c1, z_data);
 8001c66:	4c6a      	ldr	r4, [pc, #424]	; (8001e10 <runAlgo+0x1d0>)
 8001c68:	4b6a      	ldr	r3, [pc, #424]	; (8001e14 <runAlgo+0x1d4>)
 8001c6a:	9311      	str	r3, [sp, #68]	; 0x44
 8001c6c:	4668      	mov	r0, sp
 8001c6e:	f104 0310 	add.w	r3, r4, #16
 8001c72:	2244      	movs	r2, #68	; 0x44
 8001c74:	4619      	mov	r1, r3
 8001c76:	f007 fb79 	bl	800936c <memcpy>
 8001c7a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c7e:	f7ff fabd 	bl	80011fc <LIS2DW12_Get_FIFO_Z>
		LIS2DW12_Reset_FIFO(hi2c1);
 8001c82:	4c63      	ldr	r4, [pc, #396]	; (8001e10 <runAlgo+0x1d0>)
 8001c84:	4668      	mov	r0, sp
 8001c86:	f104 0310 	add.w	r3, r4, #16
 8001c8a:	2244      	movs	r2, #68	; 0x44
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f007 fb6d 	bl	800936c <memcpy>
 8001c92:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c96:	f7ff fa47 	bl	8001128 <LIS2DW12_Reset_FIFO>

		count = 0;
 8001c9a:	4b5f      	ldr	r3, [pc, #380]	; (8001e18 <runAlgo+0x1d8>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	701a      	strb	r2, [r3, #0]
		if(duration == MaxBuffer) {
 8001ca0:	4b5e      	ldr	r3, [pc, #376]	; (8001e1c <runAlgo+0x1dc>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b06      	cmp	r3, #6
 8001ca6:	d115      	bne.n	8001cd4 <runAlgo+0x94>
			rpm = sumofBuffer * 5;
 8001ca8:	4b5d      	ldr	r3, [pc, #372]	; (8001e20 <runAlgo+0x1e0>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	0092      	lsls	r2, r2, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	4b5b      	ldr	r3, [pc, #364]	; (8001e24 <runAlgo+0x1e4>)
 8001cb6:	701a      	strb	r2, [r3, #0]
			if((rpm >= 5) && (rpm <= 35)) {
 8001cb8:	4b5a      	ldr	r3, [pc, #360]	; (8001e24 <runAlgo+0x1e4>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b04      	cmp	r3, #4
 8001cbe:	d906      	bls.n	8001cce <runAlgo+0x8e>
 8001cc0:	4b58      	ldr	r3, [pc, #352]	; (8001e24 <runAlgo+0x1e4>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2b23      	cmp	r3, #35	; 0x23
 8001cc6:	d802      	bhi.n	8001cce <runAlgo+0x8e>
				rpm = 40;
 8001cc8:	4b56      	ldr	r3, [pc, #344]	; (8001e24 <runAlgo+0x1e4>)
 8001cca:	2228      	movs	r2, #40	; 0x28
 8001ccc:	701a      	strb	r2, [r3, #0]
			}
			duration = 0;
 8001cce:	4b53      	ldr	r3, [pc, #332]	; (8001e1c <runAlgo+0x1dc>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	701a      	strb	r2, [r3, #0]
		}

		for(int i = 0; i < 25; i++) {
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	607b      	str	r3, [r7, #4]
 8001cd8:	e06b      	b.n	8001db2 <runAlgo+0x172>
			if(z_data[i] >= 70.0) {
 8001cda:	4a4e      	ldr	r2, [pc, #312]	; (8001e14 <runAlgo+0x1d4>)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	edd3 7a00 	vldr	s15, [r3]
 8001ce6:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8001e28 <runAlgo+0x1e8>
 8001cea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf2:	db06      	blt.n	8001d02 <runAlgo+0xc2>
				isReturnTop = 0;
 8001cf4:	4b4d      	ldr	r3, [pc, #308]	; (8001e2c <runAlgo+0x1ec>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	701a      	strb	r2, [r3, #0]
				isReturnBottom = 0;
 8001cfa:	4b4d      	ldr	r3, [pc, #308]	; (8001e30 <runAlgo+0x1f0>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	701a      	strb	r2, [r3, #0]
 8001d00:	e028      	b.n	8001d54 <runAlgo+0x114>
			} else if((z_data[i] > 8.0) && (!isReturnTop)) {
 8001d02:	4a44      	ldr	r2, [pc, #272]	; (8001e14 <runAlgo+0x1d4>)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4413      	add	r3, r2
 8001d0a:	edd3 7a00 	vldr	s15, [r3]
 8001d0e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001d12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1a:	dd07      	ble.n	8001d2c <runAlgo+0xec>
 8001d1c:	4b43      	ldr	r3, [pc, #268]	; (8001e2c <runAlgo+0x1ec>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d103      	bne.n	8001d2c <runAlgo+0xec>
				isReturnTop = 1;
 8001d24:	4b41      	ldr	r3, [pc, #260]	; (8001e2c <runAlgo+0x1ec>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	701a      	strb	r2, [r3, #0]
 8001d2a:	e013      	b.n	8001d54 <runAlgo+0x114>
			} else if((z_data[i] < 5.0) && (isReturnTop)) {
 8001d2c:	4a39      	ldr	r2, [pc, #228]	; (8001e14 <runAlgo+0x1d4>)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	edd3 7a00 	vldr	s15, [r3]
 8001d38:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001d3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d44:	d506      	bpl.n	8001d54 <runAlgo+0x114>
 8001d46:	4b39      	ldr	r3, [pc, #228]	; (8001e2c <runAlgo+0x1ec>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d002      	beq.n	8001d54 <runAlgo+0x114>
				isReturnBottom = 1;
 8001d4e:	4b38      	ldr	r3, [pc, #224]	; (8001e30 <runAlgo+0x1f0>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	701a      	strb	r2, [r3, #0]
			}

			if((isReturnTop) && (isReturnBottom)) {
 8001d54:	4b35      	ldr	r3, [pc, #212]	; (8001e2c <runAlgo+0x1ec>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d00f      	beq.n	8001d7c <runAlgo+0x13c>
 8001d5c:	4b34      	ldr	r3, [pc, #208]	; (8001e30 <runAlgo+0x1f0>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d00b      	beq.n	8001d7c <runAlgo+0x13c>
				isReturnTop = 0;
 8001d64:	4b31      	ldr	r3, [pc, #196]	; (8001e2c <runAlgo+0x1ec>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	701a      	strb	r2, [r3, #0]
				isReturnBottom = 0;
 8001d6a:	4b31      	ldr	r3, [pc, #196]	; (8001e30 <runAlgo+0x1f0>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	701a      	strb	r2, [r3, #0]
				count += 1;
 8001d70:	4b29      	ldr	r3, [pc, #164]	; (8001e18 <runAlgo+0x1d8>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	3301      	adds	r3, #1
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	4b27      	ldr	r3, [pc, #156]	; (8001e18 <runAlgo+0x1d8>)
 8001d7a:	701a      	strb	r2, [r3, #0]
			}
			printf("$%f %d %d %d;", z_data[i], count, sumofBuffer, rpm);
 8001d7c:	4a25      	ldr	r2, [pc, #148]	; (8001e14 <runAlgo+0x1d4>)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4413      	add	r3, r2
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7fe fbb6 	bl	80004f8 <__aeabi_f2d>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4921      	ldr	r1, [pc, #132]	; (8001e18 <runAlgo+0x1d8>)
 8001d92:	7809      	ldrb	r1, [r1, #0]
 8001d94:	4608      	mov	r0, r1
 8001d96:	4922      	ldr	r1, [pc, #136]	; (8001e20 <runAlgo+0x1e0>)
 8001d98:	7809      	ldrb	r1, [r1, #0]
 8001d9a:	460c      	mov	r4, r1
 8001d9c:	4921      	ldr	r1, [pc, #132]	; (8001e24 <runAlgo+0x1e4>)
 8001d9e:	7809      	ldrb	r1, [r1, #0]
 8001da0:	9102      	str	r1, [sp, #8]
 8001da2:	9401      	str	r4, [sp, #4]
 8001da4:	9000      	str	r0, [sp, #0]
 8001da6:	4823      	ldr	r0, [pc, #140]	; (8001e34 <runAlgo+0x1f4>)
 8001da8:	f007 ff60 	bl	8009c6c <iprintf>
		for(int i = 0; i < 25; i++) {
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3301      	adds	r3, #1
 8001db0:	607b      	str	r3, [r7, #4]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b18      	cmp	r3, #24
 8001db6:	dd90      	ble.n	8001cda <runAlgo+0x9a>
		}
		sumofBuffer = 0;
 8001db8:	4b19      	ldr	r3, [pc, #100]	; (8001e20 <runAlgo+0x1e0>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	701a      	strb	r2, [r3, #0]
		buffer[duration] = count;
 8001dbe:	4b17      	ldr	r3, [pc, #92]	; (8001e1c <runAlgo+0x1dc>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	4b14      	ldr	r3, [pc, #80]	; (8001e18 <runAlgo+0x1d8>)
 8001dc6:	7819      	ldrb	r1, [r3, #0]
 8001dc8:	4b1b      	ldr	r3, [pc, #108]	; (8001e38 <runAlgo+0x1f8>)
 8001dca:	5499      	strb	r1, [r3, r2]
		for(int i = 0; i < MaxBuffer; i++) {
 8001dcc:	2300      	movs	r3, #0
 8001dce:	603b      	str	r3, [r7, #0]
 8001dd0:	e00c      	b.n	8001dec <runAlgo+0x1ac>
			sumofBuffer += buffer[i];
 8001dd2:	4a19      	ldr	r2, [pc, #100]	; (8001e38 <runAlgo+0x1f8>)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	781a      	ldrb	r2, [r3, #0]
 8001dda:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <runAlgo+0x1e0>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	4413      	add	r3, r2
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <runAlgo+0x1e0>)
 8001de4:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < MaxBuffer; i++) {
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	3301      	adds	r3, #1
 8001dea:	603b      	str	r3, [r7, #0]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	2b05      	cmp	r3, #5
 8001df0:	ddef      	ble.n	8001dd2 <runAlgo+0x192>
		}
		duration += 1;
 8001df2:	4b0a      	ldr	r3, [pc, #40]	; (8001e1c <runAlgo+0x1dc>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	3301      	adds	r3, #1
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <runAlgo+0x1dc>)
 8001dfc:	701a      	strb	r2, [r3, #0]
		return rpm;
 8001dfe:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <runAlgo+0x1e4>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	e000      	b.n	8001e06 <runAlgo+0x1c6>

	}else {
		return 0;
 8001e04:	2300      	movs	r3, #0
	}
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd90      	pop	{r4, r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000304 	.word	0x20000304
 8001e14:	20000458 	.word	0x20000458
 8001e18:	2000044a 	.word	0x2000044a
 8001e1c:	20000453 	.word	0x20000453
 8001e20:	20000452 	.word	0x20000452
 8001e24:	20000454 	.word	0x20000454
 8001e28:	428c0000 	.word	0x428c0000
 8001e2c:	20000448 	.word	0x20000448
 8001e30:	20000449 	.word	0x20000449
 8001e34:	0800be0c 	.word	0x0800be0c
 8001e38:	2000044c 	.word	0x2000044c

08001e3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e40:	f000 fe76 	bl	8002b30 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001e44:	f7ff fbfe 	bl	8001644 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e48:	f000 f813 	bl	8001e72 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001e4c:	f000 f85d 	bl	8001f0a <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 8001e50:	f000 f8bc 	bl	8001fcc <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e54:	f000 f956 	bl	8002104 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001e58:	f000 f878 	bl	8001f4c <MX_I2C1_Init>
  MX_RF_Init();
 8001e5c:	f000 f8ca 	bl	8001ff4 <MX_RF_Init>
  MX_RTC_Init();
 8001e60:	f000 f8d0 	bl	8002004 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8001e64:	f000 f902 	bl	800206c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001e68:	f7ff fbfa 	bl	8001660 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001e6c:	f7ff fd5d 	bl	800192a <MX_APPE_Process>
 8001e70:	e7fc      	b.n	8001e6c <main+0x30>

08001e72 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b098      	sub	sp, #96	; 0x60
 8001e76:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e78:	f107 031c 	add.w	r3, r7, #28
 8001e7c:	2244      	movs	r2, #68	; 0x44
 8001e7e:	2100      	movs	r1, #0
 8001e80:	4618      	mov	r0, r3
 8001e82:	f007 fa81 	bl	8009388 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e86:	463b      	mov	r3, r7
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]
 8001e94:	615a      	str	r2, [r3, #20]
 8001e96:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001e98:	f002 f97c 	bl	8004194 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	f7ff fe8d 	bl	8001bbc <LL_RCC_LSE_SetDriveCapability>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001ea2:	2307      	movs	r3, #7
 8001ea4:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ea6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001eaa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001eac:	2301      	movs	r3, #1
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001eb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eb4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001eb6:	2340      	movs	r3, #64	; 0x40
 8001eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ebe:	f107 031c 	add.w	r3, r7, #28
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f002 fd3c 	bl	8004940 <HAL_RCC_OscConfig>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8001ece:	f000 f993 	bl	80021f8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001ed2:	236f      	movs	r3, #111	; 0x6f
 8001ed4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001eda:	2380      	movs	r3, #128	; 0x80
 8001edc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001eee:	463b      	mov	r3, r7
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f003 f85a 	bl	8004fac <HAL_RCC_ClockConfig>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001efe:	f000 f97b 	bl	80021f8 <Error_Handler>
  }
}
 8001f02:	bf00      	nop
 8001f04:	3760      	adds	r7, #96	; 0x60
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b08c      	sub	sp, #48	; 0x30
 8001f0e:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f10:	463b      	mov	r3, r7
 8001f12:	2230      	movs	r2, #48	; 0x30
 8001f14:	2100      	movs	r1, #0
 8001f16:	4618      	mov	r0, r3
 8001f18:	f007 fa36 	bl	8009388 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001f1c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001f20:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001f22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f26:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001f2c:	2310      	movs	r3, #16
 8001f2e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f30:	463b      	mov	r3, r7
 8001f32:	4618      	mov	r0, r3
 8001f34:	f003 fbfc 	bl	8005730 <HAL_RCCEx_PeriphCLKConfig>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001f3e:	f000 f95b 	bl	80021f8 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001f42:	bf00      	nop
 8001f44:	3730      	adds	r7, #48	; 0x30
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
	...

08001f4c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f50:	4b1b      	ldr	r3, [pc, #108]	; (8001fc0 <MX_I2C1_Init+0x74>)
 8001f52:	4a1c      	ldr	r2, [pc, #112]	; (8001fc4 <MX_I2C1_Init+0x78>)
 8001f54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8001f56:	4b1a      	ldr	r3, [pc, #104]	; (8001fc0 <MX_I2C1_Init+0x74>)
 8001f58:	4a1b      	ldr	r2, [pc, #108]	; (8001fc8 <MX_I2C1_Init+0x7c>)
 8001f5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001f5c:	4b18      	ldr	r3, [pc, #96]	; (8001fc0 <MX_I2C1_Init+0x74>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f62:	4b17      	ldr	r3, [pc, #92]	; (8001fc0 <MX_I2C1_Init+0x74>)
 8001f64:	2201      	movs	r2, #1
 8001f66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f68:	4b15      	ldr	r3, [pc, #84]	; (8001fc0 <MX_I2C1_Init+0x74>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001f6e:	4b14      	ldr	r3, [pc, #80]	; (8001fc0 <MX_I2C1_Init+0x74>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f74:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <MX_I2C1_Init+0x74>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f7a:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <MX_I2C1_Init+0x74>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f80:	4b0f      	ldr	r3, [pc, #60]	; (8001fc0 <MX_I2C1_Init+0x74>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f86:	480e      	ldr	r0, [pc, #56]	; (8001fc0 <MX_I2C1_Init+0x74>)
 8001f88:	f001 faf4 	bl	8003574 <HAL_I2C_Init>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001f92:	f000 f931 	bl	80021f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f96:	2100      	movs	r1, #0
 8001f98:	4809      	ldr	r0, [pc, #36]	; (8001fc0 <MX_I2C1_Init+0x74>)
 8001f9a:	f001 ffdd 	bl	8003f58 <HAL_I2CEx_ConfigAnalogFilter>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001fa4:	f000 f928 	bl	80021f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001fa8:	2100      	movs	r1, #0
 8001faa:	4805      	ldr	r0, [pc, #20]	; (8001fc0 <MX_I2C1_Init+0x74>)
 8001fac:	f002 f81f 	bl	8003fee <HAL_I2CEx_ConfigDigitalFilter>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001fb6:	f000 f91f 	bl	80021f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000304 	.word	0x20000304
 8001fc4:	40005400 	.word	0x40005400
 8001fc8:	00303d5b 	.word	0x00303d5b

08001fcc <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001fd0:	4b06      	ldr	r3, [pc, #24]	; (8001fec <MX_IPCC_Init+0x20>)
 8001fd2:	4a07      	ldr	r2, [pc, #28]	; (8001ff0 <MX_IPCC_Init+0x24>)
 8001fd4:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001fd6:	4805      	ldr	r0, [pc, #20]	; (8001fec <MX_IPCC_Init+0x20>)
 8001fd8:	f002 f856 	bl	8004088 <HAL_IPCC_Init>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001fe2:	f000 f909 	bl	80021f8 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000358 	.word	0x20000358
 8001ff0:	58000c00 	.word	0x58000c00

08001ff4 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001ff8:	bf00      	nop
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
	...

08002004 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002008:	4b16      	ldr	r3, [pc, #88]	; (8002064 <MX_RTC_Init+0x60>)
 800200a:	4a17      	ldr	r2, [pc, #92]	; (8002068 <MX_RTC_Init+0x64>)
 800200c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800200e:	4b15      	ldr	r3, [pc, #84]	; (8002064 <MX_RTC_Init+0x60>)
 8002010:	2200      	movs	r2, #0
 8002012:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002014:	4b13      	ldr	r3, [pc, #76]	; (8002064 <MX_RTC_Init+0x60>)
 8002016:	220f      	movs	r2, #15
 8002018:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800201a:	4b12      	ldr	r3, [pc, #72]	; (8002064 <MX_RTC_Init+0x60>)
 800201c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002020:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002022:	4b10      	ldr	r3, [pc, #64]	; (8002064 <MX_RTC_Init+0x60>)
 8002024:	2200      	movs	r2, #0
 8002026:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002028:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <MX_RTC_Init+0x60>)
 800202a:	2200      	movs	r2, #0
 800202c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800202e:	4b0d      	ldr	r3, [pc, #52]	; (8002064 <MX_RTC_Init+0x60>)
 8002030:	2200      	movs	r2, #0
 8002032:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002034:	480b      	ldr	r0, [pc, #44]	; (8002064 <MX_RTC_Init+0x60>)
 8002036:	f003 fc71 	bl	800591c <HAL_RTC_Init>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 8002040:	f000 f8da 	bl	80021f8 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0xFFFF, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002044:	2200      	movs	r2, #0
 8002046:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800204a:	4806      	ldr	r0, [pc, #24]	; (8002064 <MX_RTC_Init+0x60>)
 800204c:	f003 fd54 	bl	8005af8 <HAL_RTCEx_SetWakeUpTimer>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8002056:	f000 f8cf 	bl	80021f8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800205a:	4802      	ldr	r0, [pc, #8]	; (8002064 <MX_RTC_Init+0x60>)
 800205c:	f003 fde7 	bl	8005c2e <HAL_RTCEx_DeactivateWakeUpTimer>
  /* USER CODE END RTC_Init 2 */

}
 8002060:	bf00      	nop
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20000394 	.word	0x20000394
 8002068:	40002800 	.word	0x40002800

0800206c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002070:	4b22      	ldr	r3, [pc, #136]	; (80020fc <MX_USART1_UART_Init+0x90>)
 8002072:	4a23      	ldr	r2, [pc, #140]	; (8002100 <MX_USART1_UART_Init+0x94>)
 8002074:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002076:	4b21      	ldr	r3, [pc, #132]	; (80020fc <MX_USART1_UART_Init+0x90>)
 8002078:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800207c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800207e:	4b1f      	ldr	r3, [pc, #124]	; (80020fc <MX_USART1_UART_Init+0x90>)
 8002080:	2200      	movs	r2, #0
 8002082:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002084:	4b1d      	ldr	r3, [pc, #116]	; (80020fc <MX_USART1_UART_Init+0x90>)
 8002086:	2200      	movs	r2, #0
 8002088:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800208a:	4b1c      	ldr	r3, [pc, #112]	; (80020fc <MX_USART1_UART_Init+0x90>)
 800208c:	2200      	movs	r2, #0
 800208e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002090:	4b1a      	ldr	r3, [pc, #104]	; (80020fc <MX_USART1_UART_Init+0x90>)
 8002092:	220c      	movs	r2, #12
 8002094:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002096:	4b19      	ldr	r3, [pc, #100]	; (80020fc <MX_USART1_UART_Init+0x90>)
 8002098:	2200      	movs	r2, #0
 800209a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800209c:	4b17      	ldr	r3, [pc, #92]	; (80020fc <MX_USART1_UART_Init+0x90>)
 800209e:	2200      	movs	r2, #0
 80020a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020a2:	4b16      	ldr	r3, [pc, #88]	; (80020fc <MX_USART1_UART_Init+0x90>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020a8:	4b14      	ldr	r3, [pc, #80]	; (80020fc <MX_USART1_UART_Init+0x90>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020ae:	4b13      	ldr	r3, [pc, #76]	; (80020fc <MX_USART1_UART_Init+0x90>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020b4:	4811      	ldr	r0, [pc, #68]	; (80020fc <MX_USART1_UART_Init+0x90>)
 80020b6:	f003 fe37 	bl	8005d28 <HAL_UART_Init>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80020c0:	f000 f89a 	bl	80021f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020c4:	2100      	movs	r1, #0
 80020c6:	480d      	ldr	r0, [pc, #52]	; (80020fc <MX_USART1_UART_Init+0x90>)
 80020c8:	f004 fb28 	bl	800671c <HAL_UARTEx_SetTxFifoThreshold>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80020d2:	f000 f891 	bl	80021f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020d6:	2100      	movs	r1, #0
 80020d8:	4808      	ldr	r0, [pc, #32]	; (80020fc <MX_USART1_UART_Init+0x90>)
 80020da:	f004 fb5d 	bl	8006798 <HAL_UARTEx_SetRxFifoThreshold>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80020e4:	f000 f888 	bl	80021f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80020e8:	4804      	ldr	r0, [pc, #16]	; (80020fc <MX_USART1_UART_Init+0x90>)
 80020ea:	f004 fade 	bl	80066aa <HAL_UARTEx_DisableFifoMode>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80020f4:	f000 f880 	bl	80021f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020f8:	bf00      	nop
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	200003b8 	.word	0x200003b8
 8002100:	40013800 	.word	0x40013800

08002104 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210a:	1d3b      	adds	r3, r7, #4
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	605a      	str	r2, [r3, #4]
 8002112:	609a      	str	r2, [r3, #8]
 8002114:	60da      	str	r2, [r3, #12]
 8002116:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002118:	2004      	movs	r0, #4
 800211a:	f7ff fd65 	bl	8001be8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800211e:	2080      	movs	r0, #128	; 0x80
 8002120:	f7ff fd62 	bl	8001be8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002124:	2002      	movs	r0, #2
 8002126:	f7ff fd5f 	bl	8001be8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800212a:	2001      	movs	r0, #1
 800212c:	f7ff fd5c 	bl	8001be8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002130:	2010      	movs	r0, #16
 8002132:	f7ff fd59 	bl	8001be8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002136:	2308      	movs	r3, #8
 8002138:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800213a:	2303      	movs	r3, #3
 800213c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002142:	1d3b      	adds	r3, r7, #4
 8002144:	4619      	mov	r1, r3
 8002146:	481f      	ldr	r0, [pc, #124]	; (80021c4 <MX_GPIO_Init+0xc0>)
 8002148:	f001 f870 	bl	800322c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA11 PA12 PA13
                           PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800214c:	f64f 13ff 	movw	r3, #63999	; 0xf9ff
 8002150:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002152:	2303      	movs	r3, #3
 8002154:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800215a:	1d3b      	adds	r3, r7, #4
 800215c:	4619      	mov	r1, r3
 800215e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002162:	f001 f863 	bl	800322c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB0 PB1 PB3
                           PB4 PB5 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3
 8002166:	23bf      	movs	r3, #191	; 0xbf
 8002168:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800216a:	2303      	movs	r3, #3
 800216c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216e:	2300      	movs	r3, #0
 8002170:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002172:	1d3b      	adds	r3, r7, #4
 8002174:	4619      	mov	r1, r3
 8002176:	4814      	ldr	r0, [pc, #80]	; (80021c8 <MX_GPIO_Init+0xc4>)
 8002178:	f001 f858 	bl	800322c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800217c:	2310      	movs	r3, #16
 800217e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002180:	2303      	movs	r3, #3
 8002182:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002184:	2300      	movs	r3, #0
 8002186:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002188:	1d3b      	adds	r3, r7, #4
 800218a:	4619      	mov	r1, r3
 800218c:	480f      	ldr	r0, [pc, #60]	; (80021cc <MX_GPIO_Init+0xc8>)
 800218e:	f001 f84d 	bl	800322c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002192:	2340      	movs	r3, #64	; 0x40
 8002194:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002196:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800219a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219c:	2300      	movs	r3, #0
 800219e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a0:	1d3b      	adds	r3, r7, #4
 80021a2:	4619      	mov	r1, r3
 80021a4:	4808      	ldr	r0, [pc, #32]	; (80021c8 <MX_GPIO_Init+0xc4>)
 80021a6:	f001 f841 	bl	800322c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80021aa:	2200      	movs	r2, #0
 80021ac:	2100      	movs	r1, #0
 80021ae:	2017      	movs	r0, #23
 80021b0:	f000 fe7b 	bl	8002eaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80021b4:	2017      	movs	r0, #23
 80021b6:	f000 fe92 	bl	8002ede <HAL_NVIC_EnableIRQ>

}
 80021ba:	bf00      	nop
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	48001c00 	.word	0x48001c00
 80021c8:	48000400 	.word	0x48000400
 80021cc:	48001000 	.word	0x48001000

080021d0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_6) {
 80021da:	88fb      	ldrh	r3, [r7, #6]
 80021dc:	2b40      	cmp	r3, #64	; 0x40
 80021de:	d107      	bne.n	80021f0 <HAL_GPIO_EXTI_Callback+0x20>
		SystemClock_Config();
 80021e0:	f7ff fe47 	bl	8001e72 <SystemClock_Config>
		HAL_ResumeTick();
 80021e4:	f000 fd3a 	bl	8002c5c <HAL_ResumeTick>
		UTIL_SEQ_SetTask(1<<CFG_TASK_GET_CADENCE, CFG_SCH_PRIO_0);
 80021e8:	2100      	movs	r1, #0
 80021ea:	2008      	movs	r0, #8
 80021ec:	f006 ff74 	bl	80090d8 <UTIL_SEQ_SetTask>
	}
}
 80021f0:	bf00      	nop
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80021fc:	b672      	cpsid	i
}
 80021fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002200:	e7fe      	b.n	8002200 <Error_Handler+0x8>
	...

08002204 <LL_PWR_SetPowerMode>:
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 800220c:	4b06      	ldr	r3, [pc, #24]	; (8002228 <LL_PWR_SetPowerMode+0x24>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f023 0207 	bic.w	r2, r3, #7
 8002214:	4904      	ldr	r1, [pc, #16]	; (8002228 <LL_PWR_SetPowerMode+0x24>)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4313      	orrs	r3, r2
 800221a:	600b      	str	r3, [r1, #0]
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	58000400 	.word	0x58000400

0800222c <LL_PWR_ClearFlag_WU>:
  * @brief  Clear Wake-up Flags
  * @rmtoll SCR          CWUF          LL_PWR_ClearFlag_WU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF);
 8002230:	4b03      	ldr	r3, [pc, #12]	; (8002240 <LL_PWR_ClearFlag_WU+0x14>)
 8002232:	2209      	movs	r2, #9
 8002234:	619a      	str	r2, [r3, #24]
}
 8002236:	bf00      	nop
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	58000400 	.word	0x58000400

08002244 <LL_PWR_IsActiveFlag_C2SB>:
  * @brief  System standby flag for CPU2
  * @rmtoll EXTSCR       C2SBF         LL_PWR_IsActiveFlag_C2SB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2SB(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2SBF) == (PWR_EXTSCR_C2SBF)) ? 1UL : 0UL);
 8002248:	4b07      	ldr	r3, [pc, #28]	; (8002268 <LL_PWR_IsActiveFlag_C2SB+0x24>)
 800224a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002252:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002256:	d101      	bne.n	800225c <LL_PWR_IsActiveFlag_C2SB+0x18>
 8002258:	2301      	movs	r3, #1
 800225a:	e000      	b.n	800225e <LL_PWR_IsActiveFlag_C2SB+0x1a>
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	58000400 	.word	0x58000400

0800226c <LL_PWR_IsActiveFlag_C2DS>:
  * @brief  Get deepsleep mode for CPU2
  * @rmtoll EXTSCR       C2DS          LL_PWR_IsActiveFlag_C2DS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2DS(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2DS) == (PWR_EXTSCR_C2DS)) ? 1UL : 0UL);
 8002270:	4b07      	ldr	r3, [pc, #28]	; (8002290 <LL_PWR_IsActiveFlag_C2DS+0x24>)
 8002272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002276:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800227a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800227e:	d101      	bne.n	8002284 <LL_PWR_IsActiveFlag_C2DS+0x18>
 8002280:	2301      	movs	r3, #1
 8002282:	e000      	b.n	8002286 <LL_PWR_IsActiveFlag_C2DS+0x1a>
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	58000400 	.word	0x58000400

08002294 <LL_RCC_HSI_Enable>:
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a6:	6013      	str	r3, [r2, #0]
}
 80022a8:	bf00      	nop
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <LL_RCC_HSI_IsReady>:
{
 80022b2:	b480      	push	{r7}
 80022b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80022b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022c4:	d101      	bne.n	80022ca <LL_RCC_HSI_IsReady+0x18>
 80022c6:	2301      	movs	r3, #1
 80022c8:	e000      	b.n	80022cc <LL_RCC_HSI_IsReady+0x1a>
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <LL_RCC_SetSysClkSource>:
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80022de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f023 0203 	bic.w	r2, r3, #3
 80022e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	608b      	str	r3, [r1, #8]
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <LL_RCC_GetSysClkSource>:
{
 80022fe:	b480      	push	{r7}
 8002300:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 030c 	and.w	r3, r3, #12
}
 800230c:	4618      	mov	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <LL_RCC_SetSMPSClockSource>:
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800231e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002324:	f023 0203 	bic.w	r2, r3, #3
 8002328:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4313      	orrs	r3, r2
 8002330:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <LL_RCC_ClearResetFlags>:
  * @brief  Set RMVF bit to clear the reset flags.
  * @rmtoll CSR          RMVF          LL_RCC_ClearResetFlags
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ClearResetFlags(void)
{
 800233e:	b480      	push	{r7}
 8002340:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8002342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002346:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800234a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800234e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002352:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002356:	bf00      	nop
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002364:	4b05      	ldr	r3, [pc, #20]	; (800237c <LL_LPM_EnableSleep+0x1c>)
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	4a04      	ldr	r2, [pc, #16]	; (800237c <LL_LPM_EnableSleep+0x1c>)
 800236a:	f023 0304 	bic.w	r3, r3, #4
 800236e:	6113      	str	r3, [r2, #16]
}
 8002370:	bf00      	nop
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002384:	4b05      	ldr	r3, [pc, #20]	; (800239c <LL_LPM_EnableDeepSleep+0x1c>)
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	4a04      	ldr	r2, [pc, #16]	; (800239c <LL_LPM_EnableDeepSleep+0x1c>)
 800238a:	f043 0304 	orr.w	r3, r3, #4
 800238e:	6113      	str	r3, [r2, #16]
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	e000ed00 	.word	0xe000ed00

080023a0 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	3220      	adds	r2, #32
 80023b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023b4:	4a05      	ldr	r2, [pc, #20]	; (80023cc <LL_HSEM_1StepLock+0x2c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d001      	beq.n	80023be <LL_HSEM_1StepLock+0x1e>
 80023ba:	2301      	movs	r3, #1
 80023bc:	e000      	b.n	80023c0 <LL_HSEM_1StepLock+0x20>
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	80000400 	.word	0x80000400

080023d0 <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80023ea:	bf00      	nop
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode(void)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	af00      	add	r7, sp, #0
/* USER CODE END PWR_EnterOffMode_1 */
  /**
   * The systick should be disabled for the same reason than when the device enters stop mode because
   * at this time, the device may enter either OffMode or StopMode.
   */
  HAL_SuspendTick();
 80023fa:	f000 fc1f 	bl	8002c3c <HAL_SuspendTick>
  __HAL_RCC_CLEAR_RESET_FLAGS();
 80023fe:	f7ff ff9e 	bl	800233e <LL_RCC_ClearResetFlags>

  EnterLowPower();
 8002402:	f000 f835 	bl	8002470 <EnterLowPower>
   * in critical section. If an interrupt occurs while in that critical section before that point,
   * the flag is set and will be cleared here but the system will not enter Off Mode
   * because an interrupt is pending in the NVIC. The ISR will be executed when moving out
   * of this critical section
   */
  LL_PWR_ClearFlag_WU();
 8002406:	f7ff ff11 	bl	800222c <LL_PWR_ClearFlag_WU>

  LL_PWR_SetPowerMode(LL_PWR_MODE_STANDBY);
 800240a:	2003      	movs	r0, #3
 800240c:	f7ff fefa 	bl	8002204 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8002410:	f7ff ffb6 	bl	8002380 <LL_LPM_EnableDeepSleep>
#endif

/* USER CODE BEGIN PWR_EnterOffMode_2 */

/* USER CODE END PWR_EnterOffMode_2 */
  return;
 8002414:	bf00      	nop
}
 8002416:	bd80      	pop	{r7, pc}

08002418 <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  }
#endif
/* USER CODE BEGIN PWR_ExitOffMode_2 */

/* USER CODE END PWR_ExitOffMode_2 */
  return;
 800241c:	bf00      	nop
}
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode(void)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	af00      	add	r7, sp, #0
   *
   * When in production, the HAL_DBGMCU_EnableDBGStopMode() is not called so that the device can reach best power consumption
   * However, the systick should be disabled anyway to avoid the case when it is about to expire at the same time the device enters
   * stop mode (this will abort the Stop Mode entry).
   */
  HAL_SuspendTick();
 800242a:	f000 fc07 	bl	8002c3c <HAL_SuspendTick>

  /**
   * This function is called from CRITICAL SECTION
   */
  EnterLowPower();
 800242e:	f000 f81f 	bl	8002470 <EnterLowPower>

  /************************************************************************************
   * ENTER STOP MODE
   ***********************************************************************************/
  LL_PWR_SetPowerMode(LL_PWR_MODE_STOP1);
 8002432:	2001      	movs	r0, #1
 8002434:	f7ff fee6 	bl	8002204 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8002438:	f7ff ffa2 	bl	8002380 <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 800243c:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterStopMode_2 */

/* USER CODE END PWR_EnterStopMode_2 */
  return;
 800243e:	bf00      	nop
}
 8002440:	bd80      	pop	{r7, pc}

08002442 <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode(void)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	af00      	add	r7, sp, #0

/* USER CODE END PWR_ExitStopMode_1 */
  /**
   * This function is called from CRITICAL SECTION
   */
  ExitLowPower();
 8002446:	f000 f84f 	bl	80024e8 <ExitLowPower>

  HAL_ResumeTick();
 800244a:	f000 fc07 	bl	8002c5c <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitStopMode_2 */

/* USER CODE END PWR_ExitStopMode_2 */
  return;
 800244e:	bf00      	nop
}
 8002450:	bd80      	pop	{r7, pc}

08002452 <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode(void)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode_1 */

/* USER CODE END PWR_EnterSleepMode_1 */

  HAL_SuspendTick();
 8002456:	f000 fbf1 	bl	8002c3c <HAL_SuspendTick>

  /************************************************************************************
   * ENTER SLEEP MODE
   ***********************************************************************************/
  LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 800245a:	f7ff ff81 	bl	8002360 <LL_LPM_EnableSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 800245e:	bf30      	wfi
/* USER CODE BEGIN PWR_EnterSleepMode_2 */

/* USER CODE END PWR_EnterSleepMode_2 */
  return;
 8002460:	bf00      	nop
}
 8002462:	bd80      	pop	{r7, pc}

08002464 <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode_1 */

/* USER CODE END PWR_ExitSleepMode_1 */
  HAL_ResumeTick();
 8002468:	f000 fbf8 	bl	8002c5c <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitSleepMode_2 */

/* USER CODE END PWR_ExitSleepMode_2 */
  return;
 800246c:	bf00      	nop
}
 800246e:	bd80      	pop	{r7, pc}

08002470 <EnterLowPower>:
  * @brief Setup the system to enter either stop or off mode
  * @param none
  * @retval none
  */
static void EnterLowPower(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /**
   * This function is called from CRITICAL SECTION
   */

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8002474:	bf00      	nop
 8002476:	2103      	movs	r1, #3
 8002478:	4819      	ldr	r0, [pc, #100]	; (80024e0 <EnterLowPower+0x70>)
 800247a:	f7ff ff91 	bl	80023a0 <LL_HSEM_1StepLock>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1f8      	bne.n	8002476 <EnterLowPower+0x6>

  if (! LL_HSEM_1StepLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID))
 8002484:	2104      	movs	r1, #4
 8002486:	4816      	ldr	r0, [pc, #88]	; (80024e0 <EnterLowPower+0x70>)
 8002488:	f7ff ff8a 	bl	80023a0 <LL_HSEM_1StepLock>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d117      	bne.n	80024c2 <EnterLowPower+0x52>
  {
    if(LL_PWR_IsActiveFlag_C2DS() || LL_PWR_IsActiveFlag_C2SB())
 8002492:	f7ff feeb 	bl	800226c <LL_PWR_IsActiveFlag_C2DS>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d104      	bne.n	80024a6 <EnterLowPower+0x36>
 800249c:	f7ff fed2 	bl	8002244 <LL_PWR_IsActiveFlag_C2SB>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d015      	beq.n	80024d2 <EnterLowPower+0x62>
    {
      /* Release ENTRY_STOP_MODE semaphore */
      LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 80024a6:	2200      	movs	r2, #0
 80024a8:	2104      	movs	r1, #4
 80024aa:	480d      	ldr	r0, [pc, #52]	; (80024e0 <EnterLowPower+0x70>)
 80024ac:	f7ff ff90 	bl	80023d0 <LL_HSEM_ReleaseLock>

      Switch_On_HSI();
 80024b0:	f000 f834 	bl	800251c <Switch_On_HSI>
      __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 80024b4:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <EnterLowPower+0x74>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a0a      	ldr	r2, [pc, #40]	; (80024e4 <EnterLowPower+0x74>)
 80024ba:	f023 0307 	bic.w	r3, r3, #7
 80024be:	6013      	str	r3, [r2, #0]
 80024c0:	e007      	b.n	80024d2 <EnterLowPower+0x62>
    }
  }
  else
  {
    Switch_On_HSI();
 80024c2:	f000 f82b 	bl	800251c <Switch_On_HSI>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 80024c6:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <EnterLowPower+0x74>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a06      	ldr	r2, [pc, #24]	; (80024e4 <EnterLowPower+0x74>)
 80024cc:	f023 0307 	bic.w	r3, r3, #7
 80024d0:	6013      	str	r3, [r2, #0]
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 80024d2:	2200      	movs	r2, #0
 80024d4:	2103      	movs	r1, #3
 80024d6:	4802      	ldr	r0, [pc, #8]	; (80024e0 <EnterLowPower+0x70>)
 80024d8:	f7ff ff7a 	bl	80023d0 <LL_HSEM_ReleaseLock>

  return;
 80024dc:	bf00      	nop
}
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	58001400 	.word	0x58001400
 80024e4:	58004000 	.word	0x58004000

080024e8 <ExitLowPower>:
  * @brief Restore the system to exit stop mode
  * @param none
  * @retval none
  */
static void ExitLowPower(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* Release ENTRY_STOP_MODE semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 80024ec:	2200      	movs	r2, #0
 80024ee:	2104      	movs	r1, #4
 80024f0:	4809      	ldr	r0, [pc, #36]	; (8002518 <ExitLowPower+0x30>)
 80024f2:	f7ff ff6d 	bl	80023d0 <LL_HSEM_ReleaseLock>

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 80024f6:	bf00      	nop
 80024f8:	2103      	movs	r1, #3
 80024fa:	4807      	ldr	r0, [pc, #28]	; (8002518 <ExitLowPower+0x30>)
 80024fc:	f7ff ff50 	bl	80023a0 <LL_HSEM_1StepLock>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f8      	bne.n	80024f8 <ExitLowPower+0x10>

  if(LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8002506:	f7ff fefa 	bl	80022fe <LL_RCC_GetSysClkSource>

  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
#endif

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 800250a:	2200      	movs	r2, #0
 800250c:	2103      	movs	r1, #3
 800250e:	4802      	ldr	r0, [pc, #8]	; (8002518 <ExitLowPower+0x30>)
 8002510:	f7ff ff5e 	bl	80023d0 <LL_HSEM_ReleaseLock>

  return;
 8002514:	bf00      	nop
}
 8002516:	bd80      	pop	{r7, pc}
 8002518:	58001400 	.word	0x58001400

0800251c <Switch_On_HSI>:
  * @brief Switch the system clock on HSI
  * @param none
  * @retval none
  */
static void Switch_On_HSI(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  LL_RCC_HSI_Enable();
 8002520:	f7ff feb8 	bl	8002294 <LL_RCC_HSI_Enable>
  while(!LL_RCC_HSI_IsReady());
 8002524:	bf00      	nop
 8002526:	f7ff fec4 	bl	80022b2 <LL_RCC_HSI_IsReady>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0fa      	beq.n	8002526 <Switch_On_HSI+0xa>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8002530:	2001      	movs	r0, #1
 8002532:	f7ff fed0 	bl	80022d6 <LL_RCC_SetSysClkSource>
  LL_RCC_SetSMPSClockSource(LL_RCC_SMPS_CLKSOURCE_HSI);
 8002536:	2000      	movs	r0, #0
 8002538:	f7ff feed 	bl	8002316 <LL_RCC_SetSMPSClockSource>
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 800253c:	bf00      	nop
 800253e:	f7ff fede 	bl	80022fe <LL_RCC_GetSysClkSource>
 8002542:	4603      	mov	r3, r0
 8002544:	2b04      	cmp	r3, #4
 8002546:	d1fa      	bne.n	800253e <Switch_On_HSI+0x22>
  return;
 8002548:	bf00      	nop
}
 800254a:	bd80      	pop	{r7, pc}

0800254c <LL_RCC_EnableRTC>:
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002558:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800255c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002560:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002564:	bf00      	nop
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <LL_AHB2_GRP1_EnableClock>:
{
 800256e:	b480      	push	{r7}
 8002570:	b085      	sub	sp, #20
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002576:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800257a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800257c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4313      	orrs	r3, r2
 8002584:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800258a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4013      	ands	r3, r2
 8002590:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002592:	68fb      	ldr	r3, [r7, #12]
}
 8002594:	bf00      	nop
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <LL_AHB3_GRP1_EnableClock>:
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80025a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80025b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4013      	ands	r3, r2
 80025c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025c4:	68fb      	ldr	r3, [r7, #12]
}
 80025c6:	bf00      	nop
 80025c8:	3714      	adds	r7, #20
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b085      	sub	sp, #20
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80025da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025de:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80025e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80025ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4013      	ands	r3, r2
 80025f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025f6:	68fb      	ldr	r3, [r7, #12]
}
 80025f8:	bf00      	nop
 80025fa:	3714      	adds	r7, #20
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800260c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002610:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002612:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4313      	orrs	r3, r2
 800261a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800261c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002620:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4013      	ands	r3, r2
 8002626:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002628:	68fb      	ldr	r3, [r7, #12]
}
 800262a:	bf00      	nop
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800263a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800263e:	f7ff ffaf 	bl	80025a0 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002642:	2200      	movs	r2, #0
 8002644:	2100      	movs	r1, #0
 8002646:	202e      	movs	r0, #46	; 0x2e
 8002648:	f000 fc2f 	bl	8002eaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800264c:	202e      	movs	r0, #46	; 0x2e
 800264e:	f000 fc46 	bl	8002ede <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
	...

08002658 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b094      	sub	sp, #80	; 0x50
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002660:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	609a      	str	r2, [r3, #8]
 800266c:	60da      	str	r2, [r3, #12]
 800266e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002670:	f107 030c 	add.w	r3, r7, #12
 8002674:	2230      	movs	r2, #48	; 0x30
 8002676:	2100      	movs	r1, #0
 8002678:	4618      	mov	r0, r3
 800267a:	f006 fe85 	bl	8009388 <memset>
  if(hi2c->Instance==I2C1)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a17      	ldr	r2, [pc, #92]	; (80026e0 <HAL_I2C_MspInit+0x88>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d126      	bne.n	80026d6 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002688:	2304      	movs	r3, #4
 800268a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800268c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002690:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002692:	f107 030c 	add.w	r3, r7, #12
 8002696:	4618      	mov	r0, r3
 8002698:	f003 f84a 	bl	8005730 <HAL_RCCEx_PeriphCLKConfig>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80026a2:	f7ff fda9 	bl	80021f8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026a6:	2002      	movs	r0, #2
 80026a8:	f7ff ff61 	bl	800256e <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80026ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026b2:	2312      	movs	r3, #18
 80026b4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ba:	2300      	movs	r3, #0
 80026bc:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026be:	2304      	movs	r3, #4
 80026c0:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80026c6:	4619      	mov	r1, r3
 80026c8:	4806      	ldr	r0, [pc, #24]	; (80026e4 <HAL_I2C_MspInit+0x8c>)
 80026ca:	f000 fdaf 	bl	800322c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026ce:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80026d2:	f7ff ff7e 	bl	80025d2 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80026d6:	bf00      	nop
 80026d8:	3750      	adds	r7, #80	; 0x50
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40005400 	.word	0x40005400
 80026e4:	48000400 	.word	0x48000400

080026e8 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a0d      	ldr	r2, [pc, #52]	; (800272c <HAL_IPCC_MspInit+0x44>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d113      	bne.n	8002722 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80026fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80026fe:	f7ff ff4f 	bl	80025a0 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002702:	2200      	movs	r2, #0
 8002704:	2100      	movs	r1, #0
 8002706:	202c      	movs	r0, #44	; 0x2c
 8002708:	f000 fbcf 	bl	8002eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800270c:	202c      	movs	r0, #44	; 0x2c
 800270e:	f000 fbe6 	bl	8002ede <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002712:	2200      	movs	r2, #0
 8002714:	2100      	movs	r1, #0
 8002716:	202d      	movs	r0, #45	; 0x2d
 8002718:	f000 fbc7 	bl	8002eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800271c:	202d      	movs	r0, #45	; 0x2d
 800271e:	f000 fbde 	bl	8002ede <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002722:	bf00      	nop
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	58000c00 	.word	0x58000c00

08002730 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08e      	sub	sp, #56	; 0x38
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002738:	f107 0308 	add.w	r3, r7, #8
 800273c:	2230      	movs	r2, #48	; 0x30
 800273e:	2100      	movs	r1, #0
 8002740:	4618      	mov	r0, r3
 8002742:	f006 fe21 	bl	8009388 <memset>
  if(hrtc->Instance==RTC)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a0e      	ldr	r2, [pc, #56]	; (8002784 <HAL_RTC_MspInit+0x54>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d115      	bne.n	800277c <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002750:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002754:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002756:	f44f 7380 	mov.w	r3, #256	; 0x100
 800275a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800275c:	f107 0308 	add.w	r3, r7, #8
 8002760:	4618      	mov	r0, r3
 8002762:	f002 ffe5 	bl	8005730 <HAL_RCCEx_PeriphCLKConfig>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800276c:	f7ff fd44 	bl	80021f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002770:	f7ff feec 	bl	800254c <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002774:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002778:	f7ff ff2b 	bl	80025d2 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800277c:	bf00      	nop
 800277e:	3738      	adds	r7, #56	; 0x38
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40002800 	.word	0x40002800

08002788 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b094      	sub	sp, #80	; 0x50
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002790:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	605a      	str	r2, [r3, #4]
 800279a:	609a      	str	r2, [r3, #8]
 800279c:	60da      	str	r2, [r3, #12]
 800279e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027a0:	f107 030c 	add.w	r3, r7, #12
 80027a4:	2230      	movs	r2, #48	; 0x30
 80027a6:	2100      	movs	r1, #0
 80027a8:	4618      	mov	r0, r3
 80027aa:	f006 fded 	bl	8009388 <memset>
  if(huart->Instance==USART1)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a17      	ldr	r2, [pc, #92]	; (8002810 <HAL_UART_MspInit+0x88>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d126      	bne.n	8002806 <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80027b8:	2301      	movs	r3, #1
 80027ba:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80027bc:	2300      	movs	r3, #0
 80027be:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027c0:	f107 030c 	add.w	r3, r7, #12
 80027c4:	4618      	mov	r0, r3
 80027c6:	f002 ffb3 	bl	8005730 <HAL_RCCEx_PeriphCLKConfig>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80027d0:	f7ff fd12 	bl	80021f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027d4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80027d8:	f7ff ff14 	bl	8002604 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027dc:	2001      	movs	r0, #1
 80027de:	f7ff fec6 	bl	800256e <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80027e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80027e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e8:	2302      	movs	r3, #2
 80027ea:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f0:	2300      	movs	r3, #0
 80027f2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027f4:	2307      	movs	r3, #7
 80027f6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80027fc:	4619      	mov	r1, r3
 80027fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002802:	f000 fd13 	bl	800322c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002806:	bf00      	nop
 8002808:	3750      	adds	r7, #80	; 0x50
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40013800 	.word	0x40013800

08002814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002818:	e7fe      	b.n	8002818 <NMI_Handler+0x4>

0800281a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800281a:	b480      	push	{r7}
 800281c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800281e:	e7fe      	b.n	800281e <HardFault_Handler+0x4>

08002820 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002824:	e7fe      	b.n	8002824 <MemManage_Handler+0x4>

08002826 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002826:	b480      	push	{r7}
 8002828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800282a:	e7fe      	b.n	800282a <BusFault_Handler+0x4>

0800282c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002830:	e7fe      	b.n	8002830 <UsageFault_Handler+0x4>

08002832 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002832:	b480      	push	{r7}
 8002834:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002836:	bf00      	nop
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002844:	bf00      	nop
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800284e:	b480      	push	{r7}
 8002850:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002852:	bf00      	nop
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002860:	f000 f9c0 	bl	8002be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002864:	bf00      	nop
 8002866:	bd80      	pop	{r7, pc}

08002868 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800286c:	2040      	movs	r0, #64	; 0x40
 800286e:	f000 fe45 	bl	80034fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}

08002876 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 800287a:	f006 f953 	bl	8008b24 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}

08002882 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002886:	f006 f985 	bl	8008b94 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 800288a:	bf00      	nop
 800288c:	bd80      	pop	{r7, pc}

0800288e <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002892:	f000 fe4b 	bl	800352c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002896:	bf00      	nop
 8002898:	bd80      	pop	{r7, pc}

0800289a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800289a:	b480      	push	{r7}
 800289c:	af00      	add	r7, sp, #0
	return 1;
 800289e:	2301      	movs	r3, #1
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <_kill>:

int _kill(int pid, int sig)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
 80028b2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80028b4:	f006 fd30 	bl	8009318 <__errno>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2216      	movs	r2, #22
 80028bc:	601a      	str	r2, [r3, #0]
	return -1;
 80028be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <_exit>:

void _exit (int status)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b082      	sub	sp, #8
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80028d2:	f04f 31ff 	mov.w	r1, #4294967295
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7ff ffe7 	bl	80028aa <_kill>
	while (1) {}		/* Make sure we hang here */
 80028dc:	e7fe      	b.n	80028dc <_exit+0x12>

080028de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b086      	sub	sp, #24
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	60f8      	str	r0, [r7, #12]
 80028e6:	60b9      	str	r1, [r7, #8]
 80028e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ea:	2300      	movs	r3, #0
 80028ec:	617b      	str	r3, [r7, #20]
 80028ee:	e00a      	b.n	8002906 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80028f0:	f3af 8000 	nop.w
 80028f4:	4601      	mov	r1, r0
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	1c5a      	adds	r2, r3, #1
 80028fa:	60ba      	str	r2, [r7, #8]
 80028fc:	b2ca      	uxtb	r2, r1
 80028fe:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	3301      	adds	r3, #1
 8002904:	617b      	str	r3, [r7, #20]
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	429a      	cmp	r2, r3
 800290c:	dbf0      	blt.n	80028f0 <_read+0x12>
	}

return len;
 800290e:	687b      	ldr	r3, [r7, #4]
}
 8002910:	4618      	mov	r0, r3
 8002912:	3718      	adds	r7, #24
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002924:	2300      	movs	r3, #0
 8002926:	617b      	str	r3, [r7, #20]
 8002928:	e009      	b.n	800293e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	60ba      	str	r2, [r7, #8]
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff f972 	bl	8001c1c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	3301      	adds	r3, #1
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	429a      	cmp	r2, r3
 8002944:	dbf1      	blt.n	800292a <_write+0x12>
	}
	return len;
 8002946:	687b      	ldr	r3, [r7, #4]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <_close>:

int _close(int file)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
	return -1;
 8002958:	f04f 33ff 	mov.w	r3, #4294967295
}
 800295c:	4618      	mov	r0, r3
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002978:	605a      	str	r2, [r3, #4]
	return 0;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <_isatty>:

int _isatty(int file)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
	return 1;
 8002990:	2301      	movs	r3, #1
}
 8002992:	4618      	mov	r0, r3
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800299e:	b480      	push	{r7}
 80029a0:	b085      	sub	sp, #20
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	60f8      	str	r0, [r7, #12]
 80029a6:	60b9      	str	r1, [r7, #8]
 80029a8:	607a      	str	r2, [r7, #4]
	return 0;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3714      	adds	r7, #20
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029c0:	4a14      	ldr	r2, [pc, #80]	; (8002a14 <_sbrk+0x5c>)
 80029c2:	4b15      	ldr	r3, [pc, #84]	; (8002a18 <_sbrk+0x60>)
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029cc:	4b13      	ldr	r3, [pc, #76]	; (8002a1c <_sbrk+0x64>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d102      	bne.n	80029da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029d4:	4b11      	ldr	r3, [pc, #68]	; (8002a1c <_sbrk+0x64>)
 80029d6:	4a12      	ldr	r2, [pc, #72]	; (8002a20 <_sbrk+0x68>)
 80029d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029da:	4b10      	ldr	r3, [pc, #64]	; (8002a1c <_sbrk+0x64>)
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4413      	add	r3, r2
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d207      	bcs.n	80029f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029e8:	f006 fc96 	bl	8009318 <__errno>
 80029ec:	4603      	mov	r3, r0
 80029ee:	220c      	movs	r2, #12
 80029f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029f2:	f04f 33ff 	mov.w	r3, #4294967295
 80029f6:	e009      	b.n	8002a0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029f8:	4b08      	ldr	r3, [pc, #32]	; (8002a1c <_sbrk+0x64>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029fe:	4b07      	ldr	r3, [pc, #28]	; (8002a1c <_sbrk+0x64>)
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4413      	add	r3, r2
 8002a06:	4a05      	ldr	r2, [pc, #20]	; (8002a1c <_sbrk+0x64>)
 8002a08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3718      	adds	r7, #24
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	20003000 	.word	0x20003000
 8002a18:	00000400 	.word	0x00000400
 8002a1c:	200004bc 	.word	0x200004bc
 8002a20:	20000610 	.word	0x20000610

08002a24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002a28:	4b22      	ldr	r3, [pc, #136]	; (8002ab4 <SystemInit+0x90>)
 8002a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2e:	4a21      	ldr	r2, [pc, #132]	; (8002ab4 <SystemInit+0x90>)
 8002a30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a42:	f043 0301 	orr.w	r3, r3, #1
 8002a46:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a4c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002a50:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a5c:	4b16      	ldr	r3, [pc, #88]	; (8002ab8 <SystemInit+0x94>)
 8002a5e:	4013      	ands	r3, r2
 8002a60:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a6e:	f023 0305 	bic.w	r3, r3, #5
 8002a72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a82:	f023 0301 	bic.w	r3, r3, #1
 8002a86:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a8e:	4a0b      	ldr	r2, [pc, #44]	; (8002abc <SystemInit+0x98>)
 8002a90:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aa0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	619a      	str	r2, [r3, #24]
}
 8002aaa:	bf00      	nop
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	e000ed00 	.word	0xe000ed00
 8002ab8:	faf6fefb 	.word	0xfaf6fefb
 8002abc:	22041000 	.word	0x22041000

08002ac0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002ac0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ac2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ac4:	3304      	adds	r3, #4

08002ac6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ac6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ac8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002aca:	d3f9      	bcc.n	8002ac0 <CopyDataInit>
  bx lr
 8002acc:	4770      	bx	lr

08002ace <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002ace:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002ad0:	3004      	adds	r0, #4

08002ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002ad2:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002ad4:	d3fb      	bcc.n	8002ace <FillZerobss>
  bx lr
 8002ad6:	4770      	bx	lr

08002ad8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ad8:	480c      	ldr	r0, [pc, #48]	; (8002b0c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002ada:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002adc:	f7ff ffa2 	bl	8002a24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002ae0:	480b      	ldr	r0, [pc, #44]	; (8002b10 <LoopForever+0x8>)
 8002ae2:	490c      	ldr	r1, [pc, #48]	; (8002b14 <LoopForever+0xc>)
 8002ae4:	4a0c      	ldr	r2, [pc, #48]	; (8002b18 <LoopForever+0x10>)
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	f7ff ffed 	bl	8002ac6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002aec:	480b      	ldr	r0, [pc, #44]	; (8002b1c <LoopForever+0x14>)
 8002aee:	490c      	ldr	r1, [pc, #48]	; (8002b20 <LoopForever+0x18>)
 8002af0:	2300      	movs	r3, #0
 8002af2:	f7ff ffee 	bl	8002ad2 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002af6:	480b      	ldr	r0, [pc, #44]	; (8002b24 <LoopForever+0x1c>)
 8002af8:	490b      	ldr	r1, [pc, #44]	; (8002b28 <LoopForever+0x20>)
 8002afa:	2300      	movs	r3, #0
 8002afc:	f7ff ffe9 	bl	8002ad2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002b00:	f006 fc10 	bl	8009324 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002b04:	f7ff f99a 	bl	8001e3c <main>

08002b08 <LoopForever>:

LoopForever:
  b LoopForever
 8002b08:	e7fe      	b.n	8002b08 <LoopForever>
 8002b0a:	0000      	.short	0x0000
  ldr   r0, =_estack
 8002b0c:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 8002b10:	20000004 	.word	0x20000004
 8002b14:	200001f4 	.word	0x200001f4
 8002b18:	0800c4c4 	.word	0x0800c4c4
  INIT_BSS _sbss, _ebss
 8002b1c:	200002dc 	.word	0x200002dc
 8002b20:	2000060c 	.word	0x2000060c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002b24:	200301e4 	.word	0x200301e4
 8002b28:	20030a67 	.word	0x20030a67

08002b2c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b2c:	e7fe      	b.n	8002b2c <ADC1_IRQHandler>
	...

08002b30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b3a:	4b0c      	ldr	r3, [pc, #48]	; (8002b6c <HAL_Init+0x3c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a0b      	ldr	r2, [pc, #44]	; (8002b6c <HAL_Init+0x3c>)
 8002b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b44:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b46:	2003      	movs	r0, #3
 8002b48:	f000 f9a4 	bl	8002e94 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b4c:	200f      	movs	r0, #15
 8002b4e:	f000 f80f 	bl	8002b70 <HAL_InitTick>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d002      	beq.n	8002b5e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	71fb      	strb	r3, [r7, #7]
 8002b5c:	e001      	b.n	8002b62 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002b5e:	f7ff fd6a 	bl	8002636 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002b62:	79fb      	ldrb	r3, [r7, #7]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	58004000 	.word	0x58004000

08002b70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002b7c:	4b17      	ldr	r3, [pc, #92]	; (8002bdc <HAL_InitTick+0x6c>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d024      	beq.n	8002bce <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002b84:	f002 fbbe 	bl	8005304 <HAL_RCC_GetHCLKFreq>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	4b14      	ldr	r3, [pc, #80]	; (8002bdc <HAL_InitTick+0x6c>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	4619      	mov	r1, r3
 8002b90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b94:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f000 f9ac 	bl	8002efa <HAL_SYSTICK_Config>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10f      	bne.n	8002bc8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b0f      	cmp	r3, #15
 8002bac:	d809      	bhi.n	8002bc2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bae:	2200      	movs	r2, #0
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb6:	f000 f978 	bl	8002eaa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002bba:	4a09      	ldr	r2, [pc, #36]	; (8002be0 <HAL_InitTick+0x70>)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6013      	str	r3, [r2, #0]
 8002bc0:	e007      	b.n	8002bd2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	73fb      	strb	r3, [r7, #15]
 8002bc6:	e004      	b.n	8002bd2 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	73fb      	strb	r3, [r7, #15]
 8002bcc:	e001      	b.n	8002bd2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	20000018 	.word	0x20000018
 8002be0:	20000014 	.word	0x20000014

08002be4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002be8:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <HAL_IncTick+0x20>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	461a      	mov	r2, r3
 8002bee:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <HAL_IncTick+0x24>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	4a04      	ldr	r2, [pc, #16]	; (8002c08 <HAL_IncTick+0x24>)
 8002bf6:	6013      	str	r3, [r2, #0]
}
 8002bf8:	bf00      	nop
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	20000018 	.word	0x20000018
 8002c08:	200004c0 	.word	0x200004c0

08002c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c10:	4b03      	ldr	r3, [pc, #12]	; (8002c20 <HAL_GetTick+0x14>)
 8002c12:	681b      	ldr	r3, [r3, #0]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	200004c0 	.word	0x200004c0

08002c24 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002c28:	4b03      	ldr	r3, [pc, #12]	; (8002c38 <HAL_GetTickPrio+0x14>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	20000014 	.word	0x20000014

08002c3c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8002c40:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <HAL_SuspendTick+0x1c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a04      	ldr	r2, [pc, #16]	; (8002c58 <HAL_SuspendTick+0x1c>)
 8002c46:	f023 0302 	bic.w	r3, r3, #2
 8002c4a:	6013      	str	r3, [r2, #0]
}
 8002c4c:	bf00      	nop
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	e000e010 	.word	0xe000e010

08002c5c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8002c60:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <HAL_ResumeTick+0x1c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a04      	ldr	r2, [pc, #16]	; (8002c78 <HAL_ResumeTick+0x1c>)
 8002c66:	f043 0302 	orr.w	r3, r3, #2
 8002c6a:	6013      	str	r3, [r2, #0]
}
 8002c6c:	bf00      	nop
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	e000e010 	.word	0xe000e010

08002c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c8c:	4b0c      	ldr	r3, [pc, #48]	; (8002cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c92:	68ba      	ldr	r2, [r7, #8]
 8002c94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c98:	4013      	ands	r3, r2
 8002c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ca4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cae:	4a04      	ldr	r2, [pc, #16]	; (8002cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	60d3      	str	r3, [r2, #12]
}
 8002cb4:	bf00      	nop
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	e000ed00 	.word	0xe000ed00

08002cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cc8:	4b04      	ldr	r3, [pc, #16]	; (8002cdc <__NVIC_GetPriorityGrouping+0x18>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	0a1b      	lsrs	r3, r3, #8
 8002cce:	f003 0307 	and.w	r3, r3, #7
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr
 8002cdc:	e000ed00 	.word	0xe000ed00

08002ce0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	db0b      	blt.n	8002d0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cf2:	79fb      	ldrb	r3, [r7, #7]
 8002cf4:	f003 021f 	and.w	r2, r3, #31
 8002cf8:	4907      	ldr	r1, [pc, #28]	; (8002d18 <__NVIC_EnableIRQ+0x38>)
 8002cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfe:	095b      	lsrs	r3, r3, #5
 8002d00:	2001      	movs	r0, #1
 8002d02:	fa00 f202 	lsl.w	r2, r0, r2
 8002d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	e000e100 	.word	0xe000e100

08002d1c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	4603      	mov	r3, r0
 8002d24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	db0c      	blt.n	8002d48 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d2e:	79fb      	ldrb	r3, [r7, #7]
 8002d30:	f003 021f 	and.w	r2, r3, #31
 8002d34:	4907      	ldr	r1, [pc, #28]	; (8002d54 <__NVIC_SetPendingIRQ+0x38>)
 8002d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3a:	095b      	lsrs	r3, r3, #5
 8002d3c:	2001      	movs	r0, #1
 8002d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d42:	3340      	adds	r3, #64	; 0x40
 8002d44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	e000e100 	.word	0xe000e100

08002d58 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	db0c      	blt.n	8002d84 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d6a:	79fb      	ldrb	r3, [r7, #7]
 8002d6c:	f003 021f 	and.w	r2, r3, #31
 8002d70:	4907      	ldr	r1, [pc, #28]	; (8002d90 <__NVIC_ClearPendingIRQ+0x38>)
 8002d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d76:	095b      	lsrs	r3, r3, #5
 8002d78:	2001      	movs	r0, #1
 8002d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d7e:	3360      	adds	r3, #96	; 0x60
 8002d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	e000e100 	.word	0xe000e100

08002d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	6039      	str	r1, [r7, #0]
 8002d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	db0a      	blt.n	8002dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	490c      	ldr	r1, [pc, #48]	; (8002de0 <__NVIC_SetPriority+0x4c>)
 8002dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db2:	0112      	lsls	r2, r2, #4
 8002db4:	b2d2      	uxtb	r2, r2
 8002db6:	440b      	add	r3, r1
 8002db8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dbc:	e00a      	b.n	8002dd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	b2da      	uxtb	r2, r3
 8002dc2:	4908      	ldr	r1, [pc, #32]	; (8002de4 <__NVIC_SetPriority+0x50>)
 8002dc4:	79fb      	ldrb	r3, [r7, #7]
 8002dc6:	f003 030f 	and.w	r3, r3, #15
 8002dca:	3b04      	subs	r3, #4
 8002dcc:	0112      	lsls	r2, r2, #4
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	761a      	strb	r2, [r3, #24]
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	e000e100 	.word	0xe000e100
 8002de4:	e000ed00 	.word	0xe000ed00

08002de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b089      	sub	sp, #36	; 0x24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	f1c3 0307 	rsb	r3, r3, #7
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	bf28      	it	cs
 8002e06:	2304      	movcs	r3, #4
 8002e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	3304      	adds	r3, #4
 8002e0e:	2b06      	cmp	r3, #6
 8002e10:	d902      	bls.n	8002e18 <NVIC_EncodePriority+0x30>
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	3b03      	subs	r3, #3
 8002e16:	e000      	b.n	8002e1a <NVIC_EncodePriority+0x32>
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	43da      	mvns	r2, r3
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	401a      	ands	r2, r3
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e30:	f04f 31ff 	mov.w	r1, #4294967295
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3a:	43d9      	mvns	r1, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e40:	4313      	orrs	r3, r2
         );
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3724      	adds	r7, #36	; 0x24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
	...

08002e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e60:	d301      	bcc.n	8002e66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e62:	2301      	movs	r3, #1
 8002e64:	e00f      	b.n	8002e86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e66:	4a0a      	ldr	r2, [pc, #40]	; (8002e90 <SysTick_Config+0x40>)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e6e:	210f      	movs	r1, #15
 8002e70:	f04f 30ff 	mov.w	r0, #4294967295
 8002e74:	f7ff ff8e 	bl	8002d94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e78:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <SysTick_Config+0x40>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e7e:	4b04      	ldr	r3, [pc, #16]	; (8002e90 <SysTick_Config+0x40>)
 8002e80:	2207      	movs	r2, #7
 8002e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	e000e010 	.word	0xe000e010

08002e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f7ff feed 	bl	8002c7c <__NVIC_SetPriorityGrouping>
}
 8002ea2:	bf00      	nop
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b086      	sub	sp, #24
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	60b9      	str	r1, [r7, #8]
 8002eb4:	607a      	str	r2, [r7, #4]
 8002eb6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002eb8:	f7ff ff04 	bl	8002cc4 <__NVIC_GetPriorityGrouping>
 8002ebc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	68b9      	ldr	r1, [r7, #8]
 8002ec2:	6978      	ldr	r0, [r7, #20]
 8002ec4:	f7ff ff90 	bl	8002de8 <NVIC_EncodePriority>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ece:	4611      	mov	r1, r2
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff ff5f 	bl	8002d94 <__NVIC_SetPriority>
}
 8002ed6:	bf00      	nop
 8002ed8:	3718      	adds	r7, #24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b082      	sub	sp, #8
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff fef7 	bl	8002ce0 <__NVIC_EnableIRQ>
}
 8002ef2:	bf00      	nop
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b082      	sub	sp, #8
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7ff ffa4 	bl	8002e50 <SysTick_Config>
 8002f08:	4603      	mov	r3, r0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b082      	sub	sp, #8
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	4603      	mov	r3, r0
 8002f1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff fefb 	bl	8002d1c <__NVIC_SetPendingIRQ>
}
 8002f26:	bf00      	nop
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b082      	sub	sp, #8
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	4603      	mov	r3, r0
 8002f36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff ff0b 	bl	8002d58 <__NVIC_ClearPendingIRQ>
}
 8002f42:	bf00      	nop
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
	...

08002f4c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002f52:	2300      	movs	r3, #0
 8002f54:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002f56:	4b0b      	ldr	r3, [pc, #44]	; (8002f84 <HAL_FLASH_Unlock+0x38>)
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	da0b      	bge.n	8002f76 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002f5e:	4b09      	ldr	r3, [pc, #36]	; (8002f84 <HAL_FLASH_Unlock+0x38>)
 8002f60:	4a09      	ldr	r2, [pc, #36]	; (8002f88 <HAL_FLASH_Unlock+0x3c>)
 8002f62:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002f64:	4b07      	ldr	r3, [pc, #28]	; (8002f84 <HAL_FLASH_Unlock+0x38>)
 8002f66:	4a09      	ldr	r2, [pc, #36]	; (8002f8c <HAL_FLASH_Unlock+0x40>)
 8002f68:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002f6a:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <HAL_FLASH_Unlock+0x38>)
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	da01      	bge.n	8002f76 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002f76:	79fb      	ldrb	r3, [r7, #7]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	58004000 	.word	0x58004000
 8002f88:	45670123 	.word	0x45670123
 8002f8c:	cdef89ab 	.word	0xcdef89ab

08002f90 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002f96:	2300      	movs	r3, #0
 8002f98:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002f9a:	4b09      	ldr	r3, [pc, #36]	; (8002fc0 <HAL_FLASH_Lock+0x30>)
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	4a08      	ldr	r2, [pc, #32]	; (8002fc0 <HAL_FLASH_Lock+0x30>)
 8002fa0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fa4:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8002fa6:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <HAL_FLASH_Lock+0x30>)
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	db01      	blt.n	8002fb2 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8002fb2:	79fb      	ldrb	r3, [r7, #7]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	58004000 	.word	0x58004000

08002fc4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8002fcc:	f7ff fe1e 	bl	8002c0c <HAL_GetTick>
 8002fd0:	60b8      	str	r0, [r7, #8]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002fd2:	e009      	b.n	8002fe8 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8002fd4:	f7ff fe1a 	bl	8002c0c <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d801      	bhi.n	8002fe8 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e054      	b.n	8003092 <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002fe8:	4b2c      	ldr	r3, [pc, #176]	; (800309c <FLASH_WaitForLastOperation+0xd8>)
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ff4:	d0ee      	beq.n	8002fd4 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = FLASH->SR;
 8002ff6:	4b29      	ldr	r3, [pc, #164]	; (800309c <FLASH_WaitForLastOperation+0xd8>)
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	60fb      	str	r3, [r7, #12]

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	2b00      	cmp	r3, #0
 8003004:	d002      	beq.n	800300c <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003006:	4b25      	ldr	r3, [pc, #148]	; (800309c <FLASH_WaitForLastOperation+0xd8>)
 8003008:	2201      	movs	r2, #1
 800300a:	611a      	str	r2, [r3, #16]

  /* Workaround for BZ 70309 :
     - OPTVERR is always set at power-up due to failure of engi bytes checking
     - FLASH_WaitForLastOperation() is called at the beginning of erase or program
       operations, so the bit will be clear when performing first operation */
  if ((error & FLASH_FLAG_OPTVERR) != 0U)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d007      	beq.n	8003026 <FLASH_WaitForLastOperation+0x62>
  {
    /* Clear FLASH OPTVERR bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003016:	4b21      	ldr	r3, [pc, #132]	; (800309c <FLASH_WaitForLastOperation+0xd8>)
 8003018:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800301c:	611a      	str	r2, [r3, #16]

    /* Clear OPTVERR bit in "error" variable to not treat it as error */
    error &= ~FLASH_FLAG_OPTVERR;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003024:	60fb      	str	r3, [r7, #12]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800302c:	4013      	ands	r3, r2
 800302e:	60fb      	str	r3, [r7, #12]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d007      	beq.n	800304a <FLASH_WaitForLastOperation+0x86>
 800303a:	4b18      	ldr	r3, [pc, #96]	; (800309c <FLASH_WaitForLastOperation+0xd8>)
 800303c:	699a      	ldr	r2, [r3, #24]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003044:	4915      	ldr	r1, [pc, #84]	; (800309c <FLASH_WaitForLastOperation+0xd8>)
 8003046:	4313      	orrs	r3, r2
 8003048:	618b      	str	r3, [r1, #24]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d004      	beq.n	800305e <FLASH_WaitForLastOperation+0x9a>
 8003054:	4a11      	ldr	r2, [pc, #68]	; (800309c <FLASH_WaitForLastOperation+0xd8>)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800305c:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00e      	beq.n	8003082 <FLASH_WaitForLastOperation+0xbe>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8003064:	4a0e      	ldr	r2, [pc, #56]	; (80030a0 <FLASH_WaitForLastOperation+0xdc>)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e011      	b.n	8003092 <FLASH_WaitForLastOperation+0xce>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800306e:	f7ff fdcd 	bl	8002c0c <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	429a      	cmp	r2, r3
 800307c:	d801      	bhi.n	8003082 <FLASH_WaitForLastOperation+0xbe>
    {
      return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e007      	b.n	8003092 <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8003082:	4b06      	ldr	r3, [pc, #24]	; (800309c <FLASH_WaitForLastOperation+0xd8>)
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800308a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800308e:	d0ee      	beq.n	800306e <FLASH_WaitForLastOperation+0xaa>
    }
  }

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	58004000 	.word	0x58004000
 80030a0:	200004c4 	.word	0x200004c4

080030a4 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80030ae:	4b24      	ldr	r3, [pc, #144]	; (8003140 <HAL_FLASHEx_Erase+0x9c>)
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d101      	bne.n	80030ba <HAL_FLASHEx_Erase+0x16>
 80030b6:	2302      	movs	r3, #2
 80030b8:	e03d      	b.n	8003136 <HAL_FLASHEx_Erase+0x92>
 80030ba:	4b21      	ldr	r3, [pc, #132]	; (8003140 <HAL_FLASHEx_Erase+0x9c>)
 80030bc:	2201      	movs	r2, #1
 80030be:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80030c0:	4b1f      	ldr	r3, [pc, #124]	; (8003140 <HAL_FLASHEx_Erase+0x9c>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80030c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030ca:	f7ff ff7b 	bl	8002fc4 <FLASH_WaitForLastOperation>
 80030ce:	4603      	mov	r3, r0
 80030d0:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d12a      	bne.n	800312e <HAL_FLASHEx_Erase+0x8a>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d124      	bne.n	800312a <HAL_FLASHEx_Erase+0x86>
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	f04f 32ff 	mov.w	r2, #4294967295
 80030e6:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	60bb      	str	r3, [r7, #8]
 80030ee:	e012      	b.n	8003116 <HAL_FLASHEx_Erase+0x72>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 80030f0:	68b8      	ldr	r0, [r7, #8]
 80030f2:	f000 f827 	bl	8003144 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80030f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030fa:	f7ff ff63 	bl	8002fc4 <FLASH_WaitForLastOperation>
 80030fe:	4603      	mov	r3, r0
 8003100:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8003102:	7bfb      	ldrb	r3, [r7, #15]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <HAL_FLASHEx_Erase+0x6c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	601a      	str	r2, [r3, #0]
          break;
 800310e:	e00a      	b.n	8003126 <HAL_FLASHEx_Erase+0x82>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	3301      	adds	r3, #1
 8003114:	60bb      	str	r3, [r7, #8]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	4413      	add	r3, r2
 8003120:	68ba      	ldr	r2, [r7, #8]
 8003122:	429a      	cmp	r2, r3
 8003124:	d3e4      	bcc.n	80030f0 <HAL_FLASHEx_Erase+0x4c>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8003126:	f000 f86f 	bl	8003208 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800312a:	f000 f825 	bl	8003178 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800312e:	4b04      	ldr	r3, [pc, #16]	; (8003140 <HAL_FLASHEx_Erase+0x9c>)
 8003130:	2200      	movs	r2, #0
 8003132:	701a      	strb	r2, [r3, #0]

  return status;
 8003134:	7bfb      	ldrb	r3, [r7, #15]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	200004c4 	.word	0x200004c4

08003144 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 800314c:	4b09      	ldr	r3, [pc, #36]	; (8003174 <FLASH_PageErase+0x30>)
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	4313      	orrs	r3, r2
 800315a:	4a06      	ldr	r2, [pc, #24]	; (8003174 <FLASH_PageErase+0x30>)
 800315c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003160:	f043 0302 	orr.w	r3, r3, #2
 8003164:	6153      	str	r3, [r2, #20]
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	58004000 	.word	0x58004000

08003178 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
static void FLASH_FlushCaches(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == FLASH_ACR_ICEN)
 800317c:	4b21      	ldr	r3, [pc, #132]	; (8003204 <FLASH_FlushCaches+0x8c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003188:	d117      	bne.n	80031ba <FLASH_FlushCaches+0x42>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800318a:	4b1e      	ldr	r3, [pc, #120]	; (8003204 <FLASH_FlushCaches+0x8c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a1d      	ldr	r2, [pc, #116]	; (8003204 <FLASH_FlushCaches+0x8c>)
 8003190:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003194:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003196:	4b1b      	ldr	r3, [pc, #108]	; (8003204 <FLASH_FlushCaches+0x8c>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a1a      	ldr	r2, [pc, #104]	; (8003204 <FLASH_FlushCaches+0x8c>)
 800319c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031a0:	6013      	str	r3, [r2, #0]
 80031a2:	4b18      	ldr	r3, [pc, #96]	; (8003204 <FLASH_FlushCaches+0x8c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a17      	ldr	r2, [pc, #92]	; (8003204 <FLASH_FlushCaches+0x8c>)
 80031a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031ac:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031ae:	4b15      	ldr	r3, [pc, #84]	; (8003204 <FLASH_FlushCaches+0x8c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a14      	ldr	r2, [pc, #80]	; (8003204 <FLASH_FlushCaches+0x8c>)
 80031b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031b8:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == FLASH_ACR_DCEN)
 80031ba:	4b12      	ldr	r3, [pc, #72]	; (8003204 <FLASH_FlushCaches+0x8c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c6:	d117      	bne.n	80031f8 <FLASH_FlushCaches+0x80>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80031c8:	4b0e      	ldr	r3, [pc, #56]	; (8003204 <FLASH_FlushCaches+0x8c>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a0d      	ldr	r2, [pc, #52]	; (8003204 <FLASH_FlushCaches+0x8c>)
 80031ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031d2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80031d4:	4b0b      	ldr	r3, [pc, #44]	; (8003204 <FLASH_FlushCaches+0x8c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a0a      	ldr	r2, [pc, #40]	; (8003204 <FLASH_FlushCaches+0x8c>)
 80031da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031de:	6013      	str	r3, [r2, #0]
 80031e0:	4b08      	ldr	r3, [pc, #32]	; (8003204 <FLASH_FlushCaches+0x8c>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a07      	ldr	r2, [pc, #28]	; (8003204 <FLASH_FlushCaches+0x8c>)
 80031e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031ea:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80031ec:	4b05      	ldr	r3, [pc, #20]	; (8003204 <FLASH_FlushCaches+0x8c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a04      	ldr	r2, [pc, #16]	; (8003204 <FLASH_FlushCaches+0x8c>)
 80031f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031f6:	6013      	str	r3, [r2, #0]
  }
}
 80031f8:	bf00      	nop
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	58004000 	.word	0x58004000

08003208 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800320c:	4b06      	ldr	r3, [pc, #24]	; (8003228 <FLASH_AcknowledgePageErase+0x20>)
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	4a05      	ldr	r2, [pc, #20]	; (8003228 <FLASH_AcknowledgePageErase+0x20>)
 8003212:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003216:	f023 0302 	bic.w	r3, r3, #2
 800321a:	6153      	str	r3, [r2, #20]
}
 800321c:	bf00      	nop
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	58004000 	.word	0x58004000

0800322c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800322c:	b480      	push	{r7}
 800322e:	b087      	sub	sp, #28
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003236:	2300      	movs	r3, #0
 8003238:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800323a:	e146      	b.n	80034ca <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	2101      	movs	r1, #1
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	fa01 f303 	lsl.w	r3, r1, r3
 8003248:	4013      	ands	r3, r2
 800324a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 8138 	beq.w	80034c4 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f003 0303 	and.w	r3, r3, #3
 800325c:	2b01      	cmp	r3, #1
 800325e:	d005      	beq.n	800326c <HAL_GPIO_Init+0x40>
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 0303 	and.w	r3, r3, #3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d130      	bne.n	80032ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	2203      	movs	r2, #3
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	43db      	mvns	r3, r3
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	4013      	ands	r3, r2
 8003282:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	68da      	ldr	r2, [r3, #12]
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	4313      	orrs	r3, r2
 8003294:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032a2:	2201      	movs	r2, #1
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	43db      	mvns	r3, r3
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	4013      	ands	r3, r2
 80032b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	091b      	lsrs	r3, r3, #4
 80032b8:	f003 0201 	and.w	r2, r3, #1
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f003 0303 	and.w	r3, r3, #3
 80032d6:	2b03      	cmp	r3, #3
 80032d8:	d017      	beq.n	800330a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	2203      	movs	r2, #3
 80032e6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ea:	43db      	mvns	r3, r3
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	4013      	ands	r3, r2
 80032f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	689a      	ldr	r2, [r3, #8]
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	4313      	orrs	r3, r2
 8003302:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f003 0303 	and.w	r3, r3, #3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d123      	bne.n	800335e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	08da      	lsrs	r2, r3, #3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	3208      	adds	r2, #8
 800331e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003322:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	220f      	movs	r2, #15
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	43db      	mvns	r3, r3
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	4013      	ands	r3, r2
 8003338:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	691a      	ldr	r2, [r3, #16]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	4313      	orrs	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	08da      	lsrs	r2, r3, #3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3208      	adds	r2, #8
 8003358:	6939      	ldr	r1, [r7, #16]
 800335a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	2203      	movs	r2, #3
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	43db      	mvns	r3, r3
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	4013      	ands	r3, r2
 8003374:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f003 0203 	and.w	r2, r3, #3
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	4313      	orrs	r3, r2
 800338a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800339a:	2b00      	cmp	r3, #0
 800339c:	f000 8092 	beq.w	80034c4 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80033a0:	4a51      	ldr	r2, [pc, #324]	; (80034e8 <HAL_GPIO_Init+0x2bc>)
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	089b      	lsrs	r3, r3, #2
 80033a6:	3302      	adds	r3, #2
 80033a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f003 0303 	and.w	r3, r3, #3
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	220f      	movs	r2, #15
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	43db      	mvns	r3, r3
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	4013      	ands	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80033ca:	d013      	beq.n	80033f4 <HAL_GPIO_Init+0x1c8>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a47      	ldr	r2, [pc, #284]	; (80034ec <HAL_GPIO_Init+0x2c0>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d00d      	beq.n	80033f0 <HAL_GPIO_Init+0x1c4>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a46      	ldr	r2, [pc, #280]	; (80034f0 <HAL_GPIO_Init+0x2c4>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d007      	beq.n	80033ec <HAL_GPIO_Init+0x1c0>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a45      	ldr	r2, [pc, #276]	; (80034f4 <HAL_GPIO_Init+0x2c8>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d101      	bne.n	80033e8 <HAL_GPIO_Init+0x1bc>
 80033e4:	2304      	movs	r3, #4
 80033e6:	e006      	b.n	80033f6 <HAL_GPIO_Init+0x1ca>
 80033e8:	2307      	movs	r3, #7
 80033ea:	e004      	b.n	80033f6 <HAL_GPIO_Init+0x1ca>
 80033ec:	2302      	movs	r3, #2
 80033ee:	e002      	b.n	80033f6 <HAL_GPIO_Init+0x1ca>
 80033f0:	2301      	movs	r3, #1
 80033f2:	e000      	b.n	80033f6 <HAL_GPIO_Init+0x1ca>
 80033f4:	2300      	movs	r3, #0
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	f002 0203 	and.w	r2, r2, #3
 80033fc:	0092      	lsls	r2, r2, #2
 80033fe:	4093      	lsls	r3, r2
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	4313      	orrs	r3, r2
 8003404:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003406:	4938      	ldr	r1, [pc, #224]	; (80034e8 <HAL_GPIO_Init+0x2bc>)
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	089b      	lsrs	r3, r3, #2
 800340c:	3302      	adds	r3, #2
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003414:	4b38      	ldr	r3, [pc, #224]	; (80034f8 <HAL_GPIO_Init+0x2cc>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	43db      	mvns	r3, r3
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	4013      	ands	r3, r2
 8003422:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	4313      	orrs	r3, r2
 8003436:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003438:	4a2f      	ldr	r2, [pc, #188]	; (80034f8 <HAL_GPIO_Init+0x2cc>)
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800343e:	4b2e      	ldr	r3, [pc, #184]	; (80034f8 <HAL_GPIO_Init+0x2cc>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	43db      	mvns	r3, r3
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	4013      	ands	r3, r2
 800344c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	4313      	orrs	r3, r2
 8003460:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003462:	4a25      	ldr	r2, [pc, #148]	; (80034f8 <HAL_GPIO_Init+0x2cc>)
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003468:	4b23      	ldr	r3, [pc, #140]	; (80034f8 <HAL_GPIO_Init+0x2cc>)
 800346a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800346e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	43db      	mvns	r3, r3
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	4013      	ands	r3, r2
 8003478:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	4313      	orrs	r3, r2
 800348c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800348e:	4a1a      	ldr	r2, [pc, #104]	; (80034f8 <HAL_GPIO_Init+0x2cc>)
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003496:	4b18      	ldr	r3, [pc, #96]	; (80034f8 <HAL_GPIO_Init+0x2cc>)
 8003498:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800349c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	43db      	mvns	r3, r3
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	4013      	ands	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d003      	beq.n	80034bc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80034bc:	4a0e      	ldr	r2, [pc, #56]	; (80034f8 <HAL_GPIO_Init+0x2cc>)
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	3301      	adds	r3, #1
 80034c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	fa22 f303 	lsr.w	r3, r2, r3
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f47f aeb1 	bne.w	800323c <HAL_GPIO_Init+0x10>
  }
}
 80034da:	bf00      	nop
 80034dc:	bf00      	nop
 80034de:	371c      	adds	r7, #28
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	40010000 	.word	0x40010000
 80034ec:	48000400 	.word	0x48000400
 80034f0:	48000800 	.word	0x48000800
 80034f4:	48001000 	.word	0x48001000
 80034f8:	58000800 	.word	0x58000800

080034fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	4603      	mov	r3, r0
 8003504:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003506:	4b08      	ldr	r3, [pc, #32]	; (8003528 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	88fb      	ldrh	r3, [r7, #6]
 800350c:	4013      	ands	r3, r2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d006      	beq.n	8003520 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003512:	4a05      	ldr	r2, [pc, #20]	; (8003528 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003514:	88fb      	ldrh	r3, [r7, #6]
 8003516:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003518:	88fb      	ldrh	r3, [r7, #6]
 800351a:	4618      	mov	r0, r3
 800351c:	f7fe fe58 	bl	80021d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003520:	bf00      	nop
 8003522:	3708      	adds	r7, #8
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	58000800 	.word	0x58000800

0800352c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003532:	4b0a      	ldr	r3, [pc, #40]	; (800355c <HAL_HSEM_IRQHandler+0x30>)
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003538:	4b08      	ldr	r3, [pc, #32]	; (800355c <HAL_HSEM_IRQHandler+0x30>)
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	43db      	mvns	r3, r3
 8003540:	4906      	ldr	r1, [pc, #24]	; (800355c <HAL_HSEM_IRQHandler+0x30>)
 8003542:	4013      	ands	r3, r2
 8003544:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003546:	4a05      	ldr	r2, [pc, #20]	; (800355c <HAL_HSEM_IRQHandler+0x30>)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f807 	bl	8003560 <HAL_HSEM_FreeCallback>
}
 8003552:	bf00      	nop
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	58001500 	.word	0x58001500

08003560 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e081      	b.n	800368a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d106      	bne.n	80035a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7ff f85c 	bl	8002658 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2224      	movs	r2, #36	; 0x24
 80035a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0201 	bic.w	r2, r2, #1
 80035b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d107      	bne.n	80035ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	689a      	ldr	r2, [r3, #8]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035ea:	609a      	str	r2, [r3, #8]
 80035ec:	e006      	b.n	80035fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80035fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	2b02      	cmp	r3, #2
 8003602:	d104      	bne.n	800360e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800360c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	6812      	ldr	r2, [r2, #0]
 8003618:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800361c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003620:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68da      	ldr	r2, [r3, #12]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003630:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	691a      	ldr	r2, [r3, #16]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	430a      	orrs	r2, r1
 800364a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	69d9      	ldr	r1, [r3, #28]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a1a      	ldr	r2, [r3, #32]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0201 	orr.w	r2, r2, #1
 800366a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2220      	movs	r2, #32
 8003676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
	...

08003694 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b088      	sub	sp, #32
 8003698:	af02      	add	r7, sp, #8
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	607a      	str	r2, [r7, #4]
 800369e:	461a      	mov	r2, r3
 80036a0:	460b      	mov	r3, r1
 80036a2:	817b      	strh	r3, [r7, #10]
 80036a4:	4613      	mov	r3, r2
 80036a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b20      	cmp	r3, #32
 80036b2:	f040 80da 	bne.w	800386a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d101      	bne.n	80036c4 <HAL_I2C_Master_Transmit+0x30>
 80036c0:	2302      	movs	r3, #2
 80036c2:	e0d3      	b.n	800386c <HAL_I2C_Master_Transmit+0x1d8>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036cc:	f7ff fa9e 	bl	8002c0c <HAL_GetTick>
 80036d0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	2319      	movs	r3, #25
 80036d8:	2201      	movs	r2, #1
 80036da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f000 f9e6 	bl	8003ab0 <I2C_WaitOnFlagUntilTimeout>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e0be      	b.n	800386c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2221      	movs	r2, #33	; 0x21
 80036f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2210      	movs	r2, #16
 80036fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	893a      	ldrh	r2, [r7, #8]
 800370e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800371a:	b29b      	uxth	r3, r3
 800371c:	2bff      	cmp	r3, #255	; 0xff
 800371e:	d90e      	bls.n	800373e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	22ff      	movs	r2, #255	; 0xff
 8003724:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800372a:	b2da      	uxtb	r2, r3
 800372c:	8979      	ldrh	r1, [r7, #10]
 800372e:	4b51      	ldr	r3, [pc, #324]	; (8003874 <HAL_I2C_Master_Transmit+0x1e0>)
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 fbdc 	bl	8003ef4 <I2C_TransferConfig>
 800373c:	e06c      	b.n	8003818 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003742:	b29a      	uxth	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800374c:	b2da      	uxtb	r2, r3
 800374e:	8979      	ldrh	r1, [r7, #10]
 8003750:	4b48      	ldr	r3, [pc, #288]	; (8003874 <HAL_I2C_Master_Transmit+0x1e0>)
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f000 fbcb 	bl	8003ef4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800375e:	e05b      	b.n	8003818 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	6a39      	ldr	r1, [r7, #32]
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 f9e3 	bl	8003b30 <I2C_WaitOnTXISFlagUntilTimeout>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e07b      	b.n	800386c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003778:	781a      	ldrb	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003784:	1c5a      	adds	r2, r3, #1
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800378e:	b29b      	uxth	r3, r3
 8003790:	3b01      	subs	r3, #1
 8003792:	b29a      	uxth	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379c:	3b01      	subs	r3, #1
 800379e:	b29a      	uxth	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d034      	beq.n	8003818 <HAL_I2C_Master_Transmit+0x184>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d130      	bne.n	8003818 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	6a3b      	ldr	r3, [r7, #32]
 80037bc:	2200      	movs	r2, #0
 80037be:	2180      	movs	r1, #128	; 0x80
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f000 f975 	bl	8003ab0 <I2C_WaitOnFlagUntilTimeout>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e04d      	b.n	800386c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	2bff      	cmp	r3, #255	; 0xff
 80037d8:	d90e      	bls.n	80037f8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	22ff      	movs	r2, #255	; 0xff
 80037de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	8979      	ldrh	r1, [r7, #10]
 80037e8:	2300      	movs	r3, #0
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 fb7f 	bl	8003ef4 <I2C_TransferConfig>
 80037f6:	e00f      	b.n	8003818 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003806:	b2da      	uxtb	r2, r3
 8003808:	8979      	ldrh	r1, [r7, #10]
 800380a:	2300      	movs	r3, #0
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	f000 fb6e 	bl	8003ef4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381c:	b29b      	uxth	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d19e      	bne.n	8003760 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	6a39      	ldr	r1, [r7, #32]
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f000 f9c2 	bl	8003bb0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e01a      	b.n	800386c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2220      	movs	r2, #32
 800383c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6859      	ldr	r1, [r3, #4]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	4b0b      	ldr	r3, [pc, #44]	; (8003878 <HAL_I2C_Master_Transmit+0x1e4>)
 800384a:	400b      	ands	r3, r1
 800384c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2220      	movs	r2, #32
 8003852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003866:	2300      	movs	r3, #0
 8003868:	e000      	b.n	800386c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800386a:	2302      	movs	r3, #2
  }
}
 800386c:	4618      	mov	r0, r3
 800386e:	3718      	adds	r7, #24
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	80002000 	.word	0x80002000
 8003878:	fe00e800 	.word	0xfe00e800

0800387c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b088      	sub	sp, #32
 8003880:	af02      	add	r7, sp, #8
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	607a      	str	r2, [r7, #4]
 8003886:	461a      	mov	r2, r3
 8003888:	460b      	mov	r3, r1
 800388a:	817b      	strh	r3, [r7, #10]
 800388c:	4613      	mov	r3, r2
 800388e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b20      	cmp	r3, #32
 800389a:	f040 80db 	bne.w	8003a54 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d101      	bne.n	80038ac <HAL_I2C_Master_Receive+0x30>
 80038a8:	2302      	movs	r3, #2
 80038aa:	e0d4      	b.n	8003a56 <HAL_I2C_Master_Receive+0x1da>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038b4:	f7ff f9aa 	bl	8002c0c <HAL_GetTick>
 80038b8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	2319      	movs	r3, #25
 80038c0:	2201      	movs	r2, #1
 80038c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 f8f2 	bl	8003ab0 <I2C_WaitOnFlagUntilTimeout>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e0bf      	b.n	8003a56 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2222      	movs	r2, #34	; 0x22
 80038da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2210      	movs	r2, #16
 80038e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	893a      	ldrh	r2, [r7, #8]
 80038f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003902:	b29b      	uxth	r3, r3
 8003904:	2bff      	cmp	r3, #255	; 0xff
 8003906:	d90e      	bls.n	8003926 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	22ff      	movs	r2, #255	; 0xff
 800390c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003912:	b2da      	uxtb	r2, r3
 8003914:	8979      	ldrh	r1, [r7, #10]
 8003916:	4b52      	ldr	r3, [pc, #328]	; (8003a60 <HAL_I2C_Master_Receive+0x1e4>)
 8003918:	9300      	str	r3, [sp, #0]
 800391a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f000 fae8 	bl	8003ef4 <I2C_TransferConfig>
 8003924:	e06d      	b.n	8003a02 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392a:	b29a      	uxth	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003934:	b2da      	uxtb	r2, r3
 8003936:	8979      	ldrh	r1, [r7, #10]
 8003938:	4b49      	ldr	r3, [pc, #292]	; (8003a60 <HAL_I2C_Master_Receive+0x1e4>)
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f000 fad7 	bl	8003ef4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003946:	e05c      	b.n	8003a02 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	6a39      	ldr	r1, [r7, #32]
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 f96b 	bl	8003c28 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e07c      	b.n	8003a56 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003966:	b2d2      	uxtb	r2, r2
 8003968:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396e:	1c5a      	adds	r2, r3, #1
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003978:	3b01      	subs	r3, #1
 800397a:	b29a      	uxth	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003984:	b29b      	uxth	r3, r3
 8003986:	3b01      	subs	r3, #1
 8003988:	b29a      	uxth	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003992:	b29b      	uxth	r3, r3
 8003994:	2b00      	cmp	r3, #0
 8003996:	d034      	beq.n	8003a02 <HAL_I2C_Master_Receive+0x186>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800399c:	2b00      	cmp	r3, #0
 800399e:	d130      	bne.n	8003a02 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	6a3b      	ldr	r3, [r7, #32]
 80039a6:	2200      	movs	r2, #0
 80039a8:	2180      	movs	r1, #128	; 0x80
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f000 f880 	bl	8003ab0 <I2C_WaitOnFlagUntilTimeout>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e04d      	b.n	8003a56 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039be:	b29b      	uxth	r3, r3
 80039c0:	2bff      	cmp	r3, #255	; 0xff
 80039c2:	d90e      	bls.n	80039e2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	22ff      	movs	r2, #255	; 0xff
 80039c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ce:	b2da      	uxtb	r2, r3
 80039d0:	8979      	ldrh	r1, [r7, #10]
 80039d2:	2300      	movs	r3, #0
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f000 fa8a 	bl	8003ef4 <I2C_TransferConfig>
 80039e0:	e00f      	b.n	8003a02 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	8979      	ldrh	r1, [r7, #10]
 80039f4:	2300      	movs	r3, #0
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 fa79 	bl	8003ef4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d19d      	bne.n	8003948 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	6a39      	ldr	r1, [r7, #32]
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f000 f8cd 	bl	8003bb0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e01a      	b.n	8003a56 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2220      	movs	r2, #32
 8003a26:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6859      	ldr	r1, [r3, #4]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	4b0c      	ldr	r3, [pc, #48]	; (8003a64 <HAL_I2C_Master_Receive+0x1e8>)
 8003a34:	400b      	ands	r3, r1
 8003a36:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a50:	2300      	movs	r3, #0
 8003a52:	e000      	b.n	8003a56 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003a54:	2302      	movs	r3, #2
  }
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3718      	adds	r7, #24
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	80002400 	.word	0x80002400
 8003a64:	fe00e800 	.word	0xfe00e800

08003a68 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d103      	bne.n	8003a86 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2200      	movs	r2, #0
 8003a84:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d007      	beq.n	8003aa4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	699a      	ldr	r2, [r3, #24]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f042 0201 	orr.w	r2, r2, #1
 8003aa2:	619a      	str	r2, [r3, #24]
  }
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	603b      	str	r3, [r7, #0]
 8003abc:	4613      	mov	r3, r2
 8003abe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ac0:	e022      	b.n	8003b08 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac8:	d01e      	beq.n	8003b08 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aca:	f7ff f89f 	bl	8002c0c <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d302      	bcc.n	8003ae0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d113      	bne.n	8003b08 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae4:	f043 0220 	orr.w	r2, r3, #32
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e00f      	b.n	8003b28 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	699a      	ldr	r2, [r3, #24]
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	4013      	ands	r3, r2
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	bf0c      	ite	eq
 8003b18:	2301      	moveq	r3, #1
 8003b1a:	2300      	movne	r3, #0
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	461a      	mov	r2, r3
 8003b20:	79fb      	ldrb	r3, [r7, #7]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d0cd      	beq.n	8003ac2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b3c:	e02c      	b.n	8003b98 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	68b9      	ldr	r1, [r7, #8]
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 f8ea 	bl	8003d1c <I2C_IsErrorOccurred>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e02a      	b.n	8003ba8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b58:	d01e      	beq.n	8003b98 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b5a:	f7ff f857 	bl	8002c0c <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d302      	bcc.n	8003b70 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d113      	bne.n	8003b98 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b74:	f043 0220 	orr.w	r2, r3, #32
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e007      	b.n	8003ba8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d1cb      	bne.n	8003b3e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bbc:	e028      	b.n	8003c10 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	68b9      	ldr	r1, [r7, #8]
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f000 f8aa 	bl	8003d1c <I2C_IsErrorOccurred>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e026      	b.n	8003c20 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bd2:	f7ff f81b 	bl	8002c0c <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d302      	bcc.n	8003be8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d113      	bne.n	8003c10 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bec:	f043 0220 	orr.w	r2, r3, #32
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e007      	b.n	8003c20 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	f003 0320 	and.w	r3, r3, #32
 8003c1a:	2b20      	cmp	r3, #32
 8003c1c:	d1cf      	bne.n	8003bbe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c34:	e064      	b.n	8003d00 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	68b9      	ldr	r1, [r7, #8]
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f000 f86e 	bl	8003d1c <I2C_IsErrorOccurred>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e062      	b.n	8003d10 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	f003 0320 	and.w	r3, r3, #32
 8003c54:	2b20      	cmp	r3, #32
 8003c56:	d138      	bne.n	8003cca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	f003 0304 	and.w	r3, r3, #4
 8003c62:	2b04      	cmp	r3, #4
 8003c64:	d105      	bne.n	8003c72 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	e04e      	b.n	8003d10 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	f003 0310 	and.w	r3, r3, #16
 8003c7c:	2b10      	cmp	r3, #16
 8003c7e:	d107      	bne.n	8003c90 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2210      	movs	r2, #16
 8003c86:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2204      	movs	r2, #4
 8003c8c:	645a      	str	r2, [r3, #68]	; 0x44
 8003c8e:	e002      	b.n	8003c96 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6859      	ldr	r1, [r3, #4]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	4b1b      	ldr	r3, [pc, #108]	; (8003d18 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003caa:	400b      	ands	r3, r1
 8003cac:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e022      	b.n	8003d10 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cca:	f7fe ff9f 	bl	8002c0c <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d302      	bcc.n	8003ce0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10f      	bne.n	8003d00 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce4:	f043 0220 	orr.w	r2, r3, #32
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e007      	b.n	8003d10 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	f003 0304 	and.w	r3, r3, #4
 8003d0a:	2b04      	cmp	r3, #4
 8003d0c:	d193      	bne.n	8003c36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	fe00e800 	.word	0xfe00e800

08003d1c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b08a      	sub	sp, #40	; 0x28
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003d36:	2300      	movs	r3, #0
 8003d38:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	f003 0310 	and.w	r3, r3, #16
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d075      	beq.n	8003e34 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2210      	movs	r2, #16
 8003d4e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d50:	e056      	b.n	8003e00 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d58:	d052      	beq.n	8003e00 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d5a:	f7fe ff57 	bl	8002c0c <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	68ba      	ldr	r2, [r7, #8]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d302      	bcc.n	8003d70 <I2C_IsErrorOccurred+0x54>
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d147      	bne.n	8003e00 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d7a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d82:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d92:	d12e      	bne.n	8003df2 <I2C_IsErrorOccurred+0xd6>
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d9a:	d02a      	beq.n	8003df2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003d9c:	7cfb      	ldrb	r3, [r7, #19]
 8003d9e:	2b20      	cmp	r3, #32
 8003da0:	d027      	beq.n	8003df2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003db0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003db2:	f7fe ff2b 	bl	8002c0c <HAL_GetTick>
 8003db6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003db8:	e01b      	b.n	8003df2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003dba:	f7fe ff27 	bl	8002c0c <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b19      	cmp	r3, #25
 8003dc6:	d914      	bls.n	8003df2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dcc:	f043 0220 	orr.w	r2, r3, #32
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	f003 0320 	and.w	r3, r3, #32
 8003dfc:	2b20      	cmp	r3, #32
 8003dfe:	d1dc      	bne.n	8003dba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	f003 0320 	and.w	r3, r3, #32
 8003e0a:	2b20      	cmp	r3, #32
 8003e0c:	d003      	beq.n	8003e16 <I2C_IsErrorOccurred+0xfa>
 8003e0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d09d      	beq.n	8003d52 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003e16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d103      	bne.n	8003e26 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2220      	movs	r2, #32
 8003e24:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003e26:	6a3b      	ldr	r3, [r7, #32]
 8003e28:	f043 0304 	orr.w	r3, r3, #4
 8003e2c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00b      	beq.n	8003e5e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003e46:	6a3b      	ldr	r3, [r7, #32]
 8003e48:	f043 0301 	orr.w	r3, r3, #1
 8003e4c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e56:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00b      	beq.n	8003e80 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	f043 0308 	orr.w	r3, r3, #8
 8003e6e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00b      	beq.n	8003ea2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003e8a:	6a3b      	ldr	r3, [r7, #32]
 8003e8c:	f043 0302 	orr.w	r3, r3, #2
 8003e90:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e9a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003ea2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d01c      	beq.n	8003ee4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f7ff fddc 	bl	8003a68 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6859      	ldr	r1, [r3, #4]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	4b0d      	ldr	r3, [pc, #52]	; (8003ef0 <I2C_IsErrorOccurred+0x1d4>)
 8003ebc:	400b      	ands	r3, r1
 8003ebe:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ec4:	6a3b      	ldr	r3, [r7, #32]
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003ee4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3728      	adds	r7, #40	; 0x28
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	fe00e800 	.word	0xfe00e800

08003ef4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b087      	sub	sp, #28
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	607b      	str	r3, [r7, #4]
 8003efe:	460b      	mov	r3, r1
 8003f00:	817b      	strh	r3, [r7, #10]
 8003f02:	4613      	mov	r3, r2
 8003f04:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f06:	897b      	ldrh	r3, [r7, #10]
 8003f08:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f0c:	7a7b      	ldrb	r3, [r7, #9]
 8003f0e:	041b      	lsls	r3, r3, #16
 8003f10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f14:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f1a:	6a3b      	ldr	r3, [r7, #32]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f22:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685a      	ldr	r2, [r3, #4]
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	0d5b      	lsrs	r3, r3, #21
 8003f2e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003f32:	4b08      	ldr	r3, [pc, #32]	; (8003f54 <I2C_TransferConfig+0x60>)
 8003f34:	430b      	orrs	r3, r1
 8003f36:	43db      	mvns	r3, r3
 8003f38:	ea02 0103 	and.w	r1, r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	430a      	orrs	r2, r1
 8003f44:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003f46:	bf00      	nop
 8003f48:	371c      	adds	r7, #28
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	03ff63ff 	.word	0x03ff63ff

08003f58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b20      	cmp	r3, #32
 8003f6c:	d138      	bne.n	8003fe0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d101      	bne.n	8003f7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f78:	2302      	movs	r3, #2
 8003f7a:	e032      	b.n	8003fe2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2224      	movs	r2, #36	; 0x24
 8003f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0201 	bic.w	r2, r2, #1
 8003f9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003faa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6819      	ldr	r1, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f042 0201 	orr.w	r2, r2, #1
 8003fca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	e000      	b.n	8003fe2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003fe0:	2302      	movs	r3, #2
  }
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b085      	sub	sp, #20
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
 8003ff6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b20      	cmp	r3, #32
 8004002:	d139      	bne.n	8004078 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800400a:	2b01      	cmp	r3, #1
 800400c:	d101      	bne.n	8004012 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800400e:	2302      	movs	r3, #2
 8004010:	e033      	b.n	800407a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2224      	movs	r2, #36	; 0x24
 800401e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 0201 	bic.w	r2, r2, #1
 8004030:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004040:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	021b      	lsls	r3, r3, #8
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	4313      	orrs	r3, r2
 800404a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f042 0201 	orr.w	r2, r2, #1
 8004062:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2220      	movs	r2, #32
 8004068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004074:	2300      	movs	r3, #0
 8004076:	e000      	b.n	800407a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004078:	2302      	movs	r3, #2
  }
}
 800407a:	4618      	mov	r0, r3
 800407c:	3714      	adds	r7, #20
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
	...

08004088 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004090:	2300      	movs	r3, #0
 8004092:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d01e      	beq.n	80040d8 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800409a:	4b13      	ldr	r3, [pc, #76]	; (80040e8 <HAL_IPCC_Init+0x60>)
 800409c:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d102      	bne.n	80040b0 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7fe fb1c 	bl	80026e8 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80040b0:	68b8      	ldr	r0, [r7, #8]
 80040b2:	f000 f85b 	bl	800416c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f82c 	bl	8004120 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80040d6:	e001      	b.n	80040dc <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80040dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	58000c00 	.word	0x58000c00

080040ec <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	4613      	mov	r3, r2
 80040f8:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80040fa:	bf00      	nop
 80040fc:	3714      	adds	r7, #20
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004106:	b480      	push	{r7}
 8004108:	b085      	sub	sp, #20
 800410a:	af00      	add	r7, sp, #0
 800410c:	60f8      	str	r0, [r7, #12]
 800410e:	60b9      	str	r1, [r7, #8]
 8004110:	4613      	mov	r3, r2
 8004112:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8004114:	bf00      	nop
 8004116:	3714      	adds	r7, #20
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004128:	2300      	movs	r3, #0
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	e00f      	b.n	800414e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	4a0b      	ldr	r2, [pc, #44]	; (8004164 <IPCC_SetDefaultCallbacks+0x44>)
 8004138:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	3306      	adds	r3, #6
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4413      	add	r3, r2
 8004144:	4a08      	ldr	r2, [pc, #32]	; (8004168 <IPCC_SetDefaultCallbacks+0x48>)
 8004146:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	3301      	adds	r3, #1
 800414c:	60fb      	str	r3, [r7, #12]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2b05      	cmp	r3, #5
 8004152:	d9ec      	bls.n	800412e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8004154:	bf00      	nop
 8004156:	bf00      	nop
 8004158:	3714      	adds	r7, #20
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	080040ed 	.word	0x080040ed
 8004168:	08004107 	.word	0x08004107

0800416c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8004180:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	223f      	movs	r2, #63	; 0x3f
 8004186:	609a      	str	r2, [r3, #8]
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004198:	4b05      	ldr	r3, [pc, #20]	; (80041b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a04      	ldr	r2, [pc, #16]	; (80041b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800419e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041a2:	6013      	str	r3, [r2, #0]
}
 80041a4:	bf00      	nop
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	58000400 	.word	0x58000400

080041b4 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	460b      	mov	r3, r1
 80041be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  
  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041c6:	d104      	bne.n	80041d2 <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 80041c8:	78fb      	ldrb	r3, [r7, #3]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 f84a 	bl	8004264 <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 80041d0:	e003      	b.n	80041da <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 80041d2:	78fb      	ldrb	r3, [r7, #3]
 80041d4:	4618      	mov	r0, r3
 80041d6:	f000 f81b 	bl	8004210 <HAL_PWREx_EnterSTOP0Mode>
}
 80041da:	bf00      	nop
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
	...

080041e4 <LL_PWR_EnableSRAM2Retention>:
{
 80041e4:	b480      	push	{r7}
 80041e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 80041e8:	4b05      	ldr	r3, [pc, #20]	; (8004200 <LL_PWR_EnableSRAM2Retention+0x1c>)
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	4a04      	ldr	r2, [pc, #16]	; (8004200 <LL_PWR_EnableSRAM2Retention+0x1c>)
 80041ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041f2:	6093      	str	r3, [r2, #8]
}
 80041f4:	bf00      	nop
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	58000400 	.word	0x58000400

08004204 <HAL_PWREx_EnableSRAMRetention>:
  * @note   On devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx retention is extended 
  *         to SRAM1, SRAM2a and SRAM2b.
  * @retval None
  */
void HAL_PWREx_EnableSRAMRetention(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
  LL_PWR_EnableSRAM2Retention();
 8004208:	f7ff ffec 	bl	80041e4 <LL_PWR_EnableSRAM2Retention>
}
 800420c:	bf00      	nop
 800420e:	bd80      	pop	{r7, pc}

08004210 <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	4603      	mov	r3, r0
 8004218:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 800421a:	4b10      	ldr	r3, [pc, #64]	; (800425c <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a0f      	ldr	r2, [pc, #60]	; (800425c <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8004220:	f023 0307 	bic.w	r3, r3, #7
 8004224:	6013      	str	r3, [r2, #0]


  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004226:	4b0e      	ldr	r3, [pc, #56]	; (8004260 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	4a0d      	ldr	r2, [pc, #52]	; (8004260 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 800422c:	f043 0304 	orr.w	r3, r3, #4
 8004230:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8004232:	79fb      	ldrb	r3, [r7, #7]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d101      	bne.n	800423c <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004238:	bf30      	wfi
 800423a:	e002      	b.n	8004242 <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800423c:	bf40      	sev
    __WFE();
 800423e:	bf20      	wfe
    __WFE();
 8004240:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004242:	4b07      	ldr	r3, [pc, #28]	; (8004260 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	4a06      	ldr	r2, [pc, #24]	; (8004260 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8004248:	f023 0304 	bic.w	r3, r3, #4
 800424c:	6113      	str	r3, [r2, #16]
}
 800424e:	bf00      	nop
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	58000400 	.word	0x58000400
 8004260:	e000ed00 	.word	0xe000ed00

08004264 <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	4603      	mov	r3, r0
 800426c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
    
  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 800426e:	4b11      	ldr	r3, [pc, #68]	; (80042b4 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f023 0307 	bic.w	r3, r3, #7
 8004276:	4a0f      	ldr	r2, [pc, #60]	; (80042b4 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8004278:	f043 0301 	orr.w	r3, r3, #1
 800427c:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800427e:	4b0e      	ldr	r3, [pc, #56]	; (80042b8 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	4a0d      	ldr	r2, [pc, #52]	; (80042b8 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8004284:	f043 0304 	orr.w	r3, r3, #4
 8004288:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800428a:	79fb      	ldrb	r3, [r7, #7]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d101      	bne.n	8004294 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004290:	bf30      	wfi
 8004292:	e002      	b.n	800429a <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004294:	bf40      	sev
    __WFE();
 8004296:	bf20      	wfe
    __WFE();
 8004298:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800429a:	4b07      	ldr	r3, [pc, #28]	; (80042b8 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	4a06      	ldr	r2, [pc, #24]	; (80042b8 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80042a0:	f023 0304 	bic.w	r3, r3, #4
 80042a4:	6113      	str	r3, [r2, #16]
}
 80042a6:	bf00      	nop
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	58000400 	.word	0x58000400
 80042b8:	e000ed00 	.word	0xe000ed00

080042bc <LL_RCC_HSE_IsEnabledDiv2>:
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80042c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042ce:	d101      	bne.n	80042d4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80042d0:	2301      	movs	r3, #1
 80042d2:	e000      	b.n	80042d6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <LL_RCC_HSE_Enable>:
{
 80042e0:	b480      	push	{r7}
 80042e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80042e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f2:	6013      	str	r3, [r2, #0]
}
 80042f4:	bf00      	nop
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <LL_RCC_HSE_Disable>:
{
 80042fe:	b480      	push	{r7}
 8004300:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800430c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004310:	6013      	str	r3, [r2, #0]
}
 8004312:	bf00      	nop
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <LL_RCC_HSE_IsReady>:
{
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800432e:	d101      	bne.n	8004334 <LL_RCC_HSE_IsReady+0x18>
 8004330:	2301      	movs	r3, #1
 8004332:	e000      	b.n	8004336 <LL_RCC_HSE_IsReady+0x1a>
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <LL_RCC_HSI_Enable>:
{
 8004340:	b480      	push	{r7}
 8004342:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800434e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004352:	6013      	str	r3, [r2, #0]
}
 8004354:	bf00      	nop
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr

0800435e <LL_RCC_HSI_Disable>:
{
 800435e:	b480      	push	{r7}
 8004360:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004362:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800436c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004370:	6013      	str	r3, [r2, #0]
}
 8004372:	bf00      	nop
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <LL_RCC_HSI_IsReady>:
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800438a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800438e:	d101      	bne.n	8004394 <LL_RCC_HSI_IsReady+0x18>
 8004390:	2301      	movs	r3, #1
 8004392:	e000      	b.n	8004396 <LL_RCC_HSI_IsReady+0x1a>
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <LL_RCC_HSI_SetCalibTrimming>:
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80043a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	061b      	lsls	r3, r3, #24
 80043b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043ba:	4313      	orrs	r3, r2
 80043bc:	604b      	str	r3, [r1, #4]
}
 80043be:	bf00      	nop
 80043c0:	370c      	adds	r7, #12
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr

080043ca <LL_RCC_LSE_Enable>:
{
 80043ca:	b480      	push	{r7}
 80043cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80043ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043da:	f043 0301 	orr.w	r3, r3, #1
 80043de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80043e2:	bf00      	nop
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <LL_RCC_LSE_Disable>:
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80043f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043fc:	f023 0301 	bic.w	r3, r3, #1
 8004400:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004404:	bf00      	nop
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <LL_RCC_LSE_EnableBypass>:
{
 800440e:	b480      	push	{r7}
 8004410:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800441a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800441e:	f043 0304 	orr.w	r3, r3, #4
 8004422:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004426:	bf00      	nop
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <LL_RCC_LSE_DisableBypass>:
{
 8004430:	b480      	push	{r7}
 8004432:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004440:	f023 0304 	bic.w	r3, r3, #4
 8004444:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004448:	bf00      	nop
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr

08004452 <LL_RCC_LSE_IsReady>:
{
 8004452:	b480      	push	{r7}
 8004454:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800445a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b02      	cmp	r3, #2
 8004464:	d101      	bne.n	800446a <LL_RCC_LSE_IsReady+0x18>
 8004466:	2301      	movs	r3, #1
 8004468:	e000      	b.n	800446c <LL_RCC_LSE_IsReady+0x1a>
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <LL_RCC_LSI1_Enable>:
{
 8004476:	b480      	push	{r7}
 8004478:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800447a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800447e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004482:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004486:	f043 0301 	orr.w	r3, r3, #1
 800448a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800448e:	bf00      	nop
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <LL_RCC_LSI1_Disable>:
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800449c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044a8:	f023 0301 	bic.w	r3, r3, #1
 80044ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80044b0:	bf00      	nop
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr

080044ba <LL_RCC_LSI1_IsReady>:
{
 80044ba:	b480      	push	{r7}
 80044bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80044be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d101      	bne.n	80044d2 <LL_RCC_LSI1_IsReady+0x18>
 80044ce:	2301      	movs	r3, #1
 80044d0:	e000      	b.n	80044d4 <LL_RCC_LSI1_IsReady+0x1a>
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <LL_RCC_LSI2_Enable>:
{
 80044de:	b480      	push	{r7}
 80044e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80044e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044ee:	f043 0304 	orr.w	r3, r3, #4
 80044f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80044f6:	bf00      	nop
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <LL_RCC_LSI2_Disable>:
{
 8004500:	b480      	push	{r7}
 8004502:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004508:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800450c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004510:	f023 0304 	bic.w	r3, r3, #4
 8004514:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004518:	bf00      	nop
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr

08004522 <LL_RCC_LSI2_IsReady>:
{
 8004522:	b480      	push	{r7}
 8004524:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800452a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800452e:	f003 0308 	and.w	r3, r3, #8
 8004532:	2b08      	cmp	r3, #8
 8004534:	d101      	bne.n	800453a <LL_RCC_LSI2_IsReady+0x18>
 8004536:	2301      	movs	r3, #1
 8004538:	e000      	b.n	800453c <LL_RCC_LSI2_IsReady+0x1a>
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr

08004546 <LL_RCC_LSI2_SetTrimming>:
{
 8004546:	b480      	push	{r7}
 8004548:	b083      	sub	sp, #12
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800454e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004552:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004556:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	021b      	lsls	r3, r3, #8
 800455e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004562:	4313      	orrs	r3, r2
 8004564:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <LL_RCC_MSI_Enable>:
{
 8004574:	b480      	push	{r7}
 8004576:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004582:	f043 0301 	orr.w	r3, r3, #1
 8004586:	6013      	str	r3, [r2, #0]
}
 8004588:	bf00      	nop
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <LL_RCC_MSI_Disable>:
{
 8004592:	b480      	push	{r7}
 8004594:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045a0:	f023 0301 	bic.w	r3, r3, #1
 80045a4:	6013      	str	r3, [r2, #0]
}
 80045a6:	bf00      	nop
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <LL_RCC_MSI_IsReady>:
{
 80045b0:	b480      	push	{r7}
 80045b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80045b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d101      	bne.n	80045c6 <LL_RCC_MSI_IsReady+0x16>
 80045c2:	2301      	movs	r3, #1
 80045c4:	e000      	b.n	80045c8 <LL_RCC_MSI_IsReady+0x18>
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr

080045d2 <LL_RCC_MSI_SetRange>:
{
 80045d2:	b480      	push	{r7}
 80045d4:	b083      	sub	sp, #12
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80045da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	600b      	str	r3, [r1, #0]
}
 80045ee:	bf00      	nop
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <LL_RCC_MSI_GetRange>:
{
 80045fa:	b480      	push	{r7}
 80045fc:	b083      	sub	sp, #12
 80045fe:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004600:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800460a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2bb0      	cmp	r3, #176	; 0xb0
 8004610:	d901      	bls.n	8004616 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004612:	23b0      	movs	r3, #176	; 0xb0
 8004614:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004616:	687b      	ldr	r3, [r7, #4]
}
 8004618:	4618      	mov	r0, r3
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800462c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	021b      	lsls	r3, r3, #8
 800463a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800463e:	4313      	orrs	r3, r2
 8004640:	604b      	str	r3, [r1, #4]
}
 8004642:	bf00      	nop
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <LL_RCC_SetSysClkSource>:
{
 800464e:	b480      	push	{r7}
 8004650:	b083      	sub	sp, #12
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004656:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f023 0203 	bic.w	r2, r3, #3
 8004660:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4313      	orrs	r3, r2
 8004668:	608b      	str	r3, [r1, #8]
}
 800466a:	bf00      	nop
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr

08004676 <LL_RCC_GetSysClkSource>:
{
 8004676:	b480      	push	{r7}
 8004678:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800467a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f003 030c 	and.w	r3, r3, #12
}
 8004684:	4618      	mov	r0, r3
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <LL_RCC_SetAHBPrescaler>:
{
 800468e:	b480      	push	{r7}
 8004690:	b083      	sub	sp, #12
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	608b      	str	r3, [r1, #8]
}
 80046aa:	bf00      	nop
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <LL_C2_RCC_SetAHBPrescaler>:
{
 80046b6:	b480      	push	{r7}
 80046b8:	b083      	sub	sp, #12
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80046be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80046c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <LL_RCC_SetAHB4Prescaler>:
{
 80046e2:	b480      	push	{r7}
 80046e4:	b083      	sub	sp, #12
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80046ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80046f2:	f023 020f 	bic.w	r2, r3, #15
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	091b      	lsrs	r3, r3, #4
 80046fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046fe:	4313      	orrs	r3, r2
 8004700:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <LL_RCC_SetAPB1Prescaler>:
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004722:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4313      	orrs	r3, r2
 800472a:	608b      	str	r3, [r1, #8]
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <LL_RCC_SetAPB2Prescaler>:
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800474a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4313      	orrs	r3, r2
 8004752:	608b      	str	r3, [r1, #8]
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <LL_RCC_GetAHBPrescaler>:
{
 8004760:	b480      	push	{r7}
 8004762:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800476e:	4618      	mov	r0, r3
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <LL_RCC_GetAHB4Prescaler>:
{
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800477c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004780:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004784:	011b      	lsls	r3, r3, #4
 8004786:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800478a:	4618      	mov	r0, r3
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <LL_RCC_GetAPB1Prescaler>:
{
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <LL_RCC_GetAPB2Prescaler>:
{
 80047ac:	b480      	push	{r7}
 80047ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80047b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <LL_RCC_PLL_Enable>:
{
 80047c4:	b480      	push	{r7}
 80047c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80047c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047d6:	6013      	str	r3, [r2, #0]
}
 80047d8:	bf00      	nop
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <LL_RCC_PLL_Disable>:
{
 80047e2:	b480      	push	{r7}
 80047e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80047e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047f4:	6013      	str	r3, [r2, #0]
}
 80047f6:	bf00      	nop
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <LL_RCC_PLL_IsReady>:
{
 8004800:	b480      	push	{r7}
 8004802:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800480e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004812:	d101      	bne.n	8004818 <LL_RCC_PLL_IsReady+0x18>
 8004814:	2301      	movs	r3, #1
 8004816:	e000      	b.n	800481a <LL_RCC_PLL_IsReady+0x1a>
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <LL_RCC_PLL_GetN>:
{
 8004824:	b480      	push	{r7}
 8004826:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	0a1b      	lsrs	r3, r3, #8
 8004830:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004834:	4618      	mov	r0, r3
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <LL_RCC_PLL_GetR>:
{
 800483e:	b480      	push	{r7}
 8004840:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800484c:	4618      	mov	r0, r3
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr

08004856 <LL_RCC_PLL_GetDivider>:
{
 8004856:	b480      	push	{r7}
 8004858:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800485a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004864:	4618      	mov	r0, r3
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <LL_RCC_PLL_GetMainSource>:
{
 800486e:	b480      	push	{r7}
 8004870:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004872:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	f003 0303 	and.w	r3, r3, #3
}
 800487c:	4618      	mov	r0, r3
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <LL_RCC_IsActiveFlag_HPRE>:
{
 8004886:	b480      	push	{r7}
 8004888:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800488a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004898:	d101      	bne.n	800489e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800489a:	2301      	movs	r3, #1
 800489c:	e000      	b.n	80048a0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80048aa:	b480      	push	{r7}
 80048ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80048ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80048b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048be:	d101      	bne.n	80048c4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80048c0:	2301      	movs	r3, #1
 80048c2:	e000      	b.n	80048c6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 80048d0:	b480      	push	{r7}
 80048d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80048d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048d8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80048dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e4:	d101      	bne.n	80048ea <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80048e6:	2301      	movs	r3, #1
 80048e8:	e000      	b.n	80048ec <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <LL_RCC_IsActiveFlag_PPRE1>:
{
 80048f6:	b480      	push	{r7}
 80048f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80048fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004904:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004908:	d101      	bne.n	800490e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800490a:	2301      	movs	r3, #1
 800490c:	e000      	b.n	8004910 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr

0800491a <LL_RCC_IsActiveFlag_PPRE2>:
{
 800491a:	b480      	push	{r7}
 800491c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800491e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004928:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800492c:	d101      	bne.n	8004932 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800492e:	2301      	movs	r3, #1
 8004930:	e000      	b.n	8004934 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
	...

08004940 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004940:	b590      	push	{r4, r7, lr}
 8004942:	b08d      	sub	sp, #52	; 0x34
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e324      	b.n	8004f9c <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0320 	and.w	r3, r3, #32
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 808d 	beq.w	8004a7a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004960:	f7ff fe89 	bl	8004676 <LL_RCC_GetSysClkSource>
 8004964:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004966:	f7ff ff82 	bl	800486e <LL_RCC_PLL_GetMainSource>
 800496a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800496c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800496e:	2b00      	cmp	r3, #0
 8004970:	d005      	beq.n	800497e <HAL_RCC_OscConfig+0x3e>
 8004972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004974:	2b0c      	cmp	r3, #12
 8004976:	d147      	bne.n	8004a08 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497a:	2b01      	cmp	r3, #1
 800497c:	d144      	bne.n	8004a08 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e308      	b.n	8004f9c <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800498e:	f7ff fe34 	bl	80045fa <LL_RCC_MSI_GetRange>
 8004992:	4603      	mov	r3, r0
 8004994:	429c      	cmp	r4, r3
 8004996:	d914      	bls.n	80049c2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	4618      	mov	r0, r3
 800499e:	f000 fcf1 	bl	8005384 <RCC_SetFlashLatencyFromMSIRange>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d001      	beq.n	80049ac <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e2f7      	b.n	8004f9c <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7ff fe0e 	bl	80045d2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7ff fe32 	bl	8004624 <LL_RCC_MSI_SetCalibTrimming>
 80049c0:	e013      	b.n	80049ea <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7ff fe03 	bl	80045d2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a1b      	ldr	r3, [r3, #32]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7ff fe27 	bl	8004624 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 fcd2 	bl	8005384 <RCC_SetFlashLatencyFromMSIRange>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e2d8      	b.n	8004f9c <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80049ea:	f000 fc8b 	bl	8005304 <HAL_RCC_GetHCLKFreq>
 80049ee:	4603      	mov	r3, r0
 80049f0:	4aa4      	ldr	r2, [pc, #656]	; (8004c84 <HAL_RCC_OscConfig+0x344>)
 80049f2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80049f4:	4ba4      	ldr	r3, [pc, #656]	; (8004c88 <HAL_RCC_OscConfig+0x348>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7fe f8b9 	bl	8002b70 <HAL_InitTick>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d039      	beq.n	8004a78 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e2c9      	b.n	8004f9c <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	69db      	ldr	r3, [r3, #28]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d01e      	beq.n	8004a4e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004a10:	f7ff fdb0 	bl	8004574 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a14:	f7fe f8fa 	bl	8002c0c <HAL_GetTick>
 8004a18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a1c:	f7fe f8f6 	bl	8002c0c <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e2b6      	b.n	8004f9c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004a2e:	f7ff fdbf 	bl	80045b0 <LL_RCC_MSI_IsReady>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d0f1      	beq.n	8004a1c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7ff fdc8 	bl	80045d2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7ff fdec 	bl	8004624 <LL_RCC_MSI_SetCalibTrimming>
 8004a4c:	e015      	b.n	8004a7a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004a4e:	f7ff fda0 	bl	8004592 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a52:	f7fe f8db 	bl	8002c0c <HAL_GetTick>
 8004a56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004a58:	e008      	b.n	8004a6c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a5a:	f7fe f8d7 	bl	8002c0c <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d901      	bls.n	8004a6c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e297      	b.n	8004f9c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004a6c:	f7ff fda0 	bl	80045b0 <LL_RCC_MSI_IsReady>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1f1      	bne.n	8004a5a <HAL_RCC_OscConfig+0x11a>
 8004a76:	e000      	b.n	8004a7a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004a78:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d047      	beq.n	8004b16 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a86:	f7ff fdf6 	bl	8004676 <LL_RCC_GetSysClkSource>
 8004a8a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a8c:	f7ff feef 	bl	800486e <LL_RCC_PLL_GetMainSource>
 8004a90:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004a92:	6a3b      	ldr	r3, [r7, #32]
 8004a94:	2b08      	cmp	r3, #8
 8004a96:	d005      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x164>
 8004a98:	6a3b      	ldr	r3, [r7, #32]
 8004a9a:	2b0c      	cmp	r3, #12
 8004a9c:	d108      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	2b03      	cmp	r3, #3
 8004aa2:	d105      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d134      	bne.n	8004b16 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e275      	b.n	8004f9c <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ab8:	d102      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x180>
 8004aba:	f7ff fc11 	bl	80042e0 <LL_RCC_HSE_Enable>
 8004abe:	e001      	b.n	8004ac4 <HAL_RCC_OscConfig+0x184>
 8004ac0:	f7ff fc1d 	bl	80042fe <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d012      	beq.n	8004af2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004acc:	f7fe f89e 	bl	8002c0c <HAL_GetTick>
 8004ad0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ad4:	f7fe f89a 	bl	8002c0c <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b64      	cmp	r3, #100	; 0x64
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e25a      	b.n	8004f9c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004ae6:	f7ff fc19 	bl	800431c <LL_RCC_HSE_IsReady>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d0f1      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x194>
 8004af0:	e011      	b.n	8004b16 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af2:	f7fe f88b 	bl	8002c0c <HAL_GetTick>
 8004af6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004af8:	e008      	b.n	8004b0c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004afa:	f7fe f887 	bl	8002c0c <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	2b64      	cmp	r3, #100	; 0x64
 8004b06:	d901      	bls.n	8004b0c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e247      	b.n	8004f9c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004b0c:	f7ff fc06 	bl	800431c <LL_RCC_HSE_IsReady>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1f1      	bne.n	8004afa <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d04c      	beq.n	8004bbc <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b22:	f7ff fda8 	bl	8004676 <LL_RCC_GetSysClkSource>
 8004b26:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b28:	f7ff fea1 	bl	800486e <LL_RCC_PLL_GetMainSource>
 8004b2c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	2b04      	cmp	r3, #4
 8004b32:	d005      	beq.n	8004b40 <HAL_RCC_OscConfig+0x200>
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	2b0c      	cmp	r3, #12
 8004b38:	d10e      	bne.n	8004b58 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d10b      	bne.n	8004b58 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e227      	b.n	8004f9c <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7ff fc25 	bl	80043a0 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004b56:	e031      	b.n	8004bbc <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d019      	beq.n	8004b94 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b60:	f7ff fbee 	bl	8004340 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b64:	f7fe f852 	bl	8002c0c <HAL_GetTick>
 8004b68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004b6a:	e008      	b.n	8004b7e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b6c:	f7fe f84e 	bl	8002c0c <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e20e      	b.n	8004f9c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004b7e:	f7ff fbfd 	bl	800437c <LL_RCC_HSI_IsReady>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0f1      	beq.n	8004b6c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7ff fc07 	bl	80043a0 <LL_RCC_HSI_SetCalibTrimming>
 8004b92:	e013      	b.n	8004bbc <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b94:	f7ff fbe3 	bl	800435e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b98:	f7fe f838 	bl	8002c0c <HAL_GetTick>
 8004b9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004b9e:	e008      	b.n	8004bb2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ba0:	f7fe f834 	bl	8002c0c <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e1f4      	b.n	8004f9c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004bb2:	f7ff fbe3 	bl	800437c <LL_RCC_HSI_IsReady>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d1f1      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0308 	and.w	r3, r3, #8
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d106      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f000 80a3 	beq.w	8004d1c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d076      	beq.n	8004ccc <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0310 	and.w	r3, r3, #16
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d046      	beq.n	8004c78 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004bea:	f7ff fc66 	bl	80044ba <LL_RCC_LSI1_IsReady>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d113      	bne.n	8004c1c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004bf4:	f7ff fc3f 	bl	8004476 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004bf8:	f7fe f808 	bl	8002c0c <HAL_GetTick>
 8004bfc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004bfe:	e008      	b.n	8004c12 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004c00:	f7fe f804 	bl	8002c0c <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e1c4      	b.n	8004f9c <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004c12:	f7ff fc52 	bl	80044ba <LL_RCC_LSI1_IsReady>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d0f1      	beq.n	8004c00 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004c1c:	f7ff fc5f 	bl	80044de <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c20:	f7fd fff4 	bl	8002c0c <HAL_GetTick>
 8004c24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004c26:	e008      	b.n	8004c3a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004c28:	f7fd fff0 	bl	8002c0c <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b03      	cmp	r3, #3
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e1b0      	b.n	8004f9c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004c3a:	f7ff fc72 	bl	8004522 <LL_RCC_LSI2_IsReady>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d0f1      	beq.n	8004c28 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7ff fc7c 	bl	8004546 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004c4e:	f7ff fc23 	bl	8004498 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c52:	f7fd ffdb 	bl	8002c0c <HAL_GetTick>
 8004c56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004c58:	e008      	b.n	8004c6c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004c5a:	f7fd ffd7 	bl	8002c0c <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d901      	bls.n	8004c6c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e197      	b.n	8004f9c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004c6c:	f7ff fc25 	bl	80044ba <LL_RCC_LSI1_IsReady>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1f1      	bne.n	8004c5a <HAL_RCC_OscConfig+0x31a>
 8004c76:	e051      	b.n	8004d1c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004c78:	f7ff fbfd 	bl	8004476 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c7c:	f7fd ffc6 	bl	8002c0c <HAL_GetTick>
 8004c80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004c82:	e00c      	b.n	8004c9e <HAL_RCC_OscConfig+0x35e>
 8004c84:	20000010 	.word	0x20000010
 8004c88:	20000014 	.word	0x20000014
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004c8c:	f7fd ffbe 	bl	8002c0c <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e17e      	b.n	8004f9c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004c9e:	f7ff fc0c 	bl	80044ba <LL_RCC_LSI1_IsReady>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d0f1      	beq.n	8004c8c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004ca8:	f7ff fc2a 	bl	8004500 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004cac:	e008      	b.n	8004cc0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004cae:	f7fd ffad 	bl	8002c0c <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	2b03      	cmp	r3, #3
 8004cba:	d901      	bls.n	8004cc0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e16d      	b.n	8004f9c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004cc0:	f7ff fc2f 	bl	8004522 <LL_RCC_LSI2_IsReady>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1f1      	bne.n	8004cae <HAL_RCC_OscConfig+0x36e>
 8004cca:	e027      	b.n	8004d1c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004ccc:	f7ff fc18 	bl	8004500 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd0:	f7fd ff9c 	bl	8002c0c <HAL_GetTick>
 8004cd4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004cd6:	e008      	b.n	8004cea <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004cd8:	f7fd ff98 	bl	8002c0c <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b03      	cmp	r3, #3
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e158      	b.n	8004f9c <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004cea:	f7ff fc1a 	bl	8004522 <LL_RCC_LSI2_IsReady>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1f1      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004cf4:	f7ff fbd0 	bl	8004498 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cf8:	f7fd ff88 	bl	8002c0c <HAL_GetTick>
 8004cfc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004cfe:	e008      	b.n	8004d12 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004d00:	f7fd ff84 	bl	8002c0c <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e144      	b.n	8004f9c <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004d12:	f7ff fbd2 	bl	80044ba <LL_RCC_LSI1_IsReady>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1f1      	bne.n	8004d00 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0304 	and.w	r3, r3, #4
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d05b      	beq.n	8004de0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d28:	4b9e      	ldr	r3, [pc, #632]	; (8004fa4 <HAL_RCC_OscConfig+0x664>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d114      	bne.n	8004d5e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004d34:	f7ff fa2e 	bl	8004194 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d38:	f7fd ff68 	bl	8002c0c <HAL_GetTick>
 8004d3c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d3e:	e008      	b.n	8004d52 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d40:	f7fd ff64 	bl	8002c0c <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e124      	b.n	8004f9c <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d52:	4b94      	ldr	r3, [pc, #592]	; (8004fa4 <HAL_RCC_OscConfig+0x664>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d0f0      	beq.n	8004d40 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d102      	bne.n	8004d6c <HAL_RCC_OscConfig+0x42c>
 8004d66:	f7ff fb30 	bl	80043ca <LL_RCC_LSE_Enable>
 8004d6a:	e00c      	b.n	8004d86 <HAL_RCC_OscConfig+0x446>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	2b05      	cmp	r3, #5
 8004d72:	d104      	bne.n	8004d7e <HAL_RCC_OscConfig+0x43e>
 8004d74:	f7ff fb4b 	bl	800440e <LL_RCC_LSE_EnableBypass>
 8004d78:	f7ff fb27 	bl	80043ca <LL_RCC_LSE_Enable>
 8004d7c:	e003      	b.n	8004d86 <HAL_RCC_OscConfig+0x446>
 8004d7e:	f7ff fb35 	bl	80043ec <LL_RCC_LSE_Disable>
 8004d82:	f7ff fb55 	bl	8004430 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d014      	beq.n	8004db8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d8e:	f7fd ff3d 	bl	8002c0c <HAL_GetTick>
 8004d92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004d94:	e00a      	b.n	8004dac <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d96:	f7fd ff39 	bl	8002c0c <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d901      	bls.n	8004dac <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e0f7      	b.n	8004f9c <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004dac:	f7ff fb51 	bl	8004452 <LL_RCC_LSE_IsReady>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d0ef      	beq.n	8004d96 <HAL_RCC_OscConfig+0x456>
 8004db6:	e013      	b.n	8004de0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004db8:	f7fd ff28 	bl	8002c0c <HAL_GetTick>
 8004dbc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004dbe:	e00a      	b.n	8004dd6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dc0:	f7fd ff24 	bl	8002c0c <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d901      	bls.n	8004dd6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e0e2      	b.n	8004f9c <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004dd6:	f7ff fb3c 	bl	8004452 <LL_RCC_LSE_IsReady>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d1ef      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f000 80d8 	beq.w	8004f9a <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dea:	f7ff fc44 	bl	8004676 <LL_RCC_GetSysClkSource>
 8004dee:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	f040 80a6 	bne.w	8004f4e <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f003 0203 	and.w	r2, r3, #3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d123      	bne.n	8004e58 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d11c      	bne.n	8004e58 <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	0a1b      	lsrs	r3, r3, #8
 8004e22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d114      	bne.n	8004e58 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d10d      	bne.n	8004e58 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d106      	bne.n	8004e58 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d054      	beq.n	8004f02 <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	2b0c      	cmp	r3, #12
 8004e5c:	d04f      	beq.n	8004efe <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004e5e:	f7ff fcc0 	bl	80047e2 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e62:	f7fd fed3 	bl	8002c0c <HAL_GetTick>
 8004e66:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e68:	e008      	b.n	8004e7c <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e6a:	f7fd fecf 	bl	8002c0c <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d901      	bls.n	8004e7c <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e08f      	b.n	8004f9c <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1ef      	bne.n	8004e6a <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e8e:	68da      	ldr	r2, [r3, #12]
 8004e90:	4b45      	ldr	r3, [pc, #276]	; (8004fa8 <HAL_RCC_OscConfig+0x668>)
 8004e92:	4013      	ands	r3, r2
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004e9c:	4311      	orrs	r1, r2
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ea2:	0212      	lsls	r2, r2, #8
 8004ea4:	4311      	orrs	r1, r2
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004eaa:	4311      	orrs	r1, r2
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004eb0:	4311      	orrs	r1, r2
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004ec0:	f7ff fc80 	bl	80047c4 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ed2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ed4:	f7fd fe9a 	bl	8002c0c <HAL_GetTick>
 8004ed8:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eda:	e008      	b.n	8004eee <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004edc:	f7fd fe96 	bl	8002c0c <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e056      	b.n	8004f9c <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d0ef      	beq.n	8004edc <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004efc:	e04d      	b.n	8004f9a <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e04c      	b.n	8004f9c <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d144      	bne.n	8004f9a <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004f10:	f7ff fc58 	bl	80047c4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f22:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f24:	f7fd fe72 	bl	8002c0c <HAL_GetTick>
 8004f28:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f2a:	e008      	b.n	8004f3e <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f2c:	f7fd fe6e 	bl	8002c0c <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e02e      	b.n	8004f9c <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d0ef      	beq.n	8004f2c <HAL_RCC_OscConfig+0x5ec>
 8004f4c:	e025      	b.n	8004f9a <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	2b0c      	cmp	r3, #12
 8004f52:	d020      	beq.n	8004f96 <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f54:	f7ff fc45 	bl	80047e2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f58:	f7fd fe58 	bl	8002c0c <HAL_GetTick>
 8004f5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f5e:	e008      	b.n	8004f72 <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f60:	f7fd fe54 	bl	8002c0c <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e014      	b.n	8004f9c <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1ef      	bne.n	8004f60 <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 8004f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f8e:	f023 0303 	bic.w	r3, r3, #3
 8004f92:	60d3      	str	r3, [r2, #12]
 8004f94:	e001      	b.n	8004f9a <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e000      	b.n	8004f9c <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3734      	adds	r7, #52	; 0x34
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd90      	pop	{r4, r7, pc}
 8004fa4:	58000400 	.word	0x58000400
 8004fa8:	11c1808c 	.word	0x11c1808c

08004fac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d101      	bne.n	8004fc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e12d      	b.n	800521c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fc0:	4b98      	ldr	r3, [pc, #608]	; (8005224 <HAL_RCC_ClockConfig+0x278>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d91b      	bls.n	8005006 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fce:	4b95      	ldr	r3, [pc, #596]	; (8005224 <HAL_RCC_ClockConfig+0x278>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f023 0207 	bic.w	r2, r3, #7
 8004fd6:	4993      	ldr	r1, [pc, #588]	; (8005224 <HAL_RCC_ClockConfig+0x278>)
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fde:	f7fd fe15 	bl	8002c0c <HAL_GetTick>
 8004fe2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fe4:	e008      	b.n	8004ff8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004fe6:	f7fd fe11 	bl	8002c0c <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d901      	bls.n	8004ff8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e111      	b.n	800521c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ff8:	4b8a      	ldr	r3, [pc, #552]	; (8005224 <HAL_RCC_ClockConfig+0x278>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0307 	and.w	r3, r3, #7
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	429a      	cmp	r2, r3
 8005004:	d1ef      	bne.n	8004fe6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b00      	cmp	r3, #0
 8005010:	d016      	beq.n	8005040 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	4618      	mov	r0, r3
 8005018:	f7ff fb39 	bl	800468e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800501c:	f7fd fdf6 	bl	8002c0c <HAL_GetTick>
 8005020:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005022:	e008      	b.n	8005036 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005024:	f7fd fdf2 	bl	8002c0c <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b02      	cmp	r3, #2
 8005030:	d901      	bls.n	8005036 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e0f2      	b.n	800521c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005036:	f7ff fc26 	bl	8004886 <LL_RCC_IsActiveFlag_HPRE>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d0f1      	beq.n	8005024 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0320 	and.w	r3, r3, #32
 8005048:	2b00      	cmp	r3, #0
 800504a:	d016      	beq.n	800507a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	695b      	ldr	r3, [r3, #20]
 8005050:	4618      	mov	r0, r3
 8005052:	f7ff fb30 	bl	80046b6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005056:	f7fd fdd9 	bl	8002c0c <HAL_GetTick>
 800505a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800505c:	e008      	b.n	8005070 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800505e:	f7fd fdd5 	bl	8002c0c <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	2b02      	cmp	r3, #2
 800506a:	d901      	bls.n	8005070 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e0d5      	b.n	800521c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005070:	f7ff fc1b 	bl	80048aa <LL_RCC_IsActiveFlag_C2HPRE>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d0f1      	beq.n	800505e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005082:	2b00      	cmp	r3, #0
 8005084:	d016      	beq.n	80050b4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff fb29 	bl	80046e2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005090:	f7fd fdbc 	bl	8002c0c <HAL_GetTick>
 8005094:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005096:	e008      	b.n	80050aa <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005098:	f7fd fdb8 	bl	8002c0c <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e0b8      	b.n	800521c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80050aa:	f7ff fc11 	bl	80048d0 <LL_RCC_IsActiveFlag_SHDHPRE>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d0f1      	beq.n	8005098 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0304 	and.w	r3, r3, #4
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d016      	beq.n	80050ee <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	4618      	mov	r0, r3
 80050c6:	f7ff fb23 	bl	8004710 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80050ca:	f7fd fd9f 	bl	8002c0c <HAL_GetTick>
 80050ce:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80050d0:	e008      	b.n	80050e4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80050d2:	f7fd fd9b 	bl	8002c0c <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d901      	bls.n	80050e4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e09b      	b.n	800521c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80050e4:	f7ff fc07 	bl	80048f6 <LL_RCC_IsActiveFlag_PPRE1>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d0f1      	beq.n	80050d2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0308 	and.w	r3, r3, #8
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d017      	beq.n	800512a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	00db      	lsls	r3, r3, #3
 8005100:	4618      	mov	r0, r3
 8005102:	f7ff fb19 	bl	8004738 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005106:	f7fd fd81 	bl	8002c0c <HAL_GetTick>
 800510a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800510c:	e008      	b.n	8005120 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800510e:	f7fd fd7d 	bl	8002c0c <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	2b02      	cmp	r3, #2
 800511a:	d901      	bls.n	8005120 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e07d      	b.n	800521c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005120:	f7ff fbfb 	bl	800491a <LL_RCC_IsActiveFlag_PPRE2>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d0f1      	beq.n	800510e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	2b00      	cmp	r3, #0
 8005134:	d043      	beq.n	80051be <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	2b02      	cmp	r3, #2
 800513c:	d106      	bne.n	800514c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800513e:	f7ff f8ed 	bl	800431c <LL_RCC_HSE_IsReady>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d11e      	bne.n	8005186 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e067      	b.n	800521c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	2b03      	cmp	r3, #3
 8005152:	d106      	bne.n	8005162 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005154:	f7ff fb54 	bl	8004800 <LL_RCC_PLL_IsReady>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d113      	bne.n	8005186 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e05c      	b.n	800521c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d106      	bne.n	8005178 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800516a:	f7ff fa21 	bl	80045b0 <LL_RCC_MSI_IsReady>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d108      	bne.n	8005186 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e051      	b.n	800521c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005178:	f7ff f900 	bl	800437c <LL_RCC_HSI_IsReady>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d101      	bne.n	8005186 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e04a      	b.n	800521c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	4618      	mov	r0, r3
 800518c:	f7ff fa5f 	bl	800464e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005190:	f7fd fd3c 	bl	8002c0c <HAL_GetTick>
 8005194:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005196:	e00a      	b.n	80051ae <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005198:	f7fd fd38 	bl	8002c0c <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d901      	bls.n	80051ae <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e036      	b.n	800521c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ae:	f7ff fa62 	bl	8004676 <LL_RCC_GetSysClkSource>
 80051b2:	4602      	mov	r2, r0
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d1ec      	bne.n	8005198 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051be:	4b19      	ldr	r3, [pc, #100]	; (8005224 <HAL_RCC_ClockConfig+0x278>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0307 	and.w	r3, r3, #7
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d21b      	bcs.n	8005204 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051cc:	4b15      	ldr	r3, [pc, #84]	; (8005224 <HAL_RCC_ClockConfig+0x278>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f023 0207 	bic.w	r2, r3, #7
 80051d4:	4913      	ldr	r1, [pc, #76]	; (8005224 <HAL_RCC_ClockConfig+0x278>)
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	4313      	orrs	r3, r2
 80051da:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051dc:	f7fd fd16 	bl	8002c0c <HAL_GetTick>
 80051e0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051e2:	e008      	b.n	80051f6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80051e4:	f7fd fd12 	bl	8002c0c <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e012      	b.n	800521c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051f6:	4b0b      	ldr	r3, [pc, #44]	; (8005224 <HAL_RCC_ClockConfig+0x278>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0307 	and.w	r3, r3, #7
 80051fe:	683a      	ldr	r2, [r7, #0]
 8005200:	429a      	cmp	r2, r3
 8005202:	d1ef      	bne.n	80051e4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005204:	f000 f87e 	bl	8005304 <HAL_RCC_GetHCLKFreq>
 8005208:	4603      	mov	r3, r0
 800520a:	4a07      	ldr	r2, [pc, #28]	; (8005228 <HAL_RCC_ClockConfig+0x27c>)
 800520c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800520e:	f7fd fd09 	bl	8002c24 <HAL_GetTickPrio>
 8005212:	4603      	mov	r3, r0
 8005214:	4618      	mov	r0, r3
 8005216:	f7fd fcab 	bl	8002b70 <HAL_InitTick>
 800521a:	4603      	mov	r3, r0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	58004000 	.word	0x58004000
 8005228:	20000010 	.word	0x20000010

0800522c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800522c:	b590      	push	{r4, r7, lr}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005232:	f7ff fa20 	bl	8004676 <LL_RCC_GetSysClkSource>
 8005236:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10a      	bne.n	8005254 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800523e:	f7ff f9dc 	bl	80045fa <LL_RCC_MSI_GetRange>
 8005242:	4603      	mov	r3, r0
 8005244:	091b      	lsrs	r3, r3, #4
 8005246:	f003 030f 	and.w	r3, r3, #15
 800524a:	4a2b      	ldr	r2, [pc, #172]	; (80052f8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800524c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005250:	60fb      	str	r3, [r7, #12]
 8005252:	e04b      	b.n	80052ec <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b04      	cmp	r3, #4
 8005258:	d102      	bne.n	8005260 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800525a:	4b28      	ldr	r3, [pc, #160]	; (80052fc <HAL_RCC_GetSysClockFreq+0xd0>)
 800525c:	60fb      	str	r3, [r7, #12]
 800525e:	e045      	b.n	80052ec <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2b08      	cmp	r3, #8
 8005264:	d10a      	bne.n	800527c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005266:	f7ff f829 	bl	80042bc <LL_RCC_HSE_IsEnabledDiv2>
 800526a:	4603      	mov	r3, r0
 800526c:	2b01      	cmp	r3, #1
 800526e:	d102      	bne.n	8005276 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005270:	4b22      	ldr	r3, [pc, #136]	; (80052fc <HAL_RCC_GetSysClockFreq+0xd0>)
 8005272:	60fb      	str	r3, [r7, #12]
 8005274:	e03a      	b.n	80052ec <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005276:	4b22      	ldr	r3, [pc, #136]	; (8005300 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005278:	60fb      	str	r3, [r7, #12]
 800527a:	e037      	b.n	80052ec <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800527c:	f7ff faf7 	bl	800486e <LL_RCC_PLL_GetMainSource>
 8005280:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	2b02      	cmp	r3, #2
 8005286:	d003      	beq.n	8005290 <HAL_RCC_GetSysClockFreq+0x64>
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	2b03      	cmp	r3, #3
 800528c:	d003      	beq.n	8005296 <HAL_RCC_GetSysClockFreq+0x6a>
 800528e:	e00d      	b.n	80052ac <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005290:	4b1a      	ldr	r3, [pc, #104]	; (80052fc <HAL_RCC_GetSysClockFreq+0xd0>)
 8005292:	60bb      	str	r3, [r7, #8]
        break;
 8005294:	e015      	b.n	80052c2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005296:	f7ff f811 	bl	80042bc <LL_RCC_HSE_IsEnabledDiv2>
 800529a:	4603      	mov	r3, r0
 800529c:	2b01      	cmp	r3, #1
 800529e:	d102      	bne.n	80052a6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80052a0:	4b16      	ldr	r3, [pc, #88]	; (80052fc <HAL_RCC_GetSysClockFreq+0xd0>)
 80052a2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80052a4:	e00d      	b.n	80052c2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80052a6:	4b16      	ldr	r3, [pc, #88]	; (8005300 <HAL_RCC_GetSysClockFreq+0xd4>)
 80052a8:	60bb      	str	r3, [r7, #8]
        break;
 80052aa:	e00a      	b.n	80052c2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80052ac:	f7ff f9a5 	bl	80045fa <LL_RCC_MSI_GetRange>
 80052b0:	4603      	mov	r3, r0
 80052b2:	091b      	lsrs	r3, r3, #4
 80052b4:	f003 030f 	and.w	r3, r3, #15
 80052b8:	4a0f      	ldr	r2, [pc, #60]	; (80052f8 <HAL_RCC_GetSysClockFreq+0xcc>)
 80052ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052be:	60bb      	str	r3, [r7, #8]
        break;
 80052c0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80052c2:	f7ff faaf 	bl	8004824 <LL_RCC_PLL_GetN>
 80052c6:	4602      	mov	r2, r0
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	fb03 f402 	mul.w	r4, r3, r2
 80052ce:	f7ff fac2 	bl	8004856 <LL_RCC_PLL_GetDivider>
 80052d2:	4603      	mov	r3, r0
 80052d4:	091b      	lsrs	r3, r3, #4
 80052d6:	3301      	adds	r3, #1
 80052d8:	fbb4 f4f3 	udiv	r4, r4, r3
 80052dc:	f7ff faaf 	bl	800483e <LL_RCC_PLL_GetR>
 80052e0:	4603      	mov	r3, r0
 80052e2:	0f5b      	lsrs	r3, r3, #29
 80052e4:	3301      	adds	r3, #1
 80052e6:	fbb4 f3f3 	udiv	r3, r4, r3
 80052ea:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80052ec:	68fb      	ldr	r3, [r7, #12]
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3714      	adds	r7, #20
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd90      	pop	{r4, r7, pc}
 80052f6:	bf00      	nop
 80052f8:	0800c038 	.word	0x0800c038
 80052fc:	00f42400 	.word	0x00f42400
 8005300:	01e84800 	.word	0x01e84800

08005304 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005304:	b598      	push	{r3, r4, r7, lr}
 8005306:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005308:	f7ff ff90 	bl	800522c <HAL_RCC_GetSysClockFreq>
 800530c:	4604      	mov	r4, r0
 800530e:	f7ff fa27 	bl	8004760 <LL_RCC_GetAHBPrescaler>
 8005312:	4603      	mov	r3, r0
 8005314:	091b      	lsrs	r3, r3, #4
 8005316:	f003 030f 	and.w	r3, r3, #15
 800531a:	4a03      	ldr	r2, [pc, #12]	; (8005328 <HAL_RCC_GetHCLKFreq+0x24>)
 800531c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005320:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005324:	4618      	mov	r0, r3
 8005326:	bd98      	pop	{r3, r4, r7, pc}
 8005328:	0800bfd8 	.word	0x0800bfd8

0800532c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800532c:	b598      	push	{r3, r4, r7, lr}
 800532e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005330:	f7ff ffe8 	bl	8005304 <HAL_RCC_GetHCLKFreq>
 8005334:	4604      	mov	r4, r0
 8005336:	f7ff fa2d 	bl	8004794 <LL_RCC_GetAPB1Prescaler>
 800533a:	4603      	mov	r3, r0
 800533c:	0a1b      	lsrs	r3, r3, #8
 800533e:	f003 0307 	and.w	r3, r3, #7
 8005342:	4a04      	ldr	r2, [pc, #16]	; (8005354 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005348:	f003 031f 	and.w	r3, r3, #31
 800534c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005350:	4618      	mov	r0, r3
 8005352:	bd98      	pop	{r3, r4, r7, pc}
 8005354:	0800c018 	.word	0x0800c018

08005358 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005358:	b598      	push	{r3, r4, r7, lr}
 800535a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800535c:	f7ff ffd2 	bl	8005304 <HAL_RCC_GetHCLKFreq>
 8005360:	4604      	mov	r4, r0
 8005362:	f7ff fa23 	bl	80047ac <LL_RCC_GetAPB2Prescaler>
 8005366:	4603      	mov	r3, r0
 8005368:	0adb      	lsrs	r3, r3, #11
 800536a:	f003 0307 	and.w	r3, r3, #7
 800536e:	4a04      	ldr	r2, [pc, #16]	; (8005380 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005374:	f003 031f 	and.w	r3, r3, #31
 8005378:	fa24 f303 	lsr.w	r3, r4, r3
}
 800537c:	4618      	mov	r0, r3
 800537e:	bd98      	pop	{r3, r4, r7, pc}
 8005380:	0800c018 	.word	0x0800c018

08005384 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2bb0      	cmp	r3, #176	; 0xb0
 8005390:	d903      	bls.n	800539a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005392:	4b14      	ldr	r3, [pc, #80]	; (80053e4 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8005394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005396:	60fb      	str	r3, [r7, #12]
 8005398:	e007      	b.n	80053aa <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	091b      	lsrs	r3, r3, #4
 800539e:	f003 030f 	and.w	r3, r3, #15
 80053a2:	4a10      	ldr	r2, [pc, #64]	; (80053e4 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 80053a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053a8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80053aa:	f7ff f9e5 	bl	8004778 <LL_RCC_GetAHB4Prescaler>
 80053ae:	4603      	mov	r3, r0
 80053b0:	091b      	lsrs	r3, r3, #4
 80053b2:	f003 030f 	and.w	r3, r3, #15
 80053b6:	4a0c      	ldr	r2, [pc, #48]	; (80053e8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80053b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	4a09      	ldr	r2, [pc, #36]	; (80053ec <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80053c8:	fba2 2303 	umull	r2, r3, r2, r3
 80053cc:	0c9b      	lsrs	r3, r3, #18
 80053ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80053d2:	4618      	mov	r0, r3
 80053d4:	f000 f80c 	bl	80053f0 <RCC_SetFlashLatency>
 80053d8:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	0800c038 	.word	0x0800c038
 80053e8:	0800bfd8 	.word	0x0800bfd8
 80053ec:	431bde83 	.word	0x431bde83

080053f0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80053f0:	b590      	push	{r4, r7, lr}
 80053f2:	b08f      	sub	sp, #60	; 0x3c
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80053fa:	4b24      	ldr	r3, [pc, #144]	; (800548c <RCC_SetFlashLatency+0x9c>)
 80053fc:	f107 041c 	add.w	r4, r7, #28
 8005400:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005402:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005406:	4b22      	ldr	r3, [pc, #136]	; (8005490 <RCC_SetFlashLatency+0xa0>)
 8005408:	f107 040c 	add.w	r4, r7, #12
 800540c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800540e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005412:	2300      	movs	r3, #0
 8005414:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005416:	2300      	movs	r3, #0
 8005418:	633b      	str	r3, [r7, #48]	; 0x30
 800541a:	e013      	b.n	8005444 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800541c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	3338      	adds	r3, #56	; 0x38
 8005422:	443b      	add	r3, r7
 8005424:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	429a      	cmp	r2, r3
 800542c:	d807      	bhi.n	800543e <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 800542e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	3338      	adds	r3, #56	; 0x38
 8005434:	443b      	add	r3, r7
 8005436:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800543a:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 800543c:	e005      	b.n	800544a <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800543e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005440:	3301      	adds	r3, #1
 8005442:	633b      	str	r3, [r7, #48]	; 0x30
 8005444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005446:	2b03      	cmp	r3, #3
 8005448:	d9e8      	bls.n	800541c <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800544a:	4b12      	ldr	r3, [pc, #72]	; (8005494 <RCC_SetFlashLatency+0xa4>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f023 0207 	bic.w	r2, r3, #7
 8005452:	4910      	ldr	r1, [pc, #64]	; (8005494 <RCC_SetFlashLatency+0xa4>)
 8005454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005456:	4313      	orrs	r3, r2
 8005458:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800545a:	f7fd fbd7 	bl	8002c0c <HAL_GetTick>
 800545e:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005460:	e008      	b.n	8005474 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005462:	f7fd fbd3 	bl	8002c0c <HAL_GetTick>
 8005466:	4602      	mov	r2, r0
 8005468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	2b02      	cmp	r3, #2
 800546e:	d901      	bls.n	8005474 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e007      	b.n	8005484 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005474:	4b07      	ldr	r3, [pc, #28]	; (8005494 <RCC_SetFlashLatency+0xa4>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0307 	and.w	r3, r3, #7
 800547c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800547e:	429a      	cmp	r2, r3
 8005480:	d1ef      	bne.n	8005462 <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	373c      	adds	r7, #60	; 0x3c
 8005488:	46bd      	mov	sp, r7
 800548a:	bd90      	pop	{r4, r7, pc}
 800548c:	0800be1c 	.word	0x0800be1c
 8005490:	0800be2c 	.word	0x0800be2c
 8005494:	58004000 	.word	0x58004000

08005498 <LL_RCC_LSE_IsEnabled>:
{
 8005498:	b480      	push	{r7}
 800549a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800549c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a4:	f003 0301 	and.w	r3, r3, #1
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d101      	bne.n	80054b0 <LL_RCC_LSE_IsEnabled+0x18>
 80054ac:	2301      	movs	r3, #1
 80054ae:	e000      	b.n	80054b2 <LL_RCC_LSE_IsEnabled+0x1a>
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <LL_RCC_LSE_IsReady>:
{
 80054bc:	b480      	push	{r7}
 80054be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80054c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054c8:	f003 0302 	and.w	r3, r3, #2
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d101      	bne.n	80054d4 <LL_RCC_LSE_IsReady+0x18>
 80054d0:	2301      	movs	r3, #1
 80054d2:	e000      	b.n	80054d6 <LL_RCC_LSE_IsReady+0x1a>
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <LL_RCC_SetRFWKPClockSource>:
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80054e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80054f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <LL_RCC_SetSMPSClockSource>:
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005514:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551a:	f023 0203 	bic.w	r2, r3, #3
 800551e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4313      	orrs	r3, r2
 8005526:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <LL_RCC_SetSMPSPrescaler>:
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800553c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005542:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005546:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4313      	orrs	r3, r2
 800554e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <LL_RCC_SetUSARTClockSource>:
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800556c:	f023 0203 	bic.w	r2, r3, #3
 8005570:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4313      	orrs	r3, r2
 8005578:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <LL_RCC_SetLPUARTClockSource>:
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005598:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800559c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <LL_RCC_SetI2CClockSource>:
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80055bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055c0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	091b      	lsrs	r3, r3, #4
 80055c8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80055cc:	43db      	mvns	r3, r3
 80055ce:	401a      	ands	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	011b      	lsls	r3, r3, #4
 80055d4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80055d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055dc:	4313      	orrs	r3, r2
 80055de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80055e2:	bf00      	nop
 80055e4:	370c      	adds	r7, #12
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr

080055ee <LL_RCC_SetLPTIMClockSource>:
{
 80055ee:	b480      	push	{r7}
 80055f0:	b083      	sub	sp, #12
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80055f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055fa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	0c1b      	lsrs	r3, r3, #16
 8005602:	041b      	lsls	r3, r3, #16
 8005604:	43db      	mvns	r3, r3
 8005606:	401a      	ands	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	041b      	lsls	r3, r3, #16
 800560c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005610:	4313      	orrs	r3, r2
 8005612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005616:	bf00      	nop
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <LL_RCC_SetRNGClockSource>:
{
 8005622:	b480      	push	{r7}
 8005624:	b083      	sub	sp, #12
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800562a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800562e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005632:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005636:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4313      	orrs	r3, r2
 800563e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005642:	bf00      	nop
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <LL_RCC_SetCLK48ClockSource>:
{
 800564e:	b480      	push	{r7}
 8005650:	b083      	sub	sp, #12
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005656:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800565a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800565e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005662:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4313      	orrs	r3, r2
 800566a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800566e:	bf00      	nop
 8005670:	370c      	adds	r7, #12
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr

0800567a <LL_RCC_SetADCClockSource>:
{
 800567a:	b480      	push	{r7}
 800567c:	b083      	sub	sp, #12
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005682:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800568a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800568e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4313      	orrs	r3, r2
 8005696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800569a:	bf00      	nop
 800569c:	370c      	adds	r7, #12
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr

080056a6 <LL_RCC_SetRTCClockSource>:
{
 80056a6:	b480      	push	{r7}
 80056a8:	b083      	sub	sp, #12
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80056ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80056c6:	bf00      	nop
 80056c8:	370c      	adds	r7, #12
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr

080056d2 <LL_RCC_GetRTCClockSource>:
{
 80056d2:	b480      	push	{r7}
 80056d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80056d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056de:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <LL_RCC_ForceBackupDomainReset>:
{
 80056ec:	b480      	push	{r7}
 80056ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80056f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005700:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005704:	bf00      	nop
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr

0800570e <LL_RCC_ReleaseBackupDomainReset>:
{
 800570e:	b480      	push	{r7}
 8005710:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005712:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800571a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800571e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005722:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005726:	bf00      	nop
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b088      	sub	sp, #32
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005738:	2300      	movs	r3, #0
 800573a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800573c:	2300      	movs	r3, #0
 800573e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005748:	2b00      	cmp	r3, #0
 800574a:	d046      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800574c:	f7ff ffc1 	bl	80056d2 <LL_RCC_GetRTCClockSource>
 8005750:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	69ba      	ldr	r2, [r7, #24]
 8005758:	429a      	cmp	r2, r3
 800575a:	d03c      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800575c:	f7fe fd1a 	bl	8004194 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d105      	bne.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	4618      	mov	r0, r3
 800576c:	f7ff ff9b 	bl	80056a6 <LL_RCC_SetRTCClockSource>
 8005770:	e02e      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005772:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800577a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800577c:	f7ff ffb6 	bl	80056ec <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005780:	f7ff ffc5 	bl	800570e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	4313      	orrs	r3, r2
 8005790:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005792:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800579c:	f7ff fe7c 	bl	8005498 <LL_RCC_LSE_IsEnabled>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d114      	bne.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80057a6:	f7fd fa31 	bl	8002c0c <HAL_GetTick>
 80057aa:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80057ac:	e00b      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057ae:	f7fd fa2d 	bl	8002c0c <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80057bc:	4293      	cmp	r3, r2
 80057be:	d902      	bls.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	77fb      	strb	r3, [r7, #31]
              break;
 80057c4:	e004      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 80057c6:	f7ff fe79 	bl	80054bc <LL_RCC_LSE_IsReady>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d1ee      	bne.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80057d0:	7ffb      	ldrb	r3, [r7, #31]
 80057d2:	77bb      	strb	r3, [r7, #30]
 80057d4:	e001      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057d6:	7ffb      	ldrb	r3, [r7, #31]
 80057d8:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0301 	and.w	r3, r3, #1
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d004      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7ff feb6 	bl	800555c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0302 	and.w	r3, r3, #2
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d004      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	4618      	mov	r0, r3
 8005802:	f7ff fec1 	bl	8005588 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0310 	and.w	r3, r3, #16
 800580e:	2b00      	cmp	r3, #0
 8005810:	d004      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	4618      	mov	r0, r3
 8005818:	f7ff fee9 	bl	80055ee <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0320 	and.w	r3, r3, #32
 8005824:	2b00      	cmp	r3, #0
 8005826:	d004      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	695b      	ldr	r3, [r3, #20]
 800582c:	4618      	mov	r0, r3
 800582e:	f7ff fede 	bl	80055ee <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0304 	and.w	r3, r3, #4
 800583a:	2b00      	cmp	r3, #0
 800583c:	d004      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	4618      	mov	r0, r3
 8005844:	f7ff feb6 	bl	80055b4 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005850:	2b00      	cmp	r3, #0
 8005852:	d02b      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800585c:	d008      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005866:	d003      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d105      	bne.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	699b      	ldr	r3, [r3, #24]
 8005874:	4618      	mov	r0, r3
 8005876:	f7ff fed4 	bl	8005622 <LL_RCC_SetRNGClockSource>
 800587a:	e00a      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x162>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005884:	60fb      	str	r3, [r7, #12]
 8005886:	2000      	movs	r0, #0
 8005888:	f7ff fecb 	bl	8005622 <LL_RCC_SetRNGClockSource>
 800588c:	68f8      	ldr	r0, [r7, #12]
 800588e:	f7ff fede 	bl	800564e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800589a:	d107      	bne.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800589c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058aa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d011      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	69db      	ldr	r3, [r3, #28]
 80058bc:	4618      	mov	r0, r3
 80058be:	f7ff fedc 	bl	800567a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	69db      	ldr	r3, [r3, #28]
 80058c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058ca:	d107      	bne.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80058cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058da:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d004      	beq.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7ff fdf7 	bl	80054e0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d009      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005902:	4618      	mov	r0, r3
 8005904:	f7ff fe16 	bl	8005534 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590c:	4618      	mov	r0, r3
 800590e:	f7ff fdfd 	bl	800550c <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005912:	7fbb      	ldrb	r3, [r7, #30]
}
 8005914:	4618      	mov	r0, r3
 8005916:	3720      	adds	r7, #32
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d101      	bne.n	800592e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e090      	b.n	8005a50 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005934:	b2db      	uxtb	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d106      	bne.n	8005948 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f7fc fef4 	bl	8002730 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2202      	movs	r2, #2
 800594c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	22ca      	movs	r2, #202	; 0xca
 8005956:	625a      	str	r2, [r3, #36]	; 0x24
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2253      	movs	r2, #83	; 0x53
 800595e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 f89f 	bl	8005aa4 <RTC_EnterInitMode>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d009      	beq.n	8005980 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	22ff      	movs	r2, #255	; 0xff
 8005972:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2204      	movs	r2, #4
 8005978:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e067      	b.n	8005a50 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	6812      	ldr	r2, [r2, #0]
 800598a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800598e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005992:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6899      	ldr	r1, [r3, #8]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	431a      	orrs	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	431a      	orrs	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	430a      	orrs	r2, r1
 80059b0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	68d2      	ldr	r2, [r2, #12]
 80059ba:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6919      	ldr	r1, [r3, #16]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	041a      	lsls	r2, r3, #16
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	430a      	orrs	r2, r1
 80059ce:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68da      	ldr	r2, [r3, #12]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059de:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f022 0202 	bic.w	r2, r2, #2
 80059ee:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	69da      	ldr	r2, [r3, #28]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	431a      	orrs	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	430a      	orrs	r2, r1
 8005a06:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f003 0320 	and.w	r3, r3, #32
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d113      	bne.n	8005a3e <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 f81e 	bl	8005a58 <HAL_RTC_WaitForSynchro>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00d      	beq.n	8005a3e <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	22ff      	movs	r2, #255	; 0xff
 8005a28:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2204      	movs	r2, #4
 8005a2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e008      	b.n	8005a50 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	22ff      	movs	r2, #255	; 0xff
 8005a44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
  }
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3708      	adds	r7, #8
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68da      	ldr	r2, [r3, #12]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005a6e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005a70:	f7fd f8cc 	bl	8002c0c <HAL_GetTick>
 8005a74:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005a76:	e009      	b.n	8005a8c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005a78:	f7fd f8c8 	bl	8002c0c <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a86:	d901      	bls.n	8005a8c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e007      	b.n	8005a9c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	f003 0320 	and.w	r3, r3, #32
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d0ee      	beq.n	8005a78 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d119      	bne.n	8005aee <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f04f 32ff 	mov.w	r2, #4294967295
 8005ac2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005ac4:	f7fd f8a2 	bl	8002c0c <HAL_GetTick>
 8005ac8:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005aca:	e009      	b.n	8005ae0 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005acc:	f7fd f89e 	bl	8002c0c <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ada:	d901      	bls.n	8005ae0 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e007      	b.n	8005af0 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d0ee      	beq.n	8005acc <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3710      	adds	r7, #16
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <HAL_RTCEx_SetWakeUpTimer>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d101      	bne.n	8005b12 <HAL_RTCEx_SetWakeUpTimer+0x1a>
 8005b0e:	2302      	movs	r3, #2
 8005b10:	e089      	b.n	8005c26 <HAL_RTCEx_SetWakeUpTimer+0x12e>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2202      	movs	r2, #2
 8005b1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	22ca      	movs	r2, #202	; 0xca
 8005b28:	625a      	str	r2, [r3, #36]	; 0x24
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2253      	movs	r2, #83	; 0x53
 8005b30:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d020      	beq.n	8005b82 <HAL_RTCEx_SetWakeUpTimer+0x8a>
  {
    tickstart = HAL_GetTick();
 8005b40:	f7fd f864 	bl	8002c0c <HAL_GetTick>
 8005b44:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005b46:	e015      	b.n	8005b74 <HAL_RTCEx_SetWakeUpTimer+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005b48:	f7fd f860 	bl	8002c0c <HAL_GetTick>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b56:	d90d      	bls.n	8005b74 <HAL_RTCEx_SetWakeUpTimer+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	22ff      	movs	r2, #255	; 0xff
 8005b5e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2203      	movs	r2, #3
 8005b64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e058      	b.n	8005c26 <HAL_RTCEx_SetWakeUpTimer+0x12e>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	f003 0304 	and.w	r3, r3, #4
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1e2      	bne.n	8005b48 <HAL_RTCEx_SetWakeUpTimer+0x50>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	689a      	ldr	r2, [r3, #8]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b90:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8005b92:	f7fd f83b 	bl	8002c0c <HAL_GetTick>
 8005b96:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005b98:	e015      	b.n	8005bc6 <HAL_RTCEx_SetWakeUpTimer+0xce>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005b9a:	f7fd f837 	bl	8002c0c <HAL_GetTick>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ba8:	d90d      	bls.n	8005bc6 <HAL_RTCEx_SetWakeUpTimer+0xce>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	22ff      	movs	r2, #255	; 0xff
 8005bb0:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2203      	movs	r2, #3
 8005bb6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e02f      	b.n	8005c26 <HAL_RTCEx_SetWakeUpTimer+0x12e>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	f003 0304 	and.w	r3, r3, #4
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d0e2      	beq.n	8005b9a <HAL_RTCEx_SetWakeUpTimer+0xa2>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	689a      	ldr	r2, [r3, #8]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f022 0207 	bic.w	r2, r2, #7
 8005be2:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	6899      	ldr	r1, [r3, #8]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68ba      	ldr	r2, [r7, #8]
 8005bfa:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	689a      	ldr	r2, [r3, #8]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c0a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	22ff      	movs	r2, #255	; 0xff
 8005c12:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3718      	adds	r7, #24
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b084      	sub	sp, #16
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d101      	bne.n	8005c44 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8005c40:	2302      	movs	r3, #2
 8005c42:	e04d      	b.n	8005ce0 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2202      	movs	r2, #2
 8005c50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	22ca      	movs	r2, #202	; 0xca
 8005c5a:	625a      	str	r2, [r3, #36]	; 0x24
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2253      	movs	r2, #83	; 0x53
 8005c62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	689a      	ldr	r2, [r3, #8]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c72:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	689a      	ldr	r2, [r3, #8]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c82:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8005c84:	f7fc ffc2 	bl	8002c0c <HAL_GetTick>
 8005c88:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005c8a:	e015      	b.n	8005cb8 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005c8c:	f7fc ffbe 	bl	8002c0c <HAL_GetTick>
 8005c90:	4602      	mov	r2, r0
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c9a:	d90d      	bls.n	8005cb8 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	22ff      	movs	r2, #255	; 0xff
 8005ca2:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2203      	movs	r2, #3
 8005ca8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e013      	b.n	8005ce0 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	f003 0304 	and.w	r3, r3, #4
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d0e2      	beq.n	8005c8c <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	22ff      	movs	r2, #255	; 0xff
 8005ccc:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3710      	adds	r7, #16
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <LL_RCC_GetUSARTClockSource>:
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8005cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cf4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4013      	ands	r3, r2
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <LL_RCC_GetLPUARTClockSource>:
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d14:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4013      	ands	r3, r2
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d101      	bne.n	8005d3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e042      	b.n	8005dc0 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d106      	bne.n	8005d52 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f7fc fd1b 	bl	8002788 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2224      	movs	r2, #36	; 0x24
 8005d56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f022 0201 	bic.w	r2, r2, #1
 8005d68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 f8c2 	bl	8005ef4 <UART_SetConfig>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d101      	bne.n	8005d7a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e022      	b.n	8005dc0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d002      	beq.n	8005d88 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 fadc 	bl	8006340 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	685a      	ldr	r2, [r3, #4]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	689a      	ldr	r2, [r3, #8]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005da6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f042 0201 	orr.w	r2, r2, #1
 8005db6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 fb63 	bl	8006484 <UART_CheckIdleState>
 8005dbe:	4603      	mov	r3, r0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3708      	adds	r7, #8
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b08a      	sub	sp, #40	; 0x28
 8005dcc:	af02      	add	r7, sp, #8
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	603b      	str	r3, [r7, #0]
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dde:	2b20      	cmp	r3, #32
 8005de0:	f040 8083 	bne.w	8005eea <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d002      	beq.n	8005df0 <HAL_UART_Transmit+0x28>
 8005dea:	88fb      	ldrh	r3, [r7, #6]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d101      	bne.n	8005df4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e07b      	b.n	8005eec <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d101      	bne.n	8005e02 <HAL_UART_Transmit+0x3a>
 8005dfe:	2302      	movs	r3, #2
 8005e00:	e074      	b.n	8005eec <HAL_UART_Transmit+0x124>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2221      	movs	r2, #33	; 0x21
 8005e16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e1a:	f7fc fef7 	bl	8002c0c <HAL_GetTick>
 8005e1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	88fa      	ldrh	r2, [r7, #6]
 8005e24:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	88fa      	ldrh	r2, [r7, #6]
 8005e2c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e38:	d108      	bne.n	8005e4c <HAL_UART_Transmit+0x84>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d104      	bne.n	8005e4c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005e42:	2300      	movs	r3, #0
 8005e44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	61bb      	str	r3, [r7, #24]
 8005e4a:	e003      	b.n	8005e54 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e50:	2300      	movs	r3, #0
 8005e52:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005e5c:	e02c      	b.n	8005eb8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	2200      	movs	r2, #0
 8005e66:	2180      	movs	r1, #128	; 0x80
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f000 fb56 	bl	800651a <UART_WaitOnFlagUntilTimeout>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d001      	beq.n	8005e78 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005e74:	2303      	movs	r3, #3
 8005e76:	e039      	b.n	8005eec <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10b      	bne.n	8005e96 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	881b      	ldrh	r3, [r3, #0]
 8005e82:	461a      	mov	r2, r3
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e8c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	3302      	adds	r3, #2
 8005e92:	61bb      	str	r3, [r7, #24]
 8005e94:	e007      	b.n	8005ea6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	781a      	ldrb	r2, [r3, #0]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d1cc      	bne.n	8005e5e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	9300      	str	r3, [sp, #0]
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	2140      	movs	r1, #64	; 0x40
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	f000 fb23 	bl	800651a <UART_WaitOnFlagUntilTimeout>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e006      	b.n	8005eec <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2220      	movs	r2, #32
 8005ee2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	e000      	b.n	8005eec <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005eea:	2302      	movs	r3, #2
  }
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3720      	adds	r7, #32
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ef4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ef8:	b08c      	sub	sp, #48	; 0x30
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	689a      	ldr	r2, [r3, #8]
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	431a      	orrs	r2, r3
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	431a      	orrs	r2, r3
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	69db      	ldr	r3, [r3, #28]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	4baf      	ldr	r3, [pc, #700]	; (80061e0 <UART_SetConfig+0x2ec>)
 8005f24:	4013      	ands	r3, r2
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	6812      	ldr	r2, [r2, #0]
 8005f2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f2c:	430b      	orrs	r3, r1
 8005f2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	68da      	ldr	r2, [r3, #12]
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	430a      	orrs	r2, r1
 8005f44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4aa4      	ldr	r2, [pc, #656]	; (80061e4 <UART_SetConfig+0x2f0>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d004      	beq.n	8005f60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005f6a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	6812      	ldr	r2, [r2, #0]
 8005f72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f74:	430b      	orrs	r3, r1
 8005f76:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7e:	f023 010f 	bic.w	r1, r3, #15
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	430a      	orrs	r2, r1
 8005f8c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a95      	ldr	r2, [pc, #596]	; (80061e8 <UART_SetConfig+0x2f4>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d125      	bne.n	8005fe4 <UART_SetConfig+0xf0>
 8005f98:	2003      	movs	r0, #3
 8005f9a:	f7ff fea5 	bl	8005ce8 <LL_RCC_GetUSARTClockSource>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b03      	cmp	r3, #3
 8005fa2:	d81b      	bhi.n	8005fdc <UART_SetConfig+0xe8>
 8005fa4:	a201      	add	r2, pc, #4	; (adr r2, 8005fac <UART_SetConfig+0xb8>)
 8005fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005faa:	bf00      	nop
 8005fac:	08005fbd 	.word	0x08005fbd
 8005fb0:	08005fcd 	.word	0x08005fcd
 8005fb4:	08005fc5 	.word	0x08005fc5
 8005fb8:	08005fd5 	.word	0x08005fd5
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fc2:	e042      	b.n	800604a <UART_SetConfig+0x156>
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fca:	e03e      	b.n	800604a <UART_SetConfig+0x156>
 8005fcc:	2304      	movs	r3, #4
 8005fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fd2:	e03a      	b.n	800604a <UART_SetConfig+0x156>
 8005fd4:	2308      	movs	r3, #8
 8005fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fda:	e036      	b.n	800604a <UART_SetConfig+0x156>
 8005fdc:	2310      	movs	r3, #16
 8005fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fe2:	e032      	b.n	800604a <UART_SetConfig+0x156>
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a7e      	ldr	r2, [pc, #504]	; (80061e4 <UART_SetConfig+0x2f0>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d12a      	bne.n	8006044 <UART_SetConfig+0x150>
 8005fee:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005ff2:	f7ff fe89 	bl	8005d08 <LL_RCC_GetLPUARTClockSource>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ffc:	d01a      	beq.n	8006034 <UART_SetConfig+0x140>
 8005ffe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006002:	d81b      	bhi.n	800603c <UART_SetConfig+0x148>
 8006004:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006008:	d00c      	beq.n	8006024 <UART_SetConfig+0x130>
 800600a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800600e:	d815      	bhi.n	800603c <UART_SetConfig+0x148>
 8006010:	2b00      	cmp	r3, #0
 8006012:	d003      	beq.n	800601c <UART_SetConfig+0x128>
 8006014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006018:	d008      	beq.n	800602c <UART_SetConfig+0x138>
 800601a:	e00f      	b.n	800603c <UART_SetConfig+0x148>
 800601c:	2300      	movs	r3, #0
 800601e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006022:	e012      	b.n	800604a <UART_SetConfig+0x156>
 8006024:	2302      	movs	r3, #2
 8006026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800602a:	e00e      	b.n	800604a <UART_SetConfig+0x156>
 800602c:	2304      	movs	r3, #4
 800602e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006032:	e00a      	b.n	800604a <UART_SetConfig+0x156>
 8006034:	2308      	movs	r3, #8
 8006036:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800603a:	e006      	b.n	800604a <UART_SetConfig+0x156>
 800603c:	2310      	movs	r3, #16
 800603e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006042:	e002      	b.n	800604a <UART_SetConfig+0x156>
 8006044:	2310      	movs	r3, #16
 8006046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a65      	ldr	r2, [pc, #404]	; (80061e4 <UART_SetConfig+0x2f0>)
 8006050:	4293      	cmp	r3, r2
 8006052:	f040 8097 	bne.w	8006184 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006056:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800605a:	2b08      	cmp	r3, #8
 800605c:	d823      	bhi.n	80060a6 <UART_SetConfig+0x1b2>
 800605e:	a201      	add	r2, pc, #4	; (adr r2, 8006064 <UART_SetConfig+0x170>)
 8006060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006064:	08006089 	.word	0x08006089
 8006068:	080060a7 	.word	0x080060a7
 800606c:	08006091 	.word	0x08006091
 8006070:	080060a7 	.word	0x080060a7
 8006074:	08006097 	.word	0x08006097
 8006078:	080060a7 	.word	0x080060a7
 800607c:	080060a7 	.word	0x080060a7
 8006080:	080060a7 	.word	0x080060a7
 8006084:	0800609f 	.word	0x0800609f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006088:	f7ff f950 	bl	800532c <HAL_RCC_GetPCLK1Freq>
 800608c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800608e:	e010      	b.n	80060b2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006090:	4b56      	ldr	r3, [pc, #344]	; (80061ec <UART_SetConfig+0x2f8>)
 8006092:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006094:	e00d      	b.n	80060b2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006096:	f7ff f8c9 	bl	800522c <HAL_RCC_GetSysClockFreq>
 800609a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800609c:	e009      	b.n	80060b2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800609e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80060a4:	e005      	b.n	80060b2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80060a6:	2300      	movs	r3, #0
 80060a8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80060b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80060b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 812a 	beq.w	800630e <UART_SetConfig+0x41a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060be:	4a4c      	ldr	r2, [pc, #304]	; (80061f0 <UART_SetConfig+0x2fc>)
 80060c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060c4:	461a      	mov	r2, r3
 80060c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80060cc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	685a      	ldr	r2, [r3, #4]
 80060d2:	4613      	mov	r3, r2
 80060d4:	005b      	lsls	r3, r3, #1
 80060d6:	4413      	add	r3, r2
 80060d8:	69ba      	ldr	r2, [r7, #24]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d305      	bcc.n	80060ea <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060e4:	69ba      	ldr	r2, [r7, #24]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d903      	bls.n	80060f2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80060f0:	e10d      	b.n	800630e <UART_SetConfig+0x41a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	2200      	movs	r2, #0
 80060f6:	60bb      	str	r3, [r7, #8]
 80060f8:	60fa      	str	r2, [r7, #12]
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fe:	4a3c      	ldr	r2, [pc, #240]	; (80061f0 <UART_SetConfig+0x2fc>)
 8006100:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006104:	b29b      	uxth	r3, r3
 8006106:	2200      	movs	r2, #0
 8006108:	603b      	str	r3, [r7, #0]
 800610a:	607a      	str	r2, [r7, #4]
 800610c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006110:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006114:	f7fa fd70 	bl	8000bf8 <__aeabi_uldivmod>
 8006118:	4602      	mov	r2, r0
 800611a:	460b      	mov	r3, r1
 800611c:	4610      	mov	r0, r2
 800611e:	4619      	mov	r1, r3
 8006120:	f04f 0200 	mov.w	r2, #0
 8006124:	f04f 0300 	mov.w	r3, #0
 8006128:	020b      	lsls	r3, r1, #8
 800612a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800612e:	0202      	lsls	r2, r0, #8
 8006130:	6979      	ldr	r1, [r7, #20]
 8006132:	6849      	ldr	r1, [r1, #4]
 8006134:	0849      	lsrs	r1, r1, #1
 8006136:	2000      	movs	r0, #0
 8006138:	460c      	mov	r4, r1
 800613a:	4605      	mov	r5, r0
 800613c:	eb12 0804 	adds.w	r8, r2, r4
 8006140:	eb43 0905 	adc.w	r9, r3, r5
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	469a      	mov	sl, r3
 800614c:	4693      	mov	fp, r2
 800614e:	4652      	mov	r2, sl
 8006150:	465b      	mov	r3, fp
 8006152:	4640      	mov	r0, r8
 8006154:	4649      	mov	r1, r9
 8006156:	f7fa fd4f 	bl	8000bf8 <__aeabi_uldivmod>
 800615a:	4602      	mov	r2, r0
 800615c:	460b      	mov	r3, r1
 800615e:	4613      	mov	r3, r2
 8006160:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006162:	6a3b      	ldr	r3, [r7, #32]
 8006164:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006168:	d308      	bcc.n	800617c <UART_SetConfig+0x288>
 800616a:	6a3b      	ldr	r3, [r7, #32]
 800616c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006170:	d204      	bcs.n	800617c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	6a3a      	ldr	r2, [r7, #32]
 8006178:	60da      	str	r2, [r3, #12]
 800617a:	e0c8      	b.n	800630e <UART_SetConfig+0x41a>
        }
        else
        {
          ret = HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006182:	e0c4      	b.n	800630e <UART_SetConfig+0x41a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	69db      	ldr	r3, [r3, #28]
 8006188:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800618c:	d16d      	bne.n	800626a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800618e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006192:	3b01      	subs	r3, #1
 8006194:	2b07      	cmp	r3, #7
 8006196:	d82d      	bhi.n	80061f4 <UART_SetConfig+0x300>
 8006198:	a201      	add	r2, pc, #4	; (adr r2, 80061a0 <UART_SetConfig+0x2ac>)
 800619a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800619e:	bf00      	nop
 80061a0:	080061c1 	.word	0x080061c1
 80061a4:	080061c9 	.word	0x080061c9
 80061a8:	080061f5 	.word	0x080061f5
 80061ac:	080061cf 	.word	0x080061cf
 80061b0:	080061f5 	.word	0x080061f5
 80061b4:	080061f5 	.word	0x080061f5
 80061b8:	080061f5 	.word	0x080061f5
 80061bc:	080061d7 	.word	0x080061d7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061c0:	f7ff f8ca 	bl	8005358 <HAL_RCC_GetPCLK2Freq>
 80061c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80061c6:	e01b      	b.n	8006200 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061c8:	4b08      	ldr	r3, [pc, #32]	; (80061ec <UART_SetConfig+0x2f8>)
 80061ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80061cc:	e018      	b.n	8006200 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061ce:	f7ff f82d 	bl	800522c <HAL_RCC_GetSysClockFreq>
 80061d2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80061d4:	e014      	b.n	8006200 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80061dc:	e010      	b.n	8006200 <UART_SetConfig+0x30c>
 80061de:	bf00      	nop
 80061e0:	cfff69f3 	.word	0xcfff69f3
 80061e4:	40008000 	.word	0x40008000
 80061e8:	40013800 	.word	0x40013800
 80061ec:	00f42400 	.word	0x00f42400
 80061f0:	0800c078 	.word	0x0800c078
      default:
        pclk = 0U;
 80061f4:	2300      	movs	r3, #0
 80061f6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80061fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006202:	2b00      	cmp	r3, #0
 8006204:	f000 8083 	beq.w	800630e <UART_SetConfig+0x41a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620c:	4a4a      	ldr	r2, [pc, #296]	; (8006338 <UART_SetConfig+0x444>)
 800620e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006212:	461a      	mov	r2, r3
 8006214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006216:	fbb3 f3f2 	udiv	r3, r3, r2
 800621a:	005a      	lsls	r2, r3, #1
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	085b      	lsrs	r3, r3, #1
 8006222:	441a      	add	r2, r3
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	fbb2 f3f3 	udiv	r3, r2, r3
 800622c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800622e:	6a3b      	ldr	r3, [r7, #32]
 8006230:	2b0f      	cmp	r3, #15
 8006232:	d916      	bls.n	8006262 <UART_SetConfig+0x36e>
 8006234:	6a3b      	ldr	r3, [r7, #32]
 8006236:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800623a:	d212      	bcs.n	8006262 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800623c:	6a3b      	ldr	r3, [r7, #32]
 800623e:	b29b      	uxth	r3, r3
 8006240:	f023 030f 	bic.w	r3, r3, #15
 8006244:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006246:	6a3b      	ldr	r3, [r7, #32]
 8006248:	085b      	lsrs	r3, r3, #1
 800624a:	b29b      	uxth	r3, r3
 800624c:	f003 0307 	and.w	r3, r3, #7
 8006250:	b29a      	uxth	r2, r3
 8006252:	8bfb      	ldrh	r3, [r7, #30]
 8006254:	4313      	orrs	r3, r2
 8006256:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	8bfa      	ldrh	r2, [r7, #30]
 800625e:	60da      	str	r2, [r3, #12]
 8006260:	e055      	b.n	800630e <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006268:	e051      	b.n	800630e <UART_SetConfig+0x41a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800626a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800626e:	3b01      	subs	r3, #1
 8006270:	2b07      	cmp	r3, #7
 8006272:	d822      	bhi.n	80062ba <UART_SetConfig+0x3c6>
 8006274:	a201      	add	r2, pc, #4	; (adr r2, 800627c <UART_SetConfig+0x388>)
 8006276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800627a:	bf00      	nop
 800627c:	0800629d 	.word	0x0800629d
 8006280:	080062a5 	.word	0x080062a5
 8006284:	080062bb 	.word	0x080062bb
 8006288:	080062ab 	.word	0x080062ab
 800628c:	080062bb 	.word	0x080062bb
 8006290:	080062bb 	.word	0x080062bb
 8006294:	080062bb 	.word	0x080062bb
 8006298:	080062b3 	.word	0x080062b3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800629c:	f7ff f85c 	bl	8005358 <HAL_RCC_GetPCLK2Freq>
 80062a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062a2:	e010      	b.n	80062c6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062a4:	4b25      	ldr	r3, [pc, #148]	; (800633c <UART_SetConfig+0x448>)
 80062a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80062a8:	e00d      	b.n	80062c6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062aa:	f7fe ffbf 	bl	800522c <HAL_RCC_GetSysClockFreq>
 80062ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062b0:	e009      	b.n	80062c6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80062b8:	e005      	b.n	80062c6 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80062ba:	2300      	movs	r3, #0
 80062bc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80062c4:	bf00      	nop
    }

    if (pclk != 0U)
 80062c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d020      	beq.n	800630e <UART_SetConfig+0x41a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d0:	4a19      	ldr	r2, [pc, #100]	; (8006338 <UART_SetConfig+0x444>)
 80062d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062d6:	461a      	mov	r2, r3
 80062d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062da:	fbb3 f2f2 	udiv	r2, r3, r2
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	085b      	lsrs	r3, r3, #1
 80062e4:	441a      	add	r2, r3
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062f0:	6a3b      	ldr	r3, [r7, #32]
 80062f2:	2b0f      	cmp	r3, #15
 80062f4:	d908      	bls.n	8006308 <UART_SetConfig+0x414>
 80062f6:	6a3b      	ldr	r3, [r7, #32]
 80062f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062fc:	d204      	bcs.n	8006308 <UART_SetConfig+0x414>
      {
        huart->Instance->BRR = usartdiv;
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	6a3a      	ldr	r2, [r7, #32]
 8006304:	60da      	str	r2, [r3, #12]
 8006306:	e002      	b.n	800630e <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	2201      	movs	r2, #1
 8006312:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	2201      	movs	r2, #1
 800631a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	2200      	movs	r2, #0
 8006322:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	2200      	movs	r2, #0
 8006328:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800632a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800632e:	4618      	mov	r0, r3
 8006330:	3730      	adds	r7, #48	; 0x30
 8006332:	46bd      	mov	sp, r7
 8006334:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006338:	0800c078 	.word	0x0800c078
 800633c:	00f42400 	.word	0x00f42400

08006340 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800634c:	f003 0301 	and.w	r3, r3, #1
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00a      	beq.n	800636a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	430a      	orrs	r2, r1
 8006368:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800636e:	f003 0302 	and.w	r3, r3, #2
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00a      	beq.n	800638c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	430a      	orrs	r2, r1
 800638a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006390:	f003 0304 	and.w	r3, r3, #4
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00a      	beq.n	80063ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	430a      	orrs	r2, r1
 80063ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b2:	f003 0308 	and.w	r3, r3, #8
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00a      	beq.n	80063d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	430a      	orrs	r2, r1
 80063ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d4:	f003 0310 	and.w	r3, r3, #16
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00a      	beq.n	80063f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	430a      	orrs	r2, r1
 80063f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f6:	f003 0320 	and.w	r3, r3, #32
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00a      	beq.n	8006414 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	430a      	orrs	r2, r1
 8006412:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800641c:	2b00      	cmp	r3, #0
 800641e:	d01a      	beq.n	8006456 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	430a      	orrs	r2, r1
 8006434:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800643a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800643e:	d10a      	bne.n	8006456 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	430a      	orrs	r2, r1
 8006454:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800645a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00a      	beq.n	8006478 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	430a      	orrs	r2, r1
 8006476:	605a      	str	r2, [r3, #4]
  }
}
 8006478:	bf00      	nop
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b086      	sub	sp, #24
 8006488:	af02      	add	r7, sp, #8
 800648a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006494:	f7fc fbba 	bl	8002c0c <HAL_GetTick>
 8006498:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 0308 	and.w	r3, r3, #8
 80064a4:	2b08      	cmp	r3, #8
 80064a6:	d10e      	bne.n	80064c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064ac:	9300      	str	r3, [sp, #0]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 f82f 	bl	800651a <UART_WaitOnFlagUntilTimeout>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d001      	beq.n	80064c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e025      	b.n	8006512 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 0304 	and.w	r3, r3, #4
 80064d0:	2b04      	cmp	r3, #4
 80064d2:	d10e      	bne.n	80064f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064d8:	9300      	str	r3, [sp, #0]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2200      	movs	r2, #0
 80064de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 f819 	bl	800651a <UART_WaitOnFlagUntilTimeout>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d001      	beq.n	80064f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e00f      	b.n	8006512 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2220      	movs	r2, #32
 80064f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2220      	movs	r2, #32
 80064fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3710      	adds	r7, #16
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}

0800651a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800651a:	b580      	push	{r7, lr}
 800651c:	b09c      	sub	sp, #112	; 0x70
 800651e:	af00      	add	r7, sp, #0
 8006520:	60f8      	str	r0, [r7, #12]
 8006522:	60b9      	str	r1, [r7, #8]
 8006524:	603b      	str	r3, [r7, #0]
 8006526:	4613      	mov	r3, r2
 8006528:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800652a:	e0a9      	b.n	8006680 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800652c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800652e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006532:	f000 80a5 	beq.w	8006680 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006536:	f7fc fb69 	bl	8002c0c <HAL_GetTick>
 800653a:	4602      	mov	r2, r0
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006542:	429a      	cmp	r2, r3
 8006544:	d302      	bcc.n	800654c <UART_WaitOnFlagUntilTimeout+0x32>
 8006546:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006548:	2b00      	cmp	r3, #0
 800654a:	d140      	bne.n	80065ce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006554:	e853 3f00 	ldrex	r3, [r3]
 8006558:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800655a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800655c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006560:	667b      	str	r3, [r7, #100]	; 0x64
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	461a      	mov	r2, r3
 8006568:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800656a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800656c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006570:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006572:	e841 2300 	strex	r3, r2, [r1]
 8006576:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006578:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1e6      	bne.n	800654c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	3308      	adds	r3, #8
 8006584:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006588:	e853 3f00 	ldrex	r3, [r3]
 800658c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800658e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006590:	f023 0301 	bic.w	r3, r3, #1
 8006594:	663b      	str	r3, [r7, #96]	; 0x60
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	3308      	adds	r3, #8
 800659c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800659e:	64ba      	str	r2, [r7, #72]	; 0x48
 80065a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80065a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065a6:	e841 2300 	strex	r3, r2, [r1]
 80065aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80065ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1e5      	bne.n	800657e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2220      	movs	r2, #32
 80065b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2220      	movs	r2, #32
 80065be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80065ca:	2303      	movs	r3, #3
 80065cc:	e069      	b.n	80066a2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 0304 	and.w	r3, r3, #4
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d051      	beq.n	8006680 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	69db      	ldr	r3, [r3, #28]
 80065e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065ea:	d149      	bne.n	8006680 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065f4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fe:	e853 3f00 	ldrex	r3, [r3]
 8006602:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006606:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800660a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	461a      	mov	r2, r3
 8006612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006614:	637b      	str	r3, [r7, #52]	; 0x34
 8006616:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006618:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800661a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800661c:	e841 2300 	strex	r3, r2, [r1]
 8006620:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1e6      	bne.n	80065f6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	3308      	adds	r3, #8
 800662e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	e853 3f00 	ldrex	r3, [r3]
 8006636:	613b      	str	r3, [r7, #16]
   return(result);
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	f023 0301 	bic.w	r3, r3, #1
 800663e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	3308      	adds	r3, #8
 8006646:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006648:	623a      	str	r2, [r7, #32]
 800664a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664c:	69f9      	ldr	r1, [r7, #28]
 800664e:	6a3a      	ldr	r2, [r7, #32]
 8006650:	e841 2300 	strex	r3, r2, [r1]
 8006654:	61bb      	str	r3, [r7, #24]
   return(result);
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d1e5      	bne.n	8006628 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2220      	movs	r2, #32
 8006660:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2220      	movs	r2, #32
 8006668:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2220      	movs	r2, #32
 8006670:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800667c:	2303      	movs	r3, #3
 800667e:	e010      	b.n	80066a2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	69da      	ldr	r2, [r3, #28]
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	4013      	ands	r3, r2
 800668a:	68ba      	ldr	r2, [r7, #8]
 800668c:	429a      	cmp	r2, r3
 800668e:	bf0c      	ite	eq
 8006690:	2301      	moveq	r3, #1
 8006692:	2300      	movne	r3, #0
 8006694:	b2db      	uxtb	r3, r3
 8006696:	461a      	mov	r2, r3
 8006698:	79fb      	ldrb	r3, [r7, #7]
 800669a:	429a      	cmp	r2, r3
 800669c:	f43f af46 	beq.w	800652c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3770      	adds	r7, #112	; 0x70
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80066aa:	b480      	push	{r7}
 80066ac:	b085      	sub	sp, #20
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d101      	bne.n	80066c0 <HAL_UARTEx_DisableFifoMode+0x16>
 80066bc:	2302      	movs	r3, #2
 80066be:	e027      	b.n	8006710 <HAL_UARTEx_DisableFifoMode+0x66>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2224      	movs	r2, #36	; 0x24
 80066cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f022 0201 	bic.w	r2, r2, #1
 80066e6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80066ee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2220      	movs	r2, #32
 8006702:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	4618      	mov	r0, r3
 8006712:	3714      	adds	r7, #20
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800672c:	2b01      	cmp	r3, #1
 800672e:	d101      	bne.n	8006734 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006730:	2302      	movs	r3, #2
 8006732:	e02d      	b.n	8006790 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2224      	movs	r2, #36	; 0x24
 8006740:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f022 0201 	bic.w	r2, r2, #1
 800675a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	430a      	orrs	r2, r1
 800676e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 f84f 	bl	8006814 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2220      	movs	r2, #32
 8006782:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	3710      	adds	r7, #16
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d101      	bne.n	80067b0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80067ac:	2302      	movs	r3, #2
 80067ae:	e02d      	b.n	800680c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2224      	movs	r2, #36	; 0x24
 80067bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f022 0201 	bic.w	r2, r2, #1
 80067d6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	683a      	ldr	r2, [r7, #0]
 80067e8:	430a      	orrs	r2, r1
 80067ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 f811 	bl	8006814 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2220      	movs	r2, #32
 80067fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800680a:	2300      	movs	r3, #0
}
 800680c:	4618      	mov	r0, r3
 800680e:	3710      	adds	r7, #16
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006820:	2b00      	cmp	r3, #0
 8006822:	d108      	bne.n	8006836 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006834:	e031      	b.n	800689a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006836:	2308      	movs	r3, #8
 8006838:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800683a:	2308      	movs	r3, #8
 800683c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	0e5b      	lsrs	r3, r3, #25
 8006846:	b2db      	uxtb	r3, r3
 8006848:	f003 0307 	and.w	r3, r3, #7
 800684c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	0f5b      	lsrs	r3, r3, #29
 8006856:	b2db      	uxtb	r3, r3
 8006858:	f003 0307 	and.w	r3, r3, #7
 800685c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800685e:	7bbb      	ldrb	r3, [r7, #14]
 8006860:	7b3a      	ldrb	r2, [r7, #12]
 8006862:	4911      	ldr	r1, [pc, #68]	; (80068a8 <UARTEx_SetNbDataToProcess+0x94>)
 8006864:	5c8a      	ldrb	r2, [r1, r2]
 8006866:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800686a:	7b3a      	ldrb	r2, [r7, #12]
 800686c:	490f      	ldr	r1, [pc, #60]	; (80068ac <UARTEx_SetNbDataToProcess+0x98>)
 800686e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006870:	fb93 f3f2 	sdiv	r3, r3, r2
 8006874:	b29a      	uxth	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800687c:	7bfb      	ldrb	r3, [r7, #15]
 800687e:	7b7a      	ldrb	r2, [r7, #13]
 8006880:	4909      	ldr	r1, [pc, #36]	; (80068a8 <UARTEx_SetNbDataToProcess+0x94>)
 8006882:	5c8a      	ldrb	r2, [r1, r2]
 8006884:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006888:	7b7a      	ldrb	r2, [r7, #13]
 800688a:	4908      	ldr	r1, [pc, #32]	; (80068ac <UARTEx_SetNbDataToProcess+0x98>)
 800688c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800688e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006892:	b29a      	uxth	r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800689a:	bf00      	nop
 800689c:	3714      	adds	r7, #20
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop
 80068a8:	0800c090 	.word	0x0800c090
 80068ac:	0800c098 	.word	0x0800c098

080068b0 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 80068b0:	b5b0      	push	{r4, r5, r7, lr}
 80068b2:	b0ce      	sub	sp, #312	; 0x138
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	4605      	mov	r5, r0
 80068b8:	460c      	mov	r4, r1
 80068ba:	4610      	mov	r0, r2
 80068bc:	4619      	mov	r1, r3
 80068be:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80068c2:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80068c6:	462a      	mov	r2, r5
 80068c8:	701a      	strb	r2, [r3, #0]
 80068ca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80068ce:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80068d2:	4622      	mov	r2, r4
 80068d4:	801a      	strh	r2, [r3, #0]
 80068d6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80068da:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 80068de:	4602      	mov	r2, r0
 80068e0:	801a      	strh	r2, [r3, #0]
 80068e2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80068e6:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80068ea:	460a      	mov	r2, r1
 80068ec:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80068ee:	f107 0310 	add.w	r3, r7, #16
 80068f2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80068f6:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80068fa:	3308      	adds	r3, #8
 80068fc:	f107 0210 	add.w	r2, r7, #16
 8006900:	4413      	add	r3, r2
 8006902:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8006906:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800690a:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800690e:	4413      	add	r3, r2
 8006910:	3309      	adds	r3, #9
 8006912:	f107 0210 	add.w	r2, r7, #16
 8006916:	4413      	add	r3, r2
 8006918:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800691c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006920:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006924:	2200      	movs	r2, #0
 8006926:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006928:	2300      	movs	r3, #0
 800692a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800692e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006932:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006936:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800693a:	7812      	ldrb	r2, [r2, #0]
 800693c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800693e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006942:	3301      	adds	r3, #1
 8006944:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8006948:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800694c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006950:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8006954:	8812      	ldrh	r2, [r2, #0]
 8006956:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800695a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800695e:	3302      	adds	r3, #2
 8006960:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8006964:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006968:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800696c:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8006970:	8812      	ldrh	r2, [r2, #0]
 8006972:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8006976:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800697a:	3302      	adds	r3, #2
 800697c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8006980:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006984:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006988:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800698c:	7812      	ldrb	r2, [r2, #0]
 800698e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006990:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006994:	3301      	adds	r3, #1
 8006996:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800699a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800699e:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80069a2:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80069a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80069a8:	3301      	adds	r3, #1
 80069aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80069ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80069b2:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80069b6:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80069b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80069bc:	3301      	adds	r3, #1
 80069be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80069c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80069c6:	3308      	adds	r3, #8
 80069c8:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80069cc:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80069d0:	4618      	mov	r0, r3
 80069d2:	f000 fc21 	bl	8007218 <Osal_MemCpy>
    index_input += Local_Name_Length;
 80069d6:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80069da:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80069de:	4413      	add	r3, r2
 80069e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80069e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80069e8:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80069ec:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80069ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80069f2:	3301      	adds	r3, #1
 80069f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80069f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80069fc:	3301      	adds	r3, #1
 80069fe:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8006a02:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8006a06:	4618      	mov	r0, r3
 8006a08:	f000 fc06 	bl	8007218 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8006a0c:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8006a10:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006a14:	4413      	add	r3, r2
 8006a16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8006a1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a1e:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8006a22:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8006a24:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a28:	3302      	adds	r3, #2
 8006a2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8006a2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a32:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8006a36:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8006a38:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a3c:	3302      	adds	r3, #2
 8006a3e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006a42:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006a46:	2218      	movs	r2, #24
 8006a48:	2100      	movs	r1, #0
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f000 fbf4 	bl	8007238 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006a50:	233f      	movs	r3, #63	; 0x3f
 8006a52:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8006a56:	2383      	movs	r3, #131	; 0x83
 8006a58:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006a5c:	f107 0310 	add.w	r3, r7, #16
 8006a60:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006a64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a68:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006a6c:	f107 030f 	add.w	r3, r7, #15
 8006a70:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006a74:	2301      	movs	r3, #1
 8006a76:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006a7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006a7e:	2100      	movs	r1, #0
 8006a80:	4618      	mov	r0, r3
 8006a82:	f000 fe4f 	bl	8007724 <hci_send_req>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	da01      	bge.n	8006a90 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8006a8c:	23ff      	movs	r3, #255	; 0xff
 8006a8e:	e004      	b.n	8006a9a <aci_gap_set_discoverable+0x1ea>
  return status;
 8006a90:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006a94:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006a98:	781b      	ldrb	r3, [r3, #0]
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bdb0      	pop	{r4, r5, r7, pc}

08006aa4 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8006aa4:	b590      	push	{r4, r7, lr}
 8006aa6:	b0cd      	sub	sp, #308	; 0x134
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	4604      	mov	r4, r0
 8006aac:	4608      	mov	r0, r1
 8006aae:	4611      	mov	r1, r2
 8006ab0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006ab4:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8006ab8:	6013      	str	r3, [r2, #0]
 8006aba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006abe:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006ac2:	4622      	mov	r2, r4
 8006ac4:	701a      	strb	r2, [r3, #0]
 8006ac6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aca:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006ace:	4602      	mov	r2, r0
 8006ad0:	701a      	strb	r2, [r3, #0]
 8006ad2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ad6:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8006ada:	460a      	mov	r2, r1
 8006adc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8006ade:	f107 0310 	add.w	r3, r7, #16
 8006ae2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006ae6:	f107 0308 	add.w	r3, r7, #8
 8006aea:	2207      	movs	r2, #7
 8006aec:	2100      	movs	r1, #0
 8006aee:	4618      	mov	r0, r3
 8006af0:	f000 fba2 	bl	8007238 <Osal_MemSet>
  int index_input = 0;
 8006af4:	2300      	movs	r3, #0
 8006af6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8006afa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006afe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006b02:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006b06:	7812      	ldrb	r2, [r2, #0]
 8006b08:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006b0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b0e:	3301      	adds	r3, #1
 8006b10:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8006b14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b18:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006b1c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006b20:	7812      	ldrb	r2, [r2, #0]
 8006b22:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006b24:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b28:	3301      	adds	r3, #1
 8006b2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8006b2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b32:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006b36:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8006b3a:	7812      	ldrb	r2, [r2, #0]
 8006b3c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006b3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b42:	3301      	adds	r3, #1
 8006b44:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006b48:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006b4c:	2218      	movs	r2, #24
 8006b4e:	2100      	movs	r1, #0
 8006b50:	4618      	mov	r0, r3
 8006b52:	f000 fb71 	bl	8007238 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006b56:	233f      	movs	r3, #63	; 0x3f
 8006b58:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8006b5c:	238a      	movs	r3, #138	; 0x8a
 8006b5e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006b62:	f107 0310 	add.w	r3, r7, #16
 8006b66:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006b6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b6e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8006b72:	f107 0308 	add.w	r3, r7, #8
 8006b76:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8006b7a:	2307      	movs	r3, #7
 8006b7c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006b80:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006b84:	2100      	movs	r1, #0
 8006b86:	4618      	mov	r0, r3
 8006b88:	f000 fdcc 	bl	8007724 <hci_send_req>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	da01      	bge.n	8006b96 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8006b92:	23ff      	movs	r3, #255	; 0xff
 8006b94:	e02e      	b.n	8006bf4 <aci_gap_init+0x150>
  if ( resp.Status )
 8006b96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b9a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d005      	beq.n	8006bb0 <aci_gap_init+0x10c>
    return resp.Status;
 8006ba4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ba8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	e021      	b.n	8006bf4 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8006bb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bb4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006bb8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8006bca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bce:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006bd2:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006bdc:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8006bde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006be2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006be6:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8006bf0:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd90      	pop	{r4, r7, pc}

08006bfe <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b0cc      	sub	sp, #304	; 0x130
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	4602      	mov	r2, r0
 8006c06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c0e:	6019      	str	r1, [r3, #0]
 8006c10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c14:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006c18:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8006c1a:	f107 0310 	add.w	r3, r7, #16
 8006c1e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006c22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c26:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8006c34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c38:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006c3c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006c40:	7812      	ldrb	r2, [r2, #0]
 8006c42:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006c44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c48:	3301      	adds	r3, #1
 8006c4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8006c4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c52:	1c58      	adds	r0, r3, #1
 8006c54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c58:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006c5c:	781a      	ldrb	r2, [r3, #0]
 8006c5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c66:	6819      	ldr	r1, [r3, #0]
 8006c68:	f000 fad6 	bl	8007218 <Osal_MemCpy>
  index_input += AdvDataLen;
 8006c6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c70:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006c80:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006c84:	2218      	movs	r2, #24
 8006c86:	2100      	movs	r1, #0
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f000 fad5 	bl	8007238 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006c8e:	233f      	movs	r3, #63	; 0x3f
 8006c90:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8006c94:	238e      	movs	r3, #142	; 0x8e
 8006c96:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006c9a:	f107 0310 	add.w	r3, r7, #16
 8006c9e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006ca2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ca6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006caa:	f107 030f 	add.w	r3, r7, #15
 8006cae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006cb8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f000 fd30 	bl	8007724 <hci_send_req>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	da01      	bge.n	8006cce <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8006cca:	23ff      	movs	r3, #255	; 0xff
 8006ccc:	e004      	b.n	8006cd8 <aci_gap_update_adv_data+0xda>
  return status;
 8006cce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cd2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006cd6:	781b      	ldrb	r3, [r3, #0]
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}

08006ce2 <aci_gap_delete_ad_type>:

tBleStatus aci_gap_delete_ad_type( uint8_t ADType )
{
 8006ce2:	b580      	push	{r7, lr}
 8006ce4:	b0cc      	sub	sp, #304	; 0x130
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	4602      	mov	r2, r0
 8006cea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cee:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006cf2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_delete_ad_type_cp0 *cp0 = (aci_gap_delete_ad_type_cp0*)(cmd_buffer);
 8006cf4:	f107 0310 	add.w	r3, r7, #16
 8006cf8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006cfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d00:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006d04:	2200      	movs	r2, #0
 8006d06:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ADType = ADType;
 8006d0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d12:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d16:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006d1a:	7812      	ldrb	r2, [r2, #0]
 8006d1c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006d1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d22:	3301      	adds	r3, #1
 8006d24:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006d28:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006d2c:	2218      	movs	r2, #24
 8006d2e:	2100      	movs	r1, #0
 8006d30:	4618      	mov	r0, r3
 8006d32:	f000 fa81 	bl	8007238 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006d36:	233f      	movs	r3, #63	; 0x3f
 8006d38:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08f;
 8006d3c:	238f      	movs	r3, #143	; 0x8f
 8006d3e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006d42:	f107 0310 	add.w	r3, r7, #16
 8006d46:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006d4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d4e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006d52:	f107 030f 	add.w	r3, r7, #15
 8006d56:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006d60:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006d64:	2100      	movs	r1, #0
 8006d66:	4618      	mov	r0, r3
 8006d68:	f000 fcdc 	bl	8007724 <hci_send_req>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	da01      	bge.n	8006d76 <aci_gap_delete_ad_type+0x94>
    return BLE_STATUS_TIMEOUT;
 8006d72:	23ff      	movs	r3, #255	; 0xff
 8006d74:	e004      	b.n	8006d80 <aci_gap_delete_ad_type+0x9e>
  return status;
 8006d76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d7a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006d7e:	781b      	ldrb	r3, [r3, #0]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}

08006d8a <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8006d8a:	b580      	push	{r7, lr}
 8006d8c:	b088      	sub	sp, #32
 8006d8e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006d90:	2300      	movs	r3, #0
 8006d92:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006d94:	f107 0308 	add.w	r3, r7, #8
 8006d98:	2218      	movs	r2, #24
 8006d9a:	2100      	movs	r1, #0
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f000 fa4b 	bl	8007238 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006da2:	233f      	movs	r3, #63	; 0x3f
 8006da4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8006da6:	f240 1301 	movw	r3, #257	; 0x101
 8006daa:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006dac:	1dfb      	adds	r3, r7, #7
 8006dae:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006db0:	2301      	movs	r3, #1
 8006db2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006db4:	f107 0308 	add.w	r3, r7, #8
 8006db8:	2100      	movs	r1, #0
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f000 fcb2 	bl	8007724 <hci_send_req>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	da01      	bge.n	8006dca <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8006dc6:	23ff      	movs	r3, #255	; 0xff
 8006dc8:	e000      	b.n	8006dcc <aci_gatt_init+0x42>
  return status;
 8006dca:	79fb      	ldrb	r3, [r7, #7]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3720      	adds	r7, #32
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8006dd4:	b5b0      	push	{r4, r5, r7, lr}
 8006dd6:	b0cc      	sub	sp, #304	; 0x130
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	4605      	mov	r5, r0
 8006ddc:	460c      	mov	r4, r1
 8006dde:	4610      	mov	r0, r2
 8006de0:	4619      	mov	r1, r3
 8006de2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006de6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006dea:	462a      	mov	r2, r5
 8006dec:	801a      	strh	r2, [r3, #0]
 8006dee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006df2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006df6:	4622      	mov	r2, r4
 8006df8:	801a      	strh	r2, [r3, #0]
 8006dfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dfe:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8006e02:	4602      	mov	r2, r0
 8006e04:	701a      	strb	r2, [r3, #0]
 8006e06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e0a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8006e0e:	460a      	mov	r2, r1
 8006e10:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8006e12:	f107 0310 	add.w	r3, r7, #16
 8006e16:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006e1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e1e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006e22:	2200      	movs	r2, #0
 8006e24:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006e26:	2300      	movs	r3, #0
 8006e28:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8006e2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e30:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006e34:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006e38:	8812      	ldrh	r2, [r2, #0]
 8006e3a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006e3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e40:	3302      	adds	r3, #2
 8006e42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8006e46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e4a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006e4e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006e52:	8812      	ldrh	r2, [r2, #0]
 8006e54:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8006e56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e5a:	3302      	adds	r3, #2
 8006e5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8006e60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e64:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006e68:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8006e6c:	7812      	ldrb	r2, [r2, #0]
 8006e6e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8006e70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e74:	3301      	adds	r3, #1
 8006e76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8006e7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e7e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006e82:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8006e86:	7812      	ldrb	r2, [r2, #0]
 8006e88:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006e8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e8e:	3301      	adds	r3, #1
 8006e90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8006e94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e98:	1d98      	adds	r0, r3, #6
 8006e9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e9e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006eaa:	f000 f9b5 	bl	8007218 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8006eae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eb2:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006ec2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006ec6:	2218      	movs	r2, #24
 8006ec8:	2100      	movs	r1, #0
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f000 f9b4 	bl	8007238 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006ed0:	233f      	movs	r3, #63	; 0x3f
 8006ed2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8006ed6:	f44f 7383 	mov.w	r3, #262	; 0x106
 8006eda:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006ede:	f107 0310 	add.w	r3, r7, #16
 8006ee2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006ee6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006eea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006eee:	f107 030f 	add.w	r3, r7, #15
 8006ef2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006efc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006f00:	2100      	movs	r1, #0
 8006f02:	4618      	mov	r0, r3
 8006f04:	f000 fc0e 	bl	8007724 <hci_send_req>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	da01      	bge.n	8006f12 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8006f0e:	23ff      	movs	r3, #255	; 0xff
 8006f10:	e004      	b.n	8006f1c <aci_gatt_update_char_value+0x148>
  return status;
 8006f12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f16:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006f1a:	781b      	ldrb	r3, [r3, #0]
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bdb0      	pop	{r4, r5, r7, pc}

08006f26 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b0cc      	sub	sp, #304	; 0x130
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f34:	601a      	str	r2, [r3, #0]
 8006f36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f3a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006f3e:	4602      	mov	r2, r0
 8006f40:	701a      	strb	r2, [r3, #0]
 8006f42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f46:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006f4a:	460a      	mov	r2, r1
 8006f4c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8006f4e:	f107 0310 	add.w	r3, r7, #16
 8006f52:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006f56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f5a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006f5e:	2200      	movs	r2, #0
 8006f60:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006f62:	2300      	movs	r3, #0
 8006f64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8006f68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f6c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f70:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006f74:	7812      	ldrb	r2, [r2, #0]
 8006f76:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006f78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8006f82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f86:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f8a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006f8e:	7812      	ldrb	r2, [r2, #0]
 8006f90:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006f92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f96:	3301      	adds	r3, #1
 8006f98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8006f9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fa0:	1c98      	adds	r0, r3, #2
 8006fa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fa6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006faa:	781a      	ldrb	r2, [r3, #0]
 8006fac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fb4:	6819      	ldr	r1, [r3, #0]
 8006fb6:	f000 f92f 	bl	8007218 <Osal_MemCpy>
  index_input += Length;
 8006fba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fbe:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006fc8:	4413      	add	r3, r2
 8006fca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006fce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006fd2:	2218      	movs	r2, #24
 8006fd4:	2100      	movs	r1, #0
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f000 f92e 	bl	8007238 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006fdc:	233f      	movs	r3, #63	; 0x3f
 8006fde:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8006fe2:	230c      	movs	r3, #12
 8006fe4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006fe8:	f107 0310 	add.w	r3, r7, #16
 8006fec:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006ff0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ff4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006ff8:	f107 030f 	add.w	r3, r7, #15
 8006ffc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007000:	2301      	movs	r3, #1
 8007002:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007006:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800700a:	2100      	movs	r1, #0
 800700c:	4618      	mov	r0, r3
 800700e:	f000 fb89 	bl	8007724 <hci_send_req>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	da01      	bge.n	800701c <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8007018:	23ff      	movs	r3, #255	; 0xff
 800701a:	e004      	b.n	8007026 <aci_hal_write_config_data+0x100>
  return status;
 800701c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007020:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007024:	781b      	ldrb	r3, [r3, #0]
}
 8007026:	4618      	mov	r0, r3
 8007028:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b0cc      	sub	sp, #304	; 0x130
 8007034:	af00      	add	r7, sp, #0
 8007036:	4602      	mov	r2, r0
 8007038:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800703c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007040:	701a      	strb	r2, [r3, #0]
 8007042:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007046:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800704a:	460a      	mov	r2, r1
 800704c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800704e:	f107 0310 	add.w	r3, r7, #16
 8007052:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007056:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800705a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800705e:	2200      	movs	r2, #0
 8007060:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007062:	2300      	movs	r3, #0
 8007064:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8007068:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800706c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007070:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007074:	7812      	ldrb	r2, [r2, #0]
 8007076:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007078:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800707c:	3301      	adds	r3, #1
 800707e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8007082:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007086:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800708a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800708e:	7812      	ldrb	r2, [r2, #0]
 8007090:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007092:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007096:	3301      	adds	r3, #1
 8007098:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800709c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80070a0:	2218      	movs	r2, #24
 80070a2:	2100      	movs	r1, #0
 80070a4:	4618      	mov	r0, r3
 80070a6:	f000 f8c7 	bl	8007238 <Osal_MemSet>
  rq.ogf = 0x3f;
 80070aa:	233f      	movs	r3, #63	; 0x3f
 80070ac:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 80070b0:	230f      	movs	r3, #15
 80070b2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80070b6:	f107 0310 	add.w	r3, r7, #16
 80070ba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80070be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070c2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80070c6:	f107 030f 	add.w	r3, r7, #15
 80070ca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80070ce:	2301      	movs	r3, #1
 80070d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80070d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80070d8:	2100      	movs	r1, #0
 80070da:	4618      	mov	r0, r3
 80070dc:	f000 fb22 	bl	8007724 <hci_send_req>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	da01      	bge.n	80070ea <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 80070e6:	23ff      	movs	r3, #255	; 0xff
 80070e8:	e004      	b.n	80070f4 <aci_hal_set_tx_power_level+0xc4>
  return status;
 80070ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ee:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80070f2:	781b      	ldrb	r3, [r3, #0]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 80070fe:	b580      	push	{r7, lr}
 8007100:	b088      	sub	sp, #32
 8007102:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007104:	2300      	movs	r3, #0
 8007106:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007108:	f107 0308 	add.w	r3, r7, #8
 800710c:	2218      	movs	r2, #24
 800710e:	2100      	movs	r1, #0
 8007110:	4618      	mov	r0, r3
 8007112:	f000 f891 	bl	8007238 <Osal_MemSet>
  rq.ogf = 0x03;
 8007116:	2303      	movs	r3, #3
 8007118:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800711a:	2303      	movs	r3, #3
 800711c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800711e:	1dfb      	adds	r3, r7, #7
 8007120:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007122:	2301      	movs	r3, #1
 8007124:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007126:	f107 0308 	add.w	r3, r7, #8
 800712a:	2100      	movs	r1, #0
 800712c:	4618      	mov	r0, r3
 800712e:	f000 faf9 	bl	8007724 <hci_send_req>
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	da01      	bge.n	800713c <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007138:	23ff      	movs	r3, #255	; 0xff
 800713a:	e000      	b.n	800713e <hci_reset+0x40>
  return status;
 800713c:	79fb      	ldrb	r3, [r7, #7]
}
 800713e:	4618      	mov	r0, r3
 8007140:	3720      	adds	r7, #32
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <hci_le_set_scan_response_data>:
  return status;
}

tBleStatus hci_le_set_scan_response_data( uint8_t Scan_Response_Data_Length,
                                          const uint8_t* Scan_Response_Data )
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b0cc      	sub	sp, #304	; 0x130
 800714a:	af00      	add	r7, sp, #0
 800714c:	4602      	mov	r2, r0
 800714e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007152:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007156:	6019      	str	r1, [r3, #0]
 8007158:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800715c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007160:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
 8007162:	f107 0310 	add.w	r3, r7, #16
 8007166:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800716a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800716e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007172:	2200      	movs	r2, #0
 8007174:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007176:	2300      	movs	r3, #0
 8007178:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Scan_Response_Data_Length = Scan_Response_Data_Length;
 800717c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007180:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007184:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007188:	7812      	ldrb	r2, [r2, #0]
 800718a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800718c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007190:	3301      	adds	r3, #1
 8007192:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Scan_Response_Data, (const void*)Scan_Response_Data, 31 );
 8007196:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800719a:	1c58      	adds	r0, r3, #1
 800719c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071a4:	221f      	movs	r2, #31
 80071a6:	6819      	ldr	r1, [r3, #0]
 80071a8:	f000 f836 	bl	8007218 <Osal_MemCpy>
  index_input += 31;
 80071ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071b0:	331f      	adds	r3, #31
 80071b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80071b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80071ba:	2218      	movs	r2, #24
 80071bc:	2100      	movs	r1, #0
 80071be:	4618      	mov	r0, r3
 80071c0:	f000 f83a 	bl	8007238 <Osal_MemSet>
  rq.ogf = 0x08;
 80071c4:	2308      	movs	r3, #8
 80071c6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x009;
 80071ca:	2309      	movs	r3, #9
 80071cc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80071d0:	f107 0310 	add.w	r3, r7, #16
 80071d4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80071d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80071e0:	f107 030f 	add.w	r3, r7, #15
 80071e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80071e8:	2301      	movs	r3, #1
 80071ea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80071ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80071f2:	2100      	movs	r1, #0
 80071f4:	4618      	mov	r0, r3
 80071f6:	f000 fa95 	bl	8007724 <hci_send_req>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	da01      	bge.n	8007204 <hci_le_set_scan_response_data+0xbe>
    return BLE_STATUS_TIMEOUT;
 8007200:	23ff      	movs	r3, #255	; 0xff
 8007202:	e004      	b.n	800720e <hci_le_set_scan_response_data+0xc8>
  return status;
 8007204:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007208:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800720c:	781b      	ldrb	r3, [r3, #0]
}
 800720e:	4618      	mov	r0, r3
 8007210:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	68b9      	ldr	r1, [r7, #8]
 8007228:	68f8      	ldr	r0, [r7, #12]
 800722a:	f002 f89f 	bl	800936c <memcpy>
 800722e:	4603      	mov	r3, r0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3710      	adds	r7, #16
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	68b9      	ldr	r1, [r7, #8]
 8007248:	68f8      	ldr	r0, [r7, #12]
 800724a:	f002 f89d 	bl	8009388 <memset>
 800724e:	4603      	mov	r3, r0
}
 8007250:	4618      	mov	r0, r3
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8007258:	b480      	push	{r7}
 800725a:	af00      	add	r7, sp, #0
  return;
 800725c:	bf00      	nop
}
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr

08007266 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8007266:	b480      	push	{r7}
 8007268:	af00      	add	r7, sp, #0
  return;
 800726a:	bf00      	nop
}
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8007274:	b480      	push	{r7}
 8007276:	af00      	add	r7, sp, #0
  return;
 8007278:	bf00      	nop
}
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr

08007282 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8007282:	b480      	push	{r7}
 8007284:	af00      	add	r7, sp, #0
  return;
 8007286:	bf00      	nop
}
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8007290:	b480      	push	{r7}
 8007292:	af00      	add	r7, sp, #0
  return;
 8007294:	bf00      	nop
}
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr

0800729e <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800729e:	b480      	push	{r7}
 80072a0:	af00      	add	r7, sp, #0
  return;
 80072a2:	bf00      	nop
}
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <HRS_Init>:
__WEAK void HRS_Init( void )
{
 80072ac:	b480      	push	{r7}
 80072ae:	af00      	add	r7, sp, #0
  return;
 80072b0:	bf00      	nop
}
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr

080072ba <HTS_Init>:
__WEAK void HTS_Init( void )
{
 80072ba:	b480      	push	{r7}
 80072bc:	af00      	add	r7, sp, #0
  return;
 80072be:	bf00      	nop
}
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 80072c8:	b480      	push	{r7}
 80072ca:	af00      	add	r7, sp, #0
  return;
 80072cc:	bf00      	nop
}
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr

080072d6 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 80072d6:	b480      	push	{r7}
 80072d8:	af00      	add	r7, sp, #0
  return;
 80072da:	bf00      	nop
}
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 80072e4:	b480      	push	{r7}
 80072e6:	af00      	add	r7, sp, #0
  return;
 80072e8:	bf00      	nop
}
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr

080072f2 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 80072f2:	b480      	push	{r7}
 80072f4:	af00      	add	r7, sp, #0
  return;
 80072f6:	bf00      	nop
}
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8007300:	b480      	push	{r7}
 8007302:	af00      	add	r7, sp, #0
  return;
 8007304:	bf00      	nop
}
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr

0800730e <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800730e:	b480      	push	{r7}
 8007310:	af00      	add	r7, sp, #0
  return;
 8007312:	bf00      	nop
}
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800731c:	b480      	push	{r7}
 800731e:	af00      	add	r7, sp, #0
  return;
 8007320:	bf00      	nop
}
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr

0800732a <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800732a:	b480      	push	{r7}
 800732c:	af00      	add	r7, sp, #0
  return;
 800732e:	bf00      	nop
}
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8007338:	b480      	push	{r7}
 800733a:	af00      	add	r7, sp, #0
  return;
 800733c:	bf00      	nop
}
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr

08007346 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 8007346:	b480      	push	{r7}
 8007348:	af00      	add	r7, sp, #0
  return;
 800734a:	bf00      	nop
}
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8007354:	b580      	push	{r7, lr}
 8007356:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8007358:	4b04      	ldr	r3, [pc, #16]	; (800736c <SVCCTL_Init+0x18>)
 800735a:	2200      	movs	r2, #0
 800735c:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800735e:	4b04      	ldr	r3, [pc, #16]	; (8007370 <SVCCTL_Init+0x1c>)
 8007360:	2200      	movs	r2, #0
 8007362:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8007364:	f000 f806 	bl	8007374 <SVCCTL_SvcInit>

  return;
 8007368:	bf00      	nop
}
 800736a:	bd80      	pop	{r7, pc}
 800736c:	20000290 	.word	0x20000290
 8007370:	200002b0 	.word	0x200002b0

08007374 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	af00      	add	r7, sp, #0
  BAS_Init();
 8007378:	f7ff ff6e 	bl	8007258 <BAS_Init>

  BLS_Init();
 800737c:	f7ff ff73 	bl	8007266 <BLS_Init>

  CRS_STM_Init();
 8007380:	f7ff ff78 	bl	8007274 <CRS_STM_Init>

  DIS_Init();
 8007384:	f7ff ff7d 	bl	8007282 <DIS_Init>

  EDS_STM_Init();
 8007388:	f7ff ff82 	bl	8007290 <EDS_STM_Init>

  HIDS_Init();
 800738c:	f7ff ff87 	bl	800729e <HIDS_Init>

  HRS_Init();
 8007390:	f7ff ff8c 	bl	80072ac <HRS_Init>

  HTS_Init();
 8007394:	f7ff ff91 	bl	80072ba <HTS_Init>

  IAS_Init();
 8007398:	f7ff ff96 	bl	80072c8 <IAS_Init>

  LLS_Init();
 800739c:	f7ff ff9b 	bl	80072d6 <LLS_Init>

  TPS_Init();
 80073a0:	f7ff ffa0 	bl	80072e4 <TPS_Init>

  MOTENV_STM_Init();
 80073a4:	f7ff ffa5 	bl	80072f2 <MOTENV_STM_Init>

  P2PS_STM_Init();
 80073a8:	f7ff ffaa 	bl	8007300 <P2PS_STM_Init>

  ZDD_STM_Init();
 80073ac:	f7ff ffaf 	bl	800730e <ZDD_STM_Init>

  OTAS_STM_Init();
 80073b0:	f7ff ffb4 	bl	800731c <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80073b4:	f7ff ffc0 	bl	8007338 <BVOPUS_STM_Init>

  MESH_Init();
 80073b8:	f7ff ffb7 	bl	800732a <MESH_Init>

  SVCCTL_InitCustomSvc();
 80073bc:	f7ff ffc3 	bl	8007346 <SVCCTL_InitCustomSvc>
  
  return;
 80073c0:	bf00      	nop
}
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b086      	sub	sp, #24
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	3301      	adds	r3, #1
 80073d0:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 80073d2:	2300      	movs	r3, #0
 80073d4:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	2bff      	cmp	r3, #255	; 0xff
 80073dc:	d125      	bne.n	800742a <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	3302      	adds	r3, #2
 80073e2:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	881b      	ldrh	r3, [r3, #0]
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80073ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073f2:	d118      	bne.n	8007426 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80073f4:	2300      	movs	r3, #0
 80073f6:	757b      	strb	r3, [r7, #21]
 80073f8:	e00d      	b.n	8007416 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 80073fa:	7d7b      	ldrb	r3, [r7, #21]
 80073fc:	4a1a      	ldr	r2, [pc, #104]	; (8007468 <SVCCTL_UserEvtRx+0xa4>)
 80073fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	4798      	blx	r3
 8007406:	4603      	mov	r3, r0
 8007408:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800740a:	7dfb      	ldrb	r3, [r7, #23]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d108      	bne.n	8007422 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007410:	7d7b      	ldrb	r3, [r7, #21]
 8007412:	3301      	adds	r3, #1
 8007414:	757b      	strb	r3, [r7, #21]
 8007416:	4b14      	ldr	r3, [pc, #80]	; (8007468 <SVCCTL_UserEvtRx+0xa4>)
 8007418:	7f1b      	ldrb	r3, [r3, #28]
 800741a:	7d7a      	ldrb	r2, [r7, #21]
 800741c:	429a      	cmp	r2, r3
 800741e:	d3ec      	bcc.n	80073fa <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8007420:	e002      	b.n	8007428 <SVCCTL_UserEvtRx+0x64>
              break;
 8007422:	bf00      	nop
          break;
 8007424:	e000      	b.n	8007428 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8007426:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8007428:	e000      	b.n	800742c <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800742a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800742c:	7dfb      	ldrb	r3, [r7, #23]
 800742e:	2b02      	cmp	r3, #2
 8007430:	d00f      	beq.n	8007452 <SVCCTL_UserEvtRx+0x8e>
 8007432:	2b02      	cmp	r3, #2
 8007434:	dc10      	bgt.n	8007458 <SVCCTL_UserEvtRx+0x94>
 8007436:	2b00      	cmp	r3, #0
 8007438:	d002      	beq.n	8007440 <SVCCTL_UserEvtRx+0x7c>
 800743a:	2b01      	cmp	r3, #1
 800743c:	d006      	beq.n	800744c <SVCCTL_UserEvtRx+0x88>
 800743e:	e00b      	b.n	8007458 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 ff87 	bl	8008354 <SVCCTL_App_Notification>
 8007446:	4603      	mov	r3, r0
 8007448:	75bb      	strb	r3, [r7, #22]
      break;
 800744a:	e008      	b.n	800745e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800744c:	2301      	movs	r3, #1
 800744e:	75bb      	strb	r3, [r7, #22]
      break;
 8007450:	e005      	b.n	800745e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8007452:	2300      	movs	r3, #0
 8007454:	75bb      	strb	r3, [r7, #22]
      break;
 8007456:	e002      	b.n	800745e <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007458:	2301      	movs	r3, #1
 800745a:	75bb      	strb	r3, [r7, #22]
      break;
 800745c:	bf00      	nop
  }

  return (return_status);
 800745e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007460:	4618      	mov	r0, r3
 8007462:	3718      	adds	r7, #24
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}
 8007468:	20000290 	.word	0x20000290

0800746c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b088      	sub	sp, #32
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007474:	f107 030c 	add.w	r3, r7, #12
 8007478:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	212c      	movs	r1, #44	; 0x2c
 8007484:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8007488:	f000 fae2 	bl	8007a50 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	330b      	adds	r3, #11
 8007490:	78db      	ldrb	r3, [r3, #3]
}
 8007492:	4618      	mov	r0, r3
 8007494:	3720      	adds	r7, #32
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800749a:	b580      	push	{r7, lr}
 800749c:	b088      	sub	sp, #32
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80074a2:	f107 030c 	add.w	r3, r7, #12
 80074a6:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	210f      	movs	r1, #15
 80074b2:	f64f 4068 	movw	r0, #64616	; 0xfc68
 80074b6:	f000 facb 	bl	8007a50 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	330b      	adds	r3, #11
 80074be:	78db      	ldrb	r3, [r3, #3]
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3720      	adds	r7, #32
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b088      	sub	sp, #32
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80074d0:	f107 030c 	add.w	r3, r7, #12
 80074d4:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	210e      	movs	r1, #14
 80074dc:	f64f 4075 	movw	r0, #64629	; 0xfc75
 80074e0:	f000 fab6 	bl	8007a50 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	330b      	adds	r3, #11
 80074e8:	78db      	ldrb	r3, [r3, #3]
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3720      	adds	r7, #32
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
	...

080074f4 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 80074f4:	b480      	push	{r7}
 80074f6:	b08b      	sub	sp, #44	; 0x2c
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 80074fc:	2300      	movs	r3, #0
 80074fe:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8007500:	2300      	movs	r3, #0
 8007502:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8007504:	2300      	movs	r3, #0
 8007506:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8007508:	2300      	movs	r3, #0
 800750a:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800750c:	2300      	movs	r3, #0
 800750e:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8007510:	2300      	movs	r3, #0
 8007512:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8007514:	2300      	movs	r3, #0
 8007516:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8007518:	2300      	movs	r3, #0
 800751a:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800751c:	4b4a      	ldr	r3, [pc, #296]	; (8007648 <SHCI_GetWirelessFwInfo+0x154>)
 800751e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007520:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007524:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800752e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a44      	ldr	r2, [pc, #272]	; (800764c <SHCI_GetWirelessFwInfo+0x158>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d10f      	bne.n	8007560 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	695b      	ldr	r3, [r3, #20]
 8007544:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	699b      	ldr	r3, [r3, #24]
 800754a:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	69db      	ldr	r3, [r3, #28]
 8007550:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	691b      	ldr	r3, [r3, #16]
 800755c:	617b      	str	r3, [r7, #20]
 800755e:	e01a      	b.n	8007596 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007568:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800756c:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	695b      	ldr	r3, [r3, #20]
 800757c:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	699b      	ldr	r3, [r3, #24]
 8007584:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8007596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007598:	0e1b      	lsrs	r3, r3, #24
 800759a:	b2da      	uxtb	r2, r3
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80075a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a2:	0c1b      	lsrs	r3, r3, #16
 80075a4:	b2da      	uxtb	r2, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80075aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ac:	0a1b      	lsrs	r3, r3, #8
 80075ae:	b2da      	uxtb	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 80075b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b6:	091b      	lsrs	r3, r3, #4
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	f003 030f 	and.w	r3, r3, #15
 80075be:	b2da      	uxtb	r2, r3
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 80075c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	f003 030f 	and.w	r3, r3, #15
 80075cc:	b2da      	uxtb	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80075d2:	6a3b      	ldr	r3, [r7, #32]
 80075d4:	0e1b      	lsrs	r3, r3, #24
 80075d6:	b2da      	uxtb	r2, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80075dc:	6a3b      	ldr	r3, [r7, #32]
 80075de:	0c1b      	lsrs	r3, r3, #16
 80075e0:	b2da      	uxtb	r2, r3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 80075e6:	6a3b      	ldr	r3, [r7, #32]
 80075e8:	0a1b      	lsrs	r3, r3, #8
 80075ea:	b2da      	uxtb	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80075f0:	6a3b      	ldr	r3, [r7, #32]
 80075f2:	b2da      	uxtb	r2, r3
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	b2da      	uxtb	r2, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8007600:	69bb      	ldr	r3, [r7, #24]
 8007602:	0e1b      	lsrs	r3, r3, #24
 8007604:	b2da      	uxtb	r2, r3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	0c1b      	lsrs	r3, r3, #16
 800760e:	b2da      	uxtb	r2, r3
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	0a1b      	lsrs	r3, r3, #8
 8007618:	b2da      	uxtb	r2, r3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	0e1b      	lsrs	r3, r3, #24
 8007622:	b2da      	uxtb	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	0c1b      	lsrs	r3, r3, #16
 800762c:	b2da      	uxtb	r2, r3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	b2da      	uxtb	r2, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	372c      	adds	r7, #44	; 0x2c
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr
 8007648:	58004000 	.word	0x58004000
 800764c:	a94656b9 	.word	0xa94656b9

08007650 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	4a08      	ldr	r2, [pc, #32]	; (8007680 <hci_init+0x30>)
 8007660:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8007662:	4a08      	ldr	r2, [pc, #32]	; (8007684 <hci_init+0x34>)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8007668:	4806      	ldr	r0, [pc, #24]	; (8007684 <hci_init+0x34>)
 800766a:	f000 f973 	bl	8007954 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4618      	mov	r0, r3
 8007674:	f000 f8d4 	bl	8007820 <TlInit>

  return;
 8007678:	bf00      	nop
}
 800767a:	3708      	adds	r7, #8
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	20000504 	.word	0x20000504
 8007684:	200004dc 	.word	0x200004dc

08007688 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800768e:	4822      	ldr	r0, [pc, #136]	; (8007718 <hci_user_evt_proc+0x90>)
 8007690:	f000 fd28 	bl	80080e4 <LST_is_empty>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d12b      	bne.n	80076f2 <hci_user_evt_proc+0x6a>
 800769a:	4b20      	ldr	r3, [pc, #128]	; (800771c <hci_user_evt_proc+0x94>)
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d027      	beq.n	80076f2 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80076a2:	f107 030c 	add.w	r3, r7, #12
 80076a6:	4619      	mov	r1, r3
 80076a8:	481b      	ldr	r0, [pc, #108]	; (8007718 <hci_user_evt_proc+0x90>)
 80076aa:	f000 fdaa 	bl	8008202 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80076ae:	4b1c      	ldr	r3, [pc, #112]	; (8007720 <hci_user_evt_proc+0x98>)
 80076b0:	69db      	ldr	r3, [r3, #28]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d00c      	beq.n	80076d0 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 80076ba:	2301      	movs	r3, #1
 80076bc:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 80076be:	4b18      	ldr	r3, [pc, #96]	; (8007720 <hci_user_evt_proc+0x98>)
 80076c0:	69db      	ldr	r3, [r3, #28]
 80076c2:	1d3a      	adds	r2, r7, #4
 80076c4:	4610      	mov	r0, r2
 80076c6:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80076c8:	793a      	ldrb	r2, [r7, #4]
 80076ca:	4b14      	ldr	r3, [pc, #80]	; (800771c <hci_user_evt_proc+0x94>)
 80076cc:	701a      	strb	r2, [r3, #0]
 80076ce:	e002      	b.n	80076d6 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80076d0:	4b12      	ldr	r3, [pc, #72]	; (800771c <hci_user_evt_proc+0x94>)
 80076d2:	2201      	movs	r2, #1
 80076d4:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80076d6:	4b11      	ldr	r3, [pc, #68]	; (800771c <hci_user_evt_proc+0x94>)
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d004      	beq.n	80076e8 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	4618      	mov	r0, r3
 80076e2:	f000 fc03 	bl	8007eec <TL_MM_EvtDone>
 80076e6:	e004      	b.n	80076f2 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	4619      	mov	r1, r3
 80076ec:	480a      	ldr	r0, [pc, #40]	; (8007718 <hci_user_evt_proc+0x90>)
 80076ee:	f000 fd1b 	bl	8008128 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80076f2:	4809      	ldr	r0, [pc, #36]	; (8007718 <hci_user_evt_proc+0x90>)
 80076f4:	f000 fcf6 	bl	80080e4 <LST_is_empty>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d107      	bne.n	800770e <hci_user_evt_proc+0x86>
 80076fe:	4b07      	ldr	r3, [pc, #28]	; (800771c <hci_user_evt_proc+0x94>)
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d003      	beq.n	800770e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8007706:	4804      	ldr	r0, [pc, #16]	; (8007718 <hci_user_evt_proc+0x90>)
 8007708:	f000 ff4e 	bl	80085a8 <hci_notify_asynch_evt>
  }


  return;
 800770c:	bf00      	nop
 800770e:	bf00      	nop
}
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	200002b8 	.word	0x200002b8
 800771c:	200002c4 	.word	0x200002c4
 8007720:	200004dc 	.word	0x200004dc

08007724 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b088      	sub	sp, #32
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	460b      	mov	r3, r1
 800772e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8007730:	2000      	movs	r0, #0
 8007732:	f000 f8cb 	bl	80078cc <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8007736:	2300      	movs	r3, #0
 8007738:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	885b      	ldrh	r3, [r3, #2]
 800773e:	b21b      	sxth	r3, r3
 8007740:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007744:	b21a      	sxth	r2, r3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	881b      	ldrh	r3, [r3, #0]
 800774a:	029b      	lsls	r3, r3, #10
 800774c:	b21b      	sxth	r3, r3
 800774e:	4313      	orrs	r3, r2
 8007750:	b21b      	sxth	r3, r3
 8007752:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	b2d9      	uxtb	r1, r3
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	689a      	ldr	r2, [r3, #8]
 800775e:	8bbb      	ldrh	r3, [r7, #28]
 8007760:	4618      	mov	r0, r3
 8007762:	f000 f88d 	bl	8007880 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8007766:	e04e      	b.n	8007806 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8007768:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800776c:	f000 ff33 	bl	80085d6 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8007770:	e043      	b.n	80077fa <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8007772:	f107 030c 	add.w	r3, r7, #12
 8007776:	4619      	mov	r1, r3
 8007778:	4828      	ldr	r0, [pc, #160]	; (800781c <hci_send_req+0xf8>)
 800777a:	f000 fd42 	bl	8008202 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	7a5b      	ldrb	r3, [r3, #9]
 8007782:	2b0f      	cmp	r3, #15
 8007784:	d114      	bne.n	80077b0 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	330b      	adds	r3, #11
 800778a:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	885b      	ldrh	r3, [r3, #2]
 8007790:	b29b      	uxth	r3, r3
 8007792:	8bba      	ldrh	r2, [r7, #28]
 8007794:	429a      	cmp	r2, r3
 8007796:	d104      	bne.n	80077a2 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	693a      	ldr	r2, [r7, #16]
 800779e:	7812      	ldrb	r2, [r2, #0]
 80077a0:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	785b      	ldrb	r3, [r3, #1]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d027      	beq.n	80077fa <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80077aa:	2301      	movs	r3, #1
 80077ac:	77fb      	strb	r3, [r7, #31]
 80077ae:	e024      	b.n	80077fa <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	330b      	adds	r3, #11
 80077b4:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80077bc:	b29b      	uxth	r3, r3
 80077be:	8bba      	ldrh	r2, [r7, #28]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d114      	bne.n	80077ee <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	7a9b      	ldrb	r3, [r3, #10]
 80077c8:	3b03      	subs	r3, #3
 80077ca:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	695a      	ldr	r2, [r3, #20]
 80077d0:	7dfb      	ldrb	r3, [r7, #23]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	bfa8      	it	ge
 80077d6:	461a      	movge	r2, r3
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6918      	ldr	r0, [r3, #16]
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	1cd9      	adds	r1, r3, #3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	695b      	ldr	r3, [r3, #20]
 80077e8:	461a      	mov	r2, r3
 80077ea:	f001 fdbf 	bl	800936c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d001      	beq.n	80077fa <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80077f6:	2301      	movs	r3, #1
 80077f8:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80077fa:	4808      	ldr	r0, [pc, #32]	; (800781c <hci_send_req+0xf8>)
 80077fc:	f000 fc72 	bl	80080e4 <LST_is_empty>
 8007800:	4603      	mov	r3, r0
 8007802:	2b00      	cmp	r3, #0
 8007804:	d0b5      	beq.n	8007772 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8007806:	7ffb      	ldrb	r3, [r7, #31]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d0ad      	beq.n	8007768 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800780c:	2001      	movs	r0, #1
 800780e:	f000 f85d 	bl	80078cc <NotifyCmdStatus>

  return 0;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3720      	adds	r7, #32
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	200004fc 	.word	0x200004fc

08007820 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b086      	sub	sp, #24
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8007828:	480f      	ldr	r0, [pc, #60]	; (8007868 <TlInit+0x48>)
 800782a:	f000 fc4b 	bl	80080c4 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800782e:	4a0f      	ldr	r2, [pc, #60]	; (800786c <TlInit+0x4c>)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8007834:	480e      	ldr	r0, [pc, #56]	; (8007870 <TlInit+0x50>)
 8007836:	f000 fc45 	bl	80080c4 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800783a:	4b0e      	ldr	r3, [pc, #56]	; (8007874 <TlInit+0x54>)
 800783c:	2201      	movs	r2, #1
 800783e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8007840:	4b0d      	ldr	r3, [pc, #52]	; (8007878 <TlInit+0x58>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00a      	beq.n	800785e <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800784c:	4b0b      	ldr	r3, [pc, #44]	; (800787c <TlInit+0x5c>)
 800784e:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8007850:	4b09      	ldr	r3, [pc, #36]	; (8007878 <TlInit+0x58>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f107 0208 	add.w	r2, r7, #8
 8007858:	4610      	mov	r0, r2
 800785a:	4798      	blx	r3
  }

  return;
 800785c:	bf00      	nop
 800785e:	bf00      	nop
}
 8007860:	3718      	adds	r7, #24
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	200004fc 	.word	0x200004fc
 800786c:	200002c0 	.word	0x200002c0
 8007870:	200002b8 	.word	0x200002b8
 8007874:	200002c4 	.word	0x200002c4
 8007878:	200004dc 	.word	0x200004dc
 800787c:	0800790d 	.word	0x0800790d

08007880 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
 8007886:	4603      	mov	r3, r0
 8007888:	603a      	str	r2, [r7, #0]
 800788a:	80fb      	strh	r3, [r7, #6]
 800788c:	460b      	mov	r3, r1
 800788e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8007890:	4b0c      	ldr	r3, [pc, #48]	; (80078c4 <SendCmd+0x44>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	88fa      	ldrh	r2, [r7, #6]
 8007896:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800789a:	4b0a      	ldr	r3, [pc, #40]	; (80078c4 <SendCmd+0x44>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	797a      	ldrb	r2, [r7, #5]
 80078a0:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80078a2:	4b08      	ldr	r3, [pc, #32]	; (80078c4 <SendCmd+0x44>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	330c      	adds	r3, #12
 80078a8:	797a      	ldrb	r2, [r7, #5]
 80078aa:	6839      	ldr	r1, [r7, #0]
 80078ac:	4618      	mov	r0, r3
 80078ae:	f001 fd5d 	bl	800936c <memcpy>

  hciContext.io.Send(0,0);
 80078b2:	4b05      	ldr	r3, [pc, #20]	; (80078c8 <SendCmd+0x48>)
 80078b4:	691b      	ldr	r3, [r3, #16]
 80078b6:	2100      	movs	r1, #0
 80078b8:	2000      	movs	r0, #0
 80078ba:	4798      	blx	r3

  return;
 80078bc:	bf00      	nop
}
 80078be:	3708      	adds	r7, #8
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	200002c0 	.word	0x200002c0
 80078c8:	200004dc 	.word	0x200004dc

080078cc <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	4603      	mov	r3, r0
 80078d4:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80078d6:	79fb      	ldrb	r3, [r7, #7]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d108      	bne.n	80078ee <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80078dc:	4b0a      	ldr	r3, [pc, #40]	; (8007908 <NotifyCmdStatus+0x3c>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d00d      	beq.n	8007900 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80078e4:	4b08      	ldr	r3, [pc, #32]	; (8007908 <NotifyCmdStatus+0x3c>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2000      	movs	r0, #0
 80078ea:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80078ec:	e008      	b.n	8007900 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80078ee:	4b06      	ldr	r3, [pc, #24]	; (8007908 <NotifyCmdStatus+0x3c>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d004      	beq.n	8007900 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80078f6:	4b04      	ldr	r3, [pc, #16]	; (8007908 <NotifyCmdStatus+0x3c>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2001      	movs	r0, #1
 80078fc:	4798      	blx	r3
  return;
 80078fe:	bf00      	nop
 8007900:	bf00      	nop
}
 8007902:	3708      	adds	r7, #8
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}
 8007908:	20000504 	.word	0x20000504

0800790c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	7a5b      	ldrb	r3, [r3, #9]
 8007918:	2b0f      	cmp	r3, #15
 800791a:	d003      	beq.n	8007924 <TlEvtReceived+0x18>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	7a5b      	ldrb	r3, [r3, #9]
 8007920:	2b0e      	cmp	r3, #14
 8007922:	d107      	bne.n	8007934 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8007924:	6879      	ldr	r1, [r7, #4]
 8007926:	4809      	ldr	r0, [pc, #36]	; (800794c <TlEvtReceived+0x40>)
 8007928:	f000 fc24 	bl	8008174 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800792c:	2000      	movs	r0, #0
 800792e:	f000 fe47 	bl	80085c0 <hci_cmd_resp_release>
 8007932:	e006      	b.n	8007942 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8007934:	6879      	ldr	r1, [r7, #4]
 8007936:	4806      	ldr	r0, [pc, #24]	; (8007950 <TlEvtReceived+0x44>)
 8007938:	f000 fc1c 	bl	8008174 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800793c:	4804      	ldr	r0, [pc, #16]	; (8007950 <TlEvtReceived+0x44>)
 800793e:	f000 fe33 	bl	80085a8 <hci_notify_asynch_evt>
  }

  return;
 8007942:	bf00      	nop
}
 8007944:	3708      	adds	r7, #8
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	200004fc 	.word	0x200004fc
 8007950:	200002b8 	.word	0x200002b8

08007954 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	4a05      	ldr	r2, [pc, #20]	; (8007974 <hci_register_io_bus+0x20>)
 8007960:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a04      	ldr	r2, [pc, #16]	; (8007978 <hci_register_io_bus+0x24>)
 8007966:	611a      	str	r2, [r3, #16]

  return;
 8007968:	bf00      	nop
}
 800796a:	370c      	adds	r7, #12
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr
 8007974:	08007c65 	.word	0x08007c65
 8007978:	08007ccd 	.word	0x08007ccd

0800797c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	4a08      	ldr	r2, [pc, #32]	; (80079ac <shci_init+0x30>)
 800798c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800798e:	4a08      	ldr	r2, [pc, #32]	; (80079b0 <shci_init+0x34>)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8007994:	4806      	ldr	r0, [pc, #24]	; (80079b0 <shci_init+0x34>)
 8007996:	f000 f911 	bl	8007bbc <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4618      	mov	r0, r3
 80079a0:	f000 f894 	bl	8007acc <TlInit>

  return;
 80079a4:	bf00      	nop
}
 80079a6:	3708      	adds	r7, #8
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	20000528 	.word	0x20000528
 80079b0:	20000508 	.word	0x20000508

080079b4 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80079ba:	4822      	ldr	r0, [pc, #136]	; (8007a44 <shci_user_evt_proc+0x90>)
 80079bc:	f000 fb92 	bl	80080e4 <LST_is_empty>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d12b      	bne.n	8007a1e <shci_user_evt_proc+0x6a>
 80079c6:	4b20      	ldr	r3, [pc, #128]	; (8007a48 <shci_user_evt_proc+0x94>)
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d027      	beq.n	8007a1e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80079ce:	f107 030c 	add.w	r3, r7, #12
 80079d2:	4619      	mov	r1, r3
 80079d4:	481b      	ldr	r0, [pc, #108]	; (8007a44 <shci_user_evt_proc+0x90>)
 80079d6:	f000 fc14 	bl	8008202 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80079da:	4b1c      	ldr	r3, [pc, #112]	; (8007a4c <shci_user_evt_proc+0x98>)
 80079dc:	69db      	ldr	r3, [r3, #28]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d00c      	beq.n	80079fc <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80079e6:	2301      	movs	r3, #1
 80079e8:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80079ea:	4b18      	ldr	r3, [pc, #96]	; (8007a4c <shci_user_evt_proc+0x98>)
 80079ec:	69db      	ldr	r3, [r3, #28]
 80079ee:	1d3a      	adds	r2, r7, #4
 80079f0:	4610      	mov	r0, r2
 80079f2:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80079f4:	793a      	ldrb	r2, [r7, #4]
 80079f6:	4b14      	ldr	r3, [pc, #80]	; (8007a48 <shci_user_evt_proc+0x94>)
 80079f8:	701a      	strb	r2, [r3, #0]
 80079fa:	e002      	b.n	8007a02 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80079fc:	4b12      	ldr	r3, [pc, #72]	; (8007a48 <shci_user_evt_proc+0x94>)
 80079fe:	2201      	movs	r2, #1
 8007a00:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8007a02:	4b11      	ldr	r3, [pc, #68]	; (8007a48 <shci_user_evt_proc+0x94>)
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d004      	beq.n	8007a14 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f000 fa6d 	bl	8007eec <TL_MM_EvtDone>
 8007a12:	e004      	b.n	8007a1e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	4619      	mov	r1, r3
 8007a18:	480a      	ldr	r0, [pc, #40]	; (8007a44 <shci_user_evt_proc+0x90>)
 8007a1a:	f000 fb85 	bl	8008128 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8007a1e:	4809      	ldr	r0, [pc, #36]	; (8007a44 <shci_user_evt_proc+0x90>)
 8007a20:	f000 fb60 	bl	80080e4 <LST_is_empty>
 8007a24:	4603      	mov	r3, r0
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d107      	bne.n	8007a3a <shci_user_evt_proc+0x86>
 8007a2a:	4b07      	ldr	r3, [pc, #28]	; (8007a48 <shci_user_evt_proc+0x94>)
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d003      	beq.n	8007a3a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8007a32:	4804      	ldr	r0, [pc, #16]	; (8007a44 <shci_user_evt_proc+0x90>)
 8007a34:	f7f9 ff94 	bl	8001960 <shci_notify_asynch_evt>
  }


  return;
 8007a38:	bf00      	nop
 8007a3a:	bf00      	nop
}
 8007a3c:	3710      	adds	r7, #16
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	200002c8 	.word	0x200002c8
 8007a48:	200002d8 	.word	0x200002d8
 8007a4c:	20000508 	.word	0x20000508

08007a50 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60ba      	str	r2, [r7, #8]
 8007a58:	607b      	str	r3, [r7, #4]
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	81fb      	strh	r3, [r7, #14]
 8007a5e:	460b      	mov	r3, r1
 8007a60:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8007a62:	2000      	movs	r0, #0
 8007a64:	f000 f864 	bl	8007b30 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8007a68:	4b16      	ldr	r3, [pc, #88]	; (8007ac4 <shci_send+0x74>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	89fa      	ldrh	r2, [r7, #14]
 8007a6e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8007a72:	4b14      	ldr	r3, [pc, #80]	; (8007ac4 <shci_send+0x74>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	7b7a      	ldrb	r2, [r7, #13]
 8007a78:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8007a7a:	4b12      	ldr	r3, [pc, #72]	; (8007ac4 <shci_send+0x74>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	330c      	adds	r3, #12
 8007a80:	7b7a      	ldrb	r2, [r7, #13]
 8007a82:	68b9      	ldr	r1, [r7, #8]
 8007a84:	4618      	mov	r0, r3
 8007a86:	f001 fc71 	bl	800936c <memcpy>

  shciContext.io.Send(0,0);
 8007a8a:	4b0f      	ldr	r3, [pc, #60]	; (8007ac8 <shci_send+0x78>)
 8007a8c:	691b      	ldr	r3, [r3, #16]
 8007a8e:	2100      	movs	r1, #0
 8007a90:	2000      	movs	r0, #0
 8007a92:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8007a94:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8007a98:	f7f9 ff79 	bl	800198e <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f103 0008 	add.w	r0, r3, #8
 8007aa2:	4b08      	ldr	r3, [pc, #32]	; (8007ac4 <shci_send+0x74>)
 8007aa4:	6819      	ldr	r1, [r3, #0]
 8007aa6:	4b07      	ldr	r3, [pc, #28]	; (8007ac4 <shci_send+0x74>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	789b      	ldrb	r3, [r3, #2]
 8007aac:	3303      	adds	r3, #3
 8007aae:	461a      	mov	r2, r3
 8007ab0:	f001 fc5c 	bl	800936c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8007ab4:	2001      	movs	r0, #1
 8007ab6:	f000 f83b 	bl	8007b30 <Cmd_SetStatus>

  return;
 8007aba:	bf00      	nop
}
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	200002d4 	.word	0x200002d4
 8007ac8:	20000508 	.word	0x20000508

08007acc <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b086      	sub	sp, #24
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8007ad4:	4a10      	ldr	r2, [pc, #64]	; (8007b18 <TlInit+0x4c>)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8007ada:	4810      	ldr	r0, [pc, #64]	; (8007b1c <TlInit+0x50>)
 8007adc:	f000 faf2 	bl	80080c4 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8007ae0:	2001      	movs	r0, #1
 8007ae2:	f000 f825 	bl	8007b30 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8007ae6:	4b0e      	ldr	r3, [pc, #56]	; (8007b20 <TlInit+0x54>)
 8007ae8:	2201      	movs	r2, #1
 8007aea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8007aec:	4b0d      	ldr	r3, [pc, #52]	; (8007b24 <TlInit+0x58>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d00c      	beq.n	8007b0e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8007af8:	4b0b      	ldr	r3, [pc, #44]	; (8007b28 <TlInit+0x5c>)
 8007afa:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8007afc:	4b0b      	ldr	r3, [pc, #44]	; (8007b2c <TlInit+0x60>)
 8007afe:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8007b00:	4b08      	ldr	r3, [pc, #32]	; (8007b24 <TlInit+0x58>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f107 020c 	add.w	r2, r7, #12
 8007b08:	4610      	mov	r0, r2
 8007b0a:	4798      	blx	r3
  }

  return;
 8007b0c:	bf00      	nop
 8007b0e:	bf00      	nop
}
 8007b10:	3718      	adds	r7, #24
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	200002d4 	.word	0x200002d4
 8007b1c:	200002c8 	.word	0x200002c8
 8007b20:	200002d8 	.word	0x200002d8
 8007b24:	20000508 	.word	0x20000508
 8007b28:	08007b81 	.word	0x08007b81
 8007b2c:	08007b99 	.word	0x08007b99

08007b30 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	4603      	mov	r3, r0
 8007b38:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8007b3a:	79fb      	ldrb	r3, [r7, #7]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d10b      	bne.n	8007b58 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8007b40:	4b0d      	ldr	r3, [pc, #52]	; (8007b78 <Cmd_SetStatus+0x48>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d003      	beq.n	8007b50 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8007b48:	4b0b      	ldr	r3, [pc, #44]	; (8007b78 <Cmd_SetStatus+0x48>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	2000      	movs	r0, #0
 8007b4e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8007b50:	4b0a      	ldr	r3, [pc, #40]	; (8007b7c <Cmd_SetStatus+0x4c>)
 8007b52:	2200      	movs	r2, #0
 8007b54:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8007b56:	e00b      	b.n	8007b70 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8007b58:	4b08      	ldr	r3, [pc, #32]	; (8007b7c <Cmd_SetStatus+0x4c>)
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8007b5e:	4b06      	ldr	r3, [pc, #24]	; (8007b78 <Cmd_SetStatus+0x48>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d004      	beq.n	8007b70 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8007b66:	4b04      	ldr	r3, [pc, #16]	; (8007b78 <Cmd_SetStatus+0x48>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	2001      	movs	r0, #1
 8007b6c:	4798      	blx	r3
  return;
 8007b6e:	bf00      	nop
 8007b70:	bf00      	nop
}
 8007b72:	3708      	adds	r7, #8
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	20000528 	.word	0x20000528
 8007b7c:	200002d0 	.word	0x200002d0

08007b80 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8007b88:	2000      	movs	r0, #0
 8007b8a:	f7f9 fef5 	bl	8001978 <shci_cmd_resp_release>

  return;
 8007b8e:	bf00      	nop
}
 8007b90:	3708      	adds	r7, #8
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
	...

08007b98 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8007ba0:	6879      	ldr	r1, [r7, #4]
 8007ba2:	4805      	ldr	r0, [pc, #20]	; (8007bb8 <TlUserEvtReceived+0x20>)
 8007ba4:	f000 fae6 	bl	8008174 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8007ba8:	4803      	ldr	r0, [pc, #12]	; (8007bb8 <TlUserEvtReceived+0x20>)
 8007baa:	f7f9 fed9 	bl	8001960 <shci_notify_asynch_evt>

  return;
 8007bae:	bf00      	nop
}
 8007bb0:	3708      	adds	r7, #8
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	200002c8 	.word	0x200002c8

08007bbc <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a05      	ldr	r2, [pc, #20]	; (8007bdc <shci_register_io_bus+0x20>)
 8007bc8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4a04      	ldr	r2, [pc, #16]	; (8007be0 <shci_register_io_bus+0x24>)
 8007bce:	611a      	str	r2, [r3, #16]

  return;
 8007bd0:	bf00      	nop
}
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr
 8007bdc:	08007d79 	.word	0x08007d79
 8007be0:	08007dcd 	.word	0x08007dcd

08007be4 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8007be8:	f001 f80e 	bl	8008c08 <HW_IPCC_Enable>

  return;
 8007bec:	bf00      	nop
}
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <TL_Init>:


void TL_Init( void )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8007bf4:	4b10      	ldr	r3, [pc, #64]	; (8007c38 <TL_Init+0x48>)
 8007bf6:	4a11      	ldr	r2, [pc, #68]	; (8007c3c <TL_Init+0x4c>)
 8007bf8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8007bfa:	4b0f      	ldr	r3, [pc, #60]	; (8007c38 <TL_Init+0x48>)
 8007bfc:	4a10      	ldr	r2, [pc, #64]	; (8007c40 <TL_Init+0x50>)
 8007bfe:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8007c00:	4b0d      	ldr	r3, [pc, #52]	; (8007c38 <TL_Init+0x48>)
 8007c02:	4a10      	ldr	r2, [pc, #64]	; (8007c44 <TL_Init+0x54>)
 8007c04:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8007c06:	4b0c      	ldr	r3, [pc, #48]	; (8007c38 <TL_Init+0x48>)
 8007c08:	4a0f      	ldr	r2, [pc, #60]	; (8007c48 <TL_Init+0x58>)
 8007c0a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8007c0c:	4b0a      	ldr	r3, [pc, #40]	; (8007c38 <TL_Init+0x48>)
 8007c0e:	4a0f      	ldr	r2, [pc, #60]	; (8007c4c <TL_Init+0x5c>)
 8007c10:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8007c12:	4b09      	ldr	r3, [pc, #36]	; (8007c38 <TL_Init+0x48>)
 8007c14:	4a0e      	ldr	r2, [pc, #56]	; (8007c50 <TL_Init+0x60>)
 8007c16:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8007c18:	4b07      	ldr	r3, [pc, #28]	; (8007c38 <TL_Init+0x48>)
 8007c1a:	4a0e      	ldr	r2, [pc, #56]	; (8007c54 <TL_Init+0x64>)
 8007c1c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8007c1e:	4b06      	ldr	r3, [pc, #24]	; (8007c38 <TL_Init+0x48>)
 8007c20:	4a0d      	ldr	r2, [pc, #52]	; (8007c58 <TL_Init+0x68>)
 8007c22:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8007c24:	4b04      	ldr	r3, [pc, #16]	; (8007c38 <TL_Init+0x48>)
 8007c26:	4a0d      	ldr	r2, [pc, #52]	; (8007c5c <TL_Init+0x6c>)
 8007c28:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8007c2a:	4b03      	ldr	r3, [pc, #12]	; (8007c38 <TL_Init+0x48>)
 8007c2c:	4a0c      	ldr	r2, [pc, #48]	; (8007c60 <TL_Init+0x70>)
 8007c2e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8007c30:	f000 fffe 	bl	8008c30 <HW_IPCC_Init>

  return;
 8007c34:	bf00      	nop
}
 8007c36:	bd80      	pop	{r7, pc}
 8007c38:	20030000 	.word	0x20030000
 8007c3c:	20030028 	.word	0x20030028
 8007c40:	20030048 	.word	0x20030048
 8007c44:	20030058 	.word	0x20030058
 8007c48:	20030068 	.word	0x20030068
 8007c4c:	20030070 	.word	0x20030070
 8007c50:	20030078 	.word	0x20030078
 8007c54:	20030080 	.word	0x20030080
 8007c58:	2003009c 	.word	0x2003009c
 8007c5c:	200300a0 	.word	0x200300a0
 8007c60:	200300ac 	.word	0x200300ac

08007c64 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8007c70:	4811      	ldr	r0, [pc, #68]	; (8007cb8 <TL_BLE_Init+0x54>)
 8007c72:	f000 fa27 	bl	80080c4 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8007c76:	4b11      	ldr	r3, [pc, #68]	; (8007cbc <TL_BLE_Init+0x58>)
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	689a      	ldr	r2, [r3, #8]
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	68da      	ldr	r2, [r3, #12]
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	4a0c      	ldr	r2, [pc, #48]	; (8007cc0 <TL_BLE_Init+0x5c>)
 8007c90:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	4a08      	ldr	r2, [pc, #32]	; (8007cb8 <TL_BLE_Init+0x54>)
 8007c96:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8007c98:	f000 ffe0 	bl	8008c5c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a08      	ldr	r2, [pc, #32]	; (8007cc4 <TL_BLE_Init+0x60>)
 8007ca2:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	4a07      	ldr	r2, [pc, #28]	; (8007cc8 <TL_BLE_Init+0x64>)
 8007caa:	6013      	str	r3, [r2, #0]

  return 0;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	200300c8 	.word	0x200300c8
 8007cbc:	20030000 	.word	0x20030000
 8007cc0:	20030a58 	.word	0x20030a58
 8007cc4:	20000534 	.word	0x20000534
 8007cc8:	20000538 	.word	0x20000538

08007ccc <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8007cd8:	4b09      	ldr	r3, [pc, #36]	; (8007d00 <TL_BLE_SendCmd+0x34>)
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8007ce2:	4b07      	ldr	r3, [pc, #28]	; (8007d00 <TL_BLE_SendCmd+0x34>)
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4619      	mov	r1, r3
 8007cea:	2001      	movs	r0, #1
 8007cec:	f000 f96c 	bl	8007fc8 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8007cf0:	f000 ffbe 	bl	8008c70 <HW_IPCC_BLE_SendCmd>

  return 0;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3708      	adds	r7, #8
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	20030000 	.word	0x20030000

08007d04 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8007d0a:	e01c      	b.n	8007d46 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8007d0c:	1d3b      	adds	r3, r7, #4
 8007d0e:	4619      	mov	r1, r3
 8007d10:	4812      	ldr	r0, [pc, #72]	; (8007d5c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8007d12:	f000 fa76 	bl	8008202 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	7a5b      	ldrb	r3, [r3, #9]
 8007d1a:	2b0f      	cmp	r3, #15
 8007d1c:	d003      	beq.n	8007d26 <HW_IPCC_BLE_RxEvtNot+0x22>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	7a5b      	ldrb	r3, [r3, #9]
 8007d22:	2b0e      	cmp	r3, #14
 8007d24:	d105      	bne.n	8007d32 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4619      	mov	r1, r3
 8007d2a:	2002      	movs	r0, #2
 8007d2c:	f000 f94c 	bl	8007fc8 <OutputDbgTrace>
 8007d30:	e004      	b.n	8007d3c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	4619      	mov	r1, r3
 8007d36:	2003      	movs	r0, #3
 8007d38:	f000 f946 	bl	8007fc8 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8007d3c:	4b08      	ldr	r3, [pc, #32]	; (8007d60 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	4610      	mov	r0, r2
 8007d44:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8007d46:	4805      	ldr	r0, [pc, #20]	; (8007d5c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8007d48:	f000 f9cc 	bl	80080e4 <LST_is_empty>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d0dc      	beq.n	8007d0c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8007d52:	bf00      	nop
}
 8007d54:	3708      	adds	r7, #8
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	200300c8 	.word	0x200300c8
 8007d60:	20000534 	.word	0x20000534

08007d64 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8007d68:	4b02      	ldr	r3, [pc, #8]	; (8007d74 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4798      	blx	r3

  return;
 8007d6e:	bf00      	nop
}
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	20000538 	.word	0x20000538

08007d78 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8007d84:	480d      	ldr	r0, [pc, #52]	; (8007dbc <TL_SYS_Init+0x44>)
 8007d86:	f000 f99d 	bl	80080c4 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8007d8a:	4b0d      	ldr	r3, [pc, #52]	; (8007dc0 <TL_SYS_Init+0x48>)
 8007d8c:	68db      	ldr	r3, [r3, #12]
 8007d8e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	689a      	ldr	r2, [r3, #8]
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	4a08      	ldr	r2, [pc, #32]	; (8007dbc <TL_SYS_Init+0x44>)
 8007d9c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8007d9e:	f000 ff89 	bl	8008cb4 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a07      	ldr	r2, [pc, #28]	; (8007dc4 <TL_SYS_Init+0x4c>)
 8007da8:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	4a06      	ldr	r2, [pc, #24]	; (8007dc8 <TL_SYS_Init+0x50>)
 8007db0:	6013      	str	r3, [r2, #0]

  return 0;
 8007db2:	2300      	movs	r3, #0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3710      	adds	r7, #16
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}
 8007dbc:	200300d0 	.word	0x200300d0
 8007dc0:	20030000 	.word	0x20030000
 8007dc4:	2000053c 	.word	0x2000053c
 8007dc8:	20000540 	.word	0x20000540

08007dcc <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8007dd8:	4b09      	ldr	r3, [pc, #36]	; (8007e00 <TL_SYS_SendCmd+0x34>)
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	2210      	movs	r2, #16
 8007de0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8007de2:	4b07      	ldr	r3, [pc, #28]	; (8007e00 <TL_SYS_SendCmd+0x34>)
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4619      	mov	r1, r3
 8007dea:	2004      	movs	r0, #4
 8007dec:	f000 f8ec 	bl	8007fc8 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8007df0:	f000 ff6a 	bl	8008cc8 <HW_IPCC_SYS_SendCmd>

  return 0;
 8007df4:	2300      	movs	r3, #0
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3708      	adds	r7, #8
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	20030000 	.word	0x20030000

08007e04 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8007e08:	4b07      	ldr	r3, [pc, #28]	; (8007e28 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4619      	mov	r1, r3
 8007e10:	2005      	movs	r0, #5
 8007e12:	f000 f8d9 	bl	8007fc8 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8007e16:	4b05      	ldr	r3, [pc, #20]	; (8007e2c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a03      	ldr	r2, [pc, #12]	; (8007e28 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8007e1c:	68d2      	ldr	r2, [r2, #12]
 8007e1e:	6812      	ldr	r2, [r2, #0]
 8007e20:	4610      	mov	r0, r2
 8007e22:	4798      	blx	r3

  return;
 8007e24:	bf00      	nop
}
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	20030000 	.word	0x20030000
 8007e2c:	2000053c 	.word	0x2000053c

08007e30 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8007e36:	e00e      	b.n	8007e56 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8007e38:	1d3b      	adds	r3, r7, #4
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	480b      	ldr	r0, [pc, #44]	; (8007e6c <HW_IPCC_SYS_EvtNot+0x3c>)
 8007e3e:	f000 f9e0 	bl	8008202 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4619      	mov	r1, r3
 8007e46:	2006      	movs	r0, #6
 8007e48:	f000 f8be 	bl	8007fc8 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8007e4c:	4b08      	ldr	r3, [pc, #32]	; (8007e70 <HW_IPCC_SYS_EvtNot+0x40>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	4610      	mov	r0, r2
 8007e54:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8007e56:	4805      	ldr	r0, [pc, #20]	; (8007e6c <HW_IPCC_SYS_EvtNot+0x3c>)
 8007e58:	f000 f944 	bl	80080e4 <LST_is_empty>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d0ea      	beq.n	8007e38 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8007e62:	bf00      	nop
}
 8007e64:	3708      	adds	r7, #8
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	200300d0 	.word	0x200300d0
 8007e70:	20000540 	.word	0x20000540

08007e74 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8007e7c:	4817      	ldr	r0, [pc, #92]	; (8007edc <TL_MM_Init+0x68>)
 8007e7e:	f000 f921 	bl	80080c4 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8007e82:	4817      	ldr	r0, [pc, #92]	; (8007ee0 <TL_MM_Init+0x6c>)
 8007e84:	f000 f91e 	bl	80080c4 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8007e88:	4b16      	ldr	r3, [pc, #88]	; (8007ee4 <TL_MM_Init+0x70>)
 8007e8a:	691b      	ldr	r3, [r3, #16]
 8007e8c:	4a16      	ldr	r2, [pc, #88]	; (8007ee8 <TL_MM_Init+0x74>)
 8007e8e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8007e90:	4b15      	ldr	r3, [pc, #84]	; (8007ee8 <TL_MM_Init+0x74>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	6892      	ldr	r2, [r2, #8]
 8007e98:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8007e9a:	4b13      	ldr	r3, [pc, #76]	; (8007ee8 <TL_MM_Init+0x74>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	68d2      	ldr	r2, [r2, #12]
 8007ea2:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8007ea4:	4b10      	ldr	r3, [pc, #64]	; (8007ee8 <TL_MM_Init+0x74>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a0c      	ldr	r2, [pc, #48]	; (8007edc <TL_MM_Init+0x68>)
 8007eaa:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8007eac:	4b0e      	ldr	r3, [pc, #56]	; (8007ee8 <TL_MM_Init+0x74>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	6812      	ldr	r2, [r2, #0]
 8007eb4:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8007eb6:	4b0c      	ldr	r3, [pc, #48]	; (8007ee8 <TL_MM_Init+0x74>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	6852      	ldr	r2, [r2, #4]
 8007ebe:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8007ec0:	4b09      	ldr	r3, [pc, #36]	; (8007ee8 <TL_MM_Init+0x74>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	6912      	ldr	r2, [r2, #16]
 8007ec8:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8007eca:	4b07      	ldr	r3, [pc, #28]	; (8007ee8 <TL_MM_Init+0x74>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	6952      	ldr	r2, [r2, #20]
 8007ed2:	619a      	str	r2, [r3, #24]

  return;
 8007ed4:	bf00      	nop
}
 8007ed6:	3708      	adds	r7, #8
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	200300b8 	.word	0x200300b8
 8007ee0:	2000052c 	.word	0x2000052c
 8007ee4:	20030000 	.word	0x20030000
 8007ee8:	20000544 	.word	0x20000544

08007eec <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8007ef4:	6879      	ldr	r1, [r7, #4]
 8007ef6:	4807      	ldr	r0, [pc, #28]	; (8007f14 <TL_MM_EvtDone+0x28>)
 8007ef8:	f000 f93c 	bl	8008174 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8007efc:	6879      	ldr	r1, [r7, #4]
 8007efe:	2000      	movs	r0, #0
 8007f00:	f000 f862 	bl	8007fc8 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8007f04:	4804      	ldr	r0, [pc, #16]	; (8007f18 <TL_MM_EvtDone+0x2c>)
 8007f06:	f000 ff05 	bl	8008d14 <HW_IPCC_MM_SendFreeBuf>

  return;
 8007f0a:	bf00      	nop
}
 8007f0c:	3708      	adds	r7, #8
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	bf00      	nop
 8007f14:	2000052c 	.word	0x2000052c
 8007f18:	08007f1d 	.word	0x08007f1d

08007f1c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8007f22:	e00c      	b.n	8007f3e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8007f24:	1d3b      	adds	r3, r7, #4
 8007f26:	4619      	mov	r1, r3
 8007f28:	480a      	ldr	r0, [pc, #40]	; (8007f54 <SendFreeBuf+0x38>)
 8007f2a:	f000 f96a 	bl	8008202 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8007f2e:	4b0a      	ldr	r3, [pc, #40]	; (8007f58 <SendFreeBuf+0x3c>)
 8007f30:	691b      	ldr	r3, [r3, #16]
 8007f32:	691b      	ldr	r3, [r3, #16]
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	4611      	mov	r1, r2
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f000 f91b 	bl	8008174 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8007f3e:	4805      	ldr	r0, [pc, #20]	; (8007f54 <SendFreeBuf+0x38>)
 8007f40:	f000 f8d0 	bl	80080e4 <LST_is_empty>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d0ec      	beq.n	8007f24 <SendFreeBuf+0x8>
  }

  return;
 8007f4a:	bf00      	nop
}
 8007f4c:	3708      	adds	r7, #8
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}
 8007f52:	bf00      	nop
 8007f54:	2000052c 	.word	0x2000052c
 8007f58:	20030000 	.word	0x20030000

08007f5c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8007f60:	4805      	ldr	r0, [pc, #20]	; (8007f78 <TL_TRACES_Init+0x1c>)
 8007f62:	f000 f8af 	bl	80080c4 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8007f66:	4b05      	ldr	r3, [pc, #20]	; (8007f7c <TL_TRACES_Init+0x20>)
 8007f68:	695b      	ldr	r3, [r3, #20]
 8007f6a:	4a03      	ldr	r2, [pc, #12]	; (8007f78 <TL_TRACES_Init+0x1c>)
 8007f6c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8007f6e:	f000 ff07 	bl	8008d80 <HW_IPCC_TRACES_Init>

  return;
 8007f72:	bf00      	nop
}
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	200300c0 	.word	0x200300c0
 8007f7c:	20030000 	.word	0x20030000

08007f80 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8007f86:	e008      	b.n	8007f9a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8007f88:	1d3b      	adds	r3, r7, #4
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	4808      	ldr	r0, [pc, #32]	; (8007fb0 <HW_IPCC_TRACES_EvtNot+0x30>)
 8007f8e:	f000 f938 	bl	8008202 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4618      	mov	r0, r3
 8007f96:	f000 f80d 	bl	8007fb4 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8007f9a:	4805      	ldr	r0, [pc, #20]	; (8007fb0 <HW_IPCC_TRACES_EvtNot+0x30>)
 8007f9c:	f000 f8a2 	bl	80080e4 <LST_is_empty>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d0f0      	beq.n	8007f88 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8007fa6:	bf00      	nop
}
 8007fa8:	3708      	adds	r7, #8
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	200300c0 	.word	0x200300c0

08007fb4 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8007fbc:	bf00      	nop
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr

08007fc8 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	4603      	mov	r3, r0
 8007fd0:	6039      	str	r1, [r7, #0]
 8007fd2:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8007fd4:	79fb      	ldrb	r3, [r7, #7]
 8007fd6:	2b06      	cmp	r3, #6
 8007fd8:	d845      	bhi.n	8008066 <OutputDbgTrace+0x9e>
 8007fda:	a201      	add	r2, pc, #4	; (adr r2, 8007fe0 <OutputDbgTrace+0x18>)
 8007fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe0:	08007ffd 	.word	0x08007ffd
 8007fe4:	08008021 	.word	0x08008021
 8007fe8:	08008027 	.word	0x08008027
 8007fec:	0800803b 	.word	0x0800803b
 8007ff0:	08008047 	.word	0x08008047
 8007ff4:	0800804d 	.word	0x0800804d
 8007ff8:	0800805b 	.word	0x0800805b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	7a5b      	ldrb	r3, [r3, #9]
 8008004:	2bff      	cmp	r3, #255	; 0xff
 8008006:	d005      	beq.n	8008014 <OutputDbgTrace+0x4c>
 8008008:	2bff      	cmp	r3, #255	; 0xff
 800800a:	dc05      	bgt.n	8008018 <OutputDbgTrace+0x50>
 800800c:	2b0e      	cmp	r3, #14
 800800e:	d005      	beq.n	800801c <OutputDbgTrace+0x54>
 8008010:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8008012:	e001      	b.n	8008018 <OutputDbgTrace+0x50>
          break;
 8008014:	bf00      	nop
 8008016:	e027      	b.n	8008068 <OutputDbgTrace+0xa0>
          break;
 8008018:	bf00      	nop
 800801a:	e025      	b.n	8008068 <OutputDbgTrace+0xa0>
          break;
 800801c:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800801e:	e023      	b.n	8008068 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008024:	e020      	b.n	8008068 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	7a5b      	ldrb	r3, [r3, #9]
 800802e:	2b0e      	cmp	r3, #14
 8008030:	d001      	beq.n	8008036 <OutputDbgTrace+0x6e>
 8008032:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008034:	e000      	b.n	8008038 <OutputDbgTrace+0x70>
          break;
 8008036:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008038:	e016      	b.n	8008068 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	7a5b      	ldrb	r3, [r3, #9]
 8008042:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008044:	e010      	b.n	8008068 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800804a:	e00d      	b.n	8008068 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	7a5b      	ldrb	r3, [r3, #9]
 8008054:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008056:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008058:	e006      	b.n	8008068 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	7a5b      	ldrb	r3, [r3, #9]
 8008062:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008064:	e000      	b.n	8008068 <OutputDbgTrace+0xa0>

    default:
      break;
 8008066:	bf00      	nop
  }

  return;
 8008068:	bf00      	nop
}
 800806a:	3714      	adds	r7, #20
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8008074:	b480      	push	{r7}
 8008076:	b085      	sub	sp, #20
 8008078:	af00      	add	r7, sp, #0
 800807a:	4603      	mov	r3, r0
 800807c:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800807e:	4b0f      	ldr	r3, [pc, #60]	; (80080bc <OTP_Read+0x48>)
 8008080:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008082:	e002      	b.n	800808a <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	3b08      	subs	r3, #8
 8008088:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	3307      	adds	r3, #7
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	79fa      	ldrb	r2, [r7, #7]
 8008092:	429a      	cmp	r2, r3
 8008094:	d003      	beq.n	800809e <OTP_Read+0x2a>
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	4a09      	ldr	r2, [pc, #36]	; (80080c0 <OTP_Read+0x4c>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d1f2      	bne.n	8008084 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	3307      	adds	r3, #7
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	79fa      	ldrb	r2, [r7, #7]
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d001      	beq.n	80080ae <OTP_Read+0x3a>
  {
    p_id = 0 ;
 80080aa:	2300      	movs	r3, #0
 80080ac:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 80080ae:	68fb      	ldr	r3, [r7, #12]
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3714      	adds	r7, #20
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr
 80080bc:	1fff73f8 	.word	0x1fff73f8
 80080c0:	1fff7000 	.word	0x1fff7000

080080c4 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	605a      	str	r2, [r3, #4]
}
 80080d8:	bf00      	nop
 80080da:	370c      	adds	r7, #12
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b087      	sub	sp, #28
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080ec:	f3ef 8310 	mrs	r3, PRIMASK
 80080f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80080f2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80080f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80080f6:	b672      	cpsid	i
}
 80080f8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	429a      	cmp	r2, r3
 8008102:	d102      	bne.n	800810a <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8008104:	2301      	movs	r3, #1
 8008106:	75fb      	strb	r3, [r7, #23]
 8008108:	e001      	b.n	800810e <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800810a:	2300      	movs	r3, #0
 800810c:	75fb      	strb	r3, [r7, #23]
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	f383 8810 	msr	PRIMASK, r3
}
 8008118:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800811a:	7dfb      	ldrb	r3, [r7, #23]
}
 800811c:	4618      	mov	r0, r3
 800811e:	371c      	adds	r7, #28
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8008128:	b480      	push	{r7}
 800812a:	b087      	sub	sp, #28
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008132:	f3ef 8310 	mrs	r3, PRIMASK
 8008136:	60fb      	str	r3, [r7, #12]
  return(result);
 8008138:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800813a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800813c:	b672      	cpsid	i
}
 800813e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	683a      	ldr	r2, [r7, #0]
 8008152:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	683a      	ldr	r2, [r7, #0]
 800815a:	605a      	str	r2, [r3, #4]
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	f383 8810 	msr	PRIMASK, r3
}
 8008166:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008168:	bf00      	nop
 800816a:	371c      	adds	r7, #28
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8008174:	b480      	push	{r7}
 8008176:	b087      	sub	sp, #28
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800817e:	f3ef 8310 	mrs	r3, PRIMASK
 8008182:	60fb      	str	r3, [r7, #12]
  return(result);
 8008184:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008186:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008188:	b672      	cpsid	i
}
 800818a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	685a      	ldr	r2, [r3, #4]
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	683a      	ldr	r2, [r7, #0]
 800819e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	683a      	ldr	r2, [r7, #0]
 80081a6:	601a      	str	r2, [r3, #0]
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	f383 8810 	msr	PRIMASK, r3
}
 80081b2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80081b4:	bf00      	nop
 80081b6:	371c      	adds	r7, #28
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b087      	sub	sp, #28
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081c8:	f3ef 8310 	mrs	r3, PRIMASK
 80081cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80081ce:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80081d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80081d2:	b672      	cpsid	i
}
 80081d4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	6812      	ldr	r2, [r2, #0]
 80081de:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	6852      	ldr	r2, [r2, #4]
 80081e8:	605a      	str	r2, [r3, #4]
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	f383 8810 	msr	PRIMASK, r3
}
 80081f4:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80081f6:	bf00      	nop
 80081f8:	371c      	adds	r7, #28
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr

08008202 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8008202:	b580      	push	{r7, lr}
 8008204:	b086      	sub	sp, #24
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
 800820a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800820c:	f3ef 8310 	mrs	r3, PRIMASK
 8008210:	60fb      	str	r3, [r7, #12]
  return(result);
 8008212:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008214:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008216:	b672      	cpsid	i
}
 8008218:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4618      	mov	r0, r3
 8008228:	f7ff ffca 	bl	80081c0 <LST_remove_node>
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	f383 8810 	msr	PRIMASK, r3
}
 8008236:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008238:	bf00      	nop
 800823a:	3718      	adds	r7, #24
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <__NVIC_SystemReset>:
{
 8008240:	b480      	push	{r7}
 8008242:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8008244:	f3bf 8f4f 	dsb	sy
}
 8008248:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800824a:	4b06      	ldr	r3, [pc, #24]	; (8008264 <__NVIC_SystemReset+0x24>)
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008252:	4904      	ldr	r1, [pc, #16]	; (8008264 <__NVIC_SystemReset+0x24>)
 8008254:	4b04      	ldr	r3, [pc, #16]	; (8008268 <__NVIC_SystemReset+0x28>)
 8008256:	4313      	orrs	r3, r2
 8008258:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800825a:	f3bf 8f4f 	dsb	sy
}
 800825e:	bf00      	nop
    __NOP();
 8008260:	bf00      	nop
 8008262:	e7fd      	b.n	8008260 <__NVIC_SystemReset+0x20>
 8008264:	e000ed00 	.word	0xe000ed00
 8008268:	05fa0004 	.word	0x05fa0004

0800826c <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800826c:	b480      	push	{r7}
 800826e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8008270:	4b03      	ldr	r3, [pc, #12]	; (8008280 <LL_FLASH_GetUDN+0x14>)
 8008272:	681b      	ldr	r3, [r3, #0]
}
 8008274:	4618      	mov	r0, r3
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop
 8008280:	1fff7580 	.word	0x1fff7580

08008284 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8008284:	b480      	push	{r7}
 8008286:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8008288:	4b03      	ldr	r3, [pc, #12]	; (8008298 <LL_FLASH_GetDeviceID+0x14>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	b2db      	uxtb	r3, r3
}
 800828e:	4618      	mov	r0, r3
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr
 8008298:	1fff7584 	.word	0x1fff7584

0800829c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800829c:	b480      	push	{r7}
 800829e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 80082a0:	4b03      	ldr	r3, [pc, #12]	; (80082b0 <LL_FLASH_GetSTCompanyID+0x14>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	0a1b      	lsrs	r3, r3, #8
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr
 80082b0:	1fff7584 	.word	0x1fff7584

080082b4 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 80082b4:	b5b0      	push	{r4, r5, r7, lr}
 80082b6:	b090      	sub	sp, #64	; 0x40
 80082b8:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
  /* USER CODE BEGIN APP_BLE_Init_1 */
  UTIL_SEQ_RegTask(1<<CFG_TASK_INIT_CADENCE, UTIL_SEQ_RFU, initCadence);
 80082ba:	4a21      	ldr	r2, [pc, #132]	; (8008340 <APP_BLE_Init+0x8c>)
 80082bc:	2100      	movs	r1, #0
 80082be:	2004      	movs	r0, #4
 80082c0:	f000 fee8 	bl	8009094 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1<<CFG_TASK_GET_CADENCE, UTIL_SEQ_RFU, getCadence);
 80082c4:	4a1f      	ldr	r2, [pc, #124]	; (8008344 <APP_BLE_Init+0x90>)
 80082c6:	2100      	movs	r1, #0
 80082c8:	2008      	movs	r0, #8
 80082ca:	f000 fee3 	bl	8009094 <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask(1<<CFG_TASK_INIT_CADENCE, CFG_SCH_PRIO_0);
 80082ce:	2100      	movs	r1, #0
 80082d0:	2004      	movs	r0, #4
 80082d2:	f000 ff01 	bl	80090d8 <UTIL_SEQ_SetTask>
  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80082d6:	4b1c      	ldr	r3, [pc, #112]	; (8008348 <APP_BLE_Init+0x94>)
 80082d8:	1d3c      	adds	r4, r7, #4
 80082da:	461d      	mov	r5, r3
 80082dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80082de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80082e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80082e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082e8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80082ec:	e884 0003 	stmia.w	r4, {r0, r1}
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 80082f0:	f000 f864 	bl	80083bc <Ble_Tl_Init>

#if (CFG_LPM_STANDBY_SUPPORTED == 0)
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80082f4:	2101      	movs	r1, #1
 80082f6:	2002      	movs	r0, #2
 80082f8:	f000 fd6a 	bl	8008dd0 <UTIL_LPM_SetOffMode>
#endif /* CFG_LPM_STANDBY_SUPPORTED == 0 */

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80082fc:	4a13      	ldr	r2, [pc, #76]	; (800834c <APP_BLE_Init+0x98>)
 80082fe:	2100      	movs	r1, #0
 8008300:	2002      	movs	r0, #2
 8008302:	f000 fec7 	bl	8009094 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8008306:	1d3b      	adds	r3, r7, #4
 8008308:	4618      	mov	r0, r3
 800830a:	f7ff f8af 	bl	800746c <SHCI_C2_BLE_Init>
 800830e:	4603      	mov	r3, r0
 8008310:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (status != SHCI_Success)
 8008314:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008318:	2b00      	cmp	r3, #0
 800831a:	d001      	beq.n	8008320 <APP_BLE_Init+0x6c>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800831c:	f7f9 ff6c 	bl	80021f8 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8008320:	f000 f862 	bl	80083e8 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8008324:	f7ff f816 	bl	8007354 <SVCCTL_Init>

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_BEACON_UPDATE_REQ_ID, UTIL_SEQ_RFU, Beacon_Update);
 8008328:	4a09      	ldr	r2, [pc, #36]	; (8008350 <APP_BLE_Init+0x9c>)
 800832a:	2100      	movs	r1, #0
 800832c:	2001      	movs	r0, #1
 800832e:	f000 feb1 	bl	8009094 <UTIL_SEQ_RegTask>
    EddystoneTLM_Process();
  }
  else if (CFG_BEACON_TYPE & CFG_IBEACON)
  {
    APP_DBG_MSG("Ibeacon advertise\n\r");
    IBeacon_Process();
 8008332:	f000 fa4b 	bl	80087cc <IBeacon_Process>
  }
  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8008336:	bf00      	nop
}
 8008338:	3740      	adds	r7, #64	; 0x40
 800833a:	46bd      	mov	sp, r7
 800833c:	bdb0      	pop	{r4, r5, r7, pc}
 800833e:	bf00      	nop
 8008340:	0800881d 	.word	0x0800881d
 8008344:	0800886d 	.word	0x0800886d
 8008348:	0800be3c 	.word	0x0800be3c
 800834c:	08007689 	.word	0x08007689
 8008350:	080084bd 	.word	0x080084bd

08008354 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8008354:	b480      	push	{r7}
 8008356:	b087      	sub	sp, #28
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	3301      	adds	r3, #1
 8008360:	617b      	str	r3, [r7, #20]

  switch (p_event_pckt->evt)
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	2bff      	cmp	r3, #255	; 0xff
 8008368:	d00e      	beq.n	8008388 <SVCCTL_App_Notification+0x34>
 800836a:	2bff      	cmp	r3, #255	; 0xff
 800836c:	dc19      	bgt.n	80083a2 <SVCCTL_App_Notification+0x4e>
 800836e:	2b05      	cmp	r3, #5
 8008370:	d019      	beq.n	80083a6 <SVCCTL_App_Notification+0x52>
 8008372:	2b3e      	cmp	r3, #62	; 0x3e
 8008374:	d000      	beq.n	8008378 <SVCCTL_App_Notification+0x24>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8008376:	e014      	b.n	80083a2 <SVCCTL_App_Notification+0x4e>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	3302      	adds	r3, #2
 800837c:	60fb      	str	r3, [r7, #12]
      switch (p_meta_evt->subevent)
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	2b01      	cmp	r3, #1
          break;
 8008384:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8008386:	e011      	b.n	80083ac <SVCCTL_App_Notification+0x58>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	3302      	adds	r3, #2
 800838c:	613b      	str	r3, [r7, #16]
      switch (p_blecore_evt->ecode)
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	881b      	ldrh	r3, [r3, #0]
 8008392:	b29b      	uxth	r3, r3
 8008394:	461a      	mov	r2, r3
 8008396:	f240 4307 	movw	r3, #1031	; 0x407
 800839a:	429a      	cmp	r2, r3
 800839c:	d105      	bne.n	80083aa <SVCCTL_App_Notification+0x56>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800839e:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80083a0:	e003      	b.n	80083aa <SVCCTL_App_Notification+0x56>
      break;
 80083a2:	bf00      	nop
 80083a4:	e002      	b.n	80083ac <SVCCTL_App_Notification+0x58>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 80083a6:	bf00      	nop
 80083a8:	e000      	b.n	80083ac <SVCCTL_App_Notification+0x58>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80083aa:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 80083ac:	2301      	movs	r3, #1
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	371c      	adds	r7, #28
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr
	...

080083bc <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80083c2:	4b06      	ldr	r3, [pc, #24]	; (80083dc <Ble_Tl_Init+0x20>)
 80083c4:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80083c6:	4b06      	ldr	r3, [pc, #24]	; (80083e0 <Ble_Tl_Init+0x24>)
 80083c8:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80083ca:	463b      	mov	r3, r7
 80083cc:	4619      	mov	r1, r3
 80083ce:	4805      	ldr	r0, [pc, #20]	; (80083e4 <Ble_Tl_Init+0x28>)
 80083d0:	f7ff f93e 	bl	8007650 <hci_init>

  return;
 80083d4:	bf00      	nop
}
 80083d6:	3708      	adds	r7, #8
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	200300d8 	.word	0x200300d8
 80083e0:	08008625 	.word	0x08008625
 80083e4:	080085ed 	.word	0x080085ed

080083e8 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 80083e8:	b5b0      	push	{r4, r5, r7, lr}
 80083ea:	b088      	sub	sp, #32
 80083ec:	af02      	add	r7, sp, #8
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 80083ee:	2300      	movs	r3, #0
 80083f0:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80083f2:	2392      	movs	r3, #146	; 0x92
 80083f4:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 80083f6:	f7fe fe82 	bl	80070fe <hci_reset>
 80083fa:	4603      	mov	r3, r0
 80083fc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 80083fe:	f000 f88f 	bl	8008520 <BleGetBdAddress>
 8008402:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8008404:	693a      	ldr	r2, [r7, #16]
 8008406:	2106      	movs	r1, #6
 8008408:	2000      	movs	r0, #0
 800840a:	f7fe fd8c 	bl	8006f26 <aci_hal_write_config_data>
 800840e:	4603      	mov	r3, r0
 8008410:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8008412:	4a27      	ldr	r2, [pc, #156]	; (80084b0 <Ble_Hci_Gap_Gatt_Init+0xc8>)
 8008414:	2110      	movs	r1, #16
 8008416:	2018      	movs	r0, #24
 8008418:	f7fe fd85 	bl	8006f26 <aci_hal_write_config_data>
 800841c:	4603      	mov	r3, r0
 800841e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8008420:	4a24      	ldr	r2, [pc, #144]	; (80084b4 <Ble_Hci_Gap_Gatt_Init+0xcc>)
 8008422:	2110      	movs	r1, #16
 8008424:	2008      	movs	r0, #8
 8008426:	f7fe fd7e 	bl	8006f26 <aci_hal_write_config_data>
 800842a:	4603      	mov	r3, r0
 800842c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800842e:	2119      	movs	r1, #25
 8008430:	2001      	movs	r0, #1
 8008432:	f7fe fdfd 	bl	8007030 <aci_hal_set_tx_power_level>
 8008436:	4603      	mov	r3, r0
 8008438:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800843a:	f7fe fca6 	bl	8006d8a <aci_gatt_init>
 800843e:	4603      	mov	r3, r0
 8008440:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8008442:	2300      	movs	r3, #0
 8008444:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8008446:	7bfb      	ldrb	r3, [r7, #15]
 8008448:	f043 0301 	orr.w	r3, r3, #1
 800844c:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif /* BLE_CFG_CENTRAL == 1 */

  if (role > 0)
 800844e:	7bfb      	ldrb	r3, [r7, #15]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d01f      	beq.n	8008494 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = "STM32WB";
 8008454:	4b18      	ldr	r3, [pc, #96]	; (80084b8 <Ble_Hci_Gap_Gatt_Init+0xd0>)
 8008456:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8008458:	1dba      	adds	r2, r7, #6
 800845a:	7bf8      	ldrb	r0, [r7, #15]
 800845c:	1cbb      	adds	r3, r7, #2
 800845e:	9301      	str	r3, [sp, #4]
 8008460:	1d3b      	adds	r3, r7, #4
 8008462:	9300      	str	r3, [sp, #0]
 8008464:	4613      	mov	r3, r2
 8008466:	2207      	movs	r2, #7
 8008468:	2100      	movs	r1, #0
 800846a:	f7fe fb1b 	bl	8006aa4 <aci_gap_init>
 800846e:	4603      	mov	r3, r0
 8008470:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8008472:	88fc      	ldrh	r4, [r7, #6]
 8008474:	88bd      	ldrh	r5, [r7, #4]
 8008476:	68b8      	ldr	r0, [r7, #8]
 8008478:	f7f7 fe82 	bl	8000180 <strlen>
 800847c:	4603      	mov	r3, r0
 800847e:	b2da      	uxtb	r2, r3
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	9300      	str	r3, [sp, #0]
 8008484:	4613      	mov	r3, r2
 8008486:	2200      	movs	r2, #0
 8008488:	4629      	mov	r1, r5
 800848a:	4620      	mov	r0, r4
 800848c:	f7fe fca2 	bl	8006dd4 <aci_gatt_update_char_value>
 8008490:	4603      	mov	r3, r0
 8008492:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8008494:	88f8      	ldrh	r0, [r7, #6]
 8008496:	8879      	ldrh	r1, [r7, #2]
 8008498:	463b      	mov	r3, r7
 800849a:	9300      	str	r3, [sp, #0]
 800849c:	2302      	movs	r3, #2
 800849e:	2200      	movs	r2, #0
 80084a0:	f7fe fc98 	bl	8006dd4 <aci_gatt_update_char_value>
 80084a4:	4603      	mov	r3, r0
 80084a6:	75fb      	strb	r3, [r7, #23]
  else
  {
    BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Appearance\n");
  }

}
 80084a8:	bf00      	nop
 80084aa:	3718      	adds	r7, #24
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bdb0      	pop	{r4, r5, r7, pc}
 80084b0:	0800c0a8 	.word	0x0800c0a8
 80084b4:	0800c0b8 	.word	0x0800c0b8
 80084b8:	0800be74 	.word	0x0800be74

080084bc <Beacon_Update>:
static void Beacon_Update(void)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
  FLASH_EraseInitTypeDef erase;
  uint32_t pageError = 0;
 80084c2:	2300      	movs	r3, #0
 80084c4:	603b      	str	r3, [r7, #0]

  if (sector_type != 0)
 80084c6:	4b13      	ldr	r3, [pc, #76]	; (8008514 <Beacon_Update+0x58>)
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d01b      	beq.n	8008506 <Beacon_Update+0x4a>
  {
    erase.TypeErase = FLASH_TYPEERASE_PAGES;
 80084ce:	2302      	movs	r3, #2
 80084d0:	607b      	str	r3, [r7, #4]
    erase.Page      = sector_type;
 80084d2:	4b10      	ldr	r3, [pc, #64]	; (8008514 <Beacon_Update+0x58>)
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	60bb      	str	r3, [r7, #8]
    if (sector_type == APP_SECTORS)
 80084d8:	4b0e      	ldr	r3, [pc, #56]	; (8008514 <Beacon_Update+0x58>)
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	2b07      	cmp	r3, #7
 80084de:	d102      	bne.n	80084e6 <Beacon_Update+0x2a>
    {
      erase.NbPages = 2;  /* 2 sectors for beacon application */
 80084e0:	2302      	movs	r3, #2
 80084e2:	60fb      	str	r3, [r7, #12]
 80084e4:	e001      	b.n	80084ea <Beacon_Update+0x2e>
    }
    else
    {
      erase.NbPages = 1; /* 1 sector for beacon user data */
 80084e6:	2301      	movs	r3, #1
 80084e8:	60fb      	str	r3, [r7, #12]
    }

    HAL_FLASH_Unlock();
 80084ea:	f7fa fd2f 	bl	8002f4c <HAL_FLASH_Unlock>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_OPTVERR);
 80084ee:	4b0a      	ldr	r3, [pc, #40]	; (8008518 <Beacon_Update+0x5c>)
 80084f0:	f248 0211 	movw	r2, #32785	; 0x8011
 80084f4:	611a      	str	r2, [r3, #16]

    HAL_FLASHEx_Erase(&erase, &pageError);
 80084f6:	463a      	mov	r2, r7
 80084f8:	1d3b      	adds	r3, r7, #4
 80084fa:	4611      	mov	r1, r2
 80084fc:	4618      	mov	r0, r3
 80084fe:	f7fa fdd1 	bl	80030a4 <HAL_FLASHEx_Erase>

    HAL_FLASH_Lock();
 8008502:	f7fa fd45 	bl	8002f90 <HAL_FLASH_Lock>
  }

  *(uint32_t*) SRAM1_BASE = BOOT_MODE_AND_SECTOR;
 8008506:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800850a:	4a04      	ldr	r2, [pc, #16]	; (800851c <Beacon_Update+0x60>)
 800850c:	601a      	str	r2, [r3, #0]
  /**
   * Boot Mode:    1 (OTA)
   * Sector Index: 6
   * Nb Sectors  : 1
   */
  NVIC_SystemReset();
 800850e:	f7ff fe97 	bl	8008240 <__NVIC_SystemReset>
 8008512:	bf00      	nop
 8008514:	2000054e 	.word	0x2000054e
 8008518:	58004000 	.word	0x58004000
 800851c:	00010601 	.word	0x00010601

08008520 <BleGetBdAddress>:
}

const uint8_t* BleGetBdAddress(void)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b086      	sub	sp, #24
 8008524:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8008526:	f7ff fea1 	bl	800826c <LL_FLASH_GetUDN>
 800852a:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008532:	d023      	beq.n	800857c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8008534:	f7ff feb2 	bl	800829c <LL_FLASH_GetSTCompanyID>
 8008538:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800853a:	f7ff fea3 	bl	8008284 <LL_FLASH_GetDeviceID>
 800853e:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	b2da      	uxtb	r2, r3
 8008544:	4b16      	ldr	r3, [pc, #88]	; (80085a0 <BleGetBdAddress+0x80>)
 8008546:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	0a1b      	lsrs	r3, r3, #8
 800854c:	b2da      	uxtb	r2, r3
 800854e:	4b14      	ldr	r3, [pc, #80]	; (80085a0 <BleGetBdAddress+0x80>)
 8008550:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	b2da      	uxtb	r2, r3
 8008556:	4b12      	ldr	r3, [pc, #72]	; (80085a0 <BleGetBdAddress+0x80>)
 8008558:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	b2da      	uxtb	r2, r3
 800855e:	4b10      	ldr	r3, [pc, #64]	; (80085a0 <BleGetBdAddress+0x80>)
 8008560:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	0a1b      	lsrs	r3, r3, #8
 8008566:	b2da      	uxtb	r2, r3
 8008568:	4b0d      	ldr	r3, [pc, #52]	; (80085a0 <BleGetBdAddress+0x80>)
 800856a:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	0c1b      	lsrs	r3, r3, #16
 8008570:	b2da      	uxtb	r2, r3
 8008572:	4b0b      	ldr	r3, [pc, #44]	; (80085a0 <BleGetBdAddress+0x80>)
 8008574:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8008576:	4b0a      	ldr	r3, [pc, #40]	; (80085a0 <BleGetBdAddress+0x80>)
 8008578:	617b      	str	r3, [r7, #20]
 800857a:	e00b      	b.n	8008594 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800857c:	2000      	movs	r0, #0
 800857e:	f7ff fd79 	bl	8008074 <OTP_Read>
 8008582:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d002      	beq.n	8008590 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	617b      	str	r3, [r7, #20]
 800858e:	e001      	b.n	8008594 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8008590:	4b04      	ldr	r3, [pc, #16]	; (80085a4 <BleGetBdAddress+0x84>)
 8008592:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8008594:	697b      	ldr	r3, [r7, #20]
}
 8008596:	4618      	mov	r0, r3
 8008598:	3718      	adds	r7, #24
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	20000548 	.word	0x20000548
 80085a4:	0800c0a0 	.word	0x0800c0a0

080085a8 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80085b0:	2100      	movs	r1, #0
 80085b2:	2002      	movs	r0, #2
 80085b4:	f000 fd90 	bl	80090d8 <UTIL_SEQ_SetTask>

  return;
 80085b8:	bf00      	nop
}
 80085ba:	3708      	adds	r7, #8
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80085c8:	2001      	movs	r0, #1
 80085ca:	f000 fdf1 	bl	80091b0 <UTIL_SEQ_SetEvt>

  return;
 80085ce:	bf00      	nop
}
 80085d0:	3708      	adds	r7, #8
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}

080085d6 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 80085d6:	b580      	push	{r7, lr}
 80085d8:	b082      	sub	sp, #8
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80085de:	2001      	movs	r0, #1
 80085e0:	f000 fe06 	bl	80091f0 <UTIL_SEQ_WaitEvt>

  return;
 80085e4:	bf00      	nop
}
 80085e6:	3708      	adds	r7, #8
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	3308      	adds	r3, #8
 80085fe:	4618      	mov	r0, r3
 8008600:	f7fe fee0 	bl	80073c4 <SVCCTL_UserEvtRx>
 8008604:	4603      	mov	r3, r0
 8008606:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8008608:	7afb      	ldrb	r3, [r7, #11]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d003      	beq.n	8008616 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2201      	movs	r2, #1
 8008612:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8008614:	e003      	b.n	800861e <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2200      	movs	r2, #0
 800861a:	701a      	strb	r2, [r3, #0]
  return;
 800861c:	bf00      	nop
}
 800861e:	3710      	adds	r7, #16
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
 800862a:	4603      	mov	r3, r0
 800862c:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800862e:	79fb      	ldrb	r3, [r7, #7]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d002      	beq.n	800863a <BLE_StatusNot+0x16>
 8008634:	2b01      	cmp	r3, #1
 8008636:	d006      	beq.n	8008646 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8008638:	e00b      	b.n	8008652 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800863a:	230f      	movs	r3, #15
 800863c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	f000 fd76 	bl	8009130 <UTIL_SEQ_PauseTask>
      break;
 8008644:	e005      	b.n	8008652 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8008646:	230f      	movs	r3, #15
 8008648:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	f000 fd90 	bl	8009170 <UTIL_SEQ_ResumeTask>
      break;
 8008650:	bf00      	nop
  }

  return;
 8008652:	bf00      	nop
}
 8008654:	3710      	adds	r7, #16
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
	...

0800865c <IBeacon_Init>:
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/

static tBleStatus IBeacon_Init(IBeacon_InitTypeDef *IBeacon_Init)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b094      	sub	sp, #80	; 0x50
 8008660:	af08      	add	r7, sp, #32
 8008662:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN IBeacon_Init_1 */

/* USER CODE END IBeacon_Init_1 */
  tBleStatus ret = BLE_STATUS_SUCCESS;
 8008664:	2300      	movs	r3, #0
 8008666:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint16_t AdvertisingInterval = (IBeacon_Init->AdvertisingInterval * ADVERTISING_INTERVAL_INCREMENT / 10);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	881b      	ldrh	r3, [r3, #0]
 800866e:	011b      	lsls	r3, r3, #4
 8008670:	4a53      	ldr	r2, [pc, #332]	; (80087c0 <IBeacon_Init+0x164>)
 8008672:	fb82 1203 	smull	r1, r2, r2, r3
 8008676:	1092      	asrs	r2, r2, #2
 8008678:	17db      	asrs	r3, r3, #31
 800867a:	1ad3      	subs	r3, r2, r3
 800867c:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* Disable scan response. */
  hci_le_set_scan_response_data(0, NULL);
 800867e:	2100      	movs	r1, #0
 8008680:	2000      	movs	r0, #0
 8008682:	f7fe fd60 	bl	8007146 <hci_le_set_scan_response_data>

  /* Put the device in a non-connectable mode. */
  ret = aci_gap_set_discoverable(ADV_NONCONN_IND,                          /*< Advertise as non-connectable, undirected. */
 8008686:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008688:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 800868a:	2300      	movs	r3, #0
 800868c:	9306      	str	r3, [sp, #24]
 800868e:	2300      	movs	r3, #0
 8008690:	9305      	str	r3, [sp, #20]
 8008692:	2300      	movs	r3, #0
 8008694:	9304      	str	r3, [sp, #16]
 8008696:	2300      	movs	r3, #0
 8008698:	9303      	str	r3, [sp, #12]
 800869a:	2300      	movs	r3, #0
 800869c:	9302      	str	r3, [sp, #8]
 800869e:	2300      	movs	r3, #0
 80086a0:	9301      	str	r3, [sp, #4]
 80086a2:	2300      	movs	r3, #0
 80086a4:	9300      	str	r3, [sp, #0]
 80086a6:	2300      	movs	r3, #0
 80086a8:	2003      	movs	r0, #3
 80086aa:	f7fe f901 	bl	80068b0 <aci_gap_set_discoverable>
 80086ae:	4603      	mov	r3, r0
 80086b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                 PUBLIC_ADDR, NO_WHITE_LIST_USE,           /*< Use the public address, with no white list. */
                                 0, NULL,                                  /*< Do not use a local name. */
                                 0, NULL,                                  /*< Do not include the service UUID list. */
                                 0, 0);                                    /*< Do not set a slave connection interval. */

  if (ret != BLE_STATUS_SUCCESS)
 80086b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d002      	beq.n	80086c2 <IBeacon_Init+0x66>
  {
    return ret;
 80086bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80086c0:	e079      	b.n	80087b6 <IBeacon_Init+0x15a>
  }

  /* Remove the TX power level advertisement (this is done to decrease the packet size). */
  ret = aci_gap_delete_ad_type(AD_TYPE_TX_POWER_LEVEL);
 80086c2:	200a      	movs	r0, #10
 80086c4:	f7fe fb0d 	bl	8006ce2 <aci_gap_delete_ad_type>
 80086c8:	4603      	mov	r3, r0
 80086ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 80086ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d002      	beq.n	80086dc <IBeacon_Init+0x80>
  {
    return ret;
 80086d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80086da:	e06c      	b.n	80087b6 <IBeacon_Init+0x15a>
  }

	 uint8_t service_data[] =
 80086dc:	231a      	movs	r3, #26
 80086de:	743b      	strb	r3, [r7, #16]
 80086e0:	23ff      	movs	r3, #255	; 0xff
 80086e2:	747b      	strb	r3, [r7, #17]
 80086e4:	234c      	movs	r3, #76	; 0x4c
 80086e6:	74bb      	strb	r3, [r7, #18]
 80086e8:	2300      	movs	r3, #0
 80086ea:	74fb      	strb	r3, [r7, #19]
 80086ec:	2302      	movs	r3, #2
 80086ee:	753b      	strb	r3, [r7, #20]
 80086f0:	2315      	movs	r3, #21
 80086f2:	757b      	strb	r3, [r7, #21]
 80086f4:	2300      	movs	r3, #0
 80086f6:	75bb      	strb	r3, [r7, #22]
 80086f8:	2300      	movs	r3, #0
 80086fa:	75fb      	strb	r3, [r7, #23]
 80086fc:	2300      	movs	r3, #0
 80086fe:	763b      	strb	r3, [r7, #24]
 8008700:	230b      	movs	r3, #11
 8008702:	767b      	strb	r3, [r7, #25]
 8008704:	238e      	movs	r3, #142	; 0x8e
 8008706:	76bb      	strb	r3, [r7, #26]
 8008708:	2322      	movs	r3, #34	; 0x22
 800870a:	76fb      	strb	r3, [r7, #27]
 800870c:	2345      	movs	r3, #69	; 0x45
 800870e:	773b      	strb	r3, [r7, #28]
 8008710:	2341      	movs	r3, #65	; 0x41
 8008712:	777b      	strb	r3, [r7, #29]
 8008714:	239d      	movs	r3, #157	; 0x9d
 8008716:	77bb      	strb	r3, [r7, #30]
 8008718:	234c      	movs	r3, #76	; 0x4c
 800871a:	77fb      	strb	r3, [r7, #31]
 800871c:	2321      	movs	r3, #33	; 0x21
 800871e:	f887 3020 	strb.w	r3, [r7, #32]
 8008722:	23ed      	movs	r3, #237	; 0xed
 8008724:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8008728:	23ae      	movs	r3, #174	; 0xae
 800872a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800872e:	2382      	movs	r3, #130	; 0x82
 8008730:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008734:	23ed      	movs	r3, #237	; 0xed
 8008736:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800873a:	2319      	movs	r3, #25
 800873c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8008740:	2300      	movs	r3, #0
 8008742:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008746:	2302      	movs	r3, #2
 8008748:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800874c:	2300      	movs	r3, #0
 800874e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8008752:	4b1c      	ldr	r3, [pc, #112]	; (80087c4 <IBeacon_Init+0x168>)
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800875a:	2301      	movs	r3, #1
 800875c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	   0x00, 0x02,					 	 	 					 /*< 2-byte Major */
	   0x00, rpm_value,					 		 			 	 /*< 2-byte RPM */
	   0x01,						     		 				 /*< 1-byte Power*/
	 };

  uint8_t flags[] =
 8008760:	4a19      	ldr	r2, [pc, #100]	; (80087c8 <IBeacon_Init+0x16c>)
 8008762:	f107 030c 	add.w	r3, r7, #12
 8008766:	6812      	ldr	r2, [r2, #0]
 8008768:	4611      	mov	r1, r2
 800876a:	8019      	strh	r1, [r3, #0]
 800876c:	3302      	adds	r3, #2
 800876e:	0c12      	lsrs	r2, r2, #16
 8008770:	701a      	strb	r2, [r3, #0]
    AD_TYPE_FLAGS,                                                          /*< Flags data type value. */
    (FLAG_BIT_LE_GENERAL_DISCOVERABLE_MODE | FLAG_BIT_BR_EDR_NOT_SUPPORTED) /*< BLE general discoverable, without BR/EDR support. */
  };

  /* Update the service data. */
  ret = aci_gap_update_adv_data(sizeof(service_data), service_data);
 8008772:	f107 0310 	add.w	r3, r7, #16
 8008776:	4619      	mov	r1, r3
 8008778:	201b      	movs	r0, #27
 800877a:	f7fe fa40 	bl	8006bfe <aci_gap_update_adv_data>
 800877e:	4603      	mov	r3, r0
 8008780:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 8008784:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008788:	2b00      	cmp	r3, #0
 800878a:	d002      	beq.n	8008792 <IBeacon_Init+0x136>
  {
    return ret;
 800878c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008790:	e011      	b.n	80087b6 <IBeacon_Init+0x15a>
  }

  /* Update the adverstising flags. */
  ret = aci_gap_update_adv_data(sizeof(flags), flags);
 8008792:	f107 030c 	add.w	r3, r7, #12
 8008796:	4619      	mov	r1, r3
 8008798:	2003      	movs	r0, #3
 800879a:	f7fe fa30 	bl	8006bfe <aci_gap_update_adv_data>
 800879e:	4603      	mov	r3, r0
 80087a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 80087a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d002      	beq.n	80087b2 <IBeacon_Init+0x156>
  {
    return ret;
 80087ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80087b0:	e001      	b.n	80087b6 <IBeacon_Init+0x15a>
  }
/* USER CODE BEGIN IBeacon_Init_2 */

/* USER CODE END IBeacon_Init_2 */
  return ret;
 80087b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3730      	adds	r7, #48	; 0x30
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	66666667 	.word	0x66666667
 80087c4:	2000054f 	.word	0x2000054f
 80087c8:	0800be7c 	.word	0x0800be7c

080087cc <IBeacon_Process>:

void IBeacon_Process(void)
{
 80087cc:	b590      	push	{r4, r7, lr}
 80087ce:	b08d      	sub	sp, #52	; 0x34
 80087d0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN IBeacon_Process_1 */

/* USER CODE END IBeacon_Process_1 */
  /* Default ibeacon */
  uint8_t UuID[]    = { UUID };
 80087d2:	4b11      	ldr	r3, [pc, #68]	; (8008818 <IBeacon_Process+0x4c>)
 80087d4:	f107 0420 	add.w	r4, r7, #32
 80087d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80087da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint8_t MajorID[] = { MAJOR_ID };
 80087de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087e2:	83bb      	strh	r3, [r7, #28]
  uint8_t MinorID[] = { MINOR_ID };
 80087e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087e8:	833b      	strh	r3, [r7, #24]

  IBeacon_InitTypeDef IBeacon_InitStruct =
 80087ea:	f242 7310 	movw	r3, #10000	; 0x2710
 80087ee:	80bb      	strh	r3, [r7, #4]
 80087f0:	f107 0320 	add.w	r3, r7, #32
 80087f4:	60bb      	str	r3, [r7, #8]
 80087f6:	f107 031c 	add.w	r3, r7, #28
 80087fa:	60fb      	str	r3, [r7, #12]
 80087fc:	f107 0318 	add.w	r3, r7, #24
 8008800:	613b      	str	r3, [r7, #16]
 8008802:	23c1      	movs	r3, #193	; 0xc1
 8008804:	753b      	strb	r3, [r7, #20]
    data_address += 2;
    IBeacon_InitStruct.CalibratedTxPower = *(uint8_t *)(data_address);
  }
#endif

  IBeacon_Init(&IBeacon_InitStruct);
 8008806:	1d3b      	adds	r3, r7, #4
 8008808:	4618      	mov	r0, r3
 800880a:	f7ff ff27 	bl	800865c <IBeacon_Init>
/* USER CODE BEGIN IBeacon_Process_2 */

/* USER CODE END IBeacon_Process_2 */
}
 800880e:	bf00      	nop
 8008810:	3734      	adds	r7, #52	; 0x34
 8008812:	46bd      	mov	sp, r7
 8008814:	bd90      	pop	{r4, r7, pc}
 8008816:	bf00      	nop
 8008818:	0800be80 	.word	0x0800be80

0800881c <initCadence>:
/* USER CODE BEGIN FD */
void initCadence(void) {
 800881c:	b590      	push	{r4, r7, lr}
 800881e:	b093      	sub	sp, #76	; 0x4c
 8008820:	af12      	add	r7, sp, #72	; 0x48
	LIS2DW12_Initialization(hi2c1);
 8008822:	4c11      	ldr	r4, [pc, #68]	; (8008868 <initCadence+0x4c>)
 8008824:	4668      	mov	r0, sp
 8008826:	f104 0310 	add.w	r3, r4, #16
 800882a:	2244      	movs	r2, #68	; 0x44
 800882c:	4619      	mov	r1, r3
 800882e:	f000 fd9d 	bl	800936c <memcpy>
 8008832:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008836:	f7f8 fb61 	bl	8000efc <LIS2DW12_Initialization>
	LIS2DW12_Reset_FIFO(hi2c1);
 800883a:	4c0b      	ldr	r4, [pc, #44]	; (8008868 <initCadence+0x4c>)
 800883c:	4668      	mov	r0, sp
 800883e:	f104 0310 	add.w	r3, r4, #16
 8008842:	2244      	movs	r2, #68	; 0x44
 8008844:	4619      	mov	r1, r3
 8008846:	f000 fd91 	bl	800936c <memcpy>
 800884a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800884e:	f7f8 fc6b 	bl	8001128 <LIS2DW12_Reset_FIFO>

	HAL_SuspendTick();
 8008852:	f7fa f9f3 	bl	8002c3c <HAL_SuspendTick>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8008856:	2101      	movs	r1, #1
 8008858:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800885c:	f7fb fcaa 	bl	80041b4 <HAL_PWR_EnterSTOPMode>
}
 8008860:	bf00      	nop
 8008862:	3704      	adds	r7, #4
 8008864:	46bd      	mov	sp, r7
 8008866:	bd90      	pop	{r4, r7, pc}
 8008868:	20000304 	.word	0x20000304

0800886c <getCadence>:

void getCadence(void) {
 800886c:	b580      	push	{r7, lr}
 800886e:	b088      	sub	sp, #32
 8008870:	af00      	add	r7, sp, #0
	 rpm_value = runAlgo();
 8008872:	f7f9 f9e5 	bl	8001c40 <runAlgo>
 8008876:	4603      	mov	r3, r0
 8008878:	461a      	mov	r2, r3
 800887a:	4b24      	ldr	r3, [pc, #144]	; (800890c <getCadence+0xa0>)
 800887c:	701a      	strb	r2, [r3, #0]
	 uint8_t service_data[] =
 800887e:	231a      	movs	r3, #26
 8008880:	713b      	strb	r3, [r7, #4]
 8008882:	23ff      	movs	r3, #255	; 0xff
 8008884:	717b      	strb	r3, [r7, #5]
 8008886:	234c      	movs	r3, #76	; 0x4c
 8008888:	71bb      	strb	r3, [r7, #6]
 800888a:	2300      	movs	r3, #0
 800888c:	71fb      	strb	r3, [r7, #7]
 800888e:	2302      	movs	r3, #2
 8008890:	723b      	strb	r3, [r7, #8]
 8008892:	2315      	movs	r3, #21
 8008894:	727b      	strb	r3, [r7, #9]
 8008896:	2300      	movs	r3, #0
 8008898:	72bb      	strb	r3, [r7, #10]
 800889a:	2300      	movs	r3, #0
 800889c:	72fb      	strb	r3, [r7, #11]
 800889e:	2300      	movs	r3, #0
 80088a0:	733b      	strb	r3, [r7, #12]
 80088a2:	230b      	movs	r3, #11
 80088a4:	737b      	strb	r3, [r7, #13]
 80088a6:	238e      	movs	r3, #142	; 0x8e
 80088a8:	73bb      	strb	r3, [r7, #14]
 80088aa:	2322      	movs	r3, #34	; 0x22
 80088ac:	73fb      	strb	r3, [r7, #15]
 80088ae:	2345      	movs	r3, #69	; 0x45
 80088b0:	743b      	strb	r3, [r7, #16]
 80088b2:	2341      	movs	r3, #65	; 0x41
 80088b4:	747b      	strb	r3, [r7, #17]
 80088b6:	239d      	movs	r3, #157	; 0x9d
 80088b8:	74bb      	strb	r3, [r7, #18]
 80088ba:	234c      	movs	r3, #76	; 0x4c
 80088bc:	74fb      	strb	r3, [r7, #19]
 80088be:	2321      	movs	r3, #33	; 0x21
 80088c0:	753b      	strb	r3, [r7, #20]
 80088c2:	23ed      	movs	r3, #237	; 0xed
 80088c4:	757b      	strb	r3, [r7, #21]
 80088c6:	23ae      	movs	r3, #174	; 0xae
 80088c8:	75bb      	strb	r3, [r7, #22]
 80088ca:	2382      	movs	r3, #130	; 0x82
 80088cc:	75fb      	strb	r3, [r7, #23]
 80088ce:	23ed      	movs	r3, #237	; 0xed
 80088d0:	763b      	strb	r3, [r7, #24]
 80088d2:	2319      	movs	r3, #25
 80088d4:	767b      	strb	r3, [r7, #25]
 80088d6:	2300      	movs	r3, #0
 80088d8:	76bb      	strb	r3, [r7, #26]
 80088da:	2302      	movs	r3, #2
 80088dc:	76fb      	strb	r3, [r7, #27]
 80088de:	2300      	movs	r3, #0
 80088e0:	773b      	strb	r3, [r7, #28]
 80088e2:	4b0a      	ldr	r3, [pc, #40]	; (800890c <getCadence+0xa0>)
 80088e4:	781b      	ldrb	r3, [r3, #0]
 80088e6:	777b      	strb	r3, [r7, #29]
 80088e8:	2301      	movs	r3, #1
 80088ea:	77bb      	strb	r3, [r7, #30]
	   0x9d, 0x4c, 0x21, 0xed, 0xae, 0x82, 0xed, 0x19,			 /*< 16-byte Proximity UUID. */
	   0x00, 0x02,					 	 	 					 /*< 2-byte Major */
	   0x00, rpm_value,					 		 			 	 /*< 2-byte RPM */
	   0x01,						     		 				 /*< 1-byte Power*/
	 };
   aci_gap_update_adv_data(sizeof(service_data), service_data);
 80088ec:	1d3b      	adds	r3, r7, #4
 80088ee:	4619      	mov	r1, r3
 80088f0:	201b      	movs	r0, #27
 80088f2:	f7fe f984 	bl	8006bfe <aci_gap_update_adv_data>

   HAL_SuspendTick();
 80088f6:	f7fa f9a1 	bl	8002c3c <HAL_SuspendTick>
   HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80088fa:	2101      	movs	r1, #1
 80088fc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8008900:	f7fb fc58 	bl	80041b4 <HAL_PWR_EnterSTOPMode>

}
 8008904:	bf00      	nop
 8008906:	3720      	adds	r7, #32
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}
 800890c:	2000054f 	.word	0x2000054f

08008910 <LL_PWR_EnableBootC2>:
{
 8008910:	b480      	push	{r7}
 8008912:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8008914:	4b05      	ldr	r3, [pc, #20]	; (800892c <LL_PWR_EnableBootC2+0x1c>)
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	4a04      	ldr	r2, [pc, #16]	; (800892c <LL_PWR_EnableBootC2+0x1c>)
 800891a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800891e:	60d3      	str	r3, [r2, #12]
}
 8008920:	bf00      	nop
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr
 800892a:	bf00      	nop
 800892c:	58000400 	.word	0x58000400

08008930 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8008930:	b480      	push	{r7}
 8008932:	b083      	sub	sp, #12
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8008938:	4b06      	ldr	r3, [pc, #24]	; (8008954 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800893a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800893e:	4905      	ldr	r1, [pc, #20]	; (8008954 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4313      	orrs	r3, r2
 8008944:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8008948:	bf00      	nop
 800894a:	370c      	adds	r7, #12
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr
 8008954:	58000800 	.word	0x58000800

08008958 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8008958:	b480      	push	{r7}
 800895a:	b083      	sub	sp, #12
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8008960:	4b05      	ldr	r3, [pc, #20]	; (8008978 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8008962:	6a1a      	ldr	r2, [r3, #32]
 8008964:	4904      	ldr	r1, [pc, #16]	; (8008978 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	4313      	orrs	r3, r2
 800896a:	620b      	str	r3, [r1, #32]
}
 800896c:	bf00      	nop
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr
 8008978:	58000800 	.word	0x58000800

0800897c <LL_AHB3_GRP1_EnableClock>:
{
 800897c:	b480      	push	{r7}
 800897e:	b085      	sub	sp, #20
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8008984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008988:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800898a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4313      	orrs	r3, r2
 8008992:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8008994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008998:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	4013      	ands	r3, r2
 800899e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80089a0:	68fb      	ldr	r3, [r7, #12]
}
 80089a2:	bf00      	nop
 80089a4:	3714      	adds	r7, #20
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr

080089ae <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80089ae:	b480      	push	{r7}
 80089b0:	b085      	sub	sp, #20
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80089b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089ba:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80089be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	4313      	orrs	r3, r2
 80089c6:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80089ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089ce:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	4013      	ands	r3, r2
 80089d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80089d8:	68fb      	ldr	r3, [r7, #12]
}
 80089da:	bf00      	nop
 80089dc:	3714      	adds	r7, #20
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr

080089e6 <LL_C1_IPCC_EnableIT_TXF>:
{
 80089e6:	b480      	push	{r7}
 80089e8:	b083      	sub	sp, #12
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	601a      	str	r2, [r3, #0]
}
 80089fa:	bf00      	nop
 80089fc:	370c      	adds	r7, #12
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr

08008a06 <LL_C1_IPCC_EnableIT_RXO>:
{
 8008a06:	b480      	push	{r7}
 8008a08:	b083      	sub	sp, #12
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f043 0201 	orr.w	r2, r3, #1
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	601a      	str	r2, [r3, #0]
}
 8008a1a:	bf00      	nop
 8008a1c:	370c      	adds	r7, #12
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr

08008a26 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8008a26:	b480      	push	{r7}
 8008a28:	b083      	sub	sp, #12
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
 8008a2e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	685a      	ldr	r2, [r3, #4]
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	041b      	lsls	r3, r3, #16
 8008a38:	43db      	mvns	r3, r3
 8008a3a:	401a      	ands	r2, r3
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	605a      	str	r2, [r3, #4]
}
 8008a40:	bf00      	nop
 8008a42:	370c      	adds	r7, #12
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <LL_C1_IPCC_DisableTransmitChannel>:
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b083      	sub	sp, #12
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	685a      	ldr	r2, [r3, #4]
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	041b      	lsls	r3, r3, #16
 8008a5e:	431a      	orrs	r2, r3
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	605a      	str	r2, [r3, #4]
}
 8008a64:	bf00      	nop
 8008a66:	370c      	adds	r7, #12
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8008a70:	b480      	push	{r7}
 8008a72:	b083      	sub	sp, #12
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	685a      	ldr	r2, [r3, #4]
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	43db      	mvns	r3, r3
 8008a82:	401a      	ands	r2, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	605a      	str	r2, [r3, #4]
}
 8008a88:	bf00      	nop
 8008a8a:	370c      	adds	r7, #12
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	683a      	ldr	r2, [r7, #0]
 8008aa2:	609a      	str	r2, [r3, #8]
}
 8008aa4:	bf00      	nop
 8008aa6:	370c      	adds	r7, #12
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <LL_C1_IPCC_SetFlag_CHx>:
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b083      	sub	sp, #12
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	041a      	lsls	r2, r3, #16
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	609a      	str	r2, [r3, #8]
}
 8008ac2:	bf00      	nop
 8008ac4:	370c      	adds	r7, #12
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr

08008ace <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8008ace:	b480      	push	{r7}
 8008ad0:	b083      	sub	sp, #12
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
 8008ad6:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	68da      	ldr	r2, [r3, #12]
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	4013      	ands	r3, r2
 8008ae0:	683a      	ldr	r2, [r7, #0]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d101      	bne.n	8008aea <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e000      	b.n	8008aec <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8008aea:	2300      	movs	r3, #0
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	370c      	adds	r7, #12
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	69da      	ldr	r2, [r3, #28]
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	4013      	ands	r3, r2
 8008b0a:	683a      	ldr	r2, [r7, #0]
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d101      	bne.n	8008b14 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8008b10:	2301      	movs	r3, #1
 8008b12:	e000      	b.n	8008b16 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8008b14:	2300      	movs	r3, #0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	370c      	adds	r7, #12
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b20:	4770      	bx	lr
	...

08008b24 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8008b28:	2102      	movs	r1, #2
 8008b2a:	4819      	ldr	r0, [pc, #100]	; (8008b90 <HW_IPCC_Rx_Handler+0x6c>)
 8008b2c:	f7ff ffe4 	bl	8008af8 <LL_C2_IPCC_IsActiveFlag_CHx>
 8008b30:	4603      	mov	r3, r0
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d009      	beq.n	8008b4a <HW_IPCC_Rx_Handler+0x26>
 8008b36:	4b16      	ldr	r3, [pc, #88]	; (8008b90 <HW_IPCC_Rx_Handler+0x6c>)
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	43db      	mvns	r3, r3
 8008b3c:	f003 0302 	and.w	r3, r3, #2
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d002      	beq.n	8008b4a <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8008b44:	f000 f8da 	bl	8008cfc <HW_IPCC_SYS_EvtHandler>
 8008b48:	e01f      	b.n	8008b8a <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8008b4a:	2101      	movs	r1, #1
 8008b4c:	4810      	ldr	r0, [pc, #64]	; (8008b90 <HW_IPCC_Rx_Handler+0x6c>)
 8008b4e:	f7ff ffd3 	bl	8008af8 <LL_C2_IPCC_IsActiveFlag_CHx>
 8008b52:	4603      	mov	r3, r0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d008      	beq.n	8008b6a <HW_IPCC_Rx_Handler+0x46>
 8008b58:	4b0d      	ldr	r3, [pc, #52]	; (8008b90 <HW_IPCC_Rx_Handler+0x6c>)
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	f003 0301 	and.w	r3, r3, #1
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d102      	bne.n	8008b6a <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8008b64:	f000 f88e 	bl	8008c84 <HW_IPCC_BLE_EvtHandler>
 8008b68:	e00f      	b.n	8008b8a <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8008b6a:	2108      	movs	r1, #8
 8008b6c:	4808      	ldr	r0, [pc, #32]	; (8008b90 <HW_IPCC_Rx_Handler+0x6c>)
 8008b6e:	f7ff ffc3 	bl	8008af8 <LL_C2_IPCC_IsActiveFlag_CHx>
 8008b72:	4603      	mov	r3, r0
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d009      	beq.n	8008b8c <HW_IPCC_Rx_Handler+0x68>
 8008b78:	4b05      	ldr	r3, [pc, #20]	; (8008b90 <HW_IPCC_Rx_Handler+0x6c>)
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	43db      	mvns	r3, r3
 8008b7e:	f003 0308 	and.w	r3, r3, #8
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d002      	beq.n	8008b8c <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8008b86:	f000 f905 	bl	8008d94 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8008b8a:	bf00      	nop
 8008b8c:	bf00      	nop
}
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	58000c00 	.word	0x58000c00

08008b94 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8008b98:	2102      	movs	r1, #2
 8008b9a:	481a      	ldr	r0, [pc, #104]	; (8008c04 <HW_IPCC_Tx_Handler+0x70>)
 8008b9c:	f7ff ff97 	bl	8008ace <LL_C1_IPCC_IsActiveFlag_CHx>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d109      	bne.n	8008bba <HW_IPCC_Tx_Handler+0x26>
 8008ba6:	4b17      	ldr	r3, [pc, #92]	; (8008c04 <HW_IPCC_Tx_Handler+0x70>)
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	43db      	mvns	r3, r3
 8008bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d002      	beq.n	8008bba <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8008bb4:	f000 f896 	bl	8008ce4 <HW_IPCC_SYS_CmdEvtHandler>
 8008bb8:	e020      	b.n	8008bfc <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8008bba:	2108      	movs	r1, #8
 8008bbc:	4811      	ldr	r0, [pc, #68]	; (8008c04 <HW_IPCC_Tx_Handler+0x70>)
 8008bbe:	f7ff ff86 	bl	8008ace <LL_C1_IPCC_IsActiveFlag_CHx>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d109      	bne.n	8008bdc <HW_IPCC_Tx_Handler+0x48>
 8008bc8:	4b0e      	ldr	r3, [pc, #56]	; (8008c04 <HW_IPCC_Tx_Handler+0x70>)
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	43db      	mvns	r3, r3
 8008bce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d002      	beq.n	8008bdc <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 8008bd6:	f000 f8bf 	bl	8008d58 <HW_IPCC_MM_FreeBufHandler>
 8008bda:	e00f      	b.n	8008bfc <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8008bdc:	2120      	movs	r1, #32
 8008bde:	4809      	ldr	r0, [pc, #36]	; (8008c04 <HW_IPCC_Tx_Handler+0x70>)
 8008be0:	f7ff ff75 	bl	8008ace <LL_C1_IPCC_IsActiveFlag_CHx>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d109      	bne.n	8008bfe <HW_IPCC_Tx_Handler+0x6a>
 8008bea:	4b06      	ldr	r3, [pc, #24]	; (8008c04 <HW_IPCC_Tx_Handler+0x70>)
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	43db      	mvns	r3, r3
 8008bf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d002      	beq.n	8008bfe <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8008bf8:	f000 f850 	bl	8008c9c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8008bfc:	bf00      	nop
 8008bfe:	bf00      	nop
}
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	58000c00 	.word	0x58000c00

08008c08 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8008c0c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008c10:	f7ff fecd 	bl	80089ae <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8008c14:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008c18:	f7ff fe9e 	bl	8008958 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8008c1c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008c20:	f7ff fe86 	bl	8008930 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8008c24:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8008c26:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8008c28:	f7ff fe72 	bl	8008910 <LL_PWR_EnableBootC2>

  return;
 8008c2c:	bf00      	nop
}
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8008c34:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008c38:	f7ff fea0 	bl	800897c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8008c3c:	4806      	ldr	r0, [pc, #24]	; (8008c58 <HW_IPCC_Init+0x28>)
 8008c3e:	f7ff fee2 	bl	8008a06 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8008c42:	4805      	ldr	r0, [pc, #20]	; (8008c58 <HW_IPCC_Init+0x28>)
 8008c44:	f7ff fecf 	bl	80089e6 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8008c48:	202c      	movs	r0, #44	; 0x2c
 8008c4a:	f7fa f948 	bl	8002ede <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8008c4e:	202d      	movs	r0, #45	; 0x2d
 8008c50:	f7fa f945 	bl	8002ede <HAL_NVIC_EnableIRQ>

  return;
 8008c54:	bf00      	nop
}
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	58000c00 	.word	0x58000c00

08008c5c <HW_IPCC_BLE_Init>:
#endif
/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8008c60:	2101      	movs	r1, #1
 8008c62:	4802      	ldr	r0, [pc, #8]	; (8008c6c <HW_IPCC_BLE_Init+0x10>)
 8008c64:	f7ff ff04 	bl	8008a70 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8008c68:	bf00      	nop
}
 8008c6a:	bd80      	pop	{r7, pc}
 8008c6c:	58000c00 	.word	0x58000c00

08008c70 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_BLE_CMD_CHANNEL );
 8008c74:	2101      	movs	r1, #1
 8008c76:	4802      	ldr	r0, [pc, #8]	; (8008c80 <HW_IPCC_BLE_SendCmd+0x10>)
 8008c78:	f7ff ff1a 	bl	8008ab0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8008c7c:	bf00      	nop
}
 8008c7e:	bd80      	pop	{r7, pc}
 8008c80:	58000c00 	.word	0x58000c00

08008c84 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8008c88:	f7ff f83c 	bl	8007d04 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8008c8c:	2101      	movs	r1, #1
 8008c8e:	4802      	ldr	r0, [pc, #8]	; (8008c98 <HW_IPCC_BLE_EvtHandler+0x14>)
 8008c90:	f7ff ff00 	bl	8008a94 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008c94:	bf00      	nop
}
 8008c96:	bd80      	pop	{r7, pc}
 8008c98:	58000c00 	.word	0x58000c00

08008c9c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8008ca0:	2120      	movs	r1, #32
 8008ca2:	4803      	ldr	r0, [pc, #12]	; (8008cb0 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8008ca4:	f7ff fed2 	bl	8008a4c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8008ca8:	f7ff f85c 	bl	8007d64 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8008cac:	bf00      	nop
}
 8008cae:	bd80      	pop	{r7, pc}
 8008cb0:	58000c00 	.word	0x58000c00

08008cb4 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8008cb8:	2102      	movs	r1, #2
 8008cba:	4802      	ldr	r0, [pc, #8]	; (8008cc4 <HW_IPCC_SYS_Init+0x10>)
 8008cbc:	f7ff fed8 	bl	8008a70 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8008cc0:	bf00      	nop
}
 8008cc2:	bd80      	pop	{r7, pc}
 8008cc4:	58000c00 	.word	0x58000c00

08008cc8 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008ccc:	2102      	movs	r1, #2
 8008cce:	4804      	ldr	r0, [pc, #16]	; (8008ce0 <HW_IPCC_SYS_SendCmd+0x18>)
 8008cd0:	f7ff feee 	bl	8008ab0 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008cd4:	2102      	movs	r1, #2
 8008cd6:	4802      	ldr	r0, [pc, #8]	; (8008ce0 <HW_IPCC_SYS_SendCmd+0x18>)
 8008cd8:	f7ff fea5 	bl	8008a26 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8008cdc:	bf00      	nop
}
 8008cde:	bd80      	pop	{r7, pc}
 8008ce0:	58000c00 	.word	0x58000c00

08008ce4 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008ce8:	2102      	movs	r1, #2
 8008cea:	4803      	ldr	r0, [pc, #12]	; (8008cf8 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8008cec:	f7ff feae 	bl	8008a4c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8008cf0:	f7ff f888 	bl	8007e04 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8008cf4:	bf00      	nop
}
 8008cf6:	bd80      	pop	{r7, pc}
 8008cf8:	58000c00 	.word	0x58000c00

08008cfc <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8008d00:	f7ff f896 	bl	8007e30 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8008d04:	2102      	movs	r1, #2
 8008d06:	4802      	ldr	r0, [pc, #8]	; (8008d10 <HW_IPCC_SYS_EvtHandler+0x14>)
 8008d08:	f7ff fec4 	bl	8008a94 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008d0c:	bf00      	nop
}
 8008d0e:	bd80      	pop	{r7, pc}
 8008d10:	58000c00 	.word	0x58000c00

08008d14 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8008d1c:	2108      	movs	r1, #8
 8008d1e:	480c      	ldr	r0, [pc, #48]	; (8008d50 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008d20:	f7ff fed5 	bl	8008ace <LL_C1_IPCC_IsActiveFlag_CHx>
 8008d24:	4603      	mov	r3, r0
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d007      	beq.n	8008d3a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8008d2a:	4a0a      	ldr	r2, [pc, #40]	; (8008d54 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008d30:	2108      	movs	r1, #8
 8008d32:	4807      	ldr	r0, [pc, #28]	; (8008d50 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008d34:	f7ff fe77 	bl	8008a26 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8008d38:	e006      	b.n	8008d48 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4798      	blx	r3
    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008d3e:	2108      	movs	r1, #8
 8008d40:	4803      	ldr	r0, [pc, #12]	; (8008d50 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008d42:	f7ff feb5 	bl	8008ab0 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8008d46:	bf00      	nop
}
 8008d48:	3708      	adds	r7, #8
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	58000c00 	.word	0x58000c00
 8008d54:	20000550 	.word	0x20000550

08008d58 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008d5c:	2108      	movs	r1, #8
 8008d5e:	4806      	ldr	r0, [pc, #24]	; (8008d78 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8008d60:	f7ff fe74 	bl	8008a4c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8008d64:	4b05      	ldr	r3, [pc, #20]	; (8008d7c <HW_IPCC_MM_FreeBufHandler+0x24>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4798      	blx	r3

  HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008d6a:	2108      	movs	r1, #8
 8008d6c:	4802      	ldr	r0, [pc, #8]	; (8008d78 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8008d6e:	f7ff fe9f 	bl	8008ab0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8008d72:	bf00      	nop
}
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	bf00      	nop
 8008d78:	58000c00 	.word	0x58000c00
 8008d7c:	20000550 	.word	0x20000550

08008d80 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8008d84:	2108      	movs	r1, #8
 8008d86:	4802      	ldr	r0, [pc, #8]	; (8008d90 <HW_IPCC_TRACES_Init+0x10>)
 8008d88:	f7ff fe72 	bl	8008a70 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8008d8c:	bf00      	nop
}
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	58000c00 	.word	0x58000c00

08008d94 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8008d98:	f7ff f8f2 	bl	8007f80 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8008d9c:	2108      	movs	r1, #8
 8008d9e:	4802      	ldr	r0, [pc, #8]	; (8008da8 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8008da0:	f7ff fe78 	bl	8008a94 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008da4:	bf00      	nop
}
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	58000c00 	.word	0x58000c00

08008dac <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8008dac:	b480      	push	{r7}
 8008dae:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8008db0:	4b05      	ldr	r3, [pc, #20]	; (8008dc8 <UTIL_LPM_Init+0x1c>)
 8008db2:	2200      	movs	r2, #0
 8008db4:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8008db6:	4b05      	ldr	r3, [pc, #20]	; (8008dcc <UTIL_LPM_Init+0x20>)
 8008db8:	2200      	movs	r2, #0
 8008dba:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8008dbc:	bf00      	nop
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr
 8008dc6:	bf00      	nop
 8008dc8:	20000554 	.word	0x20000554
 8008dcc:	20000558 	.word	0x20000558

08008dd0 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b087      	sub	sp, #28
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	460b      	mov	r3, r1
 8008dda:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ddc:	f3ef 8310 	mrs	r3, PRIMASK
 8008de0:	613b      	str	r3, [r7, #16]
  return(result);
 8008de2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8008de4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008de6:	b672      	cpsid	i
}
 8008de8:	bf00      	nop
  
  switch(state)
 8008dea:	78fb      	ldrb	r3, [r7, #3]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d008      	beq.n	8008e02 <UTIL_LPM_SetOffMode+0x32>
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d10e      	bne.n	8008e12 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8008df4:	4b0d      	ldr	r3, [pc, #52]	; (8008e2c <UTIL_LPM_SetOffMode+0x5c>)
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	4a0b      	ldr	r2, [pc, #44]	; (8008e2c <UTIL_LPM_SetOffMode+0x5c>)
 8008dfe:	6013      	str	r3, [r2, #0]
      break;
 8008e00:	e008      	b.n	8008e14 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	43da      	mvns	r2, r3
 8008e06:	4b09      	ldr	r3, [pc, #36]	; (8008e2c <UTIL_LPM_SetOffMode+0x5c>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4013      	ands	r3, r2
 8008e0c:	4a07      	ldr	r2, [pc, #28]	; (8008e2c <UTIL_LPM_SetOffMode+0x5c>)
 8008e0e:	6013      	str	r3, [r2, #0]
      break;
 8008e10:	e000      	b.n	8008e14 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8008e12:	bf00      	nop
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f383 8810 	msr	PRIMASK, r3
}
 8008e1e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8008e20:	bf00      	nop
 8008e22:	371c      	adds	r7, #28
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr
 8008e2c:	20000558 	.word	0x20000558

08008e30 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e36:	f3ef 8310 	mrs	r3, PRIMASK
 8008e3a:	60bb      	str	r3, [r7, #8]
  return(result);
 8008e3c:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 8008e3e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8008e40:	b672      	cpsid	i
}
 8008e42:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8008e44:	4b12      	ldr	r3, [pc, #72]	; (8008e90 <UTIL_LPM_EnterLowPower+0x60>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d006      	beq.n	8008e5a <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8008e4c:	4b11      	ldr	r3, [pc, #68]	; (8008e94 <UTIL_LPM_EnterLowPower+0x64>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8008e52:	4b10      	ldr	r3, [pc, #64]	; (8008e94 <UTIL_LPM_EnterLowPower+0x64>)
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	4798      	blx	r3
 8008e58:	e010      	b.n	8008e7c <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8008e5a:	4b0f      	ldr	r3, [pc, #60]	; (8008e98 <UTIL_LPM_EnterLowPower+0x68>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d006      	beq.n	8008e70 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 8008e62:	4b0c      	ldr	r3, [pc, #48]	; (8008e94 <UTIL_LPM_EnterLowPower+0x64>)
 8008e64:	689b      	ldr	r3, [r3, #8]
 8008e66:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8008e68:	4b0a      	ldr	r3, [pc, #40]	; (8008e94 <UTIL_LPM_EnterLowPower+0x64>)
 8008e6a:	68db      	ldr	r3, [r3, #12]
 8008e6c:	4798      	blx	r3
 8008e6e:	e005      	b.n	8008e7c <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 8008e70:	4b08      	ldr	r3, [pc, #32]	; (8008e94 <UTIL_LPM_EnterLowPower+0x64>)
 8008e72:	691b      	ldr	r3, [r3, #16]
 8008e74:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8008e76:	4b07      	ldr	r3, [pc, #28]	; (8008e94 <UTIL_LPM_EnterLowPower+0x64>)
 8008e78:	695b      	ldr	r3, [r3, #20]
 8008e7a:	4798      	blx	r3
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f383 8810 	msr	PRIMASK, r3
}
 8008e86:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8008e88:	bf00      	nop
 8008e8a:	3710      	adds	r7, #16
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}
 8008e90:	20000554 	.word	0x20000554
 8008e94:	0800bfc0 	.word	0x0800bfc0
 8008e98:	20000558 	.word	0x20000558

08008e9c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b090      	sub	sp, #64	; 0x40
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8008ea4:	4b73      	ldr	r3, [pc, #460]	; (8009074 <UTIL_SEQ_Run+0x1d8>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8008eaa:	4b72      	ldr	r3, [pc, #456]	; (8009074 <UTIL_SEQ_Run+0x1d8>)
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	4013      	ands	r3, r2
 8008eb2:	4a70      	ldr	r2, [pc, #448]	; (8009074 <UTIL_SEQ_Run+0x1d8>)
 8008eb4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8008eb6:	4b70      	ldr	r3, [pc, #448]	; (8009078 <UTIL_SEQ_Run+0x1dc>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8008ebc:	4b6f      	ldr	r3, [pc, #444]	; (800907c <UTIL_SEQ_Run+0x1e0>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8008ec2:	4b6f      	ldr	r3, [pc, #444]	; (8009080 <UTIL_SEQ_Run+0x1e4>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8008ec8:	4b6e      	ldr	r3, [pc, #440]	; (8009084 <UTIL_SEQ_Run+0x1e8>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8008ece:	e08d      	b.n	8008fec <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8008ed4:	e002      	b.n	8008edc <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8008ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ed8:	3301      	adds	r3, #1
 8008eda:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8008edc:	4a6a      	ldr	r2, [pc, #424]	; (8009088 <UTIL_SEQ_Run+0x1ec>)
 8008ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ee0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee6:	401a      	ands	r2, r3
 8008ee8:	4b62      	ldr	r3, [pc, #392]	; (8009074 <UTIL_SEQ_Run+0x1d8>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4013      	ands	r3, r2
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d0f1      	beq.n	8008ed6 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8008ef2:	4a65      	ldr	r2, [pc, #404]	; (8009088 <UTIL_SEQ_Run+0x1ec>)
 8008ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ef6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008efc:	401a      	ands	r2, r3
 8008efe:	4b5d      	ldr	r3, [pc, #372]	; (8009074 <UTIL_SEQ_Run+0x1d8>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4013      	ands	r3, r2
 8008f04:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8008f06:	4a60      	ldr	r2, [pc, #384]	; (8009088 <UTIL_SEQ_Run+0x1ec>)
 8008f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f0a:	00db      	lsls	r3, r3, #3
 8008f0c:	4413      	add	r3, r2
 8008f0e:	685a      	ldr	r2, [r3, #4]
 8008f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f12:	4013      	ands	r3, r2
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d106      	bne.n	8008f26 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8008f18:	4a5b      	ldr	r2, [pc, #364]	; (8009088 <UTIL_SEQ_Run+0x1ec>)
 8008f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f1c:	00db      	lsls	r3, r3, #3
 8008f1e:	4413      	add	r3, r2
 8008f20:	f04f 32ff 	mov.w	r2, #4294967295
 8008f24:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8008f26:	4a58      	ldr	r2, [pc, #352]	; (8009088 <UTIL_SEQ_Run+0x1ec>)
 8008f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f2a:	00db      	lsls	r3, r3, #3
 8008f2c:	4413      	add	r3, r2
 8008f2e:	685a      	ldr	r2, [r3, #4]
 8008f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f32:	4013      	ands	r3, r2
 8008f34:	4618      	mov	r0, r3
 8008f36:	f000 f9b3 	bl	80092a0 <SEQ_BitPosition>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	4b53      	ldr	r3, [pc, #332]	; (800908c <UTIL_SEQ_Run+0x1f0>)
 8008f40:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8008f42:	4a51      	ldr	r2, [pc, #324]	; (8009088 <UTIL_SEQ_Run+0x1ec>)
 8008f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f46:	00db      	lsls	r3, r3, #3
 8008f48:	4413      	add	r3, r2
 8008f4a:	685a      	ldr	r2, [r3, #4]
 8008f4c:	4b4f      	ldr	r3, [pc, #316]	; (800908c <UTIL_SEQ_Run+0x1f0>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2101      	movs	r1, #1
 8008f52:	fa01 f303 	lsl.w	r3, r1, r3
 8008f56:	43db      	mvns	r3, r3
 8008f58:	401a      	ands	r2, r3
 8008f5a:	494b      	ldr	r1, [pc, #300]	; (8009088 <UTIL_SEQ_Run+0x1ec>)
 8008f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f5e:	00db      	lsls	r3, r3, #3
 8008f60:	440b      	add	r3, r1
 8008f62:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f64:	f3ef 8310 	mrs	r3, PRIMASK
 8008f68:	61bb      	str	r3, [r7, #24]
  return(result);
 8008f6a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008f6c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8008f6e:	b672      	cpsid	i
}
 8008f70:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8008f72:	4b46      	ldr	r3, [pc, #280]	; (800908c <UTIL_SEQ_Run+0x1f0>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	2201      	movs	r2, #1
 8008f78:	fa02 f303 	lsl.w	r3, r2, r3
 8008f7c:	43da      	mvns	r2, r3
 8008f7e:	4b3e      	ldr	r3, [pc, #248]	; (8009078 <UTIL_SEQ_Run+0x1dc>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4013      	ands	r3, r2
 8008f84:	4a3c      	ldr	r2, [pc, #240]	; (8009078 <UTIL_SEQ_Run+0x1dc>)
 8008f86:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8008f88:	2302      	movs	r3, #2
 8008f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f8c:	e013      	b.n	8008fb6 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8008f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f90:	3b01      	subs	r3, #1
 8008f92:	4a3d      	ldr	r2, [pc, #244]	; (8009088 <UTIL_SEQ_Run+0x1ec>)
 8008f94:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8008f98:	4b3c      	ldr	r3, [pc, #240]	; (800908c <UTIL_SEQ_Run+0x1f0>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008fa2:	43da      	mvns	r2, r3
 8008fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fa6:	3b01      	subs	r3, #1
 8008fa8:	400a      	ands	r2, r1
 8008faa:	4937      	ldr	r1, [pc, #220]	; (8009088 <UTIL_SEQ_Run+0x1ec>)
 8008fac:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8008fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fb2:	3b01      	subs	r3, #1
 8008fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d1e8      	bne.n	8008f8e <UTIL_SEQ_Run+0xf2>
 8008fbc:	6a3b      	ldr	r3, [r7, #32]
 8008fbe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	f383 8810 	msr	PRIMASK, r3
}
 8008fc6:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8008fc8:	4b30      	ldr	r3, [pc, #192]	; (800908c <UTIL_SEQ_Run+0x1f0>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4a30      	ldr	r2, [pc, #192]	; (8009090 <UTIL_SEQ_Run+0x1f4>)
 8008fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fd2:	4798      	blx	r3

    local_taskset = TaskSet;
 8008fd4:	4b28      	ldr	r3, [pc, #160]	; (8009078 <UTIL_SEQ_Run+0x1dc>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 8008fda:	4b28      	ldr	r3, [pc, #160]	; (800907c <UTIL_SEQ_Run+0x1e0>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 8008fe0:	4b27      	ldr	r3, [pc, #156]	; (8009080 <UTIL_SEQ_Run+0x1e4>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 8008fe6:	4b27      	ldr	r3, [pc, #156]	; (8009084 <UTIL_SEQ_Run+0x1e8>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8008fec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff0:	401a      	ands	r2, r3
 8008ff2:	4b20      	ldr	r3, [pc, #128]	; (8009074 <UTIL_SEQ_Run+0x1d8>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4013      	ands	r3, r2
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d005      	beq.n	8009008 <UTIL_SEQ_Run+0x16c>
 8008ffc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009000:	4013      	ands	r3, r2
 8009002:	2b00      	cmp	r3, #0
 8009004:	f43f af64 	beq.w	8008ed0 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8009008:	4b20      	ldr	r3, [pc, #128]	; (800908c <UTIL_SEQ_Run+0x1f0>)
 800900a:	f04f 32ff 	mov.w	r2, #4294967295
 800900e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8009010:	f000 f938 	bl	8009284 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009014:	f3ef 8310 	mrs	r3, PRIMASK
 8009018:	613b      	str	r3, [r7, #16]
  return(result);
 800901a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800901c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800901e:	b672      	cpsid	i
}
 8009020:	bf00      	nop
  local_taskset = TaskSet;
 8009022:	4b15      	ldr	r3, [pc, #84]	; (8009078 <UTIL_SEQ_Run+0x1dc>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8009028:	4b14      	ldr	r3, [pc, #80]	; (800907c <UTIL_SEQ_Run+0x1e0>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800902e:	4b14      	ldr	r3, [pc, #80]	; (8009080 <UTIL_SEQ_Run+0x1e4>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8009034:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009038:	401a      	ands	r2, r3
 800903a:	4b0e      	ldr	r3, [pc, #56]	; (8009074 <UTIL_SEQ_Run+0x1d8>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4013      	ands	r3, r2
 8009040:	2b00      	cmp	r3, #0
 8009042:	d107      	bne.n	8009054 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8009044:	4b0f      	ldr	r3, [pc, #60]	; (8009084 <UTIL_SEQ_Run+0x1e8>)
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800904a:	4013      	ands	r3, r2
 800904c:	2b00      	cmp	r3, #0
 800904e:	d101      	bne.n	8009054 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8009050:	f7f8 fc73 	bl	800193a <UTIL_SEQ_Idle>
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f383 8810 	msr	PRIMASK, r3
}
 800905e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8009060:	f000 f917 	bl	8009292 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8009064:	4a03      	ldr	r2, [pc, #12]	; (8009074 <UTIL_SEQ_Run+0x1d8>)
 8009066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009068:	6013      	str	r3, [r2, #0]

  return;
 800906a:	bf00      	nop
}
 800906c:	3740      	adds	r7, #64	; 0x40
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	20000020 	.word	0x20000020
 8009078:	2000055c 	.word	0x2000055c
 800907c:	20000560 	.word	0x20000560
 8009080:	2000001c 	.word	0x2000001c
 8009084:	20000564 	.word	0x20000564
 8009088:	200005ec 	.word	0x200005ec
 800908c:	20000568 	.word	0x20000568
 8009090:	2000056c 	.word	0x2000056c

08009094 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b088      	sub	sp, #32
 8009098:	af00      	add	r7, sp, #0
 800909a:	60f8      	str	r0, [r7, #12]
 800909c:	60b9      	str	r1, [r7, #8]
 800909e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090a0:	f3ef 8310 	mrs	r3, PRIMASK
 80090a4:	617b      	str	r3, [r7, #20]
  return(result);
 80090a6:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80090a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80090aa:	b672      	cpsid	i
}
 80090ac:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80090ae:	68f8      	ldr	r0, [r7, #12]
 80090b0:	f000 f8f6 	bl	80092a0 <SEQ_BitPosition>
 80090b4:	4603      	mov	r3, r0
 80090b6:	4619      	mov	r1, r3
 80090b8:	4a06      	ldr	r2, [pc, #24]	; (80090d4 <UTIL_SEQ_RegTask+0x40>)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80090c0:	69fb      	ldr	r3, [r7, #28]
 80090c2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090c4:	69bb      	ldr	r3, [r7, #24]
 80090c6:	f383 8810 	msr	PRIMASK, r3
}
 80090ca:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 80090cc:	bf00      	nop
}
 80090ce:	3720      	adds	r7, #32
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}
 80090d4:	2000056c 	.word	0x2000056c

080090d8 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80090d8:	b480      	push	{r7}
 80090da:	b087      	sub	sp, #28
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090e2:	f3ef 8310 	mrs	r3, PRIMASK
 80090e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80090e8:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80090ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80090ec:	b672      	cpsid	i
}
 80090ee:	bf00      	nop

  TaskSet |= TaskId_bm;
 80090f0:	4b0d      	ldr	r3, [pc, #52]	; (8009128 <UTIL_SEQ_SetTask+0x50>)
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	4313      	orrs	r3, r2
 80090f8:	4a0b      	ldr	r2, [pc, #44]	; (8009128 <UTIL_SEQ_SetTask+0x50>)
 80090fa:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80090fc:	4a0b      	ldr	r2, [pc, #44]	; (800912c <UTIL_SEQ_SetTask+0x54>)
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	431a      	orrs	r2, r3
 8009108:	4908      	ldr	r1, [pc, #32]	; (800912c <UTIL_SEQ_SetTask+0x54>)
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	f383 8810 	msr	PRIMASK, r3
}
 800911a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800911c:	bf00      	nop
}
 800911e:	371c      	adds	r7, #28
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr
 8009128:	2000055c 	.word	0x2000055c
 800912c:	200005ec 	.word	0x200005ec

08009130 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8009130:	b480      	push	{r7}
 8009132:	b087      	sub	sp, #28
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009138:	f3ef 8310 	mrs	r3, PRIMASK
 800913c:	60fb      	str	r3, [r7, #12]
  return(result);
 800913e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009140:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009142:	b672      	cpsid	i
}
 8009144:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	43da      	mvns	r2, r3
 800914a:	4b08      	ldr	r3, [pc, #32]	; (800916c <UTIL_SEQ_PauseTask+0x3c>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4013      	ands	r3, r2
 8009150:	4a06      	ldr	r2, [pc, #24]	; (800916c <UTIL_SEQ_PauseTask+0x3c>)
 8009152:	6013      	str	r3, [r2, #0]
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	f383 8810 	msr	PRIMASK, r3
}
 800915e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009160:	bf00      	nop
}
 8009162:	371c      	adds	r7, #28
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr
 800916c:	2000001c 	.word	0x2000001c

08009170 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8009170:	b480      	push	{r7}
 8009172:	b087      	sub	sp, #28
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009178:	f3ef 8310 	mrs	r3, PRIMASK
 800917c:	60fb      	str	r3, [r7, #12]
  return(result);
 800917e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009180:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009182:	b672      	cpsid	i
}
 8009184:	bf00      	nop

  TaskMask |= TaskId_bm;
 8009186:	4b09      	ldr	r3, [pc, #36]	; (80091ac <UTIL_SEQ_ResumeTask+0x3c>)
 8009188:	681a      	ldr	r2, [r3, #0]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	4313      	orrs	r3, r2
 800918e:	4a07      	ldr	r2, [pc, #28]	; (80091ac <UTIL_SEQ_ResumeTask+0x3c>)
 8009190:	6013      	str	r3, [r2, #0]
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	f383 8810 	msr	PRIMASK, r3
}
 800919c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800919e:	bf00      	nop
}
 80091a0:	371c      	adds	r7, #28
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr
 80091aa:	bf00      	nop
 80091ac:	2000001c 	.word	0x2000001c

080091b0 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 80091b0:	b480      	push	{r7}
 80091b2:	b087      	sub	sp, #28
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091b8:	f3ef 8310 	mrs	r3, PRIMASK
 80091bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80091be:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80091c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80091c2:	b672      	cpsid	i
}
 80091c4:	bf00      	nop

  EvtSet |= EvtId_bm;
 80091c6:	4b09      	ldr	r3, [pc, #36]	; (80091ec <UTIL_SEQ_SetEvt+0x3c>)
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	4313      	orrs	r3, r2
 80091ce:	4a07      	ldr	r2, [pc, #28]	; (80091ec <UTIL_SEQ_SetEvt+0x3c>)
 80091d0:	6013      	str	r3, [r2, #0]
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	f383 8810 	msr	PRIMASK, r3
}
 80091dc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80091de:	bf00      	nop
}
 80091e0:	371c      	adds	r7, #28
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr
 80091ea:	bf00      	nop
 80091ec:	20000560 	.word	0x20000560

080091f0 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b088      	sub	sp, #32
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 80091f8:	4b1f      	ldr	r3, [pc, #124]	; (8009278 <UTIL_SEQ_WaitEvt+0x88>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 80091fe:	4b1e      	ldr	r3, [pc, #120]	; (8009278 <UTIL_SEQ_WaitEvt+0x88>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009206:	d102      	bne.n	800920e <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8009208:	2300      	movs	r3, #0
 800920a:	61fb      	str	r3, [r7, #28]
 800920c:	e005      	b.n	800921a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800920e:	4b1a      	ldr	r3, [pc, #104]	; (8009278 <UTIL_SEQ_WaitEvt+0x88>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	2201      	movs	r2, #1
 8009214:	fa02 f303 	lsl.w	r3, r2, r3
 8009218:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800921a:	4b18      	ldr	r3, [pc, #96]	; (800927c <UTIL_SEQ_WaitEvt+0x8c>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8009220:	4a16      	ldr	r2, [pc, #88]	; (800927c <UTIL_SEQ_WaitEvt+0x8c>)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8009226:	e003      	b.n	8009230 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8009228:	6879      	ldr	r1, [r7, #4]
 800922a:	69f8      	ldr	r0, [r7, #28]
 800922c:	f7f8 fb8b 	bl	8001946 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8009230:	4b13      	ldr	r3, [pc, #76]	; (8009280 <UTIL_SEQ_WaitEvt+0x90>)
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	4013      	ands	r3, r2
 8009238:	2b00      	cmp	r3, #0
 800923a:	d0f5      	beq.n	8009228 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800923c:	4a0e      	ldr	r2, [pc, #56]	; (8009278 <UTIL_SEQ_WaitEvt+0x88>)
 800923e:	69bb      	ldr	r3, [r7, #24]
 8009240:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009242:	f3ef 8310 	mrs	r3, PRIMASK
 8009246:	60bb      	str	r3, [r7, #8]
  return(result);
 8009248:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800924a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800924c:	b672      	cpsid	i
}
 800924e:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	43da      	mvns	r2, r3
 8009254:	4b0a      	ldr	r3, [pc, #40]	; (8009280 <UTIL_SEQ_WaitEvt+0x90>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4013      	ands	r3, r2
 800925a:	4a09      	ldr	r2, [pc, #36]	; (8009280 <UTIL_SEQ_WaitEvt+0x90>)
 800925c:	6013      	str	r3, [r2, #0]
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f383 8810 	msr	PRIMASK, r3
}
 8009268:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800926a:	4a04      	ldr	r2, [pc, #16]	; (800927c <UTIL_SEQ_WaitEvt+0x8c>)
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	6013      	str	r3, [r2, #0]
  return;
 8009270:	bf00      	nop
}
 8009272:	3720      	adds	r7, #32
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}
 8009278:	20000568 	.word	0x20000568
 800927c:	20000564 	.word	0x20000564
 8009280:	20000560 	.word	0x20000560

08009284 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8009284:	b480      	push	{r7}
 8009286:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8009288:	bf00      	nop
}
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr

08009292 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8009292:	b480      	push	{r7}
 8009294:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8009296:	bf00      	nop
}
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b085      	sub	sp, #20
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 80092a8:	2300      	movs	r3, #0
 80092aa:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	0c1b      	lsrs	r3, r3, #16
 80092b4:	041b      	lsls	r3, r3, #16
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d104      	bne.n	80092c4 <SEQ_BitPosition+0x24>
 80092ba:	2310      	movs	r3, #16
 80092bc:	73fb      	strb	r3, [r7, #15]
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	041b      	lsls	r3, r3, #16
 80092c2:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d105      	bne.n	80092da <SEQ_BitPosition+0x3a>
 80092ce:	7bfb      	ldrb	r3, [r7, #15]
 80092d0:	3308      	adds	r3, #8
 80092d2:	73fb      	strb	r3, [r7, #15]
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	021b      	lsls	r3, r3, #8
 80092d8:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d105      	bne.n	80092f0 <SEQ_BitPosition+0x50>
 80092e4:	7bfb      	ldrb	r3, [r7, #15]
 80092e6:	3304      	adds	r3, #4
 80092e8:	73fb      	strb	r3, [r7, #15]
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	011b      	lsls	r3, r3, #4
 80092ee:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	0f1b      	lsrs	r3, r3, #28
 80092f4:	4a07      	ldr	r2, [pc, #28]	; (8009314 <SEQ_BitPosition+0x74>)
 80092f6:	5cd2      	ldrb	r2, [r2, r3]
 80092f8:	7bfb      	ldrb	r3, [r7, #15]
 80092fa:	4413      	add	r3, r2
 80092fc:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 80092fe:	7bfb      	ldrb	r3, [r7, #15]
 8009300:	f1c3 031f 	rsb	r3, r3, #31
 8009304:	b2db      	uxtb	r3, r3
}
 8009306:	4618      	mov	r0, r3
 8009308:	3714      	adds	r7, #20
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr
 8009312:	bf00      	nop
 8009314:	0800c0c8 	.word	0x0800c0c8

08009318 <__errno>:
 8009318:	4b01      	ldr	r3, [pc, #4]	; (8009320 <__errno+0x8>)
 800931a:	6818      	ldr	r0, [r3, #0]
 800931c:	4770      	bx	lr
 800931e:	bf00      	nop
 8009320:	20000024 	.word	0x20000024

08009324 <__libc_init_array>:
 8009324:	b570      	push	{r4, r5, r6, lr}
 8009326:	4d0d      	ldr	r5, [pc, #52]	; (800935c <__libc_init_array+0x38>)
 8009328:	4c0d      	ldr	r4, [pc, #52]	; (8009360 <__libc_init_array+0x3c>)
 800932a:	1b64      	subs	r4, r4, r5
 800932c:	10a4      	asrs	r4, r4, #2
 800932e:	2600      	movs	r6, #0
 8009330:	42a6      	cmp	r6, r4
 8009332:	d109      	bne.n	8009348 <__libc_init_array+0x24>
 8009334:	4d0b      	ldr	r5, [pc, #44]	; (8009364 <__libc_init_array+0x40>)
 8009336:	4c0c      	ldr	r4, [pc, #48]	; (8009368 <__libc_init_array+0x44>)
 8009338:	f002 fd4e 	bl	800bdd8 <_init>
 800933c:	1b64      	subs	r4, r4, r5
 800933e:	10a4      	asrs	r4, r4, #2
 8009340:	2600      	movs	r6, #0
 8009342:	42a6      	cmp	r6, r4
 8009344:	d105      	bne.n	8009352 <__libc_init_array+0x2e>
 8009346:	bd70      	pop	{r4, r5, r6, pc}
 8009348:	f855 3b04 	ldr.w	r3, [r5], #4
 800934c:	4798      	blx	r3
 800934e:	3601      	adds	r6, #1
 8009350:	e7ee      	b.n	8009330 <__libc_init_array+0xc>
 8009352:	f855 3b04 	ldr.w	r3, [r5], #4
 8009356:	4798      	blx	r3
 8009358:	3601      	adds	r6, #1
 800935a:	e7f2      	b.n	8009342 <__libc_init_array+0x1e>
 800935c:	0800c4bc 	.word	0x0800c4bc
 8009360:	0800c4bc 	.word	0x0800c4bc
 8009364:	0800c4bc 	.word	0x0800c4bc
 8009368:	0800c4c0 	.word	0x0800c4c0

0800936c <memcpy>:
 800936c:	440a      	add	r2, r1
 800936e:	4291      	cmp	r1, r2
 8009370:	f100 33ff 	add.w	r3, r0, #4294967295
 8009374:	d100      	bne.n	8009378 <memcpy+0xc>
 8009376:	4770      	bx	lr
 8009378:	b510      	push	{r4, lr}
 800937a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800937e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009382:	4291      	cmp	r1, r2
 8009384:	d1f9      	bne.n	800937a <memcpy+0xe>
 8009386:	bd10      	pop	{r4, pc}

08009388 <memset>:
 8009388:	4402      	add	r2, r0
 800938a:	4603      	mov	r3, r0
 800938c:	4293      	cmp	r3, r2
 800938e:	d100      	bne.n	8009392 <memset+0xa>
 8009390:	4770      	bx	lr
 8009392:	f803 1b01 	strb.w	r1, [r3], #1
 8009396:	e7f9      	b.n	800938c <memset+0x4>

08009398 <__cvt>:
 8009398:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800939c:	ec55 4b10 	vmov	r4, r5, d0
 80093a0:	2d00      	cmp	r5, #0
 80093a2:	460e      	mov	r6, r1
 80093a4:	4619      	mov	r1, r3
 80093a6:	462b      	mov	r3, r5
 80093a8:	bfbb      	ittet	lt
 80093aa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80093ae:	461d      	movlt	r5, r3
 80093b0:	2300      	movge	r3, #0
 80093b2:	232d      	movlt	r3, #45	; 0x2d
 80093b4:	700b      	strb	r3, [r1, #0]
 80093b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093b8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80093bc:	4691      	mov	r9, r2
 80093be:	f023 0820 	bic.w	r8, r3, #32
 80093c2:	bfbc      	itt	lt
 80093c4:	4622      	movlt	r2, r4
 80093c6:	4614      	movlt	r4, r2
 80093c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80093cc:	d005      	beq.n	80093da <__cvt+0x42>
 80093ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80093d2:	d100      	bne.n	80093d6 <__cvt+0x3e>
 80093d4:	3601      	adds	r6, #1
 80093d6:	2102      	movs	r1, #2
 80093d8:	e000      	b.n	80093dc <__cvt+0x44>
 80093da:	2103      	movs	r1, #3
 80093dc:	ab03      	add	r3, sp, #12
 80093de:	9301      	str	r3, [sp, #4]
 80093e0:	ab02      	add	r3, sp, #8
 80093e2:	9300      	str	r3, [sp, #0]
 80093e4:	ec45 4b10 	vmov	d0, r4, r5
 80093e8:	4653      	mov	r3, sl
 80093ea:	4632      	mov	r2, r6
 80093ec:	f000 fda4 	bl	8009f38 <_dtoa_r>
 80093f0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80093f4:	4607      	mov	r7, r0
 80093f6:	d102      	bne.n	80093fe <__cvt+0x66>
 80093f8:	f019 0f01 	tst.w	r9, #1
 80093fc:	d022      	beq.n	8009444 <__cvt+0xac>
 80093fe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009402:	eb07 0906 	add.w	r9, r7, r6
 8009406:	d110      	bne.n	800942a <__cvt+0x92>
 8009408:	783b      	ldrb	r3, [r7, #0]
 800940a:	2b30      	cmp	r3, #48	; 0x30
 800940c:	d10a      	bne.n	8009424 <__cvt+0x8c>
 800940e:	2200      	movs	r2, #0
 8009410:	2300      	movs	r3, #0
 8009412:	4620      	mov	r0, r4
 8009414:	4629      	mov	r1, r5
 8009416:	f7f7 fb2f 	bl	8000a78 <__aeabi_dcmpeq>
 800941a:	b918      	cbnz	r0, 8009424 <__cvt+0x8c>
 800941c:	f1c6 0601 	rsb	r6, r6, #1
 8009420:	f8ca 6000 	str.w	r6, [sl]
 8009424:	f8da 3000 	ldr.w	r3, [sl]
 8009428:	4499      	add	r9, r3
 800942a:	2200      	movs	r2, #0
 800942c:	2300      	movs	r3, #0
 800942e:	4620      	mov	r0, r4
 8009430:	4629      	mov	r1, r5
 8009432:	f7f7 fb21 	bl	8000a78 <__aeabi_dcmpeq>
 8009436:	b108      	cbz	r0, 800943c <__cvt+0xa4>
 8009438:	f8cd 900c 	str.w	r9, [sp, #12]
 800943c:	2230      	movs	r2, #48	; 0x30
 800943e:	9b03      	ldr	r3, [sp, #12]
 8009440:	454b      	cmp	r3, r9
 8009442:	d307      	bcc.n	8009454 <__cvt+0xbc>
 8009444:	9b03      	ldr	r3, [sp, #12]
 8009446:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009448:	1bdb      	subs	r3, r3, r7
 800944a:	4638      	mov	r0, r7
 800944c:	6013      	str	r3, [r2, #0]
 800944e:	b004      	add	sp, #16
 8009450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009454:	1c59      	adds	r1, r3, #1
 8009456:	9103      	str	r1, [sp, #12]
 8009458:	701a      	strb	r2, [r3, #0]
 800945a:	e7f0      	b.n	800943e <__cvt+0xa6>

0800945c <__exponent>:
 800945c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800945e:	4603      	mov	r3, r0
 8009460:	2900      	cmp	r1, #0
 8009462:	bfb8      	it	lt
 8009464:	4249      	neglt	r1, r1
 8009466:	f803 2b02 	strb.w	r2, [r3], #2
 800946a:	bfb4      	ite	lt
 800946c:	222d      	movlt	r2, #45	; 0x2d
 800946e:	222b      	movge	r2, #43	; 0x2b
 8009470:	2909      	cmp	r1, #9
 8009472:	7042      	strb	r2, [r0, #1]
 8009474:	dd2a      	ble.n	80094cc <__exponent+0x70>
 8009476:	f10d 0407 	add.w	r4, sp, #7
 800947a:	46a4      	mov	ip, r4
 800947c:	270a      	movs	r7, #10
 800947e:	46a6      	mov	lr, r4
 8009480:	460a      	mov	r2, r1
 8009482:	fb91 f6f7 	sdiv	r6, r1, r7
 8009486:	fb07 1516 	mls	r5, r7, r6, r1
 800948a:	3530      	adds	r5, #48	; 0x30
 800948c:	2a63      	cmp	r2, #99	; 0x63
 800948e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009492:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009496:	4631      	mov	r1, r6
 8009498:	dcf1      	bgt.n	800947e <__exponent+0x22>
 800949a:	3130      	adds	r1, #48	; 0x30
 800949c:	f1ae 0502 	sub.w	r5, lr, #2
 80094a0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80094a4:	1c44      	adds	r4, r0, #1
 80094a6:	4629      	mov	r1, r5
 80094a8:	4561      	cmp	r1, ip
 80094aa:	d30a      	bcc.n	80094c2 <__exponent+0x66>
 80094ac:	f10d 0209 	add.w	r2, sp, #9
 80094b0:	eba2 020e 	sub.w	r2, r2, lr
 80094b4:	4565      	cmp	r5, ip
 80094b6:	bf88      	it	hi
 80094b8:	2200      	movhi	r2, #0
 80094ba:	4413      	add	r3, r2
 80094bc:	1a18      	subs	r0, r3, r0
 80094be:	b003      	add	sp, #12
 80094c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094c6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80094ca:	e7ed      	b.n	80094a8 <__exponent+0x4c>
 80094cc:	2330      	movs	r3, #48	; 0x30
 80094ce:	3130      	adds	r1, #48	; 0x30
 80094d0:	7083      	strb	r3, [r0, #2]
 80094d2:	70c1      	strb	r1, [r0, #3]
 80094d4:	1d03      	adds	r3, r0, #4
 80094d6:	e7f1      	b.n	80094bc <__exponent+0x60>

080094d8 <_printf_float>:
 80094d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094dc:	ed2d 8b02 	vpush	{d8}
 80094e0:	b08d      	sub	sp, #52	; 0x34
 80094e2:	460c      	mov	r4, r1
 80094e4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80094e8:	4616      	mov	r6, r2
 80094ea:	461f      	mov	r7, r3
 80094ec:	4605      	mov	r5, r0
 80094ee:	f001 fcc9 	bl	800ae84 <_localeconv_r>
 80094f2:	f8d0 a000 	ldr.w	sl, [r0]
 80094f6:	4650      	mov	r0, sl
 80094f8:	f7f6 fe42 	bl	8000180 <strlen>
 80094fc:	2300      	movs	r3, #0
 80094fe:	930a      	str	r3, [sp, #40]	; 0x28
 8009500:	6823      	ldr	r3, [r4, #0]
 8009502:	9305      	str	r3, [sp, #20]
 8009504:	f8d8 3000 	ldr.w	r3, [r8]
 8009508:	f894 b018 	ldrb.w	fp, [r4, #24]
 800950c:	3307      	adds	r3, #7
 800950e:	f023 0307 	bic.w	r3, r3, #7
 8009512:	f103 0208 	add.w	r2, r3, #8
 8009516:	f8c8 2000 	str.w	r2, [r8]
 800951a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009522:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009526:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800952a:	9307      	str	r3, [sp, #28]
 800952c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009530:	ee08 0a10 	vmov	s16, r0
 8009534:	4b9f      	ldr	r3, [pc, #636]	; (80097b4 <_printf_float+0x2dc>)
 8009536:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800953a:	f04f 32ff 	mov.w	r2, #4294967295
 800953e:	f7f7 facd 	bl	8000adc <__aeabi_dcmpun>
 8009542:	bb88      	cbnz	r0, 80095a8 <_printf_float+0xd0>
 8009544:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009548:	4b9a      	ldr	r3, [pc, #616]	; (80097b4 <_printf_float+0x2dc>)
 800954a:	f04f 32ff 	mov.w	r2, #4294967295
 800954e:	f7f7 faa7 	bl	8000aa0 <__aeabi_dcmple>
 8009552:	bb48      	cbnz	r0, 80095a8 <_printf_float+0xd0>
 8009554:	2200      	movs	r2, #0
 8009556:	2300      	movs	r3, #0
 8009558:	4640      	mov	r0, r8
 800955a:	4649      	mov	r1, r9
 800955c:	f7f7 fa96 	bl	8000a8c <__aeabi_dcmplt>
 8009560:	b110      	cbz	r0, 8009568 <_printf_float+0x90>
 8009562:	232d      	movs	r3, #45	; 0x2d
 8009564:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009568:	4b93      	ldr	r3, [pc, #588]	; (80097b8 <_printf_float+0x2e0>)
 800956a:	4894      	ldr	r0, [pc, #592]	; (80097bc <_printf_float+0x2e4>)
 800956c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009570:	bf94      	ite	ls
 8009572:	4698      	movls	r8, r3
 8009574:	4680      	movhi	r8, r0
 8009576:	2303      	movs	r3, #3
 8009578:	6123      	str	r3, [r4, #16]
 800957a:	9b05      	ldr	r3, [sp, #20]
 800957c:	f023 0204 	bic.w	r2, r3, #4
 8009580:	6022      	str	r2, [r4, #0]
 8009582:	f04f 0900 	mov.w	r9, #0
 8009586:	9700      	str	r7, [sp, #0]
 8009588:	4633      	mov	r3, r6
 800958a:	aa0b      	add	r2, sp, #44	; 0x2c
 800958c:	4621      	mov	r1, r4
 800958e:	4628      	mov	r0, r5
 8009590:	f000 f9d8 	bl	8009944 <_printf_common>
 8009594:	3001      	adds	r0, #1
 8009596:	f040 8090 	bne.w	80096ba <_printf_float+0x1e2>
 800959a:	f04f 30ff 	mov.w	r0, #4294967295
 800959e:	b00d      	add	sp, #52	; 0x34
 80095a0:	ecbd 8b02 	vpop	{d8}
 80095a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095a8:	4642      	mov	r2, r8
 80095aa:	464b      	mov	r3, r9
 80095ac:	4640      	mov	r0, r8
 80095ae:	4649      	mov	r1, r9
 80095b0:	f7f7 fa94 	bl	8000adc <__aeabi_dcmpun>
 80095b4:	b140      	cbz	r0, 80095c8 <_printf_float+0xf0>
 80095b6:	464b      	mov	r3, r9
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	bfbc      	itt	lt
 80095bc:	232d      	movlt	r3, #45	; 0x2d
 80095be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80095c2:	487f      	ldr	r0, [pc, #508]	; (80097c0 <_printf_float+0x2e8>)
 80095c4:	4b7f      	ldr	r3, [pc, #508]	; (80097c4 <_printf_float+0x2ec>)
 80095c6:	e7d1      	b.n	800956c <_printf_float+0x94>
 80095c8:	6863      	ldr	r3, [r4, #4]
 80095ca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80095ce:	9206      	str	r2, [sp, #24]
 80095d0:	1c5a      	adds	r2, r3, #1
 80095d2:	d13f      	bne.n	8009654 <_printf_float+0x17c>
 80095d4:	2306      	movs	r3, #6
 80095d6:	6063      	str	r3, [r4, #4]
 80095d8:	9b05      	ldr	r3, [sp, #20]
 80095da:	6861      	ldr	r1, [r4, #4]
 80095dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80095e0:	2300      	movs	r3, #0
 80095e2:	9303      	str	r3, [sp, #12]
 80095e4:	ab0a      	add	r3, sp, #40	; 0x28
 80095e6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80095ea:	ab09      	add	r3, sp, #36	; 0x24
 80095ec:	ec49 8b10 	vmov	d0, r8, r9
 80095f0:	9300      	str	r3, [sp, #0]
 80095f2:	6022      	str	r2, [r4, #0]
 80095f4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80095f8:	4628      	mov	r0, r5
 80095fa:	f7ff fecd 	bl	8009398 <__cvt>
 80095fe:	9b06      	ldr	r3, [sp, #24]
 8009600:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009602:	2b47      	cmp	r3, #71	; 0x47
 8009604:	4680      	mov	r8, r0
 8009606:	d108      	bne.n	800961a <_printf_float+0x142>
 8009608:	1cc8      	adds	r0, r1, #3
 800960a:	db02      	blt.n	8009612 <_printf_float+0x13a>
 800960c:	6863      	ldr	r3, [r4, #4]
 800960e:	4299      	cmp	r1, r3
 8009610:	dd41      	ble.n	8009696 <_printf_float+0x1be>
 8009612:	f1ab 0b02 	sub.w	fp, fp, #2
 8009616:	fa5f fb8b 	uxtb.w	fp, fp
 800961a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800961e:	d820      	bhi.n	8009662 <_printf_float+0x18a>
 8009620:	3901      	subs	r1, #1
 8009622:	465a      	mov	r2, fp
 8009624:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009628:	9109      	str	r1, [sp, #36]	; 0x24
 800962a:	f7ff ff17 	bl	800945c <__exponent>
 800962e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009630:	1813      	adds	r3, r2, r0
 8009632:	2a01      	cmp	r2, #1
 8009634:	4681      	mov	r9, r0
 8009636:	6123      	str	r3, [r4, #16]
 8009638:	dc02      	bgt.n	8009640 <_printf_float+0x168>
 800963a:	6822      	ldr	r2, [r4, #0]
 800963c:	07d2      	lsls	r2, r2, #31
 800963e:	d501      	bpl.n	8009644 <_printf_float+0x16c>
 8009640:	3301      	adds	r3, #1
 8009642:	6123      	str	r3, [r4, #16]
 8009644:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009648:	2b00      	cmp	r3, #0
 800964a:	d09c      	beq.n	8009586 <_printf_float+0xae>
 800964c:	232d      	movs	r3, #45	; 0x2d
 800964e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009652:	e798      	b.n	8009586 <_printf_float+0xae>
 8009654:	9a06      	ldr	r2, [sp, #24]
 8009656:	2a47      	cmp	r2, #71	; 0x47
 8009658:	d1be      	bne.n	80095d8 <_printf_float+0x100>
 800965a:	2b00      	cmp	r3, #0
 800965c:	d1bc      	bne.n	80095d8 <_printf_float+0x100>
 800965e:	2301      	movs	r3, #1
 8009660:	e7b9      	b.n	80095d6 <_printf_float+0xfe>
 8009662:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009666:	d118      	bne.n	800969a <_printf_float+0x1c2>
 8009668:	2900      	cmp	r1, #0
 800966a:	6863      	ldr	r3, [r4, #4]
 800966c:	dd0b      	ble.n	8009686 <_printf_float+0x1ae>
 800966e:	6121      	str	r1, [r4, #16]
 8009670:	b913      	cbnz	r3, 8009678 <_printf_float+0x1a0>
 8009672:	6822      	ldr	r2, [r4, #0]
 8009674:	07d0      	lsls	r0, r2, #31
 8009676:	d502      	bpl.n	800967e <_printf_float+0x1a6>
 8009678:	3301      	adds	r3, #1
 800967a:	440b      	add	r3, r1
 800967c:	6123      	str	r3, [r4, #16]
 800967e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009680:	f04f 0900 	mov.w	r9, #0
 8009684:	e7de      	b.n	8009644 <_printf_float+0x16c>
 8009686:	b913      	cbnz	r3, 800968e <_printf_float+0x1b6>
 8009688:	6822      	ldr	r2, [r4, #0]
 800968a:	07d2      	lsls	r2, r2, #31
 800968c:	d501      	bpl.n	8009692 <_printf_float+0x1ba>
 800968e:	3302      	adds	r3, #2
 8009690:	e7f4      	b.n	800967c <_printf_float+0x1a4>
 8009692:	2301      	movs	r3, #1
 8009694:	e7f2      	b.n	800967c <_printf_float+0x1a4>
 8009696:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800969a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800969c:	4299      	cmp	r1, r3
 800969e:	db05      	blt.n	80096ac <_printf_float+0x1d4>
 80096a0:	6823      	ldr	r3, [r4, #0]
 80096a2:	6121      	str	r1, [r4, #16]
 80096a4:	07d8      	lsls	r0, r3, #31
 80096a6:	d5ea      	bpl.n	800967e <_printf_float+0x1a6>
 80096a8:	1c4b      	adds	r3, r1, #1
 80096aa:	e7e7      	b.n	800967c <_printf_float+0x1a4>
 80096ac:	2900      	cmp	r1, #0
 80096ae:	bfd4      	ite	le
 80096b0:	f1c1 0202 	rsble	r2, r1, #2
 80096b4:	2201      	movgt	r2, #1
 80096b6:	4413      	add	r3, r2
 80096b8:	e7e0      	b.n	800967c <_printf_float+0x1a4>
 80096ba:	6823      	ldr	r3, [r4, #0]
 80096bc:	055a      	lsls	r2, r3, #21
 80096be:	d407      	bmi.n	80096d0 <_printf_float+0x1f8>
 80096c0:	6923      	ldr	r3, [r4, #16]
 80096c2:	4642      	mov	r2, r8
 80096c4:	4631      	mov	r1, r6
 80096c6:	4628      	mov	r0, r5
 80096c8:	47b8      	blx	r7
 80096ca:	3001      	adds	r0, #1
 80096cc:	d12c      	bne.n	8009728 <_printf_float+0x250>
 80096ce:	e764      	b.n	800959a <_printf_float+0xc2>
 80096d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80096d4:	f240 80e0 	bls.w	8009898 <_printf_float+0x3c0>
 80096d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80096dc:	2200      	movs	r2, #0
 80096de:	2300      	movs	r3, #0
 80096e0:	f7f7 f9ca 	bl	8000a78 <__aeabi_dcmpeq>
 80096e4:	2800      	cmp	r0, #0
 80096e6:	d034      	beq.n	8009752 <_printf_float+0x27a>
 80096e8:	4a37      	ldr	r2, [pc, #220]	; (80097c8 <_printf_float+0x2f0>)
 80096ea:	2301      	movs	r3, #1
 80096ec:	4631      	mov	r1, r6
 80096ee:	4628      	mov	r0, r5
 80096f0:	47b8      	blx	r7
 80096f2:	3001      	adds	r0, #1
 80096f4:	f43f af51 	beq.w	800959a <_printf_float+0xc2>
 80096f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80096fc:	429a      	cmp	r2, r3
 80096fe:	db02      	blt.n	8009706 <_printf_float+0x22e>
 8009700:	6823      	ldr	r3, [r4, #0]
 8009702:	07d8      	lsls	r0, r3, #31
 8009704:	d510      	bpl.n	8009728 <_printf_float+0x250>
 8009706:	ee18 3a10 	vmov	r3, s16
 800970a:	4652      	mov	r2, sl
 800970c:	4631      	mov	r1, r6
 800970e:	4628      	mov	r0, r5
 8009710:	47b8      	blx	r7
 8009712:	3001      	adds	r0, #1
 8009714:	f43f af41 	beq.w	800959a <_printf_float+0xc2>
 8009718:	f04f 0800 	mov.w	r8, #0
 800971c:	f104 091a 	add.w	r9, r4, #26
 8009720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009722:	3b01      	subs	r3, #1
 8009724:	4543      	cmp	r3, r8
 8009726:	dc09      	bgt.n	800973c <_printf_float+0x264>
 8009728:	6823      	ldr	r3, [r4, #0]
 800972a:	079b      	lsls	r3, r3, #30
 800972c:	f100 8105 	bmi.w	800993a <_printf_float+0x462>
 8009730:	68e0      	ldr	r0, [r4, #12]
 8009732:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009734:	4298      	cmp	r0, r3
 8009736:	bfb8      	it	lt
 8009738:	4618      	movlt	r0, r3
 800973a:	e730      	b.n	800959e <_printf_float+0xc6>
 800973c:	2301      	movs	r3, #1
 800973e:	464a      	mov	r2, r9
 8009740:	4631      	mov	r1, r6
 8009742:	4628      	mov	r0, r5
 8009744:	47b8      	blx	r7
 8009746:	3001      	adds	r0, #1
 8009748:	f43f af27 	beq.w	800959a <_printf_float+0xc2>
 800974c:	f108 0801 	add.w	r8, r8, #1
 8009750:	e7e6      	b.n	8009720 <_printf_float+0x248>
 8009752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009754:	2b00      	cmp	r3, #0
 8009756:	dc39      	bgt.n	80097cc <_printf_float+0x2f4>
 8009758:	4a1b      	ldr	r2, [pc, #108]	; (80097c8 <_printf_float+0x2f0>)
 800975a:	2301      	movs	r3, #1
 800975c:	4631      	mov	r1, r6
 800975e:	4628      	mov	r0, r5
 8009760:	47b8      	blx	r7
 8009762:	3001      	adds	r0, #1
 8009764:	f43f af19 	beq.w	800959a <_printf_float+0xc2>
 8009768:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800976c:	4313      	orrs	r3, r2
 800976e:	d102      	bne.n	8009776 <_printf_float+0x29e>
 8009770:	6823      	ldr	r3, [r4, #0]
 8009772:	07d9      	lsls	r1, r3, #31
 8009774:	d5d8      	bpl.n	8009728 <_printf_float+0x250>
 8009776:	ee18 3a10 	vmov	r3, s16
 800977a:	4652      	mov	r2, sl
 800977c:	4631      	mov	r1, r6
 800977e:	4628      	mov	r0, r5
 8009780:	47b8      	blx	r7
 8009782:	3001      	adds	r0, #1
 8009784:	f43f af09 	beq.w	800959a <_printf_float+0xc2>
 8009788:	f04f 0900 	mov.w	r9, #0
 800978c:	f104 0a1a 	add.w	sl, r4, #26
 8009790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009792:	425b      	negs	r3, r3
 8009794:	454b      	cmp	r3, r9
 8009796:	dc01      	bgt.n	800979c <_printf_float+0x2c4>
 8009798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800979a:	e792      	b.n	80096c2 <_printf_float+0x1ea>
 800979c:	2301      	movs	r3, #1
 800979e:	4652      	mov	r2, sl
 80097a0:	4631      	mov	r1, r6
 80097a2:	4628      	mov	r0, r5
 80097a4:	47b8      	blx	r7
 80097a6:	3001      	adds	r0, #1
 80097a8:	f43f aef7 	beq.w	800959a <_printf_float+0xc2>
 80097ac:	f109 0901 	add.w	r9, r9, #1
 80097b0:	e7ee      	b.n	8009790 <_printf_float+0x2b8>
 80097b2:	bf00      	nop
 80097b4:	7fefffff 	.word	0x7fefffff
 80097b8:	0800c0dc 	.word	0x0800c0dc
 80097bc:	0800c0e0 	.word	0x0800c0e0
 80097c0:	0800c0e8 	.word	0x0800c0e8
 80097c4:	0800c0e4 	.word	0x0800c0e4
 80097c8:	0800c0ec 	.word	0x0800c0ec
 80097cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80097d0:	429a      	cmp	r2, r3
 80097d2:	bfa8      	it	ge
 80097d4:	461a      	movge	r2, r3
 80097d6:	2a00      	cmp	r2, #0
 80097d8:	4691      	mov	r9, r2
 80097da:	dc37      	bgt.n	800984c <_printf_float+0x374>
 80097dc:	f04f 0b00 	mov.w	fp, #0
 80097e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80097e4:	f104 021a 	add.w	r2, r4, #26
 80097e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80097ea:	9305      	str	r3, [sp, #20]
 80097ec:	eba3 0309 	sub.w	r3, r3, r9
 80097f0:	455b      	cmp	r3, fp
 80097f2:	dc33      	bgt.n	800985c <_printf_float+0x384>
 80097f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80097f8:	429a      	cmp	r2, r3
 80097fa:	db3b      	blt.n	8009874 <_printf_float+0x39c>
 80097fc:	6823      	ldr	r3, [r4, #0]
 80097fe:	07da      	lsls	r2, r3, #31
 8009800:	d438      	bmi.n	8009874 <_printf_float+0x39c>
 8009802:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009804:	9a05      	ldr	r2, [sp, #20]
 8009806:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009808:	1a9a      	subs	r2, r3, r2
 800980a:	eba3 0901 	sub.w	r9, r3, r1
 800980e:	4591      	cmp	r9, r2
 8009810:	bfa8      	it	ge
 8009812:	4691      	movge	r9, r2
 8009814:	f1b9 0f00 	cmp.w	r9, #0
 8009818:	dc35      	bgt.n	8009886 <_printf_float+0x3ae>
 800981a:	f04f 0800 	mov.w	r8, #0
 800981e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009822:	f104 0a1a 	add.w	sl, r4, #26
 8009826:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800982a:	1a9b      	subs	r3, r3, r2
 800982c:	eba3 0309 	sub.w	r3, r3, r9
 8009830:	4543      	cmp	r3, r8
 8009832:	f77f af79 	ble.w	8009728 <_printf_float+0x250>
 8009836:	2301      	movs	r3, #1
 8009838:	4652      	mov	r2, sl
 800983a:	4631      	mov	r1, r6
 800983c:	4628      	mov	r0, r5
 800983e:	47b8      	blx	r7
 8009840:	3001      	adds	r0, #1
 8009842:	f43f aeaa 	beq.w	800959a <_printf_float+0xc2>
 8009846:	f108 0801 	add.w	r8, r8, #1
 800984a:	e7ec      	b.n	8009826 <_printf_float+0x34e>
 800984c:	4613      	mov	r3, r2
 800984e:	4631      	mov	r1, r6
 8009850:	4642      	mov	r2, r8
 8009852:	4628      	mov	r0, r5
 8009854:	47b8      	blx	r7
 8009856:	3001      	adds	r0, #1
 8009858:	d1c0      	bne.n	80097dc <_printf_float+0x304>
 800985a:	e69e      	b.n	800959a <_printf_float+0xc2>
 800985c:	2301      	movs	r3, #1
 800985e:	4631      	mov	r1, r6
 8009860:	4628      	mov	r0, r5
 8009862:	9205      	str	r2, [sp, #20]
 8009864:	47b8      	blx	r7
 8009866:	3001      	adds	r0, #1
 8009868:	f43f ae97 	beq.w	800959a <_printf_float+0xc2>
 800986c:	9a05      	ldr	r2, [sp, #20]
 800986e:	f10b 0b01 	add.w	fp, fp, #1
 8009872:	e7b9      	b.n	80097e8 <_printf_float+0x310>
 8009874:	ee18 3a10 	vmov	r3, s16
 8009878:	4652      	mov	r2, sl
 800987a:	4631      	mov	r1, r6
 800987c:	4628      	mov	r0, r5
 800987e:	47b8      	blx	r7
 8009880:	3001      	adds	r0, #1
 8009882:	d1be      	bne.n	8009802 <_printf_float+0x32a>
 8009884:	e689      	b.n	800959a <_printf_float+0xc2>
 8009886:	9a05      	ldr	r2, [sp, #20]
 8009888:	464b      	mov	r3, r9
 800988a:	4442      	add	r2, r8
 800988c:	4631      	mov	r1, r6
 800988e:	4628      	mov	r0, r5
 8009890:	47b8      	blx	r7
 8009892:	3001      	adds	r0, #1
 8009894:	d1c1      	bne.n	800981a <_printf_float+0x342>
 8009896:	e680      	b.n	800959a <_printf_float+0xc2>
 8009898:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800989a:	2a01      	cmp	r2, #1
 800989c:	dc01      	bgt.n	80098a2 <_printf_float+0x3ca>
 800989e:	07db      	lsls	r3, r3, #31
 80098a0:	d538      	bpl.n	8009914 <_printf_float+0x43c>
 80098a2:	2301      	movs	r3, #1
 80098a4:	4642      	mov	r2, r8
 80098a6:	4631      	mov	r1, r6
 80098a8:	4628      	mov	r0, r5
 80098aa:	47b8      	blx	r7
 80098ac:	3001      	adds	r0, #1
 80098ae:	f43f ae74 	beq.w	800959a <_printf_float+0xc2>
 80098b2:	ee18 3a10 	vmov	r3, s16
 80098b6:	4652      	mov	r2, sl
 80098b8:	4631      	mov	r1, r6
 80098ba:	4628      	mov	r0, r5
 80098bc:	47b8      	blx	r7
 80098be:	3001      	adds	r0, #1
 80098c0:	f43f ae6b 	beq.w	800959a <_printf_float+0xc2>
 80098c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80098c8:	2200      	movs	r2, #0
 80098ca:	2300      	movs	r3, #0
 80098cc:	f7f7 f8d4 	bl	8000a78 <__aeabi_dcmpeq>
 80098d0:	b9d8      	cbnz	r0, 800990a <_printf_float+0x432>
 80098d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098d4:	f108 0201 	add.w	r2, r8, #1
 80098d8:	3b01      	subs	r3, #1
 80098da:	4631      	mov	r1, r6
 80098dc:	4628      	mov	r0, r5
 80098de:	47b8      	blx	r7
 80098e0:	3001      	adds	r0, #1
 80098e2:	d10e      	bne.n	8009902 <_printf_float+0x42a>
 80098e4:	e659      	b.n	800959a <_printf_float+0xc2>
 80098e6:	2301      	movs	r3, #1
 80098e8:	4652      	mov	r2, sl
 80098ea:	4631      	mov	r1, r6
 80098ec:	4628      	mov	r0, r5
 80098ee:	47b8      	blx	r7
 80098f0:	3001      	adds	r0, #1
 80098f2:	f43f ae52 	beq.w	800959a <_printf_float+0xc2>
 80098f6:	f108 0801 	add.w	r8, r8, #1
 80098fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098fc:	3b01      	subs	r3, #1
 80098fe:	4543      	cmp	r3, r8
 8009900:	dcf1      	bgt.n	80098e6 <_printf_float+0x40e>
 8009902:	464b      	mov	r3, r9
 8009904:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009908:	e6dc      	b.n	80096c4 <_printf_float+0x1ec>
 800990a:	f04f 0800 	mov.w	r8, #0
 800990e:	f104 0a1a 	add.w	sl, r4, #26
 8009912:	e7f2      	b.n	80098fa <_printf_float+0x422>
 8009914:	2301      	movs	r3, #1
 8009916:	4642      	mov	r2, r8
 8009918:	e7df      	b.n	80098da <_printf_float+0x402>
 800991a:	2301      	movs	r3, #1
 800991c:	464a      	mov	r2, r9
 800991e:	4631      	mov	r1, r6
 8009920:	4628      	mov	r0, r5
 8009922:	47b8      	blx	r7
 8009924:	3001      	adds	r0, #1
 8009926:	f43f ae38 	beq.w	800959a <_printf_float+0xc2>
 800992a:	f108 0801 	add.w	r8, r8, #1
 800992e:	68e3      	ldr	r3, [r4, #12]
 8009930:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009932:	1a5b      	subs	r3, r3, r1
 8009934:	4543      	cmp	r3, r8
 8009936:	dcf0      	bgt.n	800991a <_printf_float+0x442>
 8009938:	e6fa      	b.n	8009730 <_printf_float+0x258>
 800993a:	f04f 0800 	mov.w	r8, #0
 800993e:	f104 0919 	add.w	r9, r4, #25
 8009942:	e7f4      	b.n	800992e <_printf_float+0x456>

08009944 <_printf_common>:
 8009944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009948:	4616      	mov	r6, r2
 800994a:	4699      	mov	r9, r3
 800994c:	688a      	ldr	r2, [r1, #8]
 800994e:	690b      	ldr	r3, [r1, #16]
 8009950:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009954:	4293      	cmp	r3, r2
 8009956:	bfb8      	it	lt
 8009958:	4613      	movlt	r3, r2
 800995a:	6033      	str	r3, [r6, #0]
 800995c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009960:	4607      	mov	r7, r0
 8009962:	460c      	mov	r4, r1
 8009964:	b10a      	cbz	r2, 800996a <_printf_common+0x26>
 8009966:	3301      	adds	r3, #1
 8009968:	6033      	str	r3, [r6, #0]
 800996a:	6823      	ldr	r3, [r4, #0]
 800996c:	0699      	lsls	r1, r3, #26
 800996e:	bf42      	ittt	mi
 8009970:	6833      	ldrmi	r3, [r6, #0]
 8009972:	3302      	addmi	r3, #2
 8009974:	6033      	strmi	r3, [r6, #0]
 8009976:	6825      	ldr	r5, [r4, #0]
 8009978:	f015 0506 	ands.w	r5, r5, #6
 800997c:	d106      	bne.n	800998c <_printf_common+0x48>
 800997e:	f104 0a19 	add.w	sl, r4, #25
 8009982:	68e3      	ldr	r3, [r4, #12]
 8009984:	6832      	ldr	r2, [r6, #0]
 8009986:	1a9b      	subs	r3, r3, r2
 8009988:	42ab      	cmp	r3, r5
 800998a:	dc26      	bgt.n	80099da <_printf_common+0x96>
 800998c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009990:	1e13      	subs	r3, r2, #0
 8009992:	6822      	ldr	r2, [r4, #0]
 8009994:	bf18      	it	ne
 8009996:	2301      	movne	r3, #1
 8009998:	0692      	lsls	r2, r2, #26
 800999a:	d42b      	bmi.n	80099f4 <_printf_common+0xb0>
 800999c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80099a0:	4649      	mov	r1, r9
 80099a2:	4638      	mov	r0, r7
 80099a4:	47c0      	blx	r8
 80099a6:	3001      	adds	r0, #1
 80099a8:	d01e      	beq.n	80099e8 <_printf_common+0xa4>
 80099aa:	6823      	ldr	r3, [r4, #0]
 80099ac:	68e5      	ldr	r5, [r4, #12]
 80099ae:	6832      	ldr	r2, [r6, #0]
 80099b0:	f003 0306 	and.w	r3, r3, #6
 80099b4:	2b04      	cmp	r3, #4
 80099b6:	bf08      	it	eq
 80099b8:	1aad      	subeq	r5, r5, r2
 80099ba:	68a3      	ldr	r3, [r4, #8]
 80099bc:	6922      	ldr	r2, [r4, #16]
 80099be:	bf0c      	ite	eq
 80099c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80099c4:	2500      	movne	r5, #0
 80099c6:	4293      	cmp	r3, r2
 80099c8:	bfc4      	itt	gt
 80099ca:	1a9b      	subgt	r3, r3, r2
 80099cc:	18ed      	addgt	r5, r5, r3
 80099ce:	2600      	movs	r6, #0
 80099d0:	341a      	adds	r4, #26
 80099d2:	42b5      	cmp	r5, r6
 80099d4:	d11a      	bne.n	8009a0c <_printf_common+0xc8>
 80099d6:	2000      	movs	r0, #0
 80099d8:	e008      	b.n	80099ec <_printf_common+0xa8>
 80099da:	2301      	movs	r3, #1
 80099dc:	4652      	mov	r2, sl
 80099de:	4649      	mov	r1, r9
 80099e0:	4638      	mov	r0, r7
 80099e2:	47c0      	blx	r8
 80099e4:	3001      	adds	r0, #1
 80099e6:	d103      	bne.n	80099f0 <_printf_common+0xac>
 80099e8:	f04f 30ff 	mov.w	r0, #4294967295
 80099ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099f0:	3501      	adds	r5, #1
 80099f2:	e7c6      	b.n	8009982 <_printf_common+0x3e>
 80099f4:	18e1      	adds	r1, r4, r3
 80099f6:	1c5a      	adds	r2, r3, #1
 80099f8:	2030      	movs	r0, #48	; 0x30
 80099fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80099fe:	4422      	add	r2, r4
 8009a00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a08:	3302      	adds	r3, #2
 8009a0a:	e7c7      	b.n	800999c <_printf_common+0x58>
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	4622      	mov	r2, r4
 8009a10:	4649      	mov	r1, r9
 8009a12:	4638      	mov	r0, r7
 8009a14:	47c0      	blx	r8
 8009a16:	3001      	adds	r0, #1
 8009a18:	d0e6      	beq.n	80099e8 <_printf_common+0xa4>
 8009a1a:	3601      	adds	r6, #1
 8009a1c:	e7d9      	b.n	80099d2 <_printf_common+0x8e>
	...

08009a20 <_printf_i>:
 8009a20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a24:	7e0f      	ldrb	r7, [r1, #24]
 8009a26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009a28:	2f78      	cmp	r7, #120	; 0x78
 8009a2a:	4691      	mov	r9, r2
 8009a2c:	4680      	mov	r8, r0
 8009a2e:	460c      	mov	r4, r1
 8009a30:	469a      	mov	sl, r3
 8009a32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009a36:	d807      	bhi.n	8009a48 <_printf_i+0x28>
 8009a38:	2f62      	cmp	r7, #98	; 0x62
 8009a3a:	d80a      	bhi.n	8009a52 <_printf_i+0x32>
 8009a3c:	2f00      	cmp	r7, #0
 8009a3e:	f000 80d8 	beq.w	8009bf2 <_printf_i+0x1d2>
 8009a42:	2f58      	cmp	r7, #88	; 0x58
 8009a44:	f000 80a3 	beq.w	8009b8e <_printf_i+0x16e>
 8009a48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009a50:	e03a      	b.n	8009ac8 <_printf_i+0xa8>
 8009a52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009a56:	2b15      	cmp	r3, #21
 8009a58:	d8f6      	bhi.n	8009a48 <_printf_i+0x28>
 8009a5a:	a101      	add	r1, pc, #4	; (adr r1, 8009a60 <_printf_i+0x40>)
 8009a5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a60:	08009ab9 	.word	0x08009ab9
 8009a64:	08009acd 	.word	0x08009acd
 8009a68:	08009a49 	.word	0x08009a49
 8009a6c:	08009a49 	.word	0x08009a49
 8009a70:	08009a49 	.word	0x08009a49
 8009a74:	08009a49 	.word	0x08009a49
 8009a78:	08009acd 	.word	0x08009acd
 8009a7c:	08009a49 	.word	0x08009a49
 8009a80:	08009a49 	.word	0x08009a49
 8009a84:	08009a49 	.word	0x08009a49
 8009a88:	08009a49 	.word	0x08009a49
 8009a8c:	08009bd9 	.word	0x08009bd9
 8009a90:	08009afd 	.word	0x08009afd
 8009a94:	08009bbb 	.word	0x08009bbb
 8009a98:	08009a49 	.word	0x08009a49
 8009a9c:	08009a49 	.word	0x08009a49
 8009aa0:	08009bfb 	.word	0x08009bfb
 8009aa4:	08009a49 	.word	0x08009a49
 8009aa8:	08009afd 	.word	0x08009afd
 8009aac:	08009a49 	.word	0x08009a49
 8009ab0:	08009a49 	.word	0x08009a49
 8009ab4:	08009bc3 	.word	0x08009bc3
 8009ab8:	682b      	ldr	r3, [r5, #0]
 8009aba:	1d1a      	adds	r2, r3, #4
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	602a      	str	r2, [r5, #0]
 8009ac0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ac4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ac8:	2301      	movs	r3, #1
 8009aca:	e0a3      	b.n	8009c14 <_printf_i+0x1f4>
 8009acc:	6820      	ldr	r0, [r4, #0]
 8009ace:	6829      	ldr	r1, [r5, #0]
 8009ad0:	0606      	lsls	r6, r0, #24
 8009ad2:	f101 0304 	add.w	r3, r1, #4
 8009ad6:	d50a      	bpl.n	8009aee <_printf_i+0xce>
 8009ad8:	680e      	ldr	r6, [r1, #0]
 8009ada:	602b      	str	r3, [r5, #0]
 8009adc:	2e00      	cmp	r6, #0
 8009ade:	da03      	bge.n	8009ae8 <_printf_i+0xc8>
 8009ae0:	232d      	movs	r3, #45	; 0x2d
 8009ae2:	4276      	negs	r6, r6
 8009ae4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ae8:	485e      	ldr	r0, [pc, #376]	; (8009c64 <_printf_i+0x244>)
 8009aea:	230a      	movs	r3, #10
 8009aec:	e019      	b.n	8009b22 <_printf_i+0x102>
 8009aee:	680e      	ldr	r6, [r1, #0]
 8009af0:	602b      	str	r3, [r5, #0]
 8009af2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009af6:	bf18      	it	ne
 8009af8:	b236      	sxthne	r6, r6
 8009afa:	e7ef      	b.n	8009adc <_printf_i+0xbc>
 8009afc:	682b      	ldr	r3, [r5, #0]
 8009afe:	6820      	ldr	r0, [r4, #0]
 8009b00:	1d19      	adds	r1, r3, #4
 8009b02:	6029      	str	r1, [r5, #0]
 8009b04:	0601      	lsls	r1, r0, #24
 8009b06:	d501      	bpl.n	8009b0c <_printf_i+0xec>
 8009b08:	681e      	ldr	r6, [r3, #0]
 8009b0a:	e002      	b.n	8009b12 <_printf_i+0xf2>
 8009b0c:	0646      	lsls	r6, r0, #25
 8009b0e:	d5fb      	bpl.n	8009b08 <_printf_i+0xe8>
 8009b10:	881e      	ldrh	r6, [r3, #0]
 8009b12:	4854      	ldr	r0, [pc, #336]	; (8009c64 <_printf_i+0x244>)
 8009b14:	2f6f      	cmp	r7, #111	; 0x6f
 8009b16:	bf0c      	ite	eq
 8009b18:	2308      	moveq	r3, #8
 8009b1a:	230a      	movne	r3, #10
 8009b1c:	2100      	movs	r1, #0
 8009b1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b22:	6865      	ldr	r5, [r4, #4]
 8009b24:	60a5      	str	r5, [r4, #8]
 8009b26:	2d00      	cmp	r5, #0
 8009b28:	bfa2      	ittt	ge
 8009b2a:	6821      	ldrge	r1, [r4, #0]
 8009b2c:	f021 0104 	bicge.w	r1, r1, #4
 8009b30:	6021      	strge	r1, [r4, #0]
 8009b32:	b90e      	cbnz	r6, 8009b38 <_printf_i+0x118>
 8009b34:	2d00      	cmp	r5, #0
 8009b36:	d04d      	beq.n	8009bd4 <_printf_i+0x1b4>
 8009b38:	4615      	mov	r5, r2
 8009b3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009b3e:	fb03 6711 	mls	r7, r3, r1, r6
 8009b42:	5dc7      	ldrb	r7, [r0, r7]
 8009b44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009b48:	4637      	mov	r7, r6
 8009b4a:	42bb      	cmp	r3, r7
 8009b4c:	460e      	mov	r6, r1
 8009b4e:	d9f4      	bls.n	8009b3a <_printf_i+0x11a>
 8009b50:	2b08      	cmp	r3, #8
 8009b52:	d10b      	bne.n	8009b6c <_printf_i+0x14c>
 8009b54:	6823      	ldr	r3, [r4, #0]
 8009b56:	07de      	lsls	r6, r3, #31
 8009b58:	d508      	bpl.n	8009b6c <_printf_i+0x14c>
 8009b5a:	6923      	ldr	r3, [r4, #16]
 8009b5c:	6861      	ldr	r1, [r4, #4]
 8009b5e:	4299      	cmp	r1, r3
 8009b60:	bfde      	ittt	le
 8009b62:	2330      	movle	r3, #48	; 0x30
 8009b64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009b68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009b6c:	1b52      	subs	r2, r2, r5
 8009b6e:	6122      	str	r2, [r4, #16]
 8009b70:	f8cd a000 	str.w	sl, [sp]
 8009b74:	464b      	mov	r3, r9
 8009b76:	aa03      	add	r2, sp, #12
 8009b78:	4621      	mov	r1, r4
 8009b7a:	4640      	mov	r0, r8
 8009b7c:	f7ff fee2 	bl	8009944 <_printf_common>
 8009b80:	3001      	adds	r0, #1
 8009b82:	d14c      	bne.n	8009c1e <_printf_i+0x1fe>
 8009b84:	f04f 30ff 	mov.w	r0, #4294967295
 8009b88:	b004      	add	sp, #16
 8009b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b8e:	4835      	ldr	r0, [pc, #212]	; (8009c64 <_printf_i+0x244>)
 8009b90:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009b94:	6829      	ldr	r1, [r5, #0]
 8009b96:	6823      	ldr	r3, [r4, #0]
 8009b98:	f851 6b04 	ldr.w	r6, [r1], #4
 8009b9c:	6029      	str	r1, [r5, #0]
 8009b9e:	061d      	lsls	r5, r3, #24
 8009ba0:	d514      	bpl.n	8009bcc <_printf_i+0x1ac>
 8009ba2:	07df      	lsls	r7, r3, #31
 8009ba4:	bf44      	itt	mi
 8009ba6:	f043 0320 	orrmi.w	r3, r3, #32
 8009baa:	6023      	strmi	r3, [r4, #0]
 8009bac:	b91e      	cbnz	r6, 8009bb6 <_printf_i+0x196>
 8009bae:	6823      	ldr	r3, [r4, #0]
 8009bb0:	f023 0320 	bic.w	r3, r3, #32
 8009bb4:	6023      	str	r3, [r4, #0]
 8009bb6:	2310      	movs	r3, #16
 8009bb8:	e7b0      	b.n	8009b1c <_printf_i+0xfc>
 8009bba:	6823      	ldr	r3, [r4, #0]
 8009bbc:	f043 0320 	orr.w	r3, r3, #32
 8009bc0:	6023      	str	r3, [r4, #0]
 8009bc2:	2378      	movs	r3, #120	; 0x78
 8009bc4:	4828      	ldr	r0, [pc, #160]	; (8009c68 <_printf_i+0x248>)
 8009bc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009bca:	e7e3      	b.n	8009b94 <_printf_i+0x174>
 8009bcc:	0659      	lsls	r1, r3, #25
 8009bce:	bf48      	it	mi
 8009bd0:	b2b6      	uxthmi	r6, r6
 8009bd2:	e7e6      	b.n	8009ba2 <_printf_i+0x182>
 8009bd4:	4615      	mov	r5, r2
 8009bd6:	e7bb      	b.n	8009b50 <_printf_i+0x130>
 8009bd8:	682b      	ldr	r3, [r5, #0]
 8009bda:	6826      	ldr	r6, [r4, #0]
 8009bdc:	6961      	ldr	r1, [r4, #20]
 8009bde:	1d18      	adds	r0, r3, #4
 8009be0:	6028      	str	r0, [r5, #0]
 8009be2:	0635      	lsls	r5, r6, #24
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	d501      	bpl.n	8009bec <_printf_i+0x1cc>
 8009be8:	6019      	str	r1, [r3, #0]
 8009bea:	e002      	b.n	8009bf2 <_printf_i+0x1d2>
 8009bec:	0670      	lsls	r0, r6, #25
 8009bee:	d5fb      	bpl.n	8009be8 <_printf_i+0x1c8>
 8009bf0:	8019      	strh	r1, [r3, #0]
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	6123      	str	r3, [r4, #16]
 8009bf6:	4615      	mov	r5, r2
 8009bf8:	e7ba      	b.n	8009b70 <_printf_i+0x150>
 8009bfa:	682b      	ldr	r3, [r5, #0]
 8009bfc:	1d1a      	adds	r2, r3, #4
 8009bfe:	602a      	str	r2, [r5, #0]
 8009c00:	681d      	ldr	r5, [r3, #0]
 8009c02:	6862      	ldr	r2, [r4, #4]
 8009c04:	2100      	movs	r1, #0
 8009c06:	4628      	mov	r0, r5
 8009c08:	f7f6 fac2 	bl	8000190 <memchr>
 8009c0c:	b108      	cbz	r0, 8009c12 <_printf_i+0x1f2>
 8009c0e:	1b40      	subs	r0, r0, r5
 8009c10:	6060      	str	r0, [r4, #4]
 8009c12:	6863      	ldr	r3, [r4, #4]
 8009c14:	6123      	str	r3, [r4, #16]
 8009c16:	2300      	movs	r3, #0
 8009c18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c1c:	e7a8      	b.n	8009b70 <_printf_i+0x150>
 8009c1e:	6923      	ldr	r3, [r4, #16]
 8009c20:	462a      	mov	r2, r5
 8009c22:	4649      	mov	r1, r9
 8009c24:	4640      	mov	r0, r8
 8009c26:	47d0      	blx	sl
 8009c28:	3001      	adds	r0, #1
 8009c2a:	d0ab      	beq.n	8009b84 <_printf_i+0x164>
 8009c2c:	6823      	ldr	r3, [r4, #0]
 8009c2e:	079b      	lsls	r3, r3, #30
 8009c30:	d413      	bmi.n	8009c5a <_printf_i+0x23a>
 8009c32:	68e0      	ldr	r0, [r4, #12]
 8009c34:	9b03      	ldr	r3, [sp, #12]
 8009c36:	4298      	cmp	r0, r3
 8009c38:	bfb8      	it	lt
 8009c3a:	4618      	movlt	r0, r3
 8009c3c:	e7a4      	b.n	8009b88 <_printf_i+0x168>
 8009c3e:	2301      	movs	r3, #1
 8009c40:	4632      	mov	r2, r6
 8009c42:	4649      	mov	r1, r9
 8009c44:	4640      	mov	r0, r8
 8009c46:	47d0      	blx	sl
 8009c48:	3001      	adds	r0, #1
 8009c4a:	d09b      	beq.n	8009b84 <_printf_i+0x164>
 8009c4c:	3501      	adds	r5, #1
 8009c4e:	68e3      	ldr	r3, [r4, #12]
 8009c50:	9903      	ldr	r1, [sp, #12]
 8009c52:	1a5b      	subs	r3, r3, r1
 8009c54:	42ab      	cmp	r3, r5
 8009c56:	dcf2      	bgt.n	8009c3e <_printf_i+0x21e>
 8009c58:	e7eb      	b.n	8009c32 <_printf_i+0x212>
 8009c5a:	2500      	movs	r5, #0
 8009c5c:	f104 0619 	add.w	r6, r4, #25
 8009c60:	e7f5      	b.n	8009c4e <_printf_i+0x22e>
 8009c62:	bf00      	nop
 8009c64:	0800c0ee 	.word	0x0800c0ee
 8009c68:	0800c0ff 	.word	0x0800c0ff

08009c6c <iprintf>:
 8009c6c:	b40f      	push	{r0, r1, r2, r3}
 8009c6e:	4b0a      	ldr	r3, [pc, #40]	; (8009c98 <iprintf+0x2c>)
 8009c70:	b513      	push	{r0, r1, r4, lr}
 8009c72:	681c      	ldr	r4, [r3, #0]
 8009c74:	b124      	cbz	r4, 8009c80 <iprintf+0x14>
 8009c76:	69a3      	ldr	r3, [r4, #24]
 8009c78:	b913      	cbnz	r3, 8009c80 <iprintf+0x14>
 8009c7a:	4620      	mov	r0, r4
 8009c7c:	f001 f864 	bl	800ad48 <__sinit>
 8009c80:	ab05      	add	r3, sp, #20
 8009c82:	9a04      	ldr	r2, [sp, #16]
 8009c84:	68a1      	ldr	r1, [r4, #8]
 8009c86:	9301      	str	r3, [sp, #4]
 8009c88:	4620      	mov	r0, r4
 8009c8a:	f001 fe13 	bl	800b8b4 <_vfiprintf_r>
 8009c8e:	b002      	add	sp, #8
 8009c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c94:	b004      	add	sp, #16
 8009c96:	4770      	bx	lr
 8009c98:	20000024 	.word	0x20000024

08009c9c <__swbuf_r>:
 8009c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c9e:	460e      	mov	r6, r1
 8009ca0:	4614      	mov	r4, r2
 8009ca2:	4605      	mov	r5, r0
 8009ca4:	b118      	cbz	r0, 8009cae <__swbuf_r+0x12>
 8009ca6:	6983      	ldr	r3, [r0, #24]
 8009ca8:	b90b      	cbnz	r3, 8009cae <__swbuf_r+0x12>
 8009caa:	f001 f84d 	bl	800ad48 <__sinit>
 8009cae:	4b21      	ldr	r3, [pc, #132]	; (8009d34 <__swbuf_r+0x98>)
 8009cb0:	429c      	cmp	r4, r3
 8009cb2:	d12b      	bne.n	8009d0c <__swbuf_r+0x70>
 8009cb4:	686c      	ldr	r4, [r5, #4]
 8009cb6:	69a3      	ldr	r3, [r4, #24]
 8009cb8:	60a3      	str	r3, [r4, #8]
 8009cba:	89a3      	ldrh	r3, [r4, #12]
 8009cbc:	071a      	lsls	r2, r3, #28
 8009cbe:	d52f      	bpl.n	8009d20 <__swbuf_r+0x84>
 8009cc0:	6923      	ldr	r3, [r4, #16]
 8009cc2:	b36b      	cbz	r3, 8009d20 <__swbuf_r+0x84>
 8009cc4:	6923      	ldr	r3, [r4, #16]
 8009cc6:	6820      	ldr	r0, [r4, #0]
 8009cc8:	1ac0      	subs	r0, r0, r3
 8009cca:	6963      	ldr	r3, [r4, #20]
 8009ccc:	b2f6      	uxtb	r6, r6
 8009cce:	4283      	cmp	r3, r0
 8009cd0:	4637      	mov	r7, r6
 8009cd2:	dc04      	bgt.n	8009cde <__swbuf_r+0x42>
 8009cd4:	4621      	mov	r1, r4
 8009cd6:	4628      	mov	r0, r5
 8009cd8:	f000 ffa2 	bl	800ac20 <_fflush_r>
 8009cdc:	bb30      	cbnz	r0, 8009d2c <__swbuf_r+0x90>
 8009cde:	68a3      	ldr	r3, [r4, #8]
 8009ce0:	3b01      	subs	r3, #1
 8009ce2:	60a3      	str	r3, [r4, #8]
 8009ce4:	6823      	ldr	r3, [r4, #0]
 8009ce6:	1c5a      	adds	r2, r3, #1
 8009ce8:	6022      	str	r2, [r4, #0]
 8009cea:	701e      	strb	r6, [r3, #0]
 8009cec:	6963      	ldr	r3, [r4, #20]
 8009cee:	3001      	adds	r0, #1
 8009cf0:	4283      	cmp	r3, r0
 8009cf2:	d004      	beq.n	8009cfe <__swbuf_r+0x62>
 8009cf4:	89a3      	ldrh	r3, [r4, #12]
 8009cf6:	07db      	lsls	r3, r3, #31
 8009cf8:	d506      	bpl.n	8009d08 <__swbuf_r+0x6c>
 8009cfa:	2e0a      	cmp	r6, #10
 8009cfc:	d104      	bne.n	8009d08 <__swbuf_r+0x6c>
 8009cfe:	4621      	mov	r1, r4
 8009d00:	4628      	mov	r0, r5
 8009d02:	f000 ff8d 	bl	800ac20 <_fflush_r>
 8009d06:	b988      	cbnz	r0, 8009d2c <__swbuf_r+0x90>
 8009d08:	4638      	mov	r0, r7
 8009d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d0c:	4b0a      	ldr	r3, [pc, #40]	; (8009d38 <__swbuf_r+0x9c>)
 8009d0e:	429c      	cmp	r4, r3
 8009d10:	d101      	bne.n	8009d16 <__swbuf_r+0x7a>
 8009d12:	68ac      	ldr	r4, [r5, #8]
 8009d14:	e7cf      	b.n	8009cb6 <__swbuf_r+0x1a>
 8009d16:	4b09      	ldr	r3, [pc, #36]	; (8009d3c <__swbuf_r+0xa0>)
 8009d18:	429c      	cmp	r4, r3
 8009d1a:	bf08      	it	eq
 8009d1c:	68ec      	ldreq	r4, [r5, #12]
 8009d1e:	e7ca      	b.n	8009cb6 <__swbuf_r+0x1a>
 8009d20:	4621      	mov	r1, r4
 8009d22:	4628      	mov	r0, r5
 8009d24:	f000 f80c 	bl	8009d40 <__swsetup_r>
 8009d28:	2800      	cmp	r0, #0
 8009d2a:	d0cb      	beq.n	8009cc4 <__swbuf_r+0x28>
 8009d2c:	f04f 37ff 	mov.w	r7, #4294967295
 8009d30:	e7ea      	b.n	8009d08 <__swbuf_r+0x6c>
 8009d32:	bf00      	nop
 8009d34:	0800c1c0 	.word	0x0800c1c0
 8009d38:	0800c1e0 	.word	0x0800c1e0
 8009d3c:	0800c1a0 	.word	0x0800c1a0

08009d40 <__swsetup_r>:
 8009d40:	4b32      	ldr	r3, [pc, #200]	; (8009e0c <__swsetup_r+0xcc>)
 8009d42:	b570      	push	{r4, r5, r6, lr}
 8009d44:	681d      	ldr	r5, [r3, #0]
 8009d46:	4606      	mov	r6, r0
 8009d48:	460c      	mov	r4, r1
 8009d4a:	b125      	cbz	r5, 8009d56 <__swsetup_r+0x16>
 8009d4c:	69ab      	ldr	r3, [r5, #24]
 8009d4e:	b913      	cbnz	r3, 8009d56 <__swsetup_r+0x16>
 8009d50:	4628      	mov	r0, r5
 8009d52:	f000 fff9 	bl	800ad48 <__sinit>
 8009d56:	4b2e      	ldr	r3, [pc, #184]	; (8009e10 <__swsetup_r+0xd0>)
 8009d58:	429c      	cmp	r4, r3
 8009d5a:	d10f      	bne.n	8009d7c <__swsetup_r+0x3c>
 8009d5c:	686c      	ldr	r4, [r5, #4]
 8009d5e:	89a3      	ldrh	r3, [r4, #12]
 8009d60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d64:	0719      	lsls	r1, r3, #28
 8009d66:	d42c      	bmi.n	8009dc2 <__swsetup_r+0x82>
 8009d68:	06dd      	lsls	r5, r3, #27
 8009d6a:	d411      	bmi.n	8009d90 <__swsetup_r+0x50>
 8009d6c:	2309      	movs	r3, #9
 8009d6e:	6033      	str	r3, [r6, #0]
 8009d70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d74:	81a3      	strh	r3, [r4, #12]
 8009d76:	f04f 30ff 	mov.w	r0, #4294967295
 8009d7a:	e03e      	b.n	8009dfa <__swsetup_r+0xba>
 8009d7c:	4b25      	ldr	r3, [pc, #148]	; (8009e14 <__swsetup_r+0xd4>)
 8009d7e:	429c      	cmp	r4, r3
 8009d80:	d101      	bne.n	8009d86 <__swsetup_r+0x46>
 8009d82:	68ac      	ldr	r4, [r5, #8]
 8009d84:	e7eb      	b.n	8009d5e <__swsetup_r+0x1e>
 8009d86:	4b24      	ldr	r3, [pc, #144]	; (8009e18 <__swsetup_r+0xd8>)
 8009d88:	429c      	cmp	r4, r3
 8009d8a:	bf08      	it	eq
 8009d8c:	68ec      	ldreq	r4, [r5, #12]
 8009d8e:	e7e6      	b.n	8009d5e <__swsetup_r+0x1e>
 8009d90:	0758      	lsls	r0, r3, #29
 8009d92:	d512      	bpl.n	8009dba <__swsetup_r+0x7a>
 8009d94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d96:	b141      	cbz	r1, 8009daa <__swsetup_r+0x6a>
 8009d98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d9c:	4299      	cmp	r1, r3
 8009d9e:	d002      	beq.n	8009da6 <__swsetup_r+0x66>
 8009da0:	4630      	mov	r0, r6
 8009da2:	f001 fc7d 	bl	800b6a0 <_free_r>
 8009da6:	2300      	movs	r3, #0
 8009da8:	6363      	str	r3, [r4, #52]	; 0x34
 8009daa:	89a3      	ldrh	r3, [r4, #12]
 8009dac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009db0:	81a3      	strh	r3, [r4, #12]
 8009db2:	2300      	movs	r3, #0
 8009db4:	6063      	str	r3, [r4, #4]
 8009db6:	6923      	ldr	r3, [r4, #16]
 8009db8:	6023      	str	r3, [r4, #0]
 8009dba:	89a3      	ldrh	r3, [r4, #12]
 8009dbc:	f043 0308 	orr.w	r3, r3, #8
 8009dc0:	81a3      	strh	r3, [r4, #12]
 8009dc2:	6923      	ldr	r3, [r4, #16]
 8009dc4:	b94b      	cbnz	r3, 8009dda <__swsetup_r+0x9a>
 8009dc6:	89a3      	ldrh	r3, [r4, #12]
 8009dc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009dcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009dd0:	d003      	beq.n	8009dda <__swsetup_r+0x9a>
 8009dd2:	4621      	mov	r1, r4
 8009dd4:	4630      	mov	r0, r6
 8009dd6:	f001 f881 	bl	800aedc <__smakebuf_r>
 8009dda:	89a0      	ldrh	r0, [r4, #12]
 8009ddc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009de0:	f010 0301 	ands.w	r3, r0, #1
 8009de4:	d00a      	beq.n	8009dfc <__swsetup_r+0xbc>
 8009de6:	2300      	movs	r3, #0
 8009de8:	60a3      	str	r3, [r4, #8]
 8009dea:	6963      	ldr	r3, [r4, #20]
 8009dec:	425b      	negs	r3, r3
 8009dee:	61a3      	str	r3, [r4, #24]
 8009df0:	6923      	ldr	r3, [r4, #16]
 8009df2:	b943      	cbnz	r3, 8009e06 <__swsetup_r+0xc6>
 8009df4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009df8:	d1ba      	bne.n	8009d70 <__swsetup_r+0x30>
 8009dfa:	bd70      	pop	{r4, r5, r6, pc}
 8009dfc:	0781      	lsls	r1, r0, #30
 8009dfe:	bf58      	it	pl
 8009e00:	6963      	ldrpl	r3, [r4, #20]
 8009e02:	60a3      	str	r3, [r4, #8]
 8009e04:	e7f4      	b.n	8009df0 <__swsetup_r+0xb0>
 8009e06:	2000      	movs	r0, #0
 8009e08:	e7f7      	b.n	8009dfa <__swsetup_r+0xba>
 8009e0a:	bf00      	nop
 8009e0c:	20000024 	.word	0x20000024
 8009e10:	0800c1c0 	.word	0x0800c1c0
 8009e14:	0800c1e0 	.word	0x0800c1e0
 8009e18:	0800c1a0 	.word	0x0800c1a0

08009e1c <quorem>:
 8009e1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e20:	6903      	ldr	r3, [r0, #16]
 8009e22:	690c      	ldr	r4, [r1, #16]
 8009e24:	42a3      	cmp	r3, r4
 8009e26:	4607      	mov	r7, r0
 8009e28:	f2c0 8081 	blt.w	8009f2e <quorem+0x112>
 8009e2c:	3c01      	subs	r4, #1
 8009e2e:	f101 0814 	add.w	r8, r1, #20
 8009e32:	f100 0514 	add.w	r5, r0, #20
 8009e36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e3a:	9301      	str	r3, [sp, #4]
 8009e3c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009e40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e44:	3301      	adds	r3, #1
 8009e46:	429a      	cmp	r2, r3
 8009e48:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009e4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009e50:	fbb2 f6f3 	udiv	r6, r2, r3
 8009e54:	d331      	bcc.n	8009eba <quorem+0x9e>
 8009e56:	f04f 0e00 	mov.w	lr, #0
 8009e5a:	4640      	mov	r0, r8
 8009e5c:	46ac      	mov	ip, r5
 8009e5e:	46f2      	mov	sl, lr
 8009e60:	f850 2b04 	ldr.w	r2, [r0], #4
 8009e64:	b293      	uxth	r3, r2
 8009e66:	fb06 e303 	mla	r3, r6, r3, lr
 8009e6a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009e6e:	b29b      	uxth	r3, r3
 8009e70:	ebaa 0303 	sub.w	r3, sl, r3
 8009e74:	f8dc a000 	ldr.w	sl, [ip]
 8009e78:	0c12      	lsrs	r2, r2, #16
 8009e7a:	fa13 f38a 	uxtah	r3, r3, sl
 8009e7e:	fb06 e202 	mla	r2, r6, r2, lr
 8009e82:	9300      	str	r3, [sp, #0]
 8009e84:	9b00      	ldr	r3, [sp, #0]
 8009e86:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009e8a:	b292      	uxth	r2, r2
 8009e8c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009e90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e94:	f8bd 3000 	ldrh.w	r3, [sp]
 8009e98:	4581      	cmp	r9, r0
 8009e9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e9e:	f84c 3b04 	str.w	r3, [ip], #4
 8009ea2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009ea6:	d2db      	bcs.n	8009e60 <quorem+0x44>
 8009ea8:	f855 300b 	ldr.w	r3, [r5, fp]
 8009eac:	b92b      	cbnz	r3, 8009eba <quorem+0x9e>
 8009eae:	9b01      	ldr	r3, [sp, #4]
 8009eb0:	3b04      	subs	r3, #4
 8009eb2:	429d      	cmp	r5, r3
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	d32e      	bcc.n	8009f16 <quorem+0xfa>
 8009eb8:	613c      	str	r4, [r7, #16]
 8009eba:	4638      	mov	r0, r7
 8009ebc:	f001 fad8 	bl	800b470 <__mcmp>
 8009ec0:	2800      	cmp	r0, #0
 8009ec2:	db24      	blt.n	8009f0e <quorem+0xf2>
 8009ec4:	3601      	adds	r6, #1
 8009ec6:	4628      	mov	r0, r5
 8009ec8:	f04f 0c00 	mov.w	ip, #0
 8009ecc:	f858 2b04 	ldr.w	r2, [r8], #4
 8009ed0:	f8d0 e000 	ldr.w	lr, [r0]
 8009ed4:	b293      	uxth	r3, r2
 8009ed6:	ebac 0303 	sub.w	r3, ip, r3
 8009eda:	0c12      	lsrs	r2, r2, #16
 8009edc:	fa13 f38e 	uxtah	r3, r3, lr
 8009ee0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009ee4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009eee:	45c1      	cmp	r9, r8
 8009ef0:	f840 3b04 	str.w	r3, [r0], #4
 8009ef4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009ef8:	d2e8      	bcs.n	8009ecc <quorem+0xb0>
 8009efa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009efe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f02:	b922      	cbnz	r2, 8009f0e <quorem+0xf2>
 8009f04:	3b04      	subs	r3, #4
 8009f06:	429d      	cmp	r5, r3
 8009f08:	461a      	mov	r2, r3
 8009f0a:	d30a      	bcc.n	8009f22 <quorem+0x106>
 8009f0c:	613c      	str	r4, [r7, #16]
 8009f0e:	4630      	mov	r0, r6
 8009f10:	b003      	add	sp, #12
 8009f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f16:	6812      	ldr	r2, [r2, #0]
 8009f18:	3b04      	subs	r3, #4
 8009f1a:	2a00      	cmp	r2, #0
 8009f1c:	d1cc      	bne.n	8009eb8 <quorem+0x9c>
 8009f1e:	3c01      	subs	r4, #1
 8009f20:	e7c7      	b.n	8009eb2 <quorem+0x96>
 8009f22:	6812      	ldr	r2, [r2, #0]
 8009f24:	3b04      	subs	r3, #4
 8009f26:	2a00      	cmp	r2, #0
 8009f28:	d1f0      	bne.n	8009f0c <quorem+0xf0>
 8009f2a:	3c01      	subs	r4, #1
 8009f2c:	e7eb      	b.n	8009f06 <quorem+0xea>
 8009f2e:	2000      	movs	r0, #0
 8009f30:	e7ee      	b.n	8009f10 <quorem+0xf4>
 8009f32:	0000      	movs	r0, r0
 8009f34:	0000      	movs	r0, r0
	...

08009f38 <_dtoa_r>:
 8009f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f3c:	ed2d 8b04 	vpush	{d8-d9}
 8009f40:	ec57 6b10 	vmov	r6, r7, d0
 8009f44:	b093      	sub	sp, #76	; 0x4c
 8009f46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009f48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009f4c:	9106      	str	r1, [sp, #24]
 8009f4e:	ee10 aa10 	vmov	sl, s0
 8009f52:	4604      	mov	r4, r0
 8009f54:	9209      	str	r2, [sp, #36]	; 0x24
 8009f56:	930c      	str	r3, [sp, #48]	; 0x30
 8009f58:	46bb      	mov	fp, r7
 8009f5a:	b975      	cbnz	r5, 8009f7a <_dtoa_r+0x42>
 8009f5c:	2010      	movs	r0, #16
 8009f5e:	f000 fffd 	bl	800af5c <malloc>
 8009f62:	4602      	mov	r2, r0
 8009f64:	6260      	str	r0, [r4, #36]	; 0x24
 8009f66:	b920      	cbnz	r0, 8009f72 <_dtoa_r+0x3a>
 8009f68:	4ba7      	ldr	r3, [pc, #668]	; (800a208 <_dtoa_r+0x2d0>)
 8009f6a:	21ea      	movs	r1, #234	; 0xea
 8009f6c:	48a7      	ldr	r0, [pc, #668]	; (800a20c <_dtoa_r+0x2d4>)
 8009f6e:	f001 fe37 	bl	800bbe0 <__assert_func>
 8009f72:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009f76:	6005      	str	r5, [r0, #0]
 8009f78:	60c5      	str	r5, [r0, #12]
 8009f7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f7c:	6819      	ldr	r1, [r3, #0]
 8009f7e:	b151      	cbz	r1, 8009f96 <_dtoa_r+0x5e>
 8009f80:	685a      	ldr	r2, [r3, #4]
 8009f82:	604a      	str	r2, [r1, #4]
 8009f84:	2301      	movs	r3, #1
 8009f86:	4093      	lsls	r3, r2
 8009f88:	608b      	str	r3, [r1, #8]
 8009f8a:	4620      	mov	r0, r4
 8009f8c:	f001 f82e 	bl	800afec <_Bfree>
 8009f90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f92:	2200      	movs	r2, #0
 8009f94:	601a      	str	r2, [r3, #0]
 8009f96:	1e3b      	subs	r3, r7, #0
 8009f98:	bfaa      	itet	ge
 8009f9a:	2300      	movge	r3, #0
 8009f9c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009fa0:	f8c8 3000 	strge.w	r3, [r8]
 8009fa4:	4b9a      	ldr	r3, [pc, #616]	; (800a210 <_dtoa_r+0x2d8>)
 8009fa6:	bfbc      	itt	lt
 8009fa8:	2201      	movlt	r2, #1
 8009faa:	f8c8 2000 	strlt.w	r2, [r8]
 8009fae:	ea33 030b 	bics.w	r3, r3, fp
 8009fb2:	d11b      	bne.n	8009fec <_dtoa_r+0xb4>
 8009fb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009fb6:	f242 730f 	movw	r3, #9999	; 0x270f
 8009fba:	6013      	str	r3, [r2, #0]
 8009fbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009fc0:	4333      	orrs	r3, r6
 8009fc2:	f000 8592 	beq.w	800aaea <_dtoa_r+0xbb2>
 8009fc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009fc8:	b963      	cbnz	r3, 8009fe4 <_dtoa_r+0xac>
 8009fca:	4b92      	ldr	r3, [pc, #584]	; (800a214 <_dtoa_r+0x2dc>)
 8009fcc:	e022      	b.n	800a014 <_dtoa_r+0xdc>
 8009fce:	4b92      	ldr	r3, [pc, #584]	; (800a218 <_dtoa_r+0x2e0>)
 8009fd0:	9301      	str	r3, [sp, #4]
 8009fd2:	3308      	adds	r3, #8
 8009fd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009fd6:	6013      	str	r3, [r2, #0]
 8009fd8:	9801      	ldr	r0, [sp, #4]
 8009fda:	b013      	add	sp, #76	; 0x4c
 8009fdc:	ecbd 8b04 	vpop	{d8-d9}
 8009fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fe4:	4b8b      	ldr	r3, [pc, #556]	; (800a214 <_dtoa_r+0x2dc>)
 8009fe6:	9301      	str	r3, [sp, #4]
 8009fe8:	3303      	adds	r3, #3
 8009fea:	e7f3      	b.n	8009fd4 <_dtoa_r+0x9c>
 8009fec:	2200      	movs	r2, #0
 8009fee:	2300      	movs	r3, #0
 8009ff0:	4650      	mov	r0, sl
 8009ff2:	4659      	mov	r1, fp
 8009ff4:	f7f6 fd40 	bl	8000a78 <__aeabi_dcmpeq>
 8009ff8:	ec4b ab19 	vmov	d9, sl, fp
 8009ffc:	4680      	mov	r8, r0
 8009ffe:	b158      	cbz	r0, 800a018 <_dtoa_r+0xe0>
 800a000:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a002:	2301      	movs	r3, #1
 800a004:	6013      	str	r3, [r2, #0]
 800a006:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a008:	2b00      	cmp	r3, #0
 800a00a:	f000 856b 	beq.w	800aae4 <_dtoa_r+0xbac>
 800a00e:	4883      	ldr	r0, [pc, #524]	; (800a21c <_dtoa_r+0x2e4>)
 800a010:	6018      	str	r0, [r3, #0]
 800a012:	1e43      	subs	r3, r0, #1
 800a014:	9301      	str	r3, [sp, #4]
 800a016:	e7df      	b.n	8009fd8 <_dtoa_r+0xa0>
 800a018:	ec4b ab10 	vmov	d0, sl, fp
 800a01c:	aa10      	add	r2, sp, #64	; 0x40
 800a01e:	a911      	add	r1, sp, #68	; 0x44
 800a020:	4620      	mov	r0, r4
 800a022:	f001 facb 	bl	800b5bc <__d2b>
 800a026:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a02a:	ee08 0a10 	vmov	s16, r0
 800a02e:	2d00      	cmp	r5, #0
 800a030:	f000 8084 	beq.w	800a13c <_dtoa_r+0x204>
 800a034:	ee19 3a90 	vmov	r3, s19
 800a038:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a03c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a040:	4656      	mov	r6, sl
 800a042:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a046:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a04a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a04e:	4b74      	ldr	r3, [pc, #464]	; (800a220 <_dtoa_r+0x2e8>)
 800a050:	2200      	movs	r2, #0
 800a052:	4630      	mov	r0, r6
 800a054:	4639      	mov	r1, r7
 800a056:	f7f6 f8ef 	bl	8000238 <__aeabi_dsub>
 800a05a:	a365      	add	r3, pc, #404	; (adr r3, 800a1f0 <_dtoa_r+0x2b8>)
 800a05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a060:	f7f6 faa2 	bl	80005a8 <__aeabi_dmul>
 800a064:	a364      	add	r3, pc, #400	; (adr r3, 800a1f8 <_dtoa_r+0x2c0>)
 800a066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a06a:	f7f6 f8e7 	bl	800023c <__adddf3>
 800a06e:	4606      	mov	r6, r0
 800a070:	4628      	mov	r0, r5
 800a072:	460f      	mov	r7, r1
 800a074:	f7f6 fa2e 	bl	80004d4 <__aeabi_i2d>
 800a078:	a361      	add	r3, pc, #388	; (adr r3, 800a200 <_dtoa_r+0x2c8>)
 800a07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a07e:	f7f6 fa93 	bl	80005a8 <__aeabi_dmul>
 800a082:	4602      	mov	r2, r0
 800a084:	460b      	mov	r3, r1
 800a086:	4630      	mov	r0, r6
 800a088:	4639      	mov	r1, r7
 800a08a:	f7f6 f8d7 	bl	800023c <__adddf3>
 800a08e:	4606      	mov	r6, r0
 800a090:	460f      	mov	r7, r1
 800a092:	f7f6 fd39 	bl	8000b08 <__aeabi_d2iz>
 800a096:	2200      	movs	r2, #0
 800a098:	9000      	str	r0, [sp, #0]
 800a09a:	2300      	movs	r3, #0
 800a09c:	4630      	mov	r0, r6
 800a09e:	4639      	mov	r1, r7
 800a0a0:	f7f6 fcf4 	bl	8000a8c <__aeabi_dcmplt>
 800a0a4:	b150      	cbz	r0, 800a0bc <_dtoa_r+0x184>
 800a0a6:	9800      	ldr	r0, [sp, #0]
 800a0a8:	f7f6 fa14 	bl	80004d4 <__aeabi_i2d>
 800a0ac:	4632      	mov	r2, r6
 800a0ae:	463b      	mov	r3, r7
 800a0b0:	f7f6 fce2 	bl	8000a78 <__aeabi_dcmpeq>
 800a0b4:	b910      	cbnz	r0, 800a0bc <_dtoa_r+0x184>
 800a0b6:	9b00      	ldr	r3, [sp, #0]
 800a0b8:	3b01      	subs	r3, #1
 800a0ba:	9300      	str	r3, [sp, #0]
 800a0bc:	9b00      	ldr	r3, [sp, #0]
 800a0be:	2b16      	cmp	r3, #22
 800a0c0:	d85a      	bhi.n	800a178 <_dtoa_r+0x240>
 800a0c2:	9a00      	ldr	r2, [sp, #0]
 800a0c4:	4b57      	ldr	r3, [pc, #348]	; (800a224 <_dtoa_r+0x2ec>)
 800a0c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ce:	ec51 0b19 	vmov	r0, r1, d9
 800a0d2:	f7f6 fcdb 	bl	8000a8c <__aeabi_dcmplt>
 800a0d6:	2800      	cmp	r0, #0
 800a0d8:	d050      	beq.n	800a17c <_dtoa_r+0x244>
 800a0da:	9b00      	ldr	r3, [sp, #0]
 800a0dc:	3b01      	subs	r3, #1
 800a0de:	9300      	str	r3, [sp, #0]
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a0e6:	1b5d      	subs	r5, r3, r5
 800a0e8:	1e6b      	subs	r3, r5, #1
 800a0ea:	9305      	str	r3, [sp, #20]
 800a0ec:	bf45      	ittet	mi
 800a0ee:	f1c5 0301 	rsbmi	r3, r5, #1
 800a0f2:	9304      	strmi	r3, [sp, #16]
 800a0f4:	2300      	movpl	r3, #0
 800a0f6:	2300      	movmi	r3, #0
 800a0f8:	bf4c      	ite	mi
 800a0fa:	9305      	strmi	r3, [sp, #20]
 800a0fc:	9304      	strpl	r3, [sp, #16]
 800a0fe:	9b00      	ldr	r3, [sp, #0]
 800a100:	2b00      	cmp	r3, #0
 800a102:	db3d      	blt.n	800a180 <_dtoa_r+0x248>
 800a104:	9b05      	ldr	r3, [sp, #20]
 800a106:	9a00      	ldr	r2, [sp, #0]
 800a108:	920a      	str	r2, [sp, #40]	; 0x28
 800a10a:	4413      	add	r3, r2
 800a10c:	9305      	str	r3, [sp, #20]
 800a10e:	2300      	movs	r3, #0
 800a110:	9307      	str	r3, [sp, #28]
 800a112:	9b06      	ldr	r3, [sp, #24]
 800a114:	2b09      	cmp	r3, #9
 800a116:	f200 8089 	bhi.w	800a22c <_dtoa_r+0x2f4>
 800a11a:	2b05      	cmp	r3, #5
 800a11c:	bfc4      	itt	gt
 800a11e:	3b04      	subgt	r3, #4
 800a120:	9306      	strgt	r3, [sp, #24]
 800a122:	9b06      	ldr	r3, [sp, #24]
 800a124:	f1a3 0302 	sub.w	r3, r3, #2
 800a128:	bfcc      	ite	gt
 800a12a:	2500      	movgt	r5, #0
 800a12c:	2501      	movle	r5, #1
 800a12e:	2b03      	cmp	r3, #3
 800a130:	f200 8087 	bhi.w	800a242 <_dtoa_r+0x30a>
 800a134:	e8df f003 	tbb	[pc, r3]
 800a138:	59383a2d 	.word	0x59383a2d
 800a13c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a140:	441d      	add	r5, r3
 800a142:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a146:	2b20      	cmp	r3, #32
 800a148:	bfc1      	itttt	gt
 800a14a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a14e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a152:	fa0b f303 	lslgt.w	r3, fp, r3
 800a156:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a15a:	bfda      	itte	le
 800a15c:	f1c3 0320 	rsble	r3, r3, #32
 800a160:	fa06 f003 	lslle.w	r0, r6, r3
 800a164:	4318      	orrgt	r0, r3
 800a166:	f7f6 f9a5 	bl	80004b4 <__aeabi_ui2d>
 800a16a:	2301      	movs	r3, #1
 800a16c:	4606      	mov	r6, r0
 800a16e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a172:	3d01      	subs	r5, #1
 800a174:	930e      	str	r3, [sp, #56]	; 0x38
 800a176:	e76a      	b.n	800a04e <_dtoa_r+0x116>
 800a178:	2301      	movs	r3, #1
 800a17a:	e7b2      	b.n	800a0e2 <_dtoa_r+0x1aa>
 800a17c:	900b      	str	r0, [sp, #44]	; 0x2c
 800a17e:	e7b1      	b.n	800a0e4 <_dtoa_r+0x1ac>
 800a180:	9b04      	ldr	r3, [sp, #16]
 800a182:	9a00      	ldr	r2, [sp, #0]
 800a184:	1a9b      	subs	r3, r3, r2
 800a186:	9304      	str	r3, [sp, #16]
 800a188:	4253      	negs	r3, r2
 800a18a:	9307      	str	r3, [sp, #28]
 800a18c:	2300      	movs	r3, #0
 800a18e:	930a      	str	r3, [sp, #40]	; 0x28
 800a190:	e7bf      	b.n	800a112 <_dtoa_r+0x1da>
 800a192:	2300      	movs	r3, #0
 800a194:	9308      	str	r3, [sp, #32]
 800a196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a198:	2b00      	cmp	r3, #0
 800a19a:	dc55      	bgt.n	800a248 <_dtoa_r+0x310>
 800a19c:	2301      	movs	r3, #1
 800a19e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	9209      	str	r2, [sp, #36]	; 0x24
 800a1a6:	e00c      	b.n	800a1c2 <_dtoa_r+0x28a>
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	e7f3      	b.n	800a194 <_dtoa_r+0x25c>
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1b0:	9308      	str	r3, [sp, #32]
 800a1b2:	9b00      	ldr	r3, [sp, #0]
 800a1b4:	4413      	add	r3, r2
 800a1b6:	9302      	str	r3, [sp, #8]
 800a1b8:	3301      	adds	r3, #1
 800a1ba:	2b01      	cmp	r3, #1
 800a1bc:	9303      	str	r3, [sp, #12]
 800a1be:	bfb8      	it	lt
 800a1c0:	2301      	movlt	r3, #1
 800a1c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	6042      	str	r2, [r0, #4]
 800a1c8:	2204      	movs	r2, #4
 800a1ca:	f102 0614 	add.w	r6, r2, #20
 800a1ce:	429e      	cmp	r6, r3
 800a1d0:	6841      	ldr	r1, [r0, #4]
 800a1d2:	d93d      	bls.n	800a250 <_dtoa_r+0x318>
 800a1d4:	4620      	mov	r0, r4
 800a1d6:	f000 fec9 	bl	800af6c <_Balloc>
 800a1da:	9001      	str	r0, [sp, #4]
 800a1dc:	2800      	cmp	r0, #0
 800a1de:	d13b      	bne.n	800a258 <_dtoa_r+0x320>
 800a1e0:	4b11      	ldr	r3, [pc, #68]	; (800a228 <_dtoa_r+0x2f0>)
 800a1e2:	4602      	mov	r2, r0
 800a1e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a1e8:	e6c0      	b.n	8009f6c <_dtoa_r+0x34>
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	e7df      	b.n	800a1ae <_dtoa_r+0x276>
 800a1ee:	bf00      	nop
 800a1f0:	636f4361 	.word	0x636f4361
 800a1f4:	3fd287a7 	.word	0x3fd287a7
 800a1f8:	8b60c8b3 	.word	0x8b60c8b3
 800a1fc:	3fc68a28 	.word	0x3fc68a28
 800a200:	509f79fb 	.word	0x509f79fb
 800a204:	3fd34413 	.word	0x3fd34413
 800a208:	0800c11d 	.word	0x0800c11d
 800a20c:	0800c134 	.word	0x0800c134
 800a210:	7ff00000 	.word	0x7ff00000
 800a214:	0800c119 	.word	0x0800c119
 800a218:	0800c110 	.word	0x0800c110
 800a21c:	0800c0ed 	.word	0x0800c0ed
 800a220:	3ff80000 	.word	0x3ff80000
 800a224:	0800c288 	.word	0x0800c288
 800a228:	0800c18f 	.word	0x0800c18f
 800a22c:	2501      	movs	r5, #1
 800a22e:	2300      	movs	r3, #0
 800a230:	9306      	str	r3, [sp, #24]
 800a232:	9508      	str	r5, [sp, #32]
 800a234:	f04f 33ff 	mov.w	r3, #4294967295
 800a238:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a23c:	2200      	movs	r2, #0
 800a23e:	2312      	movs	r3, #18
 800a240:	e7b0      	b.n	800a1a4 <_dtoa_r+0x26c>
 800a242:	2301      	movs	r3, #1
 800a244:	9308      	str	r3, [sp, #32]
 800a246:	e7f5      	b.n	800a234 <_dtoa_r+0x2fc>
 800a248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a24a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a24e:	e7b8      	b.n	800a1c2 <_dtoa_r+0x28a>
 800a250:	3101      	adds	r1, #1
 800a252:	6041      	str	r1, [r0, #4]
 800a254:	0052      	lsls	r2, r2, #1
 800a256:	e7b8      	b.n	800a1ca <_dtoa_r+0x292>
 800a258:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a25a:	9a01      	ldr	r2, [sp, #4]
 800a25c:	601a      	str	r2, [r3, #0]
 800a25e:	9b03      	ldr	r3, [sp, #12]
 800a260:	2b0e      	cmp	r3, #14
 800a262:	f200 809d 	bhi.w	800a3a0 <_dtoa_r+0x468>
 800a266:	2d00      	cmp	r5, #0
 800a268:	f000 809a 	beq.w	800a3a0 <_dtoa_r+0x468>
 800a26c:	9b00      	ldr	r3, [sp, #0]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	dd32      	ble.n	800a2d8 <_dtoa_r+0x3a0>
 800a272:	4ab7      	ldr	r2, [pc, #732]	; (800a550 <_dtoa_r+0x618>)
 800a274:	f003 030f 	and.w	r3, r3, #15
 800a278:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a27c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a280:	9b00      	ldr	r3, [sp, #0]
 800a282:	05d8      	lsls	r0, r3, #23
 800a284:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a288:	d516      	bpl.n	800a2b8 <_dtoa_r+0x380>
 800a28a:	4bb2      	ldr	r3, [pc, #712]	; (800a554 <_dtoa_r+0x61c>)
 800a28c:	ec51 0b19 	vmov	r0, r1, d9
 800a290:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a294:	f7f6 fab2 	bl	80007fc <__aeabi_ddiv>
 800a298:	f007 070f 	and.w	r7, r7, #15
 800a29c:	4682      	mov	sl, r0
 800a29e:	468b      	mov	fp, r1
 800a2a0:	2503      	movs	r5, #3
 800a2a2:	4eac      	ldr	r6, [pc, #688]	; (800a554 <_dtoa_r+0x61c>)
 800a2a4:	b957      	cbnz	r7, 800a2bc <_dtoa_r+0x384>
 800a2a6:	4642      	mov	r2, r8
 800a2a8:	464b      	mov	r3, r9
 800a2aa:	4650      	mov	r0, sl
 800a2ac:	4659      	mov	r1, fp
 800a2ae:	f7f6 faa5 	bl	80007fc <__aeabi_ddiv>
 800a2b2:	4682      	mov	sl, r0
 800a2b4:	468b      	mov	fp, r1
 800a2b6:	e028      	b.n	800a30a <_dtoa_r+0x3d2>
 800a2b8:	2502      	movs	r5, #2
 800a2ba:	e7f2      	b.n	800a2a2 <_dtoa_r+0x36a>
 800a2bc:	07f9      	lsls	r1, r7, #31
 800a2be:	d508      	bpl.n	800a2d2 <_dtoa_r+0x39a>
 800a2c0:	4640      	mov	r0, r8
 800a2c2:	4649      	mov	r1, r9
 800a2c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a2c8:	f7f6 f96e 	bl	80005a8 <__aeabi_dmul>
 800a2cc:	3501      	adds	r5, #1
 800a2ce:	4680      	mov	r8, r0
 800a2d0:	4689      	mov	r9, r1
 800a2d2:	107f      	asrs	r7, r7, #1
 800a2d4:	3608      	adds	r6, #8
 800a2d6:	e7e5      	b.n	800a2a4 <_dtoa_r+0x36c>
 800a2d8:	f000 809b 	beq.w	800a412 <_dtoa_r+0x4da>
 800a2dc:	9b00      	ldr	r3, [sp, #0]
 800a2de:	4f9d      	ldr	r7, [pc, #628]	; (800a554 <_dtoa_r+0x61c>)
 800a2e0:	425e      	negs	r6, r3
 800a2e2:	4b9b      	ldr	r3, [pc, #620]	; (800a550 <_dtoa_r+0x618>)
 800a2e4:	f006 020f 	and.w	r2, r6, #15
 800a2e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f0:	ec51 0b19 	vmov	r0, r1, d9
 800a2f4:	f7f6 f958 	bl	80005a8 <__aeabi_dmul>
 800a2f8:	1136      	asrs	r6, r6, #4
 800a2fa:	4682      	mov	sl, r0
 800a2fc:	468b      	mov	fp, r1
 800a2fe:	2300      	movs	r3, #0
 800a300:	2502      	movs	r5, #2
 800a302:	2e00      	cmp	r6, #0
 800a304:	d17a      	bne.n	800a3fc <_dtoa_r+0x4c4>
 800a306:	2b00      	cmp	r3, #0
 800a308:	d1d3      	bne.n	800a2b2 <_dtoa_r+0x37a>
 800a30a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	f000 8082 	beq.w	800a416 <_dtoa_r+0x4de>
 800a312:	4b91      	ldr	r3, [pc, #580]	; (800a558 <_dtoa_r+0x620>)
 800a314:	2200      	movs	r2, #0
 800a316:	4650      	mov	r0, sl
 800a318:	4659      	mov	r1, fp
 800a31a:	f7f6 fbb7 	bl	8000a8c <__aeabi_dcmplt>
 800a31e:	2800      	cmp	r0, #0
 800a320:	d079      	beq.n	800a416 <_dtoa_r+0x4de>
 800a322:	9b03      	ldr	r3, [sp, #12]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d076      	beq.n	800a416 <_dtoa_r+0x4de>
 800a328:	9b02      	ldr	r3, [sp, #8]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	dd36      	ble.n	800a39c <_dtoa_r+0x464>
 800a32e:	9b00      	ldr	r3, [sp, #0]
 800a330:	4650      	mov	r0, sl
 800a332:	4659      	mov	r1, fp
 800a334:	1e5f      	subs	r7, r3, #1
 800a336:	2200      	movs	r2, #0
 800a338:	4b88      	ldr	r3, [pc, #544]	; (800a55c <_dtoa_r+0x624>)
 800a33a:	f7f6 f935 	bl	80005a8 <__aeabi_dmul>
 800a33e:	9e02      	ldr	r6, [sp, #8]
 800a340:	4682      	mov	sl, r0
 800a342:	468b      	mov	fp, r1
 800a344:	3501      	adds	r5, #1
 800a346:	4628      	mov	r0, r5
 800a348:	f7f6 f8c4 	bl	80004d4 <__aeabi_i2d>
 800a34c:	4652      	mov	r2, sl
 800a34e:	465b      	mov	r3, fp
 800a350:	f7f6 f92a 	bl	80005a8 <__aeabi_dmul>
 800a354:	4b82      	ldr	r3, [pc, #520]	; (800a560 <_dtoa_r+0x628>)
 800a356:	2200      	movs	r2, #0
 800a358:	f7f5 ff70 	bl	800023c <__adddf3>
 800a35c:	46d0      	mov	r8, sl
 800a35e:	46d9      	mov	r9, fp
 800a360:	4682      	mov	sl, r0
 800a362:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a366:	2e00      	cmp	r6, #0
 800a368:	d158      	bne.n	800a41c <_dtoa_r+0x4e4>
 800a36a:	4b7e      	ldr	r3, [pc, #504]	; (800a564 <_dtoa_r+0x62c>)
 800a36c:	2200      	movs	r2, #0
 800a36e:	4640      	mov	r0, r8
 800a370:	4649      	mov	r1, r9
 800a372:	f7f5 ff61 	bl	8000238 <__aeabi_dsub>
 800a376:	4652      	mov	r2, sl
 800a378:	465b      	mov	r3, fp
 800a37a:	4680      	mov	r8, r0
 800a37c:	4689      	mov	r9, r1
 800a37e:	f7f6 fba3 	bl	8000ac8 <__aeabi_dcmpgt>
 800a382:	2800      	cmp	r0, #0
 800a384:	f040 8295 	bne.w	800a8b2 <_dtoa_r+0x97a>
 800a388:	4652      	mov	r2, sl
 800a38a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a38e:	4640      	mov	r0, r8
 800a390:	4649      	mov	r1, r9
 800a392:	f7f6 fb7b 	bl	8000a8c <__aeabi_dcmplt>
 800a396:	2800      	cmp	r0, #0
 800a398:	f040 8289 	bne.w	800a8ae <_dtoa_r+0x976>
 800a39c:	ec5b ab19 	vmov	sl, fp, d9
 800a3a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	f2c0 8148 	blt.w	800a638 <_dtoa_r+0x700>
 800a3a8:	9a00      	ldr	r2, [sp, #0]
 800a3aa:	2a0e      	cmp	r2, #14
 800a3ac:	f300 8144 	bgt.w	800a638 <_dtoa_r+0x700>
 800a3b0:	4b67      	ldr	r3, [pc, #412]	; (800a550 <_dtoa_r+0x618>)
 800a3b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a3ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	f280 80d5 	bge.w	800a56c <_dtoa_r+0x634>
 800a3c2:	9b03      	ldr	r3, [sp, #12]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	f300 80d1 	bgt.w	800a56c <_dtoa_r+0x634>
 800a3ca:	f040 826f 	bne.w	800a8ac <_dtoa_r+0x974>
 800a3ce:	4b65      	ldr	r3, [pc, #404]	; (800a564 <_dtoa_r+0x62c>)
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	4640      	mov	r0, r8
 800a3d4:	4649      	mov	r1, r9
 800a3d6:	f7f6 f8e7 	bl	80005a8 <__aeabi_dmul>
 800a3da:	4652      	mov	r2, sl
 800a3dc:	465b      	mov	r3, fp
 800a3de:	f7f6 fb69 	bl	8000ab4 <__aeabi_dcmpge>
 800a3e2:	9e03      	ldr	r6, [sp, #12]
 800a3e4:	4637      	mov	r7, r6
 800a3e6:	2800      	cmp	r0, #0
 800a3e8:	f040 8245 	bne.w	800a876 <_dtoa_r+0x93e>
 800a3ec:	9d01      	ldr	r5, [sp, #4]
 800a3ee:	2331      	movs	r3, #49	; 0x31
 800a3f0:	f805 3b01 	strb.w	r3, [r5], #1
 800a3f4:	9b00      	ldr	r3, [sp, #0]
 800a3f6:	3301      	adds	r3, #1
 800a3f8:	9300      	str	r3, [sp, #0]
 800a3fa:	e240      	b.n	800a87e <_dtoa_r+0x946>
 800a3fc:	07f2      	lsls	r2, r6, #31
 800a3fe:	d505      	bpl.n	800a40c <_dtoa_r+0x4d4>
 800a400:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a404:	f7f6 f8d0 	bl	80005a8 <__aeabi_dmul>
 800a408:	3501      	adds	r5, #1
 800a40a:	2301      	movs	r3, #1
 800a40c:	1076      	asrs	r6, r6, #1
 800a40e:	3708      	adds	r7, #8
 800a410:	e777      	b.n	800a302 <_dtoa_r+0x3ca>
 800a412:	2502      	movs	r5, #2
 800a414:	e779      	b.n	800a30a <_dtoa_r+0x3d2>
 800a416:	9f00      	ldr	r7, [sp, #0]
 800a418:	9e03      	ldr	r6, [sp, #12]
 800a41a:	e794      	b.n	800a346 <_dtoa_r+0x40e>
 800a41c:	9901      	ldr	r1, [sp, #4]
 800a41e:	4b4c      	ldr	r3, [pc, #304]	; (800a550 <_dtoa_r+0x618>)
 800a420:	4431      	add	r1, r6
 800a422:	910d      	str	r1, [sp, #52]	; 0x34
 800a424:	9908      	ldr	r1, [sp, #32]
 800a426:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a42a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a42e:	2900      	cmp	r1, #0
 800a430:	d043      	beq.n	800a4ba <_dtoa_r+0x582>
 800a432:	494d      	ldr	r1, [pc, #308]	; (800a568 <_dtoa_r+0x630>)
 800a434:	2000      	movs	r0, #0
 800a436:	f7f6 f9e1 	bl	80007fc <__aeabi_ddiv>
 800a43a:	4652      	mov	r2, sl
 800a43c:	465b      	mov	r3, fp
 800a43e:	f7f5 fefb 	bl	8000238 <__aeabi_dsub>
 800a442:	9d01      	ldr	r5, [sp, #4]
 800a444:	4682      	mov	sl, r0
 800a446:	468b      	mov	fp, r1
 800a448:	4649      	mov	r1, r9
 800a44a:	4640      	mov	r0, r8
 800a44c:	f7f6 fb5c 	bl	8000b08 <__aeabi_d2iz>
 800a450:	4606      	mov	r6, r0
 800a452:	f7f6 f83f 	bl	80004d4 <__aeabi_i2d>
 800a456:	4602      	mov	r2, r0
 800a458:	460b      	mov	r3, r1
 800a45a:	4640      	mov	r0, r8
 800a45c:	4649      	mov	r1, r9
 800a45e:	f7f5 feeb 	bl	8000238 <__aeabi_dsub>
 800a462:	3630      	adds	r6, #48	; 0x30
 800a464:	f805 6b01 	strb.w	r6, [r5], #1
 800a468:	4652      	mov	r2, sl
 800a46a:	465b      	mov	r3, fp
 800a46c:	4680      	mov	r8, r0
 800a46e:	4689      	mov	r9, r1
 800a470:	f7f6 fb0c 	bl	8000a8c <__aeabi_dcmplt>
 800a474:	2800      	cmp	r0, #0
 800a476:	d163      	bne.n	800a540 <_dtoa_r+0x608>
 800a478:	4642      	mov	r2, r8
 800a47a:	464b      	mov	r3, r9
 800a47c:	4936      	ldr	r1, [pc, #216]	; (800a558 <_dtoa_r+0x620>)
 800a47e:	2000      	movs	r0, #0
 800a480:	f7f5 feda 	bl	8000238 <__aeabi_dsub>
 800a484:	4652      	mov	r2, sl
 800a486:	465b      	mov	r3, fp
 800a488:	f7f6 fb00 	bl	8000a8c <__aeabi_dcmplt>
 800a48c:	2800      	cmp	r0, #0
 800a48e:	f040 80b5 	bne.w	800a5fc <_dtoa_r+0x6c4>
 800a492:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a494:	429d      	cmp	r5, r3
 800a496:	d081      	beq.n	800a39c <_dtoa_r+0x464>
 800a498:	4b30      	ldr	r3, [pc, #192]	; (800a55c <_dtoa_r+0x624>)
 800a49a:	2200      	movs	r2, #0
 800a49c:	4650      	mov	r0, sl
 800a49e:	4659      	mov	r1, fp
 800a4a0:	f7f6 f882 	bl	80005a8 <__aeabi_dmul>
 800a4a4:	4b2d      	ldr	r3, [pc, #180]	; (800a55c <_dtoa_r+0x624>)
 800a4a6:	4682      	mov	sl, r0
 800a4a8:	468b      	mov	fp, r1
 800a4aa:	4640      	mov	r0, r8
 800a4ac:	4649      	mov	r1, r9
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	f7f6 f87a 	bl	80005a8 <__aeabi_dmul>
 800a4b4:	4680      	mov	r8, r0
 800a4b6:	4689      	mov	r9, r1
 800a4b8:	e7c6      	b.n	800a448 <_dtoa_r+0x510>
 800a4ba:	4650      	mov	r0, sl
 800a4bc:	4659      	mov	r1, fp
 800a4be:	f7f6 f873 	bl	80005a8 <__aeabi_dmul>
 800a4c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4c4:	9d01      	ldr	r5, [sp, #4]
 800a4c6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a4c8:	4682      	mov	sl, r0
 800a4ca:	468b      	mov	fp, r1
 800a4cc:	4649      	mov	r1, r9
 800a4ce:	4640      	mov	r0, r8
 800a4d0:	f7f6 fb1a 	bl	8000b08 <__aeabi_d2iz>
 800a4d4:	4606      	mov	r6, r0
 800a4d6:	f7f5 fffd 	bl	80004d4 <__aeabi_i2d>
 800a4da:	3630      	adds	r6, #48	; 0x30
 800a4dc:	4602      	mov	r2, r0
 800a4de:	460b      	mov	r3, r1
 800a4e0:	4640      	mov	r0, r8
 800a4e2:	4649      	mov	r1, r9
 800a4e4:	f7f5 fea8 	bl	8000238 <__aeabi_dsub>
 800a4e8:	f805 6b01 	strb.w	r6, [r5], #1
 800a4ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4ee:	429d      	cmp	r5, r3
 800a4f0:	4680      	mov	r8, r0
 800a4f2:	4689      	mov	r9, r1
 800a4f4:	f04f 0200 	mov.w	r2, #0
 800a4f8:	d124      	bne.n	800a544 <_dtoa_r+0x60c>
 800a4fa:	4b1b      	ldr	r3, [pc, #108]	; (800a568 <_dtoa_r+0x630>)
 800a4fc:	4650      	mov	r0, sl
 800a4fe:	4659      	mov	r1, fp
 800a500:	f7f5 fe9c 	bl	800023c <__adddf3>
 800a504:	4602      	mov	r2, r0
 800a506:	460b      	mov	r3, r1
 800a508:	4640      	mov	r0, r8
 800a50a:	4649      	mov	r1, r9
 800a50c:	f7f6 fadc 	bl	8000ac8 <__aeabi_dcmpgt>
 800a510:	2800      	cmp	r0, #0
 800a512:	d173      	bne.n	800a5fc <_dtoa_r+0x6c4>
 800a514:	4652      	mov	r2, sl
 800a516:	465b      	mov	r3, fp
 800a518:	4913      	ldr	r1, [pc, #76]	; (800a568 <_dtoa_r+0x630>)
 800a51a:	2000      	movs	r0, #0
 800a51c:	f7f5 fe8c 	bl	8000238 <__aeabi_dsub>
 800a520:	4602      	mov	r2, r0
 800a522:	460b      	mov	r3, r1
 800a524:	4640      	mov	r0, r8
 800a526:	4649      	mov	r1, r9
 800a528:	f7f6 fab0 	bl	8000a8c <__aeabi_dcmplt>
 800a52c:	2800      	cmp	r0, #0
 800a52e:	f43f af35 	beq.w	800a39c <_dtoa_r+0x464>
 800a532:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a534:	1e6b      	subs	r3, r5, #1
 800a536:	930f      	str	r3, [sp, #60]	; 0x3c
 800a538:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a53c:	2b30      	cmp	r3, #48	; 0x30
 800a53e:	d0f8      	beq.n	800a532 <_dtoa_r+0x5fa>
 800a540:	9700      	str	r7, [sp, #0]
 800a542:	e049      	b.n	800a5d8 <_dtoa_r+0x6a0>
 800a544:	4b05      	ldr	r3, [pc, #20]	; (800a55c <_dtoa_r+0x624>)
 800a546:	f7f6 f82f 	bl	80005a8 <__aeabi_dmul>
 800a54a:	4680      	mov	r8, r0
 800a54c:	4689      	mov	r9, r1
 800a54e:	e7bd      	b.n	800a4cc <_dtoa_r+0x594>
 800a550:	0800c288 	.word	0x0800c288
 800a554:	0800c260 	.word	0x0800c260
 800a558:	3ff00000 	.word	0x3ff00000
 800a55c:	40240000 	.word	0x40240000
 800a560:	401c0000 	.word	0x401c0000
 800a564:	40140000 	.word	0x40140000
 800a568:	3fe00000 	.word	0x3fe00000
 800a56c:	9d01      	ldr	r5, [sp, #4]
 800a56e:	4656      	mov	r6, sl
 800a570:	465f      	mov	r7, fp
 800a572:	4642      	mov	r2, r8
 800a574:	464b      	mov	r3, r9
 800a576:	4630      	mov	r0, r6
 800a578:	4639      	mov	r1, r7
 800a57a:	f7f6 f93f 	bl	80007fc <__aeabi_ddiv>
 800a57e:	f7f6 fac3 	bl	8000b08 <__aeabi_d2iz>
 800a582:	4682      	mov	sl, r0
 800a584:	f7f5 ffa6 	bl	80004d4 <__aeabi_i2d>
 800a588:	4642      	mov	r2, r8
 800a58a:	464b      	mov	r3, r9
 800a58c:	f7f6 f80c 	bl	80005a8 <__aeabi_dmul>
 800a590:	4602      	mov	r2, r0
 800a592:	460b      	mov	r3, r1
 800a594:	4630      	mov	r0, r6
 800a596:	4639      	mov	r1, r7
 800a598:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a59c:	f7f5 fe4c 	bl	8000238 <__aeabi_dsub>
 800a5a0:	f805 6b01 	strb.w	r6, [r5], #1
 800a5a4:	9e01      	ldr	r6, [sp, #4]
 800a5a6:	9f03      	ldr	r7, [sp, #12]
 800a5a8:	1bae      	subs	r6, r5, r6
 800a5aa:	42b7      	cmp	r7, r6
 800a5ac:	4602      	mov	r2, r0
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	d135      	bne.n	800a61e <_dtoa_r+0x6e6>
 800a5b2:	f7f5 fe43 	bl	800023c <__adddf3>
 800a5b6:	4642      	mov	r2, r8
 800a5b8:	464b      	mov	r3, r9
 800a5ba:	4606      	mov	r6, r0
 800a5bc:	460f      	mov	r7, r1
 800a5be:	f7f6 fa83 	bl	8000ac8 <__aeabi_dcmpgt>
 800a5c2:	b9d0      	cbnz	r0, 800a5fa <_dtoa_r+0x6c2>
 800a5c4:	4642      	mov	r2, r8
 800a5c6:	464b      	mov	r3, r9
 800a5c8:	4630      	mov	r0, r6
 800a5ca:	4639      	mov	r1, r7
 800a5cc:	f7f6 fa54 	bl	8000a78 <__aeabi_dcmpeq>
 800a5d0:	b110      	cbz	r0, 800a5d8 <_dtoa_r+0x6a0>
 800a5d2:	f01a 0f01 	tst.w	sl, #1
 800a5d6:	d110      	bne.n	800a5fa <_dtoa_r+0x6c2>
 800a5d8:	4620      	mov	r0, r4
 800a5da:	ee18 1a10 	vmov	r1, s16
 800a5de:	f000 fd05 	bl	800afec <_Bfree>
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	9800      	ldr	r0, [sp, #0]
 800a5e6:	702b      	strb	r3, [r5, #0]
 800a5e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5ea:	3001      	adds	r0, #1
 800a5ec:	6018      	str	r0, [r3, #0]
 800a5ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	f43f acf1 	beq.w	8009fd8 <_dtoa_r+0xa0>
 800a5f6:	601d      	str	r5, [r3, #0]
 800a5f8:	e4ee      	b.n	8009fd8 <_dtoa_r+0xa0>
 800a5fa:	9f00      	ldr	r7, [sp, #0]
 800a5fc:	462b      	mov	r3, r5
 800a5fe:	461d      	mov	r5, r3
 800a600:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a604:	2a39      	cmp	r2, #57	; 0x39
 800a606:	d106      	bne.n	800a616 <_dtoa_r+0x6de>
 800a608:	9a01      	ldr	r2, [sp, #4]
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d1f7      	bne.n	800a5fe <_dtoa_r+0x6c6>
 800a60e:	9901      	ldr	r1, [sp, #4]
 800a610:	2230      	movs	r2, #48	; 0x30
 800a612:	3701      	adds	r7, #1
 800a614:	700a      	strb	r2, [r1, #0]
 800a616:	781a      	ldrb	r2, [r3, #0]
 800a618:	3201      	adds	r2, #1
 800a61a:	701a      	strb	r2, [r3, #0]
 800a61c:	e790      	b.n	800a540 <_dtoa_r+0x608>
 800a61e:	4ba6      	ldr	r3, [pc, #664]	; (800a8b8 <_dtoa_r+0x980>)
 800a620:	2200      	movs	r2, #0
 800a622:	f7f5 ffc1 	bl	80005a8 <__aeabi_dmul>
 800a626:	2200      	movs	r2, #0
 800a628:	2300      	movs	r3, #0
 800a62a:	4606      	mov	r6, r0
 800a62c:	460f      	mov	r7, r1
 800a62e:	f7f6 fa23 	bl	8000a78 <__aeabi_dcmpeq>
 800a632:	2800      	cmp	r0, #0
 800a634:	d09d      	beq.n	800a572 <_dtoa_r+0x63a>
 800a636:	e7cf      	b.n	800a5d8 <_dtoa_r+0x6a0>
 800a638:	9a08      	ldr	r2, [sp, #32]
 800a63a:	2a00      	cmp	r2, #0
 800a63c:	f000 80d7 	beq.w	800a7ee <_dtoa_r+0x8b6>
 800a640:	9a06      	ldr	r2, [sp, #24]
 800a642:	2a01      	cmp	r2, #1
 800a644:	f300 80ba 	bgt.w	800a7bc <_dtoa_r+0x884>
 800a648:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a64a:	2a00      	cmp	r2, #0
 800a64c:	f000 80b2 	beq.w	800a7b4 <_dtoa_r+0x87c>
 800a650:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a654:	9e07      	ldr	r6, [sp, #28]
 800a656:	9d04      	ldr	r5, [sp, #16]
 800a658:	9a04      	ldr	r2, [sp, #16]
 800a65a:	441a      	add	r2, r3
 800a65c:	9204      	str	r2, [sp, #16]
 800a65e:	9a05      	ldr	r2, [sp, #20]
 800a660:	2101      	movs	r1, #1
 800a662:	441a      	add	r2, r3
 800a664:	4620      	mov	r0, r4
 800a666:	9205      	str	r2, [sp, #20]
 800a668:	f000 fd78 	bl	800b15c <__i2b>
 800a66c:	4607      	mov	r7, r0
 800a66e:	2d00      	cmp	r5, #0
 800a670:	dd0c      	ble.n	800a68c <_dtoa_r+0x754>
 800a672:	9b05      	ldr	r3, [sp, #20]
 800a674:	2b00      	cmp	r3, #0
 800a676:	dd09      	ble.n	800a68c <_dtoa_r+0x754>
 800a678:	42ab      	cmp	r3, r5
 800a67a:	9a04      	ldr	r2, [sp, #16]
 800a67c:	bfa8      	it	ge
 800a67e:	462b      	movge	r3, r5
 800a680:	1ad2      	subs	r2, r2, r3
 800a682:	9204      	str	r2, [sp, #16]
 800a684:	9a05      	ldr	r2, [sp, #20]
 800a686:	1aed      	subs	r5, r5, r3
 800a688:	1ad3      	subs	r3, r2, r3
 800a68a:	9305      	str	r3, [sp, #20]
 800a68c:	9b07      	ldr	r3, [sp, #28]
 800a68e:	b31b      	cbz	r3, 800a6d8 <_dtoa_r+0x7a0>
 800a690:	9b08      	ldr	r3, [sp, #32]
 800a692:	2b00      	cmp	r3, #0
 800a694:	f000 80af 	beq.w	800a7f6 <_dtoa_r+0x8be>
 800a698:	2e00      	cmp	r6, #0
 800a69a:	dd13      	ble.n	800a6c4 <_dtoa_r+0x78c>
 800a69c:	4639      	mov	r1, r7
 800a69e:	4632      	mov	r2, r6
 800a6a0:	4620      	mov	r0, r4
 800a6a2:	f000 fe1b 	bl	800b2dc <__pow5mult>
 800a6a6:	ee18 2a10 	vmov	r2, s16
 800a6aa:	4601      	mov	r1, r0
 800a6ac:	4607      	mov	r7, r0
 800a6ae:	4620      	mov	r0, r4
 800a6b0:	f000 fd6a 	bl	800b188 <__multiply>
 800a6b4:	ee18 1a10 	vmov	r1, s16
 800a6b8:	4680      	mov	r8, r0
 800a6ba:	4620      	mov	r0, r4
 800a6bc:	f000 fc96 	bl	800afec <_Bfree>
 800a6c0:	ee08 8a10 	vmov	s16, r8
 800a6c4:	9b07      	ldr	r3, [sp, #28]
 800a6c6:	1b9a      	subs	r2, r3, r6
 800a6c8:	d006      	beq.n	800a6d8 <_dtoa_r+0x7a0>
 800a6ca:	ee18 1a10 	vmov	r1, s16
 800a6ce:	4620      	mov	r0, r4
 800a6d0:	f000 fe04 	bl	800b2dc <__pow5mult>
 800a6d4:	ee08 0a10 	vmov	s16, r0
 800a6d8:	2101      	movs	r1, #1
 800a6da:	4620      	mov	r0, r4
 800a6dc:	f000 fd3e 	bl	800b15c <__i2b>
 800a6e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	4606      	mov	r6, r0
 800a6e6:	f340 8088 	ble.w	800a7fa <_dtoa_r+0x8c2>
 800a6ea:	461a      	mov	r2, r3
 800a6ec:	4601      	mov	r1, r0
 800a6ee:	4620      	mov	r0, r4
 800a6f0:	f000 fdf4 	bl	800b2dc <__pow5mult>
 800a6f4:	9b06      	ldr	r3, [sp, #24]
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	4606      	mov	r6, r0
 800a6fa:	f340 8081 	ble.w	800a800 <_dtoa_r+0x8c8>
 800a6fe:	f04f 0800 	mov.w	r8, #0
 800a702:	6933      	ldr	r3, [r6, #16]
 800a704:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a708:	6918      	ldr	r0, [r3, #16]
 800a70a:	f000 fcd7 	bl	800b0bc <__hi0bits>
 800a70e:	f1c0 0020 	rsb	r0, r0, #32
 800a712:	9b05      	ldr	r3, [sp, #20]
 800a714:	4418      	add	r0, r3
 800a716:	f010 001f 	ands.w	r0, r0, #31
 800a71a:	f000 8092 	beq.w	800a842 <_dtoa_r+0x90a>
 800a71e:	f1c0 0320 	rsb	r3, r0, #32
 800a722:	2b04      	cmp	r3, #4
 800a724:	f340 808a 	ble.w	800a83c <_dtoa_r+0x904>
 800a728:	f1c0 001c 	rsb	r0, r0, #28
 800a72c:	9b04      	ldr	r3, [sp, #16]
 800a72e:	4403      	add	r3, r0
 800a730:	9304      	str	r3, [sp, #16]
 800a732:	9b05      	ldr	r3, [sp, #20]
 800a734:	4403      	add	r3, r0
 800a736:	4405      	add	r5, r0
 800a738:	9305      	str	r3, [sp, #20]
 800a73a:	9b04      	ldr	r3, [sp, #16]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	dd07      	ble.n	800a750 <_dtoa_r+0x818>
 800a740:	ee18 1a10 	vmov	r1, s16
 800a744:	461a      	mov	r2, r3
 800a746:	4620      	mov	r0, r4
 800a748:	f000 fe22 	bl	800b390 <__lshift>
 800a74c:	ee08 0a10 	vmov	s16, r0
 800a750:	9b05      	ldr	r3, [sp, #20]
 800a752:	2b00      	cmp	r3, #0
 800a754:	dd05      	ble.n	800a762 <_dtoa_r+0x82a>
 800a756:	4631      	mov	r1, r6
 800a758:	461a      	mov	r2, r3
 800a75a:	4620      	mov	r0, r4
 800a75c:	f000 fe18 	bl	800b390 <__lshift>
 800a760:	4606      	mov	r6, r0
 800a762:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a764:	2b00      	cmp	r3, #0
 800a766:	d06e      	beq.n	800a846 <_dtoa_r+0x90e>
 800a768:	ee18 0a10 	vmov	r0, s16
 800a76c:	4631      	mov	r1, r6
 800a76e:	f000 fe7f 	bl	800b470 <__mcmp>
 800a772:	2800      	cmp	r0, #0
 800a774:	da67      	bge.n	800a846 <_dtoa_r+0x90e>
 800a776:	9b00      	ldr	r3, [sp, #0]
 800a778:	3b01      	subs	r3, #1
 800a77a:	ee18 1a10 	vmov	r1, s16
 800a77e:	9300      	str	r3, [sp, #0]
 800a780:	220a      	movs	r2, #10
 800a782:	2300      	movs	r3, #0
 800a784:	4620      	mov	r0, r4
 800a786:	f000 fc53 	bl	800b030 <__multadd>
 800a78a:	9b08      	ldr	r3, [sp, #32]
 800a78c:	ee08 0a10 	vmov	s16, r0
 800a790:	2b00      	cmp	r3, #0
 800a792:	f000 81b1 	beq.w	800aaf8 <_dtoa_r+0xbc0>
 800a796:	2300      	movs	r3, #0
 800a798:	4639      	mov	r1, r7
 800a79a:	220a      	movs	r2, #10
 800a79c:	4620      	mov	r0, r4
 800a79e:	f000 fc47 	bl	800b030 <__multadd>
 800a7a2:	9b02      	ldr	r3, [sp, #8]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	4607      	mov	r7, r0
 800a7a8:	f300 808e 	bgt.w	800a8c8 <_dtoa_r+0x990>
 800a7ac:	9b06      	ldr	r3, [sp, #24]
 800a7ae:	2b02      	cmp	r3, #2
 800a7b0:	dc51      	bgt.n	800a856 <_dtoa_r+0x91e>
 800a7b2:	e089      	b.n	800a8c8 <_dtoa_r+0x990>
 800a7b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a7b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a7ba:	e74b      	b.n	800a654 <_dtoa_r+0x71c>
 800a7bc:	9b03      	ldr	r3, [sp, #12]
 800a7be:	1e5e      	subs	r6, r3, #1
 800a7c0:	9b07      	ldr	r3, [sp, #28]
 800a7c2:	42b3      	cmp	r3, r6
 800a7c4:	bfbf      	itttt	lt
 800a7c6:	9b07      	ldrlt	r3, [sp, #28]
 800a7c8:	9607      	strlt	r6, [sp, #28]
 800a7ca:	1af2      	sublt	r2, r6, r3
 800a7cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a7ce:	bfb6      	itet	lt
 800a7d0:	189b      	addlt	r3, r3, r2
 800a7d2:	1b9e      	subge	r6, r3, r6
 800a7d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a7d6:	9b03      	ldr	r3, [sp, #12]
 800a7d8:	bfb8      	it	lt
 800a7da:	2600      	movlt	r6, #0
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	bfb7      	itett	lt
 800a7e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a7e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a7e8:	1a9d      	sublt	r5, r3, r2
 800a7ea:	2300      	movlt	r3, #0
 800a7ec:	e734      	b.n	800a658 <_dtoa_r+0x720>
 800a7ee:	9e07      	ldr	r6, [sp, #28]
 800a7f0:	9d04      	ldr	r5, [sp, #16]
 800a7f2:	9f08      	ldr	r7, [sp, #32]
 800a7f4:	e73b      	b.n	800a66e <_dtoa_r+0x736>
 800a7f6:	9a07      	ldr	r2, [sp, #28]
 800a7f8:	e767      	b.n	800a6ca <_dtoa_r+0x792>
 800a7fa:	9b06      	ldr	r3, [sp, #24]
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	dc18      	bgt.n	800a832 <_dtoa_r+0x8fa>
 800a800:	f1ba 0f00 	cmp.w	sl, #0
 800a804:	d115      	bne.n	800a832 <_dtoa_r+0x8fa>
 800a806:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a80a:	b993      	cbnz	r3, 800a832 <_dtoa_r+0x8fa>
 800a80c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a810:	0d1b      	lsrs	r3, r3, #20
 800a812:	051b      	lsls	r3, r3, #20
 800a814:	b183      	cbz	r3, 800a838 <_dtoa_r+0x900>
 800a816:	9b04      	ldr	r3, [sp, #16]
 800a818:	3301      	adds	r3, #1
 800a81a:	9304      	str	r3, [sp, #16]
 800a81c:	9b05      	ldr	r3, [sp, #20]
 800a81e:	3301      	adds	r3, #1
 800a820:	9305      	str	r3, [sp, #20]
 800a822:	f04f 0801 	mov.w	r8, #1
 800a826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a828:	2b00      	cmp	r3, #0
 800a82a:	f47f af6a 	bne.w	800a702 <_dtoa_r+0x7ca>
 800a82e:	2001      	movs	r0, #1
 800a830:	e76f      	b.n	800a712 <_dtoa_r+0x7da>
 800a832:	f04f 0800 	mov.w	r8, #0
 800a836:	e7f6      	b.n	800a826 <_dtoa_r+0x8ee>
 800a838:	4698      	mov	r8, r3
 800a83a:	e7f4      	b.n	800a826 <_dtoa_r+0x8ee>
 800a83c:	f43f af7d 	beq.w	800a73a <_dtoa_r+0x802>
 800a840:	4618      	mov	r0, r3
 800a842:	301c      	adds	r0, #28
 800a844:	e772      	b.n	800a72c <_dtoa_r+0x7f4>
 800a846:	9b03      	ldr	r3, [sp, #12]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	dc37      	bgt.n	800a8bc <_dtoa_r+0x984>
 800a84c:	9b06      	ldr	r3, [sp, #24]
 800a84e:	2b02      	cmp	r3, #2
 800a850:	dd34      	ble.n	800a8bc <_dtoa_r+0x984>
 800a852:	9b03      	ldr	r3, [sp, #12]
 800a854:	9302      	str	r3, [sp, #8]
 800a856:	9b02      	ldr	r3, [sp, #8]
 800a858:	b96b      	cbnz	r3, 800a876 <_dtoa_r+0x93e>
 800a85a:	4631      	mov	r1, r6
 800a85c:	2205      	movs	r2, #5
 800a85e:	4620      	mov	r0, r4
 800a860:	f000 fbe6 	bl	800b030 <__multadd>
 800a864:	4601      	mov	r1, r0
 800a866:	4606      	mov	r6, r0
 800a868:	ee18 0a10 	vmov	r0, s16
 800a86c:	f000 fe00 	bl	800b470 <__mcmp>
 800a870:	2800      	cmp	r0, #0
 800a872:	f73f adbb 	bgt.w	800a3ec <_dtoa_r+0x4b4>
 800a876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a878:	9d01      	ldr	r5, [sp, #4]
 800a87a:	43db      	mvns	r3, r3
 800a87c:	9300      	str	r3, [sp, #0]
 800a87e:	f04f 0800 	mov.w	r8, #0
 800a882:	4631      	mov	r1, r6
 800a884:	4620      	mov	r0, r4
 800a886:	f000 fbb1 	bl	800afec <_Bfree>
 800a88a:	2f00      	cmp	r7, #0
 800a88c:	f43f aea4 	beq.w	800a5d8 <_dtoa_r+0x6a0>
 800a890:	f1b8 0f00 	cmp.w	r8, #0
 800a894:	d005      	beq.n	800a8a2 <_dtoa_r+0x96a>
 800a896:	45b8      	cmp	r8, r7
 800a898:	d003      	beq.n	800a8a2 <_dtoa_r+0x96a>
 800a89a:	4641      	mov	r1, r8
 800a89c:	4620      	mov	r0, r4
 800a89e:	f000 fba5 	bl	800afec <_Bfree>
 800a8a2:	4639      	mov	r1, r7
 800a8a4:	4620      	mov	r0, r4
 800a8a6:	f000 fba1 	bl	800afec <_Bfree>
 800a8aa:	e695      	b.n	800a5d8 <_dtoa_r+0x6a0>
 800a8ac:	2600      	movs	r6, #0
 800a8ae:	4637      	mov	r7, r6
 800a8b0:	e7e1      	b.n	800a876 <_dtoa_r+0x93e>
 800a8b2:	9700      	str	r7, [sp, #0]
 800a8b4:	4637      	mov	r7, r6
 800a8b6:	e599      	b.n	800a3ec <_dtoa_r+0x4b4>
 800a8b8:	40240000 	.word	0x40240000
 800a8bc:	9b08      	ldr	r3, [sp, #32]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	f000 80ca 	beq.w	800aa58 <_dtoa_r+0xb20>
 800a8c4:	9b03      	ldr	r3, [sp, #12]
 800a8c6:	9302      	str	r3, [sp, #8]
 800a8c8:	2d00      	cmp	r5, #0
 800a8ca:	dd05      	ble.n	800a8d8 <_dtoa_r+0x9a0>
 800a8cc:	4639      	mov	r1, r7
 800a8ce:	462a      	mov	r2, r5
 800a8d0:	4620      	mov	r0, r4
 800a8d2:	f000 fd5d 	bl	800b390 <__lshift>
 800a8d6:	4607      	mov	r7, r0
 800a8d8:	f1b8 0f00 	cmp.w	r8, #0
 800a8dc:	d05b      	beq.n	800a996 <_dtoa_r+0xa5e>
 800a8de:	6879      	ldr	r1, [r7, #4]
 800a8e0:	4620      	mov	r0, r4
 800a8e2:	f000 fb43 	bl	800af6c <_Balloc>
 800a8e6:	4605      	mov	r5, r0
 800a8e8:	b928      	cbnz	r0, 800a8f6 <_dtoa_r+0x9be>
 800a8ea:	4b87      	ldr	r3, [pc, #540]	; (800ab08 <_dtoa_r+0xbd0>)
 800a8ec:	4602      	mov	r2, r0
 800a8ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a8f2:	f7ff bb3b 	b.w	8009f6c <_dtoa_r+0x34>
 800a8f6:	693a      	ldr	r2, [r7, #16]
 800a8f8:	3202      	adds	r2, #2
 800a8fa:	0092      	lsls	r2, r2, #2
 800a8fc:	f107 010c 	add.w	r1, r7, #12
 800a900:	300c      	adds	r0, #12
 800a902:	f7fe fd33 	bl	800936c <memcpy>
 800a906:	2201      	movs	r2, #1
 800a908:	4629      	mov	r1, r5
 800a90a:	4620      	mov	r0, r4
 800a90c:	f000 fd40 	bl	800b390 <__lshift>
 800a910:	9b01      	ldr	r3, [sp, #4]
 800a912:	f103 0901 	add.w	r9, r3, #1
 800a916:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a91a:	4413      	add	r3, r2
 800a91c:	9305      	str	r3, [sp, #20]
 800a91e:	f00a 0301 	and.w	r3, sl, #1
 800a922:	46b8      	mov	r8, r7
 800a924:	9304      	str	r3, [sp, #16]
 800a926:	4607      	mov	r7, r0
 800a928:	4631      	mov	r1, r6
 800a92a:	ee18 0a10 	vmov	r0, s16
 800a92e:	f7ff fa75 	bl	8009e1c <quorem>
 800a932:	4641      	mov	r1, r8
 800a934:	9002      	str	r0, [sp, #8]
 800a936:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a93a:	ee18 0a10 	vmov	r0, s16
 800a93e:	f000 fd97 	bl	800b470 <__mcmp>
 800a942:	463a      	mov	r2, r7
 800a944:	9003      	str	r0, [sp, #12]
 800a946:	4631      	mov	r1, r6
 800a948:	4620      	mov	r0, r4
 800a94a:	f000 fdad 	bl	800b4a8 <__mdiff>
 800a94e:	68c2      	ldr	r2, [r0, #12]
 800a950:	f109 3bff 	add.w	fp, r9, #4294967295
 800a954:	4605      	mov	r5, r0
 800a956:	bb02      	cbnz	r2, 800a99a <_dtoa_r+0xa62>
 800a958:	4601      	mov	r1, r0
 800a95a:	ee18 0a10 	vmov	r0, s16
 800a95e:	f000 fd87 	bl	800b470 <__mcmp>
 800a962:	4602      	mov	r2, r0
 800a964:	4629      	mov	r1, r5
 800a966:	4620      	mov	r0, r4
 800a968:	9207      	str	r2, [sp, #28]
 800a96a:	f000 fb3f 	bl	800afec <_Bfree>
 800a96e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a972:	ea43 0102 	orr.w	r1, r3, r2
 800a976:	9b04      	ldr	r3, [sp, #16]
 800a978:	430b      	orrs	r3, r1
 800a97a:	464d      	mov	r5, r9
 800a97c:	d10f      	bne.n	800a99e <_dtoa_r+0xa66>
 800a97e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a982:	d02a      	beq.n	800a9da <_dtoa_r+0xaa2>
 800a984:	9b03      	ldr	r3, [sp, #12]
 800a986:	2b00      	cmp	r3, #0
 800a988:	dd02      	ble.n	800a990 <_dtoa_r+0xa58>
 800a98a:	9b02      	ldr	r3, [sp, #8]
 800a98c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a990:	f88b a000 	strb.w	sl, [fp]
 800a994:	e775      	b.n	800a882 <_dtoa_r+0x94a>
 800a996:	4638      	mov	r0, r7
 800a998:	e7ba      	b.n	800a910 <_dtoa_r+0x9d8>
 800a99a:	2201      	movs	r2, #1
 800a99c:	e7e2      	b.n	800a964 <_dtoa_r+0xa2c>
 800a99e:	9b03      	ldr	r3, [sp, #12]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	db04      	blt.n	800a9ae <_dtoa_r+0xa76>
 800a9a4:	9906      	ldr	r1, [sp, #24]
 800a9a6:	430b      	orrs	r3, r1
 800a9a8:	9904      	ldr	r1, [sp, #16]
 800a9aa:	430b      	orrs	r3, r1
 800a9ac:	d122      	bne.n	800a9f4 <_dtoa_r+0xabc>
 800a9ae:	2a00      	cmp	r2, #0
 800a9b0:	ddee      	ble.n	800a990 <_dtoa_r+0xa58>
 800a9b2:	ee18 1a10 	vmov	r1, s16
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	f000 fce9 	bl	800b390 <__lshift>
 800a9be:	4631      	mov	r1, r6
 800a9c0:	ee08 0a10 	vmov	s16, r0
 800a9c4:	f000 fd54 	bl	800b470 <__mcmp>
 800a9c8:	2800      	cmp	r0, #0
 800a9ca:	dc03      	bgt.n	800a9d4 <_dtoa_r+0xa9c>
 800a9cc:	d1e0      	bne.n	800a990 <_dtoa_r+0xa58>
 800a9ce:	f01a 0f01 	tst.w	sl, #1
 800a9d2:	d0dd      	beq.n	800a990 <_dtoa_r+0xa58>
 800a9d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a9d8:	d1d7      	bne.n	800a98a <_dtoa_r+0xa52>
 800a9da:	2339      	movs	r3, #57	; 0x39
 800a9dc:	f88b 3000 	strb.w	r3, [fp]
 800a9e0:	462b      	mov	r3, r5
 800a9e2:	461d      	mov	r5, r3
 800a9e4:	3b01      	subs	r3, #1
 800a9e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a9ea:	2a39      	cmp	r2, #57	; 0x39
 800a9ec:	d071      	beq.n	800aad2 <_dtoa_r+0xb9a>
 800a9ee:	3201      	adds	r2, #1
 800a9f0:	701a      	strb	r2, [r3, #0]
 800a9f2:	e746      	b.n	800a882 <_dtoa_r+0x94a>
 800a9f4:	2a00      	cmp	r2, #0
 800a9f6:	dd07      	ble.n	800aa08 <_dtoa_r+0xad0>
 800a9f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a9fc:	d0ed      	beq.n	800a9da <_dtoa_r+0xaa2>
 800a9fe:	f10a 0301 	add.w	r3, sl, #1
 800aa02:	f88b 3000 	strb.w	r3, [fp]
 800aa06:	e73c      	b.n	800a882 <_dtoa_r+0x94a>
 800aa08:	9b05      	ldr	r3, [sp, #20]
 800aa0a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800aa0e:	4599      	cmp	r9, r3
 800aa10:	d047      	beq.n	800aaa2 <_dtoa_r+0xb6a>
 800aa12:	ee18 1a10 	vmov	r1, s16
 800aa16:	2300      	movs	r3, #0
 800aa18:	220a      	movs	r2, #10
 800aa1a:	4620      	mov	r0, r4
 800aa1c:	f000 fb08 	bl	800b030 <__multadd>
 800aa20:	45b8      	cmp	r8, r7
 800aa22:	ee08 0a10 	vmov	s16, r0
 800aa26:	f04f 0300 	mov.w	r3, #0
 800aa2a:	f04f 020a 	mov.w	r2, #10
 800aa2e:	4641      	mov	r1, r8
 800aa30:	4620      	mov	r0, r4
 800aa32:	d106      	bne.n	800aa42 <_dtoa_r+0xb0a>
 800aa34:	f000 fafc 	bl	800b030 <__multadd>
 800aa38:	4680      	mov	r8, r0
 800aa3a:	4607      	mov	r7, r0
 800aa3c:	f109 0901 	add.w	r9, r9, #1
 800aa40:	e772      	b.n	800a928 <_dtoa_r+0x9f0>
 800aa42:	f000 faf5 	bl	800b030 <__multadd>
 800aa46:	4639      	mov	r1, r7
 800aa48:	4680      	mov	r8, r0
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	220a      	movs	r2, #10
 800aa4e:	4620      	mov	r0, r4
 800aa50:	f000 faee 	bl	800b030 <__multadd>
 800aa54:	4607      	mov	r7, r0
 800aa56:	e7f1      	b.n	800aa3c <_dtoa_r+0xb04>
 800aa58:	9b03      	ldr	r3, [sp, #12]
 800aa5a:	9302      	str	r3, [sp, #8]
 800aa5c:	9d01      	ldr	r5, [sp, #4]
 800aa5e:	ee18 0a10 	vmov	r0, s16
 800aa62:	4631      	mov	r1, r6
 800aa64:	f7ff f9da 	bl	8009e1c <quorem>
 800aa68:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800aa6c:	9b01      	ldr	r3, [sp, #4]
 800aa6e:	f805 ab01 	strb.w	sl, [r5], #1
 800aa72:	1aea      	subs	r2, r5, r3
 800aa74:	9b02      	ldr	r3, [sp, #8]
 800aa76:	4293      	cmp	r3, r2
 800aa78:	dd09      	ble.n	800aa8e <_dtoa_r+0xb56>
 800aa7a:	ee18 1a10 	vmov	r1, s16
 800aa7e:	2300      	movs	r3, #0
 800aa80:	220a      	movs	r2, #10
 800aa82:	4620      	mov	r0, r4
 800aa84:	f000 fad4 	bl	800b030 <__multadd>
 800aa88:	ee08 0a10 	vmov	s16, r0
 800aa8c:	e7e7      	b.n	800aa5e <_dtoa_r+0xb26>
 800aa8e:	9b02      	ldr	r3, [sp, #8]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	bfc8      	it	gt
 800aa94:	461d      	movgt	r5, r3
 800aa96:	9b01      	ldr	r3, [sp, #4]
 800aa98:	bfd8      	it	le
 800aa9a:	2501      	movle	r5, #1
 800aa9c:	441d      	add	r5, r3
 800aa9e:	f04f 0800 	mov.w	r8, #0
 800aaa2:	ee18 1a10 	vmov	r1, s16
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	f000 fc71 	bl	800b390 <__lshift>
 800aaae:	4631      	mov	r1, r6
 800aab0:	ee08 0a10 	vmov	s16, r0
 800aab4:	f000 fcdc 	bl	800b470 <__mcmp>
 800aab8:	2800      	cmp	r0, #0
 800aaba:	dc91      	bgt.n	800a9e0 <_dtoa_r+0xaa8>
 800aabc:	d102      	bne.n	800aac4 <_dtoa_r+0xb8c>
 800aabe:	f01a 0f01 	tst.w	sl, #1
 800aac2:	d18d      	bne.n	800a9e0 <_dtoa_r+0xaa8>
 800aac4:	462b      	mov	r3, r5
 800aac6:	461d      	mov	r5, r3
 800aac8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aacc:	2a30      	cmp	r2, #48	; 0x30
 800aace:	d0fa      	beq.n	800aac6 <_dtoa_r+0xb8e>
 800aad0:	e6d7      	b.n	800a882 <_dtoa_r+0x94a>
 800aad2:	9a01      	ldr	r2, [sp, #4]
 800aad4:	429a      	cmp	r2, r3
 800aad6:	d184      	bne.n	800a9e2 <_dtoa_r+0xaaa>
 800aad8:	9b00      	ldr	r3, [sp, #0]
 800aada:	3301      	adds	r3, #1
 800aadc:	9300      	str	r3, [sp, #0]
 800aade:	2331      	movs	r3, #49	; 0x31
 800aae0:	7013      	strb	r3, [r2, #0]
 800aae2:	e6ce      	b.n	800a882 <_dtoa_r+0x94a>
 800aae4:	4b09      	ldr	r3, [pc, #36]	; (800ab0c <_dtoa_r+0xbd4>)
 800aae6:	f7ff ba95 	b.w	800a014 <_dtoa_r+0xdc>
 800aaea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	f47f aa6e 	bne.w	8009fce <_dtoa_r+0x96>
 800aaf2:	4b07      	ldr	r3, [pc, #28]	; (800ab10 <_dtoa_r+0xbd8>)
 800aaf4:	f7ff ba8e 	b.w	800a014 <_dtoa_r+0xdc>
 800aaf8:	9b02      	ldr	r3, [sp, #8]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	dcae      	bgt.n	800aa5c <_dtoa_r+0xb24>
 800aafe:	9b06      	ldr	r3, [sp, #24]
 800ab00:	2b02      	cmp	r3, #2
 800ab02:	f73f aea8 	bgt.w	800a856 <_dtoa_r+0x91e>
 800ab06:	e7a9      	b.n	800aa5c <_dtoa_r+0xb24>
 800ab08:	0800c18f 	.word	0x0800c18f
 800ab0c:	0800c0ec 	.word	0x0800c0ec
 800ab10:	0800c110 	.word	0x0800c110

0800ab14 <__sflush_r>:
 800ab14:	898a      	ldrh	r2, [r1, #12]
 800ab16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab1a:	4605      	mov	r5, r0
 800ab1c:	0710      	lsls	r0, r2, #28
 800ab1e:	460c      	mov	r4, r1
 800ab20:	d458      	bmi.n	800abd4 <__sflush_r+0xc0>
 800ab22:	684b      	ldr	r3, [r1, #4]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	dc05      	bgt.n	800ab34 <__sflush_r+0x20>
 800ab28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	dc02      	bgt.n	800ab34 <__sflush_r+0x20>
 800ab2e:	2000      	movs	r0, #0
 800ab30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab36:	2e00      	cmp	r6, #0
 800ab38:	d0f9      	beq.n	800ab2e <__sflush_r+0x1a>
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ab40:	682f      	ldr	r7, [r5, #0]
 800ab42:	602b      	str	r3, [r5, #0]
 800ab44:	d032      	beq.n	800abac <__sflush_r+0x98>
 800ab46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ab48:	89a3      	ldrh	r3, [r4, #12]
 800ab4a:	075a      	lsls	r2, r3, #29
 800ab4c:	d505      	bpl.n	800ab5a <__sflush_r+0x46>
 800ab4e:	6863      	ldr	r3, [r4, #4]
 800ab50:	1ac0      	subs	r0, r0, r3
 800ab52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab54:	b10b      	cbz	r3, 800ab5a <__sflush_r+0x46>
 800ab56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab58:	1ac0      	subs	r0, r0, r3
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	4602      	mov	r2, r0
 800ab5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab60:	6a21      	ldr	r1, [r4, #32]
 800ab62:	4628      	mov	r0, r5
 800ab64:	47b0      	blx	r6
 800ab66:	1c43      	adds	r3, r0, #1
 800ab68:	89a3      	ldrh	r3, [r4, #12]
 800ab6a:	d106      	bne.n	800ab7a <__sflush_r+0x66>
 800ab6c:	6829      	ldr	r1, [r5, #0]
 800ab6e:	291d      	cmp	r1, #29
 800ab70:	d82c      	bhi.n	800abcc <__sflush_r+0xb8>
 800ab72:	4a2a      	ldr	r2, [pc, #168]	; (800ac1c <__sflush_r+0x108>)
 800ab74:	40ca      	lsrs	r2, r1
 800ab76:	07d6      	lsls	r6, r2, #31
 800ab78:	d528      	bpl.n	800abcc <__sflush_r+0xb8>
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	6062      	str	r2, [r4, #4]
 800ab7e:	04d9      	lsls	r1, r3, #19
 800ab80:	6922      	ldr	r2, [r4, #16]
 800ab82:	6022      	str	r2, [r4, #0]
 800ab84:	d504      	bpl.n	800ab90 <__sflush_r+0x7c>
 800ab86:	1c42      	adds	r2, r0, #1
 800ab88:	d101      	bne.n	800ab8e <__sflush_r+0x7a>
 800ab8a:	682b      	ldr	r3, [r5, #0]
 800ab8c:	b903      	cbnz	r3, 800ab90 <__sflush_r+0x7c>
 800ab8e:	6560      	str	r0, [r4, #84]	; 0x54
 800ab90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab92:	602f      	str	r7, [r5, #0]
 800ab94:	2900      	cmp	r1, #0
 800ab96:	d0ca      	beq.n	800ab2e <__sflush_r+0x1a>
 800ab98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab9c:	4299      	cmp	r1, r3
 800ab9e:	d002      	beq.n	800aba6 <__sflush_r+0x92>
 800aba0:	4628      	mov	r0, r5
 800aba2:	f000 fd7d 	bl	800b6a0 <_free_r>
 800aba6:	2000      	movs	r0, #0
 800aba8:	6360      	str	r0, [r4, #52]	; 0x34
 800abaa:	e7c1      	b.n	800ab30 <__sflush_r+0x1c>
 800abac:	6a21      	ldr	r1, [r4, #32]
 800abae:	2301      	movs	r3, #1
 800abb0:	4628      	mov	r0, r5
 800abb2:	47b0      	blx	r6
 800abb4:	1c41      	adds	r1, r0, #1
 800abb6:	d1c7      	bne.n	800ab48 <__sflush_r+0x34>
 800abb8:	682b      	ldr	r3, [r5, #0]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d0c4      	beq.n	800ab48 <__sflush_r+0x34>
 800abbe:	2b1d      	cmp	r3, #29
 800abc0:	d001      	beq.n	800abc6 <__sflush_r+0xb2>
 800abc2:	2b16      	cmp	r3, #22
 800abc4:	d101      	bne.n	800abca <__sflush_r+0xb6>
 800abc6:	602f      	str	r7, [r5, #0]
 800abc8:	e7b1      	b.n	800ab2e <__sflush_r+0x1a>
 800abca:	89a3      	ldrh	r3, [r4, #12]
 800abcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abd0:	81a3      	strh	r3, [r4, #12]
 800abd2:	e7ad      	b.n	800ab30 <__sflush_r+0x1c>
 800abd4:	690f      	ldr	r7, [r1, #16]
 800abd6:	2f00      	cmp	r7, #0
 800abd8:	d0a9      	beq.n	800ab2e <__sflush_r+0x1a>
 800abda:	0793      	lsls	r3, r2, #30
 800abdc:	680e      	ldr	r6, [r1, #0]
 800abde:	bf08      	it	eq
 800abe0:	694b      	ldreq	r3, [r1, #20]
 800abe2:	600f      	str	r7, [r1, #0]
 800abe4:	bf18      	it	ne
 800abe6:	2300      	movne	r3, #0
 800abe8:	eba6 0807 	sub.w	r8, r6, r7
 800abec:	608b      	str	r3, [r1, #8]
 800abee:	f1b8 0f00 	cmp.w	r8, #0
 800abf2:	dd9c      	ble.n	800ab2e <__sflush_r+0x1a>
 800abf4:	6a21      	ldr	r1, [r4, #32]
 800abf6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800abf8:	4643      	mov	r3, r8
 800abfa:	463a      	mov	r2, r7
 800abfc:	4628      	mov	r0, r5
 800abfe:	47b0      	blx	r6
 800ac00:	2800      	cmp	r0, #0
 800ac02:	dc06      	bgt.n	800ac12 <__sflush_r+0xfe>
 800ac04:	89a3      	ldrh	r3, [r4, #12]
 800ac06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac0a:	81a3      	strh	r3, [r4, #12]
 800ac0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac10:	e78e      	b.n	800ab30 <__sflush_r+0x1c>
 800ac12:	4407      	add	r7, r0
 800ac14:	eba8 0800 	sub.w	r8, r8, r0
 800ac18:	e7e9      	b.n	800abee <__sflush_r+0xda>
 800ac1a:	bf00      	nop
 800ac1c:	20400001 	.word	0x20400001

0800ac20 <_fflush_r>:
 800ac20:	b538      	push	{r3, r4, r5, lr}
 800ac22:	690b      	ldr	r3, [r1, #16]
 800ac24:	4605      	mov	r5, r0
 800ac26:	460c      	mov	r4, r1
 800ac28:	b913      	cbnz	r3, 800ac30 <_fflush_r+0x10>
 800ac2a:	2500      	movs	r5, #0
 800ac2c:	4628      	mov	r0, r5
 800ac2e:	bd38      	pop	{r3, r4, r5, pc}
 800ac30:	b118      	cbz	r0, 800ac3a <_fflush_r+0x1a>
 800ac32:	6983      	ldr	r3, [r0, #24]
 800ac34:	b90b      	cbnz	r3, 800ac3a <_fflush_r+0x1a>
 800ac36:	f000 f887 	bl	800ad48 <__sinit>
 800ac3a:	4b14      	ldr	r3, [pc, #80]	; (800ac8c <_fflush_r+0x6c>)
 800ac3c:	429c      	cmp	r4, r3
 800ac3e:	d11b      	bne.n	800ac78 <_fflush_r+0x58>
 800ac40:	686c      	ldr	r4, [r5, #4]
 800ac42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d0ef      	beq.n	800ac2a <_fflush_r+0xa>
 800ac4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ac4c:	07d0      	lsls	r0, r2, #31
 800ac4e:	d404      	bmi.n	800ac5a <_fflush_r+0x3a>
 800ac50:	0599      	lsls	r1, r3, #22
 800ac52:	d402      	bmi.n	800ac5a <_fflush_r+0x3a>
 800ac54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac56:	f000 f91a 	bl	800ae8e <__retarget_lock_acquire_recursive>
 800ac5a:	4628      	mov	r0, r5
 800ac5c:	4621      	mov	r1, r4
 800ac5e:	f7ff ff59 	bl	800ab14 <__sflush_r>
 800ac62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac64:	07da      	lsls	r2, r3, #31
 800ac66:	4605      	mov	r5, r0
 800ac68:	d4e0      	bmi.n	800ac2c <_fflush_r+0xc>
 800ac6a:	89a3      	ldrh	r3, [r4, #12]
 800ac6c:	059b      	lsls	r3, r3, #22
 800ac6e:	d4dd      	bmi.n	800ac2c <_fflush_r+0xc>
 800ac70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac72:	f000 f90d 	bl	800ae90 <__retarget_lock_release_recursive>
 800ac76:	e7d9      	b.n	800ac2c <_fflush_r+0xc>
 800ac78:	4b05      	ldr	r3, [pc, #20]	; (800ac90 <_fflush_r+0x70>)
 800ac7a:	429c      	cmp	r4, r3
 800ac7c:	d101      	bne.n	800ac82 <_fflush_r+0x62>
 800ac7e:	68ac      	ldr	r4, [r5, #8]
 800ac80:	e7df      	b.n	800ac42 <_fflush_r+0x22>
 800ac82:	4b04      	ldr	r3, [pc, #16]	; (800ac94 <_fflush_r+0x74>)
 800ac84:	429c      	cmp	r4, r3
 800ac86:	bf08      	it	eq
 800ac88:	68ec      	ldreq	r4, [r5, #12]
 800ac8a:	e7da      	b.n	800ac42 <_fflush_r+0x22>
 800ac8c:	0800c1c0 	.word	0x0800c1c0
 800ac90:	0800c1e0 	.word	0x0800c1e0
 800ac94:	0800c1a0 	.word	0x0800c1a0

0800ac98 <std>:
 800ac98:	2300      	movs	r3, #0
 800ac9a:	b510      	push	{r4, lr}
 800ac9c:	4604      	mov	r4, r0
 800ac9e:	e9c0 3300 	strd	r3, r3, [r0]
 800aca2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aca6:	6083      	str	r3, [r0, #8]
 800aca8:	8181      	strh	r1, [r0, #12]
 800acaa:	6643      	str	r3, [r0, #100]	; 0x64
 800acac:	81c2      	strh	r2, [r0, #14]
 800acae:	6183      	str	r3, [r0, #24]
 800acb0:	4619      	mov	r1, r3
 800acb2:	2208      	movs	r2, #8
 800acb4:	305c      	adds	r0, #92	; 0x5c
 800acb6:	f7fe fb67 	bl	8009388 <memset>
 800acba:	4b05      	ldr	r3, [pc, #20]	; (800acd0 <std+0x38>)
 800acbc:	6263      	str	r3, [r4, #36]	; 0x24
 800acbe:	4b05      	ldr	r3, [pc, #20]	; (800acd4 <std+0x3c>)
 800acc0:	62a3      	str	r3, [r4, #40]	; 0x28
 800acc2:	4b05      	ldr	r3, [pc, #20]	; (800acd8 <std+0x40>)
 800acc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800acc6:	4b05      	ldr	r3, [pc, #20]	; (800acdc <std+0x44>)
 800acc8:	6224      	str	r4, [r4, #32]
 800acca:	6323      	str	r3, [r4, #48]	; 0x30
 800accc:	bd10      	pop	{r4, pc}
 800acce:	bf00      	nop
 800acd0:	0800bb35 	.word	0x0800bb35
 800acd4:	0800bb57 	.word	0x0800bb57
 800acd8:	0800bb8f 	.word	0x0800bb8f
 800acdc:	0800bbb3 	.word	0x0800bbb3

0800ace0 <_cleanup_r>:
 800ace0:	4901      	ldr	r1, [pc, #4]	; (800ace8 <_cleanup_r+0x8>)
 800ace2:	f000 b8af 	b.w	800ae44 <_fwalk_reent>
 800ace6:	bf00      	nop
 800ace8:	0800ac21 	.word	0x0800ac21

0800acec <__sfmoreglue>:
 800acec:	b570      	push	{r4, r5, r6, lr}
 800acee:	2268      	movs	r2, #104	; 0x68
 800acf0:	1e4d      	subs	r5, r1, #1
 800acf2:	4355      	muls	r5, r2
 800acf4:	460e      	mov	r6, r1
 800acf6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800acfa:	f000 fd3d 	bl	800b778 <_malloc_r>
 800acfe:	4604      	mov	r4, r0
 800ad00:	b140      	cbz	r0, 800ad14 <__sfmoreglue+0x28>
 800ad02:	2100      	movs	r1, #0
 800ad04:	e9c0 1600 	strd	r1, r6, [r0]
 800ad08:	300c      	adds	r0, #12
 800ad0a:	60a0      	str	r0, [r4, #8]
 800ad0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ad10:	f7fe fb3a 	bl	8009388 <memset>
 800ad14:	4620      	mov	r0, r4
 800ad16:	bd70      	pop	{r4, r5, r6, pc}

0800ad18 <__sfp_lock_acquire>:
 800ad18:	4801      	ldr	r0, [pc, #4]	; (800ad20 <__sfp_lock_acquire+0x8>)
 800ad1a:	f000 b8b8 	b.w	800ae8e <__retarget_lock_acquire_recursive>
 800ad1e:	bf00      	nop
 800ad20:	200005fd 	.word	0x200005fd

0800ad24 <__sfp_lock_release>:
 800ad24:	4801      	ldr	r0, [pc, #4]	; (800ad2c <__sfp_lock_release+0x8>)
 800ad26:	f000 b8b3 	b.w	800ae90 <__retarget_lock_release_recursive>
 800ad2a:	bf00      	nop
 800ad2c:	200005fd 	.word	0x200005fd

0800ad30 <__sinit_lock_acquire>:
 800ad30:	4801      	ldr	r0, [pc, #4]	; (800ad38 <__sinit_lock_acquire+0x8>)
 800ad32:	f000 b8ac 	b.w	800ae8e <__retarget_lock_acquire_recursive>
 800ad36:	bf00      	nop
 800ad38:	200005fe 	.word	0x200005fe

0800ad3c <__sinit_lock_release>:
 800ad3c:	4801      	ldr	r0, [pc, #4]	; (800ad44 <__sinit_lock_release+0x8>)
 800ad3e:	f000 b8a7 	b.w	800ae90 <__retarget_lock_release_recursive>
 800ad42:	bf00      	nop
 800ad44:	200005fe 	.word	0x200005fe

0800ad48 <__sinit>:
 800ad48:	b510      	push	{r4, lr}
 800ad4a:	4604      	mov	r4, r0
 800ad4c:	f7ff fff0 	bl	800ad30 <__sinit_lock_acquire>
 800ad50:	69a3      	ldr	r3, [r4, #24]
 800ad52:	b11b      	cbz	r3, 800ad5c <__sinit+0x14>
 800ad54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad58:	f7ff bff0 	b.w	800ad3c <__sinit_lock_release>
 800ad5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ad60:	6523      	str	r3, [r4, #80]	; 0x50
 800ad62:	4b13      	ldr	r3, [pc, #76]	; (800adb0 <__sinit+0x68>)
 800ad64:	4a13      	ldr	r2, [pc, #76]	; (800adb4 <__sinit+0x6c>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	62a2      	str	r2, [r4, #40]	; 0x28
 800ad6a:	42a3      	cmp	r3, r4
 800ad6c:	bf04      	itt	eq
 800ad6e:	2301      	moveq	r3, #1
 800ad70:	61a3      	streq	r3, [r4, #24]
 800ad72:	4620      	mov	r0, r4
 800ad74:	f000 f820 	bl	800adb8 <__sfp>
 800ad78:	6060      	str	r0, [r4, #4]
 800ad7a:	4620      	mov	r0, r4
 800ad7c:	f000 f81c 	bl	800adb8 <__sfp>
 800ad80:	60a0      	str	r0, [r4, #8]
 800ad82:	4620      	mov	r0, r4
 800ad84:	f000 f818 	bl	800adb8 <__sfp>
 800ad88:	2200      	movs	r2, #0
 800ad8a:	60e0      	str	r0, [r4, #12]
 800ad8c:	2104      	movs	r1, #4
 800ad8e:	6860      	ldr	r0, [r4, #4]
 800ad90:	f7ff ff82 	bl	800ac98 <std>
 800ad94:	68a0      	ldr	r0, [r4, #8]
 800ad96:	2201      	movs	r2, #1
 800ad98:	2109      	movs	r1, #9
 800ad9a:	f7ff ff7d 	bl	800ac98 <std>
 800ad9e:	68e0      	ldr	r0, [r4, #12]
 800ada0:	2202      	movs	r2, #2
 800ada2:	2112      	movs	r1, #18
 800ada4:	f7ff ff78 	bl	800ac98 <std>
 800ada8:	2301      	movs	r3, #1
 800adaa:	61a3      	str	r3, [r4, #24]
 800adac:	e7d2      	b.n	800ad54 <__sinit+0xc>
 800adae:	bf00      	nop
 800adb0:	0800c0d8 	.word	0x0800c0d8
 800adb4:	0800ace1 	.word	0x0800ace1

0800adb8 <__sfp>:
 800adb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adba:	4607      	mov	r7, r0
 800adbc:	f7ff ffac 	bl	800ad18 <__sfp_lock_acquire>
 800adc0:	4b1e      	ldr	r3, [pc, #120]	; (800ae3c <__sfp+0x84>)
 800adc2:	681e      	ldr	r6, [r3, #0]
 800adc4:	69b3      	ldr	r3, [r6, #24]
 800adc6:	b913      	cbnz	r3, 800adce <__sfp+0x16>
 800adc8:	4630      	mov	r0, r6
 800adca:	f7ff ffbd 	bl	800ad48 <__sinit>
 800adce:	3648      	adds	r6, #72	; 0x48
 800add0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800add4:	3b01      	subs	r3, #1
 800add6:	d503      	bpl.n	800ade0 <__sfp+0x28>
 800add8:	6833      	ldr	r3, [r6, #0]
 800adda:	b30b      	cbz	r3, 800ae20 <__sfp+0x68>
 800addc:	6836      	ldr	r6, [r6, #0]
 800adde:	e7f7      	b.n	800add0 <__sfp+0x18>
 800ade0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ade4:	b9d5      	cbnz	r5, 800ae1c <__sfp+0x64>
 800ade6:	4b16      	ldr	r3, [pc, #88]	; (800ae40 <__sfp+0x88>)
 800ade8:	60e3      	str	r3, [r4, #12]
 800adea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800adee:	6665      	str	r5, [r4, #100]	; 0x64
 800adf0:	f000 f84c 	bl	800ae8c <__retarget_lock_init_recursive>
 800adf4:	f7ff ff96 	bl	800ad24 <__sfp_lock_release>
 800adf8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800adfc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ae00:	6025      	str	r5, [r4, #0]
 800ae02:	61a5      	str	r5, [r4, #24]
 800ae04:	2208      	movs	r2, #8
 800ae06:	4629      	mov	r1, r5
 800ae08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ae0c:	f7fe fabc 	bl	8009388 <memset>
 800ae10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ae14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ae18:	4620      	mov	r0, r4
 800ae1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae1c:	3468      	adds	r4, #104	; 0x68
 800ae1e:	e7d9      	b.n	800add4 <__sfp+0x1c>
 800ae20:	2104      	movs	r1, #4
 800ae22:	4638      	mov	r0, r7
 800ae24:	f7ff ff62 	bl	800acec <__sfmoreglue>
 800ae28:	4604      	mov	r4, r0
 800ae2a:	6030      	str	r0, [r6, #0]
 800ae2c:	2800      	cmp	r0, #0
 800ae2e:	d1d5      	bne.n	800addc <__sfp+0x24>
 800ae30:	f7ff ff78 	bl	800ad24 <__sfp_lock_release>
 800ae34:	230c      	movs	r3, #12
 800ae36:	603b      	str	r3, [r7, #0]
 800ae38:	e7ee      	b.n	800ae18 <__sfp+0x60>
 800ae3a:	bf00      	nop
 800ae3c:	0800c0d8 	.word	0x0800c0d8
 800ae40:	ffff0001 	.word	0xffff0001

0800ae44 <_fwalk_reent>:
 800ae44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae48:	4606      	mov	r6, r0
 800ae4a:	4688      	mov	r8, r1
 800ae4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ae50:	2700      	movs	r7, #0
 800ae52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae56:	f1b9 0901 	subs.w	r9, r9, #1
 800ae5a:	d505      	bpl.n	800ae68 <_fwalk_reent+0x24>
 800ae5c:	6824      	ldr	r4, [r4, #0]
 800ae5e:	2c00      	cmp	r4, #0
 800ae60:	d1f7      	bne.n	800ae52 <_fwalk_reent+0xe>
 800ae62:	4638      	mov	r0, r7
 800ae64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae68:	89ab      	ldrh	r3, [r5, #12]
 800ae6a:	2b01      	cmp	r3, #1
 800ae6c:	d907      	bls.n	800ae7e <_fwalk_reent+0x3a>
 800ae6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae72:	3301      	adds	r3, #1
 800ae74:	d003      	beq.n	800ae7e <_fwalk_reent+0x3a>
 800ae76:	4629      	mov	r1, r5
 800ae78:	4630      	mov	r0, r6
 800ae7a:	47c0      	blx	r8
 800ae7c:	4307      	orrs	r7, r0
 800ae7e:	3568      	adds	r5, #104	; 0x68
 800ae80:	e7e9      	b.n	800ae56 <_fwalk_reent+0x12>
	...

0800ae84 <_localeconv_r>:
 800ae84:	4800      	ldr	r0, [pc, #0]	; (800ae88 <_localeconv_r+0x4>)
 800ae86:	4770      	bx	lr
 800ae88:	20000178 	.word	0x20000178

0800ae8c <__retarget_lock_init_recursive>:
 800ae8c:	4770      	bx	lr

0800ae8e <__retarget_lock_acquire_recursive>:
 800ae8e:	4770      	bx	lr

0800ae90 <__retarget_lock_release_recursive>:
 800ae90:	4770      	bx	lr

0800ae92 <__swhatbuf_r>:
 800ae92:	b570      	push	{r4, r5, r6, lr}
 800ae94:	460e      	mov	r6, r1
 800ae96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae9a:	2900      	cmp	r1, #0
 800ae9c:	b096      	sub	sp, #88	; 0x58
 800ae9e:	4614      	mov	r4, r2
 800aea0:	461d      	mov	r5, r3
 800aea2:	da08      	bge.n	800aeb6 <__swhatbuf_r+0x24>
 800aea4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	602a      	str	r2, [r5, #0]
 800aeac:	061a      	lsls	r2, r3, #24
 800aeae:	d410      	bmi.n	800aed2 <__swhatbuf_r+0x40>
 800aeb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aeb4:	e00e      	b.n	800aed4 <__swhatbuf_r+0x42>
 800aeb6:	466a      	mov	r2, sp
 800aeb8:	f000 fed2 	bl	800bc60 <_fstat_r>
 800aebc:	2800      	cmp	r0, #0
 800aebe:	dbf1      	blt.n	800aea4 <__swhatbuf_r+0x12>
 800aec0:	9a01      	ldr	r2, [sp, #4]
 800aec2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aec6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aeca:	425a      	negs	r2, r3
 800aecc:	415a      	adcs	r2, r3
 800aece:	602a      	str	r2, [r5, #0]
 800aed0:	e7ee      	b.n	800aeb0 <__swhatbuf_r+0x1e>
 800aed2:	2340      	movs	r3, #64	; 0x40
 800aed4:	2000      	movs	r0, #0
 800aed6:	6023      	str	r3, [r4, #0]
 800aed8:	b016      	add	sp, #88	; 0x58
 800aeda:	bd70      	pop	{r4, r5, r6, pc}

0800aedc <__smakebuf_r>:
 800aedc:	898b      	ldrh	r3, [r1, #12]
 800aede:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aee0:	079d      	lsls	r5, r3, #30
 800aee2:	4606      	mov	r6, r0
 800aee4:	460c      	mov	r4, r1
 800aee6:	d507      	bpl.n	800aef8 <__smakebuf_r+0x1c>
 800aee8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aeec:	6023      	str	r3, [r4, #0]
 800aeee:	6123      	str	r3, [r4, #16]
 800aef0:	2301      	movs	r3, #1
 800aef2:	6163      	str	r3, [r4, #20]
 800aef4:	b002      	add	sp, #8
 800aef6:	bd70      	pop	{r4, r5, r6, pc}
 800aef8:	ab01      	add	r3, sp, #4
 800aefa:	466a      	mov	r2, sp
 800aefc:	f7ff ffc9 	bl	800ae92 <__swhatbuf_r>
 800af00:	9900      	ldr	r1, [sp, #0]
 800af02:	4605      	mov	r5, r0
 800af04:	4630      	mov	r0, r6
 800af06:	f000 fc37 	bl	800b778 <_malloc_r>
 800af0a:	b948      	cbnz	r0, 800af20 <__smakebuf_r+0x44>
 800af0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af10:	059a      	lsls	r2, r3, #22
 800af12:	d4ef      	bmi.n	800aef4 <__smakebuf_r+0x18>
 800af14:	f023 0303 	bic.w	r3, r3, #3
 800af18:	f043 0302 	orr.w	r3, r3, #2
 800af1c:	81a3      	strh	r3, [r4, #12]
 800af1e:	e7e3      	b.n	800aee8 <__smakebuf_r+0xc>
 800af20:	4b0d      	ldr	r3, [pc, #52]	; (800af58 <__smakebuf_r+0x7c>)
 800af22:	62b3      	str	r3, [r6, #40]	; 0x28
 800af24:	89a3      	ldrh	r3, [r4, #12]
 800af26:	6020      	str	r0, [r4, #0]
 800af28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af2c:	81a3      	strh	r3, [r4, #12]
 800af2e:	9b00      	ldr	r3, [sp, #0]
 800af30:	6163      	str	r3, [r4, #20]
 800af32:	9b01      	ldr	r3, [sp, #4]
 800af34:	6120      	str	r0, [r4, #16]
 800af36:	b15b      	cbz	r3, 800af50 <__smakebuf_r+0x74>
 800af38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af3c:	4630      	mov	r0, r6
 800af3e:	f000 fea1 	bl	800bc84 <_isatty_r>
 800af42:	b128      	cbz	r0, 800af50 <__smakebuf_r+0x74>
 800af44:	89a3      	ldrh	r3, [r4, #12]
 800af46:	f023 0303 	bic.w	r3, r3, #3
 800af4a:	f043 0301 	orr.w	r3, r3, #1
 800af4e:	81a3      	strh	r3, [r4, #12]
 800af50:	89a0      	ldrh	r0, [r4, #12]
 800af52:	4305      	orrs	r5, r0
 800af54:	81a5      	strh	r5, [r4, #12]
 800af56:	e7cd      	b.n	800aef4 <__smakebuf_r+0x18>
 800af58:	0800ace1 	.word	0x0800ace1

0800af5c <malloc>:
 800af5c:	4b02      	ldr	r3, [pc, #8]	; (800af68 <malloc+0xc>)
 800af5e:	4601      	mov	r1, r0
 800af60:	6818      	ldr	r0, [r3, #0]
 800af62:	f000 bc09 	b.w	800b778 <_malloc_r>
 800af66:	bf00      	nop
 800af68:	20000024 	.word	0x20000024

0800af6c <_Balloc>:
 800af6c:	b570      	push	{r4, r5, r6, lr}
 800af6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800af70:	4604      	mov	r4, r0
 800af72:	460d      	mov	r5, r1
 800af74:	b976      	cbnz	r6, 800af94 <_Balloc+0x28>
 800af76:	2010      	movs	r0, #16
 800af78:	f7ff fff0 	bl	800af5c <malloc>
 800af7c:	4602      	mov	r2, r0
 800af7e:	6260      	str	r0, [r4, #36]	; 0x24
 800af80:	b920      	cbnz	r0, 800af8c <_Balloc+0x20>
 800af82:	4b18      	ldr	r3, [pc, #96]	; (800afe4 <_Balloc+0x78>)
 800af84:	4818      	ldr	r0, [pc, #96]	; (800afe8 <_Balloc+0x7c>)
 800af86:	2166      	movs	r1, #102	; 0x66
 800af88:	f000 fe2a 	bl	800bbe0 <__assert_func>
 800af8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af90:	6006      	str	r6, [r0, #0]
 800af92:	60c6      	str	r6, [r0, #12]
 800af94:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800af96:	68f3      	ldr	r3, [r6, #12]
 800af98:	b183      	cbz	r3, 800afbc <_Balloc+0x50>
 800af9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af9c:	68db      	ldr	r3, [r3, #12]
 800af9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800afa2:	b9b8      	cbnz	r0, 800afd4 <_Balloc+0x68>
 800afa4:	2101      	movs	r1, #1
 800afa6:	fa01 f605 	lsl.w	r6, r1, r5
 800afaa:	1d72      	adds	r2, r6, #5
 800afac:	0092      	lsls	r2, r2, #2
 800afae:	4620      	mov	r0, r4
 800afb0:	f000 fb60 	bl	800b674 <_calloc_r>
 800afb4:	b160      	cbz	r0, 800afd0 <_Balloc+0x64>
 800afb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800afba:	e00e      	b.n	800afda <_Balloc+0x6e>
 800afbc:	2221      	movs	r2, #33	; 0x21
 800afbe:	2104      	movs	r1, #4
 800afc0:	4620      	mov	r0, r4
 800afc2:	f000 fb57 	bl	800b674 <_calloc_r>
 800afc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afc8:	60f0      	str	r0, [r6, #12]
 800afca:	68db      	ldr	r3, [r3, #12]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d1e4      	bne.n	800af9a <_Balloc+0x2e>
 800afd0:	2000      	movs	r0, #0
 800afd2:	bd70      	pop	{r4, r5, r6, pc}
 800afd4:	6802      	ldr	r2, [r0, #0]
 800afd6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800afda:	2300      	movs	r3, #0
 800afdc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800afe0:	e7f7      	b.n	800afd2 <_Balloc+0x66>
 800afe2:	bf00      	nop
 800afe4:	0800c11d 	.word	0x0800c11d
 800afe8:	0800c200 	.word	0x0800c200

0800afec <_Bfree>:
 800afec:	b570      	push	{r4, r5, r6, lr}
 800afee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aff0:	4605      	mov	r5, r0
 800aff2:	460c      	mov	r4, r1
 800aff4:	b976      	cbnz	r6, 800b014 <_Bfree+0x28>
 800aff6:	2010      	movs	r0, #16
 800aff8:	f7ff ffb0 	bl	800af5c <malloc>
 800affc:	4602      	mov	r2, r0
 800affe:	6268      	str	r0, [r5, #36]	; 0x24
 800b000:	b920      	cbnz	r0, 800b00c <_Bfree+0x20>
 800b002:	4b09      	ldr	r3, [pc, #36]	; (800b028 <_Bfree+0x3c>)
 800b004:	4809      	ldr	r0, [pc, #36]	; (800b02c <_Bfree+0x40>)
 800b006:	218a      	movs	r1, #138	; 0x8a
 800b008:	f000 fdea 	bl	800bbe0 <__assert_func>
 800b00c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b010:	6006      	str	r6, [r0, #0]
 800b012:	60c6      	str	r6, [r0, #12]
 800b014:	b13c      	cbz	r4, 800b026 <_Bfree+0x3a>
 800b016:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b018:	6862      	ldr	r2, [r4, #4]
 800b01a:	68db      	ldr	r3, [r3, #12]
 800b01c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b020:	6021      	str	r1, [r4, #0]
 800b022:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b026:	bd70      	pop	{r4, r5, r6, pc}
 800b028:	0800c11d 	.word	0x0800c11d
 800b02c:	0800c200 	.word	0x0800c200

0800b030 <__multadd>:
 800b030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b034:	690d      	ldr	r5, [r1, #16]
 800b036:	4607      	mov	r7, r0
 800b038:	460c      	mov	r4, r1
 800b03a:	461e      	mov	r6, r3
 800b03c:	f101 0c14 	add.w	ip, r1, #20
 800b040:	2000      	movs	r0, #0
 800b042:	f8dc 3000 	ldr.w	r3, [ip]
 800b046:	b299      	uxth	r1, r3
 800b048:	fb02 6101 	mla	r1, r2, r1, r6
 800b04c:	0c1e      	lsrs	r6, r3, #16
 800b04e:	0c0b      	lsrs	r3, r1, #16
 800b050:	fb02 3306 	mla	r3, r2, r6, r3
 800b054:	b289      	uxth	r1, r1
 800b056:	3001      	adds	r0, #1
 800b058:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b05c:	4285      	cmp	r5, r0
 800b05e:	f84c 1b04 	str.w	r1, [ip], #4
 800b062:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b066:	dcec      	bgt.n	800b042 <__multadd+0x12>
 800b068:	b30e      	cbz	r6, 800b0ae <__multadd+0x7e>
 800b06a:	68a3      	ldr	r3, [r4, #8]
 800b06c:	42ab      	cmp	r3, r5
 800b06e:	dc19      	bgt.n	800b0a4 <__multadd+0x74>
 800b070:	6861      	ldr	r1, [r4, #4]
 800b072:	4638      	mov	r0, r7
 800b074:	3101      	adds	r1, #1
 800b076:	f7ff ff79 	bl	800af6c <_Balloc>
 800b07a:	4680      	mov	r8, r0
 800b07c:	b928      	cbnz	r0, 800b08a <__multadd+0x5a>
 800b07e:	4602      	mov	r2, r0
 800b080:	4b0c      	ldr	r3, [pc, #48]	; (800b0b4 <__multadd+0x84>)
 800b082:	480d      	ldr	r0, [pc, #52]	; (800b0b8 <__multadd+0x88>)
 800b084:	21b5      	movs	r1, #181	; 0xb5
 800b086:	f000 fdab 	bl	800bbe0 <__assert_func>
 800b08a:	6922      	ldr	r2, [r4, #16]
 800b08c:	3202      	adds	r2, #2
 800b08e:	f104 010c 	add.w	r1, r4, #12
 800b092:	0092      	lsls	r2, r2, #2
 800b094:	300c      	adds	r0, #12
 800b096:	f7fe f969 	bl	800936c <memcpy>
 800b09a:	4621      	mov	r1, r4
 800b09c:	4638      	mov	r0, r7
 800b09e:	f7ff ffa5 	bl	800afec <_Bfree>
 800b0a2:	4644      	mov	r4, r8
 800b0a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b0a8:	3501      	adds	r5, #1
 800b0aa:	615e      	str	r6, [r3, #20]
 800b0ac:	6125      	str	r5, [r4, #16]
 800b0ae:	4620      	mov	r0, r4
 800b0b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0b4:	0800c18f 	.word	0x0800c18f
 800b0b8:	0800c200 	.word	0x0800c200

0800b0bc <__hi0bits>:
 800b0bc:	0c03      	lsrs	r3, r0, #16
 800b0be:	041b      	lsls	r3, r3, #16
 800b0c0:	b9d3      	cbnz	r3, 800b0f8 <__hi0bits+0x3c>
 800b0c2:	0400      	lsls	r0, r0, #16
 800b0c4:	2310      	movs	r3, #16
 800b0c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b0ca:	bf04      	itt	eq
 800b0cc:	0200      	lsleq	r0, r0, #8
 800b0ce:	3308      	addeq	r3, #8
 800b0d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b0d4:	bf04      	itt	eq
 800b0d6:	0100      	lsleq	r0, r0, #4
 800b0d8:	3304      	addeq	r3, #4
 800b0da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b0de:	bf04      	itt	eq
 800b0e0:	0080      	lsleq	r0, r0, #2
 800b0e2:	3302      	addeq	r3, #2
 800b0e4:	2800      	cmp	r0, #0
 800b0e6:	db05      	blt.n	800b0f4 <__hi0bits+0x38>
 800b0e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b0ec:	f103 0301 	add.w	r3, r3, #1
 800b0f0:	bf08      	it	eq
 800b0f2:	2320      	moveq	r3, #32
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	4770      	bx	lr
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	e7e4      	b.n	800b0c6 <__hi0bits+0xa>

0800b0fc <__lo0bits>:
 800b0fc:	6803      	ldr	r3, [r0, #0]
 800b0fe:	f013 0207 	ands.w	r2, r3, #7
 800b102:	4601      	mov	r1, r0
 800b104:	d00b      	beq.n	800b11e <__lo0bits+0x22>
 800b106:	07da      	lsls	r2, r3, #31
 800b108:	d423      	bmi.n	800b152 <__lo0bits+0x56>
 800b10a:	0798      	lsls	r0, r3, #30
 800b10c:	bf49      	itett	mi
 800b10e:	085b      	lsrmi	r3, r3, #1
 800b110:	089b      	lsrpl	r3, r3, #2
 800b112:	2001      	movmi	r0, #1
 800b114:	600b      	strmi	r3, [r1, #0]
 800b116:	bf5c      	itt	pl
 800b118:	600b      	strpl	r3, [r1, #0]
 800b11a:	2002      	movpl	r0, #2
 800b11c:	4770      	bx	lr
 800b11e:	b298      	uxth	r0, r3
 800b120:	b9a8      	cbnz	r0, 800b14e <__lo0bits+0x52>
 800b122:	0c1b      	lsrs	r3, r3, #16
 800b124:	2010      	movs	r0, #16
 800b126:	b2da      	uxtb	r2, r3
 800b128:	b90a      	cbnz	r2, 800b12e <__lo0bits+0x32>
 800b12a:	3008      	adds	r0, #8
 800b12c:	0a1b      	lsrs	r3, r3, #8
 800b12e:	071a      	lsls	r2, r3, #28
 800b130:	bf04      	itt	eq
 800b132:	091b      	lsreq	r3, r3, #4
 800b134:	3004      	addeq	r0, #4
 800b136:	079a      	lsls	r2, r3, #30
 800b138:	bf04      	itt	eq
 800b13a:	089b      	lsreq	r3, r3, #2
 800b13c:	3002      	addeq	r0, #2
 800b13e:	07da      	lsls	r2, r3, #31
 800b140:	d403      	bmi.n	800b14a <__lo0bits+0x4e>
 800b142:	085b      	lsrs	r3, r3, #1
 800b144:	f100 0001 	add.w	r0, r0, #1
 800b148:	d005      	beq.n	800b156 <__lo0bits+0x5a>
 800b14a:	600b      	str	r3, [r1, #0]
 800b14c:	4770      	bx	lr
 800b14e:	4610      	mov	r0, r2
 800b150:	e7e9      	b.n	800b126 <__lo0bits+0x2a>
 800b152:	2000      	movs	r0, #0
 800b154:	4770      	bx	lr
 800b156:	2020      	movs	r0, #32
 800b158:	4770      	bx	lr
	...

0800b15c <__i2b>:
 800b15c:	b510      	push	{r4, lr}
 800b15e:	460c      	mov	r4, r1
 800b160:	2101      	movs	r1, #1
 800b162:	f7ff ff03 	bl	800af6c <_Balloc>
 800b166:	4602      	mov	r2, r0
 800b168:	b928      	cbnz	r0, 800b176 <__i2b+0x1a>
 800b16a:	4b05      	ldr	r3, [pc, #20]	; (800b180 <__i2b+0x24>)
 800b16c:	4805      	ldr	r0, [pc, #20]	; (800b184 <__i2b+0x28>)
 800b16e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b172:	f000 fd35 	bl	800bbe0 <__assert_func>
 800b176:	2301      	movs	r3, #1
 800b178:	6144      	str	r4, [r0, #20]
 800b17a:	6103      	str	r3, [r0, #16]
 800b17c:	bd10      	pop	{r4, pc}
 800b17e:	bf00      	nop
 800b180:	0800c18f 	.word	0x0800c18f
 800b184:	0800c200 	.word	0x0800c200

0800b188 <__multiply>:
 800b188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b18c:	4691      	mov	r9, r2
 800b18e:	690a      	ldr	r2, [r1, #16]
 800b190:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b194:	429a      	cmp	r2, r3
 800b196:	bfb8      	it	lt
 800b198:	460b      	movlt	r3, r1
 800b19a:	460c      	mov	r4, r1
 800b19c:	bfbc      	itt	lt
 800b19e:	464c      	movlt	r4, r9
 800b1a0:	4699      	movlt	r9, r3
 800b1a2:	6927      	ldr	r7, [r4, #16]
 800b1a4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b1a8:	68a3      	ldr	r3, [r4, #8]
 800b1aa:	6861      	ldr	r1, [r4, #4]
 800b1ac:	eb07 060a 	add.w	r6, r7, sl
 800b1b0:	42b3      	cmp	r3, r6
 800b1b2:	b085      	sub	sp, #20
 800b1b4:	bfb8      	it	lt
 800b1b6:	3101      	addlt	r1, #1
 800b1b8:	f7ff fed8 	bl	800af6c <_Balloc>
 800b1bc:	b930      	cbnz	r0, 800b1cc <__multiply+0x44>
 800b1be:	4602      	mov	r2, r0
 800b1c0:	4b44      	ldr	r3, [pc, #272]	; (800b2d4 <__multiply+0x14c>)
 800b1c2:	4845      	ldr	r0, [pc, #276]	; (800b2d8 <__multiply+0x150>)
 800b1c4:	f240 115d 	movw	r1, #349	; 0x15d
 800b1c8:	f000 fd0a 	bl	800bbe0 <__assert_func>
 800b1cc:	f100 0514 	add.w	r5, r0, #20
 800b1d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b1d4:	462b      	mov	r3, r5
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	4543      	cmp	r3, r8
 800b1da:	d321      	bcc.n	800b220 <__multiply+0x98>
 800b1dc:	f104 0314 	add.w	r3, r4, #20
 800b1e0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b1e4:	f109 0314 	add.w	r3, r9, #20
 800b1e8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b1ec:	9202      	str	r2, [sp, #8]
 800b1ee:	1b3a      	subs	r2, r7, r4
 800b1f0:	3a15      	subs	r2, #21
 800b1f2:	f022 0203 	bic.w	r2, r2, #3
 800b1f6:	3204      	adds	r2, #4
 800b1f8:	f104 0115 	add.w	r1, r4, #21
 800b1fc:	428f      	cmp	r7, r1
 800b1fe:	bf38      	it	cc
 800b200:	2204      	movcc	r2, #4
 800b202:	9201      	str	r2, [sp, #4]
 800b204:	9a02      	ldr	r2, [sp, #8]
 800b206:	9303      	str	r3, [sp, #12]
 800b208:	429a      	cmp	r2, r3
 800b20a:	d80c      	bhi.n	800b226 <__multiply+0x9e>
 800b20c:	2e00      	cmp	r6, #0
 800b20e:	dd03      	ble.n	800b218 <__multiply+0x90>
 800b210:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b214:	2b00      	cmp	r3, #0
 800b216:	d05a      	beq.n	800b2ce <__multiply+0x146>
 800b218:	6106      	str	r6, [r0, #16]
 800b21a:	b005      	add	sp, #20
 800b21c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b220:	f843 2b04 	str.w	r2, [r3], #4
 800b224:	e7d8      	b.n	800b1d8 <__multiply+0x50>
 800b226:	f8b3 a000 	ldrh.w	sl, [r3]
 800b22a:	f1ba 0f00 	cmp.w	sl, #0
 800b22e:	d024      	beq.n	800b27a <__multiply+0xf2>
 800b230:	f104 0e14 	add.w	lr, r4, #20
 800b234:	46a9      	mov	r9, r5
 800b236:	f04f 0c00 	mov.w	ip, #0
 800b23a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b23e:	f8d9 1000 	ldr.w	r1, [r9]
 800b242:	fa1f fb82 	uxth.w	fp, r2
 800b246:	b289      	uxth	r1, r1
 800b248:	fb0a 110b 	mla	r1, sl, fp, r1
 800b24c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b250:	f8d9 2000 	ldr.w	r2, [r9]
 800b254:	4461      	add	r1, ip
 800b256:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b25a:	fb0a c20b 	mla	r2, sl, fp, ip
 800b25e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b262:	b289      	uxth	r1, r1
 800b264:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b268:	4577      	cmp	r7, lr
 800b26a:	f849 1b04 	str.w	r1, [r9], #4
 800b26e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b272:	d8e2      	bhi.n	800b23a <__multiply+0xb2>
 800b274:	9a01      	ldr	r2, [sp, #4]
 800b276:	f845 c002 	str.w	ip, [r5, r2]
 800b27a:	9a03      	ldr	r2, [sp, #12]
 800b27c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b280:	3304      	adds	r3, #4
 800b282:	f1b9 0f00 	cmp.w	r9, #0
 800b286:	d020      	beq.n	800b2ca <__multiply+0x142>
 800b288:	6829      	ldr	r1, [r5, #0]
 800b28a:	f104 0c14 	add.w	ip, r4, #20
 800b28e:	46ae      	mov	lr, r5
 800b290:	f04f 0a00 	mov.w	sl, #0
 800b294:	f8bc b000 	ldrh.w	fp, [ip]
 800b298:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b29c:	fb09 220b 	mla	r2, r9, fp, r2
 800b2a0:	4492      	add	sl, r2
 800b2a2:	b289      	uxth	r1, r1
 800b2a4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b2a8:	f84e 1b04 	str.w	r1, [lr], #4
 800b2ac:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b2b0:	f8be 1000 	ldrh.w	r1, [lr]
 800b2b4:	0c12      	lsrs	r2, r2, #16
 800b2b6:	fb09 1102 	mla	r1, r9, r2, r1
 800b2ba:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b2be:	4567      	cmp	r7, ip
 800b2c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b2c4:	d8e6      	bhi.n	800b294 <__multiply+0x10c>
 800b2c6:	9a01      	ldr	r2, [sp, #4]
 800b2c8:	50a9      	str	r1, [r5, r2]
 800b2ca:	3504      	adds	r5, #4
 800b2cc:	e79a      	b.n	800b204 <__multiply+0x7c>
 800b2ce:	3e01      	subs	r6, #1
 800b2d0:	e79c      	b.n	800b20c <__multiply+0x84>
 800b2d2:	bf00      	nop
 800b2d4:	0800c18f 	.word	0x0800c18f
 800b2d8:	0800c200 	.word	0x0800c200

0800b2dc <__pow5mult>:
 800b2dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2e0:	4615      	mov	r5, r2
 800b2e2:	f012 0203 	ands.w	r2, r2, #3
 800b2e6:	4606      	mov	r6, r0
 800b2e8:	460f      	mov	r7, r1
 800b2ea:	d007      	beq.n	800b2fc <__pow5mult+0x20>
 800b2ec:	4c25      	ldr	r4, [pc, #148]	; (800b384 <__pow5mult+0xa8>)
 800b2ee:	3a01      	subs	r2, #1
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b2f6:	f7ff fe9b 	bl	800b030 <__multadd>
 800b2fa:	4607      	mov	r7, r0
 800b2fc:	10ad      	asrs	r5, r5, #2
 800b2fe:	d03d      	beq.n	800b37c <__pow5mult+0xa0>
 800b300:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b302:	b97c      	cbnz	r4, 800b324 <__pow5mult+0x48>
 800b304:	2010      	movs	r0, #16
 800b306:	f7ff fe29 	bl	800af5c <malloc>
 800b30a:	4602      	mov	r2, r0
 800b30c:	6270      	str	r0, [r6, #36]	; 0x24
 800b30e:	b928      	cbnz	r0, 800b31c <__pow5mult+0x40>
 800b310:	4b1d      	ldr	r3, [pc, #116]	; (800b388 <__pow5mult+0xac>)
 800b312:	481e      	ldr	r0, [pc, #120]	; (800b38c <__pow5mult+0xb0>)
 800b314:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b318:	f000 fc62 	bl	800bbe0 <__assert_func>
 800b31c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b320:	6004      	str	r4, [r0, #0]
 800b322:	60c4      	str	r4, [r0, #12]
 800b324:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b328:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b32c:	b94c      	cbnz	r4, 800b342 <__pow5mult+0x66>
 800b32e:	f240 2171 	movw	r1, #625	; 0x271
 800b332:	4630      	mov	r0, r6
 800b334:	f7ff ff12 	bl	800b15c <__i2b>
 800b338:	2300      	movs	r3, #0
 800b33a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b33e:	4604      	mov	r4, r0
 800b340:	6003      	str	r3, [r0, #0]
 800b342:	f04f 0900 	mov.w	r9, #0
 800b346:	07eb      	lsls	r3, r5, #31
 800b348:	d50a      	bpl.n	800b360 <__pow5mult+0x84>
 800b34a:	4639      	mov	r1, r7
 800b34c:	4622      	mov	r2, r4
 800b34e:	4630      	mov	r0, r6
 800b350:	f7ff ff1a 	bl	800b188 <__multiply>
 800b354:	4639      	mov	r1, r7
 800b356:	4680      	mov	r8, r0
 800b358:	4630      	mov	r0, r6
 800b35a:	f7ff fe47 	bl	800afec <_Bfree>
 800b35e:	4647      	mov	r7, r8
 800b360:	106d      	asrs	r5, r5, #1
 800b362:	d00b      	beq.n	800b37c <__pow5mult+0xa0>
 800b364:	6820      	ldr	r0, [r4, #0]
 800b366:	b938      	cbnz	r0, 800b378 <__pow5mult+0x9c>
 800b368:	4622      	mov	r2, r4
 800b36a:	4621      	mov	r1, r4
 800b36c:	4630      	mov	r0, r6
 800b36e:	f7ff ff0b 	bl	800b188 <__multiply>
 800b372:	6020      	str	r0, [r4, #0]
 800b374:	f8c0 9000 	str.w	r9, [r0]
 800b378:	4604      	mov	r4, r0
 800b37a:	e7e4      	b.n	800b346 <__pow5mult+0x6a>
 800b37c:	4638      	mov	r0, r7
 800b37e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b382:	bf00      	nop
 800b384:	0800c350 	.word	0x0800c350
 800b388:	0800c11d 	.word	0x0800c11d
 800b38c:	0800c200 	.word	0x0800c200

0800b390 <__lshift>:
 800b390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b394:	460c      	mov	r4, r1
 800b396:	6849      	ldr	r1, [r1, #4]
 800b398:	6923      	ldr	r3, [r4, #16]
 800b39a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b39e:	68a3      	ldr	r3, [r4, #8]
 800b3a0:	4607      	mov	r7, r0
 800b3a2:	4691      	mov	r9, r2
 800b3a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b3a8:	f108 0601 	add.w	r6, r8, #1
 800b3ac:	42b3      	cmp	r3, r6
 800b3ae:	db0b      	blt.n	800b3c8 <__lshift+0x38>
 800b3b0:	4638      	mov	r0, r7
 800b3b2:	f7ff fddb 	bl	800af6c <_Balloc>
 800b3b6:	4605      	mov	r5, r0
 800b3b8:	b948      	cbnz	r0, 800b3ce <__lshift+0x3e>
 800b3ba:	4602      	mov	r2, r0
 800b3bc:	4b2a      	ldr	r3, [pc, #168]	; (800b468 <__lshift+0xd8>)
 800b3be:	482b      	ldr	r0, [pc, #172]	; (800b46c <__lshift+0xdc>)
 800b3c0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b3c4:	f000 fc0c 	bl	800bbe0 <__assert_func>
 800b3c8:	3101      	adds	r1, #1
 800b3ca:	005b      	lsls	r3, r3, #1
 800b3cc:	e7ee      	b.n	800b3ac <__lshift+0x1c>
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	f100 0114 	add.w	r1, r0, #20
 800b3d4:	f100 0210 	add.w	r2, r0, #16
 800b3d8:	4618      	mov	r0, r3
 800b3da:	4553      	cmp	r3, sl
 800b3dc:	db37      	blt.n	800b44e <__lshift+0xbe>
 800b3de:	6920      	ldr	r0, [r4, #16]
 800b3e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b3e4:	f104 0314 	add.w	r3, r4, #20
 800b3e8:	f019 091f 	ands.w	r9, r9, #31
 800b3ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b3f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b3f4:	d02f      	beq.n	800b456 <__lshift+0xc6>
 800b3f6:	f1c9 0e20 	rsb	lr, r9, #32
 800b3fa:	468a      	mov	sl, r1
 800b3fc:	f04f 0c00 	mov.w	ip, #0
 800b400:	681a      	ldr	r2, [r3, #0]
 800b402:	fa02 f209 	lsl.w	r2, r2, r9
 800b406:	ea42 020c 	orr.w	r2, r2, ip
 800b40a:	f84a 2b04 	str.w	r2, [sl], #4
 800b40e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b412:	4298      	cmp	r0, r3
 800b414:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b418:	d8f2      	bhi.n	800b400 <__lshift+0x70>
 800b41a:	1b03      	subs	r3, r0, r4
 800b41c:	3b15      	subs	r3, #21
 800b41e:	f023 0303 	bic.w	r3, r3, #3
 800b422:	3304      	adds	r3, #4
 800b424:	f104 0215 	add.w	r2, r4, #21
 800b428:	4290      	cmp	r0, r2
 800b42a:	bf38      	it	cc
 800b42c:	2304      	movcc	r3, #4
 800b42e:	f841 c003 	str.w	ip, [r1, r3]
 800b432:	f1bc 0f00 	cmp.w	ip, #0
 800b436:	d001      	beq.n	800b43c <__lshift+0xac>
 800b438:	f108 0602 	add.w	r6, r8, #2
 800b43c:	3e01      	subs	r6, #1
 800b43e:	4638      	mov	r0, r7
 800b440:	612e      	str	r6, [r5, #16]
 800b442:	4621      	mov	r1, r4
 800b444:	f7ff fdd2 	bl	800afec <_Bfree>
 800b448:	4628      	mov	r0, r5
 800b44a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b44e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b452:	3301      	adds	r3, #1
 800b454:	e7c1      	b.n	800b3da <__lshift+0x4a>
 800b456:	3904      	subs	r1, #4
 800b458:	f853 2b04 	ldr.w	r2, [r3], #4
 800b45c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b460:	4298      	cmp	r0, r3
 800b462:	d8f9      	bhi.n	800b458 <__lshift+0xc8>
 800b464:	e7ea      	b.n	800b43c <__lshift+0xac>
 800b466:	bf00      	nop
 800b468:	0800c18f 	.word	0x0800c18f
 800b46c:	0800c200 	.word	0x0800c200

0800b470 <__mcmp>:
 800b470:	b530      	push	{r4, r5, lr}
 800b472:	6902      	ldr	r2, [r0, #16]
 800b474:	690c      	ldr	r4, [r1, #16]
 800b476:	1b12      	subs	r2, r2, r4
 800b478:	d10e      	bne.n	800b498 <__mcmp+0x28>
 800b47a:	f100 0314 	add.w	r3, r0, #20
 800b47e:	3114      	adds	r1, #20
 800b480:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b484:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b488:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b48c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b490:	42a5      	cmp	r5, r4
 800b492:	d003      	beq.n	800b49c <__mcmp+0x2c>
 800b494:	d305      	bcc.n	800b4a2 <__mcmp+0x32>
 800b496:	2201      	movs	r2, #1
 800b498:	4610      	mov	r0, r2
 800b49a:	bd30      	pop	{r4, r5, pc}
 800b49c:	4283      	cmp	r3, r0
 800b49e:	d3f3      	bcc.n	800b488 <__mcmp+0x18>
 800b4a0:	e7fa      	b.n	800b498 <__mcmp+0x28>
 800b4a2:	f04f 32ff 	mov.w	r2, #4294967295
 800b4a6:	e7f7      	b.n	800b498 <__mcmp+0x28>

0800b4a8 <__mdiff>:
 800b4a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4ac:	460c      	mov	r4, r1
 800b4ae:	4606      	mov	r6, r0
 800b4b0:	4611      	mov	r1, r2
 800b4b2:	4620      	mov	r0, r4
 800b4b4:	4690      	mov	r8, r2
 800b4b6:	f7ff ffdb 	bl	800b470 <__mcmp>
 800b4ba:	1e05      	subs	r5, r0, #0
 800b4bc:	d110      	bne.n	800b4e0 <__mdiff+0x38>
 800b4be:	4629      	mov	r1, r5
 800b4c0:	4630      	mov	r0, r6
 800b4c2:	f7ff fd53 	bl	800af6c <_Balloc>
 800b4c6:	b930      	cbnz	r0, 800b4d6 <__mdiff+0x2e>
 800b4c8:	4b3a      	ldr	r3, [pc, #232]	; (800b5b4 <__mdiff+0x10c>)
 800b4ca:	4602      	mov	r2, r0
 800b4cc:	f240 2132 	movw	r1, #562	; 0x232
 800b4d0:	4839      	ldr	r0, [pc, #228]	; (800b5b8 <__mdiff+0x110>)
 800b4d2:	f000 fb85 	bl	800bbe0 <__assert_func>
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b4dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4e0:	bfa4      	itt	ge
 800b4e2:	4643      	movge	r3, r8
 800b4e4:	46a0      	movge	r8, r4
 800b4e6:	4630      	mov	r0, r6
 800b4e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b4ec:	bfa6      	itte	ge
 800b4ee:	461c      	movge	r4, r3
 800b4f0:	2500      	movge	r5, #0
 800b4f2:	2501      	movlt	r5, #1
 800b4f4:	f7ff fd3a 	bl	800af6c <_Balloc>
 800b4f8:	b920      	cbnz	r0, 800b504 <__mdiff+0x5c>
 800b4fa:	4b2e      	ldr	r3, [pc, #184]	; (800b5b4 <__mdiff+0x10c>)
 800b4fc:	4602      	mov	r2, r0
 800b4fe:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b502:	e7e5      	b.n	800b4d0 <__mdiff+0x28>
 800b504:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b508:	6926      	ldr	r6, [r4, #16]
 800b50a:	60c5      	str	r5, [r0, #12]
 800b50c:	f104 0914 	add.w	r9, r4, #20
 800b510:	f108 0514 	add.w	r5, r8, #20
 800b514:	f100 0e14 	add.w	lr, r0, #20
 800b518:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b51c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b520:	f108 0210 	add.w	r2, r8, #16
 800b524:	46f2      	mov	sl, lr
 800b526:	2100      	movs	r1, #0
 800b528:	f859 3b04 	ldr.w	r3, [r9], #4
 800b52c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b530:	fa1f f883 	uxth.w	r8, r3
 800b534:	fa11 f18b 	uxtah	r1, r1, fp
 800b538:	0c1b      	lsrs	r3, r3, #16
 800b53a:	eba1 0808 	sub.w	r8, r1, r8
 800b53e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b542:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b546:	fa1f f888 	uxth.w	r8, r8
 800b54a:	1419      	asrs	r1, r3, #16
 800b54c:	454e      	cmp	r6, r9
 800b54e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b552:	f84a 3b04 	str.w	r3, [sl], #4
 800b556:	d8e7      	bhi.n	800b528 <__mdiff+0x80>
 800b558:	1b33      	subs	r3, r6, r4
 800b55a:	3b15      	subs	r3, #21
 800b55c:	f023 0303 	bic.w	r3, r3, #3
 800b560:	3304      	adds	r3, #4
 800b562:	3415      	adds	r4, #21
 800b564:	42a6      	cmp	r6, r4
 800b566:	bf38      	it	cc
 800b568:	2304      	movcc	r3, #4
 800b56a:	441d      	add	r5, r3
 800b56c:	4473      	add	r3, lr
 800b56e:	469e      	mov	lr, r3
 800b570:	462e      	mov	r6, r5
 800b572:	4566      	cmp	r6, ip
 800b574:	d30e      	bcc.n	800b594 <__mdiff+0xec>
 800b576:	f10c 0203 	add.w	r2, ip, #3
 800b57a:	1b52      	subs	r2, r2, r5
 800b57c:	f022 0203 	bic.w	r2, r2, #3
 800b580:	3d03      	subs	r5, #3
 800b582:	45ac      	cmp	ip, r5
 800b584:	bf38      	it	cc
 800b586:	2200      	movcc	r2, #0
 800b588:	441a      	add	r2, r3
 800b58a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b58e:	b17b      	cbz	r3, 800b5b0 <__mdiff+0x108>
 800b590:	6107      	str	r7, [r0, #16]
 800b592:	e7a3      	b.n	800b4dc <__mdiff+0x34>
 800b594:	f856 8b04 	ldr.w	r8, [r6], #4
 800b598:	fa11 f288 	uxtah	r2, r1, r8
 800b59c:	1414      	asrs	r4, r2, #16
 800b59e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b5a2:	b292      	uxth	r2, r2
 800b5a4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b5a8:	f84e 2b04 	str.w	r2, [lr], #4
 800b5ac:	1421      	asrs	r1, r4, #16
 800b5ae:	e7e0      	b.n	800b572 <__mdiff+0xca>
 800b5b0:	3f01      	subs	r7, #1
 800b5b2:	e7ea      	b.n	800b58a <__mdiff+0xe2>
 800b5b4:	0800c18f 	.word	0x0800c18f
 800b5b8:	0800c200 	.word	0x0800c200

0800b5bc <__d2b>:
 800b5bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b5c0:	4689      	mov	r9, r1
 800b5c2:	2101      	movs	r1, #1
 800b5c4:	ec57 6b10 	vmov	r6, r7, d0
 800b5c8:	4690      	mov	r8, r2
 800b5ca:	f7ff fccf 	bl	800af6c <_Balloc>
 800b5ce:	4604      	mov	r4, r0
 800b5d0:	b930      	cbnz	r0, 800b5e0 <__d2b+0x24>
 800b5d2:	4602      	mov	r2, r0
 800b5d4:	4b25      	ldr	r3, [pc, #148]	; (800b66c <__d2b+0xb0>)
 800b5d6:	4826      	ldr	r0, [pc, #152]	; (800b670 <__d2b+0xb4>)
 800b5d8:	f240 310a 	movw	r1, #778	; 0x30a
 800b5dc:	f000 fb00 	bl	800bbe0 <__assert_func>
 800b5e0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b5e4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b5e8:	bb35      	cbnz	r5, 800b638 <__d2b+0x7c>
 800b5ea:	2e00      	cmp	r6, #0
 800b5ec:	9301      	str	r3, [sp, #4]
 800b5ee:	d028      	beq.n	800b642 <__d2b+0x86>
 800b5f0:	4668      	mov	r0, sp
 800b5f2:	9600      	str	r6, [sp, #0]
 800b5f4:	f7ff fd82 	bl	800b0fc <__lo0bits>
 800b5f8:	9900      	ldr	r1, [sp, #0]
 800b5fa:	b300      	cbz	r0, 800b63e <__d2b+0x82>
 800b5fc:	9a01      	ldr	r2, [sp, #4]
 800b5fe:	f1c0 0320 	rsb	r3, r0, #32
 800b602:	fa02 f303 	lsl.w	r3, r2, r3
 800b606:	430b      	orrs	r3, r1
 800b608:	40c2      	lsrs	r2, r0
 800b60a:	6163      	str	r3, [r4, #20]
 800b60c:	9201      	str	r2, [sp, #4]
 800b60e:	9b01      	ldr	r3, [sp, #4]
 800b610:	61a3      	str	r3, [r4, #24]
 800b612:	2b00      	cmp	r3, #0
 800b614:	bf14      	ite	ne
 800b616:	2202      	movne	r2, #2
 800b618:	2201      	moveq	r2, #1
 800b61a:	6122      	str	r2, [r4, #16]
 800b61c:	b1d5      	cbz	r5, 800b654 <__d2b+0x98>
 800b61e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b622:	4405      	add	r5, r0
 800b624:	f8c9 5000 	str.w	r5, [r9]
 800b628:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b62c:	f8c8 0000 	str.w	r0, [r8]
 800b630:	4620      	mov	r0, r4
 800b632:	b003      	add	sp, #12
 800b634:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b638:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b63c:	e7d5      	b.n	800b5ea <__d2b+0x2e>
 800b63e:	6161      	str	r1, [r4, #20]
 800b640:	e7e5      	b.n	800b60e <__d2b+0x52>
 800b642:	a801      	add	r0, sp, #4
 800b644:	f7ff fd5a 	bl	800b0fc <__lo0bits>
 800b648:	9b01      	ldr	r3, [sp, #4]
 800b64a:	6163      	str	r3, [r4, #20]
 800b64c:	2201      	movs	r2, #1
 800b64e:	6122      	str	r2, [r4, #16]
 800b650:	3020      	adds	r0, #32
 800b652:	e7e3      	b.n	800b61c <__d2b+0x60>
 800b654:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b658:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b65c:	f8c9 0000 	str.w	r0, [r9]
 800b660:	6918      	ldr	r0, [r3, #16]
 800b662:	f7ff fd2b 	bl	800b0bc <__hi0bits>
 800b666:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b66a:	e7df      	b.n	800b62c <__d2b+0x70>
 800b66c:	0800c18f 	.word	0x0800c18f
 800b670:	0800c200 	.word	0x0800c200

0800b674 <_calloc_r>:
 800b674:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b676:	fba1 2402 	umull	r2, r4, r1, r2
 800b67a:	b94c      	cbnz	r4, 800b690 <_calloc_r+0x1c>
 800b67c:	4611      	mov	r1, r2
 800b67e:	9201      	str	r2, [sp, #4]
 800b680:	f000 f87a 	bl	800b778 <_malloc_r>
 800b684:	9a01      	ldr	r2, [sp, #4]
 800b686:	4605      	mov	r5, r0
 800b688:	b930      	cbnz	r0, 800b698 <_calloc_r+0x24>
 800b68a:	4628      	mov	r0, r5
 800b68c:	b003      	add	sp, #12
 800b68e:	bd30      	pop	{r4, r5, pc}
 800b690:	220c      	movs	r2, #12
 800b692:	6002      	str	r2, [r0, #0]
 800b694:	2500      	movs	r5, #0
 800b696:	e7f8      	b.n	800b68a <_calloc_r+0x16>
 800b698:	4621      	mov	r1, r4
 800b69a:	f7fd fe75 	bl	8009388 <memset>
 800b69e:	e7f4      	b.n	800b68a <_calloc_r+0x16>

0800b6a0 <_free_r>:
 800b6a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b6a2:	2900      	cmp	r1, #0
 800b6a4:	d044      	beq.n	800b730 <_free_r+0x90>
 800b6a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6aa:	9001      	str	r0, [sp, #4]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	f1a1 0404 	sub.w	r4, r1, #4
 800b6b2:	bfb8      	it	lt
 800b6b4:	18e4      	addlt	r4, r4, r3
 800b6b6:	f000 fb19 	bl	800bcec <__malloc_lock>
 800b6ba:	4a1e      	ldr	r2, [pc, #120]	; (800b734 <_free_r+0x94>)
 800b6bc:	9801      	ldr	r0, [sp, #4]
 800b6be:	6813      	ldr	r3, [r2, #0]
 800b6c0:	b933      	cbnz	r3, 800b6d0 <_free_r+0x30>
 800b6c2:	6063      	str	r3, [r4, #4]
 800b6c4:	6014      	str	r4, [r2, #0]
 800b6c6:	b003      	add	sp, #12
 800b6c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b6cc:	f000 bb14 	b.w	800bcf8 <__malloc_unlock>
 800b6d0:	42a3      	cmp	r3, r4
 800b6d2:	d908      	bls.n	800b6e6 <_free_r+0x46>
 800b6d4:	6825      	ldr	r5, [r4, #0]
 800b6d6:	1961      	adds	r1, r4, r5
 800b6d8:	428b      	cmp	r3, r1
 800b6da:	bf01      	itttt	eq
 800b6dc:	6819      	ldreq	r1, [r3, #0]
 800b6de:	685b      	ldreq	r3, [r3, #4]
 800b6e0:	1949      	addeq	r1, r1, r5
 800b6e2:	6021      	streq	r1, [r4, #0]
 800b6e4:	e7ed      	b.n	800b6c2 <_free_r+0x22>
 800b6e6:	461a      	mov	r2, r3
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	b10b      	cbz	r3, 800b6f0 <_free_r+0x50>
 800b6ec:	42a3      	cmp	r3, r4
 800b6ee:	d9fa      	bls.n	800b6e6 <_free_r+0x46>
 800b6f0:	6811      	ldr	r1, [r2, #0]
 800b6f2:	1855      	adds	r5, r2, r1
 800b6f4:	42a5      	cmp	r5, r4
 800b6f6:	d10b      	bne.n	800b710 <_free_r+0x70>
 800b6f8:	6824      	ldr	r4, [r4, #0]
 800b6fa:	4421      	add	r1, r4
 800b6fc:	1854      	adds	r4, r2, r1
 800b6fe:	42a3      	cmp	r3, r4
 800b700:	6011      	str	r1, [r2, #0]
 800b702:	d1e0      	bne.n	800b6c6 <_free_r+0x26>
 800b704:	681c      	ldr	r4, [r3, #0]
 800b706:	685b      	ldr	r3, [r3, #4]
 800b708:	6053      	str	r3, [r2, #4]
 800b70a:	4421      	add	r1, r4
 800b70c:	6011      	str	r1, [r2, #0]
 800b70e:	e7da      	b.n	800b6c6 <_free_r+0x26>
 800b710:	d902      	bls.n	800b718 <_free_r+0x78>
 800b712:	230c      	movs	r3, #12
 800b714:	6003      	str	r3, [r0, #0]
 800b716:	e7d6      	b.n	800b6c6 <_free_r+0x26>
 800b718:	6825      	ldr	r5, [r4, #0]
 800b71a:	1961      	adds	r1, r4, r5
 800b71c:	428b      	cmp	r3, r1
 800b71e:	bf04      	itt	eq
 800b720:	6819      	ldreq	r1, [r3, #0]
 800b722:	685b      	ldreq	r3, [r3, #4]
 800b724:	6063      	str	r3, [r4, #4]
 800b726:	bf04      	itt	eq
 800b728:	1949      	addeq	r1, r1, r5
 800b72a:	6021      	streq	r1, [r4, #0]
 800b72c:	6054      	str	r4, [r2, #4]
 800b72e:	e7ca      	b.n	800b6c6 <_free_r+0x26>
 800b730:	b003      	add	sp, #12
 800b732:	bd30      	pop	{r4, r5, pc}
 800b734:	20000600 	.word	0x20000600

0800b738 <sbrk_aligned>:
 800b738:	b570      	push	{r4, r5, r6, lr}
 800b73a:	4e0e      	ldr	r6, [pc, #56]	; (800b774 <sbrk_aligned+0x3c>)
 800b73c:	460c      	mov	r4, r1
 800b73e:	6831      	ldr	r1, [r6, #0]
 800b740:	4605      	mov	r5, r0
 800b742:	b911      	cbnz	r1, 800b74a <sbrk_aligned+0x12>
 800b744:	f000 f9e6 	bl	800bb14 <_sbrk_r>
 800b748:	6030      	str	r0, [r6, #0]
 800b74a:	4621      	mov	r1, r4
 800b74c:	4628      	mov	r0, r5
 800b74e:	f000 f9e1 	bl	800bb14 <_sbrk_r>
 800b752:	1c43      	adds	r3, r0, #1
 800b754:	d00a      	beq.n	800b76c <sbrk_aligned+0x34>
 800b756:	1cc4      	adds	r4, r0, #3
 800b758:	f024 0403 	bic.w	r4, r4, #3
 800b75c:	42a0      	cmp	r0, r4
 800b75e:	d007      	beq.n	800b770 <sbrk_aligned+0x38>
 800b760:	1a21      	subs	r1, r4, r0
 800b762:	4628      	mov	r0, r5
 800b764:	f000 f9d6 	bl	800bb14 <_sbrk_r>
 800b768:	3001      	adds	r0, #1
 800b76a:	d101      	bne.n	800b770 <sbrk_aligned+0x38>
 800b76c:	f04f 34ff 	mov.w	r4, #4294967295
 800b770:	4620      	mov	r0, r4
 800b772:	bd70      	pop	{r4, r5, r6, pc}
 800b774:	20000604 	.word	0x20000604

0800b778 <_malloc_r>:
 800b778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b77c:	1ccd      	adds	r5, r1, #3
 800b77e:	f025 0503 	bic.w	r5, r5, #3
 800b782:	3508      	adds	r5, #8
 800b784:	2d0c      	cmp	r5, #12
 800b786:	bf38      	it	cc
 800b788:	250c      	movcc	r5, #12
 800b78a:	2d00      	cmp	r5, #0
 800b78c:	4607      	mov	r7, r0
 800b78e:	db01      	blt.n	800b794 <_malloc_r+0x1c>
 800b790:	42a9      	cmp	r1, r5
 800b792:	d905      	bls.n	800b7a0 <_malloc_r+0x28>
 800b794:	230c      	movs	r3, #12
 800b796:	603b      	str	r3, [r7, #0]
 800b798:	2600      	movs	r6, #0
 800b79a:	4630      	mov	r0, r6
 800b79c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7a0:	4e2e      	ldr	r6, [pc, #184]	; (800b85c <_malloc_r+0xe4>)
 800b7a2:	f000 faa3 	bl	800bcec <__malloc_lock>
 800b7a6:	6833      	ldr	r3, [r6, #0]
 800b7a8:	461c      	mov	r4, r3
 800b7aa:	bb34      	cbnz	r4, 800b7fa <_malloc_r+0x82>
 800b7ac:	4629      	mov	r1, r5
 800b7ae:	4638      	mov	r0, r7
 800b7b0:	f7ff ffc2 	bl	800b738 <sbrk_aligned>
 800b7b4:	1c43      	adds	r3, r0, #1
 800b7b6:	4604      	mov	r4, r0
 800b7b8:	d14d      	bne.n	800b856 <_malloc_r+0xde>
 800b7ba:	6834      	ldr	r4, [r6, #0]
 800b7bc:	4626      	mov	r6, r4
 800b7be:	2e00      	cmp	r6, #0
 800b7c0:	d140      	bne.n	800b844 <_malloc_r+0xcc>
 800b7c2:	6823      	ldr	r3, [r4, #0]
 800b7c4:	4631      	mov	r1, r6
 800b7c6:	4638      	mov	r0, r7
 800b7c8:	eb04 0803 	add.w	r8, r4, r3
 800b7cc:	f000 f9a2 	bl	800bb14 <_sbrk_r>
 800b7d0:	4580      	cmp	r8, r0
 800b7d2:	d13a      	bne.n	800b84a <_malloc_r+0xd2>
 800b7d4:	6821      	ldr	r1, [r4, #0]
 800b7d6:	3503      	adds	r5, #3
 800b7d8:	1a6d      	subs	r5, r5, r1
 800b7da:	f025 0503 	bic.w	r5, r5, #3
 800b7de:	3508      	adds	r5, #8
 800b7e0:	2d0c      	cmp	r5, #12
 800b7e2:	bf38      	it	cc
 800b7e4:	250c      	movcc	r5, #12
 800b7e6:	4629      	mov	r1, r5
 800b7e8:	4638      	mov	r0, r7
 800b7ea:	f7ff ffa5 	bl	800b738 <sbrk_aligned>
 800b7ee:	3001      	adds	r0, #1
 800b7f0:	d02b      	beq.n	800b84a <_malloc_r+0xd2>
 800b7f2:	6823      	ldr	r3, [r4, #0]
 800b7f4:	442b      	add	r3, r5
 800b7f6:	6023      	str	r3, [r4, #0]
 800b7f8:	e00e      	b.n	800b818 <_malloc_r+0xa0>
 800b7fa:	6822      	ldr	r2, [r4, #0]
 800b7fc:	1b52      	subs	r2, r2, r5
 800b7fe:	d41e      	bmi.n	800b83e <_malloc_r+0xc6>
 800b800:	2a0b      	cmp	r2, #11
 800b802:	d916      	bls.n	800b832 <_malloc_r+0xba>
 800b804:	1961      	adds	r1, r4, r5
 800b806:	42a3      	cmp	r3, r4
 800b808:	6025      	str	r5, [r4, #0]
 800b80a:	bf18      	it	ne
 800b80c:	6059      	strne	r1, [r3, #4]
 800b80e:	6863      	ldr	r3, [r4, #4]
 800b810:	bf08      	it	eq
 800b812:	6031      	streq	r1, [r6, #0]
 800b814:	5162      	str	r2, [r4, r5]
 800b816:	604b      	str	r3, [r1, #4]
 800b818:	4638      	mov	r0, r7
 800b81a:	f104 060b 	add.w	r6, r4, #11
 800b81e:	f000 fa6b 	bl	800bcf8 <__malloc_unlock>
 800b822:	f026 0607 	bic.w	r6, r6, #7
 800b826:	1d23      	adds	r3, r4, #4
 800b828:	1af2      	subs	r2, r6, r3
 800b82a:	d0b6      	beq.n	800b79a <_malloc_r+0x22>
 800b82c:	1b9b      	subs	r3, r3, r6
 800b82e:	50a3      	str	r3, [r4, r2]
 800b830:	e7b3      	b.n	800b79a <_malloc_r+0x22>
 800b832:	6862      	ldr	r2, [r4, #4]
 800b834:	42a3      	cmp	r3, r4
 800b836:	bf0c      	ite	eq
 800b838:	6032      	streq	r2, [r6, #0]
 800b83a:	605a      	strne	r2, [r3, #4]
 800b83c:	e7ec      	b.n	800b818 <_malloc_r+0xa0>
 800b83e:	4623      	mov	r3, r4
 800b840:	6864      	ldr	r4, [r4, #4]
 800b842:	e7b2      	b.n	800b7aa <_malloc_r+0x32>
 800b844:	4634      	mov	r4, r6
 800b846:	6876      	ldr	r6, [r6, #4]
 800b848:	e7b9      	b.n	800b7be <_malloc_r+0x46>
 800b84a:	230c      	movs	r3, #12
 800b84c:	603b      	str	r3, [r7, #0]
 800b84e:	4638      	mov	r0, r7
 800b850:	f000 fa52 	bl	800bcf8 <__malloc_unlock>
 800b854:	e7a1      	b.n	800b79a <_malloc_r+0x22>
 800b856:	6025      	str	r5, [r4, #0]
 800b858:	e7de      	b.n	800b818 <_malloc_r+0xa0>
 800b85a:	bf00      	nop
 800b85c:	20000600 	.word	0x20000600

0800b860 <__sfputc_r>:
 800b860:	6893      	ldr	r3, [r2, #8]
 800b862:	3b01      	subs	r3, #1
 800b864:	2b00      	cmp	r3, #0
 800b866:	b410      	push	{r4}
 800b868:	6093      	str	r3, [r2, #8]
 800b86a:	da08      	bge.n	800b87e <__sfputc_r+0x1e>
 800b86c:	6994      	ldr	r4, [r2, #24]
 800b86e:	42a3      	cmp	r3, r4
 800b870:	db01      	blt.n	800b876 <__sfputc_r+0x16>
 800b872:	290a      	cmp	r1, #10
 800b874:	d103      	bne.n	800b87e <__sfputc_r+0x1e>
 800b876:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b87a:	f7fe ba0f 	b.w	8009c9c <__swbuf_r>
 800b87e:	6813      	ldr	r3, [r2, #0]
 800b880:	1c58      	adds	r0, r3, #1
 800b882:	6010      	str	r0, [r2, #0]
 800b884:	7019      	strb	r1, [r3, #0]
 800b886:	4608      	mov	r0, r1
 800b888:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b88c:	4770      	bx	lr

0800b88e <__sfputs_r>:
 800b88e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b890:	4606      	mov	r6, r0
 800b892:	460f      	mov	r7, r1
 800b894:	4614      	mov	r4, r2
 800b896:	18d5      	adds	r5, r2, r3
 800b898:	42ac      	cmp	r4, r5
 800b89a:	d101      	bne.n	800b8a0 <__sfputs_r+0x12>
 800b89c:	2000      	movs	r0, #0
 800b89e:	e007      	b.n	800b8b0 <__sfputs_r+0x22>
 800b8a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8a4:	463a      	mov	r2, r7
 800b8a6:	4630      	mov	r0, r6
 800b8a8:	f7ff ffda 	bl	800b860 <__sfputc_r>
 800b8ac:	1c43      	adds	r3, r0, #1
 800b8ae:	d1f3      	bne.n	800b898 <__sfputs_r+0xa>
 800b8b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b8b4 <_vfiprintf_r>:
 800b8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8b8:	460d      	mov	r5, r1
 800b8ba:	b09d      	sub	sp, #116	; 0x74
 800b8bc:	4614      	mov	r4, r2
 800b8be:	4698      	mov	r8, r3
 800b8c0:	4606      	mov	r6, r0
 800b8c2:	b118      	cbz	r0, 800b8cc <_vfiprintf_r+0x18>
 800b8c4:	6983      	ldr	r3, [r0, #24]
 800b8c6:	b90b      	cbnz	r3, 800b8cc <_vfiprintf_r+0x18>
 800b8c8:	f7ff fa3e 	bl	800ad48 <__sinit>
 800b8cc:	4b89      	ldr	r3, [pc, #548]	; (800baf4 <_vfiprintf_r+0x240>)
 800b8ce:	429d      	cmp	r5, r3
 800b8d0:	d11b      	bne.n	800b90a <_vfiprintf_r+0x56>
 800b8d2:	6875      	ldr	r5, [r6, #4]
 800b8d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8d6:	07d9      	lsls	r1, r3, #31
 800b8d8:	d405      	bmi.n	800b8e6 <_vfiprintf_r+0x32>
 800b8da:	89ab      	ldrh	r3, [r5, #12]
 800b8dc:	059a      	lsls	r2, r3, #22
 800b8de:	d402      	bmi.n	800b8e6 <_vfiprintf_r+0x32>
 800b8e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8e2:	f7ff fad4 	bl	800ae8e <__retarget_lock_acquire_recursive>
 800b8e6:	89ab      	ldrh	r3, [r5, #12]
 800b8e8:	071b      	lsls	r3, r3, #28
 800b8ea:	d501      	bpl.n	800b8f0 <_vfiprintf_r+0x3c>
 800b8ec:	692b      	ldr	r3, [r5, #16]
 800b8ee:	b9eb      	cbnz	r3, 800b92c <_vfiprintf_r+0x78>
 800b8f0:	4629      	mov	r1, r5
 800b8f2:	4630      	mov	r0, r6
 800b8f4:	f7fe fa24 	bl	8009d40 <__swsetup_r>
 800b8f8:	b1c0      	cbz	r0, 800b92c <_vfiprintf_r+0x78>
 800b8fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8fc:	07dc      	lsls	r4, r3, #31
 800b8fe:	d50e      	bpl.n	800b91e <_vfiprintf_r+0x6a>
 800b900:	f04f 30ff 	mov.w	r0, #4294967295
 800b904:	b01d      	add	sp, #116	; 0x74
 800b906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b90a:	4b7b      	ldr	r3, [pc, #492]	; (800baf8 <_vfiprintf_r+0x244>)
 800b90c:	429d      	cmp	r5, r3
 800b90e:	d101      	bne.n	800b914 <_vfiprintf_r+0x60>
 800b910:	68b5      	ldr	r5, [r6, #8]
 800b912:	e7df      	b.n	800b8d4 <_vfiprintf_r+0x20>
 800b914:	4b79      	ldr	r3, [pc, #484]	; (800bafc <_vfiprintf_r+0x248>)
 800b916:	429d      	cmp	r5, r3
 800b918:	bf08      	it	eq
 800b91a:	68f5      	ldreq	r5, [r6, #12]
 800b91c:	e7da      	b.n	800b8d4 <_vfiprintf_r+0x20>
 800b91e:	89ab      	ldrh	r3, [r5, #12]
 800b920:	0598      	lsls	r0, r3, #22
 800b922:	d4ed      	bmi.n	800b900 <_vfiprintf_r+0x4c>
 800b924:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b926:	f7ff fab3 	bl	800ae90 <__retarget_lock_release_recursive>
 800b92a:	e7e9      	b.n	800b900 <_vfiprintf_r+0x4c>
 800b92c:	2300      	movs	r3, #0
 800b92e:	9309      	str	r3, [sp, #36]	; 0x24
 800b930:	2320      	movs	r3, #32
 800b932:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b936:	f8cd 800c 	str.w	r8, [sp, #12]
 800b93a:	2330      	movs	r3, #48	; 0x30
 800b93c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bb00 <_vfiprintf_r+0x24c>
 800b940:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b944:	f04f 0901 	mov.w	r9, #1
 800b948:	4623      	mov	r3, r4
 800b94a:	469a      	mov	sl, r3
 800b94c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b950:	b10a      	cbz	r2, 800b956 <_vfiprintf_r+0xa2>
 800b952:	2a25      	cmp	r2, #37	; 0x25
 800b954:	d1f9      	bne.n	800b94a <_vfiprintf_r+0x96>
 800b956:	ebba 0b04 	subs.w	fp, sl, r4
 800b95a:	d00b      	beq.n	800b974 <_vfiprintf_r+0xc0>
 800b95c:	465b      	mov	r3, fp
 800b95e:	4622      	mov	r2, r4
 800b960:	4629      	mov	r1, r5
 800b962:	4630      	mov	r0, r6
 800b964:	f7ff ff93 	bl	800b88e <__sfputs_r>
 800b968:	3001      	adds	r0, #1
 800b96a:	f000 80aa 	beq.w	800bac2 <_vfiprintf_r+0x20e>
 800b96e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b970:	445a      	add	r2, fp
 800b972:	9209      	str	r2, [sp, #36]	; 0x24
 800b974:	f89a 3000 	ldrb.w	r3, [sl]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	f000 80a2 	beq.w	800bac2 <_vfiprintf_r+0x20e>
 800b97e:	2300      	movs	r3, #0
 800b980:	f04f 32ff 	mov.w	r2, #4294967295
 800b984:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b988:	f10a 0a01 	add.w	sl, sl, #1
 800b98c:	9304      	str	r3, [sp, #16]
 800b98e:	9307      	str	r3, [sp, #28]
 800b990:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b994:	931a      	str	r3, [sp, #104]	; 0x68
 800b996:	4654      	mov	r4, sl
 800b998:	2205      	movs	r2, #5
 800b99a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b99e:	4858      	ldr	r0, [pc, #352]	; (800bb00 <_vfiprintf_r+0x24c>)
 800b9a0:	f7f4 fbf6 	bl	8000190 <memchr>
 800b9a4:	9a04      	ldr	r2, [sp, #16]
 800b9a6:	b9d8      	cbnz	r0, 800b9e0 <_vfiprintf_r+0x12c>
 800b9a8:	06d1      	lsls	r1, r2, #27
 800b9aa:	bf44      	itt	mi
 800b9ac:	2320      	movmi	r3, #32
 800b9ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9b2:	0713      	lsls	r3, r2, #28
 800b9b4:	bf44      	itt	mi
 800b9b6:	232b      	movmi	r3, #43	; 0x2b
 800b9b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9bc:	f89a 3000 	ldrb.w	r3, [sl]
 800b9c0:	2b2a      	cmp	r3, #42	; 0x2a
 800b9c2:	d015      	beq.n	800b9f0 <_vfiprintf_r+0x13c>
 800b9c4:	9a07      	ldr	r2, [sp, #28]
 800b9c6:	4654      	mov	r4, sl
 800b9c8:	2000      	movs	r0, #0
 800b9ca:	f04f 0c0a 	mov.w	ip, #10
 800b9ce:	4621      	mov	r1, r4
 800b9d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9d4:	3b30      	subs	r3, #48	; 0x30
 800b9d6:	2b09      	cmp	r3, #9
 800b9d8:	d94e      	bls.n	800ba78 <_vfiprintf_r+0x1c4>
 800b9da:	b1b0      	cbz	r0, 800ba0a <_vfiprintf_r+0x156>
 800b9dc:	9207      	str	r2, [sp, #28]
 800b9de:	e014      	b.n	800ba0a <_vfiprintf_r+0x156>
 800b9e0:	eba0 0308 	sub.w	r3, r0, r8
 800b9e4:	fa09 f303 	lsl.w	r3, r9, r3
 800b9e8:	4313      	orrs	r3, r2
 800b9ea:	9304      	str	r3, [sp, #16]
 800b9ec:	46a2      	mov	sl, r4
 800b9ee:	e7d2      	b.n	800b996 <_vfiprintf_r+0xe2>
 800b9f0:	9b03      	ldr	r3, [sp, #12]
 800b9f2:	1d19      	adds	r1, r3, #4
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	9103      	str	r1, [sp, #12]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	bfbb      	ittet	lt
 800b9fc:	425b      	neglt	r3, r3
 800b9fe:	f042 0202 	orrlt.w	r2, r2, #2
 800ba02:	9307      	strge	r3, [sp, #28]
 800ba04:	9307      	strlt	r3, [sp, #28]
 800ba06:	bfb8      	it	lt
 800ba08:	9204      	strlt	r2, [sp, #16]
 800ba0a:	7823      	ldrb	r3, [r4, #0]
 800ba0c:	2b2e      	cmp	r3, #46	; 0x2e
 800ba0e:	d10c      	bne.n	800ba2a <_vfiprintf_r+0x176>
 800ba10:	7863      	ldrb	r3, [r4, #1]
 800ba12:	2b2a      	cmp	r3, #42	; 0x2a
 800ba14:	d135      	bne.n	800ba82 <_vfiprintf_r+0x1ce>
 800ba16:	9b03      	ldr	r3, [sp, #12]
 800ba18:	1d1a      	adds	r2, r3, #4
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	9203      	str	r2, [sp, #12]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	bfb8      	it	lt
 800ba22:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba26:	3402      	adds	r4, #2
 800ba28:	9305      	str	r3, [sp, #20]
 800ba2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bb10 <_vfiprintf_r+0x25c>
 800ba2e:	7821      	ldrb	r1, [r4, #0]
 800ba30:	2203      	movs	r2, #3
 800ba32:	4650      	mov	r0, sl
 800ba34:	f7f4 fbac 	bl	8000190 <memchr>
 800ba38:	b140      	cbz	r0, 800ba4c <_vfiprintf_r+0x198>
 800ba3a:	2340      	movs	r3, #64	; 0x40
 800ba3c:	eba0 000a 	sub.w	r0, r0, sl
 800ba40:	fa03 f000 	lsl.w	r0, r3, r0
 800ba44:	9b04      	ldr	r3, [sp, #16]
 800ba46:	4303      	orrs	r3, r0
 800ba48:	3401      	adds	r4, #1
 800ba4a:	9304      	str	r3, [sp, #16]
 800ba4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba50:	482c      	ldr	r0, [pc, #176]	; (800bb04 <_vfiprintf_r+0x250>)
 800ba52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba56:	2206      	movs	r2, #6
 800ba58:	f7f4 fb9a 	bl	8000190 <memchr>
 800ba5c:	2800      	cmp	r0, #0
 800ba5e:	d03f      	beq.n	800bae0 <_vfiprintf_r+0x22c>
 800ba60:	4b29      	ldr	r3, [pc, #164]	; (800bb08 <_vfiprintf_r+0x254>)
 800ba62:	bb1b      	cbnz	r3, 800baac <_vfiprintf_r+0x1f8>
 800ba64:	9b03      	ldr	r3, [sp, #12]
 800ba66:	3307      	adds	r3, #7
 800ba68:	f023 0307 	bic.w	r3, r3, #7
 800ba6c:	3308      	adds	r3, #8
 800ba6e:	9303      	str	r3, [sp, #12]
 800ba70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba72:	443b      	add	r3, r7
 800ba74:	9309      	str	r3, [sp, #36]	; 0x24
 800ba76:	e767      	b.n	800b948 <_vfiprintf_r+0x94>
 800ba78:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba7c:	460c      	mov	r4, r1
 800ba7e:	2001      	movs	r0, #1
 800ba80:	e7a5      	b.n	800b9ce <_vfiprintf_r+0x11a>
 800ba82:	2300      	movs	r3, #0
 800ba84:	3401      	adds	r4, #1
 800ba86:	9305      	str	r3, [sp, #20]
 800ba88:	4619      	mov	r1, r3
 800ba8a:	f04f 0c0a 	mov.w	ip, #10
 800ba8e:	4620      	mov	r0, r4
 800ba90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba94:	3a30      	subs	r2, #48	; 0x30
 800ba96:	2a09      	cmp	r2, #9
 800ba98:	d903      	bls.n	800baa2 <_vfiprintf_r+0x1ee>
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d0c5      	beq.n	800ba2a <_vfiprintf_r+0x176>
 800ba9e:	9105      	str	r1, [sp, #20]
 800baa0:	e7c3      	b.n	800ba2a <_vfiprintf_r+0x176>
 800baa2:	fb0c 2101 	mla	r1, ip, r1, r2
 800baa6:	4604      	mov	r4, r0
 800baa8:	2301      	movs	r3, #1
 800baaa:	e7f0      	b.n	800ba8e <_vfiprintf_r+0x1da>
 800baac:	ab03      	add	r3, sp, #12
 800baae:	9300      	str	r3, [sp, #0]
 800bab0:	462a      	mov	r2, r5
 800bab2:	4b16      	ldr	r3, [pc, #88]	; (800bb0c <_vfiprintf_r+0x258>)
 800bab4:	a904      	add	r1, sp, #16
 800bab6:	4630      	mov	r0, r6
 800bab8:	f7fd fd0e 	bl	80094d8 <_printf_float>
 800babc:	4607      	mov	r7, r0
 800babe:	1c78      	adds	r0, r7, #1
 800bac0:	d1d6      	bne.n	800ba70 <_vfiprintf_r+0x1bc>
 800bac2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bac4:	07d9      	lsls	r1, r3, #31
 800bac6:	d405      	bmi.n	800bad4 <_vfiprintf_r+0x220>
 800bac8:	89ab      	ldrh	r3, [r5, #12]
 800baca:	059a      	lsls	r2, r3, #22
 800bacc:	d402      	bmi.n	800bad4 <_vfiprintf_r+0x220>
 800bace:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bad0:	f7ff f9de 	bl	800ae90 <__retarget_lock_release_recursive>
 800bad4:	89ab      	ldrh	r3, [r5, #12]
 800bad6:	065b      	lsls	r3, r3, #25
 800bad8:	f53f af12 	bmi.w	800b900 <_vfiprintf_r+0x4c>
 800badc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bade:	e711      	b.n	800b904 <_vfiprintf_r+0x50>
 800bae0:	ab03      	add	r3, sp, #12
 800bae2:	9300      	str	r3, [sp, #0]
 800bae4:	462a      	mov	r2, r5
 800bae6:	4b09      	ldr	r3, [pc, #36]	; (800bb0c <_vfiprintf_r+0x258>)
 800bae8:	a904      	add	r1, sp, #16
 800baea:	4630      	mov	r0, r6
 800baec:	f7fd ff98 	bl	8009a20 <_printf_i>
 800baf0:	e7e4      	b.n	800babc <_vfiprintf_r+0x208>
 800baf2:	bf00      	nop
 800baf4:	0800c1c0 	.word	0x0800c1c0
 800baf8:	0800c1e0 	.word	0x0800c1e0
 800bafc:	0800c1a0 	.word	0x0800c1a0
 800bb00:	0800c35c 	.word	0x0800c35c
 800bb04:	0800c366 	.word	0x0800c366
 800bb08:	080094d9 	.word	0x080094d9
 800bb0c:	0800b88f 	.word	0x0800b88f
 800bb10:	0800c362 	.word	0x0800c362

0800bb14 <_sbrk_r>:
 800bb14:	b538      	push	{r3, r4, r5, lr}
 800bb16:	4d06      	ldr	r5, [pc, #24]	; (800bb30 <_sbrk_r+0x1c>)
 800bb18:	2300      	movs	r3, #0
 800bb1a:	4604      	mov	r4, r0
 800bb1c:	4608      	mov	r0, r1
 800bb1e:	602b      	str	r3, [r5, #0]
 800bb20:	f7f6 ff4a 	bl	80029b8 <_sbrk>
 800bb24:	1c43      	adds	r3, r0, #1
 800bb26:	d102      	bne.n	800bb2e <_sbrk_r+0x1a>
 800bb28:	682b      	ldr	r3, [r5, #0]
 800bb2a:	b103      	cbz	r3, 800bb2e <_sbrk_r+0x1a>
 800bb2c:	6023      	str	r3, [r4, #0]
 800bb2e:	bd38      	pop	{r3, r4, r5, pc}
 800bb30:	20000608 	.word	0x20000608

0800bb34 <__sread>:
 800bb34:	b510      	push	{r4, lr}
 800bb36:	460c      	mov	r4, r1
 800bb38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb3c:	f000 f8e2 	bl	800bd04 <_read_r>
 800bb40:	2800      	cmp	r0, #0
 800bb42:	bfab      	itete	ge
 800bb44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bb46:	89a3      	ldrhlt	r3, [r4, #12]
 800bb48:	181b      	addge	r3, r3, r0
 800bb4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bb4e:	bfac      	ite	ge
 800bb50:	6563      	strge	r3, [r4, #84]	; 0x54
 800bb52:	81a3      	strhlt	r3, [r4, #12]
 800bb54:	bd10      	pop	{r4, pc}

0800bb56 <__swrite>:
 800bb56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb5a:	461f      	mov	r7, r3
 800bb5c:	898b      	ldrh	r3, [r1, #12]
 800bb5e:	05db      	lsls	r3, r3, #23
 800bb60:	4605      	mov	r5, r0
 800bb62:	460c      	mov	r4, r1
 800bb64:	4616      	mov	r6, r2
 800bb66:	d505      	bpl.n	800bb74 <__swrite+0x1e>
 800bb68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb6c:	2302      	movs	r3, #2
 800bb6e:	2200      	movs	r2, #0
 800bb70:	f000 f898 	bl	800bca4 <_lseek_r>
 800bb74:	89a3      	ldrh	r3, [r4, #12]
 800bb76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bb7e:	81a3      	strh	r3, [r4, #12]
 800bb80:	4632      	mov	r2, r6
 800bb82:	463b      	mov	r3, r7
 800bb84:	4628      	mov	r0, r5
 800bb86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb8a:	f000 b817 	b.w	800bbbc <_write_r>

0800bb8e <__sseek>:
 800bb8e:	b510      	push	{r4, lr}
 800bb90:	460c      	mov	r4, r1
 800bb92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb96:	f000 f885 	bl	800bca4 <_lseek_r>
 800bb9a:	1c43      	adds	r3, r0, #1
 800bb9c:	89a3      	ldrh	r3, [r4, #12]
 800bb9e:	bf15      	itete	ne
 800bba0:	6560      	strne	r0, [r4, #84]	; 0x54
 800bba2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bba6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bbaa:	81a3      	strheq	r3, [r4, #12]
 800bbac:	bf18      	it	ne
 800bbae:	81a3      	strhne	r3, [r4, #12]
 800bbb0:	bd10      	pop	{r4, pc}

0800bbb2 <__sclose>:
 800bbb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbb6:	f000 b831 	b.w	800bc1c <_close_r>
	...

0800bbbc <_write_r>:
 800bbbc:	b538      	push	{r3, r4, r5, lr}
 800bbbe:	4d07      	ldr	r5, [pc, #28]	; (800bbdc <_write_r+0x20>)
 800bbc0:	4604      	mov	r4, r0
 800bbc2:	4608      	mov	r0, r1
 800bbc4:	4611      	mov	r1, r2
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	602a      	str	r2, [r5, #0]
 800bbca:	461a      	mov	r2, r3
 800bbcc:	f7f6 fea4 	bl	8002918 <_write>
 800bbd0:	1c43      	adds	r3, r0, #1
 800bbd2:	d102      	bne.n	800bbda <_write_r+0x1e>
 800bbd4:	682b      	ldr	r3, [r5, #0]
 800bbd6:	b103      	cbz	r3, 800bbda <_write_r+0x1e>
 800bbd8:	6023      	str	r3, [r4, #0]
 800bbda:	bd38      	pop	{r3, r4, r5, pc}
 800bbdc:	20000608 	.word	0x20000608

0800bbe0 <__assert_func>:
 800bbe0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bbe2:	4614      	mov	r4, r2
 800bbe4:	461a      	mov	r2, r3
 800bbe6:	4b09      	ldr	r3, [pc, #36]	; (800bc0c <__assert_func+0x2c>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	4605      	mov	r5, r0
 800bbec:	68d8      	ldr	r0, [r3, #12]
 800bbee:	b14c      	cbz	r4, 800bc04 <__assert_func+0x24>
 800bbf0:	4b07      	ldr	r3, [pc, #28]	; (800bc10 <__assert_func+0x30>)
 800bbf2:	9100      	str	r1, [sp, #0]
 800bbf4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bbf8:	4906      	ldr	r1, [pc, #24]	; (800bc14 <__assert_func+0x34>)
 800bbfa:	462b      	mov	r3, r5
 800bbfc:	f000 f81e 	bl	800bc3c <fiprintf>
 800bc00:	f000 f89f 	bl	800bd42 <abort>
 800bc04:	4b04      	ldr	r3, [pc, #16]	; (800bc18 <__assert_func+0x38>)
 800bc06:	461c      	mov	r4, r3
 800bc08:	e7f3      	b.n	800bbf2 <__assert_func+0x12>
 800bc0a:	bf00      	nop
 800bc0c:	20000024 	.word	0x20000024
 800bc10:	0800c36d 	.word	0x0800c36d
 800bc14:	0800c37a 	.word	0x0800c37a
 800bc18:	0800c3a8 	.word	0x0800c3a8

0800bc1c <_close_r>:
 800bc1c:	b538      	push	{r3, r4, r5, lr}
 800bc1e:	4d06      	ldr	r5, [pc, #24]	; (800bc38 <_close_r+0x1c>)
 800bc20:	2300      	movs	r3, #0
 800bc22:	4604      	mov	r4, r0
 800bc24:	4608      	mov	r0, r1
 800bc26:	602b      	str	r3, [r5, #0]
 800bc28:	f7f6 fe92 	bl	8002950 <_close>
 800bc2c:	1c43      	adds	r3, r0, #1
 800bc2e:	d102      	bne.n	800bc36 <_close_r+0x1a>
 800bc30:	682b      	ldr	r3, [r5, #0]
 800bc32:	b103      	cbz	r3, 800bc36 <_close_r+0x1a>
 800bc34:	6023      	str	r3, [r4, #0]
 800bc36:	bd38      	pop	{r3, r4, r5, pc}
 800bc38:	20000608 	.word	0x20000608

0800bc3c <fiprintf>:
 800bc3c:	b40e      	push	{r1, r2, r3}
 800bc3e:	b503      	push	{r0, r1, lr}
 800bc40:	4601      	mov	r1, r0
 800bc42:	ab03      	add	r3, sp, #12
 800bc44:	4805      	ldr	r0, [pc, #20]	; (800bc5c <fiprintf+0x20>)
 800bc46:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc4a:	6800      	ldr	r0, [r0, #0]
 800bc4c:	9301      	str	r3, [sp, #4]
 800bc4e:	f7ff fe31 	bl	800b8b4 <_vfiprintf_r>
 800bc52:	b002      	add	sp, #8
 800bc54:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc58:	b003      	add	sp, #12
 800bc5a:	4770      	bx	lr
 800bc5c:	20000024 	.word	0x20000024

0800bc60 <_fstat_r>:
 800bc60:	b538      	push	{r3, r4, r5, lr}
 800bc62:	4d07      	ldr	r5, [pc, #28]	; (800bc80 <_fstat_r+0x20>)
 800bc64:	2300      	movs	r3, #0
 800bc66:	4604      	mov	r4, r0
 800bc68:	4608      	mov	r0, r1
 800bc6a:	4611      	mov	r1, r2
 800bc6c:	602b      	str	r3, [r5, #0]
 800bc6e:	f7f6 fe7b 	bl	8002968 <_fstat>
 800bc72:	1c43      	adds	r3, r0, #1
 800bc74:	d102      	bne.n	800bc7c <_fstat_r+0x1c>
 800bc76:	682b      	ldr	r3, [r5, #0]
 800bc78:	b103      	cbz	r3, 800bc7c <_fstat_r+0x1c>
 800bc7a:	6023      	str	r3, [r4, #0]
 800bc7c:	bd38      	pop	{r3, r4, r5, pc}
 800bc7e:	bf00      	nop
 800bc80:	20000608 	.word	0x20000608

0800bc84 <_isatty_r>:
 800bc84:	b538      	push	{r3, r4, r5, lr}
 800bc86:	4d06      	ldr	r5, [pc, #24]	; (800bca0 <_isatty_r+0x1c>)
 800bc88:	2300      	movs	r3, #0
 800bc8a:	4604      	mov	r4, r0
 800bc8c:	4608      	mov	r0, r1
 800bc8e:	602b      	str	r3, [r5, #0]
 800bc90:	f7f6 fe7a 	bl	8002988 <_isatty>
 800bc94:	1c43      	adds	r3, r0, #1
 800bc96:	d102      	bne.n	800bc9e <_isatty_r+0x1a>
 800bc98:	682b      	ldr	r3, [r5, #0]
 800bc9a:	b103      	cbz	r3, 800bc9e <_isatty_r+0x1a>
 800bc9c:	6023      	str	r3, [r4, #0]
 800bc9e:	bd38      	pop	{r3, r4, r5, pc}
 800bca0:	20000608 	.word	0x20000608

0800bca4 <_lseek_r>:
 800bca4:	b538      	push	{r3, r4, r5, lr}
 800bca6:	4d07      	ldr	r5, [pc, #28]	; (800bcc4 <_lseek_r+0x20>)
 800bca8:	4604      	mov	r4, r0
 800bcaa:	4608      	mov	r0, r1
 800bcac:	4611      	mov	r1, r2
 800bcae:	2200      	movs	r2, #0
 800bcb0:	602a      	str	r2, [r5, #0]
 800bcb2:	461a      	mov	r2, r3
 800bcb4:	f7f6 fe73 	bl	800299e <_lseek>
 800bcb8:	1c43      	adds	r3, r0, #1
 800bcba:	d102      	bne.n	800bcc2 <_lseek_r+0x1e>
 800bcbc:	682b      	ldr	r3, [r5, #0]
 800bcbe:	b103      	cbz	r3, 800bcc2 <_lseek_r+0x1e>
 800bcc0:	6023      	str	r3, [r4, #0]
 800bcc2:	bd38      	pop	{r3, r4, r5, pc}
 800bcc4:	20000608 	.word	0x20000608

0800bcc8 <__ascii_mbtowc>:
 800bcc8:	b082      	sub	sp, #8
 800bcca:	b901      	cbnz	r1, 800bcce <__ascii_mbtowc+0x6>
 800bccc:	a901      	add	r1, sp, #4
 800bcce:	b142      	cbz	r2, 800bce2 <__ascii_mbtowc+0x1a>
 800bcd0:	b14b      	cbz	r3, 800bce6 <__ascii_mbtowc+0x1e>
 800bcd2:	7813      	ldrb	r3, [r2, #0]
 800bcd4:	600b      	str	r3, [r1, #0]
 800bcd6:	7812      	ldrb	r2, [r2, #0]
 800bcd8:	1e10      	subs	r0, r2, #0
 800bcda:	bf18      	it	ne
 800bcdc:	2001      	movne	r0, #1
 800bcde:	b002      	add	sp, #8
 800bce0:	4770      	bx	lr
 800bce2:	4610      	mov	r0, r2
 800bce4:	e7fb      	b.n	800bcde <__ascii_mbtowc+0x16>
 800bce6:	f06f 0001 	mvn.w	r0, #1
 800bcea:	e7f8      	b.n	800bcde <__ascii_mbtowc+0x16>

0800bcec <__malloc_lock>:
 800bcec:	4801      	ldr	r0, [pc, #4]	; (800bcf4 <__malloc_lock+0x8>)
 800bcee:	f7ff b8ce 	b.w	800ae8e <__retarget_lock_acquire_recursive>
 800bcf2:	bf00      	nop
 800bcf4:	200005fc 	.word	0x200005fc

0800bcf8 <__malloc_unlock>:
 800bcf8:	4801      	ldr	r0, [pc, #4]	; (800bd00 <__malloc_unlock+0x8>)
 800bcfa:	f7ff b8c9 	b.w	800ae90 <__retarget_lock_release_recursive>
 800bcfe:	bf00      	nop
 800bd00:	200005fc 	.word	0x200005fc

0800bd04 <_read_r>:
 800bd04:	b538      	push	{r3, r4, r5, lr}
 800bd06:	4d07      	ldr	r5, [pc, #28]	; (800bd24 <_read_r+0x20>)
 800bd08:	4604      	mov	r4, r0
 800bd0a:	4608      	mov	r0, r1
 800bd0c:	4611      	mov	r1, r2
 800bd0e:	2200      	movs	r2, #0
 800bd10:	602a      	str	r2, [r5, #0]
 800bd12:	461a      	mov	r2, r3
 800bd14:	f7f6 fde3 	bl	80028de <_read>
 800bd18:	1c43      	adds	r3, r0, #1
 800bd1a:	d102      	bne.n	800bd22 <_read_r+0x1e>
 800bd1c:	682b      	ldr	r3, [r5, #0]
 800bd1e:	b103      	cbz	r3, 800bd22 <_read_r+0x1e>
 800bd20:	6023      	str	r3, [r4, #0]
 800bd22:	bd38      	pop	{r3, r4, r5, pc}
 800bd24:	20000608 	.word	0x20000608

0800bd28 <__ascii_wctomb>:
 800bd28:	b149      	cbz	r1, 800bd3e <__ascii_wctomb+0x16>
 800bd2a:	2aff      	cmp	r2, #255	; 0xff
 800bd2c:	bf85      	ittet	hi
 800bd2e:	238a      	movhi	r3, #138	; 0x8a
 800bd30:	6003      	strhi	r3, [r0, #0]
 800bd32:	700a      	strbls	r2, [r1, #0]
 800bd34:	f04f 30ff 	movhi.w	r0, #4294967295
 800bd38:	bf98      	it	ls
 800bd3a:	2001      	movls	r0, #1
 800bd3c:	4770      	bx	lr
 800bd3e:	4608      	mov	r0, r1
 800bd40:	4770      	bx	lr

0800bd42 <abort>:
 800bd42:	b508      	push	{r3, lr}
 800bd44:	2006      	movs	r0, #6
 800bd46:	f000 f82b 	bl	800bda0 <raise>
 800bd4a:	2001      	movs	r0, #1
 800bd4c:	f7f6 fdbd 	bl	80028ca <_exit>

0800bd50 <_raise_r>:
 800bd50:	291f      	cmp	r1, #31
 800bd52:	b538      	push	{r3, r4, r5, lr}
 800bd54:	4604      	mov	r4, r0
 800bd56:	460d      	mov	r5, r1
 800bd58:	d904      	bls.n	800bd64 <_raise_r+0x14>
 800bd5a:	2316      	movs	r3, #22
 800bd5c:	6003      	str	r3, [r0, #0]
 800bd5e:	f04f 30ff 	mov.w	r0, #4294967295
 800bd62:	bd38      	pop	{r3, r4, r5, pc}
 800bd64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bd66:	b112      	cbz	r2, 800bd6e <_raise_r+0x1e>
 800bd68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bd6c:	b94b      	cbnz	r3, 800bd82 <_raise_r+0x32>
 800bd6e:	4620      	mov	r0, r4
 800bd70:	f000 f830 	bl	800bdd4 <_getpid_r>
 800bd74:	462a      	mov	r2, r5
 800bd76:	4601      	mov	r1, r0
 800bd78:	4620      	mov	r0, r4
 800bd7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd7e:	f000 b817 	b.w	800bdb0 <_kill_r>
 800bd82:	2b01      	cmp	r3, #1
 800bd84:	d00a      	beq.n	800bd9c <_raise_r+0x4c>
 800bd86:	1c59      	adds	r1, r3, #1
 800bd88:	d103      	bne.n	800bd92 <_raise_r+0x42>
 800bd8a:	2316      	movs	r3, #22
 800bd8c:	6003      	str	r3, [r0, #0]
 800bd8e:	2001      	movs	r0, #1
 800bd90:	e7e7      	b.n	800bd62 <_raise_r+0x12>
 800bd92:	2400      	movs	r4, #0
 800bd94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bd98:	4628      	mov	r0, r5
 800bd9a:	4798      	blx	r3
 800bd9c:	2000      	movs	r0, #0
 800bd9e:	e7e0      	b.n	800bd62 <_raise_r+0x12>

0800bda0 <raise>:
 800bda0:	4b02      	ldr	r3, [pc, #8]	; (800bdac <raise+0xc>)
 800bda2:	4601      	mov	r1, r0
 800bda4:	6818      	ldr	r0, [r3, #0]
 800bda6:	f7ff bfd3 	b.w	800bd50 <_raise_r>
 800bdaa:	bf00      	nop
 800bdac:	20000024 	.word	0x20000024

0800bdb0 <_kill_r>:
 800bdb0:	b538      	push	{r3, r4, r5, lr}
 800bdb2:	4d07      	ldr	r5, [pc, #28]	; (800bdd0 <_kill_r+0x20>)
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	4604      	mov	r4, r0
 800bdb8:	4608      	mov	r0, r1
 800bdba:	4611      	mov	r1, r2
 800bdbc:	602b      	str	r3, [r5, #0]
 800bdbe:	f7f6 fd74 	bl	80028aa <_kill>
 800bdc2:	1c43      	adds	r3, r0, #1
 800bdc4:	d102      	bne.n	800bdcc <_kill_r+0x1c>
 800bdc6:	682b      	ldr	r3, [r5, #0]
 800bdc8:	b103      	cbz	r3, 800bdcc <_kill_r+0x1c>
 800bdca:	6023      	str	r3, [r4, #0]
 800bdcc:	bd38      	pop	{r3, r4, r5, pc}
 800bdce:	bf00      	nop
 800bdd0:	20000608 	.word	0x20000608

0800bdd4 <_getpid_r>:
 800bdd4:	f7f6 bd61 	b.w	800289a <_getpid>

0800bdd8 <_init>:
 800bdd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdda:	bf00      	nop
 800bddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdde:	bc08      	pop	{r3}
 800bde0:	469e      	mov	lr, r3
 800bde2:	4770      	bx	lr

0800bde4 <_fini>:
 800bde4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bde6:	bf00      	nop
 800bde8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdea:	bc08      	pop	{r3}
 800bdec:	469e      	mov	lr, r3
 800bdee:	4770      	bx	lr
